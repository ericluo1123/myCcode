

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Oct 27 15:37:38 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	intentry,global,class=CODE,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text136,local,class=CODE,merge=1,delta=2
   158                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   163                           	dabs	1,0x7E,2
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  011D                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  018E                     	;# 
   216  0191                     	;# 
   217  0191                     	;# 
   218  0192                     	;# 
   219  0193                     	;# 
   220  0193                     	;# 
   221  0194                     	;# 
   222  0195                     	;# 
   223  0196                     	;# 
   224  0197                     	;# 
   225  0199                     	;# 
   226  019A                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019C                     	;# 
   232  019C                     	;# 
   233  019D                     	;# 
   234  019E                     	;# 
   235  019F                     	;# 
   236  020D                     	;# 
   237  0210                     	;# 
   238  0211                     	;# 
   239  0211                     	;# 
   240  0212                     	;# 
   241  0212                     	;# 
   242  0213                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0214                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0216                     	;# 
   250  0216                     	;# 
   251  0217                     	;# 
   252  0217                     	;# 
   253  0291                     	;# 
   254  0291                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0298                     	;# 
   258  0298                     	;# 
   259  0299                     	;# 
   260  029A                     	;# 
   261  0394                     	;# 
   262  0395                     	;# 
   263  0396                     	;# 
   264  0FE4                     	;# 
   265  0FE5                     	;# 
   266  0FE6                     	;# 
   267  0FE7                     	;# 
   268  0FE8                     	;# 
   269  0FE9                     	;# 
   270  0FEA                     	;# 
   271  0FEB                     	;# 
   272  0FED                     	;# 
   273  0FEE                     	;# 
   274  0FEF                     	;# 
   275  0000                     	;# 
   276  0001                     	;# 
   277  0002                     	;# 
   278  0003                     	;# 
   279  0004                     	;# 
   280  0005                     	;# 
   281  0006                     	;# 
   282  0007                     	;# 
   283  0008                     	;# 
   284  0009                     	;# 
   285  000A                     	;# 
   286  000B                     	;# 
   287  000C                     	;# 
   288  000D                     	;# 
   289  000E                     	;# 
   290  0010                     	;# 
   291  0011                     	;# 
   292  0012                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0016                     	;# 
   296  0017                     	;# 
   297  0018                     	;# 
   298  0019                     	;# 
   299  001A                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  008C                     	;# 
   303  008D                     	;# 
   304  008E                     	;# 
   305  0090                     	;# 
   306  0091                     	;# 
   307  0092                     	;# 
   308  0095                     	;# 
   309  0096                     	;# 
   310  0097                     	;# 
   311  0099                     	;# 
   312  009A                     	;# 
   313  009B                     	;# 
   314  009B                     	;# 
   315  009C                     	;# 
   316  009D                     	;# 
   317  009E                     	;# 
   318  010C                     	;# 
   319  010D                     	;# 
   320  010E                     	;# 
   321  0116                     	;# 
   322  0117                     	;# 
   323  011D                     	;# 
   324  018C                     	;# 
   325  018D                     	;# 
   326  018E                     	;# 
   327  0191                     	;# 
   328  0191                     	;# 
   329  0192                     	;# 
   330  0193                     	;# 
   331  0193                     	;# 
   332  0194                     	;# 
   333  0195                     	;# 
   334  0196                     	;# 
   335  0197                     	;# 
   336  0199                     	;# 
   337  019A                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019C                     	;# 
   343  019C                     	;# 
   344  019D                     	;# 
   345  019E                     	;# 
   346  019F                     	;# 
   347  020D                     	;# 
   348  0210                     	;# 
   349  0211                     	;# 
   350  0211                     	;# 
   351  0212                     	;# 
   352  0212                     	;# 
   353  0213                     	;# 
   354  0213                     	;# 
   355  0214                     	;# 
   356  0214                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0216                     	;# 
   361  0216                     	;# 
   362  0217                     	;# 
   363  0217                     	;# 
   364  0291                     	;# 
   365  0291                     	;# 
   366  0292                     	;# 
   367  0293                     	;# 
   368  0298                     	;# 
   369  0298                     	;# 
   370  0299                     	;# 
   371  029A                     	;# 
   372  0394                     	;# 
   373  0395                     	;# 
   374  0396                     	;# 
   375  0FE4                     	;# 
   376  0FE5                     	;# 
   377  0FE6                     	;# 
   378  0FE7                     	;# 
   379  0FE8                     	;# 
   380  0FE9                     	;# 
   381  0FEA                     	;# 
   382  0FEB                     	;# 
   383  0FED                     	;# 
   384  0FEE                     	;# 
   385  0FEF                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  0010                     	;# 
   402  0011                     	;# 
   403  0012                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  0090                     	;# 
   417  0091                     	;# 
   418  0092                     	;# 
   419  0095                     	;# 
   420  0096                     	;# 
   421  0097                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009B                     	;# 
   426  009C                     	;# 
   427  009D                     	;# 
   428  009E                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0116                     	;# 
   433  0117                     	;# 
   434  011D                     	;# 
   435  018C                     	;# 
   436  018D                     	;# 
   437  018E                     	;# 
   438  0191                     	;# 
   439  0191                     	;# 
   440  0192                     	;# 
   441  0193                     	;# 
   442  0193                     	;# 
   443  0194                     	;# 
   444  0195                     	;# 
   445  0196                     	;# 
   446  0197                     	;# 
   447  0199                     	;# 
   448  019A                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019C                     	;# 
   454  019C                     	;# 
   455  019D                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  020D                     	;# 
   459  0210                     	;# 
   460  0211                     	;# 
   461  0211                     	;# 
   462  0212                     	;# 
   463  0212                     	;# 
   464  0213                     	;# 
   465  0213                     	;# 
   466  0214                     	;# 
   467  0214                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0216                     	;# 
   472  0216                     	;# 
   473  0217                     	;# 
   474  0217                     	;# 
   475  0291                     	;# 
   476  0291                     	;# 
   477  0292                     	;# 
   478  0293                     	;# 
   479  0298                     	;# 
   480  0298                     	;# 
   481  0299                     	;# 
   482  029A                     	;# 
   483  0394                     	;# 
   484  0395                     	;# 
   485  0396                     	;# 
   486  0FE4                     	;# 
   487  0FE5                     	;# 
   488  0FE6                     	;# 
   489  0FE7                     	;# 
   490  0FE8                     	;# 
   491  0FE9                     	;# 
   492  0FEA                     	;# 
   493  0FEB                     	;# 
   494  0FED                     	;# 
   495  0FEE                     	;# 
   496  0FEF                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0008                     	;# 
   506  0009                     	;# 
   507  000A                     	;# 
   508  000B                     	;# 
   509  000C                     	;# 
   510  000D                     	;# 
   511  000E                     	;# 
   512  0010                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  008C                     	;# 
   525  008D                     	;# 
   526  008E                     	;# 
   527  0090                     	;# 
   528  0091                     	;# 
   529  0092                     	;# 
   530  0095                     	;# 
   531  0096                     	;# 
   532  0097                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  010C                     	;# 
   541  010D                     	;# 
   542  010E                     	;# 
   543  0116                     	;# 
   544  0117                     	;# 
   545  011D                     	;# 
   546  018C                     	;# 
   547  018D                     	;# 
   548  018E                     	;# 
   549  0191                     	;# 
   550  0191                     	;# 
   551  0192                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0194                     	;# 
   555  0195                     	;# 
   556  0196                     	;# 
   557  0197                     	;# 
   558  0199                     	;# 
   559  019A                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019C                     	;# 
   565  019C                     	;# 
   566  019D                     	;# 
   567  019E                     	;# 
   568  019F                     	;# 
   569  020D                     	;# 
   570  0210                     	;# 
   571  0211                     	;# 
   572  0211                     	;# 
   573  0212                     	;# 
   574  0212                     	;# 
   575  0213                     	;# 
   576  0213                     	;# 
   577  0214                     	;# 
   578  0214                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0216                     	;# 
   583  0216                     	;# 
   584  0217                     	;# 
   585  0217                     	;# 
   586  0291                     	;# 
   587  0291                     	;# 
   588  0292                     	;# 
   589  0293                     	;# 
   590  0298                     	;# 
   591  0298                     	;# 
   592  0299                     	;# 
   593  029A                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  0FE4                     	;# 
   598  0FE5                     	;# 
   599  0FE6                     	;# 
   600  0FE7                     	;# 
   601  0FE8                     	;# 
   602  0FE9                     	;# 
   603  0FEA                     	;# 
   604  0FEB                     	;# 
   605  0FED                     	;# 
   606  0FEE                     	;# 
   607  0FEF                     	;# 
   608  0000                     	;# 
   609  0001                     	;# 
   610  0002                     	;# 
   611  0003                     	;# 
   612  0004                     	;# 
   613  0005                     	;# 
   614  0006                     	;# 
   615  0007                     	;# 
   616  0008                     	;# 
   617  0009                     	;# 
   618  000A                     	;# 
   619  000B                     	;# 
   620  000C                     	;# 
   621  000D                     	;# 
   622  000E                     	;# 
   623  0010                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0015                     	;# 
   627  0016                     	;# 
   628  0016                     	;# 
   629  0017                     	;# 
   630  0018                     	;# 
   631  0019                     	;# 
   632  001A                     	;# 
   633  001B                     	;# 
   634  001C                     	;# 
   635  008C                     	;# 
   636  008D                     	;# 
   637  008E                     	;# 
   638  0090                     	;# 
   639  0091                     	;# 
   640  0092                     	;# 
   641  0095                     	;# 
   642  0096                     	;# 
   643  0097                     	;# 
   644  0099                     	;# 
   645  009A                     	;# 
   646  009B                     	;# 
   647  009B                     	;# 
   648  009C                     	;# 
   649  009D                     	;# 
   650  009E                     	;# 
   651  010C                     	;# 
   652  010D                     	;# 
   653  010E                     	;# 
   654  0116                     	;# 
   655  0117                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018D                     	;# 
   659  018E                     	;# 
   660  0191                     	;# 
   661  0191                     	;# 
   662  0192                     	;# 
   663  0193                     	;# 
   664  0193                     	;# 
   665  0194                     	;# 
   666  0195                     	;# 
   667  0196                     	;# 
   668  0197                     	;# 
   669  0199                     	;# 
   670  019A                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019C                     	;# 
   676  019C                     	;# 
   677  019D                     	;# 
   678  019E                     	;# 
   679  019F                     	;# 
   680  020D                     	;# 
   681  0210                     	;# 
   682  0211                     	;# 
   683  0211                     	;# 
   684  0212                     	;# 
   685  0212                     	;# 
   686  0213                     	;# 
   687  0213                     	;# 
   688  0214                     	;# 
   689  0214                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0216                     	;# 
   694  0216                     	;# 
   695  0217                     	;# 
   696  0217                     	;# 
   697  0291                     	;# 
   698  0291                     	;# 
   699  0292                     	;# 
   700  0293                     	;# 
   701  0298                     	;# 
   702  0298                     	;# 
   703  0299                     	;# 
   704  029A                     	;# 
   705  0394                     	;# 
   706  0395                     	;# 
   707  0396                     	;# 
   708  0FE4                     	;# 
   709  0FE5                     	;# 
   710  0FE6                     	;# 
   711  0FE7                     	;# 
   712  0FE8                     	;# 
   713  0FE9                     	;# 
   714  0FEA                     	;# 
   715  0FEB                     	;# 
   716  0FED                     	;# 
   717  0FEE                     	;# 
   718  0FEF                     	;# 
   719  0000                     	;# 
   720  0001                     	;# 
   721  0002                     	;# 
   722  0003                     	;# 
   723  0004                     	;# 
   724  0005                     	;# 
   725  0006                     	;# 
   726  0007                     	;# 
   727  0008                     	;# 
   728  0009                     	;# 
   729  000A                     	;# 
   730  000B                     	;# 
   731  000C                     	;# 
   732  000D                     	;# 
   733  000E                     	;# 
   734  0010                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0015                     	;# 
   738  0016                     	;# 
   739  0016                     	;# 
   740  0017                     	;# 
   741  0018                     	;# 
   742  0019                     	;# 
   743  001A                     	;# 
   744  001B                     	;# 
   745  001C                     	;# 
   746  008C                     	;# 
   747  008D                     	;# 
   748  008E                     	;# 
   749  0090                     	;# 
   750  0091                     	;# 
   751  0092                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0097                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  0116                     	;# 
   766  0117                     	;# 
   767  011D                     	;# 
   768  018C                     	;# 
   769  018D                     	;# 
   770  018E                     	;# 
   771  0191                     	;# 
   772  0191                     	;# 
   773  0192                     	;# 
   774  0193                     	;# 
   775  0193                     	;# 
   776  0194                     	;# 
   777  0195                     	;# 
   778  0196                     	;# 
   779  0197                     	;# 
   780  0199                     	;# 
   781  019A                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019C                     	;# 
   787  019C                     	;# 
   788  019D                     	;# 
   789  019E                     	;# 
   790  019F                     	;# 
   791  020D                     	;# 
   792  0210                     	;# 
   793  0211                     	;# 
   794  0211                     	;# 
   795  0212                     	;# 
   796  0212                     	;# 
   797  0213                     	;# 
   798  0213                     	;# 
   799  0214                     	;# 
   800  0214                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0216                     	;# 
   805  0216                     	;# 
   806  0217                     	;# 
   807  0217                     	;# 
   808  0291                     	;# 
   809  0291                     	;# 
   810  0292                     	;# 
   811  0293                     	;# 
   812  0298                     	;# 
   813  0298                     	;# 
   814  0299                     	;# 
   815  029A                     	;# 
   816  0394                     	;# 
   817  0395                     	;# 
   818  0396                     	;# 
   819  0FE4                     	;# 
   820  0FE5                     	;# 
   821  0FE6                     	;# 
   822  0FE7                     	;# 
   823  0FE8                     	;# 
   824  0FE9                     	;# 
   825  0FEA                     	;# 
   826  0FEB                     	;# 
   827  0FED                     	;# 
   828  0FEE                     	;# 
   829  0FEF                     	;# 
   830  0000                     	;# 
   831  0001                     	;# 
   832  0002                     	;# 
   833  0003                     	;# 
   834  0004                     	;# 
   835  0005                     	;# 
   836  0006                     	;# 
   837  0007                     	;# 
   838  0008                     	;# 
   839  0009                     	;# 
   840  000A                     	;# 
   841  000B                     	;# 
   842  000C                     	;# 
   843  000D                     	;# 
   844  000E                     	;# 
   845  0010                     	;# 
   846  0011                     	;# 
   847  0012                     	;# 
   848  0015                     	;# 
   849  0016                     	;# 
   850  0016                     	;# 
   851  0017                     	;# 
   852  0018                     	;# 
   853  0019                     	;# 
   854  001A                     	;# 
   855  001B                     	;# 
   856  001C                     	;# 
   857  008C                     	;# 
   858  008D                     	;# 
   859  008E                     	;# 
   860  0090                     	;# 
   861  0091                     	;# 
   862  0092                     	;# 
   863  0095                     	;# 
   864  0096                     	;# 
   865  0097                     	;# 
   866  0099                     	;# 
   867  009A                     	;# 
   868  009B                     	;# 
   869  009B                     	;# 
   870  009C                     	;# 
   871  009D                     	;# 
   872  009E                     	;# 
   873  010C                     	;# 
   874  010D                     	;# 
   875  010E                     	;# 
   876  0116                     	;# 
   877  0117                     	;# 
   878  011D                     	;# 
   879  018C                     	;# 
   880  018D                     	;# 
   881  018E                     	;# 
   882  0191                     	;# 
   883  0191                     	;# 
   884  0192                     	;# 
   885  0193                     	;# 
   886  0193                     	;# 
   887  0194                     	;# 
   888  0195                     	;# 
   889  0196                     	;# 
   890  0197                     	;# 
   891  0199                     	;# 
   892  019A                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019C                     	;# 
   898  019C                     	;# 
   899  019D                     	;# 
   900  019E                     	;# 
   901  019F                     	;# 
   902  020D                     	;# 
   903  0210                     	;# 
   904  0211                     	;# 
   905  0211                     	;# 
   906  0212                     	;# 
   907  0212                     	;# 
   908  0213                     	;# 
   909  0213                     	;# 
   910  0214                     	;# 
   911  0214                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0216                     	;# 
   916  0216                     	;# 
   917  0217                     	;# 
   918  0217                     	;# 
   919  0291                     	;# 
   920  0291                     	;# 
   921  0292                     	;# 
   922  0293                     	;# 
   923  0298                     	;# 
   924  0298                     	;# 
   925  0299                     	;# 
   926  029A                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0FE4                     	;# 
   931  0FE5                     	;# 
   932  0FE6                     	;# 
   933  0FE7                     	;# 
   934  0FE8                     	;# 
   935  0FE9                     	;# 
   936  0FEA                     	;# 
   937  0FEB                     	;# 
   938  0FED                     	;# 
   939  0FEE                     	;# 
   940  0FEF                     	;# 
   941  0000                     	;# 
   942  0001                     	;# 
   943  0002                     	;# 
   944  0003                     	;# 
   945  0004                     	;# 
   946  0005                     	;# 
   947  0006                     	;# 
   948  0007                     	;# 
   949  0008                     	;# 
   950  0009                     	;# 
   951  000A                     	;# 
   952  000B                     	;# 
   953  000C                     	;# 
   954  000D                     	;# 
   955  000E                     	;# 
   956  0010                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  008C                     	;# 
   969  008D                     	;# 
   970  008E                     	;# 
   971  0090                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0099                     	;# 
   978  009A                     	;# 
   979  009B                     	;# 
   980  009B                     	;# 
   981  009C                     	;# 
   982  009D                     	;# 
   983  009E                     	;# 
   984  010C                     	;# 
   985  010D                     	;# 
   986  010E                     	;# 
   987  0116                     	;# 
   988  0117                     	;# 
   989  011D                     	;# 
   990  018C                     	;# 
   991  018D                     	;# 
   992  018E                     	;# 
   993  0191                     	;# 
   994  0191                     	;# 
   995  0192                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0197                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019C                     	;# 
  1009  019C                     	;# 
  1010  019D                     	;# 
  1011  019E                     	;# 
  1012  019F                     	;# 
  1013  020D                     	;# 
  1014  0210                     	;# 
  1015  0211                     	;# 
  1016  0211                     	;# 
  1017  0212                     	;# 
  1018  0212                     	;# 
  1019  0213                     	;# 
  1020  0213                     	;# 
  1021  0214                     	;# 
  1022  0214                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0216                     	;# 
  1027  0216                     	;# 
  1028  0217                     	;# 
  1029  0217                     	;# 
  1030  0291                     	;# 
  1031  0291                     	;# 
  1032  0292                     	;# 
  1033  0293                     	;# 
  1034  0298                     	;# 
  1035  0298                     	;# 
  1036  0299                     	;# 
  1037  029A                     	;# 
  1038  0394                     	;# 
  1039  0395                     	;# 
  1040  0396                     	;# 
  1041  0FE4                     	;# 
  1042  0FE5                     	;# 
  1043  0FE6                     	;# 
  1044  0FE7                     	;# 
  1045  0FE8                     	;# 
  1046  0FE9                     	;# 
  1047  0FEA                     	;# 
  1048  0FEB                     	;# 
  1049  0FED                     	;# 
  1050  0FEE                     	;# 
  1051  0FEF                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0008                     	;# 
  1061  0009                     	;# 
  1062  000A                     	;# 
  1063  000B                     	;# 
  1064  000C                     	;# 
  1065  000D                     	;# 
  1066  000E                     	;# 
  1067  0010                     	;# 
  1068  0011                     	;# 
  1069  0012                     	;# 
  1070  0015                     	;# 
  1071  0016                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001C                     	;# 
  1079  008C                     	;# 
  1080  008D                     	;# 
  1081  008E                     	;# 
  1082  0090                     	;# 
  1083  0091                     	;# 
  1084  0092                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  010E                     	;# 
  1098  0116                     	;# 
  1099  0117                     	;# 
  1100  011D                     	;# 
  1101  018C                     	;# 
  1102  018D                     	;# 
  1103  018E                     	;# 
  1104  0191                     	;# 
  1105  0191                     	;# 
  1106  0192                     	;# 
  1107  0193                     	;# 
  1108  0193                     	;# 
  1109  0194                     	;# 
  1110  0195                     	;# 
  1111  0196                     	;# 
  1112  0197                     	;# 
  1113  0199                     	;# 
  1114  019A                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019C                     	;# 
  1120  019C                     	;# 
  1121  019D                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  020D                     	;# 
  1125  0210                     	;# 
  1126  0211                     	;# 
  1127  0211                     	;# 
  1128  0212                     	;# 
  1129  0212                     	;# 
  1130  0213                     	;# 
  1131  0213                     	;# 
  1132  0214                     	;# 
  1133  0214                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0216                     	;# 
  1138  0216                     	;# 
  1139  0217                     	;# 
  1140  0217                     	;# 
  1141  0291                     	;# 
  1142  0291                     	;# 
  1143  0292                     	;# 
  1144  0293                     	;# 
  1145  0298                     	;# 
  1146  0298                     	;# 
  1147  0299                     	;# 
  1148  029A                     	;# 
  1149  0394                     	;# 
  1150  0395                     	;# 
  1151  0396                     	;# 
  1152  0FE4                     	;# 
  1153  0FE5                     	;# 
  1154  0FE6                     	;# 
  1155  0FE7                     	;# 
  1156  0FE8                     	;# 
  1157  0FE9                     	;# 
  1158  0FEA                     	;# 
  1159  0FEB                     	;# 
  1160  0FED                     	;# 
  1161  0FEE                     	;# 
  1162  0FEF                     	;# 
  1163  0000                     	;# 
  1164  0001                     	;# 
  1165  0002                     	;# 
  1166  0003                     	;# 
  1167  0004                     	;# 
  1168  0005                     	;# 
  1169  0006                     	;# 
  1170  0007                     	;# 
  1171  0008                     	;# 
  1172  0009                     	;# 
  1173  000A                     	;# 
  1174  000B                     	;# 
  1175  000C                     	;# 
  1176  000D                     	;# 
  1177  000E                     	;# 
  1178  0010                     	;# 
  1179  0011                     	;# 
  1180  0012                     	;# 
  1181  0015                     	;# 
  1182  0016                     	;# 
  1183  0016                     	;# 
  1184  0017                     	;# 
  1185  0018                     	;# 
  1186  0019                     	;# 
  1187  001A                     	;# 
  1188  001B                     	;# 
  1189  001C                     	;# 
  1190  008C                     	;# 
  1191  008D                     	;# 
  1192  008E                     	;# 
  1193  0090                     	;# 
  1194  0091                     	;# 
  1195  0092                     	;# 
  1196  0095                     	;# 
  1197  0096                     	;# 
  1198  0097                     	;# 
  1199  0099                     	;# 
  1200  009A                     	;# 
  1201  009B                     	;# 
  1202  009B                     	;# 
  1203  009C                     	;# 
  1204  009D                     	;# 
  1205  009E                     	;# 
  1206  010C                     	;# 
  1207  010D                     	;# 
  1208  010E                     	;# 
  1209  0116                     	;# 
  1210  0117                     	;# 
  1211  011D                     	;# 
  1212  018C                     	;# 
  1213  018D                     	;# 
  1214  018E                     	;# 
  1215  0191                     	;# 
  1216  0191                     	;# 
  1217  0192                     	;# 
  1218  0193                     	;# 
  1219  0193                     	;# 
  1220  0194                     	;# 
  1221  0195                     	;# 
  1222  0196                     	;# 
  1223  0197                     	;# 
  1224  0199                     	;# 
  1225  019A                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019C                     	;# 
  1231  019C                     	;# 
  1232  019D                     	;# 
  1233  019E                     	;# 
  1234  019F                     	;# 
  1235  020D                     	;# 
  1236  0210                     	;# 
  1237  0211                     	;# 
  1238  0211                     	;# 
  1239  0212                     	;# 
  1240  0212                     	;# 
  1241  0213                     	;# 
  1242  0213                     	;# 
  1243  0214                     	;# 
  1244  0214                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0216                     	;# 
  1249  0216                     	;# 
  1250  0217                     	;# 
  1251  0217                     	;# 
  1252  0291                     	;# 
  1253  0291                     	;# 
  1254  0292                     	;# 
  1255  0293                     	;# 
  1256  0298                     	;# 
  1257  0298                     	;# 
  1258  0299                     	;# 
  1259  029A                     	;# 
  1260  0394                     	;# 
  1261  0395                     	;# 
  1262  0396                     	;# 
  1263  0FE4                     	;# 
  1264  0FE5                     	;# 
  1265  0FE6                     	;# 
  1266  0FE7                     	;# 
  1267  0FE8                     	;# 
  1268  0FE9                     	;# 
  1269  0FEA                     	;# 
  1270  0FEB                     	;# 
  1271  0FED                     	;# 
  1272  0FEE                     	;# 
  1273  0FEF                     	;# 
  1274  0000                     	;# 
  1275  0001                     	;# 
  1276  0002                     	;# 
  1277  0003                     	;# 
  1278  0004                     	;# 
  1279  0005                     	;# 
  1280  0006                     	;# 
  1281  0007                     	;# 
  1282  0008                     	;# 
  1283  0009                     	;# 
  1284  000A                     	;# 
  1285  000B                     	;# 
  1286  000C                     	;# 
  1287  000D                     	;# 
  1288  000E                     	;# 
  1289  0010                     	;# 
  1290  0011                     	;# 
  1291  0012                     	;# 
  1292  0015                     	;# 
  1293  0016                     	;# 
  1294  0016                     	;# 
  1295  0017                     	;# 
  1296  0018                     	;# 
  1297  0019                     	;# 
  1298  001A                     	;# 
  1299  001B                     	;# 
  1300  001C                     	;# 
  1301  008C                     	;# 
  1302  008D                     	;# 
  1303  008E                     	;# 
  1304  0090                     	;# 
  1305  0091                     	;# 
  1306  0092                     	;# 
  1307  0095                     	;# 
  1308  0096                     	;# 
  1309  0097                     	;# 
  1310  0099                     	;# 
  1311  009A                     	;# 
  1312  009B                     	;# 
  1313  009B                     	;# 
  1314  009C                     	;# 
  1315  009D                     	;# 
  1316  009E                     	;# 
  1317  010C                     	;# 
  1318  010D                     	;# 
  1319  010E                     	;# 
  1320  0116                     	;# 
  1321  0117                     	;# 
  1322  011D                     	;# 
  1323  018C                     	;# 
  1324  018D                     	;# 
  1325  018E                     	;# 
  1326  0191                     	;# 
  1327  0191                     	;# 
  1328  0192                     	;# 
  1329  0193                     	;# 
  1330  0193                     	;# 
  1331  0194                     	;# 
  1332  0195                     	;# 
  1333  0196                     	;# 
  1334  0197                     	;# 
  1335  0199                     	;# 
  1336  019A                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019C                     	;# 
  1342  019C                     	;# 
  1343  019D                     	;# 
  1344  019E                     	;# 
  1345  019F                     	;# 
  1346  020D                     	;# 
  1347  0210                     	;# 
  1348  0211                     	;# 
  1349  0211                     	;# 
  1350  0212                     	;# 
  1351  0212                     	;# 
  1352  0213                     	;# 
  1353  0213                     	;# 
  1354  0214                     	;# 
  1355  0214                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0216                     	;# 
  1360  0216                     	;# 
  1361  0217                     	;# 
  1362  0217                     	;# 
  1363  0291                     	;# 
  1364  0291                     	;# 
  1365  0292                     	;# 
  1366  0293                     	;# 
  1367  0298                     	;# 
  1368  0298                     	;# 
  1369  0299                     	;# 
  1370  029A                     	;# 
  1371  0394                     	;# 
  1372  0395                     	;# 
  1373  0396                     	;# 
  1374  0FE4                     	;# 
  1375  0FE5                     	;# 
  1376  0FE6                     	;# 
  1377  0FE7                     	;# 
  1378  0FE8                     	;# 
  1379  0FE9                     	;# 
  1380  0FEA                     	;# 
  1381  0FEB                     	;# 
  1382  0FED                     	;# 
  1383  0FEE                     	;# 
  1384  0FEF                     	;# 
  1385  0000                     	;# 
  1386  0001                     	;# 
  1387  0002                     	;# 
  1388  0003                     	;# 
  1389  0004                     	;# 
  1390  0005                     	;# 
  1391  0006                     	;# 
  1392  0007                     	;# 
  1393  0008                     	;# 
  1394  0009                     	;# 
  1395  000A                     	;# 
  1396  000B                     	;# 
  1397  000C                     	;# 
  1398  000D                     	;# 
  1399  000E                     	;# 
  1400  0010                     	;# 
  1401  0011                     	;# 
  1402  0012                     	;# 
  1403  0015                     	;# 
  1404  0016                     	;# 
  1405  0016                     	;# 
  1406  0017                     	;# 
  1407  0018                     	;# 
  1408  0019                     	;# 
  1409  001A                     	;# 
  1410  001B                     	;# 
  1411  001C                     	;# 
  1412  008C                     	;# 
  1413  008D                     	;# 
  1414  008E                     	;# 
  1415  0090                     	;# 
  1416  0091                     	;# 
  1417  0092                     	;# 
  1418  0095                     	;# 
  1419  0096                     	;# 
  1420  0097                     	;# 
  1421  0099                     	;# 
  1422  009A                     	;# 
  1423  009B                     	;# 
  1424  009B                     	;# 
  1425  009C                     	;# 
  1426  009D                     	;# 
  1427  009E                     	;# 
  1428  010C                     	;# 
  1429  010D                     	;# 
  1430  010E                     	;# 
  1431  0116                     	;# 
  1432  0117                     	;# 
  1433  011D                     	;# 
  1434  018C                     	;# 
  1435  018D                     	;# 
  1436  018E                     	;# 
  1437  0191                     	;# 
  1438  0191                     	;# 
  1439  0192                     	;# 
  1440  0193                     	;# 
  1441  0193                     	;# 
  1442  0194                     	;# 
  1443  0195                     	;# 
  1444  0196                     	;# 
  1445  0197                     	;# 
  1446  0199                     	;# 
  1447  019A                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019C                     	;# 
  1453  019C                     	;# 
  1454  019D                     	;# 
  1455  019E                     	;# 
  1456  019F                     	;# 
  1457  020D                     	;# 
  1458  0210                     	;# 
  1459  0211                     	;# 
  1460  0211                     	;# 
  1461  0212                     	;# 
  1462  0212                     	;# 
  1463  0213                     	;# 
  1464  0213                     	;# 
  1465  0214                     	;# 
  1466  0214                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0216                     	;# 
  1471  0216                     	;# 
  1472  0217                     	;# 
  1473  0217                     	;# 
  1474  0291                     	;# 
  1475  0291                     	;# 
  1476  0292                     	;# 
  1477  0293                     	;# 
  1478  0298                     	;# 
  1479  0298                     	;# 
  1480  0299                     	;# 
  1481  029A                     	;# 
  1482  0394                     	;# 
  1483  0395                     	;# 
  1484  0396                     	;# 
  1485  0FE4                     	;# 
  1486  0FE5                     	;# 
  1487  0FE6                     	;# 
  1488  0FE7                     	;# 
  1489  0FE8                     	;# 
  1490  0FE9                     	;# 
  1491  0FEA                     	;# 
  1492  0FEB                     	;# 
  1493  0FED                     	;# 
  1494  0FEE                     	;# 
  1495  0FEF                     	;# 
  1496  0000                     	;# 
  1497  0001                     	;# 
  1498  0002                     	;# 
  1499  0003                     	;# 
  1500  0004                     	;# 
  1501  0005                     	;# 
  1502  0006                     	;# 
  1503  0007                     	;# 
  1504  0008                     	;# 
  1505  0009                     	;# 
  1506  000A                     	;# 
  1507  000B                     	;# 
  1508  000C                     	;# 
  1509  000D                     	;# 
  1510  000E                     	;# 
  1511  0010                     	;# 
  1512  0011                     	;# 
  1513  0012                     	;# 
  1514  0015                     	;# 
  1515  0016                     	;# 
  1516  0016                     	;# 
  1517  0017                     	;# 
  1518  0018                     	;# 
  1519  0019                     	;# 
  1520  001A                     	;# 
  1521  001B                     	;# 
  1522  001C                     	;# 
  1523  008C                     	;# 
  1524  008D                     	;# 
  1525  008E                     	;# 
  1526  0090                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0095                     	;# 
  1530  0096                     	;# 
  1531  0097                     	;# 
  1532  0099                     	;# 
  1533  009A                     	;# 
  1534  009B                     	;# 
  1535  009B                     	;# 
  1536  009C                     	;# 
  1537  009D                     	;# 
  1538  009E                     	;# 
  1539  010C                     	;# 
  1540  010D                     	;# 
  1541  010E                     	;# 
  1542  0116                     	;# 
  1543  0117                     	;# 
  1544  011D                     	;# 
  1545  018C                     	;# 
  1546  018D                     	;# 
  1547  018E                     	;# 
  1548  0191                     	;# 
  1549  0191                     	;# 
  1550  0192                     	;# 
  1551  0193                     	;# 
  1552  0193                     	;# 
  1553  0194                     	;# 
  1554  0195                     	;# 
  1555  0196                     	;# 
  1556  0197                     	;# 
  1557  0199                     	;# 
  1558  019A                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  020D                     	;# 
  1569  0210                     	;# 
  1570  0211                     	;# 
  1571  0211                     	;# 
  1572  0212                     	;# 
  1573  0212                     	;# 
  1574  0213                     	;# 
  1575  0213                     	;# 
  1576  0214                     	;# 
  1577  0214                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0216                     	;# 
  1582  0216                     	;# 
  1583  0217                     	;# 
  1584  0217                     	;# 
  1585  0291                     	;# 
  1586  0291                     	;# 
  1587  0292                     	;# 
  1588  0293                     	;# 
  1589  0298                     	;# 
  1590  0298                     	;# 
  1591  0299                     	;# 
  1592  029A                     	;# 
  1593  0394                     	;# 
  1594  0395                     	;# 
  1595  0396                     	;# 
  1596  0FE4                     	;# 
  1597  0FE5                     	;# 
  1598  0FE6                     	;# 
  1599  0FE7                     	;# 
  1600  0FE8                     	;# 
  1601  0FE9                     	;# 
  1602  0FEA                     	;# 
  1603  0FEB                     	;# 
  1604  0FED                     	;# 
  1605  0FEE                     	;# 
  1606  0FEF                     	;# 
  1607  0000                     	;# 
  1608  0001                     	;# 
  1609  0002                     	;# 
  1610  0003                     	;# 
  1611  0004                     	;# 
  1612  0005                     	;# 
  1613  0006                     	;# 
  1614  0007                     	;# 
  1615  0008                     	;# 
  1616  0009                     	;# 
  1617  000A                     	;# 
  1618  000B                     	;# 
  1619  000C                     	;# 
  1620  000D                     	;# 
  1621  000E                     	;# 
  1622  0010                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0015                     	;# 
  1626  0016                     	;# 
  1627  0016                     	;# 
  1628  0017                     	;# 
  1629  0018                     	;# 
  1630  0019                     	;# 
  1631  001A                     	;# 
  1632  001B                     	;# 
  1633  001C                     	;# 
  1634  008C                     	;# 
  1635  008D                     	;# 
  1636  008E                     	;# 
  1637  0090                     	;# 
  1638  0091                     	;# 
  1639  0092                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0099                     	;# 
  1644  009A                     	;# 
  1645  009B                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  0116                     	;# 
  1654  0117                     	;# 
  1655  011D                     	;# 
  1656  018C                     	;# 
  1657  018D                     	;# 
  1658  018E                     	;# 
  1659  0191                     	;# 
  1660  0191                     	;# 
  1661  0192                     	;# 
  1662  0193                     	;# 
  1663  0193                     	;# 
  1664  0194                     	;# 
  1665  0195                     	;# 
  1666  0196                     	;# 
  1667  0197                     	;# 
  1668  0199                     	;# 
  1669  019A                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019C                     	;# 
  1675  019C                     	;# 
  1676  019D                     	;# 
  1677  019E                     	;# 
  1678  019F                     	;# 
  1679  020D                     	;# 
  1680  0210                     	;# 
  1681  0211                     	;# 
  1682  0211                     	;# 
  1683  0212                     	;# 
  1684  0212                     	;# 
  1685  0213                     	;# 
  1686  0213                     	;# 
  1687  0214                     	;# 
  1688  0214                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0216                     	;# 
  1693  0216                     	;# 
  1694  0217                     	;# 
  1695  0217                     	;# 
  1696  0291                     	;# 
  1697  0291                     	;# 
  1698  0292                     	;# 
  1699  0293                     	;# 
  1700  0298                     	;# 
  1701  0298                     	;# 
  1702  0299                     	;# 
  1703  029A                     	;# 
  1704  0394                     	;# 
  1705  0395                     	;# 
  1706  0396                     	;# 
  1707  0FE4                     	;# 
  1708  0FE5                     	;# 
  1709  0FE6                     	;# 
  1710  0FE7                     	;# 
  1711  0FE8                     	;# 
  1712  0FE9                     	;# 
  1713  0FEA                     	;# 
  1714  0FEB                     	;# 
  1715  0FED                     	;# 
  1716  0FEE                     	;# 
  1717  0FEF                     	;# 
  1718  0000                     	;# 
  1719  0001                     	;# 
  1720  0002                     	;# 
  1721  0003                     	;# 
  1722  0004                     	;# 
  1723  0005                     	;# 
  1724  0006                     	;# 
  1725  0007                     	;# 
  1726  0008                     	;# 
  1727  0009                     	;# 
  1728  000A                     	;# 
  1729  000B                     	;# 
  1730  000C                     	;# 
  1731  000D                     	;# 
  1732  000E                     	;# 
  1733  0010                     	;# 
  1734  0011                     	;# 
  1735  0012                     	;# 
  1736  0015                     	;# 
  1737  0016                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  0019                     	;# 
  1742  001A                     	;# 
  1743  001B                     	;# 
  1744  001C                     	;# 
  1745  008C                     	;# 
  1746  008D                     	;# 
  1747  008E                     	;# 
  1748  0090                     	;# 
  1749  0091                     	;# 
  1750  0092                     	;# 
  1751  0095                     	;# 
  1752  0096                     	;# 
  1753  0097                     	;# 
  1754  0099                     	;# 
  1755  009A                     	;# 
  1756  009B                     	;# 
  1757  009B                     	;# 
  1758  009C                     	;# 
  1759  009D                     	;# 
  1760  009E                     	;# 
  1761  010C                     	;# 
  1762  010D                     	;# 
  1763  010E                     	;# 
  1764  0116                     	;# 
  1765  0117                     	;# 
  1766  011D                     	;# 
  1767  018C                     	;# 
  1768  018D                     	;# 
  1769  018E                     	;# 
  1770  0191                     	;# 
  1771  0191                     	;# 
  1772  0192                     	;# 
  1773  0193                     	;# 
  1774  0193                     	;# 
  1775  0194                     	;# 
  1776  0195                     	;# 
  1777  0196                     	;# 
  1778  0197                     	;# 
  1779  0199                     	;# 
  1780  019A                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019C                     	;# 
  1786  019C                     	;# 
  1787  019D                     	;# 
  1788  019E                     	;# 
  1789  019F                     	;# 
  1790  020D                     	;# 
  1791  0210                     	;# 
  1792  0211                     	;# 
  1793  0211                     	;# 
  1794  0212                     	;# 
  1795  0212                     	;# 
  1796  0213                     	;# 
  1797  0213                     	;# 
  1798  0214                     	;# 
  1799  0214                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0216                     	;# 
  1804  0216                     	;# 
  1805  0217                     	;# 
  1806  0217                     	;# 
  1807  0291                     	;# 
  1808  0291                     	;# 
  1809  0292                     	;# 
  1810  0293                     	;# 
  1811  0298                     	;# 
  1812  0298                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  0394                     	;# 
  1816  0395                     	;# 
  1817  0396                     	;# 
  1818  0FE4                     	;# 
  1819  0FE5                     	;# 
  1820  0FE6                     	;# 
  1821  0FE7                     	;# 
  1822  0FE8                     	;# 
  1823  0FE9                     	;# 
  1824  0FEA                     	;# 
  1825  0FEB                     	;# 
  1826  0FED                     	;# 
  1827  0FEE                     	;# 
  1828  0FEF                     	;# 
  1829  0000                     	;# 
  1830  0001                     	;# 
  1831  0002                     	;# 
  1832  0003                     	;# 
  1833  0004                     	;# 
  1834  0005                     	;# 
  1835  0006                     	;# 
  1836  0007                     	;# 
  1837  0008                     	;# 
  1838  0009                     	;# 
  1839  000A                     	;# 
  1840  000B                     	;# 
  1841  000C                     	;# 
  1842  000D                     	;# 
  1843  000E                     	;# 
  1844  0010                     	;# 
  1845  0011                     	;# 
  1846  0012                     	;# 
  1847  0015                     	;# 
  1848  0016                     	;# 
  1849  0016                     	;# 
  1850  0017                     	;# 
  1851  0018                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  008C                     	;# 
  1857  008D                     	;# 
  1858  008E                     	;# 
  1859  0090                     	;# 
  1860  0091                     	;# 
  1861  0092                     	;# 
  1862  0095                     	;# 
  1863  0096                     	;# 
  1864  0097                     	;# 
  1865  0099                     	;# 
  1866  009A                     	;# 
  1867  009B                     	;# 
  1868  009B                     	;# 
  1869  009C                     	;# 
  1870  009D                     	;# 
  1871  009E                     	;# 
  1872  010C                     	;# 
  1873  010D                     	;# 
  1874  010E                     	;# 
  1875  0116                     	;# 
  1876  0117                     	;# 
  1877  011D                     	;# 
  1878  018C                     	;# 
  1879  018D                     	;# 
  1880  018E                     	;# 
  1881  0191                     	;# 
  1882  0191                     	;# 
  1883  0192                     	;# 
  1884  0193                     	;# 
  1885  0193                     	;# 
  1886  0194                     	;# 
  1887  0195                     	;# 
  1888  0196                     	;# 
  1889  0197                     	;# 
  1890  0199                     	;# 
  1891  019A                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019C                     	;# 
  1897  019C                     	;# 
  1898  019D                     	;# 
  1899  019E                     	;# 
  1900  019F                     	;# 
  1901  020D                     	;# 
  1902  0210                     	;# 
  1903  0211                     	;# 
  1904  0211                     	;# 
  1905  0212                     	;# 
  1906  0212                     	;# 
  1907  0213                     	;# 
  1908  0213                     	;# 
  1909  0214                     	;# 
  1910  0214                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0216                     	;# 
  1915  0216                     	;# 
  1916  0217                     	;# 
  1917  0217                     	;# 
  1918  0291                     	;# 
  1919  0291                     	;# 
  1920  0292                     	;# 
  1921  0293                     	;# 
  1922  0298                     	;# 
  1923  0298                     	;# 
  1924  0299                     	;# 
  1925  029A                     	;# 
  1926  0394                     	;# 
  1927  0395                     	;# 
  1928  0396                     	;# 
  1929  0FE4                     	;# 
  1930  0FE5                     	;# 
  1931  0FE6                     	;# 
  1932  0FE7                     	;# 
  1933  0FE8                     	;# 
  1934  0FE9                     	;# 
  1935  0FEA                     	;# 
  1936  0FEB                     	;# 
  1937  0FED                     	;# 
  1938  0FEE                     	;# 
  1939  0FEF                     	;# 
  1940  0000                     	;# 
  1941  0001                     	;# 
  1942  0002                     	;# 
  1943  0003                     	;# 
  1944  0004                     	;# 
  1945  0005                     	;# 
  1946  0006                     	;# 
  1947  0007                     	;# 
  1948  0008                     	;# 
  1949  0009                     	;# 
  1950  000A                     	;# 
  1951  000B                     	;# 
  1952  000C                     	;# 
  1953  000D                     	;# 
  1954  000E                     	;# 
  1955  0010                     	;# 
  1956  0011                     	;# 
  1957  0012                     	;# 
  1958  0015                     	;# 
  1959  0016                     	;# 
  1960  0016                     	;# 
  1961  0017                     	;# 
  1962  0018                     	;# 
  1963  0019                     	;# 
  1964  001A                     	;# 
  1965  001B                     	;# 
  1966  001C                     	;# 
  1967  008C                     	;# 
  1968  008D                     	;# 
  1969  008E                     	;# 
  1970  0090                     	;# 
  1971  0091                     	;# 
  1972  0092                     	;# 
  1973  0095                     	;# 
  1974  0096                     	;# 
  1975  0097                     	;# 
  1976  0099                     	;# 
  1977  009A                     	;# 
  1978  009B                     	;# 
  1979  009B                     	;# 
  1980  009C                     	;# 
  1981  009D                     	;# 
  1982  009E                     	;# 
  1983  010C                     	;# 
  1984  010D                     	;# 
  1985  010E                     	;# 
  1986  0116                     	;# 
  1987  0117                     	;# 
  1988  011D                     	;# 
  1989  018C                     	;# 
  1990  018D                     	;# 
  1991  018E                     	;# 
  1992  0191                     	;# 
  1993  0191                     	;# 
  1994  0192                     	;# 
  1995  0193                     	;# 
  1996  0193                     	;# 
  1997  0194                     	;# 
  1998  0195                     	;# 
  1999  0196                     	;# 
  2000  0197                     	;# 
  2001  0199                     	;# 
  2002  019A                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019C                     	;# 
  2008  019C                     	;# 
  2009  019D                     	;# 
  2010  019E                     	;# 
  2011  019F                     	;# 
  2012  020D                     	;# 
  2013  0210                     	;# 
  2014  0211                     	;# 
  2015  0211                     	;# 
  2016  0212                     	;# 
  2017  0212                     	;# 
  2018  0213                     	;# 
  2019  0213                     	;# 
  2020  0214                     	;# 
  2021  0214                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0216                     	;# 
  2026  0216                     	;# 
  2027  0217                     	;# 
  2028  0217                     	;# 
  2029  0291                     	;# 
  2030  0291                     	;# 
  2031  0292                     	;# 
  2032  0293                     	;# 
  2033  0298                     	;# 
  2034  0298                     	;# 
  2035  0299                     	;# 
  2036  029A                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  0FE4                     	;# 
  2041  0FE5                     	;# 
  2042  0FE6                     	;# 
  2043  0FE7                     	;# 
  2044  0FE8                     	;# 
  2045  0FE9                     	;# 
  2046  0FEA                     	;# 
  2047  0FEB                     	;# 
  2048  0FED                     	;# 
  2049  0FEE                     	;# 
  2050  0FEF                     	;# 
  2051                           
  2052                           	psect	idataBANK4
  2053  1E69                     __pidataBANK4:	
  2054                           
  2055                           ;initializer for __product
  2056  1E69  3463               	retlw	99
  2057  1E6A  3402               	retlw	2
  2058  1E6B  3400               	retlw	0
  2059  1E6C  3400               	retlw	0
  2060  1E6D  3400               	retlw	0
  2061  1E6E  3400               	retlw	0
  2062  1E6F  3400               	retlw	0
  2063  1E70  3400               	retlw	0
  2064  1E71  3400               	retlw	0
  2065  1E72  3400               	retlw	0
  2066  1E73  3400               	retlw	0
  2067  1E74  3400               	retlw	0
  2068  1E75  34FF               	retlw	255
  2069  1E76  34FF               	retlw	255
  2070  1E77  34FF               	retlw	255
  2071  1E78  3400               	retlw	0
  2072  1E79  3400               	retlw	0
  2073  1E7A  3400               	retlw	0
  2074  1E7B  3400               	retlw	0
  2075  1E7C  3400               	retlw	0
  2076  1E7D  3400               	retlw	0
  2077  1E7E  3400               	retlw	0
  2078  1E7F  3400               	retlw	0
  2079  1E80  3400               	retlw	0
  2080  1E81  3400               	retlw	0
  2081  1E82  3400               	retlw	0
  2082  1E83  3400               	retlw	0
  2083  1E84  3400               	retlw	0
  2084  1E85  3400               	retlw	0
  2085  1E86  3400               	retlw	0
  2086  1E87  3400               	retlw	0
  2087  1E88  3400               	retlw	0
  2088                           
  2089                           	psect	stringtext
  2090  1000                     __pstringtext:	
  2091  1000                     _CC2500_registers_address:	
  2092  1000  3403               	retlw	3
  2093  1001  3416               	retlw	22
  2094  1002  3417               	retlw	23
  2095  1003  341E               	retlw	30
  2096  1004  341F               	retlw	31
  2097  1005  3420               	retlw	32
  2098  1006  342A               	retlw	42
  2099  1007  342B               	retlw	43
  2100  1008  340B               	retlw	11
  2101  1009  340C               	retlw	12
  2102  100A  340D               	retlw	13
  2103  100B  340E               	retlw	14
  2104  100C  340F               	retlw	15
  2105  100D  3410               	retlw	16
  2106  100E  3411               	retlw	17
  2107  100F  3412               	retlw	18
  2108  1010  3413               	retlw	19
  2109  1011  3414               	retlw	20
  2110  1012  340A               	retlw	10
  2111  1013  3415               	retlw	21
  2112  1014  3421               	retlw	33
  2113  1015  3422               	retlw	34
  2114  1016  3418               	retlw	24
  2115  1017  3419               	retlw	25
  2116  1018  341A               	retlw	26
  2117  1019  341B               	retlw	27
  2118  101A  341C               	retlw	28
  2119  101B  341D               	retlw	29
  2120  101C  3423               	retlw	35
  2121  101D  3424               	retlw	36
  2122  101E  3425               	retlw	37
  2123  101F  3426               	retlw	38
  2124  1020  3429               	retlw	41
  2125  1021  342C               	retlw	44
  2126  1022  342D               	retlw	45
  2127  1023  342E               	retlw	46
  2128  1024  3400               	retlw	0
  2129  1025  3401               	retlw	1
  2130  1026  3402               	retlw	2
  2131  1027  3407               	retlw	7
  2132  1028  3408               	retlw	8
  2133  1029  3409               	retlw	9
  2134  102A  3406               	retlw	6
  2135  102B  3404               	retlw	4
  2136  102C  3405               	retlw	5
  2137  102D  3427               	retlw	39
  2138  102E  3428               	retlw	40
  2139  102F                     __end_of_CC2500_registers_address:	
  2140  102F                     _CC2500_rfSettings:	
  2141  102F  3407               	retlw	7
  2142  1030  3407               	retlw	7
  2143  1031  3430               	retlw	48
  2144  1032  3487               	retlw	135
  2145  1033  346B               	retlw	107
  2146  1034  34F8               	retlw	248
  2147  1035  347F               	retlw	127
  2148  1036  343F               	retlw	63
  2149  1037  3409               	retlw	9
  2150  1038  3400               	retlw	0
  2151  1039  345C               	retlw	92
  2152  103A  34A7               	retlw	167
  2153  103B  3462               	retlw	98
  2154  103C  3486               	retlw	134
  2155  103D  3483               	retlw	131
  2156  103E  3403               	retlw	3
  2157  103F  3422               	retlw	34
  2158  1040  34F8               	retlw	248
  2159  1041  3400               	retlw	0
  2160  1042  3444               	retlw	68
  2161  1043  34B6               	retlw	182
  2162  1044  3410               	retlw	16
  2163  1045  3418               	retlw	24
  2164  1046  341D               	retlw	29
  2165  1047  341C               	retlw	28
  2166  1048  34C7               	retlw	199
  2167  1049  3400               	retlw	0
  2168  104A  34B2               	retlw	178
  2169  104B  34EA               	retlw	234
  2170  104C  340A               	retlw	10
  2171  104D  3400               	retlw	0
  2172  104E  3411               	retlw	17
  2173  104F  3459               	retlw	89
  2174  1050  3488               	retlw	136
  2175  1051  3431               	retlw	49
  2176  1052  340B               	retlw	11
  2177  1053  342F               	retlw	47
  2178  1054  342E               	retlw	46
  2179  1055  3406               	retlw	6
  2180  1056  3404               	retlw	4
  2181  1057  3405               	retlw	5
  2182  1058  3400               	retlw	0
  2183  1059  3430               	retlw	48
  2184  105A  34D3               	retlw	211
  2185  105B  3491               	retlw	145
  2186  105C  3441               	retlw	65
  2187  105D  3400               	retlw	0
  2188  105E                     __end_of_CC2500_rfSettings:	
  2189  105E                     _CC2500_patable_vaule:	
  2190  105E  34FE               	retlw	254
  2191  105F  34FE               	retlw	254
  2192  1060  34FE               	retlw	254
  2193  1061  34FE               	retlw	254
  2194  1062  34FE               	retlw	254
  2195  1063  34FE               	retlw	254
  2196  1064  34FE               	retlw	254
  2197  1065  34FE               	retlw	254
  2198  1066                     __end_of_CC2500_patable_vaule:	
  2199                           
  2200                           	psect	nvBANK0
  2201  006D                     __pnvBANK0:	
  2202  006D                     _product:	
  2203  006D                     	ds	1
  2204  000C                     _PORTA	set	12
  2205  000D                     _PORTB	set	13
  2206  000E                     _PORTC	set	14
  2207  0015                     _TMR0	set	21
  2208  005F                     _GIE	set	95
  2209  005B                     _IOCIE	set	91
  2210  0058                     _IOCIF	set	88
  2211  005E                     _PEIE	set	94
  2212  0060                     _RA0	set	96
  2213  0063                     _RA3	set	99
  2214  0064                     _RA4	set	100
  2215  0066                     _RA6	set	102
  2216  0067                     _RA7	set	103
  2217  0068                     _RB0	set	104
  2218  0069                     _RB1	set	105
  2219  006A                     _RB2	set	106
  2220  006B                     _RB3	set	107
  2221  006C                     _RB4	set	108
  2222  006D                     _RB5	set	109
  2223  0070                     _RC0	set	112
  2224  0071                     _RC1	set	113
  2225  0072                     _RC2	set	114
  2226  0074                     _RC4	set	116
  2227  0075                     _RC5	set	117
  2228  0077                     _RC7	set	119
  2229  005D                     _TMR0IE	set	93
  2230  005A                     _TMR0IF	set	90
  2231  009D                     _ADCON0	set	157
  2232  009E                     _ADCON1	set	158
  2233  009C                     _ADRESH	set	156
  2234  009B                     _ADRESL	set	155
  2235  0095                     _OPTION_REG	set	149
  2236  0099                     _OSCCON	set	153
  2237  008C                     _TRISA	set	140
  2238  008D                     _TRISB	set	141
  2239  008E                     _TRISC	set	142
  2240  0097                     _WDTCON	set	151
  2241  04E9                     _GO_nDONE	set	1257
  2242  0117                     _FVRCON	set	279
  2243  010C                     _LATA	set	268
  2244  010D                     _LATB	set	269
  2245  010E                     _LATC	set	270
  2246  018C                     _ANSELA	set	396
  2247  018D                     _ANSELB	set	397
  2248  018E                     _ANSELC	set	398
  2249  0192                     _PMADRH	set	402
  2250  0191                     _PMADRL	set	401
  2251  0196                     _PMCON2	set	406
  2252  0194                     _PMDATH	set	404
  2253  0193                     _PMDATL	set	403
  2254  0CAE                     _CFGS	set	3246
  2255  0CAC                     _FREE	set	3244
  2256  0CAD                     _LWLO	set	3245
  2257  0CA8                     _RD	set	3240
  2258  0CA9                     _WR	set	3241
  2259  0CAA                     _WREN	set	3242
  2260  1069                     _WPUB1	set	4201
  2261  106A                     _WPUB2	set	4202
  2262  0396                     _IOCBF	set	918
  2263  0395                     _IOCBN	set	917
  2264  0394                     _IOCBP	set	916
  2265  1CB2                     _IOCBF2	set	7346
  2266                           
  2267                           ; #config settings
  2268  0000                     
  2269                           	psect	cinit
  2270  0015                     start_initialization:	
  2271  0015                     __initialization:	
  2272                           
  2273                           ; Clear objects allocated to BITCOMMON
  2274  0015  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2275                           
  2276                           ; Clear objects allocated to COMMON
  2277  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2278  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2279  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2280  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2281  001A  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2282                           
  2283                           ; Clear objects allocated to BANK0
  2284  001B  01EA               	clrf	__pbssBANK0& (0+127)
  2285  001C  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  2286  001D  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  2287                           
  2288                           ; Clear objects allocated to BANK1
  2289  001E  30A0               	movlw	low __pbssBANK1
  2290  001F  0084               	movwf	4
  2291  0020  3000               	movlw	high __pbssBANK1
  2292  0021  0085               	movwf	5
  2293  0022  304F               	movlw	79
  2294  0023  319A  2232  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Clear objects allocated to BANK2
  2297  0026  3020               	movlw	low __pbssBANK2
  2298  0027  0084               	movwf	4
  2299  0028  3001               	movlw	high __pbssBANK2
  2300  0029  0085               	movwf	5
  2301  002A  3050               	movlw	80
  2302  002B  319A  2232  3180   	fcall	clear_ram0
  2303                           
  2304                           ; Clear objects allocated to BANK3
  2305  002E  30A0               	movlw	low __pbssBANK3
  2306  002F  0084               	movwf	4
  2307  0030  3001               	movlw	high __pbssBANK3
  2308  0031  0085               	movwf	5
  2309  0032  304F               	movlw	79
  2310  0033  319A  2232  3180   	fcall	clear_ram0
  2311                           
  2312                           ; Clear objects allocated to BANK4
  2313  0036  3020               	movlw	low __pbssBANK4
  2314  0037  0084               	movwf	4
  2315  0038  3002               	movlw	high __pbssBANK4
  2316  0039  0085               	movwf	5
  2317  003A  3025               	movlw	37
  2318  003B  319A  2232  3180   	fcall	clear_ram0
  2319                           
  2320                           ; Initialize objects allocated to BANK4
  2321  003E  3069               	movlw	low __pidataBANK4
  2322  003F  0084               	movwf	4
  2323  0040  309E               	movlw	(high __pidataBANK4)| (0+128)
  2324  0041  0085               	movwf	5
  2325  0042  3045               	movlw	low __pdataBANK4
  2326  0043  0086               	movwf	6
  2327  0044  3002               	movlw	high __pdataBANK4
  2328  0045  0087               	movwf	7
  2329  0046  3020               	movlw	32
  2330  0047  319A  222C         	fcall	init_ram
  2331  0049                     end_of_initialization:	
  2332                           ;End of C runtime variable initialization code
  2333                           
  2334  0049                     __end_of__initialization:	
  2335  0049  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2336  004A  0020               	movlb	0
  2337  004B  3195  2D71         	ljmp	_main	;jump to C main() function
  2338                           
  2339                           	psect	bitbssCOMMON
  2340  03D8                     __pbitbssCOMMON:	
  2341  03D8                     _Receive_OK:	
  2342  03D8                     	ds	1
  2343  03D9                     _Transceive_OK:	
  2344  03D9                     	ds	1
  2345                           
  2346                           	psect	bssCOMMON
  2347  0076                     __pbssCOMMON:	
  2348  0076                     _Dimmer:	
  2349  0076                     	ds	1
  2350  0077                     _DimmerLightsIntr:	
  2351  0077                     	ds	1
  2352  0078                     _LED:	
  2353  0078                     	ds	1
  2354  0079                     _RFSW:	
  2355  0079                     	ds	1
  2356  007A                     _SPI0Buffer:	
  2357  007A                     	ds	1
  2358                           
  2359                           	psect	bssBANK0
  2360  006A                     __pbssBANK0:	
  2361  006A                     _DelayOff:	
  2362  006A                     	ds	1
  2363  006B                     _DimmerLights:	
  2364  006B                     	ds	1
  2365  006C                     _Sw:	
  2366  006C                     	ds	1
  2367                           
  2368                           	psect	bssBANK1
  2369  00A0                     __pbssBANK1:	
  2370  00A0                     _myMain:	
  2371  00A0                     	ds	18
  2372  00B2                     _Buz1:	
  2373  00B2                     	ds	12
  2374  00BE                     _RF1:	
  2375  00BE                     	ds	12
  2376  00CA                     _RF_Count:	
  2377  00CA                     	ds	2
  2378  00CC                     _WDT:	
  2379  00CC                     	ds	2
  2380  00CE                     _CRC:	
  2381  00CE                     	ds	1
  2382  00CF                     _DimmerLights11:	
  2383  00CF                     	ds	1
  2384  00D0                     _DimmerLights22:	
  2385  00D0                     	ds	1
  2386  00D1                     _DimmerLightsIntrIOC:	
  2387  00D1                     	ds	1
  2388  00D2                     _RSSI:	
  2389  00D2                     	ds	1
  2390  00D3                     _Rx_Length:	
  2391  00D3                     	ds	1
  2392  00D4                     _Tx_Length:	
  2393  00D4                     	ds	1
  2394  00D5                     _r_address:	
  2395  00D5                     	ds	1
  2396  00D6                     _r_data:	
  2397  00D6                     	ds	1
  2398  00D7                     _s_data:	
  2399  00D7                     	ds	1
  2400  00D8                     _Temp1:	
  2401  00D8                     	ds	14
  2402  00E6                     _Dimmer1:	
  2403  00E6                     	ds	3
  2404  00E9                     _DlySw1:	
  2405  00E9                     	ds	2
  2406  00EB                     _DlySw2:	
  2407  00EB                     	ds	2
  2408  00ED                     _RFSW1:	
  2409  00ED                     	ds	1
  2410  00EE                     _RFSW2:	
  2411  00EE                     	ds	1
  2412                           
  2413                           	psect	bssBANK2
  2414  0120                     __pbssBANK2:	
  2415  0120                     _RF_Data:	
  2416  0120                     	ds	21
  2417  0135                     _Timer0:	
  2418  0135                     	ds	8
  2419  013D                     _DimmerLights1:	
  2420  013D                     	ds	15
  2421  014C                     _DimmerLights2:	
  2422  014C                     	ds	15
  2423  015B                     _Sw1:	
  2424  015B                     	ds	9
  2425  0164                     _VarErrLED:	
  2426  0164                     	ds	4
  2427  0168                     _VarLED1:	
  2428  0168                     	ds	4
  2429  016C                     _VarLED2:	
  2430  016C                     	ds	4
  2431                           
  2432                           	psect	bssBANK3
  2433  01A0                     __pbssBANK3:	
  2434  01A0                     _Load1:	
  2435  01A0                     	ds	70
  2436  01E6                     _Sw2:	
  2437  01E6                     	ds	9
  2438                           
  2439                           	psect	bssBANK4
  2440  0220                     __pbssBANK4:	
  2441  0220                     _Memory:	
  2442  0220                     	ds	37
  2443                           
  2444                           	psect	dataBANK4
  2445  0245                     __pdataBANK4:	
  2446  0245                     __product:	
  2447  0245                     	ds	32
  2448                           
  2449                           	psect	clrtext
  2450  1A32                     clear_ram0:	
  2451                           ;	Called with FSR0 containing the base address, and
  2452                           ;	WREG with the size to clear
  2453                           
  2454  1A32  0064               	clrwdt	;clear the watchdog before getting into this loop
  2455  1A33                     clrloop0:	
  2456  1A33  0180               	clrf	0	;clear RAM location pointed to by FSR
  2457  1A34  3101               	addfsr 0,1
  2458  1A35  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2459  1A36  2A33               	goto	clrloop0	;have we reached the end yet?
  2460  1A37  3400               	retlw	0	;all done for this memory range, return
  2461                           
  2462                           	psect	inittext
  2463  1A2C                     init_ram:	
  2464  1A2C  00FE               	movwf	126
  2465  1A2D                     initloop:	
  2466  1A2D  0012               	moviw fsr0++
  2467  1A2E  001E               	movwi fsr1++
  2468  1A2F  0BFE               	decfsz	126,f
  2469  1A30  2A2D               	goto	initloop
  2470  1A31  3400               	retlw	0
  2471                           
  2472                           	psect	cstackBANK4
  2473  0265                     __pcstackBANK4:	
  2474  0265                     ?_main:	
  2475  0265                     main@argc:	
  2476                           ; 2 bytes @ 0x0
  2477                           
  2478                           
  2479                           ; 2 bytes @ 0x0
  2480  0265                     	ds	2
  2481  0267                     main@argv:	
  2482                           
  2483                           ; 2 bytes @ 0x2
  2484  0267                     	ds	2
  2485                           
  2486                           	psect	cstackCOMMON
  2487  0070                     __pcstackCOMMON:	
  2488  0070                     ?_Timeout_Counter:	
  2489  0070                     ?_set_TimeoutCleared:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_CC2500_WriteByte:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_CC2500_WriteCommand:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_CC2500_ReadStatus:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_CC2500_ReadByte:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_CC2500_PowerRST:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_CC2500_InitSetREG:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_CC2500_InitPATable:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_CC2500_ClearTXFIFO:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_CC2500_ClearRXFIFO:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_CC2500_FrequencyCabr:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_CC2500_SIDLEMode:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_DlyOff_Initialization:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_DlyOff_Main:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_setTxData:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_setDimmerLights_Initialization:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_Dimmer_Initialization:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_setLoad_GO:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_setMemory_GO:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_setDimmerLights_Main:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_setDimmerLights_ERROR:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_setLoad_Count:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_setLED_Initialization:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_setLED_Main:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_Fosc_Set:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_IO_Set:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_TMR0_Set:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_ADC_Set:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_IOC_Set:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_WDT_Set:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_IOC_ISR:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_TMR0_ISR:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_Flash_Memory_Write:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_Flash_Memory_Modify:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_WDT_Clearing:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_myMain_Initialization:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_Temp_Initialization:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_Load_Initialization:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_Switch_Initialization:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_RF_Initialization:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_getLoad_AD:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_getTemp_AD:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_my_MainTime:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_Temp_Main:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_Load_Main:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_Switch_Main:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_RF_Main:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_setTemp_Enable:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_setLoad_Enable:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_setSw_Enable:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setRF_Enable:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setLoad_AH_AL_Restore:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setLoad_Exceptions:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setTemp_Initialization:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setTemp_Main:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setOverTemp_Exceptions:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_setRF_Initialization:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setRF_Main:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_getRxData:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_setLog_Code:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_setControl_Lights_Table:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_setRFSW_Control:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_setRFSW_AdjControl:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_setRF_DimmerValue:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_setSw_Initialization:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setSw_Main:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_Sw_DimmerOnFunc:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Sw_DimmerAdjFunc:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_Sw_DimmerOffFunc:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_Buzzer_Initialization:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Buzzer_Main:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_CC2500_TxData:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_CC2500_RxData:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_CC2500_PowerOnInitial:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_DelayOffPointSelect:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_DelayOff_Initialization:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_DelayOff_Main:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_DimmerIntrIOCPointSelect:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ??_DimmerIntrIOCPointSelect:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_DimmerIntrPointSelect:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ??_DimmerIntrPointSelect:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setDimmerLights_IntrControl:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_DimmerLightsPointSelect:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_DimmerLights_Initialization:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_DimmerLights_Close:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_DimmerLights_Main:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_DimmerLights_Exceptions:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_setDimmerLights_AdjRF:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_LedPointSelect:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_LED_Initialization:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_LED_Main:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_Mcu_Initialization:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_ISR:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setDimmerReClock:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_Flash_Memory_Initialization:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_Flash_Memory_Main:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_Flash_Memory_Unlock:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_Flash_Memory_Erasing:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_WDT_Main:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_setRF_Learn:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_RfSWPointSelect:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_TouchPower:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_SwPointSelect:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?i1_setLoad_StatusOff:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_DelayTimejudge:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_getDimmerLights_StatusFlag:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0070                     ?_getPercentValue:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0070                     ?_Flash_Memory_Read:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816  0070                     ?_getTemp_Safe:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819  0070                     ?_setPercentValue:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822  0070                     ?_getLoad_Safe:	
  2823                           ; 1 bytes @ 0x0
  2824                           
  2825  0070                     i1setLoad_StatusOff@command:	
  2826                           ; 1 bytes @ 0x0
  2827                           
  2828                           
  2829                           ; 1 bytes @ 0x0
  2830  0070                     	ds	1
  2831  0071                     ??i1_setLoad_StatusOff:	
  2832  0071                     DimmerIntrIOCPointSelect@lights:	
  2833                           ; 0 bytes @ 0x1
  2834                           
  2835  0071                     DimmerIntrPointSelect@lights:	
  2836                           ; 1 bytes @ 0x1
  2837                           
  2838  0071                     i1setLoad_StatusOff@lights:	
  2839                           ; 1 bytes @ 0x1
  2840                           
  2841                           
  2842                           ; 1 bytes @ 0x1
  2843  0071                     	ds	1
  2844  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2845  0072                     ??_setDimmerLights_IntrControl:	
  2846                           ; 0 bytes @ 0x2
  2847                           
  2848  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2849                           ; 0 bytes @ 0x2
  2850                           
  2851                           
  2852                           ; 1 bytes @ 0x2
  2853  0072                     	ds	1
  2854  0073                     ??_IOC_ISR:	
  2855  0073                     ??_setDimmerReClock:	
  2856                           ; 0 bytes @ 0x3
  2857                           
  2858                           
  2859                           ; 0 bytes @ 0x3
  2860  0073                     	ds	1
  2861  0074                     setDimmerLights_IntrControl@lights:	
  2862                           
  2863                           ; 1 bytes @ 0x4
  2864  0074                     	ds	1
  2865  0075                     ??_TMR0_ISR:	
  2866  0075                     ??_ISR:	
  2867                           ; 0 bytes @ 0x5
  2868                           
  2869                           
  2870                           ; 0 bytes @ 0x5
  2871  0075                     	ds	1
  2872                           
  2873                           	psect	cstackBANK0
  2874  0020                     __pcstackBANK0:	
  2875  0020                     ??_Timeout_Counter:	
  2876  0020                     ??_set_TimeoutCleared:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0020                     ??_CC2500_WriteByte:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0020                     ??_CC2500_ReadByte:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0020                     ?_DelayTime_1us:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0020                     ??_setTxData:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0020                     ?_setLoad_StatusOff:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0020                     ??_Dimmer_Initialization:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0020                     ??_getDimmerLights_StatusFlag:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0020                     ??_setLoad_GO:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0020                     ??_setMemory_GO:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0020                     ??_setLoad_Count:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0020                     ?_setLoad_StatusOn:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0020                     ??_Fosc_Set:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0020                     ??_IO_Set:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0020                     ??_TMR0_Set:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0020                     ??_ADC_Set:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0020                     ??_IOC_Set:	
  2925                           ; 0 bytes @ 0x0
  2926                           
  2927  0020                     ??_WDT_Set:	
  2928                           ; 0 bytes @ 0x0
  2929                           
  2930  0020                     ??_Flash_Memory_Read:	
  2931                           ; 0 bytes @ 0x0
  2932                           
  2933  0020                     ??_Flash_Memory_Write:	
  2934                           ; 0 bytes @ 0x0
  2935                           
  2936  0020                     ??_WDT_Clearing:	
  2937                           ; 0 bytes @ 0x0
  2938                           
  2939  0020                     ??_myMain_Initialization:	
  2940                           ; 0 bytes @ 0x0
  2941                           
  2942  0020                     ??_Temp_Initialization:	
  2943                           ; 0 bytes @ 0x0
  2944                           
  2945  0020                     ??_setTemp_Enable:	
  2946                           ; 0 bytes @ 0x0
  2947                           
  2948  0020                     ??_setLoad_Enable:	
  2949                           ; 0 bytes @ 0x0
  2950                           
  2951  0020                     ??_setRF_Enable:	
  2952                           ; 0 bytes @ 0x0
  2953                           
  2954  0020                     ??_setLoad_AH_AL_Restore:	
  2955                           ; 0 bytes @ 0x0
  2956                           
  2957  0020                     ??_getTemp_Safe:	
  2958                           ; 0 bytes @ 0x0
  2959                           
  2960  0020                     ??_setTemp_Initialization:	
  2961                           ; 0 bytes @ 0x0
  2962                           
  2963  0020                     ??_setRF_Initialization:	
  2964                           ; 0 bytes @ 0x0
  2965                           
  2966  0020                     ??_Buzzer_Initialization:	
  2967                           ; 0 bytes @ 0x0
  2968                           
  2969  0020                     ??_Buzzer_Main:	
  2970                           ; 0 bytes @ 0x0
  2971                           
  2972  0020                     ??_DelayOffPointSelect:	
  2973                           ; 0 bytes @ 0x0
  2974                           
  2975  0020                     ??_DimmerLightsPointSelect:	
  2976                           ; 0 bytes @ 0x0
  2977                           
  2978  0020                     ??_LedPointSelect:	
  2979                           ; 0 bytes @ 0x0
  2980                           
  2981  0020                     ??_Flash_Memory_Unlock:	
  2982                           ; 0 bytes @ 0x0
  2983                           
  2984  0020                     ??_Flash_Memory_Erasing:	
  2985                           ; 0 bytes @ 0x0
  2986                           
  2987  0020                     ??_WDT_Main:	
  2988                           ; 0 bytes @ 0x0
  2989                           
  2990  0020                     ??_getLoad_Safe:	
  2991                           ; 0 bytes @ 0x0
  2992                           
  2993  0020                     ??_setRF_Learn:	
  2994                           ; 0 bytes @ 0x0
  2995                           
  2996  0020                     ??_RfSWPointSelect:	
  2997                           ; 0 bytes @ 0x0
  2998                           
  2999  0020                     ??_TouchPower:	
  3000                           ; 0 bytes @ 0x0
  3001                           
  3002  0020                     ??_SwPointSelect:	
  3003                           ; 0 bytes @ 0x0
  3004                           
  3005  0020                     ?___bmul:	
  3006                           ; 0 bytes @ 0x0
  3007                           
  3008  0020                     ?_getBuz_GO:	
  3009                           ; 1 bytes @ 0x0
  3010                           
  3011  0020                     ?_getAD:	
  3012                           ; 2 bytes @ 0x0
  3013                           
  3014  0020                     ?___wmul:	
  3015                           ; 2 bytes @ 0x0
  3016                           
  3017  0020                     ?___awdiv:	
  3018                           ; 2 bytes @ 0x0
  3019                           
  3020  0020                     ?___lwdiv:	
  3021                           ; 2 bytes @ 0x0
  3022                           
  3023  0020                     ?___ftpack:	
  3024                           ; 2 bytes @ 0x0
  3025                           
  3026  0020                     getAD@adcon1:	
  3027                           ; 3 bytes @ 0x0
  3028                           
  3029  0020                     setLoad_Enable@command:	
  3030                           ; 1 bytes @ 0x0
  3031                           
  3032  0020                     setLoad_GO@command:	
  3033                           ; 1 bytes @ 0x0
  3034                           
  3035  0020                     setLoad_StatusOn@command:	
  3036                           ; 1 bytes @ 0x0
  3037                           
  3038  0020                     setLoad_StatusOff@command:	
  3039                           ; 1 bytes @ 0x0
  3040                           
  3041  0020                     getLoad_Safe@result:	
  3042                           ; 1 bytes @ 0x0
  3043                           
  3044  0020                     setTemp_Enable@command:	
  3045                           ; 1 bytes @ 0x0
  3046                           
  3047  0020                     getTemp_Safe@result:	
  3048                           ; 1 bytes @ 0x0
  3049                           
  3050  0020                     setRF_Learn@command:	
  3051                           ; 1 bytes @ 0x0
  3052                           
  3053  0020                     setRF_Enable@command:	
  3054                           ; 1 bytes @ 0x0
  3055                           
  3056  0020                     ___bmul@multiplicand:	
  3057                           ; 1 bytes @ 0x0
  3058                           
  3059  0020                     DelayTime_1us@count:	
  3060                           ; 1 bytes @ 0x0
  3061                           
  3062  0020                     ___wmul@multiplier:	
  3063                           ; 2 bytes @ 0x0
  3064                           
  3065  0020                     ___awdiv@divisor:	
  3066                           ; 2 bytes @ 0x0
  3067                           
  3068  0020                     ___lwdiv@divisor:	
  3069                           ; 2 bytes @ 0x0
  3070                           
  3071  0020                     ___ftpack@arg:	
  3072                           ; 2 bytes @ 0x0
  3073                           
  3074                           
  3075                           ; 3 bytes @ 0x0
  3076  0020                     	ds	1
  3077  0021                     ??_setLoad_StatusOff:	
  3078  0021                     ??_setLoad_StatusOn:	
  3079                           ; 0 bytes @ 0x1
  3080                           
  3081  0021                     ??_RF_Initialization:	
  3082                           ; 0 bytes @ 0x1
  3083                           
  3084  0021                     ??_Mcu_Initialization:	
  3085                           ; 0 bytes @ 0x1
  3086                           
  3087  0021                     ??___bmul:	
  3088                           ; 0 bytes @ 0x1
  3089                           
  3090  0021                     CC2500_WriteByte@loop_a:	
  3091                           ; 0 bytes @ 0x1
  3092                           
  3093  0021                     CC2500_ReadByte@loop_b:	
  3094                           ; 1 bytes @ 0x1
  3095                           
  3096  0021                     DelayOffPointSelect@sw:	
  3097                           ; 1 bytes @ 0x1
  3098                           
  3099  0021                     DimmerLightsPointSelect@lights:	
  3100                           ; 1 bytes @ 0x1
  3101                           
  3102  0021                     getDimmerLights_StatusFlag@Status:	
  3103                           ; 1 bytes @ 0x1
  3104                           
  3105  0021                     LedPointSelect@led:	
  3106                           ; 1 bytes @ 0x1
  3107                           
  3108  0021                     Flash_Memory_Read@i:	
  3109                           ; 1 bytes @ 0x1
  3110                           
  3111  0021                     Flash_Memory_Write@i:	
  3112                           ; 1 bytes @ 0x1
  3113                           
  3114  0021                     setLoad_Count@command:	
  3115                           ; 1 bytes @ 0x1
  3116                           
  3117  0021                     setLoad_StatusOn@lights:	
  3118                           ; 1 bytes @ 0x1
  3119                           
  3120  0021                     setLoad_StatusOff@lights:	
  3121                           ; 1 bytes @ 0x1
  3122                           
  3123  0021                     setLoad_AH_AL_Restore@i:	
  3124                           ; 1 bytes @ 0x1
  3125                           
  3126  0021                     RfSWPointSelect@sw:	
  3127                           ; 1 bytes @ 0x1
  3128                           
  3129  0021                     SwPointSelect@sw:	
  3130                           ; 1 bytes @ 0x1
  3131                           
  3132                           
  3133                           ; 1 bytes @ 0x1
  3134  0021                     	ds	1
  3135  0022                     ??_CC2500_WriteCommand:	
  3136  0022                     ??_CC2500_ReadStatus:	
  3137                           ; 0 bytes @ 0x2
  3138                           
  3139  0022                     ??_DelayTime_1us:	
  3140                           ; 0 bytes @ 0x2
  3141                           
  3142  0022                     ?_CC2500_WriteREG:	
  3143                           ; 0 bytes @ 0x2
  3144                           
  3145  0022                     ??_DlyOff_Initialization:	
  3146                           ; 0 bytes @ 0x2
  3147                           
  3148  0022                     ?_setSw_Status:	
  3149                           ; 0 bytes @ 0x2
  3150                           
  3151  0022                     ?_setRFSW_Status:	
  3152                           ; 0 bytes @ 0x2
  3153                           
  3154  0022                     ?_setDimmerLights_Trigger:	
  3155                           ; 0 bytes @ 0x2
  3156                           
  3157  0022                     ?_setDimmerLights_Switch:	
  3158                           ; 0 bytes @ 0x2
  3159                           
  3160  0022                     ??_setDimmerLights_Initialization:	
  3161                           ; 0 bytes @ 0x2
  3162                           
  3163  0022                     ?_setDimmerLights_TriggerERROR:	
  3164                           ; 0 bytes @ 0x2
  3165                           
  3166  0022                     ?_setLED:	
  3167                           ; 0 bytes @ 0x2
  3168                           
  3169  0022                     ??_setLED_Main:	
  3170                           ; 0 bytes @ 0x2
  3171                           
  3172  0022                     ??_Load_Initialization:	
  3173                           ; 0 bytes @ 0x2
  3174                           
  3175  0022                     ??_setSw_Enable:	
  3176                           ; 0 bytes @ 0x2
  3177                           
  3178  0022                     ??_getBuz_GO:	
  3179                           ; 0 bytes @ 0x2
  3180                           
  3181  0022                     ?_setDimmerLights_AdjGo:	
  3182                           ; 0 bytes @ 0x2
  3183                           
  3184  0022                     ?_setDimmerLights_TriggerAdj:	
  3185                           ; 0 bytes @ 0x2
  3186                           
  3187  0022                     ?_setDimmerLights_Clear:	
  3188                           ; 0 bytes @ 0x2
  3189                           
  3190  0022                     CC2500_WriteREG@value:	
  3191                           ; 0 bytes @ 0x2
  3192                           
  3193  0022                     DlyOff_Initialization@sw:	
  3194                           ; 1 bytes @ 0x2
  3195                           
  3196  0022                     _getDimmerLights_StatusFlag$2647:	
  3197                           ; 1 bytes @ 0x2
  3198                           
  3199  0022                     setDimmerLights_TriggerERROR@command:	
  3200                           ; 1 bytes @ 0x2
  3201                           
  3202  0022                     setDimmerLights_Switch@command:	
  3203                           ; 1 bytes @ 0x2
  3204                           
  3205  0022                     setDimmerLights_AdjGo@command:	
  3206                           ; 1 bytes @ 0x2
  3207                           
  3208  0022                     setDimmerLights_Trigger@command:	
  3209                           ; 1 bytes @ 0x2
  3210                           
  3211  0022                     setDimmerLights_TriggerAdj@command:	
  3212                           ; 1 bytes @ 0x2
  3213                           
  3214  0022                     setDimmerLights_Clear@command:	
  3215                           ; 1 bytes @ 0x2
  3216                           
  3217  0022                     setLED@command:	
  3218                           ; 1 bytes @ 0x2
  3219                           
  3220  0022                     Flash_Memory_Read@address:	
  3221                           ; 1 bytes @ 0x2
  3222                           
  3223  0022                     setMemory_GO@command:	
  3224                           ; 1 bytes @ 0x2
  3225                           
  3226  0022                     setRFSW_Status@command:	
  3227                           ; 1 bytes @ 0x2
  3228                           
  3229  0022                     setSw_Enable@command:	
  3230                           ; 1 bytes @ 0x2
  3231                           
  3232  0022                     setSw_Status@command:	
  3233                           ; 1 bytes @ 0x2
  3234                           
  3235  0022                     ___bmul@product:	
  3236                           ; 1 bytes @ 0x2
  3237                           
  3238  0022                     DelayTime_1us@i:	
  3239                           ; 1 bytes @ 0x2
  3240                           
  3241  0022                     ___wmul@multiplicand:	
  3242                           ; 2 bytes @ 0x2
  3243                           
  3244  0022                     ___awdiv@dividend:	
  3245                           ; 2 bytes @ 0x2
  3246                           
  3247  0022                     ___lwdiv@dividend:	
  3248                           ; 2 bytes @ 0x2
  3249                           
  3250                           
  3251                           ; 2 bytes @ 0x2
  3252  0022                     	ds	1
  3253  0023                     ??_CC2500_WriteREG:	
  3254  0023                     ??_setSw_Status:	
  3255                           ; 0 bytes @ 0x3
  3256                           
  3257  0023                     ??_setRFSW_Status:	
  3258                           ; 0 bytes @ 0x3
  3259                           
  3260  0023                     ??_setDimmerLights_Trigger:	
  3261                           ; 0 bytes @ 0x3
  3262                           
  3263  0023                     ??_setDimmerLights_Switch:	
  3264                           ; 0 bytes @ 0x3
  3265                           
  3266  0023                     ??_setDimmerLights_TriggerERROR:	
  3267                           ; 0 bytes @ 0x3
  3268                           
  3269  0023                     ??_setLED:	
  3270                           ; 0 bytes @ 0x3
  3271                           
  3272  0023                     ??_DelayOff_Initialization:	
  3273                           ; 0 bytes @ 0x3
  3274                           
  3275  0023                     ??_DimmerLights_Close:	
  3276                           ; 0 bytes @ 0x3
  3277                           
  3278  0023                     ??_setDimmerLights_AdjGo:	
  3279                           ; 0 bytes @ 0x3
  3280                           
  3281  0023                     ??_setDimmerLights_TriggerAdj:	
  3282                           ; 0 bytes @ 0x3
  3283                           
  3284  0023                     ??_setDimmerLights_Clear:	
  3285                           ; 0 bytes @ 0x3
  3286                           
  3287  0023                     ??_getAD:	
  3288                           ; 0 bytes @ 0x3
  3289                           
  3290  0023                     CC2500_WriteCommand@command:	
  3291                           ; 0 bytes @ 0x3
  3292                           
  3293  0023                     CC2500_ReadStatus@status_addr:	
  3294                           ; 1 bytes @ 0x3
  3295                           
  3296  0023                     setDimmerLights_Initialization@lights:	
  3297                           ; 1 bytes @ 0x3
  3298                           
  3299  0023                     setDimmerLights_TriggerERROR@lights:	
  3300                           ; 1 bytes @ 0x3
  3301                           
  3302  0023                     setDimmerLights_Switch@lights:	
  3303                           ; 1 bytes @ 0x3
  3304                           
  3305  0023                     setDimmerLights_AdjGo@lights:	
  3306                           ; 1 bytes @ 0x3
  3307                           
  3308  0023                     setDimmerLights_Trigger@lights:	
  3309                           ; 1 bytes @ 0x3
  3310                           
  3311  0023                     setDimmerLights_TriggerAdj@lights:	
  3312                           ; 1 bytes @ 0x3
  3313                           
  3314  0023                     setDimmerLights_Clear@lights:	
  3315                           ; 1 bytes @ 0x3
  3316                           
  3317  0023                     setLED@led:	
  3318                           ; 1 bytes @ 0x3
  3319                           
  3320  0023                     getAD@adcon0:	
  3321                           ; 1 bytes @ 0x3
  3322                           
  3323  0023                     Flash_Memory_Read@ret:	
  3324                           ; 1 bytes @ 0x3
  3325                           
  3326  0023                     setRFSW_Status@sw:	
  3327                           ; 1 bytes @ 0x3
  3328                           
  3329  0023                     setSw_Status@sw:	
  3330                           ; 1 bytes @ 0x3
  3331                           
  3332  0023                     ___bmul@multiplier:	
  3333                           ; 1 bytes @ 0x3
  3334                           
  3335  0023                     ___ftpack@exp:	
  3336                           ; 1 bytes @ 0x3
  3337                           
  3338                           
  3339                           ; 1 bytes @ 0x3
  3340  0023                     	ds	1
  3341  0024                     ??_CC2500_ClearTXFIFO:	
  3342  0024                     ??_CC2500_ClearRXFIFO:	
  3343                           ; 0 bytes @ 0x4
  3344                           
  3345  0024                     ??_CC2500_SIDLEMode:	
  3346                           ; 0 bytes @ 0x4
  3347                           
  3348  0024                     ??_DelayTimejudge:	
  3349                           ; 0 bytes @ 0x4
  3350                           
  3351  0024                     ?_setDimmerLights:	
  3352                           ; 0 bytes @ 0x4
  3353                           
  3354  0024                     ??_setDimmerLights_ERROR:	
  3355                           ; 0 bytes @ 0x4
  3356                           
  3357  0024                     ??_setLED_Initialization:	
  3358                           ; 0 bytes @ 0x4
  3359                           
  3360  0024                     ??_Flash_Memory_Modify:	
  3361                           ; 0 bytes @ 0x4
  3362                           
  3363  0024                     ??_getLoad_AD:	
  3364                           ; 0 bytes @ 0x4
  3365                           
  3366  0024                     ??_getTemp_AD:	
  3367                           ; 0 bytes @ 0x4
  3368                           
  3369  0024                     ??_setSw_Initialization:	
  3370                           ; 0 bytes @ 0x4
  3371                           
  3372  0024                     ??_Sw_DimmerAdjFunc:	
  3373                           ; 0 bytes @ 0x4
  3374                           
  3375  0024                     ??_CC2500_TxData:	
  3376                           ; 0 bytes @ 0x4
  3377                           
  3378  0024                     ??_CC2500_RxData:	
  3379                           ; 0 bytes @ 0x4
  3380                           
  3381  0024                     ??_DimmerLights_Initialization:	
  3382                           ; 0 bytes @ 0x4
  3383                           
  3384  0024                     ??___wmul:	
  3385                           ; 0 bytes @ 0x4
  3386                           
  3387  0024                     ??___awdiv:	
  3388                           ; 0 bytes @ 0x4
  3389                           
  3390  0024                     ??___lwdiv:	
  3391                           ; 0 bytes @ 0x4
  3392                           
  3393  0024                     CC2500_WriteREG@w_addr:	
  3394                           ; 0 bytes @ 0x4
  3395                           
  3396  0024                     setDimmerLights@status:	
  3397                           ; 1 bytes @ 0x4
  3398                           
  3399  0024                     setLED_Initialization@led:	
  3400                           ; 1 bytes @ 0x4
  3401                           
  3402  0024                     setLED_Main@led:	
  3403                           ; 1 bytes @ 0x4
  3404                           
  3405  0024                     setSw_Initialization@sw:	
  3406                           ; 1 bytes @ 0x4
  3407                           
  3408  0024                     Sw_DimmerAdjFunc@Idle:	
  3409                           ; 1 bytes @ 0x4
  3410                           
  3411  0024                     ___ftpack@sign:	
  3412                           ; 1 bytes @ 0x4
  3413                           
  3414  0024                     getBuz_GO@i:	
  3415                           ; 1 bytes @ 0x4
  3416                           
  3417  0024                     DelayTime_1us@j:	
  3418                           ; 2 bytes @ 0x4
  3419                           
  3420  0024                     ___wmul@product:	
  3421                           ; 2 bytes @ 0x4
  3422                           
  3423                           
  3424                           ; 2 bytes @ 0x4
  3425  0024                     	ds	1
  3426  0025                     ??_CC2500_InitSetREG:	
  3427  0025                     ??_CC2500_InitPATable:	
  3428                           ; 0 bytes @ 0x5
  3429                           
  3430  0025                     ??_setDimmerLights:	
  3431                           ; 0 bytes @ 0x5
  3432                           
  3433  0025                     ??_Switch_Initialization:	
  3434                           ; 0 bytes @ 0x5
  3435                           
  3436  0025                     ??___ftpack:	
  3437                           ; 0 bytes @ 0x5
  3438                           
  3439  0025                     ??_LED_Initialization:	
  3440                           ; 0 bytes @ 0x5
  3441                           
  3442  0025                     ??_LED_Main:	
  3443                           ; 0 bytes @ 0x5
  3444                           
  3445  0025                     CC2500_TxData@loop_e:	
  3446                           ; 0 bytes @ 0x5
  3447                           
  3448  0025                     CC2500_RxData@loop_f:	
  3449                           ; 1 bytes @ 0x5
  3450                           
  3451  0025                     setDimmerLights_ERROR@lights:	
  3452                           ; 1 bytes @ 0x5
  3453                           
  3454  0025                     Flash_Memory_Modify@i:	
  3455                           ; 1 bytes @ 0x5
  3456                           
  3457  0025                     getTemp_AD@channel:	
  3458                           ; 1 bytes @ 0x5
  3459                           
  3460  0025                     Sw_DimmerAdjFunc@sw:	
  3461                           ; 1 bytes @ 0x5
  3462                           
  3463  0025                     ___awdiv@counter:	
  3464                           ; 1 bytes @ 0x5
  3465                           
  3466  0025                     ___lwdiv@counter:	
  3467                           ; 1 bytes @ 0x5
  3468                           
  3469                           
  3470                           ; 1 bytes @ 0x5
  3471  0025                     	ds	1
  3472  0026                     ??_CC2500_PowerRST:	
  3473  0026                     ??_CC2500_FrequencyCabr:	
  3474                           ; 0 bytes @ 0x6
  3475                           
  3476  0026                     ??_Flash_Memory_Main:	
  3477                           ; 0 bytes @ 0x6
  3478                           
  3479  0026                     CC2500_InitSetREG@temp1:	
  3480                           ; 0 bytes @ 0x6
  3481                           
  3482  0026                     CC2500_InitPATable@temp:	
  3483                           ; 1 bytes @ 0x6
  3484                           
  3485  0026                     DelayTimejudge@i:	
  3486                           ; 1 bytes @ 0x6
  3487                           
  3488  0026                     setDimmerLights@lights:	
  3489                           ; 1 bytes @ 0x6
  3490                           
  3491  0026                     getLoad_AD@channel:	
  3492                           ; 1 bytes @ 0x6
  3493                           
  3494  0026                     ___awdiv@sign:	
  3495                           ; 1 bytes @ 0x6
  3496                           
  3497  0026                     ___lwdiv@quotient:	
  3498                           ; 1 bytes @ 0x6
  3499                           
  3500                           
  3501                           ; 2 bytes @ 0x6
  3502  0026                     	ds	1
  3503  0027                     CC2500_InitSetREG@temp2:	
  3504  0027                     CC2500_InitPATable@loop_d:	
  3505                           ; 1 bytes @ 0x7
  3506                           
  3507  0027                     DelayTimejudge@j:	
  3508                           ; 1 bytes @ 0x7
  3509                           
  3510  0027                     getLoad_AD@j:	
  3511                           ; 1 bytes @ 0x7
  3512                           
  3513  0027                     ___awdiv@quotient:	
  3514                           ; 1 bytes @ 0x7
  3515                           
  3516                           
  3517                           ; 2 bytes @ 0x7
  3518  0027                     	ds	1
  3519  0028                     ?___awtoft:	
  3520  0028                     CC2500_InitSetREG@loop_c:	
  3521                           ; 3 bytes @ 0x8
  3522                           
  3523  0028                     DelayTimejudge@k:	
  3524                           ; 1 bytes @ 0x8
  3525                           
  3526  0028                     getLoad_AD@i:	
  3527                           ; 1 bytes @ 0x8
  3528                           
  3529  0028                     ___awtoft@c:	
  3530                           ; 1 bytes @ 0x8
  3531                           
  3532                           
  3533                           ; 2 bytes @ 0x8
  3534  0028                     	ds	1
  3535  0029                     ?_setBuz:	
  3536  0029                     ??_CC2500_PowerOnInitial:	
  3537                           ; 0 bytes @ 0x9
  3538                           
  3539  0029                     DelayTimejudge@value:	
  3540                           ; 0 bytes @ 0x9
  3541                           
  3542  0029                     setBuz@time:	
  3543                           ; 1 bytes @ 0x9
  3544                           
  3545                           
  3546                           ; 2 bytes @ 0x9
  3547  0029                     	ds	1
  3548  002A                     ?_setDelayOff_GO:	
  3549  002A                     setDelayOff_GO@command:	
  3550                           ; 0 bytes @ 0xA
  3551                           
  3552                           
  3553                           ; 1 bytes @ 0xA
  3554  002A                     	ds	1
  3555  002B                     ??_setBuz:	
  3556  002B                     ??___awtoft:	
  3557                           ; 0 bytes @ 0xB
  3558                           
  3559  002B                     setDelayOff_GO@value:	
  3560                           ; 0 bytes @ 0xB
  3561                           
  3562                           
  3563                           ; 1 bytes @ 0xB
  3564  002B                     	ds	1
  3565  002C                     ??_setDelayOff_GO:	
  3566  002C                     setBuz@count:	
  3567                           ; 0 bytes @ 0xC
  3568                           
  3569                           
  3570                           ; 1 bytes @ 0xC
  3571  002C                     	ds	1
  3572  002D                     ??_my_MainTime:	
  3573  002D                     ??_setLog_Code:	
  3574                           ; 0 bytes @ 0xD
  3575                           
  3576  002D                     ??_DimmerLights_Exceptions:	
  3577                           ; 0 bytes @ 0xD
  3578                           
  3579  002D                     DimmerLights_Exceptions@status:	
  3580                           ; 0 bytes @ 0xD
  3581                           
  3582  002D                     ___awtoft@sign:	
  3583                           ; 1 bytes @ 0xD
  3584                           
  3585                           
  3586                           ; 1 bytes @ 0xD
  3587  002D                     	ds	1
  3588  002E                     ??_setLoad_Exceptions:	
  3589  002E                     ??_setOverTemp_Exceptions:	
  3590                           ; 0 bytes @ 0xE
  3591                           
  3592  002E                     ?___ftdiv:	
  3593                           ; 0 bytes @ 0xE
  3594                           
  3595  002E                     ?___ftmul:	
  3596                           ; 3 bytes @ 0xE
  3597                           
  3598  002E                     setDelayOff_GO@sw:	
  3599                           ; 3 bytes @ 0xE
  3600                           
  3601  002E                     ___ftdiv@f2:	
  3602                           ; 1 bytes @ 0xE
  3603                           
  3604  002E                     ___ftmul@f1:	
  3605                           ; 3 bytes @ 0xE
  3606                           
  3607                           
  3608                           ; 3 bytes @ 0xE
  3609  002E                     	ds	1
  3610  002F                     setLoad_Exceptions@i:	
  3611  002F                     setOverTemp_Exceptions@i:	
  3612                           ; 1 bytes @ 0xF
  3613                           
  3614                           
  3615                           ; 1 bytes @ 0xF
  3616  002F                     	ds	1
  3617  0030                     setLoad_Exceptions@command:	
  3618  0030                     setOverTemp_Exceptions@command:	
  3619                           ; 1 bytes @ 0x10
  3620                           
  3621                           
  3622                           ; 1 bytes @ 0x10
  3623  0030                     	ds	1
  3624  0031                     ??_Load_Main:	
  3625  0031                     ??_setTemp_Main:	
  3626                           ; 0 bytes @ 0x11
  3627                           
  3628  0031                     ___ftdiv@f1:	
  3629                           ; 0 bytes @ 0x11
  3630                           
  3631  0031                     ___ftmul@f2:	
  3632                           ; 3 bytes @ 0x11
  3633                           
  3634                           
  3635                           ; 3 bytes @ 0x11
  3636  0031                     	ds	1
  3637  0032                     ??_Temp_Main:	
  3638                           
  3639                           ; 0 bytes @ 0x12
  3640  0032                     	ds	1
  3641  0033                     Load_Main@i:	
  3642                           
  3643                           ; 1 bytes @ 0x13
  3644  0033                     	ds	1
  3645  0034                     ??___ftdiv:	
  3646  0034                     ??___ftmul:	
  3647                           ; 0 bytes @ 0x14
  3648                           
  3649                           
  3650                           ; 0 bytes @ 0x14
  3651  0034                     	ds	4
  3652  0038                     ___ftdiv@cntr:	
  3653  0038                     ___ftmul@exp:	
  3654                           ; 1 bytes @ 0x18
  3655                           
  3656                           
  3657                           ; 1 bytes @ 0x18
  3658  0038                     	ds	1
  3659  0039                     ___ftdiv@f3:	
  3660  0039                     ___ftmul@f3_as_product:	
  3661                           ; 3 bytes @ 0x19
  3662                           
  3663                           
  3664                           ; 3 bytes @ 0x19
  3665  0039                     	ds	3
  3666  003C                     ___ftdiv@exp:	
  3667  003C                     ___ftmul@cntr:	
  3668                           ; 1 bytes @ 0x1C
  3669                           
  3670                           
  3671                           ; 1 bytes @ 0x1C
  3672  003C                     	ds	1
  3673  003D                     ___ftdiv@sign:	
  3674  003D                     ___ftmul@sign:	
  3675                           ; 1 bytes @ 0x1D
  3676                           
  3677                           
  3678                           ; 1 bytes @ 0x1D
  3679  003D                     	ds	1
  3680  003E                     ?___ftadd:	
  3681  003E                     ___ftadd@f1:	
  3682                           ; 3 bytes @ 0x1E
  3683                           
  3684                           
  3685                           ; 3 bytes @ 0x1E
  3686  003E                     	ds	3
  3687  0041                     ___ftadd@f2:	
  3688                           
  3689                           ; 3 bytes @ 0x21
  3690  0041                     	ds	3
  3691  0044                     ??___ftadd:	
  3692                           
  3693                           ; 0 bytes @ 0x24
  3694  0044                     	ds	4
  3695  0048                     ___ftadd@sign:	
  3696                           
  3697                           ; 1 bytes @ 0x28
  3698  0048                     	ds	1
  3699  0049                     ___ftadd@exp2:	
  3700                           
  3701                           ; 1 bytes @ 0x29
  3702  0049                     	ds	1
  3703  004A                     ___ftadd@exp1:	
  3704                           
  3705                           ; 1 bytes @ 0x2A
  3706  004A                     	ds	1
  3707  004B                     ?___fttol:	
  3708  004B                     ___fttol@f1:	
  3709                           ; 4 bytes @ 0x2B
  3710                           
  3711                           
  3712                           ; 3 bytes @ 0x2B
  3713  004B                     	ds	4
  3714  004F                     ??___fttol:	
  3715                           
  3716                           ; 0 bytes @ 0x2F
  3717  004F                     	ds	4
  3718  0053                     ___fttol@sign1:	
  3719                           
  3720                           ; 1 bytes @ 0x33
  3721  0053                     	ds	1
  3722  0054                     ___fttol@lval:	
  3723                           
  3724                           ; 4 bytes @ 0x34
  3725  0054                     	ds	4
  3726  0058                     ___fttol@exp1:	
  3727                           
  3728                           ; 1 bytes @ 0x38
  3729  0058                     	ds	1
  3730  0059                     ??_getPercentValue:	
  3731  0059                     ??_setPercentValue:	
  3732                           ; 0 bytes @ 0x39
  3733                           
  3734  0059                     setPercentValue@value:	
  3735                           ; 0 bytes @ 0x39
  3736                           
  3737                           
  3738                           ; 1 bytes @ 0x39
  3739  0059                     	ds	1
  3740  005A                     setPercentValue@i:	
  3741                           
  3742                           ; 3 bytes @ 0x3A
  3743  005A                     	ds	1
  3744  005B                     getPercentValue@value:	
  3745                           
  3746                           ; 1 bytes @ 0x3B
  3747  005B                     	ds	1
  3748  005C                     getPercentValue@i:	
  3749                           
  3750                           ; 3 bytes @ 0x3C
  3751  005C                     	ds	1
  3752  005D                     ?_setRF_DimmerLights:	
  3753  005D                     ??_Flash_Memory_Initialization:	
  3754                           ; 0 bytes @ 0x3D
  3755                           
  3756  005D                     setRF_DimmerLights@on:	
  3757                           ; 0 bytes @ 0x3D
  3758                           
  3759                           
  3760                           ; 1 bytes @ 0x3D
  3761  005D                     	ds	1
  3762  005E                     ??_setRF_DimmerLights:	
  3763  005E                     Flash_Memory_Initialization@i:	
  3764                           ; 0 bytes @ 0x3E
  3765                           
  3766                           
  3767                           ; 1 bytes @ 0x3E
  3768  005E                     	ds	1
  3769  005F                     ??_setDimmerLights_AdjRF:	
  3770                           
  3771                           ; 0 bytes @ 0x3F
  3772  005F                     	ds	1
  3773  0060                     setDimmerLights_AdjRF@lights:	
  3774  0060                     setRF_DimmerLights@status:	
  3775                           ; 1 bytes @ 0x40
  3776                           
  3777                           
  3778                           ; 1 bytes @ 0x40
  3779  0060                     	ds	1
  3780  0061                     ??_setRF_DimmerValue:	
  3781  0061                     setRF_DimmerLights@lights:	
  3782                           ; 0 bytes @ 0x41
  3783                           
  3784                           
  3785                           ; 1 bytes @ 0x41
  3786  0061                     	ds	1
  3787  0062                     ??_DlyOff_Main:	
  3788  0062                     ?_setDimmerLights_Adj:	
  3789                           ; 0 bytes @ 0x42
  3790                           
  3791  0062                     ??_setRFSW_Control:	
  3792                           ; 0 bytes @ 0x42
  3793                           
  3794  0062                     ??_Sw_DimmerOnFunc:	
  3795                           ; 0 bytes @ 0x42
  3796                           
  3797  0062                     ??_Sw_DimmerOffFunc:	
  3798                           ; 0 bytes @ 0x42
  3799                           
  3800  0062                     setDimmerLights_Adj@status:	
  3801                           ; 0 bytes @ 0x42
  3802                           
  3803  0062                     Sw_DimmerOnFunc@Idle:	
  3804                           ; 1 bytes @ 0x42
  3805                           
  3806                           
  3807                           ; 1 bytes @ 0x42
  3808  0062                     	ds	1
  3809  0063                     ??_setDimmerLights_Adj:	
  3810  0063                     setRFSW_Control@sw:	
  3811                           ; 0 bytes @ 0x43
  3812                           
  3813  0063                     setRF_DimmerValue@lights:	
  3814                           ; 1 bytes @ 0x43
  3815                           
  3816  0063                     Sw_DimmerOnFunc@sw:	
  3817                           ; 1 bytes @ 0x43
  3818                           
  3819                           
  3820                           ; 1 bytes @ 0x43
  3821  0063                     	ds	1
  3822  0064                     ??_setRFSW_AdjControl:	
  3823  0064                     DlyOff_Main@sw:	
  3824                           ; 0 bytes @ 0x44
  3825                           
  3826  0064                     setDimmerLights_Adj@lights:	
  3827                           ; 1 bytes @ 0x44
  3828                           
  3829  0064                     Sw_DimmerOffFunc@sw:	
  3830                           ; 1 bytes @ 0x44
  3831                           
  3832                           
  3833                           ; 1 bytes @ 0x44
  3834  0064                     	ds	1
  3835  0065                     ??_setDimmerLights_Main:	
  3836  0065                     ??_setSw_Main:	
  3837                           ; 0 bytes @ 0x45
  3838                           
  3839  0065                     ??_DelayOff_Main:	
  3840                           ; 0 bytes @ 0x45
  3841                           
  3842  0065                     setDimmerLights_Main@clear:	
  3843                           ; 0 bytes @ 0x45
  3844                           
  3845                           
  3846                           ; 1 bytes @ 0x45
  3847  0065                     	ds	1
  3848  0066                     setDimmerLights_Main@lights:	
  3849  0066                     setRFSW_AdjControl@sw:	
  3850                           ; 1 bytes @ 0x46
  3851                           
  3852                           
  3853                           ; 1 bytes @ 0x46
  3854  0066                     	ds	1
  3855  0067                     ??_setRF_Main:	
  3856  0067                     ??_getRxData:	
  3857                           ; 0 bytes @ 0x47
  3858                           
  3859  0067                     ??_setControl_Lights_Table:	
  3860                           ; 0 bytes @ 0x47
  3861                           
  3862  0067                     ??_DimmerLights_Main:	
  3863                           ; 0 bytes @ 0x47
  3864                           
  3865  0067                     _setSw_Main$7025:	
  3866                           ; 0 bytes @ 0x47
  3867                           
  3868                           
  3869                           ; 1 bytes @ 0x47
  3870  0067                     	ds	1
  3871  0068                     _setRF_Main$5902:	
  3872  0068                     _setSw_Main$7026:	
  3873                           ; 1 bytes @ 0x48
  3874                           
  3875                           
  3876                           ; 1 bytes @ 0x48
  3877  0068                     	ds	1
  3878  0069                     ??_RF_Main:	
  3879  0069                     setSw_Main@sw:	
  3880                           ; 0 bytes @ 0x49
  3881                           
  3882                           
  3883                           ; 1 bytes @ 0x49
  3884  0069                     	ds	1
  3885  006A                     ??_Switch_Main:	
  3886  006A                     ??_main:	
  3887                           ; 0 bytes @ 0x4A
  3888                           
  3889                           
  3890                           	psect	maintext
  3891  1571                     __pmaintext:	
  3892                           ; 0 bytes @ 0x4A
  3893 ;;
  3894 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3895 ;;
  3896 ;; *************** function _main *****************
  3897 ;; Defined at:
  3898 ;;		line 7 in file "../src/Main_B1.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;  argc            2    0[BANK4 ] int 
  3901 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;		None
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  2    0[BANK4 ] int 
  3906 ;; Registers used:
  3907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3908 ;; Tracked objects:
  3909 ;;		On entry : 17F/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3913 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  3914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3916 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  3917 ;;Total ram usage:        4 bytes
  3918 ;; Hardware stack levels required when called:   15
  3919 ;; This function calls:
  3920 ;;		_Buzzer_Initialization
  3921 ;;		_Buzzer_Main
  3922 ;;		_CC2500_PowerOnInitial
  3923 ;;		_DelayOff_Initialization
  3924 ;;		_DelayOff_Main
  3925 ;;		_DimmerLights_Initialization
  3926 ;;		_DimmerLights_Main
  3927 ;;		_Flash_Memory_Initialization
  3928 ;;		_Flash_Memory_Main
  3929 ;;		_LED_Initialization
  3930 ;;		_LED_Main
  3931 ;;		_Load_Initialization
  3932 ;;		_Load_Main
  3933 ;;		_Mcu_Initialization
  3934 ;;		_RF_Initialization
  3935 ;;		_RF_Main
  3936 ;;		_Switch_Initialization
  3937 ;;		_Switch_Main
  3938 ;;		_Temp_Initialization
  3939 ;;		_Temp_Main
  3940 ;;		_WDT_Main
  3941 ;;		_getLoad_AD
  3942 ;;		_getTemp_AD
  3943 ;;		_myMain_Initialization
  3944 ;;		_my_MainTime
  3945 ;; This function is called by:
  3946 ;;		Startup code after reset
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _main
  3952  1571                     _main:	
  3953                           
  3954                           ;Main_B1.c: 8: myMain_Initialization();
  3955                           
  3956                           ;incstack = 0
  3957                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3958  1571  319B  2374  3195   	fcall	_myMain_Initialization
  3959                           
  3960                           ;Main_B1.c: 9: Mcu_Initialization();
  3961  1574  319C  2418  3195   	fcall	_Mcu_Initialization
  3962                           
  3963                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3964  1577  3186  2699  3195   	fcall	_Flash_Memory_Initialization
  3965                           
  3966                           ;Main_B1.c: 11: LED_Initialization();
  3967  157A  319A  22ED  3195   	fcall	_LED_Initialization
  3968                           
  3969                           ;Main_B1.c: 12: Buzzer_Initialization();
  3970  157D  3199  21FA  3195   	fcall	_Buzzer_Initialization
  3971                           
  3972                           ;Main_B1.c: 14: ;;
  3973                           ;Main_B1.c: 15: Temp_Initialization();
  3974  1580  319A  2206  3195   	fcall	_Temp_Initialization
  3975                           
  3976                           ;Main_B1.c: 16: Load_Initialization();
  3977  1583  319A  2221  3195   	fcall	_Load_Initialization
  3978                           
  3979                           ;Main_B1.c: 17: ;;
  3980                           ;Main_B1.c: 18: DelayOff_Initialization();
  3981  1586  319A  2247  3195   	fcall	_DelayOff_Initialization
  3982                           
  3983                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3984  1589  319D  2505  3195   	fcall	_DimmerLights_Initialization
  3985                           
  3986                           ;Main_B1.c: 21: ;;
  3987                           ;Main_B1.c: 22: ;;
  3988                           ;Main_B1.c: 23: ;;
  3989                           ;Main_B1.c: 24: Switch_Initialization();
  3990  158C  319B  231F  3195   	fcall	_Switch_Initialization
  3991                           
  3992                           ;Main_B1.c: 25: RF_Initialization();
  3993  158F  3199  21FD  3195   	fcall	_RF_Initialization
  3994                           
  3995                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3996  1592  3187  27EB  3195   	fcall	_CC2500_PowerOnInitial
  3997  1595                     l10575:	
  3998                           ;Main_B1.c: 27: ;;
  3999                           ;Main_B1.c: 30: while (1) {
  4000                           
  4001                           
  4002                           ;Main_B1.c: 32: if (myMain.PowerON) {
  4003  1595  0021               	movlb	1	; select bank1
  4004  1596  1C20               	btfss	_myMain^(0+128),0
  4005  1597  2DA0               	goto	l10579
  4006                           
  4007                           ;Main_B1.c: 34: ;;
  4008                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4009  1598  3005               	movlw	5
  4010  1599  318B  234D  3195   	fcall	_getLoad_AD
  4011                           
  4012                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4013  159C  3009               	movlw	9
  4014  159D  3191  2174  3195   	fcall	_getTemp_AD
  4015  15A0                     l10579:	
  4016                           ;Main_B1.c: 46: ;;
  4017                           
  4018                           
  4019                           ;Main_B1.c: 61: }
  4020                           ;Main_B1.c: 64: if (myMain.T0_Timerout) {
  4021  15A0  0021               	movlb	1	; select bank1
  4022  15A1  1CA0               	btfss	_myMain^(0+128),1
  4023  15A2  2D95               	goto	l10575
  4024                           
  4025                           ;Main_B1.c: 65: myMain.T0_Timerout = 0;
  4026  15A3  10A0               	bcf	_myMain^(0+128),1
  4027                           
  4028                           ;Main_B1.c: 66: my_MainTime();
  4029  15A4  3194  2432  3195   	fcall	_my_MainTime
  4030                           
  4031                           ;Main_B1.c: 67: WDT_Main();
  4032  15A7  319C  243C  3195   	fcall	_WDT_Main
  4033                           
  4034                           ;Main_B1.c: 68: ;;
  4035                           ;Main_B1.c: 69: ;;
  4036                           ;Main_B1.c: 70: if (myMain.PowerON) {
  4037  15AA  0021               	movlb	1	; select bank1
  4038  15AB  1C20               	btfss	_myMain^(0+128),0
  4039  15AC  2D95               	goto	l10575
  4040                           
  4041                           ;Main_B1.c: 71: Flash_Memory_Main();
  4042  15AD  319E  262A  3195   	fcall	_Flash_Memory_Main
  4043                           
  4044                           ;Main_B1.c: 73: LED_Main();
  4045  15B0  319A  22F9  3195   	fcall	_LED_Main
  4046                           
  4047                           ;Main_B1.c: 74: Buzzer_Main();
  4048  15B3  3193  239E  3195   	fcall	_Buzzer_Main
  4049                           
  4050                           ;Main_B1.c: 76: ;;
  4051                           ;Main_B1.c: 77: Temp_Main();
  4052  15B6  319A  2209  3195   	fcall	_Temp_Main
  4053                           
  4054                           ;Main_B1.c: 78: Load_Main();
  4055  15B9  3182  220C  3195   	fcall	_Load_Main
  4056                           
  4057                           ;Main_B1.c: 79: ;;
  4058                           ;Main_B1.c: 81: ;;
  4059                           ;Main_B1.c: 82: DimmerLights_Main();
  4060  15BC  319A  22B4  3195   	fcall	_DimmerLights_Main
  4061                           
  4062                           ;Main_B1.c: 83: Switch_Main();
  4063  15BF  319A  227F  3195   	fcall	_Switch_Main
  4064                           
  4065                           ;Main_B1.c: 84: ;;
  4066                           ;Main_B1.c: 85: ;;
  4067                           ;Main_B1.c: 87: RF_Main();
  4068  15C2  319A  2200  3195   	fcall	_RF_Main
  4069                           
  4070                           ;Main_B1.c: 88: DelayOff_Main();
  4071  15C5  319A  224F  3195   	fcall	_DelayOff_Main
  4072                           
  4073                           ;Main_B1.c: 89: ;;
  4074  15C8  2D95               	goto	l10575
  4075  15C9                     __end_of_main:	
  4076                           ;Main_B1.c: 90: }
  4077                           ;Main_B1.c: 91: }
  4078                           ;Main_B1.c: 109: }
  4079                           ;Main_B1.c: 110: return (0);
  4080                           ;	Return value of _main is never used
  4081                           
  4082                           
  4083                           	psect	text1
  4084  1432                     __ptext1:	
  4085 ;; *************** function _my_MainTime *****************
  4086 ;; Defined at:
  4087 ;;		line 127 in file "../src/Main_B1.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;		None
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;		None
  4092 ;; Return value:  Size  Location     Type
  4093 ;;		None               void
  4094 ;; Registers used:
  4095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4105 ;;Total ram usage:        0 bytes
  4106 ;; Hardware stack levels used:    1
  4107 ;; Hardware stack levels required when called:    7
  4108 ;; This function calls:
  4109 ;;		_setBuz
  4110 ;;		_setLoad_Enable
  4111 ;;		_setRF_Enable
  4112 ;;		_setSw_Enable
  4113 ;;		_setTemp_Enable
  4114 ;; This function is called by:
  4115 ;;		_main
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           
  4120                           ;psect for function _my_MainTime
  4121  1432                     _my_MainTime:	
  4122                           
  4123                           ;Main_B1.c: 129: if (myMain.PowerON == 0) {
  4124                           
  4125                           ;incstack = 0
  4126                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4127  1432  0021               	movlb	1	; select bank1
  4128  1433  1820               	btfsc	_myMain^(0+128),0
  4129  1434  2C63               	goto	l10395
  4130                           
  4131                           ;Main_B1.c: 130: myMain.PowerCount++;
  4132  1435  3001               	movlw	1
  4133  1436  07A1               	addwf	(_myMain^(0+128)+1),f
  4134  1437  3000               	movlw	0
  4135  1438  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4136                           
  4137                           ;Main_B1.c: 131: if (myMain.PowerCount == 150)
  4138  1439  3001               	movlw	1
  4139  143A  3EA0               	addlw	_myMain& (0+255)
  4140  143B  0086               	movwf	6
  4141  143C  0187               	clrf	7
  4142  143D  3F40               	moviw [0]fsr1
  4143  143E  3A96               	xorlw	150
  4144  143F  1D03               	skipz
  4145  1440  2C43               	goto	u11245
  4146  1441  3F41               	moviw [1]fsr1
  4147  1442  3A00               	xorlw	0
  4148  1443                     u11245:	
  4149  1443  1D03               	skipz
  4150  1444  0008               	return
  4151                           
  4152                           ;Main_B1.c: 132: {
  4153                           ;Main_B1.c: 133: myMain.PowerCount = 0;
  4154  1445  01A1               	clrf	(_myMain^(0+128)+1)
  4155  1446  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4156                           
  4157                           ;Main_B1.c: 134: myMain.PowerON = 1;
  4158  1447  1420               	bsf	_myMain^(0+128),0
  4159                           
  4160                           ;Main_B1.c: 137: setTemp_Enable(1);
  4161  1448  3001               	movlw	1
  4162  1449  319A  228F  3194   	fcall	_setTemp_Enable
  4163                           
  4164                           ;Main_B1.c: 141: setLoad_Enable(1);
  4165  144C  3001               	movlw	1
  4166  144D  319A  22A0  3194   	fcall	_setLoad_Enable
  4167                           
  4168                           ;Main_B1.c: 147: setBuz(3, 50);
  4169  1450  3032               	movlw	50
  4170  1451  0020               	movlb	0	; select bank0
  4171  1452  00A9               	movwf	setBuz@time
  4172  1453  3000               	movlw	0
  4173  1454  00AA               	movwf	setBuz@time+1
  4174  1455  3003               	movlw	3
  4175  1456  3195  25C9  3194   	fcall	_setBuz
  4176                           
  4177                           ;Main_B1.c: 148: myMain.SelfTest = 1;
  4178  1459  0021               	movlb	1	; select bank1
  4179  145A  1720               	bsf	_myMain^(0+128),6
  4180                           
  4181                           ;Main_B1.c: 150: setSw_Enable(1);
  4182  145B  3001               	movlw	1
  4183  145C  319D  25B2  3194   	fcall	_setSw_Enable
  4184                           
  4185                           ;Main_B1.c: 153: setRF_Enable(1);
  4186  145F  3001               	movlw	1
  4187  1460  319B  2348         	fcall	_setRF_Enable
  4188                           
  4189                           ;Main_B1.c: 157: }
  4190                           ;Main_B1.c: 158: } else {
  4191  1462  0008               	return
  4192  1463                     l10395:	
  4193                           
  4194                           ;Main_B1.c: 166: myMain.Count1++;
  4195  1463  3001               	movlw	1
  4196  1464  0021               	movlb	1	; select bank1
  4197  1465  07A5               	addwf	(_myMain^(0+128)+5),f
  4198  1466  3000               	movlw	0
  4199  1467  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4200                           
  4201                           ;Main_B1.c: 167: if (myMain.Count1 == 100)
  4202  1468  3005               	movlw	5
  4203  1469  3EA0               	addlw	_myMain& (0+255)
  4204  146A  0086               	movwf	6
  4205  146B  0187               	clrf	7
  4206  146C  3F40               	moviw [0]fsr1
  4207  146D  3A64               	xorlw	100
  4208  146E  1D03               	skipz
  4209  146F  2C72               	goto	u11255
  4210  1470  3F41               	moviw [1]fsr1
  4211  1471  3A00               	xorlw	0
  4212  1472                     u11255:	
  4213  1472  1D03               	skipz
  4214  1473  0008               	return
  4215                           
  4216                           ;Main_B1.c: 168: {
  4217                           ;Main_B1.c: 169: myMain.Count1 = 0;
  4218  1474  01A5               	clrf	(_myMain^(0+128)+5)
  4219  1475  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4220                           
  4221                           ;Main_B1.c: 182: if (myMain.Flag) {
  4222  1476  1DA0               	btfss	_myMain^(0+128),3
  4223  1477  2C7A               	goto	l1554
  4224                           
  4225                           ;Main_B1.c: 183: myMain.Flag = 0;
  4226  1478  11A0               	bcf	_myMain^(0+128),3
  4227                           
  4228                           ;Main_B1.c: 192: } else {
  4229  1479  0008               	return
  4230  147A                     l1554:	
  4231                           
  4232                           ;Main_B1.c: 193: myMain.Flag = 1;
  4233  147A  15A0               	bsf	_myMain^(0+128),3
  4234  147B  0008               	return
  4235  147C                     __end_of_my_MainTime:	
  4236                           
  4237                           	psect	text2
  4238  1A8F                     __ptext2:	
  4239 ;; *************** function _setTemp_Enable *****************
  4240 ;; Defined at:
  4241 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  command         1    wreg     unsigned char 
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;  command         1    0[BANK0 ] unsigned char 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;		None               void
  4248 ;; Registers used:
  4249 ;;		wreg
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;Total ram usage:        1 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:    5
  4262 ;; This function calls:
  4263 ;;		Nothing
  4264 ;; This function is called by:
  4265 ;;		_my_MainTime
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           
  4270                           ;psect for function _setTemp_Enable
  4271  1A8F                     _setTemp_Enable:	
  4272                           
  4273                           ;incstack = 0
  4274                           ; Regs used in _setTemp_Enable: [wreg]
  4275                           ;setTemp_Enable@command stored from wreg
  4276  1A8F  0020               	movlb	0	; select bank0
  4277  1A90  00A0               	movwf	setTemp_Enable@command
  4278                           
  4279                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4280  1A91  0820               	movf	setTemp_Enable@command,w
  4281  1A92  0021               	movlb	1	; select bank1
  4282  1A93  1058               	bcf	_Temp1^(0+128),0
  4283  1A94  1D03               	skipz
  4284  1A95  1458               	bsf	_Temp1^(0+128),0
  4285  1A96  0008               	return
  4286  1A97                     __end_of_setTemp_Enable:	
  4287                           
  4288                           	psect	text3
  4289  1AA0                     __ptext3:	
  4290 ;; *************** function _setLoad_Enable *****************
  4291 ;; Defined at:
  4292 ;;		line 258 in file "../src/OverLoad_B1.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;  command         1    wreg     unsigned char 
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;  command         1    0[BANK0 ] unsigned char 
  4297 ;; Return value:  Size  Location     Type
  4298 ;;		None               void
  4299 ;; Registers used:
  4300 ;;		wreg
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;Total ram usage:        1 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    5
  4313 ;; This function calls:
  4314 ;;		Nothing
  4315 ;; This function is called by:
  4316 ;;		_my_MainTime
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           
  4321                           ;psect for function _setLoad_Enable
  4322  1AA0                     _setLoad_Enable:	
  4323                           
  4324                           ;incstack = 0
  4325                           ; Regs used in _setLoad_Enable: [wreg]
  4326                           ;setLoad_Enable@command stored from wreg
  4327  1AA0  0020               	movlb	0	; select bank0
  4328  1AA1  00A0               	movwf	setLoad_Enable@command
  4329                           
  4330                           ;OverLoad_B1.c: 259: Load1.Enable = command;
  4331  1AA2  0820               	movf	setLoad_Enable@command,w
  4332  1AA3  0023               	movlb	3	; select bank3
  4333  1AA4  1020               	bcf	_Load1^(0+384),0
  4334  1AA5  1D03               	skipz
  4335  1AA6  1420               	bsf	_Load1^(0+384),0
  4336                           
  4337                           ;OverLoad_B1.c: 260: Load1.GO = 0;
  4338  1AA7  10A0               	bcf	_Load1^(0+384),1
  4339  1AA8  0008               	return
  4340  1AA9                     __end_of_setLoad_Enable:	
  4341                           
  4342                           	psect	text4
  4343  1B74                     __ptext4:	
  4344 ;; *************** function _myMain_Initialization *****************
  4345 ;; Defined at:
  4346 ;;		line 115 in file "../src/Main_B1.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;		None
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;		None
  4351 ;; Return value:  Size  Location     Type
  4352 ;;		None               void
  4353 ;; Registers used:
  4354 ;;		wreg, fsr1l, fsr1h
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4362 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4363 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4364 ;;Total ram usage:        1 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; Hardware stack levels required when called:    5
  4367 ;; This function calls:
  4368 ;;		Nothing
  4369 ;; This function is called by:
  4370 ;;		_main
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           
  4375                           ;psect for function _myMain_Initialization
  4376  1B74                     _myMain_Initialization:	
  4377                           
  4378                           ;Main_B1.c: 117: product = &_product;
  4379                           
  4380                           ;incstack = 0
  4381                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4382  1B74  3045               	movlw	__product& (0+255)
  4383  1B75  0020               	movlb	0	; select bank0
  4384  1B76  00A0               	movwf	??_myMain_Initialization
  4385  1B77  0820               	movf	??_myMain_Initialization,w
  4386  1B78  00ED               	movwf	_product
  4387                           
  4388                           ;Main_B1.c: 118: product->Data[20] = 210;
  4389  1B79  30D2               	movlw	210
  4390  1B7A  00A0               	movwf	??_myMain_Initialization
  4391  1B7B  086D               	movf	_product,w
  4392  1B7C  3E14               	addlw	20
  4393  1B7D  0086               	movwf	6
  4394  1B7E  3002               	movlw	2	; select bank4/5
  4395  1B7F  0087               	movwf	7
  4396  1B80  0820               	movf	??_myMain_Initialization,w
  4397  1B81  0081               	movwf	1
  4398  1B82  0008               	return
  4399  1B83                     __end_of_myMain_Initialization:	
  4400                           
  4401                           	psect	text5
  4402  1174                     __ptext5:	
  4403 ;; *************** function _getTemp_AD *****************
  4404 ;; Defined at:
  4405 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;  channel         1    wreg     unsigned char 
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;  channel         1    5[BANK0 ] unsigned char 
  4410 ;; Return value:  Size  Location     Type
  4411 ;;		None               void
  4412 ;; Registers used:
  4413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4422 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4423 ;;Total ram usage:        2 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    7
  4426 ;; This function calls:
  4427 ;;		_getAD
  4428 ;; This function is called by:
  4429 ;;		_main
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           
  4434                           ;psect for function _getTemp_AD
  4435  1174                     _getTemp_AD:	
  4436                           
  4437                           ;incstack = 0
  4438                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4439                           ;getTemp_AD@channel stored from wreg
  4440  1174  0020               	movlb	0	; select bank0
  4441  1175  00A5               	movwf	getTemp_AD@channel
  4442                           
  4443                           ;OverTemperature_B1.c: 34: if (Temp1.ADtoGO == 1) {
  4444  1176  0021               	movlb	1	; select bank1
  4445  1177  1D58               	btfss	_Temp1^(0+128),2
  4446  1178  0008               	return
  4447                           
  4448                           ;OverTemperature_B1.c: 35: Temp1.ADRES = getAD(channel, 0xf0);
  4449  1179  30F0               	movlw	240
  4450  117A  0020               	movlb	0	; select bank0
  4451  117B  00A4               	movwf	??_getTemp_AD
  4452  117C  0824               	movf	??_getTemp_AD,w
  4453  117D  00A0               	movwf	getAD@adcon1
  4454  117E  0825               	movf	getTemp_AD@channel,w
  4455  117F  319E  2649  3191   	fcall	_getAD
  4456  1182  0020               	movlb	0	; select bank0
  4457  1183  0821               	movf	?_getAD+1,w
  4458  1184  0021               	movlb	1	; select bank1
  4459  1185  01E5               	clrf	((_Temp1+1)^(0+128)+12)
  4460  1186  07E5               	addwf	((_Temp1+1)^(0+128)+12),f
  4461  1187  0020               	movlb	0	; select bank0
  4462  1188  0820               	movf	?_getAD,w
  4463  1189  0021               	movlb	1	; select bank1
  4464  118A  01E4               	clrf	(_Temp1^(0+128)+12)
  4465  118B  07E4               	addwf	(_Temp1^(0+128)+12),f
  4466                           
  4467                           ;OverTemperature_B1.c: 36: if (Temp1.ADH[0] < Temp1.ADRES) {
  4468  118C  0865               	movf	((_Temp1+1)^(0+128)+12),w
  4469  118D  0261               	subwf	((_Temp1+1)^(0+128)+8),w
  4470  118E  1D03               	skipz
  4471  118F  2992               	goto	u11215
  4472  1190  0864               	movf	(_Temp1^(0+128)+12),w
  4473  1191  0260               	subwf	(_Temp1^(0+128)+8),w
  4474  1192                     u11215:	
  4475  1192  1803               	skipnc
  4476  1193  299B               	goto	l10369
  4477                           
  4478                           ;OverTemperature_B1.c: 37: Temp1.ADH[0] = Temp1.ADRES;
  4479  1194  0865               	movf	((_Temp1+1)^(0+128)+12),w
  4480  1195  01E1               	clrf	((_Temp1+1)^(0+128)+8)
  4481  1196  07E1               	addwf	((_Temp1+1)^(0+128)+8),f
  4482  1197  0864               	movf	(_Temp1^(0+128)+12),w
  4483  1198  01E0               	clrf	(_Temp1^(0+128)+8)
  4484  1199  07E0               	addwf	(_Temp1^(0+128)+8),f
  4485                           
  4486                           ;OverTemperature_B1.c: 38: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4487  119A  0008               	return
  4488  119B                     l10369:	
  4489  119B  0865               	movf	((_Temp1+1)^(0+128)+12),w
  4490  119C  0263               	subwf	((_Temp1+1)^(0+128)+10),w
  4491  119D  1D03               	skipz
  4492  119E  29A1               	goto	u11225
  4493  119F  0864               	movf	(_Temp1^(0+128)+12),w
  4494  11A0  0262               	subwf	(_Temp1^(0+128)+10),w
  4495  11A1                     u11225:	
  4496  11A1  1803               	skipnc
  4497  11A2  0008               	return
  4498                           
  4499                           ;OverTemperature_B1.c: 39: Temp1.ADH[1] = Temp1.ADRES;
  4500  11A3  0865               	movf	((_Temp1+1)^(0+128)+12),w
  4501  11A4  01E3               	clrf	((_Temp1+1)^(0+128)+10)
  4502  11A5  07E3               	addwf	((_Temp1+1)^(0+128)+10),f
  4503  11A6  0864               	movf	(_Temp1^(0+128)+12),w
  4504  11A7  01E2               	clrf	(_Temp1^(0+128)+10)
  4505  11A8  07E2               	addwf	(_Temp1^(0+128)+10),f
  4506  11A9  0008               	return
  4507  11AA                     __end_of_getTemp_AD:	
  4508                           
  4509                           	psect	text6
  4510  0B4D                     __ptext6:	
  4511 ;; *************** function _getLoad_AD *****************
  4512 ;; Defined at:
  4513 ;;		line 15 in file "../src/OverLoad_B1.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  channel         1    wreg     unsigned char 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  channel         1    6[BANK0 ] unsigned char 
  4518 ;;  i               1    8[BANK0 ] unsigned char 
  4519 ;;  j               1    7[BANK0 ] unsigned char 
  4520 ;; Return value:  Size  Location     Type
  4521 ;;		None               void
  4522 ;; Registers used:
  4523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4524 ;; Tracked objects:
  4525 ;;		On entry : 0/0
  4526 ;;		On exit  : 0/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4530 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4531 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;Total ram usage:        5 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:    7
  4536 ;; This function calls:
  4537 ;;		_getAD
  4538 ;; This function is called by:
  4539 ;;		_main
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           
  4544                           ;psect for function _getLoad_AD
  4545  0B4D                     _getLoad_AD:	
  4546                           
  4547                           ;incstack = 0
  4548                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4549                           ;getLoad_AD@channel stored from wreg
  4550  0B4D  0020               	movlb	0	; select bank0
  4551  0B4E  00A6               	movwf	getLoad_AD@channel
  4552                           
  4553                           ;OverLoad_B1.c: 16: char i = 0, j = 0;
  4554  0B4F  01A8               	clrf	getLoad_AD@i
  4555  0B50  01A7               	clrf	getLoad_AD@j
  4556                           
  4557                           ;OverLoad_B1.c: 18: if (Load1.ADtoGO == 1) {
  4558  0B51  0023               	movlb	3	; select bank3
  4559  0B52  1E20               	btfss	_Load1^(0+384),4
  4560  0B53  0008               	return
  4561                           
  4562                           ;OverLoad_B1.c: 19: Load1.ADRES = getAD(channel, 0xc0);
  4563  0B54  30C0               	movlw	192
  4564  0B55  0020               	movlb	0	; select bank0
  4565  0B56  00A4               	movwf	??_getLoad_AD
  4566  0B57  0824               	movf	??_getLoad_AD,w
  4567  0B58  00A0               	movwf	getAD@adcon1
  4568  0B59  0826               	movf	getLoad_AD@channel,w
  4569  0B5A  319E  2649  318B   	fcall	_getAD
  4570  0B5D  0020               	movlb	0	; select bank0
  4571  0B5E  0821               	movf	?_getAD+1,w
  4572  0B5F  0023               	movlb	3	; select bank3
  4573  0B60  01D3               	clrf	((_Load1+1)^(0+384)+50)
  4574  0B61  07D3               	addwf	((_Load1+1)^(0+384)+50),f
  4575  0B62  0020               	movlb	0	; select bank0
  4576  0B63  0820               	movf	?_getAD,w
  4577  0B64  0023               	movlb	3	; select bank3
  4578  0B65  01D2               	clrf	(_Load1^(0+384)+50)
  4579  0B66  07D2               	addwf	(_Load1^(0+384)+50),f
  4580                           
  4581                           ;OverLoad_B1.c: 20: for (i = 0; i < 5; i++) {
  4582  0B67  0020               	movlb	0	; select bank0
  4583  0B68  01A8               	clrf	getLoad_AD@i
  4584  0B69  3005               	movlw	5
  4585  0B6A  0228               	subwf	getLoad_AD@i,w
  4586  0B6B  1803               	btfsc	3,0
  4587  0B6C  2B98               	goto	l10345
  4588  0B6D                     l10335:	
  4589                           
  4590                           ;OverLoad_B1.c: 21: if (Load1.AH[i] < Load1.ADRES) {
  4591  0B6D  3528               	lslf	getLoad_AD@i,w
  4592  0B6E  3EA8               	addlw	(_Load1+8)& (0+255)
  4593  0B6F  0086               	movwf	6
  4594  0B70  3001               	movlw	1	; select bank3/4
  4595  0B71  0087               	movwf	7
  4596  0B72  3F40               	moviw [0]fsr1
  4597  0B73  00A4               	movwf	??_getLoad_AD
  4598  0B74  3F41               	moviw [1]fsr1
  4599  0B75  00A5               	movwf	??_getLoad_AD+1
  4600  0B76  0023               	movlb	3	; select bank3
  4601  0B77  0853               	movf	((_Load1+1)^(0+384)+50),w
  4602  0B78  0020               	movlb	0	; select bank0
  4603  0B79  0225               	subwf	??_getLoad_AD+1,w
  4604  0B7A  1D03               	skipz
  4605  0B7B  2B80               	goto	u11145
  4606  0B7C  0023               	movlb	3	; select bank3
  4607  0B7D  0852               	movf	(_Load1^(0+384)+50),w
  4608  0B7E  0020               	movlb	0	; select bank0
  4609  0B7F  0224               	subwf	??_getLoad_AD,w
  4610  0B80                     u11145:	
  4611  0B80  1803               	skipnc
  4612  0B81  2B90               	goto	l10341
  4613                           
  4614                           ;OverLoad_B1.c: 22: Load1.AH[i] = Load1.ADRES;
  4615  0B82  3528               	lslf	getLoad_AD@i,w
  4616  0B83  3EA8               	addlw	(_Load1+8)& (0+255)
  4617  0B84  0086               	movwf	6
  4618  0B85  3001               	movlw	1	; select bank3/4
  4619  0B86  0087               	movwf	7
  4620  0B87  0023               	movlb	3	; select bank3
  4621  0B88  0852               	movf	(_Load1^(0+384)+50),w
  4622  0B89  3FC0               	movwi [0]fsr1
  4623  0B8A  0853               	movf	((_Load1+1)^(0+384)+50),w
  4624  0B8B  3FC1               	movwi [1]fsr1
  4625                           
  4626                           ;OverLoad_B1.c: 23: j = 1;
  4627  0B8C  0020               	movlb	0	; select bank0
  4628  0B8D  01A7               	clrf	getLoad_AD@j
  4629  0B8E  0AA7               	incf	getLoad_AD@j,f
  4630                           
  4631                           ;OverLoad_B1.c: 24: break;
  4632  0B8F  2B98               	goto	l10345
  4633  0B90                     l10341:	
  4634  0B90  3001               	movlw	1
  4635  0B91  00A4               	movwf	??_getLoad_AD
  4636  0B92  0824               	movf	??_getLoad_AD,w
  4637  0B93  07A8               	addwf	getLoad_AD@i,f
  4638  0B94  3005               	movlw	5
  4639  0B95  0228               	subwf	getLoad_AD@i,w
  4640  0B96  1C03               	skipc
  4641  0B97  2B6D               	goto	l10335
  4642  0B98                     l10345:	
  4643                           
  4644                           ;OverLoad_B1.c: 25: }
  4645                           ;OverLoad_B1.c: 26: }
  4646                           ;OverLoad_B1.c: 27: if (j == 0) {
  4647  0B98  08A7               	movf	getLoad_AD@j,f
  4648  0B99  1D03               	skipz
  4649  0B9A  0008               	return
  4650                           
  4651                           ;OverLoad_B1.c: 28: for (i = 0; i < 5; i++) {
  4652  0B9B  01A8               	clrf	getLoad_AD@i
  4653  0B9C                     L1:	
  4654  0B9C  3005               	movlw	5
  4655  0B9D  0228               	subwf	getLoad_AD@i,w
  4656  0B9E  1803               	btfsc	3,0
  4657  0B9F  0008               	return
  4658                           
  4659                           ;OverLoad_B1.c: 29: if (Load1.AL[i] > Load1.ADRES) {
  4660  0BA0  3528               	lslf	getLoad_AD@i,w
  4661  0BA1  3EBA               	addlw	(_Load1+26)& (0+255)
  4662  0BA2  0086               	movwf	6
  4663  0BA3  3001               	movlw	1	; select bank3/4
  4664  0BA4  0087               	movwf	7
  4665  0BA5  3F40               	moviw [0]fsr1
  4666  0BA6  00A4               	movwf	??_getLoad_AD
  4667  0BA7  3F41               	moviw [1]fsr1
  4668  0BA8  00A5               	movwf	??_getLoad_AD+1
  4669  0BA9  0825               	movf	??_getLoad_AD+1,w
  4670  0BAA  0023               	movlb	3	; select bank3
  4671  0BAB  0253               	subwf	((_Load1+1)^(0+384)+50),w
  4672  0BAC  1D03               	skipz
  4673  0BAD  2BB2               	goto	u11185
  4674  0BAE  0020               	movlb	0	; select bank0
  4675  0BAF  0824               	movf	??_getLoad_AD,w
  4676  0BB0  0023               	movlb	3	; select bank3
  4677  0BB1  0252               	subwf	(_Load1^(0+384)+50),w
  4678  0BB2                     u11185:	
  4679  0BB2  1803               	skipnc
  4680  0BB3  2BC0               	goto	l10357
  4681                           
  4682                           ;OverLoad_B1.c: 30: Load1.AL[i] = Load1.ADRES;
  4683  0BB4  0020               	movlb	0	; select bank0
  4684  0BB5  3528               	lslf	getLoad_AD@i,w
  4685  0BB6  3EBA               	addlw	(_Load1+26)& (0+255)
  4686  0BB7  0086               	movwf	6
  4687  0BB8  3001               	movlw	1	; select bank3/4
  4688  0BB9  0087               	movwf	7
  4689  0BBA  0023               	movlb	3	; select bank3
  4690  0BBB  0852               	movf	(_Load1^(0+384)+50),w
  4691  0BBC  3FC0               	movwi [0]fsr1
  4692  0BBD  0853               	movf	((_Load1+1)^(0+384)+50),w
  4693  0BBE  3FC1               	movwi [1]fsr1
  4694                           
  4695                           ;OverLoad_B1.c: 31: break;
  4696  0BBF  0008               	return
  4697  0BC0                     l10357:	
  4698  0BC0  3001               	movlw	1
  4699  0BC1  0020               	movlb	0	; select bank0
  4700  0BC2  00A4               	movwf	??_getLoad_AD
  4701  0BC3  0824               	movf	??_getLoad_AD,w
  4702  0BC4  07A8               	addwf	getLoad_AD@i,f
  4703  0BC5  2B9C               	goto	L1
  4704  0BC6                     __end_of_getLoad_AD:	
  4705                           
  4706                           	psect	text7
  4707  1E49                     __ptext7:	
  4708 ;; *************** function _getAD *****************
  4709 ;; Defined at:
  4710 ;;		line 350 in file "../src/MCU_B1.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  adcon0          1    wreg     unsigned char 
  4713 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  2    0[BANK0 ] int 
  4718 ;; Registers used:
  4719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4725 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;Total ram usage:        4 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    6
  4732 ;; This function calls:
  4733 ;;		_Timeout_Counter
  4734 ;;		_set_TimeoutCleared
  4735 ;; This function is called by:
  4736 ;;		_getLoad_AD
  4737 ;;		_getTemp_AD
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           
  4742                           ;psect for function _getAD
  4743  1E49                     _getAD:	
  4744                           
  4745                           ;incstack = 0
  4746                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4747                           ;getAD@adcon0 stored from wreg
  4748  1E49  0020               	movlb	0	; select bank0
  4749  1E4A  00A3               	movwf	getAD@adcon0
  4750                           
  4751                           ;MCU_B1.c: 351: ADCON0 = adcon0;
  4752  1E4B  0823               	movf	getAD@adcon0,w
  4753  1E4C  0021               	movlb	1	; select bank1
  4754  1E4D  009D               	movwf	29	;volatile
  4755                           
  4756                           ;MCU_B1.c: 352: ADCON1 = adcon1;
  4757  1E4E  0020               	movlb	0	; select bank0
  4758  1E4F  0820               	movf	getAD@adcon1,w
  4759  1E50  0021               	movlb	1	; select bank1
  4760  1E51  009E               	movwf	30	;volatile
  4761                           
  4762                           ;MCU_B1.c: 353: GO_nDONE = 1;
  4763  1E52  149D               	bsf	29,1	;volatile
  4764                           
  4765                           ;MCU_B1.c: 354: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4766  1E53  2E57               	goto	l9787
  4767  1E54                     l9785:	
  4768                           
  4769                           ;MCU_B1.c: 355: Timeout_Counter();
  4770  1E54  319C  24C4  319E   	fcall	_Timeout_Counter
  4771  1E57                     l9787:	
  4772  1E57  0021               	movlb	1	; select bank1
  4773  1E58  1C9D               	btfss	29,1	;volatile
  4774  1E59  2E5C               	goto	l9791
  4775  1E5A  1D2F               	btfss	(_myMain^(0+128)+15),2
  4776  1E5B  2E54               	goto	l9785
  4777  1E5C                     l9791:	
  4778                           
  4779                           ;MCU_B1.c: 356: };
  4780                           ;MCU_B1.c: 357: set_TimeoutCleared();
  4781  1E5C  319A  221C         	fcall	_set_TimeoutCleared
  4782                           
  4783                           ;MCU_B1.c: 358: return ((ADRESH*256)+ADRESL);
  4784  1E5E  0021               	movlb	1	; select bank1
  4785  1E5F  081C               	movf	28,w	;volatile
  4786  1E60  0020               	movlb	0	; select bank0
  4787  1E61  01A1               	clrf	?_getAD+1
  4788  1E62  07A1               	addwf	?_getAD+1,f
  4789  1E63  0021               	movlb	1	; select bank1
  4790  1E64  081B               	movf	27,w	;volatile
  4791  1E65  0020               	movlb	0	; select bank0
  4792  1E66  01A0               	clrf	?_getAD
  4793  1E67  07A0               	addwf	?_getAD,f
  4794  1E68  0008               	return
  4795  1E69                     __end_of_getAD:	
  4796                           
  4797                           	psect	text8
  4798  1C3C                     __ptext8:	
  4799 ;; *************** function _WDT_Main *****************
  4800 ;; Defined at:
  4801 ;;		line 909 in file "../src/MCU_B1.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;		None
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;		None
  4806 ;; Return value:  Size  Location     Type
  4807 ;;		None               void
  4808 ;; Registers used:
  4809 ;;		wreg, status,2, status,0, pclath, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4817 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4819 ;;Total ram usage:        1 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    6
  4822 ;; This function calls:
  4823 ;;		_WDT_Clearing
  4824 ;; This function is called by:
  4825 ;;		_main
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           
  4830                           ;psect for function _WDT_Main
  4831  1C3C                     _WDT_Main:	
  4832                           
  4833                           ;MCU_B1.c: 910: if (WDT.Enable == 1) {
  4834                           
  4835                           ;incstack = 0
  4836                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4837  1C3C  0021               	movlb	1	; select bank1
  4838  1C3D  1C4C               	btfss	_WDT^(0+128),0
  4839  1C3E  0008               	return
  4840                           
  4841                           ;MCU_B1.c: 911: if (WDT.Count-- > 0) {
  4842  1C3F  3001               	movlw	1
  4843  1C40  02CD               	subwf	(_WDT^(0+128)+1),f
  4844  1C41  084D               	movf	(_WDT^(0+128)+1),w
  4845  1C42  3AFF               	xorlw	255
  4846  1C43  1903               	skipnz
  4847  1C44  0008               	return
  4848                           
  4849                           ;MCU_B1.c: 912: WDT.Count = 10;
  4850  1C45  300A               	movlw	10
  4851  1C46  0020               	movlb	0	; select bank0
  4852  1C47  00A0               	movwf	??_WDT_Main
  4853  1C48  0820               	movf	??_WDT_Main,w
  4854  1C49  0021               	movlb	1	; select bank1
  4855  1C4A  00CD               	movwf	(_WDT^(0+128)+1)
  4856                           
  4857                           ;MCU_B1.c: 913: WDT_Clearing();
  4858  1C4B  3180  2002         	fcall	_WDT_Clearing
  4859  1C4D  0008               	return
  4860  1C4E                     __end_of_WDT_Main:	
  4861                           
  4862                           	psect	text9
  4863  0002                     __ptext9:	
  4864 ;; *************** function _WDT_Clearing *****************
  4865 ;; Defined at:
  4866 ;;		line 919 in file "../src/MCU_B1.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;		None
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;		None               void
  4873 ;; Registers used:
  4874 ;;		None
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;Total ram usage:        0 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    5
  4887 ;; This function calls:
  4888 ;;		Nothing
  4889 ;; This function is called by:
  4890 ;;		_WDT_Main
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _WDT_Clearing
  4896  0002                     _WDT_Clearing:	
  4897                           
  4898                           ;incstack = 0
  4899                           ; Regs used in _WDT_Clearing: []
  4900  0002  0064               	clrwdt	;# 
  4901  0003  0008               	return
  4902  0004                     __end_of_WDT_Clearing:	
  4903                           
  4904                           	psect	text10
  4905  1A09                     __ptext10:	
  4906 ;; *************** function _Temp_Main *****************
  4907 ;; Defined at:
  4908 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;		None
  4913 ;; Return value:  Size  Location     Type
  4914 ;;		None               void
  4915 ;; Registers used:
  4916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;Total ram usage:        0 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:   11
  4929 ;; This function calls:
  4930 ;;		_setTemp_Main
  4931 ;; This function is called by:
  4932 ;;		_main
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           
  4937                           ;psect for function _Temp_Main
  4938  1A09                     _Temp_Main:	
  4939                           
  4940                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4941                           
  4942                           ;incstack = 0
  4943                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4944  1A09  318B  23C6         	fcall	_setTemp_Main
  4945  1A0B  0008               	return
  4946  1A0C                     __end_of_Temp_Main:	
  4947                           
  4948                           	psect	text11
  4949  0BC6                     __ptext11:	
  4950 ;; *************** function _setTemp_Main *****************
  4951 ;; Defined at:
  4952 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;		None
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;		None
  4957 ;; Return value:  Size  Location     Type
  4958 ;;		None               void
  4959 ;; Registers used:
  4960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4969 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4970 ;;Total ram usage:        1 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; Hardware stack levels required when called:   10
  4973 ;; This function calls:
  4974 ;;		_getLoad_Safe
  4975 ;;		_setOverTemp_Exceptions
  4976 ;; This function is called by:
  4977 ;;		_Temp_Main
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981                           
  4982                           ;psect for function _setTemp_Main
  4983  0BC6                     _setTemp_Main:	
  4984                           
  4985                           ;OverTemperature_B1.c: 58: if (Temp1.Enable == 1) {
  4986                           
  4987                           ;incstack = 0
  4988                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4989  0BC6  0021               	movlb	1	; select bank1
  4990  0BC7  1C58               	btfss	_Temp1^(0+128),0
  4991  0BC8  0008               	return
  4992                           
  4993                           ;OverTemperature_B1.c: 59: if (Temp1.ADtoGO == 0) {
  4994  0BC9  1958               	btfsc	_Temp1^(0+128),2
  4995  0BCA  2BE8               	goto	l9871
  4996                           
  4997                           ;OverTemperature_B1.c: 60: Temp1.Time++;
  4998  0BCB  3001               	movlw	1
  4999  0BCC  07D9               	addwf	(_Temp1^(0+128)+1),f
  5000  0BCD  3000               	movlw	0
  5001  0BCE  3DDA               	addwfc	((_Temp1+1)^(0+128)+1),f
  5002                           
  5003                           ;OverTemperature_B1.c: 61: if (Temp1.Time >= 500)
  5004  0BCF  3001               	movlw	1
  5005  0BD0  025A               	subwf	((_Temp1+1)^(0+128)+1),w
  5006  0BD1  30F4               	movlw	244
  5007  0BD2  1903               	skipnz
  5008  0BD3  0259               	subwf	(_Temp1^(0+128)+1),w
  5009  0BD4  1C03               	skipc
  5010  0BD5  0008               	return
  5011                           
  5012                           ;OverTemperature_B1.c: 62: {
  5013                           ;OverTemperature_B1.c: 63: if (getLoad_Safe() == 1 && 1 == 1) {
  5014  0BD6  319A  2287  318B   	fcall	_getLoad_Safe
  5015  0BD9  3A01               	xorlw	1
  5016  0BDA  1D03               	skipz
  5017  0BDB  2BE2               	goto	l9869
  5018                           
  5019                           ;OverTemperature_B1.c: 64: Temp1.Time = 0;
  5020  0BDC  0021               	movlb	1	; select bank1
  5021  0BDD  01D9               	clrf	(_Temp1^(0+128)+1)
  5022  0BDE  01DA               	clrf	((_Temp1+1)^(0+128)+1)
  5023                           
  5024                           ;OverTemperature_B1.c: 65: Temp1.ADtoGO = 1;
  5025  0BDF  1558               	bsf	_Temp1^(0+128),2
  5026                           
  5027                           ;OverTemperature_B1.c: 66: Temp1.Safe = 0;
  5028  0BE0  1258               	bcf	_Temp1^(0+128),4
  5029                           
  5030                           ;OverTemperature_B1.c: 68: } else {
  5031  0BE1  0008               	return
  5032  0BE2                     l9869:	
  5033                           
  5034                           ;OverTemperature_B1.c: 69: Temp1.Time = 1000;
  5035  0BE2  30E8               	movlw	232
  5036  0BE3  0021               	movlb	1	; select bank1
  5037  0BE4  00D9               	movwf	(_Temp1^(0+128)+1)
  5038  0BE5  3003               	movlw	3
  5039  0BE6  00DA               	movwf	(_Temp1^(0+128)+2)
  5040                           
  5041                           ;OverTemperature_B1.c: 70: }
  5042                           ;OverTemperature_B1.c: 71: }
  5043                           ;OverTemperature_B1.c: 72: } else {
  5044  0BE7  0008               	return
  5045  0BE8                     l9871:	
  5046                           
  5047                           ;OverTemperature_B1.c: 73: Temp1.Time++;
  5048  0BE8  3001               	movlw	1
  5049  0BE9  07D9               	addwf	(_Temp1^(0+128)+1),f
  5050  0BEA  3000               	movlw	0
  5051  0BEB  3DDA               	addwfc	((_Temp1+1)^(0+128)+1),f
  5052                           
  5053                           ;OverTemperature_B1.c: 74: if (Temp1.Time >= 4) {
  5054  0BEC  3000               	movlw	0
  5055  0BED  025A               	subwf	((_Temp1+1)^(0+128)+1),w
  5056  0BEE  3004               	movlw	4
  5057  0BEF  1903               	skipnz
  5058  0BF0  0259               	subwf	(_Temp1^(0+128)+1),w
  5059  0BF1  1C03               	skipc
  5060  0BF2  0008               	return
  5061                           
  5062                           ;OverTemperature_B1.c: 75: Temp1.Time = 0;
  5063  0BF3  01D9               	clrf	(_Temp1^(0+128)+1)
  5064  0BF4  01DA               	clrf	((_Temp1+1)^(0+128)+1)
  5065                           
  5066                           ;OverTemperature_B1.c: 76: Temp1.ADtoGO = 0;
  5067  0BF5  1158               	bcf	_Temp1^(0+128),2
  5068                           
  5069                           ;OverTemperature_B1.c: 77: Temp1.AD = Temp1.ADH[1];
  5070  0BF6  0863               	movf	((_Temp1+1)^(0+128)+10),w
  5071  0BF7  01DF               	clrf	((_Temp1+1)^(0+128)+6)
  5072  0BF8  07DF               	addwf	((_Temp1+1)^(0+128)+6),f
  5073  0BF9  0862               	movf	(_Temp1^(0+128)+10),w
  5074  0BFA  01DE               	clrf	(_Temp1^(0+128)+6)
  5075  0BFB  07DE               	addwf	(_Temp1^(0+128)+6),f
  5076                           
  5077                           ;OverTemperature_B1.c: 78: if (Temp1.ERROR == 1) {
  5078  0BFC  1CD8               	btfss	_Temp1^(0+128),1
  5079  0BFD  2C15               	goto	l9893
  5080                           
  5081                           ;OverTemperature_B1.c: 79: if (Temp1.AD >= 600) {
  5082  0BFE  3002               	movlw	2
  5083  0BFF  025F               	subwf	((_Temp1+1)^(0+128)+6),w
  5084  0C00  3058               	movlw	88
  5085  0C01  1903               	skipnz
  5086  0C02  025E               	subwf	(_Temp1^(0+128)+6),w
  5087  0C03  1C03               	skipc
  5088  0C04  2C2C               	goto	l9903
  5089                           
  5090                           ;OverTemperature_B1.c: 80: Temp1.Count++;
  5091  0C05  3001               	movlw	1
  5092  0C06  0020               	movlb	0	; select bank0
  5093  0C07  00B1               	movwf	??_setTemp_Main
  5094  0C08  0831               	movf	??_setTemp_Main,w
  5095  0C09  0021               	movlb	1	; select bank1
  5096  0C0A  07DB               	addwf	(_Temp1^(0+128)+3),f
  5097                           
  5098                           ;OverTemperature_B1.c: 81: if (Temp1.Count >= 3) {
  5099  0C0B  3003               	movlw	3
  5100  0C0C  025B               	subwf	(_Temp1^(0+128)+3),w
  5101  0C0D  1C03               	skipc
  5102  0C0E  2C2E               	goto	l9905
  5103                           
  5104                           ;OverTemperature_B1.c: 82: Temp1.Count = 0;
  5105  0C0F  01DB               	clrf	(_Temp1^(0+128)+3)
  5106                           
  5107                           ;OverTemperature_B1.c: 83: setOverTemp_Exceptions(0);
  5108  0C10  3000               	movlw	0
  5109  0C11  3192  2253  318B   	fcall	_setOverTemp_Exceptions
  5110                           
  5111                           ;OverTemperature_B1.c: 84: }
  5112                           ;OverTemperature_B1.c: 85: } else {
  5113  0C14  2C2E               	goto	l9905
  5114  0C15                     l9893:	
  5115                           ;OverTemperature_B1.c: 87: }
  5116                           ;OverTemperature_B1.c: 88: } else {
  5117                           
  5118                           ;OverTemperature_B1.c: 86: Temp1.Count = 0;
  5119                           
  5120                           
  5121                           ;OverTemperature_B1.c: 89: if (Temp1.AD <= 550) {
  5122  0C15  3002               	movlw	2
  5123  0C16  025F               	subwf	((_Temp1+1)^(0+128)+6),w
  5124  0C17  3027               	movlw	39
  5125  0C18  1903               	skipnz
  5126  0C19  025E               	subwf	(_Temp1^(0+128)+6),w
  5127  0C1A  1803               	skipnc
  5128  0C1B  2C2C               	goto	l9903
  5129                           
  5130                           ;OverTemperature_B1.c: 90: Temp1.Count++;
  5131  0C1C  3001               	movlw	1
  5132  0C1D  0020               	movlb	0	; select bank0
  5133  0C1E  00B1               	movwf	??_setTemp_Main
  5134  0C1F  0831               	movf	??_setTemp_Main,w
  5135  0C20  0021               	movlb	1	; select bank1
  5136  0C21  07DB               	addwf	(_Temp1^(0+128)+3),f
  5137                           
  5138                           ;OverTemperature_B1.c: 91: if (Temp1.Count >= 3) {
  5139  0C22  3003               	movlw	3
  5140  0C23  025B               	subwf	(_Temp1^(0+128)+3),w
  5141  0C24  1C03               	skipc
  5142  0C25  2C2E               	goto	l9905
  5143                           
  5144                           ;OverTemperature_B1.c: 92: Temp1.Count = 0;
  5145  0C26  01DB               	clrf	(_Temp1^(0+128)+3)
  5146                           
  5147                           ;OverTemperature_B1.c: 93: setOverTemp_Exceptions(1);
  5148  0C27  3001               	movlw	1
  5149  0C28  3192  2253  318B   	fcall	_setOverTemp_Exceptions
  5150                           
  5151                           ;OverTemperature_B1.c: 94: }
  5152                           ;OverTemperature_B1.c: 95: } else {
  5153  0C2B  2C2E               	goto	l9905
  5154  0C2C                     l9903:	
  5155                           
  5156                           ;OverTemperature_B1.c: 96: Temp1.Count = 0;
  5157  0C2C  0021               	movlb	1	; select bank1
  5158  0C2D  01DB               	clrf	(_Temp1^(0+128)+3)
  5159  0C2E                     l9905:	
  5160                           
  5161                           ;OverTemperature_B1.c: 97: }
  5162                           ;OverTemperature_B1.c: 98: }
  5163                           ;OverTemperature_B1.c: 99: if (Temp1.ERROR == 0) {
  5164  0C2E  0021               	movlb	1	; select bank1
  5165  0C2F  1CD8               	btfss	_Temp1^(0+128),1
  5166                           
  5167                           ;OverTemperature_B1.c: 100: Temp1.Safe = 1;
  5168  0C30  1658               	bsf	_Temp1^(0+128),4
  5169                           
  5170                           ;OverTemperature_B1.c: 101: }
  5171                           ;OverTemperature_B1.c: 102: product->Data[24]=Temp1.AD >> 8;
  5172  0C31  085F               	movf	((_Temp1+1)^(0+128)+6),w
  5173  0C32  0020               	movlb	0	; select bank0
  5174  0C33  00B1               	movwf	??_setTemp_Main
  5175  0C34  086D               	movf	_product,w
  5176  0C35  3E18               	addlw	24
  5177  0C36  0086               	movwf	6
  5178  0C37  3002               	movlw	2	; select bank4/5
  5179  0C38  0087               	movwf	7
  5180  0C39  0831               	movf	??_setTemp_Main,w
  5181  0C3A  0081               	movwf	1
  5182                           
  5183                           ;OverTemperature_B1.c: 103: product->Data[25]=Temp1.AD;
  5184  0C3B  0021               	movlb	1	; select bank1
  5185  0C3C  085E               	movf	(_Temp1^(0+128)+6),w
  5186  0C3D  0020               	movlb	0	; select bank0
  5187  0C3E  00B1               	movwf	??_setTemp_Main
  5188  0C3F  086D               	movf	_product,w
  5189  0C40  3E19               	addlw	25
  5190  0C41  0086               	movwf	6
  5191  0C42  3002               	movlw	2	; select bank4/5
  5192  0C43  0087               	movwf	7
  5193  0C44  0831               	movf	??_setTemp_Main,w
  5194  0C45  0081               	movwf	1
  5195                           
  5196                           ;OverTemperature_B1.c: 106: Temp1.ADH[0] = 0;
  5197  0C46  0021               	movlb	1	; select bank1
  5198  0C47  01E0               	clrf	(_Temp1^(0+128)+8)
  5199  0C48  01E1               	clrf	((_Temp1+1)^(0+128)+8)
  5200                           
  5201                           ;OverTemperature_B1.c: 107: Temp1.ADH[1] = 0;
  5202  0C49  01E2               	clrf	(_Temp1^(0+128)+10)
  5203  0C4A  01E3               	clrf	((_Temp1+1)^(0+128)+10)
  5204  0C4B  0008               	return
  5205  0C4C                     __end_of_setTemp_Main:	
  5206                           
  5207                           	psect	text12
  5208  1253                     __ptext12:	
  5209 ;; *************** function _setOverTemp_Exceptions *****************
  5210 ;; Defined at:
  5211 ;;		line 114 in file "../src/OverTemperature_B1.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  command         1    wreg     unsigned char 
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;  command         1   16[BANK0 ] unsigned char 
  5216 ;;  i               1   15[BANK0 ] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;		None               void
  5219 ;; Registers used:
  5220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;Total ram usage:        3 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    9
  5233 ;; This function calls:
  5234 ;;		_DimmerLights_Exceptions
  5235 ;;		_setBuz
  5236 ;;		_setLED
  5237 ;;		_setRF_Enable
  5238 ;;		_setSw_Enable
  5239 ;; This function is called by:
  5240 ;;		_setTemp_Main
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _setOverTemp_Exceptions
  5246  1253                     _setOverTemp_Exceptions:	
  5247                           
  5248                           ;incstack = 0
  5249                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5250                           ;setOverTemp_Exceptions@command stored from wreg
  5251  1253  0020               	movlb	0	; select bank0
  5252  1254  00B0               	movwf	setOverTemp_Exceptions@command
  5253                           
  5254                           ;OverTemperature_B1.c: 115: char i = command == 1 ? 0 : 1;
  5255  1255  0830               	movf	setOverTemp_Exceptions@command,w
  5256  1256  3A01               	xorlw	1
  5257  1257  3000               	movlw	0
  5258  1258  1D03               	skipz
  5259  1259  3001               	movlw	1
  5260  125A  00AE               	movwf	??_setOverTemp_Exceptions
  5261  125B  082E               	movf	??_setOverTemp_Exceptions,w
  5262  125C  00AF               	movwf	setOverTemp_Exceptions@i
  5263                           
  5264                           ;OverTemperature_B1.c: 116: Temp1.ERROR = command;
  5265  125D  0830               	movf	setOverTemp_Exceptions@command,w
  5266  125E  0021               	movlb	1	; select bank1
  5267  125F  10D8               	bcf	_Temp1^(0+128),1
  5268  1260  1D03               	skipz
  5269  1261  14D8               	bsf	_Temp1^(0+128),1
  5270                           
  5271                           ;OverTemperature_B1.c: 117: Temp1.Safe = i;
  5272  1262  0020               	movlb	0	; select bank0
  5273  1263  082F               	movf	setOverTemp_Exceptions@i,w
  5274  1264  0021               	movlb	1	; select bank1
  5275  1265  1258               	bcf	_Temp1^(0+128),4
  5276  1266  1D03               	skipz
  5277  1267  1658               	bsf	_Temp1^(0+128),4
  5278                           
  5279                           ;OverTemperature_B1.c: 118: if (command == 1) {
  5280  1268  0020               	movlb	0	; select bank0
  5281  1269  0830               	movf	setOverTemp_Exceptions@command,w
  5282  126A  3A01               	xorlw	1
  5283  126B  1D03               	skipz
  5284  126C  2A72               	goto	l9407
  5285                           
  5286                           ;OverTemperature_B1.c: 119: DimmerLights_Exceptions(1);
  5287  126D  3001               	movlw	1
  5288  126E  3193  23E8  3192   	fcall	_DimmerLights_Exceptions
  5289                           
  5290                           ;OverTemperature_B1.c: 123: } else if (command == 0) {
  5291  1271  2A7E               	goto	l9411
  5292  1272                     l9407:	
  5293  1272  0020               	movlb	0	; select bank0
  5294  1273  08B0               	movf	setOverTemp_Exceptions@command,f
  5295  1274  1D03               	skipz
  5296  1275  2A7E               	goto	l9411
  5297                           
  5298                           ;OverTemperature_B1.c: 124: setBuz(2, 100);
  5299  1276  3064               	movlw	100
  5300  1277  00A9               	movwf	setBuz@time
  5301  1278  3000               	movlw	0
  5302  1279  00AA               	movwf	setBuz@time+1
  5303  127A  3002               	movlw	2
  5304  127B  3195  25C9  3192   	fcall	_setBuz
  5305  127E                     l9411:	
  5306                           
  5307                           ;OverTemperature_B1.c: 125: }
  5308                           ;OverTemperature_B1.c: 128: setLED(99, command + 10);
  5309  127E  0020               	movlb	0	; select bank0
  5310  127F  0830               	movf	setOverTemp_Exceptions@command,w
  5311  1280  3E0A               	addlw	10
  5312  1281  00AE               	movwf	??_setOverTemp_Exceptions
  5313  1282  082E               	movf	??_setOverTemp_Exceptions,w
  5314  1283  00A2               	movwf	setLED@command
  5315  1284  3063               	movlw	99
  5316  1285  3196  267D  3192   	fcall	_setLED
  5317                           
  5318                           ;OverTemperature_B1.c: 130: setSw_Enable(i);
  5319  1288  0020               	movlb	0	; select bank0
  5320  1289  082F               	movf	setOverTemp_Exceptions@i,w
  5321  128A  319D  25B2  3192   	fcall	_setSw_Enable
  5322                           
  5323                           ;OverTemperature_B1.c: 132: setRF_Enable(i);
  5324  128D  0020               	movlb	0	; select bank0
  5325  128E  082F               	movf	setOverTemp_Exceptions@i,w
  5326  128F  319B  2348         	fcall	_setRF_Enable
  5327  1291  0008               	return
  5328  1292                     __end_of_setOverTemp_Exceptions:	
  5329                           
  5330                           	psect	text13
  5331  1A87                     __ptext13:	
  5332 ;; *************** function _getLoad_Safe *****************
  5333 ;; Defined at:
  5334 ;;		line 296 in file "../src/OverLoad_B1.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;		None
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;  result          1    0[BANK0 ] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      unsigned char 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;Total ram usage:        1 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    5
  5355 ;; This function calls:
  5356 ;;		Nothing
  5357 ;; This function is called by:
  5358 ;;		_setTemp_Main
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function _getLoad_Safe
  5364  1A87                     _getLoad_Safe:	
  5365                           
  5366                           ;OverLoad_B1.c: 297: char result = Load1.Safe;
  5367                           
  5368                           ;incstack = 0
  5369                           ; Regs used in _getLoad_Safe: [wreg+status,2]
  5370  1A87  3000               	movlw	0
  5371  1A88  0023               	movlb	3	; select bank3
  5372  1A89  19A0               	btfsc	_Load1^(0+384),3
  5373  1A8A  3001               	movlw	1
  5374  1A8B  0020               	movlb	0	; select bank0
  5375  1A8C  00A0               	movwf	getLoad_Safe@result
  5376                           
  5377                           ;OverLoad_B1.c: 298: return result;
  5378  1A8D  0820               	movf	getLoad_Safe@result,w
  5379  1A8E  0008               	return
  5380  1A8F                     __end_of_getLoad_Safe:	
  5381                           
  5382                           	psect	text14
  5383  1A06                     __ptext14:	
  5384 ;; *************** function _Temp_Initialization *****************
  5385 ;; Defined at:
  5386 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;		None
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;		None
  5391 ;; Return value:  Size  Location     Type
  5392 ;;		None               void
  5393 ;; Registers used:
  5394 ;;		status,2, status,0, pclath, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;Total ram usage:        0 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    6
  5407 ;; This function calls:
  5408 ;;		_setTemp_Initialization
  5409 ;; This function is called by:
  5410 ;;		_main
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           
  5415                           ;psect for function _Temp_Initialization
  5416  1A06                     _Temp_Initialization:	
  5417                           
  5418                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5419                           
  5420                           ;incstack = 0
  5421                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5422  1A06  319A  2203         	fcall	_setTemp_Initialization
  5423  1A08  0008               	return
  5424  1A09                     __end_of_Temp_Initialization:	
  5425                           
  5426                           	psect	text15
  5427  1A03                     __ptext15:	
  5428 ;; *************** function _setTemp_Initialization *****************
  5429 ;; Defined at:
  5430 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;		None
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;		None
  5435 ;; Return value:  Size  Location     Type
  5436 ;;		None               void
  5437 ;; Registers used:
  5438 ;;		None
  5439 ;; Tracked objects:
  5440 ;;		On entry : 0/0
  5441 ;;		On exit  : 0/0
  5442 ;;		Unchanged: 0/0
  5443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;Total ram usage:        0 bytes
  5449 ;; Hardware stack levels used:    1
  5450 ;; Hardware stack levels required when called:    5
  5451 ;; This function calls:
  5452 ;;		Nothing
  5453 ;; This function is called by:
  5454 ;;		_Temp_Initialization
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           
  5459                           ;psect for function _setTemp_Initialization
  5460  1A03                     _setTemp_Initialization:	
  5461                           
  5462                           ;OverTemperature_B1.c: 46: Temp1.Safe = 1;
  5463                           
  5464                           ;incstack = 0
  5465                           ; Regs used in _setTemp_Initialization: []
  5466  1A03  0021               	movlb	1	; select bank1
  5467  1A04  1658               	bsf	_Temp1^(0+128),4
  5468  1A05  0008               	return
  5469  1A06                     __end_of_setTemp_Initialization:	
  5470                           
  5471                           	psect	text16
  5472  1A7F                     __ptext16:	
  5473 ;; *************** function _Switch_Main *****************
  5474 ;; Defined at:
  5475 ;;		line 67 in file "../src/Switch_B1.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;		None
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;		None
  5480 ;; Return value:  Size  Location     Type
  5481 ;;		None               void
  5482 ;; Registers used:
  5483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;Total ram usage:        0 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; Hardware stack levels required when called:   11
  5496 ;; This function calls:
  5497 ;;		_setSw_Main
  5498 ;; This function is called by:
  5499 ;;		_main
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           
  5504                           ;psect for function _Switch_Main
  5505  1A7F                     _Switch_Main:	
  5506                           
  5507                           ;Switch_B1.c: 69: setSw_Main(1);
  5508                           
  5509                           ;incstack = 0
  5510                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5511  1A7F  3001               	movlw	1
  5512  1A80  3183  237A  319A   	fcall	_setSw_Main
  5513                           
  5514                           ;Switch_B1.c: 73: setSw_Main(2);
  5515  1A83  3002               	movlw	2
  5516  1A84  3183  237A         	fcall	_setSw_Main
  5517  1A86  0008               	return
  5518  1A87                     __end_of_Switch_Main:	
  5519                           
  5520                           	psect	text17
  5521  037A                     __ptext17:	
  5522 ;; *************** function _setSw_Main *****************
  5523 ;; Defined at:
  5524 ;;		line 117 in file "../src/Switch_B1.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  sw              1    wreg     unsigned char 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  sw              1   73[BANK0 ] unsigned char 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;		None               void
  5531 ;; Registers used:
  5532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;Total ram usage:        5 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:   10
  5545 ;; This function calls:
  5546 ;;		_SwPointSelect
  5547 ;;		_Sw_DimmerAdjFunc
  5548 ;;		_Sw_DimmerOffFunc
  5549 ;;		_Sw_DimmerOnFunc
  5550 ;;		_setBuz
  5551 ;;		_setRF_Learn
  5552 ;; This function is called by:
  5553 ;;		_Switch_Main
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           
  5558                           ;psect for function _setSw_Main
  5559  037A                     _setSw_Main:	
  5560                           
  5561                           ;incstack = 0
  5562                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5563                           ;setSw_Main@sw stored from wreg
  5564  037A  0020               	movlb	0	; select bank0
  5565  037B  00E9               	movwf	setSw_Main@sw
  5566                           
  5567                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5568  037C  0869               	movf	setSw_Main@sw,w
  5569  037D  319C  24B0  3183   	fcall	_SwPointSelect
  5570                           
  5571                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5572  0380  0020               	movlb	0	; select bank0
  5573  0381  086C               	movf	_Sw,w
  5574  0382  0086               	movwf	6
  5575  0383  3001               	movlw	1	; select bank2/3
  5576  0384  0087               	movwf	7
  5577  0385  1C01               	btfss	1,0
  5578  0386  0008               	return
  5579                           
  5580                           ;Switch_B1.c: 131: if (sw == 1) {
  5581  0387  0869               	movf	setSw_Main@sw,w
  5582  0388  3A01               	xorlw	1
  5583  0389  1D03               	skipz
  5584  038A  2B97               	goto	l10053
  5585                           
  5586                           ;Switch_B1.c: 132: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  5587  038B  01E7               	clrf	_setSw_Main$7025
  5588  038C  0AE7               	incf	_setSw_Main$7025,f
  5589  038D  1F0C               	btfss	12,6	;volatile
  5590  038E  1A0C               	btfsc	12,4	;volatile
  5591  038F  2B91               	goto	l10051
  5592  0390  01E7               	clrf	_setSw_Main$7025
  5593  0391                     l10051:	
  5594  0391  086C               	movf	_Sw,w
  5595  0392  0086               	movwf	6
  5596  0393  3001               	movlw	1	; select bank2/3
  5597  0394  0087               	movwf	7
  5598  0395  0867               	movf	_setSw_Main$7025,w
  5599  0396  2BA6               	goto	L2
  5600  0397                     l10053:	
  5601                           ;Switch_B1.c: 133: } else if (sw == 2) {
  5602                           
  5603  0397  0869               	movf	setSw_Main@sw,w
  5604  0398  3A02               	xorlw	2
  5605  0399  1D03               	skipz
  5606  039A  2BA9               	goto	l10063
  5607                           
  5608                           ;Switch_B1.c: 134: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  5609  039B  01E8               	clrf	_setSw_Main$7026
  5610  039C  0AE8               	incf	_setSw_Main$7026,f
  5611  039D  1C0C               	btfss	12,0	;volatile
  5612  039E  188D               	btfsc	13,1	;volatile
  5613  039F  2BA1               	goto	l10061
  5614  03A0  01E8               	clrf	_setSw_Main$7026
  5615  03A1                     l10061:	
  5616  03A1  086C               	movf	_Sw,w
  5617  03A2  0086               	movwf	6
  5618  03A3  3001               	movlw	1	; select bank2/3
  5619  03A4  0087               	movwf	7
  5620  03A5  0868               	movf	_setSw_Main$7026,w
  5621  03A6                     L2:	
  5622  03A6  1081               	bcf	1,1
  5623  03A7  1D03               	skipz
  5624  03A8  1481               	bsf	1,1
  5625  03A9                     l10063:	
  5626                           
  5627                           ;Switch_B1.c: 135: }
  5628                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5629  03A9  086C               	movf	_Sw,w
  5630  03AA  0086               	movwf	6
  5631  03AB  3001               	movlw	1	; select bank2/3
  5632  03AC  0087               	movwf	7
  5633  03AD  1C81               	btfss	1,1
  5634  03AE  2C73               	goto	l10111
  5635                           
  5636                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5637  03AF  086C               	movf	_Sw,w
  5638  03B0  0086               	movwf	6
  5639  03B1  3001               	movlw	1	; select bank2/3
  5640  03B2  0087               	movwf	7
  5641  03B3  1901               	btfsc	1,2
  5642  03B4  2BD6               	goto	l10077
  5643                           
  5644                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5645  03B5  3001               	movlw	1
  5646  03B6  00E5               	movwf	??_setSw_Main
  5647  03B7  086C               	movf	_Sw,w
  5648  03B8  3E02               	addlw	2
  5649  03B9  0086               	movwf	6
  5650  03BA  3001               	movlw	1	; select bank2/3
  5651  03BB  0087               	movwf	7
  5652  03BC  0865               	movf	??_setSw_Main,w
  5653  03BD  0781               	addwf	1,f
  5654                           
  5655                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5656  03BE  086C               	movf	_Sw,w
  5657  03BF  3E02               	addlw	2
  5658  03C0  0086               	movwf	6
  5659  03C1  3001               	movlw	1	; select bank2/3
  5660  03C2  0087               	movwf	7
  5661  03C3  3005               	movlw	5
  5662  03C4  0201               	subwf	1,w
  5663  03C5  1C03               	skipc
  5664  03C6  0008               	return
  5665                           
  5666                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5667  03C7  086C               	movf	_Sw,w
  5668  03C8  3E02               	addlw	2
  5669  03C9  0086               	movwf	6
  5670  03CA  3001               	movlw	1	; select bank2/3
  5671  03CB  0087               	movwf	7
  5672  03CC  0181               	clrf	1
  5673                           
  5674                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5675  03CD  086C               	movf	_Sw,w
  5676  03CE  0086               	movwf	6
  5677  03CF  3001               	movlw	1	; select bank2/3
  5678  03D0  0087               	movwf	7
  5679  03D1  1501               	bsf	1,2
  5680                           
  5681                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5682  03D2  0869               	movf	setSw_Main@sw,w
  5683  03D3  318A  2268         	fcall	_Sw_DimmerOnFunc
  5684                           
  5685                           ;Switch_B1.c: 173: }
  5686                           ;Switch_B1.c: 174: } else {
  5687  03D5  0008               	return
  5688  03D6                     l10077:	
  5689                           
  5690                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5691  03D6  0020               	movlb	0	; select bank0
  5692  03D7  086C               	movf	_Sw,w
  5693  03D8  0086               	movwf	6
  5694  03D9  3001               	movlw	1	; select bank2/3
  5695  03DA  0087               	movwf	7
  5696  03DB  1981               	btfsc	1,3
  5697  03DC  2C03               	goto	l10087
  5698                           
  5699                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5700  03DD  086C               	movf	_Sw,w
  5701  03DE  3E03               	addlw	3
  5702  03DF  0086               	movwf	6
  5703  03E0  3001               	movlw	1	; select bank2/3
  5704  03E1  0087               	movwf	7
  5705  03E2  3001               	movlw	1
  5706  03E3  0781               	addwf	1,f
  5707  03E4  3141               	addfsr 1,1
  5708  03E5  1803               	skipnc
  5709  03E6  0A81               	incf	1,f
  5710                           
  5711                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5712  03E7  086C               	movf	_Sw,w
  5713  03E8  3E03               	addlw	3
  5714  03E9  0086               	movwf	6
  5715  03EA  3001               	movlw	1	; select bank2/3
  5716  03EB  0087               	movwf	7
  5717  03EC  3F40               	moviw [0]fsr1
  5718  03ED  00E5               	movwf	??_setSw_Main
  5719  03EE  3F41               	moviw [1]fsr1
  5720  03EF  00E6               	movwf	??_setSw_Main+1
  5721  03F0  3000               	movlw	0
  5722  03F1  0266               	subwf	??_setSw_Main+1,w
  5723  03F2  3096               	movlw	150
  5724  03F3  1903               	skipnz
  5725  03F4  0265               	subwf	??_setSw_Main,w
  5726  03F5  1C03               	skipc
  5727  03F6  0008               	return
  5728                           
  5729                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5730  03F7  086C               	movf	_Sw,w
  5731  03F8  3E03               	addlw	3
  5732  03F9  0086               	movwf	6
  5733  03FA  3001               	movlw	1	; select bank2/3
  5734  03FB  0087               	movwf	7
  5735  03FC  3000               	movlw	0
  5736  03FD  3FC0               	movwi [0]fsr1
  5737  03FE  3FC1               	movwi [1]fsr1
  5738                           
  5739                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5740  03FF  0869               	movf	setSw_Main@sw,w
  5741  0400  3194  247C         	fcall	_Sw_DimmerAdjFunc
  5742                           
  5743                           ;Switch_B1.c: 184: }
  5744                           ;Switch_B1.c: 185: } else {
  5745  0402  0008               	return
  5746  0403                     l10087:	
  5747                           
  5748                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5749  0403  0020               	movlb	0	; select bank0
  5750  0404  086C               	movf	_Sw,w
  5751  0405  0086               	movwf	6
  5752  0406  3001               	movlw	1	; select bank2/3
  5753  0407  0087               	movwf	7
  5754  0408  1A01               	btfsc	1,4
  5755  0409  2C41               	goto	l10101
  5756                           
  5757                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5758  040A  086C               	movf	_Sw,w
  5759  040B  3E05               	addlw	5
  5760  040C  0086               	movwf	6
  5761  040D  3001               	movlw	1	; select bank2/3
  5762  040E  0087               	movwf	7
  5763  040F  3001               	movlw	1
  5764  0410  0781               	addwf	1,f
  5765  0411  3141               	addfsr 1,1
  5766  0412  1803               	skipnc
  5767  0413  0A81               	incf	1,f
  5768                           
  5769                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5770  0414  086C               	movf	_Sw,w
  5771  0415  3E05               	addlw	5
  5772  0416  0086               	movwf	6
  5773  0417  3001               	movlw	1	; select bank2/3
  5774  0418  0087               	movwf	7
  5775  0419  3F40               	moviw [0]fsr1
  5776  041A  00E5               	movwf	??_setSw_Main
  5777  041B  3F41               	moviw [1]fsr1
  5778  041C  00E6               	movwf	??_setSw_Main+1
  5779  041D  3000               	movlw	0
  5780  041E  0266               	subwf	??_setSw_Main+1,w
  5781  041F  3096               	movlw	150
  5782  0420  1903               	skipnz
  5783  0421  0265               	subwf	??_setSw_Main,w
  5784  0422  1C03               	skipc
  5785  0423  0008               	return
  5786                           
  5787                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5788  0424  086C               	movf	_Sw,w
  5789  0425  3E05               	addlw	5
  5790  0426  0086               	movwf	6
  5791  0427  3001               	movlw	1	; select bank2/3
  5792  0428  0087               	movwf	7
  5793  0429  3000               	movlw	0
  5794  042A  3FC0               	movwi [0]fsr1
  5795  042B  3FC1               	movwi [1]fsr1
  5796                           
  5797                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5798  042C  086C               	movf	_Sw,w
  5799  042D  0086               	movwf	6
  5800  042E  3001               	movlw	1	; select bank2/3
  5801  042F  0087               	movwf	7
  5802  0430  1601               	bsf	1,4
  5803                           
  5804                           ;Switch_B1.c: 193: setRF_Learn(1);
  5805  0431  3001               	movlw	1
  5806  0432  319A  2277  3183   	fcall	_setRF_Learn
  5807                           
  5808                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5809  0435  0021               	movlb	1	; select bank1
  5810  0436  1FA0               	btfss	_myMain^(0+128),7
  5811  0437  0008               	return
  5812                           
  5813                           ;Switch_B1.c: 196: setBuz(2, 100);
  5814  0438  3064               	movlw	100
  5815  0439  0020               	movlb	0	; select bank0
  5816  043A  00A9               	movwf	setBuz@time
  5817  043B  3000               	movlw	0
  5818  043C  00AA               	movwf	setBuz@time+1
  5819  043D  3002               	movlw	2
  5820  043E  3195  25C9         	fcall	_setBuz
  5821                           
  5822                           ;Switch_B1.c: 197: }
  5823                           ;Switch_B1.c: 199: }
  5824                           ;Switch_B1.c: 200: } else {
  5825  0440  0008               	return
  5826  0441                     l10101:	
  5827                           
  5828                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5829  0441  0020               	movlb	0	; select bank0
  5830  0442  086C               	movf	_Sw,w
  5831  0443  0086               	movwf	6
  5832  0444  3001               	movlw	1	; select bank2/3
  5833  0445  0087               	movwf	7
  5834  0446  1A81               	btfsc	1,5
  5835  0447  0008               	return
  5836                           
  5837                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5838  0448  086C               	movf	_Sw,w
  5839  0449  3E07               	addlw	7
  5840  044A  0086               	movwf	6
  5841  044B  3001               	movlw	1	; select bank2/3
  5842  044C  0087               	movwf	7
  5843  044D  3001               	movlw	1
  5844  044E  0781               	addwf	1,f
  5845  044F  3141               	addfsr 1,1
  5846  0450  1803               	skipnc
  5847  0451  0A81               	incf	1,f
  5848                           
  5849                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5850  0452  086C               	movf	_Sw,w
  5851  0453  3E07               	addlw	7
  5852  0454  0086               	movwf	6
  5853  0455  3001               	movlw	1	; select bank2/3
  5854  0456  0087               	movwf	7
  5855  0457  3F40               	moviw [0]fsr1
  5856  0458  00E5               	movwf	??_setSw_Main
  5857  0459  3F41               	moviw [1]fsr1
  5858  045A  00E6               	movwf	??_setSw_Main+1
  5859  045B  3001               	movlw	1
  5860  045C  0266               	subwf	??_setSw_Main+1,w
  5861  045D  302C               	movlw	44
  5862  045E  1903               	skipnz
  5863  045F  0265               	subwf	??_setSw_Main,w
  5864  0460  1C03               	skipc
  5865  0461  0008               	return
  5866                           
  5867                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5868  0462  086C               	movf	_Sw,w
  5869  0463  3E07               	addlw	7
  5870  0464  0086               	movwf	6
  5871  0465  3001               	movlw	1	; select bank2/3
  5872  0466  0087               	movwf	7
  5873  0467  3000               	movlw	0
  5874  0468  3FC0               	movwi [0]fsr1
  5875  0469  3FC1               	movwi [1]fsr1
  5876                           
  5877                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5878  046A  086C               	movf	_Sw,w
  5879  046B  0086               	movwf	6
  5880  046C  3001               	movlw	1	; select bank2/3
  5881  046D  0087               	movwf	7
  5882  046E  1681               	bsf	1,5
  5883                           
  5884                           ;Switch_B1.c: 208: setRF_Learn(0);
  5885  046F  3000               	movlw	0
  5886  0470  319A  2277         	fcall	_setRF_Learn
  5887                           
  5888                           ;Switch_B1.c: 211: }
  5889                           ;Switch_B1.c: 212: }
  5890                           ;Switch_B1.c: 213: }
  5891                           ;Switch_B1.c: 214: }
  5892                           ;Switch_B1.c: 215: }
  5893                           ;Switch_B1.c: 216: } else {
  5894  0472  0008               	return
  5895  0473                     l10111:	
  5896                           
  5897                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5898  0473  0020               	movlb	0	; select bank0
  5899  0474  086C               	movf	_Sw,w
  5900  0475  0086               	movwf	6
  5901  0476  3001               	movlw	1	; select bank2/3
  5902  0477  0087               	movwf	7
  5903  0478  1D01               	btfss	1,2
  5904  0479  0008               	return
  5905                           
  5906                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5907  047A  3001               	movlw	1
  5908  047B  00E5               	movwf	??_setSw_Main
  5909  047C  086C               	movf	_Sw,w
  5910  047D  3E02               	addlw	2
  5911  047E  0086               	movwf	6
  5912  047F  3001               	movlw	1	; select bank2/3
  5913  0480  0087               	movwf	7
  5914  0481  0865               	movf	??_setSw_Main,w
  5915  0482  0781               	addwf	1,f
  5916                           
  5917                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5918  0483  086C               	movf	_Sw,w
  5919  0484  3E02               	addlw	2
  5920  0485  0086               	movwf	6
  5921  0486  3001               	movlw	1	; select bank2/3
  5922  0487  0087               	movwf	7
  5923  0488  3005               	movlw	5
  5924  0489  0201               	subwf	1,w
  5925  048A  1C03               	skipc
  5926  048B  0008               	return
  5927                           
  5928                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  5929  048C  086C               	movf	_Sw,w
  5930  048D  3E02               	addlw	2
  5931  048E  0086               	movwf	6
  5932  048F  3001               	movlw	1	; select bank2/3
  5933  0490  0087               	movwf	7
  5934  0491  0181               	clrf	1
  5935                           
  5936                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  5937  0492  086C               	movf	_Sw,w
  5938  0493  0086               	movwf	6
  5939  0494  3001               	movlw	1	; select bank2/3
  5940  0495  0087               	movwf	7
  5941  0496  1101               	bcf	1,2
  5942                           
  5943                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  5944  0497  086C               	movf	_Sw,w
  5945  0498  3E03               	addlw	3
  5946  0499  0086               	movwf	6
  5947  049A  3001               	movlw	1	; select bank2/3
  5948  049B  0087               	movwf	7
  5949  049C  3000               	movlw	0
  5950  049D  3FC0               	movwi [0]fsr1
  5951  049E  3FC1               	movwi [1]fsr1
  5952                           
  5953                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  5954  049F  086C               	movf	_Sw,w
  5955  04A0  0086               	movwf	6
  5956  04A1  3001               	movlw	1	; select bank2/3
  5957  04A2  0087               	movwf	7
  5958  04A3  1181               	bcf	1,3
  5959                           
  5960                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  5961  04A4  086C               	movf	_Sw,w
  5962  04A5  3E05               	addlw	5
  5963  04A6  0086               	movwf	6
  5964  04A7  3001               	movlw	1	; select bank2/3
  5965  04A8  0087               	movwf	7
  5966  04A9  3000               	movlw	0
  5967  04AA  3FC0               	movwi [0]fsr1
  5968  04AB  3FC1               	movwi [1]fsr1
  5969                           
  5970                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  5971  04AC  086C               	movf	_Sw,w
  5972  04AD  0086               	movwf	6
  5973  04AE  3001               	movlw	1	; select bank2/3
  5974  04AF  0087               	movwf	7
  5975  04B0  1201               	bcf	1,4
  5976                           
  5977                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  5978  04B1  086C               	movf	_Sw,w
  5979  04B2  3E07               	addlw	7
  5980  04B3  0086               	movwf	6
  5981  04B4  3001               	movlw	1	; select bank2/3
  5982  04B5  0087               	movwf	7
  5983  04B6  3000               	movlw	0
  5984  04B7  3FC0               	movwi [0]fsr1
  5985  04B8  3FC1               	movwi [1]fsr1
  5986                           
  5987                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  5988  04B9  086C               	movf	_Sw,w
  5989  04BA  0086               	movwf	6
  5990  04BB  3001               	movlw	1	; select bank2/3
  5991  04BC  0087               	movwf	7
  5992  04BD  1281               	bcf	1,5
  5993                           
  5994                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  5995  04BE  0869               	movf	setSw_Main@sw,w
  5996  04BF  3189  2188  3183   	fcall	_Sw_DimmerOffFunc
  5997                           
  5998                           ;Switch_B1.c: 232: setRF_Learn(0);
  5999  04C2  3000               	movlw	0
  6000  04C3  319A  2277         	fcall	_setRF_Learn
  6001  04C5  0008               	return
  6002  04C6                     __end_of_setSw_Main:	
  6003                           
  6004                           	psect	text18
  6005  1A77                     __ptext18:	
  6006 ;; *************** function _setRF_Learn *****************
  6007 ;; Defined at:
  6008 ;;		line 23 in file "../src/RF_Control_B1.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  command         1    wreg     unsigned char 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  command         1    0[BANK0 ] unsigned char 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;		None               void
  6015 ;; Registers used:
  6016 ;;		wreg
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;Total ram usage:        1 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; Hardware stack levels required when called:    5
  6029 ;; This function calls:
  6030 ;;		Nothing
  6031 ;; This function is called by:
  6032 ;;		_setSw_Main
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           
  6037                           ;psect for function _setRF_Learn
  6038  1A77                     _setRF_Learn:	
  6039                           
  6040                           ;incstack = 0
  6041                           ; Regs used in _setRF_Learn: [wreg]
  6042                           ;setRF_Learn@command stored from wreg
  6043  1A77  0020               	movlb	0	; select bank0
  6044  1A78  00A0               	movwf	setRF_Learn@command
  6045                           
  6046                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  6047  1A79  0820               	movf	setRF_Learn@command,w
  6048  1A7A  0021               	movlb	1	; select bank1
  6049  1A7B  133E               	bcf	_RF1^(0+128),6
  6050  1A7C  1D03               	skipz
  6051  1A7D  173E               	bsf	_RF1^(0+128),6
  6052  1A7E  0008               	return
  6053  1A7F                     __end_of_setRF_Learn:	
  6054                           
  6055                           	psect	text19
  6056  0A68                     __ptext19:	
  6057 ;; *************** function _Sw_DimmerOnFunc *****************
  6058 ;; Defined at:
  6059 ;;		line 241 in file "../src/Switch_B1.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  sw              1    wreg     unsigned char 
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;  sw              1   67[BANK0 ] unsigned char 
  6064 ;;  Idle            1   66[BANK0 ] unsigned char 
  6065 ;; Return value:  Size  Location     Type
  6066 ;;		None               void
  6067 ;; Registers used:
  6068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;Total ram usage:        2 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; Hardware stack levels required when called:    9
  6081 ;; This function calls:
  6082 ;;		_setBuz
  6083 ;;		_setDimmerLights_Switch
  6084 ;;		_setDimmerLights_Trigger
  6085 ;;		_setRFSW_Status
  6086 ;;		_setRF_DimmerLights
  6087 ;;		_setTxData
  6088 ;; This function is called by:
  6089 ;;		_setSw_Main
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           
  6094                           ;psect for function _Sw_DimmerOnFunc
  6095  0A68                     _Sw_DimmerOnFunc:	
  6096                           
  6097                           ;incstack = 0
  6098                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6099                           ;Sw_DimmerOnFunc@sw stored from wreg
  6100  0A68  0020               	movlb	0	; select bank0
  6101  0A69  00E3               	movwf	Sw_DimmerOnFunc@sw
  6102                           
  6103                           ;Switch_B1.c: 242: char Idle = 1;
  6104  0A6A  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6105  0A6B  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6106                           
  6107                           ;Switch_B1.c: 256: if (sw == 1) {
  6108  0A6C  0863               	movf	Sw_DimmerOnFunc@sw,w
  6109  0A6D  3A01               	xorlw	1
  6110  0A6E  1D03               	skipz
  6111  0A6F  2A7A               	goto	l9467
  6112                           
  6113                           ;Switch_B1.c: 257: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6114  0A70  1003               	clrc
  6115  0A71  0022               	movlb	2	; select bank2
  6116  0A72  1DD4               	btfss	(_DimmerLights2^(0+256)+8),3
  6117  0A73  1403               	setc
  6118  0A74  3000               	movlw	0
  6119  0A75  1803               	btfsc	3,0
  6120  0A76  3001               	movlw	1
  6121  0A77  0020               	movlb	0	; select bank0
  6122  0A78  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6123                           
  6124                           ;Switch_B1.c: 258: } else if (sw == 2) {
  6125  0A79  2A87               	goto	l9471
  6126  0A7A                     l9467:	
  6127  0A7A  0863               	movf	Sw_DimmerOnFunc@sw,w
  6128  0A7B  3A02               	xorlw	2
  6129  0A7C  1D03               	skipz
  6130  0A7D  2A87               	goto	l9471
  6131                           
  6132                           ;Switch_B1.c: 259: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6133  0A7E  1003               	clrc
  6134  0A7F  0022               	movlb	2	; select bank2
  6135  0A80  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  6136  0A81  1403               	setc
  6137  0A82  3000               	movlw	0
  6138  0A83  1803               	btfsc	3,0
  6139  0A84  3001               	movlw	1
  6140  0A85  0020               	movlb	0	; select bank0
  6141  0A86  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6142  0A87                     l9471:	
  6143                           
  6144                           ;Switch_B1.c: 260: }
  6145                           ;Switch_B1.c: 263: if (Idle == 1) {
  6146  0A87  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6147  0A88  3A01               	xorlw	1
  6148  0A89  1D03               	skipz
  6149  0A8A  0008               	return
  6150                           
  6151                           ;Switch_B1.c: 264: Sw->Flag = 1;
  6152  0A8B  086C               	movf	_Sw,w
  6153  0A8C  0086               	movwf	6
  6154  0A8D  3001               	movlw	1	; select bank2/3
  6155  0A8E  0087               	movwf	7
  6156  0A8F  1781               	bsf	1,7
  6157                           
  6158                           ;Switch_B1.c: 265: setBuz(1, 100);
  6159  0A90  3064               	movlw	100
  6160  0A91  00A9               	movwf	setBuz@time
  6161  0A92  3000               	movlw	0
  6162  0A93  00AA               	movwf	setBuz@time+1
  6163  0A94  3001               	movlw	1
  6164  0A95  3195  25C9  318A   	fcall	_setBuz
  6165                           
  6166                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  6167  0A98  0020               	movlb	0	; select bank0
  6168  0A99  086C               	movf	_Sw,w
  6169  0A9A  0086               	movwf	6
  6170  0A9B  3001               	movlw	1	; select bank2/3
  6171  0A9C  0087               	movwf	7
  6172  0A9D  1B01               	btfsc	1,6
  6173  0A9E  2AC8               	goto	l9491
  6174                           
  6175                           ;Switch_B1.c: 267: Sw->Status = 1;
  6176  0A9F  086C               	movf	_Sw,w
  6177  0AA0  0086               	movwf	6
  6178  0AA1  3001               	movlw	1	; select bank2/3
  6179  0AA2  0087               	movwf	7
  6180  0AA3  1701               	bsf	1,6
  6181                           
  6182                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  6183  0AA4  01A2               	clrf	setRFSW_Status@command
  6184  0AA5  0AA2               	incf	setRFSW_Status@command,f
  6185  0AA6  0863               	movf	Sw_DimmerOnFunc@sw,w
  6186  0AA7  319B  232C  318A   	fcall	_setRFSW_Status
  6187                           
  6188                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  6189  0AAA  0020               	movlb	0	; select bank0
  6190  0AAB  01A2               	clrf	setDimmerLights_Trigger@command
  6191  0AAC  0AA2               	incf	setDimmerLights_Trigger@command,f
  6192  0AAD  0863               	movf	Sw_DimmerOnFunc@sw,w
  6193  0AAE  319B  2393  318A   	fcall	_setDimmerLights_Trigger
  6194                           
  6195                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  6196  0AB1  0020               	movlb	0	; select bank0
  6197  0AB2  01A2               	clrf	setDimmerLights_Switch@command
  6198  0AB3  0AA2               	incf	setDimmerLights_Switch@command,f
  6199  0AB4  0863               	movf	Sw_DimmerOnFunc@sw,w
  6200  0AB5  319B  2383  318A   	fcall	_setDimmerLights_Switch
  6201                           
  6202                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  6203  0AB8  0020               	movlb	0	; select bank0
  6204  0AB9  086C               	movf	_Sw,w
  6205  0ABA  0086               	movwf	6
  6206  0ABB  3001               	movlw	1	; select bank2/3
  6207  0ABC  0087               	movwf	7
  6208  0ABD  3000               	movlw	0
  6209  0ABE  1B01               	btfsc	1,6
  6210  0ABF  3001               	movlw	1
  6211  0AC0  00DD               	movwf	setRF_DimmerLights@on
  6212  0AC1  0863               	movf	Sw_DimmerOnFunc@sw,w
  6213  0AC2  3189  211C  318A   	fcall	_setRF_DimmerLights
  6214                           
  6215                           ;Switch_B1.c: 274: setTxData();
  6216  0AC5  318F  2743         	fcall	_setTxData
  6217                           
  6218                           ;Switch_B1.c: 276: } else {
  6219  0AC7  0008               	return
  6220  0AC8                     l9491:	
  6221                           
  6222                           ;Switch_B1.c: 277: Sw->Status = 0;
  6223  0AC8  0020               	movlb	0	; select bank0
  6224  0AC9  086C               	movf	_Sw,w
  6225  0ACA  0086               	movwf	6
  6226  0ACB  3001               	movlw	1	; select bank2/3
  6227  0ACC  0087               	movwf	7
  6228  0ACD  1301               	bcf	1,6
  6229                           
  6230                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  6231  0ACE  086C               	movf	_Sw,w
  6232  0ACF  0086               	movwf	6
  6233  0AD0  3001               	movlw	1	; select bank2/3
  6234  0AD1  0087               	movwf	7
  6235  0AD2  3000               	movlw	0
  6236  0AD3  1B01               	btfsc	1,6
  6237  0AD4  3001               	movlw	1
  6238  0AD5  00A2               	movwf	setRFSW_Status@command
  6239  0AD6  0863               	movf	Sw_DimmerOnFunc@sw,w
  6240  0AD7  319B  232C         	fcall	_setRFSW_Status
  6241  0AD9  0008               	return
  6242  0ADA                     __end_of_Sw_DimmerOnFunc:	
  6243                           
  6244                           	psect	text20
  6245  0988                     __ptext20:	
  6246 ;; *************** function _Sw_DimmerOffFunc *****************
  6247 ;; Defined at:
  6248 ;;		line 284 in file "../src/Switch_B1.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  sw              1    wreg     unsigned char 
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;  sw              1   68[BANK0 ] unsigned char 
  6253 ;; Return value:  Size  Location     Type
  6254 ;;		None               void
  6255 ;; Registers used:
  6256 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;Total ram usage:        3 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    9
  6269 ;; This function calls:
  6270 ;;		_setDelayOff_GO
  6271 ;;		_setDimmerLights_AdjGo
  6272 ;;		_setDimmerLights_Switch
  6273 ;;		_setDimmerLights_Trigger
  6274 ;;		_setDimmerLights_TriggerAdj
  6275 ;;		_setRF_DimmerLights
  6276 ;;		_setTxData
  6277 ;; This function is called by:
  6278 ;;		_setSw_Main
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           
  6283                           ;psect for function _Sw_DimmerOffFunc
  6284  0988                     _Sw_DimmerOffFunc:	
  6285                           
  6286                           ;incstack = 0
  6287                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6288                           ;Sw_DimmerOffFunc@sw stored from wreg
  6289  0988  0020               	movlb	0	; select bank0
  6290  0989  00E4               	movwf	Sw_DimmerOffFunc@sw
  6291                           
  6292                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  6293  098A  086C               	movf	_Sw,w
  6294  098B  0086               	movwf	6
  6295  098C  3001               	movlw	1	; select bank2/3
  6296  098D  0087               	movwf	7
  6297  098E  1F81               	btfss	1,7
  6298  098F  0008               	return
  6299                           
  6300                           ;Switch_B1.c: 286: Sw->Flag = 0;
  6301  0990  086C               	movf	_Sw,w
  6302  0991  0086               	movwf	6
  6303  0992  3001               	movlw	1	; select bank2/3
  6304  0993  0087               	movwf	7
  6305  0994  1381               	bcf	1,7
  6306                           
  6307                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  6308  0995  086C               	movf	_Sw,w
  6309  0996  0086               	movwf	6
  6310  0997  3001               	movlw	1	; select bank2/3
  6311  0998  0087               	movwf	7
  6312  0999  1F01               	btfss	1,6
  6313  099A  29D3               	goto	l9535
  6314                           
  6315                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  6316  099B  0A6C               	incf	_Sw,w
  6317  099C  0086               	movwf	6
  6318  099D  3001               	movlw	1	; select bank2/3
  6319  099E  0087               	movwf	7
  6320  099F  1C01               	btfss	1,0
  6321  09A0  0008               	return
  6322                           
  6323                           ;Switch_B1.c: 289: Sw->Adj = 0;
  6324  09A1  0A6C               	incf	_Sw,w
  6325  09A2  0086               	movwf	6
  6326  09A3  3001               	movlw	1	; select bank2/3
  6327  09A4  0087               	movwf	7
  6328  09A5  1001               	bcf	1,0
  6329                           
  6330                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  6331  09A6  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6332  09A7  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6333  09A8  0864               	movf	Sw_DimmerOffFunc@sw,w
  6334  09A9  319B  23C3  3189   	fcall	_setDimmerLights_TriggerAdj
  6335                           
  6336                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  6337  09AC  0020               	movlb	0	; select bank0
  6338  09AD  01A2               	clrf	setDimmerLights_AdjGo@command
  6339  09AE  0864               	movf	Sw_DimmerOffFunc@sw,w
  6340  09AF  319B  23B3  3189   	fcall	_setDimmerLights_AdjGo
  6341                           
  6342                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  6343  09B2  0020               	movlb	0	; select bank0
  6344  09B3  0864               	movf	Sw_DimmerOffFunc@sw,w
  6345  09B4  3E1A               	addlw	26
  6346  09B5  076D               	addwf	_product,w
  6347  09B6  00E2               	movwf	??_Sw_DimmerOffFunc
  6348  09B7  0862               	movf	??_Sw_DimmerOffFunc,w
  6349  09B8  0086               	movwf	6
  6350  09B9  3002               	movlw	2	; select bank4/5
  6351  09BA  0087               	movwf	7
  6352  09BB  0801               	movf	1,w
  6353  09BC  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6354  09BD  086D               	movf	_product,w
  6355  09BE  3E11               	addlw	17
  6356  09BF  0086               	movwf	6
  6357  09C0  3002               	movlw	2	; select bank4/5
  6358  09C1  0087               	movwf	7
  6359  09C2  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6360  09C3  0081               	movwf	1
  6361                           
  6362                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  6363  09C4  086C               	movf	_Sw,w
  6364  09C5  0086               	movwf	6
  6365  09C6  3001               	movlw	1	; select bank2/3
  6366  09C7  0087               	movwf	7
  6367  09C8  3000               	movlw	0
  6368  09C9  1B01               	btfsc	1,6
  6369  09CA  3001               	movlw	1
  6370  09CB  00DD               	movwf	setRF_DimmerLights@on
  6371  09CC  0864               	movf	Sw_DimmerOffFunc@sw,w
  6372  09CD  3189  211C  3189   	fcall	_setRF_DimmerLights
  6373                           
  6374                           ;Switch_B1.c: 295: setTxData();
  6375  09D0  318F  2743         	fcall	_setTxData
  6376                           
  6377                           ;Switch_B1.c: 297: }
  6378                           ;Switch_B1.c: 298: } else {
  6379  09D2  0008               	return
  6380  09D3                     l9535:	
  6381                           
  6382                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  6383  09D3  0020               	movlb	0	; select bank0
  6384  09D4  01A2               	clrf	setDimmerLights_Trigger@command
  6385  09D5  0AA2               	incf	setDimmerLights_Trigger@command,f
  6386  09D6  0864               	movf	Sw_DimmerOffFunc@sw,w
  6387  09D7  319B  2393  3189   	fcall	_setDimmerLights_Trigger
  6388                           
  6389                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  6390  09DA  0020               	movlb	0	; select bank0
  6391  09DB  01A2               	clrf	setDimmerLights_Switch@command
  6392  09DC  0864               	movf	Sw_DimmerOffFunc@sw,w
  6393  09DD  319B  2383  3189   	fcall	_setDimmerLights_Switch
  6394                           
  6395                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  6396  09E0  0020               	movlb	0	; select bank0
  6397  09E1  01AA               	clrf	setDelayOff_GO@command
  6398  09E2  01AB               	clrf	setDelayOff_GO@value
  6399  09E3  0864               	movf	Sw_DimmerOffFunc@sw,w
  6400  09E4  3196  26DB  3189   	fcall	_setDelayOff_GO
  6401                           
  6402                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  6403  09E7  0020               	movlb	0	; select bank0
  6404  09E8  086C               	movf	_Sw,w
  6405  09E9  0086               	movwf	6
  6406  09EA  3001               	movlw	1	; select bank2/3
  6407  09EB  0087               	movwf	7
  6408  09EC  3000               	movlw	0
  6409  09ED  1B01               	btfsc	1,6
  6410  09EE  3001               	movlw	1
  6411  09EF  00DD               	movwf	setRF_DimmerLights@on
  6412  09F0  0864               	movf	Sw_DimmerOffFunc@sw,w
  6413  09F1  3189  211C  3189   	fcall	_setRF_DimmerLights
  6414                           
  6415                           ;Switch_B1.c: 304: setTxData();
  6416  09F4  318F  2743         	fcall	_setTxData
  6417  09F6  0008               	return
  6418  09F7                     __end_of_Sw_DimmerOffFunc:	
  6419                           
  6420                           	psect	text21
  6421  147C                     __ptext21:	
  6422 ;; *************** function _Sw_DimmerAdjFunc *****************
  6423 ;; Defined at:
  6424 ;;		line 311 in file "../src/Switch_B1.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  sw              1    wreg     unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  sw              1    5[BANK0 ] unsigned char 
  6429 ;;  Idle            1    4[BANK0 ] unsigned char 
  6430 ;; Return value:  Size  Location     Type
  6431 ;;		None               void
  6432 ;; Registers used:
  6433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6442 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6443 ;;Total ram usage:        2 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    7
  6446 ;; This function calls:
  6447 ;;		_setDimmerLights_AdjGo
  6448 ;;		_setDimmerLights_TriggerAdj
  6449 ;;		_setRFSW_Status
  6450 ;; This function is called by:
  6451 ;;		_setSw_Main
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           
  6456                           ;psect for function _Sw_DimmerAdjFunc
  6457  147C                     _Sw_DimmerAdjFunc:	
  6458                           
  6459                           ;incstack = 0
  6460                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6461                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6462  147C  0020               	movlb	0	; select bank0
  6463  147D  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6464                           
  6465                           ;Switch_B1.c: 312: char Idle = 1;
  6466  147E  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6467  147F  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6468                           
  6469                           ;Switch_B1.c: 325: if (sw == 1) {
  6470  1480  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6471  1481  3A01               	xorlw	1
  6472  1482  1D03               	skipz
  6473  1483  2C8E               	goto	l9501
  6474                           
  6475                           ;Switch_B1.c: 326: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6476  1484  1003               	clrc
  6477  1485  0022               	movlb	2	; select bank2
  6478  1486  1DD4               	btfss	(_DimmerLights2^(0+256)+8),3
  6479  1487  1403               	setc
  6480  1488  3000               	movlw	0
  6481  1489  1803               	btfsc	3,0
  6482  148A  3001               	movlw	1
  6483  148B  0020               	movlb	0	; select bank0
  6484  148C  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6485                           
  6486                           ;Switch_B1.c: 327: } else if (sw == 2) {
  6487  148D  2C9B               	goto	l9505
  6488  148E                     l9501:	
  6489  148E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6490  148F  3A02               	xorlw	2
  6491  1490  1D03               	skipz
  6492  1491  2C9B               	goto	l9505
  6493                           
  6494                           ;Switch_B1.c: 328: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6495  1492  1003               	clrc
  6496  1493  0022               	movlb	2	; select bank2
  6497  1494  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  6498  1495  1403               	setc
  6499  1496  3000               	movlw	0
  6500  1497  1803               	btfsc	3,0
  6501  1498  3001               	movlw	1
  6502  1499  0020               	movlb	0	; select bank0
  6503  149A  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6504  149B                     l9505:	
  6505                           
  6506                           ;Switch_B1.c: 329: }
  6507                           ;Switch_B1.c: 332: if (Idle == 1) {
  6508  149B  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6509  149C  3A01               	xorlw	1
  6510  149D  1D03               	skipz
  6511  149E  0008               	return
  6512                           
  6513                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  6514  149F  086C               	movf	_Sw,w
  6515  14A0  0086               	movwf	6
  6516  14A1  3001               	movlw	1	; select bank2/3
  6517  14A2  0087               	movwf	7
  6518  14A3  1F81               	btfss	1,7
  6519  14A4  0008               	return
  6520                           
  6521                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  6522  14A5  086C               	movf	_Sw,w
  6523  14A6  0086               	movwf	6
  6524  14A7  3001               	movlw	1	; select bank2/3
  6525  14A8  0087               	movwf	7
  6526  14A9  1581               	bsf	1,3
  6527                           
  6528                           ;Switch_B1.c: 335: Sw->Adj = 1;
  6529  14AA  0A6C               	incf	_Sw,w
  6530  14AB  0086               	movwf	6
  6531  14AC  3001               	movlw	1	; select bank2/3
  6532  14AD  0087               	movwf	7
  6533  14AE  1401               	bsf	1,0
  6534                           
  6535                           ;Switch_B1.c: 336: Sw->Status = 1;
  6536  14AF  086C               	movf	_Sw,w
  6537  14B0  0086               	movwf	6
  6538  14B1  3001               	movlw	1	; select bank2/3
  6539  14B2  0087               	movwf	7
  6540  14B3  1701               	bsf	1,6
  6541                           
  6542                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  6543  14B4  01A2               	clrf	setRFSW_Status@command
  6544  14B5  0AA2               	incf	setRFSW_Status@command,f
  6545  14B6  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6546  14B7  319B  232C  3194   	fcall	_setRFSW_Status
  6547                           
  6548                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6549  14BA  0020               	movlb	0	; select bank0
  6550  14BB  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6551  14BC  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6552  14BD  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6553  14BE  319B  23C3  3194   	fcall	_setDimmerLights_TriggerAdj
  6554                           
  6555                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6556  14C1  0020               	movlb	0	; select bank0
  6557  14C2  01A2               	clrf	setDimmerLights_AdjGo@command
  6558  14C3  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6559  14C4  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6560  14C5  319B  23B3         	fcall	_setDimmerLights_AdjGo
  6561  14C7  0008               	return
  6562  14C8                     __end_of_Sw_DimmerAdjFunc:	
  6563                           
  6564                           	psect	text22
  6565  1BC3                     __ptext22:	
  6566 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6567 ;; Defined at:
  6568 ;;		line 720 in file "../src/Dimmer_B1.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;  lights          1    wreg     unsigned char 
  6571 ;;  command         1    2[BANK0 ] unsigned char 
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;  lights          1    3[BANK0 ] unsigned char 
  6574 ;; Return value:  Size  Location     Type
  6575 ;;		None               void
  6576 ;; Registers used:
  6577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6583 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;Total ram usage:        2 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; Hardware stack levels required when called:    6
  6590 ;; This function calls:
  6591 ;;		_DimmerLightsPointSelect
  6592 ;; This function is called by:
  6593 ;;		_Sw_DimmerOffFunc
  6594 ;;		_Sw_DimmerAdjFunc
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           
  6599                           ;psect for function _setDimmerLights_TriggerAdj
  6600  1BC3                     _setDimmerLights_TriggerAdj:	
  6601                           
  6602                           ;incstack = 0
  6603                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6604                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6605  1BC3  0020               	movlb	0	; select bank0
  6606  1BC4  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6607                           
  6608                           ;Dimmer_B1.c: 722: DimmerLightsPointSelect(lights);
  6609  1BC5  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6610  1BC6  319C  244E         	fcall	_DimmerLightsPointSelect
  6611                           
  6612                           ;Dimmer_B1.c: 723: DimmerLights->TriggerAdj = command;
  6613  1BC8  0020               	movlb	0	; select bank0
  6614  1BC9  086B               	movf	_DimmerLights,w
  6615  1BCA  3E08               	addlw	8
  6616  1BCB  0086               	movwf	6
  6617  1BCC  3001               	movlw	1	; select bank2/3
  6618  1BCD  0087               	movwf	7
  6619  1BCE  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6620  1BCF  1201               	bcf	1,4
  6621  1BD0  1D03               	skipz
  6622  1BD1  1601               	bsf	1,4
  6623  1BD2  0008               	return
  6624  1BD3                     __end_of_setDimmerLights_TriggerAdj:	
  6625                           
  6626                           	psect	text23
  6627  1BB3                     __ptext23:	
  6628 ;; *************** function _setDimmerLights_AdjGo *****************
  6629 ;; Defined at:
  6630 ;;		line 708 in file "../src/Dimmer_B1.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;  lights          1    wreg     unsigned char 
  6633 ;;  command         1    2[BANK0 ] unsigned char 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;  lights          1    3[BANK0 ] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;		None               void
  6638 ;; Registers used:
  6639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6645 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;Total ram usage:        2 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    6
  6652 ;; This function calls:
  6653 ;;		_DimmerLightsPointSelect
  6654 ;; This function is called by:
  6655 ;;		_Sw_DimmerOffFunc
  6656 ;;		_Sw_DimmerAdjFunc
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           
  6661                           ;psect for function _setDimmerLights_AdjGo
  6662  1BB3                     _setDimmerLights_AdjGo:	
  6663                           
  6664                           ;incstack = 0
  6665                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6666                           ;setDimmerLights_AdjGo@lights stored from wreg
  6667  1BB3  0020               	movlb	0	; select bank0
  6668  1BB4  00A3               	movwf	setDimmerLights_AdjGo@lights
  6669                           
  6670                           ;Dimmer_B1.c: 710: DimmerLightsPointSelect(lights);
  6671  1BB5  0823               	movf	setDimmerLights_AdjGo@lights,w
  6672  1BB6  319C  244E         	fcall	_DimmerLightsPointSelect
  6673                           
  6674                           ;Dimmer_B1.c: 711: DimmerLights->AdjGo = command;
  6675  1BB8  0020               	movlb	0	; select bank0
  6676  1BB9  086B               	movf	_DimmerLights,w
  6677  1BBA  3E08               	addlw	8
  6678  1BBB  0086               	movwf	6
  6679  1BBC  3001               	movlw	1	; select bank2/3
  6680  1BBD  0087               	movwf	7
  6681  1BBE  0822               	movf	setDimmerLights_AdjGo@command,w
  6682  1BBF  1181               	bcf	1,3
  6683  1BC0  1D03               	skipz
  6684  1BC1  1581               	bsf	1,3
  6685  1BC2  0008               	return
  6686  1BC3                     __end_of_setDimmerLights_AdjGo:	
  6687                           
  6688                           	psect	text24
  6689  1B1F                     __ptext24:	
  6690 ;; *************** function _Switch_Initialization *****************
  6691 ;; Defined at:
  6692 ;;		line 41 in file "../src/Switch_B1.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;		None               void
  6699 ;; Registers used:
  6700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;Total ram usage:        0 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    8
  6713 ;; This function calls:
  6714 ;;		_TouchPower
  6715 ;;		_setSw_Initialization
  6716 ;; This function is called by:
  6717 ;;		_main
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           
  6722                           ;psect for function _Switch_Initialization
  6723  1B1F                     _Switch_Initialization:	
  6724                           
  6725                           ;Switch_B1.c: 42: TouchPower();
  6726                           
  6727                           ;incstack = 0
  6728                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6729  1B1F  319B  2365  319B   	fcall	_TouchPower
  6730                           
  6731                           ;Switch_B1.c: 44: WPUB1 = 0;
  6732  1B22  0024               	movlb	4	; select bank4
  6733  1B23  108D               	bcf	13,1	;volatile
  6734                           
  6735                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6736  1B24  3001               	movlw	1
  6737  1B25  319A  226F  319B   	fcall	_setSw_Initialization
  6738                           
  6739                           ;Switch_B1.c: 57: setSw_Initialization(2);
  6740  1B28  3002               	movlw	2
  6741  1B29  319A  226F         	fcall	_setSw_Initialization
  6742  1B2B  0008               	return
  6743  1B2C                     __end_of_Switch_Initialization:	
  6744                           
  6745                           	psect	text25
  6746  1A6F                     __ptext25:	
  6747 ;; *************** function _setSw_Initialization *****************
  6748 ;; Defined at:
  6749 ;;		line 83 in file "../src/Switch_B1.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;  sw              1    wreg     unsigned char 
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;  sw              1    4[BANK0 ] unsigned char 
  6754 ;; Return value:  Size  Location     Type
  6755 ;;		None               void
  6756 ;; Registers used:
  6757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;Total ram usage:        1 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    7
  6770 ;; This function calls:
  6771 ;;		_setLED
  6772 ;; This function is called by:
  6773 ;;		_Switch_Initialization
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function _setSw_Initialization
  6779  1A6F                     _setSw_Initialization:	
  6780                           
  6781                           ;incstack = 0
  6782                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6783                           ;setSw_Initialization@sw stored from wreg
  6784  1A6F  0020               	movlb	0	; select bank0
  6785  1A70  00A4               	movwf	setSw_Initialization@sw
  6786                           
  6787                           ;Switch_B1.c: 84: setLED(sw, 1);
  6788  1A71  01A2               	clrf	setLED@command
  6789  1A72  0AA2               	incf	setLED@command,f
  6790  1A73  0824               	movf	setSw_Initialization@sw,w
  6791  1A74  3196  267D         	fcall	_setLED
  6792  1A76  0008               	return
  6793  1A77                     __end_of_setSw_Initialization:	
  6794                           
  6795                           	psect	text26
  6796  1B65                     __ptext26:	
  6797 ;; *************** function _TouchPower *****************
  6798 ;; Defined at:
  6799 ;;		line 10 in file "../src/Switch_B1.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;		None
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;		None
  6804 ;; Return value:  Size  Location     Type
  6805 ;;		None               void
  6806 ;; Registers used:
  6807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6817 ;;Total ram usage:        0 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    6
  6820 ;; This function calls:
  6821 ;;		_Timeout_Counter
  6822 ;;		_set_TimeoutCleared
  6823 ;; This function is called by:
  6824 ;;		_Switch_Initialization
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           
  6829                           ;psect for function _TouchPower
  6830  1B65                     _TouchPower:	
  6831                           
  6832                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6833                           
  6834                           ;incstack = 0
  6835                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6836  1B65  2B6B               	goto	l10031
  6837  1B66                     l2690:	
  6838                           
  6839                           ;Switch_B1.c: 12: RC5 = 1;
  6840  1B66  0020               	movlb	0	; select bank0
  6841  1B67  168E               	bsf	14,5	;volatile
  6842                           
  6843                           ;Switch_B1.c: 13: Timeout_Counter();
  6844  1B68  319C  24C4  319B   	fcall	_Timeout_Counter
  6845  1B6B                     l10031:	
  6846  1B6B  0020               	movlb	0	; select bank0
  6847  1B6C  1A8E               	btfsc	14,5	;volatile
  6848  1B6D  2B71               	goto	l10035
  6849  1B6E  0021               	movlb	1	; select bank1
  6850  1B6F  1D2F               	btfss	(_myMain^(0+128)+15),2
  6851  1B70  2B66               	goto	l2690
  6852  1B71                     l10035:	
  6853                           
  6854                           ;Switch_B1.c: 14: }
  6855                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6856  1B71  319A  221C         	fcall	_set_TimeoutCleared
  6857  1B73  0008               	return
  6858  1B74                     __end_of_TouchPower:	
  6859                           
  6860                           	psect	text27
  6861  1A00                     __ptext27:	
  6862 ;; *************** function _RF_Main *****************
  6863 ;; Defined at:
  6864 ;;		line 16 in file "../src/RF_Control_B1.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;		None
  6867 ;; Auto vars:     Size  Location     Type
  6868 ;;		None
  6869 ;; Return value:  Size  Location     Type
  6870 ;;		None               void
  6871 ;; Registers used:
  6872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6873 ;; Tracked objects:
  6874 ;;		On entry : 0/0
  6875 ;;		On exit  : 0/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6882 ;;Total ram usage:        0 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:   14
  6885 ;; This function calls:
  6886 ;;		_setRF_Main
  6887 ;; This function is called by:
  6888 ;;		_main
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           
  6893                           ;psect for function _RF_Main
  6894  1A00                     _RF_Main:	
  6895                           
  6896                           ;RF_Control_B1.c: 18: setRF_Main();
  6897                           
  6898                           ;incstack = 0
  6899                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6900  1A00  3185  25BC         	fcall	_setRF_Main
  6901  1A02  0008               	return
  6902  1A03                     __end_of_RF_Main:	
  6903                           
  6904                           	psect	text28
  6905  05BC                     __ptext28:	
  6906 ;; *************** function _setRF_Main *****************
  6907 ;; Defined at:
  6908 ;;		line 52 in file "../src/RF_Control_B1.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;		None
  6911 ;; Auto vars:     Size  Location     Type
  6912 ;;  Receive_OK      1    0        unsigned char 
  6913 ;;  loop_f          1    0        unsigned char 
  6914 ;; Return value:  Size  Location     Type
  6915 ;;		None               void
  6916 ;; Registers used:
  6917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6918 ;; Tracked objects:
  6919 ;;		On entry : 0/0
  6920 ;;		On exit  : 0/0
  6921 ;;		Unchanged: 0/0
  6922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6925 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;Total ram usage:        2 bytes
  6928 ;; Hardware stack levels used:    1
  6929 ;; Hardware stack levels required when called:   13
  6930 ;; This function calls:
  6931 ;;		_CC2500_ReadStatus
  6932 ;;		_CC2500_RxData
  6933 ;;		_CC2500_TxData
  6934 ;;		_CC2500_WriteCommand
  6935 ;;		_getBuz_GO
  6936 ;;		_getRxData
  6937 ;; This function is called by:
  6938 ;;		_RF_Main
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           
  6943                           ;psect for function _setRF_Main
  6944  05BC                     _setRF_Main:	
  6945                           
  6946                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  6947                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6948                           
  6949                           ;incstack = 0
  6950                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6951  05BC  0021               	movlb	1	; select bank1
  6952  05BD  1C3E               	btfss	_RF1^(0+128),0
  6953  05BE  0008               	return
  6954                           
  6955                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6956  05BF  319B  23F5  3185   	fcall	_getBuz_GO
  6957  05C2  0020               	movlb	0	; select bank0
  6958  05C3  0821               	movf	?_getBuz_GO+1,w
  6959  05C4  0420               	iorwf	?_getBuz_GO,w
  6960  05C5  1D03               	skipz
  6961  05C6  0008               	return
  6962                           
  6963                           ;RF_Control_B1.c: 64: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6964  05C7  01E8               	clrf	_setRF_Main$5902
  6965  05C8  0AE8               	incf	_setRF_Main$5902,f
  6966  05C9  1F0C               	btfss	12,6	;volatile
  6967  05CA  1A0C               	btfsc	12,4	;volatile
  6968  05CB  2DD0               	goto	l9929
  6969  05CC  1C0C               	btfss	12,0	;volatile
  6970  05CD  188D               	btfsc	13,1	;volatile
  6971  05CE  2DD0               	goto	l9929
  6972  05CF  01E8               	clrf	_setRF_Main$5902
  6973  05D0                     l9929:	
  6974  05D0  0868               	movf	_setRF_Main$5902,w
  6975  05D1  0021               	movlb	1	; select bank1
  6976  05D2  13BE               	bcf	_RF1^(0+128),7
  6977  05D3  1D03               	skipz
  6978  05D4  17BE               	bsf	_RF1^(0+128),7
  6979                           
  6980                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  6981  05D5  1BBE               	btfsc	_RF1^(0+128),7
  6982  05D6  1B3E               	btfsc	_RF1^(0+128),6
  6983  05D7  2DDD               	goto	l2265
  6984                           
  6985                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  6986  05D8  01C0               	clrf	(_RF1^(0+128)+2)
  6987  05D9  01C1               	clrf	((_RF1+1)^(0+128)+2)
  6988                           
  6989                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  6990  05DA  14BF               	bsf	(_RF1^(0+128)+1),1
  6991                           
  6992                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  6993  05DB  11BE               	bcf	_RF1^(0+128),3
  6994                           
  6995                           ;RF_Control_B1.c: 76: } else {
  6996  05DC  0008               	return
  6997  05DD                     l2265:	
  6998                           
  6999                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  7000  05DD  18BF               	btfsc	(_RF1^(0+128)+1),1
  7001  05DE  1B3E               	btfsc	_RF1^(0+128),6
  7002  05DF  2DF4               	goto	l9951
  7003                           
  7004                           ;RF_Control_B1.c: 78: RF1.Count++;
  7005  05E0  3001               	movlw	1
  7006  05E1  07C0               	addwf	(_RF1^(0+128)+2),f
  7007  05E2  3000               	movlw	0
  7008  05E3  3DC1               	addwfc	((_RF1+1)^(0+128)+2),f
  7009                           
  7010                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  7011  05E4  3002               	movlw	2
  7012  05E5  3EBE               	addlw	_RF1& (0+255)
  7013  05E6  0086               	movwf	6
  7014  05E7  0187               	clrf	7
  7015  05E8  3F40               	moviw [0]fsr1
  7016  05E9  0645               	xorwf	(_RF1^(0+128)+7),w
  7017  05EA  1D03               	skipz
  7018  05EB  2DEE               	goto	u10475
  7019  05EC  3F41               	moviw [1]fsr1
  7020  05ED  0646               	xorwf	((_RF1+1)^(0+128)+7),w
  7021  05EE                     u10475:	
  7022  05EE  1D03               	skipz
  7023  05EF  2E66               	goto	l10005
  7024                           
  7025                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  7026  05F0  01C0               	clrf	(_RF1^(0+128)+2)
  7027  05F1  01C1               	clrf	((_RF1+1)^(0+128)+2)
  7028                           
  7029                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  7030  05F2  10BF               	bcf	(_RF1^(0+128)+1),1
  7031                           
  7032                           ;RF_Control_B1.c: 82: }
  7033                           ;RF_Control_B1.c: 83: } else {
  7034  05F3  2E66               	goto	l10005
  7035  05F4                     l9951:	
  7036                           
  7037                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  7038  05F4  01C0               	clrf	(_RF1^(0+128)+2)
  7039  05F5  01C1               	clrf	((_RF1+1)^(0+128)+2)
  7040                           
  7041                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  7042  05F6  10BF               	bcf	(_RF1^(0+128)+1),1
  7043                           
  7044                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  7045  05F7  193E               	btfsc	_RF1^(0+128),2
  7046  05F8  1B3E               	btfsc	_RF1^(0+128),6
  7047  05F9  2E15               	goto	l2270
  7048                           
  7049                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  7050  05FA  113E               	bcf	_RF1^(0+128),2
  7051                           
  7052                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  7053  05FB  11BE               	bcf	_RF1^(0+128),3
  7054                           
  7055                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  7056  05FC  10BE               	bcf	_RF1^(0+128),1
  7057                           
  7058                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  7059  05FD  303B               	movlw	59
  7060  05FE  319E  26CC  3185   	fcall	_CC2500_ReadStatus
  7061                           
  7062                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  7063  0601  0021               	movlb	1	; select bank1
  7064  0602  0857               	movf	_s_data^(0+128),w
  7065  0603  1903               	btfsc	3,2
  7066  0604  2E11               	goto	l2271
  7067                           
  7068                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  7069  0605  3036               	movlw	54
  7070  0606  319D  254A  3185   	fcall	_CC2500_WriteCommand
  7071                           
  7072                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  7073  0609  303B               	movlw	59
  7074  060A  319D  254A  3185   	fcall	_CC2500_WriteCommand
  7075                           
  7076                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  7077  060D  303A               	movlw	58
  7078  060E  319D  254A  3185   	fcall	_CC2500_WriteCommand
  7079  0611                     l2271:	
  7080                           
  7081                           ;RF_Control_B1.c: 97: }
  7082                           ;RF_Control_B1.c: 98: CC2500_TxData();
  7083  0611  3197  279B  3185   	fcall	_CC2500_TxData
  7084                           
  7085                           ;RF_Control_B1.c: 100: } else {
  7086  0614  2E66               	goto	l10005
  7087  0615                     l2270:	
  7088                           
  7089                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  7090  0615  1DBE               	btfss	_RF1^(0+128),3
  7091  0616  2E51               	goto	l2273
  7092                           
  7093                           ;RF_Control_B1.c: 103: CC2500_RxData();
  7094  0617  3189  21F7  3185   	fcall	_CC2500_RxData
  7095                           
  7096                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  7097  061A  0021               	movlb	1	; select bank1
  7098  061B  1CBE               	btfss	_RF1^(0+128),1
  7099  061C  2E66               	goto	l10005
  7100                           
  7101                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  7102  061D  10BE               	bcf	_RF1^(0+128),1
  7103                           
  7104                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  7105  061E  12BF               	bcf	(_RF1^(0+128)+1),5
  7106                           
  7107                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  7108  061F  01C8               	clrf	(_RF1^(0+128)+10)
  7109  0620  01C9               	clrf	((_RF1+1)^(0+128)+10)
  7110                           
  7111                           ;RF_Control_B1.c: 116: getRxData();
  7112  0621  3188  2048  3185   	fcall	_getRxData
  7113                           
  7114                           ;RF_Control_B1.c: 117: RB5 = RB5 == 1 ? 0 : 1;
  7115  0624  3020               	movlw	32
  7116  0625  0020               	movlb	0	; select bank0
  7117  0626  068D               	xorwf	13,f
  7118                           
  7119                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  7120  0627  0021               	movlb	1	; select bank1
  7121  0628  14BF               	bsf	(_RF1^(0+128)+1),1
  7122                           
  7123                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  7124  0629  1DBF               	btfss	(_RF1^(0+128)+1),3
  7125  062A  2E38               	goto	l9989
  7126                           
  7127                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 20) {
  7128  062B  3000               	movlw	0
  7129  062C  0246               	subwf	((_RF1+1)^(0+128)+7),w
  7130  062D  3015               	movlw	21
  7131  062E  1903               	skipnz
  7132  062F  0245               	subwf	(_RF1^(0+128)+7),w
  7133  0630  1C03               	skipc
  7134  0631  2E36               	goto	l9987
  7135                           
  7136                           ;RF_Control_B1.c: 124: RF1.RunTime = 20;
  7137  0632  3014               	movlw	20
  7138  0633  00C5               	movwf	(_RF1^(0+128)+7)
  7139  0634  3000               	movlw	0
  7140  0635  00C6               	movwf	(_RF1^(0+128)+8)
  7141  0636                     l9987:	
  7142                           
  7143                           ;RF_Control_B1.c: 125: }
  7144                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  7145  0636  01C2               	clrf	(_RF1^(0+128)+4)
  7146                           
  7147                           ;RF_Control_B1.c: 127: } else {
  7148  0637  2E66               	goto	l10005
  7149  0638                     l9989:	
  7150                           
  7151                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  7152  0638  3001               	movlw	1
  7153  0639  0020               	movlb	0	; select bank0
  7154  063A  00E7               	movwf	??_setRF_Main
  7155  063B  0867               	movf	??_setRF_Main,w
  7156  063C  0021               	movlb	1	; select bank1
  7157  063D  07C2               	addwf	(_RF1^(0+128)+4),f
  7158                           
  7159                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  7160  063E  0842               	movf	(_RF1^(0+128)+4),w
  7161  063F  3A02               	xorlw	2
  7162  0640  1D03               	skipz
  7163  0641  2E66               	goto	l10005
  7164                           
  7165                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  7166  0642  01C2               	clrf	(_RF1^(0+128)+4)
  7167                           
  7168                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  7169  0643  01C3               	clrf	(_RF1^(0+128)+5)
  7170  0644  01C4               	clrf	((_RF1+1)^(0+128)+5)
  7171                           
  7172                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 300) {
  7173  0645  3001               	movlw	1
  7174  0646  0246               	subwf	((_RF1+1)^(0+128)+7),w
  7175  0647  302C               	movlw	44
  7176  0648  1903               	skipnz
  7177  0649  0245               	subwf	(_RF1^(0+128)+7),w
  7178  064A  1803               	skipnc
  7179  064B  2E66               	goto	l10005
  7180                           
  7181                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  7182  064C  300A               	movlw	10
  7183  064D  07C5               	addwf	(_RF1^(0+128)+7),f
  7184  064E  3000               	movlw	0
  7185  064F  3DC6               	addwfc	((_RF1+1)^(0+128)+7),f
  7186                           
  7187                           ;RF_Control_B1.c: 134: }
  7188                           ;RF_Control_B1.c: 135: }
  7189                           ;RF_Control_B1.c: 136: }
  7190                           ;RF_Control_B1.c: 137: }
  7191                           ;RF_Control_B1.c: 138: } else {
  7192  0650  2E66               	goto	l10005
  7193  0651                     l2273:	
  7194                           
  7195                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7196  0651  1DBE               	btfss	_RF1^(0+128),3
  7197  0652  18BE               	btfsc	_RF1^(0+128),1
  7198  0653  2E66               	goto	l10005
  7199                           
  7200                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  7201  0654  15BE               	bsf	_RF1^(0+128),3
  7202                           
  7203                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  7204  0655  16BF               	bsf	(_RF1^(0+128)+1),5
  7205                           
  7206                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  7207  0656  3036               	movlw	54
  7208  0657  319D  254A  3185   	fcall	_CC2500_WriteCommand
  7209                           
  7210                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  7211  065A  303B               	movlw	59
  7212  065B  319D  254A  3185   	fcall	_CC2500_WriteCommand
  7213                           
  7214                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  7215  065E  303A               	movlw	58
  7216  065F  319D  254A  3185   	fcall	_CC2500_WriteCommand
  7217                           
  7218                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  7219  0662  3034               	movlw	52
  7220  0663  319D  254A  3185   	fcall	_CC2500_WriteCommand
  7221  0666                     l10005:	
  7222                           
  7223                           ;RF_Control_B1.c: 149: }
  7224                           ;RF_Control_B1.c: 151: }
  7225                           ;RF_Control_B1.c: 152: }
  7226                           ;RF_Control_B1.c: 153: }
  7227                           ;RF_Control_B1.c: 154: if (RF1.RxStatus == 1) {
  7228  0666  0021               	movlb	1	; select bank1
  7229  0667  1DBE               	btfss	_RF1^(0+128),3
  7230  0668  2E87               	goto	l10017
  7231                           
  7232                           ;RF_Control_B1.c: 155: RF1.CheckedCounter++;
  7233  0669  3001               	movlw	1
  7234  066A  07C3               	addwf	(_RF1^(0+128)+5),f
  7235  066B  3000               	movlw	0
  7236  066C  3DC4               	addwfc	((_RF1+1)^(0+128)+5),f
  7237                           
  7238                           ;RF_Control_B1.c: 156: if (RF1.CheckedCounter == 100) {
  7239  066D  3005               	movlw	5
  7240  066E  3EBE               	addlw	_RF1& (0+255)
  7241  066F  0086               	movwf	6
  7242  0670  0187               	clrf	7
  7243  0671  3F40               	moviw [0]fsr1
  7244  0672  3A64               	xorlw	100
  7245  0673  1D03               	skipz
  7246  0674  2E77               	goto	u10605
  7247  0675  3F41               	moviw [1]fsr1
  7248  0676  3A00               	xorlw	0
  7249  0677                     u10605:	
  7250  0677  1D03               	skipz
  7251  0678  2E87               	goto	l10017
  7252                           
  7253                           ;RF_Control_B1.c: 157: RF1.CheckedCounter = 0;
  7254  0679  01C3               	clrf	(_RF1^(0+128)+5)
  7255  067A  01C4               	clrf	((_RF1+1)^(0+128)+5)
  7256                           
  7257                           ;RF_Control_B1.c: 158: RF1.CheckCount = 0;
  7258  067B  01C2               	clrf	(_RF1^(0+128)+4)
  7259                           
  7260                           ;RF_Control_B1.c: 159: if (RF1.RunTime > 20) {
  7261  067C  3000               	movlw	0
  7262  067D  0246               	subwf	((_RF1+1)^(0+128)+7),w
  7263  067E  3015               	movlw	21
  7264  067F  1903               	skipnz
  7265  0680  0245               	subwf	(_RF1^(0+128)+7),w
  7266  0681  1C03               	skipc
  7267  0682  2E87               	goto	l10017
  7268                           
  7269                           ;RF_Control_B1.c: 160: RF1.RunTime -= 10;
  7270  0683  300A               	movlw	10
  7271  0684  02C5               	subwf	(_RF1^(0+128)+7),f
  7272  0685  3000               	movlw	0
  7273  0686  3BC6               	subwfb	((_RF1+1)^(0+128)+7),f
  7274  0687                     l10017:	
  7275                           
  7276                           ;RF_Control_B1.c: 161: }
  7277                           ;RF_Control_B1.c: 162: }
  7278                           ;RF_Control_B1.c: 163: }
  7279                           ;RF_Control_B1.c: 164: if (RF1.Correction == 1) {
  7280  0687  1EBF               	btfss	(_RF1^(0+128)+1),5
  7281  0688  0008               	return
  7282                           
  7283                           ;RF_Control_B1.c: 165: RF1.CorrectionCounter++;
  7284  0689  3001               	movlw	1
  7285  068A  07C8               	addwf	(_RF1^(0+128)+10),f
  7286  068B  3000               	movlw	0
  7287  068C  3DC9               	addwfc	((_RF1+1)^(0+128)+10),f
  7288                           
  7289                           ;RF_Control_B1.c: 166: if (RF1.CorrectionCounter >= 30000) {
  7290  068D  3075               	movlw	117
  7291  068E  0249               	subwf	((_RF1+1)^(0+128)+10),w
  7292  068F  3030               	movlw	48
  7293  0690  1903               	skipnz
  7294  0691  0248               	subwf	(_RF1^(0+128)+10),w
  7295  0692  1C03               	skipc
  7296  0693  0008               	return
  7297                           
  7298                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter = 0;
  7299  0694  01C8               	clrf	(_RF1^(0+128)+10)
  7300  0695  01C9               	clrf	((_RF1+1)^(0+128)+10)
  7301                           
  7302                           ;RF_Control_B1.c: 168: RF1.RxStatus = 0;
  7303  0696  11BE               	bcf	_RF1^(0+128),3
  7304                           
  7305                           ;RF_Control_B1.c: 169: RF1.ReceiveGO = 0;
  7306  0697  10BE               	bcf	_RF1^(0+128),1
  7307  0698  0008               	return
  7308  0699                     __end_of_setRF_Main:	
  7309                           
  7310                           	psect	text29
  7311  0848                     __ptext29:	
  7312 ;; *************** function _getRxData *****************
  7313 ;; Defined at:
  7314 ;;		line 252 in file "../src/RF_Control_B1.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;		None
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;		None
  7319 ;; Return value:  Size  Location     Type
  7320 ;;		None               void
  7321 ;; Registers used:
  7322 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;Total ram usage:        0 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; Hardware stack levels required when called:   12
  7335 ;; This function calls:
  7336 ;;		_setControl_Lights_Table
  7337 ;;		_setLog_Code
  7338 ;; This function is called by:
  7339 ;;		_setRF_Main
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           
  7344                           ;psect for function _getRxData
  7345  0848                     _getRxData:	
  7346                           
  7347                           ;RF_Control_B1.c: 253: if (RF1.Learn == 1) {
  7348                           
  7349                           ;incstack = 0
  7350                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7351  0848  0021               	movlb	1	; select bank1
  7352  0849  1F3E               	btfss	_RF1^(0+128),6
  7353  084A  285B               	goto	l9427
  7354                           
  7355                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7356  084B  0022               	movlb	2	; select bank2
  7357  084C  08A0               	movf	_RF_Data^(0+256),f
  7358  084D  1D03               	skipz
  7359  084E  2858               	goto	l2304
  7360  084F  0821               	movf	(_RF_Data^(0+256)+1),w
  7361  0850  3A64               	xorlw	100
  7362  0851  1D03               	skipz
  7363  0852  2858               	goto	l2304
  7364                           
  7365                           ;RF_Control_B1.c: 255: setLog_Code();
  7366  0853  3191  210D         	fcall	_setLog_Code
  7367                           
  7368                           ;RF_Control_B1.c: 256: RF1.Checked = 1;
  7369  0855  0021               	movlb	1	; select bank1
  7370  0856  15BF               	bsf	(_RF1^(0+128)+1),3
  7371                           
  7372                           ;RF_Control_B1.c: 257: } else {
  7373  0857  0008               	return
  7374  0858                     l2304:	
  7375                           
  7376                           ;RF_Control_B1.c: 258: RF1.Checked = 0;
  7377  0858  0021               	movlb	1	; select bank1
  7378  0859  11BF               	bcf	(_RF1^(0+128)+1),3
  7379                           
  7380                           ;RF_Control_B1.c: 259: }
  7381                           ;RF_Control_B1.c: 260: } else {
  7382  085A  0008               	return
  7383  085B                     l9427:	
  7384                           
  7385                           ;RF_Control_B1.c: 261: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7386  085B  0022               	movlb	2	; select bank2
  7387  085C  08A0               	movf	_RF_Data^(0+256),f
  7388  085D  1D03               	skipz
  7389  085E  2899               	goto	l9449
  7390  085F  0821               	movf	(_RF_Data^(0+256)+1),w
  7391  0860  3A02               	xorlw	2
  7392  0861  1D03               	skipz
  7393  0862  2899               	goto	l9449
  7394                           
  7395                           ;RF_Control_B1.c: 263: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7396  0863  082C               	movf	(_RF_Data^(0+256)+12),w
  7397  0864  3AFF               	xorlw	255
  7398  0865  1D03               	skipz
  7399  0866  2873               	goto	l9439
  7400  0867  082D               	movf	(_RF_Data^(0+256)+13),w
  7401  0868  3AFF               	xorlw	255
  7402  0869  1D03               	skipz
  7403  086A  2873               	goto	l9439
  7404  086B  082E               	movf	(_RF_Data^(0+256)+14),w
  7405  086C  3AFF               	xorlw	255
  7406  086D  1D03               	skipz
  7407  086E  2873               	goto	l9439
  7408                           
  7409                           ;RF_Control_B1.c: 264: __nop();
  7410  086F  0000               	nop
  7411                           
  7412                           ;RF_Control_B1.c: 265: RF1.Checked = 0;
  7413  0870  0021               	movlb	1	; select bank1
  7414  0871  11BF               	bcf	(_RF1^(0+128)+1),3
  7415                           
  7416                           ;RF_Control_B1.c: 266: } else {
  7417  0872  0008               	return
  7418  0873                     l9439:	
  7419                           
  7420                           ;RF_Control_B1.c: 267: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7421  0873  0020               	movlb	0	; select bank0
  7422  0874  086D               	movf	_product,w
  7423  0875  3E0C               	addlw	12
  7424  0876  0086               	movwf	6
  7425  0877  3002               	movlw	2	; select bank4/5
  7426  0878  0087               	movwf	7
  7427  0879  0022               	movlb	2	; select bank2
  7428  087A  082C               	movf	(_RF_Data^(0+256)+12),w
  7429  087B  0601               	xorwf	1,w
  7430  087C  1D03               	skipz
  7431  087D  0008               	return
  7432  087E  0020               	movlb	0	; select bank0
  7433  087F  086D               	movf	_product,w
  7434  0880  3E0D               	addlw	13
  7435  0881  0086               	movwf	6
  7436  0882  3002               	movlw	2	; select bank4/5
  7437  0883  0087               	movwf	7
  7438  0884  0022               	movlb	2	; select bank2
  7439  0885  082D               	movf	(_RF_Data^(0+256)+13),w
  7440  0886  0601               	xorwf	1,w
  7441  0887  1D03               	skipz
  7442  0888  0008               	return
  7443  0889  0020               	movlb	0	; select bank0
  7444  088A  086D               	movf	_product,w
  7445  088B  3E0E               	addlw	14
  7446  088C  0086               	movwf	6
  7447  088D  3002               	movlw	2	; select bank4/5
  7448  088E  0087               	movwf	7
  7449  088F  0022               	movlb	2	; select bank2
  7450  0890  082E               	movf	(_RF_Data^(0+256)+14),w
  7451  0891  0601               	xorwf	1,w
  7452  0892  1D03               	skipz
  7453  0893  0008               	return
  7454                           
  7455                           ;RF_Control_B1.c: 268: setControl_Lights_Table();
  7456  0894  3187  2760         	fcall	_setControl_Lights_Table
  7457                           
  7458                           ;RF_Control_B1.c: 269: RF1.Checked = 1;
  7459  0896  0021               	movlb	1	; select bank1
  7460  0897  15BF               	bsf	(_RF1^(0+128)+1),3
  7461                           
  7462                           ;RF_Control_B1.c: 270: }
  7463                           ;RF_Control_B1.c: 271: }
  7464                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7465  0898  0008               	return
  7466  0899                     l9449:	
  7467  0899  0022               	movlb	2	; select bank2
  7468  089A  0820               	movf	_RF_Data^(0+256),w
  7469  089B  3AFF               	xorlw	255
  7470  089C  1D03               	skipz
  7471  089D  28A4               	goto	l9455
  7472  089E  0821               	movf	(_RF_Data^(0+256)+1),w
  7473  089F  3A02               	xorlw	2
  7474  08A0  1D03               	skipz
  7475  08A1  28A4               	goto	l9455
  7476                           
  7477                           ;RF_Control_B1.c: 273: __nop();
  7478  08A2  0000               	nop
  7479                           
  7480                           ;RF_Control_B1.c: 274: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7481  08A3  0008               	return
  7482  08A4                     l9455:	
  7483  08A4  0022               	movlb	2	; select bank2
  7484  08A5  08A0               	movf	_RF_Data^(0+256),f
  7485  08A6  1D03               	skipz
  7486  08A7  28AE               	goto	l2314
  7487  08A8  0821               	movf	(_RF_Data^(0+256)+1),w
  7488  08A9  3A65               	xorlw	101
  7489  08AA  1D03               	skipz
  7490  08AB  28AE               	goto	l2314
  7491                           
  7492                           ;RF_Control_B1.c: 275: __nop();
  7493  08AC  0000               	nop
  7494                           
  7495                           ;RF_Control_B1.c: 276: } else {
  7496  08AD  0008               	return
  7497  08AE                     l2314:	
  7498                           
  7499                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  7500  08AE  0021               	movlb	1	; select bank1
  7501  08AF  11BF               	bcf	(_RF1^(0+128)+1),3
  7502  08B0  0008               	return
  7503  08B1                     __end_of_getRxData:	
  7504                           
  7505                           	psect	text30
  7506  110D                     __ptext30:	
  7507 ;; *************** function _setLog_Code *****************
  7508 ;; Defined at:
  7509 ;;		line 287 in file "../src/RF_Control_B1.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;		None
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;		None
  7514 ;; Return value:  Size  Location     Type
  7515 ;;		None               void
  7516 ;; Registers used:
  7517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7526 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;Total ram usage:        1 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    7
  7530 ;; This function calls:
  7531 ;;		_setBuz
  7532 ;; This function is called by:
  7533 ;;		_getRxData
  7534 ;; This function uses a non-reentrant model
  7535 ;;
  7536                           
  7537                           
  7538                           ;psect for function _setLog_Code
  7539  110D                     _setLog_Code:	
  7540                           
  7541                           ;RF_Control_B1.c: 288: product->Data[12]=RF_Data[12];
  7542                           
  7543                           ;incstack = 0
  7544                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7545  110D  0022               	movlb	2	; select bank2
  7546  110E  082C               	movf	(_RF_Data^(0+256)+12),w
  7547  110F  0020               	movlb	0	; select bank0
  7548  1110  00AD               	movwf	??_setLog_Code
  7549  1111  086D               	movf	_product,w
  7550  1112  3E0C               	addlw	12
  7551  1113  0086               	movwf	6
  7552  1114  3002               	movlw	2	; select bank4/5
  7553  1115  0087               	movwf	7
  7554  1116  082D               	movf	??_setLog_Code,w
  7555  1117  0081               	movwf	1
  7556                           
  7557                           ;RF_Control_B1.c: 289: product->Data[13]=RF_Data[13];
  7558  1118  0022               	movlb	2	; select bank2
  7559  1119  082D               	movf	(_RF_Data^(0+256)+13),w
  7560  111A  0020               	movlb	0	; select bank0
  7561  111B  00AD               	movwf	??_setLog_Code
  7562  111C  086D               	movf	_product,w
  7563  111D  3E0D               	addlw	13
  7564  111E  0086               	movwf	6
  7565  111F  3002               	movlw	2	; select bank4/5
  7566  1120  0087               	movwf	7
  7567  1121  082D               	movf	??_setLog_Code,w
  7568  1122  0081               	movwf	1
  7569                           
  7570                           ;RF_Control_B1.c: 290: product->Data[14]=RF_Data[14];
  7571  1123  0022               	movlb	2	; select bank2
  7572  1124  082E               	movf	(_RF_Data^(0+256)+14),w
  7573  1125  0020               	movlb	0	; select bank0
  7574  1126  00AD               	movwf	??_setLog_Code
  7575  1127  086D               	movf	_product,w
  7576  1128  3E0E               	addlw	14
  7577  1129  0086               	movwf	6
  7578  112A  3002               	movlw	2	; select bank4/5
  7579  112B  0087               	movwf	7
  7580  112C  082D               	movf	??_setLog_Code,w
  7581  112D  0081               	movwf	1
  7582                           
  7583                           ;RF_Control_B1.c: 291: setBuz(1, 100);
  7584  112E  3064               	movlw	100
  7585  112F  00A9               	movwf	setBuz@time
  7586  1130  3000               	movlw	0
  7587  1131  00AA               	movwf	setBuz@time+1
  7588  1132  3001               	movlw	1
  7589  1133  3195  25C9  3191   	fcall	_setBuz
  7590                           
  7591                           ;RF_Control_B1.c: 292: RF1.Learn = 0;
  7592  1136  0021               	movlb	1	; select bank1
  7593  1137  133E               	bcf	_RF1^(0+128),6
  7594                           
  7595                           ;RF_Control_B1.c: 293: if (myMain.First) {
  7596  1138  1FA0               	btfss	_myMain^(0+128),7
  7597  1139  293C               	goto	l2319
  7598                           
  7599                           ;RF_Control_B1.c: 294: Memory.LoopSave=1;
  7600  113A  0024               	movlb	4	; select bank4
  7601  113B  1544               	bsf	(_Memory^(0+512)+36),2
  7602  113C                     l2319:	
  7603                           
  7604                           ;RF_Control_B1.c: 295: }
  7605                           ;RF_Control_B1.c: 296: Memory.Modify=1;
  7606  113C  0024               	movlb	4	; select bank4
  7607  113D  1444               	bsf	(_Memory^(0+512)+36),0
  7608  113E  0008               	return
  7609  113F                     __end_of_setLog_Code:	
  7610                           
  7611                           	psect	text31
  7612  0760                     __ptext31:	
  7613 ;; *************** function _setControl_Lights_Table *****************
  7614 ;; Defined at:
  7615 ;;		line 300 in file "../src/RF_Control_B1.c"
  7616 ;; Parameters:    Size  Location     Type
  7617 ;;		None
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;		None
  7620 ;; Return value:  Size  Location     Type
  7621 ;;		None               void
  7622 ;; Registers used:
  7623 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7624 ;; Tracked objects:
  7625 ;;		On entry : 0/0
  7626 ;;		On exit  : 0/0
  7627 ;;		Unchanged: 0/0
  7628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;Total ram usage:        0 bytes
  7634 ;; Hardware stack levels used:    1
  7635 ;; Hardware stack levels required when called:   11
  7636 ;; This function calls:
  7637 ;;		_setBuz
  7638 ;;		_setDimmerLights
  7639 ;;		_setRFSW_AdjControl
  7640 ;;		_setRFSW_Control
  7641 ;;		_setRFSW_Status
  7642 ;;		_setSw_Status
  7643 ;;		_setTxData
  7644 ;; This function is called by:
  7645 ;;		_getRxData
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           
  7650                           ;psect for function _setControl_Lights_Table
  7651  0760                     _setControl_Lights_Table:	
  7652                           
  7653                           ;RF_Control_B1.c: 301: if (RF_Data[15] == 0x00) {
  7654                           
  7655                           ;incstack = 0
  7656                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7657  0760  0022               	movlb	2	; select bank2
  7658  0761  08AF               	movf	(_RF_Data^(0+256)+15),f
  7659  0762  1D03               	skipz
  7660  0763  2FAC               	goto	l9149
  7661                           
  7662                           ;RF_Control_B1.c: 303: setDimmerLights(1, 0);
  7663  0764  0020               	movlb	0	; select bank0
  7664  0765  01A4               	clrf	setDimmerLights@status
  7665  0766  3001               	movlw	1
  7666  0767  318C  24D3  3187   	fcall	_setDimmerLights
  7667                           
  7668                           ;RF_Control_B1.c: 304: setRFSW_Status(1, 0);
  7669  076A  0020               	movlb	0	; select bank0
  7670  076B  01A2               	clrf	setRFSW_Status@command
  7671  076C  3001               	movlw	1
  7672  076D  319B  232C  3187   	fcall	_setRFSW_Status
  7673                           
  7674                           ;RF_Control_B1.c: 305: setSw_Status(1, 0);
  7675  0770  0020               	movlb	0	; select bank0
  7676  0771  01A2               	clrf	setSw_Status@command
  7677  0772  3001               	movlw	1
  7678  0773  319B  2356  3187   	fcall	_setSw_Status
  7679                           
  7680                           ;RF_Control_B1.c: 308: setDimmerLights(2, 0);
  7681  0776  0020               	movlb	0	; select bank0
  7682  0777  01A4               	clrf	setDimmerLights@status
  7683  0778  3002               	movlw	2
  7684  0779  318C  24D3  3187   	fcall	_setDimmerLights
  7685                           
  7686                           ;RF_Control_B1.c: 309: setRFSW_Status(2, 0);
  7687  077C  0020               	movlb	0	; select bank0
  7688  077D  01A2               	clrf	setRFSW_Status@command
  7689  077E  3002               	movlw	2
  7690  077F  319B  232C  3187   	fcall	_setRFSW_Status
  7691                           
  7692                           ;RF_Control_B1.c: 310: setSw_Status(2, 0);
  7693  0782  0020               	movlb	0	; select bank0
  7694  0783  01A2               	clrf	setSw_Status@command
  7695  0784  3002               	movlw	2
  7696  0785  319B  2356  3187   	fcall	_setSw_Status
  7697                           
  7698                           ;RF_Control_B1.c: 318: product->Data[9]=0;
  7699  0788  0020               	movlb	0	; select bank0
  7700  0789  086D               	movf	_product,w
  7701  078A  3E09               	addlw	9
  7702  078B  0086               	movwf	6
  7703  078C  3002               	movlw	2	; select bank4/5
  7704  078D  0087               	movwf	7
  7705  078E  0181               	clrf	1
  7706                           
  7707                           ;RF_Control_B1.c: 319: product->Data[11]=0;
  7708  078F  086D               	movf	_product,w
  7709  0790  3E0B               	addlw	11
  7710  0791  0086               	movwf	6
  7711  0792  3002               	movlw	2	; select bank4/5
  7712  0793  0087               	movwf	7
  7713  0794  0181               	clrf	1
  7714                           
  7715                           ;RF_Control_B1.c: 320: product->Data[15]=0;
  7716  0795  086D               	movf	_product,w
  7717  0796  3E0F               	addlw	15
  7718  0797  0086               	movwf	6
  7719  0798  3002               	movlw	2	; select bank4/5
  7720  0799  0087               	movwf	7
  7721  079A  0181               	clrf	1
  7722                           
  7723                           ;RF_Control_B1.c: 321: product->Data[17]=0;
  7724  079B  086D               	movf	_product,w
  7725  079C  3E11               	addlw	17
  7726  079D  0086               	movwf	6
  7727  079E  3002               	movlw	2	; select bank4/5
  7728  079F  0087               	movwf	7
  7729  07A0  0181               	clrf	1
  7730                           
  7731                           ;RF_Control_B1.c: 322: setBuz(1, 100);
  7732  07A1  3064               	movlw	100
  7733  07A2  00A9               	movwf	setBuz@time
  7734  07A3  3000               	movlw	0
  7735  07A4  00AA               	movwf	setBuz@time+1
  7736  07A5  3001               	movlw	1
  7737  07A6  3195  25C9  3187   	fcall	_setBuz
  7738                           
  7739                           ;RF_Control_B1.c: 323: setTxData();
  7740  07A9  318F  2743         	fcall	_setTxData
  7741                           
  7742                           ;RF_Control_B1.c: 324: } else if (RF_Data[15] == 0x20) {
  7743  07AB  0008               	return
  7744  07AC                     l9149:	
  7745  07AC  0022               	movlb	2	; select bank2
  7746  07AD  082F               	movf	(_RF_Data^(0+256)+15),w
  7747  07AE  3A20               	xorlw	32
  7748  07AF  1D03               	skipz
  7749  07B0  2FC7               	goto	l9155
  7750                           
  7751                           ;RF_Control_B1.c: 325: product->Data[9]=0;
  7752  07B1  0020               	movlb	0	; select bank0
  7753  07B2  086D               	movf	_product,w
  7754  07B3  3E09               	addlw	9
  7755  07B4  0086               	movwf	6
  7756  07B5  3002               	movlw	2	; select bank4/5
  7757  07B6  0087               	movwf	7
  7758  07B7  0181               	clrf	1
  7759                           
  7760                           ;RF_Control_B1.c: 326: product->Data[11]=0;
  7761  07B8  086D               	movf	_product,w
  7762  07B9  3E0B               	addlw	11
  7763  07BA  0086               	movwf	6
  7764  07BB  3002               	movlw	2	; select bank4/5
  7765  07BC  0087               	movwf	7
  7766  07BD  0181               	clrf	1
  7767                           
  7768                           ;RF_Control_B1.c: 327: product->Data[17]=0;
  7769  07BE  086D               	movf	_product,w
  7770  07BF  3E11               	addlw	17
  7771  07C0  0086               	movwf	6
  7772  07C1  3002               	movlw	2	; select bank4/5
  7773  07C2  0087               	movwf	7
  7774  07C3  0181               	clrf	1
  7775                           
  7776                           ;RF_Control_B1.c: 328: setTxData();
  7777  07C4  318F  2743         	fcall	_setTxData
  7778                           
  7779                           ;RF_Control_B1.c: 329: }
  7780  07C6  0008               	return
  7781  07C7                     l9155:	
  7782                           
  7783                           ;RF_Control_B1.c: 331: else if (RF_Data[15] == 0x01) {
  7784  07C7  0022               	movlb	2	; select bank2
  7785  07C8  082F               	movf	(_RF_Data^(0+256)+15),w
  7786  07C9  3A01               	xorlw	1
  7787  07CA  1D03               	skipz
  7788  07CB  2FD0               	goto	l9159
  7789                           
  7790                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7791  07CC  3001               	movlw	1
  7792  07CD  318D  255B         	fcall	_setRFSW_Control
  7793                           
  7794                           ;RF_Control_B1.c: 333: }
  7795  07CF  0008               	return
  7796  07D0                     l9159:	
  7797                           
  7798                           ;RF_Control_B1.c: 335: else if (RF_Data[15] == 0x11) {
  7799  07D0  0022               	movlb	2	; select bank2
  7800  07D1  082F               	movf	(_RF_Data^(0+256)+15),w
  7801  07D2  3A11               	xorlw	17
  7802  07D3  1D03               	skipz
  7803  07D4  2FD9               	goto	l9163
  7804                           
  7805                           ;RF_Control_B1.c: 336: setRFSW_AdjControl(1);
  7806  07D5  3001               	movlw	1
  7807  07D6  3192  2219         	fcall	_setRFSW_AdjControl
  7808                           
  7809                           ;RF_Control_B1.c: 337: }
  7810  07D8  0008               	return
  7811  07D9                     l9163:	
  7812                           
  7813                           ;RF_Control_B1.c: 342: else if (RF_Data[15] == 0x02) {
  7814  07D9  0022               	movlb	2	; select bank2
  7815  07DA  082F               	movf	(_RF_Data^(0+256)+15),w
  7816  07DB  3A02               	xorlw	2
  7817  07DC  1D03               	skipz
  7818  07DD  2FE2               	goto	l9167
  7819                           
  7820                           ;RF_Control_B1.c: 343: setRFSW_Control(2);
  7821  07DE  3002               	movlw	2
  7822  07DF  318D  255B         	fcall	_setRFSW_Control
  7823                           
  7824                           ;RF_Control_B1.c: 344: }
  7825  07E1  0008               	return
  7826  07E2                     l9167:	
  7827                           
  7828                           ;RF_Control_B1.c: 346: else if (RF_Data[15] == 0x21) {
  7829  07E2  0022               	movlb	2	; select bank2
  7830  07E3  082F               	movf	(_RF_Data^(0+256)+15),w
  7831  07E4  3A21               	xorlw	33
  7832  07E5  1D03               	skipz
  7833  07E6  0008               	return
  7834                           
  7835                           ;RF_Control_B1.c: 347: setRFSW_AdjControl(2);
  7836  07E7  3002               	movlw	2
  7837  07E8  3192  2219         	fcall	_setRFSW_AdjControl
  7838  07EA  0008               	return
  7839  07EB                     __end_of_setControl_Lights_Table:	
  7840                           
  7841                           	psect	text32
  7842  0D5B                     __ptext32:	
  7843 ;; *************** function _setRFSW_Control *****************
  7844 ;; Defined at:
  7845 ;;		line 388 in file "../src/RF_Control_B1.c"
  7846 ;; Parameters:    Size  Location     Type
  7847 ;;  sw              1    wreg     unsigned char 
  7848 ;; Auto vars:     Size  Location     Type
  7849 ;;  sw              1   67[BANK0 ] unsigned char 
  7850 ;; Return value:  Size  Location     Type
  7851 ;;		None               void
  7852 ;; Registers used:
  7853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7854 ;; Tracked objects:
  7855 ;;		On entry : 0/0
  7856 ;;		On exit  : 0/0
  7857 ;;		Unchanged: 0/0
  7858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7863 ;;Total ram usage:        2 bytes
  7864 ;; Hardware stack levels used:    1
  7865 ;; Hardware stack levels required when called:    9
  7866 ;; This function calls:
  7867 ;;		_RfSWPointSelect
  7868 ;;		_setBuz
  7869 ;;		_setDelayOff_GO
  7870 ;;		_setDimmerLights_Switch
  7871 ;;		_setDimmerLights_Trigger
  7872 ;;		_setRF_DimmerLights
  7873 ;;		_setSw_Status
  7874 ;;		_setTxData
  7875 ;; This function is called by:
  7876 ;;		_setControl_Lights_Table
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           
  7881                           ;psect for function _setRFSW_Control
  7882  0D5B                     _setRFSW_Control:	
  7883                           
  7884                           ;incstack = 0
  7885                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7886                           ;setRFSW_Control@sw stored from wreg
  7887  0D5B  0020               	movlb	0	; select bank0
  7888  0D5C  00E3               	movwf	setRFSW_Control@sw
  7889                           
  7890                           ;RF_Control_B1.c: 389: RfSWPointSelect(sw);
  7891  0D5D  0863               	movf	setRFSW_Control@sw,w
  7892  0D5E  319C  2461  318D   	fcall	_RfSWPointSelect
  7893                           
  7894                           ;RF_Control_B1.c: 390: if (RFSW->Status == 0) {
  7895  0D61  0879               	movf	_RFSW,w
  7896  0D62  0086               	movwf	6
  7897  0D63  0187               	clrf	7
  7898  0D64  1801               	btfsc	1,0
  7899  0D65  2D9A               	goto	l8993
  7900                           
  7901                           ;RF_Control_B1.c: 391: if (RF_Data[16] == 0x80) {
  7902  0D66  0022               	movlb	2	; select bank2
  7903  0D67  0830               	movf	(_RF_Data^(0+256)+16),w
  7904  0D68  3A80               	xorlw	128
  7905  0D69  1D03               	skipz
  7906  0D6A  2D78               	goto	l8983
  7907                           
  7908                           ;RF_Control_B1.c: 392: setDelayOff_GO(sw, 1, RF_Data[17]);
  7909  0D6B  0020               	movlb	0	; select bank0
  7910  0D6C  01AA               	clrf	setDelayOff_GO@command
  7911  0D6D  0AAA               	incf	setDelayOff_GO@command,f
  7912  0D6E  0022               	movlb	2	; select bank2
  7913  0D6F  0831               	movf	(_RF_Data^(0+256)+17),w
  7914  0D70  0020               	movlb	0	; select bank0
  7915  0D71  00E2               	movwf	??_setRFSW_Control
  7916  0D72  0862               	movf	??_setRFSW_Control,w
  7917  0D73  00AB               	movwf	setDelayOff_GO@value
  7918  0D74  0863               	movf	setRFSW_Control@sw,w
  7919  0D75  3196  26DB  318D   	fcall	_setDelayOff_GO
  7920  0D78                     l8983:	
  7921                           
  7922                           ;RF_Control_B1.c: 393: }
  7923                           ;RF_Control_B1.c: 394: RFSW->Status = 1;
  7924  0D78  0879               	movf	_RFSW,w
  7925  0D79  0086               	movwf	6
  7926  0D7A  0187               	clrf	7
  7927  0D7B  1401               	bsf	1,0
  7928                           
  7929                           ;RF_Control_B1.c: 395: setSw_Status(sw, 1);
  7930  0D7C  0020               	movlb	0	; select bank0
  7931  0D7D  01A2               	clrf	setSw_Status@command
  7932  0D7E  0AA2               	incf	setSw_Status@command,f
  7933  0D7F  0863               	movf	setRFSW_Control@sw,w
  7934  0D80  319B  2356  318D   	fcall	_setSw_Status
  7935                           
  7936                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw, 1);
  7937  0D83  0020               	movlb	0	; select bank0
  7938  0D84  01A2               	clrf	setDimmerLights_Trigger@command
  7939  0D85  0AA2               	incf	setDimmerLights_Trigger@command,f
  7940  0D86  0863               	movf	setRFSW_Control@sw,w
  7941  0D87  319B  2393  318D   	fcall	_setDimmerLights_Trigger
  7942                           
  7943                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw, 1);
  7944  0D8A  0020               	movlb	0	; select bank0
  7945  0D8B  01A2               	clrf	setDimmerLights_Switch@command
  7946  0D8C  0AA2               	incf	setDimmerLights_Switch@command,f
  7947  0D8D  0863               	movf	setRFSW_Control@sw,w
  7948  0D8E  319B  2383  318D   	fcall	_setDimmerLights_Switch
  7949                           
  7950                           ;RF_Control_B1.c: 400: setRF_DimmerLights(sw, RFSW->Status);
  7951  0D91  0879               	movf	_RFSW,w
  7952  0D92  0086               	movwf	6
  7953  0D93  0187               	clrf	7
  7954  0D94  3000               	movlw	0
  7955  0D95  1801               	btfsc	1,0
  7956  0D96  3001               	movlw	1
  7957  0D97  0020               	movlb	0	; select bank0
  7958  0D98  00DD               	movwf	setRF_DimmerLights@on
  7959  0D99  2DD6               	goto	L3
  7960  0D9A                     l8993:	
  7961                           ;RF_Control_B1.c: 401: } else {
  7962                           
  7963                           
  7964                           ;RF_Control_B1.c: 402: if (RF_Data[16] == 0x80) {
  7965  0D9A  0022               	movlb	2	; select bank2
  7966  0D9B  0830               	movf	(_RF_Data^(0+256)+16),w
  7967  0D9C  3A80               	xorlw	128
  7968  0D9D  1D03               	skipz
  7969  0D9E  2DB0               	goto	l8997
  7970                           
  7971                           ;RF_Control_B1.c: 403: setDelayOff_GO(sw, 1, RF_Data[17]);
  7972  0D9F  0020               	movlb	0	; select bank0
  7973  0DA0  01AA               	clrf	setDelayOff_GO@command
  7974  0DA1  0AAA               	incf	setDelayOff_GO@command,f
  7975  0DA2  0022               	movlb	2	; select bank2
  7976  0DA3  0831               	movf	(_RF_Data^(0+256)+17),w
  7977  0DA4  0020               	movlb	0	; select bank0
  7978  0DA5  00E2               	movwf	??_setRFSW_Control
  7979  0DA6  0862               	movf	??_setRFSW_Control,w
  7980  0DA7  00AB               	movwf	setDelayOff_GO@value
  7981  0DA8  0863               	movf	setRFSW_Control@sw,w
  7982  0DA9  3196  26DB  318D   	fcall	_setDelayOff_GO
  7983                           
  7984                           ;RF_Control_B1.c: 404: setRF_DimmerLights(sw, 1);
  7985  0DAC  0020               	movlb	0	; select bank0
  7986  0DAD  01DD               	clrf	setRF_DimmerLights@on
  7987  0DAE  0ADD               	incf	setRF_DimmerLights@on,f
  7988  0DAF  2DD6               	goto	L3
  7989  0DB0                     l8997:	
  7990                           ;RF_Control_B1.c: 405: } else {
  7991                           
  7992                           
  7993                           ;RF_Control_B1.c: 406: RFSW->Status = 0;
  7994  0DB0  0879               	movf	_RFSW,w
  7995  0DB1  0086               	movwf	6
  7996  0DB2  0187               	clrf	7
  7997  0DB3  1001               	bcf	1,0
  7998                           
  7999                           ;RF_Control_B1.c: 407: setSw_Status(sw, 0);
  8000  0DB4  0020               	movlb	0	; select bank0
  8001  0DB5  01A2               	clrf	setSw_Status@command
  8002  0DB6  0863               	movf	setRFSW_Control@sw,w
  8003  0DB7  319B  2356  318D   	fcall	_setSw_Status
  8004                           
  8005                           ;RF_Control_B1.c: 409: setDimmerLights_Trigger(sw, 1);
  8006  0DBA  0020               	movlb	0	; select bank0
  8007  0DBB  01A2               	clrf	setDimmerLights_Trigger@command
  8008  0DBC  0AA2               	incf	setDimmerLights_Trigger@command,f
  8009  0DBD  0863               	movf	setRFSW_Control@sw,w
  8010  0DBE  319B  2393  318D   	fcall	_setDimmerLights_Trigger
  8011                           
  8012                           ;RF_Control_B1.c: 410: setDimmerLights_Switch(sw, RFSW->Status);
  8013  0DC1  0879               	movf	_RFSW,w
  8014  0DC2  0086               	movwf	6
  8015  0DC3  0187               	clrf	7
  8016  0DC4  3000               	movlw	0
  8017  0DC5  1801               	btfsc	1,0
  8018  0DC6  3001               	movlw	1
  8019  0DC7  0020               	movlb	0	; select bank0
  8020  0DC8  00A2               	movwf	setDimmerLights_Switch@command
  8021  0DC9  0863               	movf	setRFSW_Control@sw,w
  8022  0DCA  319B  2383  318D   	fcall	_setDimmerLights_Switch
  8023                           
  8024                           ;RF_Control_B1.c: 412: setDelayOff_GO(sw, 0, 0);
  8025  0DCD  0020               	movlb	0	; select bank0
  8026  0DCE  01AA               	clrf	setDelayOff_GO@command
  8027  0DCF  01AB               	clrf	setDelayOff_GO@value
  8028  0DD0  0863               	movf	setRFSW_Control@sw,w
  8029  0DD1  3196  26DB  318D   	fcall	_setDelayOff_GO
  8030                           
  8031                           ;RF_Control_B1.c: 413: setRF_DimmerLights(sw, 0);
  8032  0DD4  0020               	movlb	0	; select bank0
  8033  0DD5  01DD               	clrf	setRF_DimmerLights@on
  8034  0DD6                     L3:	
  8035  0DD6  0863               	movf	setRFSW_Control@sw,w
  8036  0DD7  3189  211C  318D   	fcall	_setRF_DimmerLights
  8037                           
  8038                           ;RF_Control_B1.c: 414: }
  8039                           ;RF_Control_B1.c: 415: }
  8040                           ;RF_Control_B1.c: 416: setBuz(1, 100);
  8041  0DDA  3064               	movlw	100
  8042  0DDB  0020               	movlb	0	; select bank0
  8043  0DDC  00A9               	movwf	setBuz@time
  8044  0DDD  3000               	movlw	0
  8045  0DDE  00AA               	movwf	setBuz@time+1
  8046  0DDF  3001               	movlw	1
  8047  0DE0  3195  25C9  318D   	fcall	_setBuz
  8048                           
  8049                           ;RF_Control_B1.c: 417: setTxData();
  8050  0DE3  318F  2743         	fcall	_setTxData
  8051  0DE5  0008               	return
  8052  0DE6                     __end_of_setRFSW_Control:	
  8053                           
  8054                           	psect	text33
  8055  16DB                     __ptext33:	
  8056 ;; *************** function _setDelayOff_GO *****************
  8057 ;; Defined at:
  8058 ;;		line 86 in file "../src/DelayOff_B1.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;  sw              1    wreg     unsigned char 
  8061 ;;  command         1   10[BANK0 ] unsigned char 
  8062 ;;  value           1   11[BANK0 ] unsigned char 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  sw              1   14[BANK0 ] unsigned char 
  8065 ;; Return value:  Size  Location     Type
  8066 ;;		None               void
  8067 ;; Registers used:
  8068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8074 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8076 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8077 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;Total ram usage:        5 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    7
  8081 ;; This function calls:
  8082 ;;		_DelayOffPointSelect
  8083 ;;		_DelayTimejudge
  8084 ;; This function is called by:
  8085 ;;		_setRFSW_Control
  8086 ;;		_Sw_DimmerOffFunc
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           
  8091                           ;psect for function _setDelayOff_GO
  8092  16DB                     _setDelayOff_GO:	
  8093                           
  8094                           ;incstack = 0
  8095                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8096                           ;setDelayOff_GO@sw stored from wreg
  8097  16DB  0020               	movlb	0	; select bank0
  8098  16DC  00AE               	movwf	setDelayOff_GO@sw
  8099                           
  8100                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  8101  16DD  082E               	movf	setDelayOff_GO@sw,w
  8102  16DE  319C  249C  3196   	fcall	_DelayOffPointSelect
  8103                           
  8104                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  8105  16E1  0020               	movlb	0	; select bank0
  8106  16E2  086A               	movf	_DelayOff,w
  8107  16E3  0086               	movwf	6
  8108  16E4  0187               	clrf	7
  8109  16E5  1C01               	btfss	1,0
  8110  16E6  0008               	return
  8111                           
  8112                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  8113  16E7  082A               	movf	setDelayOff_GO@command,w
  8114  16E8  3A01               	xorlw	1
  8115  16E9  3000               	movlw	0
  8116  16EA  1903               	skipnz
  8117  16EB  3001               	movlw	1
  8118  16EC  00AC               	movwf	??_setDelayOff_GO
  8119  16ED  086A               	movf	_DelayOff,w
  8120  16EE  0086               	movwf	6
  8121  16EF  0187               	clrf	7
  8122  16F0  0DAC               	rlf	??_setDelayOff_GO,f
  8123  16F1  0801               	movf	1,w
  8124  16F2  062C               	xorwf	??_setDelayOff_GO,w
  8125  16F3  39FD               	andlw	-3
  8126  16F4  062C               	xorwf	??_setDelayOff_GO,w
  8127  16F5  0081               	movwf	1
  8128                           
  8129                           ;DelayOff_B1.c: 90: if (command == 1) {
  8130  16F6  082A               	movf	setDelayOff_GO@command,w
  8131  16F7  3A01               	xorlw	1
  8132  16F8  1D03               	skipz
  8133  16F9  2F23               	goto	l8755
  8134                           
  8135                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  8136  16FA  082B               	movf	setDelayOff_GO@value,w
  8137  16FB  319F  27AB  3196   	fcall	_DelayTimejudge
  8138  16FE  0020               	movlb	0	; select bank0
  8139  16FF  00AC               	movwf	??_setDelayOff_GO
  8140  1700  086A               	movf	_DelayOff,w
  8141  1701  0086               	movwf	6
  8142  1702  0187               	clrf	7
  8143  1703  082C               	movf	??_setDelayOff_GO,w
  8144  1704  0081               	movwf	1
  8145                           
  8146                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  8147  1705  300F               	movlw	15
  8148  1706  052B               	andwf	setDelayOff_GO@value,w
  8149  1707  00AC               	movwf	??_setDelayOff_GO
  8150  1708  082C               	movf	??_setDelayOff_GO,w
  8151  1709  3A05               	xorlw	5
  8152  170A  1903               	skipnz
  8153  170B  2F10               	goto	l8749
  8154  170C  082B               	movf	setDelayOff_GO@value,w
  8155  170D  390F               	andlw	15
  8156  170E  1D03               	btfss	3,2
  8157  170F  2F16               	goto	l8753
  8158  1710                     l8749:	
  8159  1710  3026               	movlw	38
  8160  1711  022B               	subwf	setDelayOff_GO@value,w
  8161  1712  1803               	skipnc
  8162  1713  2F16               	goto	l8753
  8163                           
  8164                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  8165  1714  082B               	movf	setDelayOff_GO@value,w
  8166  1715  2F17               	goto	L4
  8167  1716                     l8753:	
  8168                           ;DelayOff_B1.c: 94: } else {
  8169                           
  8170                           
  8171                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  8172  1716  3005               	movlw	5
  8173  1717                     L4:	
  8174  1717  00AC               	movwf	??_setDelayOff_GO
  8175  1718  082E               	movf	setDelayOff_GO@sw,w
  8176  1719  3E1A               	addlw	26
  8177  171A  076D               	addwf	_product,w
  8178  171B  00AD               	movwf	??_setDelayOff_GO+1
  8179  171C  082D               	movf	??_setDelayOff_GO+1,w
  8180  171D  0086               	movwf	6
  8181  171E  3002               	movlw	2	; select bank4/5
  8182  171F  0087               	movwf	7
  8183  1720  082C               	movf	??_setDelayOff_GO,w
  8184  1721  0081               	movwf	1
  8185                           
  8186                           ;DelayOff_B1.c: 96: }
  8187                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  8188  1722  2F2F               	goto	l8759
  8189  1723                     l8755:	
  8190  1723  08AA               	movf	setDelayOff_GO@command,f
  8191  1724  1D03               	skipz
  8192  1725  2F2F               	goto	l8759
  8193                           
  8194                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  8195  1726  082E               	movf	setDelayOff_GO@sw,w
  8196  1727  3E1A               	addlw	26
  8197  1728  076D               	addwf	_product,w
  8198  1729  00AC               	movwf	??_setDelayOff_GO
  8199  172A  082C               	movf	??_setDelayOff_GO,w
  8200  172B  0086               	movwf	6
  8201  172C  3002               	movlw	2	; select bank4/5
  8202  172D  0087               	movwf	7
  8203  172E  0181               	clrf	1
  8204  172F                     l8759:	
  8205                           
  8206                           ;DelayOff_B1.c: 99: }
  8207                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  8208  172F  086A               	movf	_DelayOff,w
  8209  1730  0086               	movwf	6
  8210  1731  0187               	clrf	7
  8211  1732  3000               	movlw	0
  8212  1733  3FC0               	movwi [0]fsr1
  8213  1734  3FC1               	movwi [1]fsr1
  8214                           
  8215                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  8216  1735  086A               	movf	_DelayOff,w
  8217  1736  0086               	movwf	6
  8218  1737  0187               	clrf	7
  8219  1738  0181               	clrf	1
  8220  1739  0008               	return
  8221  173A                     __end_of_setDelayOff_GO:	
  8222                           
  8223                           	psect	text34
  8224  1FAB                     __ptext34:	
  8225 ;; *************** function _DelayTimejudge *****************
  8226 ;; Defined at:
  8227 ;;		line 106 in file "../src/DelayOff_B1.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;  value           1    wreg     unsigned char 
  8230 ;; Auto vars:     Size  Location     Type
  8231 ;;  value           1    9[BANK0 ] unsigned char 
  8232 ;;  k               1    8[BANK0 ] unsigned char 
  8233 ;;  j               1    7[BANK0 ] unsigned char 
  8234 ;;  i               1    6[BANK0 ] unsigned char 
  8235 ;; Return value:  Size  Location     Type
  8236 ;;                  1    wreg      unsigned char 
  8237 ;; Registers used:
  8238 ;;		wreg, status,2, status,0, pclath, cstack
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;Total ram usage:        6 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; Hardware stack levels required when called:    6
  8251 ;; This function calls:
  8252 ;;		___bmul
  8253 ;; This function is called by:
  8254 ;;		_setDelayOff_GO
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           
  8259                           ;psect for function _DelayTimejudge
  8260  1FAB                     _DelayTimejudge:	
  8261                           
  8262                           ;incstack = 0
  8263                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  8264                           ;DelayTimejudge@value stored from wreg
  8265  1FAB  0020               	movlb	0	; select bank0
  8266  1FAC  00A9               	movwf	DelayTimejudge@value
  8267                           
  8268                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  8269  1FAD  3005               	movlw	5
  8270  1FAE  00A4               	movwf	??_DelayTimejudge
  8271  1FAF  0824               	movf	??_DelayTimejudge,w
  8272  1FB0  00A6               	movwf	DelayTimejudge@i
  8273  1FB1  01A7               	clrf	DelayTimejudge@j
  8274  1FB2  01A8               	clrf	DelayTimejudge@k
  8275                           
  8276                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  8277  1FB3  3031               	movlw	49
  8278  1FB4  0229               	subwf	DelayTimejudge@value,w
  8279  1FB5  1803               	skipnc
  8280  1FB6  2FD3               	goto	l8541
  8281                           
  8282                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  8283  1FB7  0829               	movf	DelayTimejudge@value,w
  8284  1FB8  390F               	andlw	15
  8285  1FB9  00A4               	movwf	??_DelayTimejudge
  8286  1FBA  0824               	movf	??_DelayTimejudge,w
  8287  1FBB  00A7               	movwf	DelayTimejudge@j
  8288                           
  8289                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  8290  1FBC  0829               	movf	DelayTimejudge@value,w
  8291  1FBD  00A4               	movwf	??_DelayTimejudge
  8292  1FBE  3004               	movlw	4
  8293  1FBF                     u8555:	
  8294  1FBF  36A4               	lsrf	??_DelayTimejudge,f
  8295  1FC0  0B89               	decfsz	9,f
  8296  1FC1  2FBF               	goto	u8555
  8297  1FC2  0824               	movf	??_DelayTimejudge,w
  8298  1FC3  390F               	andlw	15
  8299  1FC4  00A5               	movwf	??_DelayTimejudge+1
  8300  1FC5  0825               	movf	??_DelayTimejudge+1,w
  8301  1FC6  00A8               	movwf	DelayTimejudge@k
  8302                           
  8303                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  8304  1FC7  300A               	movlw	10
  8305  1FC8  00A4               	movwf	??_DelayTimejudge
  8306  1FC9  0824               	movf	??_DelayTimejudge,w
  8307  1FCA  00A0               	movwf	___bmul@multiplicand
  8308  1FCB  0828               	movf	DelayTimejudge@k,w
  8309  1FCC  319C  242A         	fcall	___bmul
  8310  1FCE  0020               	movlb	0	; select bank0
  8311  1FCF  0727               	addwf	DelayTimejudge@j,w
  8312  1FD0  00A5               	movwf	??_DelayTimejudge+1
  8313  1FD1  0825               	movf	??_DelayTimejudge+1,w
  8314  1FD2  00A6               	movwf	DelayTimejudge@i
  8315  1FD3                     l8541:	
  8316                           
  8317                           ;DelayOff_B1.c: 112: }
  8318                           ;DelayOff_B1.c: 133: return i;
  8319  1FD3  0826               	movf	DelayTimejudge@i,w
  8320  1FD4  0008               	return
  8321  1FD5                     __end_of_DelayTimejudge:	
  8322                           
  8323                           	psect	text35
  8324  1C2A                     __ptext35:	
  8325 ;; *************** function ___bmul *****************
  8326 ;; Defined at:
  8327 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;  multiplier      1    wreg     unsigned char 
  8330 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8331 ;; Auto vars:     Size  Location     Type
  8332 ;;  multiplier      1    3[BANK0 ] unsigned char 
  8333 ;;  product         1    2[BANK0 ] unsigned char 
  8334 ;; Return value:  Size  Location     Type
  8335 ;;                  1    wreg      unsigned char 
  8336 ;; Registers used:
  8337 ;;		wreg, status,2, status,0
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8343 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;Total ram usage:        4 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:    5
  8350 ;; This function calls:
  8351 ;;		Nothing
  8352 ;; This function is called by:
  8353 ;;		_DelayTimejudge
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           
  8358                           ;psect for function ___bmul
  8359  1C2A                     ___bmul:	
  8360                           
  8361                           ;incstack = 0
  8362                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8363                           ;___bmul@multiplier stored from wreg
  8364  1C2A  0020               	movlb	0	; select bank0
  8365  1C2B  00A3               	movwf	___bmul@multiplier
  8366  1C2C  01A2               	clrf	___bmul@product
  8367  1C2D                     l8507:	
  8368  1C2D  1C23               	btfss	___bmul@multiplier,0
  8369  1C2E  2C33               	goto	l8511
  8370  1C2F  0820               	movf	___bmul@multiplicand,w
  8371  1C30  00A1               	movwf	??___bmul
  8372  1C31  0821               	movf	??___bmul,w
  8373  1C32  07A2               	addwf	___bmul@product,f
  8374  1C33                     l8511:	
  8375  1C33  1003               	clrc
  8376  1C34  0DA0               	rlf	___bmul@multiplicand,f
  8377  1C35  1003               	clrc
  8378  1C36  0CA3               	rrf	___bmul@multiplier,f
  8379  1C37  08A3               	movf	___bmul@multiplier,f
  8380  1C38  1D03               	skipz
  8381  1C39  2C2D               	goto	l8507
  8382  1C3A  0822               	movf	___bmul@product,w
  8383  1C3B  0008               	return
  8384  1C3C                     __end_of___bmul:	
  8385                           
  8386                           	psect	text36
  8387  1219                     __ptext36:	
  8388 ;; *************** function _setRFSW_AdjControl *****************
  8389 ;; Defined at:
  8390 ;;		line 421 in file "../src/RF_Control_B1.c"
  8391 ;; Parameters:    Size  Location     Type
  8392 ;;  sw              1    wreg     unsigned char 
  8393 ;; Auto vars:     Size  Location     Type
  8394 ;;  sw              1   70[BANK0 ] unsigned char 
  8395 ;; Return value:  Size  Location     Type
  8396 ;;		None               void
  8397 ;; Registers used:
  8398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8399 ;; Tracked objects:
  8400 ;;		On entry : 0/0
  8401 ;;		On exit  : 0/0
  8402 ;;		Unchanged: 0/0
  8403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;Total ram usage:        3 bytes
  8409 ;; Hardware stack levels used:    1
  8410 ;; Hardware stack levels required when called:   10
  8411 ;; This function calls:
  8412 ;;		_RfSWPointSelect
  8413 ;;		_setRF_DimmerValue
  8414 ;;		_setTxData
  8415 ;; This function is called by:
  8416 ;;		_setControl_Lights_Table
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function _setRFSW_AdjControl
  8422  1219                     _setRFSW_AdjControl:	
  8423                           
  8424                           ;incstack = 0
  8425                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8426                           ;setRFSW_AdjControl@sw stored from wreg
  8427  1219  0020               	movlb	0	; select bank0
  8428  121A  00E6               	movwf	setRFSW_AdjControl@sw
  8429                           
  8430                           ;RF_Control_B1.c: 422: RfSWPointSelect(sw);
  8431  121B  0866               	movf	setRFSW_AdjControl@sw,w
  8432  121C  319C  2461  3192   	fcall	_RfSWPointSelect
  8433                           
  8434                           ;RF_Control_B1.c: 423: if (RFSW->Status == 1) {
  8435  121F  0879               	movf	_RFSW,w
  8436  1220  0086               	movwf	6
  8437  1221  0187               	clrf	7
  8438  1222  1C01               	btfss	1,0
  8439  1223  2A2C               	goto	l9021
  8440                           
  8441                           ;RF_Control_B1.c: 424: Memory.Modify=1;
  8442  1224  0024               	movlb	4	; select bank4
  8443  1225  1444               	bsf	(_Memory^(0+512)+36),0
  8444                           
  8445                           ;RF_Control_B1.c: 425: setRF_DimmerValue(sw);
  8446  1226  0020               	movlb	0	; select bank0
  8447  1227  0866               	movf	setRFSW_AdjControl@sw,w
  8448  1228  3191  213F  3192   	fcall	_setRF_DimmerValue
  8449                           
  8450                           ;RF_Control_B1.c: 426: } else {
  8451  122B  2A3E               	goto	l2351
  8452  122C                     l9021:	
  8453                           
  8454                           ;RF_Control_B1.c: 427: product->Data[9]=product->Data[20 + sw];
  8455  122C  0020               	movlb	0	; select bank0
  8456  122D  0866               	movf	setRFSW_AdjControl@sw,w
  8457  122E  3E14               	addlw	20
  8458  122F  076D               	addwf	_product,w
  8459  1230  00E4               	movwf	??_setRFSW_AdjControl
  8460  1231  0864               	movf	??_setRFSW_AdjControl,w
  8461  1232  0086               	movwf	6
  8462  1233  3002               	movlw	2	; select bank4/5
  8463  1234  0087               	movwf	7
  8464  1235  0801               	movf	1,w
  8465  1236  00E5               	movwf	??_setRFSW_AdjControl+1
  8466  1237  086D               	movf	_product,w
  8467  1238  3E09               	addlw	9
  8468  1239  0086               	movwf	6
  8469  123A  3002               	movlw	2	; select bank4/5
  8470  123B  0087               	movwf	7
  8471  123C  0865               	movf	??_setRFSW_AdjControl+1,w
  8472  123D  0081               	movwf	1
  8473  123E                     l2351:	
  8474                           
  8475                           ;RF_Control_B1.c: 428: }
  8476                           ;RF_Control_B1.c: 429: product->Data[17]=product->Data[26 + sw];
  8477  123E  0020               	movlb	0	; select bank0
  8478  123F  0866               	movf	setRFSW_AdjControl@sw,w
  8479  1240  3E1A               	addlw	26
  8480  1241  076D               	addwf	_product,w
  8481  1242  00E4               	movwf	??_setRFSW_AdjControl
  8482  1243  0864               	movf	??_setRFSW_AdjControl,w
  8483  1244  0086               	movwf	6
  8484  1245  3002               	movlw	2	; select bank4/5
  8485  1246  0087               	movwf	7
  8486  1247  0801               	movf	1,w
  8487  1248  00E5               	movwf	??_setRFSW_AdjControl+1
  8488  1249  086D               	movf	_product,w
  8489  124A  3E11               	addlw	17
  8490  124B  0086               	movwf	6
  8491  124C  3002               	movlw	2	; select bank4/5
  8492  124D  0087               	movwf	7
  8493  124E  0865               	movf	??_setRFSW_AdjControl+1,w
  8494  124F  0081               	movwf	1
  8495                           
  8496                           ;RF_Control_B1.c: 430: setTxData();
  8497  1250  318F  2743         	fcall	_setTxData
  8498  1252  0008               	return
  8499  1253                     __end_of_setRFSW_AdjControl:	
  8500                           
  8501                           	psect	text37
  8502  113F                     __ptext37:	
  8503 ;; *************** function _setRF_DimmerValue *****************
  8504 ;; Defined at:
  8505 ;;		line 441 in file "../src/RF_Control_B1.c"
  8506 ;; Parameters:    Size  Location     Type
  8507 ;;  lights          1    wreg     unsigned char 
  8508 ;; Auto vars:     Size  Location     Type
  8509 ;;  lights          1   67[BANK0 ] unsigned char 
  8510 ;; Return value:  Size  Location     Type
  8511 ;;		None               void
  8512 ;; Registers used:
  8513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8514 ;; Tracked objects:
  8515 ;;		On entry : 0/0
  8516 ;;		On exit  : 0/0
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;Total ram usage:        3 bytes
  8524 ;; Hardware stack levels used:    1
  8525 ;; Hardware stack levels required when called:    9
  8526 ;; This function calls:
  8527 ;;		_setDimmerLights_AdjRF
  8528 ;; This function is called by:
  8529 ;;		_setRFSW_AdjControl
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           
  8534                           ;psect for function _setRF_DimmerValue
  8535  113F                     _setRF_DimmerValue:	
  8536                           
  8537                           ;incstack = 0
  8538                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8539                           ;setRF_DimmerValue@lights stored from wreg
  8540  113F  0020               	movlb	0	; select bank0
  8541  1140  00E3               	movwf	setRF_DimmerValue@lights
  8542                           
  8543                           ;RF_Control_B1.c: 442: if (RF_Data[9] > 0x64) {
  8544  1141  3065               	movlw	101
  8545  1142  0022               	movlb	2	; select bank2
  8546  1143  0229               	subwf	(_RF_Data^(0+256)+9),w
  8547  1144  1C03               	skipc
  8548  1145  294C               	goto	l8855
  8549                           
  8550                           ;RF_Control_B1.c: 443: RF_Data[9] = 0x64;
  8551  1146  3064               	movlw	100
  8552  1147  0020               	movlb	0	; select bank0
  8553  1148  00E1               	movwf	??_setRF_DimmerValue
  8554  1149  0861               	movf	??_setRF_DimmerValue,w
  8555  114A  0022               	movlb	2	; select bank2
  8556  114B  00A9               	movwf	(_RF_Data^(0+256)+9)
  8557  114C                     l8855:	
  8558                           
  8559                           ;RF_Control_B1.c: 444: }
  8560                           ;RF_Control_B1.c: 445: product->Data[9]=RF_Data[9];
  8561  114C  0829               	movf	(_RF_Data^(0+256)+9),w
  8562  114D  0020               	movlb	0	; select bank0
  8563  114E  00E1               	movwf	??_setRF_DimmerValue
  8564  114F  086D               	movf	_product,w
  8565  1150  3E09               	addlw	9
  8566  1151  0086               	movwf	6
  8567  1152  3002               	movlw	2	; select bank4/5
  8568  1153  0087               	movwf	7
  8569  1154  0861               	movf	??_setRF_DimmerValue,w
  8570  1155  0081               	movwf	1
  8571                           
  8572                           ;RF_Control_B1.c: 446: product->Data[11]=lights;
  8573  1156  0863               	movf	setRF_DimmerValue@lights,w
  8574  1157  00E1               	movwf	??_setRF_DimmerValue
  8575  1158  086D               	movf	_product,w
  8576  1159  3E0B               	addlw	11
  8577  115A  0086               	movwf	6
  8578  115B  3002               	movlw	2	; select bank4/5
  8579  115C  0087               	movwf	7
  8580  115D  0861               	movf	??_setRF_DimmerValue,w
  8581  115E  0081               	movwf	1
  8582                           
  8583                           ;RF_Control_B1.c: 447: product->Data[(20 + lights)]=product->Data[9];
  8584  115F  086D               	movf	_product,w
  8585  1160  3E09               	addlw	9
  8586  1161  0086               	movwf	6
  8587  1162  3002               	movlw	2	; select bank4/5
  8588  1163  0087               	movwf	7
  8589  1164  0801               	movf	1,w
  8590  1165  00E1               	movwf	??_setRF_DimmerValue
  8591  1166  0863               	movf	setRF_DimmerValue@lights,w
  8592  1167  3E14               	addlw	20
  8593  1168  076D               	addwf	_product,w
  8594  1169  00E2               	movwf	??_setRF_DimmerValue+1
  8595  116A  0862               	movf	??_setRF_DimmerValue+1,w
  8596  116B  0086               	movwf	6
  8597  116C  3002               	movlw	2	; select bank4/5
  8598  116D  0087               	movwf	7
  8599  116E  0861               	movf	??_setRF_DimmerValue,w
  8600  116F  0081               	movwf	1
  8601                           
  8602                           ;RF_Control_B1.c: 448: setDimmerLights_AdjRF(lights);
  8603  1170  0863               	movf	setRF_DimmerValue@lights,w
  8604  1171  319F  2711         	fcall	_setDimmerLights_AdjRF
  8605  1173  0008               	return
  8606  1174                     __end_of_setRF_DimmerValue:	
  8607                           
  8608                           	psect	text38
  8609  1F11                     __ptext38:	
  8610 ;; *************** function _setDimmerLights_AdjRF *****************
  8611 ;; Defined at:
  8612 ;;		line 688 in file "../src/Dimmer_B1.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;  lights          1    wreg     unsigned char 
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;  lights          1   64[BANK0 ] unsigned char 
  8617 ;; Return value:  Size  Location     Type
  8618 ;;		None               void
  8619 ;; Registers used:
  8620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8621 ;; Tracked objects:
  8622 ;;		On entry : 0/0
  8623 ;;		On exit  : 0/0
  8624 ;;		Unchanged: 0/0
  8625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;Total ram usage:        2 bytes
  8631 ;; Hardware stack levels used:    1
  8632 ;; Hardware stack levels required when called:    8
  8633 ;; This function calls:
  8634 ;;		_DimmerLightsPointSelect
  8635 ;;		_getPercentValue
  8636 ;; This function is called by:
  8637 ;;		_setRF_DimmerValue
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           
  8642                           ;psect for function _setDimmerLights_AdjRF
  8643  1F11                     _setDimmerLights_AdjRF:	
  8644                           
  8645                           ;incstack = 0
  8646                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8647                           ;setDimmerLights_AdjRF@lights stored from wreg
  8648  1F11  0020               	movlb	0	; select bank0
  8649  1F12  00E0               	movwf	setDimmerLights_AdjRF@lights
  8650                           
  8651                           ;Dimmer_B1.c: 690: DimmerLightsPointSelect(lights);
  8652  1F13  0860               	movf	setDimmerLights_AdjRF@lights,w
  8653  1F14  319C  244E  319F   	fcall	_DimmerLightsPointSelect
  8654                           
  8655                           ;Dimmer_B1.c: 691: DimmerLights->AdjRF = 1;
  8656  1F17  0020               	movlb	0	; select bank0
  8657  1F18  086B               	movf	_DimmerLights,w
  8658  1F19  0086               	movwf	6
  8659  1F1A  3001               	movlw	1	; select bank2/3
  8660  1F1B  0087               	movwf	7
  8661  1F1C  1501               	bsf	1,2
  8662                           
  8663                           ;Dimmer_B1.c: 692: DimmerLights->Signal = 1;
  8664  1F1D  086B               	movf	_DimmerLights,w
  8665  1F1E  0086               	movwf	6
  8666  1F1F  3001               	movlw	1	; select bank2/3
  8667  1F20  0087               	movwf	7
  8668  1F21  1481               	bsf	1,1
  8669                           
  8670                           ;Dimmer_B1.c: 693: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8671  1F22  086D               	movf	_product,w
  8672  1F23  3E09               	addlw	9
  8673  1F24  0086               	movwf	6
  8674  1F25  3002               	movlw	2	; select bank4/5
  8675  1F26  0087               	movwf	7
  8676  1F27  0801               	movf	1,w
  8677  1F28  3196  2622         	fcall	_getPercentValue
  8678  1F2A  0020               	movlb	0	; select bank0
  8679  1F2B  00DF               	movwf	??_setDimmerLights_AdjRF
  8680  1F2C  086B               	movf	_DimmerLights,w
  8681  1F2D  3E05               	addlw	5
  8682  1F2E  0086               	movwf	6
  8683  1F2F  3001               	movlw	1	; select bank2/3
  8684  1F30  0087               	movwf	7
  8685  1F31  085F               	movf	??_setDimmerLights_AdjRF,w
  8686  1F32  0081               	movwf	1
  8687  1F33  0008               	return
  8688  1F34                     __end_of_setDimmerLights_AdjRF:	
  8689                           
  8690                           	psect	text39
  8691  1622                     __ptext39:	
  8692 ;; *************** function _getPercentValue *****************
  8693 ;; Defined at:
  8694 ;;		line 761 in file "../src/Dimmer_B1.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  value           1    wreg     unsigned char 
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;  value           1   59[BANK0 ] unsigned char 
  8699 ;;  i               3   60[BANK0 ] float 
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  1    wreg      unsigned char 
  8702 ;; Registers used:
  8703 ;;		wreg, status,2, status,0, pclath, cstack
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;Total ram usage:        6 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    7
  8716 ;; This function calls:
  8717 ;;		___awtoft
  8718 ;;		___ftadd
  8719 ;;		___ftdiv
  8720 ;;		___ftmul
  8721 ;;		___fttol
  8722 ;; This function is called by:
  8723 ;;		_setDimmerLights_AdjRF
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           
  8728                           ;psect for function _getPercentValue
  8729  1622                     _getPercentValue:	
  8730                           
  8731                           ;incstack = 0
  8732                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8733                           ;getPercentValue@value stored from wreg
  8734  1622  0020               	movlb	0	; select bank0
  8735  1623  00DB               	movwf	getPercentValue@value
  8736                           
  8737                           ;Dimmer_B1.c: 763: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8738  1624  3000               	movlw	0
  8739  1625  00DC               	movwf	getPercentValue@i
  8740  1626  30E0               	movlw	224
  8741  1627  00DD               	movwf	getPercentValue@i+1
  8742  1628  3041               	movlw	65
  8743  1629  00DE               	movwf	getPercentValue@i+2
  8744                           
  8745                           ;Dimmer_B1.c: 764: i /= 100;
  8746  162A  3000               	movlw	0
  8747  162B  00AE               	movwf	___ftdiv@f2
  8748  162C  30C8               	movlw	200
  8749  162D  00AF               	movwf	___ftdiv@f2+1
  8750  162E  3042               	movlw	66
  8751  162F  00B0               	movwf	___ftdiv@f2+2
  8752  1630  085C               	movf	getPercentValue@i,w
  8753  1631  00B1               	movwf	___ftdiv@f1
  8754  1632  085D               	movf	getPercentValue@i+1,w
  8755  1633  00B2               	movwf	___ftdiv@f1+1
  8756  1634  085E               	movf	getPercentValue@i+2,w
  8757  1635  00B3               	movwf	___ftdiv@f1+2
  8758  1636  318D  25E6  3196   	fcall	___ftdiv
  8759  1639  0020               	movlb	0	; select bank0
  8760  163A  082E               	movf	?___ftdiv,w
  8761  163B  00DC               	movwf	getPercentValue@i
  8762  163C  082F               	movf	?___ftdiv+1,w
  8763  163D  00DD               	movwf	getPercentValue@i+1
  8764  163E  0830               	movf	?___ftdiv+2,w
  8765  163F  00DE               	movwf	getPercentValue@i+2
  8766                           
  8767                           ;Dimmer_B1.c: 765: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8768  1640  085B               	movf	getPercentValue@value,w
  8769  1641  00D9               	movwf	??_getPercentValue
  8770  1642  01DA               	clrf	??_getPercentValue+1
  8771  1643  09D9               	comf	??_getPercentValue,f
  8772  1644  09DA               	comf	??_getPercentValue+1,f
  8773  1645  0AD9               	incf	??_getPercentValue,f
  8774  1646  1903               	skipnz
  8775  1647  0ADA               	incf	??_getPercentValue+1,f
  8776  1648  0859               	movf	??_getPercentValue,w
  8777  1649  3E64               	addlw	100
  8778  164A  00A8               	movwf	___awtoft@c
  8779  164B  3000               	movlw	0
  8780  164C  3D5A               	addwfc	??_getPercentValue+1,w
  8781  164D  00A9               	movwf	___awtoft@c+1
  8782  164E  319E  26AA  3196   	fcall	___awtoft
  8783  1651  0020               	movlb	0	; select bank0
  8784  1652  0828               	movf	?___awtoft,w
  8785  1653  00B1               	movwf	___ftmul@f2
  8786  1654  0829               	movf	?___awtoft+1,w
  8787  1655  00B2               	movwf	___ftmul@f2+1
  8788  1656  082A               	movf	?___awtoft+2,w
  8789  1657  00B3               	movwf	___ftmul@f2+2
  8790  1658  085C               	movf	getPercentValue@i,w
  8791  1659  00AE               	movwf	___ftmul@f1
  8792  165A  085D               	movf	getPercentValue@i+1,w
  8793  165B  00AF               	movwf	___ftmul@f1+1
  8794  165C  085E               	movf	getPercentValue@i+2,w
  8795  165D  00B0               	movwf	___ftmul@f1+2
  8796  165E  318E  268F  3196   	fcall	___ftmul
  8797  1661  0020               	movlb	0	; select bank0
  8798  1662  082E               	movf	?___ftmul,w
  8799  1663  00C1               	movwf	___ftadd@f2
  8800  1664  082F               	movf	?___ftmul+1,w
  8801  1665  00C2               	movwf	___ftadd@f2+1
  8802  1666  0830               	movf	?___ftmul+2,w
  8803  1667  00C3               	movwf	___ftadd@f2+2
  8804  1668  3000               	movlw	0
  8805  1669  00BE               	movwf	___ftadd@f1
  8806  166A  3000               	movlw	0
  8807  166B  00BF               	movwf	___ftadd@f1+1
  8808  166C  3042               	movlw	66
  8809  166D  00C0               	movwf	___ftadd@f1+2
  8810  166E  3184  24C6  3196   	fcall	___ftadd
  8811  1671  0020               	movlb	0	; select bank0
  8812  1672  083E               	movf	?___ftadd,w
  8813  1673  00CB               	movwf	___fttol@f1
  8814  1674  083F               	movf	?___ftadd+1,w
  8815  1675  00CC               	movwf	___fttol@f1+1
  8816  1676  0840               	movf	?___ftadd+2,w
  8817  1677  00CD               	movwf	___fttol@f1+2
  8818  1678  318C  244C         	fcall	___fttol
  8819  167A  0020               	movlb	0	; select bank0
  8820  167B  084B               	movf	?___fttol,w
  8821  167C  0008               	return
  8822  167D                     __end_of_getPercentValue:	
  8823                           
  8824                           	psect	text40
  8825  0E8F                     __ptext40:	
  8826 ;; *************** function ___ftmul *****************
  8827 ;; Defined at:
  8828 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8829 ;; Parameters:    Size  Location     Type
  8830 ;;  f1              3   14[BANK0 ] float 
  8831 ;;  f2              3   17[BANK0 ] float 
  8832 ;; Auto vars:     Size  Location     Type
  8833 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8834 ;;  sign            1   29[BANK0 ] unsigned char 
  8835 ;;  cntr            1   28[BANK0 ] unsigned char 
  8836 ;;  exp             1   24[BANK0 ] unsigned char 
  8837 ;; Return value:  Size  Location     Type
  8838 ;;                  3   14[BANK0 ] float 
  8839 ;; Registers used:
  8840 ;;		wreg, status,2, status,0, pclath, cstack
  8841 ;; Tracked objects:
  8842 ;;		On entry : 0/0
  8843 ;;		On exit  : 0/0
  8844 ;;		Unchanged: 0/0
  8845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8846 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;Total ram usage:       16 bytes
  8851 ;; Hardware stack levels used:    1
  8852 ;; Hardware stack levels required when called:    6
  8853 ;; This function calls:
  8854 ;;		___ftpack
  8855 ;; This function is called by:
  8856 ;;		_getPercentValue
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           
  8861                           ;psect for function ___ftmul
  8862  0E8F                     ___ftmul:	
  8863                           
  8864                           ;incstack = 0
  8865                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8866  0E8F  0020               	movlb	0	; select bank0
  8867  0E90  082E               	movf	___ftmul@f1,w
  8868  0E91  00B4               	movwf	??___ftmul
  8869  0E92  082F               	movf	___ftmul@f1+1,w
  8870  0E93  00B5               	movwf	??___ftmul+1
  8871  0E94  0830               	movf	___ftmul@f1+2,w
  8872  0E95  00B6               	movwf	??___ftmul+2
  8873  0E96  1003               	clrc
  8874  0E97  0D35               	rlf	??___ftmul+1,w
  8875  0E98  0D36               	rlf	??___ftmul+2,w
  8876  0E99  00B7               	movwf	??___ftmul+3
  8877  0E9A  0837               	movf	??___ftmul+3,w
  8878  0E9B  00B8               	movwf	___ftmul@exp
  8879  0E9C  08B8               	movf	___ftmul@exp,f
  8880  0E9D  1D03               	skipz
  8881  0E9E  2EA6               	goto	l6027
  8882  0E9F  3000               	movlw	0
  8883  0EA0  00AE               	movwf	?___ftmul
  8884  0EA1  3000               	movlw	0
  8885  0EA2  00AF               	movwf	?___ftmul+1
  8886  0EA3  3000               	movlw	0
  8887  0EA4  00B0               	movwf	?___ftmul+2
  8888  0EA5  0008               	return
  8889  0EA6                     l6027:	
  8890  0EA6  0831               	movf	___ftmul@f2,w
  8891  0EA7  00B4               	movwf	??___ftmul
  8892  0EA8  0832               	movf	___ftmul@f2+1,w
  8893  0EA9  00B5               	movwf	??___ftmul+1
  8894  0EAA  0833               	movf	___ftmul@f2+2,w
  8895  0EAB  00B6               	movwf	??___ftmul+2
  8896  0EAC  1003               	clrc
  8897  0EAD  0D35               	rlf	??___ftmul+1,w
  8898  0EAE  0D36               	rlf	??___ftmul+2,w
  8899  0EAF  00B7               	movwf	??___ftmul+3
  8900  0EB0  0837               	movf	??___ftmul+3,w
  8901  0EB1  00BD               	movwf	___ftmul@sign
  8902  0EB2  08BD               	movf	___ftmul@sign,f
  8903  0EB3  1D03               	skipz
  8904  0EB4  2EBC               	goto	l6033
  8905  0EB5  3000               	movlw	0
  8906  0EB6  00AE               	movwf	?___ftmul
  8907  0EB7  3000               	movlw	0
  8908  0EB8  00AF               	movwf	?___ftmul+1
  8909  0EB9  3000               	movlw	0
  8910  0EBA  00B0               	movwf	?___ftmul+2
  8911  0EBB  0008               	return
  8912  0EBC                     l6033:	
  8913  0EBC  083D               	movf	___ftmul@sign,w
  8914  0EBD  3E7B               	addlw	123
  8915  0EBE  00B4               	movwf	??___ftmul
  8916  0EBF  0834               	movf	??___ftmul,w
  8917  0EC0  07B8               	addwf	___ftmul@exp,f
  8918  0EC1  082E               	movf	___ftmul@f1,w
  8919  0EC2  00B4               	movwf	??___ftmul
  8920  0EC3  082F               	movf	___ftmul@f1+1,w
  8921  0EC4  00B5               	movwf	??___ftmul+1
  8922  0EC5  0830               	movf	___ftmul@f1+2,w
  8923  0EC6  00B6               	movwf	??___ftmul+2
  8924  0EC7  3010               	movlw	16
  8925  0EC8                     u4695:	
  8926  0EC8  36B6               	lsrf	??___ftmul+2,f
  8927  0EC9  0CB5               	rrf	??___ftmul+1,f
  8928  0ECA  0CB4               	rrf	??___ftmul,f
  8929  0ECB  0B89               	decfsz	9,f
  8930  0ECC  2EC8               	goto	u4695
  8931  0ECD  0834               	movf	??___ftmul,w
  8932  0ECE  00B7               	movwf	??___ftmul+3
  8933  0ECF  0837               	movf	??___ftmul+3,w
  8934  0ED0  00BD               	movwf	___ftmul@sign
  8935  0ED1  0831               	movf	___ftmul@f2,w
  8936  0ED2  00B4               	movwf	??___ftmul
  8937  0ED3  0832               	movf	___ftmul@f2+1,w
  8938  0ED4  00B5               	movwf	??___ftmul+1
  8939  0ED5  0833               	movf	___ftmul@f2+2,w
  8940  0ED6  00B6               	movwf	??___ftmul+2
  8941  0ED7  3010               	movlw	16
  8942  0ED8                     u4705:	
  8943  0ED8  36B6               	lsrf	??___ftmul+2,f
  8944  0ED9  0CB5               	rrf	??___ftmul+1,f
  8945  0EDA  0CB4               	rrf	??___ftmul,f
  8946  0EDB  0B89               	decfsz	9,f
  8947  0EDC  2ED8               	goto	u4705
  8948  0EDD  0834               	movf	??___ftmul,w
  8949  0EDE  00B7               	movwf	??___ftmul+3
  8950  0EDF  0837               	movf	??___ftmul+3,w
  8951  0EE0  06BD               	xorwf	___ftmul@sign,f
  8952  0EE1  3080               	movlw	128
  8953  0EE2  00B4               	movwf	??___ftmul
  8954  0EE3  0834               	movf	??___ftmul,w
  8955  0EE4  05BD               	andwf	___ftmul@sign,f
  8956  0EE5  17AF               	bsf	___ftmul@f1+1,7
  8957  0EE6  17B2               	bsf	___ftmul@f2+1,7
  8958  0EE7  30FF               	movlw	255
  8959  0EE8  05B1               	andwf	___ftmul@f2,f
  8960  0EE9  30FF               	movlw	255
  8961  0EEA  05B2               	andwf	___ftmul@f2+1,f
  8962  0EEB  3000               	movlw	0
  8963  0EEC  05B3               	andwf	___ftmul@f2+2,f
  8964  0EED  3000               	movlw	0
  8965  0EEE  00B9               	movwf	___ftmul@f3_as_product
  8966  0EEF  3000               	movlw	0
  8967  0EF0  00BA               	movwf	___ftmul@f3_as_product+1
  8968  0EF1  3000               	movlw	0
  8969  0EF2  00BB               	movwf	___ftmul@f3_as_product+2
  8970  0EF3  3007               	movlw	7
  8971  0EF4  00B4               	movwf	??___ftmul
  8972  0EF5  0834               	movf	??___ftmul,w
  8973  0EF6  00BC               	movwf	___ftmul@cntr
  8974  0EF7                     l6045:	
  8975  0EF7  1C2E               	btfss	___ftmul@f1,0
  8976  0EF8  2EFF               	goto	l6049
  8977  0EF9  0831               	movf	___ftmul@f2,w
  8978  0EFA  07B9               	addwf	___ftmul@f3_as_product,f
  8979  0EFB  0832               	movf	___ftmul@f2+1,w
  8980  0EFC  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8981  0EFD  0833               	movf	___ftmul@f2+2,w
  8982  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8983  0EFF                     l6049:	
  8984  0EFF  3001               	movlw	1
  8985  0F00                     u4725:	
  8986  0F00  36B0               	lsrf	___ftmul@f1+2,f
  8987  0F01  0CAF               	rrf	___ftmul@f1+1,f
  8988  0F02  0CAE               	rrf	___ftmul@f1,f
  8989  0F03  0B89               	decfsz	9,f
  8990  0F04  2F00               	goto	u4725
  8991  0F05  3001               	movlw	1
  8992  0F06                     u4735:	
  8993  0F06  35B1               	lslf	___ftmul@f2,f
  8994  0F07  0DB2               	rlf	___ftmul@f2+1,f
  8995  0F08  0DB3               	rlf	___ftmul@f2+2,f
  8996  0F09  0B89               	decfsz	9,f
  8997  0F0A  2F06               	goto	u4735
  8998  0F0B  3001               	movlw	1
  8999  0F0C  02BC               	subwf	___ftmul@cntr,f
  9000  0F0D  1D03               	btfss	3,2
  9001  0F0E  2EF7               	goto	l6045
  9002  0F0F  3009               	movlw	9
  9003  0F10  00B4               	movwf	??___ftmul
  9004  0F11  0834               	movf	??___ftmul,w
  9005  0F12  00BC               	movwf	___ftmul@cntr
  9006  0F13                     l6057:	
  9007  0F13  1C2E               	btfss	___ftmul@f1,0
  9008  0F14  2F1B               	goto	l6061
  9009  0F15  0831               	movf	___ftmul@f2,w
  9010  0F16  07B9               	addwf	___ftmul@f3_as_product,f
  9011  0F17  0832               	movf	___ftmul@f2+1,w
  9012  0F18  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9013  0F19  0833               	movf	___ftmul@f2+2,w
  9014  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9015  0F1B                     l6061:	
  9016  0F1B  3001               	movlw	1
  9017  0F1C                     u4765:	
  9018  0F1C  36B0               	lsrf	___ftmul@f1+2,f
  9019  0F1D  0CAF               	rrf	___ftmul@f1+1,f
  9020  0F1E  0CAE               	rrf	___ftmul@f1,f
  9021  0F1F  0B89               	decfsz	9,f
  9022  0F20  2F1C               	goto	u4765
  9023  0F21  3001               	movlw	1
  9024  0F22                     u4775:	
  9025  0F22  36BB               	lsrf	___ftmul@f3_as_product+2,f
  9026  0F23  0CBA               	rrf	___ftmul@f3_as_product+1,f
  9027  0F24  0CB9               	rrf	___ftmul@f3_as_product,f
  9028  0F25  0B89               	decfsz	9,f
  9029  0F26  2F22               	goto	u4775
  9030  0F27  3001               	movlw	1
  9031  0F28  02BC               	subwf	___ftmul@cntr,f
  9032  0F29  1D03               	btfss	3,2
  9033  0F2A  2F13               	goto	l6057
  9034  0F2B  0839               	movf	___ftmul@f3_as_product,w
  9035  0F2C  00A0               	movwf	___ftpack@arg
  9036  0F2D  083A               	movf	___ftmul@f3_as_product+1,w
  9037  0F2E  00A1               	movwf	___ftpack@arg+1
  9038  0F2F  083B               	movf	___ftmul@f3_as_product+2,w
  9039  0F30  00A2               	movwf	___ftpack@arg+2
  9040  0F31  0838               	movf	___ftmul@exp,w
  9041  0F32  00B4               	movwf	??___ftmul
  9042  0F33  0834               	movf	??___ftmul,w
  9043  0F34  00A3               	movwf	___ftpack@exp
  9044  0F35  083D               	movf	___ftmul@sign,w
  9045  0F36  00B5               	movwf	??___ftmul+1
  9046  0F37  0835               	movf	??___ftmul+1,w
  9047  0F38  00A4               	movwf	___ftpack@sign
  9048  0F39  3197  273A         	fcall	___ftpack
  9049  0F3B  0020               	movlb	0	; select bank0
  9050  0F3C  0820               	movf	?___ftpack,w
  9051  0F3D  00AE               	movwf	?___ftmul
  9052  0F3E  0821               	movf	?___ftpack+1,w
  9053  0F3F  00AF               	movwf	?___ftmul+1
  9054  0F40  0822               	movf	?___ftpack+2,w
  9055  0F41  00B0               	movwf	?___ftmul+2
  9056  0F42  0008               	return
  9057  0F43                     __end_of___ftmul:	
  9058                           
  9059                           	psect	text41
  9060  04C6                     __ptext41:	
  9061 ;; *************** function ___ftadd *****************
  9062 ;; Defined at:
  9063 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  9064 ;; Parameters:    Size  Location     Type
  9065 ;;  f1              3   30[BANK0 ] float 
  9066 ;;  f2              3   33[BANK0 ] float 
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;  exp1            1   42[BANK0 ] unsigned char 
  9069 ;;  exp2            1   41[BANK0 ] unsigned char 
  9070 ;;  sign            1   40[BANK0 ] unsigned char 
  9071 ;; Return value:  Size  Location     Type
  9072 ;;                  3   30[BANK0 ] float 
  9073 ;; Registers used:
  9074 ;;		wreg, status,2, status,0, pclath, cstack
  9075 ;; Tracked objects:
  9076 ;;		On entry : 0/0
  9077 ;;		On exit  : 0/0
  9078 ;;		Unchanged: 0/0
  9079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9080 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;Total ram usage:       13 bytes
  9085 ;; Hardware stack levels used:    1
  9086 ;; Hardware stack levels required when called:    6
  9087 ;; This function calls:
  9088 ;;		___ftpack
  9089 ;; This function is called by:
  9090 ;;		_getPercentValue
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           
  9095                           ;psect for function ___ftadd
  9096  04C6                     ___ftadd:	
  9097                           
  9098                           ;incstack = 0
  9099                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9100  04C6  0020               	movlb	0	; select bank0
  9101  04C7  083E               	movf	___ftadd@f1,w
  9102  04C8  00C4               	movwf	??___ftadd
  9103  04C9  083F               	movf	___ftadd@f1+1,w
  9104  04CA  00C5               	movwf	??___ftadd+1
  9105  04CB  0840               	movf	___ftadd@f1+2,w
  9106  04CC  00C6               	movwf	??___ftadd+2
  9107  04CD  1003               	clrc
  9108  04CE  0D45               	rlf	??___ftadd+1,w
  9109  04CF  0D46               	rlf	??___ftadd+2,w
  9110  04D0  00C7               	movwf	??___ftadd+3
  9111  04D1  0847               	movf	??___ftadd+3,w
  9112  04D2  00CA               	movwf	___ftadd@exp1
  9113  04D3  0841               	movf	___ftadd@f2,w
  9114  04D4  00C4               	movwf	??___ftadd
  9115  04D5  0842               	movf	___ftadd@f2+1,w
  9116  04D6  00C5               	movwf	??___ftadd+1
  9117  04D7  0843               	movf	___ftadd@f2+2,w
  9118  04D8  00C6               	movwf	??___ftadd+2
  9119  04D9  1003               	clrc
  9120  04DA  0D45               	rlf	??___ftadd+1,w
  9121  04DB  0D46               	rlf	??___ftadd+2,w
  9122  04DC  00C7               	movwf	??___ftadd+3
  9123  04DD  0847               	movf	??___ftadd+3,w
  9124  04DE  00C9               	movwf	___ftadd@exp2
  9125  04DF  084A               	movf	___ftadd@exp1,w
  9126  04E0  1903               	btfsc	3,2
  9127  04E1  2CEE               	goto	l5915
  9128  04E2  0849               	movf	___ftadd@exp2,w
  9129  04E3  024A               	subwf	___ftadd@exp1,w
  9130  04E4  1803               	skipnc
  9131  04E5  2CF5               	goto	l5919
  9132  04E6  034A               	decf	___ftadd@exp1,w
  9133  04E7  3AFF               	xorlw	255
  9134  04E8  0749               	addwf	___ftadd@exp2,w
  9135  04E9  00C4               	movwf	??___ftadd
  9136  04EA  3019               	movlw	25
  9137  04EB  0244               	subwf	??___ftadd,w
  9138  04EC  1C03               	skipc
  9139  04ED  2CF5               	goto	l5919
  9140  04EE                     l5915:	
  9141  04EE  0841               	movf	___ftadd@f2,w
  9142  04EF  00BE               	movwf	?___ftadd
  9143  04F0  0842               	movf	___ftadd@f2+1,w
  9144  04F1  00BF               	movwf	?___ftadd+1
  9145  04F2  0843               	movf	___ftadd@f2+2,w
  9146  04F3  00C0               	movwf	?___ftadd+2
  9147  04F4  0008               	return
  9148  04F5                     l5919:	
  9149  04F5  0849               	movf	___ftadd@exp2,w
  9150  04F6  1903               	btfsc	3,2
  9151  04F7  0008               	return
  9152  04F8  084A               	movf	___ftadd@exp1,w
  9153  04F9  0249               	subwf	___ftadd@exp2,w
  9154  04FA  1803               	skipnc
  9155  04FB  2D04               	goto	l5925
  9156  04FC  0349               	decf	___ftadd@exp2,w
  9157  04FD  3AFF               	xorlw	255
  9158  04FE  074A               	addwf	___ftadd@exp1,w
  9159  04FF  00C4               	movwf	??___ftadd
  9160  0500  3019               	movlw	25
  9161  0501  0244               	subwf	??___ftadd,w
  9162  0502  1803               	btfsc	3,0
  9163  0503  0008               	return
  9164  0504                     l5925:	
  9165  0504  3006               	movlw	6
  9166  0505  00C4               	movwf	??___ftadd
  9167  0506  0844               	movf	??___ftadd,w
  9168  0507  00C8               	movwf	___ftadd@sign
  9169  0508  1BC0               	btfsc	___ftadd@f1+2,7
  9170  0509  17C8               	bsf	___ftadd@sign,7
  9171  050A  1BC3               	btfsc	___ftadd@f2+2,7
  9172  050B  1748               	bsf	___ftadd@sign,6
  9173  050C  17BF               	bsf	___ftadd@f1+1,7
  9174  050D  30FF               	movlw	255
  9175  050E  05BE               	andwf	___ftadd@f1,f
  9176  050F  30FF               	movlw	255
  9177  0510  05BF               	andwf	___ftadd@f1+1,f
  9178  0511  3000               	movlw	0
  9179  0512  05C0               	andwf	___ftadd@f1+2,f
  9180  0513  17C2               	bsf	___ftadd@f2+1,7
  9181  0514  30FF               	movlw	255
  9182  0515  05C1               	andwf	___ftadd@f2,f
  9183  0516  30FF               	movlw	255
  9184  0517  05C2               	andwf	___ftadd@f2+1,f
  9185  0518  3000               	movlw	0
  9186  0519  05C3               	andwf	___ftadd@f2+2,f
  9187  051A  0849               	movf	___ftadd@exp2,w
  9188  051B  024A               	subwf	___ftadd@exp1,w
  9189  051C  1803               	skipnc
  9190  051D  2D40               	goto	l5947
  9191  051E                     l5937:	
  9192  051E  3001               	movlw	1
  9193  051F                     u4455:	
  9194  051F  35C1               	lslf	___ftadd@f2,f
  9195  0520  0DC2               	rlf	___ftadd@f2+1,f
  9196  0521  0DC3               	rlf	___ftadd@f2+2,f
  9197  0522  0B89               	decfsz	9,f
  9198  0523  2D1F               	goto	u4455
  9199  0524  3001               	movlw	1
  9200  0525  02C9               	subwf	___ftadd@exp2,f
  9201  0526  0849               	movf	___ftadd@exp2,w
  9202  0527  064A               	xorwf	___ftadd@exp1,w
  9203  0528  1903               	skipnz
  9204  0529  2D3B               	goto	l5945
  9205  052A  3001               	movlw	1
  9206  052B  02C8               	subwf	___ftadd@sign,f
  9207  052C  0848               	movf	___ftadd@sign,w
  9208  052D  3907               	andlw	7
  9209  052E  1903               	btfsc	3,2
  9210  052F  2D3B               	goto	l5945
  9211  0530  2D1E               	goto	l5937
  9212  0531                     l5943:	
  9213  0531  3001               	movlw	1
  9214  0532                     u4485:	
  9215  0532  36C0               	lsrf	___ftadd@f1+2,f
  9216  0533  0CBF               	rrf	___ftadd@f1+1,f
  9217  0534  0CBE               	rrf	___ftadd@f1,f
  9218  0535  0B89               	decfsz	9,f
  9219  0536  2D32               	goto	u4485
  9220  0537  3001               	movlw	1
  9221  0538  00C4               	movwf	??___ftadd
  9222  0539  0844               	movf	??___ftadd,w
  9223  053A  07CA               	addwf	___ftadd@exp1,f
  9224  053B                     l5945:	
  9225  053B  084A               	movf	___ftadd@exp1,w
  9226  053C  0649               	xorwf	___ftadd@exp2,w
  9227  053D  1903               	btfsc	3,2
  9228  053E  2D65               	goto	l3056
  9229  053F  2D31               	goto	l5943
  9230  0540                     l5947:	
  9231  0540  084A               	movf	___ftadd@exp1,w
  9232  0541  0249               	subwf	___ftadd@exp2,w
  9233  0542  1803               	skipnc
  9234  0543  2D65               	goto	l3056
  9235  0544                     l5949:	
  9236  0544  3001               	movlw	1
  9237  0545                     u4515:	
  9238  0545  35BE               	lslf	___ftadd@f1,f
  9239  0546  0DBF               	rlf	___ftadd@f1+1,f
  9240  0547  0DC0               	rlf	___ftadd@f1+2,f
  9241  0548  0B89               	decfsz	9,f
  9242  0549  2D45               	goto	u4515
  9243  054A  3001               	movlw	1
  9244  054B  02CA               	subwf	___ftadd@exp1,f
  9245  054C  0849               	movf	___ftadd@exp2,w
  9246  054D  064A               	xorwf	___ftadd@exp1,w
  9247  054E  1903               	skipnz
  9248  054F  2D61               	goto	l5957
  9249  0550  3001               	movlw	1
  9250  0551  02C8               	subwf	___ftadd@sign,f
  9251  0552  0848               	movf	___ftadd@sign,w
  9252  0553  3907               	andlw	7
  9253  0554  1903               	btfsc	3,2
  9254  0555  2D61               	goto	l5957
  9255  0556  2D44               	goto	l5949
  9256  0557                     l5955:	
  9257  0557  3001               	movlw	1
  9258  0558                     u4545:	
  9259  0558  36C3               	lsrf	___ftadd@f2+2,f
  9260  0559  0CC2               	rrf	___ftadd@f2+1,f
  9261  055A  0CC1               	rrf	___ftadd@f2,f
  9262  055B  0B89               	decfsz	9,f
  9263  055C  2D58               	goto	u4545
  9264  055D  3001               	movlw	1
  9265  055E  00C4               	movwf	??___ftadd
  9266  055F  0844               	movf	??___ftadd,w
  9267  0560  07C9               	addwf	___ftadd@exp2,f
  9268  0561                     l5957:	
  9269  0561  084A               	movf	___ftadd@exp1,w
  9270  0562  0649               	xorwf	___ftadd@exp2,w
  9271  0563  1D03               	skipz
  9272  0564  2D57               	goto	l5955
  9273  0565                     l3056:	
  9274  0565  1FC8               	btfss	___ftadd@sign,7
  9275  0566  2D77               	goto	l5961
  9276  0567  30FF               	movlw	255
  9277  0568  06BE               	xorwf	___ftadd@f1,f
  9278  0569  30FF               	movlw	255
  9279  056A  06BF               	xorwf	___ftadd@f1+1,f
  9280  056B  30FF               	movlw	255
  9281  056C  06C0               	xorwf	___ftadd@f1+2,f
  9282  056D  3001               	movlw	1
  9283  056E  07BE               	addwf	___ftadd@f1,f
  9284  056F  3000               	movlw	0
  9285  0570  1803               	skipnc
  9286  0571  3001               	movlw	1
  9287  0572  07BF               	addwf	___ftadd@f1+1,f
  9288  0573  3000               	movlw	0
  9289  0574  1803               	skipnc
  9290  0575  3001               	movlw	1
  9291  0576  07C0               	addwf	___ftadd@f1+2,f
  9292  0577                     l5961:	
  9293  0577  1F48               	btfss	___ftadd@sign,6
  9294  0578  2D89               	goto	l5965
  9295  0579  30FF               	movlw	255
  9296  057A  06C1               	xorwf	___ftadd@f2,f
  9297  057B  30FF               	movlw	255
  9298  057C  06C2               	xorwf	___ftadd@f2+1,f
  9299  057D  30FF               	movlw	255
  9300  057E  06C3               	xorwf	___ftadd@f2+2,f
  9301  057F  3001               	movlw	1
  9302  0580  07C1               	addwf	___ftadd@f2,f
  9303  0581  3000               	movlw	0
  9304  0582  1803               	skipnc
  9305  0583  3001               	movlw	1
  9306  0584  07C2               	addwf	___ftadd@f2+1,f
  9307  0585  3000               	movlw	0
  9308  0586  1803               	skipnc
  9309  0587  3001               	movlw	1
  9310  0588  07C3               	addwf	___ftadd@f2+2,f
  9311  0589                     l5965:	
  9312  0589  01C8               	clrf	___ftadd@sign
  9313  058A  083E               	movf	___ftadd@f1,w
  9314  058B  07C1               	addwf	___ftadd@f2,f
  9315  058C  083F               	movf	___ftadd@f1+1,w
  9316  058D  3DC2               	addwfc	___ftadd@f2+1,f
  9317  058E  0840               	movf	___ftadd@f1+2,w
  9318  058F  3DC3               	addwfc	___ftadd@f2+2,f
  9319  0590  1FC3               	btfss	___ftadd@f2+2,7
  9320  0591  2DA4               	goto	l5975
  9321  0592  30FF               	movlw	255
  9322  0593  06C1               	xorwf	___ftadd@f2,f
  9323  0594  30FF               	movlw	255
  9324  0595  06C2               	xorwf	___ftadd@f2+1,f
  9325  0596  30FF               	movlw	255
  9326  0597  06C3               	xorwf	___ftadd@f2+2,f
  9327  0598  3001               	movlw	1
  9328  0599  07C1               	addwf	___ftadd@f2,f
  9329  059A  3000               	movlw	0
  9330  059B  1803               	skipnc
  9331  059C  3001               	movlw	1
  9332  059D  07C2               	addwf	___ftadd@f2+1,f
  9333  059E  3000               	movlw	0
  9334  059F  1803               	skipnc
  9335  05A0  3001               	movlw	1
  9336  05A1  07C3               	addwf	___ftadd@f2+2,f
  9337  05A2  01C8               	clrf	___ftadd@sign
  9338  05A3  0AC8               	incf	___ftadd@sign,f
  9339  05A4                     l5975:	
  9340  05A4  0841               	movf	___ftadd@f2,w
  9341  05A5  00A0               	movwf	___ftpack@arg
  9342  05A6  0842               	movf	___ftadd@f2+1,w
  9343  05A7  00A1               	movwf	___ftpack@arg+1
  9344  05A8  0843               	movf	___ftadd@f2+2,w
  9345  05A9  00A2               	movwf	___ftpack@arg+2
  9346  05AA  084A               	movf	___ftadd@exp1,w
  9347  05AB  00C4               	movwf	??___ftadd
  9348  05AC  0844               	movf	??___ftadd,w
  9349  05AD  00A3               	movwf	___ftpack@exp
  9350  05AE  0848               	movf	___ftadd@sign,w
  9351  05AF  00C5               	movwf	??___ftadd+1
  9352  05B0  0845               	movf	??___ftadd+1,w
  9353  05B1  00A4               	movwf	___ftpack@sign
  9354  05B2  3197  273A         	fcall	___ftpack
  9355  05B4  0020               	movlb	0	; select bank0
  9356  05B5  0820               	movf	?___ftpack,w
  9357  05B6  00BE               	movwf	?___ftadd
  9358  05B7  0821               	movf	?___ftpack+1,w
  9359  05B8  00BF               	movwf	?___ftadd+1
  9360  05B9  0822               	movf	?___ftpack+2,w
  9361  05BA  00C0               	movwf	?___ftadd+2
  9362  05BB  0008               	return
  9363  05BC                     __end_of___ftadd:	
  9364                           
  9365                           	psect	text42
  9366  1BF5                     __ptext42:	
  9367 ;; *************** function _getBuz_GO *****************
  9368 ;; Defined at:
  9369 ;;		line 82 in file "../src/Buzzer_B1.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;		None
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;  i               2    4[BANK0 ] int 
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  2    0[BANK0 ] int 
  9376 ;; Registers used:
  9377 ;;		wreg, status,2, status,0
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9383 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;Total ram usage:        6 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    5
  9390 ;; This function calls:
  9391 ;;		Nothing
  9392 ;; This function is called by:
  9393 ;;		_setRF_Main
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           
  9398                           ;psect for function _getBuz_GO
  9399  1BF5                     _getBuz_GO:	
  9400                           
  9401                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9402                           
  9403                           ;incstack = 0
  9404                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9405  1BF5  0021               	movlb	1	; select bank1
  9406  1BF6  0C32               	rrf	_Buz1^(0+128),w
  9407  1BF7  3901               	andlw	1
  9408  1BF8  0020               	movlb	0	; select bank0
  9409  1BF9  00A2               	movwf	??_getBuz_GO
  9410  1BFA  01A3               	clrf	??_getBuz_GO+1
  9411  1BFB  0822               	movf	??_getBuz_GO,w
  9412  1BFC  00A4               	movwf	getBuz_GO@i
  9413  1BFD  0823               	movf	??_getBuz_GO+1,w
  9414  1BFE  00A5               	movwf	getBuz_GO@i+1
  9415                           
  9416                           ;Buzzer_B1.c: 84: return i;
  9417  1BFF  0825               	movf	getBuz_GO@i+1,w
  9418  1C00  01A1               	clrf	?_getBuz_GO+1
  9419  1C01  07A1               	addwf	?_getBuz_GO+1,f
  9420  1C02  0824               	movf	getBuz_GO@i,w
  9421  1C03  01A0               	clrf	?_getBuz_GO
  9422  1C04  07A0               	addwf	?_getBuz_GO,f
  9423  1C05  0008               	return
  9424  1C06                     __end_of_getBuz_GO:	
  9425                           
  9426                           	psect	text43
  9427  179B                     __ptext43:	
  9428 ;; *************** function _CC2500_TxData *****************
  9429 ;; Defined at:
  9430 ;;		line 32 in file "../src/CC2500_B1.c"
  9431 ;; Parameters:    Size  Location     Type
  9432 ;;		None
  9433 ;; Auto vars:     Size  Location     Type
  9434 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9435 ;; Return value:  Size  Location     Type
  9436 ;;		None               void
  9437 ;; Registers used:
  9438 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9439 ;; Tracked objects:
  9440 ;;		On entry : 0/0
  9441 ;;		On exit  : 0/0
  9442 ;;		Unchanged: 0/0
  9443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;Total ram usage:        2 bytes
  9449 ;; Hardware stack levels used:    1
  9450 ;; Hardware stack levels required when called:    7
  9451 ;; This function calls:
  9452 ;;		_CC2500_WriteByte
  9453 ;;		_CC2500_WriteCommand
  9454 ;;		_Timeout_Counter
  9455 ;;		_set_TimeoutCleared
  9456 ;; This function is called by:
  9457 ;;		_setRF_Main
  9458 ;; This function uses a non-reentrant model
  9459 ;;
  9460                           
  9461                           
  9462                           ;psect for function _CC2500_TxData
  9463  179B                     _CC2500_TxData:	
  9464                           
  9465                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9466                           ;CC2500_B1.c: 35: RC4 = 0;
  9467                           
  9468                           ;incstack = 0
  9469                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9470  179B  0020               	movlb	0	; select bank0
  9471  179C  120E               	bcf	14,4	;volatile
  9472                           
  9473                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9474  179D  307F               	movlw	127
  9475  179E  00A4               	movwf	??_CC2500_TxData
  9476  179F  0824               	movf	??_CC2500_TxData,w
  9477  17A0  00FA               	movwf	_SPI0Buffer
  9478                           
  9479                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9480  17A1  2FA5               	goto	l9181
  9481  17A2                     l9179:	
  9482                           
  9483                           ;CC2500_B1.c: 38: Timeout_Counter();
  9484  17A2  319C  24C4  3197   	fcall	_Timeout_Counter
  9485  17A5                     l9181:	
  9486  17A5  0020               	movlb	0	; select bank0
  9487  17A6  1D0E               	btfss	14,2	;volatile
  9488  17A7  2FAB               	goto	l9185
  9489  17A8  0021               	movlb	1	; select bank1
  9490  17A9  1D2F               	btfss	(_myMain^(0+128)+15),2
  9491  17AA  2FA2               	goto	l9179
  9492  17AB                     l9185:	
  9493                           
  9494                           ;CC2500_B1.c: 39: };
  9495                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9496  17AB  319A  221C  3197   	fcall	_set_TimeoutCleared
  9497                           
  9498                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9499  17AE  319C  2488  3197   	fcall	_CC2500_WriteByte
  9500                           
  9501                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9502  17B1  0021               	movlb	1	; select bank1
  9503  17B2  0854               	movf	_Tx_Length^(0+128),w
  9504  17B3  0020               	movlb	0	; select bank0
  9505  17B4  00A4               	movwf	??_CC2500_TxData
  9506  17B5  0824               	movf	??_CC2500_TxData,w
  9507  17B6  00FA               	movwf	_SPI0Buffer
  9508                           
  9509                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9510  17B7  319C  2488  3197   	fcall	_CC2500_WriteByte
  9511                           
  9512                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9513  17BA  0020               	movlb	0	; select bank0
  9514  17BB  01A5               	clrf	CC2500_TxData@loop_e
  9515  17BC                     l9199:	
  9516  17BC  0021               	movlb	1	; select bank1
  9517  17BD  0854               	movf	_Tx_Length^(0+128),w
  9518  17BE  0020               	movlb	0	; select bank0
  9519  17BF  0225               	subwf	CC2500_TxData@loop_e,w
  9520  17C0  1803               	btfsc	3,0
  9521  17C1  2FD4               	goto	l267
  9522                           
  9523                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9524  17C2  0825               	movf	CC2500_TxData@loop_e,w
  9525  17C3  3E20               	addlw	_RF_Data& (0+255)
  9526  17C4  0086               	movwf	6
  9527  17C5  3001               	movlw	1	; select bank2/3
  9528  17C6  0087               	movwf	7
  9529  17C7  0801               	movf	1,w
  9530  17C8  00A4               	movwf	??_CC2500_TxData
  9531  17C9  0824               	movf	??_CC2500_TxData,w
  9532  17CA  00FA               	movwf	_SPI0Buffer
  9533                           
  9534                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9535  17CB  319C  2488  3197   	fcall	_CC2500_WriteByte
  9536  17CE  3001               	movlw	1
  9537  17CF  0020               	movlb	0	; select bank0
  9538  17D0  00A4               	movwf	??_CC2500_TxData
  9539  17D1  0824               	movf	??_CC2500_TxData,w
  9540  17D2  07A5               	addwf	CC2500_TxData@loop_e,f
  9541  17D3  2FBC               	goto	l9199
  9542  17D4                     l267:	
  9543                           
  9544                           ;CC2500_B1.c: 48: }
  9545                           ;CC2500_B1.c: 49: RC4 = 1;
  9546  17D4  160E               	bsf	14,4	;volatile
  9547                           
  9548                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9549  17D5  3035               	movlw	53
  9550  17D6  319D  254A  3197   	fcall	_CC2500_WriteCommand
  9551                           
  9552                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9553  17D9  2FDD               	goto	l9205
  9554  17DA                     l9203:	
  9555                           
  9556                           ;CC2500_B1.c: 52: Timeout_Counter();
  9557  17DA  319C  24C4  3197   	fcall	_Timeout_Counter
  9558  17DD                     l9205:	
  9559  17DD  0020               	movlb	0	; select bank0
  9560  17DE  180D               	btfsc	13,0	;volatile
  9561  17DF  2FE3               	goto	l9209
  9562  17E0  0021               	movlb	1	; select bank1
  9563  17E1  1D2F               	btfss	(_myMain^(0+128)+15),2
  9564  17E2  2FDA               	goto	l9203
  9565  17E3                     l9209:	
  9566                           
  9567                           ;CC2500_B1.c: 53: };
  9568                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9569  17E3  319A  221C  3197   	fcall	_set_TimeoutCleared
  9570                           
  9571                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9572  17E6  2FEA               	goto	l9213
  9573  17E7                     l9211:	
  9574                           
  9575                           ;CC2500_B1.c: 57: Timeout_Counter();
  9576  17E7  319C  24C4  3197   	fcall	_Timeout_Counter
  9577  17EA                     l9213:	
  9578  17EA  0020               	movlb	0	; select bank0
  9579  17EB  1C0D               	btfss	13,0	;volatile
  9580  17EC  2FF0               	goto	l9217
  9581  17ED  0021               	movlb	1	; select bank1
  9582  17EE  1D2F               	btfss	(_myMain^(0+128)+15),2
  9583  17EF  2FE7               	goto	l9211
  9584  17F0                     l9217:	
  9585                           
  9586                           ;CC2500_B1.c: 58: };
  9587                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9588  17F0  319A  221C  3197   	fcall	_set_TimeoutCleared
  9589                           
  9590                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9591  17F3  3036               	movlw	54
  9592  17F4  319D  254A  3197   	fcall	_CC2500_WriteCommand
  9593                           
  9594                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9595  17F7  303B               	movlw	59
  9596  17F8  319D  254A  3197   	fcall	_CC2500_WriteCommand
  9597                           
  9598                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9599  17FB  303A               	movlw	58
  9600  17FC  319D  254A         	fcall	_CC2500_WriteCommand
  9601                           
  9602                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9603  17FE  14FB               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9604  17FF  0008               	return
  9605  1800                     __end_of_CC2500_TxData:	
  9606                           
  9607                           	psect	text44
  9608  09F7                     __ptext44:	
  9609 ;; *************** function _CC2500_RxData *****************
  9610 ;; Defined at:
  9611 ;;		line 70 in file "../src/CC2500_B1.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;		None
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9616 ;; Return value:  Size  Location     Type
  9617 ;;		None               void
  9618 ;; Registers used:
  9619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;Total ram usage:        2 bytes
  9630 ;; Hardware stack levels used:    1
  9631 ;; Hardware stack levels required when called:    7
  9632 ;; This function calls:
  9633 ;;		_CC2500_ReadByte
  9634 ;;		_CC2500_ReadStatus
  9635 ;;		_CC2500_WriteByte
  9636 ;;		_Timeout_Counter
  9637 ;;		_set_TimeoutCleared
  9638 ;; This function is called by:
  9639 ;;		_setRF_Main
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           
  9644                           ;psect for function _CC2500_RxData
  9645  09F7                     _CC2500_RxData:	
  9646                           
  9647                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9648                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9649                           
  9650                           ;incstack = 0
  9651                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9652  09F7  0020               	movlb	0	; select bank0
  9653  09F8  180D               	btfsc	13,0	;volatile
  9654  09F9  29FE               	goto	l9233
  9655  09FA  2A07               	goto	l9239
  9656  09FB                     l9231:	
  9657                           ;CC2500_B1.c: 76: {
  9658                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9659                           
  9660                           
  9661                           ;CC2500_B1.c: 78: Timeout_Counter();
  9662  09FB  319C  24C4  3189   	fcall	_Timeout_Counter
  9663  09FE                     l9233:	
  9664  09FE  0020               	movlb	0	; select bank0
  9665  09FF  1C0D               	btfss	13,0	;volatile
  9666  0A00  2A04               	goto	l9237
  9667  0A01  0021               	movlb	1	; select bank1
  9668  0A02  1D2F               	btfss	(_myMain^(0+128)+15),2
  9669  0A03  29FB               	goto	l9231
  9670  0A04                     l9237:	
  9671                           
  9672                           ;CC2500_B1.c: 79: };
  9673                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9674  0A04  319A  221C  3189   	fcall	_set_TimeoutCleared
  9675  0A07                     l9239:	
  9676                           
  9677                           ;CC2500_B1.c: 81: }
  9678                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9679  0A07  303B               	movlw	59
  9680  0A08  319E  26CC  3189   	fcall	_CC2500_ReadStatus
  9681                           
  9682                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9683  0A0B  0021               	movlb	1	; select bank1
  9684  0A0C  0857               	movf	_s_data^(0+128),w
  9685  0A0D  1903               	btfsc	3,2
  9686  0A0E  0008               	return
  9687                           
  9688                           ;CC2500_B1.c: 86: RC4 = 0;
  9689  0A0F  0020               	movlb	0	; select bank0
  9690  0A10  120E               	bcf	14,4	;volatile
  9691                           
  9692                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9693  0A11  30FF               	movlw	255
  9694  0A12  00A4               	movwf	??_CC2500_RxData
  9695  0A13  0824               	movf	??_CC2500_RxData,w
  9696  0A14  00FA               	movwf	_SPI0Buffer
  9697                           
  9698                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9699  0A15  2A1C               	goto	l9249
  9700  0A16                     l9251:	
  9701  0A16  0021               	movlb	1	; select bank1
  9702  0A17  192F               	btfsc	(_myMain^(0+128)+15),2
  9703  0A18  2A1F               	goto	l292
  9704                           
  9705                           ;CC2500_B1.c: 89: Timeout_Counter();
  9706  0A19  319C  24C4  3189   	fcall	_Timeout_Counter
  9707  0A1C                     l9249:	
  9708  0A1C  0020               	movlb	0	; select bank0
  9709  0A1D  190E               	btfsc	14,2	;volatile
  9710  0A1E  2A16               	goto	l9251
  9711  0A1F                     l292:	
  9712                           
  9713                           ;CC2500_B1.c: 90: };
  9714                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9715  0A1F  0021               	movlb	1	; select bank1
  9716  0A20  192F               	btfsc	(_myMain^(0+128)+15),2
  9717  0A21  2A62               	goto	l293
  9718                           
  9719                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9720  0A22  319C  2488  3189   	fcall	_CC2500_WriteByte
  9721                           
  9722                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9723  0A25  319D  2533  3189   	fcall	_CC2500_ReadByte
  9724                           
  9725                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9726  0A28  087A               	movf	_SPI0Buffer,w
  9727  0A29  0020               	movlb	0	; select bank0
  9728  0A2A  00A4               	movwf	??_CC2500_RxData
  9729  0A2B  0824               	movf	??_CC2500_RxData,w
  9730  0A2C  0021               	movlb	1	; select bank1
  9731  0A2D  00D3               	movwf	_Rx_Length^(0+128)
  9732                           
  9733                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9734  0A2E  0020               	movlb	0	; select bank0
  9735  0A2F  01A5               	clrf	CC2500_RxData@loop_f
  9736  0A30                     l9265:	
  9737  0A30  0021               	movlb	1	; select bank1
  9738  0A31  0853               	movf	_Rx_Length^(0+128),w
  9739  0A32  0020               	movlb	0	; select bank0
  9740  0A33  0225               	subwf	CC2500_RxData@loop_f,w
  9741  0A34  1803               	btfsc	3,0
  9742  0A35  2A48               	goto	l9267
  9743                           
  9744                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9745  0A36  319D  2533  3189   	fcall	_CC2500_ReadByte
  9746                           
  9747                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9748  0A39  087A               	movf	_SPI0Buffer,w
  9749  0A3A  0020               	movlb	0	; select bank0
  9750  0A3B  00A4               	movwf	??_CC2500_RxData
  9751  0A3C  0825               	movf	CC2500_RxData@loop_f,w
  9752  0A3D  3E20               	addlw	_RF_Data& (0+255)
  9753  0A3E  0086               	movwf	6
  9754  0A3F  3001               	movlw	1	; select bank2/3
  9755  0A40  0087               	movwf	7
  9756  0A41  0824               	movf	??_CC2500_RxData,w
  9757  0A42  0081               	movwf	1
  9758  0A43  3001               	movlw	1
  9759  0A44  00A4               	movwf	??_CC2500_RxData
  9760  0A45  0824               	movf	??_CC2500_RxData,w
  9761  0A46  07A5               	addwf	CC2500_RxData@loop_f,f
  9762  0A47  2A30               	goto	l9265
  9763  0A48                     l9267:	
  9764                           
  9765                           ;CC2500_B1.c: 99: }
  9766                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9767  0A48  319D  2533  3189   	fcall	_CC2500_ReadByte
  9768                           
  9769                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9770  0A4B  087A               	movf	_SPI0Buffer,w
  9771  0A4C  0020               	movlb	0	; select bank0
  9772  0A4D  00A4               	movwf	??_CC2500_RxData
  9773  0A4E  0824               	movf	??_CC2500_RxData,w
  9774  0A4F  0021               	movlb	1	; select bank1
  9775  0A50  00D2               	movwf	_RSSI^(0+128)
  9776                           
  9777                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9778  0A51  319D  2533  3189   	fcall	_CC2500_ReadByte
  9779                           
  9780                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9781  0A54  087A               	movf	_SPI0Buffer,w
  9782  0A55  0020               	movlb	0	; select bank0
  9783  0A56  00A4               	movwf	??_CC2500_RxData
  9784  0A57  0824               	movf	??_CC2500_RxData,w
  9785  0A58  0021               	movlb	1	; select bank1
  9786  0A59  00CE               	movwf	_CRC^(0+128)
  9787                           
  9788                           ;CC2500_B1.c: 104: RC4 = 1;
  9789  0A5A  0020               	movlb	0	; select bank0
  9790  0A5B  160E               	bsf	14,4	;volatile
  9791                           
  9792                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9793  0A5C  0021               	movlb	1	; select bank1
  9794  0A5D  1BCE               	btfsc	_CRC^(0+128),7
  9795                           
  9796                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9797  0A5E  147B               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9798                           
  9799                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9800  0A5F  11BE               	bcf	_RF1^(0+128),3
  9801                           
  9802                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9803  0A60  14BE               	bsf	_RF1^(0+128),1
  9804                           
  9805                           ;CC2500_B1.c: 110: } else {
  9806  0A61  2A64               	goto	l9279
  9807  0A62                     l293:	
  9808                           
  9809                           ;CC2500_B1.c: 111: RC4 = 1;
  9810  0A62  0020               	movlb	0	; select bank0
  9811  0A63  160E               	bsf	14,4	;volatile
  9812  0A64                     l9279:	
  9813                           
  9814                           ;CC2500_B1.c: 112: }
  9815                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9816  0A64  319A  221C         	fcall	_set_TimeoutCleared
  9817  0A66  0021               	movlb	1	; select bank1
  9818  0A67  0008               	return
  9819  0A68                     __end_of_CC2500_RxData:	
  9820                           
  9821                           	psect	text45
  9822  1ECC                     __ptext45:	
  9823 ;; *************** function _CC2500_ReadStatus *****************
  9824 ;; Defined at:
  9825 ;;		line 304 in file "../src/CC2500_B1.c"
  9826 ;; Parameters:    Size  Location     Type
  9827 ;;  status_addr     1    wreg     unsigned char 
  9828 ;; Auto vars:     Size  Location     Type
  9829 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9830 ;; Return value:  Size  Location     Type
  9831 ;;		None               void
  9832 ;; Registers used:
  9833 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9834 ;; Tracked objects:
  9835 ;;		On entry : 0/0
  9836 ;;		On exit  : 0/0
  9837 ;;		Unchanged: 0/0
  9838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;Total ram usage:        2 bytes
  9844 ;; Hardware stack levels used:    1
  9845 ;; Hardware stack levels required when called:    6
  9846 ;; This function calls:
  9847 ;;		_CC2500_ReadByte
  9848 ;;		_CC2500_WriteByte
  9849 ;;		_Timeout_Counter
  9850 ;;		_set_TimeoutCleared
  9851 ;; This function is called by:
  9852 ;;		_CC2500_RxData
  9853 ;;		_setRF_Main
  9854 ;; This function uses a non-reentrant model
  9855 ;;
  9856                           
  9857                           
  9858                           ;psect for function _CC2500_ReadStatus
  9859  1ECC                     _CC2500_ReadStatus:	
  9860                           
  9861                           ;incstack = 0
  9862                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9863                           ;CC2500_ReadStatus@status_addr stored from wreg
  9864  1ECC  0020               	movlb	0	; select bank0
  9865  1ECD  00A3               	movwf	CC2500_ReadStatus@status_addr
  9866                           
  9867                           ;CC2500_B1.c: 305: RC4 = 0;
  9868  1ECE  120E               	bcf	14,4	;volatile
  9869                           
  9870                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9871  1ECF  0823               	movf	CC2500_ReadStatus@status_addr,w
  9872  1ED0  3EC0               	addlw	192
  9873  1ED1  00A2               	movwf	??_CC2500_ReadStatus
  9874  1ED2  0822               	movf	??_CC2500_ReadStatus,w
  9875  1ED3  00FA               	movwf	_SPI0Buffer
  9876                           
  9877                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9878  1ED4  2ED8               	goto	l9047
  9879  1ED5                     l9045:	
  9880                           
  9881                           ;CC2500_B1.c: 309: Timeout_Counter();
  9882  1ED5  319C  24C4  319E   	fcall	_Timeout_Counter
  9883  1ED8                     l9047:	
  9884  1ED8  0020               	movlb	0	; select bank0
  9885  1ED9  1D0E               	btfss	14,2	;volatile
  9886  1EDA  2EDE               	goto	l9051
  9887  1EDB  0021               	movlb	1	; select bank1
  9888  1EDC  1D2F               	btfss	(_myMain^(0+128)+15),2
  9889  1EDD  2ED5               	goto	l9045
  9890  1EDE                     l9051:	
  9891                           
  9892                           ;CC2500_B1.c: 310: };
  9893                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9894  1EDE  319A  221C  319E   	fcall	_set_TimeoutCleared
  9895                           
  9896                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9897  1EE1  319C  2488  319E   	fcall	_CC2500_WriteByte
  9898                           
  9899                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9900  1EE4  319D  2533         	fcall	_CC2500_ReadByte
  9901                           
  9902                           ;CC2500_B1.c: 315: RC4 = 1;
  9903  1EE6  0020               	movlb	0	; select bank0
  9904  1EE7  160E               	bsf	14,4	;volatile
  9905                           
  9906                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9907  1EE8  087A               	movf	_SPI0Buffer,w
  9908  1EE9  00A2               	movwf	??_CC2500_ReadStatus
  9909  1EEA  0822               	movf	??_CC2500_ReadStatus,w
  9910  1EEB  0021               	movlb	1	; select bank1
  9911  1EEC  00D7               	movwf	_s_data^(0+128)
  9912  1EED  0008               	return
  9913  1EEE                     __end_of_CC2500_ReadStatus:	
  9914                           
  9915                           	psect	text46
  9916  1D33                     __ptext46:	
  9917 ;; *************** function _CC2500_ReadByte *****************
  9918 ;; Defined at:
  9919 ;;		line 238 in file "../src/CC2500_B1.c"
  9920 ;; Parameters:    Size  Location     Type
  9921 ;;		None
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9924 ;; Return value:  Size  Location     Type
  9925 ;;		None               void
  9926 ;; Registers used:
  9927 ;;		wreg, status,2, status,0
  9928 ;; Tracked objects:
  9929 ;;		On entry : 0/0
  9930 ;;		On exit  : 0/0
  9931 ;;		Unchanged: 0/0
  9932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;Total ram usage:        2 bytes
  9938 ;; Hardware stack levels used:    1
  9939 ;; Hardware stack levels required when called:    5
  9940 ;; This function calls:
  9941 ;;		Nothing
  9942 ;; This function is called by:
  9943 ;;		_CC2500_RxData
  9944 ;;		_CC2500_ReadStatus
  9945 ;;		_CC2500_ReadREG
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949                           
  9950                           ;psect for function _CC2500_ReadByte
  9951  1D33                     _CC2500_ReadByte:	
  9952                           
  9953                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9954                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9955                           
  9956                           ;incstack = 0
  9957                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9958  1D33  0020               	movlb	0	; select bank0
  9959  1D34  01A1               	clrf	CC2500_ReadByte@loop_b
  9960  1D35                     L5:	
  9961  1D35  3008               	movlw	8
  9962  1D36  0221               	subwf	CC2500_ReadByte@loop_b,w
  9963  1D37  1803               	btfsc	3,0
  9964  1D38  0008               	return
  9965                           
  9966                           ;CC2500_B1.c: 241: RC1 = 1;
  9967  1D39  148E               	bsf	14,1	;volatile
  9968                           
  9969                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9970  1D3A  1003               	clrc
  9971  1D3B  0DFA               	rlf	_SPI0Buffer,f
  9972                           
  9973                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9974  1D3C  1D0E               	btfss	14,2	;volatile
  9975  1D3D  2D40               	goto	l8903
  9976                           
  9977                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9978  1D3E  147A               	bsf	_SPI0Buffer,0
  9979  1D3F  2D44               	goto	l8905
  9980  1D40                     l8903:	
  9981                           
  9982                           ;CC2500_B1.c: 245: else
  9983                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9984  1D40  30FE               	movlw	254
  9985  1D41  00A0               	movwf	??_CC2500_ReadByte
  9986  1D42  0820               	movf	??_CC2500_ReadByte,w
  9987  1D43  05FA               	andwf	_SPI0Buffer,f
  9988  1D44                     l8905:	
  9989                           
  9990                           ;CC2500_B1.c: 247: RC1 = 0;
  9991  1D44  108E               	bcf	14,1	;volatile
  9992  1D45  3001               	movlw	1
  9993  1D46  00A0               	movwf	??_CC2500_ReadByte
  9994  1D47  0820               	movf	??_CC2500_ReadByte,w
  9995  1D48  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9996  1D49  2D35               	goto	L5
  9997  1D4A                     __end_of_CC2500_ReadByte:	
  9998                           
  9999                           	psect	text47
 10000  19FD                     __ptext47:	
 10001 ;; *************** function _RF_Initialization *****************
 10002 ;; Defined at:
 10003 ;;		line 9 in file "../src/RF_Control_B1.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;		None
 10006 ;; Auto vars:     Size  Location     Type
 10007 ;;		None
 10008 ;; Return value:  Size  Location     Type
 10009 ;;		None               void
 10010 ;; Registers used:
 10011 ;;		wreg, status,2, status,0, pclath, cstack
 10012 ;; Tracked objects:
 10013 ;;		On entry : 0/0
 10014 ;;		On exit  : 0/0
 10015 ;;		Unchanged: 0/0
 10016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;Total ram usage:        0 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:    6
 10024 ;; This function calls:
 10025 ;;		_setRF_Initialization
 10026 ;; This function is called by:
 10027 ;;		_main
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           
 10032                           ;psect for function _RF_Initialization
 10033  19FD                     _RF_Initialization:	
 10034                           
 10035                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10036                           
 10037                           ;incstack = 0
 10038                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10039  19FD  319A  22CA         	fcall	_setRF_Initialization
 10040  19FF  0008               	return
 10041  1A00                     __end_of_RF_Initialization:	
 10042                           
 10043                           	psect	text48
 10044  1ACA                     __ptext48:	
 10045 ;; *************** function _setRF_Initialization *****************
 10046 ;; Defined at:
 10047 ;;		line 43 in file "../src/RF_Control_B1.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;		None
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;		None
 10052 ;; Return value:  Size  Location     Type
 10053 ;;		None               void
 10054 ;; Registers used:
 10055 ;;		wreg
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;Total ram usage:        1 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; Hardware stack levels required when called:    5
 10068 ;; This function calls:
 10069 ;;		Nothing
 10070 ;; This function is called by:
 10071 ;;		_RF_Initialization
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           
 10076                           ;psect for function _setRF_Initialization
 10077  1ACA                     _setRF_Initialization:	
 10078                           
 10079                           ;RF_Control_B1.c: 45: Tx_Length = 21;
 10080                           
 10081                           ;incstack = 0
 10082                           ; Regs used in _setRF_Initialization: [wreg]
 10083  1ACA  3015               	movlw	21
 10084  1ACB  0020               	movlb	0	; select bank0
 10085  1ACC  00A0               	movwf	??_setRF_Initialization
 10086  1ACD  0820               	movf	??_setRF_Initialization,w
 10087  1ACE  0021               	movlb	1	; select bank1
 10088  1ACF  00D4               	movwf	_Tx_Length^(0+128)
 10089                           
 10090                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
 10091  1AD0  3014               	movlw	20
 10092  1AD1  00C5               	movwf	(_RF1^(0+128)+7)
 10093  1AD2  3000               	movlw	0
 10094  1AD3  00C6               	movwf	(_RF1^(0+128)+8)
 10095  1AD4  0008               	return
 10096  1AD5                     __end_of_setRF_Initialization:	
 10097                           
 10098                           	psect	text49
 10099  1C18                     __ptext49:	
 10100 ;; *************** function _Mcu_Initialization *****************
 10101 ;; Defined at:
 10102 ;;		line 30 in file "../src/MCU_B1.c"
 10103 ;; Parameters:    Size  Location     Type
 10104 ;;		None
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;		None
 10107 ;; Return value:  Size  Location     Type
 10108 ;;		None               void
 10109 ;; Registers used:
 10110 ;;		wreg, status,2, status,0, pclath, cstack
 10111 ;; Tracked objects:
 10112 ;;		On entry : 0/0
 10113 ;;		On exit  : 0/0
 10114 ;;		Unchanged: 0/0
 10115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;Total ram usage:        0 bytes
 10121 ;; Hardware stack levels used:    1
 10122 ;; Hardware stack levels required when called:    6
 10123 ;; This function calls:
 10124 ;;		_ADC_Set
 10125 ;;		_Fosc_Set
 10126 ;;		_IOC_Set
 10127 ;;		_IO_Set
 10128 ;;		_TMR0_Set
 10129 ;;		_WDT_Set
 10130 ;; This function is called by:
 10131 ;;		_main
 10132 ;; This function uses a non-reentrant model
 10133 ;;
 10134                           
 10135                           
 10136                           ;psect for function _Mcu_Initialization
 10137  1C18                     _Mcu_Initialization:	
 10138                           
 10139                           ;MCU_B1.c: 32: Fosc_Set();
 10140                           
 10141                           ;incstack = 0
 10142                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10143  1C18  319A  2218  319C   	fcall	_Fosc_Set
 10144                           
 10145                           ;MCU_B1.c: 34: IO_Set();
 10146  1C1B  319D  2563  319C   	fcall	_IO_Set
 10147                           
 10148                           ;MCU_B1.c: 36: TMR0_Set();
 10149  1C1E  319A  2267  319C   	fcall	_TMR0_Set
 10150                           
 10151                           ;MCU_B1.c: 38: ;;
 10152                           ;MCU_B1.c: 40: ADC_Set();
 10153  1C21  319A  2238  319C   	fcall	_ADC_Set
 10154                           
 10155                           ;MCU_B1.c: 44: ;;
 10156                           ;MCU_B1.c: 46: IOC_Set();
 10157  1C24  319B  2312  319C   	fcall	_IOC_Set
 10158                           
 10159                           ;MCU_B1.c: 48: ;;
 10160                           ;MCU_B1.c: 50: ;;
 10161                           ;MCU_B1.c: 52: WDT_Set();
 10162  1C27  319A  22BF         	fcall	_WDT_Set
 10163  1C29  0008               	return
 10164  1C2A                     __end_of_Mcu_Initialization:	
 10165                           
 10166                           	psect	text50
 10167  1ABF                     __ptext50:	
 10168 ;; *************** function _WDT_Set *****************
 10169 ;; Defined at:
 10170 ;;		line 902 in file "../src/MCU_B1.c"
 10171 ;; Parameters:    Size  Location     Type
 10172 ;;		None
 10173 ;; Auto vars:     Size  Location     Type
 10174 ;;		None
 10175 ;; Return value:  Size  Location     Type
 10176 ;;		None               void
 10177 ;; Registers used:
 10178 ;;		wreg
 10179 ;; Tracked objects:
 10180 ;;		On entry : 0/0
 10181 ;;		On exit  : 0/0
 10182 ;;		Unchanged: 0/0
 10183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10187 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10188 ;;Total ram usage:        1 bytes
 10189 ;; Hardware stack levels used:    1
 10190 ;; Hardware stack levels required when called:    5
 10191 ;; This function calls:
 10192 ;;		Nothing
 10193 ;; This function is called by:
 10194 ;;		_Mcu_Initialization
 10195 ;; This function uses a non-reentrant model
 10196 ;;
 10197                           
 10198                           
 10199                           ;psect for function _WDT_Set
 10200  1ABF                     _WDT_Set:	
 10201                           
 10202                           ;MCU_B1.c: 903: WDTCON = 0b00010111;;
 10203                           
 10204                           ;incstack = 0
 10205                           ; Regs used in _WDT_Set: [wreg]
 10206  1ABF  3017               	movlw	23
 10207  1AC0  0021               	movlb	1	; select bank1
 10208  1AC1  0097               	movwf	23	;volatile
 10209                           
 10210                           ;MCU_B1.c: 904: WDT.Enable = 1;
 10211  1AC2  144C               	bsf	_WDT^(0+128),0
 10212                           
 10213                           ;MCU_B1.c: 905: WDT.Count = 10;
 10214  1AC3  300A               	movlw	10
 10215  1AC4  0020               	movlb	0	; select bank0
 10216  1AC5  00A0               	movwf	??_WDT_Set
 10217  1AC6  0820               	movf	??_WDT_Set,w
 10218  1AC7  0021               	movlb	1	; select bank1
 10219  1AC8  00CD               	movwf	(_WDT^(0+128)+1)
 10220  1AC9  0008               	return
 10221  1ACA                     __end_of_WDT_Set:	
 10222                           
 10223                           	psect	text51
 10224  1A67                     __ptext51:	
 10225 ;; *************** function _TMR0_Set *****************
 10226 ;; Defined at:
 10227 ;;		line 126 in file "../src/MCU_B1.c"
 10228 ;; Parameters:    Size  Location     Type
 10229 ;;		None
 10230 ;; Auto vars:     Size  Location     Type
 10231 ;;		None
 10232 ;; Return value:  Size  Location     Type
 10233 ;;		None               void
 10234 ;; Registers used:
 10235 ;;		wreg, status,2
 10236 ;; Tracked objects:
 10237 ;;		On entry : 0/0
 10238 ;;		On exit  : 0/0
 10239 ;;		Unchanged: 0/0
 10240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10245 ;;Total ram usage:        0 bytes
 10246 ;; Hardware stack levels used:    1
 10247 ;; Hardware stack levels required when called:    5
 10248 ;; This function calls:
 10249 ;;		Nothing
 10250 ;; This function is called by:
 10251 ;;		_Mcu_Initialization
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           
 10256                           ;psect for function _TMR0_Set
 10257  1A67                     _TMR0_Set:	
 10258                           
 10259                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10260                           
 10261                           ;incstack = 0
 10262                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10263  1A67  0021               	movlb	1	; select bank1
 10264  1A68  0195               	clrf	21	;volatile
 10265                           
 10266                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10267  1A69  3042               	movlw	66
 10268  1A6A  0020               	movlb	0	; select bank0
 10269  1A6B  0095               	movwf	21	;volatile
 10270                           
 10271                           ;MCU_B1.c: 130: TMR0IE = 1;
 10272  1A6C  168B               	bsf	11,5	;volatile
 10273                           
 10274                           ;MCU_B1.c: 131: GIE = 1;
 10275  1A6D  178B               	bsf	11,7	;volatile
 10276  1A6E  0008               	return
 10277  1A6F                     __end_of_TMR0_Set:	
 10278                           
 10279                           	psect	text52
 10280  1D63                     __ptext52:	
 10281 ;; *************** function _IO_Set *****************
 10282 ;; Defined at:
 10283 ;;		line 60 in file "../src/MCU_B1.c"
 10284 ;; Parameters:    Size  Location     Type
 10285 ;;		None
 10286 ;; Auto vars:     Size  Location     Type
 10287 ;;		None
 10288 ;; Return value:  Size  Location     Type
 10289 ;;		None               void
 10290 ;; Registers used:
 10291 ;;		wreg, status,2
 10292 ;; Tracked objects:
 10293 ;;		On entry : 0/0
 10294 ;;		On exit  : 0/0
 10295 ;;		Unchanged: 0/0
 10296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;Total ram usage:        0 bytes
 10302 ;; Hardware stack levels used:    1
 10303 ;; Hardware stack levels required when called:    5
 10304 ;; This function calls:
 10305 ;;		Nothing
 10306 ;; This function is called by:
 10307 ;;		_Mcu_Initialization
 10308 ;; This function uses a non-reentrant model
 10309 ;;
 10310                           
 10311                           
 10312                           ;psect for function _IO_Set
 10313  1D63                     _IO_Set:	
 10314                           
 10315                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10316                           
 10317                           ;incstack = 0
 10318                           ; Regs used in _IO_Set: [wreg+status,2]
 10319  1D63  3077               	movlw	119
 10320  1D64  0021               	movlb	1	; select bank1
 10321  1D65  008C               	movwf	12	;volatile
 10322                           
 10323                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10324  1D66  3007               	movlw	7
 10325  1D67  008D               	movwf	13	;volatile
 10326                           
 10327                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10328  1D68  300C               	movlw	12
 10329  1D69  008E               	movwf	14	;volatile
 10330                           
 10331                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10332  1D6A  0022               	movlb	2	; select bank2
 10333  1D6B  018C               	clrf	12	;volatile
 10334                           
 10335                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10336  1D6C  3002               	movlw	2
 10337  1D6D  008D               	movwf	13	;volatile
 10338                           
 10339                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10340  1D6E  018E               	clrf	14	;volatile
 10341                           
 10342                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10343  1D6F  3022               	movlw	34
 10344  1D70  0023               	movlb	3	; select bank3
 10345  1D71  008C               	movwf	12	;volatile
 10346                           
 10347                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10348  1D72  018D               	clrf	13	;volatile
 10349                           
 10350                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10351  1D73  018E               	clrf	14	;volatile
 10352                           
 10353                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10354  1D74  3077               	movlw	119
 10355  1D75  0020               	movlb	0	; select bank0
 10356  1D76  008C               	movwf	12	;volatile
 10357                           
 10358                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10359  1D77  3007               	movlw	7
 10360  1D78  008D               	movwf	13	;volatile
 10361                           
 10362                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10363  1D79  300C               	movlw	12
 10364  1D7A  008E               	movwf	14	;volatile
 10365  1D7B  0008               	return
 10366  1D7C                     __end_of_IO_Set:	
 10367                           
 10368                           	psect	text53
 10369  1B12                     __ptext53:	
 10370 ;; *************** function _IOC_Set *****************
 10371 ;; Defined at:
 10372 ;;		line 264 in file "../src/MCU_B1.c"
 10373 ;; Parameters:    Size  Location     Type
 10374 ;;		None
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;		None
 10377 ;; Return value:  Size  Location     Type
 10378 ;;		None               void
 10379 ;; Registers used:
 10380 ;;		wreg, status,2
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10390 ;;Total ram usage:        0 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    5
 10393 ;; This function calls:
 10394 ;;		Nothing
 10395 ;; This function is called by:
 10396 ;;		_Mcu_Initialization
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           
 10401                           ;psect for function _IOC_Set
 10402  1B12                     _IOC_Set:	
 10403                           
 10404                           ;MCU_B1.c: 265: WPUB2 = 0;
 10405                           
 10406                           ;incstack = 0
 10407                           ; Regs used in _IOC_Set: [wreg+status,2]
 10408  1B12  0024               	movlb	4	; select bank4
 10409  1B13  110D               	bcf	13,2	;volatile
 10410                           
 10411                           ;MCU_B1.c: 268: IOCBP = 0b00000100;
 10412  1B14  3004               	movlw	4
 10413  1B15  0027               	movlb	7	; select bank7
 10414  1B16  0094               	movwf	20	;volatile
 10415                           
 10416                           ;MCU_B1.c: 269: IOCBN = 0b00000100;
 10417  1B17  3004               	movlw	4
 10418  1B18  0095               	movwf	21	;volatile
 10419                           
 10420                           ;MCU_B1.c: 289: IOCBF = 0b00000000;
 10421  1B19  0196               	clrf	22	;volatile
 10422                           
 10423                           ;MCU_B1.c: 291: IOCIE = 1;
 10424  1B1A  158B               	bsf	11,3	;volatile
 10425                           
 10426                           ;MCU_B1.c: 292: IOCIF = 0;
 10427  1B1B  100B               	bcf	11,0	;volatile
 10428                           
 10429                           ;MCU_B1.c: 293: PEIE = 1;
 10430  1B1C  170B               	bsf	11,6	;volatile
 10431                           
 10432                           ;MCU_B1.c: 294: GIE = 1;
 10433  1B1D  178B               	bsf	11,7	;volatile
 10434  1B1E  0008               	return
 10435  1B1F                     __end_of_IOC_Set:	
 10436                           
 10437                           	psect	text54
 10438  1A18                     __ptext54:	
 10439 ;; *************** function _Fosc_Set *****************
 10440 ;; Defined at:
 10441 ;;		line 56 in file "../src/MCU_B1.c"
 10442 ;; Parameters:    Size  Location     Type
 10443 ;;		None
 10444 ;; Auto vars:     Size  Location     Type
 10445 ;;		None
 10446 ;; Return value:  Size  Location     Type
 10447 ;;		None               void
 10448 ;; Registers used:
 10449 ;;		wreg
 10450 ;; Tracked objects:
 10451 ;;		On entry : 0/0
 10452 ;;		On exit  : 0/0
 10453 ;;		Unchanged: 0/0
 10454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;Total ram usage:        0 bytes
 10460 ;; Hardware stack levels used:    1
 10461 ;; Hardware stack levels required when called:    5
 10462 ;; This function calls:
 10463 ;;		Nothing
 10464 ;; This function is called by:
 10465 ;;		_Mcu_Initialization
 10466 ;; This function uses a non-reentrant model
 10467 ;;
 10468                           
 10469                           
 10470                           ;psect for function _Fosc_Set
 10471  1A18                     _Fosc_Set:	
 10472                           
 10473                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10474                           
 10475                           ;incstack = 0
 10476                           ; Regs used in _Fosc_Set: [wreg]
 10477  1A18  3078               	movlw	120
 10478  1A19  0021               	movlb	1	; select bank1
 10479  1A1A  0099               	movwf	25	;volatile
 10480  1A1B  0008               	return
 10481  1A1C                     __end_of_Fosc_Set:	
 10482                           
 10483                           	psect	text55
 10484  1A38                     __ptext55:	
 10485 ;; *************** function _ADC_Set *****************
 10486 ;; Defined at:
 10487 ;;		line 316 in file "../src/MCU_B1.c"
 10488 ;; Parameters:    Size  Location     Type
 10489 ;;		None
 10490 ;; Auto vars:     Size  Location     Type
 10491 ;;		None
 10492 ;; Return value:  Size  Location     Type
 10493 ;;		None               void
 10494 ;; Registers used:
 10495 ;;		wreg
 10496 ;; Tracked objects:
 10497 ;;		On entry : 0/0
 10498 ;;		On exit  : 0/0
 10499 ;;		Unchanged: 0/0
 10500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;Total ram usage:        0 bytes
 10506 ;; Hardware stack levels used:    1
 10507 ;; Hardware stack levels required when called:    5
 10508 ;; This function calls:
 10509 ;;		Nothing
 10510 ;; This function is called by:
 10511 ;;		_Mcu_Initialization
 10512 ;; This function uses a non-reentrant model
 10513 ;;
 10514                           
 10515                           
 10516                           ;psect for function _ADC_Set
 10517  1A38                     _ADC_Set:	
 10518                           
 10519                           ;MCU_B1.c: 317: ADCON1 = 0xf2;
 10520                           
 10521                           ;incstack = 0
 10522                           ; Regs used in _ADC_Set: [wreg]
 10523  1A38  30F2               	movlw	242
 10524  1A39  0021               	movlb	1	; select bank1
 10525  1A3A  009E               	movwf	30	;volatile
 10526                           
 10527                           ;MCU_B1.c: 318: FVRCON = 0xc0;
 10528  1A3B  30C0               	movlw	192
 10529  1A3C  0022               	movlb	2	; select bank2
 10530  1A3D  0097               	movwf	23	;volatile
 10531  1A3E  0008               	return
 10532  1A3F                     __end_of_ADC_Set:	
 10533                           
 10534                           	psect	text56
 10535  020C                     __ptext56:	
 10536 ;; *************** function _Load_Main *****************
 10537 ;; Defined at:
 10538 ;;		line 39 in file "../src/OverLoad_B1.c"
 10539 ;; Parameters:    Size  Location     Type
 10540 ;;		None
 10541 ;; Auto vars:     Size  Location     Type
 10542 ;;  i               1   19[BANK0 ] unsigned char 
 10543 ;; Return value:  Size  Location     Type
 10544 ;;		None               void
 10545 ;; Registers used:
 10546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10547 ;; Tracked objects:
 10548 ;;		On entry : 0/0
 10549 ;;		On exit  : 0/0
 10550 ;;		Unchanged: 0/0
 10551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;Total ram usage:        3 bytes
 10557 ;; Hardware stack levels used:    1
 10558 ;; Hardware stack levels required when called:   10
 10559 ;; This function calls:
 10560 ;;		___lwdiv
 10561 ;;		___wmul
 10562 ;;		_getTemp_Safe
 10563 ;;		_setDimmerLights_Clear
 10564 ;;		_setLoad_AH_AL_Restore
 10565 ;;		_setLoad_Exceptions
 10566 ;; This function is called by:
 10567 ;;		_main
 10568 ;; This function uses a non-reentrant model
 10569 ;;
 10570                           
 10571                           
 10572                           ;psect for function _Load_Main
 10573  020C                     _Load_Main:	
 10574                           
 10575                           ;OverLoad_B1.c: 40: char i = 0;
 10576                           
 10577                           ;incstack = 0
 10578                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10579  020C  0020               	movlb	0	; select bank0
 10580  020D  01B3               	clrf	Load_Main@i
 10581                           
 10582                           ;OverLoad_B1.c: 41: if (Load1.ERROR == 1) {
 10583  020E  0023               	movlb	3	; select bank3
 10584  020F  1EA0               	btfss	_Load1^(0+384),5
 10585  0210  2A22               	goto	l1688
 10586                           
 10587                           ;OverLoad_B1.c: 42: Load1.ErrorTime++;
 10588  0211  3001               	movlw	1
 10589  0212  07A3               	addwf	(_Load1^(0+384)+3),f
 10590  0213  3000               	movlw	0
 10591  0214  3DA4               	addwfc	((_Load1+1)^(0+384)+3),f
 10592                           
 10593                           ;OverLoad_B1.c: 43: if (Load1.ErrorTime >= 1000)
 10594  0215  3003               	movlw	3
 10595  0216  0224               	subwf	((_Load1+1)^(0+384)+3),w
 10596  0217  30E8               	movlw	232
 10597  0218  1903               	skipnz
 10598  0219  0223               	subwf	(_Load1^(0+384)+3),w
 10599  021A  1C03               	skipc
 10600  021B  0008               	return
 10601                           
 10602                           ;OverLoad_B1.c: 44: {
 10603                           ;OverLoad_B1.c: 45: Load1.ErrorTime = 0;
 10604  021C  01A3               	clrf	(_Load1^(0+384)+3)
 10605  021D  01A4               	clrf	((_Load1+1)^(0+384)+3)
 10606                           
 10607                           ;OverLoad_B1.c: 46: setLoad_Exceptions(0);
 10608  021E  3000               	movlw	0
 10609  021F  3191  21E1         	fcall	_setLoad_Exceptions
 10610                           
 10611                           ;OverLoad_B1.c: 47: }
 10612                           ;OverLoad_B1.c: 48: } else {
 10613  0221  0008               	return
 10614  0222                     l1688:	
 10615                           
 10616                           ;OverLoad_B1.c: 49: if (Load1.ADtoGO == 1) {
 10617  0222  1E20               	btfss	_Load1^(0+384),4
 10618  0223  2B4D               	goto	l1691
 10619                           
 10620                           ;OverLoad_B1.c: 50: Load1.Time++;
 10621  0224  3001               	movlw	1
 10622  0225  07A1               	addwf	(_Load1^(0+384)+1),f
 10623  0226  3000               	movlw	0
 10624  0227  3DA2               	addwfc	((_Load1+1)^(0+384)+1),f
 10625                           
 10626                           ;OverLoad_B1.c: 51: if (Load1.Time >= 5)
 10627  0228  3000               	movlw	0
 10628  0229  0222               	subwf	((_Load1+1)^(0+384)+1),w
 10629  022A  3005               	movlw	5
 10630  022B  1903               	skipnz
 10631  022C  0221               	subwf	(_Load1^(0+384)+1),w
 10632  022D  1C03               	skipc
 10633  022E  0008               	return
 10634                           
 10635                           ;OverLoad_B1.c: 52: {
 10636                           ;OverLoad_B1.c: 53: Load1.Time = 0;
 10637  022F  01A1               	clrf	(_Load1^(0+384)+1)
 10638  0230  01A2               	clrf	((_Load1+1)^(0+384)+1)
 10639                           
 10640                           ;OverLoad_B1.c: 54: Load1.ADtoGO = 0;
 10641  0231  1220               	bcf	_Load1^(0+384),4
 10642                           
 10643                           ;OverLoad_B1.c: 55: Load1.LightsCount = Load1.Lights1Status + Load1.Lights2Status + Load
      +                          1.Lights3Status;
 10644  0232  0863               	movf	(_Load1^(0+384)+67),w
 10645  0233  0764               	addwf	(_Load1^(0+384)+68),w
 10646  0234  0765               	addwf	(_Load1^(0+384)+69),w
 10647  0235  0020               	movlb	0	; select bank0
 10648  0236  00B1               	movwf	??_Load_Main
 10649  0237  0831               	movf	??_Load_Main,w
 10650  0238  0023               	movlb	3	; select bank3
 10651  0239  00DE               	movwf	(_Load1^(0+384)+62)
 10652                           
 10653                           ;OverLoad_B1.c: 56: for (i = 1; i < 4; i++) {
 10654  023A  0020               	movlb	0	; select bank0
 10655  023B  01B3               	clrf	Load_Main@i
 10656  023C  0AB3               	incf	Load_Main@i,f
 10657  023D  3004               	movlw	4
 10658  023E  0233               	subwf	Load_Main@i,w
 10659  023F  1803               	btfsc	3,0
 10660  0240  2A6B               	goto	l10437
 10661  0241                     l10431:	
 10662                           
 10663                           ;OverLoad_B1.c: 57: Load1.ADH += Load1.AH[i];
 10664  0241  3533               	lslf	Load_Main@i,w
 10665  0242  3EA8               	addlw	(_Load1+8)& (0+255)
 10666  0243  0086               	movwf	6
 10667  0244  3001               	movlw	1	; select bank3/4
 10668  0245  0087               	movwf	7
 10669  0246  3F40               	moviw [0]fsr1
 10670  0247  00B1               	movwf	??_Load_Main
 10671  0248  3F41               	moviw [1]fsr1
 10672  0249  00B2               	movwf	??_Load_Main+1
 10673  024A  0831               	movf	??_Load_Main,w
 10674  024B  0023               	movlb	3	; select bank3
 10675  024C  07CE               	addwf	(_Load1^(0+384)+46),f
 10676  024D  0020               	movlb	0	; select bank0
 10677  024E  0832               	movf	??_Load_Main+1,w
 10678  024F  0023               	movlb	3	; select bank3
 10679  0250  3DCF               	addwfc	((_Load1+1)^(0+384)+46),f
 10680                           
 10681                           ;OverLoad_B1.c: 58: Load1.ADL += Load1.AL[i];
 10682  0251  0020               	movlb	0	; select bank0
 10683  0252  3533               	lslf	Load_Main@i,w
 10684  0253  3EBA               	addlw	(_Load1+26)& (0+255)
 10685  0254  0086               	movwf	6
 10686  0255  3001               	movlw	1	; select bank3/4
 10687  0256  0087               	movwf	7
 10688  0257  3F40               	moviw [0]fsr1
 10689  0258  00B1               	movwf	??_Load_Main
 10690  0259  3F41               	moviw [1]fsr1
 10691  025A  00B2               	movwf	??_Load_Main+1
 10692  025B  0831               	movf	??_Load_Main,w
 10693  025C  0023               	movlb	3	; select bank3
 10694  025D  07D0               	addwf	(_Load1^(0+384)+48),f
 10695  025E  0020               	movlb	0	; select bank0
 10696  025F  0832               	movf	??_Load_Main+1,w
 10697  0260  0023               	movlb	3	; select bank3
 10698  0261  3DD1               	addwfc	((_Load1+1)^(0+384)+48),f
 10699  0262  3001               	movlw	1
 10700  0263  0020               	movlb	0	; select bank0
 10701  0264  00B1               	movwf	??_Load_Main
 10702  0265  0831               	movf	??_Load_Main,w
 10703  0266  07B3               	addwf	Load_Main@i,f
 10704  0267  3004               	movlw	4
 10705  0268  0233               	subwf	Load_Main@i,w
 10706  0269  1C03               	skipc
 10707  026A  2A41               	goto	l10431
 10708  026B                     l10437:	
 10709                           
 10710                           ;OverLoad_B1.c: 59: }
 10711                           ;OverLoad_B1.c: 60: Load1.ADH /= 3;
 10712  026B  3003               	movlw	3
 10713  026C  00A0               	movwf	___lwdiv@divisor
 10714  026D  3000               	movlw	0
 10715  026E  00A1               	movwf	___lwdiv@divisor+1
 10716  026F  0023               	movlb	3	; select bank3
 10717  0270  084F               	movf	((_Load1+1)^(0+384)+46),w
 10718  0271  0020               	movlb	0	; select bank0
 10719  0272  01A3               	clrf	___lwdiv@dividend+1
 10720  0273  07A3               	addwf	___lwdiv@dividend+1,f
 10721  0274  0023               	movlb	3	; select bank3
 10722  0275  084E               	movf	(_Load1^(0+384)+46),w
 10723  0276  0020               	movlb	0	; select bank0
 10724  0277  01A2               	clrf	___lwdiv@dividend
 10725  0278  07A2               	addwf	___lwdiv@dividend,f
 10726  0279  3191  21AA  3182   	fcall	___lwdiv
 10727  027C  0020               	movlb	0	; select bank0
 10728  027D  0821               	movf	?___lwdiv+1,w
 10729  027E  0023               	movlb	3	; select bank3
 10730  027F  01CF               	clrf	((_Load1+1)^(0+384)+46)
 10731  0280  07CF               	addwf	((_Load1+1)^(0+384)+46),f
 10732  0281  0020               	movlb	0	; select bank0
 10733  0282  0820               	movf	?___lwdiv,w
 10734  0283  0023               	movlb	3	; select bank3
 10735  0284  01CE               	clrf	(_Load1^(0+384)+46)
 10736  0285  07CE               	addwf	(_Load1^(0+384)+46),f
 10737                           
 10738                           ;OverLoad_B1.c: 61: Load1.ADL /= 3;
 10739  0286  3003               	movlw	3
 10740  0287  0020               	movlb	0	; select bank0
 10741  0288  00A0               	movwf	___lwdiv@divisor
 10742  0289  3000               	movlw	0
 10743  028A  00A1               	movwf	___lwdiv@divisor+1
 10744  028B  0023               	movlb	3	; select bank3
 10745  028C  0851               	movf	((_Load1+1)^(0+384)+48),w
 10746  028D  0020               	movlb	0	; select bank0
 10747  028E  01A3               	clrf	___lwdiv@dividend+1
 10748  028F  07A3               	addwf	___lwdiv@dividend+1,f
 10749  0290  0023               	movlb	3	; select bank3
 10750  0291  0850               	movf	(_Load1^(0+384)+48),w
 10751  0292  0020               	movlb	0	; select bank0
 10752  0293  01A2               	clrf	___lwdiv@dividend
 10753  0294  07A2               	addwf	___lwdiv@dividend,f
 10754  0295  3191  21AA  3182   	fcall	___lwdiv
 10755  0298  0020               	movlb	0	; select bank0
 10756  0299  0821               	movf	?___lwdiv+1,w
 10757  029A  0023               	movlb	3	; select bank3
 10758  029B  01D1               	clrf	((_Load1+1)^(0+384)+48)
 10759  029C  07D1               	addwf	((_Load1+1)^(0+384)+48),f
 10760  029D  0020               	movlb	0	; select bank0
 10761  029E  0820               	movf	?___lwdiv,w
 10762  029F  0023               	movlb	3	; select bank3
 10763  02A0  01D0               	clrf	(_Load1^(0+384)+48)
 10764  02A1  07D0               	addwf	(_Load1^(0+384)+48),f
 10765                           
 10766                           ;OverLoad_B1.c: 62: if (Load1.ADH > Load1.ADL) {
 10767  02A2  084F               	movf	((_Load1+1)^(0+384)+46),w
 10768  02A3  0251               	subwf	((_Load1+1)^(0+384)+48),w
 10769  02A4  1D03               	skipz
 10770  02A5  2AA8               	goto	u11335
 10771  02A6  084E               	movf	(_Load1^(0+384)+46),w
 10772  02A7  0250               	subwf	(_Load1^(0+384)+48),w
 10773  02A8                     u11335:	
 10774  02A8  1803               	skipnc
 10775  02A9  2B4A               	goto	l10495
 10776                           
 10777                           ;OverLoad_B1.c: 63: Load1.AD = (Load1.ADH - Load1.ADL);
 10778  02AA  302E               	movlw	46
 10779  02AB  3EA0               	addlw	_Load1& (0+255)
 10780  02AC  0086               	movwf	6
 10781  02AD  3001               	movlw	1	; select bank3/4
 10782  02AE  0087               	movwf	7
 10783  02AF  0950               	comf	(_Load1^(0+384)+48),w
 10784  02B0  0020               	movlb	0	; select bank0
 10785  02B1  00B1               	movwf	??_Load_Main
 10786  02B2  0023               	movlb	3	; select bank3
 10787  02B3  0951               	comf	((_Load1+1)^(0+384)+48),w
 10788  02B4  0020               	movlb	0	; select bank0
 10789  02B5  00B2               	movwf	??_Load_Main+1
 10790  02B6  0AB1               	incf	??_Load_Main,f
 10791  02B7  1903               	skipnz
 10792  02B8  0AB2               	incf	??_Load_Main+1,f
 10793  02B9  3F40               	moviw [0]fsr1
 10794  02BA  0731               	addwf	??_Load_Main,w
 10795  02BB  0023               	movlb	3	; select bank3
 10796  02BC  00CC               	movwf	(_Load1^(0+384)+44)
 10797  02BD  3F41               	moviw [1]fsr1
 10798  02BE  0020               	movlb	0	; select bank0
 10799  02BF  3D32               	addwfc	??_Load_Main+1,w
 10800  02C0  0023               	movlb	3	; select bank3
 10801  02C1  00CD               	movwf	(_Load1^(0+384)+45)
 10802                           
 10803                           ;OverLoad_B1.c: 65: if (Load1.Count < 2) {
 10804  02C2  3002               	movlw	2
 10805  02C3  025A               	subwf	(_Load1^(0+384)+58),w
 10806  02C4  1803               	skipnc
 10807  02C5  2AE7               	goto	l10459
 10808                           
 10809                           ;OverLoad_B1.c: 66: Load1.Count++;
 10810  02C6  3001               	movlw	1
 10811  02C7  0020               	movlb	0	; select bank0
 10812  02C8  00B1               	movwf	??_Load_Main
 10813  02C9  0831               	movf	??_Load_Main,w
 10814  02CA  0023               	movlb	3	; select bank3
 10815  02CB  07DA               	addwf	(_Load1^(0+384)+58),f
 10816                           
 10817                           ;OverLoad_B1.c: 67: if (Load1.Count == 1) {
 10818  02CC  085A               	movf	(_Load1^(0+384)+58),w
 10819  02CD  3A01               	xorlw	1
 10820  02CE  1D03               	skipz
 10821  02CF  2AD4               	goto	l10451
 10822                           
 10823                           ;OverLoad_B1.c: 68: Load1.JudgeValue = 500;
 10824  02D0  30F4               	movlw	244
 10825  02D1  00D6               	movwf	(_Load1^(0+384)+54)
 10826  02D2  3001               	movlw	1
 10827  02D3  2ADF               	goto	L6
 10828  02D4                     l10451:	
 10829                           ;OverLoad_B1.c: 69: } else if (Load1.Count == 2) {
 10830                           
 10831  02D4  085A               	movf	(_Load1^(0+384)+58),w
 10832  02D5  3A02               	xorlw	2
 10833  02D6  1D03               	skipz
 10834  02D7  2AE7               	goto	l10459
 10835                           
 10836                           ;OverLoad_B1.c: 70: if (Load1.LightsCount == 1) {
 10837  02D8  085E               	movf	(_Load1^(0+384)+62),w
 10838  02D9  3A01               	xorlw	1
 10839  02DA  1D03               	skipz
 10840  02DB  2AE1               	goto	l10457
 10841                           
 10842                           ;OverLoad_B1.c: 71: Load1.JudgeValue = 0x32;
 10843  02DC  3032               	movlw	50
 10844  02DD  00D6               	movwf	(_Load1^(0+384)+54)
 10845  02DE  3000               	movlw	0
 10846  02DF                     L6:	
 10847  02DF  00D7               	movwf	(_Load1^(0+384)+55)
 10848                           
 10849                           ;OverLoad_B1.c: 72: } else {
 10850  02E0  2AE7               	goto	l10459
 10851  02E1                     l10457:	
 10852                           
 10853                           ;OverLoad_B1.c: 73: Load1.JudgeValue = (0x32 + Load1.TotalLoad) - 0x08;
 10854  02E1  0826               	movf	(_Load1^(0+384)+6),w
 10855  02E2  3E2A               	addlw	42
 10856  02E3  00D6               	movwf	(_Load1^(0+384)+54)
 10857  02E4  3000               	movlw	0
 10858  02E5  3D27               	addwfc	((_Load1+1)^(0+384)+6),w
 10859  02E6  00D7               	movwf	((_Load1+1)^(0+384)+54)
 10860  02E7                     l10459:	
 10861                           
 10862                           ;OverLoad_B1.c: 74: }
 10863                           ;OverLoad_B1.c: 75: }
 10864                           ;OverLoad_B1.c: 76: }
 10865                           ;OverLoad_B1.c: 78: if (Load1.AD >= Load1.JudgeValue) {
 10866  02E7  0857               	movf	((_Load1+1)^(0+384)+54),w
 10867  02E8  024D               	subwf	((_Load1+1)^(0+384)+44),w
 10868  02E9  1D03               	skipz
 10869  02EA  2AED               	goto	u11385
 10870  02EB  0856               	movf	(_Load1^(0+384)+54),w
 10871  02EC  024C               	subwf	(_Load1^(0+384)+44),w
 10872  02ED                     u11385:	
 10873  02ED  1C03               	skipc
 10874  02EE  2AFF               	goto	l10469
 10875                           
 10876                           ;OverLoad_B1.c: 79: Load1.ErrorCount++;
 10877  02EF  3001               	movlw	1
 10878  02F0  0020               	movlb	0	; select bank0
 10879  02F1  00B1               	movwf	??_Load_Main
 10880  02F2  0831               	movf	??_Load_Main,w
 10881  02F3  0023               	movlb	3	; select bank3
 10882  02F4  07DC               	addwf	(_Load1^(0+384)+60),f
 10883                           
 10884                           ;OverLoad_B1.c: 80: if (Load1.ErrorCount > 2) {
 10885  02F5  3003               	movlw	3
 10886  02F6  025C               	subwf	(_Load1^(0+384)+60),w
 10887  02F7  1C03               	skipc
 10888  02F8  2B4A               	goto	l10495
 10889                           
 10890                           ;OverLoad_B1.c: 81: Load1.ErrorCount = 0;
 10891  02F9  01DC               	clrf	(_Load1^(0+384)+60)
 10892                           
 10893                           ;OverLoad_B1.c: 82: setLoad_Exceptions(1);
 10894  02FA  3001               	movlw	1
 10895  02FB  3191  21E1  3182   	fcall	_setLoad_Exceptions
 10896                           
 10897                           ;OverLoad_B1.c: 90: }
 10898                           ;OverLoad_B1.c: 91: } else {
 10899  02FE  2B4A               	goto	l10495
 10900  02FF                     l10469:	
 10901                           
 10902                           ;OverLoad_B1.c: 92: Load1.ErrorCount = 0;
 10903  02FF  0023               	movlb	3	; select bank3
 10904  0300  01DC               	clrf	(_Load1^(0+384)+60)
 10905                           
 10906                           ;OverLoad_B1.c: 93: if (Load1.SafeCount < 10) {
 10907  0301  300A               	movlw	10
 10908  0302  0262               	subwf	(_Load1^(0+384)+66),w
 10909  0303  1803               	skipnc
 10910  0304  2B0B               	goto	l10475
 10911                           
 10912                           ;OverLoad_B1.c: 94: Load1.SafeCount++;
 10913  0305  3001               	movlw	1
 10914  0306  0020               	movlb	0	; select bank0
 10915  0307  00B1               	movwf	??_Load_Main
 10916  0308  0831               	movf	??_Load_Main,w
 10917  0309  0023               	movlb	3	; select bank3
 10918  030A  07E2               	addwf	(_Load1^(0+384)+66),f
 10919  030B                     l10475:	
 10920                           
 10921                           ;OverLoad_B1.c: 95: }
 10922                           ;OverLoad_B1.c: 96: if (Load1.SafeCount >= 10) {
 10923  030B  300A               	movlw	10
 10924  030C  0262               	subwf	(_Load1^(0+384)+66),w
 10925  030D  1C03               	skipc
 10926  030E  2B4A               	goto	l10495
 10927                           
 10928                           ;OverLoad_B1.c: 97: Load1.Safe = 1;
 10929  030F  15A0               	bsf	_Load1^(0+384),3
 10930                           
 10931                           ;OverLoad_B1.c: 101: setDimmerLights_Clear(1, 1);
 10932  0310  0020               	movlb	0	; select bank0
 10933  0311  01A2               	clrf	setDimmerLights_Clear@command
 10934  0312  0AA2               	incf	setDimmerLights_Clear@command,f
 10935  0313  3001               	movlw	1
 10936  0314  319B  23A3  3182   	fcall	_setDimmerLights_Clear
 10937                           
 10938                           ;OverLoad_B1.c: 105: ;;
 10939                           ;OverLoad_B1.c: 111: setDimmerLights_Clear(2, 1);
 10940  0317  0020               	movlb	0	; select bank0
 10941  0318  01A2               	clrf	setDimmerLights_Clear@command
 10942  0319  0AA2               	incf	setDimmerLights_Clear@command,f
 10943  031A  3002               	movlw	2
 10944  031B  319B  23A3  3182   	fcall	_setDimmerLights_Clear
 10945                           
 10946                           ;OverLoad_B1.c: 115: ;;
 10947                           ;OverLoad_B1.c: 129: if (Load1.StatusOn == 1) {
 10948  031E  0023               	movlb	3	; select bank3
 10949  031F  1F20               	btfss	_Load1^(0+384),6
 10950  0320  2B28               	goto	l10487
 10951                           
 10952                           ;OverLoad_B1.c: 130: Load1.StatusOn = 0;
 10953  0321  1320               	bcf	_Load1^(0+384),6
 10954                           
 10955                           ;OverLoad_B1.c: 131: Load1.TotalLoad = Load1.AD;
 10956  0322  084D               	movf	((_Load1+1)^(0+384)+44),w
 10957  0323  01A7               	clrf	((_Load1+1)^(0+384)+6)
 10958  0324  07A7               	addwf	((_Load1+1)^(0+384)+6),f
 10959  0325  084C               	movf	(_Load1^(0+384)+44),w
 10960  0326  01A6               	clrf	(_Load1^(0+384)+6)
 10961  0327  07A6               	addwf	(_Load1^(0+384)+6),f
 10962  0328                     l10487:	
 10963                           
 10964                           ;OverLoad_B1.c: 133: }
 10965                           ;OverLoad_B1.c: 135: if (Load1.StatusOff == 1) {
 10966  0328  1FA0               	btfss	_Load1^(0+384),7
 10967  0329  2B4A               	goto	l10495
 10968                           
 10969                           ;OverLoad_B1.c: 136: Load1.StatusOff = 0;
 10970  032A  13A0               	bcf	_Load1^(0+384),7
 10971                           
 10972                           ;OverLoad_B1.c: 137: Load1.TotalLoad = Load1.AD;
 10973  032B  084D               	movf	((_Load1+1)^(0+384)+44),w
 10974  032C  01A7               	clrf	((_Load1+1)^(0+384)+6)
 10975  032D  07A7               	addwf	((_Load1+1)^(0+384)+6),f
 10976  032E  084C               	movf	(_Load1^(0+384)+44),w
 10977  032F  01A6               	clrf	(_Load1^(0+384)+6)
 10978  0330  07A6               	addwf	(_Load1^(0+384)+6),f
 10979                           
 10980                           ;OverLoad_B1.c: 138: Load1.JudgeValue = 0x32 * Load1.LightsCount;
 10981  0331  085E               	movf	(_Load1^(0+384)+62),w
 10982  0332  0020               	movlb	0	; select bank0
 10983  0333  00B1               	movwf	??_Load_Main
 10984  0334  01B2               	clrf	??_Load_Main+1
 10985  0335  0831               	movf	??_Load_Main,w
 10986  0336  00A0               	movwf	___wmul@multiplier
 10987  0337  0832               	movf	??_Load_Main+1,w
 10988  0338  00A1               	movwf	___wmul@multiplier+1
 10989  0339  3032               	movlw	50
 10990  033A  00A2               	movwf	___wmul@multiplicand
 10991  033B  3000               	movlw	0
 10992  033C  00A3               	movwf	___wmul@multiplicand+1
 10993  033D  319D  25CE  3182   	fcall	___wmul
 10994  0340  0020               	movlb	0	; select bank0
 10995  0341  0821               	movf	?___wmul+1,w
 10996  0342  0023               	movlb	3	; select bank3
 10997  0343  01D7               	clrf	((_Load1+1)^(0+384)+54)
 10998  0344  07D7               	addwf	((_Load1+1)^(0+384)+54),f
 10999  0345  0020               	movlb	0	; select bank0
 11000  0346  0820               	movf	?___wmul,w
 11001  0347  0023               	movlb	3	; select bank3
 11002  0348  01D6               	clrf	(_Load1^(0+384)+54)
 11003  0349  07D6               	addwf	(_Load1^(0+384)+54),f
 11004  034A                     l10495:	
 11005                           
 11006                           ;OverLoad_B1.c: 139: }
 11007                           ;OverLoad_B1.c: 140: }
 11008                           ;OverLoad_B1.c: 141: }
 11009                           ;OverLoad_B1.c: 142: }
 11010                           ;OverLoad_B1.c: 143: setLoad_AH_AL_Restore();
 11011  034A  319D  2596         	fcall	_setLoad_AH_AL_Restore
 11012                           
 11013                           ;OverLoad_B1.c: 155: }
 11014                           ;OverLoad_B1.c: 156: } else {
 11015  034C  0008               	return
 11016  034D                     l1691:	
 11017                           
 11018                           ;OverLoad_B1.c: 157: if (Load1.GO == 1) {
 11019  034D  1CA0               	btfss	_Load1^(0+384),1
 11020  034E  2B5C               	goto	l1710
 11021                           
 11022                           ;OverLoad_B1.c: 158: if (Load1.LightsON == 0) {
 11023  034F  1920               	btfsc	_Load1^(0+384),2
 11024  0350  2B53               	goto	l10501
 11025                           
 11026                           ;OverLoad_B1.c: 159: Load1.LightsON = 1;
 11027  0351  1520               	bsf	_Load1^(0+384),2
 11028                           
 11029                           ;OverLoad_B1.c: 160: Load1.Safe = 0;
 11030  0352  11A0               	bcf	_Load1^(0+384),3
 11031  0353                     l10501:	
 11032                           
 11033                           ;OverLoad_B1.c: 161: }
 11034                           ;OverLoad_B1.c: 162: if (getTemp_Safe() == 1 && 1 == 1) {
 11035  0353  319A  225F  3182   	fcall	_getTemp_Safe
 11036  0356  3A01               	xorlw	1
 11037  0357  1D03               	skipz
 11038  0358  0008               	return
 11039                           
 11040                           ;OverLoad_B1.c: 163: Load1.ADtoGO = 1;
 11041  0359  0023               	movlb	3	; select bank3
 11042  035A  1620               	bsf	_Load1^(0+384),4
 11043                           
 11044                           ;OverLoad_B1.c: 164: }
 11045                           ;OverLoad_B1.c: 165: } else {
 11046  035B  0008               	return
 11047  035C                     l1710:	
 11048                           
 11049                           ;OverLoad_B1.c: 166: if (Load1.LightsON == 1) {
 11050  035C  1D20               	btfss	_Load1^(0+384),2
 11051  035D  0008               	return
 11052                           
 11053                           ;OverLoad_B1.c: 167: Load1.LightsON = 0;
 11054  035E  1120               	bcf	_Load1^(0+384),2
 11055                           
 11056                           ;OverLoad_B1.c: 168: Load1.Safe = 1;
 11057  035F  15A0               	bsf	_Load1^(0+384),3
 11058                           
 11059                           ;OverLoad_B1.c: 169: Load1.ErrorCount = 0;
 11060  0360  01DC               	clrf	(_Load1^(0+384)+60)
 11061                           
 11062                           ;OverLoad_B1.c: 170: Load1.Count = 0;
 11063  0361  01DA               	clrf	(_Load1^(0+384)+58)
 11064                           
 11065                           ;OverLoad_B1.c: 171: Load1.TotalLoad = 0;
 11066  0362  01A6               	clrf	(_Load1^(0+384)+6)
 11067  0363  01A7               	clrf	((_Load1+1)^(0+384)+6)
 11068                           
 11069                           ;OverLoad_B1.c: 172: Load1.NumberCount = 0;
 11070  0364  01DF               	clrf	(_Load1^(0+384)+63)
 11071                           
 11072                           ;OverLoad_B1.c: 173: Load1.StatusOn = 0;
 11073  0365  1320               	bcf	_Load1^(0+384),6
 11074                           
 11075                           ;OverLoad_B1.c: 174: Load1.StatusOff = 0;
 11076  0366  13A0               	bcf	_Load1^(0+384),7
 11077                           
 11078                           ;OverLoad_B1.c: 175: Load1.AD = 0;
 11079  0367  01CC               	clrf	(_Load1^(0+384)+44)
 11080  0368  01CD               	clrf	((_Load1+1)^(0+384)+44)
 11081                           
 11082                           ;OverLoad_B1.c: 176: setLoad_AH_AL_Restore();
 11083  0369  319D  2596  3182   	fcall	_setLoad_AH_AL_Restore
 11084                           
 11085                           ;OverLoad_B1.c: 180: setDimmerLights_Clear(1, 1);
 11086  036C  0020               	movlb	0	; select bank0
 11087  036D  01A2               	clrf	setDimmerLights_Clear@command
 11088  036E  0AA2               	incf	setDimmerLights_Clear@command,f
 11089  036F  3001               	movlw	1
 11090  0370  319B  23A3  3182   	fcall	_setDimmerLights_Clear
 11091                           
 11092                           ;OverLoad_B1.c: 184: ;;
 11093                           ;OverLoad_B1.c: 190: setDimmerLights_Clear(2, 1);
 11094  0373  0020               	movlb	0	; select bank0
 11095  0374  01A2               	clrf	setDimmerLights_Clear@command
 11096  0375  0AA2               	incf	setDimmerLights_Clear@command,f
 11097  0376  3002               	movlw	2
 11098  0377  319B  23A3         	fcall	_setDimmerLights_Clear
 11099                           
 11100                           ;OverLoad_B1.c: 194: ;;
 11101  0379  0008               	return
 11102  037A                     __end_of_Load_Main:	
 11103                           
 11104                           	psect	text57
 11105  11E1                     __ptext57:	
 11106 ;; *************** function _setLoad_Exceptions *****************
 11107 ;; Defined at:
 11108 ;;		line 231 in file "../src/OverLoad_B1.c"
 11109 ;; Parameters:    Size  Location     Type
 11110 ;;  command         1    wreg     unsigned char 
 11111 ;; Auto vars:     Size  Location     Type
 11112 ;;  command         1   16[BANK0 ] unsigned char 
 11113 ;;  i               1   15[BANK0 ] unsigned char 
 11114 ;; Return value:  Size  Location     Type
 11115 ;;		None               void
 11116 ;; Registers used:
 11117 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11118 ;; Tracked objects:
 11119 ;;		On entry : 0/0
 11120 ;;		On exit  : 0/0
 11121 ;;		Unchanged: 0/0
 11122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;Total ram usage:        3 bytes
 11128 ;; Hardware stack levels used:    1
 11129 ;; Hardware stack levels required when called:    9
 11130 ;; This function calls:
 11131 ;;		_DimmerLights_Exceptions
 11132 ;;		_setLED
 11133 ;;		_setRF_Enable
 11134 ;;		_setSw_Enable
 11135 ;; This function is called by:
 11136 ;;		_Load_Main
 11137 ;; This function uses a non-reentrant model
 11138 ;;
 11139                           
 11140                           
 11141                           ;psect for function _setLoad_Exceptions
 11142  11E1                     _setLoad_Exceptions:	
 11143                           
 11144                           ;incstack = 0
 11145                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11146                           ;setLoad_Exceptions@command stored from wreg
 11147  11E1  0020               	movlb	0	; select bank0
 11148  11E2  00B0               	movwf	setLoad_Exceptions@command
 11149                           
 11150                           ;OverLoad_B1.c: 232: char i = command == 1 ? 0 : 1;
 11151  11E3  0830               	movf	setLoad_Exceptions@command,w
 11152  11E4  3A01               	xorlw	1
 11153  11E5  3000               	movlw	0
 11154  11E6  1D03               	skipz
 11155  11E7  3001               	movlw	1
 11156  11E8  00AE               	movwf	??_setLoad_Exceptions
 11157  11E9  082E               	movf	??_setLoad_Exceptions,w
 11158  11EA  00AF               	movwf	setLoad_Exceptions@i
 11159                           
 11160                           ;OverLoad_B1.c: 233: Load1.ERROR = command;
 11161  11EB  0830               	movf	setLoad_Exceptions@command,w
 11162  11EC  0023               	movlb	3	; select bank3
 11163  11ED  12A0               	bcf	_Load1^(0+384),5
 11164  11EE  1D03               	skipz
 11165  11EF  16A0               	bsf	_Load1^(0+384),5
 11166                           
 11167                           ;OverLoad_B1.c: 234: Load1.Safe = i;
 11168  11F0  0020               	movlb	0	; select bank0
 11169  11F1  082F               	movf	setLoad_Exceptions@i,w
 11170  11F2  0023               	movlb	3	; select bank3
 11171  11F3  11A0               	bcf	_Load1^(0+384),3
 11172  11F4  1D03               	skipz
 11173  11F5  15A0               	bsf	_Load1^(0+384),3
 11174                           
 11175                           ;OverLoad_B1.c: 235: Load1.ErrorStatus = command;
 11176  11F6  0020               	movlb	0	; select bank0
 11177  11F7  0830               	movf	setLoad_Exceptions@command,w
 11178  11F8  00AE               	movwf	??_setLoad_Exceptions
 11179  11F9  082E               	movf	??_setLoad_Exceptions,w
 11180  11FA  0023               	movlb	3	; select bank3
 11181  11FB  00A5               	movwf	(_Load1^(0+384)+5)
 11182                           
 11183                           ;OverLoad_B1.c: 237: if (command == 1) {
 11184  11FC  0020               	movlb	0	; select bank0
 11185  11FD  0830               	movf	setLoad_Exceptions@command,w
 11186  11FE  3A01               	xorlw	1
 11187  11FF  1D03               	skipz
 11188  1200  2A05               	goto	l1718
 11189                           
 11190                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 11191  1201  3002               	movlw	2
 11192  1202  3193  23E8  3191   	fcall	_DimmerLights_Exceptions
 11193  1205                     l1718:	
 11194                           
 11195                           ;OverLoad_B1.c: 242: }
 11196                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 11197  1205  0020               	movlb	0	; select bank0
 11198  1206  0830               	movf	setLoad_Exceptions@command,w
 11199  1207  3E0A               	addlw	10
 11200  1208  00AE               	movwf	??_setLoad_Exceptions
 11201  1209  082E               	movf	??_setLoad_Exceptions,w
 11202  120A  00A2               	movwf	setLED@command
 11203  120B  3063               	movlw	99
 11204  120C  3196  267D  3191   	fcall	_setLED
 11205                           
 11206                           ;OverLoad_B1.c: 245: setSw_Enable(i);
 11207  120F  0020               	movlb	0	; select bank0
 11208  1210  082F               	movf	setLoad_Exceptions@i,w
 11209  1211  319D  25B2  3191   	fcall	_setSw_Enable
 11210                           
 11211                           ;OverLoad_B1.c: 247: setRF_Enable(i);
 11212  1214  0020               	movlb	0	; select bank0
 11213  1215  082F               	movf	setLoad_Exceptions@i,w
 11214  1216  319B  2348         	fcall	_setRF_Enable
 11215  1218  0008               	return
 11216  1219                     __end_of_setLoad_Exceptions:	
 11217                           
 11218                           	psect	text58
 11219  1DB2                     __ptext58:	
 11220 ;; *************** function _setSw_Enable *****************
 11221 ;; Defined at:
 11222 ;;		line 91 in file "../src/Switch_B1.c"
 11223 ;; Parameters:    Size  Location     Type
 11224 ;;  command         1    wreg     unsigned char 
 11225 ;; Auto vars:     Size  Location     Type
 11226 ;;  command         1    2[BANK0 ] unsigned char 
 11227 ;; Return value:  Size  Location     Type
 11228 ;;		None               void
 11229 ;; Registers used:
 11230 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11231 ;; Tracked objects:
 11232 ;;		On entry : 0/0
 11233 ;;		On exit  : 0/0
 11234 ;;		Unchanged: 0/0
 11235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11239 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;Total ram usage:        1 bytes
 11241 ;; Hardware stack levels used:    1
 11242 ;; Hardware stack levels required when called:    6
 11243 ;; This function calls:
 11244 ;;		_SwPointSelect
 11245 ;; This function is called by:
 11246 ;;		_my_MainTime
 11247 ;;		_setLoad_Exceptions
 11248 ;;		_setOverTemp_Exceptions
 11249 ;; This function uses a non-reentrant model
 11250 ;;
 11251                           
 11252                           
 11253                           ;psect for function _setSw_Enable
 11254  1DB2                     _setSw_Enable:	
 11255                           
 11256                           ;incstack = 0
 11257                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11258                           ;setSw_Enable@command stored from wreg
 11259  1DB2  0020               	movlb	0	; select bank0
 11260  1DB3  00A2               	movwf	setSw_Enable@command
 11261                           
 11262                           ;Switch_B1.c: 94: SwPointSelect(1);
 11263  1DB4  3001               	movlw	1
 11264  1DB5  319C  24B0  319D   	fcall	_SwPointSelect
 11265                           
 11266                           ;Switch_B1.c: 95: Sw->Enable = command;
 11267  1DB8  0020               	movlb	0	; select bank0
 11268  1DB9  086C               	movf	_Sw,w
 11269  1DBA  0086               	movwf	6
 11270  1DBB  3001               	movlw	1	; select bank2/3
 11271  1DBC  0087               	movwf	7
 11272  1DBD  0822               	movf	setSw_Enable@command,w
 11273  1DBE  1001               	bcf	1,0
 11274  1DBF  1D03               	skipz
 11275  1DC0  1401               	bsf	1,0
 11276                           
 11277                           ;Switch_B1.c: 99: SwPointSelect(2);
 11278  1DC1  3002               	movlw	2
 11279  1DC2  319C  24B0         	fcall	_SwPointSelect
 11280                           
 11281                           ;Switch_B1.c: 100: Sw->Enable = command;
 11282  1DC4  0020               	movlb	0	; select bank0
 11283  1DC5  086C               	movf	_Sw,w
 11284  1DC6  0086               	movwf	6
 11285  1DC7  3001               	movlw	1	; select bank2/3
 11286  1DC8  0087               	movwf	7
 11287  1DC9  0822               	movf	setSw_Enable@command,w
 11288  1DCA  1001               	bcf	1,0
 11289  1DCB  1D03               	skipz
 11290  1DCC  1401               	bsf	1,0
 11291  1DCD  0008               	return
 11292  1DCE                     __end_of_setSw_Enable:	
 11293                           
 11294                           	psect	text59
 11295  1B48                     __ptext59:	
 11296 ;; *************** function _setRF_Enable *****************
 11297 ;; Defined at:
 11298 ;;		line 227 in file "../src/RF_Control_B1.c"
 11299 ;; Parameters:    Size  Location     Type
 11300 ;;  command         1    wreg     unsigned char 
 11301 ;; Auto vars:     Size  Location     Type
 11302 ;;  command         1    0[BANK0 ] unsigned char 
 11303 ;; Return value:  Size  Location     Type
 11304 ;;		None               void
 11305 ;; Registers used:
 11306 ;;		wreg, status,2
 11307 ;; Tracked objects:
 11308 ;;		On entry : 0/0
 11309 ;;		On exit  : 0/0
 11310 ;;		Unchanged: 0/0
 11311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11316 ;;Total ram usage:        1 bytes
 11317 ;; Hardware stack levels used:    1
 11318 ;; Hardware stack levels required when called:    5
 11319 ;; This function calls:
 11320 ;;		Nothing
 11321 ;; This function is called by:
 11322 ;;		_my_MainTime
 11323 ;;		_setLoad_Exceptions
 11324 ;;		_setOverTemp_Exceptions
 11325 ;; This function uses a non-reentrant model
 11326 ;;
 11327                           
 11328                           
 11329                           ;psect for function _setRF_Enable
 11330  1B48                     _setRF_Enable:	
 11331                           
 11332                           ;incstack = 0
 11333                           ; Regs used in _setRF_Enable: [wreg+status,2]
 11334                           ;setRF_Enable@command stored from wreg
 11335  1B48  0020               	movlb	0	; select bank0
 11336  1B49  00A0               	movwf	setRF_Enable@command
 11337                           
 11338                           ;RF_Control_B1.c: 228: RF1.Enable = command;
 11339  1B4A  0820               	movf	setRF_Enable@command,w
 11340  1B4B  0021               	movlb	1	; select bank1
 11341  1B4C  103E               	bcf	_RF1^(0+128),0
 11342  1B4D  1D03               	skipz
 11343  1B4E  143E               	bsf	_RF1^(0+128),0
 11344                           
 11345                           ;RF_Control_B1.c: 229: RF1.Learn = 0;
 11346  1B4F  133E               	bcf	_RF1^(0+128),6
 11347                           
 11348                           ;RF_Control_B1.c: 230: RF1.TransceiveGO = 0;
 11349  1B50  113E               	bcf	_RF1^(0+128),2
 11350                           
 11351                           ;RF_Control_B1.c: 231: RF1.RxStatus = 0;
 11352  1B51  11BE               	bcf	_RF1^(0+128),3
 11353                           
 11354                           ;RF_Control_B1.c: 232: RF1.ReceiveGO = 0;
 11355  1B52  10BE               	bcf	_RF1^(0+128),1
 11356                           
 11357                           ;RF_Control_B1.c: 233: RF1.DebounceTime = 0;
 11358  1B53  01C7               	clrf	(_RF1^(0+128)+9)
 11359                           
 11360                           ;RF_Control_B1.c: 234: RF1.Debounce = 0;
 11361  1B54  12BE               	bcf	_RF1^(0+128),5
 11362  1B55  0008               	return
 11363  1B56                     __end_of_setRF_Enable:	
 11364                           
 11365                           	psect	text60
 11366  13E8                     __ptext60:	
 11367 ;; *************** function _DimmerLights_Exceptions *****************
 11368 ;; Defined at:
 11369 ;;		line 522 in file "../src/Dimmer_B1.c"
 11370 ;; Parameters:    Size  Location     Type
 11371 ;;  status          1    wreg     unsigned char 
 11372 ;; Auto vars:     Size  Location     Type
 11373 ;;  status          1   13[BANK0 ] unsigned char 
 11374 ;; Return value:  Size  Location     Type
 11375 ;;		None               void
 11376 ;; Registers used:
 11377 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11378 ;; Tracked objects:
 11379 ;;		On entry : 0/0
 11380 ;;		On exit  : 0/0
 11381 ;;		Unchanged: 0/0
 11382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11386 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;Total ram usage:        1 bytes
 11388 ;; Hardware stack levels used:    1
 11389 ;; Hardware stack levels required when called:    8
 11390 ;; This function calls:
 11391 ;;		_getDimmerLights_StatusFlag
 11392 ;;		_setBuz
 11393 ;;		_setDimmerLights_ERROR
 11394 ;;		_setDimmerLights_TriggerERROR
 11395 ;; This function is called by:
 11396 ;;		_setLoad_Exceptions
 11397 ;;		_setOverTemp_Exceptions
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           
 11402                           ;psect for function _DimmerLights_Exceptions
 11403  13E8                     _DimmerLights_Exceptions:	
 11404                           
 11405                           ;incstack = 0
 11406                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11407                           ;DimmerLights_Exceptions@status stored from wreg
 11408  13E8  0020               	movlb	0	; select bank0
 11409  13E9  00AD               	movwf	DimmerLights_Exceptions@status
 11410                           
 11411                           ;Dimmer_B1.c: 523: if (status == 1) {
 11412  13EA  082D               	movf	DimmerLights_Exceptions@status,w
 11413  13EB  3A01               	xorlw	1
 11414  13EC  1D03               	skipz
 11415  13ED  2BFE               	goto	l9071
 11416                           
 11417                           ;Dimmer_B1.c: 524: if (getDimmerLights_StatusFlag() == 1) {
 11418  13EE  319B  23D3  3193   	fcall	_getDimmerLights_StatusFlag
 11419  13F1  3A01               	xorlw	1
 11420  13F2  1D03               	skipz
 11421  13F3  2C15               	goto	l9079
 11422                           
 11423                           ;Dimmer_B1.c: 525: setBuz(10, 300);
 11424  13F4  302C               	movlw	44
 11425  13F5  0020               	movlb	0	; select bank0
 11426  13F6  00A9               	movwf	setBuz@time
 11427  13F7  3001               	movlw	1
 11428  13F8  00AA               	movwf	setBuz@time+1
 11429  13F9  300A               	movlw	10
 11430  13FA  3195  25C9  3193   	fcall	_setBuz
 11431  13FD  2C15               	goto	l9079
 11432  13FE                     l9071:	
 11433                           ;Dimmer_B1.c: 537: } else if (status == 2)
 11434                           
 11435                           ;Dimmer_B1.c: 532: setDimmerLights_ERROR(2);
 11436                           
 11437                           ;Dimmer_B1.c: 526: }
 11438                           ;Dimmer_B1.c: 529: setDimmerLights_ERROR(1);
 11439                           
 11440  13FE  0020               	movlb	0	; select bank0
 11441  13FF  082D               	movf	DimmerLights_Exceptions@status,w
 11442  1400  3A02               	xorlw	2
 11443  1401  1D03               	skipz
 11444  1402  2C10               	goto	l9077
 11445                           
 11446                           ;Dimmer_B1.c: 538: {
 11447                           ;Dimmer_B1.c: 539: setBuz(5, 300);
 11448  1403  302C               	movlw	44
 11449  1404  00A9               	movwf	setBuz@time
 11450  1405  3001               	movlw	1
 11451  1406  00AA               	movwf	setBuz@time+1
 11452  1407  3005               	movlw	5
 11453  1408  3195  25C9  3193   	fcall	_setBuz
 11454                           
 11455                           ;Dimmer_B1.c: 540: setDimmerLights_ERROR(Dimmer->Load);
 11456  140B  0A76               	incf	_Dimmer,w
 11457  140C  0086               	movwf	6
 11458  140D  0187               	clrf	7
 11459  140E  0801               	movf	1,w
 11460  140F  2C1A               	goto	L7
 11461  1410                     l9077:	
 11462                           ;Dimmer_B1.c: 541: } else if (status == 3)
 11463                           
 11464  1410  0020               	movlb	0	; select bank0
 11465  1411  082D               	movf	DimmerLights_Exceptions@status,w
 11466  1412  3A03               	xorlw	3
 11467  1413  1D03               	skipz
 11468  1414  2C1D               	goto	l870
 11469  1415                     l9079:	
 11470                           
 11471                           ;Dimmer_B1.c: 542: {
 11472                           ;Dimmer_B1.c: 544: setDimmerLights_ERROR(1);
 11473  1415  3001               	movlw	1
 11474  1416  3195  251C  3193   	fcall	_setDimmerLights_ERROR
 11475                           
 11476                           ;Dimmer_B1.c: 547: setDimmerLights_ERROR(2);
 11477  1419  3002               	movlw	2
 11478  141A                     L7:	
 11479  141A  3195  251C  3193   	fcall	_setDimmerLights_ERROR
 11480  141D                     l870:	
 11481                           
 11482                           ;Dimmer_B1.c: 552: }
 11483                           ;Dimmer_B1.c: 555: setDimmerLights_TriggerERROR(1, 0);
 11484  141D  0020               	movlb	0	; select bank0
 11485  141E  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11486  141F  3001               	movlw	1
 11487  1420  319F  27D5  3193   	fcall	_setDimmerLights_TriggerERROR
 11488                           
 11489                           ;Dimmer_B1.c: 558: setDimmerLights_TriggerERROR(2, 0);
 11490  1423  0020               	movlb	0	; select bank0
 11491  1424  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11492  1425  3002               	movlw	2
 11493  1426  319F  27D5  3193   	fcall	_setDimmerLights_TriggerERROR
 11494                           
 11495                           ;Dimmer_B1.c: 564: if (myMain.SelfTest == 0) {
 11496  1429  0021               	movlb	1	; select bank1
 11497  142A  1B20               	btfsc	_myMain^(0+128),6
 11498  142B  0008               	return
 11499                           
 11500                           ;Dimmer_B1.c: 565: myMain.i = 0;
 11501  142C  102E               	bcf	(_myMain^(0+128)+14),0
 11502                           
 11503                           ;Dimmer_B1.c: 566: myMain.j = 0;
 11504  142D  10AE               	bcf	(_myMain^(0+128)+14),1
 11505                           
 11506                           ;Dimmer_B1.c: 567: myMain.k = 1;
 11507  142E  152E               	bsf	(_myMain^(0+128)+14),2
 11508                           
 11509                           ;Dimmer_B1.c: 568: myMain.Count2 = 0;
 11510  142F  01A7               	clrf	(_myMain^(0+128)+7)
 11511  1430  01A8               	clrf	((_myMain+1)^(0+128)+7)
 11512  1431  0008               	return
 11513  1432                     __end_of_DimmerLights_Exceptions:	
 11514                           
 11515                           	psect	text61
 11516  1FD5                     __ptext61:	
 11517 ;; *************** function _setDimmerLights_TriggerERROR *****************
 11518 ;; Defined at:
 11519 ;;		line 591 in file "../src/Dimmer_B1.c"
 11520 ;; Parameters:    Size  Location     Type
 11521 ;;  lights          1    wreg     unsigned char 
 11522 ;;  command         1    2[BANK0 ] unsigned char 
 11523 ;; Auto vars:     Size  Location     Type
 11524 ;;  lights          1    3[BANK0 ] unsigned char 
 11525 ;; Return value:  Size  Location     Type
 11526 ;;		None               void
 11527 ;; Registers used:
 11528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11529 ;; Tracked objects:
 11530 ;;		On entry : 0/0
 11531 ;;		On exit  : 0/0
 11532 ;;		Unchanged: 0/0
 11533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11534 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;Total ram usage:        2 bytes
 11539 ;; Hardware stack levels used:    1
 11540 ;; Hardware stack levels required when called:    6
 11541 ;; This function calls:
 11542 ;;		_DimmerLightsPointSelect
 11543 ;; This function is called by:
 11544 ;;		_DimmerLights_Exceptions
 11545 ;; This function uses a non-reentrant model
 11546 ;;
 11547                           
 11548                           
 11549                           ;psect for function _setDimmerLights_TriggerERROR
 11550  1FD5                     _setDimmerLights_TriggerERROR:	
 11551                           
 11552                           ;incstack = 0
 11553                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11554                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 11555  1FD5  0020               	movlb	0	; select bank0
 11556  1FD6  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 11557                           
 11558                           ;Dimmer_B1.c: 593: DimmerLightsPointSelect(lights);
 11559  1FD7  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 11560  1FD8  319C  244E         	fcall	_DimmerLightsPointSelect
 11561                           
 11562                           ;Dimmer_B1.c: 594: DimmerLights->Trigger = command;
 11563  1FDA  0020               	movlb	0	; select bank0
 11564  1FDB  086B               	movf	_DimmerLights,w
 11565  1FDC  3E08               	addlw	8
 11566  1FDD  0086               	movwf	6
 11567  1FDE  3001               	movlw	1	; select bank2/3
 11568  1FDF  0087               	movwf	7
 11569  1FE0  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11570  1FE1  1101               	bcf	1,2
 11571  1FE2  1D03               	skipz
 11572  1FE3  1501               	bsf	1,2
 11573                           
 11574                           ;Dimmer_B1.c: 595: DimmerLights->Switch = command;
 11575  1FE4  086B               	movf	_DimmerLights,w
 11576  1FE5  3E08               	addlw	8
 11577  1FE6  0086               	movwf	6
 11578  1FE7  3001               	movlw	1	; select bank2/3
 11579  1FE8  0087               	movwf	7
 11580  1FE9  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11581  1FEA  1081               	bcf	1,1
 11582  1FEB  1D03               	skipz
 11583  1FEC  1481               	bsf	1,1
 11584                           
 11585                           ;Dimmer_B1.c: 596: DimmerLights->TriggerAdj = command;
 11586  1FED  086B               	movf	_DimmerLights,w
 11587  1FEE  3E08               	addlw	8
 11588  1FEF  0086               	movwf	6
 11589  1FF0  3001               	movlw	1	; select bank2/3
 11590  1FF1  0087               	movwf	7
 11591  1FF2  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11592  1FF3  1201               	bcf	1,4
 11593  1FF4  1D03               	skipz
 11594  1FF5  1601               	bsf	1,4
 11595                           
 11596                           ;Dimmer_B1.c: 597: DimmerLights->AdjGo = command;
 11597  1FF6  086B               	movf	_DimmerLights,w
 11598  1FF7  3E08               	addlw	8
 11599  1FF8  0086               	movwf	6
 11600  1FF9  3001               	movlw	1	; select bank2/3
 11601  1FFA  0087               	movwf	7
 11602  1FFB  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11603  1FFC  1181               	bcf	1,3
 11604  1FFD  1D03               	skipz
 11605  1FFE  1581               	bsf	1,3
 11606  1FFF  0008               	return
 11607  2000                     __end_of_setDimmerLights_TriggerERROR:	
 11608                           
 11609                           	psect	text62
 11610  151C                     __ptext62:	
 11611 ;; *************** function _setDimmerLights_ERROR *****************
 11612 ;; Defined at:
 11613 ;;		line 573 in file "../src/Dimmer_B1.c"
 11614 ;; Parameters:    Size  Location     Type
 11615 ;;  lights          1    wreg     unsigned char 
 11616 ;; Auto vars:     Size  Location     Type
 11617 ;;  lights          1    5[BANK0 ] unsigned char 
 11618 ;; Return value:  Size  Location     Type
 11619 ;;		None               void
 11620 ;; Registers used:
 11621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11622 ;; Tracked objects:
 11623 ;;		On entry : 0/0
 11624 ;;		On exit  : 0/0
 11625 ;;		Unchanged: 0/0
 11626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11629 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11630 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11631 ;;Total ram usage:        2 bytes
 11632 ;; Hardware stack levels used:    1
 11633 ;; Hardware stack levels required when called:    7
 11634 ;; This function calls:
 11635 ;;		_DimmerLightsPointSelect
 11636 ;;		_setLED
 11637 ;;		_setLoad_StatusOff
 11638 ;;		_setRFSW_Status
 11639 ;;		_setSw_Status
 11640 ;; This function is called by:
 11641 ;;		_DimmerLights_Exceptions
 11642 ;; This function uses a non-reentrant model
 11643 ;;
 11644                           
 11645                           
 11646                           ;psect for function _setDimmerLights_ERROR
 11647  151C                     _setDimmerLights_ERROR:	
 11648                           
 11649                           ;incstack = 0
 11650                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11651                           ;setDimmerLights_ERROR@lights stored from wreg
 11652  151C  0020               	movlb	0	; select bank0
 11653  151D  00A5               	movwf	setDimmerLights_ERROR@lights
 11654                           
 11655                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(lights);
 11656  151E  0825               	movf	setDimmerLights_ERROR@lights,w
 11657  151F  319C  244E  3195   	fcall	_DimmerLightsPointSelect
 11658                           
 11659                           ;Dimmer_B1.c: 575: if (DimmerLights->Status == 1) {
 11660  1522  0020               	movlb	0	; select bank0
 11661  1523  086B               	movf	_DimmerLights,w
 11662  1524  0086               	movwf	6
 11663  1525  3001               	movlw	1	; select bank2/3
 11664  1526  0087               	movwf	7
 11665  1527  1E81               	btfss	1,5
 11666  1528  0008               	return
 11667                           
 11668                           ;Dimmer_B1.c: 577: DimmerLights->Signal = 0;
 11669  1529  086B               	movf	_DimmerLights,w
 11670  152A  0086               	movwf	6
 11671  152B  3001               	movlw	1	; select bank2/3
 11672  152C  0087               	movwf	7
 11673  152D  1081               	bcf	1,1
 11674                           
 11675                           ;Dimmer_B1.c: 578: DimmerLights->AdjFlag = 0;
 11676  152E  086B               	movf	_DimmerLights,w
 11677  152F  0086               	movwf	6
 11678  1530  3001               	movlw	1	; select bank2/3
 11679  1531  0087               	movwf	7
 11680  1532  1181               	bcf	1,3
 11681                           
 11682                           ;Dimmer_B1.c: 579: DimmerLights->AdjStatus = 0;
 11683  1533  086B               	movf	_DimmerLights,w
 11684  1534  0086               	movwf	6
 11685  1535  3001               	movlw	1	; select bank2/3
 11686  1536  0087               	movwf	7
 11687  1537  1201               	bcf	1,4
 11688                           
 11689                           ;Dimmer_B1.c: 580: DimmerLights->StatusFlag = 0;
 11690  1538  086B               	movf	_DimmerLights,w
 11691  1539  0086               	movwf	6
 11692  153A  3001               	movlw	1	; select bank2/3
 11693  153B  0087               	movwf	7
 11694  153C  1301               	bcf	1,6
 11695                           
 11696                           ;Dimmer_B1.c: 581: DimmerLights->DimmingTimeValue = 7;
 11697  153D  3007               	movlw	7
 11698  153E  00A4               	movwf	??_setDimmerLights_ERROR
 11699  153F  086B               	movf	_DimmerLights,w
 11700  1540  3E02               	addlw	2
 11701  1541  0086               	movwf	6
 11702  1542  3001               	movlw	1	; select bank2/3
 11703  1543  0087               	movwf	7
 11704  1544  0824               	movf	??_setDimmerLights_ERROR,w
 11705  1545  0081               	movwf	1
 11706                           
 11707                           ;Dimmer_B1.c: 582: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11708  1546  086B               	movf	_DimmerLights,w
 11709  1547  3E06               	addlw	6
 11710  1548  0086               	movwf	6
 11711  1549  3001               	movlw	1	; select bank2/3
 11712  154A  0087               	movwf	7
 11713  154B  0801               	movf	1,w
 11714  154C  00A4               	movwf	??_setDimmerLights_ERROR
 11715  154D  086B               	movf	_DimmerLights,w
 11716  154E  3E04               	addlw	4
 11717  154F  0086               	movwf	6
 11718  1550  3001               	movlw	1	; select bank2/3
 11719  1551  0087               	movwf	7
 11720  1552  0824               	movf	??_setDimmerLights_ERROR,w
 11721  1553  0081               	movwf	1
 11722                           
 11723                           ;Dimmer_B1.c: 583: Dimmer->Detect = 1;
 11724  1554  0876               	movf	_Dimmer,w
 11725  1555  0086               	movwf	6
 11726  1556  0187               	clrf	7
 11727  1557  1401               	bsf	1,0
 11728                           
 11729                           ;Dimmer_B1.c: 584: setLoad_StatusOff(lights, 1);
 11730  1558  01A0               	clrf	setLoad_StatusOff@command
 11731  1559  0AA0               	incf	setLoad_StatusOff@command,f
 11732  155A  0825               	movf	setDimmerLights_ERROR@lights,w
 11733  155B  319E  260B  3195   	fcall	_setLoad_StatusOff
 11734                           
 11735                           ;Dimmer_B1.c: 585: setLED(lights, 1);
 11736  155E  0020               	movlb	0	; select bank0
 11737  155F  01A2               	clrf	setLED@command
 11738  1560  0AA2               	incf	setLED@command,f
 11739  1561  0825               	movf	setDimmerLights_ERROR@lights,w
 11740  1562  3196  267D  3195   	fcall	_setLED
 11741                           
 11742                           ;Dimmer_B1.c: 586: setSw_Status(lights, 0);
 11743  1565  0020               	movlb	0	; select bank0
 11744  1566  01A2               	clrf	setSw_Status@command
 11745  1567  0825               	movf	setDimmerLights_ERROR@lights,w
 11746  1568  319B  2356  3195   	fcall	_setSw_Status
 11747                           
 11748                           ;Dimmer_B1.c: 587: setRFSW_Status(lights, 0);
 11749  156B  0020               	movlb	0	; select bank0
 11750  156C  01A2               	clrf	setRFSW_Status@command
 11751  156D  0825               	movf	setDimmerLights_ERROR@lights,w
 11752  156E  319B  232C         	fcall	_setRFSW_Status
 11753  1570  0008               	return
 11754  1571                     __end_of_setDimmerLights_ERROR:	
 11755                           
 11756                           	psect	text63
 11757  1BA3                     __ptext63:	
 11758 ;; *************** function _setDimmerLights_Clear *****************
 11759 ;; Defined at:
 11760 ;;		line 726 in file "../src/Dimmer_B1.c"
 11761 ;; Parameters:    Size  Location     Type
 11762 ;;  lights          1    wreg     unsigned char 
 11763 ;;  command         1    2[BANK0 ] unsigned char 
 11764 ;; Auto vars:     Size  Location     Type
 11765 ;;  lights          1    3[BANK0 ] unsigned char 
 11766 ;; Return value:  Size  Location     Type
 11767 ;;		None               void
 11768 ;; Registers used:
 11769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11770 ;; Tracked objects:
 11771 ;;		On entry : 0/0
 11772 ;;		On exit  : 0/0
 11773 ;;		Unchanged: 0/0
 11774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11775 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;Total ram usage:        2 bytes
 11780 ;; Hardware stack levels used:    1
 11781 ;; Hardware stack levels required when called:    6
 11782 ;; This function calls:
 11783 ;;		_DimmerLightsPointSelect
 11784 ;; This function is called by:
 11785 ;;		_Load_Main
 11786 ;; This function uses a non-reentrant model
 11787 ;;
 11788                           
 11789                           
 11790                           ;psect for function _setDimmerLights_Clear
 11791  1BA3                     _setDimmerLights_Clear:	
 11792                           
 11793                           ;incstack = 0
 11794                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11795                           ;setDimmerLights_Clear@lights stored from wreg
 11796  1BA3  0020               	movlb	0	; select bank0
 11797  1BA4  00A3               	movwf	setDimmerLights_Clear@lights
 11798                           
 11799                           ;Dimmer_B1.c: 728: DimmerLightsPointSelect(lights);
 11800  1BA5  0823               	movf	setDimmerLights_Clear@lights,w
 11801  1BA6  319C  244E         	fcall	_DimmerLightsPointSelect
 11802                           
 11803                           ;Dimmer_B1.c: 729: DimmerLights->Clear = command;
 11804  1BA8  0020               	movlb	0	; select bank0
 11805  1BA9  086B               	movf	_DimmerLights,w
 11806  1BAA  3E09               	addlw	9
 11807  1BAB  0086               	movwf	6
 11808  1BAC  3001               	movlw	1	; select bank2/3
 11809  1BAD  0087               	movwf	7
 11810  1BAE  0822               	movf	setDimmerLights_Clear@command,w
 11811  1BAF  1101               	bcf	1,2
 11812  1BB0  1D03               	skipz
 11813  1BB1  1501               	bsf	1,2
 11814  1BB2  0008               	return
 11815  1BB3                     __end_of_setDimmerLights_Clear:	
 11816                           
 11817                           	psect	text64
 11818  1A5F                     __ptext64:	
 11819 ;; *************** function _getTemp_Safe *****************
 11820 ;; Defined at:
 11821 ;;		line 21 in file "../src/OverTemperature_B1.c"
 11822 ;; Parameters:    Size  Location     Type
 11823 ;;		None
 11824 ;; Auto vars:     Size  Location     Type
 11825 ;;  result          1    0[BANK0 ] unsigned char 
 11826 ;; Return value:  Size  Location     Type
 11827 ;;                  1    wreg      unsigned char 
 11828 ;; Registers used:
 11829 ;;		wreg, status,2
 11830 ;; Tracked objects:
 11831 ;;		On entry : 0/0
 11832 ;;		On exit  : 0/0
 11833 ;;		Unchanged: 0/0
 11834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11838 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11839 ;;Total ram usage:        1 bytes
 11840 ;; Hardware stack levels used:    1
 11841 ;; Hardware stack levels required when called:    5
 11842 ;; This function calls:
 11843 ;;		Nothing
 11844 ;; This function is called by:
 11845 ;;		_Load_Main
 11846 ;; This function uses a non-reentrant model
 11847 ;;
 11848                           
 11849                           
 11850                           ;psect for function _getTemp_Safe
 11851  1A5F                     _getTemp_Safe:	
 11852                           
 11853                           ;OverTemperature_B1.c: 22: char result = Temp1.Safe;
 11854                           
 11855                           ;incstack = 0
 11856                           ; Regs used in _getTemp_Safe: [wreg+status,2]
 11857  1A5F  3000               	movlw	0
 11858  1A60  0021               	movlb	1	; select bank1
 11859  1A61  1A58               	btfsc	_Temp1^(0+128),4
 11860  1A62  3001               	movlw	1
 11861  1A63  0020               	movlb	0	; select bank0
 11862  1A64  00A0               	movwf	getTemp_Safe@result
 11863                           
 11864                           ;OverTemperature_B1.c: 23: return result;
 11865  1A65  0820               	movf	getTemp_Safe@result,w
 11866  1A66  0008               	return
 11867  1A67                     __end_of_getTemp_Safe:	
 11868                           
 11869                           	psect	text65
 11870  1DCE                     __ptext65:	
 11871 ;; *************** function ___wmul *****************
 11872 ;; Defined at:
 11873 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11874 ;; Parameters:    Size  Location     Type
 11875 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11876 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11877 ;; Auto vars:     Size  Location     Type
 11878 ;;  product         2    4[BANK0 ] unsigned int 
 11879 ;; Return value:  Size  Location     Type
 11880 ;;                  2    0[BANK0 ] unsigned int 
 11881 ;; Registers used:
 11882 ;;		wreg, status,2, status,0
 11883 ;; Tracked objects:
 11884 ;;		On entry : 0/0
 11885 ;;		On exit  : 0/0
 11886 ;;		Unchanged: 0/0
 11887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11888 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11891 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11892 ;;Total ram usage:        6 bytes
 11893 ;; Hardware stack levels used:    1
 11894 ;; Hardware stack levels required when called:    5
 11895 ;; This function calls:
 11896 ;;		Nothing
 11897 ;; This function is called by:
 11898 ;;		_Load_Main
 11899 ;; This function uses a non-reentrant model
 11900 ;;
 11901                           
 11902                           
 11903                           ;psect for function ___wmul
 11904  1DCE                     ___wmul:	
 11905                           
 11906                           ;incstack = 0
 11907                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11908  1DCE  0020               	movlb	0	; select bank0
 11909  1DCF  01A4               	clrf	___wmul@product
 11910  1DD0  01A5               	clrf	___wmul@product+1
 11911  1DD1                     l10139:	
 11912  1DD1  1C20               	btfss	___wmul@multiplier,0
 11913  1DD2  2DD7               	goto	l2866
 11914  1DD3  0822               	movf	___wmul@multiplicand,w
 11915  1DD4  07A4               	addwf	___wmul@product,f
 11916  1DD5  0823               	movf	___wmul@multiplicand+1,w
 11917  1DD6  3DA5               	addwfc	___wmul@product+1,f
 11918  1DD7                     l2866:	
 11919  1DD7  3001               	movlw	1
 11920  1DD8                     u10865:	
 11921  1DD8  35A2               	lslf	___wmul@multiplicand,f
 11922  1DD9  0DA3               	rlf	___wmul@multiplicand+1,f
 11923  1DDA  0B89               	decfsz	9,f
 11924  1DDB  2DD8               	goto	u10865
 11925  1DDC  3001               	movlw	1
 11926  1DDD                     u10875:	
 11927  1DDD  36A1               	lsrf	___wmul@multiplier+1,f
 11928  1DDE  0CA0               	rrf	___wmul@multiplier,f
 11929  1DDF  0B89               	decfsz	9,f
 11930  1DE0  2DDD               	goto	u10875
 11931  1DE1  0821               	movf	___wmul@multiplier+1,w
 11932  1DE2  0420               	iorwf	___wmul@multiplier,w
 11933  1DE3  1D03               	skipz
 11934  1DE4  2DD1               	goto	l10139
 11935  1DE5  0825               	movf	___wmul@product+1,w
 11936  1DE6  01A1               	clrf	?___wmul+1
 11937  1DE7  07A1               	addwf	?___wmul+1,f
 11938  1DE8  0824               	movf	___wmul@product,w
 11939  1DE9  01A0               	clrf	?___wmul
 11940  1DEA  07A0               	addwf	?___wmul,f
 11941  1DEB  0008               	return
 11942  1DEC                     __end_of___wmul:	
 11943                           
 11944                           	psect	text66
 11945  11AA                     __ptext66:	
 11946 ;; *************** function ___lwdiv *****************
 11947 ;; Defined at:
 11948 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11949 ;; Parameters:    Size  Location     Type
 11950 ;;  divisor         2    0[BANK0 ] unsigned int 
 11951 ;;  dividend        2    2[BANK0 ] unsigned int 
 11952 ;; Auto vars:     Size  Location     Type
 11953 ;;  quotient        2    6[BANK0 ] unsigned int 
 11954 ;;  counter         1    5[BANK0 ] unsigned char 
 11955 ;; Return value:  Size  Location     Type
 11956 ;;                  2    0[BANK0 ] unsigned int 
 11957 ;; Registers used:
 11958 ;;		wreg, status,2, status,0
 11959 ;; Tracked objects:
 11960 ;;		On entry : 0/0
 11961 ;;		On exit  : 0/0
 11962 ;;		Unchanged: 0/0
 11963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11964 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11967 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11968 ;;Total ram usage:        8 bytes
 11969 ;; Hardware stack levels used:    1
 11970 ;; Hardware stack levels required when called:    5
 11971 ;; This function calls:
 11972 ;;		Nothing
 11973 ;; This function is called by:
 11974 ;;		_Load_Main
 11975 ;; This function uses a non-reentrant model
 11976 ;;
 11977                           
 11978                           
 11979                           ;psect for function ___lwdiv
 11980  11AA                     ___lwdiv:	
 11981                           
 11982                           ;incstack = 0
 11983                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11984  11AA  0020               	movlb	0	; select bank0
 11985  11AB  01A6               	clrf	___lwdiv@quotient
 11986  11AC  01A7               	clrf	___lwdiv@quotient+1
 11987  11AD  0821               	movf	___lwdiv@divisor+1,w
 11988  11AE  0420               	iorwf	___lwdiv@divisor,w
 11989  11AF  1903               	skipnz
 11990  11B0  29DA               	goto	l10171
 11991  11B1  01A5               	clrf	___lwdiv@counter
 11992  11B2  0AA5               	incf	___lwdiv@counter,f
 11993  11B3                     l10159:	
 11994  11B3  1BA1               	btfsc	___lwdiv@divisor+1,7
 11995  11B4  29BF               	goto	l10161
 11996  11B5  3001               	movlw	1
 11997  11B6                     u10905:	
 11998  11B6  35A0               	lslf	___lwdiv@divisor,f
 11999  11B7  0DA1               	rlf	___lwdiv@divisor+1,f
 12000  11B8  0B89               	decfsz	9,f
 12001  11B9  29B6               	goto	u10905
 12002  11BA  3001               	movlw	1
 12003  11BB  00A4               	movwf	??___lwdiv
 12004  11BC  0824               	movf	??___lwdiv,w
 12005  11BD  07A5               	addwf	___lwdiv@counter,f
 12006  11BE  29B3               	goto	l10159
 12007  11BF                     l10161:	
 12008  11BF  3001               	movlw	1
 12009  11C0                     u10925:	
 12010  11C0  35A6               	lslf	___lwdiv@quotient,f
 12011  11C1  0DA7               	rlf	___lwdiv@quotient+1,f
 12012  11C2  0B89               	decfsz	9,f
 12013  11C3  29C0               	goto	u10925
 12014  11C4  0821               	movf	___lwdiv@divisor+1,w
 12015  11C5  0223               	subwf	___lwdiv@dividend+1,w
 12016  11C6  1D03               	skipz
 12017  11C7  29CA               	goto	u10935
 12018  11C8  0820               	movf	___lwdiv@divisor,w
 12019  11C9  0222               	subwf	___lwdiv@dividend,w
 12020  11CA                     u10935:	
 12021  11CA  1C03               	skipc
 12022  11CB  29D1               	goto	l10167
 12023  11CC  0820               	movf	___lwdiv@divisor,w
 12024  11CD  02A2               	subwf	___lwdiv@dividend,f
 12025  11CE  0821               	movf	___lwdiv@divisor+1,w
 12026  11CF  3BA3               	subwfb	___lwdiv@dividend+1,f
 12027  11D0  1426               	bsf	___lwdiv@quotient,0
 12028  11D1                     l10167:	
 12029  11D1  3001               	movlw	1
 12030  11D2                     u10945:	
 12031  11D2  36A1               	lsrf	___lwdiv@divisor+1,f
 12032  11D3  0CA0               	rrf	___lwdiv@divisor,f
 12033  11D4  0B89               	decfsz	9,f
 12034  11D5  29D2               	goto	u10945
 12035  11D6  3001               	movlw	1
 12036  11D7  02A5               	subwf	___lwdiv@counter,f
 12037  11D8  1D03               	btfss	3,2
 12038  11D9  29BF               	goto	l10161
 12039  11DA                     l10171:	
 12040  11DA  0827               	movf	___lwdiv@quotient+1,w
 12041  11DB  01A1               	clrf	?___lwdiv+1
 12042  11DC  07A1               	addwf	?___lwdiv+1,f
 12043  11DD  0826               	movf	___lwdiv@quotient,w
 12044  11DE  01A0               	clrf	?___lwdiv
 12045  11DF  07A0               	addwf	?___lwdiv,f
 12046  11E0  0008               	return
 12047  11E1                     __end_of___lwdiv:	
 12048                           
 12049                           	psect	text67
 12050  1A21                     __ptext67:	
 12051 ;; *************** function _Load_Initialization *****************
 12052 ;; Defined at:
 12053 ;;		line 9 in file "../src/OverLoad_B1.c"
 12054 ;; Parameters:    Size  Location     Type
 12055 ;;		None
 12056 ;; Auto vars:     Size  Location     Type
 12057 ;;		None
 12058 ;; Return value:  Size  Location     Type
 12059 ;;		None               void
 12060 ;; Registers used:
 12061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12062 ;; Tracked objects:
 12063 ;;		On entry : 0/0
 12064 ;;		On exit  : 0/0
 12065 ;;		Unchanged: 0/0
 12066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;Total ram usage:        0 bytes
 12072 ;; Hardware stack levels used:    1
 12073 ;; Hardware stack levels required when called:    6
 12074 ;; This function calls:
 12075 ;;		_setLoad_AH_AL_Restore
 12076 ;; This function is called by:
 12077 ;;		_main
 12078 ;; This function uses a non-reentrant model
 12079 ;;
 12080                           
 12081                           
 12082                           ;psect for function _Load_Initialization
 12083  1A21                     _Load_Initialization:	
 12084                           
 12085                           ;OverLoad_B1.c: 10: Load1.Safe = 1;
 12086                           
 12087                           ;incstack = 0
 12088                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12089  1A21  0023               	movlb	3	; select bank3
 12090  1A22  15A0               	bsf	_Load1^(0+384),3
 12091                           
 12092                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12093  1A23  319D  2596         	fcall	_setLoad_AH_AL_Restore
 12094  1A25  0008               	return
 12095  1A26                     __end_of_Load_Initialization:	
 12096                           
 12097                           	psect	text68
 12098  1D96                     __ptext68:	
 12099 ;; *************** function _setLoad_AH_AL_Restore *****************
 12100 ;; Defined at:
 12101 ;;		line 307 in file "../src/OverLoad_B1.c"
 12102 ;; Parameters:    Size  Location     Type
 12103 ;;		None
 12104 ;; Auto vars:     Size  Location     Type
 12105 ;;  i               1    1[BANK0 ] unsigned char 
 12106 ;; Return value:  Size  Location     Type
 12107 ;;		None               void
 12108 ;; Registers used:
 12109 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12110 ;; Tracked objects:
 12111 ;;		On entry : 0/0
 12112 ;;		On exit  : 0/0
 12113 ;;		Unchanged: 0/0
 12114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12117 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12119 ;;Total ram usage:        2 bytes
 12120 ;; Hardware stack levels used:    1
 12121 ;; Hardware stack levels required when called:    5
 12122 ;; This function calls:
 12123 ;;		Nothing
 12124 ;; This function is called by:
 12125 ;;		_Load_Initialization
 12126 ;;		_Load_Main
 12127 ;; This function uses a non-reentrant model
 12128 ;;
 12129                           
 12130                           
 12131                           ;psect for function _setLoad_AH_AL_Restore
 12132  1D96                     _setLoad_AH_AL_Restore:	
 12133                           
 12134                           ;OverLoad_B1.c: 308: char i;
 12135                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 12136                           
 12137                           ;incstack = 0
 12138                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12139  1D96  0020               	movlb	0	; select bank0
 12140  1D97  01A1               	clrf	setLoad_AH_AL_Restore@i
 12141  1D98                     L8:	
 12142  1D98  3005               	movlw	5
 12143  1D99  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12144  1D9A  1803               	btfsc	3,0
 12145  1D9B  0008               	return
 12146                           
 12147                           ;OverLoad_B1.c: 310: Load1.AH[i] = 0;
 12148  1D9C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12149  1D9D  3EA8               	addlw	(_Load1+8)& (0+255)
 12150  1D9E  0086               	movwf	6
 12151  1D9F  3001               	movlw	1	; select bank3/4
 12152  1DA0  0087               	movwf	7
 12153  1DA1  3000               	movlw	0
 12154  1DA2  3FC0               	movwi [0]fsr1
 12155  1DA3  3FC1               	movwi [1]fsr1
 12156                           
 12157                           ;OverLoad_B1.c: 311: Load1.AL[i] = 0xffff;
 12158  1DA4  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12159  1DA5  3EBA               	addlw	(_Load1+26)& (0+255)
 12160  1DA6  0086               	movwf	6
 12161  1DA7  3001               	movlw	1	; select bank3/4
 12162  1DA8  0087               	movwf	7
 12163  1DA9  30FF               	movlw	255
 12164  1DAA  3FC0               	movwi [0]fsr1
 12165  1DAB  30FF               	movlw	255
 12166  1DAC  3FC1               	movwi [1]fsr1
 12167  1DAD  3001               	movlw	1
 12168  1DAE  00A0               	movwf	??_setLoad_AH_AL_Restore
 12169  1DAF  0820               	movf	??_setLoad_AH_AL_Restore,w
 12170  1DB0  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12171  1DB1  2D98               	goto	L8
 12172  1DB2                     __end_of_setLoad_AH_AL_Restore:	
 12173                           
 12174                           	psect	text69
 12175  1AF9                     __ptext69:	
 12176 ;; *************** function _LED_Main *****************
 12177 ;; Defined at:
 12178 ;;		line 47 in file "../src/LED_B1.c"
 12179 ;; Parameters:    Size  Location     Type
 12180 ;;		None
 12181 ;; Auto vars:     Size  Location     Type
 12182 ;;		None
 12183 ;; Return value:  Size  Location     Type
 12184 ;;		None               void
 12185 ;; Registers used:
 12186 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12187 ;; Tracked objects:
 12188 ;;		On entry : 0/0
 12189 ;;		On exit  : 0/0
 12190 ;;		Unchanged: 0/0
 12191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;Total ram usage:        0 bytes
 12197 ;; Hardware stack levels used:    1
 12198 ;; Hardware stack levels required when called:    7
 12199 ;; This function calls:
 12200 ;;		_setLED_Main
 12201 ;; This function is called by:
 12202 ;;		_main
 12203 ;; This function uses a non-reentrant model
 12204 ;;
 12205                           
 12206                           
 12207                           ;psect for function _LED_Main
 12208  1AF9                     _LED_Main:	
 12209                           
 12210                           ;LED_B1.c: 49: setLED_Main(1);
 12211                           
 12212                           ;incstack = 0
 12213                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12214  1AF9  3001               	movlw	1
 12215  1AFA  3192  2292  319A   	fcall	_setLED_Main
 12216                           
 12217                           ;LED_B1.c: 52: setLED_Main(2);
 12218  1AFD  3002               	movlw	2
 12219  1AFE  3192  2292  319A   	fcall	_setLED_Main
 12220                           
 12221                           ;LED_B1.c: 58: setLED_Main(99);
 12222  1B01  3063               	movlw	99
 12223  1B02  3192  2292         	fcall	_setLED_Main
 12224  1B04  0008               	return
 12225  1B05                     __end_of_LED_Main:	
 12226                           
 12227                           	psect	text70
 12228  1292                     __ptext70:	
 12229 ;; *************** function _setLED_Main *****************
 12230 ;; Defined at:
 12231 ;;		line 192 in file "../src/LED_B1.c"
 12232 ;; Parameters:    Size  Location     Type
 12233 ;;  led             1    wreg     unsigned char 
 12234 ;; Auto vars:     Size  Location     Type
 12235 ;;  led             1    4[BANK0 ] unsigned char 
 12236 ;; Return value:  Size  Location     Type
 12237 ;;		None               void
 12238 ;; Registers used:
 12239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12240 ;; Tracked objects:
 12241 ;;		On entry : 0/0
 12242 ;;		On exit  : 0/0
 12243 ;;		Unchanged: 0/0
 12244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12247 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12248 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12249 ;;Total ram usage:        3 bytes
 12250 ;; Hardware stack levels used:    1
 12251 ;; Hardware stack levels required when called:    6
 12252 ;; This function calls:
 12253 ;;		_LedPointSelect
 12254 ;; This function is called by:
 12255 ;;		_LED_Main
 12256 ;; This function uses a non-reentrant model
 12257 ;;
 12258                           
 12259                           
 12260                           ;psect for function _setLED_Main
 12261  1292                     _setLED_Main:	
 12262                           
 12263                           ;incstack = 0
 12264                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12265                           ;setLED_Main@led stored from wreg
 12266  1292  0020               	movlb	0	; select bank0
 12267  1293  00A4               	movwf	setLED_Main@led
 12268                           
 12269                           ;LED_B1.c: 193: LedPointSelect(led);
 12270  1294  0824               	movf	setLED_Main@led,w
 12271  1295  3190  2066  3192   	fcall	_LedPointSelect
 12272                           
 12273                           ;LED_B1.c: 194: if (LED->GO == 1) {
 12274  1298  0878               	movf	_LED,w
 12275  1299  0086               	movwf	6
 12276  129A  3001               	movlw	1	; select bank2/3
 12277  129B  0087               	movwf	7
 12278  129C  1C81               	btfss	1,1
 12279  129D  0008               	return
 12280                           
 12281                           ;LED_B1.c: 195: LED->Time++;
 12282  129E  0A78               	incf	_LED,w
 12283  129F  0086               	movwf	6
 12284  12A0  3001               	movlw	1	; select bank2/3
 12285  12A1  0087               	movwf	7
 12286  12A2  3001               	movlw	1
 12287  12A3  0781               	addwf	1,f
 12288  12A4  3141               	addfsr 1,1
 12289  12A5  1803               	skipnc
 12290  12A6  0A81               	incf	1,f
 12291                           
 12292                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 12293  12A7  0A78               	incf	_LED,w
 12294  12A8  0086               	movwf	6
 12295  12A9  3001               	movlw	1	; select bank2/3
 12296  12AA  0087               	movwf	7
 12297  12AB  3F40               	moviw [0]fsr1
 12298  12AC  0020               	movlb	0	; select bank0
 12299  12AD  00A2               	movwf	??_setLED_Main
 12300  12AE  3F41               	moviw [1]fsr1
 12301  12AF  00A3               	movwf	??_setLED_Main+1
 12302  12B0  3000               	movlw	0
 12303  12B1  0223               	subwf	??_setLED_Main+1,w
 12304  12B2  3032               	movlw	50
 12305  12B3  1903               	skipnz
 12306  12B4  0222               	subwf	??_setLED_Main,w
 12307  12B5  1C03               	skipc
 12308  12B6  0008               	return
 12309                           
 12310                           ;LED_B1.c: 197: LED->Time = 0;
 12311  12B7  0A78               	incf	_LED,w
 12312  12B8  0086               	movwf	6
 12313  12B9  3001               	movlw	1	; select bank2/3
 12314  12BA  0087               	movwf	7
 12315  12BB  3000               	movlw	0
 12316  12BC  3FC0               	movwi [0]fsr1
 12317  12BD  3FC1               	movwi [1]fsr1
 12318                           
 12319                           ;LED_B1.c: 199: if (led == 1) {
 12320  12BE  0824               	movf	setLED_Main@led,w
 12321  12BF  3A01               	xorlw	1
 12322  12C0  1D03               	skipz
 12323  12C1  2AC5               	goto	l9725
 12324                           
 12325                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 12326  12C2  3008               	movlw	8
 12327  12C3  068C               	xorwf	12,f
 12328                           
 12329                           ;LED_B1.c: 201: }
 12330  12C4  0008               	return
 12331  12C5                     l9725:	
 12332                           
 12333                           ;LED_B1.c: 204: else if (led == 2) {
 12334  12C5  0824               	movf	setLED_Main@led,w
 12335  12C6  3A02               	xorlw	2
 12336  12C7  1D03               	skipz
 12337  12C8  2ACC               	goto	l9729
 12338                           
 12339                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 12340  12C9  3080               	movlw	128
 12341  12CA  068E               	xorwf	14,f
 12342                           
 12343                           ;LED_B1.c: 206: }
 12344  12CB  0008               	return
 12345  12CC                     l9729:	
 12346                           
 12347                           ;LED_B1.c: 214: else if (led == 99) {
 12348  12CC  0824               	movf	setLED_Main@led,w
 12349  12CD  3A63               	xorlw	99
 12350  12CE  1D03               	skipz
 12351  12CF  0008               	return
 12352                           
 12353                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 12354  12D0  3020               	movlw	32
 12355  12D1  068D               	xorwf	13,f
 12356  12D2  0008               	return
 12357  12D3                     __end_of_setLED_Main:	
 12358                           
 12359                           	psect	text71
 12360  1AED                     __ptext71:	
 12361 ;; *************** function _LED_Initialization *****************
 12362 ;; Defined at:
 12363 ;;		line 31 in file "../src/LED_B1.c"
 12364 ;; Parameters:    Size  Location     Type
 12365 ;;		None
 12366 ;; Auto vars:     Size  Location     Type
 12367 ;;		None
 12368 ;; Return value:  Size  Location     Type
 12369 ;;		None               void
 12370 ;; Registers used:
 12371 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12372 ;; Tracked objects:
 12373 ;;		On entry : 0/0
 12374 ;;		On exit  : 0/0
 12375 ;;		Unchanged: 0/0
 12376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12381 ;;Total ram usage:        0 bytes
 12382 ;; Hardware stack levels used:    1
 12383 ;; Hardware stack levels required when called:    8
 12384 ;; This function calls:
 12385 ;;		_setLED_Initialization
 12386 ;; This function is called by:
 12387 ;;		_main
 12388 ;; This function uses a non-reentrant model
 12389 ;;
 12390                           
 12391                           
 12392                           ;psect for function _LED_Initialization
 12393  1AED                     _LED_Initialization:	
 12394                           
 12395                           ;LED_B1.c: 33: setLED_Initialization(1);
 12396                           
 12397                           ;incstack = 0
 12398                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12399  1AED  3001               	movlw	1
 12400  1AEE  319B  23E4  319A   	fcall	_setLED_Initialization
 12401                           
 12402                           ;LED_B1.c: 36: setLED_Initialization(2);
 12403  1AF1  3002               	movlw	2
 12404  1AF2  319B  23E4  319A   	fcall	_setLED_Initialization
 12405                           
 12406                           ;LED_B1.c: 42: setLED_Initialization(99);
 12407  1AF5  3063               	movlw	99
 12408  1AF6  319B  23E4         	fcall	_setLED_Initialization
 12409  1AF8  0008               	return
 12410  1AF9                     __end_of_LED_Initialization:	
 12411                           
 12412                           	psect	text72
 12413  1BE4                     __ptext72:	
 12414 ;; *************** function _setLED_Initialization *****************
 12415 ;; Defined at:
 12416 ;;		line 63 in file "../src/LED_B1.c"
 12417 ;; Parameters:    Size  Location     Type
 12418 ;;  led             1    wreg     unsigned char 
 12419 ;; Auto vars:     Size  Location     Type
 12420 ;;  led             1    4[BANK0 ] unsigned char 
 12421 ;; Return value:  Size  Location     Type
 12422 ;;		None               void
 12423 ;; Registers used:
 12424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12425 ;; Tracked objects:
 12426 ;;		On entry : 0/0
 12427 ;;		On exit  : 0/0
 12428 ;;		Unchanged: 0/0
 12429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;Total ram usage:        1 bytes
 12435 ;; Hardware stack levels used:    1
 12436 ;; Hardware stack levels required when called:    7
 12437 ;; This function calls:
 12438 ;;		_LedPointSelect
 12439 ;;		_setLED
 12440 ;; This function is called by:
 12441 ;;		_LED_Initialization
 12442 ;; This function uses a non-reentrant model
 12443 ;;
 12444                           
 12445                           
 12446                           ;psect for function _setLED_Initialization
 12447  1BE4                     _setLED_Initialization:	
 12448                           
 12449                           ;incstack = 0
 12450                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12451                           ;setLED_Initialization@led stored from wreg
 12452  1BE4  0020               	movlb	0	; select bank0
 12453  1BE5  00A4               	movwf	setLED_Initialization@led
 12454                           
 12455                           ;LED_B1.c: 64: LedPointSelect(led);
 12456  1BE6  0824               	movf	setLED_Initialization@led,w
 12457  1BE7  3190  2066  319B   	fcall	_LedPointSelect
 12458                           
 12459                           ;LED_B1.c: 65: LED->Enable = 1;
 12460  1BEA  0878               	movf	_LED,w
 12461  1BEB  0086               	movwf	6
 12462  1BEC  3001               	movlw	1	; select bank2/3
 12463  1BED  0087               	movwf	7
 12464  1BEE  1401               	bsf	1,0
 12465                           
 12466                           ;LED_B1.c: 66: setLED(led, 0);
 12467  1BEF  0020               	movlb	0	; select bank0
 12468  1BF0  01A2               	clrf	setLED@command
 12469  1BF1  0824               	movf	setLED_Initialization@led,w
 12470  1BF2  3196  267D         	fcall	_setLED
 12471  1BF4  0008               	return
 12472  1BF5                     __end_of_setLED_Initialization:	
 12473                           
 12474                           	psect	text73
 12475  1E2A                     __ptext73:	
 12476 ;; *************** function _Flash_Memory_Main *****************
 12477 ;; Defined at:
 12478 ;;		line 797 in file "../src/MCU_B1.c"
 12479 ;; Parameters:    Size  Location     Type
 12480 ;;		None
 12481 ;; Auto vars:     Size  Location     Type
 12482 ;;		None
 12483 ;; Return value:  Size  Location     Type
 12484 ;;		None               void
 12485 ;; Registers used:
 12486 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12487 ;; Tracked objects:
 12488 ;;		On entry : 0/0
 12489 ;;		On exit  : 0/0
 12490 ;;		Unchanged: 0/0
 12491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;Total ram usage:        0 bytes
 12497 ;; Hardware stack levels used:    1
 12498 ;; Hardware stack levels required when called:    8
 12499 ;; This function calls:
 12500 ;;		_Flash_Memory_Modify
 12501 ;; This function is called by:
 12502 ;;		_main
 12503 ;; This function uses a non-reentrant model
 12504 ;;
 12505                           
 12506                           
 12507                           ;psect for function _Flash_Memory_Main
 12508  1E2A                     _Flash_Memory_Main:	
 12509                           
 12510                           ;MCU_B1.c: 798: if (Memory.GO == 1) {
 12511                           
 12512                           ;incstack = 0
 12513                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12514  1E2A  0024               	movlb	4	; select bank4
 12515  1E2B  1CC4               	btfss	(_Memory^(0+512)+36),1
 12516  1E2C  0008               	return
 12517                           
 12518                           ;MCU_B1.c: 799: if (Memory.Modify == 1) {
 12519  1E2D  1C44               	btfss	(_Memory^(0+512)+36),0
 12520  1E2E  2E47               	goto	l1347
 12521                           
 12522                           ;MCU_B1.c: 800: Memory.Time++;
 12523  1E2F  3001               	movlw	1
 12524  1E30  07C2               	addwf	(_Memory^(0+512)+34),f
 12525  1E31  3000               	movlw	0
 12526  1E32  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12527                           
 12528                           ;MCU_B1.c: 801: if (Memory.Time == 25)
 12529  1E33  3022               	movlw	34
 12530  1E34  3E20               	addlw	_Memory& (0+255)
 12531  1E35  0086               	movwf	6
 12532  1E36  3002               	movlw	2	; select bank4/5
 12533  1E37  0087               	movwf	7
 12534  1E38  3F40               	moviw [0]fsr1
 12535  1E39  3A19               	xorlw	25
 12536  1E3A  1D03               	skipz
 12537  1E3B  2E3E               	goto	u11095
 12538  1E3C  3F41               	moviw [1]fsr1
 12539  1E3D  3A00               	xorlw	0
 12540  1E3E                     u11095:	
 12541  1E3E  1D03               	skipz
 12542  1E3F  0008               	return
 12543                           
 12544                           ;MCU_B1.c: 802: {
 12545                           ;MCU_B1.c: 803: Memory.Time = 0;
 12546  1E40  01C2               	clrf	(_Memory^(0+512)+34)
 12547  1E41  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12548                           
 12549                           ;MCU_B1.c: 804: Memory.Modify = 0;
 12550  1E42  1044               	bcf	(_Memory^(0+512)+36),0
 12551                           
 12552                           ;MCU_B1.c: 805: Memory.GO = 0;
 12553  1E43  10C4               	bcf	(_Memory^(0+512)+36),1
 12554                           
 12555                           ;MCU_B1.c: 806: Flash_Memory_Modify();
 12556  1E44  3193  235A         	fcall	_Flash_Memory_Modify
 12557                           
 12558                           ;MCU_B1.c: 807: }
 12559                           ;MCU_B1.c: 808: } else {
 12560  1E46  0008               	return
 12561  1E47                     l1347:	
 12562                           
 12563                           ;MCU_B1.c: 809: Memory.GO = 0;
 12564  1E47  10C4               	bcf	(_Memory^(0+512)+36),1
 12565  1E48  0008               	return
 12566  1E49                     __end_of_Flash_Memory_Main:	
 12567                           
 12568                           	psect	text74
 12569  135A                     __ptext74:	
 12570 ;; *************** function _Flash_Memory_Modify *****************
 12571 ;; Defined at:
 12572 ;;		line 866 in file "../src/MCU_B1.c"
 12573 ;; Parameters:    Size  Location     Type
 12574 ;;		None
 12575 ;; Auto vars:     Size  Location     Type
 12576 ;;  i               1    5[BANK0 ] unsigned char 
 12577 ;; Return value:  Size  Location     Type
 12578 ;;		None               void
 12579 ;; Registers used:
 12580 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12581 ;; Tracked objects:
 12582 ;;		On entry : 0/0
 12583 ;;		On exit  : 0/0
 12584 ;;		Unchanged: 0/0
 12585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12588 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12589 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12590 ;;Total ram usage:        2 bytes
 12591 ;; Hardware stack levels used:    1
 12592 ;; Hardware stack levels required when called:    7
 12593 ;; This function calls:
 12594 ;;		_Flash_Memory_Erasing
 12595 ;;		_Flash_Memory_Read
 12596 ;;		_Flash_Memory_Write
 12597 ;; This function is called by:
 12598 ;;		_Flash_Memory_Main
 12599 ;; This function uses a non-reentrant model
 12600 ;;
 12601                           
 12602                           
 12603                           ;psect for function _Flash_Memory_Modify
 12604  135A                     _Flash_Memory_Modify:	
 12605                           
 12606                           ;MCU_B1.c: 867: char i = 0;
 12607                           
 12608                           ;incstack = 0
 12609                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12610  135A  0020               	movlb	0	; select bank0
 12611  135B  01A5               	clrf	Flash_Memory_Modify@i
 12612                           
 12613                           ;MCU_B1.c: 868: for (i = 0; i < 32; i++) {
 12614  135C  01A5               	clrf	Flash_Memory_Modify@i
 12615  135D  3020               	movlw	32
 12616  135E  0225               	subwf	Flash_Memory_Modify@i,w
 12617  135F  1803               	btfsc	3,0
 12618  1360  2B76               	goto	l9809
 12619  1361                     l9803:	
 12620                           
 12621                           ;MCU_B1.c: 869: Memory.Data[i] = Flash_Memory_Read(i);
 12622  1361  0825               	movf	Flash_Memory_Modify@i,w
 12623  1362  319D  257C  3193   	fcall	_Flash_Memory_Read
 12624  1365  0020               	movlb	0	; select bank0
 12625  1366  00A4               	movwf	??_Flash_Memory_Modify
 12626  1367  0825               	movf	Flash_Memory_Modify@i,w
 12627  1368  3E20               	addlw	_Memory& (0+255)
 12628  1369  0086               	movwf	6
 12629  136A  3002               	movlw	2	; select bank4/5
 12630  136B  0087               	movwf	7
 12631  136C  0824               	movf	??_Flash_Memory_Modify,w
 12632  136D  0081               	movwf	1
 12633  136E  3001               	movlw	1
 12634  136F  00A4               	movwf	??_Flash_Memory_Modify
 12635  1370  0824               	movf	??_Flash_Memory_Modify,w
 12636  1371  07A5               	addwf	Flash_Memory_Modify@i,f
 12637  1372  3020               	movlw	32
 12638  1373  0225               	subwf	Flash_Memory_Modify@i,w
 12639  1374  1C03               	skipc
 12640  1375  2B61               	goto	l9803
 12641  1376                     l9809:	
 12642                           
 12643                           ;MCU_B1.c: 870: }
 12644                           ;MCU_B1.c: 871: Memory.Data[0]=product->Data[12];
 12645  1376  086D               	movf	_product,w
 12646  1377  0086               	movwf	6
 12647  1378  3002               	movlw	2	; select bank4/5
 12648  1379  0087               	movwf	7
 12649  137A  3002               	movlw	2	; select bank4/5
 12650  137B  3F4C               	moviw [12]fsr1
 12651  137C  0024               	movlb	4	; select bank4
 12652  137D  00A0               	movwf	_Memory^(0+512)
 12653                           
 12654                           ;MCU_B1.c: 872: Memory.Data[1]=product->Data[13];
 12655  137E  0020               	movlb	0	; select bank0
 12656  137F  086D               	movf	_product,w
 12657  1380  0086               	movwf	6
 12658  1381  3002               	movlw	2	; select bank4/5
 12659  1382  0087               	movwf	7
 12660  1383  3002               	movlw	2	; select bank4/5
 12661  1384  3F4D               	moviw [13]fsr1
 12662  1385  0024               	movlb	4	; select bank4
 12663  1386  00A1               	movwf	(_Memory^(0+512)+1)
 12664                           
 12665                           ;MCU_B1.c: 873: Memory.Data[2]=product->Data[14];
 12666  1387  0020               	movlb	0	; select bank0
 12667  1388  086D               	movf	_product,w
 12668  1389  0086               	movwf	6
 12669  138A  3002               	movlw	2	; select bank4/5
 12670  138B  0087               	movwf	7
 12671  138C  3002               	movlw	2	; select bank4/5
 12672  138D  3F4E               	moviw [14]fsr1
 12673  138E  0024               	movlb	4	; select bank4
 12674  138F  00A2               	movwf	(_Memory^(0+512)+2)
 12675                           
 12676                           ;MCU_B1.c: 879: if (Memory.LoopSave == 1) {
 12677  1390  1D44               	btfss	(_Memory^(0+512)+36),2
 12678  1391  2B96               	goto	l1369
 12679                           
 12680                           ;MCU_B1.c: 880: Memory.LoopSave = 0;
 12681  1392  1144               	bcf	(_Memory^(0+512)+36),2
 12682                           
 12683                           ;MCU_B1.c: 881: myMain.FirstOpen = 0;
 12684  1393  0021               	movlb	1	; select bank1
 12685  1394  12A0               	bcf	_myMain^(0+128),5
 12686                           
 12687                           ;MCU_B1.c: 882: myMain.First = 0;
 12688  1395  13A0               	bcf	_myMain^(0+128),7
 12689  1396                     l1369:	
 12690                           
 12691                           ;MCU_B1.c: 884: }
 12692                           ;MCU_B1.c: 885: GIE = 0;
 12693  1396  138B               	bcf	11,7	;volatile
 12694                           
 12695                           ;MCU_B1.c: 886: Flash_Memory_Erasing();
 12696  1397  319A  22E1  3193   	fcall	_Flash_Memory_Erasing
 12697                           
 12698                           ;MCU_B1.c: 887: Flash_Memory_Write();
 12699  139A  3190  20DE         	fcall	_Flash_Memory_Write
 12700                           
 12701                           ;MCU_B1.c: 888: GIE = 1;
 12702  139C  178B               	bsf	11,7	;volatile
 12703  139D  0008               	return
 12704  139E                     __end_of_Flash_Memory_Modify:	
 12705                           
 12706                           	psect	text75
 12707  1AE1                     __ptext75:	
 12708 ;; *************** function _Flash_Memory_Erasing *****************
 12709 ;; Defined at:
 12710 ;;		line 855 in file "../src/MCU_B1.c"
 12711 ;; Parameters:    Size  Location     Type
 12712 ;;		None
 12713 ;; Auto vars:     Size  Location     Type
 12714 ;;		None
 12715 ;; Return value:  Size  Location     Type
 12716 ;;		None               void
 12717 ;; Registers used:
 12718 ;;		wreg, status,2, status,0, pclath, cstack
 12719 ;; Tracked objects:
 12720 ;;		On entry : 0/0
 12721 ;;		On exit  : 0/0
 12722 ;;		Unchanged: 0/0
 12723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;Total ram usage:        0 bytes
 12729 ;; Hardware stack levels used:    1
 12730 ;; Hardware stack levels required when called:    6
 12731 ;; This function calls:
 12732 ;;		_Flash_Memory_Unlock
 12733 ;; This function is called by:
 12734 ;;		_Flash_Memory_Modify
 12735 ;; This function uses a non-reentrant model
 12736 ;;
 12737                           
 12738                           
 12739                           ;psect for function _Flash_Memory_Erasing
 12740  1AE1                     _Flash_Memory_Erasing:	
 12741                           
 12742                           ;MCU_B1.c: 856: CFGS = 0;
 12743                           
 12744                           ;incstack = 0
 12745                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12746  1AE1  0023               	movlb	3	; select bank3
 12747  1AE2  1315               	bcf	21,6	;volatile
 12748                           
 12749                           ;MCU_B1.c: 857: PMADRH = 0x30;
 12750  1AE3  3030               	movlw	48
 12751  1AE4  0092               	movwf	18	;volatile
 12752                           
 12753                           ;MCU_B1.c: 858: PMADRL = 0x00;
 12754  1AE5  0191               	clrf	17	;volatile
 12755                           
 12756                           ;MCU_B1.c: 859: FREE = 1;
 12757  1AE6  1615               	bsf	21,4	;volatile
 12758                           
 12759                           ;MCU_B1.c: 860: WREN = 1;
 12760  1AE7  1515               	bsf	21,2	;volatile
 12761                           
 12762                           ;MCU_B1.c: 861: Flash_Memory_Unlock();
 12763  1AE8  319A  2297         	fcall	_Flash_Memory_Unlock
 12764                           
 12765                           ;MCU_B1.c: 862: WREN = 0;
 12766  1AEA  0023               	movlb	3	; select bank3
 12767  1AEB  1115               	bcf	21,2	;volatile
 12768  1AEC  0008               	return
 12769  1AED                     __end_of_Flash_Memory_Erasing:	
 12770                           
 12771                           	psect	text76
 12772  0699                     __ptext76:	
 12773 ;; *************** function _Flash_Memory_Initialization *****************
 12774 ;; Defined at:
 12775 ;;		line 756 in file "../src/MCU_B1.c"
 12776 ;; Parameters:    Size  Location     Type
 12777 ;;		None
 12778 ;; Auto vars:     Size  Location     Type
 12779 ;;  i               1   62[BANK0 ] unsigned char 
 12780 ;; Return value:  Size  Location     Type
 12781 ;;		None               void
 12782 ;; Registers used:
 12783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12784 ;; Tracked objects:
 12785 ;;		On entry : 0/0
 12786 ;;		On exit  : 0/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;Total ram usage:        2 bytes
 12794 ;; Hardware stack levels used:    1
 12795 ;; Hardware stack levels required when called:    8
 12796 ;; This function calls:
 12797 ;;		_Flash_Memory_Read
 12798 ;;		_Flash_Memory_Write
 12799 ;;		_setPercentValue
 12800 ;; This function is called by:
 12801 ;;		_main
 12802 ;; This function uses a non-reentrant model
 12803 ;;
 12804                           
 12805                           
 12806                           ;psect for function _Flash_Memory_Initialization
 12807  0699                     _Flash_Memory_Initialization:	
 12808                           
 12809                           ;MCU_B1.c: 757: char i = 0;
 12810                           
 12811                           ;incstack = 0
 12812                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12813  0699  0020               	movlb	0	; select bank0
 12814  069A  01DE               	clrf	Flash_Memory_Initialization@i
 12815                           
 12816                           ;MCU_B1.c: 758: if (Flash_Memory_Read(31) == 0xaa) {
 12817  069B  301F               	movlw	31
 12818  069C  319D  257C  3186   	fcall	_Flash_Memory_Read
 12819  069F  3AAA               	xorlw	170
 12820  06A0  1D03               	skipz
 12821  06A1  2F0B               	goto	l10253
 12822                           
 12823                           ;MCU_B1.c: 759: product->Data[12] = Flash_Memory_Read(0);
 12824  06A2  3000               	movlw	0
 12825  06A3  319D  257C  3186   	fcall	_Flash_Memory_Read
 12826  06A6  0020               	movlb	0	; select bank0
 12827  06A7  00DD               	movwf	??_Flash_Memory_Initialization
 12828  06A8  086D               	movf	_product,w
 12829  06A9  3E0C               	addlw	12
 12830  06AA  0086               	movwf	6
 12831  06AB  3002               	movlw	2	; select bank4/5
 12832  06AC  0087               	movwf	7
 12833  06AD  085D               	movf	??_Flash_Memory_Initialization,w
 12834  06AE  0081               	movwf	1
 12835                           
 12836                           ;MCU_B1.c: 760: product->Data[13] = Flash_Memory_Read(1);
 12837  06AF  3001               	movlw	1
 12838  06B0  319D  257C  3186   	fcall	_Flash_Memory_Read
 12839  06B3  0020               	movlb	0	; select bank0
 12840  06B4  00DD               	movwf	??_Flash_Memory_Initialization
 12841  06B5  086D               	movf	_product,w
 12842  06B6  3E0D               	addlw	13
 12843  06B7  0086               	movwf	6
 12844  06B8  3002               	movlw	2	; select bank4/5
 12845  06B9  0087               	movwf	7
 12846  06BA  085D               	movf	??_Flash_Memory_Initialization,w
 12847  06BB  0081               	movwf	1
 12848                           
 12849                           ;MCU_B1.c: 761: product->Data[14] = Flash_Memory_Read(2);
 12850  06BC  3002               	movlw	2
 12851  06BD  319D  257C  3186   	fcall	_Flash_Memory_Read
 12852  06C0  0020               	movlb	0	; select bank0
 12853  06C1  00DD               	movwf	??_Flash_Memory_Initialization
 12854  06C2  086D               	movf	_product,w
 12855  06C3  3E0E               	addlw	14
 12856  06C4  0086               	movwf	6
 12857  06C5  3002               	movlw	2	; select bank4/5
 12858  06C6  0087               	movwf	7
 12859  06C7  085D               	movf	??_Flash_Memory_Initialization,w
 12860  06C8  0081               	movwf	1
 12861                           
 12862                           ;MCU_B1.c: 767: i = setPercentValue(((char)((100-60)*0.8)));
 12863  06C9  3020               	movlw	32
 12864  06CA  3188  2002  3186   	fcall	_setPercentValue
 12865  06CD  0020               	movlb	0	; select bank0
 12866  06CE  00DD               	movwf	??_Flash_Memory_Initialization
 12867  06CF  085D               	movf	??_Flash_Memory_Initialization,w
 12868  06D0  00DE               	movwf	Flash_Memory_Initialization@i
 12869                           
 12870                           ;MCU_B1.c: 768: product->Data[21] = i;
 12871  06D1  085E               	movf	Flash_Memory_Initialization@i,w
 12872  06D2  00DD               	movwf	??_Flash_Memory_Initialization
 12873  06D3  086D               	movf	_product,w
 12874  06D4  3E15               	addlw	21
 12875  06D5  0086               	movwf	6
 12876  06D6  3002               	movlw	2	; select bank4/5
 12877  06D7  0087               	movwf	7
 12878  06D8  085D               	movf	??_Flash_Memory_Initialization,w
 12879  06D9  0081               	movwf	1
 12880                           
 12881                           ;MCU_B1.c: 769: product->Data[22] = i;
 12882  06DA  085E               	movf	Flash_Memory_Initialization@i,w
 12883  06DB  00DD               	movwf	??_Flash_Memory_Initialization
 12884  06DC  086D               	movf	_product,w
 12885  06DD  3E16               	addlw	22
 12886  06DE  0086               	movwf	6
 12887  06DF  3002               	movlw	2	; select bank4/5
 12888  06E0  0087               	movwf	7
 12889  06E1  085D               	movf	??_Flash_Memory_Initialization,w
 12890  06E2  0081               	movwf	1
 12891                           
 12892                           ;MCU_B1.c: 770: product->Data[23] = i;
 12893  06E3  085E               	movf	Flash_Memory_Initialization@i,w
 12894  06E4  00DD               	movwf	??_Flash_Memory_Initialization
 12895  06E5  086D               	movf	_product,w
 12896  06E6  3E17               	addlw	23
 12897  06E7  0086               	movwf	6
 12898  06E8  3002               	movlw	2	; select bank4/5
 12899  06E9  0087               	movwf	7
 12900  06EA  085D               	movf	??_Flash_Memory_Initialization,w
 12901  06EB  0081               	movwf	1
 12902                           
 12903                           ;MCU_B1.c: 772: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12904  06EC  086D               	movf	_product,w
 12905  06ED  3E0C               	addlw	12
 12906  06EE  0086               	movwf	6
 12907  06EF  3002               	movlw	2	; select bank4/5
 12908  06F0  0087               	movwf	7
 12909  06F1  0801               	movf	1,w
 12910  06F2  3AFF               	xorlw	255
 12911  06F3  1D03               	skipz
 12912  06F4  0008               	return
 12913  06F5  086D               	movf	_product,w
 12914  06F6  3E0D               	addlw	13
 12915  06F7  0086               	movwf	6
 12916  06F8  3002               	movlw	2	; select bank4/5
 12917  06F9  0087               	movwf	7
 12918  06FA  0801               	movf	1,w
 12919  06FB  3AFF               	xorlw	255
 12920  06FC  1D03               	skipz
 12921  06FD  0008               	return
 12922  06FE  086D               	movf	_product,w
 12923  06FF  3E0E               	addlw	14
 12924  0700  0086               	movwf	6
 12925  0701  3002               	movlw	2	; select bank4/5
 12926  0702  0087               	movwf	7
 12927  0703  0801               	movf	1,w
 12928  0704  3AFF               	xorlw	255
 12929  0705  1D03               	skipz
 12930  0706  0008               	return
 12931                           
 12932                           ;MCU_B1.c: 773: myMain.FirstOpen = 1;
 12933  0707  0021               	movlb	1	; select bank1
 12934  0708  16A0               	bsf	_myMain^(0+128),5
 12935                           
 12936                           ;MCU_B1.c: 774: myMain.First = 1;
 12937  0709  17A0               	bsf	_myMain^(0+128),7
 12938                           
 12939                           ;MCU_B1.c: 775: }
 12940                           ;MCU_B1.c: 776: } else {
 12941  070A  0008               	return
 12942  070B                     l10253:	
 12943                           
 12944                           ;MCU_B1.c: 777: i = setPercentValue(((char)((100-60)*0.8)));
 12945  070B  3020               	movlw	32
 12946  070C  3188  2002  3186   	fcall	_setPercentValue
 12947  070F  0020               	movlb	0	; select bank0
 12948  0710  00DD               	movwf	??_Flash_Memory_Initialization
 12949  0711  085D               	movf	??_Flash_Memory_Initialization,w
 12950  0712  00DE               	movwf	Flash_Memory_Initialization@i
 12951                           
 12952                           ;MCU_B1.c: 778: Memory.Data[0]=0xff;
 12953  0713  30FF               	movlw	255
 12954  0714  00DD               	movwf	??_Flash_Memory_Initialization
 12955  0715  085D               	movf	??_Flash_Memory_Initialization,w
 12956  0716  0024               	movlb	4	; select bank4
 12957  0717  00A0               	movwf	_Memory^(0+512)
 12958                           
 12959                           ;MCU_B1.c: 779: Memory.Data[1]=0xff;
 12960  0718  30FF               	movlw	255
 12961  0719  0020               	movlb	0	; select bank0
 12962  071A  00DD               	movwf	??_Flash_Memory_Initialization
 12963  071B  085D               	movf	??_Flash_Memory_Initialization,w
 12964  071C  0024               	movlb	4	; select bank4
 12965  071D  00A1               	movwf	(_Memory^(0+512)+1)
 12966                           
 12967                           ;MCU_B1.c: 780: Memory.Data[2]=0xff;
 12968  071E  30FF               	movlw	255
 12969  071F  0020               	movlb	0	; select bank0
 12970  0720  00DD               	movwf	??_Flash_Memory_Initialization
 12971  0721  085D               	movf	??_Flash_Memory_Initialization,w
 12972  0722  0024               	movlb	4	; select bank4
 12973  0723  00A2               	movwf	(_Memory^(0+512)+2)
 12974                           
 12975                           ;MCU_B1.c: 781: Memory.Data[3]=0xff;
 12976  0724  30FF               	movlw	255
 12977  0725  0020               	movlb	0	; select bank0
 12978  0726  00DD               	movwf	??_Flash_Memory_Initialization
 12979  0727  085D               	movf	??_Flash_Memory_Initialization,w
 12980  0728  0024               	movlb	4	; select bank4
 12981  0729  00A3               	movwf	(_Memory^(0+512)+3)
 12982                           
 12983                           ;MCU_B1.c: 782: Memory.Data[4]=0xff;
 12984  072A  30FF               	movlw	255
 12985  072B  0020               	movlb	0	; select bank0
 12986  072C  00DD               	movwf	??_Flash_Memory_Initialization
 12987  072D  085D               	movf	??_Flash_Memory_Initialization,w
 12988  072E  0024               	movlb	4	; select bank4
 12989  072F  00A4               	movwf	(_Memory^(0+512)+4)
 12990                           
 12991                           ;MCU_B1.c: 783: Memory.Data[5]=0xff;
 12992  0730  30FF               	movlw	255
 12993  0731  0020               	movlb	0	; select bank0
 12994  0732  00DD               	movwf	??_Flash_Memory_Initialization
 12995  0733  085D               	movf	??_Flash_Memory_Initialization,w
 12996  0734  0024               	movlb	4	; select bank4
 12997  0735  00A5               	movwf	(_Memory^(0+512)+5)
 12998                           
 12999                           ;MCU_B1.c: 784: Memory.Data[31]=0xaa;
 13000  0736  30AA               	movlw	170
 13001  0737  0020               	movlb	0	; select bank0
 13002  0738  00DD               	movwf	??_Flash_Memory_Initialization
 13003  0739  085D               	movf	??_Flash_Memory_Initialization,w
 13004  073A  0024               	movlb	4	; select bank4
 13005  073B  00BF               	movwf	(_Memory^(0+512)+31)
 13006                           
 13007                           ;MCU_B1.c: 785: product->Data[21] = i;
 13008  073C  0020               	movlb	0	; select bank0
 13009  073D  085E               	movf	Flash_Memory_Initialization@i,w
 13010  073E  00DD               	movwf	??_Flash_Memory_Initialization
 13011  073F  086D               	movf	_product,w
 13012  0740  3E15               	addlw	21
 13013  0741  0086               	movwf	6
 13014  0742  3002               	movlw	2	; select bank4/5
 13015  0743  0087               	movwf	7
 13016  0744  085D               	movf	??_Flash_Memory_Initialization,w
 13017  0745  0081               	movwf	1
 13018                           
 13019                           ;MCU_B1.c: 786: product->Data[22] = i;
 13020  0746  085E               	movf	Flash_Memory_Initialization@i,w
 13021  0747  00DD               	movwf	??_Flash_Memory_Initialization
 13022  0748  086D               	movf	_product,w
 13023  0749  3E16               	addlw	22
 13024  074A  0086               	movwf	6
 13025  074B  3002               	movlw	2	; select bank4/5
 13026  074C  0087               	movwf	7
 13027  074D  085D               	movf	??_Flash_Memory_Initialization,w
 13028  074E  0081               	movwf	1
 13029                           
 13030                           ;MCU_B1.c: 787: product->Data[23] = i;
 13031  074F  085E               	movf	Flash_Memory_Initialization@i,w
 13032  0750  00DD               	movwf	??_Flash_Memory_Initialization
 13033  0751  086D               	movf	_product,w
 13034  0752  3E17               	addlw	23
 13035  0753  0086               	movwf	6
 13036  0754  3002               	movlw	2	; select bank4/5
 13037  0755  0087               	movwf	7
 13038  0756  085D               	movf	??_Flash_Memory_Initialization,w
 13039  0757  0081               	movwf	1
 13040                           
 13041                           ;MCU_B1.c: 788: GIE = 0;
 13042  0758  138B               	bcf	11,7	;volatile
 13043                           
 13044                           ;MCU_B1.c: 789: Flash_Memory_Write();
 13045  0759  3190  20DE         	fcall	_Flash_Memory_Write
 13046                           
 13047                           ;MCU_B1.c: 790: GIE = 1;
 13048  075B  178B               	bsf	11,7	;volatile
 13049                           
 13050                           ;MCU_B1.c: 791: myMain.FirstOpen = 1;
 13051  075C  0021               	movlb	1	; select bank1
 13052  075D  16A0               	bsf	_myMain^(0+128),5
 13053                           
 13054                           ;MCU_B1.c: 792: myMain.First = 1;
 13055  075E  17A0               	bsf	_myMain^(0+128),7
 13056  075F  0008               	return
 13057  0760                     __end_of_Flash_Memory_Initialization:	
 13058                           
 13059                           	psect	text77
 13060  10DE                     __ptext77:	
 13061 ;; *************** function _Flash_Memory_Write *****************
 13062 ;; Defined at:
 13063 ;;		line 836 in file "../src/MCU_B1.c"
 13064 ;; Parameters:    Size  Location     Type
 13065 ;;		None
 13066 ;; Auto vars:     Size  Location     Type
 13067 ;;  i               1    1[BANK0 ] unsigned char 
 13068 ;; Return value:  Size  Location     Type
 13069 ;;		None               void
 13070 ;; Registers used:
 13071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13072 ;; Tracked objects:
 13073 ;;		On entry : 0/0
 13074 ;;		On exit  : 0/0
 13075 ;;		Unchanged: 0/0
 13076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13080 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;Total ram usage:        2 bytes
 13082 ;; Hardware stack levels used:    1
 13083 ;; Hardware stack levels required when called:    6
 13084 ;; This function calls:
 13085 ;;		_Flash_Memory_Unlock
 13086 ;; This function is called by:
 13087 ;;		_Flash_Memory_Initialization
 13088 ;;		_Flash_Memory_Modify
 13089 ;; This function uses a non-reentrant model
 13090 ;;
 13091                           
 13092                           
 13093                           ;psect for function _Flash_Memory_Write
 13094  10DE                     _Flash_Memory_Write:	
 13095                           
 13096                           ;MCU_B1.c: 837: char i = 0;
 13097                           
 13098                           ;incstack = 0
 13099                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13100  10DE  0020               	movlb	0	; select bank0
 13101  10DF  01A1               	clrf	Flash_Memory_Write@i
 13102                           
 13103                           ;MCU_B1.c: 838: CFGS = 0;
 13104  10E0  0023               	movlb	3	; select bank3
 13105  10E1  1315               	bcf	21,6	;volatile
 13106                           
 13107                           ;MCU_B1.c: 839: PMADRH = 0x30;
 13108  10E2  3030               	movlw	48
 13109  10E3  0092               	movwf	18	;volatile
 13110                           
 13111                           ;MCU_B1.c: 840: PMDATH = 0;
 13112  10E4  0194               	clrf	20	;volatile
 13113                           
 13114                           ;MCU_B1.c: 841: FREE = 0;
 13115  10E5  1215               	bcf	21,4	;volatile
 13116                           
 13117                           ;MCU_B1.c: 842: LWLO = 1;
 13118  10E6  1695               	bsf	21,5	;volatile
 13119                           
 13120                           ;MCU_B1.c: 843: WREN = 1;
 13121  10E7  1515               	bsf	21,2	;volatile
 13122                           
 13123                           ;MCU_B1.c: 844: for (i = 0; i < 32; i++) {
 13124  10E8  0020               	movlb	0	; select bank0
 13125  10E9  01A1               	clrf	Flash_Memory_Write@i
 13126  10EA  3020               	movlw	32
 13127  10EB  0221               	subwf	Flash_Memory_Write@i,w
 13128  10EC  1803               	btfsc	3,0
 13129  10ED  2906               	goto	l1360
 13130  10EE                     l9369:	
 13131                           
 13132                           ;MCU_B1.c: 845: PMADRL = i;
 13133  10EE  0821               	movf	Flash_Memory_Write@i,w
 13134  10EF  0023               	movlb	3	; select bank3
 13135  10F0  0091               	movwf	17	;volatile
 13136                           
 13137                           ;MCU_B1.c: 846: PMDATL = Memory.Data[i];
 13138  10F1  0020               	movlb	0	; select bank0
 13139  10F2  0821               	movf	Flash_Memory_Write@i,w
 13140  10F3  3E20               	addlw	_Memory& (0+255)
 13141  10F4  0086               	movwf	6
 13142  10F5  3002               	movlw	2	; select bank4/5
 13143  10F6  0087               	movwf	7
 13144  10F7  0801               	movf	1,w
 13145  10F8  0023               	movlb	3	; select bank3
 13146  10F9  0093               	movwf	19	;volatile
 13147                           
 13148                           ;MCU_B1.c: 847: Flash_Memory_Unlock();
 13149  10FA  319A  2297  3190   	fcall	_Flash_Memory_Unlock
 13150  10FD  3001               	movlw	1
 13151  10FE  0020               	movlb	0	; select bank0
 13152  10FF  00A0               	movwf	??_Flash_Memory_Write
 13153  1100  0820               	movf	??_Flash_Memory_Write,w
 13154  1101  07A1               	addwf	Flash_Memory_Write@i,f
 13155  1102  3020               	movlw	32
 13156  1103  0221               	subwf	Flash_Memory_Write@i,w
 13157  1104  1C03               	skipc
 13158  1105  28EE               	goto	l9369
 13159  1106                     l1360:	
 13160                           
 13161                           ;MCU_B1.c: 848: }
 13162                           ;MCU_B1.c: 849: LWLO = 0;
 13163  1106  0023               	movlb	3	; select bank3
 13164  1107  1295               	bcf	21,5	;volatile
 13165                           
 13166                           ;MCU_B1.c: 850: Flash_Memory_Unlock();
 13167  1108  319A  2297         	fcall	_Flash_Memory_Unlock
 13168                           
 13169                           ;MCU_B1.c: 851: WREN = 0;
 13170  110A  0023               	movlb	3	; select bank3
 13171  110B  1115               	bcf	21,2	;volatile
 13172  110C  0008               	return
 13173  110D                     __end_of_Flash_Memory_Write:	
 13174                           
 13175                           	psect	text78
 13176  1A97                     __ptext78:	
 13177 ;; *************** function _Flash_Memory_Unlock *****************
 13178 ;; Defined at:
 13179 ;;		line 815 in file "../src/MCU_B1.c"
 13180 ;; Parameters:    Size  Location     Type
 13181 ;;		None
 13182 ;; Auto vars:     Size  Location     Type
 13183 ;;		None
 13184 ;; Return value:  Size  Location     Type
 13185 ;;		None               void
 13186 ;; Registers used:
 13187 ;;		wreg
 13188 ;; Tracked objects:
 13189 ;;		On entry : 0/0
 13190 ;;		On exit  : 0/0
 13191 ;;		Unchanged: 0/0
 13192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;Total ram usage:        0 bytes
 13198 ;; Hardware stack levels used:    1
 13199 ;; Hardware stack levels required when called:    5
 13200 ;; This function calls:
 13201 ;;		Nothing
 13202 ;; This function is called by:
 13203 ;;		_Flash_Memory_Write
 13204 ;;		_Flash_Memory_Erasing
 13205 ;; This function uses a non-reentrant model
 13206 ;;
 13207                           
 13208                           
 13209                           ;psect for function _Flash_Memory_Unlock
 13210  1A97                     _Flash_Memory_Unlock:	
 13211                           
 13212                           ;MCU_B1.c: 816: PMCON2 = 0x55;
 13213                           
 13214                           ;incstack = 0
 13215                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13216  1A97  3055               	movlw	85
 13217  1A98  0023               	movlb	3	; select bank3
 13218  1A99  0096               	movwf	22	;volatile
 13219                           
 13220                           ;MCU_B1.c: 817: PMCON2 = 0xaa;
 13221  1A9A  30AA               	movlw	170
 13222  1A9B  0096               	movwf	22	;volatile
 13223                           
 13224                           ;MCU_B1.c: 818: WR = 1;
 13225  1A9C  1495               	bsf	21,1	;volatile
 13226                           
 13227                           ;MCU_B1.c: 819: __nop();
 13228  1A9D  0000               	nop
 13229                           
 13230                           ;MCU_B1.c: 820: __nop();
 13231  1A9E  0000               	nop
 13232  1A9F  0008               	return
 13233  1AA0                     __end_of_Flash_Memory_Unlock:	
 13234                           
 13235                           	psect	text79
 13236  1D7C                     __ptext79:	
 13237 ;; *************** function _Flash_Memory_Read *****************
 13238 ;; Defined at:
 13239 ;;		line 824 in file "../src/MCU_B1.c"
 13240 ;; Parameters:    Size  Location     Type
 13241 ;;  address         1    wreg     unsigned char 
 13242 ;; Auto vars:     Size  Location     Type
 13243 ;;  address         1    2[BANK0 ] unsigned char 
 13244 ;;  ret             1    3[BANK0 ] unsigned char 
 13245 ;;  i               1    1[BANK0 ] unsigned char 
 13246 ;; Return value:  Size  Location     Type
 13247 ;;                  1    wreg      unsigned char 
 13248 ;; Registers used:
 13249 ;;		wreg, status,2
 13250 ;; Tracked objects:
 13251 ;;		On entry : 0/0
 13252 ;;		On exit  : 0/0
 13253 ;;		Unchanged: 0/0
 13254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13258 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;Total ram usage:        4 bytes
 13260 ;; Hardware stack levels used:    1
 13261 ;; Hardware stack levels required when called:    5
 13262 ;; This function calls:
 13263 ;;		Nothing
 13264 ;; This function is called by:
 13265 ;;		_Flash_Memory_Initialization
 13266 ;;		_Flash_Memory_Modify
 13267 ;; This function uses a non-reentrant model
 13268 ;;
 13269                           
 13270                           
 13271                           ;psect for function _Flash_Memory_Read
 13272  1D7C                     _Flash_Memory_Read:	
 13273                           
 13274                           ;incstack = 0
 13275                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13276                           ;Flash_Memory_Read@address stored from wreg
 13277  1D7C  0020               	movlb	0	; select bank0
 13278  1D7D  00A2               	movwf	Flash_Memory_Read@address
 13279                           
 13280                           ;MCU_B1.c: 825: char i = 0, ret = 0;
 13281  1D7E  01A1               	clrf	Flash_Memory_Read@i
 13282  1D7F  01A3               	clrf	Flash_Memory_Read@ret
 13283                           
 13284                           ;MCU_B1.c: 826: PMADRH = 0x30;
 13285  1D80  3030               	movlw	48
 13286  1D81  0023               	movlb	3	; select bank3
 13287  1D82  0092               	movwf	18	;volatile
 13288                           
 13289                           ;MCU_B1.c: 827: PMADRL = address;
 13290  1D83  0020               	movlb	0	; select bank0
 13291  1D84  0822               	movf	Flash_Memory_Read@address,w
 13292  1D85  0023               	movlb	3	; select bank3
 13293  1D86  0091               	movwf	17	;volatile
 13294                           
 13295                           ;MCU_B1.c: 828: CFGS = 0;
 13296  1D87  1315               	bcf	21,6	;volatile
 13297                           
 13298                           ;MCU_B1.c: 829: RD = 1;
 13299  1D88  1415               	bsf	21,0	;volatile
 13300                           
 13301                           ;MCU_B1.c: 830: i = PMDATH;
 13302  1D89  0814               	movf	20,w	;volatile
 13303  1D8A  0020               	movlb	0	; select bank0
 13304  1D8B  00A0               	movwf	??_Flash_Memory_Read
 13305  1D8C  0820               	movf	??_Flash_Memory_Read,w
 13306  1D8D  00A1               	movwf	Flash_Memory_Read@i
 13307                           
 13308                           ;MCU_B1.c: 831: ret = PMDATL;
 13309  1D8E  0023               	movlb	3	; select bank3
 13310  1D8F  0813               	movf	19,w	;volatile
 13311  1D90  0020               	movlb	0	; select bank0
 13312  1D91  00A0               	movwf	??_Flash_Memory_Read
 13313  1D92  0820               	movf	??_Flash_Memory_Read,w
 13314  1D93  00A3               	movwf	Flash_Memory_Read@ret
 13315                           
 13316                           ;MCU_B1.c: 832: return ret;
 13317  1D94  0823               	movf	Flash_Memory_Read@ret,w
 13318  1D95  0008               	return
 13319  1D96                     __end_of_Flash_Memory_Read:	
 13320                           
 13321                           	psect	text80
 13322  1AB4                     __ptext80:	
 13323 ;; *************** function _DimmerLights_Main *****************
 13324 ;; Defined at:
 13325 ;;		line 416 in file "../src/Dimmer_B1.c"
 13326 ;; Parameters:    Size  Location     Type
 13327 ;;		None
 13328 ;; Auto vars:     Size  Location     Type
 13329 ;;		None
 13330 ;; Return value:  Size  Location     Type
 13331 ;;		None               void
 13332 ;; Registers used:
 13333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13334 ;; Tracked objects:
 13335 ;;		On entry : 0/0
 13336 ;;		On exit  : 0/0
 13337 ;;		Unchanged: 0/0
 13338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13343 ;;Total ram usage:        0 bytes
 13344 ;; Hardware stack levels used:    1
 13345 ;; Hardware stack levels required when called:   11
 13346 ;; This function calls:
 13347 ;;		_DimmerLights_Close
 13348 ;;		_setDimmerLights_Main
 13349 ;; This function is called by:
 13350 ;;		_main
 13351 ;; This function uses a non-reentrant model
 13352 ;;
 13353                           
 13354                           
 13355                           ;psect for function _DimmerLights_Main
 13356  1AB4                     _DimmerLights_Main:	
 13357                           
 13358                           ;Dimmer_B1.c: 419: setDimmerLights_Main(1);
 13359                           
 13360                           ;incstack = 0
 13361                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13362  1AB4  3001               	movlw	1
 13363  1AB5  318A  22DA  319A   	fcall	_setDimmerLights_Main
 13364                           
 13365                           ;Dimmer_B1.c: 423: setDimmerLights_Main(2);
 13366  1AB8  3002               	movlw	2
 13367  1AB9  318A  22DA  319A   	fcall	_setDimmerLights_Main
 13368                           
 13369                           ;Dimmer_B1.c: 430: DimmerLights_Close();
 13370  1ABC  319D  251C         	fcall	_DimmerLights_Close
 13371  1ABE  0008               	return
 13372  1ABF                     __end_of_DimmerLights_Main:	
 13373                           
 13374                           	psect	text81
 13375  0ADA                     __ptext81:	
 13376 ;; *************** function _setDimmerLights_Main *****************
 13377 ;; Defined at:
 13378 ;;		line 434 in file "../src/Dimmer_B1.c"
 13379 ;; Parameters:    Size  Location     Type
 13380 ;;  lights          1    wreg     unsigned char 
 13381 ;; Auto vars:     Size  Location     Type
 13382 ;;  lights          1   70[BANK0 ] unsigned char 
 13383 ;;  clear           1   69[BANK0 ] unsigned char 
 13384 ;; Return value:  Size  Location     Type
 13385 ;;		None               void
 13386 ;; Registers used:
 13387 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13388 ;; Tracked objects:
 13389 ;;		On entry : 0/0
 13390 ;;		On exit  : 0/0
 13391 ;;		Unchanged: 0/0
 13392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13397 ;;Total ram usage:        2 bytes
 13398 ;; Hardware stack levels used:    1
 13399 ;; Hardware stack levels required when called:   10
 13400 ;; This function calls:
 13401 ;;		_DimmerLightsPointSelect
 13402 ;;		_setBuz
 13403 ;;		_setDimmerLights
 13404 ;;		_setDimmerLights_Adj
 13405 ;; This function is called by:
 13406 ;;		_DimmerLights_Main
 13407 ;; This function uses a non-reentrant model
 13408 ;;
 13409                           
 13410                           
 13411                           ;psect for function _setDimmerLights_Main
 13412  0ADA                     _setDimmerLights_Main:	
 13413                           
 13414                           ;incstack = 0
 13415                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13416                           ;setDimmerLights_Main@lights stored from wreg
 13417  0ADA  0020               	movlb	0	; select bank0
 13418  0ADB  00E6               	movwf	setDimmerLights_Main@lights
 13419                           
 13420                           ;Dimmer_B1.c: 435: char clear = 1;
 13421  0ADC  01E5               	clrf	setDimmerLights_Main@clear
 13422  0ADD  0AE5               	incf	setDimmerLights_Main@clear,f
 13423                           
 13424                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
 13425  0ADE  0866               	movf	setDimmerLights_Main@lights,w
 13426  0ADF  319C  244E  318A   	fcall	_DimmerLightsPointSelect
 13427                           
 13428                           ;Dimmer_B1.c: 449: if (lights == 1) {
 13429  0AE2  0020               	movlb	0	; select bank0
 13430  0AE3  0866               	movf	setDimmerLights_Main@lights,w
 13431  0AE4  3A01               	xorlw	1
 13432  0AE5  1D03               	skipz
 13433  0AE6  2AEE               	goto	l9673
 13434                           
 13435                           ;Dimmer_B1.c: 450: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 13436  0AE7  3000               	movlw	0
 13437  0AE8  0022               	movlb	2	; select bank2
 13438  0AE9  1955               	btfsc	(_DimmerLights2^(0+256)+9),2
 13439  0AEA  3001               	movlw	1
 13440  0AEB  0020               	movlb	0	; select bank0
 13441  0AEC  00E5               	movwf	setDimmerLights_Main@clear
 13442                           
 13443                           ;Dimmer_B1.c: 451: } else if (lights == 2) {
 13444  0AED  2AF8               	goto	l9677
 13445  0AEE                     l9673:	
 13446  0AEE  0866               	movf	setDimmerLights_Main@lights,w
 13447  0AEF  3A02               	xorlw	2
 13448  0AF0  1D03               	skipz
 13449  0AF1  2AF8               	goto	l9677
 13450                           
 13451                           ;Dimmer_B1.c: 452: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 13452  0AF2  3000               	movlw	0
 13453  0AF3  0022               	movlb	2	; select bank2
 13454  0AF4  1946               	btfsc	(_DimmerLights1^(0+256)+9),2
 13455  0AF5  3001               	movlw	1
 13456  0AF6  0020               	movlb	0	; select bank0
 13457  0AF7  00E5               	movwf	setDimmerLights_Main@clear
 13458  0AF8                     l9677:	
 13459                           
 13460                           ;Dimmer_B1.c: 453: }
 13461                           ;Dimmer_B1.c: 456: if (DimmerLights->Trigger == 1) {
 13462  0AF8  086B               	movf	_DimmerLights,w
 13463  0AF9  3E08               	addlw	8
 13464  0AFA  0086               	movwf	6
 13465  0AFB  3001               	movlw	1	; select bank2/3
 13466  0AFC  0087               	movwf	7
 13467  0AFD  1D01               	btfss	1,2
 13468  0AFE  2B20               	goto	l9689
 13469                           
 13470                           ;Dimmer_B1.c: 457: if (clear == 1) {
 13471  0AFF  0865               	movf	setDimmerLights_Main@clear,w
 13472  0B00  3A01               	xorlw	1
 13473  0B01  1D03               	skipz
 13474  0B02  0008               	return
 13475                           
 13476                           ;Dimmer_B1.c: 458: DimmerLights->Trigger = 0;
 13477  0B03  086B               	movf	_DimmerLights,w
 13478  0B04  3E08               	addlw	8
 13479  0B05  0086               	movwf	6
 13480  0B06  3001               	movlw	1	; select bank2/3
 13481  0B07  0087               	movwf	7
 13482  0B08  1101               	bcf	1,2
 13483                           
 13484                           ;Dimmer_B1.c: 459: if (DimmerLights->Switch == 1) {
 13485  0B09  086B               	movf	_DimmerLights,w
 13486  0B0A  3E08               	addlw	8
 13487  0B0B  0086               	movwf	6
 13488  0B0C  3001               	movlw	1	; select bank2/3
 13489  0B0D  0087               	movwf	7
 13490  0B0E  1C81               	btfss	1,1
 13491  0B0F  2B13               	goto	l9685
 13492                           
 13493                           ;Dimmer_B1.c: 460: setDimmerLights(lights, 1);
 13494  0B10  01A4               	clrf	setDimmerLights@status
 13495  0B11  0AA4               	incf	setDimmerLights@status,f
 13496  0B12  2B15               	goto	L9
 13497  0B13                     l9685:	
 13498                           ;Dimmer_B1.c: 461: } else {
 13499                           
 13500                           
 13501                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 0);
 13502  0B13  0020               	movlb	0	; select bank0
 13503  0B14  01A4               	clrf	setDimmerLights@status
 13504  0B15                     L9:	
 13505  0B15  0866               	movf	setDimmerLights_Main@lights,w
 13506  0B16  318C  24D3         	fcall	_setDimmerLights
 13507                           
 13508                           ;Dimmer_B1.c: 463: }
 13509                           ;Dimmer_B1.c: 465: DimmerLights->Clear = 0;
 13510  0B18  0020               	movlb	0	; select bank0
 13511  0B19  086B               	movf	_DimmerLights,w
 13512  0B1A  3E09               	addlw	9
 13513  0B1B  0086               	movwf	6
 13514  0B1C  3001               	movlw	1	; select bank2/3
 13515  0B1D  0087               	movwf	7
 13516  0B1E  1101               	bcf	1,2
 13517                           
 13518                           ;Dimmer_B1.c: 467: }
 13519                           ;Dimmer_B1.c: 468: } else {
 13520  0B1F  0008               	return
 13521  0B20                     l9689:	
 13522                           
 13523                           ;Dimmer_B1.c: 469: if (DimmerLights->TriggerAdj == 1) {
 13524  0B20  086B               	movf	_DimmerLights,w
 13525  0B21  3E08               	addlw	8
 13526  0B22  0086               	movwf	6
 13527  0B23  3001               	movlw	1	; select bank2/3
 13528  0B24  0087               	movwf	7
 13529  0B25  1E01               	btfss	1,4
 13530  0B26  0008               	return
 13531                           
 13532                           ;Dimmer_B1.c: 470: if (clear == 1) {
 13533  0B27  0865               	movf	setDimmerLights_Main@clear,w
 13534  0B28  3A01               	xorlw	1
 13535  0B29  1D03               	skipz
 13536  0B2A  0008               	return
 13537                           
 13538                           ;Dimmer_B1.c: 471: DimmerLights->TriggerAdj = 0;
 13539  0B2B  086B               	movf	_DimmerLights,w
 13540  0B2C  3E08               	addlw	8
 13541  0B2D  0086               	movwf	6
 13542  0B2E  3001               	movlw	1	; select bank2/3
 13543  0B2F  0087               	movwf	7
 13544  0B30  1201               	bcf	1,4
 13545                           
 13546                           ;Dimmer_B1.c: 472: if (DimmerLights->AdjGo == 1) {
 13547  0B31  086B               	movf	_DimmerLights,w
 13548  0B32  3E08               	addlw	8
 13549  0B33  0086               	movwf	6
 13550  0B34  3001               	movlw	1	; select bank2/3
 13551  0B35  0087               	movwf	7
 13552  0B36  1D81               	btfss	1,3
 13553  0B37  2B47               	goto	l9699
 13554                           
 13555                           ;Dimmer_B1.c: 473: setDimmerLights_Adj(lights, 1);
 13556  0B38  01E2               	clrf	setDimmerLights_Adj@status
 13557  0B39  0AE2               	incf	setDimmerLights_Adj@status,f
 13558  0B3A  0866               	movf	setDimmerLights_Main@lights,w
 13559  0B3B  3193  2316  318A   	fcall	_setDimmerLights_Adj
 13560                           
 13561                           ;Dimmer_B1.c: 474: setBuz(1, 100);
 13562  0B3E  3064               	movlw	100
 13563  0B3F  0020               	movlb	0	; select bank0
 13564  0B40  00A9               	movwf	setBuz@time
 13565  0B41  3000               	movlw	0
 13566  0B42  00AA               	movwf	setBuz@time+1
 13567  0B43  3001               	movlw	1
 13568  0B44  3195  25C9         	fcall	_setBuz
 13569                           
 13570                           ;Dimmer_B1.c: 475: } else {
 13571  0B46  0008               	return
 13572  0B47                     l9699:	
 13573                           
 13574                           ;Dimmer_B1.c: 476: setDimmerLights_Adj(lights, 0);
 13575  0B47  0020               	movlb	0	; select bank0
 13576  0B48  01E2               	clrf	setDimmerLights_Adj@status
 13577  0B49  0866               	movf	setDimmerLights_Main@lights,w
 13578  0B4A  3193  2316         	fcall	_setDimmerLights_Adj
 13579  0B4C  0008               	return
 13580  0B4D                     __end_of_setDimmerLights_Main:	
 13581                           
 13582                           	psect	text82
 13583  1316                     __ptext82:	
 13584 ;; *************** function _setDimmerLights_Adj *****************
 13585 ;; Defined at:
 13586 ;;		line 655 in file "../src/Dimmer_B1.c"
 13587 ;; Parameters:    Size  Location     Type
 13588 ;;  lights          1    wreg     unsigned char 
 13589 ;;  status          1   66[BANK0 ] unsigned char 
 13590 ;; Auto vars:     Size  Location     Type
 13591 ;;  lights          1   68[BANK0 ] unsigned char 
 13592 ;; Return value:  Size  Location     Type
 13593 ;;		None               void
 13594 ;; Registers used:
 13595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13596 ;; Tracked objects:
 13597 ;;		On entry : 0/0
 13598 ;;		On exit  : 0/0
 13599 ;;		Unchanged: 0/0
 13600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13601 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13604 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13605 ;;Total ram usage:        3 bytes
 13606 ;; Hardware stack levels used:    1
 13607 ;; Hardware stack levels required when called:    9
 13608 ;; This function calls:
 13609 ;;		_DimmerLightsPointSelect
 13610 ;;		_setLoad_StatusOff
 13611 ;;		_setRF_DimmerLights
 13612 ;;		_setTxData
 13613 ;; This function is called by:
 13614 ;;		_setDimmerLights_Main
 13615 ;; This function uses a non-reentrant model
 13616 ;;
 13617                           
 13618                           
 13619                           ;psect for function _setDimmerLights_Adj
 13620  1316                     _setDimmerLights_Adj:	
 13621                           
 13622                           ;incstack = 0
 13623                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13624                           ;setDimmerLights_Adj@lights stored from wreg
 13625  1316  0020               	movlb	0	; select bank0
 13626  1317  00E4               	movwf	setDimmerLights_Adj@lights
 13627                           
 13628                           ;Dimmer_B1.c: 656: DimmerLightsPointSelect(lights);
 13629  1318  0864               	movf	setDimmerLights_Adj@lights,w
 13630  1319  319C  244E  3193   	fcall	_DimmerLightsPointSelect
 13631                           
 13632                           ;Dimmer_B1.c: 657: if (status == 1) {
 13633  131C  0020               	movlb	0	; select bank0
 13634  131D  0862               	movf	setDimmerLights_Adj@status,w
 13635  131E  3A01               	xorlw	1
 13636  131F  1D03               	skipz
 13637  1320  2B2C               	goto	l9319
 13638                           
 13639                           ;Dimmer_B1.c: 658: DimmerLights->AdjFlag = 1;
 13640  1321  086B               	movf	_DimmerLights,w
 13641  1322  0086               	movwf	6
 13642  1323  3001               	movlw	1	; select bank2/3
 13643  1324  0087               	movwf	7
 13644  1325  1581               	bsf	1,3
 13645                           
 13646                           ;Dimmer_B1.c: 659: DimmerLights->Signal = 1;
 13647  1326  086B               	movf	_DimmerLights,w
 13648  1327  0086               	movwf	6
 13649  1328  3001               	movlw	1	; select bank2/3
 13650  1329  0087               	movwf	7
 13651  132A  1481               	bsf	1,1
 13652                           
 13653                           ;Dimmer_B1.c: 660: } else {
 13654  132B  0008               	return
 13655  132C                     l9319:	
 13656                           
 13657                           ;Dimmer_B1.c: 661: if (DimmerLights->AdjFlag == 1) {
 13658  132C  086B               	movf	_DimmerLights,w
 13659  132D  0086               	movwf	6
 13660  132E  3001               	movlw	1	; select bank2/3
 13661  132F  0087               	movwf	7
 13662  1330  1D81               	btfss	1,3
 13663  1331  0008               	return
 13664                           
 13665                           ;Dimmer_B1.c: 663: DimmerLights->Signal = 0;
 13666  1332  086B               	movf	_DimmerLights,w
 13667  1333  0086               	movwf	6
 13668  1334  3001               	movlw	1	; select bank2/3
 13669  1335  0087               	movwf	7
 13670  1336  1081               	bcf	1,1
 13671                           
 13672                           ;Dimmer_B1.c: 664: DimmerLights->AdjFlag = 0;
 13673  1337  086B               	movf	_DimmerLights,w
 13674  1338  0086               	movwf	6
 13675  1339  3001               	movlw	1	; select bank2/3
 13676  133A  0087               	movwf	7
 13677  133B  1181               	bcf	1,3
 13678                           
 13679                           ;Dimmer_B1.c: 665: setLoad_StatusOff(0, 1);
 13680  133C  01A0               	clrf	setLoad_StatusOff@command
 13681  133D  0AA0               	incf	setLoad_StatusOff@command,f
 13682  133E  3000               	movlw	0
 13683  133F  319E  260B  3193   	fcall	_setLoad_StatusOff
 13684                           
 13685                           ;Dimmer_B1.c: 666: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13686  1342  0020               	movlb	0	; select bank0
 13687  1343  086B               	movf	_DimmerLights,w
 13688  1344  3E04               	addlw	4
 13689  1345  0086               	movwf	6
 13690  1346  3001               	movlw	1	; select bank2/3
 13691  1347  0087               	movwf	7
 13692  1348  0801               	movf	1,w
 13693  1349  00E3               	movwf	??_setDimmerLights_Adj
 13694  134A  086B               	movf	_DimmerLights,w
 13695  134B  3E05               	addlw	5
 13696  134C  0086               	movwf	6
 13697  134D  3001               	movlw	1	; select bank2/3
 13698  134E  0087               	movwf	7
 13699  134F  0863               	movf	??_setDimmerLights_Adj,w
 13700  1350  0081               	movwf	1
 13701                           
 13702                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, 1);
 13703  1351  01DD               	clrf	setRF_DimmerLights@on
 13704  1352  0ADD               	incf	setRF_DimmerLights@on,f
 13705  1353  0864               	movf	setDimmerLights_Adj@lights,w
 13706  1354  3189  211C  3193   	fcall	_setRF_DimmerLights
 13707                           
 13708                           ;Dimmer_B1.c: 675: setTxData();
 13709  1357  318F  2743         	fcall	_setTxData
 13710  1359  0008               	return
 13711  135A                     __end_of_setDimmerLights_Adj:	
 13712                           
 13713                           	psect	text83
 13714  1E0B                     __ptext83:	
 13715 ;; *************** function _setLoad_StatusOff *****************
 13716 ;; Defined at:
 13717 ;;		line 282 in file "../src/OverLoad_B1.c"
 13718 ;; Parameters:    Size  Location     Type
 13719 ;;  lights          1    wreg     unsigned char 
 13720 ;;  command         1    0[BANK0 ] unsigned char 
 13721 ;; Auto vars:     Size  Location     Type
 13722 ;;  lights          1    1[BANK0 ] unsigned char 
 13723 ;; Return value:  Size  Location     Type
 13724 ;;		None               void
 13725 ;; Registers used:
 13726 ;;		wreg, status,2, status,0
 13727 ;; Tracked objects:
 13728 ;;		On entry : 0/0
 13729 ;;		On exit  : 0/0
 13730 ;;		Unchanged: 0/0
 13731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13732 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;Total ram usage:        2 bytes
 13737 ;; Hardware stack levels used:    1
 13738 ;; Hardware stack levels required when called:    5
 13739 ;; This function calls:
 13740 ;;		Nothing
 13741 ;; This function is called by:
 13742 ;;		_setDimmerLights_ERROR
 13743 ;;		_setDimmerLights_Adj
 13744 ;; This function uses a non-reentrant model
 13745 ;;
 13746                           
 13747                           
 13748                           ;psect for function _setLoad_StatusOff
 13749  1E0B                     _setLoad_StatusOff:	
 13750                           
 13751                           ;incstack = 0
 13752                           ; Regs used in _setLoad_StatusOff: [wreg+status,2+status,0]
 13753                           ;setLoad_StatusOff@lights stored from wreg
 13754  1E0B  0020               	movlb	0	; select bank0
 13755  1E0C  00A1               	movwf	setLoad_StatusOff@lights
 13756                           
 13757                           ;OverLoad_B1.c: 283: Load1.StatusOff = command;
 13758  1E0D  0820               	movf	setLoad_StatusOff@command,w
 13759  1E0E  0023               	movlb	3	; select bank3
 13760  1E0F  13A0               	bcf	_Load1^(0+384),7
 13761  1E10  1D03               	skipz
 13762  1E11  17A0               	bsf	_Load1^(0+384),7
 13763                           
 13764                           ;OverLoad_B1.c: 284: Load1.SafeCount -= 2;
 13765  1E12  3002               	movlw	2
 13766  1E13  02E2               	subwf	(_Load1^(0+384)+66),f
 13767                           
 13768                           ;OverLoad_B1.c: 285: if (lights == 1) {
 13769  1E14  0020               	movlb	0	; select bank0
 13770  1E15  0821               	movf	setLoad_StatusOff@lights,w
 13771  1E16  3A01               	xorlw	1
 13772  1E17  1D03               	skipz
 13773  1E18  2E1B               	goto	l8771
 13774                           
 13775                           ;OverLoad_B1.c: 286: Load1.Lights1Status = 0;
 13776  1E19  0023               	movlb	3	; select bank3
 13777  1E1A  01E3               	clrf	(_Load1^(0+384)+67)
 13778  1E1B                     l8771:	
 13779                           
 13780                           ;OverLoad_B1.c: 287: }
 13781                           ;OverLoad_B1.c: 288: if (lights == 2) {
 13782  1E1B  0020               	movlb	0	; select bank0
 13783  1E1C  0821               	movf	setLoad_StatusOff@lights,w
 13784  1E1D  3A02               	xorlw	2
 13785  1E1E  1D03               	skipz
 13786  1E1F  2E22               	goto	l8775
 13787                           
 13788                           ;OverLoad_B1.c: 289: Load1.Lights2Status = 0;
 13789  1E20  0023               	movlb	3	; select bank3
 13790  1E21  01E4               	clrf	(_Load1^(0+384)+68)
 13791  1E22                     l8775:	
 13792                           
 13793                           ;OverLoad_B1.c: 290: }
 13794                           ;OverLoad_B1.c: 291: if (lights == 3) {
 13795  1E22  0020               	movlb	0	; select bank0
 13796  1E23  0821               	movf	setLoad_StatusOff@lights,w
 13797  1E24  3A03               	xorlw	3
 13798  1E25  1D03               	skipz
 13799  1E26  0008               	return
 13800                           
 13801                           ;OverLoad_B1.c: 292: Load1.Lights3Status = 0;
 13802  1E27  0023               	movlb	3	; select bank3
 13803  1E28  01E5               	clrf	(_Load1^(0+384)+69)
 13804  1E29  0008               	return
 13805  1E2A                     __end_of_setLoad_StatusOff:	
 13806                           
 13807                           	psect	text84
 13808  0CD3                     __ptext84:	
 13809 ;; *************** function _setDimmerLights *****************
 13810 ;; Defined at:
 13811 ;;		line 602 in file "../src/Dimmer_B1.c"
 13812 ;; Parameters:    Size  Location     Type
 13813 ;;  lights          1    wreg     unsigned char 
 13814 ;;  status          1    4[BANK0 ] unsigned char 
 13815 ;; Auto vars:     Size  Location     Type
 13816 ;;  lights          1    6[BANK0 ] unsigned char 
 13817 ;; Return value:  Size  Location     Type
 13818 ;;		None               void
 13819 ;; Registers used:
 13820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13821 ;; Tracked objects:
 13822 ;;		On entry : 0/0
 13823 ;;		On exit  : 0/0
 13824 ;;		Unchanged: 0/0
 13825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13826 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13829 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13830 ;;Total ram usage:        3 bytes
 13831 ;; Hardware stack levels used:    1
 13832 ;; Hardware stack levels required when called:    7
 13833 ;; This function calls:
 13834 ;;		_DimmerLightsPointSelect
 13835 ;;		_setLED
 13836 ;;		_setLoad_Count
 13837 ;;		_setLoad_StatusOn
 13838 ;;		_setMemory_GO
 13839 ;; This function is called by:
 13840 ;;		_setDimmerLights_Main
 13841 ;;		_setControl_Lights_Table
 13842 ;; This function uses a non-reentrant model
 13843 ;;
 13844                           
 13845                           
 13846                           ;psect for function _setDimmerLights
 13847  0CD3                     _setDimmerLights:	
 13848                           
 13849                           ;incstack = 0
 13850                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13851                           ;setDimmerLights@lights stored from wreg
 13852  0CD3  0020               	movlb	0	; select bank0
 13853  0CD4  00A6               	movwf	setDimmerLights@lights
 13854                           
 13855                           ;Dimmer_B1.c: 603: DimmerLightsPointSelect(lights);
 13856  0CD5  0826               	movf	setDimmerLights@lights,w
 13857  0CD6  319C  244E  318C   	fcall	_DimmerLightsPointSelect
 13858                           
 13859                           ;Dimmer_B1.c: 604: Dimmer->Load = lights;
 13860  0CD9  0020               	movlb	0	; select bank0
 13861  0CDA  0826               	movf	setDimmerLights@lights,w
 13862  0CDB  00A5               	movwf	??_setDimmerLights
 13863  0CDC  0A76               	incf	_Dimmer,w
 13864  0CDD  0086               	movwf	6
 13865  0CDE  0187               	clrf	7
 13866  0CDF  0825               	movf	??_setDimmerLights,w
 13867  0CE0  0081               	movwf	1
 13868                           
 13869                           ;Dimmer_B1.c: 605: if (status == 1) {
 13870  0CE1  0824               	movf	setDimmerLights@status,w
 13871  0CE2  3A01               	xorlw	1
 13872  0CE3  1D03               	skipz
 13873  0CE4  2D2F               	goto	l8949
 13874                           
 13875                           ;Dimmer_B1.c: 606: DimmerLights->Status = 1;
 13876  0CE5  086B               	movf	_DimmerLights,w
 13877  0CE6  0086               	movwf	6
 13878  0CE7  3001               	movlw	1	; select bank2/3
 13879  0CE8  0087               	movwf	7
 13880  0CE9  1681               	bsf	1,5
 13881                           
 13882                           ;Dimmer_B1.c: 607: setLED(lights, 0);
 13883  0CEA  01A2               	clrf	setLED@command
 13884  0CEB  0826               	movf	setDimmerLights@lights,w
 13885  0CEC  3196  267D  318C   	fcall	_setLED
 13886                           
 13887                           ;Dimmer_B1.c: 609: setLoad_Count(0);
 13888  0CEF  3000               	movlw	0
 13889  0CF0  319B  233A  318C   	fcall	_setLoad_Count
 13890                           
 13891                           ;Dimmer_B1.c: 611: DimmerLights->Signal = 1;
 13892  0CF3  0020               	movlb	0	; select bank0
 13893  0CF4  086B               	movf	_DimmerLights,w
 13894  0CF5  0086               	movwf	6
 13895  0CF6  3001               	movlw	1	; select bank2/3
 13896  0CF7  0087               	movwf	7
 13897  0CF8  1481               	bsf	1,1
 13898                           
 13899                           ;Dimmer_B1.c: 612: DimmerLights->DimmingTimeValue = 7;
 13900  0CF9  3007               	movlw	7
 13901  0CFA  00A5               	movwf	??_setDimmerLights
 13902  0CFB  086B               	movf	_DimmerLights,w
 13903  0CFC  3E02               	addlw	2
 13904  0CFD  0086               	movwf	6
 13905  0CFE  3001               	movlw	1	; select bank2/3
 13906  0CFF  0087               	movwf	7
 13907  0D00  0825               	movf	??_setDimmerLights,w
 13908  0D01  0081               	movwf	1
 13909                           
 13910                           ;Dimmer_B1.c: 614: if (DimmerLights->StatusFlag == 0) {
 13911  0D02  086B               	movf	_DimmerLights,w
 13912  0D03  0086               	movwf	6
 13913  0D04  3001               	movlw	1	; select bank2/3
 13914  0D05  0087               	movwf	7
 13915  0D06  1B01               	btfsc	1,6
 13916  0D07  0008               	return
 13917                           
 13918                           ;Dimmer_B1.c: 615: DimmerLights->StatusFlag = 1;
 13919  0D08  086B               	movf	_DimmerLights,w
 13920  0D09  0086               	movwf	6
 13921  0D0A  3001               	movlw	1	; select bank2/3
 13922  0D0B  0087               	movwf	7
 13923  0D0C  1701               	bsf	1,6
 13924                           
 13925                           ;Dimmer_B1.c: 616: setLoad_StatusOn(lights, 1);
 13926  0D0D  01A0               	clrf	setLoad_StatusOn@command
 13927  0D0E  0AA0               	incf	setLoad_StatusOn@command,f
 13928  0D0F  0826               	movf	setDimmerLights@lights,w
 13929  0D10  319E  26EE  318C   	fcall	_setLoad_StatusOn
 13930                           
 13931                           ;Dimmer_B1.c: 617: setMemory_GO(0);
 13932  0D13  3000               	movlw	0
 13933  0D14  319C  24EF         	fcall	_setMemory_GO
 13934                           
 13935                           ;Dimmer_B1.c: 620: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13936  0D16  0020               	movlb	0	; select bank0
 13937  0D17  086B               	movf	_DimmerLights,w
 13938  0D18  3E05               	addlw	5
 13939  0D19  0086               	movwf	6
 13940  0D1A  3001               	movlw	1	; select bank2/3
 13941  0D1B  0087               	movwf	7
 13942  0D1C  0801               	movf	1,w
 13943  0D1D  00A5               	movwf	??_setDimmerLights
 13944  0D1E  086B               	movf	_DimmerLights,w
 13945  0D1F  3E04               	addlw	4
 13946  0D20  0086               	movwf	6
 13947  0D21  3001               	movlw	1	; select bank2/3
 13948  0D22  0087               	movwf	7
 13949  0D23  0825               	movf	??_setDimmerLights,w
 13950  0D24  0081               	movwf	1
 13951                           
 13952                           ;Dimmer_B1.c: 624: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 13953  0D25  3020               	movlw	32
 13954  0D26  00A5               	movwf	??_setDimmerLights
 13955  0D27  086B               	movf	_DimmerLights,w
 13956  0D28  3E04               	addlw	4
 13957  0D29  0086               	movwf	6
 13958  0D2A  3001               	movlw	1	; select bank2/3
 13959  0D2B  0087               	movwf	7
 13960  0D2C  0825               	movf	??_setDimmerLights,w
 13961  0D2D  0081               	movwf	1
 13962                           
 13963                           ;Dimmer_B1.c: 626: }
 13964                           ;Dimmer_B1.c: 627: } else {
 13965  0D2E  0008               	return
 13966  0D2F                     l8949:	
 13967                           
 13968                           ;Dimmer_B1.c: 628: DimmerLights->Status = 0;
 13969  0D2F  086B               	movf	_DimmerLights,w
 13970  0D30  0086               	movwf	6
 13971  0D31  3001               	movlw	1	; select bank2/3
 13972  0D32  0087               	movwf	7
 13973  0D33  1281               	bcf	1,5
 13974                           
 13975                           ;Dimmer_B1.c: 630: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13976  0D34  086B               	movf	_DimmerLights,w
 13977  0D35  3E06               	addlw	6
 13978  0D36  0086               	movwf	6
 13979  0D37  3001               	movlw	1	; select bank2/3
 13980  0D38  0087               	movwf	7
 13981  0D39  0801               	movf	1,w
 13982  0D3A  00A5               	movwf	??_setDimmerLights
 13983  0D3B  086B               	movf	_DimmerLights,w
 13984  0D3C  3E04               	addlw	4
 13985  0D3D  0086               	movwf	6
 13986  0D3E  3001               	movlw	1	; select bank2/3
 13987  0D3F  0087               	movwf	7
 13988  0D40  0825               	movf	??_setDimmerLights,w
 13989  0D41  0081               	movwf	1
 13990                           
 13991                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 1;
 13992  0D42  086B               	movf	_DimmerLights,w
 13993  0D43  0086               	movwf	6
 13994  0D44  3001               	movlw	1	; select bank2/3
 13995  0D45  0087               	movwf	7
 13996  0D46  1481               	bsf	1,1
 13997                           
 13998                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 13999  0D47  086B               	movf	_DimmerLights,w
 14000  0D48  0086               	movwf	6
 14001  0D49  3001               	movlw	1	; select bank2/3
 14002  0D4A  0087               	movwf	7
 14003  0D4B  1181               	bcf	1,3
 14004                           
 14005                           ;Dimmer_B1.c: 639: DimmerLights->AdjStatus = 0;
 14006  0D4C  086B               	movf	_DimmerLights,w
 14007  0D4D  0086               	movwf	6
 14008  0D4E  3001               	movlw	1	; select bank2/3
 14009  0D4F  0087               	movwf	7
 14010  0D50  1201               	bcf	1,4
 14011                           
 14012                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 14013  0D51  3007               	movlw	7
 14014  0D52  00A5               	movwf	??_setDimmerLights
 14015  0D53  086B               	movf	_DimmerLights,w
 14016  0D54  3E02               	addlw	2
 14017  0D55  0086               	movwf	6
 14018  0D56  3001               	movlw	1	; select bank2/3
 14019  0D57  0087               	movwf	7
 14020  0D58  0825               	movf	??_setDimmerLights,w
 14021  0D59  0081               	movwf	1
 14022  0D5A  0008               	return
 14023  0D5B                     __end_of_setDimmerLights:	
 14024                           
 14025                           	psect	text85
 14026  1EEE                     __ptext85:	
 14027 ;; *************** function _setLoad_StatusOn *****************
 14028 ;; Defined at:
 14029 ;;		line 267 in file "../src/OverLoad_B1.c"
 14030 ;; Parameters:    Size  Location     Type
 14031 ;;  lights          1    wreg     unsigned char 
 14032 ;;  command         1    0[BANK0 ] unsigned char 
 14033 ;; Auto vars:     Size  Location     Type
 14034 ;;  lights          1    1[BANK0 ] unsigned char 
 14035 ;; Return value:  Size  Location     Type
 14036 ;;		None               void
 14037 ;; Registers used:
 14038 ;;		wreg
 14039 ;; Tracked objects:
 14040 ;;		On entry : 0/0
 14041 ;;		On exit  : 0/0
 14042 ;;		Unchanged: 0/0
 14043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14044 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14045 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14047 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14048 ;;Total ram usage:        2 bytes
 14049 ;; Hardware stack levels used:    1
 14050 ;; Hardware stack levels required when called:    5
 14051 ;; This function calls:
 14052 ;;		Nothing
 14053 ;; This function is called by:
 14054 ;;		_setDimmerLights
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058                           
 14059                           ;psect for function _setLoad_StatusOn
 14060  1EEE                     _setLoad_StatusOn:	
 14061                           
 14062                           ;incstack = 0
 14063                           ; Regs used in _setLoad_StatusOn: [wreg]
 14064                           ;setLoad_StatusOn@lights stored from wreg
 14065  1EEE  0020               	movlb	0	; select bank0
 14066  1EEF  00A1               	movwf	setLoad_StatusOn@lights
 14067                           
 14068                           ;OverLoad_B1.c: 268: Load1.GO = 1;
 14069  1EF0  0023               	movlb	3	; select bank3
 14070  1EF1  14A0               	bsf	_Load1^(0+384),1
 14071                           
 14072                           ;OverLoad_B1.c: 269: Load1.StatusOn = command;
 14073  1EF2  0020               	movlb	0	; select bank0
 14074  1EF3  0820               	movf	setLoad_StatusOn@command,w
 14075  1EF4  0023               	movlb	3	; select bank3
 14076  1EF5  1320               	bcf	_Load1^(0+384),6
 14077  1EF6  1D03               	skipz
 14078  1EF7  1720               	bsf	_Load1^(0+384),6
 14079                           
 14080                           ;OverLoad_B1.c: 271: if (lights == 1) {
 14081  1EF8  0020               	movlb	0	; select bank0
 14082  1EF9  0821               	movf	setLoad_StatusOn@lights,w
 14083  1EFA  3A01               	xorlw	1
 14084  1EFB  1D03               	skipz
 14085  1EFC  2F00               	goto	l8843
 14086                           
 14087                           ;OverLoad_B1.c: 272: Load1.Lights1Status = 1;
 14088  1EFD  0023               	movlb	3	; select bank3
 14089  1EFE  01E3               	clrf	(_Load1^(0+384)+67)
 14090  1EFF  0AE3               	incf	(_Load1^(0+384)+67),f
 14091  1F00                     l8843:	
 14092                           
 14093                           ;OverLoad_B1.c: 273: }
 14094                           ;OverLoad_B1.c: 274: if (lights == 2) {
 14095  1F00  0020               	movlb	0	; select bank0
 14096  1F01  0821               	movf	setLoad_StatusOn@lights,w
 14097  1F02  3A02               	xorlw	2
 14098  1F03  1D03               	skipz
 14099  1F04  2F08               	goto	l8847
 14100                           
 14101                           ;OverLoad_B1.c: 275: Load1.Lights2Status = 1;
 14102  1F05  0023               	movlb	3	; select bank3
 14103  1F06  01E4               	clrf	(_Load1^(0+384)+68)
 14104  1F07  0AE4               	incf	(_Load1^(0+384)+68),f
 14105  1F08                     l8847:	
 14106                           
 14107                           ;OverLoad_B1.c: 276: }
 14108                           ;OverLoad_B1.c: 277: if (lights == 3) {
 14109  1F08  0020               	movlb	0	; select bank0
 14110  1F09  0821               	movf	setLoad_StatusOn@lights,w
 14111  1F0A  3A03               	xorlw	3
 14112  1F0B  1D03               	skipz
 14113  1F0C  0008               	return
 14114                           
 14115                           ;OverLoad_B1.c: 278: Load1.Lights3Status = 1;
 14116  1F0D  0023               	movlb	3	; select bank3
 14117  1F0E  01E5               	clrf	(_Load1^(0+384)+69)
 14118  1F0F  0AE5               	incf	(_Load1^(0+384)+69),f
 14119  1F10  0008               	return
 14120  1F11                     __end_of_setLoad_StatusOn:	
 14121                           
 14122                           	psect	text86
 14123  1B3A                     __ptext86:	
 14124 ;; *************** function _setLoad_Count *****************
 14125 ;; Defined at:
 14126 ;;		line 252 in file "../src/OverLoad_B1.c"
 14127 ;; Parameters:    Size  Location     Type
 14128 ;;  command         1    wreg     unsigned char 
 14129 ;; Auto vars:     Size  Location     Type
 14130 ;;  command         1    1[BANK0 ] unsigned char 
 14131 ;; Return value:  Size  Location     Type
 14132 ;;		None               void
 14133 ;; Registers used:
 14134 ;;		wreg
 14135 ;; Tracked objects:
 14136 ;;		On entry : 0/0
 14137 ;;		On exit  : 0/0
 14138 ;;		Unchanged: 0/0
 14139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14141 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14143 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14144 ;;Total ram usage:        2 bytes
 14145 ;; Hardware stack levels used:    1
 14146 ;; Hardware stack levels required when called:    5
 14147 ;; This function calls:
 14148 ;;		Nothing
 14149 ;; This function is called by:
 14150 ;;		_setDimmerLights
 14151 ;; This function uses a non-reentrant model
 14152 ;;
 14153                           
 14154                           
 14155                           ;psect for function _setLoad_Count
 14156  1B3A                     _setLoad_Count:	
 14157                           
 14158                           ;incstack = 0
 14159                           ; Regs used in _setLoad_Count: [wreg]
 14160                           ;setLoad_Count@command stored from wreg
 14161  1B3A  0020               	movlb	0	; select bank0
 14162  1B3B  00A1               	movwf	setLoad_Count@command
 14163                           
 14164                           ;OverLoad_B1.c: 253: Load1.Count = command;
 14165  1B3C  0821               	movf	setLoad_Count@command,w
 14166  1B3D  00A0               	movwf	??_setLoad_Count
 14167  1B3E  0820               	movf	??_setLoad_Count,w
 14168  1B3F  0023               	movlb	3	; select bank3
 14169  1B40  00DA               	movwf	(_Load1^(0+384)+58)
 14170                           
 14171                           ;OverLoad_B1.c: 254: Load1.SafeCount = command;
 14172  1B41  0020               	movlb	0	; select bank0
 14173  1B42  0821               	movf	setLoad_Count@command,w
 14174  1B43  00A0               	movwf	??_setLoad_Count
 14175  1B44  0820               	movf	??_setLoad_Count,w
 14176  1B45  0023               	movlb	3	; select bank3
 14177  1B46  00E2               	movwf	(_Load1^(0+384)+66)
 14178  1B47  0008               	return
 14179  1B48                     __end_of_setLoad_Count:	
 14180                           
 14181                           	psect	text87
 14182  167D                     __ptext87:	
 14183 ;; *************** function _setLED *****************
 14184 ;; Defined at:
 14185 ;;		line 70 in file "../src/LED_B1.c"
 14186 ;; Parameters:    Size  Location     Type
 14187 ;;  led             1    wreg     unsigned char 
 14188 ;;  command         1    2[BANK0 ] unsigned char 
 14189 ;; Auto vars:     Size  Location     Type
 14190 ;;  led             1    3[BANK0 ] unsigned char 
 14191 ;; Return value:  Size  Location     Type
 14192 ;;		None               void
 14193 ;; Registers used:
 14194 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14195 ;; Tracked objects:
 14196 ;;		On entry : 0/0
 14197 ;;		On exit  : 0/0
 14198 ;;		Unchanged: 0/0
 14199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14200 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14203 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14204 ;;Total ram usage:        2 bytes
 14205 ;; Hardware stack levels used:    1
 14206 ;; Hardware stack levels required when called:    6
 14207 ;; This function calls:
 14208 ;;		_LedPointSelect
 14209 ;; This function is called by:
 14210 ;;		_setDimmerLights_ERROR
 14211 ;;		_setDimmerLights
 14212 ;;		_setLED_Initialization
 14213 ;;		_setLoad_Exceptions
 14214 ;;		_setOverTemp_Exceptions
 14215 ;;		_setSw_Initialization
 14216 ;; This function uses a non-reentrant model
 14217 ;;
 14218                           
 14219                           
 14220                           ;psect for function _setLED
 14221  167D                     _setLED:	
 14222                           
 14223                           ;incstack = 0
 14224                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14225                           ;setLED@led stored from wreg
 14226  167D  0020               	movlb	0	; select bank0
 14227  167E  00A3               	movwf	setLED@led
 14228                           
 14229                           ;LED_B1.c: 71: LedPointSelect(led);
 14230  167F  0823               	movf	setLED@led,w
 14231  1680  3190  2066  3196   	fcall	_LedPointSelect
 14232                           
 14233                           ;LED_B1.c: 72: if (command == 0) {
 14234  1683  0020               	movlb	0	; select bank0
 14235  1684  08A2               	movf	setLED@command,f
 14236  1685  1D03               	skipz
 14237  1686  2E99               	goto	l8801
 14238                           
 14239                           ;LED_B1.c: 74: if (led == 1) {
 14240  1687  0823               	movf	setLED@led,w
 14241  1688  3A01               	xorlw	1
 14242  1689  1D03               	skipz
 14243  168A  2E8D               	goto	l8793
 14244                           
 14245                           ;LED_B1.c: 78: RA3 = 1;
 14246  168B  158C               	bsf	12,3	;volatile
 14247                           
 14248                           ;LED_B1.c: 80: }
 14249  168C  0008               	return
 14250  168D                     l8793:	
 14251                           
 14252                           ;LED_B1.c: 83: else if (led == 2) {
 14253  168D  0823               	movf	setLED@led,w
 14254  168E  3A02               	xorlw	2
 14255  168F  1D03               	skipz
 14256  1690  2E93               	goto	l8797
 14257                           
 14258                           ;LED_B1.c: 87: RC7 = 1;
 14259  1691  178E               	bsf	14,7	;volatile
 14260                           
 14261                           ;LED_B1.c: 89: }
 14262  1692  0008               	return
 14263  1693                     l8797:	
 14264                           
 14265                           ;LED_B1.c: 101: else if (led == 99) {
 14266  1693  0823               	movf	setLED@led,w
 14267  1694  3A63               	xorlw	99
 14268  1695  1D03               	skipz
 14269  1696  0008               	return
 14270                           
 14271                           ;LED_B1.c: 105: RB5 = 1;
 14272  1697  168D               	bsf	13,5	;volatile
 14273                           
 14274                           ;LED_B1.c: 107: }
 14275                           ;LED_B1.c: 109: } else if (command == 1) {
 14276  1698  0008               	return
 14277  1699                     l8801:	
 14278  1699  0822               	movf	setLED@command,w
 14279  169A  3A01               	xorlw	1
 14280  169B  1D03               	skipz
 14281  169C  2EAF               	goto	l8815
 14282                           
 14283                           ;LED_B1.c: 111: if (led == 1) {
 14284  169D  0823               	movf	setLED@led,w
 14285  169E  3A01               	xorlw	1
 14286  169F  1D03               	skipz
 14287  16A0  2EA3               	goto	l8807
 14288                           
 14289                           ;LED_B1.c: 115: RA3 = 0;
 14290  16A1  118C               	bcf	12,3	;volatile
 14291                           
 14292                           ;LED_B1.c: 117: }
 14293  16A2  0008               	return
 14294  16A3                     l8807:	
 14295                           
 14296                           ;LED_B1.c: 120: else if (led == 2) {
 14297  16A3  0823               	movf	setLED@led,w
 14298  16A4  3A02               	xorlw	2
 14299  16A5  1D03               	skipz
 14300  16A6  2EA9               	goto	l8811
 14301                           
 14302                           ;LED_B1.c: 124: RC7 = 0;
 14303  16A7  138E               	bcf	14,7	;volatile
 14304                           
 14305                           ;LED_B1.c: 126: }
 14306  16A8  0008               	return
 14307  16A9                     l8811:	
 14308                           
 14309                           ;LED_B1.c: 138: else if (led == 99) {
 14310  16A9  0823               	movf	setLED@led,w
 14311  16AA  3A63               	xorlw	99
 14312  16AB  1D03               	skipz
 14313  16AC  0008               	return
 14314                           
 14315                           ;LED_B1.c: 142: RB5 = 0;
 14316  16AD  128D               	bcf	13,5	;volatile
 14317                           
 14318                           ;LED_B1.c: 144: }
 14319                           ;LED_B1.c: 146: } else if (command == 10) {
 14320  16AE  0008               	return
 14321  16AF                     l8815:	
 14322  16AF  0822               	movf	setLED@command,w
 14323  16B0  3A0A               	xorlw	10
 14324  16B1  1D03               	skipz
 14325  16B2  2ED1               	goto	l8831
 14326                           
 14327                           ;LED_B1.c: 147: LED->GO = 0;
 14328  16B3  0878               	movf	_LED,w
 14329  16B4  0086               	movwf	6
 14330  16B5  3001               	movlw	1	; select bank2/3
 14331  16B6  0087               	movwf	7
 14332  16B7  1081               	bcf	1,1
 14333                           
 14334                           ;LED_B1.c: 148: LED->Time = 0;
 14335  16B8  0A78               	incf	_LED,w
 14336  16B9  0086               	movwf	6
 14337  16BA  3001               	movlw	1	; select bank2/3
 14338  16BB  0087               	movwf	7
 14339  16BC  3000               	movlw	0
 14340  16BD  3FC0               	movwi [0]fsr1
 14341  16BE  3FC1               	movwi [1]fsr1
 14342                           
 14343                           ;LED_B1.c: 150: if (led == 1) {
 14344  16BF  0823               	movf	setLED@led,w
 14345  16C0  3A01               	xorlw	1
 14346  16C1  1D03               	skipz
 14347  16C2  2EC5               	goto	l8823
 14348                           
 14349                           ;LED_B1.c: 154: RA3 = 1;
 14350  16C3  158C               	bsf	12,3	;volatile
 14351                           
 14352                           ;LED_B1.c: 156: }
 14353  16C4  0008               	return
 14354  16C5                     l8823:	
 14355                           
 14356                           ;LED_B1.c: 159: else if (led == 2) {
 14357  16C5  0823               	movf	setLED@led,w
 14358  16C6  3A02               	xorlw	2
 14359  16C7  1D03               	skipz
 14360  16C8  2ECB               	goto	l8827
 14361                           
 14362                           ;LED_B1.c: 163: RC7 = 1;
 14363  16C9  178E               	bsf	14,7	;volatile
 14364                           
 14365                           ;LED_B1.c: 165: }
 14366  16CA  0008               	return
 14367  16CB                     l8827:	
 14368                           
 14369                           ;LED_B1.c: 177: else if (led == 99) {
 14370  16CB  0823               	movf	setLED@led,w
 14371  16CC  3A63               	xorlw	99
 14372  16CD  1D03               	skipz
 14373  16CE  0008               	return
 14374                           
 14375                           ;LED_B1.c: 181: RB5 = 1;
 14376  16CF  168D               	bsf	13,5	;volatile
 14377                           
 14378                           ;LED_B1.c: 183: }
 14379                           ;LED_B1.c: 185: } else if (command == 11) {
 14380  16D0  0008               	return
 14381  16D1                     l8831:	
 14382  16D1  0822               	movf	setLED@command,w
 14383  16D2  3A0B               	xorlw	11
 14384  16D3  1D03               	skipz
 14385  16D4  0008               	return
 14386                           
 14387                           ;LED_B1.c: 186: LED->GO = 1;
 14388  16D5  0878               	movf	_LED,w
 14389  16D6  0086               	movwf	6
 14390  16D7  3001               	movlw	1	; select bank2/3
 14391  16D8  0087               	movwf	7
 14392  16D9  1481               	bsf	1,1
 14393  16DA  0008               	return
 14394  16DB                     __end_of_setLED:	
 14395                           
 14396                           	psect	text88
 14397  1066                     __ptext88:	
 14398 ;; *************** function _LedPointSelect *****************
 14399 ;; Defined at:
 14400 ;;		line 7 in file "../src/LED_B1.c"
 14401 ;; Parameters:    Size  Location     Type
 14402 ;;  led             1    wreg     unsigned char 
 14403 ;; Auto vars:     Size  Location     Type
 14404 ;;  led             1    1[BANK0 ] unsigned char 
 14405 ;; Return value:  Size  Location     Type
 14406 ;;		None               void
 14407 ;; Registers used:
 14408 ;;		wreg
 14409 ;; Tracked objects:
 14410 ;;		On entry : 0/0
 14411 ;;		On exit  : 0/0
 14412 ;;		Unchanged: 0/0
 14413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14416 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14417 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14418 ;;Total ram usage:        2 bytes
 14419 ;; Hardware stack levels used:    1
 14420 ;; Hardware stack levels required when called:    5
 14421 ;; This function calls:
 14422 ;;		Nothing
 14423 ;; This function is called by:
 14424 ;;		_setLED_Initialization
 14425 ;;		_setLED
 14426 ;;		_setLED_Main
 14427 ;; This function uses a non-reentrant model
 14428 ;;
 14429                           
 14430                           
 14431                           ;psect for function _LedPointSelect
 14432  1066                     _LedPointSelect:	
 14433                           
 14434                           ;incstack = 0
 14435                           ; Regs used in _LedPointSelect: [wreg]
 14436                           ;LedPointSelect@led stored from wreg
 14437  1066  0020               	movlb	0	; select bank0
 14438  1067  00A1               	movwf	LedPointSelect@led
 14439                           
 14440                           ;LED_B1.c: 9: if (led == 1) {
 14441  1068  0821               	movf	LedPointSelect@led,w
 14442  1069  3A01               	xorlw	1
 14443  106A  1D03               	skipz
 14444  106B  2871               	goto	l8565
 14445                           
 14446                           ;LED_B1.c: 10: LED = &VarLED1;
 14447  106C  3068               	movlw	_VarLED1& (0+255)
 14448  106D  00A0               	movwf	??_LedPointSelect
 14449  106E  0820               	movf	??_LedPointSelect,w
 14450  106F  00F8               	movwf	_LED
 14451                           
 14452                           ;LED_B1.c: 11: }
 14453  1070  0008               	return
 14454  1071                     l8565:	
 14455                           
 14456                           ;LED_B1.c: 14: else if (led == 2) {
 14457  1071  0821               	movf	LedPointSelect@led,w
 14458  1072  3A02               	xorlw	2
 14459  1073  1D03               	skipz
 14460  1074  287A               	goto	l8569
 14461                           
 14462                           ;LED_B1.c: 15: LED = &VarLED2;
 14463  1075  306C               	movlw	_VarLED2& (0+255)
 14464  1076  00A0               	movwf	??_LedPointSelect
 14465  1077  0820               	movf	??_LedPointSelect,w
 14466  1078  00F8               	movwf	_LED
 14467                           
 14468                           ;LED_B1.c: 16: }
 14469  1079  0008               	return
 14470  107A                     l8569:	
 14471                           
 14472                           ;LED_B1.c: 24: else if (led == 99) {
 14473  107A  0821               	movf	LedPointSelect@led,w
 14474  107B  3A63               	xorlw	99
 14475  107C  1D03               	skipz
 14476  107D  0008               	return
 14477                           
 14478                           ;LED_B1.c: 25: LED = &VarErrLED;
 14479  107E  3064               	movlw	_VarErrLED& (0+255)
 14480  107F  00A0               	movwf	??_LedPointSelect
 14481  1080  0820               	movf	??_LedPointSelect,w
 14482  1081  00F8               	movwf	_LED
 14483  1082  0008               	return
 14484  1083                     __end_of_LedPointSelect:	
 14485                           
 14486                           	psect	text89
 14487  1D1C                     __ptext89:	
 14488 ;; *************** function _DimmerLights_Close *****************
 14489 ;; Defined at:
 14490 ;;		line 405 in file "../src/Dimmer_B1.c"
 14491 ;; Parameters:    Size  Location     Type
 14492 ;;		None
 14493 ;; Auto vars:     Size  Location     Type
 14494 ;;		None
 14495 ;; Return value:  Size  Location     Type
 14496 ;;		None               void
 14497 ;; Registers used:
 14498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14499 ;; Tracked objects:
 14500 ;;		On entry : 0/0
 14501 ;;		On exit  : 0/0
 14502 ;;		Unchanged: 0/0
 14503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14508 ;;Total ram usage:        0 bytes
 14509 ;; Hardware stack levels used:    1
 14510 ;; Hardware stack levels required when called:    6
 14511 ;; This function calls:
 14512 ;;		_getDimmerLights_StatusFlag
 14513 ;;		_setLoad_GO
 14514 ;;		_setMemory_GO
 14515 ;; This function is called by:
 14516 ;;		_DimmerLights_Main
 14517 ;; This function uses a non-reentrant model
 14518 ;;
 14519                           
 14520                           
 14521                           ;psect for function _DimmerLights_Close
 14522  1D1C                     _DimmerLights_Close:	
 14523                           
 14524                           ;Dimmer_B1.c: 406: if (Dimmer->Detect == 1) {
 14525                           
 14526                           ;incstack = 0
 14527                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14528  1D1C  0876               	movf	_Dimmer,w
 14529  1D1D  0086               	movwf	6
 14530  1D1E  0187               	clrf	7
 14531  1D1F  1C01               	btfss	1,0
 14532  1D20  0008               	return
 14533                           
 14534                           ;Dimmer_B1.c: 407: Dimmer->Detect = 0;
 14535  1D21  0876               	movf	_Dimmer,w
 14536  1D22  0086               	movwf	6
 14537  1D23  0187               	clrf	7
 14538  1D24  1001               	bcf	1,0
 14539                           
 14540                           ;Dimmer_B1.c: 408: if (getDimmerLights_StatusFlag() == 0) {
 14541  1D25  319B  23D3  319D   	fcall	_getDimmerLights_StatusFlag
 14542  1D28  3800               	iorlw	0
 14543  1D29  1D03               	skipz
 14544  1D2A  0008               	return
 14545                           
 14546                           ;Dimmer_B1.c: 409: setLoad_GO(0);
 14547  1D2B  3000               	movlw	0
 14548  1D2C  319A  2257  319D   	fcall	_setLoad_GO
 14549                           
 14550                           ;Dimmer_B1.c: 410: setMemory_GO(1);
 14551  1D2F  3001               	movlw	1
 14552  1D30  319C  24EF         	fcall	_setMemory_GO
 14553  1D32  0008               	return
 14554  1D33                     __end_of_DimmerLights_Close:	
 14555                           
 14556                           	psect	text90
 14557  1CEF                     __ptext90:	
 14558 ;; *************** function _setMemory_GO *****************
 14559 ;; Defined at:
 14560 ;;		line 892 in file "../src/MCU_B1.c"
 14561 ;; Parameters:    Size  Location     Type
 14562 ;;  command         1    wreg     unsigned char 
 14563 ;; Auto vars:     Size  Location     Type
 14564 ;;  command         1    2[BANK0 ] unsigned char 
 14565 ;; Return value:  Size  Location     Type
 14566 ;;		None               void
 14567 ;; Registers used:
 14568 ;;		wreg, status,2, status,0
 14569 ;; Tracked objects:
 14570 ;;		On entry : 0/0
 14571 ;;		On exit  : 0/0
 14572 ;;		Unchanged: 0/0
 14573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;Total ram usage:        3 bytes
 14579 ;; Hardware stack levels used:    1
 14580 ;; Hardware stack levels required when called:    5
 14581 ;; This function calls:
 14582 ;;		Nothing
 14583 ;; This function is called by:
 14584 ;;		_DimmerLights_Close
 14585 ;;		_setDimmerLights
 14586 ;; This function uses a non-reentrant model
 14587 ;;
 14588                           
 14589                           
 14590                           ;psect for function _setMemory_GO
 14591  1CEF                     _setMemory_GO:	
 14592                           
 14593                           ;incstack = 0
 14594                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 14595                           ;setMemory_GO@command stored from wreg
 14596  1CEF  0020               	movlb	0	; select bank0
 14597  1CF0  00A2               	movwf	setMemory_GO@command
 14598                           
 14599                           ;MCU_B1.c: 893: Memory.GO = command;
 14600  1CF1  0822               	movf	setMemory_GO@command,w
 14601  1CF2  0024               	movlb	4	; select bank4
 14602  1CF3  10C4               	bcf	(_Memory^(0+512)+36),1
 14603  1CF4  1D03               	skipz
 14604  1CF5  14C4               	bsf	(_Memory^(0+512)+36),1
 14605                           
 14606                           ;MCU_B1.c: 894: if (command == 0) {
 14607  1CF6  0020               	movlb	0	; select bank0
 14608  1CF7  08A2               	movf	setMemory_GO@command,f
 14609  1CF8  1D03               	skipz
 14610  1CF9  0008               	return
 14611                           
 14612                           ;MCU_B1.c: 895: Memory.Time = command;
 14613  1CFA  0822               	movf	setMemory_GO@command,w
 14614  1CFB  00A0               	movwf	??_setMemory_GO
 14615  1CFC  01A1               	clrf	??_setMemory_GO+1
 14616  1CFD  0820               	movf	??_setMemory_GO,w
 14617  1CFE  0024               	movlb	4	; select bank4
 14618  1CFF  00C2               	movwf	(_Memory^(0+512)+34)
 14619  1D00  0020               	movlb	0	; select bank0
 14620  1D01  0821               	movf	??_setMemory_GO+1,w
 14621  1D02  0024               	movlb	4	; select bank4
 14622  1D03  00C3               	movwf	((_Memory+1)^(0+512)+34)
 14623  1D04  0008               	return
 14624  1D05                     __end_of_setMemory_GO:	
 14625                           
 14626                           	psect	text91
 14627  1A57                     __ptext91:	
 14628 ;; *************** function _setLoad_GO *****************
 14629 ;; Defined at:
 14630 ;;		line 263 in file "../src/OverLoad_B1.c"
 14631 ;; Parameters:    Size  Location     Type
 14632 ;;  command         1    wreg     unsigned char 
 14633 ;; Auto vars:     Size  Location     Type
 14634 ;;  command         1    0[BANK0 ] unsigned char 
 14635 ;; Return value:  Size  Location     Type
 14636 ;;		None               void
 14637 ;; Registers used:
 14638 ;;		wreg
 14639 ;; Tracked objects:
 14640 ;;		On entry : 0/0
 14641 ;;		On exit  : 0/0
 14642 ;;		Unchanged: 0/0
 14643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14648 ;;Total ram usage:        1 bytes
 14649 ;; Hardware stack levels used:    1
 14650 ;; Hardware stack levels required when called:    5
 14651 ;; This function calls:
 14652 ;;		Nothing
 14653 ;; This function is called by:
 14654 ;;		_DimmerLights_Close
 14655 ;; This function uses a non-reentrant model
 14656 ;;
 14657                           
 14658                           
 14659                           ;psect for function _setLoad_GO
 14660  1A57                     _setLoad_GO:	
 14661                           
 14662                           ;incstack = 0
 14663                           ; Regs used in _setLoad_GO: [wreg]
 14664                           ;setLoad_GO@command stored from wreg
 14665  1A57  0020               	movlb	0	; select bank0
 14666  1A58  00A0               	movwf	setLoad_GO@command
 14667                           
 14668                           ;OverLoad_B1.c: 264: Load1.GO = command;
 14669  1A59  0820               	movf	setLoad_GO@command,w
 14670  1A5A  0023               	movlb	3	; select bank3
 14671  1A5B  10A0               	bcf	_Load1^(0+384),1
 14672  1A5C  1D03               	skipz
 14673  1A5D  14A0               	bsf	_Load1^(0+384),1
 14674  1A5E  0008               	return
 14675  1A5F                     __end_of_setLoad_GO:	
 14676                           
 14677                           	psect	text92
 14678  1BD3                     __ptext92:	
 14679 ;; *************** function _getDimmerLights_StatusFlag *****************
 14680 ;; Defined at:
 14681 ;;		line 484 in file "../src/Dimmer_B1.c"
 14682 ;; Parameters:    Size  Location     Type
 14683 ;;		None
 14684 ;; Auto vars:     Size  Location     Type
 14685 ;;  Status          1    1[BANK0 ] unsigned char 
 14686 ;; Return value:  Size  Location     Type
 14687 ;;                  1    wreg      unsigned char 
 14688 ;; Registers used:
 14689 ;;		wreg, status,2
 14690 ;; Tracked objects:
 14691 ;;		On entry : 0/0
 14692 ;;		On exit  : 0/0
 14693 ;;		Unchanged: 0/0
 14694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14696 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14698 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14699 ;;Total ram usage:        3 bytes
 14700 ;; Hardware stack levels used:    1
 14701 ;; Hardware stack levels required when called:    5
 14702 ;; This function calls:
 14703 ;;		Nothing
 14704 ;; This function is called by:
 14705 ;;		_DimmerLights_Close
 14706 ;;		_DimmerLights_Exceptions
 14707 ;; This function uses a non-reentrant model
 14708 ;;
 14709                           
 14710                           
 14711                           ;psect for function _getDimmerLights_StatusFlag
 14712  1BD3                     _getDimmerLights_StatusFlag:	
 14713                           
 14714                           ;Dimmer_B1.c: 485: char Status = 0;
 14715                           
 14716                           ;incstack = 0
 14717                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 14718  1BD3  0020               	movlb	0	; select bank0
 14719  1BD4  01A1               	clrf	getDimmerLights_StatusFlag@Status
 14720                           
 14721                           ;Dimmer_B1.c: 492: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 14722  1BD5  01A2               	clrf	_getDimmerLights_StatusFlag$2647
 14723  1BD6  0AA2               	incf	_getDimmerLights_StatusFlag$2647,f
 14724  1BD7  0022               	movlb	2	; select bank2
 14725  1BD8  1F3D               	btfss	_DimmerLights1^(0+256),6
 14726  1BD9  1B4C               	btfsc	_DimmerLights2^(0+256),6
 14727  1BDA  2BDD               	goto	l8919
 14728  1BDB  0020               	movlb	0	; select bank0
 14729  1BDC  01A2               	clrf	_getDimmerLights_StatusFlag$2647
 14730  1BDD                     l8919:	
 14731  1BDD  0020               	movlb	0	; select bank0
 14732  1BDE  0822               	movf	_getDimmerLights_StatusFlag$2647,w
 14733  1BDF  00A0               	movwf	??_getDimmerLights_StatusFlag
 14734  1BE0  0820               	movf	??_getDimmerLights_StatusFlag,w
 14735  1BE1  00A1               	movwf	getDimmerLights_StatusFlag@Status
 14736                           
 14737                           ;Dimmer_B1.c: 499: return Status;
 14738  1BE2  0821               	movf	getDimmerLights_StatusFlag@Status,w
 14739  1BE3  0008               	return
 14740  1BE4                     __end_of_getDimmerLights_StatusFlag:	
 14741                           
 14742                           	psect	text93
 14743  1D05                     __ptext93:	
 14744 ;; *************** function _DimmerLights_Initialization *****************
 14745 ;; Defined at:
 14746 ;;		line 343 in file "../src/Dimmer_B1.c"
 14747 ;; Parameters:    Size  Location     Type
 14748 ;;		None
 14749 ;; Auto vars:     Size  Location     Type
 14750 ;;		None
 14751 ;; Return value:  Size  Location     Type
 14752 ;;		None               void
 14753 ;; Registers used:
 14754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14755 ;; Tracked objects:
 14756 ;;		On entry : 0/0
 14757 ;;		On exit  : 0/0
 14758 ;;		Unchanged: 0/0
 14759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14762 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14763 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14764 ;;Total ram usage:        1 bytes
 14765 ;; Hardware stack levels used:    1
 14766 ;; Hardware stack levels required when called:    7
 14767 ;; This function calls:
 14768 ;;		_Dimmer_Initialization
 14769 ;;		_setDimmerLights_Initialization
 14770 ;; This function is called by:
 14771 ;;		_main
 14772 ;; This function uses a non-reentrant model
 14773 ;;
 14774                           
 14775                           
 14776                           ;psect for function _DimmerLights_Initialization
 14777  1D05                     _DimmerLights_Initialization:	
 14778                           
 14779                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 14780                           
 14781                           ;incstack = 0
 14782                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14783  1D05  303D               	movlw	_DimmerLights1& (0+255)
 14784  1D06  0020               	movlb	0	; select bank0
 14785  1D07  00A4               	movwf	??_DimmerLights_Initialization
 14786  1D08  0824               	movf	??_DimmerLights_Initialization,w
 14787  1D09  0021               	movlb	1	; select bank1
 14788  1D0A  00CF               	movwf	_DimmerLights11^(0+128)
 14789                           
 14790                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 14791  1D0B  3001               	movlw	1
 14792  1D0C  3190  2083  319D   	fcall	_setDimmerLights_Initialization
 14793                           
 14794                           ;Dimmer_B1.c: 351: DimmerLights22 = &DimmerLights2;
 14795  1D0F  304C               	movlw	_DimmerLights2& (0+255)
 14796  1D10  0020               	movlb	0	; select bank0
 14797  1D11  00A4               	movwf	??_DimmerLights_Initialization
 14798  1D12  0824               	movf	??_DimmerLights_Initialization,w
 14799  1D13  0021               	movlb	1	; select bank1
 14800  1D14  00D0               	movwf	_DimmerLights22^(0+128)
 14801                           
 14802                           ;Dimmer_B1.c: 352: setDimmerLights_Initialization(2);
 14803  1D15  3002               	movlw	2
 14804  1D16  3190  2083  319D   	fcall	_setDimmerLights_Initialization
 14805                           
 14806                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 14807  1D19  319A  2226         	fcall	_Dimmer_Initialization
 14808  1D1B  0008               	return
 14809  1D1C                     __end_of_DimmerLights_Initialization:	
 14810                           
 14811                           	psect	text94
 14812  1083                     __ptext94:	
 14813 ;; *************** function _setDimmerLights_Initialization *****************
 14814 ;; Defined at:
 14815 ;;		line 366 in file "../src/Dimmer_B1.c"
 14816 ;; Parameters:    Size  Location     Type
 14817 ;;  lights          1    wreg     unsigned char 
 14818 ;; Auto vars:     Size  Location     Type
 14819 ;;  lights          1    3[BANK0 ] unsigned char 
 14820 ;; Return value:  Size  Location     Type
 14821 ;;		None               void
 14822 ;; Registers used:
 14823 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14824 ;; Tracked objects:
 14825 ;;		On entry : 0/0
 14826 ;;		On exit  : 0/0
 14827 ;;		Unchanged: 0/0
 14828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14831 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14832 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14833 ;;Total ram usage:        2 bytes
 14834 ;; Hardware stack levels used:    1
 14835 ;; Hardware stack levels required when called:    6
 14836 ;; This function calls:
 14837 ;;		_DimmerLightsPointSelect
 14838 ;; This function is called by:
 14839 ;;		_DimmerLights_Initialization
 14840 ;; This function uses a non-reentrant model
 14841 ;;
 14842                           
 14843                           
 14844                           ;psect for function _setDimmerLights_Initialization
 14845  1083                     _setDimmerLights_Initialization:	
 14846                           
 14847                           ;incstack = 0
 14848                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14849                           ;setDimmerLights_Initialization@lights stored from wreg
 14850  1083  0020               	movlb	0	; select bank0
 14851  1084  00A3               	movwf	setDimmerLights_Initialization@lights
 14852                           
 14853                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 14854  1085  0823               	movf	setDimmerLights_Initialization@lights,w
 14855  1086  319C  244E         	fcall	_DimmerLightsPointSelect
 14856                           
 14857                           ;Dimmer_B1.c: 369: DimmerLights->Clear = 1;
 14858  1088  0020               	movlb	0	; select bank0
 14859  1089  086B               	movf	_DimmerLights,w
 14860  108A  3E09               	addlw	9
 14861  108B  0086               	movwf	6
 14862  108C  3001               	movlw	1	; select bank2/3
 14863  108D  0087               	movwf	7
 14864  108E  1501               	bsf	1,2
 14865                           
 14866                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 14867  108F  3020               	movlw	32
 14868  1090  00A2               	movwf	??_setDimmerLights_Initialization
 14869  1091  086B               	movf	_DimmerLights,w
 14870  1092  3E05               	addlw	5
 14871  1093  0086               	movwf	6
 14872  1094  3001               	movlw	1	; select bank2/3
 14873  1095  0087               	movwf	7
 14874  1096  0822               	movf	??_setDimmerLights_Initialization,w
 14875  1097  0081               	movwf	1
 14876                           
 14877                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 14878  1098  303C               	movlw	60
 14879  1099  00A2               	movwf	??_setDimmerLights_Initialization
 14880  109A  086B               	movf	_DimmerLights,w
 14881  109B  3E06               	addlw	6
 14882  109C  0086               	movwf	6
 14883  109D  3001               	movlw	1	; select bank2/3
 14884  109E  0087               	movwf	7
 14885  109F  0822               	movf	??_setDimmerLights_Initialization,w
 14886  10A0  0081               	movwf	1
 14887                           
 14888                           ;Dimmer_B1.c: 386: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14889  10A1  086B               	movf	_DimmerLights,w
 14890  10A2  3E06               	addlw	6
 14891  10A3  0086               	movwf	6
 14892  10A4  3001               	movlw	1	; select bank2/3
 14893  10A5  0087               	movwf	7
 14894  10A6  0801               	movf	1,w
 14895  10A7  00A2               	movwf	??_setDimmerLights_Initialization
 14896  10A8  086B               	movf	_DimmerLights,w
 14897  10A9  3E04               	addlw	4
 14898  10AA  0086               	movwf	6
 14899  10AB  3001               	movlw	1	; select bank2/3
 14900  10AC  0087               	movwf	7
 14901  10AD  0822               	movf	??_setDimmerLights_Initialization,w
 14902  10AE  0081               	movwf	1
 14903  10AF  0008               	return
 14904  10B0                     __end_of_setDimmerLights_Initialization:	
 14905                           
 14906                           	psect	text95
 14907  1A26                     __ptext95:	
 14908 ;; *************** function _Dimmer_Initialization *****************
 14909 ;; Defined at:
 14910 ;;		line 795 in file "../src/Dimmer_B1.c"
 14911 ;; Parameters:    Size  Location     Type
 14912 ;;		None
 14913 ;; Auto vars:     Size  Location     Type
 14914 ;;		None
 14915 ;; Return value:  Size  Location     Type
 14916 ;;		None               void
 14917 ;; Registers used:
 14918 ;;		wreg
 14919 ;; Tracked objects:
 14920 ;;		On entry : 0/0
 14921 ;;		On exit  : 0/0
 14922 ;;		Unchanged: 0/0
 14923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14927 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14928 ;;Total ram usage:        1 bytes
 14929 ;; Hardware stack levels used:    1
 14930 ;; Hardware stack levels required when called:    5
 14931 ;; This function calls:
 14932 ;;		Nothing
 14933 ;; This function is called by:
 14934 ;;		_DimmerLights_Initialization
 14935 ;; This function uses a non-reentrant model
 14936 ;;
 14937                           
 14938                           
 14939                           ;psect for function _Dimmer_Initialization
 14940  1A26                     _Dimmer_Initialization:	
 14941                           
 14942                           ;Dimmer_B1.c: 797: Dimmer = &Dimmer1;
 14943                           
 14944                           ;incstack = 0
 14945                           ; Regs used in _Dimmer_Initialization: [wreg]
 14946  1A26  30E6               	movlw	_Dimmer1& (0+255)
 14947  1A27  0020               	movlb	0	; select bank0
 14948  1A28  00A0               	movwf	??_Dimmer_Initialization
 14949  1A29  0820               	movf	??_Dimmer_Initialization,w
 14950  1A2A  00F6               	movwf	_Dimmer
 14951  1A2B  0008               	return
 14952  1A2C                     __end_of_Dimmer_Initialization:	
 14953                           
 14954                           	psect	text96
 14955  1A4F                     __ptext96:	
 14956 ;; *************** function _DelayOff_Main *****************
 14957 ;; Defined at:
 14958 ;;		line 41 in file "../src/DelayOff_B1.c"
 14959 ;; Parameters:    Size  Location     Type
 14960 ;;		None
 14961 ;; Auto vars:     Size  Location     Type
 14962 ;;		None
 14963 ;; Return value:  Size  Location     Type
 14964 ;;		None               void
 14965 ;; Registers used:
 14966 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14967 ;; Tracked objects:
 14968 ;;		On entry : 0/0
 14969 ;;		On exit  : 0/0
 14970 ;;		Unchanged: 0/0
 14971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;Total ram usage:        0 bytes
 14977 ;; Hardware stack levels used:    1
 14978 ;; Hardware stack levels required when called:   10
 14979 ;; This function calls:
 14980 ;;		_DlyOff_Main
 14981 ;; This function is called by:
 14982 ;;		_main
 14983 ;; This function uses a non-reentrant model
 14984 ;;
 14985                           
 14986                           
 14987                           ;psect for function _DelayOff_Main
 14988  1A4F                     _DelayOff_Main:	
 14989                           
 14990                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 14991                           
 14992                           ;incstack = 0
 14993                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14994  1A4F  3001               	movlw	1
 14995  1A50  3188  20B1  319A   	fcall	_DlyOff_Main
 14996                           
 14997                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 14998  1A53  3002               	movlw	2
 14999  1A54  3188  20B1         	fcall	_DlyOff_Main
 15000  1A56  0008               	return
 15001  1A57                     __end_of_DelayOff_Main:	
 15002                           
 15003                           	psect	text97
 15004  08B1                     __ptext97:	
 15005 ;; *************** function _DlyOff_Main *****************
 15006 ;; Defined at:
 15007 ;;		line 62 in file "../src/DelayOff_B1.c"
 15008 ;; Parameters:    Size  Location     Type
 15009 ;;  sw              1    wreg     unsigned char 
 15010 ;; Auto vars:     Size  Location     Type
 15011 ;;  sw              1   68[BANK0 ] unsigned char 
 15012 ;; Return value:  Size  Location     Type
 15013 ;;		None               void
 15014 ;; Registers used:
 15015 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15016 ;; Tracked objects:
 15017 ;;		On entry : 0/0
 15018 ;;		On exit  : 0/0
 15019 ;;		Unchanged: 0/0
 15020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;Total ram usage:        3 bytes
 15026 ;; Hardware stack levels used:    1
 15027 ;; Hardware stack levels required when called:    9
 15028 ;; This function calls:
 15029 ;;		_DelayOffPointSelect
 15030 ;;		_setBuz
 15031 ;;		_setDimmerLights_Switch
 15032 ;;		_setDimmerLights_Trigger
 15033 ;;		_setRFSW_Status
 15034 ;;		_setRF_DimmerLights
 15035 ;;		_setSw_Status
 15036 ;;		_setTxData
 15037 ;; This function is called by:
 15038 ;;		_DelayOff_Main
 15039 ;; This function uses a non-reentrant model
 15040 ;;
 15041                           
 15042                           
 15043                           ;psect for function _DlyOff_Main
 15044  08B1                     _DlyOff_Main:	
 15045                           
 15046                           ;incstack = 0
 15047                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15048                           ;DlyOff_Main@sw stored from wreg
 15049  08B1  0020               	movlb	0	; select bank0
 15050  08B2  00E4               	movwf	DlyOff_Main@sw
 15051                           
 15052                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15053  08B3  0864               	movf	DlyOff_Main@sw,w
 15054  08B4  319C  249C  3188   	fcall	_DelayOffPointSelect
 15055                           
 15056                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15057  08B7  0020               	movlb	0	; select bank0
 15058  08B8  086A               	movf	_DelayOff,w
 15059  08B9  0086               	movwf	6
 15060  08BA  0187               	clrf	7
 15061  08BB  1C81               	btfss	1,1
 15062  08BC  0008               	return
 15063                           
 15064                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15065  08BD  086A               	movf	_DelayOff,w
 15066  08BE  0086               	movwf	6
 15067  08BF  0187               	clrf	7
 15068  08C0  3001               	movlw	1
 15069  08C1  0781               	addwf	1,f
 15070  08C2  3141               	addfsr 1,1
 15071  08C3  1803               	skipnc
 15072  08C4  0A81               	incf	1,f
 15073                           
 15074                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 15075  08C5  086A               	movf	_DelayOff,w
 15076  08C6  0086               	movwf	6
 15077  08C7  0187               	clrf	7
 15078  08C8  3F40               	moviw [0]fsr1
 15079  08C9  00E2               	movwf	??_DlyOff_Main
 15080  08CA  3F41               	moviw [1]fsr1
 15081  08CB  00E3               	movwf	??_DlyOff_Main+1
 15082  08CC  3016               	movlw	22
 15083  08CD  0263               	subwf	??_DlyOff_Main+1,w
 15084  08CE  3012               	movlw	18
 15085  08CF  1903               	skipnz
 15086  08D0  0262               	subwf	??_DlyOff_Main,w
 15087  08D1  1C03               	skipc
 15088  08D2  0008               	return
 15089                           
 15090                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15091  08D3  086A               	movf	_DelayOff,w
 15092  08D4  0086               	movwf	6
 15093  08D5  0187               	clrf	7
 15094  08D6  3000               	movlw	0
 15095  08D7  3FC0               	movwi [0]fsr1
 15096  08D8  3FC1               	movwi [1]fsr1
 15097                           
 15098                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15099  08D9  3001               	movlw	1
 15100  08DA  00E2               	movwf	??_DlyOff_Main
 15101  08DB  086A               	movf	_DelayOff,w
 15102  08DC  0086               	movwf	6
 15103  08DD  0187               	clrf	7
 15104  08DE  0862               	movf	??_DlyOff_Main,w
 15105  08DF  0781               	addwf	1,f
 15106                           
 15107                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15108  08E0  086A               	movf	_DelayOff,w
 15109  08E1  0086               	movwf	6
 15110  08E2  0187               	clrf	7
 15111  08E3  086A               	movf	_DelayOff,w
 15112  08E4  0084               	movwf	4
 15113  08E5  0185               	clrf	5
 15114  08E6  0800               	movf	0,w
 15115  08E7  0201               	subwf	1,w
 15116  08E8  1C03               	skipc
 15117  08E9  0008               	return
 15118                           
 15119                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15120  08EA  086A               	movf	_DelayOff,w
 15121  08EB  0086               	movwf	6
 15122  08EC  0187               	clrf	7
 15123  08ED  0181               	clrf	1
 15124                           
 15125                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15126  08EE  086A               	movf	_DelayOff,w
 15127  08EF  0086               	movwf	6
 15128  08F0  0187               	clrf	7
 15129  08F1  1081               	bcf	1,1
 15130                           
 15131                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 15132  08F2  01A2               	clrf	setSw_Status@command
 15133  08F3  0864               	movf	DlyOff_Main@sw,w
 15134  08F4  319B  2356  3188   	fcall	_setSw_Status
 15135                           
 15136                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 15137  08F7  0020               	movlb	0	; select bank0
 15138  08F8  01A2               	clrf	setRFSW_Status@command
 15139  08F9  0864               	movf	DlyOff_Main@sw,w
 15140  08FA  319B  232C  3188   	fcall	_setRFSW_Status
 15141                           
 15142                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 15143  08FD  0020               	movlb	0	; select bank0
 15144  08FE  01DD               	clrf	setRF_DimmerLights@on
 15145  08FF  0864               	movf	DlyOff_Main@sw,w
 15146  0900  3189  211C  3188   	fcall	_setRF_DimmerLights
 15147                           
 15148                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 15149  0903  0020               	movlb	0	; select bank0
 15150  0904  01A2               	clrf	setDimmerLights_Trigger@command
 15151  0905  0AA2               	incf	setDimmerLights_Trigger@command,f
 15152  0906  0864               	movf	DlyOff_Main@sw,w
 15153  0907  319B  2393  3188   	fcall	_setDimmerLights_Trigger
 15154                           
 15155                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 15156  090A  0020               	movlb	0	; select bank0
 15157  090B  01A2               	clrf	setDimmerLights_Switch@command
 15158  090C  0864               	movf	DlyOff_Main@sw,w
 15159  090D  319B  2383  3188   	fcall	_setDimmerLights_Switch
 15160                           
 15161                           ;DelayOff_B1.c: 78: setTxData();
 15162  0910  318F  2743  3188   	fcall	_setTxData
 15163                           
 15164                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 15165  0913  3064               	movlw	100
 15166  0914  0020               	movlb	0	; select bank0
 15167  0915  00A9               	movwf	setBuz@time
 15168  0916  3000               	movlw	0
 15169  0917  00AA               	movwf	setBuz@time+1
 15170  0918  3001               	movlw	1
 15171  0919  3195  25C9         	fcall	_setBuz
 15172  091B  0008               	return
 15173  091C                     __end_of_DlyOff_Main:	
 15174                           
 15175                           	psect	text98
 15176  0F43                     __ptext98:	
 15177 ;; *************** function _setTxData *****************
 15178 ;; Defined at:
 15179 ;;		line 186 in file "../src/RF_Control_B1.c"
 15180 ;; Parameters:    Size  Location     Type
 15181 ;;		None
 15182 ;; Auto vars:     Size  Location     Type
 15183 ;;  i               1    0        unsigned char 
 15184 ;; Return value:  Size  Location     Type
 15185 ;;		None               void
 15186 ;; Registers used:
 15187 ;;		wreg, fsr1l, fsr1h
 15188 ;; Tracked objects:
 15189 ;;		On entry : 0/0
 15190 ;;		On exit  : 0/0
 15191 ;;		Unchanged: 0/0
 15192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15195 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15196 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15197 ;;Total ram usage:        1 bytes
 15198 ;; Hardware stack levels used:    1
 15199 ;; Hardware stack levels required when called:    5
 15200 ;; This function calls:
 15201 ;;		Nothing
 15202 ;; This function is called by:
 15203 ;;		_DlyOff_Main
 15204 ;;		_setDimmerLights_Adj
 15205 ;;		_setControl_Lights_Table
 15206 ;;		_setRFSW_Control
 15207 ;;		_setRFSW_AdjControl
 15208 ;;		_Sw_DimmerOnFunc
 15209 ;;		_Sw_DimmerOffFunc
 15210 ;; This function uses a non-reentrant model
 15211 ;;
 15212                           
 15213                           
 15214                           ;psect for function _setTxData
 15215  0F43                     _setTxData:	
 15216                           
 15217                           ;RF_Control_B1.c: 187: char i;
 15218                           ;RF_Control_B1.c: 188: if (RF1.Enable == 1) {
 15219                           
 15220                           ;incstack = 0
 15221                           ; Regs used in _setTxData: [wregfsr1]
 15222  0F43  0021               	movlb	1	; select bank1
 15223  0F44  1C3E               	btfss	_RF1^(0+128),0
 15224  0F45  0008               	return
 15225                           
 15226                           ;RF_Control_B1.c: 190: RF1.TransceiveGO = 1;
 15227  0F46  153E               	bsf	_RF1^(0+128),2
 15228                           
 15229                           ;RF_Control_B1.c: 191: RF1.RunTime = 20;
 15230  0F47  3014               	movlw	20
 15231  0F48  00C5               	movwf	(_RF1^(0+128)+7)
 15232  0F49  3000               	movlw	0
 15233  0F4A  00C6               	movwf	(_RF1^(0+128)+8)
 15234                           
 15235                           ;RF_Control_B1.c: 201: RF_Data[0] = 0x63;
 15236  0F4B  3063               	movlw	99
 15237  0F4C  0020               	movlb	0	; select bank0
 15238  0F4D  00A0               	movwf	??_setTxData
 15239  0F4E  0820               	movf	??_setTxData,w
 15240  0F4F  0022               	movlb	2	; select bank2
 15241  0F50  00A0               	movwf	_RF_Data^(0+256)
 15242                           
 15243                           ;RF_Control_B1.c: 202: RF_Data[1] = 0x02;
 15244  0F51  3002               	movlw	2
 15245  0F52  0020               	movlb	0	; select bank0
 15246  0F53  00A0               	movwf	??_setTxData
 15247  0F54  0820               	movf	??_setTxData,w
 15248  0F55  0022               	movlb	2	; select bank2
 15249  0F56  00A1               	movwf	(_RF_Data^(0+256)+1)
 15250                           
 15251                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15252  0F57  0020               	movlb	0	; select bank0
 15253  0F58  086D               	movf	_product,w
 15254  0F59  0086               	movwf	6
 15255  0F5A  3002               	movlw	2	; select bank4/5
 15256  0F5B  0087               	movwf	7
 15257  0F5C  3002               	movlw	2	; select bank4/5
 15258  0F5D  3F42               	moviw [2]fsr1
 15259  0F5E  0022               	movlb	2	; select bank2
 15260  0F5F  00A2               	movwf	(_RF_Data^(0+256)+2)
 15261                           
 15262                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15263  0F60  0020               	movlb	0	; select bank0
 15264  0F61  086D               	movf	_product,w
 15265  0F62  0086               	movwf	6
 15266  0F63  3002               	movlw	2	; select bank4/5
 15267  0F64  0087               	movwf	7
 15268  0F65  3002               	movlw	2	; select bank4/5
 15269  0F66  3F43               	moviw [3]fsr1
 15270  0F67  0022               	movlb	2	; select bank2
 15271  0F68  00A3               	movwf	(_RF_Data^(0+256)+3)
 15272                           
 15273                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15274  0F69  0020               	movlb	0	; select bank0
 15275  0F6A  086D               	movf	_product,w
 15276  0F6B  0086               	movwf	6
 15277  0F6C  3002               	movlw	2	; select bank4/5
 15278  0F6D  0087               	movwf	7
 15279  0F6E  3002               	movlw	2	; select bank4/5
 15280  0F6F  3F44               	moviw [4]fsr1
 15281  0F70  0022               	movlb	2	; select bank2
 15282  0F71  00A4               	movwf	(_RF_Data^(0+256)+4)
 15283                           
 15284                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15285  0F72  0020               	movlb	0	; select bank0
 15286  0F73  086D               	movf	_product,w
 15287  0F74  0086               	movwf	6
 15288  0F75  3002               	movlw	2	; select bank4/5
 15289  0F76  0087               	movwf	7
 15290  0F77  3002               	movlw	2	; select bank4/5
 15291  0F78  3F45               	moviw [5]fsr1
 15292  0F79  0022               	movlb	2	; select bank2
 15293  0F7A  00A5               	movwf	(_RF_Data^(0+256)+5)
 15294                           
 15295                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15296  0F7B  0020               	movlb	0	; select bank0
 15297  0F7C  086D               	movf	_product,w
 15298  0F7D  0086               	movwf	6
 15299  0F7E  3002               	movlw	2	; select bank4/5
 15300  0F7F  0087               	movwf	7
 15301  0F80  3002               	movlw	2	; select bank4/5
 15302  0F81  3F46               	moviw [6]fsr1
 15303  0F82  0022               	movlb	2	; select bank2
 15304  0F83  00A6               	movwf	(_RF_Data^(0+256)+6)
 15305                           
 15306                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15307  0F84  0020               	movlb	0	; select bank0
 15308  0F85  086D               	movf	_product,w
 15309  0F86  0086               	movwf	6
 15310  0F87  3002               	movlw	2	; select bank4/5
 15311  0F88  0087               	movwf	7
 15312  0F89  3002               	movlw	2	; select bank4/5
 15313  0F8A  3F47               	moviw [7]fsr1
 15314  0F8B  0022               	movlb	2	; select bank2
 15315  0F8C  00A7               	movwf	(_RF_Data^(0+256)+7)
 15316                           
 15317                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15318  0F8D  0020               	movlb	0	; select bank0
 15319  0F8E  086D               	movf	_product,w
 15320  0F8F  0086               	movwf	6
 15321  0F90  3002               	movlw	2	; select bank4/5
 15322  0F91  0087               	movwf	7
 15323  0F92  3002               	movlw	2	; select bank4/5
 15324  0F93  3F48               	moviw [8]fsr1
 15325  0F94  0022               	movlb	2	; select bank2
 15326  0F95  00A8               	movwf	(_RF_Data^(0+256)+8)
 15327                           
 15328                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15329  0F96  0020               	movlb	0	; select bank0
 15330  0F97  086D               	movf	_product,w
 15331  0F98  0086               	movwf	6
 15332  0F99  3002               	movlw	2	; select bank4/5
 15333  0F9A  0087               	movwf	7
 15334  0F9B  3002               	movlw	2	; select bank4/5
 15335  0F9C  3F49               	moviw [9]fsr1
 15336  0F9D  0022               	movlb	2	; select bank2
 15337  0F9E  00A9               	movwf	(_RF_Data^(0+256)+9)
 15338                           
 15339                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15340  0F9F  0020               	movlb	0	; select bank0
 15341  0FA0  086D               	movf	_product,w
 15342  0FA1  0086               	movwf	6
 15343  0FA2  3002               	movlw	2	; select bank4/5
 15344  0FA3  0087               	movwf	7
 15345  0FA4  3002               	movlw	2	; select bank4/5
 15346  0FA5  3F4A               	moviw [10]fsr1
 15347  0FA6  0022               	movlb	2	; select bank2
 15348  0FA7  00AA               	movwf	(_RF_Data^(0+256)+10)
 15349                           
 15350                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15351  0FA8  0020               	movlb	0	; select bank0
 15352  0FA9  086D               	movf	_product,w
 15353  0FAA  0086               	movwf	6
 15354  0FAB  3002               	movlw	2	; select bank4/5
 15355  0FAC  0087               	movwf	7
 15356  0FAD  3002               	movlw	2	; select bank4/5
 15357  0FAE  3F4B               	moviw [11]fsr1
 15358  0FAF  0022               	movlb	2	; select bank2
 15359  0FB0  00AB               	movwf	(_RF_Data^(0+256)+11)
 15360                           
 15361                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15362  0FB1  0020               	movlb	0	; select bank0
 15363  0FB2  086D               	movf	_product,w
 15364  0FB3  0086               	movwf	6
 15365  0FB4  3002               	movlw	2	; select bank4/5
 15366  0FB5  0087               	movwf	7
 15367  0FB6  3002               	movlw	2	; select bank4/5
 15368  0FB7  3F4C               	moviw [12]fsr1
 15369  0FB8  0022               	movlb	2	; select bank2
 15370  0FB9  00AC               	movwf	(_RF_Data^(0+256)+12)
 15371                           
 15372                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15373  0FBA  0020               	movlb	0	; select bank0
 15374  0FBB  086D               	movf	_product,w
 15375  0FBC  0086               	movwf	6
 15376  0FBD  3002               	movlw	2	; select bank4/5
 15377  0FBE  0087               	movwf	7
 15378  0FBF  3002               	movlw	2	; select bank4/5
 15379  0FC0  3F4D               	moviw [13]fsr1
 15380  0FC1  0022               	movlb	2	; select bank2
 15381  0FC2  00AD               	movwf	(_RF_Data^(0+256)+13)
 15382                           
 15383                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15384  0FC3  0020               	movlb	0	; select bank0
 15385  0FC4  086D               	movf	_product,w
 15386  0FC5  0086               	movwf	6
 15387  0FC6  3002               	movlw	2	; select bank4/5
 15388  0FC7  0087               	movwf	7
 15389  0FC8  3002               	movlw	2	; select bank4/5
 15390  0FC9  3F4E               	moviw [14]fsr1
 15391  0FCA  0022               	movlb	2	; select bank2
 15392  0FCB  00AE               	movwf	(_RF_Data^(0+256)+14)
 15393                           
 15394                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15395  0FCC  0020               	movlb	0	; select bank0
 15396  0FCD  086D               	movf	_product,w
 15397  0FCE  0086               	movwf	6
 15398  0FCF  3002               	movlw	2	; select bank4/5
 15399  0FD0  0087               	movwf	7
 15400  0FD1  3002               	movlw	2	; select bank4/5
 15401  0FD2  3F4F               	moviw [15]fsr1
 15402  0FD3  0022               	movlb	2	; select bank2
 15403  0FD4  00AF               	movwf	(_RF_Data^(0+256)+15)
 15404                           
 15405                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15406  0FD5  0020               	movlb	0	; select bank0
 15407  0FD6  086D               	movf	_product,w
 15408  0FD7  0086               	movwf	6
 15409  0FD8  3002               	movlw	2	; select bank4/5
 15410  0FD9  0087               	movwf	7
 15411  0FDA  3002               	movlw	2	; select bank4/5
 15412  0FDB  3F50               	moviw [16]fsr1
 15413  0FDC  0022               	movlb	2	; select bank2
 15414  0FDD  00B0               	movwf	(_RF_Data^(0+256)+16)
 15415                           
 15416                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15417  0FDE  0020               	movlb	0	; select bank0
 15418  0FDF  086D               	movf	_product,w
 15419  0FE0  0086               	movwf	6
 15420  0FE1  3002               	movlw	2	; select bank4/5
 15421  0FE2  0087               	movwf	7
 15422  0FE3  3002               	movlw	2	; select bank4/5
 15423  0FE4  3F51               	moviw [17]fsr1
 15424  0FE5  0022               	movlb	2	; select bank2
 15425  0FE6  00B1               	movwf	(_RF_Data^(0+256)+17)
 15426                           
 15427                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15428  0FE7  0020               	movlb	0	; select bank0
 15429  0FE8  086D               	movf	_product,w
 15430  0FE9  0086               	movwf	6
 15431  0FEA  3002               	movlw	2	; select bank4/5
 15432  0FEB  0087               	movwf	7
 15433  0FEC  3002               	movlw	2	; select bank4/5
 15434  0FED  3F52               	moviw [18]fsr1
 15435  0FEE  0022               	movlb	2	; select bank2
 15436  0FEF  00B2               	movwf	(_RF_Data^(0+256)+18)
 15437                           
 15438                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15439  0FF0  0020               	movlb	0	; select bank0
 15440  0FF1  086D               	movf	_product,w
 15441  0FF2  0086               	movwf	6
 15442  0FF3  3002               	movlw	2	; select bank4/5
 15443  0FF4  0087               	movwf	7
 15444  0FF5  3002               	movlw	2	; select bank4/5
 15445  0FF6  3F53               	moviw [19]fsr1
 15446  0FF7  0022               	movlb	2	; select bank2
 15447  0FF8  00B3               	movwf	(_RF_Data^(0+256)+19)
 15448                           
 15449                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15450  0FF9  30D2               	movlw	210
 15451  0FFA  0020               	movlb	0	; select bank0
 15452  0FFB  00A0               	movwf	??_setTxData
 15453  0FFC  0820               	movf	??_setTxData,w
 15454  0FFD  0022               	movlb	2	; select bank2
 15455  0FFE  00B4               	movwf	(_RF_Data^(0+256)+20)
 15456  0FFF  0008               	return
 15457  1000                     __end_of_setTxData:	
 15458                           
 15459                           	psect	text99
 15460  1B56                     __ptext99:	
 15461 ;; *************** function _setSw_Status *****************
 15462 ;; Defined at:
 15463 ;;		line 111 in file "../src/Switch_B1.c"
 15464 ;; Parameters:    Size  Location     Type
 15465 ;;  sw              1    wreg     unsigned char 
 15466 ;;  command         1    2[BANK0 ] unsigned char 
 15467 ;; Auto vars:     Size  Location     Type
 15468 ;;  sw              1    3[BANK0 ] unsigned char 
 15469 ;; Return value:  Size  Location     Type
 15470 ;;		None               void
 15471 ;; Registers used:
 15472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15473 ;; Tracked objects:
 15474 ;;		On entry : 0/0
 15475 ;;		On exit  : 0/0
 15476 ;;		Unchanged: 0/0
 15477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15478 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15479 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15481 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15482 ;;Total ram usage:        2 bytes
 15483 ;; Hardware stack levels used:    1
 15484 ;; Hardware stack levels required when called:    6
 15485 ;; This function calls:
 15486 ;;		_SwPointSelect
 15487 ;; This function is called by:
 15488 ;;		_DlyOff_Main
 15489 ;;		_setDimmerLights_ERROR
 15490 ;;		_setControl_Lights_Table
 15491 ;;		_setRFSW_Control
 15492 ;; This function uses a non-reentrant model
 15493 ;;
 15494                           
 15495                           
 15496                           ;psect for function _setSw_Status
 15497  1B56                     _setSw_Status:	
 15498                           
 15499                           ;incstack = 0
 15500                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15501                           ;setSw_Status@sw stored from wreg
 15502  1B56  0020               	movlb	0	; select bank0
 15503  1B57  00A3               	movwf	setSw_Status@sw
 15504                           
 15505                           ;Switch_B1.c: 112: SwPointSelect(sw);
 15506  1B58  0823               	movf	setSw_Status@sw,w
 15507  1B59  319C  24B0         	fcall	_SwPointSelect
 15508                           
 15509                           ;Switch_B1.c: 113: Sw->Status = command;
 15510  1B5B  0020               	movlb	0	; select bank0
 15511  1B5C  086C               	movf	_Sw,w
 15512  1B5D  0086               	movwf	6
 15513  1B5E  3001               	movlw	1	; select bank2/3
 15514  1B5F  0087               	movwf	7
 15515  1B60  0822               	movf	setSw_Status@command,w
 15516  1B61  1301               	bcf	1,6
 15517  1B62  1D03               	skipz
 15518  1B63  1701               	bsf	1,6
 15519  1B64  0008               	return
 15520  1B65                     __end_of_setSw_Status:	
 15521                           
 15522                           	psect	text100
 15523  1CB0                     __ptext100:	
 15524 ;; *************** function _SwPointSelect *****************
 15525 ;; Defined at:
 15526 ;;		line 21 in file "../src/Switch_B1.c"
 15527 ;; Parameters:    Size  Location     Type
 15528 ;;  sw              1    wreg     unsigned char 
 15529 ;; Auto vars:     Size  Location     Type
 15530 ;;  sw              1    1[BANK0 ] unsigned char 
 15531 ;; Return value:  Size  Location     Type
 15532 ;;		None               void
 15533 ;; Registers used:
 15534 ;;		wreg
 15535 ;; Tracked objects:
 15536 ;;		On entry : 0/0
 15537 ;;		On exit  : 0/0
 15538 ;;		Unchanged: 0/0
 15539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15541 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15542 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15543 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15544 ;;Total ram usage:        2 bytes
 15545 ;; Hardware stack levels used:    1
 15546 ;; Hardware stack levels required when called:    5
 15547 ;; This function calls:
 15548 ;;		Nothing
 15549 ;; This function is called by:
 15550 ;;		_setSw_Enable
 15551 ;;		_setSw_Status
 15552 ;;		_setSw_Main
 15553 ;;		_Sw_Detect
 15554 ;; This function uses a non-reentrant model
 15555 ;;
 15556                           
 15557                           
 15558                           ;psect for function _SwPointSelect
 15559  1CB0                     _SwPointSelect:	
 15560                           
 15561                           ;incstack = 0
 15562                           ; Regs used in _SwPointSelect: [wreg]
 15563                           ;SwPointSelect@sw stored from wreg
 15564  1CB0  0020               	movlb	0	; select bank0
 15565  1CB1  00A1               	movwf	SwPointSelect@sw
 15566                           
 15567                           ;Switch_B1.c: 24: if (sw == 1) {
 15568  1CB2  0821               	movf	SwPointSelect@sw,w
 15569  1CB3  3A01               	xorlw	1
 15570  1CB4  1D03               	skipz
 15571  1CB5  2CBB               	goto	l8583
 15572                           
 15573                           ;Switch_B1.c: 25: Sw = &Sw1;
 15574  1CB6  305B               	movlw	_Sw1& (0+255)
 15575  1CB7  00A0               	movwf	??_SwPointSelect
 15576  1CB8  0820               	movf	??_SwPointSelect,w
 15577  1CB9  00EC               	movwf	_Sw
 15578                           
 15579                           ;Switch_B1.c: 26: }
 15580  1CBA  0008               	return
 15581  1CBB                     l8583:	
 15582                           
 15583                           ;Switch_B1.c: 29: else if (sw == 2) {
 15584  1CBB  0821               	movf	SwPointSelect@sw,w
 15585  1CBC  3A02               	xorlw	2
 15586  1CBD  1D03               	skipz
 15587  1CBE  0008               	return
 15588                           
 15589                           ;Switch_B1.c: 30: Sw = &Sw2;
 15590  1CBF  30E6               	movlw	_Sw2& (0+255)
 15591  1CC0  00A0               	movwf	??_SwPointSelect
 15592  1CC1  0820               	movf	??_SwPointSelect,w
 15593  1CC2  00EC               	movwf	_Sw
 15594  1CC3  0008               	return
 15595  1CC4                     __end_of_SwPointSelect:	
 15596                           
 15597                           	psect	text101
 15598  091C                     __ptext101:	
 15599 ;; *************** function _setRF_DimmerLights *****************
 15600 ;; Defined at:
 15601 ;;		line 452 in file "../src/RF_Control_B1.c"
 15602 ;; Parameters:    Size  Location     Type
 15603 ;;  lights          1    wreg     unsigned char 
 15604 ;;  on              1   61[BANK0 ] unsigned char 
 15605 ;; Auto vars:     Size  Location     Type
 15606 ;;  lights          1   65[BANK0 ] unsigned char 
 15607 ;;  status          1   64[BANK0 ] unsigned char 
 15608 ;; Return value:  Size  Location     Type
 15609 ;;		None               void
 15610 ;; Registers used:
 15611 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15612 ;; Tracked objects:
 15613 ;;		On entry : 0/0
 15614 ;;		On exit  : 0/0
 15615 ;;		Unchanged: 0/0
 15616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15617 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15618 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15619 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15620 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15621 ;;Total ram usage:        5 bytes
 15622 ;; Hardware stack levels used:    1
 15623 ;; Hardware stack levels required when called:    8
 15624 ;; This function calls:
 15625 ;;		_setPercentValue
 15626 ;; This function is called by:
 15627 ;;		_DlyOff_Main
 15628 ;;		_setDimmerLights_Adj
 15629 ;;		_setRFSW_Control
 15630 ;;		_Sw_DimmerOnFunc
 15631 ;;		_Sw_DimmerOffFunc
 15632 ;; This function uses a non-reentrant model
 15633 ;;
 15634                           
 15635                           
 15636                           ;psect for function _setRF_DimmerLights
 15637  091C                     _setRF_DimmerLights:	
 15638                           
 15639                           ;incstack = 0
 15640                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15641                           ;setRF_DimmerLights@lights stored from wreg
 15642  091C  0020               	movlb	0	; select bank0
 15643  091D  00E1               	movwf	setRF_DimmerLights@lights
 15644                           
 15645                           ;RF_Control_B1.c: 453: char status;
 15646                           ;RF_Control_B1.c: 454: status = 1;
 15647  091E  01E0               	clrf	setRF_DimmerLights@status
 15648  091F  0AE0               	incf	setRF_DimmerLights@status,f
 15649                           
 15650                           ;RF_Control_B1.c: 455: status <<= (lights - 1);
 15651  0920  0861               	movf	setRF_DimmerLights@lights,w
 15652  0921  3EFF               	addlw	-1
 15653  0922  0A89               	incf	9,f
 15654  0923  2926               	goto	u8770
 15655  0924                     u8775:	
 15656  0924  1003               	clrc
 15657  0925  0DE0               	rlf	setRF_DimmerLights@status,f
 15658  0926                     u8770:	
 15659  0926  3EFF               	addlw	-1
 15660  0927  1D03               	skipz
 15661  0928  2924               	goto	u8775
 15662                           
 15663                           ;RF_Control_B1.c: 456: product->Data[11]=lights;
 15664  0929  0861               	movf	setRF_DimmerLights@lights,w
 15665  092A  00DE               	movwf	??_setRF_DimmerLights
 15666  092B  086D               	movf	_product,w
 15667  092C  3E0B               	addlw	11
 15668  092D  0086               	movwf	6
 15669  092E  3002               	movlw	2	; select bank4/5
 15670  092F  0087               	movwf	7
 15671  0930  085E               	movf	??_setRF_DimmerLights,w
 15672  0931  0081               	movwf	1
 15673                           
 15674                           ;RF_Control_B1.c: 459: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15675  0932  3020               	movlw	32
 15676  0933  3188  2002  3189   	fcall	_setPercentValue
 15677  0936  0020               	movlb	0	; select bank0
 15678  0937  00DE               	movwf	??_setRF_DimmerLights
 15679  0938  0861               	movf	setRF_DimmerLights@lights,w
 15680  0939  3E14               	addlw	20
 15681  093A  076D               	addwf	_product,w
 15682  093B  00DF               	movwf	??_setRF_DimmerLights+1
 15683  093C  085F               	movf	??_setRF_DimmerLights+1,w
 15684  093D  0086               	movwf	6
 15685  093E  3002               	movlw	2	; select bank4/5
 15686  093F  0087               	movwf	7
 15687  0940  085E               	movf	??_setRF_DimmerLights,w
 15688  0941  0081               	movwf	1
 15689                           
 15690                           ;RF_Control_B1.c: 462: product->Data[9]=product->Data[20 + lights];
 15691  0942  0861               	movf	setRF_DimmerLights@lights,w
 15692  0943  3E14               	addlw	20
 15693  0944  076D               	addwf	_product,w
 15694  0945  00DE               	movwf	??_setRF_DimmerLights
 15695  0946  085E               	movf	??_setRF_DimmerLights,w
 15696  0947  0086               	movwf	6
 15697  0948  3002               	movlw	2	; select bank4/5
 15698  0949  0087               	movwf	7
 15699  094A  0801               	movf	1,w
 15700  094B  00DF               	movwf	??_setRF_DimmerLights+1
 15701  094C  086D               	movf	_product,w
 15702  094D  3E09               	addlw	9
 15703  094E  0086               	movwf	6
 15704  094F  3002               	movlw	2	; select bank4/5
 15705  0950  0087               	movwf	7
 15706  0951  085F               	movf	??_setRF_DimmerLights+1,w
 15707  0952  0081               	movwf	1
 15708                           
 15709                           ;RF_Control_B1.c: 463: product->Data[17]=product->Data[26 + lights];
 15710  0953  0861               	movf	setRF_DimmerLights@lights,w
 15711  0954  3E1A               	addlw	26
 15712  0955  076D               	addwf	_product,w
 15713  0956  00DE               	movwf	??_setRF_DimmerLights
 15714  0957  085E               	movf	??_setRF_DimmerLights,w
 15715  0958  0086               	movwf	6
 15716  0959  3002               	movlw	2	; select bank4/5
 15717  095A  0087               	movwf	7
 15718  095B  0801               	movf	1,w
 15719  095C  00DF               	movwf	??_setRF_DimmerLights+1
 15720  095D  086D               	movf	_product,w
 15721  095E  3E11               	addlw	17
 15722  095F  0086               	movwf	6
 15723  0960  3002               	movlw	2	; select bank4/5
 15724  0961  0087               	movwf	7
 15725  0962  085F               	movf	??_setRF_DimmerLights+1,w
 15726  0963  0081               	movwf	1
 15727                           
 15728                           ;RF_Control_B1.c: 464: if (on == 1) {
 15729  0964  085D               	movf	setRF_DimmerLights@on,w
 15730  0965  3A01               	xorlw	1
 15731  0966  1D03               	skipz
 15732  0967  2978               	goto	l8683
 15733                           
 15734                           ;RF_Control_B1.c: 465: product->Data[15]=(product->Data[15] | status);
 15735  0968  086D               	movf	_product,w
 15736  0969  3E0F               	addlw	15
 15737  096A  0086               	movwf	6
 15738  096B  3002               	movlw	2	; select bank4/5
 15739  096C  0087               	movwf	7
 15740  096D  0801               	movf	1,w
 15741  096E  0460               	iorwf	setRF_DimmerLights@status,w
 15742  096F  00DE               	movwf	??_setRF_DimmerLights
 15743  0970  086D               	movf	_product,w
 15744  0971  3E0F               	addlw	15
 15745  0972  0086               	movwf	6
 15746  0973  3002               	movlw	2	; select bank4/5
 15747  0974  0087               	movwf	7
 15748  0975  085E               	movf	??_setRF_DimmerLights,w
 15749  0976  0081               	movwf	1
 15750                           
 15751                           ;RF_Control_B1.c: 466: } else {
 15752  0977  0008               	return
 15753  0978                     l8683:	
 15754                           
 15755                           ;RF_Control_B1.c: 467: product->Data[15]=(product->Data[15]&(~status));
 15756  0978  086D               	movf	_product,w
 15757  0979  3E0F               	addlw	15
 15758  097A  0086               	movwf	6
 15759  097B  3002               	movlw	2	; select bank4/5
 15760  097C  0087               	movwf	7
 15761  097D  0960               	comf	setRF_DimmerLights@status,w
 15762  097E  0501               	andwf	1,w
 15763  097F  00DE               	movwf	??_setRF_DimmerLights
 15764  0980  086D               	movf	_product,w
 15765  0981  3E0F               	addlw	15
 15766  0982  0086               	movwf	6
 15767  0983  3002               	movlw	2	; select bank4/5
 15768  0984  0087               	movwf	7
 15769  0985  085E               	movf	??_setRF_DimmerLights,w
 15770  0986  0081               	movwf	1
 15771  0987  0008               	return
 15772  0988                     __end_of_setRF_DimmerLights:	
 15773                           
 15774                           	psect	text102
 15775  0802                     __ptext102:	
 15776 ;; *************** function _setPercentValue *****************
 15777 ;; Defined at:
 15778 ;;		line 777 in file "../src/Dimmer_B1.c"
 15779 ;; Parameters:    Size  Location     Type
 15780 ;;  value           1    wreg     unsigned char 
 15781 ;; Auto vars:     Size  Location     Type
 15782 ;;  value           1   57[BANK0 ] unsigned char 
 15783 ;;  i               3   58[BANK0 ] float 
 15784 ;; Return value:  Size  Location     Type
 15785 ;;                  1    wreg      unsigned char 
 15786 ;; Registers used:
 15787 ;;		wreg, status,2, status,0, pclath, cstack
 15788 ;; Tracked objects:
 15789 ;;		On entry : 0/0
 15790 ;;		On exit  : 0/0
 15791 ;;		Unchanged: 0/0
 15792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15794 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15796 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15797 ;;Total ram usage:        4 bytes
 15798 ;; Hardware stack levels used:    1
 15799 ;; Hardware stack levels required when called:    7
 15800 ;; This function calls:
 15801 ;;		___awtoft
 15802 ;;		___ftdiv
 15803 ;;		___fttol
 15804 ;; This function is called by:
 15805 ;;		_Flash_Memory_Initialization
 15806 ;;		_setRF_DimmerLights
 15807 ;; This function uses a non-reentrant model
 15808 ;;
 15809                           
 15810                           
 15811                           ;psect for function _setPercentValue
 15812  0802                     _setPercentValue:	
 15813                           
 15814                           ;incstack = 0
 15815                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15816                           ;setPercentValue@value stored from wreg
 15817  0802  0020               	movlb	0	; select bank0
 15818  0803  00D9               	movwf	setPercentValue@value
 15819                           
 15820                           ;Dimmer_B1.c: 779: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15821  0804  3000               	movlw	0
 15822  0805  00DA               	movwf	setPercentValue@i
 15823  0806  30E0               	movlw	224
 15824  0807  00DB               	movwf	setPercentValue@i+1
 15825  0808  3041               	movlw	65
 15826  0809  00DC               	movwf	setPercentValue@i+2
 15827                           
 15828                           ;Dimmer_B1.c: 780: i /= 100;
 15829  080A  3000               	movlw	0
 15830  080B  00AE               	movwf	___ftdiv@f2
 15831  080C  30C8               	movlw	200
 15832  080D  00AF               	movwf	___ftdiv@f2+1
 15833  080E  3042               	movlw	66
 15834  080F  00B0               	movwf	___ftdiv@f2+2
 15835  0810  085A               	movf	setPercentValue@i,w
 15836  0811  00B1               	movwf	___ftdiv@f1
 15837  0812  085B               	movf	setPercentValue@i+1,w
 15838  0813  00B2               	movwf	___ftdiv@f1+1
 15839  0814  085C               	movf	setPercentValue@i+2,w
 15840  0815  00B3               	movwf	___ftdiv@f1+2
 15841  0816  318D  25E6  3188   	fcall	___ftdiv
 15842  0819  0020               	movlb	0	; select bank0
 15843  081A  082E               	movf	?___ftdiv,w
 15844  081B  00DA               	movwf	setPercentValue@i
 15845  081C  082F               	movf	?___ftdiv+1,w
 15846  081D  00DB               	movwf	setPercentValue@i+1
 15847  081E  0830               	movf	?___ftdiv+2,w
 15848  081F  00DC               	movwf	setPercentValue@i+2
 15849                           
 15850                           ;Dimmer_B1.c: 781: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15851  0820  0859               	movf	setPercentValue@value,w
 15852  0821  3EE0               	addlw	224
 15853  0822  00A8               	movwf	___awtoft@c
 15854  0823  30FF               	movlw	255
 15855  0824  1803               	skipnc
 15856  0825  3000               	movlw	0
 15857  0826  00A9               	movwf	___awtoft@c+1
 15858  0827  319E  26AA  3188   	fcall	___awtoft
 15859  082A  0020               	movlb	0	; select bank0
 15860  082B  0828               	movf	?___awtoft,w
 15861  082C  00B1               	movwf	___ftdiv@f1
 15862  082D  0829               	movf	?___awtoft+1,w
 15863  082E  00B2               	movwf	___ftdiv@f1+1
 15864  082F  082A               	movf	?___awtoft+2,w
 15865  0830  00B3               	movwf	___ftdiv@f1+2
 15866  0831  085A               	movf	setPercentValue@i,w
 15867  0832  00AE               	movwf	___ftdiv@f2
 15868  0833  085B               	movf	setPercentValue@i+1,w
 15869  0834  00AF               	movwf	___ftdiv@f2+1
 15870  0835  085C               	movf	setPercentValue@i+2,w
 15871  0836  00B0               	movwf	___ftdiv@f2+2
 15872  0837  318D  25E6  3188   	fcall	___ftdiv
 15873  083A  0020               	movlb	0	; select bank0
 15874  083B  082E               	movf	?___ftdiv,w
 15875  083C  00CB               	movwf	___fttol@f1
 15876  083D  082F               	movf	?___ftdiv+1,w
 15877  083E  00CC               	movwf	___fttol@f1+1
 15878  083F  0830               	movf	?___ftdiv+2,w
 15879  0840  00CD               	movwf	___fttol@f1+2
 15880  0841  318C  244C         	fcall	___fttol
 15881  0843  0020               	movlb	0	; select bank0
 15882  0844  034B               	decf	?___fttol,w
 15883  0845  3AFF               	xorlw	255
 15884  0846  3E64               	addlw	100
 15885  0847  0008               	return
 15886  0848                     __end_of_setPercentValue:	
 15887                           
 15888                           	psect	text103
 15889  0C4C                     __ptext103:	
 15890 ;; *************** function ___fttol *****************
 15891 ;; Defined at:
 15892 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15893 ;; Parameters:    Size  Location     Type
 15894 ;;  f1              3   43[BANK0 ] float 
 15895 ;; Auto vars:     Size  Location     Type
 15896 ;;  lval            4   52[BANK0 ] unsigned long 
 15897 ;;  exp1            1   56[BANK0 ] unsigned char 
 15898 ;;  sign1           1   51[BANK0 ] unsigned char 
 15899 ;; Return value:  Size  Location     Type
 15900 ;;                  4   43[BANK0 ] long 
 15901 ;; Registers used:
 15902 ;;		wreg, status,2, status,0
 15903 ;; Tracked objects:
 15904 ;;		On entry : 0/0
 15905 ;;		On exit  : 0/0
 15906 ;;		Unchanged: 0/0
 15907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15908 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15909 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15910 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;Total ram usage:       14 bytes
 15913 ;; Hardware stack levels used:    1
 15914 ;; Hardware stack levels required when called:    5
 15915 ;; This function calls:
 15916 ;;		Nothing
 15917 ;; This function is called by:
 15918 ;;		_getPercentValue
 15919 ;;		_setPercentValue
 15920 ;; This function uses a non-reentrant model
 15921 ;;
 15922                           
 15923                           
 15924                           ;psect for function ___fttol
 15925  0C4C                     ___fttol:	
 15926                           
 15927                           ;incstack = 0
 15928                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15929  0C4C  0020               	movlb	0	; select bank0
 15930  0C4D  084B               	movf	___fttol@f1,w
 15931  0C4E  00CF               	movwf	??___fttol
 15932  0C4F  084C               	movf	___fttol@f1+1,w
 15933  0C50  00D0               	movwf	??___fttol+1
 15934  0C51  084D               	movf	___fttol@f1+2,w
 15935  0C52  00D1               	movwf	??___fttol+2
 15936  0C53  1003               	clrc
 15937  0C54  0D50               	rlf	??___fttol+1,w
 15938  0C55  0D51               	rlf	??___fttol+2,w
 15939  0C56  00D2               	movwf	??___fttol+3
 15940  0C57  0852               	movf	??___fttol+3,w
 15941  0C58  00D8               	movwf	___fttol@exp1
 15942  0C59  08D8               	movf	___fttol@exp1,f
 15943  0C5A  1D03               	skipz
 15944  0C5B  2C65               	goto	l6077
 15945  0C5C  3000               	movlw	0
 15946  0C5D  00CE               	movwf	?___fttol+3
 15947  0C5E  3000               	movlw	0
 15948  0C5F  00CD               	movwf	?___fttol+2
 15949  0C60  3000               	movlw	0
 15950  0C61  00CC               	movwf	?___fttol+1
 15951  0C62  3000               	movlw	0
 15952  0C63  00CB               	movwf	?___fttol
 15953  0C64  0008               	return
 15954  0C65                     l6077:	
 15955  0C65  084B               	movf	___fttol@f1,w
 15956  0C66  00CF               	movwf	??___fttol
 15957  0C67  084C               	movf	___fttol@f1+1,w
 15958  0C68  00D0               	movwf	??___fttol+1
 15959  0C69  084D               	movf	___fttol@f1+2,w
 15960  0C6A  00D1               	movwf	??___fttol+2
 15961  0C6B  3017               	movlw	23
 15962  0C6C                     u4805:	
 15963  0C6C  36D1               	lsrf	??___fttol+2,f
 15964  0C6D  0CD0               	rrf	??___fttol+1,f
 15965  0C6E  0CCF               	rrf	??___fttol,f
 15966  0C6F  0B89               	decfsz	9,f
 15967  0C70  2C6C               	goto	u4805
 15968  0C71  084F               	movf	??___fttol,w
 15969  0C72  00D2               	movwf	??___fttol+3
 15970  0C73  0852               	movf	??___fttol+3,w
 15971  0C74  00D3               	movwf	___fttol@sign1
 15972  0C75  17CC               	bsf	___fttol@f1+1,7
 15973  0C76  30FF               	movlw	255
 15974  0C77  05CB               	andwf	___fttol@f1,f
 15975  0C78  30FF               	movlw	255
 15976  0C79  05CC               	andwf	___fttol@f1+1,f
 15977  0C7A  3000               	movlw	0
 15978  0C7B  05CD               	andwf	___fttol@f1+2,f
 15979  0C7C  084B               	movf	___fttol@f1,w
 15980  0C7D  00D4               	movwf	___fttol@lval
 15981  0C7E  084C               	movf	___fttol@f1+1,w
 15982  0C7F  00D5               	movwf	___fttol@lval+1
 15983  0C80  084D               	movf	___fttol@f1+2,w
 15984  0C81  00D6               	movwf	___fttol@lval+2
 15985  0C82  01D7               	clrf	___fttol@lval+3
 15986  0C83  308E               	movlw	142
 15987  0C84  02D8               	subwf	___fttol@exp1,f
 15988  0C85  1FD8               	btfss	___fttol@exp1,7
 15989  0C86  2CA3               	goto	l6097
 15990  0C87  0858               	movf	___fttol@exp1,w
 15991  0C88  3A80               	xorlw	128
 15992  0C89  3E8F               	addlw	143
 15993  0C8A  1803               	skipnc
 15994  0C8B  2C95               	goto	l6095
 15995  0C8C  3000               	movlw	0
 15996  0C8D  00CE               	movwf	?___fttol+3
 15997  0C8E  3000               	movlw	0
 15998  0C8F  00CD               	movwf	?___fttol+2
 15999  0C90  3000               	movlw	0
 16000  0C91  00CC               	movwf	?___fttol+1
 16001  0C92  3000               	movlw	0
 16002  0C93  00CB               	movwf	?___fttol
 16003  0C94  0008               	return
 16004  0C95                     l6095:	
 16005  0C95  3001               	movlw	1
 16006  0C96                     u4835:	
 16007  0C96  36D7               	lsrf	___fttol@lval+3,f
 16008  0C97  0CD6               	rrf	___fttol@lval+2,f
 16009  0C98  0CD5               	rrf	___fttol@lval+1,f
 16010  0C99  0CD4               	rrf	___fttol@lval,f
 16011  0C9A  0B89               	decfsz	9,f
 16012  0C9B  2C96               	goto	u4835
 16013  0C9C  3001               	movlw	1
 16014  0C9D  00CF               	movwf	??___fttol
 16015  0C9E  084F               	movf	??___fttol,w
 16016  0C9F  07D8               	addwf	___fttol@exp1,f
 16017  0CA0  1903               	btfsc	3,2
 16018  0CA1  2CBC               	goto	l6107
 16019  0CA2  2C95               	goto	l6095
 16020  0CA3                     l6097:	
 16021  0CA3  3018               	movlw	24
 16022  0CA4  0258               	subwf	___fttol@exp1,w
 16023  0CA5  1C03               	skipc
 16024  0CA6  2CB9               	goto	l6105
 16025  0CA7  3000               	movlw	0
 16026  0CA8  00CE               	movwf	?___fttol+3
 16027  0CA9  3000               	movlw	0
 16028  0CAA  00CD               	movwf	?___fttol+2
 16029  0CAB  3000               	movlw	0
 16030  0CAC  00CC               	movwf	?___fttol+1
 16031  0CAD  3000               	movlw	0
 16032  0CAE  00CB               	movwf	?___fttol
 16033  0CAF  0008               	return
 16034  0CB0                     l6103:	
 16035  0CB0  3001               	movlw	1
 16036  0CB1                     u4865:	
 16037  0CB1  35D4               	lslf	___fttol@lval,f
 16038  0CB2  0DD5               	rlf	___fttol@lval+1,f
 16039  0CB3  0DD6               	rlf	___fttol@lval+2,f
 16040  0CB4  0DD7               	rlf	___fttol@lval+3,f
 16041  0CB5  0B89               	decfsz	9,f
 16042  0CB6  2CB1               	goto	u4865
 16043  0CB7  3001               	movlw	1
 16044  0CB8  02D8               	subwf	___fttol@exp1,f
 16045  0CB9                     l6105:	
 16046  0CB9  08D8               	movf	___fttol@exp1,f
 16047  0CBA  1D03               	skipz
 16048  0CBB  2CB0               	goto	l6103
 16049  0CBC                     l6107:	
 16050  0CBC  0853               	movf	___fttol@sign1,w
 16051  0CBD  1903               	btfsc	3,2
 16052  0CBE  2CCA               	goto	l6111
 16053  0CBF  09D4               	comf	___fttol@lval,f
 16054  0CC0  09D5               	comf	___fttol@lval+1,f
 16055  0CC1  09D6               	comf	___fttol@lval+2,f
 16056  0CC2  09D7               	comf	___fttol@lval+3,f
 16057  0CC3  0AD4               	incf	___fttol@lval,f
 16058  0CC4  1903               	skipnz
 16059  0CC5  0AD5               	incf	___fttol@lval+1,f
 16060  0CC6  1903               	skipnz
 16061  0CC7  0AD6               	incf	___fttol@lval+2,f
 16062  0CC8  1903               	skipnz
 16063  0CC9  0AD7               	incf	___fttol@lval+3,f
 16064  0CCA                     l6111:	
 16065  0CCA  0857               	movf	___fttol@lval+3,w
 16066  0CCB  00CE               	movwf	?___fttol+3
 16067  0CCC  0856               	movf	___fttol@lval+2,w
 16068  0CCD  00CD               	movwf	?___fttol+2
 16069  0CCE  0855               	movf	___fttol@lval+1,w
 16070  0CCF  00CC               	movwf	?___fttol+1
 16071  0CD0  0854               	movf	___fttol@lval,w
 16072  0CD1  00CB               	movwf	?___fttol
 16073  0CD2  0008               	return
 16074  0CD3                     __end_of___fttol:	
 16075                           
 16076                           	psect	text104
 16077  0DE6                     __ptext104:	
 16078 ;; *************** function ___ftdiv *****************
 16079 ;; Defined at:
 16080 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16081 ;; Parameters:    Size  Location     Type
 16082 ;;  f2              3   14[BANK0 ] float 
 16083 ;;  f1              3   17[BANK0 ] float 
 16084 ;; Auto vars:     Size  Location     Type
 16085 ;;  f3              3   25[BANK0 ] float 
 16086 ;;  sign            1   29[BANK0 ] unsigned char 
 16087 ;;  exp             1   28[BANK0 ] unsigned char 
 16088 ;;  cntr            1   24[BANK0 ] unsigned char 
 16089 ;; Return value:  Size  Location     Type
 16090 ;;                  3   14[BANK0 ] float 
 16091 ;; Registers used:
 16092 ;;		wreg, status,2, status,0, pclath, cstack
 16093 ;; Tracked objects:
 16094 ;;		On entry : 0/0
 16095 ;;		On exit  : 0/0
 16096 ;;		Unchanged: 0/0
 16097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16098 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16099 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16100 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;Total ram usage:       16 bytes
 16103 ;; Hardware stack levels used:    1
 16104 ;; Hardware stack levels required when called:    6
 16105 ;; This function calls:
 16106 ;;		___ftpack
 16107 ;; This function is called by:
 16108 ;;		_getPercentValue
 16109 ;;		_setPercentValue
 16110 ;; This function uses a non-reentrant model
 16111 ;;
 16112                           
 16113                           
 16114                           ;psect for function ___ftdiv
 16115  0DE6                     ___ftdiv:	
 16116                           
 16117                           ;incstack = 0
 16118                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16119  0DE6  0020               	movlb	0	; select bank0
 16120  0DE7  0831               	movf	___ftdiv@f1,w
 16121  0DE8  00B4               	movwf	??___ftdiv
 16122  0DE9  0832               	movf	___ftdiv@f1+1,w
 16123  0DEA  00B5               	movwf	??___ftdiv+1
 16124  0DEB  0833               	movf	___ftdiv@f1+2,w
 16125  0DEC  00B6               	movwf	??___ftdiv+2
 16126  0DED  1003               	clrc
 16127  0DEE  0D35               	rlf	??___ftdiv+1,w
 16128  0DEF  0D36               	rlf	??___ftdiv+2,w
 16129  0DF0  00B7               	movwf	??___ftdiv+3
 16130  0DF1  0837               	movf	??___ftdiv+3,w
 16131  0DF2  00BC               	movwf	___ftdiv@exp
 16132  0DF3  08BC               	movf	___ftdiv@exp,f
 16133  0DF4  1D03               	skipz
 16134  0DF5  2DFD               	goto	l5985
 16135  0DF6  3000               	movlw	0
 16136  0DF7  00AE               	movwf	?___ftdiv
 16137  0DF8  3000               	movlw	0
 16138  0DF9  00AF               	movwf	?___ftdiv+1
 16139  0DFA  3000               	movlw	0
 16140  0DFB  00B0               	movwf	?___ftdiv+2
 16141  0DFC  0008               	return
 16142  0DFD                     l5985:	
 16143  0DFD  082E               	movf	___ftdiv@f2,w
 16144  0DFE  00B4               	movwf	??___ftdiv
 16145  0DFF  082F               	movf	___ftdiv@f2+1,w
 16146  0E00  00B5               	movwf	??___ftdiv+1
 16147  0E01  0830               	movf	___ftdiv@f2+2,w
 16148  0E02  00B6               	movwf	??___ftdiv+2
 16149  0E03  1003               	clrc
 16150  0E04  0D35               	rlf	??___ftdiv+1,w
 16151  0E05  0D36               	rlf	??___ftdiv+2,w
 16152  0E06  00B7               	movwf	??___ftdiv+3
 16153  0E07  0837               	movf	??___ftdiv+3,w
 16154  0E08  00BD               	movwf	___ftdiv@sign
 16155  0E09  08BD               	movf	___ftdiv@sign,f
 16156  0E0A  1D03               	skipz
 16157  0E0B  2E13               	goto	l5991
 16158  0E0C  3000               	movlw	0
 16159  0E0D  00AE               	movwf	?___ftdiv
 16160  0E0E  3000               	movlw	0
 16161  0E0F  00AF               	movwf	?___ftdiv+1
 16162  0E10  3000               	movlw	0
 16163  0E11  00B0               	movwf	?___ftdiv+2
 16164  0E12  0008               	return
 16165  0E13                     l5991:	
 16166  0E13  3000               	movlw	0
 16167  0E14  00B9               	movwf	___ftdiv@f3
 16168  0E15  3000               	movlw	0
 16169  0E16  00BA               	movwf	___ftdiv@f3+1
 16170  0E17  3000               	movlw	0
 16171  0E18  00BB               	movwf	___ftdiv@f3+2
 16172  0E19  3089               	movlw	137
 16173  0E1A  073D               	addwf	___ftdiv@sign,w
 16174  0E1B  00B4               	movwf	??___ftdiv
 16175  0E1C  0834               	movf	??___ftdiv,w
 16176  0E1D  02BC               	subwf	___ftdiv@exp,f
 16177  0E1E  0831               	movf	___ftdiv@f1,w
 16178  0E1F  00B4               	movwf	??___ftdiv
 16179  0E20  0832               	movf	___ftdiv@f1+1,w
 16180  0E21  00B5               	movwf	??___ftdiv+1
 16181  0E22  0833               	movf	___ftdiv@f1+2,w
 16182  0E23  00B6               	movwf	??___ftdiv+2
 16183  0E24  3010               	movlw	16
 16184  0E25                     u4615:	
 16185  0E25  36B6               	lsrf	??___ftdiv+2,f
 16186  0E26  0CB5               	rrf	??___ftdiv+1,f
 16187  0E27  0CB4               	rrf	??___ftdiv,f
 16188  0E28  0B89               	decfsz	9,f
 16189  0E29  2E25               	goto	u4615
 16190  0E2A  0834               	movf	??___ftdiv,w
 16191  0E2B  00B7               	movwf	??___ftdiv+3
 16192  0E2C  0837               	movf	??___ftdiv+3,w
 16193  0E2D  00BD               	movwf	___ftdiv@sign
 16194  0E2E  082E               	movf	___ftdiv@f2,w
 16195  0E2F  00B4               	movwf	??___ftdiv
 16196  0E30  082F               	movf	___ftdiv@f2+1,w
 16197  0E31  00B5               	movwf	??___ftdiv+1
 16198  0E32  0830               	movf	___ftdiv@f2+2,w
 16199  0E33  00B6               	movwf	??___ftdiv+2
 16200  0E34  3010               	movlw	16
 16201  0E35                     u4625:	
 16202  0E35  36B6               	lsrf	??___ftdiv+2,f
 16203  0E36  0CB5               	rrf	??___ftdiv+1,f
 16204  0E37  0CB4               	rrf	??___ftdiv,f
 16205  0E38  0B89               	decfsz	9,f
 16206  0E39  2E35               	goto	u4625
 16207  0E3A  0834               	movf	??___ftdiv,w
 16208  0E3B  00B7               	movwf	??___ftdiv+3
 16209  0E3C  0837               	movf	??___ftdiv+3,w
 16210  0E3D  06BD               	xorwf	___ftdiv@sign,f
 16211  0E3E  3080               	movlw	128
 16212  0E3F  00B4               	movwf	??___ftdiv
 16213  0E40  0834               	movf	??___ftdiv,w
 16214  0E41  05BD               	andwf	___ftdiv@sign,f
 16215  0E42  17B2               	bsf	___ftdiv@f1+1,7
 16216  0E43  30FF               	movlw	255
 16217  0E44  05B1               	andwf	___ftdiv@f1,f
 16218  0E45  30FF               	movlw	255
 16219  0E46  05B2               	andwf	___ftdiv@f1+1,f
 16220  0E47  3000               	movlw	0
 16221  0E48  05B3               	andwf	___ftdiv@f1+2,f
 16222  0E49  17AF               	bsf	___ftdiv@f2+1,7
 16223  0E4A  30FF               	movlw	255
 16224  0E4B  05AE               	andwf	___ftdiv@f2,f
 16225  0E4C  30FF               	movlw	255
 16226  0E4D  05AF               	andwf	___ftdiv@f2+1,f
 16227  0E4E  3000               	movlw	0
 16228  0E4F  05B0               	andwf	___ftdiv@f2+2,f
 16229  0E50  3018               	movlw	24
 16230  0E51  00B4               	movwf	??___ftdiv
 16231  0E52  0834               	movf	??___ftdiv,w
 16232  0E53  00B8               	movwf	___ftdiv@cntr
 16233  0E54                     l6005:	
 16234  0E54  3001               	movlw	1
 16235  0E55                     u4635:	
 16236  0E55  35B9               	lslf	___ftdiv@f3,f
 16237  0E56  0DBA               	rlf	___ftdiv@f3+1,f
 16238  0E57  0DBB               	rlf	___ftdiv@f3+2,f
 16239  0E58  0B89               	decfsz	9,f
 16240  0E59  2E55               	goto	u4635
 16241  0E5A  0830               	movf	___ftdiv@f2+2,w
 16242  0E5B  0233               	subwf	___ftdiv@f1+2,w
 16243  0E5C  1D03               	skipz
 16244  0E5D  2E64               	goto	u4645
 16245  0E5E  082F               	movf	___ftdiv@f2+1,w
 16246  0E5F  0232               	subwf	___ftdiv@f1+1,w
 16247  0E60  1D03               	skipz
 16248  0E61  2E64               	goto	u4645
 16249  0E62  082E               	movf	___ftdiv@f2,w
 16250  0E63  0231               	subwf	___ftdiv@f1,w
 16251  0E64                     u4645:	
 16252  0E64  1C03               	skipc
 16253  0E65  2E6D               	goto	l6013
 16254  0E66  082E               	movf	___ftdiv@f2,w
 16255  0E67  02B1               	subwf	___ftdiv@f1,f
 16256  0E68  082F               	movf	___ftdiv@f2+1,w
 16257  0E69  3BB2               	subwfb	___ftdiv@f1+1,f
 16258  0E6A  0830               	movf	___ftdiv@f2+2,w
 16259  0E6B  3BB3               	subwfb	___ftdiv@f1+2,f
 16260  0E6C  1439               	bsf	___ftdiv@f3,0
 16261  0E6D                     l6013:	
 16262  0E6D  3001               	movlw	1
 16263  0E6E                     u4655:	
 16264  0E6E  35B1               	lslf	___ftdiv@f1,f
 16265  0E6F  0DB2               	rlf	___ftdiv@f1+1,f
 16266  0E70  0DB3               	rlf	___ftdiv@f1+2,f
 16267  0E71  0B89               	decfsz	9,f
 16268  0E72  2E6E               	goto	u4655
 16269  0E73  3001               	movlw	1
 16270  0E74  02B8               	subwf	___ftdiv@cntr,f
 16271  0E75  1D03               	btfss	3,2
 16272  0E76  2E54               	goto	l6005
 16273  0E77  0839               	movf	___ftdiv@f3,w
 16274  0E78  00A0               	movwf	___ftpack@arg
 16275  0E79  083A               	movf	___ftdiv@f3+1,w
 16276  0E7A  00A1               	movwf	___ftpack@arg+1
 16277  0E7B  083B               	movf	___ftdiv@f3+2,w
 16278  0E7C  00A2               	movwf	___ftpack@arg+2
 16279  0E7D  083C               	movf	___ftdiv@exp,w
 16280  0E7E  00B4               	movwf	??___ftdiv
 16281  0E7F  0834               	movf	??___ftdiv,w
 16282  0E80  00A3               	movwf	___ftpack@exp
 16283  0E81  083D               	movf	___ftdiv@sign,w
 16284  0E82  00B5               	movwf	??___ftdiv+1
 16285  0E83  0835               	movf	??___ftdiv+1,w
 16286  0E84  00A4               	movwf	___ftpack@sign
 16287  0E85  3197  273A         	fcall	___ftpack
 16288  0E87  0020               	movlb	0	; select bank0
 16289  0E88  0820               	movf	?___ftpack,w
 16290  0E89  00AE               	movwf	?___ftdiv
 16291  0E8A  0821               	movf	?___ftpack+1,w
 16292  0E8B  00AF               	movwf	?___ftdiv+1
 16293  0E8C  0822               	movf	?___ftpack+2,w
 16294  0E8D  00B0               	movwf	?___ftdiv+2
 16295  0E8E  0008               	return
 16296  0E8F                     __end_of___ftdiv:	
 16297                           
 16298                           	psect	text105
 16299  1EAA                     __ptext105:	
 16300 ;; *************** function ___awtoft *****************
 16301 ;; Defined at:
 16302 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16303 ;; Parameters:    Size  Location     Type
 16304 ;;  c               2    8[BANK0 ] int 
 16305 ;; Auto vars:     Size  Location     Type
 16306 ;;  sign            1   13[BANK0 ] unsigned char 
 16307 ;; Return value:  Size  Location     Type
 16308 ;;                  3    8[BANK0 ] float 
 16309 ;; Registers used:
 16310 ;;		wreg, status,2, status,0, pclath, cstack
 16311 ;; Tracked objects:
 16312 ;;		On entry : 0/0
 16313 ;;		On exit  : 0/0
 16314 ;;		Unchanged: 0/0
 16315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16316 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16318 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16319 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16320 ;;Total ram usage:        6 bytes
 16321 ;; Hardware stack levels used:    1
 16322 ;; Hardware stack levels required when called:    6
 16323 ;; This function calls:
 16324 ;;		___ftpack
 16325 ;; This function is called by:
 16326 ;;		_getPercentValue
 16327 ;;		_setPercentValue
 16328 ;; This function uses a non-reentrant model
 16329 ;;
 16330                           
 16331                           
 16332                           ;psect for function ___awtoft
 16333  1EAA                     ___awtoft:	
 16334                           
 16335                           ;incstack = 0
 16336                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16337  1EAA  0020               	movlb	0	; select bank0
 16338  1EAB  01AD               	clrf	___awtoft@sign
 16339  1EAC  1FA9               	btfss	___awtoft@c+1,7
 16340  1EAD  2EB5               	goto	l8487
 16341  1EAE  09A8               	comf	___awtoft@c,f
 16342  1EAF  09A9               	comf	___awtoft@c+1,f
 16343  1EB0  0AA8               	incf	___awtoft@c,f
 16344  1EB1  1903               	skipnz
 16345  1EB2  0AA9               	incf	___awtoft@c+1,f
 16346  1EB3  01AD               	clrf	___awtoft@sign
 16347  1EB4  0AAD               	incf	___awtoft@sign,f
 16348  1EB5                     l8487:	
 16349  1EB5  0828               	movf	___awtoft@c,w
 16350  1EB6  00A0               	movwf	___ftpack@arg
 16351  1EB7  0829               	movf	___awtoft@c+1,w
 16352  1EB8  00A1               	movwf	___ftpack@arg+1
 16353  1EB9  01A2               	clrf	___ftpack@arg+2
 16354  1EBA  308E               	movlw	142
 16355  1EBB  00AB               	movwf	??___awtoft
 16356  1EBC  082B               	movf	??___awtoft,w
 16357  1EBD  00A3               	movwf	___ftpack@exp
 16358  1EBE  082D               	movf	___awtoft@sign,w
 16359  1EBF  00AC               	movwf	??___awtoft+1
 16360  1EC0  082C               	movf	??___awtoft+1,w
 16361  1EC1  00A4               	movwf	___ftpack@sign
 16362  1EC2  3197  273A         	fcall	___ftpack
 16363  1EC4  0020               	movlb	0	; select bank0
 16364  1EC5  0820               	movf	?___ftpack,w
 16365  1EC6  00A8               	movwf	?___awtoft
 16366  1EC7  0821               	movf	?___ftpack+1,w
 16367  1EC8  00A9               	movwf	?___awtoft+1
 16368  1EC9  0822               	movf	?___ftpack+2,w
 16369  1ECA  00AA               	movwf	?___awtoft+2
 16370  1ECB  0008               	return
 16371  1ECC                     __end_of___awtoft:	
 16372                           
 16373                           	psect	text106
 16374  173A                     __ptext106:	
 16375 ;; *************** function ___ftpack *****************
 16376 ;; Defined at:
 16377 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16378 ;; Parameters:    Size  Location     Type
 16379 ;;  arg             3    0[BANK0 ] unsigned um
 16380 ;;  exp             1    3[BANK0 ] unsigned char 
 16381 ;;  sign            1    4[BANK0 ] unsigned char 
 16382 ;; Auto vars:     Size  Location     Type
 16383 ;;		None
 16384 ;; Return value:  Size  Location     Type
 16385 ;;                  3    0[BANK0 ] float 
 16386 ;; Registers used:
 16387 ;;		wreg, status,2, status,0
 16388 ;; Tracked objects:
 16389 ;;		On entry : 0/0
 16390 ;;		On exit  : 0/0
 16391 ;;		Unchanged: 0/0
 16392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16393 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16395 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16396 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16397 ;;Total ram usage:        8 bytes
 16398 ;; Hardware stack levels used:    1
 16399 ;; Hardware stack levels required when called:    5
 16400 ;; This function calls:
 16401 ;;		Nothing
 16402 ;; This function is called by:
 16403 ;;		___awtoft
 16404 ;;		___ftadd
 16405 ;;		___ftdiv
 16406 ;;		___ftmul
 16407 ;; This function uses a non-reentrant model
 16408 ;;
 16409                           
 16410                           
 16411                           ;psect for function ___ftpack
 16412  173A                     ___ftpack:	
 16413                           
 16414                           ;incstack = 0
 16415                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16416  173A  0020               	movlb	0	; select bank0
 16417  173B  0823               	movf	___ftpack@exp,w
 16418  173C  1903               	btfsc	3,2
 16419  173D  2F43               	goto	l5869
 16420  173E  0822               	movf	___ftpack@arg+2,w
 16421  173F  0421               	iorwf	___ftpack@arg+1,w
 16422  1740  0420               	iorwf	___ftpack@arg,w
 16423  1741  1D03               	skipz
 16424  1742  2F54               	goto	l5875
 16425  1743                     l5869:	
 16426  1743  3000               	movlw	0
 16427  1744  00A0               	movwf	?___ftpack
 16428  1745  3000               	movlw	0
 16429  1746  00A1               	movwf	?___ftpack+1
 16430  1747  3000               	movlw	0
 16431  1748  00A2               	movwf	?___ftpack+2
 16432  1749  0008               	return
 16433  174A                     l5873:	
 16434  174A  3001               	movlw	1
 16435  174B  00A5               	movwf	??___ftpack
 16436  174C  0825               	movf	??___ftpack,w
 16437  174D  07A3               	addwf	___ftpack@exp,f
 16438  174E  3001               	movlw	1
 16439  174F                     u4265:	
 16440  174F  36A2               	lsrf	___ftpack@arg+2,f
 16441  1750  0CA1               	rrf	___ftpack@arg+1,f
 16442  1751  0CA0               	rrf	___ftpack@arg,f
 16443  1752  0B89               	decfsz	9,f
 16444  1753  2F4F               	goto	u4265
 16445  1754                     l5875:	
 16446  1754  30FE               	movlw	254
 16447  1755  0522               	andwf	___ftpack@arg+2,w
 16448  1756  1903               	btfsc	3,2
 16449  1757  2F6D               	goto	l3027
 16450  1758  2F4A               	goto	l5873
 16451  1759                     l5877:	
 16452  1759  3001               	movlw	1
 16453  175A  00A5               	movwf	??___ftpack
 16454  175B  0825               	movf	??___ftpack,w
 16455  175C  07A3               	addwf	___ftpack@exp,f
 16456  175D  3001               	movlw	1
 16457  175E  07A0               	addwf	___ftpack@arg,f
 16458  175F  3000               	movlw	0
 16459  1760  1803               	skipnc
 16460  1761  3001               	movlw	1
 16461  1762  07A1               	addwf	___ftpack@arg+1,f
 16462  1763  3000               	movlw	0
 16463  1764  1803               	skipnc
 16464  1765  3001               	movlw	1
 16465  1766  07A2               	addwf	___ftpack@arg+2,f
 16466  1767  3001               	movlw	1
 16467  1768                     u4285:	
 16468  1768  36A2               	lsrf	___ftpack@arg+2,f
 16469  1769  0CA1               	rrf	___ftpack@arg+1,f
 16470  176A  0CA0               	rrf	___ftpack@arg,f
 16471  176B  0B89               	decfsz	9,f
 16472  176C  2F68               	goto	u4285
 16473  176D                     l3027:	
 16474  176D  30FF               	movlw	255
 16475  176E  0522               	andwf	___ftpack@arg+2,w
 16476  176F  1903               	btfsc	3,2
 16477  1770  2F7A               	goto	l5885
 16478  1771  2F59               	goto	l5877
 16479  1772                     l5883:	
 16480  1772  3001               	movlw	1
 16481  1773  02A3               	subwf	___ftpack@exp,f
 16482  1774  3001               	movlw	1
 16483  1775                     u4305:	
 16484  1775  35A0               	lslf	___ftpack@arg,f
 16485  1776  0DA1               	rlf	___ftpack@arg+1,f
 16486  1777  0DA2               	rlf	___ftpack@arg+2,f
 16487  1778  0B89               	decfsz	9,f
 16488  1779  2F75               	goto	u4305
 16489  177A                     l5885:	
 16490  177A  1FA1               	btfss	___ftpack@arg+1,7
 16491  177B  2F72               	goto	l5883
 16492  177C  1823               	btfsc	___ftpack@exp,0
 16493  177D  2F84               	goto	l3033
 16494  177E  30FF               	movlw	255
 16495  177F  05A0               	andwf	___ftpack@arg,f
 16496  1780  307F               	movlw	127
 16497  1781  05A1               	andwf	___ftpack@arg+1,f
 16498  1782  30FF               	movlw	255
 16499  1783  05A2               	andwf	___ftpack@arg+2,f
 16500  1784                     l3033:	
 16501  1784  1003               	clrc
 16502  1785  0CA3               	rrf	___ftpack@exp,f
 16503  1786  0823               	movf	___ftpack@exp,w
 16504  1787  00A5               	movwf	??___ftpack
 16505  1788  01A6               	clrf	??___ftpack+1
 16506  1789  01A7               	clrf	??___ftpack+2
 16507  178A  3010               	movlw	16
 16508  178B                     u4335:	
 16509  178B  35A5               	lslf	??___ftpack,f
 16510  178C  0DA6               	rlf	??___ftpack+1,f
 16511  178D  0DA7               	rlf	??___ftpack+2,f
 16512  178E  0B89               	decfsz	9,f
 16513  178F  2F8B               	goto	u4335
 16514  1790  0825               	movf	??___ftpack,w
 16515  1791  04A0               	iorwf	___ftpack@arg,f
 16516  1792  0826               	movf	??___ftpack+1,w
 16517  1793  04A1               	iorwf	___ftpack@arg+1,f
 16518  1794  0827               	movf	??___ftpack+2,w
 16519  1795  04A2               	iorwf	___ftpack@arg+2,f
 16520  1796  0824               	movf	___ftpack@sign,w
 16521  1797  1903               	btfsc	3,2
 16522  1798  0008               	return
 16523  1799  17A2               	bsf	___ftpack@arg+2,7
 16524  179A  0008               	return
 16525  179B                     __end_of___ftpack:	
 16526                           
 16527                           	psect	text107
 16528  1B2C                     __ptext107:	
 16529 ;; *************** function _setRFSW_Status *****************
 16530 ;; Defined at:
 16531 ;;		line 434 in file "../src/RF_Control_B1.c"
 16532 ;; Parameters:    Size  Location     Type
 16533 ;;  sw              1    wreg     unsigned char 
 16534 ;;  command         1    2[BANK0 ] unsigned char 
 16535 ;; Auto vars:     Size  Location     Type
 16536 ;;  sw              1    3[BANK0 ] unsigned char 
 16537 ;; Return value:  Size  Location     Type
 16538 ;;		None               void
 16539 ;; Registers used:
 16540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16541 ;; Tracked objects:
 16542 ;;		On entry : 0/0
 16543 ;;		On exit  : 0/0
 16544 ;;		Unchanged: 0/0
 16545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16546 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16550 ;;Total ram usage:        2 bytes
 16551 ;; Hardware stack levels used:    1
 16552 ;; Hardware stack levels required when called:    6
 16553 ;; This function calls:
 16554 ;;		_RfSWPointSelect
 16555 ;; This function is called by:
 16556 ;;		_DlyOff_Main
 16557 ;;		_setDimmerLights_ERROR
 16558 ;;		_setControl_Lights_Table
 16559 ;;		_Sw_DimmerOnFunc
 16560 ;;		_Sw_DimmerAdjFunc
 16561 ;; This function uses a non-reentrant model
 16562 ;;
 16563                           
 16564                           
 16565                           ;psect for function _setRFSW_Status
 16566  1B2C                     _setRFSW_Status:	
 16567                           
 16568                           ;incstack = 0
 16569                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16570                           ;setRFSW_Status@sw stored from wreg
 16571  1B2C  0020               	movlb	0	; select bank0
 16572  1B2D  00A3               	movwf	setRFSW_Status@sw
 16573                           
 16574                           ;RF_Control_B1.c: 435: RfSWPointSelect(sw);
 16575  1B2E  0823               	movf	setRFSW_Status@sw,w
 16576  1B2F  319C  2461         	fcall	_RfSWPointSelect
 16577                           
 16578                           ;RF_Control_B1.c: 436: RFSW->Status = command;
 16579  1B31  0879               	movf	_RFSW,w
 16580  1B32  0086               	movwf	6
 16581  1B33  0187               	clrf	7
 16582  1B34  0020               	movlb	0	; select bank0
 16583  1B35  0822               	movf	setRFSW_Status@command,w
 16584  1B36  1001               	bcf	1,0
 16585  1B37  1D03               	skipz
 16586  1B38  1401               	bsf	1,0
 16587  1B39  0008               	return
 16588  1B3A                     __end_of_setRFSW_Status:	
 16589                           
 16590                           	psect	text108
 16591  1C61                     __ptext108:	
 16592 ;; *************** function _RfSWPointSelect *****************
 16593 ;; Defined at:
 16594 ;;		line 369 in file "../src/RF_Control_B1.c"
 16595 ;; Parameters:    Size  Location     Type
 16596 ;;  sw              1    wreg     unsigned char 
 16597 ;; Auto vars:     Size  Location     Type
 16598 ;;  sw              1    1[BANK0 ] unsigned char 
 16599 ;; Return value:  Size  Location     Type
 16600 ;;		None               void
 16601 ;; Registers used:
 16602 ;;		wreg
 16603 ;; Tracked objects:
 16604 ;;		On entry : 0/0
 16605 ;;		On exit  : 0/0
 16606 ;;		Unchanged: 0/0
 16607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16612 ;;Total ram usage:        2 bytes
 16613 ;; Hardware stack levels used:    1
 16614 ;; Hardware stack levels required when called:    5
 16615 ;; This function calls:
 16616 ;;		Nothing
 16617 ;; This function is called by:
 16618 ;;		_setRFSW_Control
 16619 ;;		_setRFSW_AdjControl
 16620 ;;		_setRFSW_Status
 16621 ;; This function uses a non-reentrant model
 16622 ;;
 16623                           
 16624                           
 16625                           ;psect for function _RfSWPointSelect
 16626  1C61                     _RfSWPointSelect:	
 16627                           
 16628                           ;incstack = 0
 16629                           ; Regs used in _RfSWPointSelect: [wreg]
 16630                           ;RfSWPointSelect@sw stored from wreg
 16631  1C61  0020               	movlb	0	; select bank0
 16632  1C62  00A1               	movwf	RfSWPointSelect@sw
 16633                           
 16634                           ;RF_Control_B1.c: 371: if (sw == 1) {
 16635  1C63  0821               	movf	RfSWPointSelect@sw,w
 16636  1C64  3A01               	xorlw	1
 16637  1C65  1D03               	skipz
 16638  1C66  2C6B               	goto	l2337
 16639                           
 16640                           ;RF_Control_B1.c: 372: RFSW = &RFSW1;
 16641  1C67  30ED               	movlw	_RFSW1& (0+255)
 16642  1C68  00A0               	movwf	??_RfSWPointSelect
 16643  1C69  0820               	movf	??_RfSWPointSelect,w
 16644  1C6A  00F9               	movwf	_RFSW
 16645  1C6B                     l2337:	
 16646                           
 16647                           ;RF_Control_B1.c: 373: }
 16648                           ;RF_Control_B1.c: 376: if (sw == 2) {
 16649  1C6B  0821               	movf	RfSWPointSelect@sw,w
 16650  1C6C  3A02               	xorlw	2
 16651  1C6D  1D03               	skipz
 16652  1C6E  0008               	return
 16653                           
 16654                           ;RF_Control_B1.c: 377: RFSW = &RFSW2;
 16655  1C6F  30EE               	movlw	_RFSW2& (0+255)
 16656  1C70  00A0               	movwf	??_RfSWPointSelect
 16657  1C71  0820               	movf	??_RfSWPointSelect,w
 16658  1C72  00F9               	movwf	_RFSW
 16659  1C73  0008               	return
 16660  1C74                     __end_of_RfSWPointSelect:	
 16661                           
 16662                           	psect	text109
 16663  1B93                     __ptext109:	
 16664 ;; *************** function _setDimmerLights_Trigger *****************
 16665 ;; Defined at:
 16666 ;;		line 714 in file "../src/Dimmer_B1.c"
 16667 ;; Parameters:    Size  Location     Type
 16668 ;;  lights          1    wreg     unsigned char 
 16669 ;;  command         1    2[BANK0 ] unsigned char 
 16670 ;; Auto vars:     Size  Location     Type
 16671 ;;  lights          1    3[BANK0 ] unsigned char 
 16672 ;; Return value:  Size  Location     Type
 16673 ;;		None               void
 16674 ;; Registers used:
 16675 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16676 ;; Tracked objects:
 16677 ;;		On entry : 0/0
 16678 ;;		On exit  : 0/0
 16679 ;;		Unchanged: 0/0
 16680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16681 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16685 ;;Total ram usage:        2 bytes
 16686 ;; Hardware stack levels used:    1
 16687 ;; Hardware stack levels required when called:    6
 16688 ;; This function calls:
 16689 ;;		_DimmerLightsPointSelect
 16690 ;; This function is called by:
 16691 ;;		_DlyOff_Main
 16692 ;;		_setRFSW_Control
 16693 ;;		_Sw_DimmerOnFunc
 16694 ;;		_Sw_DimmerOffFunc
 16695 ;; This function uses a non-reentrant model
 16696 ;;
 16697                           
 16698                           
 16699                           ;psect for function _setDimmerLights_Trigger
 16700  1B93                     _setDimmerLights_Trigger:	
 16701                           
 16702                           ;incstack = 0
 16703                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16704                           ;setDimmerLights_Trigger@lights stored from wreg
 16705  1B93  0020               	movlb	0	; select bank0
 16706  1B94  00A3               	movwf	setDimmerLights_Trigger@lights
 16707                           
 16708                           ;Dimmer_B1.c: 716: DimmerLightsPointSelect(lights);
 16709  1B95  0823               	movf	setDimmerLights_Trigger@lights,w
 16710  1B96  319C  244E         	fcall	_DimmerLightsPointSelect
 16711                           
 16712                           ;Dimmer_B1.c: 717: DimmerLights->Trigger = command;
 16713  1B98  0020               	movlb	0	; select bank0
 16714  1B99  086B               	movf	_DimmerLights,w
 16715  1B9A  3E08               	addlw	8
 16716  1B9B  0086               	movwf	6
 16717  1B9C  3001               	movlw	1	; select bank2/3
 16718  1B9D  0087               	movwf	7
 16719  1B9E  0822               	movf	setDimmerLights_Trigger@command,w
 16720  1B9F  1101               	bcf	1,2
 16721  1BA0  1D03               	skipz
 16722  1BA1  1501               	bsf	1,2
 16723  1BA2  0008               	return
 16724  1BA3                     __end_of_setDimmerLights_Trigger:	
 16725                           
 16726                           	psect	text110
 16727  1B83                     __ptext110:	
 16728 ;; *************** function _setDimmerLights_Switch *****************
 16729 ;; Defined at:
 16730 ;;		line 702 in file "../src/Dimmer_B1.c"
 16731 ;; Parameters:    Size  Location     Type
 16732 ;;  lights          1    wreg     unsigned char 
 16733 ;;  command         1    2[BANK0 ] unsigned char 
 16734 ;; Auto vars:     Size  Location     Type
 16735 ;;  lights          1    3[BANK0 ] unsigned char 
 16736 ;; Return value:  Size  Location     Type
 16737 ;;		None               void
 16738 ;; Registers used:
 16739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16740 ;; Tracked objects:
 16741 ;;		On entry : 0/0
 16742 ;;		On exit  : 0/0
 16743 ;;		Unchanged: 0/0
 16744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16745 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16749 ;;Total ram usage:        2 bytes
 16750 ;; Hardware stack levels used:    1
 16751 ;; Hardware stack levels required when called:    6
 16752 ;; This function calls:
 16753 ;;		_DimmerLightsPointSelect
 16754 ;; This function is called by:
 16755 ;;		_DlyOff_Main
 16756 ;;		_setRFSW_Control
 16757 ;;		_Sw_DimmerOnFunc
 16758 ;;		_Sw_DimmerOffFunc
 16759 ;; This function uses a non-reentrant model
 16760 ;;
 16761                           
 16762                           
 16763                           ;psect for function _setDimmerLights_Switch
 16764  1B83                     _setDimmerLights_Switch:	
 16765                           
 16766                           ;incstack = 0
 16767                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16768                           ;setDimmerLights_Switch@lights stored from wreg
 16769  1B83  0020               	movlb	0	; select bank0
 16770  1B84  00A3               	movwf	setDimmerLights_Switch@lights
 16771                           
 16772                           ;Dimmer_B1.c: 704: DimmerLightsPointSelect(lights);
 16773  1B85  0823               	movf	setDimmerLights_Switch@lights,w
 16774  1B86  319C  244E         	fcall	_DimmerLightsPointSelect
 16775                           
 16776                           ;Dimmer_B1.c: 705: DimmerLights->Switch = command;
 16777  1B88  0020               	movlb	0	; select bank0
 16778  1B89  086B               	movf	_DimmerLights,w
 16779  1B8A  3E08               	addlw	8
 16780  1B8B  0086               	movwf	6
 16781  1B8C  3001               	movlw	1	; select bank2/3
 16782  1B8D  0087               	movwf	7
 16783  1B8E  0822               	movf	setDimmerLights_Switch@command,w
 16784  1B8F  1081               	bcf	1,1
 16785  1B90  1D03               	skipz
 16786  1B91  1481               	bsf	1,1
 16787  1B92  0008               	return
 16788  1B93                     __end_of_setDimmerLights_Switch:	
 16789                           
 16790                           	psect	text111
 16791  1C4E                     __ptext111:	
 16792 ;; *************** function _DimmerLightsPointSelect *****************
 16793 ;; Defined at:
 16794 ;;		line 324 in file "../src/Dimmer_B1.c"
 16795 ;; Parameters:    Size  Location     Type
 16796 ;;  lights          1    wreg     unsigned char 
 16797 ;; Auto vars:     Size  Location     Type
 16798 ;;  lights          1    1[BANK0 ] unsigned char 
 16799 ;; Return value:  Size  Location     Type
 16800 ;;		None               void
 16801 ;; Registers used:
 16802 ;;		wreg
 16803 ;; Tracked objects:
 16804 ;;		On entry : 0/0
 16805 ;;		On exit  : 0/0
 16806 ;;		Unchanged: 0/0
 16807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16811 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;Total ram usage:        2 bytes
 16813 ;; Hardware stack levels used:    1
 16814 ;; Hardware stack levels required when called:    5
 16815 ;; This function calls:
 16816 ;;		Nothing
 16817 ;; This function is called by:
 16818 ;;		_setDimmerLights_Initialization
 16819 ;;		_setDimmerLights_Main
 16820 ;;		_setDimmerLights_ERROR
 16821 ;;		_setDimmerLights_TriggerERROR
 16822 ;;		_setDimmerLights
 16823 ;;		_setDimmerLights_Adj
 16824 ;;		_setDimmerLights_AdjRF
 16825 ;;		_setDimmerLights_Switch
 16826 ;;		_setDimmerLights_AdjGo
 16827 ;;		_setDimmerLights_Trigger
 16828 ;;		_setDimmerLights_TriggerAdj
 16829 ;;		_setDimmerLights_Clear
 16830 ;;		_setDimmerLights_GO
 16831 ;;		_setDimmerLights_MaxmumValue
 16832 ;; This function uses a non-reentrant model
 16833 ;;
 16834                           
 16835                           
 16836                           ;psect for function _DimmerLightsPointSelect
 16837  1C4E                     _DimmerLightsPointSelect:	
 16838                           
 16839                           ;incstack = 0
 16840                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16841                           ;DimmerLightsPointSelect@lights stored from wreg
 16842  1C4E  0020               	movlb	0	; select bank0
 16843  1C4F  00A1               	movwf	DimmerLightsPointSelect@lights
 16844                           
 16845                           ;Dimmer_B1.c: 326: if (lights == 1) {
 16846  1C50  0821               	movf	DimmerLightsPointSelect@lights,w
 16847  1C51  3A01               	xorlw	1
 16848  1C52  1D03               	skipz
 16849  1C53  2C58               	goto	l824
 16850                           
 16851                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 16852  1C54  303D               	movlw	_DimmerLights1& (0+255)
 16853  1C55  00A0               	movwf	??_DimmerLightsPointSelect
 16854  1C56  0820               	movf	??_DimmerLightsPointSelect,w
 16855  1C57  00EB               	movwf	_DimmerLights
 16856  1C58                     l824:	
 16857                           
 16858                           ;Dimmer_B1.c: 328: }
 16859                           ;Dimmer_B1.c: 331: if (lights == 2) {
 16860  1C58  0821               	movf	DimmerLightsPointSelect@lights,w
 16861  1C59  3A02               	xorlw	2
 16862  1C5A  1D03               	skipz
 16863  1C5B  0008               	return
 16864                           
 16865                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 16866  1C5C  304C               	movlw	_DimmerLights2& (0+255)
 16867  1C5D  00A0               	movwf	??_DimmerLightsPointSelect
 16868  1C5E  0820               	movf	??_DimmerLightsPointSelect,w
 16869  1C5F  00EB               	movwf	_DimmerLights
 16870  1C60  0008               	return
 16871  1C61                     __end_of_DimmerLightsPointSelect:	
 16872                           
 16873                           	psect	text112
 16874  15C9                     __ptext112:	
 16875 ;; *************** function _setBuz *****************
 16876 ;; Defined at:
 16877 ;;		line 22 in file "../src/Buzzer_B1.c"
 16878 ;; Parameters:    Size  Location     Type
 16879 ;;  count           1    wreg     unsigned char 
 16880 ;;  time            2    9[BANK0 ] int 
 16881 ;; Auto vars:     Size  Location     Type
 16882 ;;  count           1   12[BANK0 ] unsigned char 
 16883 ;; Return value:  Size  Location     Type
 16884 ;;		None               void
 16885 ;; Registers used:
 16886 ;;		wreg, status,2, status,0, pclath, cstack
 16887 ;; Tracked objects:
 16888 ;;		On entry : 0/0
 16889 ;;		On exit  : 0/0
 16890 ;;		Unchanged: 0/0
 16891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16892 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16894 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16895 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16896 ;;Total ram usage:        4 bytes
 16897 ;; Hardware stack levels used:    1
 16898 ;; Hardware stack levels required when called:    6
 16899 ;; This function calls:
 16900 ;;		___awdiv
 16901 ;; This function is called by:
 16902 ;;		_DlyOff_Main
 16903 ;;		_setDimmerLights_Main
 16904 ;;		_DimmerLights_Exceptions
 16905 ;;		_my_MainTime
 16906 ;;		_setOverTemp_Exceptions
 16907 ;;		_setLog_Code
 16908 ;;		_setControl_Lights_Table
 16909 ;;		_setRFSW_Control
 16910 ;;		_setSw_Main
 16911 ;;		_Sw_DimmerOnFunc
 16912 ;; This function uses a non-reentrant model
 16913 ;;
 16914                           
 16915                           
 16916                           ;psect for function _setBuz
 16917  15C9                     _setBuz:	
 16918                           
 16919                           ;incstack = 0
 16920                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16921                           ;setBuz@count stored from wreg
 16922  15C9  0020               	movlb	0	; select bank0
 16923  15CA  00AC               	movwf	setBuz@count
 16924                           
 16925                           ;Buzzer_B1.c: 23: time /= 10;
 16926  15CB  300A               	movlw	10
 16927  15CC  00A0               	movwf	___awdiv@divisor
 16928  15CD  3000               	movlw	0
 16929  15CE  00A1               	movwf	___awdiv@divisor+1
 16930  15CF  082A               	movf	setBuz@time+1,w
 16931  15D0  01A3               	clrf	___awdiv@dividend+1
 16932  15D1  07A3               	addwf	___awdiv@dividend+1,f
 16933  15D2  0829               	movf	setBuz@time,w
 16934  15D3  01A2               	clrf	___awdiv@dividend
 16935  15D4  07A2               	addwf	___awdiv@dividend,f
 16936  15D5  3194  24C8  3195   	fcall	___awdiv
 16937  15D8  0020               	movlb	0	; select bank0
 16938  15D9  0821               	movf	?___awdiv+1,w
 16939  15DA  01AA               	clrf	setBuz@time+1
 16940  15DB  07AA               	addwf	setBuz@time+1,f
 16941  15DC  0820               	movf	?___awdiv,w
 16942  15DD  01A9               	clrf	setBuz@time
 16943  15DE  07A9               	addwf	setBuz@time,f
 16944                           
 16945                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16946  15DF  0021               	movlb	1	; select bank1
 16947  15E0  1C32               	btfss	_Buz1^(0+128),0
 16948  15E1  0008               	return
 16949                           
 16950                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16951  15E2  18B2               	btfsc	_Buz1^(0+128),1
 16952  15E3  2DFA               	goto	l102
 16953                           
 16954                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16955  15E4  14B2               	bsf	_Buz1^(0+128),1
 16956                           
 16957                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16958  15E5  01B3               	clrf	(_Buz1^(0+128)+1)
 16959  15E6  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 16960                           
 16961                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16962  15E7  0020               	movlb	0	; select bank0
 16963  15E8  082C               	movf	setBuz@count,w
 16964  15E9  00AB               	movwf	??_setBuz
 16965  15EA  082B               	movf	??_setBuz,w
 16966  15EB  0021               	movlb	1	; select bank1
 16967  15EC  00B5               	movwf	(_Buz1^(0+128)+3)
 16968                           
 16969                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16970  15ED  0020               	movlb	0	; select bank0
 16971  15EE  082A               	movf	setBuz@time+1,w
 16972  15EF  0021               	movlb	1	; select bank1
 16973  15F0  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16974  15F1  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16975  15F2  0020               	movlb	0	; select bank0
 16976  15F3  0829               	movf	setBuz@time,w
 16977  15F4  0021               	movlb	1	; select bank1
 16978  15F5  01B8               	clrf	(_Buz1^(0+128)+6)
 16979  15F6  07B8               	addwf	(_Buz1^(0+128)+6),f
 16980                           
 16981                           ;Buzzer_B1.c: 30: RB3 = 1;
 16982  15F7  0020               	movlb	0	; select bank0
 16983  15F8  158D               	bsf	13,3	;volatile
 16984                           
 16985                           ;Buzzer_B1.c: 31: } else {
 16986  15F9  0008               	return
 16987  15FA                     l102:	
 16988                           
 16989                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16990  15FA  19B2               	btfsc	_Buz1^(0+128),3
 16991  15FB  2E0E               	goto	l104
 16992                           
 16993                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16994  15FC  15B2               	bsf	_Buz1^(0+128),3
 16995                           
 16996                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16997  15FD  0020               	movlb	0	; select bank0
 16998  15FE  082C               	movf	setBuz@count,w
 16999  15FF  00AB               	movwf	??_setBuz
 17000  1600  082B               	movf	??_setBuz,w
 17001  1601  0021               	movlb	1	; select bank1
 17002  1602  00B6               	movwf	(_Buz1^(0+128)+4)
 17003                           
 17004                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17005  1603  0020               	movlb	0	; select bank0
 17006  1604  082A               	movf	setBuz@time+1,w
 17007  1605  0021               	movlb	1	; select bank1
 17008  1606  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 17009  1607  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 17010  1608  0020               	movlb	0	; select bank0
 17011  1609  0829               	movf	setBuz@time,w
 17012  160A  0021               	movlb	1	; select bank1
 17013  160B  01BA               	clrf	(_Buz1^(0+128)+8)
 17014  160C  07BA               	addwf	(_Buz1^(0+128)+8),f
 17015                           
 17016                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17017  160D  0008               	return
 17018  160E                     l104:	
 17019  160E  1A32               	btfsc	_Buz1^(0+128),4
 17020  160F  0008               	return
 17021                           
 17022                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17023  1610  1632               	bsf	_Buz1^(0+128),4
 17024                           
 17025                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17026  1611  0020               	movlb	0	; select bank0
 17027  1612  082C               	movf	setBuz@count,w
 17028  1613  00AB               	movwf	??_setBuz
 17029  1614  082B               	movf	??_setBuz,w
 17030  1615  0021               	movlb	1	; select bank1
 17031  1616  00B7               	movwf	(_Buz1^(0+128)+5)
 17032                           
 17033                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17034  1617  0020               	movlb	0	; select bank0
 17035  1618  082A               	movf	setBuz@time+1,w
 17036  1619  0021               	movlb	1	; select bank1
 17037  161A  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 17038  161B  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 17039  161C  0020               	movlb	0	; select bank0
 17040  161D  0829               	movf	setBuz@time,w
 17041  161E  0021               	movlb	1	; select bank1
 17042  161F  01BC               	clrf	(_Buz1^(0+128)+10)
 17043  1620  07BC               	addwf	(_Buz1^(0+128)+10),f
 17044  1621  0008               	return
 17045  1622                     __end_of_setBuz:	
 17046                           
 17047                           	psect	text113
 17048  14C8                     __ptext113:	
 17049 ;; *************** function ___awdiv *****************
 17050 ;; Defined at:
 17051 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17052 ;; Parameters:    Size  Location     Type
 17053 ;;  divisor         2    0[BANK0 ] int 
 17054 ;;  dividend        2    2[BANK0 ] int 
 17055 ;; Auto vars:     Size  Location     Type
 17056 ;;  quotient        2    7[BANK0 ] int 
 17057 ;;  sign            1    6[BANK0 ] unsigned char 
 17058 ;;  counter         1    5[BANK0 ] unsigned char 
 17059 ;; Return value:  Size  Location     Type
 17060 ;;                  2    0[BANK0 ] int 
 17061 ;; Registers used:
 17062 ;;		wreg, status,2, status,0
 17063 ;; Tracked objects:
 17064 ;;		On entry : 0/0
 17065 ;;		On exit  : 0/0
 17066 ;;		Unchanged: 0/0
 17067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17068 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17069 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17070 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17071 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17072 ;;Total ram usage:        9 bytes
 17073 ;; Hardware stack levels used:    1
 17074 ;; Hardware stack levels required when called:    5
 17075 ;; This function calls:
 17076 ;;		Nothing
 17077 ;; This function is called by:
 17078 ;;		_setBuz
 17079 ;; This function uses a non-reentrant model
 17080 ;;
 17081                           
 17082                           
 17083                           ;psect for function ___awdiv
 17084  14C8                     ___awdiv:	
 17085                           
 17086                           ;incstack = 0
 17087                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17088  14C8  0020               	movlb	0	; select bank0
 17089  14C9  01A6               	clrf	___awdiv@sign
 17090  14CA  1FA1               	btfss	___awdiv@divisor+1,7
 17091  14CB  2CD3               	goto	l8595
 17092  14CC  09A0               	comf	___awdiv@divisor,f
 17093  14CD  09A1               	comf	___awdiv@divisor+1,f
 17094  14CE  0AA0               	incf	___awdiv@divisor,f
 17095  14CF  1903               	skipnz
 17096  14D0  0AA1               	incf	___awdiv@divisor+1,f
 17097  14D1  01A6               	clrf	___awdiv@sign
 17098  14D2  0AA6               	incf	___awdiv@sign,f
 17099  14D3                     l8595:	
 17100  14D3  1FA3               	btfss	___awdiv@dividend+1,7
 17101  14D4  2CDE               	goto	l8601
 17102  14D5  09A2               	comf	___awdiv@dividend,f
 17103  14D6  09A3               	comf	___awdiv@dividend+1,f
 17104  14D7  0AA2               	incf	___awdiv@dividend,f
 17105  14D8  1903               	skipnz
 17106  14D9  0AA3               	incf	___awdiv@dividend+1,f
 17107  14DA  3001               	movlw	1
 17108  14DB  00A4               	movwf	??___awdiv
 17109  14DC  0824               	movf	??___awdiv,w
 17110  14DD  06A6               	xorwf	___awdiv@sign,f
 17111  14DE                     l8601:	
 17112  14DE  01A7               	clrf	___awdiv@quotient
 17113  14DF  01A8               	clrf	___awdiv@quotient+1
 17114  14E0  0821               	movf	___awdiv@divisor+1,w
 17115  14E1  0420               	iorwf	___awdiv@divisor,w
 17116  14E2  1903               	skipnz
 17117  14E3  2D0D               	goto	l8623
 17118  14E4  01A5               	clrf	___awdiv@counter
 17119  14E5  0AA5               	incf	___awdiv@counter,f
 17120  14E6                     l8611:	
 17121  14E6  1BA1               	btfsc	___awdiv@divisor+1,7
 17122  14E7  2CF2               	goto	l8613
 17123  14E8  3001               	movlw	1
 17124  14E9                     u8665:	
 17125  14E9  35A0               	lslf	___awdiv@divisor,f
 17126  14EA  0DA1               	rlf	___awdiv@divisor+1,f
 17127  14EB  0B89               	decfsz	9,f
 17128  14EC  2CE9               	goto	u8665
 17129  14ED  3001               	movlw	1
 17130  14EE  00A4               	movwf	??___awdiv
 17131  14EF  0824               	movf	??___awdiv,w
 17132  14F0  07A5               	addwf	___awdiv@counter,f
 17133  14F1  2CE6               	goto	l8611
 17134  14F2                     l8613:	
 17135  14F2  3001               	movlw	1
 17136  14F3                     u8685:	
 17137  14F3  35A7               	lslf	___awdiv@quotient,f
 17138  14F4  0DA8               	rlf	___awdiv@quotient+1,f
 17139  14F5  0B89               	decfsz	9,f
 17140  14F6  2CF3               	goto	u8685
 17141  14F7  0821               	movf	___awdiv@divisor+1,w
 17142  14F8  0223               	subwf	___awdiv@dividend+1,w
 17143  14F9  1D03               	skipz
 17144  14FA  2CFD               	goto	u8695
 17145  14FB  0820               	movf	___awdiv@divisor,w
 17146  14FC  0222               	subwf	___awdiv@dividend,w
 17147  14FD                     u8695:	
 17148  14FD  1C03               	skipc
 17149  14FE  2D04               	goto	l8619
 17150  14FF  0820               	movf	___awdiv@divisor,w
 17151  1500  02A2               	subwf	___awdiv@dividend,f
 17152  1501  0821               	movf	___awdiv@divisor+1,w
 17153  1502  3BA3               	subwfb	___awdiv@dividend+1,f
 17154  1503  1427               	bsf	___awdiv@quotient,0
 17155  1504                     l8619:	
 17156  1504  3001               	movlw	1
 17157  1505                     u8705:	
 17158  1505  36A1               	lsrf	___awdiv@divisor+1,f
 17159  1506  0CA0               	rrf	___awdiv@divisor,f
 17160  1507  0B89               	decfsz	9,f
 17161  1508  2D05               	goto	u8705
 17162  1509  3001               	movlw	1
 17163  150A  02A5               	subwf	___awdiv@counter,f
 17164  150B  1D03               	btfss	3,2
 17165  150C  2CF2               	goto	l8613
 17166  150D                     l8623:	
 17167  150D  0826               	movf	___awdiv@sign,w
 17168  150E  1903               	btfsc	3,2
 17169  150F  2D15               	goto	l8627
 17170  1510  09A7               	comf	___awdiv@quotient,f
 17171  1511  09A8               	comf	___awdiv@quotient+1,f
 17172  1512  0AA7               	incf	___awdiv@quotient,f
 17173  1513  1903               	skipnz
 17174  1514  0AA8               	incf	___awdiv@quotient+1,f
 17175  1515                     l8627:	
 17176  1515  0828               	movf	___awdiv@quotient+1,w
 17177  1516  01A1               	clrf	?___awdiv+1
 17178  1517  07A1               	addwf	?___awdiv+1,f
 17179  1518  0827               	movf	___awdiv@quotient,w
 17180  1519  01A0               	clrf	?___awdiv
 17181  151A  07A0               	addwf	?___awdiv,f
 17182  151B  0008               	return
 17183  151C                     __end_of___awdiv:	
 17184                           
 17185                           	psect	text114
 17186  1A47                     __ptext114:	
 17187 ;; *************** function _DelayOff_Initialization *****************
 17188 ;; Defined at:
 17189 ;;		line 26 in file "../src/DelayOff_B1.c"
 17190 ;; Parameters:    Size  Location     Type
 17191 ;;		None
 17192 ;; Auto vars:     Size  Location     Type
 17193 ;;		None
 17194 ;; Return value:  Size  Location     Type
 17195 ;;		None               void
 17196 ;; Registers used:
 17197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17198 ;; Tracked objects:
 17199 ;;		On entry : 0/0
 17200 ;;		On exit  : 0/0
 17201 ;;		Unchanged: 0/0
 17202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17207 ;;Total ram usage:        0 bytes
 17208 ;; Hardware stack levels used:    1
 17209 ;; Hardware stack levels required when called:    7
 17210 ;; This function calls:
 17211 ;;		_DlyOff_Initialization
 17212 ;; This function is called by:
 17213 ;;		_main
 17214 ;; This function uses a non-reentrant model
 17215 ;;
 17216                           
 17217                           
 17218                           ;psect for function _DelayOff_Initialization
 17219  1A47                     _DelayOff_Initialization:	
 17220                           
 17221                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17222                           
 17223                           ;incstack = 0
 17224                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17225  1A47  3001               	movlw	1
 17226  1A48  319A  22A9  319A   	fcall	_DlyOff_Initialization
 17227                           
 17228                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17229  1A4B  3002               	movlw	2
 17230  1A4C  319A  22A9         	fcall	_DlyOff_Initialization
 17231  1A4E  0008               	return
 17232  1A4F                     __end_of_DelayOff_Initialization:	
 17233                           
 17234                           	psect	text115
 17235  1AA9                     __ptext115:	
 17236 ;; *************** function _DlyOff_Initialization *****************
 17237 ;; Defined at:
 17238 ;;		line 56 in file "../src/DelayOff_B1.c"
 17239 ;; Parameters:    Size  Location     Type
 17240 ;;  sw              1    wreg     unsigned char 
 17241 ;; Auto vars:     Size  Location     Type
 17242 ;;  sw              1    2[BANK0 ] unsigned char 
 17243 ;; Return value:  Size  Location     Type
 17244 ;;		None               void
 17245 ;; Registers used:
 17246 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17247 ;; Tracked objects:
 17248 ;;		On entry : 0/0
 17249 ;;		On exit  : 0/0
 17250 ;;		Unchanged: 0/0
 17251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17255 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17256 ;;Total ram usage:        1 bytes
 17257 ;; Hardware stack levels used:    1
 17258 ;; Hardware stack levels required when called:    6
 17259 ;; This function calls:
 17260 ;;		_DelayOffPointSelect
 17261 ;; This function is called by:
 17262 ;;		_DelayOff_Initialization
 17263 ;; This function uses a non-reentrant model
 17264 ;;
 17265                           
 17266                           
 17267                           ;psect for function _DlyOff_Initialization
 17268  1AA9                     _DlyOff_Initialization:	
 17269                           
 17270                           ;incstack = 0
 17271                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17272                           ;DlyOff_Initialization@sw stored from wreg
 17273  1AA9  0020               	movlb	0	; select bank0
 17274  1AAA  00A2               	movwf	DlyOff_Initialization@sw
 17275                           
 17276                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17277  1AAB  0822               	movf	DlyOff_Initialization@sw,w
 17278  1AAC  319C  249C         	fcall	_DelayOffPointSelect
 17279                           
 17280                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 17281  1AAE  0020               	movlb	0	; select bank0
 17282  1AAF  086A               	movf	_DelayOff,w
 17283  1AB0  0086               	movwf	6
 17284  1AB1  0187               	clrf	7
 17285  1AB2  1401               	bsf	1,0
 17286  1AB3  0008               	return
 17287  1AB4                     __end_of_DlyOff_Initialization:	
 17288                           
 17289                           	psect	text116
 17290  1C9C                     __ptext116:	
 17291 ;; *************** function _DelayOffPointSelect *****************
 17292 ;; Defined at:
 17293 ;;		line 7 in file "../src/DelayOff_B1.c"
 17294 ;; Parameters:    Size  Location     Type
 17295 ;;  sw              1    wreg     unsigned char 
 17296 ;; Auto vars:     Size  Location     Type
 17297 ;;  sw              1    1[BANK0 ] unsigned char 
 17298 ;; Return value:  Size  Location     Type
 17299 ;;		None               void
 17300 ;; Registers used:
 17301 ;;		wreg
 17302 ;; Tracked objects:
 17303 ;;		On entry : 0/0
 17304 ;;		On exit  : 0/0
 17305 ;;		Unchanged: 0/0
 17306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17308 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17310 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17311 ;;Total ram usage:        2 bytes
 17312 ;; Hardware stack levels used:    1
 17313 ;; Hardware stack levels required when called:    5
 17314 ;; This function calls:
 17315 ;;		Nothing
 17316 ;; This function is called by:
 17317 ;;		_DlyOff_Initialization
 17318 ;;		_DlyOff_Main
 17319 ;;		_setDelayOff_GO
 17320 ;; This function uses a non-reentrant model
 17321 ;;
 17322                           
 17323                           
 17324                           ;psect for function _DelayOffPointSelect
 17325  1C9C                     _DelayOffPointSelect:	
 17326                           
 17327                           ;incstack = 0
 17328                           ; Regs used in _DelayOffPointSelect: [wreg]
 17329                           ;DelayOffPointSelect@sw stored from wreg
 17330  1C9C  0020               	movlb	0	; select bank0
 17331  1C9D  00A1               	movwf	DelayOffPointSelect@sw
 17332                           
 17333                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17334  1C9E  0821               	movf	DelayOffPointSelect@sw,w
 17335  1C9F  3A01               	xorlw	1
 17336  1CA0  1D03               	skipz
 17337  1CA1  2CA7               	goto	l8525
 17338                           
 17339                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17340  1CA2  30E9               	movlw	_DlySw1& (0+255)
 17341  1CA3  00A0               	movwf	??_DelayOffPointSelect
 17342  1CA4  0820               	movf	??_DelayOffPointSelect,w
 17343  1CA5  00EA               	movwf	_DelayOff
 17344                           
 17345                           ;DelayOff_B1.c: 11: }
 17346  1CA6  0008               	return
 17347  1CA7                     l8525:	
 17348                           
 17349                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17350  1CA7  0821               	movf	DelayOffPointSelect@sw,w
 17351  1CA8  3A02               	xorlw	2
 17352  1CA9  1D03               	skipz
 17353  1CAA  0008               	return
 17354                           
 17355                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17356  1CAB  30EB               	movlw	_DlySw2& (0+255)
 17357  1CAC  00A0               	movwf	??_DelayOffPointSelect
 17358  1CAD  0820               	movf	??_DelayOffPointSelect,w
 17359  1CAE  00EA               	movwf	_DelayOff
 17360  1CAF  0008               	return
 17361  1CB0                     __end_of_DelayOffPointSelect:	
 17362                           
 17363                           	psect	text117
 17364  07EB                     __ptext117:	
 17365 ;; *************** function _CC2500_PowerOnInitial *****************
 17366 ;; Defined at:
 17367 ;;		line 122 in file "../src/CC2500_B1.c"
 17368 ;; Parameters:    Size  Location     Type
 17369 ;;		None
 17370 ;; Auto vars:     Size  Location     Type
 17371 ;;		None
 17372 ;; Return value:  Size  Location     Type
 17373 ;;		None               void
 17374 ;; Registers used:
 17375 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17376 ;; Tracked objects:
 17377 ;;		On entry : 0/0
 17378 ;;		On exit  : 0/0
 17379 ;;		Unchanged: 0/0
 17380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17385 ;;Total ram usage:        0 bytes
 17386 ;; Hardware stack levels used:    1
 17387 ;; Hardware stack levels required when called:    8
 17388 ;; This function calls:
 17389 ;;		_CC2500_ClearRXFIFO
 17390 ;;		_CC2500_ClearTXFIFO
 17391 ;;		_CC2500_FrequencyCabr
 17392 ;;		_CC2500_InitPATable
 17393 ;;		_CC2500_InitSetREG
 17394 ;;		_CC2500_PowerRST
 17395 ;;		_CC2500_SIDLEMode
 17396 ;; This function is called by:
 17397 ;;		_main
 17398 ;; This function uses a non-reentrant model
 17399 ;;
 17400                           
 17401                           
 17402                           ;psect for function _CC2500_PowerOnInitial
 17403  07EB                     _CC2500_PowerOnInitial:	
 17404                           
 17405                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 17406                           
 17407                           ;incstack = 0
 17408                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17409  07EB  3192  22D3  3187   	fcall	_CC2500_PowerRST
 17410                           
 17411                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 17412  07EE  319F  2781  3187   	fcall	_CC2500_InitSetREG
 17413                           
 17414                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 17415  07F1  319D  25EC  3187   	fcall	_CC2500_InitPATable
 17416                           
 17417                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 17418  07F4  319A  2210  3187   	fcall	_CC2500_ClearTXFIFO
 17419                           
 17420                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 17421  07F7  319A  220C  3187   	fcall	_CC2500_ClearRXFIFO
 17422                           
 17423                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 17424  07FA  319A  22D5  3187   	fcall	_CC2500_FrequencyCabr
 17425                           
 17426                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 17427  07FD  319A  2214         	fcall	_CC2500_SIDLEMode
 17428  07FF  0008               	return
 17429  0800                     __end_of_CC2500_PowerOnInitial:	
 17430                           
 17431                           	psect	text118
 17432  1A14                     __ptext118:	
 17433 ;; *************** function _CC2500_SIDLEMode *****************
 17434 ;; Defined at:
 17435 ;;		line 212 in file "../src/CC2500_B1.c"
 17436 ;; Parameters:    Size  Location     Type
 17437 ;;		None
 17438 ;; Auto vars:     Size  Location     Type
 17439 ;;		None
 17440 ;; Return value:  Size  Location     Type
 17441 ;;		None               void
 17442 ;; Registers used:
 17443 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17444 ;; Tracked objects:
 17445 ;;		On entry : 0/0
 17446 ;;		On exit  : 0/0
 17447 ;;		Unchanged: 0/0
 17448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17453 ;;Total ram usage:        0 bytes
 17454 ;; Hardware stack levels used:    1
 17455 ;; Hardware stack levels required when called:    7
 17456 ;; This function calls:
 17457 ;;		_CC2500_WriteCommand
 17458 ;; This function is called by:
 17459 ;;		_CC2500_PowerOnInitial
 17460 ;; This function uses a non-reentrant model
 17461 ;;
 17462                           
 17463                           
 17464                           ;psect for function _CC2500_SIDLEMode
 17465  1A14                     _CC2500_SIDLEMode:	
 17466                           
 17467                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 17468                           
 17469                           ;incstack = 0
 17470                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17471  1A14  3036               	movlw	54
 17472  1A15  319D  254A         	fcall	_CC2500_WriteCommand
 17473  1A17  0008               	return
 17474  1A18                     __end_of_CC2500_SIDLEMode:	
 17475                           
 17476                           	psect	text119
 17477  12D3                     __ptext119:	
 17478 ;; *************** function _CC2500_PowerRST *****************
 17479 ;; Defined at:
 17480 ;;		line 135 in file "../src/CC2500_B1.c"
 17481 ;; Parameters:    Size  Location     Type
 17482 ;;		None
 17483 ;; Auto vars:     Size  Location     Type
 17484 ;;		None
 17485 ;; Return value:  Size  Location     Type
 17486 ;;		None               void
 17487 ;; Registers used:
 17488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17489 ;; Tracked objects:
 17490 ;;		On entry : 0/0
 17491 ;;		On exit  : 0/0
 17492 ;;		Unchanged: 0/0
 17493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17497 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17498 ;;Total ram usage:        1 bytes
 17499 ;; Hardware stack levels used:    1
 17500 ;; Hardware stack levels required when called:    6
 17501 ;; This function calls:
 17502 ;;		_CC2500_WriteByte
 17503 ;;		_DelayTime_1us
 17504 ;;		_Timeout_Counter
 17505 ;;		_set_TimeoutCleared
 17506 ;; This function is called by:
 17507 ;;		_CC2500_PowerOnInitial
 17508 ;; This function uses a non-reentrant model
 17509 ;;
 17510                           
 17511                           
 17512                           ;psect for function _CC2500_PowerRST
 17513  12D3                     _CC2500_PowerRST:	
 17514                           
 17515                           ;CC2500_B1.c: 136: RC1 = 0;
 17516                           
 17517                           ;incstack = 0
 17518                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17519  12D3  0020               	movlb	0	; select bank0
 17520  12D4  108E               	bcf	14,1	;volatile
 17521                           
 17522                           ;CC2500_B1.c: 137: RC0 = 0;
 17523  12D5  100E               	bcf	14,0	;volatile
 17524                           
 17525                           ;CC2500_B1.c: 138: RC4 = 1;
 17526  12D6  160E               	bsf	14,4	;volatile
 17527                           
 17528                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 17529  12D7  300A               	movlw	10
 17530  12D8  00A0               	movwf	DelayTime_1us@count
 17531  12D9  3000               	movlw	0
 17532  12DA  00A1               	movwf	DelayTime_1us@count+1
 17533  12DB  319F  2734  3192   	fcall	_DelayTime_1us
 17534                           
 17535                           ;CC2500_B1.c: 140: RC4 = 0;
 17536  12DE  0020               	movlb	0	; select bank0
 17537  12DF  120E               	bcf	14,4	;volatile
 17538                           
 17539                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 17540  12E0  300A               	movlw	10
 17541  12E1  00A0               	movwf	DelayTime_1us@count
 17542  12E2  3000               	movlw	0
 17543  12E3  00A1               	movwf	DelayTime_1us@count+1
 17544  12E4  319F  2734  3192   	fcall	_DelayTime_1us
 17545                           
 17546                           ;CC2500_B1.c: 142: RC4 = 1;
 17547  12E7  0020               	movlb	0	; select bank0
 17548  12E8  160E               	bsf	14,4	;volatile
 17549                           
 17550                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 17551  12E9  3028               	movlw	40
 17552  12EA  00A0               	movwf	DelayTime_1us@count
 17553  12EB  3000               	movlw	0
 17554  12EC  00A1               	movwf	DelayTime_1us@count+1
 17555  12ED  319F  2734  3192   	fcall	_DelayTime_1us
 17556                           
 17557                           ;CC2500_B1.c: 144: RC4 = 0;
 17558  12F0  0020               	movlb	0	; select bank0
 17559  12F1  120E               	bcf	14,4	;volatile
 17560                           
 17561                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 17562  12F2  3030               	movlw	48
 17563  12F3  00A6               	movwf	??_CC2500_PowerRST
 17564  12F4  0826               	movf	??_CC2500_PowerRST,w
 17565  12F5  00FA               	movwf	_SPI0Buffer
 17566                           
 17567                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 17568  12F6  2AFA               	goto	l9551
 17569  12F7                     l9549:	
 17570                           
 17571                           ;CC2500_B1.c: 147: Timeout_Counter();
 17572  12F7  319C  24C4  3192   	fcall	_Timeout_Counter
 17573  12FA                     l9551:	
 17574  12FA  0020               	movlb	0	; select bank0
 17575  12FB  1D0E               	btfss	14,2	;volatile
 17576  12FC  2B00               	goto	l9555
 17577  12FD  0021               	movlb	1	; select bank1
 17578  12FE  1D2F               	btfss	(_myMain^(0+128)+15),2
 17579  12FF  2AF7               	goto	l9549
 17580  1300                     l9555:	
 17581                           
 17582                           ;CC2500_B1.c: 148: };
 17583                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 17584  1300  319A  221C  3192   	fcall	_set_TimeoutCleared
 17585                           
 17586                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 17587  1303  319C  2488  3192   	fcall	_CC2500_WriteByte
 17588                           
 17589                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 17590  1306  2B0A               	goto	l9561
 17591  1307                     l9559:	
 17592                           
 17593                           ;CC2500_B1.c: 152: Timeout_Counter();
 17594  1307  319C  24C4  3192   	fcall	_Timeout_Counter
 17595  130A                     l9561:	
 17596  130A  0020               	movlb	0	; select bank0
 17597  130B  1D0E               	btfss	14,2	;volatile
 17598  130C  2B10               	goto	l9565
 17599  130D  0021               	movlb	1	; select bank1
 17600  130E  1D2F               	btfss	(_myMain^(0+128)+15),2
 17601  130F  2B07               	goto	l9559
 17602  1310                     l9565:	
 17603                           
 17604                           ;CC2500_B1.c: 153: };
 17605                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 17606  1310  319A  221C         	fcall	_set_TimeoutCleared
 17607                           
 17608                           ;CC2500_B1.c: 155: RC0 = 0;
 17609  1312  0020               	movlb	0	; select bank0
 17610  1313  100E               	bcf	14,0	;volatile
 17611                           
 17612                           ;CC2500_B1.c: 156: RC4 = 1;
 17613  1314  160E               	bsf	14,4	;volatile
 17614  1315  0008               	return
 17615  1316                     __end_of_CC2500_PowerRST:	
 17616                           
 17617                           	psect	text120
 17618  1F81                     __ptext120:	
 17619 ;; *************** function _CC2500_InitSetREG *****************
 17620 ;; Defined at:
 17621 ;;		line 162 in file "../src/CC2500_B1.c"
 17622 ;; Parameters:    Size  Location     Type
 17623 ;;		None
 17624 ;; Auto vars:     Size  Location     Type
 17625 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17626 ;;  temp2           1    7[BANK0 ] unsigned char 
 17627 ;;  temp1           1    6[BANK0 ] unsigned char 
 17628 ;; Return value:  Size  Location     Type
 17629 ;;		None               void
 17630 ;; Registers used:
 17631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17632 ;; Tracked objects:
 17633 ;;		On entry : 0/0
 17634 ;;		On exit  : 0/0
 17635 ;;		Unchanged: 0/0
 17636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17638 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17640 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17641 ;;Total ram usage:        4 bytes
 17642 ;; Hardware stack levels used:    1
 17643 ;; Hardware stack levels required when called:    7
 17644 ;; This function calls:
 17645 ;;		_CC2500_WriteREG
 17646 ;; This function is called by:
 17647 ;;		_CC2500_PowerOnInitial
 17648 ;; This function uses a non-reentrant model
 17649 ;;
 17650                           
 17651                           
 17652                           ;psect for function _CC2500_InitSetREG
 17653  1F81                     _CC2500_InitSetREG:	
 17654                           
 17655                           ;CC2500_B1.c: 163: unsigned char loop_c;
 17656                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 17657                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 17658                           
 17659                           ;incstack = 0
 17660                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17661  1F81  0020               	movlb	0	; select bank0
 17662  1F82  01A8               	clrf	CC2500_InitSetREG@loop_c
 17663  1F83                     L10:	
 17664  1F83  302F               	movlw	47
 17665  1F84  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17666  1F85  1803               	btfsc	3,0
 17667  1F86  0008               	return
 17668                           
 17669                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 17670  1F87  0828               	movf	CC2500_InitSetREG@loop_c,w
 17671  1F88  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17672  1F89  0084               	movwf	4
 17673  1F8A  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17674  1F8B  1803               	skipnc
 17675  1F8C  3E01               	addlw	1
 17676  1F8D  0085               	movwf	5
 17677  1F8E  0800               	movf	0,w	;code access
 17678  1F8F  00A5               	movwf	??_CC2500_InitSetREG
 17679  1F90  0825               	movf	??_CC2500_InitSetREG,w
 17680  1F91  00A6               	movwf	CC2500_InitSetREG@temp1
 17681                           
 17682                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 17683  1F92  0828               	movf	CC2500_InitSetREG@loop_c,w
 17684  1F93  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17685  1F94  0084               	movwf	4
 17686  1F95  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17687  1F96  1803               	skipnc
 17688  1F97  3E01               	addlw	1
 17689  1F98  0085               	movwf	5
 17690  1F99  0800               	movf	0,w	;code access
 17691  1F9A  00A5               	movwf	??_CC2500_InitSetREG
 17692  1F9B  0825               	movf	??_CC2500_InitSetREG,w
 17693  1F9C  00A7               	movwf	CC2500_InitSetREG@temp2
 17694                           
 17695                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 17696  1F9D  0827               	movf	CC2500_InitSetREG@temp2,w
 17697  1F9E  00A5               	movwf	??_CC2500_InitSetREG
 17698  1F9F  0825               	movf	??_CC2500_InitSetREG,w
 17699  1FA0  00A2               	movwf	CC2500_WriteREG@value
 17700  1FA1  0826               	movf	CC2500_InitSetREG@temp1,w
 17701  1FA2  319E  2689  319F   	fcall	_CC2500_WriteREG
 17702  1FA5  3001               	movlw	1
 17703  1FA6  0020               	movlb	0	; select bank0
 17704  1FA7  00A5               	movwf	??_CC2500_InitSetREG
 17705  1FA8  0825               	movf	??_CC2500_InitSetREG,w
 17706  1FA9  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17707  1FAA  2F83               	goto	L10
 17708  1FAB                     __end_of_CC2500_InitSetREG:	
 17709                           
 17710                           	psect	text121
 17711  1DEC                     __ptext121:	
 17712 ;; *************** function _CC2500_InitPATable *****************
 17713 ;; Defined at:
 17714 ;;		line 177 in file "../src/CC2500_B1.c"
 17715 ;; Parameters:    Size  Location     Type
 17716 ;;		None
 17717 ;; Auto vars:     Size  Location     Type
 17718 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17719 ;;  temp            1    6[BANK0 ] unsigned char 
 17720 ;; Return value:  Size  Location     Type
 17721 ;;		None               void
 17722 ;; Registers used:
 17723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17724 ;; Tracked objects:
 17725 ;;		On entry : 0/0
 17726 ;;		On exit  : 0/0
 17727 ;;		Unchanged: 0/0
 17728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17730 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17732 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17733 ;;Total ram usage:        3 bytes
 17734 ;; Hardware stack levels used:    1
 17735 ;; Hardware stack levels required when called:    7
 17736 ;; This function calls:
 17737 ;;		_CC2500_WriteREG
 17738 ;; This function is called by:
 17739 ;;		_CC2500_PowerOnInitial
 17740 ;; This function uses a non-reentrant model
 17741 ;;
 17742                           
 17743                           
 17744                           ;psect for function _CC2500_InitPATable
 17745  1DEC                     _CC2500_InitPATable:	
 17746                           
 17747                           ;CC2500_B1.c: 178: unsigned char loop_d;
 17748                           ;CC2500_B1.c: 179: unsigned char temp;
 17749                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 17750                           
 17751                           ;incstack = 0
 17752                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17753  1DEC  0020               	movlb	0	; select bank0
 17754  1DED  01A7               	clrf	CC2500_InitPATable@loop_d
 17755  1DEE                     L11:	
 17756  1DEE  3008               	movlw	8
 17757  1DEF  0227               	subwf	CC2500_InitPATable@loop_d,w
 17758  1DF0  1803               	btfsc	3,0
 17759  1DF1  0008               	return
 17760                           
 17761                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 17762  1DF2  0827               	movf	CC2500_InitPATable@loop_d,w
 17763  1DF3  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17764  1DF4  0084               	movwf	4
 17765  1DF5  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17766  1DF6  1803               	skipnc
 17767  1DF7  3E01               	addlw	1
 17768  1DF8  0085               	movwf	5
 17769  1DF9  0800               	movf	0,w	;code access
 17770  1DFA  00A5               	movwf	??_CC2500_InitPATable
 17771  1DFB  0825               	movf	??_CC2500_InitPATable,w
 17772  1DFC  00A6               	movwf	CC2500_InitPATable@temp
 17773                           
 17774                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 17775  1DFD  0826               	movf	CC2500_InitPATable@temp,w
 17776  1DFE  00A5               	movwf	??_CC2500_InitPATable
 17777  1DFF  0825               	movf	??_CC2500_InitPATable,w
 17778  1E00  00A2               	movwf	CC2500_WriteREG@value
 17779  1E01  303E               	movlw	62
 17780  1E02  319E  2689  319D   	fcall	_CC2500_WriteREG
 17781  1E05  3001               	movlw	1
 17782  1E06  0020               	movlb	0	; select bank0
 17783  1E07  00A5               	movwf	??_CC2500_InitPATable
 17784  1E08  0825               	movf	??_CC2500_InitPATable,w
 17785  1E09  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17786  1E0A  2DEE               	goto	L11
 17787  1E0B                     __end_of_CC2500_InitPATable:	
 17788                           
 17789                           	psect	text122
 17790  1E89                     __ptext122:	
 17791 ;; *************** function _CC2500_WriteREG *****************
 17792 ;; Defined at:
 17793 ;;		line 254 in file "../src/CC2500_B1.c"
 17794 ;; Parameters:    Size  Location     Type
 17795 ;;  w_addr          1    wreg     unsigned char 
 17796 ;;  value           1    2[BANK0 ] unsigned char 
 17797 ;; Auto vars:     Size  Location     Type
 17798 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17799 ;; Return value:  Size  Location     Type
 17800 ;;		None               void
 17801 ;; Registers used:
 17802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17803 ;; Tracked objects:
 17804 ;;		On entry : 0/0
 17805 ;;		On exit  : 0/0
 17806 ;;		Unchanged: 0/0
 17807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17808 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17811 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17812 ;;Total ram usage:        3 bytes
 17813 ;; Hardware stack levels used:    1
 17814 ;; Hardware stack levels required when called:    6
 17815 ;; This function calls:
 17816 ;;		_CC2500_WriteByte
 17817 ;;		_Timeout_Counter
 17818 ;;		_set_TimeoutCleared
 17819 ;; This function is called by:
 17820 ;;		_CC2500_InitSetREG
 17821 ;;		_CC2500_InitPATable
 17822 ;; This function uses a non-reentrant model
 17823 ;;
 17824                           
 17825                           
 17826                           ;psect for function _CC2500_WriteREG
 17827  1E89                     _CC2500_WriteREG:	
 17828                           
 17829                           ;incstack = 0
 17830                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17831                           ;CC2500_WriteREG@w_addr stored from wreg
 17832  1E89  0020               	movlb	0	; select bank0
 17833  1E8A  00A4               	movwf	CC2500_WriteREG@w_addr
 17834                           
 17835                           ;CC2500_B1.c: 255: RC4 = 0;
 17836  1E8B  120E               	bcf	14,4	;volatile
 17837                           
 17838                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 17839  1E8C  0824               	movf	CC2500_WriteREG@w_addr,w
 17840  1E8D  00A3               	movwf	??_CC2500_WriteREG
 17841  1E8E  0823               	movf	??_CC2500_WriteREG,w
 17842  1E8F  00FA               	movwf	_SPI0Buffer
 17843                           
 17844                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 17845  1E90  2E94               	goto	l9299
 17846  1E91                     l9297:	
 17847                           
 17848                           ;CC2500_B1.c: 258: Timeout_Counter();
 17849  1E91  319C  24C4  319E   	fcall	_Timeout_Counter
 17850  1E94                     l9299:	
 17851  1E94  0020               	movlb	0	; select bank0
 17852  1E95  1D0E               	btfss	14,2	;volatile
 17853  1E96  2E9A               	goto	l9303
 17854  1E97  0021               	movlb	1	; select bank1
 17855  1E98  1D2F               	btfss	(_myMain^(0+128)+15),2
 17856  1E99  2E91               	goto	l9297
 17857  1E9A                     l9303:	
 17858                           
 17859                           ;CC2500_B1.c: 259: };
 17860                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 17861  1E9A  319A  221C  319E   	fcall	_set_TimeoutCleared
 17862                           
 17863                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 17864  1E9D  319C  2488  319E   	fcall	_CC2500_WriteByte
 17865                           
 17866                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 17867  1EA0  0020               	movlb	0	; select bank0
 17868  1EA1  0822               	movf	CC2500_WriteREG@value,w
 17869  1EA2  00A3               	movwf	??_CC2500_WriteREG
 17870  1EA3  0823               	movf	??_CC2500_WriteREG,w
 17871  1EA4  00FA               	movwf	_SPI0Buffer
 17872                           
 17873                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17874  1EA5  319C  2488         	fcall	_CC2500_WriteByte
 17875                           
 17876                           ;CC2500_B1.c: 265: RC4 = 1;
 17877  1EA7  0020               	movlb	0	; select bank0
 17878  1EA8  160E               	bsf	14,4	;volatile
 17879  1EA9  0008               	return
 17880  1EAA                     __end_of_CC2500_WriteREG:	
 17881                           
 17882                           	psect	text123
 17883  1AD5                     __ptext123:	
 17884 ;; *************** function _CC2500_FrequencyCabr *****************
 17885 ;; Defined at:
 17886 ;;		line 204 in file "../src/CC2500_B1.c"
 17887 ;; Parameters:    Size  Location     Type
 17888 ;;		None
 17889 ;; Auto vars:     Size  Location     Type
 17890 ;;		None
 17891 ;; Return value:  Size  Location     Type
 17892 ;;		None               void
 17893 ;; Registers used:
 17894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17895 ;; Tracked objects:
 17896 ;;		On entry : 0/0
 17897 ;;		On exit  : 0/0
 17898 ;;		Unchanged: 0/0
 17899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17904 ;;Total ram usage:        0 bytes
 17905 ;; Hardware stack levels used:    1
 17906 ;; Hardware stack levels required when called:    7
 17907 ;; This function calls:
 17908 ;;		_CC2500_WriteCommand
 17909 ;;		_DelayTime_1us
 17910 ;; This function is called by:
 17911 ;;		_CC2500_PowerOnInitial
 17912 ;; This function uses a non-reentrant model
 17913 ;;
 17914                           
 17915                           
 17916                           ;psect for function _CC2500_FrequencyCabr
 17917  1AD5                     _CC2500_FrequencyCabr:	
 17918                           
 17919                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 17920                           
 17921                           ;incstack = 0
 17922                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17923  1AD5  3033               	movlw	51
 17924  1AD6  319D  254A  319A   	fcall	_CC2500_WriteCommand
 17925                           
 17926                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 17927  1AD9  30E8               	movlw	232
 17928  1ADA  0020               	movlb	0	; select bank0
 17929  1ADB  00A0               	movwf	DelayTime_1us@count
 17930  1ADC  3003               	movlw	3
 17931  1ADD  00A1               	movwf	DelayTime_1us@count+1
 17932  1ADE  319F  2734         	fcall	_DelayTime_1us
 17933  1AE0  0008               	return
 17934  1AE1                     __end_of_CC2500_FrequencyCabr:	
 17935                           
 17936                           	psect	text124
 17937  1F34                     __ptext124:	
 17938 ;; *************** function _DelayTime_1us *****************
 17939 ;; Defined at:
 17940 ;;		line 323 in file "../src/CC2500_B1.c"
 17941 ;; Parameters:    Size  Location     Type
 17942 ;;  count           2    0[BANK0 ] int 
 17943 ;; Auto vars:     Size  Location     Type
 17944 ;;  j               2    4[BANK0 ] unsigned int 
 17945 ;;  i               2    2[BANK0 ] unsigned int 
 17946 ;; Return value:  Size  Location     Type
 17947 ;;		None               void
 17948 ;; Registers used:
 17949 ;;		wreg, status,2
 17950 ;; Tracked objects:
 17951 ;;		On entry : 0/0
 17952 ;;		On exit  : 0/0
 17953 ;;		Unchanged: 0/0
 17954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17955 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17956 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17958 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17959 ;;Total ram usage:        6 bytes
 17960 ;; Hardware stack levels used:    1
 17961 ;; Hardware stack levels required when called:    5
 17962 ;; This function calls:
 17963 ;;		Nothing
 17964 ;; This function is called by:
 17965 ;;		_CC2500_PowerRST
 17966 ;;		_CC2500_FrequencyCabr
 17967 ;; This function uses a non-reentrant model
 17968 ;;
 17969                           
 17970                           
 17971                           ;psect for function _DelayTime_1us
 17972  1F34                     _DelayTime_1us:	
 17973                           
 17974                           ;CC2500_B1.c: 324: unsigned int i, j;
 17975                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 17976                           
 17977                           ;incstack = 0
 17978                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17979  1F34  3001               	movlw	1
 17980  1F35  0020               	movlb	0	; select bank0
 17981  1F36  00A2               	movwf	DelayTime_1us@i
 17982  1F37  3000               	movlw	0
 17983  1F38  00A3               	movwf	DelayTime_1us@i+1
 17984  1F39                     l386:	
 17985  1F39  0821               	movf	DelayTime_1us@count+1,w
 17986  1F3A  0223               	subwf	DelayTime_1us@i+1,w
 17987  1F3B  1D03               	skipz
 17988  1F3C  2F3F               	goto	u9575
 17989  1F3D  0820               	movf	DelayTime_1us@count,w
 17990  1F3E  0222               	subwf	DelayTime_1us@i,w
 17991  1F3F                     u9575:	
 17992  1F3F  1803               	btfsc	3,0
 17993  1F40  0008               	return
 17994                           
 17995                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 17996  1F41  01A4               	clrf	DelayTime_1us@j
 17997  1F42  01A5               	clrf	DelayTime_1us@j+1
 17998  1F43  3000               	movlw	0
 17999  1F44  0225               	subwf	DelayTime_1us@j+1,w
 18000  1F45  3002               	movlw	2
 18001  1F46  1903               	skipnz
 18002  1F47  0224               	subwf	DelayTime_1us@j,w
 18003  1F48  1803               	btfsc	3,0
 18004  1F49  2F55               	goto	l9291
 18005  1F4A                     l9289:	
 18006  1F4A  3001               	movlw	1
 18007  1F4B  07A4               	addwf	DelayTime_1us@j,f
 18008  1F4C  3000               	movlw	0
 18009  1F4D  3DA5               	addwfc	DelayTime_1us@j+1,f
 18010  1F4E  3000               	movlw	0
 18011  1F4F  0225               	subwf	DelayTime_1us@j+1,w
 18012  1F50  3002               	movlw	2
 18013  1F51  1903               	skipnz
 18014  1F52  0224               	subwf	DelayTime_1us@j,w
 18015  1F53  1C03               	skipc
 18016  1F54  2F4A               	goto	l9289
 18017  1F55                     l9291:	
 18018  1F55  3001               	movlw	1
 18019  1F56  07A2               	addwf	DelayTime_1us@i,f
 18020  1F57  3000               	movlw	0
 18021  1F58  3DA3               	addwfc	DelayTime_1us@i+1,f
 18022  1F59  2F39               	goto	l386
 18023  1F5A                     __end_of_DelayTime_1us:	
 18024                           
 18025                           	psect	text125
 18026  1A10                     __ptext125:	
 18027 ;; *************** function _CC2500_ClearTXFIFO *****************
 18028 ;; Defined at:
 18029 ;;		line 190 in file "../src/CC2500_B1.c"
 18030 ;; Parameters:    Size  Location     Type
 18031 ;;		None
 18032 ;; Auto vars:     Size  Location     Type
 18033 ;;		None
 18034 ;; Return value:  Size  Location     Type
 18035 ;;		None               void
 18036 ;; Registers used:
 18037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18038 ;; Tracked objects:
 18039 ;;		On entry : 0/0
 18040 ;;		On exit  : 0/0
 18041 ;;		Unchanged: 0/0
 18042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18047 ;;Total ram usage:        0 bytes
 18048 ;; Hardware stack levels used:    1
 18049 ;; Hardware stack levels required when called:    7
 18050 ;; This function calls:
 18051 ;;		_CC2500_WriteCommand
 18052 ;; This function is called by:
 18053 ;;		_CC2500_PowerOnInitial
 18054 ;; This function uses a non-reentrant model
 18055 ;;
 18056                           
 18057                           
 18058                           ;psect for function _CC2500_ClearTXFIFO
 18059  1A10                     _CC2500_ClearTXFIFO:	
 18060                           
 18061                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 18062                           
 18063                           ;incstack = 0
 18064                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18065  1A10  303B               	movlw	59
 18066  1A11  319D  254A         	fcall	_CC2500_WriteCommand
 18067  1A13  0008               	return
 18068  1A14                     __end_of_CC2500_ClearTXFIFO:	
 18069                           
 18070                           	psect	text126
 18071  1A0C                     __ptext126:	
 18072 ;; *************** function _CC2500_ClearRXFIFO *****************
 18073 ;; Defined at:
 18074 ;;		line 197 in file "../src/CC2500_B1.c"
 18075 ;; Parameters:    Size  Location     Type
 18076 ;;		None
 18077 ;; Auto vars:     Size  Location     Type
 18078 ;;		None
 18079 ;; Return value:  Size  Location     Type
 18080 ;;		None               void
 18081 ;; Registers used:
 18082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18083 ;; Tracked objects:
 18084 ;;		On entry : 0/0
 18085 ;;		On exit  : 0/0
 18086 ;;		Unchanged: 0/0
 18087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18092 ;;Total ram usage:        0 bytes
 18093 ;; Hardware stack levels used:    1
 18094 ;; Hardware stack levels required when called:    7
 18095 ;; This function calls:
 18096 ;;		_CC2500_WriteCommand
 18097 ;; This function is called by:
 18098 ;;		_CC2500_PowerOnInitial
 18099 ;; This function uses a non-reentrant model
 18100 ;;
 18101                           
 18102                           
 18103                           ;psect for function _CC2500_ClearRXFIFO
 18104  1A0C                     _CC2500_ClearRXFIFO:	
 18105                           
 18106                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 18107                           
 18108                           ;incstack = 0
 18109                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18110  1A0C  303A               	movlw	58
 18111  1A0D  319D  254A         	fcall	_CC2500_WriteCommand
 18112  1A0F  0008               	return
 18113  1A10                     __end_of_CC2500_ClearRXFIFO:	
 18114                           
 18115                           	psect	text127
 18116  1D4A                     __ptext127:	
 18117 ;; *************** function _CC2500_WriteCommand *****************
 18118 ;; Defined at:
 18119 ;;		line 288 in file "../src/CC2500_B1.c"
 18120 ;; Parameters:    Size  Location     Type
 18121 ;;  command         1    wreg     unsigned char 
 18122 ;; Auto vars:     Size  Location     Type
 18123 ;;  command         1    3[BANK0 ] unsigned char 
 18124 ;; Return value:  Size  Location     Type
 18125 ;;		None               void
 18126 ;; Registers used:
 18127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18128 ;; Tracked objects:
 18129 ;;		On entry : 0/0
 18130 ;;		On exit  : 0/0
 18131 ;;		Unchanged: 0/0
 18132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18136 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18137 ;;Total ram usage:        2 bytes
 18138 ;; Hardware stack levels used:    1
 18139 ;; Hardware stack levels required when called:    6
 18140 ;; This function calls:
 18141 ;;		_CC2500_WriteByte
 18142 ;;		_Timeout_Counter
 18143 ;;		_set_TimeoutCleared
 18144 ;; This function is called by:
 18145 ;;		_CC2500_TxData
 18146 ;;		_CC2500_ClearTXFIFO
 18147 ;;		_CC2500_ClearRXFIFO
 18148 ;;		_CC2500_FrequencyCabr
 18149 ;;		_CC2500_SIDLEMode
 18150 ;;		_setRF_Main
 18151 ;;		_RF_RxDisable
 18152 ;; This function uses a non-reentrant model
 18153 ;;
 18154                           
 18155                           
 18156                           ;psect for function _CC2500_WriteCommand
 18157  1D4A                     _CC2500_WriteCommand:	
 18158                           
 18159                           ;incstack = 0
 18160                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18161                           ;CC2500_WriteCommand@command stored from wreg
 18162  1D4A  0020               	movlb	0	; select bank0
 18163  1D4B  00A3               	movwf	CC2500_WriteCommand@command
 18164                           
 18165                           ;CC2500_B1.c: 289: RC4 = 0;
 18166  1D4C  120E               	bcf	14,4	;volatile
 18167                           
 18168                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 18169  1D4D  0823               	movf	CC2500_WriteCommand@command,w
 18170  1D4E  00A2               	movwf	??_CC2500_WriteCommand
 18171  1D4F  0822               	movf	??_CC2500_WriteCommand,w
 18172  1D50  00FA               	movwf	_SPI0Buffer
 18173                           
 18174                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 18175  1D51  2D55               	goto	l9031
 18176  1D52                     l9029:	
 18177                           
 18178                           ;CC2500_B1.c: 293: Timeout_Counter();
 18179  1D52  319C  24C4  319D   	fcall	_Timeout_Counter
 18180  1D55                     l9031:	
 18181  1D55  0020               	movlb	0	; select bank0
 18182  1D56  1D0E               	btfss	14,2	;volatile
 18183  1D57  2D5B               	goto	l9035
 18184  1D58  0021               	movlb	1	; select bank1
 18185  1D59  1D2F               	btfss	(_myMain^(0+128)+15),2
 18186  1D5A  2D52               	goto	l9029
 18187  1D5B                     l9035:	
 18188                           
 18189                           ;CC2500_B1.c: 294: };
 18190                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 18191  1D5B  319A  221C  319D   	fcall	_set_TimeoutCleared
 18192                           
 18193                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 18194  1D5E  319C  2488         	fcall	_CC2500_WriteByte
 18195                           
 18196                           ;CC2500_B1.c: 298: RC4 = 1;
 18197  1D60  0020               	movlb	0	; select bank0
 18198  1D61  160E               	bsf	14,4	;volatile
 18199  1D62  0008               	return
 18200  1D63                     __end_of_CC2500_WriteCommand:	
 18201                           
 18202                           	psect	text128
 18203  1A1C                     __ptext128:	
 18204 ;; *************** function _set_TimeoutCleared *****************
 18205 ;; Defined at:
 18206 ;;		line 217 in file "../src/Main_B1.c"
 18207 ;; Parameters:    Size  Location     Type
 18208 ;;		None
 18209 ;; Auto vars:     Size  Location     Type
 18210 ;;		None
 18211 ;; Return value:  Size  Location     Type
 18212 ;;		None               void
 18213 ;; Registers used:
 18214 ;;		status,2
 18215 ;; Tracked objects:
 18216 ;;		On entry : 0/0
 18217 ;;		On exit  : 0/0
 18218 ;;		Unchanged: 0/0
 18219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18224 ;;Total ram usage:        0 bytes
 18225 ;; Hardware stack levels used:    1
 18226 ;; Hardware stack levels required when called:    5
 18227 ;; This function calls:
 18228 ;;		Nothing
 18229 ;; This function is called by:
 18230 ;;		_CC2500_TxData
 18231 ;;		_CC2500_RxData
 18232 ;;		_CC2500_PowerRST
 18233 ;;		_CC2500_WriteREG
 18234 ;;		_CC2500_WriteCommand
 18235 ;;		_CC2500_ReadStatus
 18236 ;;		_getAD
 18237 ;;		_TouchPower
 18238 ;;		_CC2500_ReadREG
 18239 ;; This function uses a non-reentrant model
 18240 ;;
 18241                           
 18242                           
 18243                           ;psect for function _set_TimeoutCleared
 18244  1A1C                     _set_TimeoutCleared:	
 18245                           
 18246                           ;Main_B1.c: 218: myMain.Timeout = 0;
 18247                           
 18248                           ;incstack = 0
 18249                           ; Regs used in _set_TimeoutCleared: [status,2]
 18250  1A1C  0021               	movlb	1	; select bank1
 18251  1A1D  112F               	bcf	(_myMain^(0+128)+15),2
 18252                           
 18253                           ;Main_B1.c: 219: myMain.Timeout_Counter = 0;
 18254  1A1E  01B0               	clrf	(_myMain^(0+128)+16)
 18255  1A1F  01B1               	clrf	((_myMain+1)^(0+128)+16)
 18256  1A20  0008               	return
 18257  1A21                     __end_of_set_TimeoutCleared:	
 18258                           
 18259                           	psect	text129
 18260  1CC4                     __ptext129:	
 18261 ;; *************** function _Timeout_Counter *****************
 18262 ;; Defined at:
 18263 ;;		line 208 in file "../src/Main_B1.c"
 18264 ;; Parameters:    Size  Location     Type
 18265 ;;		None
 18266 ;; Auto vars:     Size  Location     Type
 18267 ;;		None
 18268 ;; Return value:  Size  Location     Type
 18269 ;;		None               void
 18270 ;; Registers used:
 18271 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18272 ;; Tracked objects:
 18273 ;;		On entry : 0/0
 18274 ;;		On exit  : 0/0
 18275 ;;		Unchanged: 0/0
 18276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18281 ;;Total ram usage:        0 bytes
 18282 ;; Hardware stack levels used:    1
 18283 ;; Hardware stack levels required when called:    5
 18284 ;; This function calls:
 18285 ;;		Nothing
 18286 ;; This function is called by:
 18287 ;;		_CC2500_TxData
 18288 ;;		_CC2500_RxData
 18289 ;;		_CC2500_PowerRST
 18290 ;;		_CC2500_WriteREG
 18291 ;;		_CC2500_WriteCommand
 18292 ;;		_CC2500_ReadStatus
 18293 ;;		_getAD
 18294 ;;		_TouchPower
 18295 ;;		_CC2500_ReadREG
 18296 ;; This function uses a non-reentrant model
 18297 ;;
 18298                           
 18299                           
 18300                           ;psect for function _Timeout_Counter
 18301  1CC4                     _Timeout_Counter:	
 18302                           
 18303                           ;Main_B1.c: 209: myMain.Timeout_Counter++;
 18304                           
 18305                           ;incstack = 0
 18306                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18307  1CC4  3001               	movlw	1
 18308  1CC5  0021               	movlb	1	; select bank1
 18309  1CC6  07B0               	addwf	(_myMain^(0+128)+16),f
 18310  1CC7  3000               	movlw	0
 18311  1CC8  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 18312                           
 18313                           ;Main_B1.c: 210: if (myMain.Timeout_Counter == 10000) {
 18314  1CC9  3010               	movlw	16
 18315  1CCA  3EA0               	addlw	_myMain& (0+255)
 18316  1CCB  0086               	movwf	6
 18317  1CCC  0187               	clrf	7
 18318  1CCD  3F40               	moviw [0]fsr1
 18319  1CCE  3A10               	xorlw	16
 18320  1CCF  1D03               	skipz
 18321  1CD0  2CD3               	goto	u9075
 18322  1CD1  3F41               	moviw [1]fsr1
 18323  1CD2  3A27               	xorlw	39
 18324  1CD3                     u9075:	
 18325  1CD3  1D03               	skipz
 18326  1CD4  0008               	return
 18327                           
 18328                           ;Main_B1.c: 211: myMain.Timeout_Counter = 0;
 18329  1CD5  01B0               	clrf	(_myMain^(0+128)+16)
 18330  1CD6  01B1               	clrf	((_myMain+1)^(0+128)+16)
 18331                           
 18332                           ;Main_B1.c: 212: myMain.Timeout = 1;
 18333  1CD7  152F               	bsf	(_myMain^(0+128)+15),2
 18334  1CD8  0008               	return
 18335  1CD9                     __end_of_Timeout_Counter:	
 18336                           
 18337                           	psect	text130
 18338  1C88                     __ptext130:	
 18339 ;; *************** function _CC2500_WriteByte *****************
 18340 ;; Defined at:
 18341 ;;		line 222 in file "../src/CC2500_B1.c"
 18342 ;; Parameters:    Size  Location     Type
 18343 ;;		None
 18344 ;; Auto vars:     Size  Location     Type
 18345 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18346 ;; Return value:  Size  Location     Type
 18347 ;;		None               void
 18348 ;; Registers used:
 18349 ;;		wreg, status,2, status,0
 18350 ;; Tracked objects:
 18351 ;;		On entry : 0/0
 18352 ;;		On exit  : 0/0
 18353 ;;		Unchanged: 0/0
 18354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18358 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18359 ;;Total ram usage:        2 bytes
 18360 ;; Hardware stack levels used:    1
 18361 ;; Hardware stack levels required when called:    5
 18362 ;; This function calls:
 18363 ;;		Nothing
 18364 ;; This function is called by:
 18365 ;;		_CC2500_TxData
 18366 ;;		_CC2500_RxData
 18367 ;;		_CC2500_PowerRST
 18368 ;;		_CC2500_WriteREG
 18369 ;;		_CC2500_WriteCommand
 18370 ;;		_CC2500_ReadStatus
 18371 ;;		_CC2500_ReadREG
 18372 ;; This function uses a non-reentrant model
 18373 ;;
 18374                           
 18375                           
 18376                           ;psect for function _CC2500_WriteByte
 18377  1C88                     _CC2500_WriteByte:	
 18378                           
 18379                           ;CC2500_B1.c: 223: unsigned char loop_a;
 18380                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 18381                           
 18382                           ;incstack = 0
 18383                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18384  1C88  0020               	movlb	0	; select bank0
 18385  1C89  01A1               	clrf	CC2500_WriteByte@loop_a
 18386  1C8A                     L12:	
 18387  1C8A  3008               	movlw	8
 18388  1C8B  0221               	subwf	CC2500_WriteByte@loop_a,w
 18389  1C8C  1803               	btfsc	3,0
 18390  1C8D  0008               	return
 18391                           
 18392                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 18393  1C8E  1FFA               	btfss	_SPI0Buffer,7
 18394  1C8F  2C92               	goto	l342
 18395                           
 18396                           ;CC2500_B1.c: 226: RC0 = 1;
 18397  1C90  140E               	bsf	14,0	;volatile
 18398  1C91  2C93               	goto	l343
 18399  1C92                     l342:	
 18400                           
 18401                           ;CC2500_B1.c: 227: else
 18402                           ;CC2500_B1.c: 228: RC0 = 0;
 18403  1C92  100E               	bcf	14,0	;volatile
 18404  1C93                     l343:	
 18405                           
 18406                           ;CC2500_B1.c: 229: RC1 = 1;
 18407  1C93  148E               	bsf	14,1	;volatile
 18408                           
 18409                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 18410  1C94  1003               	clrc
 18411  1C95  0DFA               	rlf	_SPI0Buffer,f
 18412                           
 18413                           ;CC2500_B1.c: 231: RC1 = 0;
 18414  1C96  108E               	bcf	14,1	;volatile
 18415  1C97  3001               	movlw	1
 18416  1C98  00A0               	movwf	??_CC2500_WriteByte
 18417  1C99  0820               	movf	??_CC2500_WriteByte,w
 18418  1C9A  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18419  1C9B  2C8A               	goto	L12
 18420  1C9C                     __end_of_CC2500_WriteByte:	
 18421                           
 18422                           	psect	text131
 18423  139E                     __ptext131:	
 18424 ;; *************** function _Buzzer_Main *****************
 18425 ;; Defined at:
 18426 ;;		line 46 in file "../src/Buzzer_B1.c"
 18427 ;; Parameters:    Size  Location     Type
 18428 ;;		None
 18429 ;; Auto vars:     Size  Location     Type
 18430 ;;		None
 18431 ;; Return value:  Size  Location     Type
 18432 ;;		None               void
 18433 ;; Registers used:
 18434 ;;		wreg, status,2, status,0
 18435 ;; Tracked objects:
 18436 ;;		On entry : 0/0
 18437 ;;		On exit  : 0/0
 18438 ;;		Unchanged: 0/0
 18439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18443 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18444 ;;Total ram usage:        1 bytes
 18445 ;; Hardware stack levels used:    1
 18446 ;; Hardware stack levels required when called:    5
 18447 ;; This function calls:
 18448 ;;		Nothing
 18449 ;; This function is called by:
 18450 ;;		_main
 18451 ;; This function uses a non-reentrant model
 18452 ;;
 18453                           
 18454                           
 18455                           ;psect for function _Buzzer_Main
 18456  139E                     _Buzzer_Main:	
 18457                           
 18458                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18459                           
 18460                           ;incstack = 0
 18461                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18462  139E  0021               	movlb	1	; select bank1
 18463  139F  1CB2               	btfss	_Buz1^(0+128),1
 18464  13A0  0008               	return
 18465                           
 18466                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18467  13A1  3001               	movlw	1
 18468  13A2  07B3               	addwf	(_Buz1^(0+128)+1),f
 18469  13A3  3000               	movlw	0
 18470  13A4  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 18471                           
 18472                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18473  13A5  0839               	movf	((_Buz1+1)^(0+128)+6),w
 18474  13A6  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 18475  13A7  1D03               	skipz
 18476  13A8  2BAB               	goto	u10975
 18477  13A9  0838               	movf	(_Buz1^(0+128)+6),w
 18478  13AA  0233               	subwf	(_Buz1^(0+128)+1),w
 18479  13AB                     u10975:	
 18480  13AB  1C03               	skipc
 18481  13AC  0008               	return
 18482                           
 18483                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18484  13AD  01B3               	clrf	(_Buz1^(0+128)+1)
 18485  13AE  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 18486                           
 18487                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18488  13AF  12B2               	bcf	_Buz1^(0+128),5
 18489  13B0  0020               	movlb	0	; select bank0
 18490  13B1  1D8D               	btfss	13,3	;volatile
 18491  13B2  2BB5               	goto	l10185
 18492  13B3  0021               	movlb	1	; select bank1
 18493  13B4  16B2               	bsf	_Buz1^(0+128),5
 18494  13B5                     l10185:	
 18495                           
 18496                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18497  13B5  0021               	movlb	1	; select bank1
 18498  13B6  1AB2               	btfsc	_Buz1^(0+128),5
 18499  13B7  2BE1               	goto	l112
 18500                           
 18501                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18502  13B8  08B5               	movf	(_Buz1^(0+128)+3),f
 18503  13B9  1D03               	skipz
 18504  13BA  2BDD               	goto	l113
 18505                           
 18506                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18507  13BB  1DB2               	btfss	_Buz1^(0+128),3
 18508  13BC  2BCB               	goto	l114
 18509                           
 18510                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18511  13BD  11B2               	bcf	_Buz1^(0+128),3
 18512                           
 18513                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18514  13BE  0836               	movf	(_Buz1^(0+128)+4),w
 18515  13BF  0020               	movlb	0	; select bank0
 18516  13C0  00A0               	movwf	??_Buzzer_Main
 18517  13C1  0820               	movf	??_Buzzer_Main,w
 18518  13C2  0021               	movlb	1	; select bank1
 18519  13C3  00B5               	movwf	(_Buz1^(0+128)+3)
 18520                           
 18521                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18522  13C4  083B               	movf	((_Buz1+1)^(0+128)+8),w
 18523  13C5  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 18524  13C6  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 18525  13C7  083A               	movf	(_Buz1^(0+128)+8),w
 18526  13C8  01B8               	clrf	(_Buz1^(0+128)+6)
 18527  13C9  07B8               	addwf	(_Buz1^(0+128)+6),f
 18528                           
 18529                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18530  13CA  0008               	return
 18531  13CB                     l114:	
 18532  13CB  1E32               	btfss	_Buz1^(0+128),4
 18533  13CC  2BDB               	goto	l116
 18534                           
 18535                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18536  13CD  1232               	bcf	_Buz1^(0+128),4
 18537                           
 18538                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18539  13CE  0837               	movf	(_Buz1^(0+128)+5),w
 18540  13CF  0020               	movlb	0	; select bank0
 18541  13D0  00A0               	movwf	??_Buzzer_Main
 18542  13D1  0820               	movf	??_Buzzer_Main,w
 18543  13D2  0021               	movlb	1	; select bank1
 18544  13D3  00B5               	movwf	(_Buz1^(0+128)+3)
 18545                           
 18546                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18547  13D4  083D               	movf	((_Buz1+1)^(0+128)+10),w
 18548  13D5  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 18549  13D6  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 18550  13D7  083C               	movf	(_Buz1^(0+128)+10),w
 18551  13D8  01B8               	clrf	(_Buz1^(0+128)+6)
 18552  13D9  07B8               	addwf	(_Buz1^(0+128)+6),f
 18553                           
 18554                           ;Buzzer_B1.c: 62: } else {
 18555  13DA  0008               	return
 18556  13DB                     l116:	
 18557                           
 18558                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18559  13DB  10B2               	bcf	_Buz1^(0+128),1
 18560                           
 18561                           ;Buzzer_B1.c: 64: }
 18562                           ;Buzzer_B1.c: 65: } else {
 18563  13DC  0008               	return
 18564  13DD                     l113:	
 18565                           
 18566                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18567  13DD  16B2               	bsf	_Buz1^(0+128),5
 18568                           
 18569                           ;Buzzer_B1.c: 68: RB3 = 1;
 18570  13DE  0020               	movlb	0	; select bank0
 18571  13DF  158D               	bsf	13,3	;volatile
 18572                           
 18573                           ;Buzzer_B1.c: 69: }
 18574                           ;Buzzer_B1.c: 70: } else {
 18575  13E0  0008               	return
 18576  13E1                     l112:	
 18577                           
 18578                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18579  13E1  12B2               	bcf	_Buz1^(0+128),5
 18580                           
 18581                           ;Buzzer_B1.c: 73: RB3 = 0;
 18582  13E2  0020               	movlb	0	; select bank0
 18583  13E3  118D               	bcf	13,3	;volatile
 18584                           
 18585                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18586  13E4  3001               	movlw	1
 18587  13E5  0021               	movlb	1	; select bank1
 18588  13E6  02B5               	subwf	(_Buz1^(0+128)+3),f
 18589  13E7  0008               	return
 18590  13E8                     __end_of_Buzzer_Main:	
 18591                           
 18592                           	psect	text132
 18593  19FA                     __ptext132:	
 18594 ;; *************** function _Buzzer_Initialization *****************
 18595 ;; Defined at:
 18596 ;;		line 11 in file "../src/Buzzer_B1.c"
 18597 ;; Parameters:    Size  Location     Type
 18598 ;;		None
 18599 ;; Auto vars:     Size  Location     Type
 18600 ;;		None
 18601 ;; Return value:  Size  Location     Type
 18602 ;;		None               void
 18603 ;; Registers used:
 18604 ;;		None
 18605 ;; Tracked objects:
 18606 ;;		On entry : 0/0
 18607 ;;		On exit  : 0/0
 18608 ;;		Unchanged: 0/0
 18609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18614 ;;Total ram usage:        0 bytes
 18615 ;; Hardware stack levels used:    1
 18616 ;; Hardware stack levels required when called:    5
 18617 ;; This function calls:
 18618 ;;		Nothing
 18619 ;; This function is called by:
 18620 ;;		_main
 18621 ;; This function uses a non-reentrant model
 18622 ;;
 18623                           
 18624                           
 18625                           ;psect for function _Buzzer_Initialization
 18626  19FA                     _Buzzer_Initialization:	
 18627                           
 18628                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18629                           
 18630                           ;incstack = 0
 18631                           ; Regs used in _Buzzer_Initialization: []
 18632  19FA  0021               	movlb	1	; select bank1
 18633  19FB  1432               	bsf	_Buz1^(0+128),0
 18634  19FC  0008               	return
 18635  19FD                     __end_of_Buzzer_Initialization:	
 18636                           
 18637                           	psect	intentry
 18638  0004                     __pintentry:	
 18639 ;; *************** function _ISR *****************
 18640 ;; Defined at:
 18641 ;;		line 107 in file "../src/MCU_B1.c"
 18642 ;; Parameters:    Size  Location     Type
 18643 ;;		None
 18644 ;; Auto vars:     Size  Location     Type
 18645 ;;		None
 18646 ;; Return value:  Size  Location     Type
 18647 ;;		None               void
 18648 ;; Registers used:
 18649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18650 ;; Tracked objects:
 18651 ;;		On entry : 0/0
 18652 ;;		On exit  : 0/0
 18653 ;;		Unchanged: 0/0
 18654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18657 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18658 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18659 ;;Total ram usage:        1 bytes
 18660 ;; Hardware stack levels used:    1
 18661 ;; Hardware stack levels required when called:    4
 18662 ;; This function calls:
 18663 ;;		_IOC_ISR
 18664 ;;		_TMR0_ISR
 18665 ;; This function is called by:
 18666 ;;		Interrupt level 1
 18667 ;; This function uses a non-reentrant model
 18668 ;;
 18669                           
 18670  0004                     _ISR:	
 18671                           
 18672                           ;incstack = 0
 18673                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18674  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18675  0005  3180               	pagesel	$
 18676  0006  0020               	movlb	0	; select bank0
 18677  0007  087F               	movf	127,w
 18678  0008  00F5               	movwf	??_ISR
 18679                           
 18680                           ;MCU_B1.c: 109: IOC_ISR();
 18681  0009  319B  2305  3180   	fcall	_IOC_ISR
 18682                           
 18683                           ;MCU_B1.c: 111: TMR0_ISR();
 18684  000C  319F  275A         	fcall	_TMR0_ISR
 18685  000E  0875               	movf	??_ISR,w
 18686  000F  0020               	movlb	0	; select bank0
 18687  0010  00FF               	movwf	127
 18688  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18689  0012  0009               	retfie
 18690  0013                     __end_of_ISR:	
 18691                           
 18692                           	psect	text134
 18693  1F5A                     __ptext134:	
 18694 ;; *************** function _TMR0_ISR *****************
 18695 ;; Defined at:
 18696 ;;		line 135 in file "../src/MCU_B1.c"
 18697 ;; Parameters:    Size  Location     Type
 18698 ;;		None
 18699 ;; Auto vars:     Size  Location     Type
 18700 ;;		None
 18701 ;; Return value:  Size  Location     Type
 18702 ;;		None               void
 18703 ;; Registers used:
 18704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18705 ;; Tracked objects:
 18706 ;;		On entry : 0/0
 18707 ;;		On exit  : 0/0
 18708 ;;		Unchanged: 0/0
 18709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18714 ;;Total ram usage:        0 bytes
 18715 ;; Hardware stack levels used:    1
 18716 ;; Hardware stack levels required when called:    2
 18717 ;; This function calls:
 18718 ;;		_setDimmerLights_IntrControl
 18719 ;; This function is called by:
 18720 ;;		_ISR
 18721 ;; This function uses a non-reentrant model
 18722 ;;
 18723                           
 18724                           
 18725                           ;psect for function _TMR0_ISR
 18726  1F5A                     _TMR0_ISR:	
 18727                           
 18728                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 18729                           
 18730                           ;incstack = 0
 18731                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18732  1F5A  1E8B               	btfss	11,5	;volatile
 18733  1F5B  0008               	return
 18734  1F5C  1D0B               	btfss	11,2	;volatile
 18735  1F5D  0008               	return
 18736                           
 18737                           ;MCU_B1.c: 138: TMR0 = (256-190);
 18738  1F5E  3042               	movlw	66
 18739  1F5F  0020               	movlb	0	; select bank0
 18740  1F60  0095               	movwf	21	;volatile
 18741                           
 18742                           ;MCU_B1.c: 139: TMR0IF = 0;
 18743  1F61  110B               	bcf	11,2	;volatile
 18744                           
 18745                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 18746  1F62  3001               	movlw	1
 18747  1F63  3180  204D  319F   	fcall	_setDimmerLights_IntrControl
 18748                           
 18749                           ;MCU_B1.c: 149: setDimmerLights_IntrControl(2);
 18750  1F66  3002               	movlw	2
 18751  1F67  3180  204D  319F   	fcall	_setDimmerLights_IntrControl
 18752                           
 18753                           ;MCU_B1.c: 160: Timer0.Count++;
 18754  1F6A  3001               	movlw	1
 18755  1F6B  0022               	movlb	2	; select bank2
 18756  1F6C  07B6               	addwf	(_Timer0^(0+256)+1),f
 18757  1F6D  3000               	movlw	0
 18758  1F6E  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 18759                           
 18760                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 18761  1F6F  3001               	movlw	1
 18762  1F70  3E35               	addlw	_Timer0& (0+255)
 18763  1F71  0086               	movwf	6
 18764  1F72  3001               	movlw	1	; select bank2/3
 18765  1F73  0087               	movwf	7
 18766  1F74  3F40               	moviw [0]fsr1
 18767  1F75  3A64               	xorlw	100
 18768  1F76  1D03               	skipz
 18769  1F77  2F7A               	goto	u786_25
 18770  1F78  3F41               	moviw [1]fsr1
 18771  1F79  3A00               	xorlw	0
 18772  1F7A                     u786_25:	
 18773  1F7A  1D03               	skipz
 18774  1F7B  0008               	return
 18775                           
 18776                           ;MCU_B1.c: 162: Timer0.Count = 0;
 18777  1F7C  01B6               	clrf	(_Timer0^(0+256)+1)
 18778  1F7D  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 18779                           
 18780                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 18781  1F7E  0021               	movlb	1	; select bank1
 18782  1F7F  14A0               	bsf	_myMain^(0+128),1
 18783  1F80  0008               	return
 18784  1F81                     __end_of_TMR0_ISR:	
 18785                           
 18786                           	psect	text135
 18787  004D                     __ptext135:	
 18788 ;; *************** function _setDimmerLights_IntrControl *****************
 18789 ;; Defined at:
 18790 ;;		line 94 in file "../src/Dimmer_B1.c"
 18791 ;; Parameters:    Size  Location     Type
 18792 ;;  lights          1    wreg     unsigned char 
 18793 ;; Auto vars:     Size  Location     Type
 18794 ;;  lights          1    4[COMMON] unsigned char 
 18795 ;; Return value:  Size  Location     Type
 18796 ;;		None               void
 18797 ;; Registers used:
 18798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18799 ;; Tracked objects:
 18800 ;;		On entry : 0/0
 18801 ;;		On exit  : 0/0
 18802 ;;		Unchanged: 0/0
 18803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18806 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18807 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18808 ;;Total ram usage:        3 bytes
 18809 ;; Hardware stack levels used:    1
 18810 ;; Hardware stack levels required when called:    1
 18811 ;; This function calls:
 18812 ;;		_DimmerIntrPointSelect
 18813 ;;		i1_setLoad_StatusOff
 18814 ;; This function is called by:
 18815 ;;		_TMR0_ISR
 18816 ;; This function uses a non-reentrant model
 18817 ;;
 18818                           
 18819                           
 18820                           ;psect for function _setDimmerLights_IntrControl
 18821  004D                     _setDimmerLights_IntrControl:	
 18822                           
 18823                           ;incstack = 0
 18824                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18825                           ;setDimmerLights_IntrControl@lights stored from wreg
 18826  004D  00F4               	movwf	setDimmerLights_IntrControl@lights
 18827                           
 18828                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 18829  004E  0874               	movf	setDimmerLights_IntrControl@lights,w
 18830  004F  319C  2406  3180   	fcall	_DimmerIntrPointSelect
 18831                           
 18832                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 18833  0052  0877               	movf	_DimmerLightsIntr,w
 18834  0053  0086               	movwf	6
 18835  0054  3001               	movlw	1	; select bank2/3
 18836  0055  0087               	movwf	7
 18837  0056  1C01               	btfss	1,0
 18838  0057  28A7               	goto	i1l7335
 18839                           
 18840                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 18841  0058  3001               	movlw	1
 18842  0059  00F2               	movwf	??_setDimmerLights_IntrControl
 18843  005A  0877               	movf	_DimmerLightsIntr,w
 18844  005B  3E03               	addlw	3
 18845  005C  0086               	movwf	6
 18846  005D  3001               	movlw	1	; select bank2/3
 18847  005E  0087               	movwf	7
 18848  005F  0872               	movf	??_setDimmerLights_IntrControl,w
 18849  0060  0781               	addwf	1,f
 18850                           
 18851                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r->Correction)) {
 18852  0061  0876               	movf	_Dimmer,w
 18853  0062  3E02               	addlw	2
 18854  0063  0086               	movwf	6
 18855  0064  0187               	clrf	7
 18856  0065  0877               	movf	_DimmerLightsIntr,w
 18857  0066  3E04               	addlw	4
 18858  0067  0084               	movwf	4
 18859  0068  3001               	movlw	1	; select bank2/3
 18860  0069  0085               	movwf	5
 18861  006A  0800               	movf	0,w
 18862  006B  0701               	addwf	1,w
 18863  006C  00F2               	movwf	??_setDimmerLights_IntrControl
 18864  006D  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18865  006E  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 18866  006F  0877               	movf	_DimmerLightsIntr,w
 18867  0070  3E03               	addlw	3
 18868  0071  0086               	movwf	6
 18869  0072  3001               	movlw	1	; select bank2/3
 18870  0073  0087               	movwf	7
 18871  0074  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18872  0075  3A80               	xorlw	128
 18873  0076  3C80               	sublw	128
 18874  0077  1D03               	skipz
 18875  0078  287B               	goto	u655_25
 18876  0079  0872               	movf	??_setDimmerLights_IntrControl,w
 18877  007A  0201               	subwf	1,w
 18878  007B                     u655_25:	
 18879  007B  1C03               	skipc
 18880  007C  29B5               	goto	i1l7399
 18881                           
 18882                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 18883  007D  0877               	movf	_DimmerLightsIntr,w
 18884  007E  3E03               	addlw	3
 18885  007F  0086               	movwf	6
 18886  0080  3001               	movlw	1	; select bank2/3
 18887  0081  0087               	movwf	7
 18888  0082  0181               	clrf	1
 18889                           
 18890                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 18891  0083  0877               	movf	_DimmerLightsIntr,w
 18892  0084  0086               	movwf	6
 18893  0085  3001               	movlw	1	; select bank2/3
 18894  0086  0087               	movwf	7
 18895  0087  1001               	bcf	1,0
 18896                           
 18897                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 18898  0088  0877               	movf	_DimmerLightsIntr,w
 18899  0089  0086               	movwf	6
 18900  008A  3001               	movlw	1	; select bank2/3
 18901  008B  0087               	movwf	7
 18902  008C  1F01               	btfss	1,6
 18903  008D  29B5               	goto	i1l7399
 18904                           
 18905                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 18906  008E  0877               	movf	_DimmerLightsIntr,w
 18907  008F  3E08               	addlw	8
 18908  0090  0086               	movwf	6
 18909  0091  3001               	movlw	1	; select bank2/3
 18910  0092  0087               	movwf	7
 18911  0093  1401               	bsf	1,0
 18912                           
 18913                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 18914  0094  0877               	movf	_DimmerLightsIntr,w
 18915  0095  3E08               	addlw	8
 18916  0096  0086               	movwf	6
 18917  0097  3001               	movlw	1	; select bank2/3
 18918  0098  0087               	movwf	7
 18919  0099  1681               	bsf	1,5
 18920                           
 18921                           ;Dimmer_B1.c: 107: if (lights == 1) {
 18922  009A  0874               	movf	setDimmerLights_IntrControl@lights,w
 18923  009B  3A01               	xorlw	1
 18924  009C  1D03               	skipz
 18925  009D  28A0               	goto	i1l7331
 18926                           
 18927                           ;Dimmer_B1.c: 108: RA7 = 1;
 18928  009E  0020               	movlb	0	; select bank0
 18929  009F  178C               	bsf	12,7	;volatile
 18930  00A0                     i1l7331:	
 18931                           ;Dimmer_B1.c: 109: ;;
 18932                           
 18933                           
 18934                           ;Dimmer_B1.c: 110: }
 18935                           ;Dimmer_B1.c: 113: if (lights == 2) {
 18936  00A0  0874               	movf	setDimmerLights_IntrControl@lights,w
 18937  00A1  3A02               	xorlw	2
 18938  00A2  1D03               	skipz
 18939  00A3  29B5               	goto	i1l7399
 18940                           
 18941                           ;Dimmer_B1.c: 114: RB4 = 1;
 18942  00A4  0020               	movlb	0	; select bank0
 18943  00A5  160D               	bsf	13,4	;volatile
 18944                           
 18945                           ;Dimmer_B1.c: 115: }
 18946                           ;Dimmer_B1.c: 122: }
 18947                           ;Dimmer_B1.c: 123: }
 18948                           ;Dimmer_B1.c: 124: } else {
 18949  00A6  29B5               	goto	i1l7399
 18950  00A7                     i1l7335:	
 18951                           
 18952                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 18953  00A7  0877               	movf	_DimmerLightsIntr,w
 18954  00A8  3E08               	addlw	8
 18955  00A9  0086               	movwf	6
 18956  00AA  3001               	movlw	1	; select bank2/3
 18957  00AB  0087               	movwf	7
 18958  00AC  1C01               	btfss	1,0
 18959  00AD  29B5               	goto	i1l7399
 18960                           
 18961                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 18962  00AE  0877               	movf	_DimmerLightsIntr,w
 18963  00AF  3E08               	addlw	8
 18964  00B0  0086               	movwf	6
 18965  00B1  3001               	movlw	1	; select bank2/3
 18966  00B2  0087               	movwf	7
 18967  00B3  1001               	bcf	1,0
 18968                           
 18969                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 18970  00B4  0877               	movf	_DimmerLightsIntr,w
 18971  00B5  0086               	movwf	6
 18972  00B6  3001               	movlw	1	; select bank2/3
 18973  00B7  0087               	movwf	7
 18974  00B8  1C81               	btfss	1,1
 18975  00B9  29B5               	goto	i1l7399
 18976                           
 18977                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 18978  00BA  3001               	movlw	1
 18979  00BB  00F2               	movwf	??_setDimmerLights_IntrControl
 18980  00BC  0A77               	incf	_DimmerLightsIntr,w
 18981  00BD  0086               	movwf	6
 18982  00BE  3001               	movlw	1	; select bank2/3
 18983  00BF  0087               	movwf	7
 18984  00C0  0872               	movf	??_setDimmerLights_IntrControl,w
 18985  00C1  0781               	addwf	1,f
 18986                           
 18987                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18988  00C2  0A77               	incf	_DimmerLightsIntr,w
 18989  00C3  0086               	movwf	6
 18990  00C4  3001               	movlw	1	; select bank2/3
 18991  00C5  0087               	movwf	7
 18992  00C6  0877               	movf	_DimmerLightsIntr,w
 18993  00C7  3E02               	addlw	2
 18994  00C8  0084               	movwf	4
 18995  00C9  3001               	movlw	1	; select bank2/3
 18996  00CA  0085               	movwf	5
 18997  00CB  0800               	movf	0,w
 18998  00CC  0201               	subwf	1,w
 18999  00CD  1C03               	skipc
 19000  00CE  29B5               	goto	i1l7399
 19001                           
 19002                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 19003  00CF  0A77               	incf	_DimmerLightsIntr,w
 19004  00D0  0086               	movwf	6
 19005  00D1  3001               	movlw	1	; select bank2/3
 19006  00D2  0087               	movwf	7
 19007  00D3  0181               	clrf	1
 19008                           
 19009                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 19010  00D4  0877               	movf	_DimmerLightsIntr,w
 19011  00D5  0086               	movwf	6
 19012  00D6  3001               	movlw	1	; select bank2/3
 19013  00D7  0087               	movwf	7
 19014  00D8  1D81               	btfss	1,3
 19015  00D9  2910               	goto	i1l7361
 19016                           
 19017                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 19018  00DA  0877               	movf	_DimmerLightsIntr,w
 19019  00DB  0086               	movwf	6
 19020  00DC  3001               	movlw	1	; select bank2/3
 19021  00DD  0087               	movwf	7
 19022  00DE  1A01               	btfsc	1,4
 19023  00DF  28F7               	goto	i1l7355
 19024                           
 19025                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 19026  00E0  0877               	movf	_DimmerLightsIntr,w
 19027  00E1  3E04               	addlw	4
 19028  00E2  0086               	movwf	6
 19029  00E3  3001               	movlw	1	; select bank2/3
 19030  00E4  0087               	movwf	7
 19031  00E5  3021               	movlw	33
 19032  00E6  0201               	subwf	1,w
 19033  00E7  1C03               	skipc
 19034  00E8  28F1               	goto	i1l7353
 19035                           
 19036                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 19037  00E9  0877               	movf	_DimmerLightsIntr,w
 19038  00EA  3E04               	addlw	4
 19039  00EB  0086               	movwf	6
 19040  00EC  3001               	movlw	1	; select bank2/3
 19041  00ED  0087               	movwf	7
 19042  00EE  3001               	movlw	1
 19043  00EF  0281               	subwf	1,f
 19044                           
 19045                           ;Dimmer_B1.c: 135: } else {
 19046  00F0  29B5               	goto	i1l7399
 19047  00F1                     i1l7353:	
 19048                           
 19049                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 19050  00F1  0877               	movf	_DimmerLightsIntr,w
 19051  00F2  0086               	movwf	6
 19052  00F3  3001               	movlw	1	; select bank2/3
 19053  00F4  0087               	movwf	7
 19054  00F5  1601               	bsf	1,4
 19055                           
 19056                           ;Dimmer_B1.c: 137: }
 19057                           ;Dimmer_B1.c: 138: } else {
 19058  00F6  29B5               	goto	i1l7399
 19059  00F7                     i1l7355:	
 19060                           
 19061                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 19062  00F7  0877               	movf	_DimmerLightsIntr,w
 19063  00F8  3E04               	addlw	4
 19064  00F9  0086               	movwf	6
 19065  00FA  3001               	movlw	1	; select bank2/3
 19066  00FB  0087               	movwf	7
 19067  00FC  303C               	movlw	60
 19068  00FD  0201               	subwf	1,w
 19069  00FE  1803               	skipnc
 19070  00FF  290A               	goto	i1l7359
 19071                           
 19072                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 19073  0100  3001               	movlw	1
 19074  0101  00F2               	movwf	??_setDimmerLights_IntrControl
 19075  0102  0877               	movf	_DimmerLightsIntr,w
 19076  0103  3E04               	addlw	4
 19077  0104  0086               	movwf	6
 19078  0105  3001               	movlw	1	; select bank2/3
 19079  0106  0087               	movwf	7
 19080  0107  0872               	movf	??_setDimmerLights_IntrControl,w
 19081  0108  0781               	addwf	1,f
 19082                           
 19083                           ;Dimmer_B1.c: 141: } else {
 19084  0109  29B5               	goto	i1l7399
 19085  010A                     i1l7359:	
 19086                           
 19087                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 19088  010A  0877               	movf	_DimmerLightsIntr,w
 19089  010B  0086               	movwf	6
 19090  010C  3001               	movlw	1	; select bank2/3
 19091  010D  0087               	movwf	7
 19092  010E  1201               	bcf	1,4
 19093                           
 19094                           ;Dimmer_B1.c: 143: }
 19095                           ;Dimmer_B1.c: 144: }
 19096                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 19097  010F  29B5               	goto	i1l7399
 19098  0110                     i1l7361:	
 19099  0110  0877               	movf	_DimmerLightsIntr,w
 19100  0111  0086               	movwf	6
 19101  0112  3001               	movlw	1	; select bank2/3
 19102  0113  0087               	movwf	7
 19103  0114  1D01               	btfss	1,2
 19104  0115  2957               	goto	i1l7375
 19105                           
 19106                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 19107  0116  0877               	movf	_DimmerLightsIntr,w
 19108  0117  3E05               	addlw	5
 19109  0118  0086               	movwf	6
 19110  0119  3001               	movlw	1	; select bank2/3
 19111  011A  0087               	movwf	7
 19112  011B  0877               	movf	_DimmerLightsIntr,w
 19113  011C  3E04               	addlw	4
 19114  011D  0084               	movwf	4
 19115  011E  3001               	movlw	1	; select bank2/3
 19116  011F  0085               	movwf	5
 19117  0120  0800               	movf	0,w
 19118  0121  0201               	subwf	1,w
 19119  0122  1803               	skipnc
 19120  0123  292C               	goto	i1l7367
 19121                           
 19122                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 19123  0124  0877               	movf	_DimmerLightsIntr,w
 19124  0125  3E04               	addlw	4
 19125  0126  0086               	movwf	6
 19126  0127  3001               	movlw	1	; select bank2/3
 19127  0128  0087               	movwf	7
 19128  0129  3001               	movlw	1
 19129  012A  0281               	subwf	1,f
 19130                           
 19131                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 19132  012B  2943               	goto	i1l7371
 19133  012C                     i1l7367:	
 19134  012C  0877               	movf	_DimmerLightsIntr,w
 19135  012D  3E04               	addlw	4
 19136  012E  0086               	movwf	6
 19137  012F  3001               	movlw	1	; select bank2/3
 19138  0130  0087               	movwf	7
 19139  0131  0877               	movf	_DimmerLightsIntr,w
 19140  0132  3E05               	addlw	5
 19141  0133  0084               	movwf	4
 19142  0134  3001               	movlw	1	; select bank2/3
 19143  0135  0085               	movwf	5
 19144  0136  0800               	movf	0,w
 19145  0137  0201               	subwf	1,w
 19146  0138  1803               	skipnc
 19147  0139  2943               	goto	i1l7371
 19148                           
 19149                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 19150  013A  3001               	movlw	1
 19151  013B  00F2               	movwf	??_setDimmerLights_IntrControl
 19152  013C  0877               	movf	_DimmerLightsIntr,w
 19153  013D  3E04               	addlw	4
 19154  013E  0086               	movwf	6
 19155  013F  3001               	movlw	1	; select bank2/3
 19156  0140  0087               	movwf	7
 19157  0141  0872               	movf	??_setDimmerLights_IntrControl,w
 19158  0142  0781               	addwf	1,f
 19159  0143                     i1l7371:	
 19160                           
 19161                           ;Dimmer_B1.c: 150: }
 19162                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 19163  0143  0877               	movf	_DimmerLightsIntr,w
 19164  0144  3E05               	addlw	5
 19165  0145  0086               	movwf	6
 19166  0146  3001               	movlw	1	; select bank2/3
 19167  0147  0087               	movwf	7
 19168  0148  0877               	movf	_DimmerLightsIntr,w
 19169  0149  3E04               	addlw	4
 19170  014A  0084               	movwf	4
 19171  014B  3001               	movlw	1	; select bank2/3
 19172  014C  0085               	movwf	5
 19173  014D  0800               	movf	0,w
 19174  014E  0601               	xorwf	1,w
 19175  014F  1D03               	skipz
 19176  0150  29B5               	goto	i1l7399
 19177                           
 19178                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 19179  0151  0877               	movf	_DimmerLightsIntr,w
 19180  0152  0086               	movwf	6
 19181  0153  3001               	movlw	1	; select bank2/3
 19182  0154  0087               	movwf	7
 19183  0155  1101               	bcf	1,2
 19184  0156  2972               	goto	i1l7381
 19185  0157                     i1l7375:	
 19186                           ;Dimmer_B1.c: 154: }
 19187                           ;Dimmer_B1.c: 155: } else {
 19188                           
 19189                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 19190                           
 19191                           
 19192                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 19193  0157  0877               	movf	_DimmerLightsIntr,w
 19194  0158  0086               	movwf	6
 19195  0159  3001               	movlw	1	; select bank2/3
 19196  015A  0087               	movwf	7
 19197  015B  1E81               	btfss	1,5
 19198  015C  2978               	goto	i1l7383
 19199                           
 19200                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 19201  015D  0877               	movf	_DimmerLightsIntr,w
 19202  015E  3E04               	addlw	4
 19203  015F  0086               	movwf	6
 19204  0160  3001               	movlw	1	; select bank2/3
 19205  0161  0087               	movwf	7
 19206  0162  3001               	movlw	1
 19207  0163  0281               	subwf	1,f
 19208                           
 19209                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 19210  0164  0877               	movf	_DimmerLightsIntr,w
 19211  0165  3E05               	addlw	5
 19212  0166  0086               	movwf	6
 19213  0167  3001               	movlw	1	; select bank2/3
 19214  0168  0087               	movwf	7
 19215  0169  0877               	movf	_DimmerLightsIntr,w
 19216  016A  3E04               	addlw	4
 19217  016B  0084               	movwf	4
 19218  016C  3001               	movlw	1	; select bank2/3
 19219  016D  0085               	movwf	5
 19220  016E  0800               	movf	0,w
 19221  016F  0201               	subwf	1,w
 19222  0170  1C03               	skipc
 19223  0171  29B5               	goto	i1l7399
 19224  0172                     i1l7381:	
 19225                           
 19226                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 19227  0172  0877               	movf	_DimmerLightsIntr,w
 19228  0173  0086               	movwf	6
 19229  0174  3001               	movlw	1	; select bank2/3
 19230  0175  0087               	movwf	7
 19231  0176  1081               	bcf	1,1
 19232                           
 19233                           ;Dimmer_B1.c: 160: }
 19234                           ;Dimmer_B1.c: 161: } else {
 19235  0177  29B5               	goto	i1l7399
 19236  0178                     i1l7383:	
 19237                           
 19238                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 19239  0178  3001               	movlw	1
 19240  0179  00F2               	movwf	??_setDimmerLights_IntrControl
 19241  017A  0877               	movf	_DimmerLightsIntr,w
 19242  017B  3E04               	addlw	4
 19243  017C  0086               	movwf	6
 19244  017D  3001               	movlw	1	; select bank2/3
 19245  017E  0087               	movwf	7
 19246  017F  0872               	movf	??_setDimmerLights_IntrControl,w
 19247  0180  0781               	addwf	1,f
 19248                           
 19249                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 19250  0181  0877               	movf	_DimmerLightsIntr,w
 19251  0182  3E04               	addlw	4
 19252  0183  0086               	movwf	6
 19253  0184  3001               	movlw	1	; select bank2/3
 19254  0185  0087               	movwf	7
 19255  0186  0877               	movf	_DimmerLightsIntr,w
 19256  0187  3E06               	addlw	6
 19257  0188  0084               	movwf	4
 19258  0189  3001               	movlw	1	; select bank2/3
 19259  018A  0085               	movwf	5
 19260  018B  0800               	movf	0,w
 19261  018C  0201               	subwf	1,w
 19262  018D  1C03               	skipc
 19263  018E  29B5               	goto	i1l7399
 19264                           
 19265                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 19266  018F  0877               	movf	_DimmerLightsIntr,w
 19267  0190  0086               	movwf	6
 19268  0191  3001               	movlw	1	; select bank2/3
 19269  0192  0087               	movwf	7
 19270  0193  1081               	bcf	1,1
 19271                           
 19272                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 19273  0194  0877               	movf	_DimmerLightsIntr,w
 19274  0195  0086               	movwf	6
 19275  0196  3001               	movlw	1	; select bank2/3
 19276  0197  0087               	movwf	7
 19277  0198  1301               	bcf	1,6
 19278                           
 19279                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Clear = 1;
 19280  0199  0877               	movf	_DimmerLightsIntr,w
 19281  019A  3E09               	addlw	9
 19282  019B  0086               	movwf	6
 19283  019C  3001               	movlw	1	; select bank2/3
 19284  019D  0087               	movwf	7
 19285  019E  1501               	bsf	1,2
 19286                           
 19287                           ;Dimmer_B1.c: 167: Dimmer->Detect = 1;
 19288  019F  0876               	movf	_Dimmer,w
 19289  01A0  0086               	movwf	6
 19290  01A1  0187               	clrf	7
 19291  01A2  1401               	bsf	1,0
 19292                           
 19293                           ;Dimmer_B1.c: 169: if (lights == 1) {
 19294  01A3  0874               	movf	setDimmerLights_IntrControl@lights,w
 19295  01A4  3A01               	xorlw	1
 19296  01A5  1D03               	skipz
 19297  01A6  29A9               	goto	i1l7393
 19298                           
 19299                           ;Dimmer_B1.c: 170: RA3 = 0;
 19300  01A7  0020               	movlb	0	; select bank0
 19301  01A8  118C               	bcf	12,3	;volatile
 19302  01A9                     i1l7393:	
 19303                           
 19304                           ;Dimmer_B1.c: 172: }
 19305                           ;Dimmer_B1.c: 175: if (lights == 2) {
 19306  01A9  0874               	movf	setDimmerLights_IntrControl@lights,w
 19307  01AA  3A02               	xorlw	2
 19308  01AB  1D03               	skipz
 19309  01AC  29AF               	goto	i1l7397
 19310                           
 19311                           ;Dimmer_B1.c: 176: RC7 = 0;
 19312  01AD  0020               	movlb	0	; select bank0
 19313  01AE  138E               	bcf	14,7	;volatile
 19314  01AF                     i1l7397:	
 19315                           
 19316                           ;Dimmer_B1.c: 177: }
 19317                           ;Dimmer_B1.c: 184: setLoad_StatusOff(lights, 1);
 19318  01AF  01F0               	clrf	i1setLoad_StatusOff@command
 19319  01B0  0AF0               	incf	i1setLoad_StatusOff@command,f
 19320  01B1  0874               	movf	setDimmerLights_IntrControl@lights,w
 19321  01B2  319C  24D9  3180   	fcall	i1_setLoad_StatusOff
 19322  01B5                     i1l7399:	
 19323                           
 19324                           ;Dimmer_B1.c: 185: }
 19325                           ;Dimmer_B1.c: 186: }
 19326                           ;Dimmer_B1.c: 187: }
 19327                           ;Dimmer_B1.c: 188: }
 19328                           ;Dimmer_B1.c: 189: }
 19329                           ;Dimmer_B1.c: 190: }
 19330                           ;Dimmer_B1.c: 191: }
 19331                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->Triac == 1) {
 19332  01B5  0877               	movf	_DimmerLightsIntr,w
 19333  01B6  3E08               	addlw	8
 19334  01B7  0086               	movwf	6
 19335  01B8  3001               	movlw	1	; select bank2/3
 19336  01B9  0087               	movwf	7
 19337  01BA  1E81               	btfss	1,5
 19338  01BB  29E6               	goto	i1l7417
 19339                           
 19340                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime++;
 19341  01BC  3001               	movlw	1
 19342  01BD  00F2               	movwf	??_setDimmerLights_IntrControl
 19343  01BE  0877               	movf	_DimmerLightsIntr,w
 19344  01BF  3E07               	addlw	7
 19345  01C0  0086               	movwf	6
 19346  01C1  3001               	movlw	1	; select bank2/3
 19347  01C2  0087               	movwf	7
 19348  01C3  0872               	movf	??_setDimmerLights_IntrControl,w
 19349  01C4  0781               	addwf	1,f
 19350                           
 19351                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->TriacTime >= 5) {
 19352  01C5  0877               	movf	_DimmerLightsIntr,w
 19353  01C6  3E07               	addlw	7
 19354  01C7  0086               	movwf	6
 19355  01C8  3001               	movlw	1	; select bank2/3
 19356  01C9  0087               	movwf	7
 19357  01CA  3005               	movlw	5
 19358  01CB  0201               	subwf	1,w
 19359  01CC  1C03               	skipc
 19360  01CD  29E6               	goto	i1l7417
 19361                           
 19362                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime = 0;
 19363  01CE  0877               	movf	_DimmerLightsIntr,w
 19364  01CF  3E07               	addlw	7
 19365  01D0  0086               	movwf	6
 19366  01D1  3001               	movlw	1	; select bank2/3
 19367  01D2  0087               	movwf	7
 19368  01D3  0181               	clrf	1
 19369                           
 19370                           ;Dimmer_B1.c: 196: DimmerLightsIntr->Triac = 0;
 19371  01D4  0877               	movf	_DimmerLightsIntr,w
 19372  01D5  3E08               	addlw	8
 19373  01D6  0086               	movwf	6
 19374  01D7  3001               	movlw	1	; select bank2/3
 19375  01D8  0087               	movwf	7
 19376  01D9  1281               	bcf	1,5
 19377                           
 19378                           ;Dimmer_B1.c: 199: if (lights == 1) {
 19379  01DA  0874               	movf	setDimmerLights_IntrControl@lights,w
 19380  01DB  3A01               	xorlw	1
 19381  01DC  1D03               	skipz
 19382  01DD  29E0               	goto	i1l7413
 19383                           
 19384                           ;Dimmer_B1.c: 200: RA7 = 0;
 19385  01DE  0020               	movlb	0	; select bank0
 19386  01DF  138C               	bcf	12,7	;volatile
 19387  01E0                     i1l7413:	
 19388                           ;Dimmer_B1.c: 201: ;;
 19389                           
 19390                           
 19391                           ;Dimmer_B1.c: 202: }
 19392                           ;Dimmer_B1.c: 205: if (lights == 2) {
 19393  01E0  0874               	movf	setDimmerLights_IntrControl@lights,w
 19394  01E1  3A02               	xorlw	2
 19395  01E2  1D03               	skipz
 19396  01E3  29E6               	goto	i1l7417
 19397                           
 19398                           ;Dimmer_B1.c: 206: RB4 = 0;
 19399  01E4  0020               	movlb	0	; select bank0
 19400  01E5  120D               	bcf	13,4	;volatile
 19401  01E6                     i1l7417:	
 19402                           
 19403                           ;Dimmer_B1.c: 207: }
 19404                           ;Dimmer_B1.c: 214: }
 19405                           ;Dimmer_B1.c: 215: }
 19406                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacFlag == 1) {
 19407  01E6  0877               	movf	_DimmerLightsIntr,w
 19408  01E7  3E09               	addlw	9
 19409  01E8  0086               	movwf	6
 19410  01E9  3001               	movlw	1	; select bank2/3
 19411  01EA  0087               	movwf	7
 19412  01EB  1E81               	btfss	1,5
 19413  01EC  0008               	return
 19414                           
 19415                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount++;
 19416  01ED  3001               	movlw	1
 19417  01EE  00F2               	movwf	??_setDimmerLights_IntrControl
 19418  01EF  0877               	movf	_DimmerLightsIntr,w
 19419  01F0  3E0A               	addlw	10
 19420  01F1  0086               	movwf	6
 19421  01F2  3001               	movlw	1	; select bank2/3
 19422  01F3  0087               	movwf	7
 19423  01F4  0872               	movf	??_setDimmerLights_IntrControl,w
 19424  01F5  0781               	addwf	1,f
 19425                           
 19426                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacCount == 70) {
 19427  01F6  0877               	movf	_DimmerLightsIntr,w
 19428  01F7  3E0A               	addlw	10
 19429  01F8  0086               	movwf	6
 19430  01F9  3001               	movlw	1	; select bank2/3
 19431  01FA  0087               	movwf	7
 19432  01FB  0801               	movf	1,w
 19433  01FC  3A46               	xorlw	70
 19434  01FD  1D03               	skipz
 19435  01FE  0008               	return
 19436                           
 19437                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount = 0;
 19438  01FF  0877               	movf	_DimmerLightsIntr,w
 19439  0200  3E0A               	addlw	10
 19440  0201  0086               	movwf	6
 19441  0202  3001               	movlw	1	; select bank2/3
 19442  0203  0087               	movwf	7
 19443  0204  0181               	clrf	1
 19444                           
 19445                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacFlag = 0;
 19446  0205  0877               	movf	_DimmerLightsIntr,w
 19447  0206  3E09               	addlw	9
 19448  0207  0086               	movwf	6
 19449  0208  3001               	movlw	1	; select bank2/3
 19450  0209  0087               	movwf	7
 19451  020A  1281               	bcf	1,5
 19452  020B  0008               	return
 19453  020C                     __end_of_setDimmerLights_IntrControl:	
 19454                           
 19455                           	psect	text136
 19456  1CD9                     __ptext136:	
 19457 ;; *************** function i1_setLoad_StatusOff *****************
 19458 ;; Defined at:
 19459 ;;		line 282 in file "../src/OverLoad_B1.c"
 19460 ;; Parameters:    Size  Location     Type
 19461 ;;  lights          1    wreg     unsigned char 
 19462 ;;  command         1    0[COMMON] unsigned char 
 19463 ;; Auto vars:     Size  Location     Type
 19464 ;;  lights          1    1[COMMON] unsigned char 
 19465 ;; Return value:  Size  Location     Type
 19466 ;;		None               void
 19467 ;; Registers used:
 19468 ;;		wreg, status,2, status,0
 19469 ;; Tracked objects:
 19470 ;;		On entry : 0/0
 19471 ;;		On exit  : 0/0
 19472 ;;		Unchanged: 0/0
 19473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19474 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19475 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19477 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19478 ;;Total ram usage:        2 bytes
 19479 ;; Hardware stack levels used:    1
 19480 ;; This function calls:
 19481 ;;		Nothing
 19482 ;; This function is called by:
 19483 ;;		_setDimmerLights_IntrControl
 19484 ;; This function uses a non-reentrant model
 19485 ;;
 19486                           
 19487                           
 19488                           ;psect for function i1_setLoad_StatusOff
 19489  1CD9                     i1_setLoad_StatusOff:	
 19490                           
 19491                           ;incstack = 0
 19492                           ; Regs used in i1_setLoad_StatusOff: [wreg+status,2+status,0]
 19493                           ;i1setLoad_StatusOff@lights stored from wreg
 19494  1CD9  00F1               	movwf	i1setLoad_StatusOff@lights
 19495                           
 19496                           ;OverLoad_B1.c: 283: Load1.StatusOff = command;
 19497  1CDA  0870               	movf	i1setLoad_StatusOff@command,w
 19498  1CDB  0023               	movlb	3	; select bank3
 19499  1CDC  13A0               	bcf	_Load1^(0+384),7
 19500  1CDD  1D03               	skipz
 19501  1CDE  17A0               	bsf	_Load1^(0+384),7
 19502                           
 19503                           ;OverLoad_B1.c: 284: Load1.SafeCount -= 2;
 19504  1CDF  3002               	movlw	2
 19505  1CE0  02E2               	subwf	(_Load1^(0+384)+66),f
 19506                           
 19507                           ;OverLoad_B1.c: 285: if (lights == 1) {
 19508  1CE1  0871               	movf	i1setLoad_StatusOff@lights,w
 19509  1CE2  3A01               	xorlw	1
 19510  1CE3  1903               	btfsc	3,2
 19511                           
 19512                           ;OverLoad_B1.c: 286: Load1.Lights1Status = 0;
 19513  1CE4  01E3               	clrf	(_Load1^(0+384)+67)
 19514                           
 19515                           ;OverLoad_B1.c: 287: }
 19516                           ;OverLoad_B1.c: 288: if (lights == 2) {
 19517  1CE5  0871               	movf	i1setLoad_StatusOff@lights,w
 19518  1CE6  3A02               	xorlw	2
 19519  1CE7  1903               	btfsc	3,2
 19520                           
 19521                           ;OverLoad_B1.c: 289: Load1.Lights2Status = 0;
 19522  1CE8  01E4               	clrf	(_Load1^(0+384)+68)
 19523                           
 19524                           ;OverLoad_B1.c: 290: }
 19525                           ;OverLoad_B1.c: 291: if (lights == 3) {
 19526  1CE9  0871               	movf	i1setLoad_StatusOff@lights,w
 19527  1CEA  3A03               	xorlw	3
 19528  1CEB  1D03               	skipz
 19529  1CEC  0008               	return
 19530                           
 19531                           ;OverLoad_B1.c: 292: Load1.Lights3Status = 0;
 19532  1CED  01E5               	clrf	(_Load1^(0+384)+69)
 19533  1CEE  0008               	return
 19534  1CEF                     __end_ofi1_setLoad_StatusOff:	
 19535                           
 19536                           	psect	text137
 19537  1C06                     __ptext137:	
 19538 ;; *************** function _DimmerIntrPointSelect *****************
 19539 ;; Defined at:
 19540 ;;		line 72 in file "../src/Dimmer_B1.c"
 19541 ;; Parameters:    Size  Location     Type
 19542 ;;  lights          1    wreg     unsigned char 
 19543 ;; Auto vars:     Size  Location     Type
 19544 ;;  lights          1    1[COMMON] unsigned char 
 19545 ;; Return value:  Size  Location     Type
 19546 ;;		None               void
 19547 ;; Registers used:
 19548 ;;		wreg
 19549 ;; Tracked objects:
 19550 ;;		On entry : 0/0
 19551 ;;		On exit  : 0/0
 19552 ;;		Unchanged: 0/0
 19553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19555 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19556 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19557 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19558 ;;Total ram usage:        2 bytes
 19559 ;; Hardware stack levels used:    1
 19560 ;; This function calls:
 19561 ;;		Nothing
 19562 ;; This function is called by:
 19563 ;;		_setDimmerLights_IntrControl
 19564 ;; This function uses a non-reentrant model
 19565 ;;
 19566                           
 19567                           
 19568                           ;psect for function _DimmerIntrPointSelect
 19569  1C06                     _DimmerIntrPointSelect:	
 19570                           
 19571                           ;incstack = 0
 19572                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19573                           ;DimmerIntrPointSelect@lights stored from wreg
 19574  1C06  00F1               	movwf	DimmerIntrPointSelect@lights
 19575                           
 19576                           ;Dimmer_B1.c: 74: if (lights == 1) {
 19577  1C07  0871               	movf	DimmerIntrPointSelect@lights,w
 19578  1C08  3A01               	xorlw	1
 19579  1C09  1D03               	skipz
 19580  1C0A  2C0F               	goto	i1l781
 19581                           
 19582                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 19583  1C0B  303D               	movlw	_DimmerLights1& (0+255)
 19584  1C0C  00F0               	movwf	??_DimmerIntrPointSelect
 19585  1C0D  0870               	movf	??_DimmerIntrPointSelect,w
 19586  1C0E  00F7               	movwf	_DimmerLightsIntr
 19587  1C0F                     i1l781:	
 19588                           
 19589                           ;Dimmer_B1.c: 76: }
 19590                           ;Dimmer_B1.c: 79: if (lights == 2) {
 19591  1C0F  0871               	movf	DimmerIntrPointSelect@lights,w
 19592  1C10  3A02               	xorlw	2
 19593  1C11  1D03               	skipz
 19594  1C12  0008               	return
 19595                           
 19596                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 19597  1C13  304C               	movlw	_DimmerLights2& (0+255)
 19598  1C14  00F0               	movwf	??_DimmerIntrPointSelect
 19599  1C15  0870               	movf	??_DimmerIntrPointSelect,w
 19600  1C16  00F7               	movwf	_DimmerLightsIntr
 19601  1C17  0008               	return
 19602  1C18                     __end_of_DimmerIntrPointSelect:	
 19603                           
 19604                           	psect	text138
 19605  1B05                     __ptext138:	
 19606 ;; *************** function _IOC_ISR *****************
 19607 ;; Defined at:
 19608 ;;		line 298 in file "../src/MCU_B1.c"
 19609 ;; Parameters:    Size  Location     Type
 19610 ;;		None
 19611 ;; Auto vars:     Size  Location     Type
 19612 ;;		None
 19613 ;; Return value:  Size  Location     Type
 19614 ;;		None               void
 19615 ;; Registers used:
 19616 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19617 ;; Tracked objects:
 19618 ;;		On entry : 0/0
 19619 ;;		On exit  : 0/0
 19620 ;;		Unchanged: 0/0
 19621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19626 ;;Total ram usage:        0 bytes
 19627 ;; Hardware stack levels used:    1
 19628 ;; Hardware stack levels required when called:    3
 19629 ;; This function calls:
 19630 ;;		_setDimmerReClock
 19631 ;; This function is called by:
 19632 ;;		_ISR
 19633 ;; This function uses a non-reentrant model
 19634 ;;
 19635                           
 19636                           
 19637                           ;psect for function _IOC_ISR
 19638  1B05                     _IOC_ISR:	
 19639                           
 19640                           ;MCU_B1.c: 299: if (IOCIE == 1 && IOCBF2 == 1) {
 19641                           
 19642                           ;incstack = 0
 19643                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19644  1B05  1D8B               	btfss	11,3	;volatile
 19645  1B06  0008               	return
 19646  1B07  0027               	movlb	7	; select bank7
 19647  1B08  1D16               	btfss	22,2	;volatile
 19648  1B09  0008               	return
 19649                           
 19650                           ;MCU_B1.c: 300: IOCBF2 = 0;
 19651  1B0A  1116               	bcf	22,2	;volatile
 19652                           
 19653                           ;MCU_B1.c: 301: IOCIF = 0;
 19654  1B0B  100B               	bcf	11,0	;volatile
 19655                           
 19656                           ;MCU_B1.c: 302: if (myMain.PowerON == 1) {
 19657  1B0C  0021               	movlb	1	; select bank1
 19658  1B0D  1C20               	btfss	_myMain^(0+128),0
 19659  1B0E  0008               	return
 19660                           
 19661                           ;MCU_B1.c: 304: setDimmerReClock();
 19662  1B0F  319A  223F         	fcall	_setDimmerReClock
 19663  1B11  0008               	return
 19664  1B12                     __end_of_IOC_ISR:	
 19665                           
 19666                           	psect	text139
 19667  1A3F                     __ptext139:	
 19668 ;; *************** function _setDimmerReClock *****************
 19669 ;; Defined at:
 19670 ;;		line 170 in file "../src/MCU_B1.c"
 19671 ;; Parameters:    Size  Location     Type
 19672 ;;		None
 19673 ;; Auto vars:     Size  Location     Type
 19674 ;;		None
 19675 ;; Return value:  Size  Location     Type
 19676 ;;		None               void
 19677 ;; Registers used:
 19678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19679 ;; Tracked objects:
 19680 ;;		On entry : 0/0
 19681 ;;		On exit  : 0/0
 19682 ;;		Unchanged: 0/0
 19683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19688 ;;Total ram usage:        0 bytes
 19689 ;; Hardware stack levels used:    1
 19690 ;; Hardware stack levels required when called:    2
 19691 ;; This function calls:
 19692 ;;		_setDimmerLights_IntrIOC_GO
 19693 ;; This function is called by:
 19694 ;;		_IOC_ISR
 19695 ;; This function uses a non-reentrant model
 19696 ;;
 19697                           
 19698                           
 19699                           ;psect for function _setDimmerReClock
 19700  1A3F                     _setDimmerReClock:	
 19701                           
 19702                           ;MCU_B1.c: 175: setDimmerLights_IntrIOC_GO(1);
 19703                           
 19704                           ;incstack = 0
 19705                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19706  1A3F  3001               	movlw	1
 19707  1A40  3190  20B0  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19708                           
 19709                           ;MCU_B1.c: 179: setDimmerLights_IntrIOC_GO(2);
 19710  1A43  3002               	movlw	2
 19711  1A44  3190  20B0         	fcall	_setDimmerLights_IntrIOC_GO
 19712  1A46  0008               	return
 19713  1A47                     __end_of_setDimmerReClock:	
 19714                           
 19715                           	psect	text140
 19716  10B0                     __ptext140:	
 19717 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19718 ;; Defined at:
 19719 ;;		line 28 in file "../src/Dimmer_B1.c"
 19720 ;; Parameters:    Size  Location     Type
 19721 ;;  lights          1    wreg     unsigned char 
 19722 ;; Auto vars:     Size  Location     Type
 19723 ;;  lights          1    2[COMMON] unsigned char 
 19724 ;; Return value:  Size  Location     Type
 19725 ;;		None               void
 19726 ;; Registers used:
 19727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19728 ;; Tracked objects:
 19729 ;;		On entry : 0/0
 19730 ;;		On exit  : 0/0
 19731 ;;		Unchanged: 0/0
 19732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19734 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19737 ;;Total ram usage:        1 bytes
 19738 ;; Hardware stack levels used:    1
 19739 ;; Hardware stack levels required when called:    1
 19740 ;; This function calls:
 19741 ;;		_DimmerIntrIOCPointSelect
 19742 ;; This function is called by:
 19743 ;;		_setDimmerReClock
 19744 ;; This function uses a non-reentrant model
 19745 ;;
 19746                           
 19747                           
 19748                           ;psect for function _setDimmerLights_IntrIOC_GO
 19749  10B0                     _setDimmerLights_IntrIOC_GO:	
 19750                           
 19751                           ;incstack = 0
 19752                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19753                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19754  10B0  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19755                           
 19756                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 19757  10B1  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19758  10B2  319C  2474  3190   	fcall	_DimmerIntrIOCPointSelect
 19759                           
 19760                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 19761  10B5  0021               	movlb	1	; select bank1
 19762  10B6  0851               	movf	_DimmerLightsIntrIOC^(0+128),w
 19763  10B7  0086               	movwf	6
 19764  10B8  3001               	movlw	1	; select bank2/3
 19765  10B9  0087               	movwf	7
 19766  10BA  1801               	btfsc	1,0
 19767  10BB  0008               	return
 19768  10BC  0851               	movf	_DimmerLightsIntrIOC^(0+128),w
 19769  10BD  3E09               	addlw	9
 19770  10BE  0086               	movwf	6
 19771  10BF  3001               	movlw	1	; select bank2/3
 19772  10C0  0087               	movwf	7
 19773  10C1  1A81               	btfsc	1,5
 19774  10C2  0008               	return
 19775                           
 19776                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 19777  10C3  0851               	movf	_DimmerLightsIntrIOC^(0+128),w
 19778  10C4  0086               	movwf	6
 19779  10C5  3001               	movlw	1	; select bank2/3
 19780  10C6  0087               	movwf	7
 19781  10C7  1401               	bsf	1,0
 19782                           
 19783                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 19784  10C8  0851               	movf	_DimmerLightsIntrIOC^(0+128),w
 19785  10C9  3E09               	addlw	9
 19786  10CA  0086               	movwf	6
 19787  10CB  3001               	movlw	1	; select bank2/3
 19788  10CC  0087               	movwf	7
 19789  10CD  1681               	bsf	1,5
 19790                           
 19791                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 19792  10CE  0020               	movlb	0	; select bank0
 19793  10CF  1D0D               	btfss	13,2	;volatile
 19794  10D0  28D8               	goto	i1l6953
 19795                           
 19796                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 19797  10D1  0876               	movf	_Dimmer,w
 19798  10D2  3E02               	addlw	2
 19799  10D3  0086               	movwf	6
 19800  10D4  0187               	clrf	7
 19801  10D5  0181               	clrf	1
 19802  10D6  0A81               	incf	1,f
 19803                           
 19804                           ;Dimmer_B1.c: 37: } else {
 19805  10D7  0008               	return
 19806  10D8                     i1l6953:	
 19807                           
 19808                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 19809  10D8  0876               	movf	_Dimmer,w
 19810  10D9  3E02               	addlw	2
 19811  10DA  0086               	movwf	6
 19812  10DB  0187               	clrf	7
 19813  10DC  0181               	clrf	1
 19814  10DD  0008               	return
 19815  10DE                     __end_of_setDimmerLights_IntrIOC_GO:	
 19816                           
 19817                           	psect	text141
 19818  1C74                     __ptext141:	
 19819 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19820 ;; Defined at:
 19821 ;;		line 8 in file "../src/Dimmer_B1.c"
 19822 ;; Parameters:    Size  Location     Type
 19823 ;;  lights          1    wreg     unsigned char 
 19824 ;; Auto vars:     Size  Location     Type
 19825 ;;  lights          1    1[COMMON] unsigned char 
 19826 ;; Return value:  Size  Location     Type
 19827 ;;		None               void
 19828 ;; Registers used:
 19829 ;;		wreg
 19830 ;; Tracked objects:
 19831 ;;		On entry : 0/0
 19832 ;;		On exit  : 0/0
 19833 ;;		Unchanged: 0/0
 19834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19836 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19837 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19838 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19839 ;;Total ram usage:        2 bytes
 19840 ;; Hardware stack levels used:    1
 19841 ;; This function calls:
 19842 ;;		Nothing
 19843 ;; This function is called by:
 19844 ;;		_setDimmerLights_IntrIOC_GO
 19845 ;; This function uses a non-reentrant model
 19846 ;;
 19847                           
 19848                           
 19849                           ;psect for function _DimmerIntrIOCPointSelect
 19850  1C74                     _DimmerIntrIOCPointSelect:	
 19851                           
 19852                           ;incstack = 0
 19853                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19854                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19855  1C74  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19856                           
 19857                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19858  1C75  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19859  1C76  3A01               	xorlw	1
 19860  1C77  1D03               	skipz
 19861  1C78  2C7E               	goto	i1l770
 19862                           
 19863                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19864  1C79  303D               	movlw	_DimmerLights1& (0+255)
 19865  1C7A  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19866  1C7B  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19867  1C7C  0021               	movlb	1	; select bank1
 19868  1C7D  00D1               	movwf	_DimmerLightsIntrIOC^(0+128)
 19869  1C7E                     i1l770:	
 19870                           
 19871                           ;Dimmer_B1.c: 12: }
 19872                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19873  1C7E  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19874  1C7F  3A02               	xorlw	2
 19875  1C80  1D03               	skipz
 19876  1C81  0008               	return
 19877                           
 19878                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19879  1C82  304C               	movlw	_DimmerLights2& (0+255)
 19880  1C83  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19881  1C84  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19882  1C85  0021               	movlb	1	; select bank1
 19883  1C86  00D1               	movwf	_DimmerLightsIntrIOC^(0+128)
 19884  1C87  0008               	return
 19885  1C88                     __end_of_DimmerIntrIOCPointSelect:	
 19886  007E                     btemp	set	126	;btemp
 19887  007E                     pic14e$flags	set	126
 19888  007E                     wtemp	set	126
 19889  007E                     wtemp0	set	126
 19890  0080                     wtemp1	set	128
 19891  0082                     wtemp2	set	130
 19892  0084                     wtemp3	set	132
 19893  0086                     wtemp4	set	134
 19894  0088                     wtemp5	set	136
 19895  007F                     wtemp6	set	127
 19896  007E                     ttemp	set	126
 19897  007E                     ttemp0	set	126
 19898  0081                     ttemp1	set	129
 19899  0084                     ttemp2	set	132
 19900  0087                     ttemp3	set	135
 19901  007F                     ttemp4	set	127
 19902  007E                     ltemp	set	126
 19903  007E                     ltemp0	set	126
 19904  0082                     ltemp1	set	130
 19905  0086                     ltemp2	set	134
 19906  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         283
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     74      78
    BANK1            80      0      79
    BANK2            80      0      80
    BANK3            80      0      79
    BANK4            80      4      73
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK1[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerLights_IntrControl->i1_setLoad_StatusOff
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  131691
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    2234
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           5     5      0     601
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    9586
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    9586
                                             17 BANK0      1     1      0
                       _getLoad_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    9552
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   29437
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   29437
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   12930
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12426
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1711
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     332
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     332
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1182
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1182
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   38710
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   38710
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37767
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    2017
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35750
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14744
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1710
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15222
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15036
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14943
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            3     3      0    9373
                                             17 BANK0      3     3      0
                            ___lwdiv
                             ___wmul
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   3     3      0    7535
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     124
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    5978
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     425
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    3369
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     540
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getTemp_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     344
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     657
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1306
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1306
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   14012
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   13814
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    9280
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     401
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2167
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     228
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1151
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     198
         _getDimmerLights_StatusFlag
                         _setLoad_GO
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13669
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13669
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     748
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     852
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     644
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     644
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    2017
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     400
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     334
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     334
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (14) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___awdiv
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setLoad_Enable
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect
       i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4A      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      49      13       91.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     191      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     191      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Oct 27 15:37:38 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1EAA                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006C  
     __end_of_getDimmerLights_StatusFlag 1BE4               _getDimmerLights_StatusFlag 1BD3  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 173A  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1E2A  
                   _setDimmerLights_Main 0ADA                             ___ftadd@sign 0048  
                                    l102 15FA                                      l112 13E1  
                                    l104 160E                                      l113 13DD  
                                    l114 13CB                                      l116 13DB  
                                    l342 1C92                                      l343 1C93  
                                    l267 17D4                                      l292 0A1F  
                                    l293 0A62                                      l386 1F39  
                                    l824 1C58                                      l870 141D  
                                    _GIE 005F                                      _CRC 00CE  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 0078                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BE  
                                    _ISR 0004                                      _WDT 00CC  
                                    _Sw1 015B                                      _Sw2 01E6  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1C9C  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 19FA  
                        __end_of_ADC_Set 1A3F                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0CD3                    _setDimmerLights_ERROR 151C  
                  _setDimmerLights_AdjRF 1F11                    _setDimmerLights_AdjGo 1BB3  
                __size_of_setTemp_Enable 0008                    _setDimmerLights_Clear 1BA3  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1B12                               Load_Main@i 0033  
                           ___ftdiv@sign 003D                                     l1360 1106  
                                   l2304 0858                                     l3033 1784  
                                   l2314 08AE                 ?_DimmerLightsPointSelect 0070  
                                   l3027 176D                                     l1347 1E47  
                                   l1710 035C                                     l2270 0615  
                                   l2351 123E                                     l2319 113C  
                                   l2271 0611                                     l3056 0565  
                                   l2337 1C6B                                     l1369 1396  
                                   l2273 0651                                     l2265 05DD  
                                   l1554 147A                          __end_of_IOC_Set 1B1F  
                                   l1718 1205                                     l1691 034D  
                                   l6013 0E6D                                     l6005 0E54  
                                   l6111 0CCA                                     l6103 0CB0  
                                   l1688 0222                                     l6105 0CB9  
                                   l6033 0EBC                                     l2690 1B66  
                                   l6107 0CBC                                     l6027 0EA6  
                                   l6061 0F1B                                     l6045 0EF7  
                                   l6057 0F13                                     l6049 0EFF  
                                   l2866 1DD7                                     l6077 0C65  
                                   l6095 0C95                                     l6097 0CA3  
                                   l9021 122C                                     l9031 1D55  
                                   l9035 1D5B                                     l9051 1EDE  
                                   l9211 17E7                                     l9203 17DA  
                                   l5915 04EE                                     l9029 1D52  
                                   l9045 1ED5                                     l9213 17EA  
                                   l9205 17DD                                     l5925 0504  
                                   l9303 1E9A                                     l9071 13FE  
                                   l9047 1ED8                                     l9231 09FB  
                                   l5943 0531                                     l5919 04F5  
                                   l8511 1C33                                     l8601 14DE  
                                   l5873 174A                                     l9233 09FE  
                                   l9217 17F0                                     l9209 17E3  
                                   l5961 0577                                     l5945 053B  
                                   l5937 051E                                     l8611 14E6  
                                   l5883 1772                                     l5875 1754  
                                   l9251 0A16                                     l5955 0557  
                                   l5947 0540                                     l8507 1C2D  
                                   l9163 07D9                                     l9155 07C7  
                                   l9411 127E                                     l8525 1CA7  
                                   l8613 14F2                                     l5885 177A  
                                   l5877 1759                                     l5869 1743  
                                   l9077 1410                                     l9237 0A04  
                                   l9181 17A5                                     l5965 0589  
                                   l5957 0561                                     l5949 0544  
                                   l8541 1FD3                                     l9149 07AC  
                                   l9501 148E                                     l8623 150D  
                                   l5991 0E13                                     l9319 132C  
                                   l9079 1415                                     l9239 0A07  
                                   l5975 05A4                                     l9167 07E2  
                                   l9159 07D0                                     l9407 1272  
                                   l5985 0DFD                                     l8801 1699  
                                   l9265 0A30                                     l9249 0A1C  
                                   l9185 17AB                                     l9505 149B  
                                   l9291 1F55                                     l8627 1515  
                                   l8619 1504                                     l8811 16A9  
                                   l9267 0A48                                     l9179 17A2  
                                   l9427 085B                                     l8565 1071  
                  _myMain_Initialization 1B74                                     l9551 12FA  
                                   l8487 1EB5                                     l8583 1CBB  
                                   l8823 16C5                                     l8831 16D1  
                                   l8807 16A3                                     l8815 16AF  
                                   l8903 1D40                                     l9279 0A64  
                                   l9199 17BC                                     l9455 08A4  
                                   l9439 0873                                     l9535 09D3  
                                   l9471 0A87                                     l9289 1F4A  
                                   l9297 1E91                                     l9561 130A  
                                   l8569 107A                                     l9369 10EE  
                                   l8905 1D44                                     l8753 1716  
                                   l9449 0899                                     l9299 1E94  
                                   l9555 1300                                     l8595 14D3  
                                   l8683 0978                                     l8827 16CB  
                                   l8843 1F00                                     l8771 1E1B  
                                   l9803 1361                                     l8755 1723  
                                   l9491 0AC8                                     l9467 0A7A  
                                   l9565 1310                                     l9549 12F7  
                                   l9725 12C5                                     l8749 1710  
                                   l9559 1307                                     l8919 1BDD  
                                   l8847 1F08                                     l8775 1E22  
                                   l8855 114C                                     l8759 172F  
                                   l9903 0C2C                                     l8793 168D  
                                   l9673 0AEE                                     l9809 1376  
                                   l9729 12CC                                     l9905 0C2E  
                                   _CFGS 0CAE                                     l8797 1693  
                                   l8949 0D2F                                     l9685 0B13  
                                   l9677 0AF8                                     l8983 0D78  
                                   l9951 05F4                                     l9871 0BE8  
                                   l9791 1E5C                             __CFG_WDTE$ON 0000  
                                   l9689 0B20                                     l8993 0D9A  
                                   l9929 05D0                                     l9785 1E54  
                                   l9699 0B47                                     l9787 1E57  
                                   l8997 0DB0                                     l9893 0C15  
                                   l9869 0BE2                                     l9987 0636  
                                   l9989 0638                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4305 1775  
                                   u4335 178B                                     u4265 174F  
                                   u4515 0545                                     _PEIE 005E  
                                   u4285 1768                                     u4615 0E25  
                                   u4455 051F                                     u4625 0E35  
                                   u4545 0558                                     u4705 0ED8  
                                   u4635 0E55                                     u4645 0E64  
                                   u4805 0C6C                                     u4485 0532  
                                   u4725 0F00                                     u4655 0E6E  
                                   u4735 0F06                                     u4835 0C96  
                                   u4765 0F1C                                     u4775 0F22  
                                   u4695 0EC8                                     u4865 0CB1  
                                   u9075 1CD3                                     u8705 1505  
                                   u8555 1FBF                                     u8665 14E9  
                                   u8770 0926                                     u8685 14F3  
                                   u9575 1F3F                                     u8695 14FD  
                                   u8775 0924                                     _LWLO 0CAD  
                                   _RFSW 0079                                     _TMR0 0015  
                                   _RSSI 00D2                                     _WREN 0CAA  
                                   _Buz1 00B2                                     _main 1571  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 091C  
                        __end_of_RF_Main 1A03                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 1ACA                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1A3F  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1253                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                                    ??_ISR 0075  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1B05  
          __end_of_DimmerIntrPointSelect 1C18                                    l10005 0666  
                                  l10101 0441                                    l10031 1B6B  
                                  l10111 0473                                    l10017 0687  
                                  l10035 1B71                                    l10051 0391  
                                  l10061 03A1                                    l10053 0397  
                                  l10063 03A9                                    l10161 11BF  
                                  l10171 11DA                                    l10139 1DD1  
                                  l10253 070B                                    l10501 0353  
                                  l10077 03D6                                    l10341 0B90  
                                  l10167 11D1                                    l10159 11B3  
                                  l10431 0241                                    l10087 0403  
                                  l10335 0B6D                                    l10185 13B5  
                                  l10345 0B98                                    l10451 02D4  
                                  l10437 026B                                    l10357 0BC0  
                                  l10457 02E1                                    l10369 119B  
                                  l10475 030B                                    l10459 02E7  
                                  l10395 1463                                    l10469 02FF  
                                  l10487 0328                                    l10495 034A  
                                  l10575 1595                    ?_setDimmerLights_Main 0070  
                                  l10579 15A0                          ?_setDelayOff_GO 002A  
                  __end_of_setLoad_Count 1B48                                    ?_main 0265  
                        __end_of___awdiv 151C                          __end_of___ftadd 05BC  
                        __end_of___ftdiv 0E8F                          __end_of___ftmul 0F43  
                                  u11215 1192                                    u11145 0B80  
                                  u11225 11A1                          ___awdiv@divisor 0020  
                                  u10605 0677                                    u11245 1443  
                                  u11095 1E3E                                    u11335 02A8  
                                  u11255 1472                                    u11185 0BB2  
                                  u10475 05EE                          __end_of___fttol 0CD3  
                                  u10905 11B6                                    u11385 02ED  
                                  u10925 11C0             setDimmerLights_AdjGo@command 0022  
                                  u10935 11CA                                    u10945 11D2  
                                  u10865 1DD8                                    u10875 1DDD  
                                  u10975 13AB                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 11E1                                    i1l770 1C7E  
                                  i1l781 1C0F                   _setDimmerLights_Switch 1B83  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00ED                                    _RFSW2 00EE  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0016                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _Load1 01A0  
                __end_of_Timeout_Counter 1CD9                            __CFG_WRT$HALF 0000  
                                  _Temp1 00D8       __end_of_setDimmerLights_IntrIOC_GO 10DE  
             _setDimmerLights_IntrIOC_GO 10B0                         __end_of_TMR0_ISR 1F81  
           __size_of_CC2500_WriteCommand 0019                         __end_of_TMR0_Set 1A6F  
                                  _getAD 1E49                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 1432            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                         _setLoad_Enable 1AA0              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1C4E  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03D8                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1BF5                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 091C  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                             ?_my_MainTime 0070  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 1622  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 1A8F                        ??_setPercentValue 0059  
                           __end_of_main 15C9                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1A1C                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D5B  
                   _setSw_Initialization 1A6F                  setOverTemp_Exceptions@i 002F  
             __size_of_setLoad_StatusOff 001F                                   ??_main 006A  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0760                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03D8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C61  
                 ?_setDimmerLights_AdjRF 0070                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 008B                         ??_setRFSW_Status 0023  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 1AA9                     __end_of_getTemp_Safe 1A67  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 08B1                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0070  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1ECC                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 179B                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1B93                                   i1l7331 00A0  
                                 i1l7413 01E0                                   i1l7335 00A7  
                                 i1l7417 01E6                                   i1l7353 00F1  
                                 i1l7361 0110                                   i1l7371 0143  
                                 i1l7355 00F7                                   i1l7381 0172  
                                 i1l7383 0178                                   i1l7367 012C  
                                 i1l7375 0157                                   i1l7359 010A  
                                 i1l7393 01A9                                   i1l7397 01AF  
                                 i1l7399 01B5                                   i1l6953 10D8  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                       __size_of_Load_Main 016E  
                                 u655_25 007B                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1D63  
                                 u786_25 1F7A                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1A26  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 0800  
                                 _Dimmer 0076                                   _DlySw1 00E9  
                                 _DlySw2 00EB              __size_of_setLoad_Exceptions 0038  
             __end_of_Mcu_Initialization 1C2A                      __end_of_Buzzer_Main 13E8  
                                 _Memory 0220                                   _Timer0 0135  
     __end_of_setDimmerLights_TriggerAdj 1BD3               _setDimmerLights_TriggerAdj 1BC3  
                                 ___bmul 1C2A            setDimmerLights_Switch@command 0022  
                                 ___wmul 1DCE                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                                ??___lwdiv 0024  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00D6                                   _s_data 00D7  
                                 _setLED 167D                                   _myMain 00A0  
                       _DimmerLightsIntr 0077                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 15C9                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1A26         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020      __end_of_setDimmerLights_IntrControl 020C  
            _setDimmerLights_IntrControl 004D                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0070  
                  __end_of_SwPointSelect 1CC4                          ?_setLoad_Enable 0070  
                          ?_setRF_Enable 0070                           _setTemp_Enable 1A8F  
                        _RfSWPointSelect 1C61             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 0074              __size_of_DimmerLights_Close 0017  
                __size_of_LedPointSelect 001D                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1B65  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 167D  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0049  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                       getLoad_Safe@result 0020  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK4 1E69                            __end_of_getAD 1E69  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0044  
                     _LED_Initialization 1AED                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 004A                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070                __size_of_setLoad_StatusOn 0023  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                        __end_of_Load_Main 037A  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 1A21  
               __end_of_setDimmerReClock 1A47                       __size_of_getRxData 0069  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1A97  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00CF                           _DimmerLights22 00D0  
                   __size_of_setLED_Main 0041                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1A06  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006A                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 139E                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 1A0C                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1A47                    __size_of_getLoad_Safe 0008  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006B                        LedPointSelect@led 0021  
                    i1_setLoad_StatusOff 1CD9                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0008                       getTemp_Safe@result 0020  
                            setBuz@count 002C                               __pmaintext 1571  
                    _CC2500_WriteCommand 1D4A                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C                     __size_of_my_MainTime 004A  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 0075                            ?_setTemp_Main 0070  
                             ??_TMR0_Set 0020                               _getLoad_AD 0B4D  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00BD  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1A38                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1174                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1AD5                    __size_of_getTemp_Safe 0008  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1219  
                __end_of_RfSWPointSelect 1C74                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0070                                  _IOC_ISR 1B05  
                        ?_setTemp_Enable 0070                                  _IOC_Set 1B12  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1E2A                        _Flash_Memory_Read 1D7C  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0071  
                 __size_of_CC2500_TxData 0065                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 1A87  
                                _RF_Data 0120                                  _RF_Main 1A00  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1ABF          __end_of_setControl_Lights_Table 07EB  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0A68                          _setPercentValue 0802  
                ??_setLoad_AH_AL_Restore 0020                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E6  
           __end_of_CC2500_FrequencyCabr 1AE1                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1C06                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0168  
                                _VarLED2 016C                        __end_of_getRxData 08B1  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C88  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1BA3  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 1A5F  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1B93                                  ___awdiv 14C8  
                                ___ftadd 04C6                           ??_setSw_Enable 0022  
                                ___ftdiv 0DE6                          __size_of___wmul 001E  
                                ___ftmul 0E8F                                  ___fttol 0C4C  
                    __end_of_Switch_Main 1A87                                  ___lwdiv 11AA  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 1432  
                                __ptext2 1A8F                                  __ptext3 1AA0  
                                __ptext4 1B74                                  __ptext5 1174  
                                __ptext6 0B4D                                  __ptext7 1E49  
                                __ptext8 1C3C                                  __ptext9 0002  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0071  
                  _DimmerIntrPointSelect 1C06                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 1E49                __end_of_Flash_Memory_Read 1D96  
                             _setRF_Main 05BC                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1A4F                        _DimmerLights_Main 1AB4  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1AB4               __end_of_CC2500_ClearRXFIFO 1A10  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1A14  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006D  
                         _LedPointSelect 1066                      _DelayOffPointSelect 1C9C  
                                clrloop0 1A33           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1B2C                     end_of_initialization 0049  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 1A57  
                      _CC2500_InitSetREG 1F81                            _DelayTime_1us 1F34  
                      __end_of_setTxData 1000               __end_of_Flash_Memory_Write 110D  
                                init_ram 1A2C                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1A2D                               _setSw_Main 037A  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1ECC  
                 __size_of_setLoad_Count 000E                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1BE4                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 09F7  
                          _CC2500_TxData 179B                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1B56              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 135A                  _DimmerLights_Exceptions 13E8  
                            ?_getLoad_AD 0070                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1A97                      ??_CC2500_ReadStatus 0022  
                       _setLoad_StatusOn 1EEE         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
              setLoad_Exceptions@command 0030                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1ABF                       _Mcu_Initialization 1C18  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0043  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$7025 0067                          _setSw_Main$7026 0068  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1083  
                __end_of_Sw_DimmerOnFunc 0ADA                  __end_of_setPercentValue 0848  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 1FAB  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1316                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1EEE               __end_of_setLoad_Exceptions 1219  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1D7C  
                   _setRF_Initialization 1ACA                              _Switch_Main 1A7F  
            setDimmerLights_Clear@lights 0023                      setLoad_Exceptions@i 002F  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C4E  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 07EB  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1C3C                __size_of_Sw_DimmerAdjFunc 004C  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1C74  
                         __end_of___wmul 1DEC                        __size_of_TMR0_ISR 0027  
        __size_of_setOverTemp_Exceptions 003F                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 1D05  
          __size_of_setDimmerLights_Main 0073                           __end_of_setLED 16DB  
                         __end_of_setBuz 1622                            _setLoad_Count 1B3A  
        _getDimmerLights_StatusFlag$2647 0022                     _CC2500_FrequencyCabr 1AD5  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0D5B  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 113F  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1D33  
                              _Load_Main 020C                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1E0B  
        __size_of_setTemp_Initialization 0003                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0C4C  
                            ?_setLoad_GO 0070                     __end_of_setSw_Enable 1DCE  
                    __size_of_getLoad_AD 0079                             ?_Buzzer_Main 0070  
                     _set_TimeoutCleared 1A1C                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 0164  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1B65                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              i1setLoad_StatusOff@lights 0071                  __size_of_setRFSW_Status 000E  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 1A09  
              ??_DimmerLights_Exceptions 002D            setOverTemp_Exceptions@command 0030  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D3                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                               ??___wmul 0024                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D4                              __pdataBANK4 0245  
                               ??_setLED 0023                         ??_setTemp_Enable 0020  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                         ?_setLoad_Count 0070                         _CC2500_SIDLEMode 1A14  
             __size_of_DimmerLights_Main 000B                __end_of_setRF_DimmerValue 1174  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$5902 0068  
                            __pbssCOMMON 0076                                 ?_IOC_Set 0070  
                              ___latbits 0003                               ?_Load_Main 0070  
                  setTemp_Enable@command 0020                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                          __pcstackBANK4 0265                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0088  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 006B               __size_of_CC2500_ReadStatus 0022  
                 _setOverTemp_Exceptions 1253                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 013D  
                          _DimmerLights2 014C                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                    __size_of_setRF_Enable 000E  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1DB2  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006D  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00DD                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 1A03                                _getBuz_GO 1BF5  
    __end_of_Flash_Memory_Initialization 0760              _Flash_Memory_Initialization 0699  
                               ?___awdiv 0020                                __ptext100 1CB0  
                              __ptext101 091C                                __ptext110 1B83  
                              __ptext102 0802                                __ptext111 1C4E  
                              __ptext103 0C4C                                __ptext120 1F81  
                              __ptext112 15C9                                __ptext104 0DE6  
                              __ptext121 1DEC                                __ptext113 14C8  
                              __ptext105 1EAA                                __ptext130 1C88  
                              __ptext122 1E89                                __ptext114 1A47  
                              __ptext106 173A                                __ptext131 139E  
                              __ptext123 1AD5                                __ptext115 1AA9  
                              __ptext107 1B2C                                __ptext140 10B0  
                              __ptext132 19FA                                __ptext124 1F34  
                              __ptext116 1C9C                                __ptext108 1C61  
                              __ptext141 1C74                                __ptext125 1A10  
                              __ptext117 07EB                                __ptext109 1B93  
                               ?___ftadd 003E                                __ptext134 1F5A  
                              __ptext126 1A0C                                __ptext118 1A14  
                              __ptext135 004D                                __ptext127 1D4A  
                              __ptext119 12D3                                __ptext136 1CD9  
                              __ptext128 1A1C                                __ptext137 1C06  
                              __ptext129 1CC4                                __ptext138 1B05  
                              __ptext139 1A3F                                _getRxData 0848  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 0DE6                      __size_of_setLoad_GO 0008  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 19FD                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1B74       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0055                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 014C  
          __end_of_setDimmerLights_ERROR 1571             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 1F34            __end_of_setDimmerLights_AdjGo 1BC3  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
          __end_of_setDimmerLights_Clear 1BB3                                _r_address 00D5  
         __size_of_myMain_Initialization 000F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1B83                           __size_of_getAD 0020  
                           _setRF_Enable 1B48                         ___lwdiv@quotient 0026  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1CB0  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 12D3  
                    _DimmerLightsIntrIOC 00D1                 __end_of_setLoad_StatusOn 1F11  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1A09  
                      _CC2500_rfSettings 102F                           ___wmul@product 0024  
                               _LED_Main 1AF9                          SwPointSelect@sw 0021  
                              clear_ram0 1A32                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0F43      __end_of_DimmerLights_Initialization 1D1C  
            _DimmerLights_Initialization 1D05                       _CC2500_ClearRXFIFO 1A0C  
                     _CC2500_ClearTXFIFO 1A10           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1A7F                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003A  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 10DE  
                             ?_getRxData 0070                                 _TMR0_ISR 1F5A  
                           ??_getLoad_AD 0024                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1CEF  
                               _TMR0_Set 1A67                         _Sw_DimmerAdjFunc 147C  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                    __end_of_my_MainTime 147C                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00CA  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1D63  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1C3C  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0988  
                  __size_of_setTemp_Main 0086                  __size_of_setDelayOff_GO 005F  
                  __size_of_setSw_Enable 001C                                 _DelayOff 006A  
                           setSw_Main@sw 0069         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0031                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1AED                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 113F                    _DlyOff_Initialization 1AA9  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1A18  
                       __size_of_WDT_Set 000B                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 0BC6                    _Switch_Initialization 1B1F  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1B2C                             _setMemory_GO 1CEF  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 11AA  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1C88  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 005E  
                            ??_Temp_Main 0032                        setRFSW_Control@sw 0063  
                    _Load_Initialization 1A21                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 2000    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1FD5                  ??_DimmerIntrPointSelect 0070  
                           _setTemp_Main 0BC6                       _setLoad_Exceptions 11E1  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1DB2                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
                               ___awtoft 1EAA                         ??_LedPointSelect 0020  
                               ___ftpack 173A                             _setSw_Status 1B56  
                      getTemp_AD@channel 0025                             ??_setRF_Main 0067  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1292  
                    ?_setLoad_Exceptions 0070                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0988                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E                          ___lwdiv@divisor 0020  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0025  
                               __ptext10 1A09                                 __ptext11 0BC6  
                               __ptext20 0988                                 __ptext12 1253  
                               __ptext21 147C                                 __ptext13 1A87  
                               __ptext30 110D                                 __ptext22 1BC3  
                               __ptext14 1A06                                 __ptext31 0760  
                               __ptext23 1BB3                                 __ptext15 1A03  
                               __ptext40 0E8F                                 __ptext32 0D5B  
                               __ptext24 1B1F                                 __ptext16 1A7F  
                               __ptext41 04C6                                 __ptext33 16DB  
                               __ptext25 1A6F                                 __ptext17 037A  
                               __ptext50 1ABF                                 __ptext42 1BF5  
                               __ptext34 1FAB                                 __ptext26 1B65  
                               __ptext18 1A77                                 __ptext51 1A67  
                               __ptext43 179B                                 __ptext35 1C2A  
                               __ptext27 1A00                                 __ptext19 0A68  
                               __ptext60 13E8                                 __ptext52 1D63  
                               __ptext44 09F7                                 __ptext36 1219  
                               __ptext28 05BC                                 __ptext61 1FD5  
                               __ptext53 1B12                                 __ptext45 1ECC  
                               __ptext37 113F                                 __ptext29 0848  
                               __ptext70 1292                                 __ptext62 151C  
                               __ptext54 1A18                                 __ptext46 1D33  
                               __ptext38 1F11                                 __ptext71 1AED  
                               __ptext63 1BA3                                 __ptext55 1A38  
                               __ptext47 19FD                                 __ptext39 1622  
                               __ptext80 1AB4                                 __ptext72 1BE4  
                               __ptext64 1A5F                                 __ptext56 020C  
                               __ptext48 1ACA                                 __ptext81 0ADA  
                               __ptext73 1E2A                                 __ptext65 1DCE  
                               __ptext57 11E1                                 __ptext49 1C18  
                               __ptext90 1CEF                                 __ptext82 1316  
                               __ptext74 135A                                 __ptext66 11AA  
                               __ptext58 1DB2                                 __ptext91 1A57  
                               __ptext83 1E0B                                 __ptext75 1AE1  
                               __ptext67 1A21                                 __ptext59 1B48  
                               __ptext92 1BD3                                 __ptext84 0CD3  
                               __ptext76 0699                                 __ptext68 1D96  
                               __ptext93 1D05                                 __ptext85 1EEE  
                               __ptext77 10DE                                 __ptext69 1AF9  
                               __ptext94 1083                                 __ptext86 1B3A  
                               __ptext78 1A97                                 __ptext95 1A26  
                               __ptext87 167D                                 __ptext79 1D7C  
                               __ptext96 1A4F                                 __ptext88 1066  
                               __ptext97 08B1                                 __ptext89 1D1C  
                               __ptext98 0F43                                 __ptext99 1B56  
                               __product 0245            ??_setDimmerLights_IntrControl 0072  
                           ??_setLoad_GO 0020                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 0013           __size_of_Dimmer_Initialization 0006  
                 __end_of_setRFSW_Status 1B3A            __end_of_Dimmer_Initialization 1A2C  
           __end_of_setDimmerLights_Main 0B4D              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1A77  
               __end_of_CC2500_SIDLEMode 1A18               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1CB0               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1D1C                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 0008                     ??_setLoad_Exceptions 002E  
                        _CC2500_ReadByte 1D33                              _my_MainTime 1432  
                     _CC2500_InitPATable 1DEC      __size_of_getDimmerLights_StatusFlag 0011  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0699  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 0265            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 0267                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 12D3                       __end_of_setLoad_GO 1A5F  
            __end_of_Flash_Memory_Modify 139E                        ??_getPercentValue 0059  
                            _setLog_Code 110D              __end_of_Flash_Memory_Unlock 1AA0  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1E89  
                     __end_of_setSw_Main 04C6                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_OK 03D9  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0070  
                ?_setOverTemp_Exceptions 0070                           _DelayTimejudge 1FAB  
                          ?_getLoad_Safe 0070                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0009                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 10B0  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 1083              __end_of_setDimmerLights_Adj 135A  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 19FD  
   __size_of_setDimmerLights_IntrControl 01BF                              getLoad_AD@i 0028  
                            getLoad_AD@j 0027                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 1AE1                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007A          __end_of_DelayOff_Initialization 1A4F  
    __size_of_setDimmerLights_IntrIOC_GO 002E                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1A57  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 16DB  
       __size_of_setControl_Lights_Table 008B                        _setLoad_StatusOff 1E0B  
                 __end_of_DelayTimejudge 1FD5           __end_of_setOverTemp_Exceptions 1292  
                         ??_getLoad_Safe 0020     __size_of_Flash_Memory_Initialization 00C7  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0062  
                     ?_setLoad_StatusOff 0020                    __end_of_DelayTime_1us 1F5A  
               __end_of_Sw_DimmerAdjFunc 14C8                  __end_of_CC2500_ReadByte 1D4A  
           __end_of_setSw_Initialization 1A77                          _Timeout_Counter 1CC4  
                   getPercentValue@value 005B               __end_of_LED_Initialization 1AF9  
       __size_of_setDimmerLights_Trigger 0010                        ?_setLoad_StatusOn 0020  
         __end_of_setTemp_Initialization 1A06                 __size_of_Sw_DimmerOnFunc 0072  
                    ??_setLoad_StatusOff 0021                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1A00                 __end_of_Sw_DimmerOffFunc 09F7  
                     ??_setLoad_StatusOn 0021          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    __end_of_CC2500_RxData 0A68  
                  __end_of_CC2500_TxData 1800                           ??_getTemp_Safe 0020  
                  _setLoad_AH_AL_Restore 1D96                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1316  
