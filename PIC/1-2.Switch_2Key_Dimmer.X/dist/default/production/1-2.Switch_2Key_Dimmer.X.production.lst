

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Oct 21 17:21:41 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	intentry,global,class=CODE,delta=2
   154                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text137,local,class=CODE,merge=1,delta=2
   157                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   162                           	dabs	1,0x7E,2
   163  0000                     	;# 
   164  0001                     	;# 
   165  0002                     	;# 
   166  0003                     	;# 
   167  0004                     	;# 
   168  0005                     	;# 
   169  0006                     	;# 
   170  0007                     	;# 
   171  0008                     	;# 
   172  0009                     	;# 
   173  000A                     	;# 
   174  000B                     	;# 
   175  000C                     	;# 
   176  000D                     	;# 
   177  000E                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  0116                     	;# 
   210  0117                     	;# 
   211  011D                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  018E                     	;# 
   215  0191                     	;# 
   216  0191                     	;# 
   217  0192                     	;# 
   218  0193                     	;# 
   219  0193                     	;# 
   220  0194                     	;# 
   221  0195                     	;# 
   222  0196                     	;# 
   223  0197                     	;# 
   224  0199                     	;# 
   225  019A                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019C                     	;# 
   231  019C                     	;# 
   232  019D                     	;# 
   233  019E                     	;# 
   234  019F                     	;# 
   235  020D                     	;# 
   236  0210                     	;# 
   237  0211                     	;# 
   238  0211                     	;# 
   239  0212                     	;# 
   240  0212                     	;# 
   241  0213                     	;# 
   242  0213                     	;# 
   243  0214                     	;# 
   244  0214                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  0291                     	;# 
   253  0291                     	;# 
   254  0292                     	;# 
   255  0293                     	;# 
   256  0298                     	;# 
   257  0298                     	;# 
   258  0299                     	;# 
   259  029A                     	;# 
   260  0394                     	;# 
   261  0395                     	;# 
   262  0396                     	;# 
   263  0FE4                     	;# 
   264  0FE5                     	;# 
   265  0FE6                     	;# 
   266  0FE7                     	;# 
   267  0FE8                     	;# 
   268  0FE9                     	;# 
   269  0FEA                     	;# 
   270  0FEB                     	;# 
   271  0FED                     	;# 
   272  0FEE                     	;# 
   273  0FEF                     	;# 
   274  0000                     	;# 
   275  0001                     	;# 
   276  0002                     	;# 
   277  0003                     	;# 
   278  0004                     	;# 
   279  0005                     	;# 
   280  0006                     	;# 
   281  0007                     	;# 
   282  0008                     	;# 
   283  0009                     	;# 
   284  000A                     	;# 
   285  000B                     	;# 
   286  000C                     	;# 
   287  000D                     	;# 
   288  000E                     	;# 
   289  0010                     	;# 
   290  0011                     	;# 
   291  0012                     	;# 
   292  0015                     	;# 
   293  0016                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001C                     	;# 
   301  008C                     	;# 
   302  008D                     	;# 
   303  008E                     	;# 
   304  0090                     	;# 
   305  0091                     	;# 
   306  0092                     	;# 
   307  0095                     	;# 
   308  0096                     	;# 
   309  0097                     	;# 
   310  0099                     	;# 
   311  009A                     	;# 
   312  009B                     	;# 
   313  009B                     	;# 
   314  009C                     	;# 
   315  009D                     	;# 
   316  009E                     	;# 
   317  010C                     	;# 
   318  010D                     	;# 
   319  010E                     	;# 
   320  0116                     	;# 
   321  0117                     	;# 
   322  011D                     	;# 
   323  018C                     	;# 
   324  018D                     	;# 
   325  018E                     	;# 
   326  0191                     	;# 
   327  0191                     	;# 
   328  0192                     	;# 
   329  0193                     	;# 
   330  0193                     	;# 
   331  0194                     	;# 
   332  0195                     	;# 
   333  0196                     	;# 
   334  0197                     	;# 
   335  0199                     	;# 
   336  019A                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019C                     	;# 
   342  019C                     	;# 
   343  019D                     	;# 
   344  019E                     	;# 
   345  019F                     	;# 
   346  020D                     	;# 
   347  0210                     	;# 
   348  0211                     	;# 
   349  0211                     	;# 
   350  0212                     	;# 
   351  0212                     	;# 
   352  0213                     	;# 
   353  0213                     	;# 
   354  0214                     	;# 
   355  0214                     	;# 
   356  0215                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0216                     	;# 
   360  0216                     	;# 
   361  0217                     	;# 
   362  0217                     	;# 
   363  0291                     	;# 
   364  0291                     	;# 
   365  0292                     	;# 
   366  0293                     	;# 
   367  0298                     	;# 
   368  0298                     	;# 
   369  0299                     	;# 
   370  029A                     	;# 
   371  0394                     	;# 
   372  0395                     	;# 
   373  0396                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0010                     	;# 
   401  0011                     	;# 
   402  0012                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  008C                     	;# 
   413  008D                     	;# 
   414  008E                     	;# 
   415  0090                     	;# 
   416  0091                     	;# 
   417  0092                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010E                     	;# 
   431  0116                     	;# 
   432  0117                     	;# 
   433  011D                     	;# 
   434  018C                     	;# 
   435  018D                     	;# 
   436  018E                     	;# 
   437  0191                     	;# 
   438  0191                     	;# 
   439  0192                     	;# 
   440  0193                     	;# 
   441  0193                     	;# 
   442  0194                     	;# 
   443  0195                     	;# 
   444  0196                     	;# 
   445  0197                     	;# 
   446  0199                     	;# 
   447  019A                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019C                     	;# 
   453  019C                     	;# 
   454  019D                     	;# 
   455  019E                     	;# 
   456  019F                     	;# 
   457  020D                     	;# 
   458  0210                     	;# 
   459  0211                     	;# 
   460  0211                     	;# 
   461  0212                     	;# 
   462  0212                     	;# 
   463  0213                     	;# 
   464  0213                     	;# 
   465  0214                     	;# 
   466  0214                     	;# 
   467  0215                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0216                     	;# 
   471  0216                     	;# 
   472  0217                     	;# 
   473  0217                     	;# 
   474  0291                     	;# 
   475  0291                     	;# 
   476  0292                     	;# 
   477  0293                     	;# 
   478  0298                     	;# 
   479  0298                     	;# 
   480  0299                     	;# 
   481  029A                     	;# 
   482  0394                     	;# 
   483  0395                     	;# 
   484  0396                     	;# 
   485  0FE4                     	;# 
   486  0FE5                     	;# 
   487  0FE6                     	;# 
   488  0FE7                     	;# 
   489  0FE8                     	;# 
   490  0FE9                     	;# 
   491  0FEA                     	;# 
   492  0FEB                     	;# 
   493  0FED                     	;# 
   494  0FEE                     	;# 
   495  0FEF                     	;# 
   496  0000                     	;# 
   497  0001                     	;# 
   498  0002                     	;# 
   499  0003                     	;# 
   500  0004                     	;# 
   501  0005                     	;# 
   502  0006                     	;# 
   503  0007                     	;# 
   504  0008                     	;# 
   505  0009                     	;# 
   506  000A                     	;# 
   507  000B                     	;# 
   508  000C                     	;# 
   509  000D                     	;# 
   510  000E                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0015                     	;# 
   515  0016                     	;# 
   516  0016                     	;# 
   517  0017                     	;# 
   518  0018                     	;# 
   519  0019                     	;# 
   520  001A                     	;# 
   521  001B                     	;# 
   522  001C                     	;# 
   523  008C                     	;# 
   524  008D                     	;# 
   525  008E                     	;# 
   526  0090                     	;# 
   527  0091                     	;# 
   528  0092                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0099                     	;# 
   533  009A                     	;# 
   534  009B                     	;# 
   535  009B                     	;# 
   536  009C                     	;# 
   537  009D                     	;# 
   538  009E                     	;# 
   539  010C                     	;# 
   540  010D                     	;# 
   541  010E                     	;# 
   542  0116                     	;# 
   543  0117                     	;# 
   544  011D                     	;# 
   545  018C                     	;# 
   546  018D                     	;# 
   547  018E                     	;# 
   548  0191                     	;# 
   549  0191                     	;# 
   550  0192                     	;# 
   551  0193                     	;# 
   552  0193                     	;# 
   553  0194                     	;# 
   554  0195                     	;# 
   555  0196                     	;# 
   556  0197                     	;# 
   557  0199                     	;# 
   558  019A                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019C                     	;# 
   564  019C                     	;# 
   565  019D                     	;# 
   566  019E                     	;# 
   567  019F                     	;# 
   568  020D                     	;# 
   569  0210                     	;# 
   570  0211                     	;# 
   571  0211                     	;# 
   572  0212                     	;# 
   573  0212                     	;# 
   574  0213                     	;# 
   575  0213                     	;# 
   576  0214                     	;# 
   577  0214                     	;# 
   578  0215                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0216                     	;# 
   582  0216                     	;# 
   583  0217                     	;# 
   584  0217                     	;# 
   585  0291                     	;# 
   586  0291                     	;# 
   587  0292                     	;# 
   588  0293                     	;# 
   589  0298                     	;# 
   590  0298                     	;# 
   591  0299                     	;# 
   592  029A                     	;# 
   593  0394                     	;# 
   594  0395                     	;# 
   595  0396                     	;# 
   596  0FE4                     	;# 
   597  0FE5                     	;# 
   598  0FE6                     	;# 
   599  0FE7                     	;# 
   600  0FE8                     	;# 
   601  0FE9                     	;# 
   602  0FEA                     	;# 
   603  0FEB                     	;# 
   604  0FED                     	;# 
   605  0FEE                     	;# 
   606  0FEF                     	;# 
   607  0000                     	;# 
   608  0001                     	;# 
   609  0002                     	;# 
   610  0003                     	;# 
   611  0004                     	;# 
   612  0005                     	;# 
   613  0006                     	;# 
   614  0007                     	;# 
   615  0008                     	;# 
   616  0009                     	;# 
   617  000A                     	;# 
   618  000B                     	;# 
   619  000C                     	;# 
   620  000D                     	;# 
   621  000E                     	;# 
   622  0010                     	;# 
   623  0011                     	;# 
   624  0012                     	;# 
   625  0015                     	;# 
   626  0016                     	;# 
   627  0016                     	;# 
   628  0017                     	;# 
   629  0018                     	;# 
   630  0019                     	;# 
   631  001A                     	;# 
   632  001B                     	;# 
   633  001C                     	;# 
   634  008C                     	;# 
   635  008D                     	;# 
   636  008E                     	;# 
   637  0090                     	;# 
   638  0091                     	;# 
   639  0092                     	;# 
   640  0095                     	;# 
   641  0096                     	;# 
   642  0097                     	;# 
   643  0099                     	;# 
   644  009A                     	;# 
   645  009B                     	;# 
   646  009B                     	;# 
   647  009C                     	;# 
   648  009D                     	;# 
   649  009E                     	;# 
   650  010C                     	;# 
   651  010D                     	;# 
   652  010E                     	;# 
   653  0116                     	;# 
   654  0117                     	;# 
   655  011D                     	;# 
   656  018C                     	;# 
   657  018D                     	;# 
   658  018E                     	;# 
   659  0191                     	;# 
   660  0191                     	;# 
   661  0192                     	;# 
   662  0193                     	;# 
   663  0193                     	;# 
   664  0194                     	;# 
   665  0195                     	;# 
   666  0196                     	;# 
   667  0197                     	;# 
   668  0199                     	;# 
   669  019A                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019C                     	;# 
   675  019C                     	;# 
   676  019D                     	;# 
   677  019E                     	;# 
   678  019F                     	;# 
   679  020D                     	;# 
   680  0210                     	;# 
   681  0211                     	;# 
   682  0211                     	;# 
   683  0212                     	;# 
   684  0212                     	;# 
   685  0213                     	;# 
   686  0213                     	;# 
   687  0214                     	;# 
   688  0214                     	;# 
   689  0215                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0216                     	;# 
   693  0216                     	;# 
   694  0217                     	;# 
   695  0217                     	;# 
   696  0291                     	;# 
   697  0291                     	;# 
   698  0292                     	;# 
   699  0293                     	;# 
   700  0298                     	;# 
   701  0298                     	;# 
   702  0299                     	;# 
   703  029A                     	;# 
   704  0394                     	;# 
   705  0395                     	;# 
   706  0396                     	;# 
   707  0FE4                     	;# 
   708  0FE5                     	;# 
   709  0FE6                     	;# 
   710  0FE7                     	;# 
   711  0FE8                     	;# 
   712  0FE9                     	;# 
   713  0FEA                     	;# 
   714  0FEB                     	;# 
   715  0FED                     	;# 
   716  0FEE                     	;# 
   717  0FEF                     	;# 
   718  0000                     	;# 
   719  0001                     	;# 
   720  0002                     	;# 
   721  0003                     	;# 
   722  0004                     	;# 
   723  0005                     	;# 
   724  0006                     	;# 
   725  0007                     	;# 
   726  0008                     	;# 
   727  0009                     	;# 
   728  000A                     	;# 
   729  000B                     	;# 
   730  000C                     	;# 
   731  000D                     	;# 
   732  000E                     	;# 
   733  0010                     	;# 
   734  0011                     	;# 
   735  0012                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  008C                     	;# 
   746  008D                     	;# 
   747  008E                     	;# 
   748  0090                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0099                     	;# 
   755  009A                     	;# 
   756  009B                     	;# 
   757  009B                     	;# 
   758  009C                     	;# 
   759  009D                     	;# 
   760  009E                     	;# 
   761  010C                     	;# 
   762  010D                     	;# 
   763  010E                     	;# 
   764  0116                     	;# 
   765  0117                     	;# 
   766  011D                     	;# 
   767  018C                     	;# 
   768  018D                     	;# 
   769  018E                     	;# 
   770  0191                     	;# 
   771  0191                     	;# 
   772  0192                     	;# 
   773  0193                     	;# 
   774  0193                     	;# 
   775  0194                     	;# 
   776  0195                     	;# 
   777  0196                     	;# 
   778  0197                     	;# 
   779  0199                     	;# 
   780  019A                     	;# 
   781  019B                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019C                     	;# 
   786  019C                     	;# 
   787  019D                     	;# 
   788  019E                     	;# 
   789  019F                     	;# 
   790  020D                     	;# 
   791  0210                     	;# 
   792  0211                     	;# 
   793  0211                     	;# 
   794  0212                     	;# 
   795  0212                     	;# 
   796  0213                     	;# 
   797  0213                     	;# 
   798  0214                     	;# 
   799  0214                     	;# 
   800  0215                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0216                     	;# 
   804  0216                     	;# 
   805  0217                     	;# 
   806  0217                     	;# 
   807  0291                     	;# 
   808  0291                     	;# 
   809  0292                     	;# 
   810  0293                     	;# 
   811  0298                     	;# 
   812  0298                     	;# 
   813  0299                     	;# 
   814  029A                     	;# 
   815  0394                     	;# 
   816  0395                     	;# 
   817  0396                     	;# 
   818  0FE4                     	;# 
   819  0FE5                     	;# 
   820  0FE6                     	;# 
   821  0FE7                     	;# 
   822  0FE8                     	;# 
   823  0FE9                     	;# 
   824  0FEA                     	;# 
   825  0FEB                     	;# 
   826  0FED                     	;# 
   827  0FEE                     	;# 
   828  0FEF                     	;# 
   829  0000                     	;# 
   830  0001                     	;# 
   831  0002                     	;# 
   832  0003                     	;# 
   833  0004                     	;# 
   834  0005                     	;# 
   835  0006                     	;# 
   836  0007                     	;# 
   837  0008                     	;# 
   838  0009                     	;# 
   839  000A                     	;# 
   840  000B                     	;# 
   841  000C                     	;# 
   842  000D                     	;# 
   843  000E                     	;# 
   844  0010                     	;# 
   845  0011                     	;# 
   846  0012                     	;# 
   847  0015                     	;# 
   848  0016                     	;# 
   849  0016                     	;# 
   850  0017                     	;# 
   851  0018                     	;# 
   852  0019                     	;# 
   853  001A                     	;# 
   854  001B                     	;# 
   855  001C                     	;# 
   856  008C                     	;# 
   857  008D                     	;# 
   858  008E                     	;# 
   859  0090                     	;# 
   860  0091                     	;# 
   861  0092                     	;# 
   862  0095                     	;# 
   863  0096                     	;# 
   864  0097                     	;# 
   865  0099                     	;# 
   866  009A                     	;# 
   867  009B                     	;# 
   868  009B                     	;# 
   869  009C                     	;# 
   870  009D                     	;# 
   871  009E                     	;# 
   872  010C                     	;# 
   873  010D                     	;# 
   874  010E                     	;# 
   875  0116                     	;# 
   876  0117                     	;# 
   877  011D                     	;# 
   878  018C                     	;# 
   879  018D                     	;# 
   880  018E                     	;# 
   881  0191                     	;# 
   882  0191                     	;# 
   883  0192                     	;# 
   884  0193                     	;# 
   885  0193                     	;# 
   886  0194                     	;# 
   887  0195                     	;# 
   888  0196                     	;# 
   889  0197                     	;# 
   890  0199                     	;# 
   891  019A                     	;# 
   892  019B                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019C                     	;# 
   897  019C                     	;# 
   898  019D                     	;# 
   899  019E                     	;# 
   900  019F                     	;# 
   901  020D                     	;# 
   902  0210                     	;# 
   903  0211                     	;# 
   904  0211                     	;# 
   905  0212                     	;# 
   906  0212                     	;# 
   907  0213                     	;# 
   908  0213                     	;# 
   909  0214                     	;# 
   910  0214                     	;# 
   911  0215                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0216                     	;# 
   915  0216                     	;# 
   916  0217                     	;# 
   917  0217                     	;# 
   918  0291                     	;# 
   919  0291                     	;# 
   920  0292                     	;# 
   921  0293                     	;# 
   922  0298                     	;# 
   923  0298                     	;# 
   924  0299                     	;# 
   925  029A                     	;# 
   926  0394                     	;# 
   927  0395                     	;# 
   928  0396                     	;# 
   929  0FE4                     	;# 
   930  0FE5                     	;# 
   931  0FE6                     	;# 
   932  0FE7                     	;# 
   933  0FE8                     	;# 
   934  0FE9                     	;# 
   935  0FEA                     	;# 
   936  0FEB                     	;# 
   937  0FED                     	;# 
   938  0FEE                     	;# 
   939  0FEF                     	;# 
   940  0000                     	;# 
   941  0001                     	;# 
   942  0002                     	;# 
   943  0003                     	;# 
   944  0004                     	;# 
   945  0005                     	;# 
   946  0006                     	;# 
   947  0007                     	;# 
   948  0008                     	;# 
   949  0009                     	;# 
   950  000A                     	;# 
   951  000B                     	;# 
   952  000C                     	;# 
   953  000D                     	;# 
   954  000E                     	;# 
   955  0010                     	;# 
   956  0011                     	;# 
   957  0012                     	;# 
   958  0015                     	;# 
   959  0016                     	;# 
   960  0016                     	;# 
   961  0017                     	;# 
   962  0018                     	;# 
   963  0019                     	;# 
   964  001A                     	;# 
   965  001B                     	;# 
   966  001C                     	;# 
   967  008C                     	;# 
   968  008D                     	;# 
   969  008E                     	;# 
   970  0090                     	;# 
   971  0091                     	;# 
   972  0092                     	;# 
   973  0095                     	;# 
   974  0096                     	;# 
   975  0097                     	;# 
   976  0099                     	;# 
   977  009A                     	;# 
   978  009B                     	;# 
   979  009B                     	;# 
   980  009C                     	;# 
   981  009D                     	;# 
   982  009E                     	;# 
   983  010C                     	;# 
   984  010D                     	;# 
   985  010E                     	;# 
   986  0116                     	;# 
   987  0117                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0197                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019C                     	;# 
  1008  019C                     	;# 
  1009  019D                     	;# 
  1010  019E                     	;# 
  1011  019F                     	;# 
  1012  020D                     	;# 
  1013  0210                     	;# 
  1014  0211                     	;# 
  1015  0211                     	;# 
  1016  0212                     	;# 
  1017  0212                     	;# 
  1018  0213                     	;# 
  1019  0213                     	;# 
  1020  0214                     	;# 
  1021  0214                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0216                     	;# 
  1026  0216                     	;# 
  1027  0217                     	;# 
  1028  0217                     	;# 
  1029  0291                     	;# 
  1030  0291                     	;# 
  1031  0292                     	;# 
  1032  0293                     	;# 
  1033  0298                     	;# 
  1034  0298                     	;# 
  1035  0299                     	;# 
  1036  029A                     	;# 
  1037  0394                     	;# 
  1038  0395                     	;# 
  1039  0396                     	;# 
  1040  0FE4                     	;# 
  1041  0FE5                     	;# 
  1042  0FE6                     	;# 
  1043  0FE7                     	;# 
  1044  0FE8                     	;# 
  1045  0FE9                     	;# 
  1046  0FEA                     	;# 
  1047  0FEB                     	;# 
  1048  0FED                     	;# 
  1049  0FEE                     	;# 
  1050  0FEF                     	;# 
  1051  0000                     	;# 
  1052  0001                     	;# 
  1053  0002                     	;# 
  1054  0003                     	;# 
  1055  0004                     	;# 
  1056  0005                     	;# 
  1057  0006                     	;# 
  1058  0007                     	;# 
  1059  0008                     	;# 
  1060  0009                     	;# 
  1061  000A                     	;# 
  1062  000B                     	;# 
  1063  000C                     	;# 
  1064  000D                     	;# 
  1065  000E                     	;# 
  1066  0010                     	;# 
  1067  0011                     	;# 
  1068  0012                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0016                     	;# 
  1072  0017                     	;# 
  1073  0018                     	;# 
  1074  0019                     	;# 
  1075  001A                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  008C                     	;# 
  1079  008D                     	;# 
  1080  008E                     	;# 
  1081  0090                     	;# 
  1082  0091                     	;# 
  1083  0092                     	;# 
  1084  0095                     	;# 
  1085  0096                     	;# 
  1086  0097                     	;# 
  1087  0099                     	;# 
  1088  009A                     	;# 
  1089  009B                     	;# 
  1090  009B                     	;# 
  1091  009C                     	;# 
  1092  009D                     	;# 
  1093  009E                     	;# 
  1094  010C                     	;# 
  1095  010D                     	;# 
  1096  010E                     	;# 
  1097  0116                     	;# 
  1098  0117                     	;# 
  1099  011D                     	;# 
  1100  018C                     	;# 
  1101  018D                     	;# 
  1102  018E                     	;# 
  1103  0191                     	;# 
  1104  0191                     	;# 
  1105  0192                     	;# 
  1106  0193                     	;# 
  1107  0193                     	;# 
  1108  0194                     	;# 
  1109  0195                     	;# 
  1110  0196                     	;# 
  1111  0197                     	;# 
  1112  0199                     	;# 
  1113  019A                     	;# 
  1114  019B                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019C                     	;# 
  1119  019C                     	;# 
  1120  019D                     	;# 
  1121  019E                     	;# 
  1122  019F                     	;# 
  1123  020D                     	;# 
  1124  0210                     	;# 
  1125  0211                     	;# 
  1126  0211                     	;# 
  1127  0212                     	;# 
  1128  0212                     	;# 
  1129  0213                     	;# 
  1130  0213                     	;# 
  1131  0214                     	;# 
  1132  0214                     	;# 
  1133  0215                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0216                     	;# 
  1137  0216                     	;# 
  1138  0217                     	;# 
  1139  0217                     	;# 
  1140  0291                     	;# 
  1141  0291                     	;# 
  1142  0292                     	;# 
  1143  0293                     	;# 
  1144  0298                     	;# 
  1145  0298                     	;# 
  1146  0299                     	;# 
  1147  029A                     	;# 
  1148  0394                     	;# 
  1149  0395                     	;# 
  1150  0396                     	;# 
  1151  0FE4                     	;# 
  1152  0FE5                     	;# 
  1153  0FE6                     	;# 
  1154  0FE7                     	;# 
  1155  0FE8                     	;# 
  1156  0FE9                     	;# 
  1157  0FEA                     	;# 
  1158  0FEB                     	;# 
  1159  0FED                     	;# 
  1160  0FEE                     	;# 
  1161  0FEF                     	;# 
  1162  0000                     	;# 
  1163  0001                     	;# 
  1164  0002                     	;# 
  1165  0003                     	;# 
  1166  0004                     	;# 
  1167  0005                     	;# 
  1168  0006                     	;# 
  1169  0007                     	;# 
  1170  0008                     	;# 
  1171  0009                     	;# 
  1172  000A                     	;# 
  1173  000B                     	;# 
  1174  000C                     	;# 
  1175  000D                     	;# 
  1176  000E                     	;# 
  1177  0010                     	;# 
  1178  0011                     	;# 
  1179  0012                     	;# 
  1180  0015                     	;# 
  1181  0016                     	;# 
  1182  0016                     	;# 
  1183  0017                     	;# 
  1184  0018                     	;# 
  1185  0019                     	;# 
  1186  001A                     	;# 
  1187  001B                     	;# 
  1188  001C                     	;# 
  1189  008C                     	;# 
  1190  008D                     	;# 
  1191  008E                     	;# 
  1192  0090                     	;# 
  1193  0091                     	;# 
  1194  0092                     	;# 
  1195  0095                     	;# 
  1196  0096                     	;# 
  1197  0097                     	;# 
  1198  0099                     	;# 
  1199  009A                     	;# 
  1200  009B                     	;# 
  1201  009B                     	;# 
  1202  009C                     	;# 
  1203  009D                     	;# 
  1204  009E                     	;# 
  1205  010C                     	;# 
  1206  010D                     	;# 
  1207  010E                     	;# 
  1208  0116                     	;# 
  1209  0117                     	;# 
  1210  011D                     	;# 
  1211  018C                     	;# 
  1212  018D                     	;# 
  1213  018E                     	;# 
  1214  0191                     	;# 
  1215  0191                     	;# 
  1216  0192                     	;# 
  1217  0193                     	;# 
  1218  0193                     	;# 
  1219  0194                     	;# 
  1220  0195                     	;# 
  1221  0196                     	;# 
  1222  0197                     	;# 
  1223  0199                     	;# 
  1224  019A                     	;# 
  1225  019B                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019C                     	;# 
  1230  019C                     	;# 
  1231  019D                     	;# 
  1232  019E                     	;# 
  1233  019F                     	;# 
  1234  020D                     	;# 
  1235  0210                     	;# 
  1236  0211                     	;# 
  1237  0211                     	;# 
  1238  0212                     	;# 
  1239  0212                     	;# 
  1240  0213                     	;# 
  1241  0213                     	;# 
  1242  0214                     	;# 
  1243  0214                     	;# 
  1244  0215                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0216                     	;# 
  1248  0216                     	;# 
  1249  0217                     	;# 
  1250  0217                     	;# 
  1251  0291                     	;# 
  1252  0291                     	;# 
  1253  0292                     	;# 
  1254  0293                     	;# 
  1255  0298                     	;# 
  1256  0298                     	;# 
  1257  0299                     	;# 
  1258  029A                     	;# 
  1259  0394                     	;# 
  1260  0395                     	;# 
  1261  0396                     	;# 
  1262  0FE4                     	;# 
  1263  0FE5                     	;# 
  1264  0FE6                     	;# 
  1265  0FE7                     	;# 
  1266  0FE8                     	;# 
  1267  0FE9                     	;# 
  1268  0FEA                     	;# 
  1269  0FEB                     	;# 
  1270  0FED                     	;# 
  1271  0FEE                     	;# 
  1272  0FEF                     	;# 
  1273  0000                     	;# 
  1274  0001                     	;# 
  1275  0002                     	;# 
  1276  0003                     	;# 
  1277  0004                     	;# 
  1278  0005                     	;# 
  1279  0006                     	;# 
  1280  0007                     	;# 
  1281  0008                     	;# 
  1282  0009                     	;# 
  1283  000A                     	;# 
  1284  000B                     	;# 
  1285  000C                     	;# 
  1286  000D                     	;# 
  1287  000E                     	;# 
  1288  0010                     	;# 
  1289  0011                     	;# 
  1290  0012                     	;# 
  1291  0015                     	;# 
  1292  0016                     	;# 
  1293  0016                     	;# 
  1294  0017                     	;# 
  1295  0018                     	;# 
  1296  0019                     	;# 
  1297  001A                     	;# 
  1298  001B                     	;# 
  1299  001C                     	;# 
  1300  008C                     	;# 
  1301  008D                     	;# 
  1302  008E                     	;# 
  1303  0090                     	;# 
  1304  0091                     	;# 
  1305  0092                     	;# 
  1306  0095                     	;# 
  1307  0096                     	;# 
  1308  0097                     	;# 
  1309  0099                     	;# 
  1310  009A                     	;# 
  1311  009B                     	;# 
  1312  009B                     	;# 
  1313  009C                     	;# 
  1314  009D                     	;# 
  1315  009E                     	;# 
  1316  010C                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  0116                     	;# 
  1320  0117                     	;# 
  1321  011D                     	;# 
  1322  018C                     	;# 
  1323  018D                     	;# 
  1324  018E                     	;# 
  1325  0191                     	;# 
  1326  0191                     	;# 
  1327  0192                     	;# 
  1328  0193                     	;# 
  1329  0193                     	;# 
  1330  0194                     	;# 
  1331  0195                     	;# 
  1332  0196                     	;# 
  1333  0197                     	;# 
  1334  0199                     	;# 
  1335  019A                     	;# 
  1336  019B                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019C                     	;# 
  1341  019C                     	;# 
  1342  019D                     	;# 
  1343  019E                     	;# 
  1344  019F                     	;# 
  1345  020D                     	;# 
  1346  0210                     	;# 
  1347  0211                     	;# 
  1348  0211                     	;# 
  1349  0212                     	;# 
  1350  0212                     	;# 
  1351  0213                     	;# 
  1352  0213                     	;# 
  1353  0214                     	;# 
  1354  0214                     	;# 
  1355  0215                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0216                     	;# 
  1359  0216                     	;# 
  1360  0217                     	;# 
  1361  0217                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0298                     	;# 
  1367  0298                     	;# 
  1368  0299                     	;# 
  1369  029A                     	;# 
  1370  0394                     	;# 
  1371  0395                     	;# 
  1372  0396                     	;# 
  1373  0FE4                     	;# 
  1374  0FE5                     	;# 
  1375  0FE6                     	;# 
  1376  0FE7                     	;# 
  1377  0FE8                     	;# 
  1378  0FE9                     	;# 
  1379  0FEA                     	;# 
  1380  0FEB                     	;# 
  1381  0FED                     	;# 
  1382  0FEE                     	;# 
  1383  0FEF                     	;# 
  1384  0000                     	;# 
  1385  0001                     	;# 
  1386  0002                     	;# 
  1387  0003                     	;# 
  1388  0004                     	;# 
  1389  0005                     	;# 
  1390  0006                     	;# 
  1391  0007                     	;# 
  1392  0008                     	;# 
  1393  0009                     	;# 
  1394  000A                     	;# 
  1395  000B                     	;# 
  1396  000C                     	;# 
  1397  000D                     	;# 
  1398  000E                     	;# 
  1399  0010                     	;# 
  1400  0011                     	;# 
  1401  0012                     	;# 
  1402  0015                     	;# 
  1403  0016                     	;# 
  1404  0016                     	;# 
  1405  0017                     	;# 
  1406  0018                     	;# 
  1407  0019                     	;# 
  1408  001A                     	;# 
  1409  001B                     	;# 
  1410  001C                     	;# 
  1411  008C                     	;# 
  1412  008D                     	;# 
  1413  008E                     	;# 
  1414  0090                     	;# 
  1415  0091                     	;# 
  1416  0092                     	;# 
  1417  0095                     	;# 
  1418  0096                     	;# 
  1419  0097                     	;# 
  1420  0099                     	;# 
  1421  009A                     	;# 
  1422  009B                     	;# 
  1423  009B                     	;# 
  1424  009C                     	;# 
  1425  009D                     	;# 
  1426  009E                     	;# 
  1427  010C                     	;# 
  1428  010D                     	;# 
  1429  010E                     	;# 
  1430  0116                     	;# 
  1431  0117                     	;# 
  1432  011D                     	;# 
  1433  018C                     	;# 
  1434  018D                     	;# 
  1435  018E                     	;# 
  1436  0191                     	;# 
  1437  0191                     	;# 
  1438  0192                     	;# 
  1439  0193                     	;# 
  1440  0193                     	;# 
  1441  0194                     	;# 
  1442  0195                     	;# 
  1443  0196                     	;# 
  1444  0197                     	;# 
  1445  0199                     	;# 
  1446  019A                     	;# 
  1447  019B                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019C                     	;# 
  1452  019C                     	;# 
  1453  019D                     	;# 
  1454  019E                     	;# 
  1455  019F                     	;# 
  1456  020D                     	;# 
  1457  0210                     	;# 
  1458  0211                     	;# 
  1459  0211                     	;# 
  1460  0212                     	;# 
  1461  0212                     	;# 
  1462  0213                     	;# 
  1463  0213                     	;# 
  1464  0214                     	;# 
  1465  0214                     	;# 
  1466  0215                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0216                     	;# 
  1470  0216                     	;# 
  1471  0217                     	;# 
  1472  0217                     	;# 
  1473  0291                     	;# 
  1474  0291                     	;# 
  1475  0292                     	;# 
  1476  0293                     	;# 
  1477  0298                     	;# 
  1478  0298                     	;# 
  1479  0299                     	;# 
  1480  029A                     	;# 
  1481  0394                     	;# 
  1482  0395                     	;# 
  1483  0396                     	;# 
  1484  0FE4                     	;# 
  1485  0FE5                     	;# 
  1486  0FE6                     	;# 
  1487  0FE7                     	;# 
  1488  0FE8                     	;# 
  1489  0FE9                     	;# 
  1490  0FEA                     	;# 
  1491  0FEB                     	;# 
  1492  0FED                     	;# 
  1493  0FEE                     	;# 
  1494  0FEF                     	;# 
  1495  0000                     	;# 
  1496  0001                     	;# 
  1497  0002                     	;# 
  1498  0003                     	;# 
  1499  0004                     	;# 
  1500  0005                     	;# 
  1501  0006                     	;# 
  1502  0007                     	;# 
  1503  0008                     	;# 
  1504  0009                     	;# 
  1505  000A                     	;# 
  1506  000B                     	;# 
  1507  000C                     	;# 
  1508  000D                     	;# 
  1509  000E                     	;# 
  1510  0010                     	;# 
  1511  0011                     	;# 
  1512  0012                     	;# 
  1513  0015                     	;# 
  1514  0016                     	;# 
  1515  0016                     	;# 
  1516  0017                     	;# 
  1517  0018                     	;# 
  1518  0019                     	;# 
  1519  001A                     	;# 
  1520  001B                     	;# 
  1521  001C                     	;# 
  1522  008C                     	;# 
  1523  008D                     	;# 
  1524  008E                     	;# 
  1525  0090                     	;# 
  1526  0091                     	;# 
  1527  0092                     	;# 
  1528  0095                     	;# 
  1529  0096                     	;# 
  1530  0097                     	;# 
  1531  0099                     	;# 
  1532  009A                     	;# 
  1533  009B                     	;# 
  1534  009B                     	;# 
  1535  009C                     	;# 
  1536  009D                     	;# 
  1537  009E                     	;# 
  1538  010C                     	;# 
  1539  010D                     	;# 
  1540  010E                     	;# 
  1541  0116                     	;# 
  1542  0117                     	;# 
  1543  011D                     	;# 
  1544  018C                     	;# 
  1545  018D                     	;# 
  1546  018E                     	;# 
  1547  0191                     	;# 
  1548  0191                     	;# 
  1549  0192                     	;# 
  1550  0193                     	;# 
  1551  0193                     	;# 
  1552  0194                     	;# 
  1553  0195                     	;# 
  1554  0196                     	;# 
  1555  0197                     	;# 
  1556  0199                     	;# 
  1557  019A                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019C                     	;# 
  1564  019D                     	;# 
  1565  019E                     	;# 
  1566  019F                     	;# 
  1567  020D                     	;# 
  1568  0210                     	;# 
  1569  0211                     	;# 
  1570  0211                     	;# 
  1571  0212                     	;# 
  1572  0212                     	;# 
  1573  0213                     	;# 
  1574  0213                     	;# 
  1575  0214                     	;# 
  1576  0214                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0216                     	;# 
  1581  0216                     	;# 
  1582  0217                     	;# 
  1583  0217                     	;# 
  1584  0291                     	;# 
  1585  0291                     	;# 
  1586  0292                     	;# 
  1587  0293                     	;# 
  1588  0298                     	;# 
  1589  0298                     	;# 
  1590  0299                     	;# 
  1591  029A                     	;# 
  1592  0394                     	;# 
  1593  0395                     	;# 
  1594  0396                     	;# 
  1595  0FE4                     	;# 
  1596  0FE5                     	;# 
  1597  0FE6                     	;# 
  1598  0FE7                     	;# 
  1599  0FE8                     	;# 
  1600  0FE9                     	;# 
  1601  0FEA                     	;# 
  1602  0FEB                     	;# 
  1603  0FED                     	;# 
  1604  0FEE                     	;# 
  1605  0FEF                     	;# 
  1606  0000                     	;# 
  1607  0001                     	;# 
  1608  0002                     	;# 
  1609  0003                     	;# 
  1610  0004                     	;# 
  1611  0005                     	;# 
  1612  0006                     	;# 
  1613  0007                     	;# 
  1614  0008                     	;# 
  1615  0009                     	;# 
  1616  000A                     	;# 
  1617  000B                     	;# 
  1618  000C                     	;# 
  1619  000D                     	;# 
  1620  000E                     	;# 
  1621  0010                     	;# 
  1622  0011                     	;# 
  1623  0012                     	;# 
  1624  0015                     	;# 
  1625  0016                     	;# 
  1626  0016                     	;# 
  1627  0017                     	;# 
  1628  0018                     	;# 
  1629  0019                     	;# 
  1630  001A                     	;# 
  1631  001B                     	;# 
  1632  001C                     	;# 
  1633  008C                     	;# 
  1634  008D                     	;# 
  1635  008E                     	;# 
  1636  0090                     	;# 
  1637  0091                     	;# 
  1638  0092                     	;# 
  1639  0095                     	;# 
  1640  0096                     	;# 
  1641  0097                     	;# 
  1642  0099                     	;# 
  1643  009A                     	;# 
  1644  009B                     	;# 
  1645  009B                     	;# 
  1646  009C                     	;# 
  1647  009D                     	;# 
  1648  009E                     	;# 
  1649  010C                     	;# 
  1650  010D                     	;# 
  1651  010E                     	;# 
  1652  0116                     	;# 
  1653  0117                     	;# 
  1654  011D                     	;# 
  1655  018C                     	;# 
  1656  018D                     	;# 
  1657  018E                     	;# 
  1658  0191                     	;# 
  1659  0191                     	;# 
  1660  0192                     	;# 
  1661  0193                     	;# 
  1662  0193                     	;# 
  1663  0194                     	;# 
  1664  0195                     	;# 
  1665  0196                     	;# 
  1666  0197                     	;# 
  1667  0199                     	;# 
  1668  019A                     	;# 
  1669  019B                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019C                     	;# 
  1674  019C                     	;# 
  1675  019D                     	;# 
  1676  019E                     	;# 
  1677  019F                     	;# 
  1678  020D                     	;# 
  1679  0210                     	;# 
  1680  0211                     	;# 
  1681  0211                     	;# 
  1682  0212                     	;# 
  1683  0212                     	;# 
  1684  0213                     	;# 
  1685  0213                     	;# 
  1686  0214                     	;# 
  1687  0214                     	;# 
  1688  0215                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0216                     	;# 
  1692  0216                     	;# 
  1693  0217                     	;# 
  1694  0217                     	;# 
  1695  0291                     	;# 
  1696  0291                     	;# 
  1697  0292                     	;# 
  1698  0293                     	;# 
  1699  0298                     	;# 
  1700  0298                     	;# 
  1701  0299                     	;# 
  1702  029A                     	;# 
  1703  0394                     	;# 
  1704  0395                     	;# 
  1705  0396                     	;# 
  1706  0FE4                     	;# 
  1707  0FE5                     	;# 
  1708  0FE6                     	;# 
  1709  0FE7                     	;# 
  1710  0FE8                     	;# 
  1711  0FE9                     	;# 
  1712  0FEA                     	;# 
  1713  0FEB                     	;# 
  1714  0FED                     	;# 
  1715  0FEE                     	;# 
  1716  0FEF                     	;# 
  1717  0000                     	;# 
  1718  0001                     	;# 
  1719  0002                     	;# 
  1720  0003                     	;# 
  1721  0004                     	;# 
  1722  0005                     	;# 
  1723  0006                     	;# 
  1724  0007                     	;# 
  1725  0008                     	;# 
  1726  0009                     	;# 
  1727  000A                     	;# 
  1728  000B                     	;# 
  1729  000C                     	;# 
  1730  000D                     	;# 
  1731  000E                     	;# 
  1732  0010                     	;# 
  1733  0011                     	;# 
  1734  0012                     	;# 
  1735  0015                     	;# 
  1736  0016                     	;# 
  1737  0016                     	;# 
  1738  0017                     	;# 
  1739  0018                     	;# 
  1740  0019                     	;# 
  1741  001A                     	;# 
  1742  001B                     	;# 
  1743  001C                     	;# 
  1744  008C                     	;# 
  1745  008D                     	;# 
  1746  008E                     	;# 
  1747  0090                     	;# 
  1748  0091                     	;# 
  1749  0092                     	;# 
  1750  0095                     	;# 
  1751  0096                     	;# 
  1752  0097                     	;# 
  1753  0099                     	;# 
  1754  009A                     	;# 
  1755  009B                     	;# 
  1756  009B                     	;# 
  1757  009C                     	;# 
  1758  009D                     	;# 
  1759  009E                     	;# 
  1760  010C                     	;# 
  1761  010D                     	;# 
  1762  010E                     	;# 
  1763  0116                     	;# 
  1764  0117                     	;# 
  1765  011D                     	;# 
  1766  018C                     	;# 
  1767  018D                     	;# 
  1768  018E                     	;# 
  1769  0191                     	;# 
  1770  0191                     	;# 
  1771  0192                     	;# 
  1772  0193                     	;# 
  1773  0193                     	;# 
  1774  0194                     	;# 
  1775  0195                     	;# 
  1776  0196                     	;# 
  1777  0197                     	;# 
  1778  0199                     	;# 
  1779  019A                     	;# 
  1780  019B                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019C                     	;# 
  1785  019C                     	;# 
  1786  019D                     	;# 
  1787  019E                     	;# 
  1788  019F                     	;# 
  1789  020D                     	;# 
  1790  0210                     	;# 
  1791  0211                     	;# 
  1792  0211                     	;# 
  1793  0212                     	;# 
  1794  0212                     	;# 
  1795  0213                     	;# 
  1796  0213                     	;# 
  1797  0214                     	;# 
  1798  0214                     	;# 
  1799  0215                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0216                     	;# 
  1803  0216                     	;# 
  1804  0217                     	;# 
  1805  0217                     	;# 
  1806  0291                     	;# 
  1807  0291                     	;# 
  1808  0292                     	;# 
  1809  0293                     	;# 
  1810  0298                     	;# 
  1811  0298                     	;# 
  1812  0299                     	;# 
  1813  029A                     	;# 
  1814  0394                     	;# 
  1815  0395                     	;# 
  1816  0396                     	;# 
  1817  0FE4                     	;# 
  1818  0FE5                     	;# 
  1819  0FE6                     	;# 
  1820  0FE7                     	;# 
  1821  0FE8                     	;# 
  1822  0FE9                     	;# 
  1823  0FEA                     	;# 
  1824  0FEB                     	;# 
  1825  0FED                     	;# 
  1826  0FEE                     	;# 
  1827  0FEF                     	;# 
  1828  0000                     	;# 
  1829  0001                     	;# 
  1830  0002                     	;# 
  1831  0003                     	;# 
  1832  0004                     	;# 
  1833  0005                     	;# 
  1834  0006                     	;# 
  1835  0007                     	;# 
  1836  0008                     	;# 
  1837  0009                     	;# 
  1838  000A                     	;# 
  1839  000B                     	;# 
  1840  000C                     	;# 
  1841  000D                     	;# 
  1842  000E                     	;# 
  1843  0010                     	;# 
  1844  0011                     	;# 
  1845  0012                     	;# 
  1846  0015                     	;# 
  1847  0016                     	;# 
  1848  0016                     	;# 
  1849  0017                     	;# 
  1850  0018                     	;# 
  1851  0019                     	;# 
  1852  001A                     	;# 
  1853  001B                     	;# 
  1854  001C                     	;# 
  1855  008C                     	;# 
  1856  008D                     	;# 
  1857  008E                     	;# 
  1858  0090                     	;# 
  1859  0091                     	;# 
  1860  0092                     	;# 
  1861  0095                     	;# 
  1862  0096                     	;# 
  1863  0097                     	;# 
  1864  0099                     	;# 
  1865  009A                     	;# 
  1866  009B                     	;# 
  1867  009B                     	;# 
  1868  009C                     	;# 
  1869  009D                     	;# 
  1870  009E                     	;# 
  1871  010C                     	;# 
  1872  010D                     	;# 
  1873  010E                     	;# 
  1874  0116                     	;# 
  1875  0117                     	;# 
  1876  011D                     	;# 
  1877  018C                     	;# 
  1878  018D                     	;# 
  1879  018E                     	;# 
  1880  0191                     	;# 
  1881  0191                     	;# 
  1882  0192                     	;# 
  1883  0193                     	;# 
  1884  0193                     	;# 
  1885  0194                     	;# 
  1886  0195                     	;# 
  1887  0196                     	;# 
  1888  0197                     	;# 
  1889  0199                     	;# 
  1890  019A                     	;# 
  1891  019B                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019C                     	;# 
  1896  019C                     	;# 
  1897  019D                     	;# 
  1898  019E                     	;# 
  1899  019F                     	;# 
  1900  020D                     	;# 
  1901  0210                     	;# 
  1902  0211                     	;# 
  1903  0211                     	;# 
  1904  0212                     	;# 
  1905  0212                     	;# 
  1906  0213                     	;# 
  1907  0213                     	;# 
  1908  0214                     	;# 
  1909  0214                     	;# 
  1910  0215                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0216                     	;# 
  1914  0216                     	;# 
  1915  0217                     	;# 
  1916  0217                     	;# 
  1917  0291                     	;# 
  1918  0291                     	;# 
  1919  0292                     	;# 
  1920  0293                     	;# 
  1921  0298                     	;# 
  1922  0298                     	;# 
  1923  0299                     	;# 
  1924  029A                     	;# 
  1925  0394                     	;# 
  1926  0395                     	;# 
  1927  0396                     	;# 
  1928  0FE4                     	;# 
  1929  0FE5                     	;# 
  1930  0FE6                     	;# 
  1931  0FE7                     	;# 
  1932  0FE8                     	;# 
  1933  0FE9                     	;# 
  1934  0FEA                     	;# 
  1935  0FEB                     	;# 
  1936  0FED                     	;# 
  1937  0FEE                     	;# 
  1938  0FEF                     	;# 
  1939  0000                     	;# 
  1940  0001                     	;# 
  1941  0002                     	;# 
  1942  0003                     	;# 
  1943  0004                     	;# 
  1944  0005                     	;# 
  1945  0006                     	;# 
  1946  0007                     	;# 
  1947  0008                     	;# 
  1948  0009                     	;# 
  1949  000A                     	;# 
  1950  000B                     	;# 
  1951  000C                     	;# 
  1952  000D                     	;# 
  1953  000E                     	;# 
  1954  0010                     	;# 
  1955  0011                     	;# 
  1956  0012                     	;# 
  1957  0015                     	;# 
  1958  0016                     	;# 
  1959  0016                     	;# 
  1960  0017                     	;# 
  1961  0018                     	;# 
  1962  0019                     	;# 
  1963  001A                     	;# 
  1964  001B                     	;# 
  1965  001C                     	;# 
  1966  008C                     	;# 
  1967  008D                     	;# 
  1968  008E                     	;# 
  1969  0090                     	;# 
  1970  0091                     	;# 
  1971  0092                     	;# 
  1972  0095                     	;# 
  1973  0096                     	;# 
  1974  0097                     	;# 
  1975  0099                     	;# 
  1976  009A                     	;# 
  1977  009B                     	;# 
  1978  009B                     	;# 
  1979  009C                     	;# 
  1980  009D                     	;# 
  1981  009E                     	;# 
  1982  010C                     	;# 
  1983  010D                     	;# 
  1984  010E                     	;# 
  1985  0116                     	;# 
  1986  0117                     	;# 
  1987  011D                     	;# 
  1988  018C                     	;# 
  1989  018D                     	;# 
  1990  018E                     	;# 
  1991  0191                     	;# 
  1992  0191                     	;# 
  1993  0192                     	;# 
  1994  0193                     	;# 
  1995  0193                     	;# 
  1996  0194                     	;# 
  1997  0195                     	;# 
  1998  0196                     	;# 
  1999  0197                     	;# 
  2000  0199                     	;# 
  2001  019A                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019C                     	;# 
  2007  019C                     	;# 
  2008  019D                     	;# 
  2009  019E                     	;# 
  2010  019F                     	;# 
  2011  020D                     	;# 
  2012  0210                     	;# 
  2013  0211                     	;# 
  2014  0211                     	;# 
  2015  0212                     	;# 
  2016  0212                     	;# 
  2017  0213                     	;# 
  2018  0213                     	;# 
  2019  0214                     	;# 
  2020  0214                     	;# 
  2021  0215                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0216                     	;# 
  2025  0216                     	;# 
  2026  0217                     	;# 
  2027  0217                     	;# 
  2028  0291                     	;# 
  2029  0291                     	;# 
  2030  0292                     	;# 
  2031  0293                     	;# 
  2032  0298                     	;# 
  2033  0298                     	;# 
  2034  0299                     	;# 
  2035  029A                     	;# 
  2036  0394                     	;# 
  2037  0395                     	;# 
  2038  0396                     	;# 
  2039  0FE4                     	;# 
  2040  0FE5                     	;# 
  2041  0FE6                     	;# 
  2042  0FE7                     	;# 
  2043  0FE8                     	;# 
  2044  0FE9                     	;# 
  2045  0FEA                     	;# 
  2046  0FEB                     	;# 
  2047  0FED                     	;# 
  2048  0FEE                     	;# 
  2049  0FEF                     	;# 
  2050                           
  2051                           	psect	idataBANK4
  2052  1E9C                     __pidataBANK4:	
  2053                           
  2054                           ;initializer for __product
  2055  1E9C  3463               	retlw	99
  2056  1E9D  3402               	retlw	2
  2057  1E9E  3400               	retlw	0
  2058  1E9F  3400               	retlw	0
  2059  1EA0  3400               	retlw	0
  2060  1EA1  3400               	retlw	0
  2061  1EA2  3400               	retlw	0
  2062  1EA3  3400               	retlw	0
  2063  1EA4  3400               	retlw	0
  2064  1EA5  3400               	retlw	0
  2065  1EA6  3400               	retlw	0
  2066  1EA7  3400               	retlw	0
  2067  1EA8  34FF               	retlw	255
  2068  1EA9  34FF               	retlw	255
  2069  1EAA  34FF               	retlw	255
  2070  1EAB  3400               	retlw	0
  2071  1EAC  3400               	retlw	0
  2072  1EAD  3400               	retlw	0
  2073  1EAE  3400               	retlw	0
  2074  1EAF  3400               	retlw	0
  2075  1EB0  3400               	retlw	0
  2076  1EB1  3400               	retlw	0
  2077  1EB2  3400               	retlw	0
  2078  1EB3  3400               	retlw	0
  2079  1EB4  3400               	retlw	0
  2080  1EB5  3400               	retlw	0
  2081  1EB6  3400               	retlw	0
  2082  1EB7  3400               	retlw	0
  2083  1EB8  3400               	retlw	0
  2084  1EB9  3400               	retlw	0
  2085  1EBA  3400               	retlw	0
  2086  1EBB  3400               	retlw	0
  2087                           
  2088                           	psect	stringtext
  2089  1000                     __pstringtext:	
  2090  1000                     _CC2500_registers_address:	
  2091  1000  3403               	retlw	3
  2092  1001  3416               	retlw	22
  2093  1002  3417               	retlw	23
  2094  1003  341E               	retlw	30
  2095  1004  341F               	retlw	31
  2096  1005  3420               	retlw	32
  2097  1006  342A               	retlw	42
  2098  1007  342B               	retlw	43
  2099  1008  340B               	retlw	11
  2100  1009  340C               	retlw	12
  2101  100A  340D               	retlw	13
  2102  100B  340E               	retlw	14
  2103  100C  340F               	retlw	15
  2104  100D  3410               	retlw	16
  2105  100E  3411               	retlw	17
  2106  100F  3412               	retlw	18
  2107  1010  3413               	retlw	19
  2108  1011  3414               	retlw	20
  2109  1012  340A               	retlw	10
  2110  1013  3415               	retlw	21
  2111  1014  3421               	retlw	33
  2112  1015  3422               	retlw	34
  2113  1016  3418               	retlw	24
  2114  1017  3419               	retlw	25
  2115  1018  341A               	retlw	26
  2116  1019  341B               	retlw	27
  2117  101A  341C               	retlw	28
  2118  101B  341D               	retlw	29
  2119  101C  3423               	retlw	35
  2120  101D  3424               	retlw	36
  2121  101E  3425               	retlw	37
  2122  101F  3426               	retlw	38
  2123  1020  3429               	retlw	41
  2124  1021  342C               	retlw	44
  2125  1022  342D               	retlw	45
  2126  1023  342E               	retlw	46
  2127  1024  3400               	retlw	0
  2128  1025  3401               	retlw	1
  2129  1026  3402               	retlw	2
  2130  1027  3407               	retlw	7
  2131  1028  3408               	retlw	8
  2132  1029  3409               	retlw	9
  2133  102A  3406               	retlw	6
  2134  102B  3404               	retlw	4
  2135  102C  3405               	retlw	5
  2136  102D  3427               	retlw	39
  2137  102E  3428               	retlw	40
  2138  102F                     __end_of_CC2500_registers_address:	
  2139  102F                     _CC2500_rfSettings:	
  2140  102F  3407               	retlw	7
  2141  1030  3407               	retlw	7
  2142  1031  3430               	retlw	48
  2143  1032  3487               	retlw	135
  2144  1033  346B               	retlw	107
  2145  1034  34F8               	retlw	248
  2146  1035  347F               	retlw	127
  2147  1036  343F               	retlw	63
  2148  1037  3409               	retlw	9
  2149  1038  3400               	retlw	0
  2150  1039  345C               	retlw	92
  2151  103A  34A7               	retlw	167
  2152  103B  3462               	retlw	98
  2153  103C  3486               	retlw	134
  2154  103D  3483               	retlw	131
  2155  103E  3403               	retlw	3
  2156  103F  3422               	retlw	34
  2157  1040  34F8               	retlw	248
  2158  1041  3400               	retlw	0
  2159  1042  3444               	retlw	68
  2160  1043  34B6               	retlw	182
  2161  1044  3410               	retlw	16
  2162  1045  3418               	retlw	24
  2163  1046  341D               	retlw	29
  2164  1047  341C               	retlw	28
  2165  1048  34C7               	retlw	199
  2166  1049  3400               	retlw	0
  2167  104A  34B2               	retlw	178
  2168  104B  34EA               	retlw	234
  2169  104C  340A               	retlw	10
  2170  104D  3400               	retlw	0
  2171  104E  3411               	retlw	17
  2172  104F  3459               	retlw	89
  2173  1050  3488               	retlw	136
  2174  1051  3431               	retlw	49
  2175  1052  340B               	retlw	11
  2176  1053  342F               	retlw	47
  2177  1054  342E               	retlw	46
  2178  1055  3406               	retlw	6
  2179  1056  3404               	retlw	4
  2180  1057  3405               	retlw	5
  2181  1058  3400               	retlw	0
  2182  1059  3430               	retlw	48
  2183  105A  34D3               	retlw	211
  2184  105B  3491               	retlw	145
  2185  105C  3441               	retlw	65
  2186  105D  3400               	retlw	0
  2187  105E                     __end_of_CC2500_rfSettings:	
  2188  105E                     _CC2500_patable_vaule:	
  2189  105E  34FE               	retlw	254
  2190  105F  34FE               	retlw	254
  2191  1060  34FE               	retlw	254
  2192  1061  34FE               	retlw	254
  2193  1062  34FE               	retlw	254
  2194  1063  34FE               	retlw	254
  2195  1064  34FE               	retlw	254
  2196  1065  34FE               	retlw	254
  2197  1066                     __end_of_CC2500_patable_vaule:	
  2198                           
  2199                           	psect	nvBANK0
  2200  006E                     __pnvBANK0:	
  2201  006E                     _product:	
  2202  006E                     	ds	1
  2203  000C                     _PORTA	set	12
  2204  000D                     _PORTB	set	13
  2205  000E                     _PORTC	set	14
  2206  0015                     _TMR0	set	21
  2207  005F                     _GIE	set	95
  2208  005B                     _IOCIE	set	91
  2209  0058                     _IOCIF	set	88
  2210  005E                     _PEIE	set	94
  2211  0060                     _RA0	set	96
  2212  0063                     _RA3	set	99
  2213  0064                     _RA4	set	100
  2214  0066                     _RA6	set	102
  2215  0067                     _RA7	set	103
  2216  0068                     _RB0	set	104
  2217  0069                     _RB1	set	105
  2218  006B                     _RB3	set	107
  2219  006C                     _RB4	set	108
  2220  006D                     _RB5	set	109
  2221  0070                     _RC0	set	112
  2222  0071                     _RC1	set	113
  2223  0072                     _RC2	set	114
  2224  0074                     _RC4	set	116
  2225  0075                     _RC5	set	117
  2226  0077                     _RC7	set	119
  2227  005D                     _TMR0IE	set	93
  2228  005A                     _TMR0IF	set	90
  2229  009D                     _ADCON0	set	157
  2230  009E                     _ADCON1	set	158
  2231  009C                     _ADRESH	set	156
  2232  009B                     _ADRESL	set	155
  2233  0095                     _OPTION_REG	set	149
  2234  0099                     _OSCCON	set	153
  2235  008C                     _TRISA	set	140
  2236  008D                     _TRISB	set	141
  2237  008E                     _TRISC	set	142
  2238  0097                     _WDTCON	set	151
  2239  04E9                     _GO_nDONE	set	1257
  2240  0117                     _FVRCON	set	279
  2241  010C                     _LATA	set	268
  2242  010D                     _LATB	set	269
  2243  010E                     _LATC	set	270
  2244  018C                     _ANSELA	set	396
  2245  018D                     _ANSELB	set	397
  2246  018E                     _ANSELC	set	398
  2247  0192                     _PMADRH	set	402
  2248  0191                     _PMADRL	set	401
  2249  0196                     _PMCON2	set	406
  2250  0194                     _PMDATH	set	404
  2251  0193                     _PMDATL	set	403
  2252  0CAE                     _CFGS	set	3246
  2253  0CAC                     _FREE	set	3244
  2254  0CAD                     _LWLO	set	3245
  2255  0CA8                     _RD	set	3240
  2256  0CA9                     _WR	set	3241
  2257  0CAA                     _WREN	set	3242
  2258  1069                     _WPUB1	set	4201
  2259  106A                     _WPUB2	set	4202
  2260  0396                     _IOCBF	set	918
  2261  0395                     _IOCBN	set	917
  2262  0394                     _IOCBP	set	916
  2263  1CB2                     _IOCBF2	set	7346
  2264                           
  2265                           ; #config settings
  2266  0000                     
  2267                           	psect	cinit
  2268  0015                     start_initialization:	
  2269  0015                     __initialization:	
  2270                           
  2271                           ; Clear objects allocated to BITCOMMON
  2272  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2273                           
  2274                           ; Clear objects allocated to COMMON
  2275  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2276  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2277  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2278  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2279                           
  2280                           ; Clear objects allocated to BANK1
  2281  001A  30A0               	movlw	low __pbssBANK1
  2282  001B  0084               	movwf	4
  2283  001C  3000               	movlw	high __pbssBANK1
  2284  001D  0085               	movwf	5
  2285  001E  304E               	movlw	78
  2286  001F  319A  224E  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Clear objects allocated to BANK2
  2289  0022  3020               	movlw	low __pbssBANK2
  2290  0023  0084               	movwf	4
  2291  0024  3001               	movlw	high __pbssBANK2
  2292  0025  0085               	movwf	5
  2293  0026  304D               	movlw	77
  2294  0027  319A  224E  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Clear objects allocated to BANK3
  2297  002A  30A0               	movlw	low __pbssBANK3
  2298  002B  0084               	movwf	4
  2299  002C  3001               	movlw	high __pbssBANK3
  2300  002D  0085               	movwf	5
  2301  002E  304F               	movlw	79
  2302  002F  319A  224E  3180   	fcall	clear_ram0
  2303                           
  2304                           ; Clear objects allocated to BANK4
  2305  0032  3020               	movlw	low __pbssBANK4
  2306  0033  0084               	movwf	4
  2307  0034  3002               	movlw	high __pbssBANK4
  2308  0035  0085               	movwf	5
  2309  0036  302E               	movlw	46
  2310  0037  319A  224E  3180   	fcall	clear_ram0
  2311                           
  2312                           ; Initialize objects allocated to BANK4
  2313  003A  309C               	movlw	low __pidataBANK4
  2314  003B  0084               	movwf	4
  2315  003C  309E               	movlw	(high __pidataBANK4)| (0+128)
  2316  003D  0085               	movwf	5
  2317  003E  304E               	movlw	low __pdataBANK4
  2318  003F  0086               	movwf	6
  2319  0040  3002               	movlw	high __pdataBANK4
  2320  0041  0087               	movwf	7
  2321  0042  3020               	movlw	32
  2322  0043  319A  2248         	fcall	init_ram
  2323  0045                     end_of_initialization:	
  2324                           ;End of C runtime variable initialization code
  2325                           
  2326  0045                     __end_of__initialization:	
  2327  0045  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2328  0046  0020               	movlb	0
  2329  0047  3196  2E31         	ljmp	_main	;jump to C main() function
  2330                           
  2331                           	psect	bitbssCOMMON
  2332  03E0                     __pbitbssCOMMON:	
  2333  03E0                     _Receive_OK:	
  2334  03E0                     	ds	1
  2335  03E1                     _Transceive_OK:	
  2336  03E1                     	ds	1
  2337                           
  2338                           	psect	bssCOMMON
  2339  0078                     __pbssCOMMON:	
  2340  0078                     _DelayOff:	
  2341  0078                     	ds	1
  2342  0079                     _DimmerLights:	
  2343  0079                     	ds	1
  2344  007A                     _DimmerLightsIntr:	
  2345  007A                     	ds	1
  2346  007B                     _SPI0Buffer:	
  2347  007B                     	ds	1
  2348                           
  2349                           	psect	bssBANK1
  2350  00A0                     __pbssBANK1:	
  2351  00A0                     _myMain:	
  2352  00A0                     	ds	18
  2353  00B2                     _Buz1:	
  2354  00B2                     	ds	12
  2355  00BE                     _RF1:	
  2356  00BE                     	ds	5
  2357  00C3                     _LED:	
  2358  00C3                     	ds	2
  2359  00C5                     _RF_Count:	
  2360  00C5                     	ds	2
  2361  00C7                     _Sw:	
  2362  00C7                     	ds	2
  2363  00C9                     _WDT:	
  2364  00C9                     	ds	2
  2365  00CB                     _CRC:	
  2366  00CB                     	ds	1
  2367  00CC                     _Dimmer:	
  2368  00CC                     	ds	1
  2369  00CD                     _DimmerLights11:	
  2370  00CD                     	ds	1
  2371  00CE                     _DimmerLights22:	
  2372  00CE                     	ds	1
  2373  00CF                     _DimmerLightsIntrIOC:	
  2374  00CF                     	ds	1
  2375  00D0                     _RFSW:	
  2376  00D0                     	ds	1
  2377  00D1                     _RSSI:	
  2378  00D1                     	ds	1
  2379  00D2                     _Rx_Length:	
  2380  00D2                     	ds	1
  2381  00D3                     _Tx_Length:	
  2382  00D3                     	ds	1
  2383  00D4                     _r_address:	
  2384  00D4                     	ds	1
  2385  00D5                     _r_data:	
  2386  00D5                     	ds	1
  2387  00D6                     _s_data:	
  2388  00D6                     	ds	1
  2389  00D7                     _Temp1:	
  2390  00D7                     	ds	14
  2391  00E5                     _VarErrLED:	
  2392  00E5                     	ds	4
  2393  00E9                     _Dimmer1:	
  2394  00E9                     	ds	3
  2395  00EC                     _RFSW1:	
  2396  00EC                     	ds	1
  2397  00ED                     _RFSW2:	
  2398  00ED                     	ds	1
  2399                           
  2400                           	psect	bssBANK2
  2401  0120                     __pbssBANK2:	
  2402  0120                     _RF_Data:	
  2403  0120                     	ds	21
  2404  0135                     _Timer0:	
  2405  0135                     	ds	8
  2406  013D                     _DimmerLights1:	
  2407  013D                     	ds	15
  2408  014C                     _DimmerLights2:	
  2409  014C                     	ds	15
  2410  015B                     _DlySw1:	
  2411  015B                     	ds	5
  2412  0160                     _DlySw2:	
  2413  0160                     	ds	5
  2414  0165                     _VarLED1:	
  2415  0165                     	ds	4
  2416  0169                     _VarLED2:	
  2417  0169                     	ds	4
  2418                           
  2419                           	psect	bssBANK3
  2420  01A0                     __pbssBANK3:	
  2421  01A0                     _Load1:	
  2422  01A0                     	ds	70
  2423  01E6                     _Sw1:	
  2424  01E6                     	ds	9
  2425                           
  2426                           	psect	bssBANK4
  2427  0220                     __pbssBANK4:	
  2428  0220                     _Memory:	
  2429  0220                     	ds	37
  2430  0245                     _Sw2:	
  2431  0245                     	ds	9
  2432                           
  2433                           	psect	dataBANK4
  2434  024E                     __pdataBANK4:	
  2435  024E                     __product:	
  2436  024E                     	ds	32
  2437                           
  2438                           	psect	clrtext
  2439  1A4E                     clear_ram0:	
  2440                           ;	Called with FSR0 containing the base address, and
  2441                           ;	WREG with the size to clear
  2442                           
  2443  1A4E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2444  1A4F                     clrloop0:	
  2445  1A4F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2446  1A50  3101               	addfsr 0,1
  2447  1A51  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2448  1A52  2A4F               	goto	clrloop0	;have we reached the end yet?
  2449  1A53  3400               	retlw	0	;all done for this memory range, return
  2450                           
  2451                           	psect	inittext
  2452  1A48                     init_ram:	
  2453  1A48  00FE               	movwf	126
  2454  1A49                     initloop:	
  2455  1A49  0012               	moviw fsr0++
  2456  1A4A  001E               	movwi fsr1++
  2457  1A4B  0BFE               	decfsz	126,f
  2458  1A4C  2A49               	goto	initloop
  2459  1A4D  3400               	retlw	0
  2460                           
  2461                           	psect	cstackCOMMON
  2462  0070                     __pcstackCOMMON:	
  2463  0070                     ?_Timeout_Counter:	
  2464  0070                     ?_set_TimeoutCleared:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0070                     ?_CC2500_WriteByte:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0070                     ?_CC2500_WriteCommand:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0070                     ?_CC2500_ReadStatus:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0070                     ?_CC2500_ReadByte:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0070                     ?_CC2500_PowerRST:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0070                     ?_CC2500_InitSetREG:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_CC2500_InitPATable:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_ClearTXFIFO:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_ClearRXFIFO:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_CC2500_FrequencyCabr:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_CC2500_SIDLEMode:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_DlyOff_Initialization:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_DlyOff_Main:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_setTxData:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_setDimmerLights_Initialization:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_Dimmer_Initialization:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_setLoad_GO:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_setMemory_GO:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_setDimmerLights_Main:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_setDimmerLights_ERROR:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_setLoad_Count:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_setLED_Initialization:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_setLED_Main:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_Fosc_Set:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_IO_Set:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_TMR0_Set:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_ADC_Set:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_IOC_Set:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_WDT_Set:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_IOC_ISR:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_TMR0_ISR:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_Flash_Memory_Write:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_Flash_Memory_Modify:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_WDT_Clearing:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_myMain_Initialization:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_Temp_Initialization:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_Load_Initialization:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_Switch_Initialization:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_RF_Initialization:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_getLoad_AD:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_getTemp_AD:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_my_Main:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_Temp_Main:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_Load_Main:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_Switch_Main:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_RF_Main:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_setTemp_Enable:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setLoad_Enable:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_setSw_Enable:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setRF_Enable:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setLoad_AH_AL_Restore:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setLoad_Exceptions:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setTemp_Initialization:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setTemp_Main:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setOverTemp_Exceptions:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setRF_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setRF_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_RF_RxDisable:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_getRxData:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setLog_Code:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setControl_Lights_Table:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setRFSW_Control:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setRFSW_AdjControl:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setRF_DimmerValue:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setSw_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setSw_Main:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Sw_DimmerOnFunc:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_Sw_DimmerAdjFunc:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_Sw_DimmerOffFunc:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Buzzer_Initialization:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_Buzzer_Main:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_CC2500_TxData:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_CC2500_RxData:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_CC2500_PowerOnInitial:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_DelayOffPointSelect:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_DelayOff_Initialization:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_DelayOff_Main:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_DimmerIntrIOCPointSelect:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ??_DimmerIntrIOCPointSelect:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_DimmerIntrPointSelect:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ??_DimmerIntrPointSelect:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_setDimmerLights_IntrControl:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_DimmerLightsPointSelect:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_DimmerLights_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_DimmerLights_Close:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_DimmerLights_Main:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_DimmerLights_Exceptions:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setDimmerLights_AdjRF:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_LedPointSelect:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_LED_Initialization:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_LED_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Mcu_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_ISR:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setDimmerReClock:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_Flash_Memory_Initialization:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_Flash_Memory_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_Flash_Memory_Unlock:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_Flash_Memory_Erasing:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_WDT_Main:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setRF_Learn:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_RfSWPointSelect:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_TouchPower:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_SwPointSelect:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?i1_setLoad_StatusOff:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_DelayTimejudge:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_getDimmerLights_StatusFlag:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788  0070                     ?_getPercentValue:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791  0070                     ?_Flash_Memory_Read:	
  2792                           ; 1 bytes @ 0x0
  2793                           
  2794  0070                     ?_getTemp_Safe:	
  2795                           ; 1 bytes @ 0x0
  2796                           
  2797  0070                     ?_setPercentValue:	
  2798                           ; 1 bytes @ 0x0
  2799                           
  2800  0070                     ?_getLoad_Safe:	
  2801                           ; 1 bytes @ 0x0
  2802                           
  2803  0070                     i1setLoad_StatusOff@command:	
  2804                           ; 1 bytes @ 0x0
  2805                           
  2806                           
  2807                           ; 1 bytes @ 0x0
  2808  0070                     	ds	1
  2809  0071                     ??i1_setLoad_StatusOff:	
  2810  0071                     DimmerIntrIOCPointSelect@lights:	
  2811                           ; 0 bytes @ 0x1
  2812                           
  2813  0071                     DimmerIntrPointSelect@lights:	
  2814                           ; 1 bytes @ 0x1
  2815                           
  2816  0071                     i1setLoad_StatusOff@lights:	
  2817                           ; 1 bytes @ 0x1
  2818                           
  2819                           
  2820                           ; 1 bytes @ 0x1
  2821  0071                     	ds	1
  2822  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2823  0072                     ??_setDimmerLights_IntrControl:	
  2824                           ; 0 bytes @ 0x2
  2825                           
  2826  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2827                           ; 0 bytes @ 0x2
  2828                           
  2829                           
  2830                           ; 1 bytes @ 0x2
  2831  0072                     	ds	1
  2832  0073                     ??_IOC_ISR:	
  2833  0073                     ??_setDimmerReClock:	
  2834                           ; 0 bytes @ 0x3
  2835                           
  2836                           
  2837                           ; 0 bytes @ 0x3
  2838  0073                     	ds	3
  2839  0076                     setDimmerLights_IntrControl@lights:	
  2840                           
  2841                           ; 1 bytes @ 0x6
  2842  0076                     	ds	1
  2843  0077                     ??_TMR0_ISR:	
  2844  0077                     ??_ISR:	
  2845                           ; 0 bytes @ 0x7
  2846                           
  2847                           
  2848                           ; 0 bytes @ 0x7
  2849  0077                     	ds	1
  2850                           
  2851                           	psect	cstackBANK0
  2852  0020                     __pcstackBANK0:	
  2853  0020                     ??_Timeout_Counter:	
  2854  0020                     ??_set_TimeoutCleared:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_CC2500_WriteByte:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_CC2500_ReadByte:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ?_DelayTime_1us:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_setTxData:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ?_setLoad_StatusOff:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_Dimmer_Initialization:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_getDimmerLights_StatusFlag:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_setLoad_GO:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_setMemory_GO:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_setLoad_Count:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ?_setLoad_StatusOn:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_Fosc_Set:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_IO_Set:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_TMR0_Set:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_ADC_Set:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_IOC_Set:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_WDT_Set:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_Flash_Memory_Read:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_Flash_Memory_Write:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ??_WDT_Clearing:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ??_myMain_Initialization:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0020                     ??_Temp_Initialization:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0020                     ??_setTemp_Enable:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0020                     ??_setLoad_Enable:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0020                     ??_setRF_Enable:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0020                     ??_setLoad_AH_AL_Restore:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0020                     ??_getTemp_Safe:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ??_setTemp_Initialization:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ??_setRF_Initialization:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ??_Buzzer_Initialization:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0020                     ??_Buzzer_Main:	
  2948                           ; 0 bytes @ 0x0
  2949                           
  2950  0020                     ??_DelayOffPointSelect:	
  2951                           ; 0 bytes @ 0x0
  2952                           
  2953  0020                     ??_DimmerLightsPointSelect:	
  2954                           ; 0 bytes @ 0x0
  2955                           
  2956  0020                     ??_LedPointSelect:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ??_Flash_Memory_Unlock:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ??_Flash_Memory_Erasing:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ??_WDT_Main:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_getLoad_Safe:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ??_setRF_Learn:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ??_RfSWPointSelect:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ??_TouchPower:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0020                     ??_SwPointSelect:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ?___bmul:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ?_getBuz_GO:	
  2987                           ; 1 bytes @ 0x0
  2988                           
  2989  0020                     ?_getAD:	
  2990                           ; 2 bytes @ 0x0
  2991                           
  2992  0020                     ?___wmul:	
  2993                           ; 2 bytes @ 0x0
  2994                           
  2995  0020                     ?___awdiv:	
  2996                           ; 2 bytes @ 0x0
  2997                           
  2998  0020                     ?___lwdiv:	
  2999                           ; 2 bytes @ 0x0
  3000                           
  3001  0020                     ?___ftpack:	
  3002                           ; 2 bytes @ 0x0
  3003                           
  3004  0020                     LedPointSelect@led:	
  3005                           ; 3 bytes @ 0x0
  3006                           
  3007  0020                     getAD@adcon1:	
  3008                           ; 1 bytes @ 0x0
  3009                           
  3010  0020                     setLoad_Enable@command:	
  3011                           ; 1 bytes @ 0x0
  3012                           
  3013  0020                     setLoad_GO@command:	
  3014                           ; 1 bytes @ 0x0
  3015                           
  3016  0020                     setLoad_StatusOn@command:	
  3017                           ; 1 bytes @ 0x0
  3018                           
  3019  0020                     setLoad_StatusOff@command:	
  3020                           ; 1 bytes @ 0x0
  3021                           
  3022  0020                     getLoad_Safe@result:	
  3023                           ; 1 bytes @ 0x0
  3024                           
  3025  0020                     setTemp_Enable@command:	
  3026                           ; 1 bytes @ 0x0
  3027                           
  3028  0020                     getTemp_Safe@result:	
  3029                           ; 1 bytes @ 0x0
  3030                           
  3031  0020                     setRF_Learn@command:	
  3032                           ; 1 bytes @ 0x0
  3033                           
  3034  0020                     setRF_Enable@command:	
  3035                           ; 1 bytes @ 0x0
  3036                           
  3037  0020                     SwPointSelect@sw:	
  3038                           ; 1 bytes @ 0x0
  3039                           
  3040  0020                     ___bmul@multiplicand:	
  3041                           ; 1 bytes @ 0x0
  3042                           
  3043  0020                     DelayTime_1us@count:	
  3044                           ; 1 bytes @ 0x0
  3045                           
  3046  0020                     ___wmul@multiplier:	
  3047                           ; 2 bytes @ 0x0
  3048                           
  3049  0020                     ___awdiv@divisor:	
  3050                           ; 2 bytes @ 0x0
  3051                           
  3052  0020                     ___lwdiv@divisor:	
  3053                           ; 2 bytes @ 0x0
  3054                           
  3055  0020                     ___ftpack@arg:	
  3056                           ; 2 bytes @ 0x0
  3057                           
  3058                           
  3059                           ; 3 bytes @ 0x0
  3060  0020                     	ds	1
  3061  0021                     ?_setSw_Status:	
  3062  0021                     ??_setLoad_StatusOff:	
  3063                           ; 0 bytes @ 0x1
  3064                           
  3065  0021                     ?_setLED:	
  3066                           ; 0 bytes @ 0x1
  3067                           
  3068  0021                     ??_setLoad_StatusOn:	
  3069                           ; 0 bytes @ 0x1
  3070                           
  3071  0021                     ??_setLED_Main:	
  3072                           ; 0 bytes @ 0x1
  3073                           
  3074  0021                     ??_RF_Initialization:	
  3075                           ; 0 bytes @ 0x1
  3076                           
  3077  0021                     ??_setSw_Enable:	
  3078                           ; 0 bytes @ 0x1
  3079                           
  3080  0021                     ??_Mcu_Initialization:	
  3081                           ; 0 bytes @ 0x1
  3082                           
  3083  0021                     ??___bmul:	
  3084                           ; 0 bytes @ 0x1
  3085                           
  3086  0021                     CC2500_WriteByte@loop_a:	
  3087                           ; 0 bytes @ 0x1
  3088                           
  3089  0021                     CC2500_ReadByte@loop_b:	
  3090                           ; 1 bytes @ 0x1
  3091                           
  3092  0021                     DelayOffPointSelect@sw:	
  3093                           ; 1 bytes @ 0x1
  3094                           
  3095  0021                     DimmerLightsPointSelect@lights:	
  3096                           ; 1 bytes @ 0x1
  3097                           
  3098  0021                     getDimmerLights_StatusFlag@Status:	
  3099                           ; 1 bytes @ 0x1
  3100                           
  3101  0021                     setLED@command:	
  3102                           ; 1 bytes @ 0x1
  3103                           
  3104  0021                     Flash_Memory_Read@i:	
  3105                           ; 1 bytes @ 0x1
  3106                           
  3107  0021                     Flash_Memory_Write@i:	
  3108                           ; 1 bytes @ 0x1
  3109                           
  3110  0021                     setLoad_Count@command:	
  3111                           ; 1 bytes @ 0x1
  3112                           
  3113  0021                     setLoad_StatusOn@lights:	
  3114                           ; 1 bytes @ 0x1
  3115                           
  3116  0021                     setLoad_StatusOff@lights:	
  3117                           ; 1 bytes @ 0x1
  3118                           
  3119  0021                     setLoad_AH_AL_Restore@i:	
  3120                           ; 1 bytes @ 0x1
  3121                           
  3122  0021                     RfSWPointSelect@sw:	
  3123                           ; 1 bytes @ 0x1
  3124                           
  3125  0021                     setSw_Enable@command:	
  3126                           ; 1 bytes @ 0x1
  3127                           
  3128  0021                     setSw_Status@command:	
  3129                           ; 1 bytes @ 0x1
  3130                           
  3131                           
  3132                           ; 1 bytes @ 0x1
  3133  0021                     	ds	1
  3134  0022                     ??_CC2500_WriteCommand:	
  3135  0022                     ??_CC2500_ReadStatus:	
  3136                           ; 0 bytes @ 0x2
  3137                           
  3138  0022                     ??_DelayTime_1us:	
  3139                           ; 0 bytes @ 0x2
  3140                           
  3141  0022                     ?_CC2500_WriteREG:	
  3142                           ; 0 bytes @ 0x2
  3143                           
  3144  0022                     ??_DlyOff_Initialization:	
  3145                           ; 0 bytes @ 0x2
  3146                           
  3147  0022                     ??_setSw_Status:	
  3148                           ; 0 bytes @ 0x2
  3149                           
  3150  0022                     ?_setRFSW_Status:	
  3151                           ; 0 bytes @ 0x2
  3152                           
  3153  0022                     ?_setDimmerLights_Trigger:	
  3154                           ; 0 bytes @ 0x2
  3155                           
  3156  0022                     ?_setDimmerLights_Switch:	
  3157                           ; 0 bytes @ 0x2
  3158                           
  3159  0022                     ??_setDimmerLights_Initialization:	
  3160                           ; 0 bytes @ 0x2
  3161                           
  3162  0022                     ?_setDimmerLights_TriggerERROR:	
  3163                           ; 0 bytes @ 0x2
  3164                           
  3165  0022                     ??_setLED:	
  3166                           ; 0 bytes @ 0x2
  3167                           
  3168  0022                     ??_Load_Initialization:	
  3169                           ; 0 bytes @ 0x2
  3170                           
  3171  0022                     ??_getBuz_GO:	
  3172                           ; 0 bytes @ 0x2
  3173                           
  3174  0022                     ?_setDimmerLights_AdjGo:	
  3175                           ; 0 bytes @ 0x2
  3176                           
  3177  0022                     ?_setDimmerLights_TriggerAdj:	
  3178                           ; 0 bytes @ 0x2
  3179                           
  3180  0022                     ?_setDimmerLights_Clear:	
  3181                           ; 0 bytes @ 0x2
  3182                           
  3183  0022                     CC2500_WriteREG@value:	
  3184                           ; 0 bytes @ 0x2
  3185                           
  3186  0022                     DlyOff_Initialization@sw:	
  3187                           ; 1 bytes @ 0x2
  3188                           
  3189  0022                     _getDimmerLights_StatusFlag$2246:	
  3190                           ; 1 bytes @ 0x2
  3191                           
  3192  0022                     setDimmerLights_TriggerERROR@command:	
  3193                           ; 1 bytes @ 0x2
  3194                           
  3195  0022                     setDimmerLights_Switch@command:	
  3196                           ; 1 bytes @ 0x2
  3197                           
  3198  0022                     setDimmerLights_AdjGo@command:	
  3199                           ; 1 bytes @ 0x2
  3200                           
  3201  0022                     setDimmerLights_Trigger@command:	
  3202                           ; 1 bytes @ 0x2
  3203                           
  3204  0022                     setDimmerLights_TriggerAdj@command:	
  3205                           ; 1 bytes @ 0x2
  3206                           
  3207  0022                     setDimmerLights_Clear@command:	
  3208                           ; 1 bytes @ 0x2
  3209                           
  3210  0022                     setLED@led:	
  3211                           ; 1 bytes @ 0x2
  3212                           
  3213  0022                     Flash_Memory_Read@address:	
  3214                           ; 1 bytes @ 0x2
  3215                           
  3216  0022                     setMemory_GO@command:	
  3217                           ; 1 bytes @ 0x2
  3218                           
  3219  0022                     setRFSW_Status@command:	
  3220                           ; 1 bytes @ 0x2
  3221                           
  3222  0022                     setSw_Status@sw:	
  3223                           ; 1 bytes @ 0x2
  3224                           
  3225  0022                     ___bmul@product:	
  3226                           ; 1 bytes @ 0x2
  3227                           
  3228  0022                     DelayTime_1us@i:	
  3229                           ; 1 bytes @ 0x2
  3230                           
  3231  0022                     ___wmul@multiplicand:	
  3232                           ; 2 bytes @ 0x2
  3233                           
  3234  0022                     ___awdiv@dividend:	
  3235                           ; 2 bytes @ 0x2
  3236                           
  3237  0022                     ___lwdiv@dividend:	
  3238                           ; 2 bytes @ 0x2
  3239                           
  3240                           
  3241                           ; 2 bytes @ 0x2
  3242  0022                     	ds	1
  3243  0023                     ??_CC2500_WriteREG:	
  3244  0023                     ??_setRFSW_Status:	
  3245                           ; 0 bytes @ 0x3
  3246                           
  3247  0023                     ??_setDimmerLights_Trigger:	
  3248                           ; 0 bytes @ 0x3
  3249                           
  3250  0023                     ??_setDimmerLights_Switch:	
  3251                           ; 0 bytes @ 0x3
  3252                           
  3253  0023                     ?_setDimmerLights:	
  3254                           ; 0 bytes @ 0x3
  3255                           
  3256  0023                     ??_setDimmerLights_TriggerERROR:	
  3257                           ; 0 bytes @ 0x3
  3258                           
  3259  0023                     ??_setLED_Initialization:	
  3260                           ; 0 bytes @ 0x3
  3261                           
  3262  0023                     ??_setSw_Initialization:	
  3263                           ; 0 bytes @ 0x3
  3264                           
  3265  0023                     ??_DelayOff_Initialization:	
  3266                           ; 0 bytes @ 0x3
  3267                           
  3268  0023                     ??_DimmerLights_Close:	
  3269                           ; 0 bytes @ 0x3
  3270                           
  3271  0023                     ??_setDimmerLights_AdjGo:	
  3272                           ; 0 bytes @ 0x3
  3273                           
  3274  0023                     ??_setDimmerLights_TriggerAdj:	
  3275                           ; 0 bytes @ 0x3
  3276                           
  3277  0023                     ??_setDimmerLights_Clear:	
  3278                           ; 0 bytes @ 0x3
  3279                           
  3280  0023                     ??_getAD:	
  3281                           ; 0 bytes @ 0x3
  3282                           
  3283  0023                     CC2500_WriteCommand@command:	
  3284                           ; 0 bytes @ 0x3
  3285                           
  3286  0023                     CC2500_ReadStatus@status_addr:	
  3287                           ; 1 bytes @ 0x3
  3288                           
  3289  0023                     setDimmerLights_Initialization@lights:	
  3290                           ; 1 bytes @ 0x3
  3291                           
  3292  0023                     setDimmerLights_TriggerERROR@lights:	
  3293                           ; 1 bytes @ 0x3
  3294                           
  3295  0023                     setDimmerLights@status:	
  3296                           ; 1 bytes @ 0x3
  3297                           
  3298  0023                     setDimmerLights_Switch@lights:	
  3299                           ; 1 bytes @ 0x3
  3300                           
  3301  0023                     setDimmerLights_AdjGo@lights:	
  3302                           ; 1 bytes @ 0x3
  3303                           
  3304  0023                     setDimmerLights_Trigger@lights:	
  3305                           ; 1 bytes @ 0x3
  3306                           
  3307  0023                     setDimmerLights_TriggerAdj@lights:	
  3308                           ; 1 bytes @ 0x3
  3309                           
  3310  0023                     setDimmerLights_Clear@lights:	
  3311                           ; 1 bytes @ 0x3
  3312                           
  3313  0023                     setLED_Initialization@led:	
  3314                           ; 1 bytes @ 0x3
  3315                           
  3316  0023                     setLED_Main@led:	
  3317                           ; 1 bytes @ 0x3
  3318                           
  3319  0023                     getAD@adcon0:	
  3320                           ; 1 bytes @ 0x3
  3321                           
  3322  0023                     Flash_Memory_Read@ret:	
  3323                           ; 1 bytes @ 0x3
  3324                           
  3325  0023                     setRFSW_Status@sw:	
  3326                           ; 1 bytes @ 0x3
  3327                           
  3328  0023                     setSw_Initialization@sw:	
  3329                           ; 1 bytes @ 0x3
  3330                           
  3331  0023                     ___bmul@multiplier:	
  3332                           ; 1 bytes @ 0x3
  3333                           
  3334  0023                     ___ftpack@exp:	
  3335                           ; 1 bytes @ 0x3
  3336                           
  3337                           
  3338                           ; 1 bytes @ 0x3
  3339  0023                     	ds	1
  3340  0024                     ??_CC2500_ClearTXFIFO:	
  3341  0024                     ??_CC2500_ClearRXFIFO:	
  3342                           ; 0 bytes @ 0x4
  3343                           
  3344  0024                     ??_CC2500_SIDLEMode:	
  3345                           ; 0 bytes @ 0x4
  3346                           
  3347  0024                     ??_DelayTimejudge:	
  3348                           ; 0 bytes @ 0x4
  3349                           
  3350  0024                     ??_setDimmerLights:	
  3351                           ; 0 bytes @ 0x4
  3352                           
  3353  0024                     ??_setDimmerLights_ERROR:	
  3354                           ; 0 bytes @ 0x4
  3355                           
  3356  0024                     ??_Flash_Memory_Modify:	
  3357                           ; 0 bytes @ 0x4
  3358                           
  3359  0024                     ??_Switch_Initialization:	
  3360                           ; 0 bytes @ 0x4
  3361                           
  3362  0024                     ??_getLoad_AD:	
  3363                           ; 0 bytes @ 0x4
  3364                           
  3365  0024                     ??_getTemp_AD:	
  3366                           ; 0 bytes @ 0x4
  3367                           
  3368  0024                     ??_RF_RxDisable:	
  3369                           ; 0 bytes @ 0x4
  3370                           
  3371  0024                     ??_Sw_DimmerAdjFunc:	
  3372                           ; 0 bytes @ 0x4
  3373                           
  3374  0024                     ??_CC2500_TxData:	
  3375                           ; 0 bytes @ 0x4
  3376                           
  3377  0024                     ??_CC2500_RxData:	
  3378                           ; 0 bytes @ 0x4
  3379                           
  3380  0024                     ??_DimmerLights_Initialization:	
  3381                           ; 0 bytes @ 0x4
  3382                           
  3383  0024                     ??_LED_Initialization:	
  3384                           ; 0 bytes @ 0x4
  3385                           
  3386  0024                     ??_LED_Main:	
  3387                           ; 0 bytes @ 0x4
  3388                           
  3389  0024                     ??___wmul:	
  3390                           ; 0 bytes @ 0x4
  3391                           
  3392  0024                     ??___awdiv:	
  3393                           ; 0 bytes @ 0x4
  3394                           
  3395  0024                     ??___lwdiv:	
  3396                           ; 0 bytes @ 0x4
  3397                           
  3398  0024                     CC2500_WriteREG@w_addr:	
  3399                           ; 0 bytes @ 0x4
  3400                           
  3401  0024                     Sw_DimmerAdjFunc@Idle:	
  3402                           ; 1 bytes @ 0x4
  3403                           
  3404  0024                     ___ftpack@sign:	
  3405                           ; 1 bytes @ 0x4
  3406                           
  3407  0024                     getBuz_GO@i:	
  3408                           ; 1 bytes @ 0x4
  3409                           
  3410  0024                     DelayTime_1us@j:	
  3411                           ; 2 bytes @ 0x4
  3412                           
  3413  0024                     ___wmul@product:	
  3414                           ; 2 bytes @ 0x4
  3415                           
  3416                           
  3417                           ; 2 bytes @ 0x4
  3418  0024                     	ds	1
  3419  0025                     ??_CC2500_InitSetREG:	
  3420  0025                     ??_CC2500_InitPATable:	
  3421                           ; 0 bytes @ 0x5
  3422                           
  3423  0025                     ??___ftpack:	
  3424                           ; 0 bytes @ 0x5
  3425                           
  3426  0025                     CC2500_TxData@loop_e:	
  3427                           ; 0 bytes @ 0x5
  3428                           
  3429  0025                     CC2500_RxData@loop_f:	
  3430                           ; 1 bytes @ 0x5
  3431                           
  3432  0025                     setDimmerLights_ERROR@lights:	
  3433                           ; 1 bytes @ 0x5
  3434                           
  3435  0025                     setDimmerLights@lights:	
  3436                           ; 1 bytes @ 0x5
  3437                           
  3438  0025                     Flash_Memory_Modify@i:	
  3439                           ; 1 bytes @ 0x5
  3440                           
  3441  0025                     getTemp_AD@channel:	
  3442                           ; 1 bytes @ 0x5
  3443                           
  3444  0025                     Sw_DimmerAdjFunc@sw:	
  3445                           ; 1 bytes @ 0x5
  3446                           
  3447  0025                     ___awdiv@counter:	
  3448                           ; 1 bytes @ 0x5
  3449                           
  3450  0025                     ___lwdiv@quotient:	
  3451                           ; 1 bytes @ 0x5
  3452                           
  3453                           
  3454                           ; 2 bytes @ 0x5
  3455  0025                     	ds	1
  3456  0026                     ??_CC2500_PowerRST:	
  3457  0026                     ??_CC2500_FrequencyCabr:	
  3458                           ; 0 bytes @ 0x6
  3459                           
  3460  0026                     ??_Flash_Memory_Main:	
  3461                           ; 0 bytes @ 0x6
  3462                           
  3463  0026                     CC2500_InitSetREG@temp1:	
  3464                           ; 0 bytes @ 0x6
  3465                           
  3466  0026                     CC2500_InitPATable@temp:	
  3467                           ; 1 bytes @ 0x6
  3468                           
  3469  0026                     DelayTimejudge@i:	
  3470                           ; 1 bytes @ 0x6
  3471                           
  3472  0026                     getLoad_AD@channel:	
  3473                           ; 1 bytes @ 0x6
  3474                           
  3475  0026                     ___awdiv@sign:	
  3476                           ; 1 bytes @ 0x6
  3477                           
  3478                           
  3479                           ; 1 bytes @ 0x6
  3480  0026                     	ds	1
  3481  0027                     CC2500_InitSetREG@temp2:	
  3482  0027                     CC2500_InitPATable@loop_d:	
  3483                           ; 1 bytes @ 0x7
  3484                           
  3485  0027                     DelayTimejudge@j:	
  3486                           ; 1 bytes @ 0x7
  3487                           
  3488  0027                     getLoad_AD@j:	
  3489                           ; 1 bytes @ 0x7
  3490                           
  3491  0027                     ___lwdiv@counter:	
  3492                           ; 1 bytes @ 0x7
  3493                           
  3494  0027                     ___awdiv@quotient:	
  3495                           ; 1 bytes @ 0x7
  3496                           
  3497                           
  3498                           ; 2 bytes @ 0x7
  3499  0027                     	ds	1
  3500  0028                     ?___awtoft:	
  3501  0028                     CC2500_InitSetREG@loop_c:	
  3502                           ; 3 bytes @ 0x8
  3503                           
  3504  0028                     DelayTimejudge@k:	
  3505                           ; 1 bytes @ 0x8
  3506                           
  3507  0028                     getLoad_AD@i:	
  3508                           ; 1 bytes @ 0x8
  3509                           
  3510  0028                     ___awtoft@c:	
  3511                           ; 1 bytes @ 0x8
  3512                           
  3513                           
  3514                           ; 2 bytes @ 0x8
  3515  0028                     	ds	1
  3516  0029                     ?_setBuz:	
  3517  0029                     ??_CC2500_PowerOnInitial:	
  3518                           ; 0 bytes @ 0x9
  3519                           
  3520  0029                     DelayTimejudge@value:	
  3521                           ; 0 bytes @ 0x9
  3522                           
  3523  0029                     setBuz@time:	
  3524                           ; 1 bytes @ 0x9
  3525                           
  3526                           
  3527                           ; 2 bytes @ 0x9
  3528  0029                     	ds	1
  3529  002A                     ?_setDelayOff_GO:	
  3530  002A                     setDelayOff_GO@command:	
  3531                           ; 0 bytes @ 0xA
  3532                           
  3533                           
  3534                           ; 1 bytes @ 0xA
  3535  002A                     	ds	1
  3536  002B                     ??_setBuz:	
  3537  002B                     ??___awtoft:	
  3538                           ; 0 bytes @ 0xB
  3539                           
  3540  002B                     setDelayOff_GO@value:	
  3541                           ; 0 bytes @ 0xB
  3542                           
  3543                           
  3544                           ; 1 bytes @ 0xB
  3545  002B                     	ds	1
  3546  002C                     ??_setDelayOff_GO:	
  3547  002C                     setBuz@count:	
  3548                           ; 0 bytes @ 0xC
  3549                           
  3550                           
  3551                           ; 1 bytes @ 0xC
  3552  002C                     	ds	1
  3553  002D                     ??_my_Main:	
  3554  002D                     ??_setLog_Code:	
  3555                           ; 0 bytes @ 0xD
  3556                           
  3557  002D                     ??_DimmerLights_Exceptions:	
  3558                           ; 0 bytes @ 0xD
  3559                           
  3560  002D                     DimmerLights_Exceptions@status:	
  3561                           ; 0 bytes @ 0xD
  3562                           
  3563  002D                     ___awtoft@sign:	
  3564                           ; 1 bytes @ 0xD
  3565                           
  3566                           
  3567                           ; 1 bytes @ 0xD
  3568  002D                     	ds	1
  3569  002E                     ??_setLoad_Exceptions:	
  3570  002E                     ??_setOverTemp_Exceptions:	
  3571                           ; 0 bytes @ 0xE
  3572                           
  3573  002E                     ?___ftdiv:	
  3574                           ; 0 bytes @ 0xE
  3575                           
  3576  002E                     ?___ftmul:	
  3577                           ; 3 bytes @ 0xE
  3578                           
  3579  002E                     setDelayOff_GO@sw:	
  3580                           ; 3 bytes @ 0xE
  3581                           
  3582  002E                     ___ftdiv@f2:	
  3583                           ; 1 bytes @ 0xE
  3584                           
  3585  002E                     ___ftmul@f1:	
  3586                           ; 3 bytes @ 0xE
  3587                           
  3588                           
  3589                           ; 3 bytes @ 0xE
  3590  002E                     	ds	1
  3591  002F                     setLoad_Exceptions@i:	
  3592  002F                     setOverTemp_Exceptions@i:	
  3593                           ; 1 bytes @ 0xF
  3594                           
  3595                           
  3596                           ; 1 bytes @ 0xF
  3597  002F                     	ds	1
  3598  0030                     setLoad_Exceptions@command:	
  3599  0030                     setOverTemp_Exceptions@command:	
  3600                           ; 1 bytes @ 0x10
  3601                           
  3602                           
  3603                           ; 1 bytes @ 0x10
  3604  0030                     	ds	1
  3605  0031                     ??_Load_Main:	
  3606  0031                     ??_setTemp_Main:	
  3607                           ; 0 bytes @ 0x11
  3608                           
  3609  0031                     ___ftdiv@f1:	
  3610                           ; 0 bytes @ 0x11
  3611                           
  3612  0031                     ___ftmul@f2:	
  3613                           ; 3 bytes @ 0x11
  3614                           
  3615                           
  3616                           ; 3 bytes @ 0x11
  3617  0031                     	ds	1
  3618  0032                     ??_Temp_Main:	
  3619                           
  3620                           ; 0 bytes @ 0x12
  3621  0032                     	ds	1
  3622  0033                     Load_Main@i:	
  3623                           
  3624                           ; 1 bytes @ 0x13
  3625  0033                     	ds	1
  3626  0034                     ??___ftdiv:	
  3627  0034                     ??___ftmul:	
  3628                           ; 0 bytes @ 0x14
  3629                           
  3630                           
  3631                           ; 0 bytes @ 0x14
  3632  0034                     	ds	4
  3633  0038                     ___ftdiv@cntr:	
  3634  0038                     ___ftmul@exp:	
  3635                           ; 1 bytes @ 0x18
  3636                           
  3637                           
  3638                           ; 1 bytes @ 0x18
  3639  0038                     	ds	1
  3640  0039                     ___ftdiv@f3:	
  3641  0039                     ___ftmul@f3_as_product:	
  3642                           ; 3 bytes @ 0x19
  3643                           
  3644                           
  3645                           ; 3 bytes @ 0x19
  3646  0039                     	ds	3
  3647  003C                     ___ftdiv@exp:	
  3648  003C                     ___ftmul@cntr:	
  3649                           ; 1 bytes @ 0x1C
  3650                           
  3651                           
  3652                           ; 1 bytes @ 0x1C
  3653  003C                     	ds	1
  3654  003D                     ___ftdiv@sign:	
  3655  003D                     ___ftmul@sign:	
  3656                           ; 1 bytes @ 0x1D
  3657                           
  3658                           
  3659                           ; 1 bytes @ 0x1D
  3660  003D                     	ds	1
  3661  003E                     ?___ftadd:	
  3662  003E                     ___ftadd@f1:	
  3663                           ; 3 bytes @ 0x1E
  3664                           
  3665                           
  3666                           ; 3 bytes @ 0x1E
  3667  003E                     	ds	3
  3668  0041                     ___ftadd@f2:	
  3669                           
  3670                           ; 3 bytes @ 0x21
  3671  0041                     	ds	3
  3672  0044                     ??___ftadd:	
  3673                           
  3674                           ; 0 bytes @ 0x24
  3675  0044                     	ds	4
  3676  0048                     ___ftadd@sign:	
  3677                           
  3678                           ; 1 bytes @ 0x28
  3679  0048                     	ds	1
  3680  0049                     ___ftadd@exp2:	
  3681                           
  3682                           ; 1 bytes @ 0x29
  3683  0049                     	ds	1
  3684  004A                     ___ftadd@exp1:	
  3685                           
  3686                           ; 1 bytes @ 0x2A
  3687  004A                     	ds	1
  3688  004B                     ?___fttol:	
  3689  004B                     ___fttol@f1:	
  3690                           ; 4 bytes @ 0x2B
  3691                           
  3692                           
  3693                           ; 3 bytes @ 0x2B
  3694  004B                     	ds	4
  3695  004F                     ??___fttol:	
  3696                           
  3697                           ; 0 bytes @ 0x2F
  3698  004F                     	ds	4
  3699  0053                     ___fttol@sign1:	
  3700                           
  3701                           ; 1 bytes @ 0x33
  3702  0053                     	ds	1
  3703  0054                     ___fttol@lval:	
  3704                           
  3705                           ; 4 bytes @ 0x34
  3706  0054                     	ds	4
  3707  0058                     ___fttol@exp1:	
  3708                           
  3709                           ; 1 bytes @ 0x38
  3710  0058                     	ds	1
  3711  0059                     ??_getPercentValue:	
  3712  0059                     ??_setPercentValue:	
  3713                           ; 0 bytes @ 0x39
  3714                           
  3715  0059                     setPercentValue@value:	
  3716                           ; 0 bytes @ 0x39
  3717                           
  3718                           
  3719                           ; 1 bytes @ 0x39
  3720  0059                     	ds	1
  3721  005A                     setPercentValue@i:	
  3722                           
  3723                           ; 3 bytes @ 0x3A
  3724  005A                     	ds	1
  3725  005B                     getPercentValue@value:	
  3726                           
  3727                           ; 1 bytes @ 0x3B
  3728  005B                     	ds	1
  3729  005C                     getPercentValue@i:	
  3730                           
  3731                           ; 3 bytes @ 0x3C
  3732  005C                     	ds	1
  3733  005D                     ?_setRF_DimmerLights:	
  3734  005D                     ??_Flash_Memory_Initialization:	
  3735                           ; 0 bytes @ 0x3D
  3736                           
  3737  005D                     setRF_DimmerLights@on:	
  3738                           ; 0 bytes @ 0x3D
  3739                           
  3740                           
  3741                           ; 1 bytes @ 0x3D
  3742  005D                     	ds	1
  3743  005E                     ??_setRF_DimmerLights:	
  3744  005E                     Flash_Memory_Initialization@i:	
  3745                           ; 0 bytes @ 0x3E
  3746                           
  3747                           
  3748                           ; 1 bytes @ 0x3E
  3749  005E                     	ds	1
  3750  005F                     ??_setDimmerLights_AdjRF:	
  3751                           
  3752                           ; 0 bytes @ 0x3F
  3753  005F                     	ds	1
  3754  0060                     setDimmerLights_AdjRF@lights:	
  3755  0060                     setRF_DimmerLights@status:	
  3756                           ; 1 bytes @ 0x40
  3757                           
  3758                           
  3759                           ; 1 bytes @ 0x40
  3760  0060                     	ds	1
  3761  0061                     ??_setRF_DimmerValue:	
  3762  0061                     setRF_DimmerLights@lights:	
  3763                           ; 0 bytes @ 0x41
  3764                           
  3765                           
  3766                           ; 1 bytes @ 0x41
  3767  0061                     	ds	1
  3768  0062                     ??_DlyOff_Main:	
  3769  0062                     ?_setDimmerLights_Adj:	
  3770                           ; 0 bytes @ 0x42
  3771                           
  3772  0062                     ??_setRFSW_Control:	
  3773                           ; 0 bytes @ 0x42
  3774                           
  3775  0062                     ??_Sw_DimmerOnFunc:	
  3776                           ; 0 bytes @ 0x42
  3777                           
  3778  0062                     ??_Sw_DimmerOffFunc:	
  3779                           ; 0 bytes @ 0x42
  3780                           
  3781  0062                     setDimmerLights_Adj@status:	
  3782                           ; 0 bytes @ 0x42
  3783                           
  3784  0062                     Sw_DimmerOnFunc@Idle:	
  3785                           ; 1 bytes @ 0x42
  3786                           
  3787                           
  3788                           ; 1 bytes @ 0x42
  3789  0062                     	ds	1
  3790  0063                     ??_setDimmerLights_Adj:	
  3791  0063                     setRFSW_Control@sw:	
  3792                           ; 0 bytes @ 0x43
  3793                           
  3794  0063                     setRF_DimmerValue@lights:	
  3795                           ; 1 bytes @ 0x43
  3796                           
  3797  0063                     Sw_DimmerOnFunc@sw:	
  3798                           ; 1 bytes @ 0x43
  3799                           
  3800                           
  3801                           ; 1 bytes @ 0x43
  3802  0063                     	ds	1
  3803  0064                     ??_setRFSW_AdjControl:	
  3804  0064                     DlyOff_Main@sw:	
  3805                           ; 0 bytes @ 0x44
  3806                           
  3807  0064                     setDimmerLights_Adj@lights:	
  3808                           ; 1 bytes @ 0x44
  3809                           
  3810  0064                     Sw_DimmerOffFunc@sw:	
  3811                           ; 1 bytes @ 0x44
  3812                           
  3813                           
  3814                           ; 1 bytes @ 0x44
  3815  0064                     	ds	1
  3816  0065                     ??_setDimmerLights_Main:	
  3817  0065                     ??_setSw_Main:	
  3818                           ; 0 bytes @ 0x45
  3819                           
  3820  0065                     ??_DelayOff_Main:	
  3821                           ; 0 bytes @ 0x45
  3822                           
  3823  0065                     setDimmerLights_Main@clear:	
  3824                           ; 0 bytes @ 0x45
  3825                           
  3826                           
  3827                           ; 1 bytes @ 0x45
  3828  0065                     	ds	1
  3829  0066                     setDimmerLights_Main@lights:	
  3830  0066                     setRFSW_AdjControl@sw:	
  3831                           ; 1 bytes @ 0x46
  3832                           
  3833                           
  3834                           ; 1 bytes @ 0x46
  3835  0066                     	ds	1
  3836  0067                     ??_setRF_Main:	
  3837  0067                     ??_getRxData:	
  3838                           ; 0 bytes @ 0x47
  3839                           
  3840  0067                     ??_setControl_Lights_Table:	
  3841                           ; 0 bytes @ 0x47
  3842                           
  3843  0067                     ??_DimmerLights_Main:	
  3844                           ; 0 bytes @ 0x47
  3845                           
  3846  0067                     _setSw_Main$6015:	
  3847                           ; 0 bytes @ 0x47
  3848                           
  3849                           
  3850                           ; 1 bytes @ 0x47
  3851  0067                     	ds	1
  3852  0068                     _setRF_Main$5046:	
  3853  0068                     _setSw_Main$6016:	
  3854                           ; 1 bytes @ 0x48
  3855                           
  3856                           
  3857                           ; 1 bytes @ 0x48
  3858  0068                     	ds	1
  3859  0069                     ??_RF_Main:	
  3860  0069                     setSw_Main@sw:	
  3861                           ; 0 bytes @ 0x49
  3862                           
  3863                           
  3864                           ; 1 bytes @ 0x49
  3865  0069                     	ds	1
  3866  006A                     ??_Switch_Main:	
  3867  006A                     ?_main:	
  3868                           ; 0 bytes @ 0x4A
  3869                           
  3870  006A                     main@argc:	
  3871                           ; 2 bytes @ 0x4A
  3872                           
  3873                           
  3874                           ; 2 bytes @ 0x4A
  3875  006A                     	ds	2
  3876  006C                     main@argv:	
  3877                           
  3878                           ; 2 bytes @ 0x4C
  3879  006C                     	ds	2
  3880  006E                     ??_main:	
  3881                           
  3882                           	psect	maintext
  3883  1631                     __pmaintext:	
  3884                           ; 0 bytes @ 0x4E
  3885 ;;
  3886 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3887 ;;
  3888 ;; *************** function _main *****************
  3889 ;; Defined at:
  3890 ;;		line 7 in file "../src/Main_B1.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;  argc            2   74[BANK0 ] int 
  3893 ;;  argv            2   76[BANK0 ] PTR PTR unsigned char 
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;		None
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  2   74[BANK0 ] int 
  3898 ;; Registers used:
  3899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3900 ;; Tracked objects:
  3901 ;;		On entry : 17F/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3905 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3908 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3909 ;;Total ram usage:        4 bytes
  3910 ;; Hardware stack levels required when called:   15
  3911 ;; This function calls:
  3912 ;;		_Buzzer_Initialization
  3913 ;;		_Buzzer_Main
  3914 ;;		_CC2500_PowerOnInitial
  3915 ;;		_DelayOff_Initialization
  3916 ;;		_DelayOff_Main
  3917 ;;		_DimmerLights_Initialization
  3918 ;;		_DimmerLights_Main
  3919 ;;		_Flash_Memory_Initialization
  3920 ;;		_Flash_Memory_Main
  3921 ;;		_LED_Initialization
  3922 ;;		_LED_Main
  3923 ;;		_Load_Initialization
  3924 ;;		_Load_Main
  3925 ;;		_Mcu_Initialization
  3926 ;;		_RF_Initialization
  3927 ;;		_RF_Main
  3928 ;;		_Switch_Initialization
  3929 ;;		_Switch_Main
  3930 ;;		_Temp_Initialization
  3931 ;;		_Temp_Main
  3932 ;;		_WDT_Main
  3933 ;;		_getLoad_AD
  3934 ;;		_getTemp_AD
  3935 ;;		_myMain_Initialization
  3936 ;;		_my_Main
  3937 ;; This function is called by:
  3938 ;;		Startup code after reset
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           
  3943                           ;psect for function _main
  3944  1631                     _main:	
  3945                           
  3946                           ;Main_B1.c: 9: myMain_Initialization();
  3947                           
  3948                           ;incstack = 0
  3949                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3950  1631  319B  2388  3196   	fcall	_myMain_Initialization
  3951                           
  3952                           ;Main_B1.c: 10: Mcu_Initialization();
  3953  1634  319C  243D  3196   	fcall	_Mcu_Initialization
  3954                           
  3955                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3956  1637  3185  25DB  3196   	fcall	_Flash_Memory_Initialization
  3957                           
  3958                           ;Main_B1.c: 12: LED_Initialization();
  3959  163A  319B  230C  3196   	fcall	_LED_Initialization
  3960                           
  3961                           ;Main_B1.c: 13: Buzzer_Initialization();
  3962  163D  319A  221C  3196   	fcall	_Buzzer_Initialization
  3963                           
  3964                           ;Main_B1.c: 15: ;;
  3965                           ;Main_B1.c: 16: Temp_Initialization();
  3966  1640  319A  2228  3196   	fcall	_Temp_Initialization
  3967                           
  3968                           ;Main_B1.c: 17: Load_Initialization();
  3969  1643  319A  2243  3196   	fcall	_Load_Initialization
  3970                           
  3971                           ;Main_B1.c: 18: ;;
  3972                           ;Main_B1.c: 19: DelayOff_Initialization();
  3973  1646  319A  2271  3196   	fcall	_DelayOff_Initialization
  3974                           
  3975                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3976  1649  319D  2530  3196   	fcall	_DimmerLights_Initialization
  3977                           
  3978                           ;Main_B1.c: 22: ;;
  3979                           ;Main_B1.c: 23: ;;
  3980                           ;Main_B1.c: 24: ;;
  3981                           ;Main_B1.c: 25: Switch_Initialization();
  3982  164C  319B  2332  3196   	fcall	_Switch_Initialization
  3983                           
  3984                           ;Main_B1.c: 26: RF_Initialization();
  3985  164F  319A  221F  3196   	fcall	_RF_Initialization
  3986                           
  3987                           ;Main_B1.c: 27: CC2500_PowerOnInitial();
  3988  1652  3187  27EB  3196   	fcall	_CC2500_PowerOnInitial
  3989  1655                     l9870:	
  3990                           ;Main_B1.c: 28: ;;
  3991                           ;Main_B1.c: 31: while (1) {
  3992                           
  3993                           
  3994                           ;Main_B1.c: 33: if (myMain.PowerON) {
  3995  1655  0021               	movlb	1	; select bank1
  3996  1656  1C20               	btfss	_myMain^(0+128),0
  3997  1657  2E60               	goto	l9874
  3998                           
  3999                           ;Main_B1.c: 35: ;;
  4000                           ;Main_B1.c: 39: getLoad_AD(0x05);
  4001  1658  3005               	movlw	5
  4002  1659  318B  2310  3196   	fcall	_getLoad_AD
  4003                           
  4004                           ;Main_B1.c: 43: getTemp_AD(0x09);
  4005  165C  3009               	movlw	9
  4006  165D  3191  2199  3196   	fcall	_getTemp_AD
  4007  1660                     l9874:	
  4008                           ;Main_B1.c: 47: ;;
  4009                           
  4010                           
  4011                           ;Main_B1.c: 62: }
  4012                           ;Main_B1.c: 65: if (myMain.T0_Timerout) {
  4013  1660  0021               	movlb	1	; select bank1
  4014  1661  1CA0               	btfss	_myMain^(0+128),1
  4015  1662  2E55               	goto	l9870
  4016                           
  4017                           ;Main_B1.c: 66: myMain.T0_Timerout = 0;
  4018  1663  10A0               	bcf	_myMain^(0+128),1
  4019                           
  4020                           ;Main_B1.c: 67: my_Main();
  4021  1664  3194  24A2  3196   	fcall	_my_Main
  4022                           
  4023                           ;Main_B1.c: 68: WDT_Main();
  4024  1667  319C  2461  3196   	fcall	_WDT_Main
  4025                           
  4026                           ;Main_B1.c: 69: ;;
  4027                           ;Main_B1.c: 70: ;;
  4028                           ;Main_B1.c: 71: if (myMain.PowerON) {
  4029  166A  0021               	movlb	1	; select bank1
  4030  166B  1C20               	btfss	_myMain^(0+128),0
  4031  166C  2E55               	goto	l9870
  4032                           
  4033                           ;Main_B1.c: 72: Flash_Memory_Main();
  4034  166D  319E  265D  3196   	fcall	_Flash_Memory_Main
  4035                           
  4036                           ;Main_B1.c: 74: LED_Main();
  4037  1670  3188  2000  3196   	fcall	_LED_Main
  4038                           
  4039                           ;Main_B1.c: 75: Buzzer_Main();
  4040  1673  3194  2458  3196   	fcall	_Buzzer_Main
  4041                           
  4042                           ;Main_B1.c: 77: ;;
  4043                           ;Main_B1.c: 78: Temp_Main();
  4044  1676  319A  222B  3196   	fcall	_Temp_Main
  4045                           
  4046                           ;Main_B1.c: 79: Load_Main();
  4047  1679  3182  2214  3196   	fcall	_Load_Main
  4048                           
  4049                           ;Main_B1.c: 80: ;;
  4050                           ;Main_B1.c: 82: ;;
  4051                           ;Main_B1.c: 83: DimmerLights_Main();
  4052  167C  319A  22DE  3196   	fcall	_DimmerLights_Main
  4053                           
  4054                           ;Main_B1.c: 84: Switch_Main();
  4055  167F  319A  22A9  3196   	fcall	_Switch_Main
  4056                           
  4057                           ;Main_B1.c: 85: ;;
  4058                           ;Main_B1.c: 86: ;;
  4059                           ;Main_B1.c: 88: RF_Main();
  4060  1682  319A  2222  3196   	fcall	_RF_Main
  4061                           
  4062                           ;Main_B1.c: 89: DelayOff_Main();
  4063  1685  319A  2279  3196   	fcall	_DelayOff_Main
  4064                           
  4065                           ;Main_B1.c: 90: ;;
  4066  1688  2E55               	goto	l9870
  4067  1689                     __end_of_main:	
  4068                           ;Main_B1.c: 91: }
  4069                           ;Main_B1.c: 92: }
  4070                           ;Main_B1.c: 110: }
  4071                           ;Main_B1.c: 111: return (0);
  4072                           ;	Return value of _main is never used
  4073                           
  4074                           
  4075                           	psect	text1
  4076  14A2                     __ptext1:	
  4077 ;; *************** function _my_Main *****************
  4078 ;; Defined at:
  4079 ;;		line 128 in file "../src/Main_B1.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;		None
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;		None
  4084 ;; Return value:  Size  Location     Type
  4085 ;;		None               void
  4086 ;; Registers used:
  4087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4097 ;;Total ram usage:        0 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; Hardware stack levels required when called:    7
  4100 ;; This function calls:
  4101 ;;		_setBuz
  4102 ;;		_setLoad_Enable
  4103 ;;		_setRF_Enable
  4104 ;;		_setSw_Enable
  4105 ;;		_setTemp_Enable
  4106 ;; This function is called by:
  4107 ;;		_main
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           
  4112                           ;psect for function _my_Main
  4113  14A2                     _my_Main:	
  4114                           
  4115                           ;Main_B1.c: 130: if (myMain.PowerON == 0) {
  4116                           
  4117                           ;incstack = 0
  4118                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4119  14A2  0021               	movlb	1	; select bank1
  4120  14A3  1820               	btfsc	_myMain^(0+128),0
  4121  14A4  2CD3               	goto	l9698
  4122                           
  4123                           ;Main_B1.c: 131: myMain.PowerCount++;
  4124  14A5  3001               	movlw	1
  4125  14A6  07A1               	addwf	(_myMain^(0+128)+1),f
  4126  14A7  3000               	movlw	0
  4127  14A8  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4128                           
  4129                           ;Main_B1.c: 132: if (myMain.PowerCount == 150)
  4130  14A9  3001               	movlw	1
  4131  14AA  3EA0               	addlw	_myMain& (0+255)
  4132  14AB  0086               	movwf	6
  4133  14AC  0187               	clrf	7
  4134  14AD  3F40               	moviw [0]fsr1
  4135  14AE  3A96               	xorlw	150
  4136  14AF  1D03               	skipz
  4137  14B0  2CB3               	goto	u10485
  4138  14B1  3F41               	moviw [1]fsr1
  4139  14B2  3A00               	xorlw	0
  4140  14B3                     u10485:	
  4141  14B3  1D03               	skipz
  4142  14B4  0008               	return
  4143                           
  4144                           ;Main_B1.c: 133: {
  4145                           ;Main_B1.c: 134: myMain.PowerCount = 0;
  4146  14B5  01A1               	clrf	(_myMain^(0+128)+1)
  4147  14B6  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4148                           
  4149                           ;Main_B1.c: 135: myMain.PowerON = 1;
  4150  14B7  1420               	bsf	_myMain^(0+128),0
  4151                           
  4152                           ;Main_B1.c: 138: setTemp_Enable(1);
  4153  14B8  3001               	movlw	1
  4154  14B9  319A  22B9  3194   	fcall	_setTemp_Enable
  4155                           
  4156                           ;Main_B1.c: 142: setLoad_Enable(1);
  4157  14BC  3001               	movlw	1
  4158  14BD  319A  22CA  3194   	fcall	_setLoad_Enable
  4159                           
  4160                           ;Main_B1.c: 148: setBuz(3, 50);
  4161  14C0  3032               	movlw	50
  4162  14C1  0020               	movlb	0	; select bank0
  4163  14C2  00A9               	movwf	setBuz@time
  4164  14C3  3000               	movlw	0
  4165  14C4  00AA               	movwf	setBuz@time+1
  4166  14C5  3003               	movlw	3
  4167  14C6  3196  2689  3194   	fcall	_setBuz
  4168                           
  4169                           ;Main_B1.c: 149: myMain.SelfTest = 1;
  4170  14C9  0021               	movlb	1	; select bank1
  4171  14CA  1720               	bsf	_myMain^(0+128),6
  4172                           
  4173                           ;Main_B1.c: 151: setSw_Enable(1);
  4174  14CB  3001               	movlw	1
  4175  14CC  319D  25E2  3194   	fcall	_setSw_Enable
  4176                           
  4177                           ;Main_B1.c: 154: setRF_Enable(1);
  4178  14CF  3001               	movlw	1
  4179  14D0  319B  234D         	fcall	_setRF_Enable
  4180                           
  4181                           ;Main_B1.c: 158: }
  4182                           ;Main_B1.c: 159: } else {
  4183  14D2  0008               	return
  4184  14D3                     l9698:	
  4185                           
  4186                           ;Main_B1.c: 167: myMain.Count1++;
  4187  14D3  3001               	movlw	1
  4188  14D4  0021               	movlb	1	; select bank1
  4189  14D5  07A5               	addwf	(_myMain^(0+128)+5),f
  4190  14D6  3000               	movlw	0
  4191  14D7  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4192                           
  4193                           ;Main_B1.c: 168: if (myMain.Count1 == 100)
  4194  14D8  3005               	movlw	5
  4195  14D9  3EA0               	addlw	_myMain& (0+255)
  4196  14DA  0086               	movwf	6
  4197  14DB  0187               	clrf	7
  4198  14DC  3F40               	moviw [0]fsr1
  4199  14DD  3A64               	xorlw	100
  4200  14DE  1D03               	skipz
  4201  14DF  2CE2               	goto	u10495
  4202  14E0  3F41               	moviw [1]fsr1
  4203  14E1  3A00               	xorlw	0
  4204  14E2                     u10495:	
  4205  14E2  1D03               	skipz
  4206  14E3  0008               	return
  4207                           
  4208                           ;Main_B1.c: 169: {
  4209                           ;Main_B1.c: 170: myMain.Count1 = 0;
  4210  14E4  01A5               	clrf	(_myMain^(0+128)+5)
  4211  14E5  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4212                           
  4213                           ;Main_B1.c: 183: if (myMain.Flag) {
  4214  14E6  1DA0               	btfss	_myMain^(0+128),3
  4215  14E7  2CEA               	goto	l1550
  4216                           
  4217                           ;Main_B1.c: 184: myMain.Flag = 0;
  4218  14E8  11A0               	bcf	_myMain^(0+128),3
  4219                           
  4220                           ;Main_B1.c: 193: } else {
  4221  14E9  0008               	return
  4222  14EA                     l1550:	
  4223                           
  4224                           ;Main_B1.c: 194: myMain.Flag = 1;
  4225  14EA  15A0               	bsf	_myMain^(0+128),3
  4226  14EB  0008               	return
  4227  14EC                     __end_of_my_Main:	
  4228                           
  4229                           	psect	text2
  4230  1AB9                     __ptext2:	
  4231 ;; *************** function _setTemp_Enable *****************
  4232 ;; Defined at:
  4233 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;  command         1    wreg     unsigned char 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  command         1    0[BANK0 ] unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;		None               void
  4240 ;; Registers used:
  4241 ;;		wreg
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4251 ;;Total ram usage:        1 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    5
  4254 ;; This function calls:
  4255 ;;		Nothing
  4256 ;; This function is called by:
  4257 ;;		_my_Main
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _setTemp_Enable
  4263  1AB9                     _setTemp_Enable:	
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _setTemp_Enable: [wreg]
  4267                           ;setTemp_Enable@command stored from wreg
  4268  1AB9  0020               	movlb	0	; select bank0
  4269  1ABA  00A0               	movwf	setTemp_Enable@command
  4270                           
  4271                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4272  1ABB  0820               	movf	setTemp_Enable@command,w
  4273  1ABC  0021               	movlb	1	; select bank1
  4274  1ABD  1057               	bcf	_Temp1^(0+128),0
  4275  1ABE  1D03               	skipz
  4276  1ABF  1457               	bsf	_Temp1^(0+128),0
  4277  1AC0  0008               	return
  4278  1AC1                     __end_of_setTemp_Enable:	
  4279                           
  4280                           	psect	text3
  4281  1ACA                     __ptext3:	
  4282 ;; *************** function _setLoad_Enable *****************
  4283 ;; Defined at:
  4284 ;;		line 258 in file "../src/OverLoad_B1.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  command         1    wreg     unsigned char 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  command         1    0[BANK0 ] unsigned char 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;		None               void
  4291 ;; Registers used:
  4292 ;;		wreg
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4299 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4302 ;;Total ram usage:        1 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    5
  4305 ;; This function calls:
  4306 ;;		Nothing
  4307 ;; This function is called by:
  4308 ;;		_my_Main
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           
  4313                           ;psect for function _setLoad_Enable
  4314  1ACA                     _setLoad_Enable:	
  4315                           
  4316                           ;incstack = 0
  4317                           ; Regs used in _setLoad_Enable: [wreg]
  4318                           ;setLoad_Enable@command stored from wreg
  4319  1ACA  0020               	movlb	0	; select bank0
  4320  1ACB  00A0               	movwf	setLoad_Enable@command
  4321                           
  4322                           ;OverLoad_B1.c: 259: Load1.Enable = command;
  4323  1ACC  0820               	movf	setLoad_Enable@command,w
  4324  1ACD  0023               	movlb	3	; select bank3
  4325  1ACE  1020               	bcf	_Load1^(0+384),0
  4326  1ACF  1D03               	skipz
  4327  1AD0  1420               	bsf	_Load1^(0+384),0
  4328                           
  4329                           ;OverLoad_B1.c: 260: Load1.GO = 0;
  4330  1AD1  10A0               	bcf	_Load1^(0+384),1
  4331  1AD2  0008               	return
  4332  1AD3                     __end_of_setLoad_Enable:	
  4333                           
  4334                           	psect	text4
  4335  1B88                     __ptext4:	
  4336 ;; *************** function _myMain_Initialization *****************
  4337 ;; Defined at:
  4338 ;;		line 116 in file "../src/Main_B1.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, fsr1l, fsr1h
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;Total ram usage:        1 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    5
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           
  4367                           ;psect for function _myMain_Initialization
  4368  1B88                     _myMain_Initialization:	
  4369                           
  4370                           ;Main_B1.c: 118: product = &_product;
  4371                           
  4372                           ;incstack = 0
  4373                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4374  1B88  304E               	movlw	__product& (0+255)
  4375  1B89  0020               	movlb	0	; select bank0
  4376  1B8A  00A0               	movwf	??_myMain_Initialization
  4377  1B8B  0820               	movf	??_myMain_Initialization,w
  4378  1B8C  00EE               	movwf	_product
  4379                           
  4380                           ;Main_B1.c: 119: product->Data[20] = 210;
  4381  1B8D  30D2               	movlw	210
  4382  1B8E  00A0               	movwf	??_myMain_Initialization
  4383  1B8F  086E               	movf	_product,w
  4384  1B90  3E14               	addlw	20
  4385  1B91  0086               	movwf	6
  4386  1B92  3002               	movlw	2	; select bank4/5
  4387  1B93  0087               	movwf	7
  4388  1B94  0820               	movf	??_myMain_Initialization,w
  4389  1B95  0081               	movwf	1
  4390  1B96  0008               	return
  4391  1B97                     __end_of_myMain_Initialization:	
  4392                           
  4393                           	psect	text5
  4394  1199                     __ptext5:	
  4395 ;; *************** function _getTemp_AD *****************
  4396 ;; Defined at:
  4397 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  channel         1    wreg     unsigned char 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  channel         1    5[BANK0 ] unsigned char 
  4402 ;; Return value:  Size  Location     Type
  4403 ;;		None               void
  4404 ;; Registers used:
  4405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;Total ram usage:        2 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    7
  4418 ;; This function calls:
  4419 ;;		_getAD
  4420 ;; This function is called by:
  4421 ;;		_main
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           
  4426                           ;psect for function _getTemp_AD
  4427  1199                     _getTemp_AD:	
  4428                           
  4429                           ;incstack = 0
  4430                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4431                           ;getTemp_AD@channel stored from wreg
  4432  1199  0020               	movlb	0	; select bank0
  4433  119A  00A5               	movwf	getTemp_AD@channel
  4434                           
  4435                           ;OverTemperature_B1.c: 34: if (Temp1.ADtoGO == 1) {
  4436  119B  0021               	movlb	1	; select bank1
  4437  119C  1D57               	btfss	_Temp1^(0+128),2
  4438  119D  0008               	return
  4439                           
  4440                           ;OverTemperature_B1.c: 35: Temp1.ADRES = getAD(channel, 0xf0);
  4441  119E  30F0               	movlw	240
  4442  119F  0020               	movlb	0	; select bank0
  4443  11A0  00A4               	movwf	??_getTemp_AD
  4444  11A1  0824               	movf	??_getTemp_AD,w
  4445  11A2  00A0               	movwf	getAD@adcon1
  4446  11A3  0825               	movf	getTemp_AD@channel,w
  4447  11A4  319E  267C  3191   	fcall	_getAD
  4448  11A7  0020               	movlb	0	; select bank0
  4449  11A8  0821               	movf	?_getAD+1,w
  4450  11A9  0021               	movlb	1	; select bank1
  4451  11AA  01E4               	clrf	((_Temp1+1)^(0+128)+12)
  4452  11AB  07E4               	addwf	((_Temp1+1)^(0+128)+12),f
  4453  11AC  0020               	movlb	0	; select bank0
  4454  11AD  0820               	movf	?_getAD,w
  4455  11AE  0021               	movlb	1	; select bank1
  4456  11AF  01E3               	clrf	(_Temp1^(0+128)+12)
  4457  11B0  07E3               	addwf	(_Temp1^(0+128)+12),f
  4458                           
  4459                           ;OverTemperature_B1.c: 36: if (Temp1.ADH[0] < Temp1.ADRES) {
  4460  11B1  0864               	movf	((_Temp1+1)^(0+128)+12),w
  4461  11B2  0260               	subwf	((_Temp1+1)^(0+128)+8),w
  4462  11B3  1D03               	skipz
  4463  11B4  29B7               	goto	u7775
  4464  11B5  0863               	movf	(_Temp1^(0+128)+12),w
  4465  11B6  025F               	subwf	(_Temp1^(0+128)+8),w
  4466  11B7                     u7775:	
  4467  11B7  1803               	skipnc
  4468  11B8  29C0               	goto	l8048
  4469                           
  4470                           ;OverTemperature_B1.c: 37: Temp1.ADH[0] = Temp1.ADRES;
  4471  11B9  0864               	movf	((_Temp1+1)^(0+128)+12),w
  4472  11BA  01E0               	clrf	((_Temp1+1)^(0+128)+8)
  4473  11BB  07E0               	addwf	((_Temp1+1)^(0+128)+8),f
  4474  11BC  0863               	movf	(_Temp1^(0+128)+12),w
  4475  11BD  01DF               	clrf	(_Temp1^(0+128)+8)
  4476  11BE  07DF               	addwf	(_Temp1^(0+128)+8),f
  4477                           
  4478                           ;OverTemperature_B1.c: 38: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4479  11BF  0008               	return
  4480  11C0                     l8048:	
  4481  11C0  0864               	movf	((_Temp1+1)^(0+128)+12),w
  4482  11C1  0262               	subwf	((_Temp1+1)^(0+128)+10),w
  4483  11C2  1D03               	skipz
  4484  11C3  29C6               	goto	u7785
  4485  11C4  0863               	movf	(_Temp1^(0+128)+12),w
  4486  11C5  0261               	subwf	(_Temp1^(0+128)+10),w
  4487  11C6                     u7785:	
  4488  11C6  1803               	skipnc
  4489  11C7  0008               	return
  4490                           
  4491                           ;OverTemperature_B1.c: 39: Temp1.ADH[1] = Temp1.ADRES;
  4492  11C8  0864               	movf	((_Temp1+1)^(0+128)+12),w
  4493  11C9  01E2               	clrf	((_Temp1+1)^(0+128)+10)
  4494  11CA  07E2               	addwf	((_Temp1+1)^(0+128)+10),f
  4495  11CB  0863               	movf	(_Temp1^(0+128)+12),w
  4496  11CC  01E1               	clrf	(_Temp1^(0+128)+10)
  4497  11CD  07E1               	addwf	(_Temp1^(0+128)+10),f
  4498  11CE  0008               	return
  4499  11CF                     __end_of_getTemp_AD:	
  4500                           
  4501                           	psect	text6
  4502  0B10                     __ptext6:	
  4503 ;; *************** function _getLoad_AD *****************
  4504 ;; Defined at:
  4505 ;;		line 15 in file "../src/OverLoad_B1.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  channel         1    wreg     unsigned char 
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;  channel         1    6[BANK0 ] unsigned char 
  4510 ;;  i               1    8[BANK0 ] unsigned char 
  4511 ;;  j               1    7[BANK0 ] unsigned char 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;		None               void
  4514 ;; Registers used:
  4515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;Total ram usage:        5 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    7
  4528 ;; This function calls:
  4529 ;;		_getAD
  4530 ;; This function is called by:
  4531 ;;		_main
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           
  4536                           ;psect for function _getLoad_AD
  4537  0B10                     _getLoad_AD:	
  4538                           
  4539                           ;incstack = 0
  4540                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4541                           ;getLoad_AD@channel stored from wreg
  4542  0B10  0020               	movlb	0	; select bank0
  4543  0B11  00A6               	movwf	getLoad_AD@channel
  4544                           
  4545                           ;OverLoad_B1.c: 16: char i = 0, j = 0;
  4546  0B12  01A8               	clrf	getLoad_AD@i
  4547  0B13  01A7               	clrf	getLoad_AD@j
  4548                           
  4549                           ;OverLoad_B1.c: 18: if (Load1.ADtoGO == 1) {
  4550  0B14  0023               	movlb	3	; select bank3
  4551  0B15  1E20               	btfss	_Load1^(0+384),4
  4552  0B16  0008               	return
  4553                           
  4554                           ;OverLoad_B1.c: 19: Load1.ADRES = getAD(channel, 0xc0);
  4555  0B17  30C0               	movlw	192
  4556  0B18  0020               	movlb	0	; select bank0
  4557  0B19  00A4               	movwf	??_getLoad_AD
  4558  0B1A  0824               	movf	??_getLoad_AD,w
  4559  0B1B  00A0               	movwf	getAD@adcon1
  4560  0B1C  0826               	movf	getLoad_AD@channel,w
  4561  0B1D  319E  267C  318B   	fcall	_getAD
  4562  0B20  0020               	movlb	0	; select bank0
  4563  0B21  0821               	movf	?_getAD+1,w
  4564  0B22  0023               	movlb	3	; select bank3
  4565  0B23  01D3               	clrf	((_Load1+1)^(0+384)+50)
  4566  0B24  07D3               	addwf	((_Load1+1)^(0+384)+50),f
  4567  0B25  0020               	movlb	0	; select bank0
  4568  0B26  0820               	movf	?_getAD,w
  4569  0B27  0023               	movlb	3	; select bank3
  4570  0B28  01D2               	clrf	(_Load1^(0+384)+50)
  4571  0B29  07D2               	addwf	(_Load1^(0+384)+50),f
  4572                           
  4573                           ;OverLoad_B1.c: 20: for (i = 0; i < 5; i++) {
  4574  0B2A  0020               	movlb	0	; select bank0
  4575  0B2B  01A8               	clrf	getLoad_AD@i
  4576  0B2C  3005               	movlw	5
  4577  0B2D  0228               	subwf	getLoad_AD@i,w
  4578  0B2E  1803               	btfsc	3,0
  4579  0B2F  2B5B               	goto	l8024
  4580  0B30                     l8014:	
  4581                           
  4582                           ;OverLoad_B1.c: 21: if (Load1.AH[i] < Load1.ADRES) {
  4583  0B30  3528               	lslf	getLoad_AD@i,w
  4584  0B31  3EA8               	addlw	(_Load1+8)& (0+255)
  4585  0B32  0086               	movwf	6
  4586  0B33  3001               	movlw	1	; select bank3/4
  4587  0B34  0087               	movwf	7
  4588  0B35  3F40               	moviw [0]fsr1
  4589  0B36  00A4               	movwf	??_getLoad_AD
  4590  0B37  3F41               	moviw [1]fsr1
  4591  0B38  00A5               	movwf	??_getLoad_AD+1
  4592  0B39  0023               	movlb	3	; select bank3
  4593  0B3A  0853               	movf	((_Load1+1)^(0+384)+50),w
  4594  0B3B  0020               	movlb	0	; select bank0
  4595  0B3C  0225               	subwf	??_getLoad_AD+1,w
  4596  0B3D  1D03               	skipz
  4597  0B3E  2B43               	goto	u7705
  4598  0B3F  0023               	movlb	3	; select bank3
  4599  0B40  0852               	movf	(_Load1^(0+384)+50),w
  4600  0B41  0020               	movlb	0	; select bank0
  4601  0B42  0224               	subwf	??_getLoad_AD,w
  4602  0B43                     u7705:	
  4603  0B43  1803               	skipnc
  4604  0B44  2B53               	goto	l8020
  4605                           
  4606                           ;OverLoad_B1.c: 22: Load1.AH[i] = Load1.ADRES;
  4607  0B45  3528               	lslf	getLoad_AD@i,w
  4608  0B46  3EA8               	addlw	(_Load1+8)& (0+255)
  4609  0B47  0086               	movwf	6
  4610  0B48  3001               	movlw	1	; select bank3/4
  4611  0B49  0087               	movwf	7
  4612  0B4A  0023               	movlb	3	; select bank3
  4613  0B4B  0852               	movf	(_Load1^(0+384)+50),w
  4614  0B4C  3FC0               	movwi [0]fsr1
  4615  0B4D  0853               	movf	((_Load1+1)^(0+384)+50),w
  4616  0B4E  3FC1               	movwi [1]fsr1
  4617                           
  4618                           ;OverLoad_B1.c: 23: j = 1;
  4619  0B4F  0020               	movlb	0	; select bank0
  4620  0B50  01A7               	clrf	getLoad_AD@j
  4621  0B51  0AA7               	incf	getLoad_AD@j,f
  4622                           
  4623                           ;OverLoad_B1.c: 24: break;
  4624  0B52  2B5B               	goto	l8024
  4625  0B53                     l8020:	
  4626  0B53  3001               	movlw	1
  4627  0B54  00A4               	movwf	??_getLoad_AD
  4628  0B55  0824               	movf	??_getLoad_AD,w
  4629  0B56  07A8               	addwf	getLoad_AD@i,f
  4630  0B57  3005               	movlw	5
  4631  0B58  0228               	subwf	getLoad_AD@i,w
  4632  0B59  1C03               	skipc
  4633  0B5A  2B30               	goto	l8014
  4634  0B5B                     l8024:	
  4635                           
  4636                           ;OverLoad_B1.c: 25: }
  4637                           ;OverLoad_B1.c: 26: }
  4638                           ;OverLoad_B1.c: 27: if (j == 0) {
  4639  0B5B  08A7               	movf	getLoad_AD@j,f
  4640  0B5C  1D03               	skipz
  4641  0B5D  0008               	return
  4642                           
  4643                           ;OverLoad_B1.c: 28: for (i = 0; i < 5; i++) {
  4644  0B5E  01A8               	clrf	getLoad_AD@i
  4645  0B5F                     L1:	
  4646  0B5F  3005               	movlw	5
  4647  0B60  0228               	subwf	getLoad_AD@i,w
  4648  0B61  1803               	btfsc	3,0
  4649  0B62  0008               	return
  4650                           
  4651                           ;OverLoad_B1.c: 29: if (Load1.AL[i] > Load1.ADRES) {
  4652  0B63  3528               	lslf	getLoad_AD@i,w
  4653  0B64  3EBA               	addlw	(_Load1+26)& (0+255)
  4654  0B65  0086               	movwf	6
  4655  0B66  3001               	movlw	1	; select bank3/4
  4656  0B67  0087               	movwf	7
  4657  0B68  3F40               	moviw [0]fsr1
  4658  0B69  00A4               	movwf	??_getLoad_AD
  4659  0B6A  3F41               	moviw [1]fsr1
  4660  0B6B  00A5               	movwf	??_getLoad_AD+1
  4661  0B6C  0825               	movf	??_getLoad_AD+1,w
  4662  0B6D  0023               	movlb	3	; select bank3
  4663  0B6E  0253               	subwf	((_Load1+1)^(0+384)+50),w
  4664  0B6F  1D03               	skipz
  4665  0B70  2B75               	goto	u7745
  4666  0B71  0020               	movlb	0	; select bank0
  4667  0B72  0824               	movf	??_getLoad_AD,w
  4668  0B73  0023               	movlb	3	; select bank3
  4669  0B74  0252               	subwf	(_Load1^(0+384)+50),w
  4670  0B75                     u7745:	
  4671  0B75  1803               	skipnc
  4672  0B76  2B83               	goto	l8036
  4673                           
  4674                           ;OverLoad_B1.c: 30: Load1.AL[i] = Load1.ADRES;
  4675  0B77  0020               	movlb	0	; select bank0
  4676  0B78  3528               	lslf	getLoad_AD@i,w
  4677  0B79  3EBA               	addlw	(_Load1+26)& (0+255)
  4678  0B7A  0086               	movwf	6
  4679  0B7B  3001               	movlw	1	; select bank3/4
  4680  0B7C  0087               	movwf	7
  4681  0B7D  0023               	movlb	3	; select bank3
  4682  0B7E  0852               	movf	(_Load1^(0+384)+50),w
  4683  0B7F  3FC0               	movwi [0]fsr1
  4684  0B80  0853               	movf	((_Load1+1)^(0+384)+50),w
  4685  0B81  3FC1               	movwi [1]fsr1
  4686                           
  4687                           ;OverLoad_B1.c: 31: break;
  4688  0B82  0008               	return
  4689  0B83                     l8036:	
  4690  0B83  3001               	movlw	1
  4691  0B84  0020               	movlb	0	; select bank0
  4692  0B85  00A4               	movwf	??_getLoad_AD
  4693  0B86  0824               	movf	??_getLoad_AD,w
  4694  0B87  07A8               	addwf	getLoad_AD@i,f
  4695  0B88  2B5F               	goto	L1
  4696  0B89                     __end_of_getLoad_AD:	
  4697                           
  4698                           	psect	text7
  4699  1E7C                     __ptext7:	
  4700 ;; *************** function _getAD *****************
  4701 ;; Defined at:
  4702 ;;		line 343 in file "../src/MCU_B1.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;  adcon0          1    wreg     unsigned char 
  4705 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  2    0[BANK0 ] int 
  4710 ;; Registers used:
  4711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4717 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;Total ram usage:        4 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    6
  4724 ;; This function calls:
  4725 ;;		_Timeout_Counter
  4726 ;;		_set_TimeoutCleared
  4727 ;; This function is called by:
  4728 ;;		_getLoad_AD
  4729 ;;		_getTemp_AD
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           
  4734                           ;psect for function _getAD
  4735  1E7C                     _getAD:	
  4736                           
  4737                           ;incstack = 0
  4738                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4739                           ;getAD@adcon0 stored from wreg
  4740  1E7C  0020               	movlb	0	; select bank0
  4741  1E7D  00A3               	movwf	getAD@adcon0
  4742                           
  4743                           ;MCU_B1.c: 344: ADCON0 = adcon0;
  4744  1E7E  0823               	movf	getAD@adcon0,w
  4745  1E7F  0021               	movlb	1	; select bank1
  4746  1E80  009D               	movwf	29	;volatile
  4747                           
  4748                           ;MCU_B1.c: 345: ADCON1 = adcon1;
  4749  1E81  0020               	movlb	0	; select bank0
  4750  1E82  0820               	movf	getAD@adcon1,w
  4751  1E83  0021               	movlb	1	; select bank1
  4752  1E84  009E               	movwf	30	;volatile
  4753                           
  4754                           ;MCU_B1.c: 346: GO_nDONE = 1;
  4755  1E85  149D               	bsf	29,1	;volatile
  4756                           
  4757                           ;MCU_B1.c: 347: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4758  1E86  2E8A               	goto	l7488
  4759  1E87                     l7486:	
  4760                           
  4761                           ;MCU_B1.c: 348: Timeout_Counter();
  4762  1E87  319C  24C2  319E   	fcall	_Timeout_Counter
  4763  1E8A                     l7488:	
  4764  1E8A  0021               	movlb	1	; select bank1
  4765  1E8B  1C9D               	btfss	29,1	;volatile
  4766  1E8C  2E8F               	goto	l7492
  4767  1E8D  1D2F               	btfss	(_myMain^(0+128)+15),2
  4768  1E8E  2E87               	goto	l7486
  4769  1E8F                     l7492:	
  4770                           
  4771                           ;MCU_B1.c: 349: };
  4772                           ;MCU_B1.c: 350: set_TimeoutCleared();
  4773  1E8F  319A  223E         	fcall	_set_TimeoutCleared
  4774                           
  4775                           ;MCU_B1.c: 351: return ((ADRESH*256)+ADRESL);
  4776  1E91  0021               	movlb	1	; select bank1
  4777  1E92  081C               	movf	28,w	;volatile
  4778  1E93  0020               	movlb	0	; select bank0
  4779  1E94  01A1               	clrf	?_getAD+1
  4780  1E95  07A1               	addwf	?_getAD+1,f
  4781  1E96  0021               	movlb	1	; select bank1
  4782  1E97  081B               	movf	27,w	;volatile
  4783  1E98  0020               	movlb	0	; select bank0
  4784  1E99  01A0               	clrf	?_getAD
  4785  1E9A  07A0               	addwf	?_getAD,f
  4786  1E9B  0008               	return
  4787  1E9C                     __end_of_getAD:	
  4788                           
  4789                           	psect	text8
  4790  1C61                     __ptext8:	
  4791 ;; *************** function _WDT_Main *****************
  4792 ;; Defined at:
  4793 ;;		line 902 in file "../src/MCU_B1.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;		None               void
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0, pclath, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;Total ram usage:        1 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    6
  4814 ;; This function calls:
  4815 ;;		_WDT_Clearing
  4816 ;; This function is called by:
  4817 ;;		_main
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           
  4822                           ;psect for function _WDT_Main
  4823  1C61                     _WDT_Main:	
  4824                           
  4825                           ;MCU_B1.c: 903: if (WDT.Enable == 1) {
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4829  1C61  0021               	movlb	1	; select bank1
  4830  1C62  1C49               	btfss	_WDT^(0+128),0
  4831  1C63  0008               	return
  4832                           
  4833                           ;MCU_B1.c: 904: if (WDT.Count-- > 0) {
  4834  1C64  3001               	movlw	1
  4835  1C65  02CA               	subwf	(_WDT^(0+128)+1),f
  4836  1C66  084A               	movf	(_WDT^(0+128)+1),w
  4837  1C67  3AFF               	xorlw	255
  4838  1C68  1903               	skipnz
  4839  1C69  0008               	return
  4840                           
  4841                           ;MCU_B1.c: 905: WDT.Count = 10;
  4842  1C6A  300A               	movlw	10
  4843  1C6B  0020               	movlb	0	; select bank0
  4844  1C6C  00A0               	movwf	??_WDT_Main
  4845  1C6D  0820               	movf	??_WDT_Main,w
  4846  1C6E  0021               	movlb	1	; select bank1
  4847  1C6F  00CA               	movwf	(_WDT^(0+128)+1)
  4848                           
  4849                           ;MCU_B1.c: 906: WDT_Clearing();
  4850  1C70  3180  2002         	fcall	_WDT_Clearing
  4851  1C72  0008               	return
  4852  1C73                     __end_of_WDT_Main:	
  4853                           
  4854                           	psect	text9
  4855  0002                     __ptext9:	
  4856 ;; *************** function _WDT_Clearing *****************
  4857 ;; Defined at:
  4858 ;;		line 912 in file "../src/MCU_B1.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;		None
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;		None
  4863 ;; Return value:  Size  Location     Type
  4864 ;;		None               void
  4865 ;; Registers used:
  4866 ;;		None
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4876 ;;Total ram usage:        0 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:    5
  4879 ;; This function calls:
  4880 ;;		Nothing
  4881 ;; This function is called by:
  4882 ;;		_WDT_Main
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           
  4887                           ;psect for function _WDT_Clearing
  4888  0002                     _WDT_Clearing:	
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _WDT_Clearing: []
  4892  0002  0064               	clrwdt	;# 
  4893  0003  0008               	return
  4894  0004                     __end_of_WDT_Clearing:	
  4895                           
  4896                           	psect	text10
  4897  1A2B                     __ptext10:	
  4898 ;; *************** function _Temp_Main *****************
  4899 ;; Defined at:
  4900 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;		None
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;		None
  4905 ;; Return value:  Size  Location     Type
  4906 ;;		None               void
  4907 ;; Registers used:
  4908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;Total ram usage:        0 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:   11
  4921 ;; This function calls:
  4922 ;;		_setTemp_Main
  4923 ;; This function is called by:
  4924 ;;		_main
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           
  4929                           ;psect for function _Temp_Main
  4930  1A2B                     _Temp_Main:	
  4931                           
  4932                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4933                           
  4934                           ;incstack = 0
  4935                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4936  1A2B  318C  2481         	fcall	_setTemp_Main
  4937  1A2D  0008               	return
  4938  1A2E                     __end_of_Temp_Main:	
  4939                           
  4940                           	psect	text11
  4941  0C81                     __ptext11:	
  4942 ;; *************** function _setTemp_Main *****************
  4943 ;; Defined at:
  4944 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4945 ;; Parameters:    Size  Location     Type
  4946 ;;		None
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;		None
  4949 ;; Return value:  Size  Location     Type
  4950 ;;		None               void
  4951 ;; Registers used:
  4952 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4960 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4962 ;;Total ram usage:        1 bytes
  4963 ;; Hardware stack levels used:    1
  4964 ;; Hardware stack levels required when called:   10
  4965 ;; This function calls:
  4966 ;;		_getLoad_Safe
  4967 ;;		_setOverTemp_Exceptions
  4968 ;; This function is called by:
  4969 ;;		_Temp_Main
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           
  4974                           ;psect for function _setTemp_Main
  4975  0C81                     _setTemp_Main:	
  4976                           
  4977                           ;OverTemperature_B1.c: 58: if (Temp1.Enable == 1) {
  4978                           
  4979                           ;incstack = 0
  4980                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4981  0C81  0021               	movlb	1	; select bank1
  4982  0C82  1C57               	btfss	_Temp1^(0+128),0
  4983  0C83  0008               	return
  4984                           
  4985                           ;OverTemperature_B1.c: 59: if (Temp1.ADtoGO == 0) {
  4986  0C84  1957               	btfsc	_Temp1^(0+128),2
  4987  0C85  2CA3               	goto	l9396
  4988                           
  4989                           ;OverTemperature_B1.c: 60: Temp1.Time++;
  4990  0C86  3001               	movlw	1
  4991  0C87  07D8               	addwf	(_Temp1^(0+128)+1),f
  4992  0C88  3000               	movlw	0
  4993  0C89  3DD9               	addwfc	((_Temp1+1)^(0+128)+1),f
  4994                           
  4995                           ;OverTemperature_B1.c: 61: if (Temp1.Time >= 500)
  4996  0C8A  3001               	movlw	1
  4997  0C8B  0259               	subwf	((_Temp1+1)^(0+128)+1),w
  4998  0C8C  30F4               	movlw	244
  4999  0C8D  1903               	skipnz
  5000  0C8E  0258               	subwf	(_Temp1^(0+128)+1),w
  5001  0C8F  1C03               	skipc
  5002  0C90  0008               	return
  5003                           
  5004                           ;OverTemperature_B1.c: 62: {
  5005                           ;OverTemperature_B1.c: 63: if (getLoad_Safe() == 1 && 1 == 1) {
  5006  0C91  319A  22B1  318C   	fcall	_getLoad_Safe
  5007  0C94  3A01               	xorlw	1
  5008  0C95  1D03               	skipz
  5009  0C96  2C9D               	goto	l9394
  5010                           
  5011                           ;OverTemperature_B1.c: 64: Temp1.Time = 0;
  5012  0C97  0021               	movlb	1	; select bank1
  5013  0C98  01D8               	clrf	(_Temp1^(0+128)+1)
  5014  0C99  01D9               	clrf	((_Temp1+1)^(0+128)+1)
  5015                           
  5016                           ;OverTemperature_B1.c: 65: Temp1.ADtoGO = 1;
  5017  0C9A  1557               	bsf	_Temp1^(0+128),2
  5018                           
  5019                           ;OverTemperature_B1.c: 66: Temp1.Safe = 0;
  5020  0C9B  1257               	bcf	_Temp1^(0+128),4
  5021                           
  5022                           ;OverTemperature_B1.c: 68: } else {
  5023  0C9C  0008               	return
  5024  0C9D                     l9394:	
  5025                           
  5026                           ;OverTemperature_B1.c: 69: Temp1.Time = 1000;
  5027  0C9D  30E8               	movlw	232
  5028  0C9E  0021               	movlb	1	; select bank1
  5029  0C9F  00D8               	movwf	(_Temp1^(0+128)+1)
  5030  0CA0  3003               	movlw	3
  5031  0CA1  00D9               	movwf	(_Temp1^(0+128)+2)
  5032                           
  5033                           ;OverTemperature_B1.c: 70: }
  5034                           ;OverTemperature_B1.c: 71: }
  5035                           ;OverTemperature_B1.c: 72: } else {
  5036  0CA2  0008               	return
  5037  0CA3                     l9396:	
  5038                           
  5039                           ;OverTemperature_B1.c: 73: Temp1.Time++;
  5040  0CA3  3001               	movlw	1
  5041  0CA4  07D8               	addwf	(_Temp1^(0+128)+1),f
  5042  0CA5  3000               	movlw	0
  5043  0CA6  3DD9               	addwfc	((_Temp1+1)^(0+128)+1),f
  5044                           
  5045                           ;OverTemperature_B1.c: 74: if (Temp1.Time >= 4) {
  5046  0CA7  3000               	movlw	0
  5047  0CA8  0259               	subwf	((_Temp1+1)^(0+128)+1),w
  5048  0CA9  3004               	movlw	4
  5049  0CAA  1903               	skipnz
  5050  0CAB  0258               	subwf	(_Temp1^(0+128)+1),w
  5051  0CAC  1C03               	skipc
  5052  0CAD  0008               	return
  5053                           
  5054                           ;OverTemperature_B1.c: 75: Temp1.Time = 0;
  5055  0CAE  01D8               	clrf	(_Temp1^(0+128)+1)
  5056  0CAF  01D9               	clrf	((_Temp1+1)^(0+128)+1)
  5057                           
  5058                           ;OverTemperature_B1.c: 76: Temp1.ADtoGO = 0;
  5059  0CB0  1157               	bcf	_Temp1^(0+128),2
  5060                           
  5061                           ;OverTemperature_B1.c: 77: Temp1.AD = Temp1.ADH[1];
  5062  0CB1  0862               	movf	((_Temp1+1)^(0+128)+10),w
  5063  0CB2  01DE               	clrf	((_Temp1+1)^(0+128)+6)
  5064  0CB3  07DE               	addwf	((_Temp1+1)^(0+128)+6),f
  5065  0CB4  0861               	movf	(_Temp1^(0+128)+10),w
  5066  0CB5  01DD               	clrf	(_Temp1^(0+128)+6)
  5067  0CB6  07DD               	addwf	(_Temp1^(0+128)+6),f
  5068                           
  5069                           ;OverTemperature_B1.c: 78: if (Temp1.ERROR == 1) {
  5070  0CB7  1CD7               	btfss	_Temp1^(0+128),1
  5071  0CB8  2CD0               	goto	l9418
  5072                           
  5073                           ;OverTemperature_B1.c: 79: if (Temp1.AD >= 600) {
  5074  0CB9  3002               	movlw	2
  5075  0CBA  025E               	subwf	((_Temp1+1)^(0+128)+6),w
  5076  0CBB  3058               	movlw	88
  5077  0CBC  1903               	skipnz
  5078  0CBD  025D               	subwf	(_Temp1^(0+128)+6),w
  5079  0CBE  1C03               	skipc
  5080  0CBF  2CE7               	goto	l9428
  5081                           
  5082                           ;OverTemperature_B1.c: 80: Temp1.Count++;
  5083  0CC0  3001               	movlw	1
  5084  0CC1  0020               	movlb	0	; select bank0
  5085  0CC2  00B1               	movwf	??_setTemp_Main
  5086  0CC3  0831               	movf	??_setTemp_Main,w
  5087  0CC4  0021               	movlb	1	; select bank1
  5088  0CC5  07DA               	addwf	(_Temp1^(0+128)+3),f
  5089                           
  5090                           ;OverTemperature_B1.c: 81: if (Temp1.Count >= 3) {
  5091  0CC6  3003               	movlw	3
  5092  0CC7  025A               	subwf	(_Temp1^(0+128)+3),w
  5093  0CC8  1C03               	skipc
  5094  0CC9  2CE9               	goto	l9430
  5095                           
  5096                           ;OverTemperature_B1.c: 82: Temp1.Count = 0;
  5097  0CCA  01DA               	clrf	(_Temp1^(0+128)+3)
  5098                           
  5099                           ;OverTemperature_B1.c: 83: setOverTemp_Exceptions(0);
  5100  0CCB  3000               	movlw	0
  5101  0CCC  3192  2279  318C   	fcall	_setOverTemp_Exceptions
  5102                           
  5103                           ;OverTemperature_B1.c: 84: }
  5104                           ;OverTemperature_B1.c: 85: } else {
  5105  0CCF  2CE9               	goto	l9430
  5106  0CD0                     l9418:	
  5107                           ;OverTemperature_B1.c: 87: }
  5108                           ;OverTemperature_B1.c: 88: } else {
  5109                           
  5110                           ;OverTemperature_B1.c: 86: Temp1.Count = 0;
  5111                           
  5112                           
  5113                           ;OverTemperature_B1.c: 89: if (Temp1.AD <= 550) {
  5114  0CD0  3002               	movlw	2
  5115  0CD1  025E               	subwf	((_Temp1+1)^(0+128)+6),w
  5116  0CD2  3027               	movlw	39
  5117  0CD3  1903               	skipnz
  5118  0CD4  025D               	subwf	(_Temp1^(0+128)+6),w
  5119  0CD5  1803               	skipnc
  5120  0CD6  2CE7               	goto	l9428
  5121                           
  5122                           ;OverTemperature_B1.c: 90: Temp1.Count++;
  5123  0CD7  3001               	movlw	1
  5124  0CD8  0020               	movlb	0	; select bank0
  5125  0CD9  00B1               	movwf	??_setTemp_Main
  5126  0CDA  0831               	movf	??_setTemp_Main,w
  5127  0CDB  0021               	movlb	1	; select bank1
  5128  0CDC  07DA               	addwf	(_Temp1^(0+128)+3),f
  5129                           
  5130                           ;OverTemperature_B1.c: 91: if (Temp1.Count >= 3) {
  5131  0CDD  3003               	movlw	3
  5132  0CDE  025A               	subwf	(_Temp1^(0+128)+3),w
  5133  0CDF  1C03               	skipc
  5134  0CE0  2CE9               	goto	l9430
  5135                           
  5136                           ;OverTemperature_B1.c: 92: Temp1.Count = 0;
  5137  0CE1  01DA               	clrf	(_Temp1^(0+128)+3)
  5138                           
  5139                           ;OverTemperature_B1.c: 93: setOverTemp_Exceptions(1);
  5140  0CE2  3001               	movlw	1
  5141  0CE3  3192  2279  318C   	fcall	_setOverTemp_Exceptions
  5142                           
  5143                           ;OverTemperature_B1.c: 94: }
  5144                           ;OverTemperature_B1.c: 95: } else {
  5145  0CE6  2CE9               	goto	l9430
  5146  0CE7                     l9428:	
  5147                           
  5148                           ;OverTemperature_B1.c: 96: Temp1.Count = 0;
  5149  0CE7  0021               	movlb	1	; select bank1
  5150  0CE8  01DA               	clrf	(_Temp1^(0+128)+3)
  5151  0CE9                     l9430:	
  5152                           
  5153                           ;OverTemperature_B1.c: 97: }
  5154                           ;OverTemperature_B1.c: 98: }
  5155                           ;OverTemperature_B1.c: 99: if (Temp1.ERROR == 0) {
  5156  0CE9  0021               	movlb	1	; select bank1
  5157  0CEA  1CD7               	btfss	_Temp1^(0+128),1
  5158                           
  5159                           ;OverTemperature_B1.c: 100: Temp1.Safe = 1;
  5160  0CEB  1657               	bsf	_Temp1^(0+128),4
  5161                           
  5162                           ;OverTemperature_B1.c: 101: }
  5163                           ;OverTemperature_B1.c: 102: product->Data[24]=Temp1.AD >> 8;
  5164  0CEC  085E               	movf	((_Temp1+1)^(0+128)+6),w
  5165  0CED  0020               	movlb	0	; select bank0
  5166  0CEE  00B1               	movwf	??_setTemp_Main
  5167  0CEF  086E               	movf	_product,w
  5168  0CF0  3E18               	addlw	24
  5169  0CF1  0086               	movwf	6
  5170  0CF2  3002               	movlw	2	; select bank4/5
  5171  0CF3  0087               	movwf	7
  5172  0CF4  0831               	movf	??_setTemp_Main,w
  5173  0CF5  0081               	movwf	1
  5174                           
  5175                           ;OverTemperature_B1.c: 103: product->Data[25]=Temp1.AD;
  5176  0CF6  0021               	movlb	1	; select bank1
  5177  0CF7  085D               	movf	(_Temp1^(0+128)+6),w
  5178  0CF8  0020               	movlb	0	; select bank0
  5179  0CF9  00B1               	movwf	??_setTemp_Main
  5180  0CFA  086E               	movf	_product,w
  5181  0CFB  3E19               	addlw	25
  5182  0CFC  0086               	movwf	6
  5183  0CFD  3002               	movlw	2	; select bank4/5
  5184  0CFE  0087               	movwf	7
  5185  0CFF  0831               	movf	??_setTemp_Main,w
  5186  0D00  0081               	movwf	1
  5187                           
  5188                           ;OverTemperature_B1.c: 106: Temp1.ADH[0] = 0;
  5189  0D01  0021               	movlb	1	; select bank1
  5190  0D02  01DF               	clrf	(_Temp1^(0+128)+8)
  5191  0D03  01E0               	clrf	((_Temp1+1)^(0+128)+8)
  5192                           
  5193                           ;OverTemperature_B1.c: 107: Temp1.ADH[1] = 0;
  5194  0D04  01E1               	clrf	(_Temp1^(0+128)+10)
  5195  0D05  01E2               	clrf	((_Temp1+1)^(0+128)+10)
  5196  0D06  0008               	return
  5197  0D07                     __end_of_setTemp_Main:	
  5198                           
  5199                           	psect	text12
  5200  1279                     __ptext12:	
  5201 ;; *************** function _setOverTemp_Exceptions *****************
  5202 ;; Defined at:
  5203 ;;		line 114 in file "../src/OverTemperature_B1.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;  command         1    wreg     unsigned char 
  5206 ;; Auto vars:     Size  Location     Type
  5207 ;;  command         1   16[BANK0 ] unsigned char 
  5208 ;;  i               1   15[BANK0 ] unsigned char 
  5209 ;; Return value:  Size  Location     Type
  5210 ;;		None               void
  5211 ;; Registers used:
  5212 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5219 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5221 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5222 ;;Total ram usage:        3 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; Hardware stack levels required when called:    9
  5225 ;; This function calls:
  5226 ;;		_DimmerLights_Exceptions
  5227 ;;		_setBuz
  5228 ;;		_setLED
  5229 ;;		_setRF_Enable
  5230 ;;		_setSw_Enable
  5231 ;; This function is called by:
  5232 ;;		_setTemp_Main
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           
  5237                           ;psect for function _setOverTemp_Exceptions
  5238  1279                     _setOverTemp_Exceptions:	
  5239                           
  5240                           ;incstack = 0
  5241                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5242                           ;setOverTemp_Exceptions@command stored from wreg
  5243  1279  0020               	movlb	0	; select bank0
  5244  127A  00B0               	movwf	setOverTemp_Exceptions@command
  5245                           
  5246                           ;OverTemperature_B1.c: 115: char i = command == 1 ? 0 : 1;
  5247  127B  0830               	movf	setOverTemp_Exceptions@command,w
  5248  127C  3A01               	xorlw	1
  5249  127D  3000               	movlw	0
  5250  127E  1D03               	skipz
  5251  127F  3001               	movlw	1
  5252  1280  00AE               	movwf	??_setOverTemp_Exceptions
  5253  1281  082E               	movf	??_setOverTemp_Exceptions,w
  5254  1282  00AF               	movwf	setOverTemp_Exceptions@i
  5255                           
  5256                           ;OverTemperature_B1.c: 116: Temp1.ERROR = command;
  5257  1283  0830               	movf	setOverTemp_Exceptions@command,w
  5258  1284  0021               	movlb	1	; select bank1
  5259  1285  10D7               	bcf	_Temp1^(0+128),1
  5260  1286  1D03               	skipz
  5261  1287  14D7               	bsf	_Temp1^(0+128),1
  5262                           
  5263                           ;OverTemperature_B1.c: 117: Temp1.Safe = i;
  5264  1288  0020               	movlb	0	; select bank0
  5265  1289  082F               	movf	setOverTemp_Exceptions@i,w
  5266  128A  0021               	movlb	1	; select bank1
  5267  128B  1257               	bcf	_Temp1^(0+128),4
  5268  128C  1D03               	skipz
  5269  128D  1657               	bsf	_Temp1^(0+128),4
  5270                           
  5271                           ;OverTemperature_B1.c: 118: if (command == 1) {
  5272  128E  0020               	movlb	0	; select bank0
  5273  128F  0830               	movf	setOverTemp_Exceptions@command,w
  5274  1290  3A01               	xorlw	1
  5275  1291  1D03               	skipz
  5276  1292  2A98               	goto	l9136
  5277                           
  5278                           ;OverTemperature_B1.c: 119: DimmerLights_Exceptions(1);
  5279  1293  3001               	movlw	1
  5280  1294  3194  24EC  3192   	fcall	_DimmerLights_Exceptions
  5281                           
  5282                           ;OverTemperature_B1.c: 123: } else if (command == 0) {
  5283  1297  2AA4               	goto	l9140
  5284  1298                     l9136:	
  5285  1298  0020               	movlb	0	; select bank0
  5286  1299  08B0               	movf	setOverTemp_Exceptions@command,f
  5287  129A  1D03               	skipz
  5288  129B  2AA4               	goto	l9140
  5289                           
  5290                           ;OverTemperature_B1.c: 124: setBuz(2, 100);
  5291  129C  3064               	movlw	100
  5292  129D  00A9               	movwf	setBuz@time
  5293  129E  3000               	movlw	0
  5294  129F  00AA               	movwf	setBuz@time+1
  5295  12A0  3002               	movlw	2
  5296  12A1  3196  2689  3192   	fcall	_setBuz
  5297  12A4                     l9140:	
  5298                           
  5299                           ;OverTemperature_B1.c: 125: }
  5300                           ;OverTemperature_B1.c: 128: setLED(99, command + 10);
  5301  12A4  0020               	movlb	0	; select bank0
  5302  12A5  0830               	movf	setOverTemp_Exceptions@command,w
  5303  12A6  3E0A               	addlw	10
  5304  12A7  00AE               	movwf	??_setOverTemp_Exceptions
  5305  12A8  082E               	movf	??_setOverTemp_Exceptions,w
  5306  12A9  00A1               	movwf	setLED@command
  5307  12AA  3063               	movlw	99
  5308  12AB  3197  279E  3192   	fcall	_setLED
  5309                           
  5310                           ;OverTemperature_B1.c: 130: setSw_Enable(i);
  5311  12AE  0020               	movlb	0	; select bank0
  5312  12AF  082F               	movf	setOverTemp_Exceptions@i,w
  5313  12B0  319D  25E2  3192   	fcall	_setSw_Enable
  5314                           
  5315                           ;OverTemperature_B1.c: 132: setRF_Enable(i);
  5316  12B3  0020               	movlb	0	; select bank0
  5317  12B4  082F               	movf	setOverTemp_Exceptions@i,w
  5318  12B5  319B  234D         	fcall	_setRF_Enable
  5319  12B7  0008               	return
  5320  12B8                     __end_of_setOverTemp_Exceptions:	
  5321                           
  5322                           	psect	text13
  5323  1AB1                     __ptext13:	
  5324 ;; *************** function _getLoad_Safe *****************
  5325 ;; Defined at:
  5326 ;;		line 296 in file "../src/OverLoad_B1.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;		None
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;  result          1    0[BANK0 ] unsigned char 
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      unsigned char 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5344 ;;Total ram usage:        1 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    5
  5347 ;; This function calls:
  5348 ;;		Nothing
  5349 ;; This function is called by:
  5350 ;;		_setTemp_Main
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           
  5355                           ;psect for function _getLoad_Safe
  5356  1AB1                     _getLoad_Safe:	
  5357                           
  5358                           ;OverLoad_B1.c: 297: char result = Load1.Safe;
  5359                           
  5360                           ;incstack = 0
  5361                           ; Regs used in _getLoad_Safe: [wreg+status,2]
  5362  1AB1  3000               	movlw	0
  5363  1AB2  0023               	movlb	3	; select bank3
  5364  1AB3  19A0               	btfsc	_Load1^(0+384),3
  5365  1AB4  3001               	movlw	1
  5366  1AB5  0020               	movlb	0	; select bank0
  5367  1AB6  00A0               	movwf	getLoad_Safe@result
  5368                           
  5369                           ;OverLoad_B1.c: 298: return result;
  5370  1AB7  0820               	movf	getLoad_Safe@result,w
  5371  1AB8  0008               	return
  5372  1AB9                     __end_of_getLoad_Safe:	
  5373                           
  5374                           	psect	text14
  5375  1A28                     __ptext14:	
  5376 ;; *************** function _Temp_Initialization *****************
  5377 ;; Defined at:
  5378 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;		None
  5383 ;; Return value:  Size  Location     Type
  5384 ;;		None               void
  5385 ;; Registers used:
  5386 ;;		status,2, status,0, pclath, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;Total ram usage:        0 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    6
  5399 ;; This function calls:
  5400 ;;		_setTemp_Initialization
  5401 ;; This function is called by:
  5402 ;;		_main
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _Temp_Initialization
  5408  1A28                     _Temp_Initialization:	
  5409                           
  5410                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5414  1A28  319A  2225         	fcall	_setTemp_Initialization
  5415  1A2A  0008               	return
  5416  1A2B                     __end_of_Temp_Initialization:	
  5417                           
  5418                           	psect	text15
  5419  1A25                     __ptext15:	
  5420 ;; *************** function _setTemp_Initialization *****************
  5421 ;; Defined at:
  5422 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;		None
  5427 ;; Return value:  Size  Location     Type
  5428 ;;		None               void
  5429 ;; Registers used:
  5430 ;;		None
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;Total ram usage:        0 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:    5
  5443 ;; This function calls:
  5444 ;;		Nothing
  5445 ;; This function is called by:
  5446 ;;		_Temp_Initialization
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           
  5451                           ;psect for function _setTemp_Initialization
  5452  1A25                     _setTemp_Initialization:	
  5453                           
  5454                           ;OverTemperature_B1.c: 46: Temp1.Safe = 1;
  5455                           
  5456                           ;incstack = 0
  5457                           ; Regs used in _setTemp_Initialization: []
  5458  1A25  0021               	movlb	1	; select bank1
  5459  1A26  1657               	bsf	_Temp1^(0+128),4
  5460  1A27  0008               	return
  5461  1A28                     __end_of_setTemp_Initialization:	
  5462                           
  5463                           	psect	text16
  5464  1AA9                     __ptext16:	
  5465 ;; *************** function _Switch_Main *****************
  5466 ;; Defined at:
  5467 ;;		line 67 in file "../src/Switch_B1.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;		None
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;		None
  5472 ;; Return value:  Size  Location     Type
  5473 ;;		None               void
  5474 ;; Registers used:
  5475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5485 ;;Total ram usage:        0 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:   11
  5488 ;; This function calls:
  5489 ;;		_setSw_Main
  5490 ;; This function is called by:
  5491 ;;		_main
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           
  5496                           ;psect for function _Switch_Main
  5497  1AA9                     _Switch_Main:	
  5498                           
  5499                           ;Switch_B1.c: 69: setSw_Main(1);
  5500                           
  5501                           ;incstack = 0
  5502                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5503  1AA9  3001               	movlw	1
  5504  1AAA  3183  2382  319A   	fcall	_setSw_Main
  5505                           
  5506                           ;Switch_B1.c: 73: setSw_Main(2);
  5507  1AAD  3002               	movlw	2
  5508  1AAE  3183  2382         	fcall	_setSw_Main
  5509  1AB0  0008               	return
  5510  1AB1                     __end_of_Switch_Main:	
  5511                           
  5512                           	psect	text17
  5513  0382                     __ptext17:	
  5514 ;; *************** function _setSw_Main *****************
  5515 ;; Defined at:
  5516 ;;		line 117 in file "../src/Switch_B1.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;  sw              1    wreg     unsigned char 
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;  sw              1   73[BANK0 ] unsigned char 
  5521 ;; Return value:  Size  Location     Type
  5522 ;;		None               void
  5523 ;; Registers used:
  5524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5531 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5532 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5533 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5534 ;;Total ram usage:        5 bytes
  5535 ;; Hardware stack levels used:    1
  5536 ;; Hardware stack levels required when called:   10
  5537 ;; This function calls:
  5538 ;;		_SwPointSelect
  5539 ;;		_Sw_DimmerAdjFunc
  5540 ;;		_Sw_DimmerOffFunc
  5541 ;;		_Sw_DimmerOnFunc
  5542 ;;		_setBuz
  5543 ;;		_setRF_Learn
  5544 ;; This function is called by:
  5545 ;;		_Switch_Main
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           
  5550                           ;psect for function _setSw_Main
  5551  0382                     _setSw_Main:	
  5552                           
  5553                           ;incstack = 0
  5554                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5555                           ;setSw_Main@sw stored from wreg
  5556  0382  0020               	movlb	0	; select bank0
  5557  0383  00E9               	movwf	setSw_Main@sw
  5558                           
  5559                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5560  0384  0869               	movf	setSw_Main@sw,w
  5561  0385  319D  2519  3183   	fcall	_SwPointSelect
  5562                           
  5563                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5564  0388  0021               	movlb	1	; select bank1
  5565  0389  0847               	movf	_Sw^(0+128),w
  5566  038A  0086               	movwf	6
  5567  038B  0848               	movf	(_Sw+1)^(0+128),w
  5568  038C  0087               	movwf	7
  5569  038D  1C01               	btfss	1,0
  5570  038E  0008               	return
  5571                           
  5572                           ;Switch_B1.c: 131: if (sw == 1) {
  5573  038F  0020               	movlb	0	; select bank0
  5574  0390  0869               	movf	setSw_Main@sw,w
  5575  0391  3A01               	xorlw	1
  5576  0392  1D03               	skipz
  5577  0393  2BA2               	goto	l9518
  5578                           
  5579                           ;Switch_B1.c: 132: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  5580  0394  01E7               	clrf	_setSw_Main$6015
  5581  0395  0AE7               	incf	_setSw_Main$6015,f
  5582  0396  1F0C               	btfss	12,6	;volatile
  5583  0397  1A0C               	btfsc	12,4	;volatile
  5584  0398  2B9A               	goto	l9516
  5585  0399  01E7               	clrf	_setSw_Main$6015
  5586  039A                     l9516:	
  5587  039A  0021               	movlb	1	; select bank1
  5588  039B  0847               	movf	_Sw^(0+128),w
  5589  039C  0086               	movwf	6
  5590  039D  0848               	movf	(_Sw+1)^(0+128),w
  5591  039E  0087               	movwf	7
  5592  039F  0020               	movlb	0	; select bank0
  5593  03A0  0867               	movf	_setSw_Main$6015,w
  5594  03A1  2BB3               	goto	L2
  5595  03A2                     l9518:	
  5596                           ;Switch_B1.c: 133: } else if (sw == 2) {
  5597                           
  5598  03A2  0869               	movf	setSw_Main@sw,w
  5599  03A3  3A02               	xorlw	2
  5600  03A4  1D03               	skipz
  5601  03A5  2BB6               	goto	l9528
  5602                           
  5603                           ;Switch_B1.c: 134: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  5604  03A6  01E8               	clrf	_setSw_Main$6016
  5605  03A7  0AE8               	incf	_setSw_Main$6016,f
  5606  03A8  1C0C               	btfss	12,0	;volatile
  5607  03A9  188D               	btfsc	13,1	;volatile
  5608  03AA  2BAC               	goto	l9526
  5609  03AB  01E8               	clrf	_setSw_Main$6016
  5610  03AC                     l9526:	
  5611  03AC  0021               	movlb	1	; select bank1
  5612  03AD  0847               	movf	_Sw^(0+128),w
  5613  03AE  0086               	movwf	6
  5614  03AF  0848               	movf	(_Sw+1)^(0+128),w
  5615  03B0  0087               	movwf	7
  5616  03B1  0020               	movlb	0	; select bank0
  5617  03B2  0868               	movf	_setSw_Main$6016,w
  5618  03B3                     L2:	
  5619  03B3  1081               	bcf	1,1
  5620  03B4  1D03               	skipz
  5621  03B5  1481               	bsf	1,1
  5622  03B6                     l9528:	
  5623                           
  5624                           ;Switch_B1.c: 135: }
  5625                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5626  03B6  0021               	movlb	1	; select bank1
  5627  03B7  0847               	movf	_Sw^(0+128),w
  5628  03B8  0086               	movwf	6
  5629  03B9  0848               	movf	(_Sw+1)^(0+128),w
  5630  03BA  0087               	movwf	7
  5631  03BB  1C81               	btfss	1,1
  5632  03BC  2C8D               	goto	l9576
  5633                           
  5634                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5635  03BD  0847               	movf	_Sw^(0+128),w
  5636  03BE  0086               	movwf	6
  5637  03BF  0848               	movf	(_Sw+1)^(0+128),w
  5638  03C0  0087               	movwf	7
  5639  03C1  1901               	btfsc	1,2
  5640  03C2  2BE9               	goto	l9542
  5641                           
  5642                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5643  03C3  3001               	movlw	1
  5644  03C4  0020               	movlb	0	; select bank0
  5645  03C5  00E5               	movwf	??_setSw_Main
  5646  03C6  0021               	movlb	1	; select bank1
  5647  03C7  0847               	movf	_Sw^(0+128),w
  5648  03C8  0086               	movwf	6
  5649  03C9  0848               	movf	(_Sw+1)^(0+128),w
  5650  03CA  0087               	movwf	7
  5651  03CB  3142               	addfsr 1,2
  5652  03CC  0020               	movlb	0	; select bank0
  5653  03CD  0865               	movf	??_setSw_Main,w
  5654  03CE  0781               	addwf	1,f
  5655                           
  5656                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5657  03CF  0021               	movlb	1	; select bank1
  5658  03D0  0847               	movf	_Sw^(0+128),w
  5659  03D1  0086               	movwf	6
  5660  03D2  0848               	movf	(_Sw+1)^(0+128),w
  5661  03D3  0087               	movwf	7
  5662  03D4  3142               	addfsr 1,2
  5663  03D5  3005               	movlw	5
  5664  03D6  0201               	subwf	1,w
  5665  03D7  1C03               	skipc
  5666  03D8  0008               	return
  5667                           
  5668                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5669  03D9  0847               	movf	_Sw^(0+128),w
  5670  03DA  0086               	movwf	6
  5671  03DB  0848               	movf	(_Sw+1)^(0+128),w
  5672  03DC  0087               	movwf	7
  5673  03DD  3142               	addfsr 1,2
  5674  03DE  0181               	clrf	1
  5675                           
  5676                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5677  03DF  0847               	movf	_Sw^(0+128),w
  5678  03E0  0086               	movwf	6
  5679  03E1  0848               	movf	(_Sw+1)^(0+128),w
  5680  03E2  0087               	movwf	7
  5681  03E3  1501               	bsf	1,2
  5682                           
  5683                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5684  03E4  0020               	movlb	0	; select bank0
  5685  03E5  0869               	movf	setSw_Main@sw,w
  5686  03E6  318A  2299         	fcall	_Sw_DimmerOnFunc
  5687                           
  5688                           ;Switch_B1.c: 173: }
  5689                           ;Switch_B1.c: 174: } else {
  5690  03E8  0008               	return
  5691  03E9                     l9542:	
  5692                           
  5693                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5694  03E9  0021               	movlb	1	; select bank1
  5695  03EA  0847               	movf	_Sw^(0+128),w
  5696  03EB  0086               	movwf	6
  5697  03EC  0848               	movf	(_Sw+1)^(0+128),w
  5698  03ED  0087               	movwf	7
  5699  03EE  1981               	btfsc	1,3
  5700  03EF  2C19               	goto	l9552
  5701                           
  5702                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5703  03F0  0847               	movf	_Sw^(0+128),w
  5704  03F1  0086               	movwf	6
  5705  03F2  0848               	movf	(_Sw+1)^(0+128),w
  5706  03F3  0087               	movwf	7
  5707  03F4  3143               	addfsr 1,3
  5708  03F5  3001               	movlw	1
  5709  03F6  0781               	addwf	1,f
  5710  03F7  3141               	addfsr 1,1
  5711  03F8  1803               	skipnc
  5712  03F9  0A81               	incf	1,f
  5713                           
  5714                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5715  03FA  0847               	movf	_Sw^(0+128),w
  5716  03FB  0086               	movwf	6
  5717  03FC  0848               	movf	(_Sw+1)^(0+128),w
  5718  03FD  0087               	movwf	7
  5719  03FE  3143               	addfsr 1,3
  5720  03FF  3F40               	moviw [0]fsr1
  5721  0400  0020               	movlb	0	; select bank0
  5722  0401  00E5               	movwf	??_setSw_Main
  5723  0402  3F41               	moviw [1]fsr1
  5724  0403  00E6               	movwf	??_setSw_Main+1
  5725  0404  3000               	movlw	0
  5726  0405  0266               	subwf	??_setSw_Main+1,w
  5727  0406  3096               	movlw	150
  5728  0407  1903               	skipnz
  5729  0408  0265               	subwf	??_setSw_Main,w
  5730  0409  1C03               	skipc
  5731  040A  0008               	return
  5732                           
  5733                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5734  040B  0021               	movlb	1	; select bank1
  5735  040C  0847               	movf	_Sw^(0+128),w
  5736  040D  0086               	movwf	6
  5737  040E  0848               	movf	(_Sw+1)^(0+128),w
  5738  040F  0087               	movwf	7
  5739  0410  3143               	addfsr 1,3
  5740  0411  3000               	movlw	0
  5741  0412  3FC0               	movwi [0]fsr1
  5742  0413  3FC1               	movwi [1]fsr1
  5743                           
  5744                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5745  0414  0020               	movlb	0	; select bank0
  5746  0415  0869               	movf	setSw_Main@sw,w
  5747  0416  3195  2537         	fcall	_Sw_DimmerAdjFunc
  5748                           
  5749                           ;Switch_B1.c: 184: }
  5750                           ;Switch_B1.c: 185: } else {
  5751  0418  0008               	return
  5752  0419                     l9552:	
  5753                           
  5754                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5755  0419  0021               	movlb	1	; select bank1
  5756  041A  0847               	movf	_Sw^(0+128),w
  5757  041B  0086               	movwf	6
  5758  041C  0848               	movf	(_Sw+1)^(0+128),w
  5759  041D  0087               	movwf	7
  5760  041E  1A01               	btfsc	1,4
  5761  041F  2C59               	goto	l9566
  5762                           
  5763                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5764  0420  0847               	movf	_Sw^(0+128),w
  5765  0421  0086               	movwf	6
  5766  0422  0848               	movf	(_Sw+1)^(0+128),w
  5767  0423  0087               	movwf	7
  5768  0424  3145               	addfsr 1,5
  5769  0425  3001               	movlw	1
  5770  0426  0781               	addwf	1,f
  5771  0427  3141               	addfsr 1,1
  5772  0428  1803               	skipnc
  5773  0429  0A81               	incf	1,f
  5774                           
  5775                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5776  042A  0847               	movf	_Sw^(0+128),w
  5777  042B  0086               	movwf	6
  5778  042C  0848               	movf	(_Sw+1)^(0+128),w
  5779  042D  0087               	movwf	7
  5780  042E  3145               	addfsr 1,5
  5781  042F  3F40               	moviw [0]fsr1
  5782  0430  0020               	movlb	0	; select bank0
  5783  0431  00E5               	movwf	??_setSw_Main
  5784  0432  3F41               	moviw [1]fsr1
  5785  0433  00E6               	movwf	??_setSw_Main+1
  5786  0434  3000               	movlw	0
  5787  0435  0266               	subwf	??_setSw_Main+1,w
  5788  0436  3096               	movlw	150
  5789  0437  1903               	skipnz
  5790  0438  0265               	subwf	??_setSw_Main,w
  5791  0439  1C03               	skipc
  5792  043A  0008               	return
  5793                           
  5794                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5795  043B  0021               	movlb	1	; select bank1
  5796  043C  0847               	movf	_Sw^(0+128),w
  5797  043D  0086               	movwf	6
  5798  043E  0848               	movf	(_Sw+1)^(0+128),w
  5799  043F  0087               	movwf	7
  5800  0440  3145               	addfsr 1,5
  5801  0441  3000               	movlw	0
  5802  0442  3FC0               	movwi [0]fsr1
  5803  0443  3FC1               	movwi [1]fsr1
  5804                           
  5805                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5806  0444  0847               	movf	_Sw^(0+128),w
  5807  0445  0086               	movwf	6
  5808  0446  0848               	movf	(_Sw+1)^(0+128),w
  5809  0447  0087               	movwf	7
  5810  0448  1601               	bsf	1,4
  5811                           
  5812                           ;Switch_B1.c: 193: setRF_Learn(1);
  5813  0449  3001               	movlw	1
  5814  044A  319A  22A1  3183   	fcall	_setRF_Learn
  5815                           
  5816                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5817  044D  0021               	movlb	1	; select bank1
  5818  044E  1FA0               	btfss	_myMain^(0+128),7
  5819  044F  0008               	return
  5820                           
  5821                           ;Switch_B1.c: 196: setBuz(2, 100);
  5822  0450  3064               	movlw	100
  5823  0451  0020               	movlb	0	; select bank0
  5824  0452  00A9               	movwf	setBuz@time
  5825  0453  3000               	movlw	0
  5826  0454  00AA               	movwf	setBuz@time+1
  5827  0455  3002               	movlw	2
  5828  0456  3196  2689         	fcall	_setBuz
  5829                           
  5830                           ;Switch_B1.c: 197: }
  5831                           ;Switch_B1.c: 199: }
  5832                           ;Switch_B1.c: 200: } else {
  5833  0458  0008               	return
  5834  0459                     l9566:	
  5835                           
  5836                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5837  0459  0021               	movlb	1	; select bank1
  5838  045A  0847               	movf	_Sw^(0+128),w
  5839  045B  0086               	movwf	6
  5840  045C  0848               	movf	(_Sw+1)^(0+128),w
  5841  045D  0087               	movwf	7
  5842  045E  1A81               	btfsc	1,5
  5843  045F  0008               	return
  5844                           
  5845                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5846  0460  0847               	movf	_Sw^(0+128),w
  5847  0461  0086               	movwf	6
  5848  0462  0848               	movf	(_Sw+1)^(0+128),w
  5849  0463  0087               	movwf	7
  5850  0464  3147               	addfsr 1,7
  5851  0465  3001               	movlw	1
  5852  0466  0781               	addwf	1,f
  5853  0467  3141               	addfsr 1,1
  5854  0468  1803               	skipnc
  5855  0469  0A81               	incf	1,f
  5856                           
  5857                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5858  046A  0847               	movf	_Sw^(0+128),w
  5859  046B  0086               	movwf	6
  5860  046C  0848               	movf	(_Sw+1)^(0+128),w
  5861  046D  0087               	movwf	7
  5862  046E  3147               	addfsr 1,7
  5863  046F  3F40               	moviw [0]fsr1
  5864  0470  0020               	movlb	0	; select bank0
  5865  0471  00E5               	movwf	??_setSw_Main
  5866  0472  3F41               	moviw [1]fsr1
  5867  0473  00E6               	movwf	??_setSw_Main+1
  5868  0474  3001               	movlw	1
  5869  0475  0266               	subwf	??_setSw_Main+1,w
  5870  0476  302C               	movlw	44
  5871  0477  1903               	skipnz
  5872  0478  0265               	subwf	??_setSw_Main,w
  5873  0479  1C03               	skipc
  5874  047A  0008               	return
  5875                           
  5876                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5877  047B  0021               	movlb	1	; select bank1
  5878  047C  0847               	movf	_Sw^(0+128),w
  5879  047D  0086               	movwf	6
  5880  047E  0848               	movf	(_Sw+1)^(0+128),w
  5881  047F  0087               	movwf	7
  5882  0480  3147               	addfsr 1,7
  5883  0481  3000               	movlw	0
  5884  0482  3FC0               	movwi [0]fsr1
  5885  0483  3FC1               	movwi [1]fsr1
  5886                           
  5887                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5888  0484  0847               	movf	_Sw^(0+128),w
  5889  0485  0086               	movwf	6
  5890  0486  0848               	movf	(_Sw+1)^(0+128),w
  5891  0487  0087               	movwf	7
  5892  0488  1681               	bsf	1,5
  5893                           
  5894                           ;Switch_B1.c: 208: setRF_Learn(0);
  5895  0489  3000               	movlw	0
  5896  048A  319A  22A1         	fcall	_setRF_Learn
  5897                           
  5898                           ;Switch_B1.c: 211: }
  5899                           ;Switch_B1.c: 212: }
  5900                           ;Switch_B1.c: 213: }
  5901                           ;Switch_B1.c: 214: }
  5902                           ;Switch_B1.c: 215: }
  5903                           ;Switch_B1.c: 216: } else {
  5904  048C  0008               	return
  5905  048D                     l9576:	
  5906                           
  5907                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5908  048D  0021               	movlb	1	; select bank1
  5909  048E  0847               	movf	_Sw^(0+128),w
  5910  048F  0086               	movwf	6
  5911  0490  0848               	movf	(_Sw+1)^(0+128),w
  5912  0491  0087               	movwf	7
  5913  0492  1D01               	btfss	1,2
  5914  0493  0008               	return
  5915                           
  5916                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5917  0494  3001               	movlw	1
  5918  0495  0020               	movlb	0	; select bank0
  5919  0496  00E5               	movwf	??_setSw_Main
  5920  0497  0021               	movlb	1	; select bank1
  5921  0498  0847               	movf	_Sw^(0+128),w
  5922  0499  0086               	movwf	6
  5923  049A  0848               	movf	(_Sw+1)^(0+128),w
  5924  049B  0087               	movwf	7
  5925  049C  3142               	addfsr 1,2
  5926  049D  0020               	movlb	0	; select bank0
  5927  049E  0865               	movf	??_setSw_Main,w
  5928  049F  0781               	addwf	1,f
  5929                           
  5930                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5931  04A0  0021               	movlb	1	; select bank1
  5932  04A1  0847               	movf	_Sw^(0+128),w
  5933  04A2  0086               	movwf	6
  5934  04A3  0848               	movf	(_Sw+1)^(0+128),w
  5935  04A4  0087               	movwf	7
  5936  04A5  3142               	addfsr 1,2
  5937  04A6  3005               	movlw	5
  5938  04A7  0201               	subwf	1,w
  5939  04A8  1C03               	skipc
  5940  04A9  0008               	return
  5941                           
  5942                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  5943  04AA  0847               	movf	_Sw^(0+128),w
  5944  04AB  0086               	movwf	6
  5945  04AC  0848               	movf	(_Sw+1)^(0+128),w
  5946  04AD  0087               	movwf	7
  5947  04AE  3142               	addfsr 1,2
  5948  04AF  0181               	clrf	1
  5949                           
  5950                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  5951  04B0  0847               	movf	_Sw^(0+128),w
  5952  04B1  0086               	movwf	6
  5953  04B2  0848               	movf	(_Sw+1)^(0+128),w
  5954  04B3  0087               	movwf	7
  5955  04B4  1101               	bcf	1,2
  5956                           
  5957                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  5958  04B5  0847               	movf	_Sw^(0+128),w
  5959  04B6  0086               	movwf	6
  5960  04B7  0848               	movf	(_Sw+1)^(0+128),w
  5961  04B8  0087               	movwf	7
  5962  04B9  3143               	addfsr 1,3
  5963  04BA  3000               	movlw	0
  5964  04BB  3FC0               	movwi [0]fsr1
  5965  04BC  3FC1               	movwi [1]fsr1
  5966                           
  5967                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  5968  04BD  0847               	movf	_Sw^(0+128),w
  5969  04BE  0086               	movwf	6
  5970  04BF  0848               	movf	(_Sw+1)^(0+128),w
  5971  04C0  0087               	movwf	7
  5972  04C1  1181               	bcf	1,3
  5973                           
  5974                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  5975  04C2  0847               	movf	_Sw^(0+128),w
  5976  04C3  0086               	movwf	6
  5977  04C4  0848               	movf	(_Sw+1)^(0+128),w
  5978  04C5  0087               	movwf	7
  5979  04C6  3145               	addfsr 1,5
  5980  04C7  3000               	movlw	0
  5981  04C8  3FC0               	movwi [0]fsr1
  5982  04C9  3FC1               	movwi [1]fsr1
  5983                           
  5984                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  5985  04CA  0847               	movf	_Sw^(0+128),w
  5986  04CB  0086               	movwf	6
  5987  04CC  0848               	movf	(_Sw+1)^(0+128),w
  5988  04CD  0087               	movwf	7
  5989  04CE  1201               	bcf	1,4
  5990                           
  5991                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  5992  04CF  0847               	movf	_Sw^(0+128),w
  5993  04D0  0086               	movwf	6
  5994  04D1  0848               	movf	(_Sw+1)^(0+128),w
  5995  04D2  0087               	movwf	7
  5996  04D3  3147               	addfsr 1,7
  5997  04D4  3000               	movlw	0
  5998  04D5  3FC0               	movwi [0]fsr1
  5999  04D6  3FC1               	movwi [1]fsr1
  6000                           
  6001                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  6002  04D7  0847               	movf	_Sw^(0+128),w
  6003  04D8  0086               	movwf	6
  6004  04D9  0848               	movf	(_Sw+1)^(0+128),w
  6005  04DA  0087               	movwf	7
  6006  04DB  1281               	bcf	1,5
  6007                           
  6008                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  6009  04DC  0020               	movlb	0	; select bank0
  6010  04DD  0869               	movf	setSw_Main@sw,w
  6011  04DE  318A  2223  3183   	fcall	_Sw_DimmerOffFunc
  6012                           
  6013                           ;Switch_B1.c: 232: setRF_Learn(0);
  6014  04E1  3000               	movlw	0
  6015  04E2  319A  22A1         	fcall	_setRF_Learn
  6016  04E4  0008               	return
  6017  04E5                     __end_of_setSw_Main:	
  6018                           
  6019                           	psect	text18
  6020  1AA1                     __ptext18:	
  6021 ;; *************** function _setRF_Learn *****************
  6022 ;; Defined at:
  6023 ;;		line 23 in file "../src/RF_Control_B1.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;  command         1    wreg     unsigned char 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  command         1    0[BANK0 ] unsigned char 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;		None               void
  6030 ;; Registers used:
  6031 ;;		wreg
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;Total ram usage:        1 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:    5
  6044 ;; This function calls:
  6045 ;;		Nothing
  6046 ;; This function is called by:
  6047 ;;		_setSw_Main
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           
  6052                           ;psect for function _setRF_Learn
  6053  1AA1                     _setRF_Learn:	
  6054                           
  6055                           ;incstack = 0
  6056                           ; Regs used in _setRF_Learn: [wreg]
  6057                           ;setRF_Learn@command stored from wreg
  6058  1AA1  0020               	movlb	0	; select bank0
  6059  1AA2  00A0               	movwf	setRF_Learn@command
  6060                           
  6061                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  6062  1AA3  0820               	movf	setRF_Learn@command,w
  6063  1AA4  0021               	movlb	1	; select bank1
  6064  1AA5  133E               	bcf	_RF1^(0+128),6
  6065  1AA6  1D03               	skipz
  6066  1AA7  173E               	bsf	_RF1^(0+128),6
  6067  1AA8  0008               	return
  6068  1AA9                     __end_of_setRF_Learn:	
  6069                           
  6070                           	psect	text19
  6071  0A99                     __ptext19:	
  6072 ;; *************** function _Sw_DimmerOnFunc *****************
  6073 ;; Defined at:
  6074 ;;		line 241 in file "../src/Switch_B1.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  sw              1    wreg     unsigned char 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  sw              1   67[BANK0 ] unsigned char 
  6079 ;;  Idle            1   66[BANK0 ] unsigned char 
  6080 ;; Return value:  Size  Location     Type
  6081 ;;		None               void
  6082 ;; Registers used:
  6083 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;Total ram usage:        2 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    9
  6096 ;; This function calls:
  6097 ;;		_setBuz
  6098 ;;		_setDimmerLights_Switch
  6099 ;;		_setDimmerLights_Trigger
  6100 ;;		_setRFSW_Status
  6101 ;;		_setRF_DimmerLights
  6102 ;;		_setTxData
  6103 ;; This function is called by:
  6104 ;;		_setSw_Main
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           
  6109                           ;psect for function _Sw_DimmerOnFunc
  6110  0A99                     _Sw_DimmerOnFunc:	
  6111                           
  6112                           ;incstack = 0
  6113                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6114                           ;Sw_DimmerOnFunc@sw stored from wreg
  6115  0A99  0020               	movlb	0	; select bank0
  6116  0A9A  00E3               	movwf	Sw_DimmerOnFunc@sw
  6117                           
  6118                           ;Switch_B1.c: 242: char Idle = 1;
  6119  0A9B  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6120  0A9C  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6121                           
  6122                           ;Switch_B1.c: 256: if (sw == 1) {
  6123  0A9D  0863               	movf	Sw_DimmerOnFunc@sw,w
  6124  0A9E  3A01               	xorlw	1
  6125  0A9F  1D03               	skipz
  6126  0AA0  2AAB               	goto	l9190
  6127                           
  6128                           ;Switch_B1.c: 257: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6129  0AA1  1003               	clrc
  6130  0AA2  0022               	movlb	2	; select bank2
  6131  0AA3  1DD4               	btfss	(_DimmerLights2^(0+256)+8),3
  6132  0AA4  1403               	setc
  6133  0AA5  3000               	movlw	0
  6134  0AA6  1803               	btfsc	3,0
  6135  0AA7  3001               	movlw	1
  6136  0AA8  0020               	movlb	0	; select bank0
  6137  0AA9  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6138                           
  6139                           ;Switch_B1.c: 258: } else if (sw == 2) {
  6140  0AAA  2AB8               	goto	l9194
  6141  0AAB                     l9190:	
  6142  0AAB  0863               	movf	Sw_DimmerOnFunc@sw,w
  6143  0AAC  3A02               	xorlw	2
  6144  0AAD  1D03               	skipz
  6145  0AAE  2AB8               	goto	l9194
  6146                           
  6147                           ;Switch_B1.c: 259: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6148  0AAF  1003               	clrc
  6149  0AB0  0022               	movlb	2	; select bank2
  6150  0AB1  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  6151  0AB2  1403               	setc
  6152  0AB3  3000               	movlw	0
  6153  0AB4  1803               	btfsc	3,0
  6154  0AB5  3001               	movlw	1
  6155  0AB6  0020               	movlb	0	; select bank0
  6156  0AB7  00E2               	movwf	Sw_DimmerOnFunc@Idle
  6157  0AB8                     l9194:	
  6158                           
  6159                           ;Switch_B1.c: 260: }
  6160                           ;Switch_B1.c: 263: if (Idle == 1) {
  6161  0AB8  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6162  0AB9  3A01               	xorlw	1
  6163  0ABA  1D03               	skipz
  6164  0ABB  0008               	return
  6165                           
  6166                           ;Switch_B1.c: 264: Sw->Flag = 1;
  6167  0ABC  0021               	movlb	1	; select bank1
  6168  0ABD  0847               	movf	_Sw^(0+128),w
  6169  0ABE  0086               	movwf	6
  6170  0ABF  0848               	movf	(_Sw+1)^(0+128),w
  6171  0AC0  0087               	movwf	7
  6172  0AC1  1781               	bsf	1,7
  6173                           
  6174                           ;Switch_B1.c: 265: setBuz(1, 100);
  6175  0AC2  3064               	movlw	100
  6176  0AC3  0020               	movlb	0	; select bank0
  6177  0AC4  00A9               	movwf	setBuz@time
  6178  0AC5  3000               	movlw	0
  6179  0AC6  00AA               	movwf	setBuz@time+1
  6180  0AC7  3001               	movlw	1
  6181  0AC8  3196  2689  318A   	fcall	_setBuz
  6182                           
  6183                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  6184  0ACB  0021               	movlb	1	; select bank1
  6185  0ACC  0847               	movf	_Sw^(0+128),w
  6186  0ACD  0086               	movwf	6
  6187  0ACE  0848               	movf	(_Sw+1)^(0+128),w
  6188  0ACF  0087               	movwf	7
  6189  0AD0  1B01               	btfsc	1,6
  6190  0AD1  2AFD               	goto	l9214
  6191                           
  6192                           ;Switch_B1.c: 267: Sw->Status = 1;
  6193  0AD2  0847               	movf	_Sw^(0+128),w
  6194  0AD3  0086               	movwf	6
  6195  0AD4  0848               	movf	(_Sw+1)^(0+128),w
  6196  0AD5  0087               	movwf	7
  6197  0AD6  1701               	bsf	1,6
  6198                           
  6199                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  6200  0AD7  0020               	movlb	0	; select bank0
  6201  0AD8  01A2               	clrf	setRFSW_Status@command
  6202  0AD9  0AA2               	incf	setRFSW_Status@command,f
  6203  0ADA  0863               	movf	Sw_DimmerOnFunc@sw,w
  6204  0ADB  319B  235B  318A   	fcall	_setRFSW_Status
  6205                           
  6206                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  6207  0ADE  0020               	movlb	0	; select bank0
  6208  0ADF  01A2               	clrf	setDimmerLights_Trigger@command
  6209  0AE0  0AA2               	incf	setDimmerLights_Trigger@command,f
  6210  0AE1  0863               	movf	Sw_DimmerOnFunc@sw,w
  6211  0AE2  319B  23A7  318A   	fcall	_setDimmerLights_Trigger
  6212                           
  6213                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  6214  0AE5  0020               	movlb	0	; select bank0
  6215  0AE6  01A2               	clrf	setDimmerLights_Switch@command
  6216  0AE7  0AA2               	incf	setDimmerLights_Switch@command,f
  6217  0AE8  0863               	movf	Sw_DimmerOnFunc@sw,w
  6218  0AE9  319B  2397  318A   	fcall	_setDimmerLights_Switch
  6219                           
  6220                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  6221  0AEC  0021               	movlb	1	; select bank1
  6222  0AED  0847               	movf	_Sw^(0+128),w
  6223  0AEE  0086               	movwf	6
  6224  0AEF  0848               	movf	(_Sw+1)^(0+128),w
  6225  0AF0  0087               	movwf	7
  6226  0AF1  3000               	movlw	0
  6227  0AF2  1B01               	btfsc	1,6
  6228  0AF3  3001               	movlw	1
  6229  0AF4  0020               	movlb	0	; select bank0
  6230  0AF5  00DD               	movwf	setRF_DimmerLights@on
  6231  0AF6  0863               	movf	Sw_DimmerOnFunc@sw,w
  6232  0AF7  3188  20D7  318A   	fcall	_setRF_DimmerLights
  6233                           
  6234                           ;Switch_B1.c: 274: setTxData();
  6235  0AFA  3186  26A2         	fcall	_setTxData
  6236                           
  6237                           ;Switch_B1.c: 276: } else {
  6238  0AFC  0008               	return
  6239  0AFD                     l9214:	
  6240                           
  6241                           ;Switch_B1.c: 277: Sw->Status = 0;
  6242  0AFD  0021               	movlb	1	; select bank1
  6243  0AFE  0847               	movf	_Sw^(0+128),w
  6244  0AFF  0086               	movwf	6
  6245  0B00  0848               	movf	(_Sw+1)^(0+128),w
  6246  0B01  0087               	movwf	7
  6247  0B02  1301               	bcf	1,6
  6248                           
  6249                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  6250  0B03  0847               	movf	_Sw^(0+128),w
  6251  0B04  0086               	movwf	6
  6252  0B05  0848               	movf	(_Sw+1)^(0+128),w
  6253  0B06  0087               	movwf	7
  6254  0B07  3000               	movlw	0
  6255  0B08  1B01               	btfsc	1,6
  6256  0B09  3001               	movlw	1
  6257  0B0A  0020               	movlb	0	; select bank0
  6258  0B0B  00A2               	movwf	setRFSW_Status@command
  6259  0B0C  0863               	movf	Sw_DimmerOnFunc@sw,w
  6260  0B0D  319B  235B         	fcall	_setRFSW_Status
  6261  0B0F  0008               	return
  6262  0B10                     __end_of_Sw_DimmerOnFunc:	
  6263                           
  6264                           	psect	text20
  6265  0A23                     __ptext20:	
  6266 ;; *************** function _Sw_DimmerOffFunc *****************
  6267 ;; Defined at:
  6268 ;;		line 284 in file "../src/Switch_B1.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;  sw              1    wreg     unsigned char 
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;  sw              1   68[BANK0 ] unsigned char 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;		None               void
  6275 ;; Registers used:
  6276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;Total ram usage:        3 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    9
  6289 ;; This function calls:
  6290 ;;		_setDelayOff_GO
  6291 ;;		_setDimmerLights_AdjGo
  6292 ;;		_setDimmerLights_Switch
  6293 ;;		_setDimmerLights_Trigger
  6294 ;;		_setDimmerLights_TriggerAdj
  6295 ;;		_setRF_DimmerLights
  6296 ;;		_setTxData
  6297 ;; This function is called by:
  6298 ;;		_setSw_Main
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           
  6303                           ;psect for function _Sw_DimmerOffFunc
  6304  0A23                     _Sw_DimmerOffFunc:	
  6305                           
  6306                           ;incstack = 0
  6307                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6308                           ;Sw_DimmerOffFunc@sw stored from wreg
  6309  0A23  0020               	movlb	0	; select bank0
  6310  0A24  00E4               	movwf	Sw_DimmerOffFunc@sw
  6311                           
  6312                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  6313  0A25  0021               	movlb	1	; select bank1
  6314  0A26  0847               	movf	_Sw^(0+128),w
  6315  0A27  0086               	movwf	6
  6316  0A28  0848               	movf	(_Sw+1)^(0+128),w
  6317  0A29  0087               	movwf	7
  6318  0A2A  1F81               	btfss	1,7
  6319  0A2B  0008               	return
  6320                           
  6321                           ;Switch_B1.c: 286: Sw->Flag = 0;
  6322  0A2C  0847               	movf	_Sw^(0+128),w
  6323  0A2D  0086               	movwf	6
  6324  0A2E  0848               	movf	(_Sw+1)^(0+128),w
  6325  0A2F  0087               	movwf	7
  6326  0A30  1381               	bcf	1,7
  6327                           
  6328                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  6329  0A31  0847               	movf	_Sw^(0+128),w
  6330  0A32  0086               	movwf	6
  6331  0A33  0848               	movf	(_Sw+1)^(0+128),w
  6332  0A34  0087               	movwf	7
  6333  0A35  1F01               	btfss	1,6
  6334  0A36  2A74               	goto	l9258
  6335                           
  6336                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  6337  0A37  0847               	movf	_Sw^(0+128),w
  6338  0A38  0086               	movwf	6
  6339  0A39  0848               	movf	(_Sw+1)^(0+128),w
  6340  0A3A  0087               	movwf	7
  6341  0A3B  3141               	addfsr 1,1
  6342  0A3C  1C01               	btfss	1,0
  6343  0A3D  0008               	return
  6344                           
  6345                           ;Switch_B1.c: 289: Sw->Adj = 0;
  6346  0A3E  0847               	movf	_Sw^(0+128),w
  6347  0A3F  0086               	movwf	6
  6348  0A40  0848               	movf	(_Sw+1)^(0+128),w
  6349  0A41  0087               	movwf	7
  6350  0A42  3141               	addfsr 1,1
  6351  0A43  1001               	bcf	1,0
  6352                           
  6353                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  6354  0A44  0020               	movlb	0	; select bank0
  6355  0A45  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6356  0A46  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6357  0A47  0864               	movf	Sw_DimmerOffFunc@sw,w
  6358  0A48  319B  23E7  318A   	fcall	_setDimmerLights_TriggerAdj
  6359                           
  6360                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  6361  0A4B  0020               	movlb	0	; select bank0
  6362  0A4C  01A2               	clrf	setDimmerLights_AdjGo@command
  6363  0A4D  0864               	movf	Sw_DimmerOffFunc@sw,w
  6364  0A4E  319B  23D7  318A   	fcall	_setDimmerLights_AdjGo
  6365                           
  6366                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  6367  0A51  0020               	movlb	0	; select bank0
  6368  0A52  0864               	movf	Sw_DimmerOffFunc@sw,w
  6369  0A53  3E1A               	addlw	26
  6370  0A54  076E               	addwf	_product,w
  6371  0A55  00E2               	movwf	??_Sw_DimmerOffFunc
  6372  0A56  0862               	movf	??_Sw_DimmerOffFunc,w
  6373  0A57  0086               	movwf	6
  6374  0A58  3002               	movlw	2	; select bank4/5
  6375  0A59  0087               	movwf	7
  6376  0A5A  0801               	movf	1,w
  6377  0A5B  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6378  0A5C  086E               	movf	_product,w
  6379  0A5D  3E11               	addlw	17
  6380  0A5E  0086               	movwf	6
  6381  0A5F  3002               	movlw	2	; select bank4/5
  6382  0A60  0087               	movwf	7
  6383  0A61  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6384  0A62  0081               	movwf	1
  6385                           
  6386                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  6387  0A63  0021               	movlb	1	; select bank1
  6388  0A64  0847               	movf	_Sw^(0+128),w
  6389  0A65  0086               	movwf	6
  6390  0A66  0848               	movf	(_Sw+1)^(0+128),w
  6391  0A67  0087               	movwf	7
  6392  0A68  3000               	movlw	0
  6393  0A69  1B01               	btfsc	1,6
  6394  0A6A  3001               	movlw	1
  6395  0A6B  0020               	movlb	0	; select bank0
  6396  0A6C  00DD               	movwf	setRF_DimmerLights@on
  6397  0A6D  0864               	movf	Sw_DimmerOffFunc@sw,w
  6398  0A6E  3188  20D7  318A   	fcall	_setRF_DimmerLights
  6399                           
  6400                           ;Switch_B1.c: 295: setTxData();
  6401  0A71  3186  26A2         	fcall	_setTxData
  6402                           
  6403                           ;Switch_B1.c: 297: }
  6404                           ;Switch_B1.c: 298: } else {
  6405  0A73  0008               	return
  6406  0A74                     l9258:	
  6407                           
  6408                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  6409  0A74  0020               	movlb	0	; select bank0
  6410  0A75  01A2               	clrf	setDimmerLights_Trigger@command
  6411  0A76  0AA2               	incf	setDimmerLights_Trigger@command,f
  6412  0A77  0864               	movf	Sw_DimmerOffFunc@sw,w
  6413  0A78  319B  23A7  318A   	fcall	_setDimmerLights_Trigger
  6414                           
  6415                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  6416  0A7B  0020               	movlb	0	; select bank0
  6417  0A7C  01A2               	clrf	setDimmerLights_Switch@command
  6418  0A7D  0864               	movf	Sw_DimmerOffFunc@sw,w
  6419  0A7E  319B  2397  318A   	fcall	_setDimmerLights_Switch
  6420                           
  6421                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  6422  0A81  0020               	movlb	0	; select bank0
  6423  0A82  01AA               	clrf	setDelayOff_GO@command
  6424  0A83  01AB               	clrf	setDelayOff_GO@value
  6425  0A84  0864               	movf	Sw_DimmerOffFunc@sw,w
  6426  0A85  3188  2071  318A   	fcall	_setDelayOff_GO
  6427                           
  6428                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  6429  0A88  0021               	movlb	1	; select bank1
  6430  0A89  0847               	movf	_Sw^(0+128),w
  6431  0A8A  0086               	movwf	6
  6432  0A8B  0848               	movf	(_Sw+1)^(0+128),w
  6433  0A8C  0087               	movwf	7
  6434  0A8D  3000               	movlw	0
  6435  0A8E  1B01               	btfsc	1,6
  6436  0A8F  3001               	movlw	1
  6437  0A90  0020               	movlb	0	; select bank0
  6438  0A91  00DD               	movwf	setRF_DimmerLights@on
  6439  0A92  0864               	movf	Sw_DimmerOffFunc@sw,w
  6440  0A93  3188  20D7  318A   	fcall	_setRF_DimmerLights
  6441                           
  6442                           ;Switch_B1.c: 304: setTxData();
  6443  0A96  3186  26A2         	fcall	_setTxData
  6444  0A98  0008               	return
  6445  0A99                     __end_of_Sw_DimmerOffFunc:	
  6446                           
  6447                           	psect	text21
  6448  1537                     __ptext21:	
  6449 ;; *************** function _Sw_DimmerAdjFunc *****************
  6450 ;; Defined at:
  6451 ;;		line 311 in file "../src/Switch_B1.c"
  6452 ;; Parameters:    Size  Location     Type
  6453 ;;  sw              1    wreg     unsigned char 
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;  sw              1    5[BANK0 ] unsigned char 
  6456 ;;  Idle            1    4[BANK0 ] unsigned char 
  6457 ;; Return value:  Size  Location     Type
  6458 ;;		None               void
  6459 ;; Registers used:
  6460 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6469 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;Total ram usage:        2 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; Hardware stack levels required when called:    7
  6473 ;; This function calls:
  6474 ;;		_setDimmerLights_AdjGo
  6475 ;;		_setDimmerLights_TriggerAdj
  6476 ;;		_setRFSW_Status
  6477 ;; This function is called by:
  6478 ;;		_setSw_Main
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           
  6483                           ;psect for function _Sw_DimmerAdjFunc
  6484  1537                     _Sw_DimmerAdjFunc:	
  6485                           
  6486                           ;incstack = 0
  6487                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6488                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6489  1537  0020               	movlb	0	; select bank0
  6490  1538  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6491                           
  6492                           ;Switch_B1.c: 312: char Idle = 1;
  6493  1539  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6494  153A  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6495                           
  6496                           ;Switch_B1.c: 325: if (sw == 1) {
  6497  153B  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6498  153C  3A01               	xorlw	1
  6499  153D  1D03               	skipz
  6500  153E  2D49               	goto	l9224
  6501                           
  6502                           ;Switch_B1.c: 326: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  6503  153F  1003               	clrc
  6504  1540  0022               	movlb	2	; select bank2
  6505  1541  1DD4               	btfss	(_DimmerLights2^(0+256)+8),3
  6506  1542  1403               	setc
  6507  1543  3000               	movlw	0
  6508  1544  1803               	btfsc	3,0
  6509  1545  3001               	movlw	1
  6510  1546  0020               	movlb	0	; select bank0
  6511  1547  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6512                           
  6513                           ;Switch_B1.c: 327: } else if (sw == 2) {
  6514  1548  2D56               	goto	l9228
  6515  1549                     l9224:	
  6516  1549  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6517  154A  3A02               	xorlw	2
  6518  154B  1D03               	skipz
  6519  154C  2D56               	goto	l9228
  6520                           
  6521                           ;Switch_B1.c: 328: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  6522  154D  1003               	clrc
  6523  154E  0022               	movlb	2	; select bank2
  6524  154F  1DC5               	btfss	(_DimmerLights1^(0+256)+8),3
  6525  1550  1403               	setc
  6526  1551  3000               	movlw	0
  6527  1552  1803               	btfsc	3,0
  6528  1553  3001               	movlw	1
  6529  1554  0020               	movlb	0	; select bank0
  6530  1555  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  6531  1556                     l9228:	
  6532                           
  6533                           ;Switch_B1.c: 329: }
  6534                           ;Switch_B1.c: 332: if (Idle == 1) {
  6535  1556  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6536  1557  3A01               	xorlw	1
  6537  1558  1D03               	skipz
  6538  1559  0008               	return
  6539                           
  6540                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  6541  155A  0021               	movlb	1	; select bank1
  6542  155B  0847               	movf	_Sw^(0+128),w
  6543  155C  0086               	movwf	6
  6544  155D  0848               	movf	(_Sw+1)^(0+128),w
  6545  155E  0087               	movwf	7
  6546  155F  1F81               	btfss	1,7
  6547  1560  0008               	return
  6548                           
  6549                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  6550  1561  0847               	movf	_Sw^(0+128),w
  6551  1562  0086               	movwf	6
  6552  1563  0848               	movf	(_Sw+1)^(0+128),w
  6553  1564  0087               	movwf	7
  6554  1565  1581               	bsf	1,3
  6555                           
  6556                           ;Switch_B1.c: 335: Sw->Adj = 1;
  6557  1566  0847               	movf	_Sw^(0+128),w
  6558  1567  0086               	movwf	6
  6559  1568  0848               	movf	(_Sw+1)^(0+128),w
  6560  1569  0087               	movwf	7
  6561  156A  3141               	addfsr 1,1
  6562  156B  1401               	bsf	1,0
  6563                           
  6564                           ;Switch_B1.c: 336: Sw->Status = 1;
  6565  156C  0847               	movf	_Sw^(0+128),w
  6566  156D  0086               	movwf	6
  6567  156E  0848               	movf	(_Sw+1)^(0+128),w
  6568  156F  0087               	movwf	7
  6569  1570  1701               	bsf	1,6
  6570                           
  6571                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  6572  1571  0020               	movlb	0	; select bank0
  6573  1572  01A2               	clrf	setRFSW_Status@command
  6574  1573  0AA2               	incf	setRFSW_Status@command,f
  6575  1574  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6576  1575  319B  235B  3195   	fcall	_setRFSW_Status
  6577                           
  6578                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6579  1578  0020               	movlb	0	; select bank0
  6580  1579  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6581  157A  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6582  157B  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6583  157C  319B  23E7  3195   	fcall	_setDimmerLights_TriggerAdj
  6584                           
  6585                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6586  157F  0020               	movlb	0	; select bank0
  6587  1580  01A2               	clrf	setDimmerLights_AdjGo@command
  6588  1581  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6589  1582  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6590  1583  319B  23D7         	fcall	_setDimmerLights_AdjGo
  6591  1585  0008               	return
  6592  1586                     __end_of_Sw_DimmerAdjFunc:	
  6593                           
  6594                           	psect	text22
  6595  1BE7                     __ptext22:	
  6596 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6597 ;; Defined at:
  6598 ;;		line 711 in file "../src/Dimmer_B1.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  lights          1    wreg     unsigned char 
  6601 ;;  command         1    2[BANK0 ] unsigned char 
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;  lights          1    3[BANK0 ] unsigned char 
  6604 ;; Return value:  Size  Location     Type
  6605 ;;		None               void
  6606 ;; Registers used:
  6607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6613 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;Total ram usage:        2 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    6
  6620 ;; This function calls:
  6621 ;;		_DimmerLightsPointSelect
  6622 ;; This function is called by:
  6623 ;;		_Sw_DimmerOffFunc
  6624 ;;		_Sw_DimmerAdjFunc
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           
  6629                           ;psect for function _setDimmerLights_TriggerAdj
  6630  1BE7                     _setDimmerLights_TriggerAdj:	
  6631                           
  6632                           ;incstack = 0
  6633                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6634                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6635  1BE7  0020               	movlb	0	; select bank0
  6636  1BE8  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6637                           
  6638                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  6639  1BE9  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6640  1BEA  319C  2473         	fcall	_DimmerLightsPointSelect
  6641                           
  6642                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  6643  1BEC  0879               	movf	_DimmerLights,w
  6644  1BED  3E08               	addlw	8
  6645  1BEE  0086               	movwf	6
  6646  1BEF  3001               	movlw	1	; select bank2/3
  6647  1BF0  0087               	movwf	7
  6648  1BF1  0020               	movlb	0	; select bank0
  6649  1BF2  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6650  1BF3  1201               	bcf	1,4
  6651  1BF4  1D03               	skipz
  6652  1BF5  1601               	bsf	1,4
  6653  1BF6  0008               	return
  6654  1BF7                     __end_of_setDimmerLights_TriggerAdj:	
  6655                           
  6656                           	psect	text23
  6657  1BD7                     __ptext23:	
  6658 ;; *************** function _setDimmerLights_AdjGo *****************
  6659 ;; Defined at:
  6660 ;;		line 699 in file "../src/Dimmer_B1.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;  lights          1    wreg     unsigned char 
  6663 ;;  command         1    2[BANK0 ] unsigned char 
  6664 ;; Auto vars:     Size  Location     Type
  6665 ;;  lights          1    3[BANK0 ] unsigned char 
  6666 ;; Return value:  Size  Location     Type
  6667 ;;		None               void
  6668 ;; Registers used:
  6669 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6670 ;; Tracked objects:
  6671 ;;		On entry : 0/0
  6672 ;;		On exit  : 0/0
  6673 ;;		Unchanged: 0/0
  6674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6675 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;Total ram usage:        2 bytes
  6680 ;; Hardware stack levels used:    1
  6681 ;; Hardware stack levels required when called:    6
  6682 ;; This function calls:
  6683 ;;		_DimmerLightsPointSelect
  6684 ;; This function is called by:
  6685 ;;		_Sw_DimmerOffFunc
  6686 ;;		_Sw_DimmerAdjFunc
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           
  6691                           ;psect for function _setDimmerLights_AdjGo
  6692  1BD7                     _setDimmerLights_AdjGo:	
  6693                           
  6694                           ;incstack = 0
  6695                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6696                           ;setDimmerLights_AdjGo@lights stored from wreg
  6697  1BD7  0020               	movlb	0	; select bank0
  6698  1BD8  00A3               	movwf	setDimmerLights_AdjGo@lights
  6699                           
  6700                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  6701  1BD9  0823               	movf	setDimmerLights_AdjGo@lights,w
  6702  1BDA  319C  2473         	fcall	_DimmerLightsPointSelect
  6703                           
  6704                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  6705  1BDC  0879               	movf	_DimmerLights,w
  6706  1BDD  3E08               	addlw	8
  6707  1BDE  0086               	movwf	6
  6708  1BDF  3001               	movlw	1	; select bank2/3
  6709  1BE0  0087               	movwf	7
  6710  1BE1  0020               	movlb	0	; select bank0
  6711  1BE2  0822               	movf	setDimmerLights_AdjGo@command,w
  6712  1BE3  1181               	bcf	1,3
  6713  1BE4  1D03               	skipz
  6714  1BE5  1581               	bsf	1,3
  6715  1BE6  0008               	return
  6716  1BE7                     __end_of_setDimmerLights_AdjGo:	
  6717                           
  6718                           	psect	text24
  6719  1B32                     __ptext24:	
  6720 ;; *************** function _Switch_Initialization *****************
  6721 ;; Defined at:
  6722 ;;		line 41 in file "../src/Switch_B1.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;		None
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;		None               void
  6729 ;; Registers used:
  6730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;Total ram usage:        0 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    8
  6743 ;; This function calls:
  6744 ;;		_TouchPower
  6745 ;;		_setSw_Initialization
  6746 ;; This function is called by:
  6747 ;;		_main
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           
  6752                           ;psect for function _Switch_Initialization
  6753  1B32                     _Switch_Initialization:	
  6754                           
  6755                           ;Switch_B1.c: 42: TouchPower();
  6756                           
  6757                           ;incstack = 0
  6758                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6759  1B32  319B  2379  319B   	fcall	_TouchPower
  6760                           
  6761                           ;Switch_B1.c: 44: WPUB1 = 0;
  6762  1B35  0024               	movlb	4	; select bank4
  6763  1B36  108D               	bcf	13,1	;volatile
  6764                           
  6765                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6766  1B37  3001               	movlw	1
  6767  1B38  319A  2299  319B   	fcall	_setSw_Initialization
  6768                           
  6769                           ;Switch_B1.c: 57: setSw_Initialization(2);
  6770  1B3B  3002               	movlw	2
  6771  1B3C  319A  2299         	fcall	_setSw_Initialization
  6772  1B3E  0008               	return
  6773  1B3F                     __end_of_Switch_Initialization:	
  6774                           
  6775                           	psect	text25
  6776  1A99                     __ptext25:	
  6777 ;; *************** function _setSw_Initialization *****************
  6778 ;; Defined at:
  6779 ;;		line 83 in file "../src/Switch_B1.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;  sw              1    wreg     unsigned char 
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;  sw              1    3[BANK0 ] unsigned char 
  6784 ;; Return value:  Size  Location     Type
  6785 ;;		None               void
  6786 ;; Registers used:
  6787 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6788 ;; Tracked objects:
  6789 ;;		On entry : 0/0
  6790 ;;		On exit  : 0/0
  6791 ;;		Unchanged: 0/0
  6792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;Total ram usage:        1 bytes
  6798 ;; Hardware stack levels used:    1
  6799 ;; Hardware stack levels required when called:    7
  6800 ;; This function calls:
  6801 ;;		_setLED
  6802 ;; This function is called by:
  6803 ;;		_Switch_Initialization
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           
  6808                           ;psect for function _setSw_Initialization
  6809  1A99                     _setSw_Initialization:	
  6810                           
  6811                           ;incstack = 0
  6812                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6813                           ;setSw_Initialization@sw stored from wreg
  6814  1A99  0020               	movlb	0	; select bank0
  6815  1A9A  00A3               	movwf	setSw_Initialization@sw
  6816                           
  6817                           ;Switch_B1.c: 84: setLED(sw, 1);
  6818  1A9B  01A1               	clrf	setLED@command
  6819  1A9C  0AA1               	incf	setLED@command,f
  6820  1A9D  0823               	movf	setSw_Initialization@sw,w
  6821  1A9E  3197  279E         	fcall	_setLED
  6822  1AA0  0008               	return
  6823  1AA1                     __end_of_setSw_Initialization:	
  6824                           
  6825                           	psect	text26
  6826  1B79                     __ptext26:	
  6827 ;; *************** function _TouchPower *****************
  6828 ;; Defined at:
  6829 ;;		line 10 in file "../src/Switch_B1.c"
  6830 ;; Parameters:    Size  Location     Type
  6831 ;;		None
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;		None
  6834 ;; Return value:  Size  Location     Type
  6835 ;;		None               void
  6836 ;; Registers used:
  6837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6847 ;;Total ram usage:        0 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; Hardware stack levels required when called:    6
  6850 ;; This function calls:
  6851 ;;		_Timeout_Counter
  6852 ;;		_set_TimeoutCleared
  6853 ;; This function is called by:
  6854 ;;		_Switch_Initialization
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           
  6859                           ;psect for function _TouchPower
  6860  1B79                     _TouchPower:	
  6861                           
  6862                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6863                           
  6864                           ;incstack = 0
  6865                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6866  1B79  2B7F               	goto	l7684
  6867  1B7A                     l2673:	
  6868                           
  6869                           ;Switch_B1.c: 12: RC5 = 1;
  6870  1B7A  0020               	movlb	0	; select bank0
  6871  1B7B  168E               	bsf	14,5	;volatile
  6872                           
  6873                           ;Switch_B1.c: 13: Timeout_Counter();
  6874  1B7C  319C  24C2  319B   	fcall	_Timeout_Counter
  6875  1B7F                     l7684:	
  6876  1B7F  0020               	movlb	0	; select bank0
  6877  1B80  1A8E               	btfsc	14,5	;volatile
  6878  1B81  2B85               	goto	l7688
  6879  1B82  0021               	movlb	1	; select bank1
  6880  1B83  1D2F               	btfss	(_myMain^(0+128)+15),2
  6881  1B84  2B7A               	goto	l2673
  6882  1B85                     l7688:	
  6883                           
  6884                           ;Switch_B1.c: 14: }
  6885                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6886  1B85  319A  223E         	fcall	_set_TimeoutCleared
  6887  1B87  0008               	return
  6888  1B88                     __end_of_TouchPower:	
  6889                           
  6890                           	psect	text27
  6891  1A22                     __ptext27:	
  6892 ;; *************** function _RF_Main *****************
  6893 ;; Defined at:
  6894 ;;		line 16 in file "../src/RF_Control_B1.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;		None
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;		None               void
  6901 ;; Registers used:
  6902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;Total ram usage:        0 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:   14
  6915 ;; This function calls:
  6916 ;;		_setRF_Main
  6917 ;; This function is called by:
  6918 ;;		_main
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           
  6923                           ;psect for function _RF_Main
  6924  1A22                     _RF_Main:	
  6925                           
  6926                           ;RF_Control_B1.c: 18: setRF_Main();
  6927                           
  6928                           ;incstack = 0
  6929                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6930  1A22  3189  2143         	fcall	_setRF_Main
  6931  1A24  0008               	return
  6932  1A25                     __end_of_RF_Main:	
  6933                           
  6934                           	psect	text28
  6935  0943                     __ptext28:	
  6936 ;; *************** function _setRF_Main *****************
  6937 ;; Defined at:
  6938 ;;		line 51 in file "../src/RF_Control_B1.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;  Receive_OK      1    0        unsigned char 
  6943 ;;  loop_f          1    0        unsigned char 
  6944 ;; Return value:  Size  Location     Type
  6945 ;;		None               void
  6946 ;; Registers used:
  6947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6957 ;;Total ram usage:        2 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:   13
  6960 ;; This function calls:
  6961 ;;		_CC2500_RxData
  6962 ;;		_CC2500_TxData
  6963 ;;		_CC2500_WriteCommand
  6964 ;;		_RF_RxDisable
  6965 ;;		_getBuz_GO
  6966 ;;		_getRxData
  6967 ;; This function is called by:
  6968 ;;		_RF_Main
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           
  6973                           ;psect for function _setRF_Main
  6974  0943                     _setRF_Main:	
  6975                           
  6976                           ;RF_Control_B1.c: 52: char loop_f, Receive_OK;
  6977                           ;RF_Control_B1.c: 53: if (RF1.Enable == 1) {
  6978                           
  6979                           ;incstack = 0
  6980                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6981  0943  0021               	movlb	1	; select bank1
  6982  0944  1C3E               	btfss	_RF1^(0+128),0
  6983  0945  0008               	return
  6984                           
  6985                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6986  0946  319C  2408  3189   	fcall	_getBuz_GO
  6987  0949  0020               	movlb	0	; select bank0
  6988  094A  0821               	movf	?_getBuz_GO+1,w
  6989  094B  0420               	iorwf	?_getBuz_GO,w
  6990  094C  1D03               	skipz
  6991  094D  0008               	return
  6992                           
  6993                           ;RF_Control_B1.c: 62: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6994  094E  01E8               	clrf	_setRF_Main$5046
  6995  094F  0AE8               	incf	_setRF_Main$5046,f
  6996  0950  1F0C               	btfss	12,6	;volatile
  6997  0951  1A0C               	btfsc	12,4	;volatile
  6998  0952  2957               	goto	l9452
  6999  0953  1C0C               	btfss	12,0	;volatile
  7000  0954  188D               	btfsc	13,1	;volatile
  7001  0955  2957               	goto	l9452
  7002  0956  01E8               	clrf	_setRF_Main$5046
  7003  0957                     l9452:	
  7004  0957  0868               	movf	_setRF_Main$5046,w
  7005  0958  0021               	movlb	1	; select bank1
  7006  0959  13BE               	bcf	_RF1^(0+128),7
  7007  095A  1D03               	skipz
  7008  095B  17BE               	bsf	_RF1^(0+128),7
  7009                           
  7010                           ;RF_Control_B1.c: 68: if (RF1.Key == 1 && RF1.Learn == 0) {
  7011  095C  1BBE               	btfsc	_RF1^(0+128),7
  7012  095D  1B3E               	btfsc	_RF1^(0+128),6
  7013  095E  2963               	goto	l2261
  7014                           
  7015                           ;RF_Control_B1.c: 69: RF1.Run = 1;
  7016  095F  14BF               	bsf	(_RF1^(0+128)+1),1
  7017                           
  7018                           ;RF_Control_B1.c: 70: RF_RxDisable();
  7019  0960  319B  236A         	fcall	_RF_RxDisable
  7020                           
  7021                           ;RF_Control_B1.c: 71: } else {
  7022  0962  0008               	return
  7023  0963                     l2261:	
  7024                           
  7025                           ;RF_Control_B1.c: 72: if (RF1.Run == 1 && RF1.Learn == 0) {
  7026  0963  18BF               	btfsc	(_RF1^(0+128)+1),1
  7027  0964  1B3E               	btfsc	_RF1^(0+128),6
  7028  0965  2973               	goto	l9472
  7029                           
  7030                           ;RF_Control_B1.c: 73: RF1.Count++;
  7031  0966  3001               	movlw	1
  7032  0967  0020               	movlb	0	; select bank0
  7033  0968  00E7               	movwf	??_setRF_Main
  7034  0969  0867               	movf	??_setRF_Main,w
  7035  096A  0021               	movlb	1	; select bank1
  7036  096B  07C1               	addwf	(_RF1^(0+128)+3),f
  7037                           
  7038                           ;RF_Control_B1.c: 74: if (RF1.Count == 20) {
  7039  096C  0841               	movf	(_RF1^(0+128)+3),w
  7040  096D  3A14               	xorlw	20
  7041  096E  1D03               	skipz
  7042  096F  0008               	return
  7043                           
  7044                           ;RF_Control_B1.c: 75: RF1.Count = 0;
  7045  0970  01C1               	clrf	(_RF1^(0+128)+3)
  7046                           
  7047                           ;RF_Control_B1.c: 76: RF1.Run = 0;
  7048  0971  10BF               	bcf	(_RF1^(0+128)+1),1
  7049                           
  7050                           ;RF_Control_B1.c: 77: }
  7051                           ;RF_Control_B1.c: 78: } else {
  7052  0972  0008               	return
  7053  0973                     l9472:	
  7054                           
  7055                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7056  0973  01C1               	clrf	(_RF1^(0+128)+3)
  7057                           
  7058                           ;RF_Control_B1.c: 80: RF1.Run = 0;
  7059  0974  10BF               	bcf	(_RF1^(0+128)+1),1
  7060                           
  7061                           ;RF_Control_B1.c: 82: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  7062  0975  193E               	btfsc	_RF1^(0+128),2
  7063  0976  1B3E               	btfsc	_RF1^(0+128),6
  7064  0977  298A               	goto	l2266
  7065                           
  7066                           ;RF_Control_B1.c: 83: RF1.TransceiveGO = 0;
  7067  0978  113E               	bcf	_RF1^(0+128),2
  7068                           
  7069                           ;RF_Control_B1.c: 84: RF1.RxStatus = 0;
  7070  0979  11BE               	bcf	_RF1^(0+128),3
  7071                           
  7072                           ;RF_Control_B1.c: 85: RF1.ReceiveGO = 0;
  7073  097A  10BE               	bcf	_RF1^(0+128),1
  7074                           
  7075                           ;RF_Control_B1.c: 87: CC2500_WriteCommand(0x36);
  7076  097B  3036               	movlw	54
  7077  097C  319D  2576  3189   	fcall	_CC2500_WriteCommand
  7078                           
  7079                           ;RF_Control_B1.c: 88: CC2500_WriteCommand(0x3B);
  7080  097F  303B               	movlw	59
  7081  0980  319D  2576  3189   	fcall	_CC2500_WriteCommand
  7082                           
  7083                           ;RF_Control_B1.c: 89: CC2500_WriteCommand(0x3A);
  7084  0983  303A               	movlw	58
  7085  0984  319D  2576  3189   	fcall	_CC2500_WriteCommand
  7086                           
  7087                           ;RF_Control_B1.c: 90: CC2500_TxData();
  7088  0987  3188  200C         	fcall	_CC2500_TxData
  7089                           
  7090                           ;RF_Control_B1.c: 92: } else {
  7091  0989  0008               	return
  7092  098A                     l2266:	
  7093                           
  7094                           ;RF_Control_B1.c: 94: if (RF1.RxStatus == 1) {
  7095  098A  1DBE               	btfss	_RF1^(0+128),3
  7096  098B  299B               	goto	l2268
  7097                           
  7098                           ;RF_Control_B1.c: 95: CC2500_RxData();
  7099  098C  318C  2403  3189   	fcall	_CC2500_RxData
  7100                           
  7101                           ;RF_Control_B1.c: 96: if (RF1.ReceiveGO == 1) {
  7102  098F  0021               	movlb	1	; select bank1
  7103  0990  1CBE               	btfss	_RF1^(0+128),1
  7104  0991  0008               	return
  7105                           
  7106                           ;RF_Control_B1.c: 97: RF1.ReceiveGO = 0;
  7107  0992  10BE               	bcf	_RF1^(0+128),1
  7108                           
  7109                           ;RF_Control_B1.c: 104: getRxData();
  7110  0993  3194  2410         	fcall	_getRxData
  7111                           
  7112                           ;RF_Control_B1.c: 106: RF1.Run = 1;
  7113  0995  0021               	movlb	1	; select bank1
  7114  0996  14BF               	bsf	(_RF1^(0+128)+1),1
  7115                           
  7116                           ;RF_Control_B1.c: 107: RB5 = RB5 == 1 ? 0 : 1;
  7117  0997  3020               	movlw	32
  7118  0998  0020               	movlb	0	; select bank0
  7119  0999  068D               	xorwf	13,f
  7120                           
  7121                           ;RF_Control_B1.c: 108: }
  7122                           ;RF_Control_B1.c: 109: } else {
  7123  099A  0008               	return
  7124  099B                     l2268:	
  7125                           
  7126                           ;RF_Control_B1.c: 111: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7127  099B  19BE               	btfsc	_RF1^(0+128),3
  7128  099C  0008               	return
  7129  099D  18BE               	btfsc	_RF1^(0+128),1
  7130  099E  0008               	return
  7131                           
  7132                           ;RF_Control_B1.c: 112: RF1.RxStatus = 1;
  7133  099F  15BE               	bsf	_RF1^(0+128),3
  7134                           
  7135                           ;RF_Control_B1.c: 113: CC2500_WriteCommand(0x36);
  7136  09A0  3036               	movlw	54
  7137  09A1  319D  2576  3189   	fcall	_CC2500_WriteCommand
  7138                           
  7139                           ;RF_Control_B1.c: 114: CC2500_WriteCommand(0x3B);
  7140  09A4  303B               	movlw	59
  7141  09A5  319D  2576  3189   	fcall	_CC2500_WriteCommand
  7142                           
  7143                           ;RF_Control_B1.c: 115: CC2500_WriteCommand(0x3A);
  7144  09A8  303A               	movlw	58
  7145  09A9  319D  2576  3189   	fcall	_CC2500_WriteCommand
  7146                           
  7147                           ;RF_Control_B1.c: 116: CC2500_WriteCommand(0x34);
  7148  09AC  3034               	movlw	52
  7149  09AD  319D  2576         	fcall	_CC2500_WriteCommand
  7150  09AF  0008               	return
  7151  09B0                     __end_of_setRF_Main:	
  7152                           
  7153                           	psect	text29
  7154  1410                     __ptext29:	
  7155 ;; *************** function _getRxData *****************
  7156 ;; Defined at:
  7157 ;;		line 201 in file "../src/RF_Control_B1.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;		None
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;		None
  7162 ;; Return value:  Size  Location     Type
  7163 ;;		None               void
  7164 ;; Registers used:
  7165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7166 ;; Tracked objects:
  7167 ;;		On entry : 0/0
  7168 ;;		On exit  : 0/0
  7169 ;;		Unchanged: 0/0
  7170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7175 ;;Total ram usage:        0 bytes
  7176 ;; Hardware stack levels used:    1
  7177 ;; Hardware stack levels required when called:   12
  7178 ;; This function calls:
  7179 ;;		_setControl_Lights_Table
  7180 ;;		_setLog_Code
  7181 ;; This function is called by:
  7182 ;;		_setRF_Main
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           
  7187                           ;psect for function _getRxData
  7188  1410                     _getRxData:	
  7189                           
  7190                           ;RF_Control_B1.c: 202: if (RF1.Learn == 1) {
  7191                           
  7192                           ;incstack = 0
  7193                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7194  1410  0021               	movlb	1	; select bank1
  7195  1411  1F3E               	btfss	_RF1^(0+128),6
  7196  1412  2C1E               	goto	l9154
  7197                           
  7198                           ;RF_Control_B1.c: 203: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7199  1413  0022               	movlb	2	; select bank2
  7200  1414  08A0               	movf	_RF_Data^(0+256),f
  7201  1415  1D03               	skipz
  7202  1416  0008               	return
  7203  1417  0821               	movf	(_RF_Data^(0+256)+1),w
  7204  1418  3A64               	xorlw	100
  7205  1419  1D03               	skipz
  7206  141A  0008               	return
  7207                           
  7208                           ;RF_Control_B1.c: 204: {
  7209                           ;RF_Control_B1.c: 205: setLog_Code();
  7210  141B  3191  2132         	fcall	_setLog_Code
  7211                           
  7212                           ;RF_Control_B1.c: 206: }
  7213                           ;RF_Control_B1.c: 207: } else {
  7214  141D  0008               	return
  7215  141E                     l9154:	
  7216                           
  7217                           ;RF_Control_B1.c: 208: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7218  141E  0022               	movlb	2	; select bank2
  7219  141F  08A0               	movf	_RF_Data^(0+256),f
  7220  1420  1D03               	skipz
  7221  1421  0008               	return
  7222  1422  0821               	movf	(_RF_Data^(0+256)+1),w
  7223  1423  3A02               	xorlw	2
  7224  1424  1D03               	skipz
  7225  1425  0008               	return
  7226                           
  7227                           ;RF_Control_B1.c: 209: {
  7228                           ;RF_Control_B1.c: 210: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7229  1426  082C               	movf	(_RF_Data^(0+256)+12),w
  7230  1427  3AFF               	xorlw	255
  7231  1428  1D03               	skipz
  7232  1429  2C34               	goto	l9166
  7233  142A  082D               	movf	(_RF_Data^(0+256)+13),w
  7234  142B  3AFF               	xorlw	255
  7235  142C  1D03               	skipz
  7236  142D  2C34               	goto	l9166
  7237  142E  082E               	movf	(_RF_Data^(0+256)+14),w
  7238  142F  3AFF               	xorlw	255
  7239  1430  1D03               	skipz
  7240  1431  2C34               	goto	l9166
  7241                           
  7242                           ;RF_Control_B1.c: 211: __nop();
  7243  1432  0000               	nop
  7244                           
  7245                           ;RF_Control_B1.c: 212: } else {
  7246  1433  0008               	return
  7247  1434                     l9166:	
  7248                           
  7249                           ;RF_Control_B1.c: 213: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7250  1434  0020               	movlb	0	; select bank0
  7251  1435  086E               	movf	_product,w
  7252  1436  3E0C               	addlw	12
  7253  1437  0086               	movwf	6
  7254  1438  3002               	movlw	2	; select bank4/5
  7255  1439  0087               	movwf	7
  7256  143A  0022               	movlb	2	; select bank2
  7257  143B  082C               	movf	(_RF_Data^(0+256)+12),w
  7258  143C  0601               	xorwf	1,w
  7259  143D  1D03               	skipz
  7260  143E  0008               	return
  7261  143F  0020               	movlb	0	; select bank0
  7262  1440  086E               	movf	_product,w
  7263  1441  3E0D               	addlw	13
  7264  1442  0086               	movwf	6
  7265  1443  3002               	movlw	2	; select bank4/5
  7266  1444  0087               	movwf	7
  7267  1445  0022               	movlb	2	; select bank2
  7268  1446  082D               	movf	(_RF_Data^(0+256)+13),w
  7269  1447  0601               	xorwf	1,w
  7270  1448  1D03               	skipz
  7271  1449  0008               	return
  7272  144A  0020               	movlb	0	; select bank0
  7273  144B  086E               	movf	_product,w
  7274  144C  3E0E               	addlw	14
  7275  144D  0086               	movwf	6
  7276  144E  3002               	movlw	2	; select bank4/5
  7277  144F  0087               	movwf	7
  7278  1450  0022               	movlb	2	; select bank2
  7279  1451  082E               	movf	(_RF_Data^(0+256)+14),w
  7280  1452  0601               	xorwf	1,w
  7281  1453  1D03               	skipz
  7282  1454  0008               	return
  7283                           
  7284                           ;RF_Control_B1.c: 214: setControl_Lights_Table();
  7285  1455  318E  2618         	fcall	_setControl_Lights_Table
  7286                           
  7287                           ;RF_Control_B1.c: 221: {
  7288                           ;RF_Control_B1.c: 222: ;
  7289                           
  7290                           ;RF_Control_B1.c: 218: {
  7291                           ;RF_Control_B1.c: 219: ;
  7292                           ;RF_Control_B1.c: 220: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  7293                           
  7294                           ;RF_Control_B1.c: 215: }
  7295                           ;RF_Control_B1.c: 216: }
  7296                           ;RF_Control_B1.c: 217: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  7297  1457  0008               	return
  7298  1458                     __end_of_getRxData:	
  7299                           
  7300                           	psect	text30
  7301  1132                     __ptext30:	
  7302 ;; *************** function _setLog_Code *****************
  7303 ;; Defined at:
  7304 ;;		line 232 in file "../src/RF_Control_B1.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;		None
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;		None
  7309 ;; Return value:  Size  Location     Type
  7310 ;;		None               void
  7311 ;; Registers used:
  7312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;Total ram usage:        1 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; Hardware stack levels required when called:    7
  7325 ;; This function calls:
  7326 ;;		_setBuz
  7327 ;; This function is called by:
  7328 ;;		_getRxData
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           
  7333                           ;psect for function _setLog_Code
  7334  1132                     _setLog_Code:	
  7335                           
  7336                           ;RF_Control_B1.c: 233: product->Data[12]=RF_Data[12];
  7337                           
  7338                           ;incstack = 0
  7339                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7340  1132  0022               	movlb	2	; select bank2
  7341  1133  082C               	movf	(_RF_Data^(0+256)+12),w
  7342  1134  0020               	movlb	0	; select bank0
  7343  1135  00AD               	movwf	??_setLog_Code
  7344  1136  086E               	movf	_product,w
  7345  1137  3E0C               	addlw	12
  7346  1138  0086               	movwf	6
  7347  1139  3002               	movlw	2	; select bank4/5
  7348  113A  0087               	movwf	7
  7349  113B  082D               	movf	??_setLog_Code,w
  7350  113C  0081               	movwf	1
  7351                           
  7352                           ;RF_Control_B1.c: 234: product->Data[13]=RF_Data[13];
  7353  113D  0022               	movlb	2	; select bank2
  7354  113E  082D               	movf	(_RF_Data^(0+256)+13),w
  7355  113F  0020               	movlb	0	; select bank0
  7356  1140  00AD               	movwf	??_setLog_Code
  7357  1141  086E               	movf	_product,w
  7358  1142  3E0D               	addlw	13
  7359  1143  0086               	movwf	6
  7360  1144  3002               	movlw	2	; select bank4/5
  7361  1145  0087               	movwf	7
  7362  1146  082D               	movf	??_setLog_Code,w
  7363  1147  0081               	movwf	1
  7364                           
  7365                           ;RF_Control_B1.c: 235: product->Data[14]=RF_Data[14];
  7366  1148  0022               	movlb	2	; select bank2
  7367  1149  082E               	movf	(_RF_Data^(0+256)+14),w
  7368  114A  0020               	movlb	0	; select bank0
  7369  114B  00AD               	movwf	??_setLog_Code
  7370  114C  086E               	movf	_product,w
  7371  114D  3E0E               	addlw	14
  7372  114E  0086               	movwf	6
  7373  114F  3002               	movlw	2	; select bank4/5
  7374  1150  0087               	movwf	7
  7375  1151  082D               	movf	??_setLog_Code,w
  7376  1152  0081               	movwf	1
  7377                           
  7378                           ;RF_Control_B1.c: 236: setBuz(1, 100);
  7379  1153  3064               	movlw	100
  7380  1154  00A9               	movwf	setBuz@time
  7381  1155  3000               	movlw	0
  7382  1156  00AA               	movwf	setBuz@time+1
  7383  1157  3001               	movlw	1
  7384  1158  3196  2689  3191   	fcall	_setBuz
  7385                           
  7386                           ;RF_Control_B1.c: 237: RF1.Learn = 0;
  7387  115B  0021               	movlb	1	; select bank1
  7388  115C  133E               	bcf	_RF1^(0+128),6
  7389                           
  7390                           ;RF_Control_B1.c: 238: if (myMain.First) {
  7391  115D  1FA0               	btfss	_myMain^(0+128),7
  7392  115E  2961               	goto	l2302
  7393                           
  7394                           ;RF_Control_B1.c: 239: Memory.LoopSave=1;
  7395  115F  0024               	movlb	4	; select bank4
  7396  1160  1544               	bsf	(_Memory^(0+512)+36),2
  7397  1161                     l2302:	
  7398                           
  7399                           ;RF_Control_B1.c: 240: }
  7400                           ;RF_Control_B1.c: 241: Memory.Modify=1;
  7401  1161  0024               	movlb	4	; select bank4
  7402  1162  1444               	bsf	(_Memory^(0+512)+36),0
  7403  1163  0008               	return
  7404  1164                     __end_of_setLog_Code:	
  7405                           
  7406                           	psect	text31
  7407  0E18                     __ptext31:	
  7408 ;; *************** function _setControl_Lights_Table *****************
  7409 ;; Defined at:
  7410 ;;		line 245 in file "../src/RF_Control_B1.c"
  7411 ;; Parameters:    Size  Location     Type
  7412 ;;		None
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;		None
  7415 ;; Return value:  Size  Location     Type
  7416 ;;		None               void
  7417 ;; Registers used:
  7418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/0
  7421 ;;		On exit  : 0/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7428 ;;Total ram usage:        0 bytes
  7429 ;; Hardware stack levels used:    1
  7430 ;; Hardware stack levels required when called:   11
  7431 ;; This function calls:
  7432 ;;		_setBuz
  7433 ;;		_setDimmerLights
  7434 ;;		_setRFSW_AdjControl
  7435 ;;		_setRFSW_Control
  7436 ;;		_setRFSW_Status
  7437 ;;		_setSw_Status
  7438 ;;		_setTxData
  7439 ;; This function is called by:
  7440 ;;		_getRxData
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           
  7445                           ;psect for function _setControl_Lights_Table
  7446  0E18                     _setControl_Lights_Table:	
  7447                           
  7448                           ;RF_Control_B1.c: 246: if (RF_Data[15] == 0x00) {
  7449                           
  7450                           ;incstack = 0
  7451                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7452  0E18  0022               	movlb	2	; select bank2
  7453  0E19  08AF               	movf	(_RF_Data^(0+256)+15),f
  7454  0E1A  1D03               	skipz
  7455  0E1B  2E64               	goto	l9092
  7456                           
  7457                           ;RF_Control_B1.c: 248: setDimmerLights(1, 0);
  7458  0E1C  0020               	movlb	0	; select bank0
  7459  0E1D  01A3               	clrf	setDimmerLights@status
  7460  0E1E  3001               	movlw	1
  7461  0E1F  318D  258E  318E   	fcall	_setDimmerLights
  7462                           
  7463                           ;RF_Control_B1.c: 249: setRFSW_Status(1, 0);
  7464  0E22  0020               	movlb	0	; select bank0
  7465  0E23  01A2               	clrf	setRFSW_Status@command
  7466  0E24  3001               	movlw	1
  7467  0E25  319B  235B  318E   	fcall	_setRFSW_Status
  7468                           
  7469                           ;RF_Control_B1.c: 250: setSw_Status(1, 0);
  7470  0E28  0020               	movlb	0	; select bank0
  7471  0E29  01A1               	clrf	setSw_Status@command
  7472  0E2A  3001               	movlw	1
  7473  0E2B  319B  23B7  318E   	fcall	_setSw_Status
  7474                           
  7475                           ;RF_Control_B1.c: 253: setDimmerLights(2, 0);
  7476  0E2E  0020               	movlb	0	; select bank0
  7477  0E2F  01A3               	clrf	setDimmerLights@status
  7478  0E30  3002               	movlw	2
  7479  0E31  318D  258E  318E   	fcall	_setDimmerLights
  7480                           
  7481                           ;RF_Control_B1.c: 254: setRFSW_Status(2, 0);
  7482  0E34  0020               	movlb	0	; select bank0
  7483  0E35  01A2               	clrf	setRFSW_Status@command
  7484  0E36  3002               	movlw	2
  7485  0E37  319B  235B  318E   	fcall	_setRFSW_Status
  7486                           
  7487                           ;RF_Control_B1.c: 255: setSw_Status(2, 0);
  7488  0E3A  0020               	movlb	0	; select bank0
  7489  0E3B  01A1               	clrf	setSw_Status@command
  7490  0E3C  3002               	movlw	2
  7491  0E3D  319B  23B7  318E   	fcall	_setSw_Status
  7492                           
  7493                           ;RF_Control_B1.c: 263: product->Data[9]=0;
  7494  0E40  0020               	movlb	0	; select bank0
  7495  0E41  086E               	movf	_product,w
  7496  0E42  3E09               	addlw	9
  7497  0E43  0086               	movwf	6
  7498  0E44  3002               	movlw	2	; select bank4/5
  7499  0E45  0087               	movwf	7
  7500  0E46  0181               	clrf	1
  7501                           
  7502                           ;RF_Control_B1.c: 264: product->Data[11]=0;
  7503  0E47  086E               	movf	_product,w
  7504  0E48  3E0B               	addlw	11
  7505  0E49  0086               	movwf	6
  7506  0E4A  3002               	movlw	2	; select bank4/5
  7507  0E4B  0087               	movwf	7
  7508  0E4C  0181               	clrf	1
  7509                           
  7510                           ;RF_Control_B1.c: 265: product->Data[15]=0;
  7511  0E4D  086E               	movf	_product,w
  7512  0E4E  3E0F               	addlw	15
  7513  0E4F  0086               	movwf	6
  7514  0E50  3002               	movlw	2	; select bank4/5
  7515  0E51  0087               	movwf	7
  7516  0E52  0181               	clrf	1
  7517                           
  7518                           ;RF_Control_B1.c: 266: product->Data[17]=0;
  7519  0E53  086E               	movf	_product,w
  7520  0E54  3E11               	addlw	17
  7521  0E55  0086               	movwf	6
  7522  0E56  3002               	movlw	2	; select bank4/5
  7523  0E57  0087               	movwf	7
  7524  0E58  0181               	clrf	1
  7525                           
  7526                           ;RF_Control_B1.c: 267: setBuz(1, 100);
  7527  0E59  3064               	movlw	100
  7528  0E5A  00A9               	movwf	setBuz@time
  7529  0E5B  3000               	movlw	0
  7530  0E5C  00AA               	movwf	setBuz@time+1
  7531  0E5D  3001               	movlw	1
  7532  0E5E  3196  2689  318E   	fcall	_setBuz
  7533                           
  7534                           ;RF_Control_B1.c: 268: setTxData();
  7535  0E61  3186  26A2         	fcall	_setTxData
  7536                           
  7537                           ;RF_Control_B1.c: 269: } else if (RF_Data[15] == 0x20) {
  7538  0E63  0008               	return
  7539  0E64                     l9092:	
  7540  0E64  0022               	movlb	2	; select bank2
  7541  0E65  082F               	movf	(_RF_Data^(0+256)+15),w
  7542  0E66  3A20               	xorlw	32
  7543  0E67  1D03               	skipz
  7544  0E68  2E7F               	goto	l9098
  7545                           
  7546                           ;RF_Control_B1.c: 270: product->Data[9]=0;
  7547  0E69  0020               	movlb	0	; select bank0
  7548  0E6A  086E               	movf	_product,w
  7549  0E6B  3E09               	addlw	9
  7550  0E6C  0086               	movwf	6
  7551  0E6D  3002               	movlw	2	; select bank4/5
  7552  0E6E  0087               	movwf	7
  7553  0E6F  0181               	clrf	1
  7554                           
  7555                           ;RF_Control_B1.c: 271: product->Data[11]=0;
  7556  0E70  086E               	movf	_product,w
  7557  0E71  3E0B               	addlw	11
  7558  0E72  0086               	movwf	6
  7559  0E73  3002               	movlw	2	; select bank4/5
  7560  0E74  0087               	movwf	7
  7561  0E75  0181               	clrf	1
  7562                           
  7563                           ;RF_Control_B1.c: 272: product->Data[17]=0;
  7564  0E76  086E               	movf	_product,w
  7565  0E77  3E11               	addlw	17
  7566  0E78  0086               	movwf	6
  7567  0E79  3002               	movlw	2	; select bank4/5
  7568  0E7A  0087               	movwf	7
  7569  0E7B  0181               	clrf	1
  7570                           
  7571                           ;RF_Control_B1.c: 273: setTxData();
  7572  0E7C  3186  26A2         	fcall	_setTxData
  7573                           
  7574                           ;RF_Control_B1.c: 274: }
  7575  0E7E  0008               	return
  7576  0E7F                     l9098:	
  7577                           
  7578                           ;RF_Control_B1.c: 276: else if (RF_Data[15] == 0x01) {
  7579  0E7F  0022               	movlb	2	; select bank2
  7580  0E80  082F               	movf	(_RF_Data^(0+256)+15),w
  7581  0E81  3A01               	xorlw	1
  7582  0E82  1D03               	skipz
  7583  0E83  2E88               	goto	l9102
  7584                           
  7585                           ;RF_Control_B1.c: 277: setRFSW_Control(1);
  7586  0E84  3001               	movlw	1
  7587  0E85  3187  275B         	fcall	_setRFSW_Control
  7588                           
  7589                           ;RF_Control_B1.c: 278: }
  7590  0E87  0008               	return
  7591  0E88                     l9102:	
  7592                           
  7593                           ;RF_Control_B1.c: 280: else if (RF_Data[15] == 0x11) {
  7594  0E88  0022               	movlb	2	; select bank2
  7595  0E89  082F               	movf	(_RF_Data^(0+256)+15),w
  7596  0E8A  3A11               	xorlw	17
  7597  0E8B  1D03               	skipz
  7598  0E8C  2E91               	goto	l9106
  7599                           
  7600                           ;RF_Control_B1.c: 281: setRFSW_AdjControl(1);
  7601  0E8D  3001               	movlw	1
  7602  0E8E  3192  223E         	fcall	_setRFSW_AdjControl
  7603                           
  7604                           ;RF_Control_B1.c: 282: }
  7605  0E90  0008               	return
  7606  0E91                     l9106:	
  7607                           
  7608                           ;RF_Control_B1.c: 287: else if (RF_Data[15] == 0x02) {
  7609  0E91  0022               	movlb	2	; select bank2
  7610  0E92  082F               	movf	(_RF_Data^(0+256)+15),w
  7611  0E93  3A02               	xorlw	2
  7612  0E94  1D03               	skipz
  7613  0E95  2E9A               	goto	l9110
  7614                           
  7615                           ;RF_Control_B1.c: 288: setRFSW_Control(2);
  7616  0E96  3002               	movlw	2
  7617  0E97  3187  275B         	fcall	_setRFSW_Control
  7618                           
  7619                           ;RF_Control_B1.c: 289: }
  7620  0E99  0008               	return
  7621  0E9A                     l9110:	
  7622                           
  7623                           ;RF_Control_B1.c: 291: else if (RF_Data[15] == 0x21) {
  7624  0E9A  0022               	movlb	2	; select bank2
  7625  0E9B  082F               	movf	(_RF_Data^(0+256)+15),w
  7626  0E9C  3A21               	xorlw	33
  7627  0E9D  1D03               	skipz
  7628  0E9E  0008               	return
  7629                           
  7630                           ;RF_Control_B1.c: 292: setRFSW_AdjControl(2);
  7631  0E9F  3002               	movlw	2
  7632  0EA0  3192  223E         	fcall	_setRFSW_AdjControl
  7633  0EA2  0008               	return
  7634  0EA3                     __end_of_setControl_Lights_Table:	
  7635                           
  7636                           	psect	text32
  7637  075B                     __ptext32:	
  7638 ;; *************** function _setRFSW_Control *****************
  7639 ;; Defined at:
  7640 ;;		line 333 in file "../src/RF_Control_B1.c"
  7641 ;; Parameters:    Size  Location     Type
  7642 ;;  sw              1    wreg     unsigned char 
  7643 ;; Auto vars:     Size  Location     Type
  7644 ;;  sw              1   67[BANK0 ] unsigned char 
  7645 ;; Return value:  Size  Location     Type
  7646 ;;		None               void
  7647 ;; Registers used:
  7648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7649 ;; Tracked objects:
  7650 ;;		On entry : 0/0
  7651 ;;		On exit  : 0/0
  7652 ;;		Unchanged: 0/0
  7653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7655 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7657 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;Total ram usage:        2 bytes
  7659 ;; Hardware stack levels used:    1
  7660 ;; Hardware stack levels required when called:    9
  7661 ;; This function calls:
  7662 ;;		_RfSWPointSelect
  7663 ;;		_setBuz
  7664 ;;		_setDelayOff_GO
  7665 ;;		_setDimmerLights_Switch
  7666 ;;		_setDimmerLights_Trigger
  7667 ;;		_setRF_DimmerLights
  7668 ;;		_setSw_Status
  7669 ;;		_setTxData
  7670 ;; This function is called by:
  7671 ;;		_setControl_Lights_Table
  7672 ;; This function uses a non-reentrant model
  7673 ;;
  7674                           
  7675                           
  7676                           ;psect for function _setRFSW_Control
  7677  075B                     _setRFSW_Control:	
  7678                           
  7679                           ;incstack = 0
  7680                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7681                           ;setRFSW_Control@sw stored from wreg
  7682  075B  0020               	movlb	0	; select bank0
  7683  075C  00E3               	movwf	setRFSW_Control@sw
  7684                           
  7685                           ;RF_Control_B1.c: 334: RfSWPointSelect(sw);
  7686  075D  0863               	movf	setRFSW_Control@sw,w
  7687  075E  319C  24ED  3187   	fcall	_RfSWPointSelect
  7688                           
  7689                           ;RF_Control_B1.c: 335: if (RFSW->Status == 0) {
  7690  0761  0021               	movlb	1	; select bank1
  7691  0762  0850               	movf	_RFSW^(0+128),w
  7692  0763  0086               	movwf	6
  7693  0764  0187               	clrf	7
  7694  0765  1801               	btfsc	1,0
  7695  0766  2F9D               	goto	l8994
  7696                           
  7697                           ;RF_Control_B1.c: 336: if (RF_Data[16] == 0x80) {
  7698  0767  0022               	movlb	2	; select bank2
  7699  0768  0830               	movf	(_RF_Data^(0+256)+16),w
  7700  0769  3A80               	xorlw	128
  7701  076A  1D03               	skipz
  7702  076B  2F79               	goto	l8984
  7703                           
  7704                           ;RF_Control_B1.c: 337: setDelayOff_GO(sw, 1, RF_Data[17]);
  7705  076C  0020               	movlb	0	; select bank0
  7706  076D  01AA               	clrf	setDelayOff_GO@command
  7707  076E  0AAA               	incf	setDelayOff_GO@command,f
  7708  076F  0022               	movlb	2	; select bank2
  7709  0770  0831               	movf	(_RF_Data^(0+256)+17),w
  7710  0771  0020               	movlb	0	; select bank0
  7711  0772  00E2               	movwf	??_setRFSW_Control
  7712  0773  0862               	movf	??_setRFSW_Control,w
  7713  0774  00AB               	movwf	setDelayOff_GO@value
  7714  0775  0863               	movf	setRFSW_Control@sw,w
  7715  0776  3188  2071  3187   	fcall	_setDelayOff_GO
  7716  0779                     l8984:	
  7717                           
  7718                           ;RF_Control_B1.c: 338: }
  7719                           ;RF_Control_B1.c: 339: RFSW->Status = 1;
  7720  0779  0021               	movlb	1	; select bank1
  7721  077A  0850               	movf	_RFSW^(0+128),w
  7722  077B  0086               	movwf	6
  7723  077C  0187               	clrf	7
  7724  077D  1401               	bsf	1,0
  7725                           
  7726                           ;RF_Control_B1.c: 340: setSw_Status(sw, 1);
  7727  077E  0020               	movlb	0	; select bank0
  7728  077F  01A1               	clrf	setSw_Status@command
  7729  0780  0AA1               	incf	setSw_Status@command,f
  7730  0781  0863               	movf	setRFSW_Control@sw,w
  7731  0782  319B  23B7  3187   	fcall	_setSw_Status
  7732                           
  7733                           ;RF_Control_B1.c: 342: setDimmerLights_Trigger(sw, 1);
  7734  0785  0020               	movlb	0	; select bank0
  7735  0786  01A2               	clrf	setDimmerLights_Trigger@command
  7736  0787  0AA2               	incf	setDimmerLights_Trigger@command,f
  7737  0788  0863               	movf	setRFSW_Control@sw,w
  7738  0789  319B  23A7  3187   	fcall	_setDimmerLights_Trigger
  7739                           
  7740                           ;RF_Control_B1.c: 343: setDimmerLights_Switch(sw, 1);
  7741  078C  0020               	movlb	0	; select bank0
  7742  078D  01A2               	clrf	setDimmerLights_Switch@command
  7743  078E  0AA2               	incf	setDimmerLights_Switch@command,f
  7744  078F  0863               	movf	setRFSW_Control@sw,w
  7745  0790  319B  2397  3187   	fcall	_setDimmerLights_Switch
  7746                           
  7747                           ;RF_Control_B1.c: 345: setRF_DimmerLights(sw, RFSW->Status);
  7748  0793  0021               	movlb	1	; select bank1
  7749  0794  0850               	movf	_RFSW^(0+128),w
  7750  0795  0086               	movwf	6
  7751  0796  0187               	clrf	7
  7752  0797  3000               	movlw	0
  7753  0798  1801               	btfsc	1,0
  7754  0799  3001               	movlw	1
  7755  079A  0020               	movlb	0	; select bank0
  7756  079B  00DD               	movwf	setRF_DimmerLights@on
  7757  079C  2FDB               	goto	L3
  7758  079D                     l8994:	
  7759                           ;RF_Control_B1.c: 346: } else {
  7760                           
  7761                           
  7762                           ;RF_Control_B1.c: 347: if (RF_Data[16] == 0x80) {
  7763  079D  0022               	movlb	2	; select bank2
  7764  079E  0830               	movf	(_RF_Data^(0+256)+16),w
  7765  079F  3A80               	xorlw	128
  7766  07A0  1D03               	skipz
  7767  07A1  2FB3               	goto	l8998
  7768                           
  7769                           ;RF_Control_B1.c: 348: setDelayOff_GO(sw, 1, RF_Data[17]);
  7770  07A2  0020               	movlb	0	; select bank0
  7771  07A3  01AA               	clrf	setDelayOff_GO@command
  7772  07A4  0AAA               	incf	setDelayOff_GO@command,f
  7773  07A5  0022               	movlb	2	; select bank2
  7774  07A6  0831               	movf	(_RF_Data^(0+256)+17),w
  7775  07A7  0020               	movlb	0	; select bank0
  7776  07A8  00E2               	movwf	??_setRFSW_Control
  7777  07A9  0862               	movf	??_setRFSW_Control,w
  7778  07AA  00AB               	movwf	setDelayOff_GO@value
  7779  07AB  0863               	movf	setRFSW_Control@sw,w
  7780  07AC  3188  2071  3187   	fcall	_setDelayOff_GO
  7781                           
  7782                           ;RF_Control_B1.c: 349: setRF_DimmerLights(sw, 1);
  7783  07AF  0020               	movlb	0	; select bank0
  7784  07B0  01DD               	clrf	setRF_DimmerLights@on
  7785  07B1  0ADD               	incf	setRF_DimmerLights@on,f
  7786  07B2  2FDB               	goto	L3
  7787  07B3                     l8998:	
  7788                           ;RF_Control_B1.c: 350: } else {
  7789                           
  7790                           
  7791                           ;RF_Control_B1.c: 351: RFSW->Status = 0;
  7792  07B3  0021               	movlb	1	; select bank1
  7793  07B4  0850               	movf	_RFSW^(0+128),w
  7794  07B5  0086               	movwf	6
  7795  07B6  0187               	clrf	7
  7796  07B7  1001               	bcf	1,0
  7797                           
  7798                           ;RF_Control_B1.c: 352: setSw_Status(sw, 0);
  7799  07B8  0020               	movlb	0	; select bank0
  7800  07B9  01A1               	clrf	setSw_Status@command
  7801  07BA  0863               	movf	setRFSW_Control@sw,w
  7802  07BB  319B  23B7  3187   	fcall	_setSw_Status
  7803                           
  7804                           ;RF_Control_B1.c: 354: setDimmerLights_Trigger(sw, 1);
  7805  07BE  0020               	movlb	0	; select bank0
  7806  07BF  01A2               	clrf	setDimmerLights_Trigger@command
  7807  07C0  0AA2               	incf	setDimmerLights_Trigger@command,f
  7808  07C1  0863               	movf	setRFSW_Control@sw,w
  7809  07C2  319B  23A7  3187   	fcall	_setDimmerLights_Trigger
  7810                           
  7811                           ;RF_Control_B1.c: 355: setDimmerLights_Switch(sw, RFSW->Status);
  7812  07C5  0021               	movlb	1	; select bank1
  7813  07C6  0850               	movf	_RFSW^(0+128),w
  7814  07C7  0086               	movwf	6
  7815  07C8  0187               	clrf	7
  7816  07C9  3000               	movlw	0
  7817  07CA  1801               	btfsc	1,0
  7818  07CB  3001               	movlw	1
  7819  07CC  0020               	movlb	0	; select bank0
  7820  07CD  00A2               	movwf	setDimmerLights_Switch@command
  7821  07CE  0863               	movf	setRFSW_Control@sw,w
  7822  07CF  319B  2397  3187   	fcall	_setDimmerLights_Switch
  7823                           
  7824                           ;RF_Control_B1.c: 357: setDelayOff_GO(sw, 0, 0);
  7825  07D2  0020               	movlb	0	; select bank0
  7826  07D3  01AA               	clrf	setDelayOff_GO@command
  7827  07D4  01AB               	clrf	setDelayOff_GO@value
  7828  07D5  0863               	movf	setRFSW_Control@sw,w
  7829  07D6  3188  2071  3187   	fcall	_setDelayOff_GO
  7830                           
  7831                           ;RF_Control_B1.c: 358: setRF_DimmerLights(sw, 0);
  7832  07D9  0020               	movlb	0	; select bank0
  7833  07DA  01DD               	clrf	setRF_DimmerLights@on
  7834  07DB                     L3:	
  7835  07DB  0863               	movf	setRFSW_Control@sw,w
  7836  07DC  3188  20D7  3187   	fcall	_setRF_DimmerLights
  7837                           
  7838                           ;RF_Control_B1.c: 359: }
  7839                           ;RF_Control_B1.c: 360: }
  7840                           ;RF_Control_B1.c: 361: setBuz(1, 100);
  7841  07DF  3064               	movlw	100
  7842  07E0  0020               	movlb	0	; select bank0
  7843  07E1  00A9               	movwf	setBuz@time
  7844  07E2  3000               	movlw	0
  7845  07E3  00AA               	movwf	setBuz@time+1
  7846  07E4  3001               	movlw	1
  7847  07E5  3196  2689  3187   	fcall	_setBuz
  7848                           
  7849                           ;RF_Control_B1.c: 362: setTxData();
  7850  07E8  3186  26A2         	fcall	_setTxData
  7851  07EA  0008               	return
  7852  07EB                     __end_of_setRFSW_Control:	
  7853                           
  7854                           	psect	text33
  7855  0871                     __ptext33:	
  7856 ;; *************** function _setDelayOff_GO *****************
  7857 ;; Defined at:
  7858 ;;		line 86 in file "../src/DelayOff_B1.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;  sw              1    wreg     unsigned char 
  7861 ;;  command         1   10[BANK0 ] unsigned char 
  7862 ;;  value           1   11[BANK0 ] unsigned char 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;  sw              1   14[BANK0 ] unsigned char 
  7865 ;; Return value:  Size  Location     Type
  7866 ;;		None               void
  7867 ;; Registers used:
  7868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7874 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7876 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;Total ram usage:        5 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    7
  7881 ;; This function calls:
  7882 ;;		_DelayOffPointSelect
  7883 ;;		_DelayTimejudge
  7884 ;; This function is called by:
  7885 ;;		_setRFSW_Control
  7886 ;;		_Sw_DimmerOffFunc
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           
  7891                           ;psect for function _setDelayOff_GO
  7892  0871                     _setDelayOff_GO:	
  7893                           
  7894                           ;incstack = 0
  7895                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7896                           ;setDelayOff_GO@sw stored from wreg
  7897  0871  0020               	movlb	0	; select bank0
  7898  0872  00AE               	movwf	setDelayOff_GO@sw
  7899                           
  7900                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7901  0873  082E               	movf	setDelayOff_GO@sw,w
  7902  0874  319C  24AE  3188   	fcall	_DelayOffPointSelect
  7903                           
  7904                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7905  0877  0878               	movf	_DelayOff,w
  7906  0878  0086               	movwf	6
  7907  0879  3001               	movlw	1	; select bank2/3
  7908  087A  0087               	movwf	7
  7909  087B  1C01               	btfss	1,0
  7910  087C  0008               	return
  7911                           
  7912                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7913  087D  0020               	movlb	0	; select bank0
  7914  087E  082A               	movf	setDelayOff_GO@command,w
  7915  087F  3A01               	xorlw	1
  7916  0880  3000               	movlw	0
  7917  0881  1903               	skipnz
  7918  0882  3001               	movlw	1
  7919  0883  00AC               	movwf	??_setDelayOff_GO
  7920  0884  0878               	movf	_DelayOff,w
  7921  0885  0086               	movwf	6
  7922  0886  3001               	movlw	1	; select bank2/3
  7923  0887  0087               	movwf	7
  7924  0888  0DAC               	rlf	??_setDelayOff_GO,f
  7925  0889  0801               	movf	1,w
  7926  088A  062C               	xorwf	??_setDelayOff_GO,w
  7927  088B  39FD               	andlw	-3
  7928  088C  062C               	xorwf	??_setDelayOff_GO,w
  7929  088D  0081               	movwf	1
  7930                           
  7931                           ;DelayOff_B1.c: 90: if (command == 1) {
  7932  088E  082A               	movf	setDelayOff_GO@command,w
  7933  088F  3A01               	xorlw	1
  7934  0890  1D03               	skipz
  7935  0891  28BC               	goto	l8856
  7936                           
  7937                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7938  0892  082B               	movf	setDelayOff_GO@value,w
  7939  0893  3190  2081  3188   	fcall	_DelayTimejudge
  7940  0896  0020               	movlb	0	; select bank0
  7941  0897  00AC               	movwf	??_setDelayOff_GO
  7942  0898  0A78               	incf	_DelayOff,w
  7943  0899  0086               	movwf	6
  7944  089A  3001               	movlw	1	; select bank2/3
  7945  089B  0087               	movwf	7
  7946  089C  082C               	movf	??_setDelayOff_GO,w
  7947  089D  0081               	movwf	1
  7948                           
  7949                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7950  089E  300F               	movlw	15
  7951  089F  052B               	andwf	setDelayOff_GO@value,w
  7952  08A0  00AC               	movwf	??_setDelayOff_GO
  7953  08A1  082C               	movf	??_setDelayOff_GO,w
  7954  08A2  3A05               	xorlw	5
  7955  08A3  1903               	skipnz
  7956  08A4  28A9               	goto	l8850
  7957  08A5  082B               	movf	setDelayOff_GO@value,w
  7958  08A6  390F               	andlw	15
  7959  08A7  1D03               	btfss	3,2
  7960  08A8  28AF               	goto	l8854
  7961  08A9                     l8850:	
  7962  08A9  3026               	movlw	38
  7963  08AA  022B               	subwf	setDelayOff_GO@value,w
  7964  08AB  1803               	skipnc
  7965  08AC  28AF               	goto	l8854
  7966                           
  7967                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7968  08AD  082B               	movf	setDelayOff_GO@value,w
  7969  08AE  28B0               	goto	L4
  7970  08AF                     l8854:	
  7971                           ;DelayOff_B1.c: 94: } else {
  7972                           
  7973                           
  7974                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7975  08AF  3005               	movlw	5
  7976  08B0                     L4:	
  7977  08B0  00AC               	movwf	??_setDelayOff_GO
  7978  08B1  082E               	movf	setDelayOff_GO@sw,w
  7979  08B2  3E1A               	addlw	26
  7980  08B3  076E               	addwf	_product,w
  7981  08B4  00AD               	movwf	??_setDelayOff_GO+1
  7982  08B5  082D               	movf	??_setDelayOff_GO+1,w
  7983  08B6  0086               	movwf	6
  7984  08B7  3002               	movlw	2	; select bank4/5
  7985  08B8  0087               	movwf	7
  7986  08B9  082C               	movf	??_setDelayOff_GO,w
  7987  08BA  0081               	movwf	1
  7988                           
  7989                           ;DelayOff_B1.c: 96: }
  7990                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7991  08BB  28C8               	goto	l8860
  7992  08BC                     l8856:	
  7993  08BC  08AA               	movf	setDelayOff_GO@command,f
  7994  08BD  1D03               	skipz
  7995  08BE  28C8               	goto	l8860
  7996                           
  7997                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7998  08BF  082E               	movf	setDelayOff_GO@sw,w
  7999  08C0  3E1A               	addlw	26
  8000  08C1  076E               	addwf	_product,w
  8001  08C2  00AC               	movwf	??_setDelayOff_GO
  8002  08C3  082C               	movf	??_setDelayOff_GO,w
  8003  08C4  0086               	movwf	6
  8004  08C5  3002               	movlw	2	; select bank4/5
  8005  08C6  0087               	movwf	7
  8006  08C7  0181               	clrf	1
  8007  08C8                     l8860:	
  8008                           
  8009                           ;DelayOff_B1.c: 99: }
  8010                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  8011  08C8  0878               	movf	_DelayOff,w
  8012  08C9  3E02               	addlw	2
  8013  08CA  0086               	movwf	6
  8014  08CB  3001               	movlw	1	; select bank2/3
  8015  08CC  0087               	movwf	7
  8016  08CD  3000               	movlw	0
  8017  08CE  3FC0               	movwi [0]fsr1
  8018  08CF  3FC1               	movwi [1]fsr1
  8019                           
  8020                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  8021  08D0  0878               	movf	_DelayOff,w
  8022  08D1  3E04               	addlw	4
  8023  08D2  0086               	movwf	6
  8024  08D3  3001               	movlw	1	; select bank2/3
  8025  08D4  0087               	movwf	7
  8026  08D5  0181               	clrf	1
  8027  08D6  0008               	return
  8028  08D7                     __end_of_setDelayOff_GO:	
  8029                           
  8030                           	psect	text34
  8031  1081                     __ptext34:	
  8032 ;; *************** function _DelayTimejudge *****************
  8033 ;; Defined at:
  8034 ;;		line 106 in file "../src/DelayOff_B1.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;  value           1    wreg     unsigned char 
  8037 ;; Auto vars:     Size  Location     Type
  8038 ;;  value           1    9[BANK0 ] unsigned char 
  8039 ;;  k               1    8[BANK0 ] unsigned char 
  8040 ;;  j               1    7[BANK0 ] unsigned char 
  8041 ;;  i               1    6[BANK0 ] unsigned char 
  8042 ;; Return value:  Size  Location     Type
  8043 ;;                  1    wreg      unsigned char 
  8044 ;; Registers used:
  8045 ;;		wreg, status,2, status,0, pclath, cstack
  8046 ;; Tracked objects:
  8047 ;;		On entry : 0/0
  8048 ;;		On exit  : 0/0
  8049 ;;		Unchanged: 0/0
  8050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8052 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8053 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8054 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;Total ram usage:        6 bytes
  8056 ;; Hardware stack levels used:    1
  8057 ;; Hardware stack levels required when called:    6
  8058 ;; This function calls:
  8059 ;;		___bmul
  8060 ;; This function is called by:
  8061 ;;		_setDelayOff_GO
  8062 ;; This function uses a non-reentrant model
  8063 ;;
  8064                           
  8065                           
  8066                           ;psect for function _DelayTimejudge
  8067  1081                     _DelayTimejudge:	
  8068                           
  8069                           ;incstack = 0
  8070                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  8071                           ;DelayTimejudge@value stored from wreg
  8072  1081  0020               	movlb	0	; select bank0
  8073  1082  00A9               	movwf	DelayTimejudge@value
  8074                           
  8075                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  8076  1083  3005               	movlw	5
  8077  1084  00A4               	movwf	??_DelayTimejudge
  8078  1085  0824               	movf	??_DelayTimejudge,w
  8079  1086  00A6               	movwf	DelayTimejudge@i
  8080  1087  01A7               	clrf	DelayTimejudge@j
  8081  1088  01A8               	clrf	DelayTimejudge@k
  8082                           
  8083                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  8084  1089  3031               	movlw	49
  8085  108A  0229               	subwf	DelayTimejudge@value,w
  8086  108B  1803               	skipnc
  8087  108C  28A9               	goto	l8642
  8088                           
  8089                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  8090  108D  0829               	movf	DelayTimejudge@value,w
  8091  108E  390F               	andlw	15
  8092  108F  00A4               	movwf	??_DelayTimejudge
  8093  1090  0824               	movf	??_DelayTimejudge,w
  8094  1091  00A7               	movwf	DelayTimejudge@j
  8095                           
  8096                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  8097  1092  0829               	movf	DelayTimejudge@value,w
  8098  1093  00A4               	movwf	??_DelayTimejudge
  8099  1094  3004               	movlw	4
  8100  1095                     u8895:	
  8101  1095  36A4               	lsrf	??_DelayTimejudge,f
  8102  1096  0B89               	decfsz	9,f
  8103  1097  2895               	goto	u8895
  8104  1098  0824               	movf	??_DelayTimejudge,w
  8105  1099  390F               	andlw	15
  8106  109A  00A5               	movwf	??_DelayTimejudge+1
  8107  109B  0825               	movf	??_DelayTimejudge+1,w
  8108  109C  00A8               	movwf	DelayTimejudge@k
  8109                           
  8110                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  8111  109D  300A               	movlw	10
  8112  109E  00A4               	movwf	??_DelayTimejudge
  8113  109F  0824               	movf	??_DelayTimejudge,w
  8114  10A0  00A0               	movwf	___bmul@multiplicand
  8115  10A1  0828               	movf	DelayTimejudge@k,w
  8116  10A2  319C  244F         	fcall	___bmul
  8117  10A4  0020               	movlb	0	; select bank0
  8118  10A5  0727               	addwf	DelayTimejudge@j,w
  8119  10A6  00A5               	movwf	??_DelayTimejudge+1
  8120  10A7  0825               	movf	??_DelayTimejudge+1,w
  8121  10A8  00A6               	movwf	DelayTimejudge@i
  8122  10A9                     l8642:	
  8123                           
  8124                           ;DelayOff_B1.c: 112: }
  8125                           ;DelayOff_B1.c: 133: return i;
  8126  10A9  0826               	movf	DelayTimejudge@i,w
  8127  10AA  0008               	return
  8128  10AB                     __end_of_DelayTimejudge:	
  8129                           
  8130                           	psect	text35
  8131  1C4F                     __ptext35:	
  8132 ;; *************** function ___bmul *****************
  8133 ;; Defined at:
  8134 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  8135 ;; Parameters:    Size  Location     Type
  8136 ;;  multiplier      1    wreg     unsigned char 
  8137 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;  multiplier      1    3[BANK0 ] unsigned char 
  8140 ;;  product         1    2[BANK0 ] unsigned char 
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  1    wreg      unsigned char 
  8143 ;; Registers used:
  8144 ;;		wreg, status,2, status,0
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8150 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;Total ram usage:        4 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; Hardware stack levels required when called:    5
  8157 ;; This function calls:
  8158 ;;		Nothing
  8159 ;; This function is called by:
  8160 ;;		_DelayTimejudge
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           
  8165                           ;psect for function ___bmul
  8166  1C4F                     ___bmul:	
  8167                           
  8168                           ;incstack = 0
  8169                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8170                           ;___bmul@multiplier stored from wreg
  8171  1C4F  0020               	movlb	0	; select bank0
  8172  1C50  00A3               	movwf	___bmul@multiplier
  8173  1C51  01A2               	clrf	___bmul@product
  8174  1C52                     l8608:	
  8175  1C52  1C23               	btfss	___bmul@multiplier,0
  8176  1C53  2C58               	goto	l8612
  8177  1C54  0820               	movf	___bmul@multiplicand,w
  8178  1C55  00A1               	movwf	??___bmul
  8179  1C56  0821               	movf	??___bmul,w
  8180  1C57  07A2               	addwf	___bmul@product,f
  8181  1C58                     l8612:	
  8182  1C58  1003               	clrc
  8183  1C59  0DA0               	rlf	___bmul@multiplicand,f
  8184  1C5A  1003               	clrc
  8185  1C5B  0CA3               	rrf	___bmul@multiplier,f
  8186  1C5C  08A3               	movf	___bmul@multiplier,f
  8187  1C5D  1D03               	skipz
  8188  1C5E  2C52               	goto	l8608
  8189  1C5F  0822               	movf	___bmul@product,w
  8190  1C60  0008               	return
  8191  1C61                     __end_of___bmul:	
  8192                           
  8193                           	psect	text36
  8194  123E                     __ptext36:	
  8195 ;; *************** function _setRFSW_AdjControl *****************
  8196 ;; Defined at:
  8197 ;;		line 366 in file "../src/RF_Control_B1.c"
  8198 ;; Parameters:    Size  Location     Type
  8199 ;;  sw              1    wreg     unsigned char 
  8200 ;; Auto vars:     Size  Location     Type
  8201 ;;  sw              1   70[BANK0 ] unsigned char 
  8202 ;; Return value:  Size  Location     Type
  8203 ;;		None               void
  8204 ;; Registers used:
  8205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8206 ;; Tracked objects:
  8207 ;;		On entry : 0/0
  8208 ;;		On exit  : 0/0
  8209 ;;		Unchanged: 0/0
  8210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8213 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;Total ram usage:        3 bytes
  8216 ;; Hardware stack levels used:    1
  8217 ;; Hardware stack levels required when called:   10
  8218 ;; This function calls:
  8219 ;;		_RfSWPointSelect
  8220 ;;		_setRF_DimmerValue
  8221 ;;		_setTxData
  8222 ;; This function is called by:
  8223 ;;		_setControl_Lights_Table
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           
  8228                           ;psect for function _setRFSW_AdjControl
  8229  123E                     _setRFSW_AdjControl:	
  8230                           
  8231                           ;incstack = 0
  8232                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8233                           ;setRFSW_AdjControl@sw stored from wreg
  8234  123E  0020               	movlb	0	; select bank0
  8235  123F  00E6               	movwf	setRFSW_AdjControl@sw
  8236                           
  8237                           ;RF_Control_B1.c: 367: RfSWPointSelect(sw);
  8238  1240  0866               	movf	setRFSW_AdjControl@sw,w
  8239  1241  319C  24ED  3192   	fcall	_RfSWPointSelect
  8240                           
  8241                           ;RF_Control_B1.c: 368: if (RFSW->Status == 1) {
  8242  1244  0021               	movlb	1	; select bank1
  8243  1245  0850               	movf	_RFSW^(0+128),w
  8244  1246  0086               	movwf	6
  8245  1247  0187               	clrf	7
  8246  1248  1C01               	btfss	1,0
  8247  1249  2A52               	goto	l9022
  8248                           
  8249                           ;RF_Control_B1.c: 369: Memory.Modify=1;
  8250  124A  0024               	movlb	4	; select bank4
  8251  124B  1444               	bsf	(_Memory^(0+512)+36),0
  8252                           
  8253                           ;RF_Control_B1.c: 370: setRF_DimmerValue(sw);
  8254  124C  0020               	movlb	0	; select bank0
  8255  124D  0866               	movf	setRFSW_AdjControl@sw,w
  8256  124E  3191  2164  3192   	fcall	_setRF_DimmerValue
  8257                           
  8258                           ;RF_Control_B1.c: 371: } else {
  8259  1251  2A64               	goto	l2334
  8260  1252                     l9022:	
  8261                           
  8262                           ;RF_Control_B1.c: 372: product->Data[9]=product->Data[20 + sw];
  8263  1252  0020               	movlb	0	; select bank0
  8264  1253  0866               	movf	setRFSW_AdjControl@sw,w
  8265  1254  3E14               	addlw	20
  8266  1255  076E               	addwf	_product,w
  8267  1256  00E4               	movwf	??_setRFSW_AdjControl
  8268  1257  0864               	movf	??_setRFSW_AdjControl,w
  8269  1258  0086               	movwf	6
  8270  1259  3002               	movlw	2	; select bank4/5
  8271  125A  0087               	movwf	7
  8272  125B  0801               	movf	1,w
  8273  125C  00E5               	movwf	??_setRFSW_AdjControl+1
  8274  125D  086E               	movf	_product,w
  8275  125E  3E09               	addlw	9
  8276  125F  0086               	movwf	6
  8277  1260  3002               	movlw	2	; select bank4/5
  8278  1261  0087               	movwf	7
  8279  1262  0865               	movf	??_setRFSW_AdjControl+1,w
  8280  1263  0081               	movwf	1
  8281  1264                     l2334:	
  8282                           
  8283                           ;RF_Control_B1.c: 373: }
  8284                           ;RF_Control_B1.c: 374: product->Data[17]=product->Data[26 + sw];
  8285  1264  0020               	movlb	0	; select bank0
  8286  1265  0866               	movf	setRFSW_AdjControl@sw,w
  8287  1266  3E1A               	addlw	26
  8288  1267  076E               	addwf	_product,w
  8289  1268  00E4               	movwf	??_setRFSW_AdjControl
  8290  1269  0864               	movf	??_setRFSW_AdjControl,w
  8291  126A  0086               	movwf	6
  8292  126B  3002               	movlw	2	; select bank4/5
  8293  126C  0087               	movwf	7
  8294  126D  0801               	movf	1,w
  8295  126E  00E5               	movwf	??_setRFSW_AdjControl+1
  8296  126F  086E               	movf	_product,w
  8297  1270  3E11               	addlw	17
  8298  1271  0086               	movwf	6
  8299  1272  3002               	movlw	2	; select bank4/5
  8300  1273  0087               	movwf	7
  8301  1274  0865               	movf	??_setRFSW_AdjControl+1,w
  8302  1275  0081               	movwf	1
  8303                           
  8304                           ;RF_Control_B1.c: 375: setTxData();
  8305  1276  3186  26A2         	fcall	_setTxData
  8306  1278  0008               	return
  8307  1279                     __end_of_setRFSW_AdjControl:	
  8308                           
  8309                           	psect	text37
  8310  1164                     __ptext37:	
  8311 ;; *************** function _setRF_DimmerValue *****************
  8312 ;; Defined at:
  8313 ;;		line 386 in file "../src/RF_Control_B1.c"
  8314 ;; Parameters:    Size  Location     Type
  8315 ;;  lights          1    wreg     unsigned char 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  lights          1   67[BANK0 ] unsigned char 
  8318 ;; Return value:  Size  Location     Type
  8319 ;;		None               void
  8320 ;; Registers used:
  8321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8329 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8330 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8331 ;;Total ram usage:        3 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:    9
  8334 ;; This function calls:
  8335 ;;		_setDimmerLights_AdjRF
  8336 ;; This function is called by:
  8337 ;;		_setRFSW_AdjControl
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           
  8342                           ;psect for function _setRF_DimmerValue
  8343  1164                     _setRF_DimmerValue:	
  8344                           
  8345                           ;incstack = 0
  8346                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8347                           ;setRF_DimmerValue@lights stored from wreg
  8348  1164  0020               	movlb	0	; select bank0
  8349  1165  00E3               	movwf	setRF_DimmerValue@lights
  8350                           
  8351                           ;RF_Control_B1.c: 387: if (RF_Data[9] > 0x64) {
  8352  1166  3065               	movlw	101
  8353  1167  0022               	movlb	2	; select bank2
  8354  1168  0229               	subwf	(_RF_Data^(0+256)+9),w
  8355  1169  1C03               	skipc
  8356  116A  2971               	goto	l8918
  8357                           
  8358                           ;RF_Control_B1.c: 388: RF_Data[9] = 0x64;
  8359  116B  3064               	movlw	100
  8360  116C  0020               	movlb	0	; select bank0
  8361  116D  00E1               	movwf	??_setRF_DimmerValue
  8362  116E  0861               	movf	??_setRF_DimmerValue,w
  8363  116F  0022               	movlb	2	; select bank2
  8364  1170  00A9               	movwf	(_RF_Data^(0+256)+9)
  8365  1171                     l8918:	
  8366                           
  8367                           ;RF_Control_B1.c: 389: }
  8368                           ;RF_Control_B1.c: 390: product->Data[9]=RF_Data[9];
  8369  1171  0829               	movf	(_RF_Data^(0+256)+9),w
  8370  1172  0020               	movlb	0	; select bank0
  8371  1173  00E1               	movwf	??_setRF_DimmerValue
  8372  1174  086E               	movf	_product,w
  8373  1175  3E09               	addlw	9
  8374  1176  0086               	movwf	6
  8375  1177  3002               	movlw	2	; select bank4/5
  8376  1178  0087               	movwf	7
  8377  1179  0861               	movf	??_setRF_DimmerValue,w
  8378  117A  0081               	movwf	1
  8379                           
  8380                           ;RF_Control_B1.c: 391: product->Data[11]=lights;
  8381  117B  0863               	movf	setRF_DimmerValue@lights,w
  8382  117C  00E1               	movwf	??_setRF_DimmerValue
  8383  117D  086E               	movf	_product,w
  8384  117E  3E0B               	addlw	11
  8385  117F  0086               	movwf	6
  8386  1180  3002               	movlw	2	; select bank4/5
  8387  1181  0087               	movwf	7
  8388  1182  0861               	movf	??_setRF_DimmerValue,w
  8389  1183  0081               	movwf	1
  8390                           
  8391                           ;RF_Control_B1.c: 392: product->Data[(20 + lights)]=product->Data[9];
  8392  1184  086E               	movf	_product,w
  8393  1185  3E09               	addlw	9
  8394  1186  0086               	movwf	6
  8395  1187  3002               	movlw	2	; select bank4/5
  8396  1188  0087               	movwf	7
  8397  1189  0801               	movf	1,w
  8398  118A  00E1               	movwf	??_setRF_DimmerValue
  8399  118B  0863               	movf	setRF_DimmerValue@lights,w
  8400  118C  3E14               	addlw	20
  8401  118D  076E               	addwf	_product,w
  8402  118E  00E2               	movwf	??_setRF_DimmerValue+1
  8403  118F  0862               	movf	??_setRF_DimmerValue+1,w
  8404  1190  0086               	movwf	6
  8405  1191  3002               	movlw	2	; select bank4/5
  8406  1192  0087               	movwf	7
  8407  1193  0861               	movf	??_setRF_DimmerValue,w
  8408  1194  0081               	movwf	1
  8409                           
  8410                           ;RF_Control_B1.c: 393: setDimmerLights_AdjRF(lights);
  8411  1195  0863               	movf	setRF_DimmerValue@lights,w
  8412  1196  319F  2766         	fcall	_setDimmerLights_AdjRF
  8413  1198  0008               	return
  8414  1199                     __end_of_setRF_DimmerValue:	
  8415                           
  8416                           	psect	text38
  8417  1F66                     __ptext38:	
  8418 ;; *************** function _setDimmerLights_AdjRF *****************
  8419 ;; Defined at:
  8420 ;;		line 679 in file "../src/Dimmer_B1.c"
  8421 ;; Parameters:    Size  Location     Type
  8422 ;;  lights          1    wreg     unsigned char 
  8423 ;; Auto vars:     Size  Location     Type
  8424 ;;  lights          1   64[BANK0 ] unsigned char 
  8425 ;; Return value:  Size  Location     Type
  8426 ;;		None               void
  8427 ;; Registers used:
  8428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8429 ;; Tracked objects:
  8430 ;;		On entry : 0/0
  8431 ;;		On exit  : 0/0
  8432 ;;		Unchanged: 0/0
  8433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8436 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;Total ram usage:        2 bytes
  8439 ;; Hardware stack levels used:    1
  8440 ;; Hardware stack levels required when called:    8
  8441 ;; This function calls:
  8442 ;;		_DimmerLightsPointSelect
  8443 ;;		_getPercentValue
  8444 ;; This function is called by:
  8445 ;;		_setRF_DimmerValue
  8446 ;; This function uses a non-reentrant model
  8447 ;;
  8448                           
  8449                           
  8450                           ;psect for function _setDimmerLights_AdjRF
  8451  1F66                     _setDimmerLights_AdjRF:	
  8452                           
  8453                           ;incstack = 0
  8454                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8455                           ;setDimmerLights_AdjRF@lights stored from wreg
  8456  1F66  0020               	movlb	0	; select bank0
  8457  1F67  00E0               	movwf	setDimmerLights_AdjRF@lights
  8458                           
  8459                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  8460  1F68  0860               	movf	setDimmerLights_AdjRF@lights,w
  8461  1F69  319C  2473  319F   	fcall	_DimmerLightsPointSelect
  8462                           
  8463                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  8464  1F6C  0879               	movf	_DimmerLights,w
  8465  1F6D  0086               	movwf	6
  8466  1F6E  3001               	movlw	1	; select bank2/3
  8467  1F6F  0087               	movwf	7
  8468  1F70  1501               	bsf	1,2
  8469                           
  8470                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  8471  1F71  0879               	movf	_DimmerLights,w
  8472  1F72  0086               	movwf	6
  8473  1F73  3001               	movlw	1	; select bank2/3
  8474  1F74  0087               	movwf	7
  8475  1F75  1481               	bsf	1,1
  8476                           
  8477                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8478  1F76  0020               	movlb	0	; select bank0
  8479  1F77  086E               	movf	_product,w
  8480  1F78  3E09               	addlw	9
  8481  1F79  0086               	movwf	6
  8482  1F7A  3002               	movlw	2	; select bank4/5
  8483  1F7B  0087               	movwf	7
  8484  1F7C  0801               	movf	1,w
  8485  1F7D  3196  26E2         	fcall	_getPercentValue
  8486  1F7F  0020               	movlb	0	; select bank0
  8487  1F80  00DF               	movwf	??_setDimmerLights_AdjRF
  8488  1F81  0879               	movf	_DimmerLights,w
  8489  1F82  3E05               	addlw	5
  8490  1F83  0086               	movwf	6
  8491  1F84  3001               	movlw	1	; select bank2/3
  8492  1F85  0087               	movwf	7
  8493  1F86  085F               	movf	??_setDimmerLights_AdjRF,w
  8494  1F87  0081               	movwf	1
  8495  1F88  0008               	return
  8496  1F89                     __end_of_setDimmerLights_AdjRF:	
  8497                           
  8498                           	psect	text39
  8499  16E2                     __ptext39:	
  8500 ;; *************** function _getPercentValue *****************
  8501 ;; Defined at:
  8502 ;;		line 752 in file "../src/Dimmer_B1.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;  value           1    wreg     unsigned char 
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;  value           1   59[BANK0 ] unsigned char 
  8507 ;;  i               3   60[BANK0 ] float 
  8508 ;; Return value:  Size  Location     Type
  8509 ;;                  1    wreg      unsigned char 
  8510 ;; Registers used:
  8511 ;;		wreg, status,2, status,0, pclath, cstack
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8518 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;Total ram usage:        6 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    7
  8524 ;; This function calls:
  8525 ;;		___awtoft
  8526 ;;		___ftadd
  8527 ;;		___ftdiv
  8528 ;;		___ftmul
  8529 ;;		___fttol
  8530 ;; This function is called by:
  8531 ;;		_setDimmerLights_AdjRF
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           
  8536                           ;psect for function _getPercentValue
  8537  16E2                     _getPercentValue:	
  8538                           
  8539                           ;incstack = 0
  8540                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8541                           ;getPercentValue@value stored from wreg
  8542  16E2  0020               	movlb	0	; select bank0
  8543  16E3  00DB               	movwf	getPercentValue@value
  8544                           
  8545                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8546  16E4  3000               	movlw	0
  8547  16E5  00DC               	movwf	getPercentValue@i
  8548  16E6  30E0               	movlw	224
  8549  16E7  00DD               	movwf	getPercentValue@i+1
  8550  16E8  3041               	movlw	65
  8551  16E9  00DE               	movwf	getPercentValue@i+2
  8552                           
  8553                           ;Dimmer_B1.c: 755: i /= 100;
  8554  16EA  3000               	movlw	0
  8555  16EB  00AE               	movwf	___ftdiv@f2
  8556  16EC  30C8               	movlw	200
  8557  16ED  00AF               	movwf	___ftdiv@f2+1
  8558  16EE  3042               	movlw	66
  8559  16EF  00B0               	movwf	___ftdiv@f2+2
  8560  16F0  085C               	movf	getPercentValue@i,w
  8561  16F1  00B1               	movwf	___ftdiv@f1
  8562  16F2  085D               	movf	getPercentValue@i+1,w
  8563  16F3  00B2               	movwf	___ftdiv@f1+1
  8564  16F4  085E               	movf	getPercentValue@i+2,w
  8565  16F5  00B3               	movwf	___ftdiv@f1+2
  8566  16F6  318E  26A3  3196   	fcall	___ftdiv
  8567  16F9  0020               	movlb	0	; select bank0
  8568  16FA  082E               	movf	?___ftdiv,w
  8569  16FB  00DC               	movwf	getPercentValue@i
  8570  16FC  082F               	movf	?___ftdiv+1,w
  8571  16FD  00DD               	movwf	getPercentValue@i+1
  8572  16FE  0830               	movf	?___ftdiv+2,w
  8573  16FF  00DE               	movwf	getPercentValue@i+2
  8574                           
  8575                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8576  1700  085B               	movf	getPercentValue@value,w
  8577  1701  00D9               	movwf	??_getPercentValue
  8578  1702  01DA               	clrf	??_getPercentValue+1
  8579  1703  09D9               	comf	??_getPercentValue,f
  8580  1704  09DA               	comf	??_getPercentValue+1,f
  8581  1705  0AD9               	incf	??_getPercentValue,f
  8582  1706  1903               	skipnz
  8583  1707  0ADA               	incf	??_getPercentValue+1,f
  8584  1708  0859               	movf	??_getPercentValue,w
  8585  1709  3E64               	addlw	100
  8586  170A  00A8               	movwf	___awtoft@c
  8587  170B  3000               	movlw	0
  8588  170C  3D5A               	addwfc	??_getPercentValue+1,w
  8589  170D  00A9               	movwf	___awtoft@c+1
  8590  170E  319E  26DD  3196   	fcall	___awtoft
  8591  1711  0020               	movlb	0	; select bank0
  8592  1712  0828               	movf	?___awtoft,w
  8593  1713  00B1               	movwf	___ftmul@f2
  8594  1714  0829               	movf	?___awtoft+1,w
  8595  1715  00B2               	movwf	___ftmul@f2+1
  8596  1716  082A               	movf	?___awtoft+2,w
  8597  1717  00B3               	movwf	___ftmul@f2+2
  8598  1718  085C               	movf	getPercentValue@i,w
  8599  1719  00AE               	movwf	___ftmul@f1
  8600  171A  085D               	movf	getPercentValue@i+1,w
  8601  171B  00AF               	movwf	___ftmul@f1+1
  8602  171C  085E               	movf	getPercentValue@i+2,w
  8603  171D  00B0               	movwf	___ftmul@f1+2
  8604  171E  318F  274C  3196   	fcall	___ftmul
  8605  1721  0020               	movlb	0	; select bank0
  8606  1722  082E               	movf	?___ftmul,w
  8607  1723  00C1               	movwf	___ftadd@f2
  8608  1724  082F               	movf	?___ftmul+1,w
  8609  1725  00C2               	movwf	___ftadd@f2+1
  8610  1726  0830               	movf	?___ftmul+2,w
  8611  1727  00C3               	movwf	___ftadd@f2+2
  8612  1728  3000               	movlw	0
  8613  1729  00BE               	movwf	___ftadd@f1
  8614  172A  3000               	movlw	0
  8615  172B  00BF               	movwf	___ftadd@f1+1
  8616  172C  3042               	movlw	66
  8617  172D  00C0               	movwf	___ftadd@f1+2
  8618  172E  3184  24E5  3196   	fcall	___ftadd
  8619  1731  0020               	movlb	0	; select bank0
  8620  1732  083E               	movf	?___ftadd,w
  8621  1733  00CB               	movwf	___fttol@f1
  8622  1734  083F               	movf	?___ftadd+1,w
  8623  1735  00CC               	movwf	___fttol@f1+1
  8624  1736  0840               	movf	?___ftadd+2,w
  8625  1737  00CD               	movwf	___fttol@f1+2
  8626  1738  318D  2507         	fcall	___fttol
  8627  173A  0020               	movlb	0	; select bank0
  8628  173B  084B               	movf	?___fttol,w
  8629  173C  0008               	return
  8630  173D                     __end_of_getPercentValue:	
  8631                           
  8632                           	psect	text40
  8633  0F4C                     __ptext40:	
  8634 ;; *************** function ___ftmul *****************
  8635 ;; Defined at:
  8636 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8637 ;; Parameters:    Size  Location     Type
  8638 ;;  f1              3   14[BANK0 ] float 
  8639 ;;  f2              3   17[BANK0 ] float 
  8640 ;; Auto vars:     Size  Location     Type
  8641 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8642 ;;  sign            1   29[BANK0 ] unsigned char 
  8643 ;;  cntr            1   28[BANK0 ] unsigned char 
  8644 ;;  exp             1   24[BANK0 ] unsigned char 
  8645 ;; Return value:  Size  Location     Type
  8646 ;;                  3   14[BANK0 ] float 
  8647 ;; Registers used:
  8648 ;;		wreg, status,2, status,0, pclath, cstack
  8649 ;; Tracked objects:
  8650 ;;		On entry : 0/0
  8651 ;;		On exit  : 0/0
  8652 ;;		Unchanged: 0/0
  8653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8654 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;Total ram usage:       16 bytes
  8659 ;; Hardware stack levels used:    1
  8660 ;; Hardware stack levels required when called:    6
  8661 ;; This function calls:
  8662 ;;		___ftpack
  8663 ;; This function is called by:
  8664 ;;		_getPercentValue
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           
  8669                           ;psect for function ___ftmul
  8670  0F4C                     ___ftmul:	
  8671                           
  8672                           ;incstack = 0
  8673                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8674  0F4C  0020               	movlb	0	; select bank0
  8675  0F4D  082E               	movf	___ftmul@f1,w
  8676  0F4E  00B4               	movwf	??___ftmul
  8677  0F4F  082F               	movf	___ftmul@f1+1,w
  8678  0F50  00B5               	movwf	??___ftmul+1
  8679  0F51  0830               	movf	___ftmul@f1+2,w
  8680  0F52  00B6               	movwf	??___ftmul+2
  8681  0F53  1003               	clrc
  8682  0F54  0D35               	rlf	??___ftmul+1,w
  8683  0F55  0D36               	rlf	??___ftmul+2,w
  8684  0F56  00B7               	movwf	??___ftmul+3
  8685  0F57  0837               	movf	??___ftmul+3,w
  8686  0F58  00B8               	movwf	___ftmul@exp
  8687  0F59  08B8               	movf	___ftmul@exp,f
  8688  0F5A  1D03               	skipz
  8689  0F5B  2F63               	goto	l8504
  8690  0F5C  3000               	movlw	0
  8691  0F5D  00AE               	movwf	?___ftmul
  8692  0F5E  3000               	movlw	0
  8693  0F5F  00AF               	movwf	?___ftmul+1
  8694  0F60  3000               	movlw	0
  8695  0F61  00B0               	movwf	?___ftmul+2
  8696  0F62  0008               	return
  8697  0F63                     l8504:	
  8698  0F63  0831               	movf	___ftmul@f2,w
  8699  0F64  00B4               	movwf	??___ftmul
  8700  0F65  0832               	movf	___ftmul@f2+1,w
  8701  0F66  00B5               	movwf	??___ftmul+1
  8702  0F67  0833               	movf	___ftmul@f2+2,w
  8703  0F68  00B6               	movwf	??___ftmul+2
  8704  0F69  1003               	clrc
  8705  0F6A  0D35               	rlf	??___ftmul+1,w
  8706  0F6B  0D36               	rlf	??___ftmul+2,w
  8707  0F6C  00B7               	movwf	??___ftmul+3
  8708  0F6D  0837               	movf	??___ftmul+3,w
  8709  0F6E  00BD               	movwf	___ftmul@sign
  8710  0F6F  08BD               	movf	___ftmul@sign,f
  8711  0F70  1D03               	skipz
  8712  0F71  2F79               	goto	l8510
  8713  0F72  3000               	movlw	0
  8714  0F73  00AE               	movwf	?___ftmul
  8715  0F74  3000               	movlw	0
  8716  0F75  00AF               	movwf	?___ftmul+1
  8717  0F76  3000               	movlw	0
  8718  0F77  00B0               	movwf	?___ftmul+2
  8719  0F78  0008               	return
  8720  0F79                     l8510:	
  8721  0F79  083D               	movf	___ftmul@sign,w
  8722  0F7A  3E7B               	addlw	123
  8723  0F7B  00B4               	movwf	??___ftmul
  8724  0F7C  0834               	movf	??___ftmul,w
  8725  0F7D  07B8               	addwf	___ftmul@exp,f
  8726  0F7E  082E               	movf	___ftmul@f1,w
  8727  0F7F  00B4               	movwf	??___ftmul
  8728  0F80  082F               	movf	___ftmul@f1+1,w
  8729  0F81  00B5               	movwf	??___ftmul+1
  8730  0F82  0830               	movf	___ftmul@f1+2,w
  8731  0F83  00B6               	movwf	??___ftmul+2
  8732  0F84  3010               	movlw	16
  8733  0F85                     u8625:	
  8734  0F85  36B6               	lsrf	??___ftmul+2,f
  8735  0F86  0CB5               	rrf	??___ftmul+1,f
  8736  0F87  0CB4               	rrf	??___ftmul,f
  8737  0F88  0B89               	decfsz	9,f
  8738  0F89  2F85               	goto	u8625
  8739  0F8A  0834               	movf	??___ftmul,w
  8740  0F8B  00B7               	movwf	??___ftmul+3
  8741  0F8C  0837               	movf	??___ftmul+3,w
  8742  0F8D  00BD               	movwf	___ftmul@sign
  8743  0F8E  0831               	movf	___ftmul@f2,w
  8744  0F8F  00B4               	movwf	??___ftmul
  8745  0F90  0832               	movf	___ftmul@f2+1,w
  8746  0F91  00B5               	movwf	??___ftmul+1
  8747  0F92  0833               	movf	___ftmul@f2+2,w
  8748  0F93  00B6               	movwf	??___ftmul+2
  8749  0F94  3010               	movlw	16
  8750  0F95                     u8635:	
  8751  0F95  36B6               	lsrf	??___ftmul+2,f
  8752  0F96  0CB5               	rrf	??___ftmul+1,f
  8753  0F97  0CB4               	rrf	??___ftmul,f
  8754  0F98  0B89               	decfsz	9,f
  8755  0F99  2F95               	goto	u8635
  8756  0F9A  0834               	movf	??___ftmul,w
  8757  0F9B  00B7               	movwf	??___ftmul+3
  8758  0F9C  0837               	movf	??___ftmul+3,w
  8759  0F9D  06BD               	xorwf	___ftmul@sign,f
  8760  0F9E  3080               	movlw	128
  8761  0F9F  00B4               	movwf	??___ftmul
  8762  0FA0  0834               	movf	??___ftmul,w
  8763  0FA1  05BD               	andwf	___ftmul@sign,f
  8764  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8765  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8766  0FA4  30FF               	movlw	255
  8767  0FA5  05B1               	andwf	___ftmul@f2,f
  8768  0FA6  30FF               	movlw	255
  8769  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8770  0FA8  3000               	movlw	0
  8771  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8772  0FAA  3000               	movlw	0
  8773  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8774  0FAC  3000               	movlw	0
  8775  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8776  0FAE  3000               	movlw	0
  8777  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8778  0FB0  3007               	movlw	7
  8779  0FB1  00B4               	movwf	??___ftmul
  8780  0FB2  0834               	movf	??___ftmul,w
  8781  0FB3  00BC               	movwf	___ftmul@cntr
  8782  0FB4                     l8522:	
  8783  0FB4  1C2E               	btfss	___ftmul@f1,0
  8784  0FB5  2FBC               	goto	l8526
  8785  0FB6  0831               	movf	___ftmul@f2,w
  8786  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8787  0FB8  0832               	movf	___ftmul@f2+1,w
  8788  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8789  0FBA  0833               	movf	___ftmul@f2+2,w
  8790  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8791  0FBC                     l8526:	
  8792  0FBC  3001               	movlw	1
  8793  0FBD                     u8655:	
  8794  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8795  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8796  0FBF  0CAE               	rrf	___ftmul@f1,f
  8797  0FC0  0B89               	decfsz	9,f
  8798  0FC1  2FBD               	goto	u8655
  8799  0FC2  3001               	movlw	1
  8800  0FC3                     u8665:	
  8801  0FC3  35B1               	lslf	___ftmul@f2,f
  8802  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8803  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8804  0FC6  0B89               	decfsz	9,f
  8805  0FC7  2FC3               	goto	u8665
  8806  0FC8  3001               	movlw	1
  8807  0FC9  02BC               	subwf	___ftmul@cntr,f
  8808  0FCA  1D03               	btfss	3,2
  8809  0FCB  2FB4               	goto	l8522
  8810  0FCC  3009               	movlw	9
  8811  0FCD  00B4               	movwf	??___ftmul
  8812  0FCE  0834               	movf	??___ftmul,w
  8813  0FCF  00BC               	movwf	___ftmul@cntr
  8814  0FD0                     l8534:	
  8815  0FD0  1C2E               	btfss	___ftmul@f1,0
  8816  0FD1  2FD8               	goto	l8538
  8817  0FD2  0831               	movf	___ftmul@f2,w
  8818  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8819  0FD4  0832               	movf	___ftmul@f2+1,w
  8820  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8821  0FD6  0833               	movf	___ftmul@f2+2,w
  8822  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8823  0FD8                     l8538:	
  8824  0FD8  3001               	movlw	1
  8825  0FD9                     u8695:	
  8826  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8827  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8828  0FDB  0CAE               	rrf	___ftmul@f1,f
  8829  0FDC  0B89               	decfsz	9,f
  8830  0FDD  2FD9               	goto	u8695
  8831  0FDE  3001               	movlw	1
  8832  0FDF                     u8705:	
  8833  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8834  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8835  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8836  0FE2  0B89               	decfsz	9,f
  8837  0FE3  2FDF               	goto	u8705
  8838  0FE4  3001               	movlw	1
  8839  0FE5  02BC               	subwf	___ftmul@cntr,f
  8840  0FE6  1D03               	btfss	3,2
  8841  0FE7  2FD0               	goto	l8534
  8842  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8843  0FE9  00A0               	movwf	___ftpack@arg
  8844  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8845  0FEB  00A1               	movwf	___ftpack@arg+1
  8846  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8847  0FED  00A2               	movwf	___ftpack@arg+2
  8848  0FEE  0838               	movf	___ftmul@exp,w
  8849  0FEF  00B4               	movwf	??___ftmul
  8850  0FF0  0834               	movf	??___ftmul,w
  8851  0FF1  00A3               	movwf	___ftpack@exp
  8852  0FF2  083D               	movf	___ftmul@sign,w
  8853  0FF3  00B5               	movwf	??___ftmul+1
  8854  0FF4  0835               	movf	??___ftmul+1,w
  8855  0FF5  00A4               	movwf	___ftpack@sign
  8856  0FF6  3197  273D         	fcall	___ftpack
  8857  0FF8  0020               	movlb	0	; select bank0
  8858  0FF9  0820               	movf	?___ftpack,w
  8859  0FFA  00AE               	movwf	?___ftmul
  8860  0FFB  0821               	movf	?___ftpack+1,w
  8861  0FFC  00AF               	movwf	?___ftmul+1
  8862  0FFD  0822               	movf	?___ftpack+2,w
  8863  0FFE  00B0               	movwf	?___ftmul+2
  8864  0FFF  0008               	return
  8865  1000                     __end_of___ftmul:	
  8866                           
  8867                           	psect	text41
  8868  04E5                     __ptext41:	
  8869 ;; *************** function ___ftadd *****************
  8870 ;; Defined at:
  8871 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8872 ;; Parameters:    Size  Location     Type
  8873 ;;  f1              3   30[BANK0 ] float 
  8874 ;;  f2              3   33[BANK0 ] float 
  8875 ;; Auto vars:     Size  Location     Type
  8876 ;;  exp1            1   42[BANK0 ] unsigned char 
  8877 ;;  exp2            1   41[BANK0 ] unsigned char 
  8878 ;;  sign            1   40[BANK0 ] unsigned char 
  8879 ;; Return value:  Size  Location     Type
  8880 ;;                  3   30[BANK0 ] float 
  8881 ;; Registers used:
  8882 ;;		wreg, status,2, status,0, pclath, cstack
  8883 ;; Tracked objects:
  8884 ;;		On entry : 0/0
  8885 ;;		On exit  : 0/0
  8886 ;;		Unchanged: 0/0
  8887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8888 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;Total ram usage:       13 bytes
  8893 ;; Hardware stack levels used:    1
  8894 ;; Hardware stack levels required when called:    6
  8895 ;; This function calls:
  8896 ;;		___ftpack
  8897 ;; This function is called by:
  8898 ;;		_getPercentValue
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           
  8903                           ;psect for function ___ftadd
  8904  04E5                     ___ftadd:	
  8905                           
  8906                           ;incstack = 0
  8907                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8908  04E5  0020               	movlb	0	; select bank0
  8909  04E6  083E               	movf	___ftadd@f1,w
  8910  04E7  00C4               	movwf	??___ftadd
  8911  04E8  083F               	movf	___ftadd@f1+1,w
  8912  04E9  00C5               	movwf	??___ftadd+1
  8913  04EA  0840               	movf	___ftadd@f1+2,w
  8914  04EB  00C6               	movwf	??___ftadd+2
  8915  04EC  1003               	clrc
  8916  04ED  0D45               	rlf	??___ftadd+1,w
  8917  04EE  0D46               	rlf	??___ftadd+2,w
  8918  04EF  00C7               	movwf	??___ftadd+3
  8919  04F0  0847               	movf	??___ftadd+3,w
  8920  04F1  00CA               	movwf	___ftadd@exp1
  8921  04F2  0841               	movf	___ftadd@f2,w
  8922  04F3  00C4               	movwf	??___ftadd
  8923  04F4  0842               	movf	___ftadd@f2+1,w
  8924  04F5  00C5               	movwf	??___ftadd+1
  8925  04F6  0843               	movf	___ftadd@f2+2,w
  8926  04F7  00C6               	movwf	??___ftadd+2
  8927  04F8  1003               	clrc
  8928  04F9  0D45               	rlf	??___ftadd+1,w
  8929  04FA  0D46               	rlf	??___ftadd+2,w
  8930  04FB  00C7               	movwf	??___ftadd+3
  8931  04FC  0847               	movf	??___ftadd+3,w
  8932  04FD  00C9               	movwf	___ftadd@exp2
  8933  04FE  084A               	movf	___ftadd@exp1,w
  8934  04FF  1903               	btfsc	3,2
  8935  0500  2D0D               	goto	l8392
  8936  0501  0849               	movf	___ftadd@exp2,w
  8937  0502  024A               	subwf	___ftadd@exp1,w
  8938  0503  1803               	skipnc
  8939  0504  2D14               	goto	l8396
  8940  0505  034A               	decf	___ftadd@exp1,w
  8941  0506  3AFF               	xorlw	255
  8942  0507  0749               	addwf	___ftadd@exp2,w
  8943  0508  00C4               	movwf	??___ftadd
  8944  0509  3019               	movlw	25
  8945  050A  0244               	subwf	??___ftadd,w
  8946  050B  1C03               	skipc
  8947  050C  2D14               	goto	l8396
  8948  050D                     l8392:	
  8949  050D  0841               	movf	___ftadd@f2,w
  8950  050E  00BE               	movwf	?___ftadd
  8951  050F  0842               	movf	___ftadd@f2+1,w
  8952  0510  00BF               	movwf	?___ftadd+1
  8953  0511  0843               	movf	___ftadd@f2+2,w
  8954  0512  00C0               	movwf	?___ftadd+2
  8955  0513  0008               	return
  8956  0514                     l8396:	
  8957  0514  0849               	movf	___ftadd@exp2,w
  8958  0515  1903               	btfsc	3,2
  8959  0516  0008               	return
  8960  0517  084A               	movf	___ftadd@exp1,w
  8961  0518  0249               	subwf	___ftadd@exp2,w
  8962  0519  1803               	skipnc
  8963  051A  2D23               	goto	l8402
  8964  051B  0349               	decf	___ftadd@exp2,w
  8965  051C  3AFF               	xorlw	255
  8966  051D  074A               	addwf	___ftadd@exp1,w
  8967  051E  00C4               	movwf	??___ftadd
  8968  051F  3019               	movlw	25
  8969  0520  0244               	subwf	??___ftadd,w
  8970  0521  1803               	btfsc	3,0
  8971  0522  0008               	return
  8972  0523                     l8402:	
  8973  0523  3006               	movlw	6
  8974  0524  00C4               	movwf	??___ftadd
  8975  0525  0844               	movf	??___ftadd,w
  8976  0526  00C8               	movwf	___ftadd@sign
  8977  0527  1BC0               	btfsc	___ftadd@f1+2,7
  8978  0528  17C8               	bsf	___ftadd@sign,7
  8979  0529  1BC3               	btfsc	___ftadd@f2+2,7
  8980  052A  1748               	bsf	___ftadd@sign,6
  8981  052B  17BF               	bsf	___ftadd@f1+1,7
  8982  052C  30FF               	movlw	255
  8983  052D  05BE               	andwf	___ftadd@f1,f
  8984  052E  30FF               	movlw	255
  8985  052F  05BF               	andwf	___ftadd@f1+1,f
  8986  0530  3000               	movlw	0
  8987  0531  05C0               	andwf	___ftadd@f1+2,f
  8988  0532  17C2               	bsf	___ftadd@f2+1,7
  8989  0533  30FF               	movlw	255
  8990  0534  05C1               	andwf	___ftadd@f2,f
  8991  0535  30FF               	movlw	255
  8992  0536  05C2               	andwf	___ftadd@f2+1,f
  8993  0537  3000               	movlw	0
  8994  0538  05C3               	andwf	___ftadd@f2+2,f
  8995  0539  0849               	movf	___ftadd@exp2,w
  8996  053A  024A               	subwf	___ftadd@exp1,w
  8997  053B  1803               	skipnc
  8998  053C  2D5F               	goto	l8424
  8999  053D                     l8414:	
  9000  053D  3001               	movlw	1
  9001  053E                     u8385:	
  9002  053E  35C1               	lslf	___ftadd@f2,f
  9003  053F  0DC2               	rlf	___ftadd@f2+1,f
  9004  0540  0DC3               	rlf	___ftadd@f2+2,f
  9005  0541  0B89               	decfsz	9,f
  9006  0542  2D3E               	goto	u8385
  9007  0543  3001               	movlw	1
  9008  0544  02C9               	subwf	___ftadd@exp2,f
  9009  0545  0849               	movf	___ftadd@exp2,w
  9010  0546  064A               	xorwf	___ftadd@exp1,w
  9011  0547  1903               	skipnz
  9012  0548  2D5A               	goto	l8422
  9013  0549  3001               	movlw	1
  9014  054A  02C8               	subwf	___ftadd@sign,f
  9015  054B  0848               	movf	___ftadd@sign,w
  9016  054C  3907               	andlw	7
  9017  054D  1903               	btfsc	3,2
  9018  054E  2D5A               	goto	l8422
  9019  054F  2D3D               	goto	l8414
  9020  0550                     l8420:	
  9021  0550  3001               	movlw	1
  9022  0551                     u8415:	
  9023  0551  36C0               	lsrf	___ftadd@f1+2,f
  9024  0552  0CBF               	rrf	___ftadd@f1+1,f
  9025  0553  0CBE               	rrf	___ftadd@f1,f
  9026  0554  0B89               	decfsz	9,f
  9027  0555  2D51               	goto	u8415
  9028  0556  3001               	movlw	1
  9029  0557  00C4               	movwf	??___ftadd
  9030  0558  0844               	movf	??___ftadd,w
  9031  0559  07CA               	addwf	___ftadd@exp1,f
  9032  055A                     l8422:	
  9033  055A  084A               	movf	___ftadd@exp1,w
  9034  055B  0649               	xorwf	___ftadd@exp2,w
  9035  055C  1903               	btfsc	3,2
  9036  055D  2D84               	goto	l3039
  9037  055E  2D50               	goto	l8420
  9038  055F                     l8424:	
  9039  055F  084A               	movf	___ftadd@exp1,w
  9040  0560  0249               	subwf	___ftadd@exp2,w
  9041  0561  1803               	skipnc
  9042  0562  2D84               	goto	l3039
  9043  0563                     l8426:	
  9044  0563  3001               	movlw	1
  9045  0564                     u8445:	
  9046  0564  35BE               	lslf	___ftadd@f1,f
  9047  0565  0DBF               	rlf	___ftadd@f1+1,f
  9048  0566  0DC0               	rlf	___ftadd@f1+2,f
  9049  0567  0B89               	decfsz	9,f
  9050  0568  2D64               	goto	u8445
  9051  0569  3001               	movlw	1
  9052  056A  02CA               	subwf	___ftadd@exp1,f
  9053  056B  0849               	movf	___ftadd@exp2,w
  9054  056C  064A               	xorwf	___ftadd@exp1,w
  9055  056D  1903               	skipnz
  9056  056E  2D80               	goto	l8434
  9057  056F  3001               	movlw	1
  9058  0570  02C8               	subwf	___ftadd@sign,f
  9059  0571  0848               	movf	___ftadd@sign,w
  9060  0572  3907               	andlw	7
  9061  0573  1903               	btfsc	3,2
  9062  0574  2D80               	goto	l8434
  9063  0575  2D63               	goto	l8426
  9064  0576                     l8432:	
  9065  0576  3001               	movlw	1
  9066  0577                     u8475:	
  9067  0577  36C3               	lsrf	___ftadd@f2+2,f
  9068  0578  0CC2               	rrf	___ftadd@f2+1,f
  9069  0579  0CC1               	rrf	___ftadd@f2,f
  9070  057A  0B89               	decfsz	9,f
  9071  057B  2D77               	goto	u8475
  9072  057C  3001               	movlw	1
  9073  057D  00C4               	movwf	??___ftadd
  9074  057E  0844               	movf	??___ftadd,w
  9075  057F  07C9               	addwf	___ftadd@exp2,f
  9076  0580                     l8434:	
  9077  0580  084A               	movf	___ftadd@exp1,w
  9078  0581  0649               	xorwf	___ftadd@exp2,w
  9079  0582  1D03               	skipz
  9080  0583  2D76               	goto	l8432
  9081  0584                     l3039:	
  9082  0584  1FC8               	btfss	___ftadd@sign,7
  9083  0585  2D96               	goto	l8438
  9084  0586  30FF               	movlw	255
  9085  0587  06BE               	xorwf	___ftadd@f1,f
  9086  0588  30FF               	movlw	255
  9087  0589  06BF               	xorwf	___ftadd@f1+1,f
  9088  058A  30FF               	movlw	255
  9089  058B  06C0               	xorwf	___ftadd@f1+2,f
  9090  058C  3001               	movlw	1
  9091  058D  07BE               	addwf	___ftadd@f1,f
  9092  058E  3000               	movlw	0
  9093  058F  1803               	skipnc
  9094  0590  3001               	movlw	1
  9095  0591  07BF               	addwf	___ftadd@f1+1,f
  9096  0592  3000               	movlw	0
  9097  0593  1803               	skipnc
  9098  0594  3001               	movlw	1
  9099  0595  07C0               	addwf	___ftadd@f1+2,f
  9100  0596                     l8438:	
  9101  0596  1F48               	btfss	___ftadd@sign,6
  9102  0597  2DA8               	goto	l8442
  9103  0598  30FF               	movlw	255
  9104  0599  06C1               	xorwf	___ftadd@f2,f
  9105  059A  30FF               	movlw	255
  9106  059B  06C2               	xorwf	___ftadd@f2+1,f
  9107  059C  30FF               	movlw	255
  9108  059D  06C3               	xorwf	___ftadd@f2+2,f
  9109  059E  3001               	movlw	1
  9110  059F  07C1               	addwf	___ftadd@f2,f
  9111  05A0  3000               	movlw	0
  9112  05A1  1803               	skipnc
  9113  05A2  3001               	movlw	1
  9114  05A3  07C2               	addwf	___ftadd@f2+1,f
  9115  05A4  3000               	movlw	0
  9116  05A5  1803               	skipnc
  9117  05A6  3001               	movlw	1
  9118  05A7  07C3               	addwf	___ftadd@f2+2,f
  9119  05A8                     l8442:	
  9120  05A8  01C8               	clrf	___ftadd@sign
  9121  05A9  083E               	movf	___ftadd@f1,w
  9122  05AA  07C1               	addwf	___ftadd@f2,f
  9123  05AB  083F               	movf	___ftadd@f1+1,w
  9124  05AC  3DC2               	addwfc	___ftadd@f2+1,f
  9125  05AD  0840               	movf	___ftadd@f1+2,w
  9126  05AE  3DC3               	addwfc	___ftadd@f2+2,f
  9127  05AF  1FC3               	btfss	___ftadd@f2+2,7
  9128  05B0  2DC3               	goto	l8452
  9129  05B1  30FF               	movlw	255
  9130  05B2  06C1               	xorwf	___ftadd@f2,f
  9131  05B3  30FF               	movlw	255
  9132  05B4  06C2               	xorwf	___ftadd@f2+1,f
  9133  05B5  30FF               	movlw	255
  9134  05B6  06C3               	xorwf	___ftadd@f2+2,f
  9135  05B7  3001               	movlw	1
  9136  05B8  07C1               	addwf	___ftadd@f2,f
  9137  05B9  3000               	movlw	0
  9138  05BA  1803               	skipnc
  9139  05BB  3001               	movlw	1
  9140  05BC  07C2               	addwf	___ftadd@f2+1,f
  9141  05BD  3000               	movlw	0
  9142  05BE  1803               	skipnc
  9143  05BF  3001               	movlw	1
  9144  05C0  07C3               	addwf	___ftadd@f2+2,f
  9145  05C1  01C8               	clrf	___ftadd@sign
  9146  05C2  0AC8               	incf	___ftadd@sign,f
  9147  05C3                     l8452:	
  9148  05C3  0841               	movf	___ftadd@f2,w
  9149  05C4  00A0               	movwf	___ftpack@arg
  9150  05C5  0842               	movf	___ftadd@f2+1,w
  9151  05C6  00A1               	movwf	___ftpack@arg+1
  9152  05C7  0843               	movf	___ftadd@f2+2,w
  9153  05C8  00A2               	movwf	___ftpack@arg+2
  9154  05C9  084A               	movf	___ftadd@exp1,w
  9155  05CA  00C4               	movwf	??___ftadd
  9156  05CB  0844               	movf	??___ftadd,w
  9157  05CC  00A3               	movwf	___ftpack@exp
  9158  05CD  0848               	movf	___ftadd@sign,w
  9159  05CE  00C5               	movwf	??___ftadd+1
  9160  05CF  0845               	movf	??___ftadd+1,w
  9161  05D0  00A4               	movwf	___ftpack@sign
  9162  05D1  3197  273D         	fcall	___ftpack
  9163  05D3  0020               	movlb	0	; select bank0
  9164  05D4  0820               	movf	?___ftpack,w
  9165  05D5  00BE               	movwf	?___ftadd
  9166  05D6  0821               	movf	?___ftpack+1,w
  9167  05D7  00BF               	movwf	?___ftadd+1
  9168  05D8  0822               	movf	?___ftpack+2,w
  9169  05D9  00C0               	movwf	?___ftadd+2
  9170  05DA  0008               	return
  9171  05DB                     __end_of___ftadd:	
  9172                           
  9173                           	psect	text42
  9174  1C08                     __ptext42:	
  9175 ;; *************** function _getBuz_GO *****************
  9176 ;; Defined at:
  9177 ;;		line 82 in file "../src/Buzzer_B1.c"
  9178 ;; Parameters:    Size  Location     Type
  9179 ;;		None
  9180 ;; Auto vars:     Size  Location     Type
  9181 ;;  i               2    4[BANK0 ] int 
  9182 ;; Return value:  Size  Location     Type
  9183 ;;                  2    0[BANK0 ] int 
  9184 ;; Registers used:
  9185 ;;		wreg, status,2, status,0
  9186 ;; Tracked objects:
  9187 ;;		On entry : 0/0
  9188 ;;		On exit  : 0/0
  9189 ;;		Unchanged: 0/0
  9190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9191 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9192 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;Total ram usage:        6 bytes
  9196 ;; Hardware stack levels used:    1
  9197 ;; Hardware stack levels required when called:    5
  9198 ;; This function calls:
  9199 ;;		Nothing
  9200 ;; This function is called by:
  9201 ;;		_setRF_Main
  9202 ;; This function uses a non-reentrant model
  9203 ;;
  9204                           
  9205                           
  9206                           ;psect for function _getBuz_GO
  9207  1C08                     _getBuz_GO:	
  9208                           
  9209                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  9210                           
  9211                           ;incstack = 0
  9212                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  9213  1C08  0021               	movlb	1	; select bank1
  9214  1C09  0C32               	rrf	_Buz1^(0+128),w
  9215  1C0A  3901               	andlw	1
  9216  1C0B  0020               	movlb	0	; select bank0
  9217  1C0C  00A2               	movwf	??_getBuz_GO
  9218  1C0D  01A3               	clrf	??_getBuz_GO+1
  9219  1C0E  0822               	movf	??_getBuz_GO,w
  9220  1C0F  00A4               	movwf	getBuz_GO@i
  9221  1C10  0823               	movf	??_getBuz_GO+1,w
  9222  1C11  00A5               	movwf	getBuz_GO@i+1
  9223                           
  9224                           ;Buzzer_B1.c: 84: return i;
  9225  1C12  0825               	movf	getBuz_GO@i+1,w
  9226  1C13  01A1               	clrf	?_getBuz_GO+1
  9227  1C14  07A1               	addwf	?_getBuz_GO+1,f
  9228  1C15  0824               	movf	getBuz_GO@i,w
  9229  1C16  01A0               	clrf	?_getBuz_GO
  9230  1C17  07A0               	addwf	?_getBuz_GO,f
  9231  1C18  0008               	return
  9232  1C19                     __end_of_getBuz_GO:	
  9233                           
  9234                           	psect	text43
  9235  1B6A                     __ptext43:	
  9236 ;; *************** function _RF_RxDisable *****************
  9237 ;; Defined at:
  9238 ;;		line 190 in file "../src/RF_Control_B1.c"
  9239 ;; Parameters:    Size  Location     Type
  9240 ;;		None
  9241 ;; Auto vars:     Size  Location     Type
  9242 ;;		None
  9243 ;; Return value:  Size  Location     Type
  9244 ;;		None               void
  9245 ;; Registers used:
  9246 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9247 ;; Tracked objects:
  9248 ;;		On entry : 0/0
  9249 ;;		On exit  : 0/0
  9250 ;;		Unchanged: 0/0
  9251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;Total ram usage:        0 bytes
  9257 ;; Hardware stack levels used:    1
  9258 ;; Hardware stack levels required when called:    7
  9259 ;; This function calls:
  9260 ;;		_CC2500_WriteCommand
  9261 ;; This function is called by:
  9262 ;;		_setRF_Main
  9263 ;; This function uses a non-reentrant model
  9264 ;;
  9265                           
  9266                           
  9267                           ;psect for function _RF_RxDisable
  9268  1B6A                     _RF_RxDisable:	
  9269                           
  9270                           ;RF_Control_B1.c: 191: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  9271                           
  9272                           ;incstack = 0
  9273                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9274  1B6A  0021               	movlb	1	; select bank1
  9275  1B6B  18BE               	btfsc	_RF1^(0+128),1
  9276  1B6C  2B6F               	goto	l2284
  9277  1B6D  1DBE               	btfss	_RF1^(0+128),3
  9278  1B6E  0008               	return
  9279  1B6F                     l2284:	
  9280                           
  9281                           ;RF_Control_B1.c: 192: RF1.RxStatus = 0;
  9282  1B6F  11BE               	bcf	_RF1^(0+128),3
  9283                           
  9284                           ;RF_Control_B1.c: 193: RF1.ReceiveGO = 0;
  9285  1B70  10BE               	bcf	_RF1^(0+128),1
  9286                           
  9287                           ;RF_Control_B1.c: 194: CC2500_WriteCommand(0x36);
  9288  1B71  3036               	movlw	54
  9289  1B72  319D  2576  319B   	fcall	_CC2500_WriteCommand
  9290                           
  9291                           ;RF_Control_B1.c: 195: CC2500_WriteCommand(0x3A);
  9292  1B75  303A               	movlw	58
  9293  1B76  319D  2576         	fcall	_CC2500_WriteCommand
  9294  1B78  0008               	return
  9295  1B79                     __end_of_RF_RxDisable:	
  9296                           
  9297                           	psect	text44
  9298  080C                     __ptext44:	
  9299 ;; *************** function _CC2500_TxData *****************
  9300 ;; Defined at:
  9301 ;;		line 32 in file "../src/CC2500_B1.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;		None
  9304 ;; Auto vars:     Size  Location     Type
  9305 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9306 ;; Return value:  Size  Location     Type
  9307 ;;		None               void
  9308 ;; Registers used:
  9309 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9310 ;; Tracked objects:
  9311 ;;		On entry : 0/0
  9312 ;;		On exit  : 0/0
  9313 ;;		Unchanged: 0/0
  9314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;Total ram usage:        2 bytes
  9320 ;; Hardware stack levels used:    1
  9321 ;; Hardware stack levels required when called:    7
  9322 ;; This function calls:
  9323 ;;		_CC2500_WriteByte
  9324 ;;		_CC2500_WriteCommand
  9325 ;;		_Timeout_Counter
  9326 ;;		_set_TimeoutCleared
  9327 ;; This function is called by:
  9328 ;;		_setRF_Main
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           
  9333                           ;psect for function _CC2500_TxData
  9334  080C                     _CC2500_TxData:	
  9335                           
  9336                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9337                           ;CC2500_B1.c: 35: RC4 = 0;
  9338                           
  9339                           ;incstack = 0
  9340                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9341  080C  0020               	movlb	0	; select bank0
  9342  080D  120E               	bcf	14,4	;volatile
  9343                           
  9344                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9345  080E  307F               	movlw	127
  9346  080F  00A4               	movwf	??_CC2500_TxData
  9347  0810  0824               	movf	??_CC2500_TxData,w
  9348  0811  00FB               	movwf	_SPI0Buffer
  9349                           
  9350                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9351  0812  2816               	goto	l6730
  9352  0813                     l6728:	
  9353                           
  9354                           ;CC2500_B1.c: 38: Timeout_Counter();
  9355  0813  319C  24C2  3188   	fcall	_Timeout_Counter
  9356  0816                     l6730:	
  9357  0816  0020               	movlb	0	; select bank0
  9358  0817  1D0E               	btfss	14,2	;volatile
  9359  0818  281C               	goto	l6734
  9360  0819  0021               	movlb	1	; select bank1
  9361  081A  1D2F               	btfss	(_myMain^(0+128)+15),2
  9362  081B  2813               	goto	l6728
  9363  081C                     l6734:	
  9364                           
  9365                           ;CC2500_B1.c: 39: };
  9366                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9367  081C  319A  223E  3188   	fcall	_set_TimeoutCleared
  9368                           
  9369                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9370  081F  319C  249A  3188   	fcall	_CC2500_WriteByte
  9371                           
  9372                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9373  0822  0021               	movlb	1	; select bank1
  9374  0823  0853               	movf	_Tx_Length^(0+128),w
  9375  0824  0020               	movlb	0	; select bank0
  9376  0825  00A4               	movwf	??_CC2500_TxData
  9377  0826  0824               	movf	??_CC2500_TxData,w
  9378  0827  00FB               	movwf	_SPI0Buffer
  9379                           
  9380                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9381  0828  319C  249A  3188   	fcall	_CC2500_WriteByte
  9382                           
  9383                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9384  082B  0020               	movlb	0	; select bank0
  9385  082C  01A5               	clrf	CC2500_TxData@loop_e
  9386  082D                     l6748:	
  9387  082D  0021               	movlb	1	; select bank1
  9388  082E  0853               	movf	_Tx_Length^(0+128),w
  9389  082F  0020               	movlb	0	; select bank0
  9390  0830  0225               	subwf	CC2500_TxData@loop_e,w
  9391  0831  1803               	btfsc	3,0
  9392  0832  2845               	goto	l267
  9393                           
  9394                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9395  0833  0825               	movf	CC2500_TxData@loop_e,w
  9396  0834  3E20               	addlw	_RF_Data& (0+255)
  9397  0835  0086               	movwf	6
  9398  0836  3001               	movlw	1	; select bank2/3
  9399  0837  0087               	movwf	7
  9400  0838  0801               	movf	1,w
  9401  0839  00A4               	movwf	??_CC2500_TxData
  9402  083A  0824               	movf	??_CC2500_TxData,w
  9403  083B  00FB               	movwf	_SPI0Buffer
  9404                           
  9405                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9406  083C  319C  249A  3188   	fcall	_CC2500_WriteByte
  9407  083F  3001               	movlw	1
  9408  0840  0020               	movlb	0	; select bank0
  9409  0841  00A4               	movwf	??_CC2500_TxData
  9410  0842  0824               	movf	??_CC2500_TxData,w
  9411  0843  07A5               	addwf	CC2500_TxData@loop_e,f
  9412  0844  282D               	goto	l6748
  9413  0845                     l267:	
  9414                           
  9415                           ;CC2500_B1.c: 48: }
  9416                           ;CC2500_B1.c: 49: RC4 = 1;
  9417  0845  160E               	bsf	14,4	;volatile
  9418                           
  9419                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9420  0846  3035               	movlw	53
  9421  0847  319D  2576  3188   	fcall	_CC2500_WriteCommand
  9422                           
  9423                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9424  084A  284E               	goto	l6754
  9425  084B                     l6752:	
  9426                           
  9427                           ;CC2500_B1.c: 52: Timeout_Counter();
  9428  084B  319C  24C2  3188   	fcall	_Timeout_Counter
  9429  084E                     l6754:	
  9430  084E  0020               	movlb	0	; select bank0
  9431  084F  180D               	btfsc	13,0	;volatile
  9432  0850  2854               	goto	l6758
  9433  0851  0021               	movlb	1	; select bank1
  9434  0852  1D2F               	btfss	(_myMain^(0+128)+15),2
  9435  0853  284B               	goto	l6752
  9436  0854                     l6758:	
  9437                           
  9438                           ;CC2500_B1.c: 53: };
  9439                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9440  0854  319A  223E  3188   	fcall	_set_TimeoutCleared
  9441                           
  9442                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9443  0857  285B               	goto	l6762
  9444  0858                     l6760:	
  9445                           
  9446                           ;CC2500_B1.c: 57: Timeout_Counter();
  9447  0858  319C  24C2  3188   	fcall	_Timeout_Counter
  9448  085B                     l6762:	
  9449  085B  0020               	movlb	0	; select bank0
  9450  085C  1C0D               	btfss	13,0	;volatile
  9451  085D  2861               	goto	l6766
  9452  085E  0021               	movlb	1	; select bank1
  9453  085F  1D2F               	btfss	(_myMain^(0+128)+15),2
  9454  0860  2858               	goto	l6760
  9455  0861                     l6766:	
  9456                           
  9457                           ;CC2500_B1.c: 58: };
  9458                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9459  0861  319A  223E  3188   	fcall	_set_TimeoutCleared
  9460                           
  9461                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9462  0864  3036               	movlw	54
  9463  0865  319D  2576  3188   	fcall	_CC2500_WriteCommand
  9464                           
  9465                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9466  0868  303B               	movlw	59
  9467  0869  319D  2576  3188   	fcall	_CC2500_WriteCommand
  9468                           
  9469                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9470  086C  303A               	movlw	58
  9471  086D  319D  2576         	fcall	_CC2500_WriteCommand
  9472                           
  9473                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9474  086F  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9475  0870  0008               	return
  9476  0871                     __end_of_CC2500_TxData:	
  9477                           
  9478                           	psect	text45
  9479  0C03                     __ptext45:	
  9480 ;; *************** function _CC2500_RxData *****************
  9481 ;; Defined at:
  9482 ;;		line 70 in file "../src/CC2500_B1.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9487 ;; Return value:  Size  Location     Type
  9488 ;;		None               void
  9489 ;; Registers used:
  9490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;Total ram usage:        2 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    7
  9503 ;; This function calls:
  9504 ;;		_CC2500_ReadByte
  9505 ;;		_CC2500_ReadStatus
  9506 ;;		_CC2500_WriteByte
  9507 ;;		_CC2500_WriteCommand
  9508 ;;		_Timeout_Counter
  9509 ;;		_set_TimeoutCleared
  9510 ;; This function is called by:
  9511 ;;		_setRF_Main
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           
  9516                           ;psect for function _CC2500_RxData
  9517  0C03                     _CC2500_RxData:	
  9518                           
  9519                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9520                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9521                           
  9522                           ;incstack = 0
  9523                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9524  0C03  0020               	movlb	0	; select bank0
  9525  0C04  180D               	btfsc	13,0	;volatile
  9526  0C05  2C0A               	goto	l6782
  9527  0C06  2C13               	goto	l6788
  9528  0C07                     l6780:	
  9529                           ;CC2500_B1.c: 76: {
  9530                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9531                           
  9532                           
  9533                           ;CC2500_B1.c: 78: Timeout_Counter();
  9534  0C07  319C  24C2  318C   	fcall	_Timeout_Counter
  9535  0C0A                     l6782:	
  9536  0C0A  0020               	movlb	0	; select bank0
  9537  0C0B  1C0D               	btfss	13,0	;volatile
  9538  0C0C  2C10               	goto	l6786
  9539  0C0D  0021               	movlb	1	; select bank1
  9540  0C0E  1D2F               	btfss	(_myMain^(0+128)+15),2
  9541  0C0F  2C07               	goto	l6780
  9542  0C10                     l6786:	
  9543                           
  9544                           ;CC2500_B1.c: 79: };
  9545                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9546  0C10  319A  223E  318C   	fcall	_set_TimeoutCleared
  9547  0C13                     l6788:	
  9548                           
  9549                           ;CC2500_B1.c: 81: }
  9550                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9551  0C13  303B               	movlw	59
  9552  0C14  319F  2721  318C   	fcall	_CC2500_ReadStatus
  9553                           
  9554                           ;CC2500_B1.c: 84: if (s_data != 0) {
  9555  0C17  0021               	movlb	1	; select bank1
  9556  0C18  0856               	movf	_s_data^(0+128),w
  9557  0C19  1903               	btfsc	3,2
  9558  0C1A  0008               	return
  9559                           
  9560                           ;CC2500_B1.c: 85: RC4 = 0;
  9561  0C1B  0020               	movlb	0	; select bank0
  9562  0C1C  120E               	bcf	14,4	;volatile
  9563                           
  9564                           ;CC2500_B1.c: 86: SPI0Buffer = 0x3F + 0xC0;
  9565  0C1D  30FF               	movlw	255
  9566  0C1E  00A4               	movwf	??_CC2500_RxData
  9567  0C1F  0824               	movf	??_CC2500_RxData,w
  9568  0C20  00FB               	movwf	_SPI0Buffer
  9569                           
  9570                           ;CC2500_B1.c: 87: while (RC2 == 1 && myMain.Timeout == 0) {
  9571  0C21  2C28               	goto	l6798
  9572  0C22                     l6800:	
  9573  0C22  0021               	movlb	1	; select bank1
  9574  0C23  192F               	btfsc	(_myMain^(0+128)+15),2
  9575  0C24  2C2B               	goto	l292
  9576                           
  9577                           ;CC2500_B1.c: 88: Timeout_Counter();
  9578  0C25  319C  24C2  318C   	fcall	_Timeout_Counter
  9579  0C28                     l6798:	
  9580  0C28  0020               	movlb	0	; select bank0
  9581  0C29  190E               	btfsc	14,2	;volatile
  9582  0C2A  2C22               	goto	l6800
  9583  0C2B                     l292:	
  9584                           
  9585                           ;CC2500_B1.c: 89: };
  9586                           ;CC2500_B1.c: 90: if (myMain.Timeout == 0) {
  9587  0C2B  0021               	movlb	1	; select bank1
  9588  0C2C  192F               	btfsc	(_myMain^(0+128)+15),2
  9589  0C2D  2C7B               	goto	l293
  9590                           
  9591                           ;CC2500_B1.c: 91: CC2500_WriteByte();
  9592  0C2E  319C  249A  318C   	fcall	_CC2500_WriteByte
  9593                           
  9594                           ;CC2500_B1.c: 93: CC2500_ReadByte();
  9595  0C31  319D  2547  318C   	fcall	_CC2500_ReadByte
  9596                           
  9597                           ;CC2500_B1.c: 94: Rx_Length = SPI0Buffer;
  9598  0C34  087B               	movf	_SPI0Buffer,w
  9599  0C35  0020               	movlb	0	; select bank0
  9600  0C36  00A4               	movwf	??_CC2500_RxData
  9601  0C37  0824               	movf	??_CC2500_RxData,w
  9602  0C38  0021               	movlb	1	; select bank1
  9603  0C39  00D2               	movwf	_Rx_Length^(0+128)
  9604                           
  9605                           ;CC2500_B1.c: 95: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9606  0C3A  0020               	movlb	0	; select bank0
  9607  0C3B  01A5               	clrf	CC2500_RxData@loop_f
  9608  0C3C                     l6814:	
  9609  0C3C  0021               	movlb	1	; select bank1
  9610  0C3D  0852               	movf	_Rx_Length^(0+128),w
  9611  0C3E  0020               	movlb	0	; select bank0
  9612  0C3F  0225               	subwf	CC2500_RxData@loop_f,w
  9613  0C40  1803               	btfsc	3,0
  9614  0C41  2C54               	goto	l6816
  9615                           
  9616                           ;CC2500_B1.c: 96: CC2500_ReadByte();
  9617  0C42  319D  2547  318C   	fcall	_CC2500_ReadByte
  9618                           
  9619                           ;CC2500_B1.c: 97: RF_Data[loop_f] = SPI0Buffer;
  9620  0C45  087B               	movf	_SPI0Buffer,w
  9621  0C46  0020               	movlb	0	; select bank0
  9622  0C47  00A4               	movwf	??_CC2500_RxData
  9623  0C48  0825               	movf	CC2500_RxData@loop_f,w
  9624  0C49  3E20               	addlw	_RF_Data& (0+255)
  9625  0C4A  0086               	movwf	6
  9626  0C4B  3001               	movlw	1	; select bank2/3
  9627  0C4C  0087               	movwf	7
  9628  0C4D  0824               	movf	??_CC2500_RxData,w
  9629  0C4E  0081               	movwf	1
  9630  0C4F  3001               	movlw	1
  9631  0C50  00A4               	movwf	??_CC2500_RxData
  9632  0C51  0824               	movf	??_CC2500_RxData,w
  9633  0C52  07A5               	addwf	CC2500_RxData@loop_f,f
  9634  0C53  2C3C               	goto	l6814
  9635  0C54                     l6816:	
  9636                           
  9637                           ;CC2500_B1.c: 98: }
  9638                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  9639  0C54  319D  2547  318C   	fcall	_CC2500_ReadByte
  9640                           
  9641                           ;CC2500_B1.c: 100: RSSI = SPI0Buffer;
  9642  0C57  087B               	movf	_SPI0Buffer,w
  9643  0C58  0020               	movlb	0	; select bank0
  9644  0C59  00A4               	movwf	??_CC2500_RxData
  9645  0C5A  0824               	movf	??_CC2500_RxData,w
  9646  0C5B  0021               	movlb	1	; select bank1
  9647  0C5C  00D1               	movwf	_RSSI^(0+128)
  9648                           
  9649                           ;CC2500_B1.c: 101: CC2500_ReadByte();
  9650  0C5D  319D  2547  318C   	fcall	_CC2500_ReadByte
  9651                           
  9652                           ;CC2500_B1.c: 102: CRC = SPI0Buffer;
  9653  0C60  087B               	movf	_SPI0Buffer,w
  9654  0C61  0020               	movlb	0	; select bank0
  9655  0C62  00A4               	movwf	??_CC2500_RxData
  9656  0C63  0824               	movf	??_CC2500_RxData,w
  9657  0C64  0021               	movlb	1	; select bank1
  9658  0C65  00CB               	movwf	_CRC^(0+128)
  9659                           
  9660                           ;CC2500_B1.c: 103: RC4 = 1;
  9661  0C66  0020               	movlb	0	; select bank0
  9662  0C67  160E               	bsf	14,4	;volatile
  9663                           
  9664                           ;CC2500_B1.c: 104: if (CRC & 0x80)
  9665  0C68  0021               	movlb	1	; select bank1
  9666  0C69  1BCB               	btfsc	_CRC^(0+128),7
  9667                           
  9668                           ;CC2500_B1.c: 105: Receive_OK = 1;
  9669  0C6A  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9670                           
  9671                           ;CC2500_B1.c: 107: CC2500_WriteCommand(0x36);
  9672  0C6B  3036               	movlw	54
  9673  0C6C  319D  2576  318C   	fcall	_CC2500_WriteCommand
  9674                           
  9675                           ;CC2500_B1.c: 108: CC2500_WriteCommand(0x3A);
  9676  0C6F  303A               	movlw	58
  9677  0C70  319D  2576  318C   	fcall	_CC2500_WriteCommand
  9678                           
  9679                           ;CC2500_B1.c: 109: CC2500_WriteCommand(0x3B);
  9680  0C73  303B               	movlw	59
  9681  0C74  319D  2576  318C   	fcall	_CC2500_WriteCommand
  9682                           
  9683                           ;CC2500_B1.c: 110: RF1.RxStatus = 0;
  9684  0C77  0021               	movlb	1	; select bank1
  9685  0C78  11BE               	bcf	_RF1^(0+128),3
  9686                           
  9687                           ;CC2500_B1.c: 111: RF1.ReceiveGO = 1;
  9688  0C79  14BE               	bsf	_RF1^(0+128),1
  9689                           
  9690                           ;CC2500_B1.c: 112: } else {
  9691  0C7A  2C7D               	goto	l6834
  9692  0C7B                     l293:	
  9693                           
  9694                           ;CC2500_B1.c: 113: RC4 = 1;
  9695  0C7B  0020               	movlb	0	; select bank0
  9696  0C7C  160E               	bsf	14,4	;volatile
  9697  0C7D                     l6834:	
  9698                           
  9699                           ;CC2500_B1.c: 114: }
  9700                           ;CC2500_B1.c: 115: set_TimeoutCleared();
  9701  0C7D  319A  223E         	fcall	_set_TimeoutCleared
  9702  0C7F  0021               	movlb	1	; select bank1
  9703  0C80  0008               	return
  9704  0C81                     __end_of_CC2500_RxData:	
  9705                           
  9706                           	psect	text46
  9707  1F21                     __ptext46:	
  9708 ;; *************** function _CC2500_ReadStatus *****************
  9709 ;; Defined at:
  9710 ;;		line 306 in file "../src/CC2500_B1.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;  status_addr     1    wreg     unsigned char 
  9713 ;; Auto vars:     Size  Location     Type
  9714 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9715 ;; Return value:  Size  Location     Type
  9716 ;;		None               void
  9717 ;; Registers used:
  9718 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9719 ;; Tracked objects:
  9720 ;;		On entry : 0/0
  9721 ;;		On exit  : 0/0
  9722 ;;		Unchanged: 0/0
  9723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;Total ram usage:        2 bytes
  9729 ;; Hardware stack levels used:    1
  9730 ;; Hardware stack levels required when called:    6
  9731 ;; This function calls:
  9732 ;;		_CC2500_ReadByte
  9733 ;;		_CC2500_WriteByte
  9734 ;;		_Timeout_Counter
  9735 ;;		_set_TimeoutCleared
  9736 ;; This function is called by:
  9737 ;;		_CC2500_RxData
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           
  9742                           ;psect for function _CC2500_ReadStatus
  9743  1F21                     _CC2500_ReadStatus:	
  9744                           
  9745                           ;incstack = 0
  9746                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9747                           ;CC2500_ReadStatus@status_addr stored from wreg
  9748  1F21  0020               	movlb	0	; select bank0
  9749  1F22  00A3               	movwf	CC2500_ReadStatus@status_addr
  9750                           
  9751                           ;CC2500_B1.c: 307: RC4 = 0;
  9752  1F23  120E               	bcf	14,4	;volatile
  9753                           
  9754                           ;CC2500_B1.c: 308: SPI0Buffer = status_addr + 0xC0;
  9755  1F24  0823               	movf	CC2500_ReadStatus@status_addr,w
  9756  1F25  3EC0               	addlw	192
  9757  1F26  00A2               	movwf	??_CC2500_ReadStatus
  9758  1F27  0822               	movf	??_CC2500_ReadStatus,w
  9759  1F28  00FB               	movwf	_SPI0Buffer
  9760                           
  9761                           ;CC2500_B1.c: 310: while (RC2 == 1 && myMain.Timeout == 0) {
  9762  1F29  2F2D               	goto	l6590
  9763  1F2A                     l6588:	
  9764                           
  9765                           ;CC2500_B1.c: 311: Timeout_Counter();
  9766  1F2A  319C  24C2  319F   	fcall	_Timeout_Counter
  9767  1F2D                     l6590:	
  9768  1F2D  0020               	movlb	0	; select bank0
  9769  1F2E  1D0E               	btfss	14,2	;volatile
  9770  1F2F  2F33               	goto	l6594
  9771  1F30  0021               	movlb	1	; select bank1
  9772  1F31  1D2F               	btfss	(_myMain^(0+128)+15),2
  9773  1F32  2F2A               	goto	l6588
  9774  1F33                     l6594:	
  9775                           
  9776                           ;CC2500_B1.c: 312: };
  9777                           ;CC2500_B1.c: 313: set_TimeoutCleared();
  9778  1F33  319A  223E  319F   	fcall	_set_TimeoutCleared
  9779                           
  9780                           ;CC2500_B1.c: 315: CC2500_WriteByte();
  9781  1F36  319C  249A  319F   	fcall	_CC2500_WriteByte
  9782                           
  9783                           ;CC2500_B1.c: 316: CC2500_ReadByte();
  9784  1F39  319D  2547         	fcall	_CC2500_ReadByte
  9785                           
  9786                           ;CC2500_B1.c: 317: RC4 = 1;
  9787  1F3B  0020               	movlb	0	; select bank0
  9788  1F3C  160E               	bsf	14,4	;volatile
  9789                           
  9790                           ;CC2500_B1.c: 319: s_data = SPI0Buffer;
  9791  1F3D  087B               	movf	_SPI0Buffer,w
  9792  1F3E  00A2               	movwf	??_CC2500_ReadStatus
  9793  1F3F  0822               	movf	??_CC2500_ReadStatus,w
  9794  1F40  0021               	movlb	1	; select bank1
  9795  1F41  00D6               	movwf	_s_data^(0+128)
  9796  1F42  0008               	return
  9797  1F43                     __end_of_CC2500_ReadStatus:	
  9798                           
  9799                           	psect	text47
  9800  1D47                     __ptext47:	
  9801 ;; *************** function _CC2500_ReadByte *****************
  9802 ;; Defined at:
  9803 ;;		line 240 in file "../src/CC2500_B1.c"
  9804 ;; Parameters:    Size  Location     Type
  9805 ;;		None
  9806 ;; Auto vars:     Size  Location     Type
  9807 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9808 ;; Return value:  Size  Location     Type
  9809 ;;		None               void
  9810 ;; Registers used:
  9811 ;;		wreg, status,2, status,0
  9812 ;; Tracked objects:
  9813 ;;		On entry : 0/0
  9814 ;;		On exit  : 0/0
  9815 ;;		Unchanged: 0/0
  9816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;Total ram usage:        2 bytes
  9822 ;; Hardware stack levels used:    1
  9823 ;; Hardware stack levels required when called:    5
  9824 ;; This function calls:
  9825 ;;		Nothing
  9826 ;; This function is called by:
  9827 ;;		_CC2500_RxData
  9828 ;;		_CC2500_ReadStatus
  9829 ;;		_CC2500_ReadREG
  9830 ;; This function uses a non-reentrant model
  9831 ;;
  9832                           
  9833                           
  9834                           ;psect for function _CC2500_ReadByte
  9835  1D47                     _CC2500_ReadByte:	
  9836                           
  9837                           ;CC2500_B1.c: 241: unsigned char loop_b;
  9838                           ;CC2500_B1.c: 242: for (loop_b = 0; loop_b < 8; loop_b++) {
  9839                           
  9840                           ;incstack = 0
  9841                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9842  1D47  0020               	movlb	0	; select bank0
  9843  1D48  01A1               	clrf	CC2500_ReadByte@loop_b
  9844  1D49                     L5:	
  9845  1D49  3008               	movlw	8
  9846  1D4A  0221               	subwf	CC2500_ReadByte@loop_b,w
  9847  1D4B  1803               	btfsc	3,0
  9848  1D4C  0008               	return
  9849                           
  9850                           ;CC2500_B1.c: 243: RC1 = 1;
  9851  1D4D  148E               	bsf	14,1	;volatile
  9852                           
  9853                           ;CC2500_B1.c: 244: SPI0Buffer <<= 1;
  9854  1D4E  1003               	clrc
  9855  1D4F  0DFB               	rlf	_SPI0Buffer,f
  9856                           
  9857                           ;CC2500_B1.c: 245: if (RC2 == 1)
  9858  1D50  1D0E               	btfss	14,2	;volatile
  9859  1D51  2D54               	goto	l6446
  9860                           
  9861                           ;CC2500_B1.c: 246: SPI0Buffer |= 0x01;
  9862  1D52  147B               	bsf	_SPI0Buffer,0
  9863  1D53  2D58               	goto	l6448
  9864  1D54                     l6446:	
  9865                           
  9866                           ;CC2500_B1.c: 247: else
  9867                           ;CC2500_B1.c: 248: SPI0Buffer &= 0xFE;
  9868  1D54  30FE               	movlw	254
  9869  1D55  00A0               	movwf	??_CC2500_ReadByte
  9870  1D56  0820               	movf	??_CC2500_ReadByte,w
  9871  1D57  05FB               	andwf	_SPI0Buffer,f
  9872  1D58                     l6448:	
  9873                           
  9874                           ;CC2500_B1.c: 249: RC1 = 0;
  9875  1D58  108E               	bcf	14,1	;volatile
  9876  1D59  3001               	movlw	1
  9877  1D5A  00A0               	movwf	??_CC2500_ReadByte
  9878  1D5B  0820               	movf	??_CC2500_ReadByte,w
  9879  1D5C  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9880  1D5D  2D49               	goto	L5
  9881  1D5E                     __end_of_CC2500_ReadByte:	
  9882                           
  9883                           	psect	text48
  9884  1A1F                     __ptext48:	
  9885 ;; *************** function _RF_Initialization *****************
  9886 ;; Defined at:
  9887 ;;		line 9 in file "../src/RF_Control_B1.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;		None
  9890 ;; Auto vars:     Size  Location     Type
  9891 ;;		None
  9892 ;; Return value:  Size  Location     Type
  9893 ;;		None               void
  9894 ;; Registers used:
  9895 ;;		wreg, status,2, status,0, pclath, cstack
  9896 ;; Tracked objects:
  9897 ;;		On entry : 0/0
  9898 ;;		On exit  : 0/0
  9899 ;;		Unchanged: 0/0
  9900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;Total ram usage:        0 bytes
  9906 ;; Hardware stack levels used:    1
  9907 ;; Hardware stack levels required when called:    6
  9908 ;; This function calls:
  9909 ;;		_setRF_Initialization
  9910 ;; This function is called by:
  9911 ;;		_main
  9912 ;; This function uses a non-reentrant model
  9913 ;;
  9914                           
  9915                           
  9916                           ;psect for function _RF_Initialization
  9917  1A1F                     _RF_Initialization:	
  9918                           
  9919                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9920                           
  9921                           ;incstack = 0
  9922                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9923  1A1F  319A  2262         	fcall	_setRF_Initialization
  9924  1A21  0008               	return
  9925  1A22                     __end_of_RF_Initialization:	
  9926                           
  9927                           	psect	text49
  9928  1A62                     __ptext49:	
  9929 ;; *************** function _setRF_Initialization *****************
  9930 ;; Defined at:
  9931 ;;		line 43 in file "../src/RF_Control_B1.c"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;		None
  9934 ;; Auto vars:     Size  Location     Type
  9935 ;;		None
  9936 ;; Return value:  Size  Location     Type
  9937 ;;		None               void
  9938 ;; Registers used:
  9939 ;;		wreg
  9940 ;; Tracked objects:
  9941 ;;		On entry : 0/0
  9942 ;;		On exit  : 0/0
  9943 ;;		Unchanged: 0/0
  9944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9948 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;Total ram usage:        1 bytes
  9950 ;; Hardware stack levels used:    1
  9951 ;; Hardware stack levels required when called:    5
  9952 ;; This function calls:
  9953 ;;		Nothing
  9954 ;; This function is called by:
  9955 ;;		_RF_Initialization
  9956 ;; This function uses a non-reentrant model
  9957 ;;
  9958                           
  9959                           
  9960                           ;psect for function _setRF_Initialization
  9961  1A62                     _setRF_Initialization:	
  9962                           
  9963                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9964                           
  9965                           ;incstack = 0
  9966                           ; Regs used in _setRF_Initialization: [wreg]
  9967  1A62  3015               	movlw	21
  9968  1A63  0020               	movlb	0	; select bank0
  9969  1A64  00A0               	movwf	??_setRF_Initialization
  9970  1A65  0820               	movf	??_setRF_Initialization,w
  9971  1A66  0021               	movlb	1	; select bank1
  9972  1A67  00D3               	movwf	_Tx_Length^(0+128)
  9973  1A68  0008               	return
  9974  1A69                     __end_of_setRF_Initialization:	
  9975                           
  9976                           	psect	text50
  9977  1C3D                     __ptext50:	
  9978 ;; *************** function _Mcu_Initialization *****************
  9979 ;; Defined at:
  9980 ;;		line 30 in file "../src/MCU_B1.c"
  9981 ;; Parameters:    Size  Location     Type
  9982 ;;		None
  9983 ;; Auto vars:     Size  Location     Type
  9984 ;;		None
  9985 ;; Return value:  Size  Location     Type
  9986 ;;		None               void
  9987 ;; Registers used:
  9988 ;;		wreg, status,2, status,0, pclath, cstack
  9989 ;; Tracked objects:
  9990 ;;		On entry : 0/0
  9991 ;;		On exit  : 0/0
  9992 ;;		Unchanged: 0/0
  9993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;Total ram usage:        0 bytes
  9999 ;; Hardware stack levels used:    1
 10000 ;; Hardware stack levels required when called:    6
 10001 ;; This function calls:
 10002 ;;		_ADC_Set
 10003 ;;		_Fosc_Set
 10004 ;;		_IOC_Set
 10005 ;;		_IO_Set
 10006 ;;		_TMR0_Set
 10007 ;;		_WDT_Set
 10008 ;; This function is called by:
 10009 ;;		_main
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           
 10014                           ;psect for function _Mcu_Initialization
 10015  1C3D                     _Mcu_Initialization:	
 10016                           
 10017                           ;MCU_B1.c: 32: Fosc_Set();
 10018                           
 10019                           ;incstack = 0
 10020                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10021  1C3D  319A  223A  319C   	fcall	_Fosc_Set
 10022                           
 10023                           ;MCU_B1.c: 34: IO_Set();
 10024  1C40  319D  258F  319C   	fcall	_IO_Set
 10025                           
 10026                           ;MCU_B1.c: 36: TMR0_Set();
 10027  1C43  319A  2291  319C   	fcall	_TMR0_Set
 10028                           
 10029                           ;MCU_B1.c: 38: ;;
 10030                           ;MCU_B1.c: 40: ADC_Set();
 10031  1C46  319A  225B  319C   	fcall	_ADC_Set
 10032                           
 10033                           ;MCU_B1.c: 44: ;;
 10034                           ;MCU_B1.c: 46: IOC_Set();
 10035  1C49  319B  2325  319C   	fcall	_IOC_Set
 10036                           
 10037                           ;MCU_B1.c: 48: ;;
 10038                           ;MCU_B1.c: 50: ;;
 10039                           ;MCU_B1.c: 52: WDT_Set();
 10040  1C4C  319A  22E9         	fcall	_WDT_Set
 10041  1C4E  0008               	return
 10042  1C4F                     __end_of_Mcu_Initialization:	
 10043                           
 10044                           	psect	text51
 10045  1AE9                     __ptext51:	
 10046 ;; *************** function _WDT_Set *****************
 10047 ;; Defined at:
 10048 ;;		line 895 in file "../src/MCU_B1.c"
 10049 ;; Parameters:    Size  Location     Type
 10050 ;;		None
 10051 ;; Auto vars:     Size  Location     Type
 10052 ;;		None
 10053 ;; Return value:  Size  Location     Type
 10054 ;;		None               void
 10055 ;; Registers used:
 10056 ;;		wreg
 10057 ;; Tracked objects:
 10058 ;;		On entry : 0/0
 10059 ;;		On exit  : 0/0
 10060 ;;		Unchanged: 0/0
 10061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10066 ;;Total ram usage:        1 bytes
 10067 ;; Hardware stack levels used:    1
 10068 ;; Hardware stack levels required when called:    5
 10069 ;; This function calls:
 10070 ;;		Nothing
 10071 ;; This function is called by:
 10072 ;;		_Mcu_Initialization
 10073 ;; This function uses a non-reentrant model
 10074 ;;
 10075                           
 10076                           
 10077                           ;psect for function _WDT_Set
 10078  1AE9                     _WDT_Set:	
 10079                           
 10080                           ;MCU_B1.c: 896: WDTCON = 0b00010111;;
 10081                           
 10082                           ;incstack = 0
 10083                           ; Regs used in _WDT_Set: [wreg]
 10084  1AE9  3017               	movlw	23
 10085  1AEA  0021               	movlb	1	; select bank1
 10086  1AEB  0097               	movwf	23	;volatile
 10087                           
 10088                           ;MCU_B1.c: 897: WDT.Enable = 1;
 10089  1AEC  1449               	bsf	_WDT^(0+128),0
 10090                           
 10091                           ;MCU_B1.c: 898: WDT.Count = 10;
 10092  1AED  300A               	movlw	10
 10093  1AEE  0020               	movlb	0	; select bank0
 10094  1AEF  00A0               	movwf	??_WDT_Set
 10095  1AF0  0820               	movf	??_WDT_Set,w
 10096  1AF1  0021               	movlb	1	; select bank1
 10097  1AF2  00CA               	movwf	(_WDT^(0+128)+1)
 10098  1AF3  0008               	return
 10099  1AF4                     __end_of_WDT_Set:	
 10100                           
 10101                           	psect	text52
 10102  1A91                     __ptext52:	
 10103 ;; *************** function _TMR0_Set *****************
 10104 ;; Defined at:
 10105 ;;		line 126 in file "../src/MCU_B1.c"
 10106 ;; Parameters:    Size  Location     Type
 10107 ;;		None
 10108 ;; Auto vars:     Size  Location     Type
 10109 ;;		None
 10110 ;; Return value:  Size  Location     Type
 10111 ;;		None               void
 10112 ;; Registers used:
 10113 ;;		wreg, status,2
 10114 ;; Tracked objects:
 10115 ;;		On entry : 0/0
 10116 ;;		On exit  : 0/0
 10117 ;;		Unchanged: 0/0
 10118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;Total ram usage:        0 bytes
 10124 ;; Hardware stack levels used:    1
 10125 ;; Hardware stack levels required when called:    5
 10126 ;; This function calls:
 10127 ;;		Nothing
 10128 ;; This function is called by:
 10129 ;;		_Mcu_Initialization
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           
 10134                           ;psect for function _TMR0_Set
 10135  1A91                     _TMR0_Set:	
 10136                           
 10137                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10138                           
 10139                           ;incstack = 0
 10140                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10141  1A91  0021               	movlb	1	; select bank1
 10142  1A92  0195               	clrf	21	;volatile
 10143                           
 10144                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10145  1A93  3042               	movlw	66
 10146  1A94  0020               	movlb	0	; select bank0
 10147  1A95  0095               	movwf	21	;volatile
 10148                           
 10149                           ;MCU_B1.c: 130: TMR0IE = 1;
 10150  1A96  168B               	bsf	11,5	;volatile
 10151                           
 10152                           ;MCU_B1.c: 131: GIE = 1;
 10153  1A97  178B               	bsf	11,7	;volatile
 10154  1A98  0008               	return
 10155  1A99                     __end_of_TMR0_Set:	
 10156                           
 10157                           	psect	text53
 10158  1D8F                     __ptext53:	
 10159 ;; *************** function _IO_Set *****************
 10160 ;; Defined at:
 10161 ;;		line 60 in file "../src/MCU_B1.c"
 10162 ;; Parameters:    Size  Location     Type
 10163 ;;		None
 10164 ;; Auto vars:     Size  Location     Type
 10165 ;;		None
 10166 ;; Return value:  Size  Location     Type
 10167 ;;		None               void
 10168 ;; Registers used:
 10169 ;;		wreg, status,2
 10170 ;; Tracked objects:
 10171 ;;		On entry : 0/0
 10172 ;;		On exit  : 0/0
 10173 ;;		Unchanged: 0/0
 10174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10179 ;;Total ram usage:        0 bytes
 10180 ;; Hardware stack levels used:    1
 10181 ;; Hardware stack levels required when called:    5
 10182 ;; This function calls:
 10183 ;;		Nothing
 10184 ;; This function is called by:
 10185 ;;		_Mcu_Initialization
 10186 ;; This function uses a non-reentrant model
 10187 ;;
 10188                           
 10189                           
 10190                           ;psect for function _IO_Set
 10191  1D8F                     _IO_Set:	
 10192                           
 10193                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10194                           
 10195                           ;incstack = 0
 10196                           ; Regs used in _IO_Set: [wreg+status,2]
 10197  1D8F  3077               	movlw	119
 10198  1D90  0021               	movlb	1	; select bank1
 10199  1D91  008C               	movwf	12	;volatile
 10200                           
 10201                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10202  1D92  3007               	movlw	7
 10203  1D93  008D               	movwf	13	;volatile
 10204                           
 10205                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10206  1D94  300C               	movlw	12
 10207  1D95  008E               	movwf	14	;volatile
 10208                           
 10209                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10210  1D96  0022               	movlb	2	; select bank2
 10211  1D97  018C               	clrf	12	;volatile
 10212                           
 10213                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10214  1D98  3002               	movlw	2
 10215  1D99  008D               	movwf	13	;volatile
 10216                           
 10217                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10218  1D9A  018E               	clrf	14	;volatile
 10219                           
 10220                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10221  1D9B  3022               	movlw	34
 10222  1D9C  0023               	movlb	3	; select bank3
 10223  1D9D  008C               	movwf	12	;volatile
 10224                           
 10225                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10226  1D9E  018D               	clrf	13	;volatile
 10227                           
 10228                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10229  1D9F  018E               	clrf	14	;volatile
 10230                           
 10231                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10232  1DA0  3077               	movlw	119
 10233  1DA1  0020               	movlb	0	; select bank0
 10234  1DA2  008C               	movwf	12	;volatile
 10235                           
 10236                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10237  1DA3  3007               	movlw	7
 10238  1DA4  008D               	movwf	13	;volatile
 10239                           
 10240                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10241  1DA5  300C               	movlw	12
 10242  1DA6  008E               	movwf	14	;volatile
 10243  1DA7  0008               	return
 10244  1DA8                     __end_of_IO_Set:	
 10245                           
 10246                           	psect	text54
 10247  1B25                     __ptext54:	
 10248 ;; *************** function _IOC_Set *****************
 10249 ;; Defined at:
 10250 ;;		line 263 in file "../src/MCU_B1.c"
 10251 ;; Parameters:    Size  Location     Type
 10252 ;;		None
 10253 ;; Auto vars:     Size  Location     Type
 10254 ;;		None
 10255 ;; Return value:  Size  Location     Type
 10256 ;;		None               void
 10257 ;; Registers used:
 10258 ;;		wreg, status,2
 10259 ;; Tracked objects:
 10260 ;;		On entry : 0/0
 10261 ;;		On exit  : 0/0
 10262 ;;		Unchanged: 0/0
 10263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;Total ram usage:        0 bytes
 10269 ;; Hardware stack levels used:    1
 10270 ;; Hardware stack levels required when called:    5
 10271 ;; This function calls:
 10272 ;;		Nothing
 10273 ;; This function is called by:
 10274 ;;		_Mcu_Initialization
 10275 ;; This function uses a non-reentrant model
 10276 ;;
 10277                           
 10278                           
 10279                           ;psect for function _IOC_Set
 10280  1B25                     _IOC_Set:	
 10281                           
 10282                           ;MCU_B1.c: 264: WPUB2 = 0;
 10283                           
 10284                           ;incstack = 0
 10285                           ; Regs used in _IOC_Set: [wreg+status,2]
 10286  1B25  0024               	movlb	4	; select bank4
 10287  1B26  110D               	bcf	13,2	;volatile
 10288                           
 10289                           ;MCU_B1.c: 266: IOCBP = 0b00000100;
 10290  1B27  3004               	movlw	4
 10291  1B28  0027               	movlb	7	; select bank7
 10292  1B29  0094               	movwf	20	;volatile
 10293                           
 10294                           ;MCU_B1.c: 267: IOCBN = 0b00000100;
 10295  1B2A  3004               	movlw	4
 10296  1B2B  0095               	movwf	21	;volatile
 10297                           
 10298                           ;MCU_B1.c: 282: IOCBF = 0b00000000;
 10299  1B2C  0196               	clrf	22	;volatile
 10300                           
 10301                           ;MCU_B1.c: 284: IOCIE = 1;
 10302  1B2D  158B               	bsf	11,3	;volatile
 10303                           
 10304                           ;MCU_B1.c: 285: IOCIF = 0;
 10305  1B2E  100B               	bcf	11,0	;volatile
 10306                           
 10307                           ;MCU_B1.c: 286: PEIE = 1;
 10308  1B2F  170B               	bsf	11,6	;volatile
 10309                           
 10310                           ;MCU_B1.c: 287: GIE = 1;
 10311  1B30  178B               	bsf	11,7	;volatile
 10312  1B31  0008               	return
 10313  1B32                     __end_of_IOC_Set:	
 10314                           
 10315                           	psect	text55
 10316  1A3A                     __ptext55:	
 10317 ;; *************** function _Fosc_Set *****************
 10318 ;; Defined at:
 10319 ;;		line 56 in file "../src/MCU_B1.c"
 10320 ;; Parameters:    Size  Location     Type
 10321 ;;		None
 10322 ;; Auto vars:     Size  Location     Type
 10323 ;;		None
 10324 ;; Return value:  Size  Location     Type
 10325 ;;		None               void
 10326 ;; Registers used:
 10327 ;;		wreg
 10328 ;; Tracked objects:
 10329 ;;		On entry : 0/0
 10330 ;;		On exit  : 0/0
 10331 ;;		Unchanged: 0/0
 10332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;Total ram usage:        0 bytes
 10338 ;; Hardware stack levels used:    1
 10339 ;; Hardware stack levels required when called:    5
 10340 ;; This function calls:
 10341 ;;		Nothing
 10342 ;; This function is called by:
 10343 ;;		_Mcu_Initialization
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347                           
 10348                           ;psect for function _Fosc_Set
 10349  1A3A                     _Fosc_Set:	
 10350                           
 10351                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10352                           
 10353                           ;incstack = 0
 10354                           ; Regs used in _Fosc_Set: [wreg]
 10355  1A3A  3078               	movlw	120
 10356  1A3B  0021               	movlb	1	; select bank1
 10357  1A3C  0099               	movwf	25	;volatile
 10358  1A3D  0008               	return
 10359  1A3E                     __end_of_Fosc_Set:	
 10360                           
 10361                           	psect	text56
 10362  1A5B                     __ptext56:	
 10363 ;; *************** function _ADC_Set *****************
 10364 ;; Defined at:
 10365 ;;		line 309 in file "../src/MCU_B1.c"
 10366 ;; Parameters:    Size  Location     Type
 10367 ;;		None
 10368 ;; Auto vars:     Size  Location     Type
 10369 ;;		None
 10370 ;; Return value:  Size  Location     Type
 10371 ;;		None               void
 10372 ;; Registers used:
 10373 ;;		wreg
 10374 ;; Tracked objects:
 10375 ;;		On entry : 0/0
 10376 ;;		On exit  : 0/0
 10377 ;;		Unchanged: 0/0
 10378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;Total ram usage:        0 bytes
 10384 ;; Hardware stack levels used:    1
 10385 ;; Hardware stack levels required when called:    5
 10386 ;; This function calls:
 10387 ;;		Nothing
 10388 ;; This function is called by:
 10389 ;;		_Mcu_Initialization
 10390 ;; This function uses a non-reentrant model
 10391 ;;
 10392                           
 10393                           
 10394                           ;psect for function _ADC_Set
 10395  1A5B                     _ADC_Set:	
 10396                           
 10397                           ;MCU_B1.c: 310: ADCON1 = 0xf2;
 10398                           
 10399                           ;incstack = 0
 10400                           ; Regs used in _ADC_Set: [wreg]
 10401  1A5B  30F2               	movlw	242
 10402  1A5C  0021               	movlb	1	; select bank1
 10403  1A5D  009E               	movwf	30	;volatile
 10404                           
 10405                           ;MCU_B1.c: 311: FVRCON = 0xc0;
 10406  1A5E  30C0               	movlw	192
 10407  1A5F  0022               	movlb	2	; select bank2
 10408  1A60  0097               	movwf	23	;volatile
 10409  1A61  0008               	return
 10410  1A62                     __end_of_ADC_Set:	
 10411                           
 10412                           	psect	text57
 10413  0214                     __ptext57:	
 10414 ;; *************** function _Load_Main *****************
 10415 ;; Defined at:
 10416 ;;		line 39 in file "../src/OverLoad_B1.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;		None
 10419 ;; Auto vars:     Size  Location     Type
 10420 ;;  i               1   19[BANK0 ] unsigned char 
 10421 ;; Return value:  Size  Location     Type
 10422 ;;		None               void
 10423 ;; Registers used:
 10424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10425 ;; Tracked objects:
 10426 ;;		On entry : 0/0
 10427 ;;		On exit  : 0/0
 10428 ;;		Unchanged: 0/0
 10429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;Total ram usage:        3 bytes
 10435 ;; Hardware stack levels used:    1
 10436 ;; Hardware stack levels required when called:   10
 10437 ;; This function calls:
 10438 ;;		___lwdiv
 10439 ;;		___wmul
 10440 ;;		_getTemp_Safe
 10441 ;;		_setDimmerLights_Clear
 10442 ;;		_setLoad_AH_AL_Restore
 10443 ;;		_setLoad_Exceptions
 10444 ;; This function is called by:
 10445 ;;		_main
 10446 ;; This function uses a non-reentrant model
 10447 ;;
 10448                           
 10449                           
 10450                           ;psect for function _Load_Main
 10451  0214                     _Load_Main:	
 10452                           
 10453                           ;OverLoad_B1.c: 40: char i = 0;
 10454                           
 10455                           ;incstack = 0
 10456                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10457  0214  0020               	movlb	0	; select bank0
 10458  0215  01B3               	clrf	Load_Main@i
 10459                           
 10460                           ;OverLoad_B1.c: 41: if (Load1.ERROR == 1) {
 10461  0216  0023               	movlb	3	; select bank3
 10462  0217  1EA0               	btfss	_Load1^(0+384),5
 10463  0218  2A2A               	goto	l1684
 10464                           
 10465                           ;OverLoad_B1.c: 42: Load1.ErrorTime++;
 10466  0219  3001               	movlw	1
 10467  021A  07A3               	addwf	(_Load1^(0+384)+3),f
 10468  021B  3000               	movlw	0
 10469  021C  3DA4               	addwfc	((_Load1+1)^(0+384)+3),f
 10470                           
 10471                           ;OverLoad_B1.c: 43: if (Load1.ErrorTime >= 1000)
 10472  021D  3003               	movlw	3
 10473  021E  0224               	subwf	((_Load1+1)^(0+384)+3),w
 10474  021F  30E8               	movlw	232
 10475  0220  1903               	skipnz
 10476  0221  0223               	subwf	(_Load1^(0+384)+3),w
 10477  0222  1C03               	skipc
 10478  0223  0008               	return
 10479                           
 10480                           ;OverLoad_B1.c: 44: {
 10481                           ;OverLoad_B1.c: 45: Load1.ErrorTime = 0;
 10482  0224  01A3               	clrf	(_Load1^(0+384)+3)
 10483  0225  01A4               	clrf	((_Load1+1)^(0+384)+3)
 10484                           
 10485                           ;OverLoad_B1.c: 46: setLoad_Exceptions(0);
 10486  0226  3000               	movlw	0
 10487  0227  3192  2206         	fcall	_setLoad_Exceptions
 10488                           
 10489                           ;OverLoad_B1.c: 47: }
 10490                           ;OverLoad_B1.c: 48: } else {
 10491  0229  0008               	return
 10492  022A                     l1684:	
 10493                           
 10494                           ;OverLoad_B1.c: 49: if (Load1.ADtoGO == 1) {
 10495  022A  1E20               	btfss	_Load1^(0+384),4
 10496  022B  2B55               	goto	l1687
 10497                           
 10498                           ;OverLoad_B1.c: 50: Load1.Time++;
 10499  022C  3001               	movlw	1
 10500  022D  07A1               	addwf	(_Load1^(0+384)+1),f
 10501  022E  3000               	movlw	0
 10502  022F  3DA2               	addwfc	((_Load1+1)^(0+384)+1),f
 10503                           
 10504                           ;OverLoad_B1.c: 51: if (Load1.Time >= 5)
 10505  0230  3000               	movlw	0
 10506  0231  0222               	subwf	((_Load1+1)^(0+384)+1),w
 10507  0232  3005               	movlw	5
 10508  0233  1903               	skipnz
 10509  0234  0221               	subwf	(_Load1^(0+384)+1),w
 10510  0235  1C03               	skipc
 10511  0236  0008               	return
 10512                           
 10513                           ;OverLoad_B1.c: 52: {
 10514                           ;OverLoad_B1.c: 53: Load1.Time = 0;
 10515  0237  01A1               	clrf	(_Load1^(0+384)+1)
 10516  0238  01A2               	clrf	((_Load1+1)^(0+384)+1)
 10517                           
 10518                           ;OverLoad_B1.c: 54: Load1.ADtoGO = 0;
 10519  0239  1220               	bcf	_Load1^(0+384),4
 10520                           
 10521                           ;OverLoad_B1.c: 55: Load1.LightsCount = Load1.Lights1Status + Load1.Lights2Status + Load
      +                          1.Lights3Status;
 10522  023A  0863               	movf	(_Load1^(0+384)+67),w
 10523  023B  0764               	addwf	(_Load1^(0+384)+68),w
 10524  023C  0765               	addwf	(_Load1^(0+384)+69),w
 10525  023D  0020               	movlb	0	; select bank0
 10526  023E  00B1               	movwf	??_Load_Main
 10527  023F  0831               	movf	??_Load_Main,w
 10528  0240  0023               	movlb	3	; select bank3
 10529  0241  00DE               	movwf	(_Load1^(0+384)+62)
 10530                           
 10531                           ;OverLoad_B1.c: 56: for (i = 1; i < 4; i++) {
 10532  0242  0020               	movlb	0	; select bank0
 10533  0243  01B3               	clrf	Load_Main@i
 10534  0244  0AB3               	incf	Load_Main@i,f
 10535  0245  3004               	movlw	4
 10536  0246  0233               	subwf	Load_Main@i,w
 10537  0247  1803               	btfsc	3,0
 10538  0248  2A73               	goto	l9740
 10539  0249                     l9734:	
 10540                           
 10541                           ;OverLoad_B1.c: 57: Load1.ADH += Load1.AH[i];
 10542  0249  3533               	lslf	Load_Main@i,w
 10543  024A  3EA8               	addlw	(_Load1+8)& (0+255)
 10544  024B  0086               	movwf	6
 10545  024C  3001               	movlw	1	; select bank3/4
 10546  024D  0087               	movwf	7
 10547  024E  3F40               	moviw [0]fsr1
 10548  024F  00B1               	movwf	??_Load_Main
 10549  0250  3F41               	moviw [1]fsr1
 10550  0251  00B2               	movwf	??_Load_Main+1
 10551  0252  0831               	movf	??_Load_Main,w
 10552  0253  0023               	movlb	3	; select bank3
 10553  0254  07CE               	addwf	(_Load1^(0+384)+46),f
 10554  0255  0020               	movlb	0	; select bank0
 10555  0256  0832               	movf	??_Load_Main+1,w
 10556  0257  0023               	movlb	3	; select bank3
 10557  0258  3DCF               	addwfc	((_Load1+1)^(0+384)+46),f
 10558                           
 10559                           ;OverLoad_B1.c: 58: Load1.ADL += Load1.AL[i];
 10560  0259  0020               	movlb	0	; select bank0
 10561  025A  3533               	lslf	Load_Main@i,w
 10562  025B  3EBA               	addlw	(_Load1+26)& (0+255)
 10563  025C  0086               	movwf	6
 10564  025D  3001               	movlw	1	; select bank3/4
 10565  025E  0087               	movwf	7
 10566  025F  3F40               	moviw [0]fsr1
 10567  0260  00B1               	movwf	??_Load_Main
 10568  0261  3F41               	moviw [1]fsr1
 10569  0262  00B2               	movwf	??_Load_Main+1
 10570  0263  0831               	movf	??_Load_Main,w
 10571  0264  0023               	movlb	3	; select bank3
 10572  0265  07D0               	addwf	(_Load1^(0+384)+48),f
 10573  0266  0020               	movlb	0	; select bank0
 10574  0267  0832               	movf	??_Load_Main+1,w
 10575  0268  0023               	movlb	3	; select bank3
 10576  0269  3DD1               	addwfc	((_Load1+1)^(0+384)+48),f
 10577  026A  3001               	movlw	1
 10578  026B  0020               	movlb	0	; select bank0
 10579  026C  00B1               	movwf	??_Load_Main
 10580  026D  0831               	movf	??_Load_Main,w
 10581  026E  07B3               	addwf	Load_Main@i,f
 10582  026F  3004               	movlw	4
 10583  0270  0233               	subwf	Load_Main@i,w
 10584  0271  1C03               	skipc
 10585  0272  2A49               	goto	l9734
 10586  0273                     l9740:	
 10587                           
 10588                           ;OverLoad_B1.c: 59: }
 10589                           ;OverLoad_B1.c: 60: Load1.ADH /= 3;
 10590  0273  3003               	movlw	3
 10591  0274  00A0               	movwf	___lwdiv@divisor
 10592  0275  3000               	movlw	0
 10593  0276  00A1               	movwf	___lwdiv@divisor+1
 10594  0277  0023               	movlb	3	; select bank3
 10595  0278  084F               	movf	((_Load1+1)^(0+384)+46),w
 10596  0279  0020               	movlb	0	; select bank0
 10597  027A  01A3               	clrf	___lwdiv@dividend+1
 10598  027B  07A3               	addwf	___lwdiv@dividend+1,f
 10599  027C  0023               	movlb	3	; select bank3
 10600  027D  084E               	movf	(_Load1^(0+384)+46),w
 10601  027E  0020               	movlb	0	; select bank0
 10602  027F  01A2               	clrf	___lwdiv@dividend
 10603  0280  07A2               	addwf	___lwdiv@dividend,f
 10604  0281  3191  21CF  3182   	fcall	___lwdiv
 10605  0284  0020               	movlb	0	; select bank0
 10606  0285  0821               	movf	?___lwdiv+1,w
 10607  0286  0023               	movlb	3	; select bank3
 10608  0287  01CF               	clrf	((_Load1+1)^(0+384)+46)
 10609  0288  07CF               	addwf	((_Load1+1)^(0+384)+46),f
 10610  0289  0020               	movlb	0	; select bank0
 10611  028A  0820               	movf	?___lwdiv,w
 10612  028B  0023               	movlb	3	; select bank3
 10613  028C  01CE               	clrf	(_Load1^(0+384)+46)
 10614  028D  07CE               	addwf	(_Load1^(0+384)+46),f
 10615                           
 10616                           ;OverLoad_B1.c: 61: Load1.ADL /= 3;
 10617  028E  3003               	movlw	3
 10618  028F  0020               	movlb	0	; select bank0
 10619  0290  00A0               	movwf	___lwdiv@divisor
 10620  0291  3000               	movlw	0
 10621  0292  00A1               	movwf	___lwdiv@divisor+1
 10622  0293  0023               	movlb	3	; select bank3
 10623  0294  0851               	movf	((_Load1+1)^(0+384)+48),w
 10624  0295  0020               	movlb	0	; select bank0
 10625  0296  01A3               	clrf	___lwdiv@dividend+1
 10626  0297  07A3               	addwf	___lwdiv@dividend+1,f
 10627  0298  0023               	movlb	3	; select bank3
 10628  0299  0850               	movf	(_Load1^(0+384)+48),w
 10629  029A  0020               	movlb	0	; select bank0
 10630  029B  01A2               	clrf	___lwdiv@dividend
 10631  029C  07A2               	addwf	___lwdiv@dividend,f
 10632  029D  3191  21CF  3182   	fcall	___lwdiv
 10633  02A0  0020               	movlb	0	; select bank0
 10634  02A1  0821               	movf	?___lwdiv+1,w
 10635  02A2  0023               	movlb	3	; select bank3
 10636  02A3  01D1               	clrf	((_Load1+1)^(0+384)+48)
 10637  02A4  07D1               	addwf	((_Load1+1)^(0+384)+48),f
 10638  02A5  0020               	movlb	0	; select bank0
 10639  02A6  0820               	movf	?___lwdiv,w
 10640  02A7  0023               	movlb	3	; select bank3
 10641  02A8  01D0               	clrf	(_Load1^(0+384)+48)
 10642  02A9  07D0               	addwf	(_Load1^(0+384)+48),f
 10643                           
 10644                           ;OverLoad_B1.c: 62: if (Load1.ADH > Load1.ADL) {
 10645  02AA  084F               	movf	((_Load1+1)^(0+384)+46),w
 10646  02AB  0251               	subwf	((_Load1+1)^(0+384)+48),w
 10647  02AC  1D03               	skipz
 10648  02AD  2AB0               	goto	u10575
 10649  02AE  084E               	movf	(_Load1^(0+384)+46),w
 10650  02AF  0250               	subwf	(_Load1^(0+384)+48),w
 10651  02B0                     u10575:	
 10652  02B0  1803               	skipnc
 10653  02B1  2B52               	goto	l9798
 10654                           
 10655                           ;OverLoad_B1.c: 63: Load1.AD = (Load1.ADH - Load1.ADL);
 10656  02B2  302E               	movlw	46
 10657  02B3  3EA0               	addlw	_Load1& (0+255)
 10658  02B4  0086               	movwf	6
 10659  02B5  3001               	movlw	1	; select bank3/4
 10660  02B6  0087               	movwf	7
 10661  02B7  0950               	comf	(_Load1^(0+384)+48),w
 10662  02B8  0020               	movlb	0	; select bank0
 10663  02B9  00B1               	movwf	??_Load_Main
 10664  02BA  0023               	movlb	3	; select bank3
 10665  02BB  0951               	comf	((_Load1+1)^(0+384)+48),w
 10666  02BC  0020               	movlb	0	; select bank0
 10667  02BD  00B2               	movwf	??_Load_Main+1
 10668  02BE  0AB1               	incf	??_Load_Main,f
 10669  02BF  1903               	skipnz
 10670  02C0  0AB2               	incf	??_Load_Main+1,f
 10671  02C1  3F40               	moviw [0]fsr1
 10672  02C2  0731               	addwf	??_Load_Main,w
 10673  02C3  0023               	movlb	3	; select bank3
 10674  02C4  00CC               	movwf	(_Load1^(0+384)+44)
 10675  02C5  3F41               	moviw [1]fsr1
 10676  02C6  0020               	movlb	0	; select bank0
 10677  02C7  3D32               	addwfc	??_Load_Main+1,w
 10678  02C8  0023               	movlb	3	; select bank3
 10679  02C9  00CD               	movwf	(_Load1^(0+384)+45)
 10680                           
 10681                           ;OverLoad_B1.c: 65: if (Load1.Count < 2) {
 10682  02CA  3002               	movlw	2
 10683  02CB  025A               	subwf	(_Load1^(0+384)+58),w
 10684  02CC  1803               	skipnc
 10685  02CD  2AEF               	goto	l9762
 10686                           
 10687                           ;OverLoad_B1.c: 66: Load1.Count++;
 10688  02CE  3001               	movlw	1
 10689  02CF  0020               	movlb	0	; select bank0
 10690  02D0  00B1               	movwf	??_Load_Main
 10691  02D1  0831               	movf	??_Load_Main,w
 10692  02D2  0023               	movlb	3	; select bank3
 10693  02D3  07DA               	addwf	(_Load1^(0+384)+58),f
 10694                           
 10695                           ;OverLoad_B1.c: 67: if (Load1.Count == 1) {
 10696  02D4  085A               	movf	(_Load1^(0+384)+58),w
 10697  02D5  3A01               	xorlw	1
 10698  02D6  1D03               	skipz
 10699  02D7  2ADC               	goto	l9754
 10700                           
 10701                           ;OverLoad_B1.c: 68: Load1.JudgeValue = 500;
 10702  02D8  30F4               	movlw	244
 10703  02D9  00D6               	movwf	(_Load1^(0+384)+54)
 10704  02DA  3001               	movlw	1
 10705  02DB  2AE7               	goto	L6
 10706  02DC                     l9754:	
 10707                           ;OverLoad_B1.c: 69: } else if (Load1.Count == 2) {
 10708                           
 10709  02DC  085A               	movf	(_Load1^(0+384)+58),w
 10710  02DD  3A02               	xorlw	2
 10711  02DE  1D03               	skipz
 10712  02DF  2AEF               	goto	l9762
 10713                           
 10714                           ;OverLoad_B1.c: 70: if (Load1.LightsCount == 1) {
 10715  02E0  085E               	movf	(_Load1^(0+384)+62),w
 10716  02E1  3A01               	xorlw	1
 10717  02E2  1D03               	skipz
 10718  02E3  2AE9               	goto	l9760
 10719                           
 10720                           ;OverLoad_B1.c: 71: Load1.JudgeValue = 0x32;
 10721  02E4  3032               	movlw	50
 10722  02E5  00D6               	movwf	(_Load1^(0+384)+54)
 10723  02E6  3000               	movlw	0
 10724  02E7                     L6:	
 10725  02E7  00D7               	movwf	(_Load1^(0+384)+55)
 10726                           
 10727                           ;OverLoad_B1.c: 72: } else {
 10728  02E8  2AEF               	goto	l9762
 10729  02E9                     l9760:	
 10730                           
 10731                           ;OverLoad_B1.c: 73: Load1.JudgeValue = (0x32 + Load1.TotalLoad) - 0x08;
 10732  02E9  0826               	movf	(_Load1^(0+384)+6),w
 10733  02EA  3E2A               	addlw	42
 10734  02EB  00D6               	movwf	(_Load1^(0+384)+54)
 10735  02EC  3000               	movlw	0
 10736  02ED  3D27               	addwfc	((_Load1+1)^(0+384)+6),w
 10737  02EE  00D7               	movwf	((_Load1+1)^(0+384)+54)
 10738  02EF                     l9762:	
 10739                           
 10740                           ;OverLoad_B1.c: 74: }
 10741                           ;OverLoad_B1.c: 75: }
 10742                           ;OverLoad_B1.c: 76: }
 10743                           ;OverLoad_B1.c: 78: if (Load1.AD >= Load1.JudgeValue) {
 10744  02EF  0857               	movf	((_Load1+1)^(0+384)+54),w
 10745  02F0  024D               	subwf	((_Load1+1)^(0+384)+44),w
 10746  02F1  1D03               	skipz
 10747  02F2  2AF5               	goto	u10625
 10748  02F3  0856               	movf	(_Load1^(0+384)+54),w
 10749  02F4  024C               	subwf	(_Load1^(0+384)+44),w
 10750  02F5                     u10625:	
 10751  02F5  1C03               	skipc
 10752  02F6  2B07               	goto	l9772
 10753                           
 10754                           ;OverLoad_B1.c: 79: Load1.ErrorCount++;
 10755  02F7  3001               	movlw	1
 10756  02F8  0020               	movlb	0	; select bank0
 10757  02F9  00B1               	movwf	??_Load_Main
 10758  02FA  0831               	movf	??_Load_Main,w
 10759  02FB  0023               	movlb	3	; select bank3
 10760  02FC  07DC               	addwf	(_Load1^(0+384)+60),f
 10761                           
 10762                           ;OverLoad_B1.c: 80: if (Load1.ErrorCount > 2) {
 10763  02FD  3003               	movlw	3
 10764  02FE  025C               	subwf	(_Load1^(0+384)+60),w
 10765  02FF  1C03               	skipc
 10766  0300  2B52               	goto	l9798
 10767                           
 10768                           ;OverLoad_B1.c: 81: Load1.ErrorCount = 0;
 10769  0301  01DC               	clrf	(_Load1^(0+384)+60)
 10770                           
 10771                           ;OverLoad_B1.c: 82: setLoad_Exceptions(1);
 10772  0302  3001               	movlw	1
 10773  0303  3192  2206  3182   	fcall	_setLoad_Exceptions
 10774                           
 10775                           ;OverLoad_B1.c: 90: }
 10776                           ;OverLoad_B1.c: 91: } else {
 10777  0306  2B52               	goto	l9798
 10778  0307                     l9772:	
 10779                           
 10780                           ;OverLoad_B1.c: 92: Load1.ErrorCount = 0;
 10781  0307  0023               	movlb	3	; select bank3
 10782  0308  01DC               	clrf	(_Load1^(0+384)+60)
 10783                           
 10784                           ;OverLoad_B1.c: 93: if (Load1.SafeCount < 10) {
 10785  0309  300A               	movlw	10
 10786  030A  0262               	subwf	(_Load1^(0+384)+66),w
 10787  030B  1803               	skipnc
 10788  030C  2B13               	goto	l9778
 10789                           
 10790                           ;OverLoad_B1.c: 94: Load1.SafeCount++;
 10791  030D  3001               	movlw	1
 10792  030E  0020               	movlb	0	; select bank0
 10793  030F  00B1               	movwf	??_Load_Main
 10794  0310  0831               	movf	??_Load_Main,w
 10795  0311  0023               	movlb	3	; select bank3
 10796  0312  07E2               	addwf	(_Load1^(0+384)+66),f
 10797  0313                     l9778:	
 10798                           
 10799                           ;OverLoad_B1.c: 95: }
 10800                           ;OverLoad_B1.c: 96: if (Load1.SafeCount >= 10) {
 10801  0313  300A               	movlw	10
 10802  0314  0262               	subwf	(_Load1^(0+384)+66),w
 10803  0315  1C03               	skipc
 10804  0316  2B52               	goto	l9798
 10805                           
 10806                           ;OverLoad_B1.c: 97: Load1.Safe = 1;
 10807  0317  15A0               	bsf	_Load1^(0+384),3
 10808                           
 10809                           ;OverLoad_B1.c: 101: setDimmerLights_Clear(1, 1);
 10810  0318  0020               	movlb	0	; select bank0
 10811  0319  01A2               	clrf	setDimmerLights_Clear@command
 10812  031A  0AA2               	incf	setDimmerLights_Clear@command,f
 10813  031B  3001               	movlw	1
 10814  031C  319B  23C7  3182   	fcall	_setDimmerLights_Clear
 10815                           
 10816                           ;OverLoad_B1.c: 105: ;;
 10817                           ;OverLoad_B1.c: 111: setDimmerLights_Clear(2, 1);
 10818  031F  0020               	movlb	0	; select bank0
 10819  0320  01A2               	clrf	setDimmerLights_Clear@command
 10820  0321  0AA2               	incf	setDimmerLights_Clear@command,f
 10821  0322  3002               	movlw	2
 10822  0323  319B  23C7  3182   	fcall	_setDimmerLights_Clear
 10823                           
 10824                           ;OverLoad_B1.c: 115: ;;
 10825                           ;OverLoad_B1.c: 129: if (Load1.StatusOn == 1) {
 10826  0326  0023               	movlb	3	; select bank3
 10827  0327  1F20               	btfss	_Load1^(0+384),6
 10828  0328  2B30               	goto	l9790
 10829                           
 10830                           ;OverLoad_B1.c: 130: Load1.StatusOn = 0;
 10831  0329  1320               	bcf	_Load1^(0+384),6
 10832                           
 10833                           ;OverLoad_B1.c: 131: Load1.TotalLoad = Load1.AD;
 10834  032A  084D               	movf	((_Load1+1)^(0+384)+44),w
 10835  032B  01A7               	clrf	((_Load1+1)^(0+384)+6)
 10836  032C  07A7               	addwf	((_Load1+1)^(0+384)+6),f
 10837  032D  084C               	movf	(_Load1^(0+384)+44),w
 10838  032E  01A6               	clrf	(_Load1^(0+384)+6)
 10839  032F  07A6               	addwf	(_Load1^(0+384)+6),f
 10840  0330                     l9790:	
 10841                           
 10842                           ;OverLoad_B1.c: 133: }
 10843                           ;OverLoad_B1.c: 135: if (Load1.StatusOff == 1) {
 10844  0330  1FA0               	btfss	_Load1^(0+384),7
 10845  0331  2B52               	goto	l9798
 10846                           
 10847                           ;OverLoad_B1.c: 136: Load1.StatusOff = 0;
 10848  0332  13A0               	bcf	_Load1^(0+384),7
 10849                           
 10850                           ;OverLoad_B1.c: 137: Load1.TotalLoad = Load1.AD;
 10851  0333  084D               	movf	((_Load1+1)^(0+384)+44),w
 10852  0334  01A7               	clrf	((_Load1+1)^(0+384)+6)
 10853  0335  07A7               	addwf	((_Load1+1)^(0+384)+6),f
 10854  0336  084C               	movf	(_Load1^(0+384)+44),w
 10855  0337  01A6               	clrf	(_Load1^(0+384)+6)
 10856  0338  07A6               	addwf	(_Load1^(0+384)+6),f
 10857                           
 10858                           ;OverLoad_B1.c: 138: Load1.JudgeValue = 0x32 * Load1.LightsCount;
 10859  0339  085E               	movf	(_Load1^(0+384)+62),w
 10860  033A  0020               	movlb	0	; select bank0
 10861  033B  00B1               	movwf	??_Load_Main
 10862  033C  01B2               	clrf	??_Load_Main+1
 10863  033D  0831               	movf	??_Load_Main,w
 10864  033E  00A0               	movwf	___wmul@multiplier
 10865  033F  0832               	movf	??_Load_Main+1,w
 10866  0340  00A1               	movwf	___wmul@multiplier+1
 10867  0341  3032               	movlw	50
 10868  0342  00A2               	movwf	___wmul@multiplicand
 10869  0343  3000               	movlw	0
 10870  0344  00A3               	movwf	___wmul@multiplicand+1
 10871  0345  319D  25C4  3182   	fcall	___wmul
 10872  0348  0020               	movlb	0	; select bank0
 10873  0349  0821               	movf	?___wmul+1,w
 10874  034A  0023               	movlb	3	; select bank3
 10875  034B  01D7               	clrf	((_Load1+1)^(0+384)+54)
 10876  034C  07D7               	addwf	((_Load1+1)^(0+384)+54),f
 10877  034D  0020               	movlb	0	; select bank0
 10878  034E  0820               	movf	?___wmul,w
 10879  034F  0023               	movlb	3	; select bank3
 10880  0350  01D6               	clrf	(_Load1^(0+384)+54)
 10881  0351  07D6               	addwf	(_Load1^(0+384)+54),f
 10882  0352                     l9798:	
 10883                           
 10884                           ;OverLoad_B1.c: 139: }
 10885                           ;OverLoad_B1.c: 140: }
 10886                           ;OverLoad_B1.c: 141: }
 10887                           ;OverLoad_B1.c: 142: }
 10888                           ;OverLoad_B1.c: 143: setLoad_AH_AL_Restore();
 10889  0352  319D  25A8         	fcall	_setLoad_AH_AL_Restore
 10890                           
 10891                           ;OverLoad_B1.c: 155: }
 10892                           ;OverLoad_B1.c: 156: } else {
 10893  0354  0008               	return
 10894  0355                     l1687:	
 10895                           
 10896                           ;OverLoad_B1.c: 157: if (Load1.GO == 1) {
 10897  0355  1CA0               	btfss	_Load1^(0+384),1
 10898  0356  2B64               	goto	l1706
 10899                           
 10900                           ;OverLoad_B1.c: 158: if (Load1.LightsON == 0) {
 10901  0357  1920               	btfsc	_Load1^(0+384),2
 10902  0358  2B5B               	goto	l9804
 10903                           
 10904                           ;OverLoad_B1.c: 159: Load1.LightsON = 1;
 10905  0359  1520               	bsf	_Load1^(0+384),2
 10906                           
 10907                           ;OverLoad_B1.c: 160: Load1.Safe = 0;
 10908  035A  11A0               	bcf	_Load1^(0+384),3
 10909  035B                     l9804:	
 10910                           
 10911                           ;OverLoad_B1.c: 161: }
 10912                           ;OverLoad_B1.c: 162: if (getTemp_Safe() == 1 && 1 == 1) {
 10913  035B  319A  2289  3182   	fcall	_getTemp_Safe
 10914  035E  3A01               	xorlw	1
 10915  035F  1D03               	skipz
 10916  0360  0008               	return
 10917                           
 10918                           ;OverLoad_B1.c: 163: Load1.ADtoGO = 1;
 10919  0361  0023               	movlb	3	; select bank3
 10920  0362  1620               	bsf	_Load1^(0+384),4
 10921                           
 10922                           ;OverLoad_B1.c: 164: }
 10923                           ;OverLoad_B1.c: 165: } else {
 10924  0363  0008               	return
 10925  0364                     l1706:	
 10926                           
 10927                           ;OverLoad_B1.c: 166: if (Load1.LightsON == 1) {
 10928  0364  1D20               	btfss	_Load1^(0+384),2
 10929  0365  0008               	return
 10930                           
 10931                           ;OverLoad_B1.c: 167: Load1.LightsON = 0;
 10932  0366  1120               	bcf	_Load1^(0+384),2
 10933                           
 10934                           ;OverLoad_B1.c: 168: Load1.Safe = 1;
 10935  0367  15A0               	bsf	_Load1^(0+384),3
 10936                           
 10937                           ;OverLoad_B1.c: 169: Load1.ErrorCount = 0;
 10938  0368  01DC               	clrf	(_Load1^(0+384)+60)
 10939                           
 10940                           ;OverLoad_B1.c: 170: Load1.Count = 0;
 10941  0369  01DA               	clrf	(_Load1^(0+384)+58)
 10942                           
 10943                           ;OverLoad_B1.c: 171: Load1.TotalLoad = 0;
 10944  036A  01A6               	clrf	(_Load1^(0+384)+6)
 10945  036B  01A7               	clrf	((_Load1+1)^(0+384)+6)
 10946                           
 10947                           ;OverLoad_B1.c: 172: Load1.NumberCount = 0;
 10948  036C  01DF               	clrf	(_Load1^(0+384)+63)
 10949                           
 10950                           ;OverLoad_B1.c: 173: Load1.StatusOn = 0;
 10951  036D  1320               	bcf	_Load1^(0+384),6
 10952                           
 10953                           ;OverLoad_B1.c: 174: Load1.StatusOff = 0;
 10954  036E  13A0               	bcf	_Load1^(0+384),7
 10955                           
 10956                           ;OverLoad_B1.c: 175: Load1.AD = 0;
 10957  036F  01CC               	clrf	(_Load1^(0+384)+44)
 10958  0370  01CD               	clrf	((_Load1+1)^(0+384)+44)
 10959                           
 10960                           ;OverLoad_B1.c: 176: setLoad_AH_AL_Restore();
 10961  0371  319D  25A8  3182   	fcall	_setLoad_AH_AL_Restore
 10962                           
 10963                           ;OverLoad_B1.c: 180: setDimmerLights_Clear(1, 1);
 10964  0374  0020               	movlb	0	; select bank0
 10965  0375  01A2               	clrf	setDimmerLights_Clear@command
 10966  0376  0AA2               	incf	setDimmerLights_Clear@command,f
 10967  0377  3001               	movlw	1
 10968  0378  319B  23C7  3182   	fcall	_setDimmerLights_Clear
 10969                           
 10970                           ;OverLoad_B1.c: 184: ;;
 10971                           ;OverLoad_B1.c: 190: setDimmerLights_Clear(2, 1);
 10972  037B  0020               	movlb	0	; select bank0
 10973  037C  01A2               	clrf	setDimmerLights_Clear@command
 10974  037D  0AA2               	incf	setDimmerLights_Clear@command,f
 10975  037E  3002               	movlw	2
 10976  037F  319B  23C7         	fcall	_setDimmerLights_Clear
 10977                           
 10978                           ;OverLoad_B1.c: 194: ;;
 10979  0381  0008               	return
 10980  0382                     __end_of_Load_Main:	
 10981                           
 10982                           	psect	text58
 10983  1206                     __ptext58:	
 10984 ;; *************** function _setLoad_Exceptions *****************
 10985 ;; Defined at:
 10986 ;;		line 231 in file "../src/OverLoad_B1.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;  command         1    wreg     unsigned char 
 10989 ;; Auto vars:     Size  Location     Type
 10990 ;;  command         1   16[BANK0 ] unsigned char 
 10991 ;;  i               1   15[BANK0 ] unsigned char 
 10992 ;; Return value:  Size  Location     Type
 10993 ;;		None               void
 10994 ;; Registers used:
 10995 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10996 ;; Tracked objects:
 10997 ;;		On entry : 0/0
 10998 ;;		On exit  : 0/0
 10999 ;;		Unchanged: 0/0
 11000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11005 ;;Total ram usage:        3 bytes
 11006 ;; Hardware stack levels used:    1
 11007 ;; Hardware stack levels required when called:    9
 11008 ;; This function calls:
 11009 ;;		_DimmerLights_Exceptions
 11010 ;;		_setLED
 11011 ;;		_setRF_Enable
 11012 ;;		_setSw_Enable
 11013 ;; This function is called by:
 11014 ;;		_Load_Main
 11015 ;; This function uses a non-reentrant model
 11016 ;;
 11017                           
 11018                           
 11019                           ;psect for function _setLoad_Exceptions
 11020  1206                     _setLoad_Exceptions:	
 11021                           
 11022                           ;incstack = 0
 11023                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11024                           ;setLoad_Exceptions@command stored from wreg
 11025  1206  0020               	movlb	0	; select bank0
 11026  1207  00B0               	movwf	setLoad_Exceptions@command
 11027                           
 11028                           ;OverLoad_B1.c: 232: char i = command == 1 ? 0 : 1;
 11029  1208  0830               	movf	setLoad_Exceptions@command,w
 11030  1209  3A01               	xorlw	1
 11031  120A  3000               	movlw	0
 11032  120B  1D03               	skipz
 11033  120C  3001               	movlw	1
 11034  120D  00AE               	movwf	??_setLoad_Exceptions
 11035  120E  082E               	movf	??_setLoad_Exceptions,w
 11036  120F  00AF               	movwf	setLoad_Exceptions@i
 11037                           
 11038                           ;OverLoad_B1.c: 233: Load1.ERROR = command;
 11039  1210  0830               	movf	setLoad_Exceptions@command,w
 11040  1211  0023               	movlb	3	; select bank3
 11041  1212  12A0               	bcf	_Load1^(0+384),5
 11042  1213  1D03               	skipz
 11043  1214  16A0               	bsf	_Load1^(0+384),5
 11044                           
 11045                           ;OverLoad_B1.c: 234: Load1.Safe = i;
 11046  1215  0020               	movlb	0	; select bank0
 11047  1216  082F               	movf	setLoad_Exceptions@i,w
 11048  1217  0023               	movlb	3	; select bank3
 11049  1218  11A0               	bcf	_Load1^(0+384),3
 11050  1219  1D03               	skipz
 11051  121A  15A0               	bsf	_Load1^(0+384),3
 11052                           
 11053                           ;OverLoad_B1.c: 235: Load1.ErrorStatus = command;
 11054  121B  0020               	movlb	0	; select bank0
 11055  121C  0830               	movf	setLoad_Exceptions@command,w
 11056  121D  00AE               	movwf	??_setLoad_Exceptions
 11057  121E  082E               	movf	??_setLoad_Exceptions,w
 11058  121F  0023               	movlb	3	; select bank3
 11059  1220  00A5               	movwf	(_Load1^(0+384)+5)
 11060                           
 11061                           ;OverLoad_B1.c: 237: if (command == 1) {
 11062  1221  0020               	movlb	0	; select bank0
 11063  1222  0830               	movf	setLoad_Exceptions@command,w
 11064  1223  3A01               	xorlw	1
 11065  1224  1D03               	skipz
 11066  1225  2A2A               	goto	l1714
 11067                           
 11068                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 11069  1226  3002               	movlw	2
 11070  1227  3194  24EC  3192   	fcall	_DimmerLights_Exceptions
 11071  122A                     l1714:	
 11072                           
 11073                           ;OverLoad_B1.c: 242: }
 11074                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 11075  122A  0020               	movlb	0	; select bank0
 11076  122B  0830               	movf	setLoad_Exceptions@command,w
 11077  122C  3E0A               	addlw	10
 11078  122D  00AE               	movwf	??_setLoad_Exceptions
 11079  122E  082E               	movf	??_setLoad_Exceptions,w
 11080  122F  00A1               	movwf	setLED@command
 11081  1230  3063               	movlw	99
 11082  1231  3197  279E  3192   	fcall	_setLED
 11083                           
 11084                           ;OverLoad_B1.c: 245: setSw_Enable(i);
 11085  1234  0020               	movlb	0	; select bank0
 11086  1235  082F               	movf	setLoad_Exceptions@i,w
 11087  1236  319D  25E2  3192   	fcall	_setSw_Enable
 11088                           
 11089                           ;OverLoad_B1.c: 247: setRF_Enable(i);
 11090  1239  0020               	movlb	0	; select bank0
 11091  123A  082F               	movf	setLoad_Exceptions@i,w
 11092  123B  319B  234D         	fcall	_setRF_Enable
 11093  123D  0008               	return
 11094  123E                     __end_of_setLoad_Exceptions:	
 11095                           
 11096                           	psect	text59
 11097  1DE2                     __ptext59:	
 11098 ;; *************** function _setSw_Enable *****************
 11099 ;; Defined at:
 11100 ;;		line 91 in file "../src/Switch_B1.c"
 11101 ;; Parameters:    Size  Location     Type
 11102 ;;  command         1    wreg     unsigned char 
 11103 ;; Auto vars:     Size  Location     Type
 11104 ;;  command         1    1[BANK0 ] unsigned char 
 11105 ;; Return value:  Size  Location     Type
 11106 ;;		None               void
 11107 ;; Registers used:
 11108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11109 ;; Tracked objects:
 11110 ;;		On entry : 0/0
 11111 ;;		On exit  : 0/0
 11112 ;;		Unchanged: 0/0
 11113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11118 ;;Total ram usage:        1 bytes
 11119 ;; Hardware stack levels used:    1
 11120 ;; Hardware stack levels required when called:    6
 11121 ;; This function calls:
 11122 ;;		_SwPointSelect
 11123 ;; This function is called by:
 11124 ;;		_my_Main
 11125 ;;		_setLoad_Exceptions
 11126 ;;		_setOverTemp_Exceptions
 11127 ;; This function uses a non-reentrant model
 11128 ;;
 11129                           
 11130                           
 11131                           ;psect for function _setSw_Enable
 11132  1DE2                     _setSw_Enable:	
 11133                           
 11134                           ;incstack = 0
 11135                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11136                           ;setSw_Enable@command stored from wreg
 11137  1DE2  0020               	movlb	0	; select bank0
 11138  1DE3  00A1               	movwf	setSw_Enable@command
 11139                           
 11140                           ;Switch_B1.c: 94: SwPointSelect(1);
 11141  1DE4  3001               	movlw	1
 11142  1DE5  319D  2519  319D   	fcall	_SwPointSelect
 11143                           
 11144                           ;Switch_B1.c: 95: Sw->Enable = command;
 11145  1DE8  0021               	movlb	1	; select bank1
 11146  1DE9  0847               	movf	_Sw^(0+128),w
 11147  1DEA  0086               	movwf	6
 11148  1DEB  0848               	movf	(_Sw+1)^(0+128),w
 11149  1DEC  0087               	movwf	7
 11150  1DED  0020               	movlb	0	; select bank0
 11151  1DEE  0821               	movf	setSw_Enable@command,w
 11152  1DEF  1001               	bcf	1,0
 11153  1DF0  1D03               	skipz
 11154  1DF1  1401               	bsf	1,0
 11155                           
 11156                           ;Switch_B1.c: 99: SwPointSelect(2);
 11157  1DF2  3002               	movlw	2
 11158  1DF3  319D  2519         	fcall	_SwPointSelect
 11159                           
 11160                           ;Switch_B1.c: 100: Sw->Enable = command;
 11161  1DF5  0021               	movlb	1	; select bank1
 11162  1DF6  0847               	movf	_Sw^(0+128),w
 11163  1DF7  0086               	movwf	6
 11164  1DF8  0848               	movf	(_Sw+1)^(0+128),w
 11165  1DF9  0087               	movwf	7
 11166  1DFA  0020               	movlb	0	; select bank0
 11167  1DFB  0821               	movf	setSw_Enable@command,w
 11168  1DFC  1001               	bcf	1,0
 11169  1DFD  1D03               	skipz
 11170  1DFE  1401               	bsf	1,0
 11171  1DFF  0008               	return
 11172  1E00                     __end_of_setSw_Enable:	
 11173                           
 11174                           	psect	text60
 11175  1B4D                     __ptext60:	
 11176 ;; *************** function _setRF_Enable *****************
 11177 ;; Defined at:
 11178 ;;		line 178 in file "../src/RF_Control_B1.c"
 11179 ;; Parameters:    Size  Location     Type
 11180 ;;  command         1    wreg     unsigned char 
 11181 ;; Auto vars:     Size  Location     Type
 11182 ;;  command         1    0[BANK0 ] unsigned char 
 11183 ;; Return value:  Size  Location     Type
 11184 ;;		None               void
 11185 ;; Registers used:
 11186 ;;		wreg, status,2
 11187 ;; Tracked objects:
 11188 ;;		On entry : 0/0
 11189 ;;		On exit  : 0/0
 11190 ;;		Unchanged: 0/0
 11191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11193 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11195 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11196 ;;Total ram usage:        1 bytes
 11197 ;; Hardware stack levels used:    1
 11198 ;; Hardware stack levels required when called:    5
 11199 ;; This function calls:
 11200 ;;		Nothing
 11201 ;; This function is called by:
 11202 ;;		_my_Main
 11203 ;;		_setLoad_Exceptions
 11204 ;;		_setOverTemp_Exceptions
 11205 ;; This function uses a non-reentrant model
 11206 ;;
 11207                           
 11208                           
 11209                           ;psect for function _setRF_Enable
 11210  1B4D                     _setRF_Enable:	
 11211                           
 11212                           ;incstack = 0
 11213                           ; Regs used in _setRF_Enable: [wreg+status,2]
 11214                           ;setRF_Enable@command stored from wreg
 11215  1B4D  0020               	movlb	0	; select bank0
 11216  1B4E  00A0               	movwf	setRF_Enable@command
 11217                           
 11218                           ;RF_Control_B1.c: 179: RF1.Enable = command;
 11219  1B4F  0820               	movf	setRF_Enable@command,w
 11220  1B50  0021               	movlb	1	; select bank1
 11221  1B51  103E               	bcf	_RF1^(0+128),0
 11222  1B52  1D03               	skipz
 11223  1B53  143E               	bsf	_RF1^(0+128),0
 11224                           
 11225                           ;RF_Control_B1.c: 180: RF1.Learn = 0;
 11226  1B54  133E               	bcf	_RF1^(0+128),6
 11227                           
 11228                           ;RF_Control_B1.c: 181: RF1.TransceiveGO = 0;
 11229  1B55  113E               	bcf	_RF1^(0+128),2
 11230                           
 11231                           ;RF_Control_B1.c: 182: RF1.RxStatus = 0;
 11232  1B56  11BE               	bcf	_RF1^(0+128),3
 11233                           
 11234                           ;RF_Control_B1.c: 183: RF1.ReceiveGO = 0;
 11235  1B57  10BE               	bcf	_RF1^(0+128),1
 11236                           
 11237                           ;RF_Control_B1.c: 184: RF1.DebounceTime = 0;
 11238  1B58  01C2               	clrf	(_RF1^(0+128)+4)
 11239                           
 11240                           ;RF_Control_B1.c: 185: RF1.Debounce = 0;
 11241  1B59  12BE               	bcf	_RF1^(0+128),5
 11242  1B5A  0008               	return
 11243  1B5B                     __end_of_setRF_Enable:	
 11244                           
 11245                           	psect	text61
 11246  14EC                     __ptext61:	
 11247 ;; *************** function _DimmerLights_Exceptions *****************
 11248 ;; Defined at:
 11249 ;;		line 513 in file "../src/Dimmer_B1.c"
 11250 ;; Parameters:    Size  Location     Type
 11251 ;;  status          1    wreg     unsigned char 
 11252 ;; Auto vars:     Size  Location     Type
 11253 ;;  status          1   13[BANK0 ] unsigned char 
 11254 ;; Return value:  Size  Location     Type
 11255 ;;		None               void
 11256 ;; Registers used:
 11257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11258 ;; Tracked objects:
 11259 ;;		On entry : 0/0
 11260 ;;		On exit  : 0/0
 11261 ;;		Unchanged: 0/0
 11262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11267 ;;Total ram usage:        1 bytes
 11268 ;; Hardware stack levels used:    1
 11269 ;; Hardware stack levels required when called:    8
 11270 ;; This function calls:
 11271 ;;		_getDimmerLights_StatusFlag
 11272 ;;		_setBuz
 11273 ;;		_setDimmerLights_ERROR
 11274 ;;		_setDimmerLights_TriggerERROR
 11275 ;; This function is called by:
 11276 ;;		_setLoad_Exceptions
 11277 ;;		_setOverTemp_Exceptions
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           
 11282                           ;psect for function _DimmerLights_Exceptions
 11283  14EC                     _DimmerLights_Exceptions:	
 11284                           
 11285                           ;incstack = 0
 11286                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11287                           ;DimmerLights_Exceptions@status stored from wreg
 11288  14EC  0020               	movlb	0	; select bank0
 11289  14ED  00AD               	movwf	DimmerLights_Exceptions@status
 11290                           
 11291                           ;Dimmer_B1.c: 514: if (status == 1) {
 11292  14EE  082D               	movf	DimmerLights_Exceptions@status,w
 11293  14EF  3A01               	xorlw	1
 11294  14F0  1D03               	skipz
 11295  14F1  2D02               	goto	l9036
 11296                           
 11297                           ;Dimmer_B1.c: 515: if (getDimmerLights_StatusFlag() == 1) {
 11298  14F2  319B  23F7  3194   	fcall	_getDimmerLights_StatusFlag
 11299  14F5  3A01               	xorlw	1
 11300  14F6  1D03               	skipz
 11301  14F7  2D1A               	goto	l9044
 11302                           
 11303                           ;Dimmer_B1.c: 516: setBuz(10, 300);
 11304  14F8  302C               	movlw	44
 11305  14F9  0020               	movlb	0	; select bank0
 11306  14FA  00A9               	movwf	setBuz@time
 11307  14FB  3001               	movlw	1
 11308  14FC  00AA               	movwf	setBuz@time+1
 11309  14FD  300A               	movlw	10
 11310  14FE  3196  2689  3194   	fcall	_setBuz
 11311  1501  2D1A               	goto	l9044
 11312  1502                     l9036:	
 11313                           ;Dimmer_B1.c: 528: } else if (status == 2)
 11314                           
 11315                           ;Dimmer_B1.c: 523: setDimmerLights_ERROR(2);
 11316                           
 11317                           ;Dimmer_B1.c: 517: }
 11318                           ;Dimmer_B1.c: 520: setDimmerLights_ERROR(1);
 11319                           
 11320  1502  0020               	movlb	0	; select bank0
 11321  1503  082D               	movf	DimmerLights_Exceptions@status,w
 11322  1504  3A02               	xorlw	2
 11323  1505  1D03               	skipz
 11324  1506  2D15               	goto	l9042
 11325                           
 11326                           ;Dimmer_B1.c: 529: {
 11327                           ;Dimmer_B1.c: 530: setBuz(5, 300);
 11328  1507  302C               	movlw	44
 11329  1508  00A9               	movwf	setBuz@time
 11330  1509  3001               	movlw	1
 11331  150A  00AA               	movwf	setBuz@time+1
 11332  150B  3005               	movlw	5
 11333  150C  3196  2689  3194   	fcall	_setBuz
 11334                           
 11335                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(Dimmer->Load);
 11336  150F  0021               	movlb	1	; select bank1
 11337  1510  0A4C               	incf	_Dimmer^(0+128),w
 11338  1511  0086               	movwf	6
 11339  1512  0187               	clrf	7
 11340  1513  0801               	movf	1,w
 11341  1514  2D1F               	goto	L7
 11342  1515                     l9042:	
 11343                           ;Dimmer_B1.c: 532: } else if (status == 3)
 11344                           
 11345  1515  0020               	movlb	0	; select bank0
 11346  1516  082D               	movf	DimmerLights_Exceptions@status,w
 11347  1517  3A03               	xorlw	3
 11348  1518  1D03               	skipz
 11349  1519  2D22               	goto	l866
 11350  151A                     l9044:	
 11351                           
 11352                           ;Dimmer_B1.c: 533: {
 11353                           ;Dimmer_B1.c: 535: setDimmerLights_ERROR(1);
 11354  151A  3001               	movlw	1
 11355  151B  3195  25DA  3194   	fcall	_setDimmerLights_ERROR
 11356                           
 11357                           ;Dimmer_B1.c: 538: setDimmerLights_ERROR(2);
 11358  151E  3002               	movlw	2
 11359  151F                     L7:	
 11360  151F  3195  25DA  3194   	fcall	_setDimmerLights_ERROR
 11361  1522                     l866:	
 11362                           
 11363                           ;Dimmer_B1.c: 543: }
 11364                           ;Dimmer_B1.c: 546: setDimmerLights_TriggerERROR(1, 0);
 11365  1522  0020               	movlb	0	; select bank0
 11366  1523  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11367  1524  3001               	movlw	1
 11368  1525  3190  20AB  3194   	fcall	_setDimmerLights_TriggerERROR
 11369                           
 11370                           ;Dimmer_B1.c: 549: setDimmerLights_TriggerERROR(2, 0);
 11371  1528  0020               	movlb	0	; select bank0
 11372  1529  01A2               	clrf	setDimmerLights_TriggerERROR@command
 11373  152A  3002               	movlw	2
 11374  152B  3190  20AB  3194   	fcall	_setDimmerLights_TriggerERROR
 11375                           
 11376                           ;Dimmer_B1.c: 555: if (myMain.SelfTest == 0) {
 11377  152E  0021               	movlb	1	; select bank1
 11378  152F  1B20               	btfsc	_myMain^(0+128),6
 11379  1530  0008               	return
 11380                           
 11381                           ;Dimmer_B1.c: 556: myMain.i = 0;
 11382  1531  102E               	bcf	(_myMain^(0+128)+14),0
 11383                           
 11384                           ;Dimmer_B1.c: 557: myMain.j = 0;
 11385  1532  10AE               	bcf	(_myMain^(0+128)+14),1
 11386                           
 11387                           ;Dimmer_B1.c: 558: myMain.k = 1;
 11388  1533  152E               	bsf	(_myMain^(0+128)+14),2
 11389                           
 11390                           ;Dimmer_B1.c: 559: myMain.Count2 = 0;
 11391  1534  01A7               	clrf	(_myMain^(0+128)+7)
 11392  1535  01A8               	clrf	((_myMain+1)^(0+128)+7)
 11393  1536  0008               	return
 11394  1537                     __end_of_DimmerLights_Exceptions:	
 11395                           
 11396                           	psect	text62
 11397  10AB                     __ptext62:	
 11398 ;; *************** function _setDimmerLights_TriggerERROR *****************
 11399 ;; Defined at:
 11400 ;;		line 582 in file "../src/Dimmer_B1.c"
 11401 ;; Parameters:    Size  Location     Type
 11402 ;;  lights          1    wreg     unsigned char 
 11403 ;;  command         1    2[BANK0 ] unsigned char 
 11404 ;; Auto vars:     Size  Location     Type
 11405 ;;  lights          1    3[BANK0 ] unsigned char 
 11406 ;; Return value:  Size  Location     Type
 11407 ;;		None               void
 11408 ;; Registers used:
 11409 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11410 ;; Tracked objects:
 11411 ;;		On entry : 0/0
 11412 ;;		On exit  : 0/0
 11413 ;;		Unchanged: 0/0
 11414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11415 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11418 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11419 ;;Total ram usage:        2 bytes
 11420 ;; Hardware stack levels used:    1
 11421 ;; Hardware stack levels required when called:    6
 11422 ;; This function calls:
 11423 ;;		_DimmerLightsPointSelect
 11424 ;; This function is called by:
 11425 ;;		_DimmerLights_Exceptions
 11426 ;; This function uses a non-reentrant model
 11427 ;;
 11428                           
 11429                           
 11430                           ;psect for function _setDimmerLights_TriggerERROR
 11431  10AB                     _setDimmerLights_TriggerERROR:	
 11432                           
 11433                           ;incstack = 0
 11434                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11435                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 11436  10AB  0020               	movlb	0	; select bank0
 11437  10AC  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 11438                           
 11439                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(lights);
 11440  10AD  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 11441  10AE  319C  2473         	fcall	_DimmerLightsPointSelect
 11442                           
 11443                           ;Dimmer_B1.c: 585: DimmerLights->Trigger = command;
 11444  10B0  0879               	movf	_DimmerLights,w
 11445  10B1  3E08               	addlw	8
 11446  10B2  0086               	movwf	6
 11447  10B3  3001               	movlw	1	; select bank2/3
 11448  10B4  0087               	movwf	7
 11449  10B5  0020               	movlb	0	; select bank0
 11450  10B6  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11451  10B7  1101               	bcf	1,2
 11452  10B8  1D03               	skipz
 11453  10B9  1501               	bsf	1,2
 11454                           
 11455                           ;Dimmer_B1.c: 586: DimmerLights->Switch = command;
 11456  10BA  0879               	movf	_DimmerLights,w
 11457  10BB  3E08               	addlw	8
 11458  10BC  0086               	movwf	6
 11459  10BD  3001               	movlw	1	; select bank2/3
 11460  10BE  0087               	movwf	7
 11461  10BF  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11462  10C0  1081               	bcf	1,1
 11463  10C1  1D03               	skipz
 11464  10C2  1481               	bsf	1,1
 11465                           
 11466                           ;Dimmer_B1.c: 587: DimmerLights->TriggerAdj = command;
 11467  10C3  0879               	movf	_DimmerLights,w
 11468  10C4  3E08               	addlw	8
 11469  10C5  0086               	movwf	6
 11470  10C6  3001               	movlw	1	; select bank2/3
 11471  10C7  0087               	movwf	7
 11472  10C8  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11473  10C9  1201               	bcf	1,4
 11474  10CA  1D03               	skipz
 11475  10CB  1601               	bsf	1,4
 11476                           
 11477                           ;Dimmer_B1.c: 588: DimmerLights->AdjGo = command;
 11478  10CC  0879               	movf	_DimmerLights,w
 11479  10CD  3E08               	addlw	8
 11480  10CE  0086               	movwf	6
 11481  10CF  3001               	movlw	1	; select bank2/3
 11482  10D0  0087               	movwf	7
 11483  10D1  0822               	movf	setDimmerLights_TriggerERROR@command,w
 11484  10D2  1181               	bcf	1,3
 11485  10D3  1D03               	skipz
 11486  10D4  1581               	bsf	1,3
 11487  10D5  0008               	return
 11488  10D6                     __end_of_setDimmerLights_TriggerERROR:	
 11489                           
 11490                           	psect	text63
 11491  15DA                     __ptext63:	
 11492 ;; *************** function _setDimmerLights_ERROR *****************
 11493 ;; Defined at:
 11494 ;;		line 564 in file "../src/Dimmer_B1.c"
 11495 ;; Parameters:    Size  Location     Type
 11496 ;;  lights          1    wreg     unsigned char 
 11497 ;; Auto vars:     Size  Location     Type
 11498 ;;  lights          1    5[BANK0 ] unsigned char 
 11499 ;; Return value:  Size  Location     Type
 11500 ;;		None               void
 11501 ;; Registers used:
 11502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11503 ;; Tracked objects:
 11504 ;;		On entry : 0/0
 11505 ;;		On exit  : 0/0
 11506 ;;		Unchanged: 0/0
 11507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11511 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11512 ;;Total ram usage:        2 bytes
 11513 ;; Hardware stack levels used:    1
 11514 ;; Hardware stack levels required when called:    7
 11515 ;; This function calls:
 11516 ;;		_DimmerLightsPointSelect
 11517 ;;		_setLED
 11518 ;;		_setLoad_StatusOff
 11519 ;;		_setRFSW_Status
 11520 ;;		_setSw_Status
 11521 ;; This function is called by:
 11522 ;;		_DimmerLights_Exceptions
 11523 ;; This function uses a non-reentrant model
 11524 ;;
 11525                           
 11526                           
 11527                           ;psect for function _setDimmerLights_ERROR
 11528  15DA                     _setDimmerLights_ERROR:	
 11529                           
 11530                           ;incstack = 0
 11531                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11532                           ;setDimmerLights_ERROR@lights stored from wreg
 11533  15DA  0020               	movlb	0	; select bank0
 11534  15DB  00A5               	movwf	setDimmerLights_ERROR@lights
 11535                           
 11536                           ;Dimmer_B1.c: 565: DimmerLightsPointSelect(lights);
 11537  15DC  0825               	movf	setDimmerLights_ERROR@lights,w
 11538  15DD  319C  2473  3195   	fcall	_DimmerLightsPointSelect
 11539                           
 11540                           ;Dimmer_B1.c: 566: if (DimmerLights->Status == 1) {
 11541  15E0  0879               	movf	_DimmerLights,w
 11542  15E1  0086               	movwf	6
 11543  15E2  3001               	movlw	1	; select bank2/3
 11544  15E3  0087               	movwf	7
 11545  15E4  1E81               	btfss	1,5
 11546  15E5  0008               	return
 11547                           
 11548                           ;Dimmer_B1.c: 568: DimmerLights->Signal = 0;
 11549  15E6  0879               	movf	_DimmerLights,w
 11550  15E7  0086               	movwf	6
 11551  15E8  3001               	movlw	1	; select bank2/3
 11552  15E9  0087               	movwf	7
 11553  15EA  1081               	bcf	1,1
 11554                           
 11555                           ;Dimmer_B1.c: 569: DimmerLights->AdjFlag = 0;
 11556  15EB  0879               	movf	_DimmerLights,w
 11557  15EC  0086               	movwf	6
 11558  15ED  3001               	movlw	1	; select bank2/3
 11559  15EE  0087               	movwf	7
 11560  15EF  1181               	bcf	1,3
 11561                           
 11562                           ;Dimmer_B1.c: 570: DimmerLights->AdjStatus = 0;
 11563  15F0  0879               	movf	_DimmerLights,w
 11564  15F1  0086               	movwf	6
 11565  15F2  3001               	movlw	1	; select bank2/3
 11566  15F3  0087               	movwf	7
 11567  15F4  1201               	bcf	1,4
 11568                           
 11569                           ;Dimmer_B1.c: 571: DimmerLights->StatusFlag = 0;
 11570  15F5  0879               	movf	_DimmerLights,w
 11571  15F6  0086               	movwf	6
 11572  15F7  3001               	movlw	1	; select bank2/3
 11573  15F8  0087               	movwf	7
 11574  15F9  1301               	bcf	1,6
 11575                           
 11576                           ;Dimmer_B1.c: 572: DimmerLights->DimmingTimeValue = 7;
 11577  15FA  3007               	movlw	7
 11578  15FB  0020               	movlb	0	; select bank0
 11579  15FC  00A4               	movwf	??_setDimmerLights_ERROR
 11580  15FD  0879               	movf	_DimmerLights,w
 11581  15FE  3E02               	addlw	2
 11582  15FF  0086               	movwf	6
 11583  1600  3001               	movlw	1	; select bank2/3
 11584  1601  0087               	movwf	7
 11585  1602  0824               	movf	??_setDimmerLights_ERROR,w
 11586  1603  0081               	movwf	1
 11587                           
 11588                           ;Dimmer_B1.c: 573: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11589  1604  0879               	movf	_DimmerLights,w
 11590  1605  3E06               	addlw	6
 11591  1606  0086               	movwf	6
 11592  1607  3001               	movlw	1	; select bank2/3
 11593  1608  0087               	movwf	7
 11594  1609  0801               	movf	1,w
 11595  160A  00A4               	movwf	??_setDimmerLights_ERROR
 11596  160B  0879               	movf	_DimmerLights,w
 11597  160C  3E04               	addlw	4
 11598  160D  0086               	movwf	6
 11599  160E  3001               	movlw	1	; select bank2/3
 11600  160F  0087               	movwf	7
 11601  1610  0824               	movf	??_setDimmerLights_ERROR,w
 11602  1611  0081               	movwf	1
 11603                           
 11604                           ;Dimmer_B1.c: 574: Dimmer->Detect = 1;
 11605  1612  0021               	movlb	1	; select bank1
 11606  1613  084C               	movf	_Dimmer^(0+128),w
 11607  1614  0086               	movwf	6
 11608  1615  0187               	clrf	7
 11609  1616  1401               	bsf	1,0
 11610                           
 11611                           ;Dimmer_B1.c: 575: setLoad_StatusOff(lights, 1);
 11612  1617  0020               	movlb	0	; select bank0
 11613  1618  01A0               	clrf	setLoad_StatusOff@command
 11614  1619  0AA0               	incf	setLoad_StatusOff@command,f
 11615  161A  0825               	movf	setDimmerLights_ERROR@lights,w
 11616  161B  319E  263E  3195   	fcall	_setLoad_StatusOff
 11617                           
 11618                           ;Dimmer_B1.c: 576: setLED(lights, 1);
 11619  161E  0020               	movlb	0	; select bank0
 11620  161F  01A1               	clrf	setLED@command
 11621  1620  0AA1               	incf	setLED@command,f
 11622  1621  0825               	movf	setDimmerLights_ERROR@lights,w
 11623  1622  3197  279E  3195   	fcall	_setLED
 11624                           
 11625                           ;Dimmer_B1.c: 577: setSw_Status(lights, 0);
 11626  1625  0020               	movlb	0	; select bank0
 11627  1626  01A1               	clrf	setSw_Status@command
 11628  1627  0825               	movf	setDimmerLights_ERROR@lights,w
 11629  1628  319B  23B7  3195   	fcall	_setSw_Status
 11630                           
 11631                           ;Dimmer_B1.c: 578: setRFSW_Status(lights, 0);
 11632  162B  0020               	movlb	0	; select bank0
 11633  162C  01A2               	clrf	setRFSW_Status@command
 11634  162D  0825               	movf	setDimmerLights_ERROR@lights,w
 11635  162E  319B  235B         	fcall	_setRFSW_Status
 11636  1630  0008               	return
 11637  1631                     __end_of_setDimmerLights_ERROR:	
 11638                           
 11639                           	psect	text64
 11640  1BC7                     __ptext64:	
 11641 ;; *************** function _setDimmerLights_Clear *****************
 11642 ;; Defined at:
 11643 ;;		line 717 in file "../src/Dimmer_B1.c"
 11644 ;; Parameters:    Size  Location     Type
 11645 ;;  lights          1    wreg     unsigned char 
 11646 ;;  command         1    2[BANK0 ] unsigned char 
 11647 ;; Auto vars:     Size  Location     Type
 11648 ;;  lights          1    3[BANK0 ] unsigned char 
 11649 ;; Return value:  Size  Location     Type
 11650 ;;		None               void
 11651 ;; Registers used:
 11652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11653 ;; Tracked objects:
 11654 ;;		On entry : 0/0
 11655 ;;		On exit  : 0/0
 11656 ;;		Unchanged: 0/0
 11657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11658 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;Total ram usage:        2 bytes
 11663 ;; Hardware stack levels used:    1
 11664 ;; Hardware stack levels required when called:    6
 11665 ;; This function calls:
 11666 ;;		_DimmerLightsPointSelect
 11667 ;; This function is called by:
 11668 ;;		_Load_Main
 11669 ;; This function uses a non-reentrant model
 11670 ;;
 11671                           
 11672                           
 11673                           ;psect for function _setDimmerLights_Clear
 11674  1BC7                     _setDimmerLights_Clear:	
 11675                           
 11676                           ;incstack = 0
 11677                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11678                           ;setDimmerLights_Clear@lights stored from wreg
 11679  1BC7  0020               	movlb	0	; select bank0
 11680  1BC8  00A3               	movwf	setDimmerLights_Clear@lights
 11681                           
 11682                           ;Dimmer_B1.c: 719: DimmerLightsPointSelect(lights);
 11683  1BC9  0823               	movf	setDimmerLights_Clear@lights,w
 11684  1BCA  319C  2473         	fcall	_DimmerLightsPointSelect
 11685                           
 11686                           ;Dimmer_B1.c: 720: DimmerLights->Clear = command;
 11687  1BCC  0879               	movf	_DimmerLights,w
 11688  1BCD  3E09               	addlw	9
 11689  1BCE  0086               	movwf	6
 11690  1BCF  3001               	movlw	1	; select bank2/3
 11691  1BD0  0087               	movwf	7
 11692  1BD1  0020               	movlb	0	; select bank0
 11693  1BD2  0822               	movf	setDimmerLights_Clear@command,w
 11694  1BD3  1101               	bcf	1,2
 11695  1BD4  1D03               	skipz
 11696  1BD5  1501               	bsf	1,2
 11697  1BD6  0008               	return
 11698  1BD7                     __end_of_setDimmerLights_Clear:	
 11699                           
 11700                           	psect	text65
 11701  1A89                     __ptext65:	
 11702 ;; *************** function _getTemp_Safe *****************
 11703 ;; Defined at:
 11704 ;;		line 21 in file "../src/OverTemperature_B1.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;		None
 11707 ;; Auto vars:     Size  Location     Type
 11708 ;;  result          1    0[BANK0 ] unsigned char 
 11709 ;; Return value:  Size  Location     Type
 11710 ;;                  1    wreg      unsigned char 
 11711 ;; Registers used:
 11712 ;;		wreg, status,2
 11713 ;; Tracked objects:
 11714 ;;		On entry : 0/0
 11715 ;;		On exit  : 0/0
 11716 ;;		Unchanged: 0/0
 11717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11721 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;Total ram usage:        1 bytes
 11723 ;; Hardware stack levels used:    1
 11724 ;; Hardware stack levels required when called:    5
 11725 ;; This function calls:
 11726 ;;		Nothing
 11727 ;; This function is called by:
 11728 ;;		_Load_Main
 11729 ;; This function uses a non-reentrant model
 11730 ;;
 11731                           
 11732                           
 11733                           ;psect for function _getTemp_Safe
 11734  1A89                     _getTemp_Safe:	
 11735                           
 11736                           ;OverTemperature_B1.c: 22: char result = Temp1.Safe;
 11737                           
 11738                           ;incstack = 0
 11739                           ; Regs used in _getTemp_Safe: [wreg+status,2]
 11740  1A89  3000               	movlw	0
 11741  1A8A  0021               	movlb	1	; select bank1
 11742  1A8B  1A57               	btfsc	_Temp1^(0+128),4
 11743  1A8C  3001               	movlw	1
 11744  1A8D  0020               	movlb	0	; select bank0
 11745  1A8E  00A0               	movwf	getTemp_Safe@result
 11746                           
 11747                           ;OverTemperature_B1.c: 23: return result;
 11748  1A8F  0820               	movf	getTemp_Safe@result,w
 11749  1A90  0008               	return
 11750  1A91                     __end_of_getTemp_Safe:	
 11751                           
 11752                           	psect	text66
 11753  1DC4                     __ptext66:	
 11754 ;; *************** function ___wmul *****************
 11755 ;; Defined at:
 11756 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11757 ;; Parameters:    Size  Location     Type
 11758 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11759 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11760 ;; Auto vars:     Size  Location     Type
 11761 ;;  product         2    4[BANK0 ] unsigned int 
 11762 ;; Return value:  Size  Location     Type
 11763 ;;                  2    0[BANK0 ] unsigned int 
 11764 ;; Registers used:
 11765 ;;		wreg, status,2, status,0
 11766 ;; Tracked objects:
 11767 ;;		On entry : 0/0
 11768 ;;		On exit  : 0/0
 11769 ;;		Unchanged: 0/0
 11770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11771 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;Total ram usage:        6 bytes
 11776 ;; Hardware stack levels used:    1
 11777 ;; Hardware stack levels required when called:    5
 11778 ;; This function calls:
 11779 ;;		Nothing
 11780 ;; This function is called by:
 11781 ;;		_Load_Main
 11782 ;; This function uses a non-reentrant model
 11783 ;;
 11784                           
 11785                           
 11786                           ;psect for function ___wmul
 11787  1DC4                     ___wmul:	
 11788                           
 11789                           ;incstack = 0
 11790                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11791  1DC4  0020               	movlb	0	; select bank0
 11792  1DC5  01A4               	clrf	___wmul@product
 11793  1DC6  01A5               	clrf	___wmul@product+1
 11794  1DC7                     l7792:	
 11795  1DC7  1C20               	btfss	___wmul@multiplier,0
 11796  1DC8  2DCD               	goto	l2849
 11797  1DC9  0822               	movf	___wmul@multiplicand,w
 11798  1DCA  07A4               	addwf	___wmul@product,f
 11799  1DCB  0823               	movf	___wmul@multiplicand+1,w
 11800  1DCC  3DA5               	addwfc	___wmul@product+1,f
 11801  1DCD                     l2849:	
 11802  1DCD  3001               	movlw	1
 11803  1DCE                     u7365:	
 11804  1DCE  35A2               	lslf	___wmul@multiplicand,f
 11805  1DCF  0DA3               	rlf	___wmul@multiplicand+1,f
 11806  1DD0  0B89               	decfsz	9,f
 11807  1DD1  2DCE               	goto	u7365
 11808  1DD2  3001               	movlw	1
 11809  1DD3                     u7375:	
 11810  1DD3  36A1               	lsrf	___wmul@multiplier+1,f
 11811  1DD4  0CA0               	rrf	___wmul@multiplier,f
 11812  1DD5  0B89               	decfsz	9,f
 11813  1DD6  2DD3               	goto	u7375
 11814  1DD7  0821               	movf	___wmul@multiplier+1,w
 11815  1DD8  0420               	iorwf	___wmul@multiplier,w
 11816  1DD9  1D03               	skipz
 11817  1DDA  2DC7               	goto	l7792
 11818  1DDB  0825               	movf	___wmul@product+1,w
 11819  1DDC  01A1               	clrf	?___wmul+1
 11820  1DDD  07A1               	addwf	?___wmul+1,f
 11821  1DDE  0824               	movf	___wmul@product,w
 11822  1DDF  01A0               	clrf	?___wmul
 11823  1DE0  07A0               	addwf	?___wmul,f
 11824  1DE1  0008               	return
 11825  1DE2                     __end_of___wmul:	
 11826                           
 11827                           	psect	text67
 11828  11CF                     __ptext67:	
 11829 ;; *************** function ___lwdiv *****************
 11830 ;; Defined at:
 11831 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11832 ;; Parameters:    Size  Location     Type
 11833 ;;  divisor         2    0[BANK0 ] unsigned int 
 11834 ;;  dividend        2    2[BANK0 ] unsigned int 
 11835 ;; Auto vars:     Size  Location     Type
 11836 ;;  quotient        2    5[BANK0 ] unsigned int 
 11837 ;;  counter         1    7[BANK0 ] unsigned char 
 11838 ;; Return value:  Size  Location     Type
 11839 ;;                  2    0[BANK0 ] unsigned int 
 11840 ;; Registers used:
 11841 ;;		wreg, status,2, status,0
 11842 ;; Tracked objects:
 11843 ;;		On entry : 0/0
 11844 ;;		On exit  : 0/0
 11845 ;;		Unchanged: 0/0
 11846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11847 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11848 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11850 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11851 ;;Total ram usage:        8 bytes
 11852 ;; Hardware stack levels used:    1
 11853 ;; Hardware stack levels required when called:    5
 11854 ;; This function calls:
 11855 ;;		Nothing
 11856 ;; This function is called by:
 11857 ;;		_Load_Main
 11858 ;; This function uses a non-reentrant model
 11859 ;;
 11860                           
 11861                           
 11862                           ;psect for function ___lwdiv
 11863  11CF                     ___lwdiv:	
 11864                           
 11865                           ;incstack = 0
 11866                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11867  11CF  0020               	movlb	0	; select bank0
 11868  11D0  01A5               	clrf	___lwdiv@quotient
 11869  11D1  01A6               	clrf	___lwdiv@quotient+1
 11870  11D2  0821               	movf	___lwdiv@divisor+1,w
 11871  11D3  0420               	iorwf	___lwdiv@divisor,w
 11872  11D4  1903               	skipnz
 11873  11D5  29FF               	goto	l7824
 11874  11D6  01A7               	clrf	___lwdiv@counter
 11875  11D7  0AA7               	incf	___lwdiv@counter,f
 11876  11D8                     l7812:	
 11877  11D8  1BA1               	btfsc	___lwdiv@divisor+1,7
 11878  11D9  29E4               	goto	l7814
 11879  11DA  3001               	movlw	1
 11880  11DB                     u7405:	
 11881  11DB  35A0               	lslf	___lwdiv@divisor,f
 11882  11DC  0DA1               	rlf	___lwdiv@divisor+1,f
 11883  11DD  0B89               	decfsz	9,f
 11884  11DE  29DB               	goto	u7405
 11885  11DF  3001               	movlw	1
 11886  11E0  00A4               	movwf	??___lwdiv
 11887  11E1  0824               	movf	??___lwdiv,w
 11888  11E2  07A7               	addwf	___lwdiv@counter,f
 11889  11E3  29D8               	goto	l7812
 11890  11E4                     l7814:	
 11891  11E4  3001               	movlw	1
 11892  11E5                     u7425:	
 11893  11E5  35A5               	lslf	___lwdiv@quotient,f
 11894  11E6  0DA6               	rlf	___lwdiv@quotient+1,f
 11895  11E7  0B89               	decfsz	9,f
 11896  11E8  29E5               	goto	u7425
 11897  11E9  0821               	movf	___lwdiv@divisor+1,w
 11898  11EA  0223               	subwf	___lwdiv@dividend+1,w
 11899  11EB  1D03               	skipz
 11900  11EC  29EF               	goto	u7435
 11901  11ED  0820               	movf	___lwdiv@divisor,w
 11902  11EE  0222               	subwf	___lwdiv@dividend,w
 11903  11EF                     u7435:	
 11904  11EF  1C03               	skipc
 11905  11F0  29F6               	goto	l7820
 11906  11F1  0820               	movf	___lwdiv@divisor,w
 11907  11F2  02A2               	subwf	___lwdiv@dividend,f
 11908  11F3  0821               	movf	___lwdiv@divisor+1,w
 11909  11F4  3BA3               	subwfb	___lwdiv@dividend+1,f
 11910  11F5  1425               	bsf	___lwdiv@quotient,0
 11911  11F6                     l7820:	
 11912  11F6  3001               	movlw	1
 11913  11F7                     u7445:	
 11914  11F7  36A1               	lsrf	___lwdiv@divisor+1,f
 11915  11F8  0CA0               	rrf	___lwdiv@divisor,f
 11916  11F9  0B89               	decfsz	9,f
 11917  11FA  29F7               	goto	u7445
 11918  11FB  3001               	movlw	1
 11919  11FC  02A7               	subwf	___lwdiv@counter,f
 11920  11FD  1D03               	btfss	3,2
 11921  11FE  29E4               	goto	l7814
 11922  11FF                     l7824:	
 11923  11FF  0826               	movf	___lwdiv@quotient+1,w
 11924  1200  01A1               	clrf	?___lwdiv+1
 11925  1201  07A1               	addwf	?___lwdiv+1,f
 11926  1202  0825               	movf	___lwdiv@quotient,w
 11927  1203  01A0               	clrf	?___lwdiv
 11928  1204  07A0               	addwf	?___lwdiv,f
 11929  1205  0008               	return
 11930  1206                     __end_of___lwdiv:	
 11931                           
 11932                           	psect	text68
 11933  1A43                     __ptext68:	
 11934 ;; *************** function _Load_Initialization *****************
 11935 ;; Defined at:
 11936 ;;		line 9 in file "../src/OverLoad_B1.c"
 11937 ;; Parameters:    Size  Location     Type
 11938 ;;		None
 11939 ;; Auto vars:     Size  Location     Type
 11940 ;;		None
 11941 ;; Return value:  Size  Location     Type
 11942 ;;		None               void
 11943 ;; Registers used:
 11944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11945 ;; Tracked objects:
 11946 ;;		On entry : 0/0
 11947 ;;		On exit  : 0/0
 11948 ;;		Unchanged: 0/0
 11949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;Total ram usage:        0 bytes
 11955 ;; Hardware stack levels used:    1
 11956 ;; Hardware stack levels required when called:    6
 11957 ;; This function calls:
 11958 ;;		_setLoad_AH_AL_Restore
 11959 ;; This function is called by:
 11960 ;;		_main
 11961 ;; This function uses a non-reentrant model
 11962 ;;
 11963                           
 11964                           
 11965                           ;psect for function _Load_Initialization
 11966  1A43                     _Load_Initialization:	
 11967                           
 11968                           ;OverLoad_B1.c: 10: Load1.Safe = 1;
 11969                           
 11970                           ;incstack = 0
 11971                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11972  1A43  0023               	movlb	3	; select bank3
 11973  1A44  15A0               	bsf	_Load1^(0+384),3
 11974                           
 11975                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11976  1A45  319D  25A8         	fcall	_setLoad_AH_AL_Restore
 11977  1A47  0008               	return
 11978  1A48                     __end_of_Load_Initialization:	
 11979                           
 11980                           	psect	text69
 11981  1DA8                     __ptext69:	
 11982 ;; *************** function _setLoad_AH_AL_Restore *****************
 11983 ;; Defined at:
 11984 ;;		line 307 in file "../src/OverLoad_B1.c"
 11985 ;; Parameters:    Size  Location     Type
 11986 ;;		None
 11987 ;; Auto vars:     Size  Location     Type
 11988 ;;  i               1    1[BANK0 ] unsigned char 
 11989 ;; Return value:  Size  Location     Type
 11990 ;;		None               void
 11991 ;; Registers used:
 11992 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11993 ;; Tracked objects:
 11994 ;;		On entry : 0/0
 11995 ;;		On exit  : 0/0
 11996 ;;		Unchanged: 0/0
 11997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;Total ram usage:        2 bytes
 12003 ;; Hardware stack levels used:    1
 12004 ;; Hardware stack levels required when called:    5
 12005 ;; This function calls:
 12006 ;;		Nothing
 12007 ;; This function is called by:
 12008 ;;		_Load_Initialization
 12009 ;;		_Load_Main
 12010 ;; This function uses a non-reentrant model
 12011 ;;
 12012                           
 12013                           
 12014                           ;psect for function _setLoad_AH_AL_Restore
 12015  1DA8                     _setLoad_AH_AL_Restore:	
 12016                           
 12017                           ;OverLoad_B1.c: 308: char i;
 12018                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 12019                           
 12020                           ;incstack = 0
 12021                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12022  1DA8  0020               	movlb	0	; select bank0
 12023  1DA9  01A1               	clrf	setLoad_AH_AL_Restore@i
 12024  1DAA                     L8:	
 12025  1DAA  3005               	movlw	5
 12026  1DAB  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12027  1DAC  1803               	btfsc	3,0
 12028  1DAD  0008               	return
 12029                           
 12030                           ;OverLoad_B1.c: 310: Load1.AH[i] = 0;
 12031  1DAE  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12032  1DAF  3EA8               	addlw	(_Load1+8)& (0+255)
 12033  1DB0  0086               	movwf	6
 12034  1DB1  3001               	movlw	1	; select bank3/4
 12035  1DB2  0087               	movwf	7
 12036  1DB3  3000               	movlw	0
 12037  1DB4  3FC0               	movwi [0]fsr1
 12038  1DB5  3FC1               	movwi [1]fsr1
 12039                           
 12040                           ;OverLoad_B1.c: 311: Load1.AL[i] = 0xffff;
 12041  1DB6  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12042  1DB7  3EBA               	addlw	(_Load1+26)& (0+255)
 12043  1DB8  0086               	movwf	6
 12044  1DB9  3001               	movlw	1	; select bank3/4
 12045  1DBA  0087               	movwf	7
 12046  1DBB  30FF               	movlw	255
 12047  1DBC  3FC0               	movwi [0]fsr1
 12048  1DBD  30FF               	movlw	255
 12049  1DBE  3FC1               	movwi [1]fsr1
 12050  1DBF  3001               	movlw	1
 12051  1DC0  00A0               	movwf	??_setLoad_AH_AL_Restore
 12052  1DC1  0820               	movf	??_setLoad_AH_AL_Restore,w
 12053  1DC2  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12054  1DC3  2DAA               	goto	L8
 12055  1DC4                     __end_of_setLoad_AH_AL_Restore:	
 12056                           
 12057                           	psect	text70
 12058  0800                     __ptext70:	
 12059 ;; *************** function _LED_Main *****************
 12060 ;; Defined at:
 12061 ;;		line 47 in file "../src/LED_B1.c"
 12062 ;; Parameters:    Size  Location     Type
 12063 ;;		None
 12064 ;; Auto vars:     Size  Location     Type
 12065 ;;		None
 12066 ;; Return value:  Size  Location     Type
 12067 ;;		None               void
 12068 ;; Registers used:
 12069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12070 ;; Tracked objects:
 12071 ;;		On entry : 0/0
 12072 ;;		On exit  : 0/0
 12073 ;;		Unchanged: 0/0
 12074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;Total ram usage:        0 bytes
 12080 ;; Hardware stack levels used:    1
 12081 ;; Hardware stack levels required when called:    7
 12082 ;; This function calls:
 12083 ;;		_setLED_Main
 12084 ;; This function is called by:
 12085 ;;		_main
 12086 ;; This function uses a non-reentrant model
 12087 ;;
 12088                           
 12089                           
 12090                           ;psect for function _LED_Main
 12091  0800                     _LED_Main:	
 12092                           
 12093                           ;LED_B1.c: 49: setLED_Main(1);
 12094                           
 12095                           ;incstack = 0
 12096                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12097  0800  3001               	movlw	1
 12098  0801  3193  23C9  3188   	fcall	_setLED_Main
 12099                           
 12100                           ;LED_B1.c: 52: setLED_Main(2);
 12101  0804  3002               	movlw	2
 12102  0805  3193  23C9  3188   	fcall	_setLED_Main
 12103                           
 12104                           ;LED_B1.c: 58: setLED_Main(99);
 12105  0808  3063               	movlw	99
 12106  0809  3193  23C9         	fcall	_setLED_Main
 12107  080B  0008               	return
 12108  080C                     __end_of_LED_Main:	
 12109                           
 12110                           	psect	text71
 12111  13C9                     __ptext71:	
 12112 ;; *************** function _setLED_Main *****************
 12113 ;; Defined at:
 12114 ;;		line 192 in file "../src/LED_B1.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;  led             1    wreg     unsigned char 
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;  led             1    3[BANK0 ] unsigned char 
 12119 ;; Return value:  Size  Location     Type
 12120 ;;		None               void
 12121 ;; Registers used:
 12122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;Total ram usage:        3 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:    6
 12135 ;; This function calls:
 12136 ;;		_LedPointSelect
 12137 ;; This function is called by:
 12138 ;;		_LED_Main
 12139 ;; This function uses a non-reentrant model
 12140 ;;
 12141                           
 12142                           
 12143                           ;psect for function _setLED_Main
 12144  13C9                     _setLED_Main:	
 12145                           
 12146                           ;incstack = 0
 12147                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12148                           ;setLED_Main@led stored from wreg
 12149  13C9  0020               	movlb	0	; select bank0
 12150  13CA  00A3               	movwf	setLED_Main@led
 12151                           
 12152                           ;LED_B1.c: 193: LedPointSelect(led);
 12153  13CB  0823               	movf	setLED_Main@led,w
 12154  13CC  319E  26FF  3193   	fcall	_LedPointSelect
 12155                           
 12156                           ;LED_B1.c: 194: if (LED->GO == 1) {
 12157  13CF  0021               	movlb	1	; select bank1
 12158  13D0  0843               	movf	_LED^(0+128),w
 12159  13D1  0086               	movwf	6
 12160  13D2  0844               	movf	(_LED+1)^(0+128),w
 12161  13D3  0087               	movwf	7
 12162  13D4  1C81               	btfss	1,1
 12163  13D5  0008               	return
 12164                           
 12165                           ;LED_B1.c: 195: LED->Time++;
 12166  13D6  0843               	movf	_LED^(0+128),w
 12167  13D7  0086               	movwf	6
 12168  13D8  0844               	movf	(_LED+1)^(0+128),w
 12169  13D9  0087               	movwf	7
 12170  13DA  3141               	addfsr 1,1
 12171  13DB  3001               	movlw	1
 12172  13DC  0781               	addwf	1,f
 12173  13DD  3141               	addfsr 1,1
 12174  13DE  1803               	skipnc
 12175  13DF  0A81               	incf	1,f
 12176                           
 12177                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 12178  13E0  0843               	movf	_LED^(0+128),w
 12179  13E1  0086               	movwf	6
 12180  13E2  0844               	movf	(_LED+1)^(0+128),w
 12181  13E3  0087               	movwf	7
 12182  13E4  3141               	addfsr 1,1
 12183  13E5  3F40               	moviw [0]fsr1
 12184  13E6  0020               	movlb	0	; select bank0
 12185  13E7  00A1               	movwf	??_setLED_Main
 12186  13E8  3F41               	moviw [1]fsr1
 12187  13E9  00A2               	movwf	??_setLED_Main+1
 12188  13EA  3000               	movlw	0
 12189  13EB  0222               	subwf	??_setLED_Main+1,w
 12190  13EC  3032               	movlw	50
 12191  13ED  1903               	skipnz
 12192  13EE  0221               	subwf	??_setLED_Main,w
 12193  13EF  1C03               	skipc
 12194  13F0  0008               	return
 12195                           
 12196                           ;LED_B1.c: 197: LED->Time = 0;
 12197  13F1  0021               	movlb	1	; select bank1
 12198  13F2  0843               	movf	_LED^(0+128),w
 12199  13F3  0086               	movwf	6
 12200  13F4  0844               	movf	(_LED+1)^(0+128),w
 12201  13F5  0087               	movwf	7
 12202  13F6  3141               	addfsr 1,1
 12203  13F7  3000               	movlw	0
 12204  13F8  3FC0               	movwi [0]fsr1
 12205  13F9  3FC1               	movwi [1]fsr1
 12206                           
 12207                           ;LED_B1.c: 199: if (led == 1) {
 12208  13FA  0020               	movlb	0	; select bank0
 12209  13FB  0823               	movf	setLED_Main@led,w
 12210  13FC  3A01               	xorlw	1
 12211  13FD  1D03               	skipz
 12212  13FE  2C02               	goto	l9366
 12213                           
 12214                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 12215  13FF  3008               	movlw	8
 12216  1400  068C               	xorwf	12,f
 12217                           
 12218                           ;LED_B1.c: 201: }
 12219  1401  0008               	return
 12220  1402                     l9366:	
 12221                           
 12222                           ;LED_B1.c: 204: else if (led == 2) {
 12223  1402  0823               	movf	setLED_Main@led,w
 12224  1403  3A02               	xorlw	2
 12225  1404  1D03               	skipz
 12226  1405  2C09               	goto	l9370
 12227                           
 12228                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 12229  1406  3080               	movlw	128
 12230  1407  068E               	xorwf	14,f
 12231                           
 12232                           ;LED_B1.c: 206: }
 12233  1408  0008               	return
 12234  1409                     l9370:	
 12235                           
 12236                           ;LED_B1.c: 214: else if (led == 99) {
 12237  1409  0823               	movf	setLED_Main@led,w
 12238  140A  3A63               	xorlw	99
 12239  140B  1D03               	skipz
 12240  140C  0008               	return
 12241                           
 12242                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 12243  140D  3020               	movlw	32
 12244  140E  068D               	xorwf	13,f
 12245  140F  0008               	return
 12246  1410                     __end_of_setLED_Main:	
 12247                           
 12248                           	psect	text72
 12249  1B0C                     __ptext72:	
 12250 ;; *************** function _LED_Initialization *****************
 12251 ;; Defined at:
 12252 ;;		line 31 in file "../src/LED_B1.c"
 12253 ;; Parameters:    Size  Location     Type
 12254 ;;		None
 12255 ;; Auto vars:     Size  Location     Type
 12256 ;;		None
 12257 ;; Return value:  Size  Location     Type
 12258 ;;		None               void
 12259 ;; Registers used:
 12260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12261 ;; Tracked objects:
 12262 ;;		On entry : 0/0
 12263 ;;		On exit  : 0/0
 12264 ;;		Unchanged: 0/0
 12265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;Total ram usage:        0 bytes
 12271 ;; Hardware stack levels used:    1
 12272 ;; Hardware stack levels required when called:    8
 12273 ;; This function calls:
 12274 ;;		_setLED_Initialization
 12275 ;; This function is called by:
 12276 ;;		_main
 12277 ;; This function uses a non-reentrant model
 12278 ;;
 12279                           
 12280                           
 12281                           ;psect for function _LED_Initialization
 12282  1B0C                     _LED_Initialization:	
 12283                           
 12284                           ;LED_B1.c: 33: setLED_Initialization(1);
 12285                           
 12286                           ;incstack = 0
 12287                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12288  1B0C  3001               	movlw	1
 12289  1B0D  319C  242B  319B   	fcall	_setLED_Initialization
 12290                           
 12291                           ;LED_B1.c: 36: setLED_Initialization(2);
 12292  1B10  3002               	movlw	2
 12293  1B11  319C  242B  319B   	fcall	_setLED_Initialization
 12294                           
 12295                           ;LED_B1.c: 42: setLED_Initialization(99);
 12296  1B14  3063               	movlw	99
 12297  1B15  319C  242B         	fcall	_setLED_Initialization
 12298  1B17  0008               	return
 12299  1B18                     __end_of_LED_Initialization:	
 12300                           
 12301                           	psect	text73
 12302  1C2B                     __ptext73:	
 12303 ;; *************** function _setLED_Initialization *****************
 12304 ;; Defined at:
 12305 ;;		line 63 in file "../src/LED_B1.c"
 12306 ;; Parameters:    Size  Location     Type
 12307 ;;  led             1    wreg     unsigned char 
 12308 ;; Auto vars:     Size  Location     Type
 12309 ;;  led             1    3[BANK0 ] unsigned char 
 12310 ;; Return value:  Size  Location     Type
 12311 ;;		None               void
 12312 ;; Registers used:
 12313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12314 ;; Tracked objects:
 12315 ;;		On entry : 0/0
 12316 ;;		On exit  : 0/0
 12317 ;;		Unchanged: 0/0
 12318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;Total ram usage:        1 bytes
 12324 ;; Hardware stack levels used:    1
 12325 ;; Hardware stack levels required when called:    7
 12326 ;; This function calls:
 12327 ;;		_LedPointSelect
 12328 ;;		_setLED
 12329 ;; This function is called by:
 12330 ;;		_LED_Initialization
 12331 ;; This function uses a non-reentrant model
 12332 ;;
 12333                           
 12334                           
 12335                           ;psect for function _setLED_Initialization
 12336  1C2B                     _setLED_Initialization:	
 12337                           
 12338                           ;incstack = 0
 12339                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12340                           ;setLED_Initialization@led stored from wreg
 12341  1C2B  0020               	movlb	0	; select bank0
 12342  1C2C  00A3               	movwf	setLED_Initialization@led
 12343                           
 12344                           ;LED_B1.c: 64: LedPointSelect(led);
 12345  1C2D  0823               	movf	setLED_Initialization@led,w
 12346  1C2E  319E  26FF  319C   	fcall	_LedPointSelect
 12347                           
 12348                           ;LED_B1.c: 65: LED->Enable = 1;
 12349  1C31  0021               	movlb	1	; select bank1
 12350  1C32  0843               	movf	_LED^(0+128),w
 12351  1C33  0086               	movwf	6
 12352  1C34  0844               	movf	(_LED+1)^(0+128),w
 12353  1C35  0087               	movwf	7
 12354  1C36  1401               	bsf	1,0
 12355                           
 12356                           ;LED_B1.c: 66: setLED(led, 0);
 12357  1C37  0020               	movlb	0	; select bank0
 12358  1C38  01A1               	clrf	setLED@command
 12359  1C39  0823               	movf	setLED_Initialization@led,w
 12360  1C3A  3197  279E         	fcall	_setLED
 12361  1C3C  0008               	return
 12362  1C3D                     __end_of_setLED_Initialization:	
 12363                           
 12364                           	psect	text74
 12365  1E5D                     __ptext74:	
 12366 ;; *************** function _Flash_Memory_Main *****************
 12367 ;; Defined at:
 12368 ;;		line 790 in file "../src/MCU_B1.c"
 12369 ;; Parameters:    Size  Location     Type
 12370 ;;		None
 12371 ;; Auto vars:     Size  Location     Type
 12372 ;;		None
 12373 ;; Return value:  Size  Location     Type
 12374 ;;		None               void
 12375 ;; Registers used:
 12376 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12377 ;; Tracked objects:
 12378 ;;		On entry : 0/0
 12379 ;;		On exit  : 0/0
 12380 ;;		Unchanged: 0/0
 12381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12386 ;;Total ram usage:        0 bytes
 12387 ;; Hardware stack levels used:    1
 12388 ;; Hardware stack levels required when called:    8
 12389 ;; This function calls:
 12390 ;;		_Flash_Memory_Modify
 12391 ;; This function is called by:
 12392 ;;		_main
 12393 ;; This function uses a non-reentrant model
 12394 ;;
 12395                           
 12396                           
 12397                           ;psect for function _Flash_Memory_Main
 12398  1E5D                     _Flash_Memory_Main:	
 12399                           
 12400                           ;MCU_B1.c: 791: if (Memory.GO == 1) {
 12401                           
 12402                           ;incstack = 0
 12403                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12404  1E5D  0024               	movlb	4	; select bank4
 12405  1E5E  1CC4               	btfss	(_Memory^(0+512)+36),1
 12406  1E5F  0008               	return
 12407                           
 12408                           ;MCU_B1.c: 792: if (Memory.Modify == 1) {
 12409  1E60  1C44               	btfss	(_Memory^(0+512)+36),0
 12410  1E61  2E7A               	goto	l1343
 12411                           
 12412                           ;MCU_B1.c: 793: Memory.Time++;
 12413  1E62  3001               	movlw	1
 12414  1E63  07C2               	addwf	(_Memory^(0+512)+34),f
 12415  1E64  3000               	movlw	0
 12416  1E65  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12417                           
 12418                           ;MCU_B1.c: 794: if (Memory.Time == 25)
 12419  1E66  3022               	movlw	34
 12420  1E67  3E20               	addlw	_Memory& (0+255)
 12421  1E68  0086               	movwf	6
 12422  1E69  3002               	movlw	2	; select bank4/5
 12423  1E6A  0087               	movwf	7
 12424  1E6B  3F40               	moviw [0]fsr1
 12425  1E6C  3A19               	xorlw	25
 12426  1E6D  1D03               	skipz
 12427  1E6E  2E71               	goto	u7655
 12428  1E6F  3F41               	moviw [1]fsr1
 12429  1E70  3A00               	xorlw	0
 12430  1E71                     u7655:	
 12431  1E71  1D03               	skipz
 12432  1E72  0008               	return
 12433                           
 12434                           ;MCU_B1.c: 795: {
 12435                           ;MCU_B1.c: 796: Memory.Time = 0;
 12436  1E73  01C2               	clrf	(_Memory^(0+512)+34)
 12437  1E74  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12438                           
 12439                           ;MCU_B1.c: 797: Memory.Modify = 0;
 12440  1E75  1044               	bcf	(_Memory^(0+512)+36),0
 12441                           
 12442                           ;MCU_B1.c: 798: Memory.GO = 0;
 12443  1E76  10C4               	bcf	(_Memory^(0+512)+36),1
 12444                           
 12445                           ;MCU_B1.c: 799: Flash_Memory_Modify();
 12446  1E77  3193  233F         	fcall	_Flash_Memory_Modify
 12447                           
 12448                           ;MCU_B1.c: 800: }
 12449                           ;MCU_B1.c: 801: } else {
 12450  1E79  0008               	return
 12451  1E7A                     l1343:	
 12452                           
 12453                           ;MCU_B1.c: 802: Memory.GO = 0;
 12454  1E7A  10C4               	bcf	(_Memory^(0+512)+36),1
 12455  1E7B  0008               	return
 12456  1E7C                     __end_of_Flash_Memory_Main:	
 12457                           
 12458                           	psect	text75
 12459  133F                     __ptext75:	
 12460 ;; *************** function _Flash_Memory_Modify *****************
 12461 ;; Defined at:
 12462 ;;		line 859 in file "../src/MCU_B1.c"
 12463 ;; Parameters:    Size  Location     Type
 12464 ;;		None
 12465 ;; Auto vars:     Size  Location     Type
 12466 ;;  i               1    5[BANK0 ] unsigned char 
 12467 ;; Return value:  Size  Location     Type
 12468 ;;		None               void
 12469 ;; Registers used:
 12470 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12471 ;; Tracked objects:
 12472 ;;		On entry : 0/0
 12473 ;;		On exit  : 0/0
 12474 ;;		Unchanged: 0/0
 12475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12479 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12480 ;;Total ram usage:        2 bytes
 12481 ;; Hardware stack levels used:    1
 12482 ;; Hardware stack levels required when called:    7
 12483 ;; This function calls:
 12484 ;;		_Flash_Memory_Erasing
 12485 ;;		_Flash_Memory_Read
 12486 ;;		_Flash_Memory_Write
 12487 ;; This function is called by:
 12488 ;;		_Flash_Memory_Main
 12489 ;; This function uses a non-reentrant model
 12490 ;;
 12491                           
 12492                           
 12493                           ;psect for function _Flash_Memory_Modify
 12494  133F                     _Flash_Memory_Modify:	
 12495                           
 12496                           ;MCU_B1.c: 860: char i = 0;
 12497                           
 12498                           ;incstack = 0
 12499                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12500  133F  0020               	movlb	0	; select bank0
 12501  1340  01A5               	clrf	Flash_Memory_Modify@i
 12502                           
 12503                           ;MCU_B1.c: 861: for (i = 0; i < 32; i++) {
 12504  1341  01A5               	clrf	Flash_Memory_Modify@i
 12505  1342  3020               	movlw	32
 12506  1343  0225               	subwf	Flash_Memory_Modify@i,w
 12507  1344  1803               	btfsc	3,0
 12508  1345  2B5B               	goto	l7510
 12509  1346                     l7504:	
 12510                           
 12511                           ;MCU_B1.c: 862: Memory.Data[i] = Flash_Memory_Read(i);
 12512  1346  0825               	movf	Flash_Memory_Modify@i,w
 12513  1347  3190  2067  3193   	fcall	_Flash_Memory_Read
 12514  134A  0020               	movlb	0	; select bank0
 12515  134B  00A4               	movwf	??_Flash_Memory_Modify
 12516  134C  0825               	movf	Flash_Memory_Modify@i,w
 12517  134D  3E20               	addlw	_Memory& (0+255)
 12518  134E  0086               	movwf	6
 12519  134F  3002               	movlw	2	; select bank4/5
 12520  1350  0087               	movwf	7
 12521  1351  0824               	movf	??_Flash_Memory_Modify,w
 12522  1352  0081               	movwf	1
 12523  1353  3001               	movlw	1
 12524  1354  00A4               	movwf	??_Flash_Memory_Modify
 12525  1355  0824               	movf	??_Flash_Memory_Modify,w
 12526  1356  07A5               	addwf	Flash_Memory_Modify@i,f
 12527  1357  3020               	movlw	32
 12528  1358  0225               	subwf	Flash_Memory_Modify@i,w
 12529  1359  1C03               	skipc
 12530  135A  2B46               	goto	l7504
 12531  135B                     l7510:	
 12532                           
 12533                           ;MCU_B1.c: 863: }
 12534                           ;MCU_B1.c: 864: Memory.Data[0]=product->Data[12];
 12535  135B  086E               	movf	_product,w
 12536  135C  0086               	movwf	6
 12537  135D  3002               	movlw	2	; select bank4/5
 12538  135E  0087               	movwf	7
 12539  135F  3002               	movlw	2	; select bank4/5
 12540  1360  3F4C               	moviw [12]fsr1
 12541  1361  0024               	movlb	4	; select bank4
 12542  1362  00A0               	movwf	_Memory^(0+512)
 12543                           
 12544                           ;MCU_B1.c: 865: Memory.Data[1]=product->Data[13];
 12545  1363  0020               	movlb	0	; select bank0
 12546  1364  086E               	movf	_product,w
 12547  1365  0086               	movwf	6
 12548  1366  3002               	movlw	2	; select bank4/5
 12549  1367  0087               	movwf	7
 12550  1368  3002               	movlw	2	; select bank4/5
 12551  1369  3F4D               	moviw [13]fsr1
 12552  136A  0024               	movlb	4	; select bank4
 12553  136B  00A1               	movwf	(_Memory^(0+512)+1)
 12554                           
 12555                           ;MCU_B1.c: 866: Memory.Data[2]=product->Data[14];
 12556  136C  0020               	movlb	0	; select bank0
 12557  136D  086E               	movf	_product,w
 12558  136E  0086               	movwf	6
 12559  136F  3002               	movlw	2	; select bank4/5
 12560  1370  0087               	movwf	7
 12561  1371  3002               	movlw	2	; select bank4/5
 12562  1372  3F4E               	moviw [14]fsr1
 12563  1373  0024               	movlb	4	; select bank4
 12564  1374  00A2               	movwf	(_Memory^(0+512)+2)
 12565                           
 12566                           ;MCU_B1.c: 872: if (Memory.LoopSave == 1) {
 12567  1375  1D44               	btfss	(_Memory^(0+512)+36),2
 12568  1376  2B7B               	goto	l1365
 12569                           
 12570                           ;MCU_B1.c: 873: Memory.LoopSave = 0;
 12571  1377  1144               	bcf	(_Memory^(0+512)+36),2
 12572                           
 12573                           ;MCU_B1.c: 874: myMain.FirstOpen = 0;
 12574  1378  0021               	movlb	1	; select bank1
 12575  1379  12A0               	bcf	_myMain^(0+128),5
 12576                           
 12577                           ;MCU_B1.c: 875: myMain.First = 0;
 12578  137A  13A0               	bcf	_myMain^(0+128),7
 12579  137B                     l1365:	
 12580                           
 12581                           ;MCU_B1.c: 877: }
 12582                           ;MCU_B1.c: 878: GIE = 0;
 12583  137B  138B               	bcf	11,7	;volatile
 12584                           
 12585                           ;MCU_B1.c: 879: Flash_Memory_Erasing();
 12586  137C  319B  2300  3193   	fcall	_Flash_Memory_Erasing
 12587                           
 12588                           ;MCU_B1.c: 880: Flash_Memory_Write();
 12589  137F  3191  2103         	fcall	_Flash_Memory_Write
 12590                           
 12591                           ;MCU_B1.c: 881: GIE = 1;
 12592  1381  178B               	bsf	11,7	;volatile
 12593  1382  0008               	return
 12594  1383                     __end_of_Flash_Memory_Modify:	
 12595                           
 12596                           	psect	text76
 12597  1B00                     __ptext76:	
 12598 ;; *************** function _Flash_Memory_Erasing *****************
 12599 ;; Defined at:
 12600 ;;		line 848 in file "../src/MCU_B1.c"
 12601 ;; Parameters:    Size  Location     Type
 12602 ;;		None
 12603 ;; Auto vars:     Size  Location     Type
 12604 ;;		None
 12605 ;; Return value:  Size  Location     Type
 12606 ;;		None               void
 12607 ;; Registers used:
 12608 ;;		wreg, status,2, status,0, pclath, cstack
 12609 ;; Tracked objects:
 12610 ;;		On entry : 0/0
 12611 ;;		On exit  : 0/0
 12612 ;;		Unchanged: 0/0
 12613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12618 ;;Total ram usage:        0 bytes
 12619 ;; Hardware stack levels used:    1
 12620 ;; Hardware stack levels required when called:    6
 12621 ;; This function calls:
 12622 ;;		_Flash_Memory_Unlock
 12623 ;; This function is called by:
 12624 ;;		_Flash_Memory_Modify
 12625 ;; This function uses a non-reentrant model
 12626 ;;
 12627                           
 12628                           
 12629                           ;psect for function _Flash_Memory_Erasing
 12630  1B00                     _Flash_Memory_Erasing:	
 12631                           
 12632                           ;MCU_B1.c: 849: CFGS = 0;
 12633                           
 12634                           ;incstack = 0
 12635                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12636  1B00  0023               	movlb	3	; select bank3
 12637  1B01  1315               	bcf	21,6	;volatile
 12638                           
 12639                           ;MCU_B1.c: 850: PMADRH = 0x30;
 12640  1B02  3030               	movlw	48
 12641  1B03  0092               	movwf	18	;volatile
 12642                           
 12643                           ;MCU_B1.c: 851: PMADRL = 0x00;
 12644  1B04  0191               	clrf	17	;volatile
 12645                           
 12646                           ;MCU_B1.c: 852: FREE = 1;
 12647  1B05  1615               	bsf	21,4	;volatile
 12648                           
 12649                           ;MCU_B1.c: 853: WREN = 1;
 12650  1B06  1515               	bsf	21,2	;volatile
 12651                           
 12652                           ;MCU_B1.c: 854: Flash_Memory_Unlock();
 12653  1B07  319A  22C1         	fcall	_Flash_Memory_Unlock
 12654                           
 12655                           ;MCU_B1.c: 855: WREN = 0;
 12656  1B09  0023               	movlb	3	; select bank3
 12657  1B0A  1115               	bcf	21,2	;volatile
 12658  1B0B  0008               	return
 12659  1B0C                     __end_of_Flash_Memory_Erasing:	
 12660                           
 12661                           	psect	text77
 12662  05DB                     __ptext77:	
 12663 ;; *************** function _Flash_Memory_Initialization *****************
 12664 ;; Defined at:
 12665 ;;		line 749 in file "../src/MCU_B1.c"
 12666 ;; Parameters:    Size  Location     Type
 12667 ;;		None
 12668 ;; Auto vars:     Size  Location     Type
 12669 ;;  i               1   62[BANK0 ] unsigned char 
 12670 ;; Return value:  Size  Location     Type
 12671 ;;		None               void
 12672 ;; Registers used:
 12673 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12674 ;; Tracked objects:
 12675 ;;		On entry : 0/0
 12676 ;;		On exit  : 0/0
 12677 ;;		Unchanged: 0/0
 12678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;Total ram usage:        2 bytes
 12684 ;; Hardware stack levels used:    1
 12685 ;; Hardware stack levels required when called:    8
 12686 ;; This function calls:
 12687 ;;		_Flash_Memory_Read
 12688 ;;		_Flash_Memory_Write
 12689 ;;		_setPercentValue
 12690 ;; This function is called by:
 12691 ;;		_main
 12692 ;; This function uses a non-reentrant model
 12693 ;;
 12694                           
 12695                           
 12696                           ;psect for function _Flash_Memory_Initialization
 12697  05DB                     _Flash_Memory_Initialization:	
 12698                           
 12699                           ;MCU_B1.c: 750: char i = 0;
 12700                           
 12701                           ;incstack = 0
 12702                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12703  05DB  0020               	movlb	0	; select bank0
 12704  05DC  01DE               	clrf	Flash_Memory_Initialization@i
 12705                           
 12706                           ;MCU_B1.c: 751: if (Flash_Memory_Read(31) == 0xaa) {
 12707  05DD  301F               	movlw	31
 12708  05DE  3190  2067  3185   	fcall	_Flash_Memory_Read
 12709  05E1  3AAA               	xorlw	170
 12710  05E2  1D03               	skipz
 12711  05E3  2E4D               	goto	l9642
 12712                           
 12713                           ;MCU_B1.c: 752: product->Data[12] = Flash_Memory_Read(0);
 12714  05E4  3000               	movlw	0
 12715  05E5  3190  2067  3185   	fcall	_Flash_Memory_Read
 12716  05E8  0020               	movlb	0	; select bank0
 12717  05E9  00DD               	movwf	??_Flash_Memory_Initialization
 12718  05EA  086E               	movf	_product,w
 12719  05EB  3E0C               	addlw	12
 12720  05EC  0086               	movwf	6
 12721  05ED  3002               	movlw	2	; select bank4/5
 12722  05EE  0087               	movwf	7
 12723  05EF  085D               	movf	??_Flash_Memory_Initialization,w
 12724  05F0  0081               	movwf	1
 12725                           
 12726                           ;MCU_B1.c: 753: product->Data[13] = Flash_Memory_Read(1);
 12727  05F1  3001               	movlw	1
 12728  05F2  3190  2067  3185   	fcall	_Flash_Memory_Read
 12729  05F5  0020               	movlb	0	; select bank0
 12730  05F6  00DD               	movwf	??_Flash_Memory_Initialization
 12731  05F7  086E               	movf	_product,w
 12732  05F8  3E0D               	addlw	13
 12733  05F9  0086               	movwf	6
 12734  05FA  3002               	movlw	2	; select bank4/5
 12735  05FB  0087               	movwf	7
 12736  05FC  085D               	movf	??_Flash_Memory_Initialization,w
 12737  05FD  0081               	movwf	1
 12738                           
 12739                           ;MCU_B1.c: 754: product->Data[14] = Flash_Memory_Read(2);
 12740  05FE  3002               	movlw	2
 12741  05FF  3190  2067  3185   	fcall	_Flash_Memory_Read
 12742  0602  0020               	movlb	0	; select bank0
 12743  0603  00DD               	movwf	??_Flash_Memory_Initialization
 12744  0604  086E               	movf	_product,w
 12745  0605  3E0E               	addlw	14
 12746  0606  0086               	movwf	6
 12747  0607  3002               	movlw	2	; select bank4/5
 12748  0608  0087               	movwf	7
 12749  0609  085D               	movf	??_Flash_Memory_Initialization,w
 12750  060A  0081               	movwf	1
 12751                           
 12752                           ;MCU_B1.c: 760: i = setPercentValue(((char)((100-60)*0.8)));
 12753  060B  3020               	movlw	32
 12754  060C  3193  2383  3185   	fcall	_setPercentValue
 12755  060F  0020               	movlb	0	; select bank0
 12756  0610  00DD               	movwf	??_Flash_Memory_Initialization
 12757  0611  085D               	movf	??_Flash_Memory_Initialization,w
 12758  0612  00DE               	movwf	Flash_Memory_Initialization@i
 12759                           
 12760                           ;MCU_B1.c: 761: product->Data[21] = i;
 12761  0613  085E               	movf	Flash_Memory_Initialization@i,w
 12762  0614  00DD               	movwf	??_Flash_Memory_Initialization
 12763  0615  086E               	movf	_product,w
 12764  0616  3E15               	addlw	21
 12765  0617  0086               	movwf	6
 12766  0618  3002               	movlw	2	; select bank4/5
 12767  0619  0087               	movwf	7
 12768  061A  085D               	movf	??_Flash_Memory_Initialization,w
 12769  061B  0081               	movwf	1
 12770                           
 12771                           ;MCU_B1.c: 762: product->Data[22] = i;
 12772  061C  085E               	movf	Flash_Memory_Initialization@i,w
 12773  061D  00DD               	movwf	??_Flash_Memory_Initialization
 12774  061E  086E               	movf	_product,w
 12775  061F  3E16               	addlw	22
 12776  0620  0086               	movwf	6
 12777  0621  3002               	movlw	2	; select bank4/5
 12778  0622  0087               	movwf	7
 12779  0623  085D               	movf	??_Flash_Memory_Initialization,w
 12780  0624  0081               	movwf	1
 12781                           
 12782                           ;MCU_B1.c: 763: product->Data[23] = i;
 12783  0625  085E               	movf	Flash_Memory_Initialization@i,w
 12784  0626  00DD               	movwf	??_Flash_Memory_Initialization
 12785  0627  086E               	movf	_product,w
 12786  0628  3E17               	addlw	23
 12787  0629  0086               	movwf	6
 12788  062A  3002               	movlw	2	; select bank4/5
 12789  062B  0087               	movwf	7
 12790  062C  085D               	movf	??_Flash_Memory_Initialization,w
 12791  062D  0081               	movwf	1
 12792                           
 12793                           ;MCU_B1.c: 765: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12794  062E  086E               	movf	_product,w
 12795  062F  3E0C               	addlw	12
 12796  0630  0086               	movwf	6
 12797  0631  3002               	movlw	2	; select bank4/5
 12798  0632  0087               	movwf	7
 12799  0633  0801               	movf	1,w
 12800  0634  3AFF               	xorlw	255
 12801  0635  1D03               	skipz
 12802  0636  0008               	return
 12803  0637  086E               	movf	_product,w
 12804  0638  3E0D               	addlw	13
 12805  0639  0086               	movwf	6
 12806  063A  3002               	movlw	2	; select bank4/5
 12807  063B  0087               	movwf	7
 12808  063C  0801               	movf	1,w
 12809  063D  3AFF               	xorlw	255
 12810  063E  1D03               	skipz
 12811  063F  0008               	return
 12812  0640  086E               	movf	_product,w
 12813  0641  3E0E               	addlw	14
 12814  0642  0086               	movwf	6
 12815  0643  3002               	movlw	2	; select bank4/5
 12816  0644  0087               	movwf	7
 12817  0645  0801               	movf	1,w
 12818  0646  3AFF               	xorlw	255
 12819  0647  1D03               	skipz
 12820  0648  0008               	return
 12821                           
 12822                           ;MCU_B1.c: 766: myMain.FirstOpen = 1;
 12823  0649  0021               	movlb	1	; select bank1
 12824  064A  16A0               	bsf	_myMain^(0+128),5
 12825                           
 12826                           ;MCU_B1.c: 767: myMain.First = 1;
 12827  064B  17A0               	bsf	_myMain^(0+128),7
 12828                           
 12829                           ;MCU_B1.c: 768: }
 12830                           ;MCU_B1.c: 769: } else {
 12831  064C  0008               	return
 12832  064D                     l9642:	
 12833                           
 12834                           ;MCU_B1.c: 770: i = setPercentValue(((char)((100-60)*0.8)));
 12835  064D  3020               	movlw	32
 12836  064E  3193  2383  3185   	fcall	_setPercentValue
 12837  0651  0020               	movlb	0	; select bank0
 12838  0652  00DD               	movwf	??_Flash_Memory_Initialization
 12839  0653  085D               	movf	??_Flash_Memory_Initialization,w
 12840  0654  00DE               	movwf	Flash_Memory_Initialization@i
 12841                           
 12842                           ;MCU_B1.c: 771: Memory.Data[0]=0xff;
 12843  0655  30FF               	movlw	255
 12844  0656  00DD               	movwf	??_Flash_Memory_Initialization
 12845  0657  085D               	movf	??_Flash_Memory_Initialization,w
 12846  0658  0024               	movlb	4	; select bank4
 12847  0659  00A0               	movwf	_Memory^(0+512)
 12848                           
 12849                           ;MCU_B1.c: 772: Memory.Data[1]=0xff;
 12850  065A  30FF               	movlw	255
 12851  065B  0020               	movlb	0	; select bank0
 12852  065C  00DD               	movwf	??_Flash_Memory_Initialization
 12853  065D  085D               	movf	??_Flash_Memory_Initialization,w
 12854  065E  0024               	movlb	4	; select bank4
 12855  065F  00A1               	movwf	(_Memory^(0+512)+1)
 12856                           
 12857                           ;MCU_B1.c: 773: Memory.Data[2]=0xff;
 12858  0660  30FF               	movlw	255
 12859  0661  0020               	movlb	0	; select bank0
 12860  0662  00DD               	movwf	??_Flash_Memory_Initialization
 12861  0663  085D               	movf	??_Flash_Memory_Initialization,w
 12862  0664  0024               	movlb	4	; select bank4
 12863  0665  00A2               	movwf	(_Memory^(0+512)+2)
 12864                           
 12865                           ;MCU_B1.c: 774: Memory.Data[3]=0xff;
 12866  0666  30FF               	movlw	255
 12867  0667  0020               	movlb	0	; select bank0
 12868  0668  00DD               	movwf	??_Flash_Memory_Initialization
 12869  0669  085D               	movf	??_Flash_Memory_Initialization,w
 12870  066A  0024               	movlb	4	; select bank4
 12871  066B  00A3               	movwf	(_Memory^(0+512)+3)
 12872                           
 12873                           ;MCU_B1.c: 775: Memory.Data[4]=0xff;
 12874  066C  30FF               	movlw	255
 12875  066D  0020               	movlb	0	; select bank0
 12876  066E  00DD               	movwf	??_Flash_Memory_Initialization
 12877  066F  085D               	movf	??_Flash_Memory_Initialization,w
 12878  0670  0024               	movlb	4	; select bank4
 12879  0671  00A4               	movwf	(_Memory^(0+512)+4)
 12880                           
 12881                           ;MCU_B1.c: 776: Memory.Data[5]=0xff;
 12882  0672  30FF               	movlw	255
 12883  0673  0020               	movlb	0	; select bank0
 12884  0674  00DD               	movwf	??_Flash_Memory_Initialization
 12885  0675  085D               	movf	??_Flash_Memory_Initialization,w
 12886  0676  0024               	movlb	4	; select bank4
 12887  0677  00A5               	movwf	(_Memory^(0+512)+5)
 12888                           
 12889                           ;MCU_B1.c: 777: Memory.Data[31]=0xaa;
 12890  0678  30AA               	movlw	170
 12891  0679  0020               	movlb	0	; select bank0
 12892  067A  00DD               	movwf	??_Flash_Memory_Initialization
 12893  067B  085D               	movf	??_Flash_Memory_Initialization,w
 12894  067C  0024               	movlb	4	; select bank4
 12895  067D  00BF               	movwf	(_Memory^(0+512)+31)
 12896                           
 12897                           ;MCU_B1.c: 778: product->Data[21] = i;
 12898  067E  0020               	movlb	0	; select bank0
 12899  067F  085E               	movf	Flash_Memory_Initialization@i,w
 12900  0680  00DD               	movwf	??_Flash_Memory_Initialization
 12901  0681  086E               	movf	_product,w
 12902  0682  3E15               	addlw	21
 12903  0683  0086               	movwf	6
 12904  0684  3002               	movlw	2	; select bank4/5
 12905  0685  0087               	movwf	7
 12906  0686  085D               	movf	??_Flash_Memory_Initialization,w
 12907  0687  0081               	movwf	1
 12908                           
 12909                           ;MCU_B1.c: 779: product->Data[22] = i;
 12910  0688  085E               	movf	Flash_Memory_Initialization@i,w
 12911  0689  00DD               	movwf	??_Flash_Memory_Initialization
 12912  068A  086E               	movf	_product,w
 12913  068B  3E16               	addlw	22
 12914  068C  0086               	movwf	6
 12915  068D  3002               	movlw	2	; select bank4/5
 12916  068E  0087               	movwf	7
 12917  068F  085D               	movf	??_Flash_Memory_Initialization,w
 12918  0690  0081               	movwf	1
 12919                           
 12920                           ;MCU_B1.c: 780: product->Data[23] = i;
 12921  0691  085E               	movf	Flash_Memory_Initialization@i,w
 12922  0692  00DD               	movwf	??_Flash_Memory_Initialization
 12923  0693  086E               	movf	_product,w
 12924  0694  3E17               	addlw	23
 12925  0695  0086               	movwf	6
 12926  0696  3002               	movlw	2	; select bank4/5
 12927  0697  0087               	movwf	7
 12928  0698  085D               	movf	??_Flash_Memory_Initialization,w
 12929  0699  0081               	movwf	1
 12930                           
 12931                           ;MCU_B1.c: 781: GIE = 0;
 12932  069A  138B               	bcf	11,7	;volatile
 12933                           
 12934                           ;MCU_B1.c: 782: Flash_Memory_Write();
 12935  069B  3191  2103         	fcall	_Flash_Memory_Write
 12936                           
 12937                           ;MCU_B1.c: 783: GIE = 1;
 12938  069D  178B               	bsf	11,7	;volatile
 12939                           
 12940                           ;MCU_B1.c: 784: myMain.FirstOpen = 1;
 12941  069E  0021               	movlb	1	; select bank1
 12942  069F  16A0               	bsf	_myMain^(0+128),5
 12943                           
 12944                           ;MCU_B1.c: 785: myMain.First = 1;
 12945  06A0  17A0               	bsf	_myMain^(0+128),7
 12946  06A1  0008               	return
 12947  06A2                     __end_of_Flash_Memory_Initialization:	
 12948                           
 12949                           	psect	text78
 12950  1103                     __ptext78:	
 12951 ;; *************** function _Flash_Memory_Write *****************
 12952 ;; Defined at:
 12953 ;;		line 829 in file "../src/MCU_B1.c"
 12954 ;; Parameters:    Size  Location     Type
 12955 ;;		None
 12956 ;; Auto vars:     Size  Location     Type
 12957 ;;  i               1    1[BANK0 ] unsigned char 
 12958 ;; Return value:  Size  Location     Type
 12959 ;;		None               void
 12960 ;; Registers used:
 12961 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12962 ;; Tracked objects:
 12963 ;;		On entry : 0/0
 12964 ;;		On exit  : 0/0
 12965 ;;		Unchanged: 0/0
 12966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12969 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;Total ram usage:        2 bytes
 12972 ;; Hardware stack levels used:    1
 12973 ;; Hardware stack levels required when called:    6
 12974 ;; This function calls:
 12975 ;;		_Flash_Memory_Unlock
 12976 ;; This function is called by:
 12977 ;;		_Flash_Memory_Initialization
 12978 ;;		_Flash_Memory_Modify
 12979 ;; This function uses a non-reentrant model
 12980 ;;
 12981                           
 12982                           
 12983                           ;psect for function _Flash_Memory_Write
 12984  1103                     _Flash_Memory_Write:	
 12985                           
 12986                           ;MCU_B1.c: 830: char i = 0;
 12987                           
 12988                           ;incstack = 0
 12989                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12990  1103  0020               	movlb	0	; select bank0
 12991  1104  01A1               	clrf	Flash_Memory_Write@i
 12992                           
 12993                           ;MCU_B1.c: 831: CFGS = 0;
 12994  1105  0023               	movlb	3	; select bank3
 12995  1106  1315               	bcf	21,6	;volatile
 12996                           
 12997                           ;MCU_B1.c: 832: PMADRH = 0x30;
 12998  1107  3030               	movlw	48
 12999  1108  0092               	movwf	18	;volatile
 13000                           
 13001                           ;MCU_B1.c: 833: PMDATH = 0;
 13002  1109  0194               	clrf	20	;volatile
 13003                           
 13004                           ;MCU_B1.c: 834: FREE = 0;
 13005  110A  1215               	bcf	21,4	;volatile
 13006                           
 13007                           ;MCU_B1.c: 835: LWLO = 1;
 13008  110B  1695               	bsf	21,5	;volatile
 13009                           
 13010                           ;MCU_B1.c: 836: WREN = 1;
 13011  110C  1515               	bsf	21,2	;volatile
 13012                           
 13013                           ;MCU_B1.c: 837: for (i = 0; i < 32; i++) {
 13014  110D  0020               	movlb	0	; select bank0
 13015  110E  01A1               	clrf	Flash_Memory_Write@i
 13016  110F  3020               	movlw	32
 13017  1110  0221               	subwf	Flash_Memory_Write@i,w
 13018  1111  1803               	btfsc	3,0
 13019  1112  292B               	goto	l1356
 13020  1113                     l6938:	
 13021                           
 13022                           ;MCU_B1.c: 838: PMADRL = i;
 13023  1113  0821               	movf	Flash_Memory_Write@i,w
 13024  1114  0023               	movlb	3	; select bank3
 13025  1115  0091               	movwf	17	;volatile
 13026                           
 13027                           ;MCU_B1.c: 839: PMDATL = Memory.Data[i];
 13028  1116  0020               	movlb	0	; select bank0
 13029  1117  0821               	movf	Flash_Memory_Write@i,w
 13030  1118  3E20               	addlw	_Memory& (0+255)
 13031  1119  0086               	movwf	6
 13032  111A  3002               	movlw	2	; select bank4/5
 13033  111B  0087               	movwf	7
 13034  111C  0801               	movf	1,w
 13035  111D  0023               	movlb	3	; select bank3
 13036  111E  0093               	movwf	19	;volatile
 13037                           
 13038                           ;MCU_B1.c: 840: Flash_Memory_Unlock();
 13039  111F  319A  22C1  3191   	fcall	_Flash_Memory_Unlock
 13040  1122  3001               	movlw	1
 13041  1123  0020               	movlb	0	; select bank0
 13042  1124  00A0               	movwf	??_Flash_Memory_Write
 13043  1125  0820               	movf	??_Flash_Memory_Write,w
 13044  1126  07A1               	addwf	Flash_Memory_Write@i,f
 13045  1127  3020               	movlw	32
 13046  1128  0221               	subwf	Flash_Memory_Write@i,w
 13047  1129  1C03               	skipc
 13048  112A  2913               	goto	l6938
 13049  112B                     l1356:	
 13050                           
 13051                           ;MCU_B1.c: 841: }
 13052                           ;MCU_B1.c: 842: LWLO = 0;
 13053  112B  0023               	movlb	3	; select bank3
 13054  112C  1295               	bcf	21,5	;volatile
 13055                           
 13056                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
 13057  112D  319A  22C1         	fcall	_Flash_Memory_Unlock
 13058                           
 13059                           ;MCU_B1.c: 844: WREN = 0;
 13060  112F  0023               	movlb	3	; select bank3
 13061  1130  1115               	bcf	21,2	;volatile
 13062  1131  0008               	return
 13063  1132                     __end_of_Flash_Memory_Write:	
 13064                           
 13065                           	psect	text79
 13066  1AC1                     __ptext79:	
 13067 ;; *************** function _Flash_Memory_Unlock *****************
 13068 ;; Defined at:
 13069 ;;		line 808 in file "../src/MCU_B1.c"
 13070 ;; Parameters:    Size  Location     Type
 13071 ;;		None
 13072 ;; Auto vars:     Size  Location     Type
 13073 ;;		None
 13074 ;; Return value:  Size  Location     Type
 13075 ;;		None               void
 13076 ;; Registers used:
 13077 ;;		wreg
 13078 ;; Tracked objects:
 13079 ;;		On entry : 0/0
 13080 ;;		On exit  : 0/0
 13081 ;;		Unchanged: 0/0
 13082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13087 ;;Total ram usage:        0 bytes
 13088 ;; Hardware stack levels used:    1
 13089 ;; Hardware stack levels required when called:    5
 13090 ;; This function calls:
 13091 ;;		Nothing
 13092 ;; This function is called by:
 13093 ;;		_Flash_Memory_Write
 13094 ;;		_Flash_Memory_Erasing
 13095 ;; This function uses a non-reentrant model
 13096 ;;
 13097                           
 13098                           
 13099                           ;psect for function _Flash_Memory_Unlock
 13100  1AC1                     _Flash_Memory_Unlock:	
 13101                           
 13102                           ;MCU_B1.c: 809: PMCON2 = 0x55;
 13103                           
 13104                           ;incstack = 0
 13105                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13106  1AC1  3055               	movlw	85
 13107  1AC2  0023               	movlb	3	; select bank3
 13108  1AC3  0096               	movwf	22	;volatile
 13109                           
 13110                           ;MCU_B1.c: 810: PMCON2 = 0xaa;
 13111  1AC4  30AA               	movlw	170
 13112  1AC5  0096               	movwf	22	;volatile
 13113                           
 13114                           ;MCU_B1.c: 811: WR = 1;
 13115  1AC6  1495               	bsf	21,1	;volatile
 13116                           
 13117                           ;MCU_B1.c: 812: __nop();
 13118  1AC7  0000               	nop
 13119                           
 13120                           ;MCU_B1.c: 813: __nop();
 13121  1AC8  0000               	nop
 13122  1AC9  0008               	return
 13123  1ACA                     __end_of_Flash_Memory_Unlock:	
 13124                           
 13125                           	psect	text80
 13126  1067                     __ptext80:	
 13127 ;; *************** function _Flash_Memory_Read *****************
 13128 ;; Defined at:
 13129 ;;		line 817 in file "../src/MCU_B1.c"
 13130 ;; Parameters:    Size  Location     Type
 13131 ;;  address         1    wreg     unsigned char 
 13132 ;; Auto vars:     Size  Location     Type
 13133 ;;  address         1    2[BANK0 ] unsigned char 
 13134 ;;  ret             1    3[BANK0 ] unsigned char 
 13135 ;;  i               1    1[BANK0 ] unsigned char 
 13136 ;; Return value:  Size  Location     Type
 13137 ;;                  1    wreg      unsigned char 
 13138 ;; Registers used:
 13139 ;;		wreg, status,2
 13140 ;; Tracked objects:
 13141 ;;		On entry : 0/0
 13142 ;;		On exit  : 0/0
 13143 ;;		Unchanged: 0/0
 13144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13148 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13149 ;;Total ram usage:        4 bytes
 13150 ;; Hardware stack levels used:    1
 13151 ;; Hardware stack levels required when called:    5
 13152 ;; This function calls:
 13153 ;;		Nothing
 13154 ;; This function is called by:
 13155 ;;		_Flash_Memory_Initialization
 13156 ;;		_Flash_Memory_Modify
 13157 ;; This function uses a non-reentrant model
 13158 ;;
 13159                           
 13160                           
 13161                           ;psect for function _Flash_Memory_Read
 13162  1067                     _Flash_Memory_Read:	
 13163                           
 13164                           ;incstack = 0
 13165                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13166                           ;Flash_Memory_Read@address stored from wreg
 13167  1067  0020               	movlb	0	; select bank0
 13168  1068  00A2               	movwf	Flash_Memory_Read@address
 13169                           
 13170                           ;MCU_B1.c: 818: char i = 0, ret = 0;
 13171  1069  01A1               	clrf	Flash_Memory_Read@i
 13172  106A  01A3               	clrf	Flash_Memory_Read@ret
 13173                           
 13174                           ;MCU_B1.c: 819: PMADRH = 0x30;
 13175  106B  3030               	movlw	48
 13176  106C  0023               	movlb	3	; select bank3
 13177  106D  0092               	movwf	18	;volatile
 13178                           
 13179                           ;MCU_B1.c: 820: PMADRL = address;
 13180  106E  0020               	movlb	0	; select bank0
 13181  106F  0822               	movf	Flash_Memory_Read@address,w
 13182  1070  0023               	movlb	3	; select bank3
 13183  1071  0091               	movwf	17	;volatile
 13184                           
 13185                           ;MCU_B1.c: 821: CFGS = 0;
 13186  1072  1315               	bcf	21,6	;volatile
 13187                           
 13188                           ;MCU_B1.c: 822: RD = 1;
 13189  1073  1415               	bsf	21,0	;volatile
 13190                           
 13191                           ;MCU_B1.c: 823: i = PMDATH;
 13192  1074  0814               	movf	20,w	;volatile
 13193  1075  0020               	movlb	0	; select bank0
 13194  1076  00A0               	movwf	??_Flash_Memory_Read
 13195  1077  0820               	movf	??_Flash_Memory_Read,w
 13196  1078  00A1               	movwf	Flash_Memory_Read@i
 13197                           
 13198                           ;MCU_B1.c: 824: ret = PMDATL;
 13199  1079  0023               	movlb	3	; select bank3
 13200  107A  0813               	movf	19,w	;volatile
 13201  107B  0020               	movlb	0	; select bank0
 13202  107C  00A0               	movwf	??_Flash_Memory_Read
 13203  107D  0820               	movf	??_Flash_Memory_Read,w
 13204  107E  00A3               	movwf	Flash_Memory_Read@ret
 13205                           
 13206                           ;MCU_B1.c: 825: return ret;
 13207  107F  0823               	movf	Flash_Memory_Read@ret,w
 13208  1080  0008               	return
 13209  1081                     __end_of_Flash_Memory_Read:	
 13210                           
 13211                           	psect	text81
 13212  1ADE                     __ptext81:	
 13213 ;; *************** function _DimmerLights_Main *****************
 13214 ;; Defined at:
 13215 ;;		line 407 in file "../src/Dimmer_B1.c"
 13216 ;; Parameters:    Size  Location     Type
 13217 ;;		None
 13218 ;; Auto vars:     Size  Location     Type
 13219 ;;		None
 13220 ;; Return value:  Size  Location     Type
 13221 ;;		None               void
 13222 ;; Registers used:
 13223 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13224 ;; Tracked objects:
 13225 ;;		On entry : 0/0
 13226 ;;		On exit  : 0/0
 13227 ;;		Unchanged: 0/0
 13228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13233 ;;Total ram usage:        0 bytes
 13234 ;; Hardware stack levels used:    1
 13235 ;; Hardware stack levels required when called:   11
 13236 ;; This function calls:
 13237 ;;		_DimmerLights_Close
 13238 ;;		_setDimmerLights_Main
 13239 ;; This function is called by:
 13240 ;;		_main
 13241 ;; This function uses a non-reentrant model
 13242 ;;
 13243                           
 13244                           
 13245                           ;psect for function _DimmerLights_Main
 13246  1ADE                     _DimmerLights_Main:	
 13247                           
 13248                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 13249                           
 13250                           ;incstack = 0
 13251                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13252  1ADE  3001               	movlw	1
 13253  1ADF  3189  21B0  319A   	fcall	_setDimmerLights_Main
 13254                           
 13255                           ;Dimmer_B1.c: 414: setDimmerLights_Main(2);
 13256  1AE2  3002               	movlw	2
 13257  1AE3  3189  21B0  319A   	fcall	_setDimmerLights_Main
 13258                           
 13259                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 13260  1AE6  319D  255E         	fcall	_DimmerLights_Close
 13261  1AE8  0008               	return
 13262  1AE9                     __end_of_DimmerLights_Main:	
 13263                           
 13264                           	psect	text82
 13265  09B0                     __ptext82:	
 13266 ;; *************** function _setDimmerLights_Main *****************
 13267 ;; Defined at:
 13268 ;;		line 425 in file "../src/Dimmer_B1.c"
 13269 ;; Parameters:    Size  Location     Type
 13270 ;;  lights          1    wreg     unsigned char 
 13271 ;; Auto vars:     Size  Location     Type
 13272 ;;  lights          1   70[BANK0 ] unsigned char 
 13273 ;;  clear           1   69[BANK0 ] unsigned char 
 13274 ;; Return value:  Size  Location     Type
 13275 ;;		None               void
 13276 ;; Registers used:
 13277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13278 ;; Tracked objects:
 13279 ;;		On entry : 0/0
 13280 ;;		On exit  : 0/0
 13281 ;;		Unchanged: 0/0
 13282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13284 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13286 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13287 ;;Total ram usage:        2 bytes
 13288 ;; Hardware stack levels used:    1
 13289 ;; Hardware stack levels required when called:   10
 13290 ;; This function calls:
 13291 ;;		_DimmerLightsPointSelect
 13292 ;;		_setBuz
 13293 ;;		_setDimmerLights
 13294 ;;		_setDimmerLights_Adj
 13295 ;; This function is called by:
 13296 ;;		_DimmerLights_Main
 13297 ;; This function uses a non-reentrant model
 13298 ;;
 13299                           
 13300                           
 13301                           ;psect for function _setDimmerLights_Main
 13302  09B0                     _setDimmerLights_Main:	
 13303                           
 13304                           ;incstack = 0
 13305                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13306                           ;setDimmerLights_Main@lights stored from wreg
 13307  09B0  0020               	movlb	0	; select bank0
 13308  09B1  00E6               	movwf	setDimmerLights_Main@lights
 13309                           
 13310                           ;Dimmer_B1.c: 426: char clear = 1;
 13311  09B2  01E5               	clrf	setDimmerLights_Main@clear
 13312  09B3  0AE5               	incf	setDimmerLights_Main@clear,f
 13313                           
 13314                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 13315  09B4  0866               	movf	setDimmerLights_Main@lights,w
 13316  09B5  319C  2473  3189   	fcall	_DimmerLightsPointSelect
 13317                           
 13318                           ;Dimmer_B1.c: 440: if (lights == 1) {
 13319  09B8  0020               	movlb	0	; select bank0
 13320  09B9  0866               	movf	setDimmerLights_Main@lights,w
 13321  09BA  3A01               	xorlw	1
 13322  09BB  1D03               	skipz
 13323  09BC  29C4               	goto	l9314
 13324                           
 13325                           ;Dimmer_B1.c: 441: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 13326  09BD  3000               	movlw	0
 13327  09BE  0022               	movlb	2	; select bank2
 13328  09BF  1955               	btfsc	(_DimmerLights2^(0+256)+9),2
 13329  09C0  3001               	movlw	1
 13330  09C1  0020               	movlb	0	; select bank0
 13331  09C2  00E5               	movwf	setDimmerLights_Main@clear
 13332                           
 13333                           ;Dimmer_B1.c: 442: } else if (lights == 2) {
 13334  09C3  29CE               	goto	l9318
 13335  09C4                     l9314:	
 13336  09C4  0866               	movf	setDimmerLights_Main@lights,w
 13337  09C5  3A02               	xorlw	2
 13338  09C6  1D03               	skipz
 13339  09C7  29CE               	goto	l9318
 13340                           
 13341                           ;Dimmer_B1.c: 443: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 13342  09C8  3000               	movlw	0
 13343  09C9  0022               	movlb	2	; select bank2
 13344  09CA  1946               	btfsc	(_DimmerLights1^(0+256)+9),2
 13345  09CB  3001               	movlw	1
 13346  09CC  0020               	movlb	0	; select bank0
 13347  09CD  00E5               	movwf	setDimmerLights_Main@clear
 13348  09CE                     l9318:	
 13349                           
 13350                           ;Dimmer_B1.c: 444: }
 13351                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 13352  09CE  0879               	movf	_DimmerLights,w
 13353  09CF  3E08               	addlw	8
 13354  09D0  0086               	movwf	6
 13355  09D1  3001               	movlw	1	; select bank2/3
 13356  09D2  0087               	movwf	7
 13357  09D3  1D01               	btfss	1,2
 13358  09D4  29F5               	goto	l9330
 13359                           
 13360                           ;Dimmer_B1.c: 448: if (clear == 1) {
 13361  09D5  0865               	movf	setDimmerLights_Main@clear,w
 13362  09D6  3A01               	xorlw	1
 13363  09D7  1D03               	skipz
 13364  09D8  0008               	return
 13365                           
 13366                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 13367  09D9  0879               	movf	_DimmerLights,w
 13368  09DA  3E08               	addlw	8
 13369  09DB  0086               	movwf	6
 13370  09DC  3001               	movlw	1	; select bank2/3
 13371  09DD  0087               	movwf	7
 13372  09DE  1101               	bcf	1,2
 13373                           
 13374                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 13375  09DF  0879               	movf	_DimmerLights,w
 13376  09E0  3E08               	addlw	8
 13377  09E1  0086               	movwf	6
 13378  09E2  3001               	movlw	1	; select bank2/3
 13379  09E3  0087               	movwf	7
 13380  09E4  1C81               	btfss	1,1
 13381  09E5  29E9               	goto	l9326
 13382                           
 13383                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 13384  09E6  01A3               	clrf	setDimmerLights@status
 13385  09E7  0AA3               	incf	setDimmerLights@status,f
 13386  09E8  29EB               	goto	L9
 13387  09E9                     l9326:	
 13388                           ;Dimmer_B1.c: 452: } else {
 13389                           
 13390                           
 13391                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 13392  09E9  0020               	movlb	0	; select bank0
 13393  09EA  01A3               	clrf	setDimmerLights@status
 13394  09EB                     L9:	
 13395  09EB  0866               	movf	setDimmerLights_Main@lights,w
 13396  09EC  318D  258E         	fcall	_setDimmerLights
 13397                           
 13398                           ;Dimmer_B1.c: 454: }
 13399                           ;Dimmer_B1.c: 456: DimmerLights->Clear = 0;
 13400  09EE  0879               	movf	_DimmerLights,w
 13401  09EF  3E09               	addlw	9
 13402  09F0  0086               	movwf	6
 13403  09F1  3001               	movlw	1	; select bank2/3
 13404  09F2  0087               	movwf	7
 13405  09F3  1101               	bcf	1,2
 13406                           
 13407                           ;Dimmer_B1.c: 458: }
 13408                           ;Dimmer_B1.c: 459: } else {
 13409  09F4  0008               	return
 13410  09F5                     l9330:	
 13411                           
 13412                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 13413  09F5  0879               	movf	_DimmerLights,w
 13414  09F6  3E08               	addlw	8
 13415  09F7  0086               	movwf	6
 13416  09F8  3001               	movlw	1	; select bank2/3
 13417  09F9  0087               	movwf	7
 13418  09FA  1E01               	btfss	1,4
 13419  09FB  0008               	return
 13420                           
 13421                           ;Dimmer_B1.c: 461: if (clear == 1) {
 13422  09FC  0020               	movlb	0	; select bank0
 13423  09FD  0865               	movf	setDimmerLights_Main@clear,w
 13424  09FE  3A01               	xorlw	1
 13425  09FF  1D03               	skipz
 13426  0A00  0008               	return
 13427                           
 13428                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 13429  0A01  0879               	movf	_DimmerLights,w
 13430  0A02  3E08               	addlw	8
 13431  0A03  0086               	movwf	6
 13432  0A04  3001               	movlw	1	; select bank2/3
 13433  0A05  0087               	movwf	7
 13434  0A06  1201               	bcf	1,4
 13435                           
 13436                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 13437  0A07  0879               	movf	_DimmerLights,w
 13438  0A08  3E08               	addlw	8
 13439  0A09  0086               	movwf	6
 13440  0A0A  3001               	movlw	1	; select bank2/3
 13441  0A0B  0087               	movwf	7
 13442  0A0C  1D81               	btfss	1,3
 13443  0A0D  2A1D               	goto	l9340
 13444                           
 13445                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 13446  0A0E  01E2               	clrf	setDimmerLights_Adj@status
 13447  0A0F  0AE2               	incf	setDimmerLights_Adj@status,f
 13448  0A10  0866               	movf	setDimmerLights_Main@lights,w
 13449  0A11  3192  22FB  3189   	fcall	_setDimmerLights_Adj
 13450                           
 13451                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 13452  0A14  3064               	movlw	100
 13453  0A15  0020               	movlb	0	; select bank0
 13454  0A16  00A9               	movwf	setBuz@time
 13455  0A17  3000               	movlw	0
 13456  0A18  00AA               	movwf	setBuz@time+1
 13457  0A19  3001               	movlw	1
 13458  0A1A  3196  2689         	fcall	_setBuz
 13459                           
 13460                           ;Dimmer_B1.c: 466: } else {
 13461  0A1C  0008               	return
 13462  0A1D                     l9340:	
 13463                           
 13464                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 13465  0A1D  0020               	movlb	0	; select bank0
 13466  0A1E  01E2               	clrf	setDimmerLights_Adj@status
 13467  0A1F  0866               	movf	setDimmerLights_Main@lights,w
 13468  0A20  3192  22FB         	fcall	_setDimmerLights_Adj
 13469  0A22  0008               	return
 13470  0A23                     __end_of_setDimmerLights_Main:	
 13471                           
 13472                           	psect	text83
 13473  12FB                     __ptext83:	
 13474 ;; *************** function _setDimmerLights_Adj *****************
 13475 ;; Defined at:
 13476 ;;		line 646 in file "../src/Dimmer_B1.c"
 13477 ;; Parameters:    Size  Location     Type
 13478 ;;  lights          1    wreg     unsigned char 
 13479 ;;  status          1   66[BANK0 ] unsigned char 
 13480 ;; Auto vars:     Size  Location     Type
 13481 ;;  lights          1   68[BANK0 ] unsigned char 
 13482 ;; Return value:  Size  Location     Type
 13483 ;;		None               void
 13484 ;; Registers used:
 13485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13486 ;; Tracked objects:
 13487 ;;		On entry : 0/0
 13488 ;;		On exit  : 0/0
 13489 ;;		Unchanged: 0/0
 13490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13491 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13494 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13495 ;;Total ram usage:        3 bytes
 13496 ;; Hardware stack levels used:    1
 13497 ;; Hardware stack levels required when called:    9
 13498 ;; This function calls:
 13499 ;;		_DimmerLightsPointSelect
 13500 ;;		_setLoad_StatusOff
 13501 ;;		_setRF_DimmerLights
 13502 ;;		_setTxData
 13503 ;; This function is called by:
 13504 ;;		_setDimmerLights_Main
 13505 ;; This function uses a non-reentrant model
 13506 ;;
 13507                           
 13508                           
 13509                           ;psect for function _setDimmerLights_Adj
 13510  12FB                     _setDimmerLights_Adj:	
 13511                           
 13512                           ;incstack = 0
 13513                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13514                           ;setDimmerLights_Adj@lights stored from wreg
 13515  12FB  0020               	movlb	0	; select bank0
 13516  12FC  00E4               	movwf	setDimmerLights_Adj@lights
 13517                           
 13518                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 13519  12FD  0864               	movf	setDimmerLights_Adj@lights,w
 13520  12FE  319C  2473  3192   	fcall	_DimmerLightsPointSelect
 13521                           
 13522                           ;Dimmer_B1.c: 648: if (status == 1) {
 13523  1301  0020               	movlb	0	; select bank0
 13524  1302  0862               	movf	setDimmerLights_Adj@status,w
 13525  1303  3A01               	xorlw	1
 13526  1304  1D03               	skipz
 13527  1305  2B11               	goto	l9120
 13528                           
 13529                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 13530  1306  0879               	movf	_DimmerLights,w
 13531  1307  0086               	movwf	6
 13532  1308  3001               	movlw	1	; select bank2/3
 13533  1309  0087               	movwf	7
 13534  130A  1581               	bsf	1,3
 13535                           
 13536                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 13537  130B  0879               	movf	_DimmerLights,w
 13538  130C  0086               	movwf	6
 13539  130D  3001               	movlw	1	; select bank2/3
 13540  130E  0087               	movwf	7
 13541  130F  1481               	bsf	1,1
 13542                           
 13543                           ;Dimmer_B1.c: 651: } else {
 13544  1310  0008               	return
 13545  1311                     l9120:	
 13546                           
 13547                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 13548  1311  0879               	movf	_DimmerLights,w
 13549  1312  0086               	movwf	6
 13550  1313  3001               	movlw	1	; select bank2/3
 13551  1314  0087               	movwf	7
 13552  1315  1D81               	btfss	1,3
 13553  1316  0008               	return
 13554                           
 13555                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 13556  1317  0879               	movf	_DimmerLights,w
 13557  1318  0086               	movwf	6
 13558  1319  3001               	movlw	1	; select bank2/3
 13559  131A  0087               	movwf	7
 13560  131B  1081               	bcf	1,1
 13561                           
 13562                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 13563  131C  0879               	movf	_DimmerLights,w
 13564  131D  0086               	movwf	6
 13565  131E  3001               	movlw	1	; select bank2/3
 13566  131F  0087               	movwf	7
 13567  1320  1181               	bcf	1,3
 13568                           
 13569                           ;Dimmer_B1.c: 656: setLoad_StatusOff(0, 1);
 13570  1321  01A0               	clrf	setLoad_StatusOff@command
 13571  1322  0AA0               	incf	setLoad_StatusOff@command,f
 13572  1323  3000               	movlw	0
 13573  1324  319E  263E  3192   	fcall	_setLoad_StatusOff
 13574                           
 13575                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13576  1327  0879               	movf	_DimmerLights,w
 13577  1328  3E04               	addlw	4
 13578  1329  0086               	movwf	6
 13579  132A  3001               	movlw	1	; select bank2/3
 13580  132B  0087               	movwf	7
 13581  132C  0801               	movf	1,w
 13582  132D  0020               	movlb	0	; select bank0
 13583  132E  00E3               	movwf	??_setDimmerLights_Adj
 13584  132F  0879               	movf	_DimmerLights,w
 13585  1330  3E05               	addlw	5
 13586  1331  0086               	movwf	6
 13587  1332  3001               	movlw	1	; select bank2/3
 13588  1333  0087               	movwf	7
 13589  1334  0863               	movf	??_setDimmerLights_Adj,w
 13590  1335  0081               	movwf	1
 13591                           
 13592                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 13593  1336  01DD               	clrf	setRF_DimmerLights@on
 13594  1337  0ADD               	incf	setRF_DimmerLights@on,f
 13595  1338  0864               	movf	setDimmerLights_Adj@lights,w
 13596  1339  3188  20D7  3192   	fcall	_setRF_DimmerLights
 13597                           
 13598                           ;Dimmer_B1.c: 666: setTxData();
 13599  133C  3186  26A2         	fcall	_setTxData
 13600  133E  0008               	return
 13601  133F                     __end_of_setDimmerLights_Adj:	
 13602                           
 13603                           	psect	text84
 13604  1E3E                     __ptext84:	
 13605 ;; *************** function _setLoad_StatusOff *****************
 13606 ;; Defined at:
 13607 ;;		line 282 in file "../src/OverLoad_B1.c"
 13608 ;; Parameters:    Size  Location     Type
 13609 ;;  lights          1    wreg     unsigned char 
 13610 ;;  command         1    0[BANK0 ] unsigned char 
 13611 ;; Auto vars:     Size  Location     Type
 13612 ;;  lights          1    1[BANK0 ] unsigned char 
 13613 ;; Return value:  Size  Location     Type
 13614 ;;		None               void
 13615 ;; Registers used:
 13616 ;;		wreg, status,2, status,0
 13617 ;; Tracked objects:
 13618 ;;		On entry : 0/0
 13619 ;;		On exit  : 0/0
 13620 ;;		Unchanged: 0/0
 13621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13622 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13625 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13626 ;;Total ram usage:        2 bytes
 13627 ;; Hardware stack levels used:    1
 13628 ;; Hardware stack levels required when called:    5
 13629 ;; This function calls:
 13630 ;;		Nothing
 13631 ;; This function is called by:
 13632 ;;		_setDimmerLights_ERROR
 13633 ;;		_setDimmerLights_Adj
 13634 ;; This function uses a non-reentrant model
 13635 ;;
 13636                           
 13637                           
 13638                           ;psect for function _setLoad_StatusOff
 13639  1E3E                     _setLoad_StatusOff:	
 13640                           
 13641                           ;incstack = 0
 13642                           ; Regs used in _setLoad_StatusOff: [wreg+status,2+status,0]
 13643                           ;setLoad_StatusOff@lights stored from wreg
 13644  1E3E  0020               	movlb	0	; select bank0
 13645  1E3F  00A1               	movwf	setLoad_StatusOff@lights
 13646                           
 13647                           ;OverLoad_B1.c: 283: Load1.StatusOff = command;
 13648  1E40  0820               	movf	setLoad_StatusOff@command,w
 13649  1E41  0023               	movlb	3	; select bank3
 13650  1E42  13A0               	bcf	_Load1^(0+384),7
 13651  1E43  1D03               	skipz
 13652  1E44  17A0               	bsf	_Load1^(0+384),7
 13653                           
 13654                           ;OverLoad_B1.c: 284: Load1.SafeCount -= 2;
 13655  1E45  3002               	movlw	2
 13656  1E46  02E2               	subwf	(_Load1^(0+384)+66),f
 13657                           
 13658                           ;OverLoad_B1.c: 285: if (lights == 1) {
 13659  1E47  0020               	movlb	0	; select bank0
 13660  1E48  0821               	movf	setLoad_StatusOff@lights,w
 13661  1E49  3A01               	xorlw	1
 13662  1E4A  1D03               	skipz
 13663  1E4B  2E4E               	goto	l6314
 13664                           
 13665                           ;OverLoad_B1.c: 286: Load1.Lights1Status = 0;
 13666  1E4C  0023               	movlb	3	; select bank3
 13667  1E4D  01E3               	clrf	(_Load1^(0+384)+67)
 13668  1E4E                     l6314:	
 13669                           
 13670                           ;OverLoad_B1.c: 287: }
 13671                           ;OverLoad_B1.c: 288: if (lights == 2) {
 13672  1E4E  0020               	movlb	0	; select bank0
 13673  1E4F  0821               	movf	setLoad_StatusOff@lights,w
 13674  1E50  3A02               	xorlw	2
 13675  1E51  1D03               	skipz
 13676  1E52  2E55               	goto	l6318
 13677                           
 13678                           ;OverLoad_B1.c: 289: Load1.Lights2Status = 0;
 13679  1E53  0023               	movlb	3	; select bank3
 13680  1E54  01E4               	clrf	(_Load1^(0+384)+68)
 13681  1E55                     l6318:	
 13682                           
 13683                           ;OverLoad_B1.c: 290: }
 13684                           ;OverLoad_B1.c: 291: if (lights == 3) {
 13685  1E55  0020               	movlb	0	; select bank0
 13686  1E56  0821               	movf	setLoad_StatusOff@lights,w
 13687  1E57  3A03               	xorlw	3
 13688  1E58  1D03               	skipz
 13689  1E59  0008               	return
 13690                           
 13691                           ;OverLoad_B1.c: 292: Load1.Lights3Status = 0;
 13692  1E5A  0023               	movlb	3	; select bank3
 13693  1E5B  01E5               	clrf	(_Load1^(0+384)+69)
 13694  1E5C  0008               	return
 13695  1E5D                     __end_of_setLoad_StatusOff:	
 13696                           
 13697                           	psect	text85
 13698  0D8E                     __ptext85:	
 13699 ;; *************** function _setDimmerLights *****************
 13700 ;; Defined at:
 13701 ;;		line 593 in file "../src/Dimmer_B1.c"
 13702 ;; Parameters:    Size  Location     Type
 13703 ;;  lights          1    wreg     unsigned char 
 13704 ;;  status          1    3[BANK0 ] unsigned char 
 13705 ;; Auto vars:     Size  Location     Type
 13706 ;;  lights          1    5[BANK0 ] unsigned char 
 13707 ;; Return value:  Size  Location     Type
 13708 ;;		None               void
 13709 ;; Registers used:
 13710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13711 ;; Tracked objects:
 13712 ;;		On entry : 0/0
 13713 ;;		On exit  : 0/0
 13714 ;;		Unchanged: 0/0
 13715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13716 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13718 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13719 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13720 ;;Total ram usage:        3 bytes
 13721 ;; Hardware stack levels used:    1
 13722 ;; Hardware stack levels required when called:    7
 13723 ;; This function calls:
 13724 ;;		_DimmerLightsPointSelect
 13725 ;;		_setLED
 13726 ;;		_setLoad_Count
 13727 ;;		_setLoad_StatusOn
 13728 ;;		_setMemory_GO
 13729 ;; This function is called by:
 13730 ;;		_setDimmerLights_Main
 13731 ;;		_setControl_Lights_Table
 13732 ;; This function uses a non-reentrant model
 13733 ;;
 13734                           
 13735                           
 13736                           ;psect for function _setDimmerLights
 13737  0D8E                     _setDimmerLights:	
 13738                           
 13739                           ;incstack = 0
 13740                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13741                           ;setDimmerLights@lights stored from wreg
 13742  0D8E  0020               	movlb	0	; select bank0
 13743  0D8F  00A5               	movwf	setDimmerLights@lights
 13744                           
 13745                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 13746  0D90  0825               	movf	setDimmerLights@lights,w
 13747  0D91  319C  2473  318D   	fcall	_DimmerLightsPointSelect
 13748                           
 13749                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 13750  0D94  0020               	movlb	0	; select bank0
 13751  0D95  0825               	movf	setDimmerLights@lights,w
 13752  0D96  00A4               	movwf	??_setDimmerLights
 13753  0D97  0021               	movlb	1	; select bank1
 13754  0D98  0A4C               	incf	_Dimmer^(0+128),w
 13755  0D99  0086               	movwf	6
 13756  0D9A  0187               	clrf	7
 13757  0D9B  0020               	movlb	0	; select bank0
 13758  0D9C  0824               	movf	??_setDimmerLights,w
 13759  0D9D  0081               	movwf	1
 13760                           
 13761                           ;Dimmer_B1.c: 596: if (status == 1) {
 13762  0D9E  0823               	movf	setDimmerLights@status,w
 13763  0D9F  3A01               	xorlw	1
 13764  0DA0  1D03               	skipz
 13765  0DA1  2DEC               	goto	l8950
 13766                           
 13767                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 13768  0DA2  0879               	movf	_DimmerLights,w
 13769  0DA3  0086               	movwf	6
 13770  0DA4  3001               	movlw	1	; select bank2/3
 13771  0DA5  0087               	movwf	7
 13772  0DA6  1681               	bsf	1,5
 13773                           
 13774                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 13775  0DA7  01A1               	clrf	setLED@command
 13776  0DA8  0825               	movf	setDimmerLights@lights,w
 13777  0DA9  3197  279E  318D   	fcall	_setLED
 13778                           
 13779                           ;Dimmer_B1.c: 600: setLoad_Count(0);
 13780  0DAC  3000               	movlw	0
 13781  0DAD  319B  233F  318D   	fcall	_setLoad_Count
 13782                           
 13783                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 13784  0DB0  0879               	movf	_DimmerLights,w
 13785  0DB1  0086               	movwf	6
 13786  0DB2  3001               	movlw	1	; select bank2/3
 13787  0DB3  0087               	movwf	7
 13788  0DB4  1481               	bsf	1,1
 13789                           
 13790                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 13791  0DB5  3007               	movlw	7
 13792  0DB6  0020               	movlb	0	; select bank0
 13793  0DB7  00A4               	movwf	??_setDimmerLights
 13794  0DB8  0879               	movf	_DimmerLights,w
 13795  0DB9  3E02               	addlw	2
 13796  0DBA  0086               	movwf	6
 13797  0DBB  3001               	movlw	1	; select bank2/3
 13798  0DBC  0087               	movwf	7
 13799  0DBD  0824               	movf	??_setDimmerLights,w
 13800  0DBE  0081               	movwf	1
 13801                           
 13802                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 13803  0DBF  0879               	movf	_DimmerLights,w
 13804  0DC0  0086               	movwf	6
 13805  0DC1  3001               	movlw	1	; select bank2/3
 13806  0DC2  0087               	movwf	7
 13807  0DC3  1B01               	btfsc	1,6
 13808  0DC4  0008               	return
 13809                           
 13810                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 13811  0DC5  0879               	movf	_DimmerLights,w
 13812  0DC6  0086               	movwf	6
 13813  0DC7  3001               	movlw	1	; select bank2/3
 13814  0DC8  0087               	movwf	7
 13815  0DC9  1701               	bsf	1,6
 13816                           
 13817                           ;Dimmer_B1.c: 607: setLoad_StatusOn(lights, 1);
 13818  0DCA  01A0               	clrf	setLoad_StatusOn@command
 13819  0DCB  0AA0               	incf	setLoad_StatusOn@command,f
 13820  0DCC  0825               	movf	setDimmerLights@lights,w
 13821  0DCD  319F  2743  318D   	fcall	_setLoad_StatusOn
 13822                           
 13823                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 13824  0DD0  3000               	movlw	0
 13825  0DD1  319D  2503         	fcall	_setMemory_GO
 13826                           
 13827                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13828  0DD3  0879               	movf	_DimmerLights,w
 13829  0DD4  3E05               	addlw	5
 13830  0DD5  0086               	movwf	6
 13831  0DD6  3001               	movlw	1	; select bank2/3
 13832  0DD7  0087               	movwf	7
 13833  0DD8  0801               	movf	1,w
 13834  0DD9  0020               	movlb	0	; select bank0
 13835  0DDA  00A4               	movwf	??_setDimmerLights
 13836  0DDB  0879               	movf	_DimmerLights,w
 13837  0DDC  3E04               	addlw	4
 13838  0DDD  0086               	movwf	6
 13839  0DDE  3001               	movlw	1	; select bank2/3
 13840  0DDF  0087               	movwf	7
 13841  0DE0  0824               	movf	??_setDimmerLights,w
 13842  0DE1  0081               	movwf	1
 13843                           
 13844                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 13845  0DE2  3020               	movlw	32
 13846  0DE3  00A4               	movwf	??_setDimmerLights
 13847  0DE4  0879               	movf	_DimmerLights,w
 13848  0DE5  3E04               	addlw	4
 13849  0DE6  0086               	movwf	6
 13850  0DE7  3001               	movlw	1	; select bank2/3
 13851  0DE8  0087               	movwf	7
 13852  0DE9  0824               	movf	??_setDimmerLights,w
 13853  0DEA  0081               	movwf	1
 13854                           
 13855                           ;Dimmer_B1.c: 617: }
 13856                           ;Dimmer_B1.c: 618: } else {
 13857  0DEB  0008               	return
 13858  0DEC                     l8950:	
 13859                           
 13860                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 13861  0DEC  0879               	movf	_DimmerLights,w
 13862  0DED  0086               	movwf	6
 13863  0DEE  3001               	movlw	1	; select bank2/3
 13864  0DEF  0087               	movwf	7
 13865  0DF0  1281               	bcf	1,5
 13866                           
 13867                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13868  0DF1  0879               	movf	_DimmerLights,w
 13869  0DF2  3E06               	addlw	6
 13870  0DF3  0086               	movwf	6
 13871  0DF4  3001               	movlw	1	; select bank2/3
 13872  0DF5  0087               	movwf	7
 13873  0DF6  0801               	movf	1,w
 13874  0DF7  00A4               	movwf	??_setDimmerLights
 13875  0DF8  0879               	movf	_DimmerLights,w
 13876  0DF9  3E04               	addlw	4
 13877  0DFA  0086               	movwf	6
 13878  0DFB  3001               	movlw	1	; select bank2/3
 13879  0DFC  0087               	movwf	7
 13880  0DFD  0824               	movf	??_setDimmerLights,w
 13881  0DFE  0081               	movwf	1
 13882                           
 13883                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 13884  0DFF  0879               	movf	_DimmerLights,w
 13885  0E00  0086               	movwf	6
 13886  0E01  3001               	movlw	1	; select bank2/3
 13887  0E02  0087               	movwf	7
 13888  0E03  1481               	bsf	1,1
 13889                           
 13890                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 13891  0E04  0879               	movf	_DimmerLights,w
 13892  0E05  0086               	movwf	6
 13893  0E06  3001               	movlw	1	; select bank2/3
 13894  0E07  0087               	movwf	7
 13895  0E08  1181               	bcf	1,3
 13896                           
 13897                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 13898  0E09  0879               	movf	_DimmerLights,w
 13899  0E0A  0086               	movwf	6
 13900  0E0B  3001               	movlw	1	; select bank2/3
 13901  0E0C  0087               	movwf	7
 13902  0E0D  1201               	bcf	1,4
 13903                           
 13904                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 13905  0E0E  3007               	movlw	7
 13906  0E0F  00A4               	movwf	??_setDimmerLights
 13907  0E10  0879               	movf	_DimmerLights,w
 13908  0E11  3E02               	addlw	2
 13909  0E12  0086               	movwf	6
 13910  0E13  3001               	movlw	1	; select bank2/3
 13911  0E14  0087               	movwf	7
 13912  0E15  0824               	movf	??_setDimmerLights,w
 13913  0E16  0081               	movwf	1
 13914  0E17  0008               	return
 13915  0E18                     __end_of_setDimmerLights:	
 13916                           
 13917                           	psect	text86
 13918  1F43                     __ptext86:	
 13919 ;; *************** function _setLoad_StatusOn *****************
 13920 ;; Defined at:
 13921 ;;		line 267 in file "../src/OverLoad_B1.c"
 13922 ;; Parameters:    Size  Location     Type
 13923 ;;  lights          1    wreg     unsigned char 
 13924 ;;  command         1    0[BANK0 ] unsigned char 
 13925 ;; Auto vars:     Size  Location     Type
 13926 ;;  lights          1    1[BANK0 ] unsigned char 
 13927 ;; Return value:  Size  Location     Type
 13928 ;;		None               void
 13929 ;; Registers used:
 13930 ;;		wreg
 13931 ;; Tracked objects:
 13932 ;;		On entry : 0/0
 13933 ;;		On exit  : 0/0
 13934 ;;		Unchanged: 0/0
 13935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13936 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13939 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13940 ;;Total ram usage:        2 bytes
 13941 ;; Hardware stack levels used:    1
 13942 ;; Hardware stack levels required when called:    5
 13943 ;; This function calls:
 13944 ;;		Nothing
 13945 ;; This function is called by:
 13946 ;;		_setDimmerLights
 13947 ;; This function uses a non-reentrant model
 13948 ;;
 13949                           
 13950                           
 13951                           ;psect for function _setLoad_StatusOn
 13952  1F43                     _setLoad_StatusOn:	
 13953                           
 13954                           ;incstack = 0
 13955                           ; Regs used in _setLoad_StatusOn: [wreg]
 13956                           ;setLoad_StatusOn@lights stored from wreg
 13957  1F43  0020               	movlb	0	; select bank0
 13958  1F44  00A1               	movwf	setLoad_StatusOn@lights
 13959                           
 13960                           ;OverLoad_B1.c: 268: Load1.GO = 1;
 13961  1F45  0023               	movlb	3	; select bank3
 13962  1F46  14A0               	bsf	_Load1^(0+384),1
 13963                           
 13964                           ;OverLoad_B1.c: 269: Load1.StatusOn = command;
 13965  1F47  0020               	movlb	0	; select bank0
 13966  1F48  0820               	movf	setLoad_StatusOn@command,w
 13967  1F49  0023               	movlb	3	; select bank3
 13968  1F4A  1320               	bcf	_Load1^(0+384),6
 13969  1F4B  1D03               	skipz
 13970  1F4C  1720               	bsf	_Load1^(0+384),6
 13971                           
 13972                           ;OverLoad_B1.c: 271: if (lights == 1) {
 13973  1F4D  0020               	movlb	0	; select bank0
 13974  1F4E  0821               	movf	setLoad_StatusOn@lights,w
 13975  1F4F  3A01               	xorlw	1
 13976  1F50  1D03               	skipz
 13977  1F51  2F55               	goto	l6386
 13978                           
 13979                           ;OverLoad_B1.c: 272: Load1.Lights1Status = 1;
 13980  1F52  0023               	movlb	3	; select bank3
 13981  1F53  01E3               	clrf	(_Load1^(0+384)+67)
 13982  1F54  0AE3               	incf	(_Load1^(0+384)+67),f
 13983  1F55                     l6386:	
 13984                           
 13985                           ;OverLoad_B1.c: 273: }
 13986                           ;OverLoad_B1.c: 274: if (lights == 2) {
 13987  1F55  0020               	movlb	0	; select bank0
 13988  1F56  0821               	movf	setLoad_StatusOn@lights,w
 13989  1F57  3A02               	xorlw	2
 13990  1F58  1D03               	skipz
 13991  1F59  2F5D               	goto	l6390
 13992                           
 13993                           ;OverLoad_B1.c: 275: Load1.Lights2Status = 1;
 13994  1F5A  0023               	movlb	3	; select bank3
 13995  1F5B  01E4               	clrf	(_Load1^(0+384)+68)
 13996  1F5C  0AE4               	incf	(_Load1^(0+384)+68),f
 13997  1F5D                     l6390:	
 13998                           
 13999                           ;OverLoad_B1.c: 276: }
 14000                           ;OverLoad_B1.c: 277: if (lights == 3) {
 14001  1F5D  0020               	movlb	0	; select bank0
 14002  1F5E  0821               	movf	setLoad_StatusOn@lights,w
 14003  1F5F  3A03               	xorlw	3
 14004  1F60  1D03               	skipz
 14005  1F61  0008               	return
 14006                           
 14007                           ;OverLoad_B1.c: 278: Load1.Lights3Status = 1;
 14008  1F62  0023               	movlb	3	; select bank3
 14009  1F63  01E5               	clrf	(_Load1^(0+384)+69)
 14010  1F64  0AE5               	incf	(_Load1^(0+384)+69),f
 14011  1F65  0008               	return
 14012  1F66                     __end_of_setLoad_StatusOn:	
 14013                           
 14014                           	psect	text87
 14015  1B3F                     __ptext87:	
 14016 ;; *************** function _setLoad_Count *****************
 14017 ;; Defined at:
 14018 ;;		line 252 in file "../src/OverLoad_B1.c"
 14019 ;; Parameters:    Size  Location     Type
 14020 ;;  command         1    wreg     unsigned char 
 14021 ;; Auto vars:     Size  Location     Type
 14022 ;;  command         1    1[BANK0 ] unsigned char 
 14023 ;; Return value:  Size  Location     Type
 14024 ;;		None               void
 14025 ;; Registers used:
 14026 ;;		wreg
 14027 ;; Tracked objects:
 14028 ;;		On entry : 0/0
 14029 ;;		On exit  : 0/0
 14030 ;;		Unchanged: 0/0
 14031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14034 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14035 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14036 ;;Total ram usage:        2 bytes
 14037 ;; Hardware stack levels used:    1
 14038 ;; Hardware stack levels required when called:    5
 14039 ;; This function calls:
 14040 ;;		Nothing
 14041 ;; This function is called by:
 14042 ;;		_setDimmerLights
 14043 ;; This function uses a non-reentrant model
 14044 ;;
 14045                           
 14046                           
 14047                           ;psect for function _setLoad_Count
 14048  1B3F                     _setLoad_Count:	
 14049                           
 14050                           ;incstack = 0
 14051                           ; Regs used in _setLoad_Count: [wreg]
 14052                           ;setLoad_Count@command stored from wreg
 14053  1B3F  0020               	movlb	0	; select bank0
 14054  1B40  00A1               	movwf	setLoad_Count@command
 14055                           
 14056                           ;OverLoad_B1.c: 253: Load1.Count = command;
 14057  1B41  0821               	movf	setLoad_Count@command,w
 14058  1B42  00A0               	movwf	??_setLoad_Count
 14059  1B43  0820               	movf	??_setLoad_Count,w
 14060  1B44  0023               	movlb	3	; select bank3
 14061  1B45  00DA               	movwf	(_Load1^(0+384)+58)
 14062                           
 14063                           ;OverLoad_B1.c: 254: Load1.SafeCount = command;
 14064  1B46  0020               	movlb	0	; select bank0
 14065  1B47  0821               	movf	setLoad_Count@command,w
 14066  1B48  00A0               	movwf	??_setLoad_Count
 14067  1B49  0820               	movf	??_setLoad_Count,w
 14068  1B4A  0023               	movlb	3	; select bank3
 14069  1B4B  00E2               	movwf	(_Load1^(0+384)+66)
 14070  1B4C  0008               	return
 14071  1B4D                     __end_of_setLoad_Count:	
 14072                           
 14073                           	psect	text88
 14074  179E                     __ptext88:	
 14075 ;; *************** function _setLED *****************
 14076 ;; Defined at:
 14077 ;;		line 70 in file "../src/LED_B1.c"
 14078 ;; Parameters:    Size  Location     Type
 14079 ;;  led             1    wreg     unsigned char 
 14080 ;;  command         1    1[BANK0 ] unsigned char 
 14081 ;; Auto vars:     Size  Location     Type
 14082 ;;  led             1    2[BANK0 ] unsigned char 
 14083 ;; Return value:  Size  Location     Type
 14084 ;;		None               void
 14085 ;; Registers used:
 14086 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14087 ;; Tracked objects:
 14088 ;;		On entry : 0/0
 14089 ;;		On exit  : 0/0
 14090 ;;		Unchanged: 0/0
 14091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14092 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;Total ram usage:        2 bytes
 14097 ;; Hardware stack levels used:    1
 14098 ;; Hardware stack levels required when called:    6
 14099 ;; This function calls:
 14100 ;;		_LedPointSelect
 14101 ;; This function is called by:
 14102 ;;		_setDimmerLights_ERROR
 14103 ;;		_setDimmerLights
 14104 ;;		_setLED_Initialization
 14105 ;;		_setLoad_Exceptions
 14106 ;;		_setOverTemp_Exceptions
 14107 ;;		_setSw_Initialization
 14108 ;; This function uses a non-reentrant model
 14109 ;;
 14110                           
 14111                           
 14112                           ;psect for function _setLED
 14113  179E                     _setLED:	
 14114                           
 14115                           ;incstack = 0
 14116                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14117                           ;setLED@led stored from wreg
 14118  179E  0020               	movlb	0	; select bank0
 14119  179F  00A2               	movwf	setLED@led
 14120                           
 14121                           ;LED_B1.c: 71: LedPointSelect(led);
 14122  17A0  0822               	movf	setLED@led,w
 14123  17A1  319E  26FF  3197   	fcall	_LedPointSelect
 14124                           
 14125                           ;LED_B1.c: 72: if (command == 0) {
 14126  17A4  0020               	movlb	0	; select bank0
 14127  17A5  08A1               	movf	setLED@command,f
 14128  17A6  1D03               	skipz
 14129  17A7  2FBA               	goto	l8880
 14130                           
 14131                           ;LED_B1.c: 74: if (led == 1) {
 14132  17A8  0822               	movf	setLED@led,w
 14133  17A9  3A01               	xorlw	1
 14134  17AA  1D03               	skipz
 14135  17AB  2FAE               	goto	l8872
 14136                           
 14137                           ;LED_B1.c: 78: RA3 = 1;
 14138  17AC  158C               	bsf	12,3	;volatile
 14139                           
 14140                           ;LED_B1.c: 80: }
 14141  17AD  0008               	return
 14142  17AE                     l8872:	
 14143                           
 14144                           ;LED_B1.c: 83: else if (led == 2) {
 14145  17AE  0822               	movf	setLED@led,w
 14146  17AF  3A02               	xorlw	2
 14147  17B0  1D03               	skipz
 14148  17B1  2FB4               	goto	l8876
 14149                           
 14150                           ;LED_B1.c: 87: RC7 = 1;
 14151  17B2  178E               	bsf	14,7	;volatile
 14152                           
 14153                           ;LED_B1.c: 89: }
 14154  17B3  0008               	return
 14155  17B4                     l8876:	
 14156                           
 14157                           ;LED_B1.c: 101: else if (led == 99) {
 14158  17B4  0822               	movf	setLED@led,w
 14159  17B5  3A63               	xorlw	99
 14160  17B6  1D03               	skipz
 14161  17B7  0008               	return
 14162                           
 14163                           ;LED_B1.c: 105: RB5 = 1;
 14164  17B8  168D               	bsf	13,5	;volatile
 14165                           
 14166                           ;LED_B1.c: 107: }
 14167                           ;LED_B1.c: 109: } else if (command == 1) {
 14168  17B9  0008               	return
 14169  17BA                     l8880:	
 14170  17BA  0821               	movf	setLED@command,w
 14171  17BB  3A01               	xorlw	1
 14172  17BC  1D03               	skipz
 14173  17BD  2FD0               	goto	l8894
 14174                           
 14175                           ;LED_B1.c: 111: if (led == 1) {
 14176  17BE  0822               	movf	setLED@led,w
 14177  17BF  3A01               	xorlw	1
 14178  17C0  1D03               	skipz
 14179  17C1  2FC4               	goto	l8886
 14180                           
 14181                           ;LED_B1.c: 115: RA3 = 0;
 14182  17C2  118C               	bcf	12,3	;volatile
 14183                           
 14184                           ;LED_B1.c: 117: }
 14185  17C3  0008               	return
 14186  17C4                     l8886:	
 14187                           
 14188                           ;LED_B1.c: 120: else if (led == 2) {
 14189  17C4  0822               	movf	setLED@led,w
 14190  17C5  3A02               	xorlw	2
 14191  17C6  1D03               	skipz
 14192  17C7  2FCA               	goto	l8890
 14193                           
 14194                           ;LED_B1.c: 124: RC7 = 0;
 14195  17C8  138E               	bcf	14,7	;volatile
 14196                           
 14197                           ;LED_B1.c: 126: }
 14198  17C9  0008               	return
 14199  17CA                     l8890:	
 14200                           
 14201                           ;LED_B1.c: 138: else if (led == 99) {
 14202  17CA  0822               	movf	setLED@led,w
 14203  17CB  3A63               	xorlw	99
 14204  17CC  1D03               	skipz
 14205  17CD  0008               	return
 14206                           
 14207                           ;LED_B1.c: 142: RB5 = 0;
 14208  17CE  128D               	bcf	13,5	;volatile
 14209                           
 14210                           ;LED_B1.c: 144: }
 14211                           ;LED_B1.c: 146: } else if (command == 10) {
 14212  17CF  0008               	return
 14213  17D0                     l8894:	
 14214  17D0  0821               	movf	setLED@command,w
 14215  17D1  3A0A               	xorlw	10
 14216  17D2  1D03               	skipz
 14217  17D3  2FF5               	goto	l8910
 14218                           
 14219                           ;LED_B1.c: 147: LED->GO = 0;
 14220  17D4  0021               	movlb	1	; select bank1
 14221  17D5  0843               	movf	_LED^(0+128),w
 14222  17D6  0086               	movwf	6
 14223  17D7  0844               	movf	(_LED+1)^(0+128),w
 14224  17D8  0087               	movwf	7
 14225  17D9  1081               	bcf	1,1
 14226                           
 14227                           ;LED_B1.c: 148: LED->Time = 0;
 14228  17DA  0843               	movf	_LED^(0+128),w
 14229  17DB  0086               	movwf	6
 14230  17DC  0844               	movf	(_LED+1)^(0+128),w
 14231  17DD  0087               	movwf	7
 14232  17DE  3141               	addfsr 1,1
 14233  17DF  3000               	movlw	0
 14234  17E0  3FC0               	movwi [0]fsr1
 14235  17E1  3FC1               	movwi [1]fsr1
 14236                           
 14237                           ;LED_B1.c: 150: if (led == 1) {
 14238  17E2  0020               	movlb	0	; select bank0
 14239  17E3  0822               	movf	setLED@led,w
 14240  17E4  3A01               	xorlw	1
 14241  17E5  1D03               	skipz
 14242  17E6  2FE9               	goto	l8902
 14243                           
 14244                           ;LED_B1.c: 154: RA3 = 1;
 14245  17E7  158C               	bsf	12,3	;volatile
 14246                           
 14247                           ;LED_B1.c: 156: }
 14248  17E8  0008               	return
 14249  17E9                     l8902:	
 14250                           
 14251                           ;LED_B1.c: 159: else if (led == 2) {
 14252  17E9  0822               	movf	setLED@led,w
 14253  17EA  3A02               	xorlw	2
 14254  17EB  1D03               	skipz
 14255  17EC  2FEF               	goto	l8906
 14256                           
 14257                           ;LED_B1.c: 163: RC7 = 1;
 14258  17ED  178E               	bsf	14,7	;volatile
 14259                           
 14260                           ;LED_B1.c: 165: }
 14261  17EE  0008               	return
 14262  17EF                     l8906:	
 14263                           
 14264                           ;LED_B1.c: 177: else if (led == 99) {
 14265  17EF  0822               	movf	setLED@led,w
 14266  17F0  3A63               	xorlw	99
 14267  17F1  1D03               	skipz
 14268  17F2  0008               	return
 14269                           
 14270                           ;LED_B1.c: 181: RB5 = 1;
 14271  17F3  168D               	bsf	13,5	;volatile
 14272                           
 14273                           ;LED_B1.c: 183: }
 14274                           ;LED_B1.c: 185: } else if (command == 11) {
 14275  17F4  0008               	return
 14276  17F5                     l8910:	
 14277  17F5  0821               	movf	setLED@command,w
 14278  17F6  3A0B               	xorlw	11
 14279  17F7  1D03               	skipz
 14280  17F8  0008               	return
 14281                           
 14282                           ;LED_B1.c: 186: LED->GO = 1;
 14283  17F9  0021               	movlb	1	; select bank1
 14284  17FA  0843               	movf	_LED^(0+128),w
 14285  17FB  0086               	movwf	6
 14286  17FC  0844               	movf	(_LED+1)^(0+128),w
 14287  17FD  0087               	movwf	7
 14288  17FE  1481               	bsf	1,1
 14289  17FF  0008               	return
 14290  1800                     __end_of_setLED:	
 14291                           
 14292                           	psect	text89
 14293  1EFF                     __ptext89:	
 14294 ;; *************** function _LedPointSelect *****************
 14295 ;; Defined at:
 14296 ;;		line 7 in file "../src/LED_B1.c"
 14297 ;; Parameters:    Size  Location     Type
 14298 ;;  led             1    wreg     unsigned char 
 14299 ;; Auto vars:     Size  Location     Type
 14300 ;;  led             1    0[BANK0 ] unsigned char 
 14301 ;; Return value:  Size  Location     Type
 14302 ;;		None               void
 14303 ;; Registers used:
 14304 ;;		wreg, status,2, status,0
 14305 ;; Tracked objects:
 14306 ;;		On entry : 0/0
 14307 ;;		On exit  : 0/0
 14308 ;;		Unchanged: 0/0
 14309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14313 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14314 ;;Total ram usage:        1 bytes
 14315 ;; Hardware stack levels used:    1
 14316 ;; Hardware stack levels required when called:    5
 14317 ;; This function calls:
 14318 ;;		Nothing
 14319 ;; This function is called by:
 14320 ;;		_setLED_Initialization
 14321 ;;		_setLED
 14322 ;;		_setLED_Main
 14323 ;; This function uses a non-reentrant model
 14324 ;;
 14325                           
 14326                           
 14327                           ;psect for function _LedPointSelect
 14328  1EFF                     _LedPointSelect:	
 14329                           
 14330                           ;incstack = 0
 14331                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 14332                           ;LedPointSelect@led stored from wreg
 14333  1EFF  0020               	movlb	0	; select bank0
 14334  1F00  00A0               	movwf	LedPointSelect@led
 14335                           
 14336                           ;LED_B1.c: 9: if (led == 1) {
 14337  1F01  0820               	movf	LedPointSelect@led,w
 14338  1F02  3A01               	xorlw	1
 14339  1F03  1D03               	skipz
 14340  1F04  2F0B               	goto	l8666
 14341                           
 14342                           ;LED_B1.c: 10: LED = &VarLED1;
 14343  1F05  3065               	movlw	low _VarLED1
 14344  1F06  0021               	movlb	1	; select bank1
 14345  1F07  00C3               	movwf	_LED^(0+128)
 14346  1F08  3001               	movlw	high _VarLED1
 14347  1F09  00C4               	movwf	(_LED+1)^(0+128)
 14348                           
 14349                           ;LED_B1.c: 11: }
 14350  1F0A  0008               	return
 14351  1F0B                     l8666:	
 14352                           
 14353                           ;LED_B1.c: 14: else if (led == 2) {
 14354  1F0B  0020               	movlb	0	; select bank0
 14355  1F0C  0820               	movf	LedPointSelect@led,w
 14356  1F0D  3A02               	xorlw	2
 14357  1F0E  1D03               	skipz
 14358  1F0F  2F16               	goto	l8670
 14359                           
 14360                           ;LED_B1.c: 15: LED = &VarLED2;
 14361  1F10  3069               	movlw	low _VarLED2
 14362  1F11  0021               	movlb	1	; select bank1
 14363  1F12  00C3               	movwf	_LED^(0+128)
 14364  1F13  3001               	movlw	high _VarLED2
 14365  1F14  00C4               	movwf	(_LED+1)^(0+128)
 14366                           
 14367                           ;LED_B1.c: 16: }
 14368  1F15  0008               	return
 14369  1F16                     l8670:	
 14370                           
 14371                           ;LED_B1.c: 24: else if (led == 99) {
 14372  1F16  0020               	movlb	0	; select bank0
 14373  1F17  0820               	movf	LedPointSelect@led,w
 14374  1F18  3A63               	xorlw	99
 14375  1F19  1D03               	skipz
 14376  1F1A  0008               	return
 14377                           
 14378                           ;LED_B1.c: 25: LED = &VarErrLED;
 14379  1F1B  30E5               	movlw	low _VarErrLED
 14380  1F1C  0021               	movlb	1	; select bank1
 14381  1F1D  00C3               	movwf	_LED^(0+128)
 14382  1F1E  3000               	movlw	high _VarErrLED
 14383  1F1F  00C4               	movwf	(_LED+1)^(0+128)
 14384  1F20  0008               	return
 14385  1F21                     __end_of_LedPointSelect:	
 14386                           
 14387                           	psect	text90
 14388  1D5E                     __ptext90:	
 14389 ;; *************** function _DimmerLights_Close *****************
 14390 ;; Defined at:
 14391 ;;		line 396 in file "../src/Dimmer_B1.c"
 14392 ;; Parameters:    Size  Location     Type
 14393 ;;		None
 14394 ;; Auto vars:     Size  Location     Type
 14395 ;;		None
 14396 ;; Return value:  Size  Location     Type
 14397 ;;		None               void
 14398 ;; Registers used:
 14399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14400 ;; Tracked objects:
 14401 ;;		On entry : 0/0
 14402 ;;		On exit  : 0/0
 14403 ;;		Unchanged: 0/0
 14404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14409 ;;Total ram usage:        0 bytes
 14410 ;; Hardware stack levels used:    1
 14411 ;; Hardware stack levels required when called:    6
 14412 ;; This function calls:
 14413 ;;		_getDimmerLights_StatusFlag
 14414 ;;		_setLoad_GO
 14415 ;;		_setMemory_GO
 14416 ;; This function is called by:
 14417 ;;		_DimmerLights_Main
 14418 ;; This function uses a non-reentrant model
 14419 ;;
 14420                           
 14421                           
 14422                           ;psect for function _DimmerLights_Close
 14423  1D5E                     _DimmerLights_Close:	
 14424                           
 14425                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 14426                           
 14427                           ;incstack = 0
 14428                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14429  1D5E  0021               	movlb	1	; select bank1
 14430  1D5F  084C               	movf	_Dimmer^(0+128),w
 14431  1D60  0086               	movwf	6
 14432  1D61  0187               	clrf	7
 14433  1D62  1C01               	btfss	1,0
 14434  1D63  0008               	return
 14435                           
 14436                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 14437  1D64  084C               	movf	_Dimmer^(0+128),w
 14438  1D65  0086               	movwf	6
 14439  1D66  0187               	clrf	7
 14440  1D67  1001               	bcf	1,0
 14441                           
 14442                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 14443  1D68  319B  23F7  319D   	fcall	_getDimmerLights_StatusFlag
 14444  1D6B  3800               	iorlw	0
 14445  1D6C  1D03               	skipz
 14446  1D6D  0008               	return
 14447                           
 14448                           ;Dimmer_B1.c: 400: setLoad_GO(0);
 14449  1D6E  3000               	movlw	0
 14450  1D6F  319A  2281  319D   	fcall	_setLoad_GO
 14451                           
 14452                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 14453  1D72  3001               	movlw	1
 14454  1D73  319D  2503         	fcall	_setMemory_GO
 14455  1D75  0008               	return
 14456  1D76                     __end_of_DimmerLights_Close:	
 14457                           
 14458                           	psect	text91
 14459  1D03                     __ptext91:	
 14460 ;; *************** function _setMemory_GO *****************
 14461 ;; Defined at:
 14462 ;;		line 885 in file "../src/MCU_B1.c"
 14463 ;; Parameters:    Size  Location     Type
 14464 ;;  command         1    wreg     unsigned char 
 14465 ;; Auto vars:     Size  Location     Type
 14466 ;;  command         1    2[BANK0 ] unsigned char 
 14467 ;; Return value:  Size  Location     Type
 14468 ;;		None               void
 14469 ;; Registers used:
 14470 ;;		wreg, status,2, status,0
 14471 ;; Tracked objects:
 14472 ;;		On entry : 0/0
 14473 ;;		On exit  : 0/0
 14474 ;;		Unchanged: 0/0
 14475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14478 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14479 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14480 ;;Total ram usage:        3 bytes
 14481 ;; Hardware stack levels used:    1
 14482 ;; Hardware stack levels required when called:    5
 14483 ;; This function calls:
 14484 ;;		Nothing
 14485 ;; This function is called by:
 14486 ;;		_DimmerLights_Close
 14487 ;;		_setDimmerLights
 14488 ;; This function uses a non-reentrant model
 14489 ;;
 14490                           
 14491                           
 14492                           ;psect for function _setMemory_GO
 14493  1D03                     _setMemory_GO:	
 14494                           
 14495                           ;incstack = 0
 14496                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 14497                           ;setMemory_GO@command stored from wreg
 14498  1D03  0020               	movlb	0	; select bank0
 14499  1D04  00A2               	movwf	setMemory_GO@command
 14500                           
 14501                           ;MCU_B1.c: 886: Memory.GO = command;
 14502  1D05  0822               	movf	setMemory_GO@command,w
 14503  1D06  0024               	movlb	4	; select bank4
 14504  1D07  10C4               	bcf	(_Memory^(0+512)+36),1
 14505  1D08  1D03               	skipz
 14506  1D09  14C4               	bsf	(_Memory^(0+512)+36),1
 14507                           
 14508                           ;MCU_B1.c: 887: if (command == 0) {
 14509  1D0A  0020               	movlb	0	; select bank0
 14510  1D0B  08A2               	movf	setMemory_GO@command,f
 14511  1D0C  1D03               	skipz
 14512  1D0D  0008               	return
 14513                           
 14514                           ;MCU_B1.c: 888: Memory.Time = command;
 14515  1D0E  0822               	movf	setMemory_GO@command,w
 14516  1D0F  00A0               	movwf	??_setMemory_GO
 14517  1D10  01A1               	clrf	??_setMemory_GO+1
 14518  1D11  0820               	movf	??_setMemory_GO,w
 14519  1D12  0024               	movlb	4	; select bank4
 14520  1D13  00C2               	movwf	(_Memory^(0+512)+34)
 14521  1D14  0020               	movlb	0	; select bank0
 14522  1D15  0821               	movf	??_setMemory_GO+1,w
 14523  1D16  0024               	movlb	4	; select bank4
 14524  1D17  00C3               	movwf	((_Memory+1)^(0+512)+34)
 14525  1D18  0008               	return
 14526  1D19                     __end_of_setMemory_GO:	
 14527                           
 14528                           	psect	text92
 14529  1A81                     __ptext92:	
 14530 ;; *************** function _setLoad_GO *****************
 14531 ;; Defined at:
 14532 ;;		line 263 in file "../src/OverLoad_B1.c"
 14533 ;; Parameters:    Size  Location     Type
 14534 ;;  command         1    wreg     unsigned char 
 14535 ;; Auto vars:     Size  Location     Type
 14536 ;;  command         1    0[BANK0 ] unsigned char 
 14537 ;; Return value:  Size  Location     Type
 14538 ;;		None               void
 14539 ;; Registers used:
 14540 ;;		wreg
 14541 ;; Tracked objects:
 14542 ;;		On entry : 0/0
 14543 ;;		On exit  : 0/0
 14544 ;;		Unchanged: 0/0
 14545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14549 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14550 ;;Total ram usage:        1 bytes
 14551 ;; Hardware stack levels used:    1
 14552 ;; Hardware stack levels required when called:    5
 14553 ;; This function calls:
 14554 ;;		Nothing
 14555 ;; This function is called by:
 14556 ;;		_DimmerLights_Close
 14557 ;; This function uses a non-reentrant model
 14558 ;;
 14559                           
 14560                           
 14561                           ;psect for function _setLoad_GO
 14562  1A81                     _setLoad_GO:	
 14563                           
 14564                           ;incstack = 0
 14565                           ; Regs used in _setLoad_GO: [wreg]
 14566                           ;setLoad_GO@command stored from wreg
 14567  1A81  0020               	movlb	0	; select bank0
 14568  1A82  00A0               	movwf	setLoad_GO@command
 14569                           
 14570                           ;OverLoad_B1.c: 264: Load1.GO = command;
 14571  1A83  0820               	movf	setLoad_GO@command,w
 14572  1A84  0023               	movlb	3	; select bank3
 14573  1A85  10A0               	bcf	_Load1^(0+384),1
 14574  1A86  1D03               	skipz
 14575  1A87  14A0               	bsf	_Load1^(0+384),1
 14576  1A88  0008               	return
 14577  1A89                     __end_of_setLoad_GO:	
 14578                           
 14579                           	psect	text93
 14580  1BF7                     __ptext93:	
 14581 ;; *************** function _getDimmerLights_StatusFlag *****************
 14582 ;; Defined at:
 14583 ;;		line 475 in file "../src/Dimmer_B1.c"
 14584 ;; Parameters:    Size  Location     Type
 14585 ;;		None
 14586 ;; Auto vars:     Size  Location     Type
 14587 ;;  Status          1    1[BANK0 ] unsigned char 
 14588 ;; Return value:  Size  Location     Type
 14589 ;;                  1    wreg      unsigned char 
 14590 ;; Registers used:
 14591 ;;		wreg, status,2
 14592 ;; Tracked objects:
 14593 ;;		On entry : 0/0
 14594 ;;		On exit  : 0/0
 14595 ;;		Unchanged: 0/0
 14596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14598 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14600 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14601 ;;Total ram usage:        3 bytes
 14602 ;; Hardware stack levels used:    1
 14603 ;; Hardware stack levels required when called:    5
 14604 ;; This function calls:
 14605 ;;		Nothing
 14606 ;; This function is called by:
 14607 ;;		_DimmerLights_Close
 14608 ;;		_DimmerLights_Exceptions
 14609 ;; This function uses a non-reentrant model
 14610 ;;
 14611                           
 14612                           
 14613                           ;psect for function _getDimmerLights_StatusFlag
 14614  1BF7                     _getDimmerLights_StatusFlag:	
 14615                           
 14616                           ;Dimmer_B1.c: 476: char Status = 0;
 14617                           
 14618                           ;incstack = 0
 14619                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 14620  1BF7  0020               	movlb	0	; select bank0
 14621  1BF8  01A1               	clrf	getDimmerLights_StatusFlag@Status
 14622                           
 14623                           ;Dimmer_B1.c: 483: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 14624  1BF9  01A2               	clrf	_getDimmerLights_StatusFlag$2246
 14625  1BFA  0AA2               	incf	_getDimmerLights_StatusFlag$2246,f
 14626  1BFB  0022               	movlb	2	; select bank2
 14627  1BFC  1F3D               	btfss	_DimmerLights1^(0+256),6
 14628  1BFD  1B4C               	btfsc	_DimmerLights2^(0+256),6
 14629  1BFE  2C01               	goto	l6462
 14630  1BFF  0020               	movlb	0	; select bank0
 14631  1C00  01A2               	clrf	_getDimmerLights_StatusFlag$2246
 14632  1C01                     l6462:	
 14633  1C01  0020               	movlb	0	; select bank0
 14634  1C02  0822               	movf	_getDimmerLights_StatusFlag$2246,w
 14635  1C03  00A0               	movwf	??_getDimmerLights_StatusFlag
 14636  1C04  0820               	movf	??_getDimmerLights_StatusFlag,w
 14637  1C05  00A1               	movwf	getDimmerLights_StatusFlag@Status
 14638                           
 14639                           ;Dimmer_B1.c: 490: return Status;
 14640  1C06  0821               	movf	getDimmerLights_StatusFlag@Status,w
 14641  1C07  0008               	return
 14642  1C08                     __end_of_getDimmerLights_StatusFlag:	
 14643                           
 14644                           	psect	text94
 14645  1D30                     __ptext94:	
 14646 ;; *************** function _DimmerLights_Initialization *****************
 14647 ;; Defined at:
 14648 ;;		line 334 in file "../src/Dimmer_B1.c"
 14649 ;; Parameters:    Size  Location     Type
 14650 ;;		None
 14651 ;; Auto vars:     Size  Location     Type
 14652 ;;		None
 14653 ;; Return value:  Size  Location     Type
 14654 ;;		None               void
 14655 ;; Registers used:
 14656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14657 ;; Tracked objects:
 14658 ;;		On entry : 0/0
 14659 ;;		On exit  : 0/0
 14660 ;;		Unchanged: 0/0
 14661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14664 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14665 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;Total ram usage:        1 bytes
 14667 ;; Hardware stack levels used:    1
 14668 ;; Hardware stack levels required when called:    7
 14669 ;; This function calls:
 14670 ;;		_Dimmer_Initialization
 14671 ;;		_setDimmerLights_Initialization
 14672 ;; This function is called by:
 14673 ;;		_main
 14674 ;; This function uses a non-reentrant model
 14675 ;;
 14676                           
 14677                           
 14678                           ;psect for function _DimmerLights_Initialization
 14679  1D30                     _DimmerLights_Initialization:	
 14680                           
 14681                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 14682                           
 14683                           ;incstack = 0
 14684                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14685  1D30  303D               	movlw	_DimmerLights1& (0+255)
 14686  1D31  0020               	movlb	0	; select bank0
 14687  1D32  00A4               	movwf	??_DimmerLights_Initialization
 14688  1D33  0824               	movf	??_DimmerLights_Initialization,w
 14689  1D34  0021               	movlb	1	; select bank1
 14690  1D35  00CD               	movwf	_DimmerLights11^(0+128)
 14691                           
 14692                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 14693  1D36  3001               	movlw	1
 14694  1D37  3190  20D6  319D   	fcall	_setDimmerLights_Initialization
 14695                           
 14696                           ;Dimmer_B1.c: 342: DimmerLights22 = &DimmerLights2;
 14697  1D3A  304C               	movlw	_DimmerLights2& (0+255)
 14698  1D3B  0020               	movlb	0	; select bank0
 14699  1D3C  00A4               	movwf	??_DimmerLights_Initialization
 14700  1D3D  0824               	movf	??_DimmerLights_Initialization,w
 14701  1D3E  0021               	movlb	1	; select bank1
 14702  1D3F  00CE               	movwf	_DimmerLights22^(0+128)
 14703                           
 14704                           ;Dimmer_B1.c: 343: setDimmerLights_Initialization(2);
 14705  1D40  3002               	movlw	2
 14706  1D41  3190  20D6  319D   	fcall	_setDimmerLights_Initialization
 14707                           
 14708                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 14709  1D44  319A  2254         	fcall	_Dimmer_Initialization
 14710  1D46  0008               	return
 14711  1D47                     __end_of_DimmerLights_Initialization:	
 14712                           
 14713                           	psect	text95
 14714  10D6                     __ptext95:	
 14715 ;; *************** function _setDimmerLights_Initialization *****************
 14716 ;; Defined at:
 14717 ;;		line 357 in file "../src/Dimmer_B1.c"
 14718 ;; Parameters:    Size  Location     Type
 14719 ;;  lights          1    wreg     unsigned char 
 14720 ;; Auto vars:     Size  Location     Type
 14721 ;;  lights          1    3[BANK0 ] unsigned char 
 14722 ;; Return value:  Size  Location     Type
 14723 ;;		None               void
 14724 ;; Registers used:
 14725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14726 ;; Tracked objects:
 14727 ;;		On entry : 0/0
 14728 ;;		On exit  : 0/0
 14729 ;;		Unchanged: 0/0
 14730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14734 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14735 ;;Total ram usage:        2 bytes
 14736 ;; Hardware stack levels used:    1
 14737 ;; Hardware stack levels required when called:    6
 14738 ;; This function calls:
 14739 ;;		_DimmerLightsPointSelect
 14740 ;; This function is called by:
 14741 ;;		_DimmerLights_Initialization
 14742 ;; This function uses a non-reentrant model
 14743 ;;
 14744                           
 14745                           
 14746                           ;psect for function _setDimmerLights_Initialization
 14747  10D6                     _setDimmerLights_Initialization:	
 14748                           
 14749                           ;incstack = 0
 14750                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 14751                           ;setDimmerLights_Initialization@lights stored from wreg
 14752  10D6  0020               	movlb	0	; select bank0
 14753  10D7  00A3               	movwf	setDimmerLights_Initialization@lights
 14754                           
 14755                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 14756  10D8  0823               	movf	setDimmerLights_Initialization@lights,w
 14757  10D9  319C  2473         	fcall	_DimmerLightsPointSelect
 14758                           
 14759                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 14760  10DB  0879               	movf	_DimmerLights,w
 14761  10DC  3E09               	addlw	9
 14762  10DD  0086               	movwf	6
 14763  10DE  3001               	movlw	1	; select bank2/3
 14764  10DF  0087               	movwf	7
 14765  10E0  1501               	bsf	1,2
 14766                           
 14767                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 14768  10E1  3020               	movlw	32
 14769  10E2  0020               	movlb	0	; select bank0
 14770  10E3  00A2               	movwf	??_setDimmerLights_Initialization
 14771  10E4  0879               	movf	_DimmerLights,w
 14772  10E5  3E05               	addlw	5
 14773  10E6  0086               	movwf	6
 14774  10E7  3001               	movlw	1	; select bank2/3
 14775  10E8  0087               	movwf	7
 14776  10E9  0822               	movf	??_setDimmerLights_Initialization,w
 14777  10EA  0081               	movwf	1
 14778                           
 14779                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 14780  10EB  303C               	movlw	60
 14781  10EC  00A2               	movwf	??_setDimmerLights_Initialization
 14782  10ED  0879               	movf	_DimmerLights,w
 14783  10EE  3E06               	addlw	6
 14784  10EF  0086               	movwf	6
 14785  10F0  3001               	movlw	1	; select bank2/3
 14786  10F1  0087               	movwf	7
 14787  10F2  0822               	movf	??_setDimmerLights_Initialization,w
 14788  10F3  0081               	movwf	1
 14789                           
 14790                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14791  10F4  0879               	movf	_DimmerLights,w
 14792  10F5  3E06               	addlw	6
 14793  10F6  0086               	movwf	6
 14794  10F7  3001               	movlw	1	; select bank2/3
 14795  10F8  0087               	movwf	7
 14796  10F9  0801               	movf	1,w
 14797  10FA  00A2               	movwf	??_setDimmerLights_Initialization
 14798  10FB  0879               	movf	_DimmerLights,w
 14799  10FC  3E04               	addlw	4
 14800  10FD  0086               	movwf	6
 14801  10FE  3001               	movlw	1	; select bank2/3
 14802  10FF  0087               	movwf	7
 14803  1100  0822               	movf	??_setDimmerLights_Initialization,w
 14804  1101  0081               	movwf	1
 14805  1102  0008               	return
 14806  1103                     __end_of_setDimmerLights_Initialization:	
 14807                           
 14808                           	psect	text96
 14809  1A54                     __ptext96:	
 14810 ;; *************** function _Dimmer_Initialization *****************
 14811 ;; Defined at:
 14812 ;;		line 786 in file "../src/Dimmer_B1.c"
 14813 ;; Parameters:    Size  Location     Type
 14814 ;;		None
 14815 ;; Auto vars:     Size  Location     Type
 14816 ;;		None
 14817 ;; Return value:  Size  Location     Type
 14818 ;;		None               void
 14819 ;; Registers used:
 14820 ;;		wreg
 14821 ;; Tracked objects:
 14822 ;;		On entry : 0/0
 14823 ;;		On exit  : 0/0
 14824 ;;		Unchanged: 0/0
 14825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14829 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;Total ram usage:        1 bytes
 14831 ;; Hardware stack levels used:    1
 14832 ;; Hardware stack levels required when called:    5
 14833 ;; This function calls:
 14834 ;;		Nothing
 14835 ;; This function is called by:
 14836 ;;		_DimmerLights_Initialization
 14837 ;; This function uses a non-reentrant model
 14838 ;;
 14839                           
 14840                           
 14841                           ;psect for function _Dimmer_Initialization
 14842  1A54                     _Dimmer_Initialization:	
 14843                           
 14844                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 14845                           
 14846                           ;incstack = 0
 14847                           ; Regs used in _Dimmer_Initialization: [wreg]
 14848  1A54  30E9               	movlw	_Dimmer1& (0+255)
 14849  1A55  0020               	movlb	0	; select bank0
 14850  1A56  00A0               	movwf	??_Dimmer_Initialization
 14851  1A57  0820               	movf	??_Dimmer_Initialization,w
 14852  1A58  0021               	movlb	1	; select bank1
 14853  1A59  00CC               	movwf	_Dimmer^(0+128)
 14854  1A5A  0008               	return
 14855  1A5B                     __end_of_Dimmer_Initialization:	
 14856                           
 14857                           	psect	text97
 14858  1A79                     __ptext97:	
 14859 ;; *************** function _DelayOff_Main *****************
 14860 ;; Defined at:
 14861 ;;		line 41 in file "../src/DelayOff_B1.c"
 14862 ;; Parameters:    Size  Location     Type
 14863 ;;		None
 14864 ;; Auto vars:     Size  Location     Type
 14865 ;;		None
 14866 ;; Return value:  Size  Location     Type
 14867 ;;		None               void
 14868 ;; Registers used:
 14869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14870 ;; Tracked objects:
 14871 ;;		On entry : 0/0
 14872 ;;		On exit  : 0/0
 14873 ;;		Unchanged: 0/0
 14874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14879 ;;Total ram usage:        0 bytes
 14880 ;; Hardware stack levels used:    1
 14881 ;; Hardware stack levels required when called:   10
 14882 ;; This function calls:
 14883 ;;		_DlyOff_Main
 14884 ;; This function is called by:
 14885 ;;		_main
 14886 ;; This function uses a non-reentrant model
 14887 ;;
 14888                           
 14889                           
 14890                           ;psect for function _DelayOff_Main
 14891  1A79                     _DelayOff_Main:	
 14892                           
 14893                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 14894                           
 14895                           ;incstack = 0
 14896                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14897  1A79  3001               	movlw	1
 14898  1A7A  318B  2389  319A   	fcall	_DlyOff_Main
 14899                           
 14900                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 14901  1A7D  3002               	movlw	2
 14902  1A7E  318B  2389         	fcall	_DlyOff_Main
 14903  1A80  0008               	return
 14904  1A81                     __end_of_DelayOff_Main:	
 14905                           
 14906                           	psect	text98
 14907  0B89                     __ptext98:	
 14908 ;; *************** function _DlyOff_Main *****************
 14909 ;; Defined at:
 14910 ;;		line 62 in file "../src/DelayOff_B1.c"
 14911 ;; Parameters:    Size  Location     Type
 14912 ;;  sw              1    wreg     unsigned char 
 14913 ;; Auto vars:     Size  Location     Type
 14914 ;;  sw              1   68[BANK0 ] unsigned char 
 14915 ;; Return value:  Size  Location     Type
 14916 ;;		None               void
 14917 ;; Registers used:
 14918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14919 ;; Tracked objects:
 14920 ;;		On entry : 0/0
 14921 ;;		On exit  : 0/0
 14922 ;;		Unchanged: 0/0
 14923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14926 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14927 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14928 ;;Total ram usage:        3 bytes
 14929 ;; Hardware stack levels used:    1
 14930 ;; Hardware stack levels required when called:    9
 14931 ;; This function calls:
 14932 ;;		_DelayOffPointSelect
 14933 ;;		_setBuz
 14934 ;;		_setDimmerLights_Switch
 14935 ;;		_setDimmerLights_Trigger
 14936 ;;		_setRFSW_Status
 14937 ;;		_setRF_DimmerLights
 14938 ;;		_setSw_Status
 14939 ;;		_setTxData
 14940 ;; This function is called by:
 14941 ;;		_DelayOff_Main
 14942 ;; This function uses a non-reentrant model
 14943 ;;
 14944                           
 14945                           
 14946                           ;psect for function _DlyOff_Main
 14947  0B89                     _DlyOff_Main:	
 14948                           
 14949                           ;incstack = 0
 14950                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14951                           ;DlyOff_Main@sw stored from wreg
 14952  0B89  0020               	movlb	0	; select bank0
 14953  0B8A  00E4               	movwf	DlyOff_Main@sw
 14954                           
 14955                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 14956  0B8B  0864               	movf	DlyOff_Main@sw,w
 14957  0B8C  319C  24AE  318B   	fcall	_DelayOffPointSelect
 14958                           
 14959                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 14960  0B8F  0878               	movf	_DelayOff,w
 14961  0B90  0086               	movwf	6
 14962  0B91  3001               	movlw	1	; select bank2/3
 14963  0B92  0087               	movwf	7
 14964  0B93  1C81               	btfss	1,1
 14965  0B94  0008               	return
 14966                           
 14967                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 14968  0B95  0878               	movf	_DelayOff,w
 14969  0B96  3E02               	addlw	2
 14970  0B97  0086               	movwf	6
 14971  0B98  3001               	movlw	1	; select bank2/3
 14972  0B99  0087               	movwf	7
 14973  0B9A  3001               	movlw	1
 14974  0B9B  0781               	addwf	1,f
 14975  0B9C  3141               	addfsr 1,1
 14976  0B9D  1803               	skipnc
 14977  0B9E  0A81               	incf	1,f
 14978                           
 14979                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 14980  0B9F  0878               	movf	_DelayOff,w
 14981  0BA0  3E02               	addlw	2
 14982  0BA1  0086               	movwf	6
 14983  0BA2  3001               	movlw	1	; select bank2/3
 14984  0BA3  0087               	movwf	7
 14985  0BA4  3F40               	moviw [0]fsr1
 14986  0BA5  0020               	movlb	0	; select bank0
 14987  0BA6  00E2               	movwf	??_DlyOff_Main
 14988  0BA7  3F41               	moviw [1]fsr1
 14989  0BA8  00E3               	movwf	??_DlyOff_Main+1
 14990  0BA9  3016               	movlw	22
 14991  0BAA  0263               	subwf	??_DlyOff_Main+1,w
 14992  0BAB  3012               	movlw	18
 14993  0BAC  1903               	skipnz
 14994  0BAD  0262               	subwf	??_DlyOff_Main,w
 14995  0BAE  1C03               	skipc
 14996  0BAF  0008               	return
 14997                           
 14998                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 14999  0BB0  0878               	movf	_DelayOff,w
 15000  0BB1  3E02               	addlw	2
 15001  0BB2  0086               	movwf	6
 15002  0BB3  3001               	movlw	1	; select bank2/3
 15003  0BB4  0087               	movwf	7
 15004  0BB5  3000               	movlw	0
 15005  0BB6  3FC0               	movwi [0]fsr1
 15006  0BB7  3FC1               	movwi [1]fsr1
 15007                           
 15008                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15009  0BB8  3001               	movlw	1
 15010  0BB9  00E2               	movwf	??_DlyOff_Main
 15011  0BBA  0878               	movf	_DelayOff,w
 15012  0BBB  3E04               	addlw	4
 15013  0BBC  0086               	movwf	6
 15014  0BBD  3001               	movlw	1	; select bank2/3
 15015  0BBE  0087               	movwf	7
 15016  0BBF  0862               	movf	??_DlyOff_Main,w
 15017  0BC0  0781               	addwf	1,f
 15018                           
 15019                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15020  0BC1  0878               	movf	_DelayOff,w
 15021  0BC2  3E04               	addlw	4
 15022  0BC3  0086               	movwf	6
 15023  0BC4  3001               	movlw	1	; select bank2/3
 15024  0BC5  0087               	movwf	7
 15025  0BC6  0A78               	incf	_DelayOff,w
 15026  0BC7  0084               	movwf	4
 15027  0BC8  3001               	movlw	1	; select bank2/3
 15028  0BC9  0085               	movwf	5
 15029  0BCA  0800               	movf	0,w
 15030  0BCB  0201               	subwf	1,w
 15031  0BCC  1C03               	skipc
 15032  0BCD  0008               	return
 15033                           
 15034                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15035  0BCE  0878               	movf	_DelayOff,w
 15036  0BCF  3E04               	addlw	4
 15037  0BD0  0086               	movwf	6
 15038  0BD1  3001               	movlw	1	; select bank2/3
 15039  0BD2  0087               	movwf	7
 15040  0BD3  0181               	clrf	1
 15041                           
 15042                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15043  0BD4  0878               	movf	_DelayOff,w
 15044  0BD5  0086               	movwf	6
 15045  0BD6  3001               	movlw	1	; select bank2/3
 15046  0BD7  0087               	movwf	7
 15047  0BD8  1081               	bcf	1,1
 15048                           
 15049                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 15050  0BD9  01A1               	clrf	setSw_Status@command
 15051  0BDA  0864               	movf	DlyOff_Main@sw,w
 15052  0BDB  319B  23B7  318B   	fcall	_setSw_Status
 15053                           
 15054                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 15055  0BDE  0020               	movlb	0	; select bank0
 15056  0BDF  01A2               	clrf	setRFSW_Status@command
 15057  0BE0  0864               	movf	DlyOff_Main@sw,w
 15058  0BE1  319B  235B  318B   	fcall	_setRFSW_Status
 15059                           
 15060                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 15061  0BE4  0020               	movlb	0	; select bank0
 15062  0BE5  01DD               	clrf	setRF_DimmerLights@on
 15063  0BE6  0864               	movf	DlyOff_Main@sw,w
 15064  0BE7  3188  20D7  318B   	fcall	_setRF_DimmerLights
 15065                           
 15066                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 15067  0BEA  0020               	movlb	0	; select bank0
 15068  0BEB  01A2               	clrf	setDimmerLights_Trigger@command
 15069  0BEC  0AA2               	incf	setDimmerLights_Trigger@command,f
 15070  0BED  0864               	movf	DlyOff_Main@sw,w
 15071  0BEE  319B  23A7  318B   	fcall	_setDimmerLights_Trigger
 15072                           
 15073                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 15074  0BF1  0020               	movlb	0	; select bank0
 15075  0BF2  01A2               	clrf	setDimmerLights_Switch@command
 15076  0BF3  0864               	movf	DlyOff_Main@sw,w
 15077  0BF4  319B  2397  318B   	fcall	_setDimmerLights_Switch
 15078                           
 15079                           ;DelayOff_B1.c: 78: setTxData();
 15080  0BF7  3186  26A2  318B   	fcall	_setTxData
 15081                           
 15082                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 15083  0BFA  3064               	movlw	100
 15084  0BFB  0020               	movlb	0	; select bank0
 15085  0BFC  00A9               	movwf	setBuz@time
 15086  0BFD  3000               	movlw	0
 15087  0BFE  00AA               	movwf	setBuz@time+1
 15088  0BFF  3001               	movlw	1
 15089  0C00  3196  2689         	fcall	_setBuz
 15090  0C02  0008               	return
 15091  0C03                     __end_of_DlyOff_Main:	
 15092                           
 15093                           	psect	text99
 15094  06A2                     __ptext99:	
 15095 ;; *************** function _setTxData *****************
 15096 ;; Defined at:
 15097 ;;		line 138 in file "../src/RF_Control_B1.c"
 15098 ;; Parameters:    Size  Location     Type
 15099 ;;		None
 15100 ;; Auto vars:     Size  Location     Type
 15101 ;;  i               1    0        unsigned char 
 15102 ;; Return value:  Size  Location     Type
 15103 ;;		None               void
 15104 ;; Registers used:
 15105 ;;		wreg, fsr1l, fsr1h
 15106 ;; Tracked objects:
 15107 ;;		On entry : 0/0
 15108 ;;		On exit  : 0/0
 15109 ;;		Unchanged: 0/0
 15110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15113 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15114 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15115 ;;Total ram usage:        1 bytes
 15116 ;; Hardware stack levels used:    1
 15117 ;; Hardware stack levels required when called:    5
 15118 ;; This function calls:
 15119 ;;		Nothing
 15120 ;; This function is called by:
 15121 ;;		_DlyOff_Main
 15122 ;;		_setDimmerLights_Adj
 15123 ;;		_setControl_Lights_Table
 15124 ;;		_setRFSW_Control
 15125 ;;		_setRFSW_AdjControl
 15126 ;;		_Sw_DimmerOnFunc
 15127 ;;		_Sw_DimmerOffFunc
 15128 ;; This function uses a non-reentrant model
 15129 ;;
 15130                           
 15131                           
 15132                           ;psect for function _setTxData
 15133  06A2                     _setTxData:	
 15134                           
 15135                           ;RF_Control_B1.c: 139: char i;
 15136                           ;RF_Control_B1.c: 140: if (RF1.Enable == 1) {
 15137                           
 15138                           ;incstack = 0
 15139                           ; Regs used in _setTxData: [wregfsr1]
 15140  06A2  0021               	movlb	1	; select bank1
 15141  06A3  1C3E               	btfss	_RF1^(0+128),0
 15142  06A4  0008               	return
 15143                           
 15144                           ;RF_Control_B1.c: 142: RF1.TransceiveGO = 1;
 15145  06A5  153E               	bsf	_RF1^(0+128),2
 15146                           
 15147                           ;RF_Control_B1.c: 152: RF_Data[0] = 0x63;
 15148  06A6  3063               	movlw	99
 15149  06A7  0020               	movlb	0	; select bank0
 15150  06A8  00A0               	movwf	??_setTxData
 15151  06A9  0820               	movf	??_setTxData,w
 15152  06AA  0022               	movlb	2	; select bank2
 15153  06AB  00A0               	movwf	_RF_Data^(0+256)
 15154                           
 15155                           ;RF_Control_B1.c: 153: RF_Data[1] = 0x02;
 15156  06AC  3002               	movlw	2
 15157  06AD  0020               	movlb	0	; select bank0
 15158  06AE  00A0               	movwf	??_setTxData
 15159  06AF  0820               	movf	??_setTxData,w
 15160  06B0  0022               	movlb	2	; select bank2
 15161  06B1  00A1               	movwf	(_RF_Data^(0+256)+1)
 15162                           
 15163                           ;RF_Control_B1.c: 154: RF_Data[2] = product->Data[2];
 15164  06B2  0020               	movlb	0	; select bank0
 15165  06B3  086E               	movf	_product,w
 15166  06B4  0086               	movwf	6
 15167  06B5  3002               	movlw	2	; select bank4/5
 15168  06B6  0087               	movwf	7
 15169  06B7  3002               	movlw	2	; select bank4/5
 15170  06B8  3F42               	moviw [2]fsr1
 15171  06B9  0022               	movlb	2	; select bank2
 15172  06BA  00A2               	movwf	(_RF_Data^(0+256)+2)
 15173                           
 15174                           ;RF_Control_B1.c: 155: RF_Data[3] = product->Data[3];
 15175  06BB  0020               	movlb	0	; select bank0
 15176  06BC  086E               	movf	_product,w
 15177  06BD  0086               	movwf	6
 15178  06BE  3002               	movlw	2	; select bank4/5
 15179  06BF  0087               	movwf	7
 15180  06C0  3002               	movlw	2	; select bank4/5
 15181  06C1  3F43               	moviw [3]fsr1
 15182  06C2  0022               	movlb	2	; select bank2
 15183  06C3  00A3               	movwf	(_RF_Data^(0+256)+3)
 15184                           
 15185                           ;RF_Control_B1.c: 156: RF_Data[4] = product->Data[4];
 15186  06C4  0020               	movlb	0	; select bank0
 15187  06C5  086E               	movf	_product,w
 15188  06C6  0086               	movwf	6
 15189  06C7  3002               	movlw	2	; select bank4/5
 15190  06C8  0087               	movwf	7
 15191  06C9  3002               	movlw	2	; select bank4/5
 15192  06CA  3F44               	moviw [4]fsr1
 15193  06CB  0022               	movlb	2	; select bank2
 15194  06CC  00A4               	movwf	(_RF_Data^(0+256)+4)
 15195                           
 15196                           ;RF_Control_B1.c: 157: RF_Data[5] = product->Data[5];
 15197  06CD  0020               	movlb	0	; select bank0
 15198  06CE  086E               	movf	_product,w
 15199  06CF  0086               	movwf	6
 15200  06D0  3002               	movlw	2	; select bank4/5
 15201  06D1  0087               	movwf	7
 15202  06D2  3002               	movlw	2	; select bank4/5
 15203  06D3  3F45               	moviw [5]fsr1
 15204  06D4  0022               	movlb	2	; select bank2
 15205  06D5  00A5               	movwf	(_RF_Data^(0+256)+5)
 15206                           
 15207                           ;RF_Control_B1.c: 158: RF_Data[6] = product->Data[6];
 15208  06D6  0020               	movlb	0	; select bank0
 15209  06D7  086E               	movf	_product,w
 15210  06D8  0086               	movwf	6
 15211  06D9  3002               	movlw	2	; select bank4/5
 15212  06DA  0087               	movwf	7
 15213  06DB  3002               	movlw	2	; select bank4/5
 15214  06DC  3F46               	moviw [6]fsr1
 15215  06DD  0022               	movlb	2	; select bank2
 15216  06DE  00A6               	movwf	(_RF_Data^(0+256)+6)
 15217                           
 15218                           ;RF_Control_B1.c: 159: RF_Data[7] = product->Data[7];
 15219  06DF  0020               	movlb	0	; select bank0
 15220  06E0  086E               	movf	_product,w
 15221  06E1  0086               	movwf	6
 15222  06E2  3002               	movlw	2	; select bank4/5
 15223  06E3  0087               	movwf	7
 15224  06E4  3002               	movlw	2	; select bank4/5
 15225  06E5  3F47               	moviw [7]fsr1
 15226  06E6  0022               	movlb	2	; select bank2
 15227  06E7  00A7               	movwf	(_RF_Data^(0+256)+7)
 15228                           
 15229                           ;RF_Control_B1.c: 160: RF_Data[8] = product->Data[8];
 15230  06E8  0020               	movlb	0	; select bank0
 15231  06E9  086E               	movf	_product,w
 15232  06EA  0086               	movwf	6
 15233  06EB  3002               	movlw	2	; select bank4/5
 15234  06EC  0087               	movwf	7
 15235  06ED  3002               	movlw	2	; select bank4/5
 15236  06EE  3F48               	moviw [8]fsr1
 15237  06EF  0022               	movlb	2	; select bank2
 15238  06F0  00A8               	movwf	(_RF_Data^(0+256)+8)
 15239                           
 15240                           ;RF_Control_B1.c: 161: RF_Data[9] = product->Data[9];
 15241  06F1  0020               	movlb	0	; select bank0
 15242  06F2  086E               	movf	_product,w
 15243  06F3  0086               	movwf	6
 15244  06F4  3002               	movlw	2	; select bank4/5
 15245  06F5  0087               	movwf	7
 15246  06F6  3002               	movlw	2	; select bank4/5
 15247  06F7  3F49               	moviw [9]fsr1
 15248  06F8  0022               	movlb	2	; select bank2
 15249  06F9  00A9               	movwf	(_RF_Data^(0+256)+9)
 15250                           
 15251                           ;RF_Control_B1.c: 162: RF_Data[10] = product->Data[10];
 15252  06FA  0020               	movlb	0	; select bank0
 15253  06FB  086E               	movf	_product,w
 15254  06FC  0086               	movwf	6
 15255  06FD  3002               	movlw	2	; select bank4/5
 15256  06FE  0087               	movwf	7
 15257  06FF  3002               	movlw	2	; select bank4/5
 15258  0700  3F4A               	moviw [10]fsr1
 15259  0701  0022               	movlb	2	; select bank2
 15260  0702  00AA               	movwf	(_RF_Data^(0+256)+10)
 15261                           
 15262                           ;RF_Control_B1.c: 163: RF_Data[11] = product->Data[11];
 15263  0703  0020               	movlb	0	; select bank0
 15264  0704  086E               	movf	_product,w
 15265  0705  0086               	movwf	6
 15266  0706  3002               	movlw	2	; select bank4/5
 15267  0707  0087               	movwf	7
 15268  0708  3002               	movlw	2	; select bank4/5
 15269  0709  3F4B               	moviw [11]fsr1
 15270  070A  0022               	movlb	2	; select bank2
 15271  070B  00AB               	movwf	(_RF_Data^(0+256)+11)
 15272                           
 15273                           ;RF_Control_B1.c: 164: RF_Data[12] = product->Data[12];
 15274  070C  0020               	movlb	0	; select bank0
 15275  070D  086E               	movf	_product,w
 15276  070E  0086               	movwf	6
 15277  070F  3002               	movlw	2	; select bank4/5
 15278  0710  0087               	movwf	7
 15279  0711  3002               	movlw	2	; select bank4/5
 15280  0712  3F4C               	moviw [12]fsr1
 15281  0713  0022               	movlb	2	; select bank2
 15282  0714  00AC               	movwf	(_RF_Data^(0+256)+12)
 15283                           
 15284                           ;RF_Control_B1.c: 165: RF_Data[13] = product->Data[13];
 15285  0715  0020               	movlb	0	; select bank0
 15286  0716  086E               	movf	_product,w
 15287  0717  0086               	movwf	6
 15288  0718  3002               	movlw	2	; select bank4/5
 15289  0719  0087               	movwf	7
 15290  071A  3002               	movlw	2	; select bank4/5
 15291  071B  3F4D               	moviw [13]fsr1
 15292  071C  0022               	movlb	2	; select bank2
 15293  071D  00AD               	movwf	(_RF_Data^(0+256)+13)
 15294                           
 15295                           ;RF_Control_B1.c: 166: RF_Data[14] = product->Data[14];
 15296  071E  0020               	movlb	0	; select bank0
 15297  071F  086E               	movf	_product,w
 15298  0720  0086               	movwf	6
 15299  0721  3002               	movlw	2	; select bank4/5
 15300  0722  0087               	movwf	7
 15301  0723  3002               	movlw	2	; select bank4/5
 15302  0724  3F4E               	moviw [14]fsr1
 15303  0725  0022               	movlb	2	; select bank2
 15304  0726  00AE               	movwf	(_RF_Data^(0+256)+14)
 15305                           
 15306                           ;RF_Control_B1.c: 167: RF_Data[15] = product->Data[15];
 15307  0727  0020               	movlb	0	; select bank0
 15308  0728  086E               	movf	_product,w
 15309  0729  0086               	movwf	6
 15310  072A  3002               	movlw	2	; select bank4/5
 15311  072B  0087               	movwf	7
 15312  072C  3002               	movlw	2	; select bank4/5
 15313  072D  3F4F               	moviw [15]fsr1
 15314  072E  0022               	movlb	2	; select bank2
 15315  072F  00AF               	movwf	(_RF_Data^(0+256)+15)
 15316                           
 15317                           ;RF_Control_B1.c: 168: RF_Data[16] = product->Data[16];
 15318  0730  0020               	movlb	0	; select bank0
 15319  0731  086E               	movf	_product,w
 15320  0732  0086               	movwf	6
 15321  0733  3002               	movlw	2	; select bank4/5
 15322  0734  0087               	movwf	7
 15323  0735  3002               	movlw	2	; select bank4/5
 15324  0736  3F50               	moviw [16]fsr1
 15325  0737  0022               	movlb	2	; select bank2
 15326  0738  00B0               	movwf	(_RF_Data^(0+256)+16)
 15327                           
 15328                           ;RF_Control_B1.c: 169: RF_Data[17] = product->Data[17];
 15329  0739  0020               	movlb	0	; select bank0
 15330  073A  086E               	movf	_product,w
 15331  073B  0086               	movwf	6
 15332  073C  3002               	movlw	2	; select bank4/5
 15333  073D  0087               	movwf	7
 15334  073E  3002               	movlw	2	; select bank4/5
 15335  073F  3F51               	moviw [17]fsr1
 15336  0740  0022               	movlb	2	; select bank2
 15337  0741  00B1               	movwf	(_RF_Data^(0+256)+17)
 15338                           
 15339                           ;RF_Control_B1.c: 170: RF_Data[18] = product->Data[18];
 15340  0742  0020               	movlb	0	; select bank0
 15341  0743  086E               	movf	_product,w
 15342  0744  0086               	movwf	6
 15343  0745  3002               	movlw	2	; select bank4/5
 15344  0746  0087               	movwf	7
 15345  0747  3002               	movlw	2	; select bank4/5
 15346  0748  3F52               	moviw [18]fsr1
 15347  0749  0022               	movlb	2	; select bank2
 15348  074A  00B2               	movwf	(_RF_Data^(0+256)+18)
 15349                           
 15350                           ;RF_Control_B1.c: 171: RF_Data[19] = product->Data[19];
 15351  074B  0020               	movlb	0	; select bank0
 15352  074C  086E               	movf	_product,w
 15353  074D  0086               	movwf	6
 15354  074E  3002               	movlw	2	; select bank4/5
 15355  074F  0087               	movwf	7
 15356  0750  3002               	movlw	2	; select bank4/5
 15357  0751  3F53               	moviw [19]fsr1
 15358  0752  0022               	movlb	2	; select bank2
 15359  0753  00B3               	movwf	(_RF_Data^(0+256)+19)
 15360                           
 15361                           ;RF_Control_B1.c: 172: RF_Data[20] = 210;
 15362  0754  30D2               	movlw	210
 15363  0755  0020               	movlb	0	; select bank0
 15364  0756  00A0               	movwf	??_setTxData
 15365  0757  0820               	movf	??_setTxData,w
 15366  0758  0022               	movlb	2	; select bank2
 15367  0759  00B4               	movwf	(_RF_Data^(0+256)+20)
 15368  075A  0008               	return
 15369  075B                     __end_of_setTxData:	
 15370                           
 15371                           	psect	text100
 15372  1BB7                     __ptext100:	
 15373 ;; *************** function _setSw_Status *****************
 15374 ;; Defined at:
 15375 ;;		line 111 in file "../src/Switch_B1.c"
 15376 ;; Parameters:    Size  Location     Type
 15377 ;;  sw              1    wreg     unsigned char 
 15378 ;;  command         1    1[BANK0 ] unsigned char 
 15379 ;; Auto vars:     Size  Location     Type
 15380 ;;  sw              1    2[BANK0 ] unsigned char 
 15381 ;; Return value:  Size  Location     Type
 15382 ;;		None               void
 15383 ;; Registers used:
 15384 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15385 ;; Tracked objects:
 15386 ;;		On entry : 0/0
 15387 ;;		On exit  : 0/0
 15388 ;;		Unchanged: 0/0
 15389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15390 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;Total ram usage:        2 bytes
 15395 ;; Hardware stack levels used:    1
 15396 ;; Hardware stack levels required when called:    6
 15397 ;; This function calls:
 15398 ;;		_SwPointSelect
 15399 ;; This function is called by:
 15400 ;;		_DlyOff_Main
 15401 ;;		_setDimmerLights_ERROR
 15402 ;;		_setControl_Lights_Table
 15403 ;;		_setRFSW_Control
 15404 ;; This function uses a non-reentrant model
 15405 ;;
 15406                           
 15407                           
 15408                           ;psect for function _setSw_Status
 15409  1BB7                     _setSw_Status:	
 15410                           
 15411                           ;incstack = 0
 15412                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15413                           ;setSw_Status@sw stored from wreg
 15414  1BB7  0020               	movlb	0	; select bank0
 15415  1BB8  00A2               	movwf	setSw_Status@sw
 15416                           
 15417                           ;Switch_B1.c: 112: SwPointSelect(sw);
 15418  1BB9  0822               	movf	setSw_Status@sw,w
 15419  1BBA  319D  2519         	fcall	_SwPointSelect
 15420                           
 15421                           ;Switch_B1.c: 113: Sw->Status = command;
 15422  1BBC  0021               	movlb	1	; select bank1
 15423  1BBD  0847               	movf	_Sw^(0+128),w
 15424  1BBE  0086               	movwf	6
 15425  1BBF  0848               	movf	(_Sw+1)^(0+128),w
 15426  1BC0  0087               	movwf	7
 15427  1BC1  0020               	movlb	0	; select bank0
 15428  1BC2  0821               	movf	setSw_Status@command,w
 15429  1BC3  1301               	bcf	1,6
 15430  1BC4  1D03               	skipz
 15431  1BC5  1701               	bsf	1,6
 15432  1BC6  0008               	return
 15433  1BC7                     __end_of_setSw_Status:	
 15434                           
 15435                           	psect	text101
 15436  1D19                     __ptext101:	
 15437 ;; *************** function _SwPointSelect *****************
 15438 ;; Defined at:
 15439 ;;		line 21 in file "../src/Switch_B1.c"
 15440 ;; Parameters:    Size  Location     Type
 15441 ;;  sw              1    wreg     unsigned char 
 15442 ;; Auto vars:     Size  Location     Type
 15443 ;;  sw              1    0[BANK0 ] unsigned char 
 15444 ;; Return value:  Size  Location     Type
 15445 ;;		None               void
 15446 ;; Registers used:
 15447 ;;		wreg, status,2, status,0
 15448 ;; Tracked objects:
 15449 ;;		On entry : 0/0
 15450 ;;		On exit  : 0/0
 15451 ;;		Unchanged: 0/0
 15452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15456 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15457 ;;Total ram usage:        1 bytes
 15458 ;; Hardware stack levels used:    1
 15459 ;; Hardware stack levels required when called:    5
 15460 ;; This function calls:
 15461 ;;		Nothing
 15462 ;; This function is called by:
 15463 ;;		_setSw_Enable
 15464 ;;		_setSw_Status
 15465 ;;		_setSw_Main
 15466 ;;		_Sw_Detect
 15467 ;; This function uses a non-reentrant model
 15468 ;;
 15469                           
 15470                           
 15471                           ;psect for function _SwPointSelect
 15472  1D19                     _SwPointSelect:	
 15473                           
 15474                           ;incstack = 0
 15475                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
 15476                           ;SwPointSelect@sw stored from wreg
 15477  1D19  0020               	movlb	0	; select bank0
 15478  1D1A  00A0               	movwf	SwPointSelect@sw
 15479                           
 15480                           ;Switch_B1.c: 24: if (sw == 1) {
 15481  1D1B  0820               	movf	SwPointSelect@sw,w
 15482  1D1C  3A01               	xorlw	1
 15483  1D1D  1D03               	skipz
 15484  1D1E  2D25               	goto	l8684
 15485                           
 15486                           ;Switch_B1.c: 25: Sw = &Sw1;
 15487  1D1F  30E6               	movlw	low _Sw1
 15488  1D20  0021               	movlb	1	; select bank1
 15489  1D21  00C7               	movwf	_Sw^(0+128)
 15490  1D22  3001               	movlw	high _Sw1
 15491  1D23  00C8               	movwf	(_Sw+1)^(0+128)
 15492                           
 15493                           ;Switch_B1.c: 26: }
 15494  1D24  0008               	return
 15495  1D25                     l8684:	
 15496                           
 15497                           ;Switch_B1.c: 29: else if (sw == 2) {
 15498  1D25  0020               	movlb	0	; select bank0
 15499  1D26  0820               	movf	SwPointSelect@sw,w
 15500  1D27  3A02               	xorlw	2
 15501  1D28  1D03               	skipz
 15502  1D29  0008               	return
 15503                           
 15504                           ;Switch_B1.c: 30: Sw = &Sw2;
 15505  1D2A  3045               	movlw	low _Sw2
 15506  1D2B  0021               	movlb	1	; select bank1
 15507  1D2C  00C7               	movwf	_Sw^(0+128)
 15508  1D2D  3002               	movlw	high _Sw2
 15509  1D2E  00C8               	movwf	(_Sw+1)^(0+128)
 15510  1D2F  0008               	return
 15511  1D30                     __end_of_SwPointSelect:	
 15512                           
 15513                           	psect	text102
 15514  08D7                     __ptext102:	
 15515 ;; *************** function _setRF_DimmerLights *****************
 15516 ;; Defined at:
 15517 ;;		line 397 in file "../src/RF_Control_B1.c"
 15518 ;; Parameters:    Size  Location     Type
 15519 ;;  lights          1    wreg     unsigned char 
 15520 ;;  on              1   61[BANK0 ] unsigned char 
 15521 ;; Auto vars:     Size  Location     Type
 15522 ;;  lights          1   65[BANK0 ] unsigned char 
 15523 ;;  status          1   64[BANK0 ] unsigned char 
 15524 ;; Return value:  Size  Location     Type
 15525 ;;		None               void
 15526 ;; Registers used:
 15527 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15528 ;; Tracked objects:
 15529 ;;		On entry : 0/0
 15530 ;;		On exit  : 0/0
 15531 ;;		Unchanged: 0/0
 15532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15533 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15534 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15535 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15536 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15537 ;;Total ram usage:        5 bytes
 15538 ;; Hardware stack levels used:    1
 15539 ;; Hardware stack levels required when called:    8
 15540 ;; This function calls:
 15541 ;;		_setPercentValue
 15542 ;; This function is called by:
 15543 ;;		_DlyOff_Main
 15544 ;;		_setDimmerLights_Adj
 15545 ;;		_setRFSW_Control
 15546 ;;		_Sw_DimmerOnFunc
 15547 ;;		_Sw_DimmerOffFunc
 15548 ;; This function uses a non-reentrant model
 15549 ;;
 15550                           
 15551                           
 15552                           ;psect for function _setRF_DimmerLights
 15553  08D7                     _setRF_DimmerLights:	
 15554                           
 15555                           ;incstack = 0
 15556                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15557                           ;setRF_DimmerLights@lights stored from wreg
 15558  08D7  0020               	movlb	0	; select bank0
 15559  08D8  00E1               	movwf	setRF_DimmerLights@lights
 15560                           
 15561                           ;RF_Control_B1.c: 398: char status;
 15562                           ;RF_Control_B1.c: 399: status = 1;
 15563  08D9  01E0               	clrf	setRF_DimmerLights@status
 15564  08DA  0AE0               	incf	setRF_DimmerLights@status,f
 15565                           
 15566                           ;RF_Control_B1.c: 400: status <<= (lights - 1);
 15567  08DB  0861               	movf	setRF_DimmerLights@lights,w
 15568  08DC  3EFF               	addlw	-1
 15569  08DD  0A89               	incf	9,f
 15570  08DE  28E1               	goto	u9110
 15571  08DF                     u9115:	
 15572  08DF  1003               	clrc
 15573  08E0  0DE0               	rlf	setRF_DimmerLights@status,f
 15574  08E1                     u9110:	
 15575  08E1  3EFF               	addlw	-1
 15576  08E2  1D03               	skipz
 15577  08E3  28DF               	goto	u9115
 15578                           
 15579                           ;RF_Control_B1.c: 401: product->Data[11]=lights;
 15580  08E4  0861               	movf	setRF_DimmerLights@lights,w
 15581  08E5  00DE               	movwf	??_setRF_DimmerLights
 15582  08E6  086E               	movf	_product,w
 15583  08E7  3E0B               	addlw	11
 15584  08E8  0086               	movwf	6
 15585  08E9  3002               	movlw	2	; select bank4/5
 15586  08EA  0087               	movwf	7
 15587  08EB  085E               	movf	??_setRF_DimmerLights,w
 15588  08EC  0081               	movwf	1
 15589                           
 15590                           ;RF_Control_B1.c: 404: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 15591  08ED  3020               	movlw	32
 15592  08EE  3193  2383  3188   	fcall	_setPercentValue
 15593  08F1  0020               	movlb	0	; select bank0
 15594  08F2  00DE               	movwf	??_setRF_DimmerLights
 15595  08F3  0861               	movf	setRF_DimmerLights@lights,w
 15596  08F4  3E14               	addlw	20
 15597  08F5  076E               	addwf	_product,w
 15598  08F6  00DF               	movwf	??_setRF_DimmerLights+1
 15599  08F7  085F               	movf	??_setRF_DimmerLights+1,w
 15600  08F8  0086               	movwf	6
 15601  08F9  3002               	movlw	2	; select bank4/5
 15602  08FA  0087               	movwf	7
 15603  08FB  085E               	movf	??_setRF_DimmerLights,w
 15604  08FC  0081               	movwf	1
 15605                           
 15606                           ;RF_Control_B1.c: 407: product->Data[9]=product->Data[20 + lights];
 15607  08FD  0861               	movf	setRF_DimmerLights@lights,w
 15608  08FE  3E14               	addlw	20
 15609  08FF  076E               	addwf	_product,w
 15610  0900  00DE               	movwf	??_setRF_DimmerLights
 15611  0901  085E               	movf	??_setRF_DimmerLights,w
 15612  0902  0086               	movwf	6
 15613  0903  3002               	movlw	2	; select bank4/5
 15614  0904  0087               	movwf	7
 15615  0905  0801               	movf	1,w
 15616  0906  00DF               	movwf	??_setRF_DimmerLights+1
 15617  0907  086E               	movf	_product,w
 15618  0908  3E09               	addlw	9
 15619  0909  0086               	movwf	6
 15620  090A  3002               	movlw	2	; select bank4/5
 15621  090B  0087               	movwf	7
 15622  090C  085F               	movf	??_setRF_DimmerLights+1,w
 15623  090D  0081               	movwf	1
 15624                           
 15625                           ;RF_Control_B1.c: 408: product->Data[17]=product->Data[26 + lights];
 15626  090E  0861               	movf	setRF_DimmerLights@lights,w
 15627  090F  3E1A               	addlw	26
 15628  0910  076E               	addwf	_product,w
 15629  0911  00DE               	movwf	??_setRF_DimmerLights
 15630  0912  085E               	movf	??_setRF_DimmerLights,w
 15631  0913  0086               	movwf	6
 15632  0914  3002               	movlw	2	; select bank4/5
 15633  0915  0087               	movwf	7
 15634  0916  0801               	movf	1,w
 15635  0917  00DF               	movwf	??_setRF_DimmerLights+1
 15636  0918  086E               	movf	_product,w
 15637  0919  3E11               	addlw	17
 15638  091A  0086               	movwf	6
 15639  091B  3002               	movlw	2	; select bank4/5
 15640  091C  0087               	movwf	7
 15641  091D  085F               	movf	??_setRF_DimmerLights+1,w
 15642  091E  0081               	movwf	1
 15643                           
 15644                           ;RF_Control_B1.c: 409: if (on == 1) {
 15645  091F  085D               	movf	setRF_DimmerLights@on,w
 15646  0920  3A01               	xorlw	1
 15647  0921  1D03               	skipz
 15648  0922  2933               	goto	l8784
 15649                           
 15650                           ;RF_Control_B1.c: 410: product->Data[15]=(product->Data[15] | status);
 15651  0923  086E               	movf	_product,w
 15652  0924  3E0F               	addlw	15
 15653  0925  0086               	movwf	6
 15654  0926  3002               	movlw	2	; select bank4/5
 15655  0927  0087               	movwf	7
 15656  0928  0801               	movf	1,w
 15657  0929  0460               	iorwf	setRF_DimmerLights@status,w
 15658  092A  00DE               	movwf	??_setRF_DimmerLights
 15659  092B  086E               	movf	_product,w
 15660  092C  3E0F               	addlw	15
 15661  092D  0086               	movwf	6
 15662  092E  3002               	movlw	2	; select bank4/5
 15663  092F  0087               	movwf	7
 15664  0930  085E               	movf	??_setRF_DimmerLights,w
 15665  0931  0081               	movwf	1
 15666                           
 15667                           ;RF_Control_B1.c: 411: } else {
 15668  0932  0008               	return
 15669  0933                     l8784:	
 15670                           
 15671                           ;RF_Control_B1.c: 412: product->Data[15]=(product->Data[15]&(~status));
 15672  0933  086E               	movf	_product,w
 15673  0934  3E0F               	addlw	15
 15674  0935  0086               	movwf	6
 15675  0936  3002               	movlw	2	; select bank4/5
 15676  0937  0087               	movwf	7
 15677  0938  0960               	comf	setRF_DimmerLights@status,w
 15678  0939  0501               	andwf	1,w
 15679  093A  00DE               	movwf	??_setRF_DimmerLights
 15680  093B  086E               	movf	_product,w
 15681  093C  3E0F               	addlw	15
 15682  093D  0086               	movwf	6
 15683  093E  3002               	movlw	2	; select bank4/5
 15684  093F  0087               	movwf	7
 15685  0940  085E               	movf	??_setRF_DimmerLights,w
 15686  0941  0081               	movwf	1
 15687  0942  0008               	return
 15688  0943                     __end_of_setRF_DimmerLights:	
 15689                           
 15690                           	psect	text103
 15691  1383                     __ptext103:	
 15692 ;; *************** function _setPercentValue *****************
 15693 ;; Defined at:
 15694 ;;		line 768 in file "../src/Dimmer_B1.c"
 15695 ;; Parameters:    Size  Location     Type
 15696 ;;  value           1    wreg     unsigned char 
 15697 ;; Auto vars:     Size  Location     Type
 15698 ;;  value           1   57[BANK0 ] unsigned char 
 15699 ;;  i               3   58[BANK0 ] float 
 15700 ;; Return value:  Size  Location     Type
 15701 ;;                  1    wreg      unsigned char 
 15702 ;; Registers used:
 15703 ;;		wreg, status,2, status,0, pclath, cstack
 15704 ;; Tracked objects:
 15705 ;;		On entry : 0/0
 15706 ;;		On exit  : 0/0
 15707 ;;		Unchanged: 0/0
 15708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15710 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15712 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15713 ;;Total ram usage:        4 bytes
 15714 ;; Hardware stack levels used:    1
 15715 ;; Hardware stack levels required when called:    7
 15716 ;; This function calls:
 15717 ;;		___awtoft
 15718 ;;		___ftdiv
 15719 ;;		___fttol
 15720 ;; This function is called by:
 15721 ;;		_Flash_Memory_Initialization
 15722 ;;		_setRF_DimmerLights
 15723 ;; This function uses a non-reentrant model
 15724 ;;
 15725                           
 15726                           
 15727                           ;psect for function _setPercentValue
 15728  1383                     _setPercentValue:	
 15729                           
 15730                           ;incstack = 0
 15731                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 15732                           ;setPercentValue@value stored from wreg
 15733  1383  0020               	movlb	0	; select bank0
 15734  1384  00D9               	movwf	setPercentValue@value
 15735                           
 15736                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 15737  1385  3000               	movlw	0
 15738  1386  00DA               	movwf	setPercentValue@i
 15739  1387  30E0               	movlw	224
 15740  1388  00DB               	movwf	setPercentValue@i+1
 15741  1389  3041               	movlw	65
 15742  138A  00DC               	movwf	setPercentValue@i+2
 15743                           
 15744                           ;Dimmer_B1.c: 771: i /= 100;
 15745  138B  3000               	movlw	0
 15746  138C  00AE               	movwf	___ftdiv@f2
 15747  138D  30C8               	movlw	200
 15748  138E  00AF               	movwf	___ftdiv@f2+1
 15749  138F  3042               	movlw	66
 15750  1390  00B0               	movwf	___ftdiv@f2+2
 15751  1391  085A               	movf	setPercentValue@i,w
 15752  1392  00B1               	movwf	___ftdiv@f1
 15753  1393  085B               	movf	setPercentValue@i+1,w
 15754  1394  00B2               	movwf	___ftdiv@f1+1
 15755  1395  085C               	movf	setPercentValue@i+2,w
 15756  1396  00B3               	movwf	___ftdiv@f1+2
 15757  1397  318E  26A3  3193   	fcall	___ftdiv
 15758  139A  0020               	movlb	0	; select bank0
 15759  139B  082E               	movf	?___ftdiv,w
 15760  139C  00DA               	movwf	setPercentValue@i
 15761  139D  082F               	movf	?___ftdiv+1,w
 15762  139E  00DB               	movwf	setPercentValue@i+1
 15763  139F  0830               	movf	?___ftdiv+2,w
 15764  13A0  00DC               	movwf	setPercentValue@i+2
 15765                           
 15766                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 15767  13A1  0859               	movf	setPercentValue@value,w
 15768  13A2  3EE0               	addlw	224
 15769  13A3  00A8               	movwf	___awtoft@c
 15770  13A4  30FF               	movlw	255
 15771  13A5  1803               	skipnc
 15772  13A6  3000               	movlw	0
 15773  13A7  00A9               	movwf	___awtoft@c+1
 15774  13A8  319E  26DD  3193   	fcall	___awtoft
 15775  13AB  0020               	movlb	0	; select bank0
 15776  13AC  0828               	movf	?___awtoft,w
 15777  13AD  00B1               	movwf	___ftdiv@f1
 15778  13AE  0829               	movf	?___awtoft+1,w
 15779  13AF  00B2               	movwf	___ftdiv@f1+1
 15780  13B0  082A               	movf	?___awtoft+2,w
 15781  13B1  00B3               	movwf	___ftdiv@f1+2
 15782  13B2  085A               	movf	setPercentValue@i,w
 15783  13B3  00AE               	movwf	___ftdiv@f2
 15784  13B4  085B               	movf	setPercentValue@i+1,w
 15785  13B5  00AF               	movwf	___ftdiv@f2+1
 15786  13B6  085C               	movf	setPercentValue@i+2,w
 15787  13B7  00B0               	movwf	___ftdiv@f2+2
 15788  13B8  318E  26A3  3193   	fcall	___ftdiv
 15789  13BB  0020               	movlb	0	; select bank0
 15790  13BC  082E               	movf	?___ftdiv,w
 15791  13BD  00CB               	movwf	___fttol@f1
 15792  13BE  082F               	movf	?___ftdiv+1,w
 15793  13BF  00CC               	movwf	___fttol@f1+1
 15794  13C0  0830               	movf	?___ftdiv+2,w
 15795  13C1  00CD               	movwf	___fttol@f1+2
 15796  13C2  318D  2507         	fcall	___fttol
 15797  13C4  0020               	movlb	0	; select bank0
 15798  13C5  034B               	decf	?___fttol,w
 15799  13C6  3AFF               	xorlw	255
 15800  13C7  3E64               	addlw	100
 15801  13C8  0008               	return
 15802  13C9                     __end_of_setPercentValue:	
 15803                           
 15804                           	psect	text104
 15805  0D07                     __ptext104:	
 15806 ;; *************** function ___fttol *****************
 15807 ;; Defined at:
 15808 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15809 ;; Parameters:    Size  Location     Type
 15810 ;;  f1              3   43[BANK0 ] float 
 15811 ;; Auto vars:     Size  Location     Type
 15812 ;;  lval            4   52[BANK0 ] unsigned long 
 15813 ;;  exp1            1   56[BANK0 ] unsigned char 
 15814 ;;  sign1           1   51[BANK0 ] unsigned char 
 15815 ;; Return value:  Size  Location     Type
 15816 ;;                  4   43[BANK0 ] long 
 15817 ;; Registers used:
 15818 ;;		wreg, status,2, status,0
 15819 ;; Tracked objects:
 15820 ;;		On entry : 0/0
 15821 ;;		On exit  : 0/0
 15822 ;;		Unchanged: 0/0
 15823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15824 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15825 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15826 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15827 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15828 ;;Total ram usage:       14 bytes
 15829 ;; Hardware stack levels used:    1
 15830 ;; Hardware stack levels required when called:    5
 15831 ;; This function calls:
 15832 ;;		Nothing
 15833 ;; This function is called by:
 15834 ;;		_getPercentValue
 15835 ;;		_setPercentValue
 15836 ;; This function uses a non-reentrant model
 15837 ;;
 15838                           
 15839                           
 15840                           ;psect for function ___fttol
 15841  0D07                     ___fttol:	
 15842                           
 15843                           ;incstack = 0
 15844                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15845  0D07  0020               	movlb	0	; select bank0
 15846  0D08  084B               	movf	___fttol@f1,w
 15847  0D09  00CF               	movwf	??___fttol
 15848  0D0A  084C               	movf	___fttol@f1+1,w
 15849  0D0B  00D0               	movwf	??___fttol+1
 15850  0D0C  084D               	movf	___fttol@f1+2,w
 15851  0D0D  00D1               	movwf	??___fttol+2
 15852  0D0E  1003               	clrc
 15853  0D0F  0D50               	rlf	??___fttol+1,w
 15854  0D10  0D51               	rlf	??___fttol+2,w
 15855  0D11  00D2               	movwf	??___fttol+3
 15856  0D12  0852               	movf	??___fttol+3,w
 15857  0D13  00D8               	movwf	___fttol@exp1
 15858  0D14  08D8               	movf	___fttol@exp1,f
 15859  0D15  1D03               	skipz
 15860  0D16  2D20               	goto	l8554
 15861  0D17  3000               	movlw	0
 15862  0D18  00CE               	movwf	?___fttol+3
 15863  0D19  3000               	movlw	0
 15864  0D1A  00CD               	movwf	?___fttol+2
 15865  0D1B  3000               	movlw	0
 15866  0D1C  00CC               	movwf	?___fttol+1
 15867  0D1D  3000               	movlw	0
 15868  0D1E  00CB               	movwf	?___fttol
 15869  0D1F  0008               	return
 15870  0D20                     l8554:	
 15871  0D20  084B               	movf	___fttol@f1,w
 15872  0D21  00CF               	movwf	??___fttol
 15873  0D22  084C               	movf	___fttol@f1+1,w
 15874  0D23  00D0               	movwf	??___fttol+1
 15875  0D24  084D               	movf	___fttol@f1+2,w
 15876  0D25  00D1               	movwf	??___fttol+2
 15877  0D26  3017               	movlw	23
 15878  0D27                     u8735:	
 15879  0D27  36D1               	lsrf	??___fttol+2,f
 15880  0D28  0CD0               	rrf	??___fttol+1,f
 15881  0D29  0CCF               	rrf	??___fttol,f
 15882  0D2A  0B89               	decfsz	9,f
 15883  0D2B  2D27               	goto	u8735
 15884  0D2C  084F               	movf	??___fttol,w
 15885  0D2D  00D2               	movwf	??___fttol+3
 15886  0D2E  0852               	movf	??___fttol+3,w
 15887  0D2F  00D3               	movwf	___fttol@sign1
 15888  0D30  17CC               	bsf	___fttol@f1+1,7
 15889  0D31  30FF               	movlw	255
 15890  0D32  05CB               	andwf	___fttol@f1,f
 15891  0D33  30FF               	movlw	255
 15892  0D34  05CC               	andwf	___fttol@f1+1,f
 15893  0D35  3000               	movlw	0
 15894  0D36  05CD               	andwf	___fttol@f1+2,f
 15895  0D37  084B               	movf	___fttol@f1,w
 15896  0D38  00D4               	movwf	___fttol@lval
 15897  0D39  084C               	movf	___fttol@f1+1,w
 15898  0D3A  00D5               	movwf	___fttol@lval+1
 15899  0D3B  084D               	movf	___fttol@f1+2,w
 15900  0D3C  00D6               	movwf	___fttol@lval+2
 15901  0D3D  01D7               	clrf	___fttol@lval+3
 15902  0D3E  308E               	movlw	142
 15903  0D3F  02D8               	subwf	___fttol@exp1,f
 15904  0D40  1FD8               	btfss	___fttol@exp1,7
 15905  0D41  2D5E               	goto	l8574
 15906  0D42  0858               	movf	___fttol@exp1,w
 15907  0D43  3A80               	xorlw	128
 15908  0D44  3E8F               	addlw	143
 15909  0D45  1803               	skipnc
 15910  0D46  2D50               	goto	l8572
 15911  0D47  3000               	movlw	0
 15912  0D48  00CE               	movwf	?___fttol+3
 15913  0D49  3000               	movlw	0
 15914  0D4A  00CD               	movwf	?___fttol+2
 15915  0D4B  3000               	movlw	0
 15916  0D4C  00CC               	movwf	?___fttol+1
 15917  0D4D  3000               	movlw	0
 15918  0D4E  00CB               	movwf	?___fttol
 15919  0D4F  0008               	return
 15920  0D50                     l8572:	
 15921  0D50  3001               	movlw	1
 15922  0D51                     u8765:	
 15923  0D51  36D7               	lsrf	___fttol@lval+3,f
 15924  0D52  0CD6               	rrf	___fttol@lval+2,f
 15925  0D53  0CD5               	rrf	___fttol@lval+1,f
 15926  0D54  0CD4               	rrf	___fttol@lval,f
 15927  0D55  0B89               	decfsz	9,f
 15928  0D56  2D51               	goto	u8765
 15929  0D57  3001               	movlw	1
 15930  0D58  00CF               	movwf	??___fttol
 15931  0D59  084F               	movf	??___fttol,w
 15932  0D5A  07D8               	addwf	___fttol@exp1,f
 15933  0D5B  1903               	btfsc	3,2
 15934  0D5C  2D77               	goto	l8584
 15935  0D5D  2D50               	goto	l8572
 15936  0D5E                     l8574:	
 15937  0D5E  3018               	movlw	24
 15938  0D5F  0258               	subwf	___fttol@exp1,w
 15939  0D60  1C03               	skipc
 15940  0D61  2D74               	goto	l8582
 15941  0D62  3000               	movlw	0
 15942  0D63  00CE               	movwf	?___fttol+3
 15943  0D64  3000               	movlw	0
 15944  0D65  00CD               	movwf	?___fttol+2
 15945  0D66  3000               	movlw	0
 15946  0D67  00CC               	movwf	?___fttol+1
 15947  0D68  3000               	movlw	0
 15948  0D69  00CB               	movwf	?___fttol
 15949  0D6A  0008               	return
 15950  0D6B                     l8580:	
 15951  0D6B  3001               	movlw	1
 15952  0D6C                     u8795:	
 15953  0D6C  35D4               	lslf	___fttol@lval,f
 15954  0D6D  0DD5               	rlf	___fttol@lval+1,f
 15955  0D6E  0DD6               	rlf	___fttol@lval+2,f
 15956  0D6F  0DD7               	rlf	___fttol@lval+3,f
 15957  0D70  0B89               	decfsz	9,f
 15958  0D71  2D6C               	goto	u8795
 15959  0D72  3001               	movlw	1
 15960  0D73  02D8               	subwf	___fttol@exp1,f
 15961  0D74                     l8582:	
 15962  0D74  08D8               	movf	___fttol@exp1,f
 15963  0D75  1D03               	skipz
 15964  0D76  2D6B               	goto	l8580
 15965  0D77                     l8584:	
 15966  0D77  0853               	movf	___fttol@sign1,w
 15967  0D78  1903               	btfsc	3,2
 15968  0D79  2D85               	goto	l8588
 15969  0D7A  09D4               	comf	___fttol@lval,f
 15970  0D7B  09D5               	comf	___fttol@lval+1,f
 15971  0D7C  09D6               	comf	___fttol@lval+2,f
 15972  0D7D  09D7               	comf	___fttol@lval+3,f
 15973  0D7E  0AD4               	incf	___fttol@lval,f
 15974  0D7F  1903               	skipnz
 15975  0D80  0AD5               	incf	___fttol@lval+1,f
 15976  0D81  1903               	skipnz
 15977  0D82  0AD6               	incf	___fttol@lval+2,f
 15978  0D83  1903               	skipnz
 15979  0D84  0AD7               	incf	___fttol@lval+3,f
 15980  0D85                     l8588:	
 15981  0D85  0857               	movf	___fttol@lval+3,w
 15982  0D86  00CE               	movwf	?___fttol+3
 15983  0D87  0856               	movf	___fttol@lval+2,w
 15984  0D88  00CD               	movwf	?___fttol+2
 15985  0D89  0855               	movf	___fttol@lval+1,w
 15986  0D8A  00CC               	movwf	?___fttol+1
 15987  0D8B  0854               	movf	___fttol@lval,w
 15988  0D8C  00CB               	movwf	?___fttol
 15989  0D8D  0008               	return
 15990  0D8E                     __end_of___fttol:	
 15991                           
 15992                           	psect	text105
 15993  0EA3                     __ptext105:	
 15994 ;; *************** function ___ftdiv *****************
 15995 ;; Defined at:
 15996 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15997 ;; Parameters:    Size  Location     Type
 15998 ;;  f2              3   14[BANK0 ] float 
 15999 ;;  f1              3   17[BANK0 ] float 
 16000 ;; Auto vars:     Size  Location     Type
 16001 ;;  f3              3   25[BANK0 ] float 
 16002 ;;  sign            1   29[BANK0 ] unsigned char 
 16003 ;;  exp             1   28[BANK0 ] unsigned char 
 16004 ;;  cntr            1   24[BANK0 ] unsigned char 
 16005 ;; Return value:  Size  Location     Type
 16006 ;;                  3   14[BANK0 ] float 
 16007 ;; Registers used:
 16008 ;;		wreg, status,2, status,0, pclath, cstack
 16009 ;; Tracked objects:
 16010 ;;		On entry : 0/0
 16011 ;;		On exit  : 0/0
 16012 ;;		Unchanged: 0/0
 16013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16014 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16015 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16016 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16017 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16018 ;;Total ram usage:       16 bytes
 16019 ;; Hardware stack levels used:    1
 16020 ;; Hardware stack levels required when called:    6
 16021 ;; This function calls:
 16022 ;;		___ftpack
 16023 ;; This function is called by:
 16024 ;;		_getPercentValue
 16025 ;;		_setPercentValue
 16026 ;; This function uses a non-reentrant model
 16027 ;;
 16028                           
 16029                           
 16030                           ;psect for function ___ftdiv
 16031  0EA3                     ___ftdiv:	
 16032                           
 16033                           ;incstack = 0
 16034                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16035  0EA3  0020               	movlb	0	; select bank0
 16036  0EA4  0831               	movf	___ftdiv@f1,w
 16037  0EA5  00B4               	movwf	??___ftdiv
 16038  0EA6  0832               	movf	___ftdiv@f1+1,w
 16039  0EA7  00B5               	movwf	??___ftdiv+1
 16040  0EA8  0833               	movf	___ftdiv@f1+2,w
 16041  0EA9  00B6               	movwf	??___ftdiv+2
 16042  0EAA  1003               	clrc
 16043  0EAB  0D35               	rlf	??___ftdiv+1,w
 16044  0EAC  0D36               	rlf	??___ftdiv+2,w
 16045  0EAD  00B7               	movwf	??___ftdiv+3
 16046  0EAE  0837               	movf	??___ftdiv+3,w
 16047  0EAF  00BC               	movwf	___ftdiv@exp
 16048  0EB0  08BC               	movf	___ftdiv@exp,f
 16049  0EB1  1D03               	skipz
 16050  0EB2  2EBA               	goto	l8462
 16051  0EB3  3000               	movlw	0
 16052  0EB4  00AE               	movwf	?___ftdiv
 16053  0EB5  3000               	movlw	0
 16054  0EB6  00AF               	movwf	?___ftdiv+1
 16055  0EB7  3000               	movlw	0
 16056  0EB8  00B0               	movwf	?___ftdiv+2
 16057  0EB9  0008               	return
 16058  0EBA                     l8462:	
 16059  0EBA  082E               	movf	___ftdiv@f2,w
 16060  0EBB  00B4               	movwf	??___ftdiv
 16061  0EBC  082F               	movf	___ftdiv@f2+1,w
 16062  0EBD  00B5               	movwf	??___ftdiv+1
 16063  0EBE  0830               	movf	___ftdiv@f2+2,w
 16064  0EBF  00B6               	movwf	??___ftdiv+2
 16065  0EC0  1003               	clrc
 16066  0EC1  0D35               	rlf	??___ftdiv+1,w
 16067  0EC2  0D36               	rlf	??___ftdiv+2,w
 16068  0EC3  00B7               	movwf	??___ftdiv+3
 16069  0EC4  0837               	movf	??___ftdiv+3,w
 16070  0EC5  00BD               	movwf	___ftdiv@sign
 16071  0EC6  08BD               	movf	___ftdiv@sign,f
 16072  0EC7  1D03               	skipz
 16073  0EC8  2ED0               	goto	l8468
 16074  0EC9  3000               	movlw	0
 16075  0ECA  00AE               	movwf	?___ftdiv
 16076  0ECB  3000               	movlw	0
 16077  0ECC  00AF               	movwf	?___ftdiv+1
 16078  0ECD  3000               	movlw	0
 16079  0ECE  00B0               	movwf	?___ftdiv+2
 16080  0ECF  0008               	return
 16081  0ED0                     l8468:	
 16082  0ED0  3000               	movlw	0
 16083  0ED1  00B9               	movwf	___ftdiv@f3
 16084  0ED2  3000               	movlw	0
 16085  0ED3  00BA               	movwf	___ftdiv@f3+1
 16086  0ED4  3000               	movlw	0
 16087  0ED5  00BB               	movwf	___ftdiv@f3+2
 16088  0ED6  3089               	movlw	137
 16089  0ED7  073D               	addwf	___ftdiv@sign,w
 16090  0ED8  00B4               	movwf	??___ftdiv
 16091  0ED9  0834               	movf	??___ftdiv,w
 16092  0EDA  02BC               	subwf	___ftdiv@exp,f
 16093  0EDB  0831               	movf	___ftdiv@f1,w
 16094  0EDC  00B4               	movwf	??___ftdiv
 16095  0EDD  0832               	movf	___ftdiv@f1+1,w
 16096  0EDE  00B5               	movwf	??___ftdiv+1
 16097  0EDF  0833               	movf	___ftdiv@f1+2,w
 16098  0EE0  00B6               	movwf	??___ftdiv+2
 16099  0EE1  3010               	movlw	16
 16100  0EE2                     u8545:	
 16101  0EE2  36B6               	lsrf	??___ftdiv+2,f
 16102  0EE3  0CB5               	rrf	??___ftdiv+1,f
 16103  0EE4  0CB4               	rrf	??___ftdiv,f
 16104  0EE5  0B89               	decfsz	9,f
 16105  0EE6  2EE2               	goto	u8545
 16106  0EE7  0834               	movf	??___ftdiv,w
 16107  0EE8  00B7               	movwf	??___ftdiv+3
 16108  0EE9  0837               	movf	??___ftdiv+3,w
 16109  0EEA  00BD               	movwf	___ftdiv@sign
 16110  0EEB  082E               	movf	___ftdiv@f2,w
 16111  0EEC  00B4               	movwf	??___ftdiv
 16112  0EED  082F               	movf	___ftdiv@f2+1,w
 16113  0EEE  00B5               	movwf	??___ftdiv+1
 16114  0EEF  0830               	movf	___ftdiv@f2+2,w
 16115  0EF0  00B6               	movwf	??___ftdiv+2
 16116  0EF1  3010               	movlw	16
 16117  0EF2                     u8555:	
 16118  0EF2  36B6               	lsrf	??___ftdiv+2,f
 16119  0EF3  0CB5               	rrf	??___ftdiv+1,f
 16120  0EF4  0CB4               	rrf	??___ftdiv,f
 16121  0EF5  0B89               	decfsz	9,f
 16122  0EF6  2EF2               	goto	u8555
 16123  0EF7  0834               	movf	??___ftdiv,w
 16124  0EF8  00B7               	movwf	??___ftdiv+3
 16125  0EF9  0837               	movf	??___ftdiv+3,w
 16126  0EFA  06BD               	xorwf	___ftdiv@sign,f
 16127  0EFB  3080               	movlw	128
 16128  0EFC  00B4               	movwf	??___ftdiv
 16129  0EFD  0834               	movf	??___ftdiv,w
 16130  0EFE  05BD               	andwf	___ftdiv@sign,f
 16131  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 16132  0F00  30FF               	movlw	255
 16133  0F01  05B1               	andwf	___ftdiv@f1,f
 16134  0F02  30FF               	movlw	255
 16135  0F03  05B2               	andwf	___ftdiv@f1+1,f
 16136  0F04  3000               	movlw	0
 16137  0F05  05B3               	andwf	___ftdiv@f1+2,f
 16138  0F06  17AF               	bsf	___ftdiv@f2+1,7
 16139  0F07  30FF               	movlw	255
 16140  0F08  05AE               	andwf	___ftdiv@f2,f
 16141  0F09  30FF               	movlw	255
 16142  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 16143  0F0B  3000               	movlw	0
 16144  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 16145  0F0D  3018               	movlw	24
 16146  0F0E  00B4               	movwf	??___ftdiv
 16147  0F0F  0834               	movf	??___ftdiv,w
 16148  0F10  00B8               	movwf	___ftdiv@cntr
 16149  0F11                     l8482:	
 16150  0F11  3001               	movlw	1
 16151  0F12                     u8565:	
 16152  0F12  35B9               	lslf	___ftdiv@f3,f
 16153  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 16154  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 16155  0F15  0B89               	decfsz	9,f
 16156  0F16  2F12               	goto	u8565
 16157  0F17  0830               	movf	___ftdiv@f2+2,w
 16158  0F18  0233               	subwf	___ftdiv@f1+2,w
 16159  0F19  1D03               	skipz
 16160  0F1A  2F21               	goto	u8575
 16161  0F1B  082F               	movf	___ftdiv@f2+1,w
 16162  0F1C  0232               	subwf	___ftdiv@f1+1,w
 16163  0F1D  1D03               	skipz
 16164  0F1E  2F21               	goto	u8575
 16165  0F1F  082E               	movf	___ftdiv@f2,w
 16166  0F20  0231               	subwf	___ftdiv@f1,w
 16167  0F21                     u8575:	
 16168  0F21  1C03               	skipc
 16169  0F22  2F2A               	goto	l8490
 16170  0F23  082E               	movf	___ftdiv@f2,w
 16171  0F24  02B1               	subwf	___ftdiv@f1,f
 16172  0F25  082F               	movf	___ftdiv@f2+1,w
 16173  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 16174  0F27  0830               	movf	___ftdiv@f2+2,w
 16175  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 16176  0F29  1439               	bsf	___ftdiv@f3,0
 16177  0F2A                     l8490:	
 16178  0F2A  3001               	movlw	1
 16179  0F2B                     u8585:	
 16180  0F2B  35B1               	lslf	___ftdiv@f1,f
 16181  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 16182  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 16183  0F2E  0B89               	decfsz	9,f
 16184  0F2F  2F2B               	goto	u8585
 16185  0F30  3001               	movlw	1
 16186  0F31  02B8               	subwf	___ftdiv@cntr,f
 16187  0F32  1D03               	btfss	3,2
 16188  0F33  2F11               	goto	l8482
 16189  0F34  0839               	movf	___ftdiv@f3,w
 16190  0F35  00A0               	movwf	___ftpack@arg
 16191  0F36  083A               	movf	___ftdiv@f3+1,w
 16192  0F37  00A1               	movwf	___ftpack@arg+1
 16193  0F38  083B               	movf	___ftdiv@f3+2,w
 16194  0F39  00A2               	movwf	___ftpack@arg+2
 16195  0F3A  083C               	movf	___ftdiv@exp,w
 16196  0F3B  00B4               	movwf	??___ftdiv
 16197  0F3C  0834               	movf	??___ftdiv,w
 16198  0F3D  00A3               	movwf	___ftpack@exp
 16199  0F3E  083D               	movf	___ftdiv@sign,w
 16200  0F3F  00B5               	movwf	??___ftdiv+1
 16201  0F40  0835               	movf	??___ftdiv+1,w
 16202  0F41  00A4               	movwf	___ftpack@sign
 16203  0F42  3197  273D         	fcall	___ftpack
 16204  0F44  0020               	movlb	0	; select bank0
 16205  0F45  0820               	movf	?___ftpack,w
 16206  0F46  00AE               	movwf	?___ftdiv
 16207  0F47  0821               	movf	?___ftpack+1,w
 16208  0F48  00AF               	movwf	?___ftdiv+1
 16209  0F49  0822               	movf	?___ftpack+2,w
 16210  0F4A  00B0               	movwf	?___ftdiv+2
 16211  0F4B  0008               	return
 16212  0F4C                     __end_of___ftdiv:	
 16213                           
 16214                           	psect	text106
 16215  1EDD                     __ptext106:	
 16216 ;; *************** function ___awtoft *****************
 16217 ;; Defined at:
 16218 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16219 ;; Parameters:    Size  Location     Type
 16220 ;;  c               2    8[BANK0 ] int 
 16221 ;; Auto vars:     Size  Location     Type
 16222 ;;  sign            1   13[BANK0 ] unsigned char 
 16223 ;; Return value:  Size  Location     Type
 16224 ;;                  3    8[BANK0 ] float 
 16225 ;; Registers used:
 16226 ;;		wreg, status,2, status,0, pclath, cstack
 16227 ;; Tracked objects:
 16228 ;;		On entry : 0/0
 16229 ;;		On exit  : 0/0
 16230 ;;		Unchanged: 0/0
 16231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16232 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16235 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16236 ;;Total ram usage:        6 bytes
 16237 ;; Hardware stack levels used:    1
 16238 ;; Hardware stack levels required when called:    6
 16239 ;; This function calls:
 16240 ;;		___ftpack
 16241 ;; This function is called by:
 16242 ;;		_getPercentValue
 16243 ;;		_setPercentValue
 16244 ;; This function uses a non-reentrant model
 16245 ;;
 16246                           
 16247                           
 16248                           ;psect for function ___awtoft
 16249  1EDD                     ___awtoft:	
 16250                           
 16251                           ;incstack = 0
 16252                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16253  1EDD  0020               	movlb	0	; select bank0
 16254  1EDE  01AD               	clrf	___awtoft@sign
 16255  1EDF  1FA9               	btfss	___awtoft@c+1,7
 16256  1EE0  2EE8               	goto	l8380
 16257  1EE1  09A8               	comf	___awtoft@c,f
 16258  1EE2  09A9               	comf	___awtoft@c+1,f
 16259  1EE3  0AA8               	incf	___awtoft@c,f
 16260  1EE4  1903               	skipnz
 16261  1EE5  0AA9               	incf	___awtoft@c+1,f
 16262  1EE6  01AD               	clrf	___awtoft@sign
 16263  1EE7  0AAD               	incf	___awtoft@sign,f
 16264  1EE8                     l8380:	
 16265  1EE8  0828               	movf	___awtoft@c,w
 16266  1EE9  00A0               	movwf	___ftpack@arg
 16267  1EEA  0829               	movf	___awtoft@c+1,w
 16268  1EEB  00A1               	movwf	___ftpack@arg+1
 16269  1EEC  01A2               	clrf	___ftpack@arg+2
 16270  1EED  308E               	movlw	142
 16271  1EEE  00AB               	movwf	??___awtoft
 16272  1EEF  082B               	movf	??___awtoft,w
 16273  1EF0  00A3               	movwf	___ftpack@exp
 16274  1EF1  082D               	movf	___awtoft@sign,w
 16275  1EF2  00AC               	movwf	??___awtoft+1
 16276  1EF3  082C               	movf	??___awtoft+1,w
 16277  1EF4  00A4               	movwf	___ftpack@sign
 16278  1EF5  3197  273D         	fcall	___ftpack
 16279  1EF7  0020               	movlb	0	; select bank0
 16280  1EF8  0820               	movf	?___ftpack,w
 16281  1EF9  00A8               	movwf	?___awtoft
 16282  1EFA  0821               	movf	?___ftpack+1,w
 16283  1EFB  00A9               	movwf	?___awtoft+1
 16284  1EFC  0822               	movf	?___ftpack+2,w
 16285  1EFD  00AA               	movwf	?___awtoft+2
 16286  1EFE  0008               	return
 16287  1EFF                     __end_of___awtoft:	
 16288                           
 16289                           	psect	text107
 16290  173D                     __ptext107:	
 16291 ;; *************** function ___ftpack *****************
 16292 ;; Defined at:
 16293 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16294 ;; Parameters:    Size  Location     Type
 16295 ;;  arg             3    0[BANK0 ] unsigned um
 16296 ;;  exp             1    3[BANK0 ] unsigned char 
 16297 ;;  sign            1    4[BANK0 ] unsigned char 
 16298 ;; Auto vars:     Size  Location     Type
 16299 ;;		None
 16300 ;; Return value:  Size  Location     Type
 16301 ;;                  3    0[BANK0 ] float 
 16302 ;; Registers used:
 16303 ;;		wreg, status,2, status,0
 16304 ;; Tracked objects:
 16305 ;;		On entry : 0/0
 16306 ;;		On exit  : 0/0
 16307 ;;		Unchanged: 0/0
 16308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16309 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16311 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16312 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16313 ;;Total ram usage:        8 bytes
 16314 ;; Hardware stack levels used:    1
 16315 ;; Hardware stack levels required when called:    5
 16316 ;; This function calls:
 16317 ;;		Nothing
 16318 ;; This function is called by:
 16319 ;;		___awtoft
 16320 ;;		___ftadd
 16321 ;;		___ftdiv
 16322 ;;		___ftmul
 16323 ;; This function uses a non-reentrant model
 16324 ;;
 16325                           
 16326                           
 16327                           ;psect for function ___ftpack
 16328  173D                     ___ftpack:	
 16329                           
 16330                           ;incstack = 0
 16331                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16332  173D  0020               	movlb	0	; select bank0
 16333  173E  0823               	movf	___ftpack@exp,w
 16334  173F  1903               	btfsc	3,2
 16335  1740  2F46               	goto	l8346
 16336  1741  0822               	movf	___ftpack@arg+2,w
 16337  1742  0421               	iorwf	___ftpack@arg+1,w
 16338  1743  0420               	iorwf	___ftpack@arg,w
 16339  1744  1D03               	skipz
 16340  1745  2F57               	goto	l8352
 16341  1746                     l8346:	
 16342  1746  3000               	movlw	0
 16343  1747  00A0               	movwf	?___ftpack
 16344  1748  3000               	movlw	0
 16345  1749  00A1               	movwf	?___ftpack+1
 16346  174A  3000               	movlw	0
 16347  174B  00A2               	movwf	?___ftpack+2
 16348  174C  0008               	return
 16349  174D                     l8350:	
 16350  174D  3001               	movlw	1
 16351  174E  00A5               	movwf	??___ftpack
 16352  174F  0825               	movf	??___ftpack,w
 16353  1750  07A3               	addwf	___ftpack@exp,f
 16354  1751  3001               	movlw	1
 16355  1752                     u8195:	
 16356  1752  36A2               	lsrf	___ftpack@arg+2,f
 16357  1753  0CA1               	rrf	___ftpack@arg+1,f
 16358  1754  0CA0               	rrf	___ftpack@arg,f
 16359  1755  0B89               	decfsz	9,f
 16360  1756  2F52               	goto	u8195
 16361  1757                     l8352:	
 16362  1757  30FE               	movlw	254
 16363  1758  0522               	andwf	___ftpack@arg+2,w
 16364  1759  1903               	btfsc	3,2
 16365  175A  2F70               	goto	l3010
 16366  175B  2F4D               	goto	l8350
 16367  175C                     l8354:	
 16368  175C  3001               	movlw	1
 16369  175D  00A5               	movwf	??___ftpack
 16370  175E  0825               	movf	??___ftpack,w
 16371  175F  07A3               	addwf	___ftpack@exp,f
 16372  1760  3001               	movlw	1
 16373  1761  07A0               	addwf	___ftpack@arg,f
 16374  1762  3000               	movlw	0
 16375  1763  1803               	skipnc
 16376  1764  3001               	movlw	1
 16377  1765  07A1               	addwf	___ftpack@arg+1,f
 16378  1766  3000               	movlw	0
 16379  1767  1803               	skipnc
 16380  1768  3001               	movlw	1
 16381  1769  07A2               	addwf	___ftpack@arg+2,f
 16382  176A  3001               	movlw	1
 16383  176B                     u8215:	
 16384  176B  36A2               	lsrf	___ftpack@arg+2,f
 16385  176C  0CA1               	rrf	___ftpack@arg+1,f
 16386  176D  0CA0               	rrf	___ftpack@arg,f
 16387  176E  0B89               	decfsz	9,f
 16388  176F  2F6B               	goto	u8215
 16389  1770                     l3010:	
 16390  1770  30FF               	movlw	255
 16391  1771  0522               	andwf	___ftpack@arg+2,w
 16392  1772  1903               	btfsc	3,2
 16393  1773  2F7D               	goto	l8362
 16394  1774  2F5C               	goto	l8354
 16395  1775                     l8360:	
 16396  1775  3001               	movlw	1
 16397  1776  02A3               	subwf	___ftpack@exp,f
 16398  1777  3001               	movlw	1
 16399  1778                     u8235:	
 16400  1778  35A0               	lslf	___ftpack@arg,f
 16401  1779  0DA1               	rlf	___ftpack@arg+1,f
 16402  177A  0DA2               	rlf	___ftpack@arg+2,f
 16403  177B  0B89               	decfsz	9,f
 16404  177C  2F78               	goto	u8235
 16405  177D                     l8362:	
 16406  177D  1FA1               	btfss	___ftpack@arg+1,7
 16407  177E  2F75               	goto	l8360
 16408  177F  1823               	btfsc	___ftpack@exp,0
 16409  1780  2F87               	goto	l3016
 16410  1781  30FF               	movlw	255
 16411  1782  05A0               	andwf	___ftpack@arg,f
 16412  1783  307F               	movlw	127
 16413  1784  05A1               	andwf	___ftpack@arg+1,f
 16414  1785  30FF               	movlw	255
 16415  1786  05A2               	andwf	___ftpack@arg+2,f
 16416  1787                     l3016:	
 16417  1787  1003               	clrc
 16418  1788  0CA3               	rrf	___ftpack@exp,f
 16419  1789  0823               	movf	___ftpack@exp,w
 16420  178A  00A5               	movwf	??___ftpack
 16421  178B  01A6               	clrf	??___ftpack+1
 16422  178C  01A7               	clrf	??___ftpack+2
 16423  178D  3010               	movlw	16
 16424  178E                     u8265:	
 16425  178E  35A5               	lslf	??___ftpack,f
 16426  178F  0DA6               	rlf	??___ftpack+1,f
 16427  1790  0DA7               	rlf	??___ftpack+2,f
 16428  1791  0B89               	decfsz	9,f
 16429  1792  2F8E               	goto	u8265
 16430  1793  0825               	movf	??___ftpack,w
 16431  1794  04A0               	iorwf	___ftpack@arg,f
 16432  1795  0826               	movf	??___ftpack+1,w
 16433  1796  04A1               	iorwf	___ftpack@arg+1,f
 16434  1797  0827               	movf	??___ftpack+2,w
 16435  1798  04A2               	iorwf	___ftpack@arg+2,f
 16436  1799  0824               	movf	___ftpack@sign,w
 16437  179A  1903               	btfsc	3,2
 16438  179B  0008               	return
 16439  179C  17A2               	bsf	___ftpack@arg+2,7
 16440  179D  0008               	return
 16441  179E                     __end_of___ftpack:	
 16442                           
 16443                           	psect	text108
 16444  1B5B                     __ptext108:	
 16445 ;; *************** function _setRFSW_Status *****************
 16446 ;; Defined at:
 16447 ;;		line 379 in file "../src/RF_Control_B1.c"
 16448 ;; Parameters:    Size  Location     Type
 16449 ;;  sw              1    wreg     unsigned char 
 16450 ;;  command         1    2[BANK0 ] unsigned char 
 16451 ;; Auto vars:     Size  Location     Type
 16452 ;;  sw              1    3[BANK0 ] unsigned char 
 16453 ;; Return value:  Size  Location     Type
 16454 ;;		None               void
 16455 ;; Registers used:
 16456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16457 ;; Tracked objects:
 16458 ;;		On entry : 0/0
 16459 ;;		On exit  : 0/0
 16460 ;;		Unchanged: 0/0
 16461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16462 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16466 ;;Total ram usage:        2 bytes
 16467 ;; Hardware stack levels used:    1
 16468 ;; Hardware stack levels required when called:    6
 16469 ;; This function calls:
 16470 ;;		_RfSWPointSelect
 16471 ;; This function is called by:
 16472 ;;		_DlyOff_Main
 16473 ;;		_setDimmerLights_ERROR
 16474 ;;		_setControl_Lights_Table
 16475 ;;		_Sw_DimmerOnFunc
 16476 ;;		_Sw_DimmerAdjFunc
 16477 ;; This function uses a non-reentrant model
 16478 ;;
 16479                           
 16480                           
 16481                           ;psect for function _setRFSW_Status
 16482  1B5B                     _setRFSW_Status:	
 16483                           
 16484                           ;incstack = 0
 16485                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16486                           ;setRFSW_Status@sw stored from wreg
 16487  1B5B  0020               	movlb	0	; select bank0
 16488  1B5C  00A3               	movwf	setRFSW_Status@sw
 16489                           
 16490                           ;RF_Control_B1.c: 380: RfSWPointSelect(sw);
 16491  1B5D  0823               	movf	setRFSW_Status@sw,w
 16492  1B5E  319C  24ED         	fcall	_RfSWPointSelect
 16493                           
 16494                           ;RF_Control_B1.c: 381: RFSW->Status = command;
 16495  1B60  0021               	movlb	1	; select bank1
 16496  1B61  0850               	movf	_RFSW^(0+128),w
 16497  1B62  0086               	movwf	6
 16498  1B63  0187               	clrf	7
 16499  1B64  0020               	movlb	0	; select bank0
 16500  1B65  0822               	movf	setRFSW_Status@command,w
 16501  1B66  1001               	bcf	1,0
 16502  1B67  1D03               	skipz
 16503  1B68  1401               	bsf	1,0
 16504  1B69  0008               	return
 16505  1B6A                     __end_of_setRFSW_Status:	
 16506                           
 16507                           	psect	text109
 16508  1CED                     __ptext109:	
 16509 ;; *************** function _RfSWPointSelect *****************
 16510 ;; Defined at:
 16511 ;;		line 314 in file "../src/RF_Control_B1.c"
 16512 ;; Parameters:    Size  Location     Type
 16513 ;;  sw              1    wreg     unsigned char 
 16514 ;; Auto vars:     Size  Location     Type
 16515 ;;  sw              1    1[BANK0 ] unsigned char 
 16516 ;; Return value:  Size  Location     Type
 16517 ;;		None               void
 16518 ;; Registers used:
 16519 ;;		wreg
 16520 ;; Tracked objects:
 16521 ;;		On entry : 0/0
 16522 ;;		On exit  : 0/0
 16523 ;;		Unchanged: 0/0
 16524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16528 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16529 ;;Total ram usage:        2 bytes
 16530 ;; Hardware stack levels used:    1
 16531 ;; Hardware stack levels required when called:    5
 16532 ;; This function calls:
 16533 ;;		Nothing
 16534 ;; This function is called by:
 16535 ;;		_setRFSW_Control
 16536 ;;		_setRFSW_AdjControl
 16537 ;;		_setRFSW_Status
 16538 ;; This function uses a non-reentrant model
 16539 ;;
 16540                           
 16541                           
 16542                           ;psect for function _RfSWPointSelect
 16543  1CED                     _RfSWPointSelect:	
 16544                           
 16545                           ;incstack = 0
 16546                           ; Regs used in _RfSWPointSelect: [wreg]
 16547                           ;RfSWPointSelect@sw stored from wreg
 16548  1CED  0020               	movlb	0	; select bank0
 16549  1CEE  00A1               	movwf	RfSWPointSelect@sw
 16550                           
 16551                           ;RF_Control_B1.c: 316: if (sw == 1) {
 16552  1CEF  0821               	movf	RfSWPointSelect@sw,w
 16553  1CF0  3A01               	xorlw	1
 16554  1CF1  1D03               	skipz
 16555  1CF2  2CF8               	goto	l2320
 16556                           
 16557                           ;RF_Control_B1.c: 317: RFSW = &RFSW1;
 16558  1CF3  30EC               	movlw	_RFSW1& (0+255)
 16559  1CF4  00A0               	movwf	??_RfSWPointSelect
 16560  1CF5  0820               	movf	??_RfSWPointSelect,w
 16561  1CF6  0021               	movlb	1	; select bank1
 16562  1CF7  00D0               	movwf	_RFSW^(0+128)
 16563  1CF8                     l2320:	
 16564                           
 16565                           ;RF_Control_B1.c: 318: }
 16566                           ;RF_Control_B1.c: 321: if (sw == 2) {
 16567  1CF8  0020               	movlb	0	; select bank0
 16568  1CF9  0821               	movf	RfSWPointSelect@sw,w
 16569  1CFA  3A02               	xorlw	2
 16570  1CFB  1D03               	skipz
 16571  1CFC  0008               	return
 16572                           
 16573                           ;RF_Control_B1.c: 322: RFSW = &RFSW2;
 16574  1CFD  30ED               	movlw	_RFSW2& (0+255)
 16575  1CFE  00A0               	movwf	??_RfSWPointSelect
 16576  1CFF  0820               	movf	??_RfSWPointSelect,w
 16577  1D00  0021               	movlb	1	; select bank1
 16578  1D01  00D0               	movwf	_RFSW^(0+128)
 16579  1D02  0008               	return
 16580  1D03                     __end_of_RfSWPointSelect:	
 16581                           
 16582                           	psect	text110
 16583  1BA7                     __ptext110:	
 16584 ;; *************** function _setDimmerLights_Trigger *****************
 16585 ;; Defined at:
 16586 ;;		line 705 in file "../src/Dimmer_B1.c"
 16587 ;; Parameters:    Size  Location     Type
 16588 ;;  lights          1    wreg     unsigned char 
 16589 ;;  command         1    2[BANK0 ] unsigned char 
 16590 ;; Auto vars:     Size  Location     Type
 16591 ;;  lights          1    3[BANK0 ] unsigned char 
 16592 ;; Return value:  Size  Location     Type
 16593 ;;		None               void
 16594 ;; Registers used:
 16595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16596 ;; Tracked objects:
 16597 ;;		On entry : 0/0
 16598 ;;		On exit  : 0/0
 16599 ;;		Unchanged: 0/0
 16600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16601 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16605 ;;Total ram usage:        2 bytes
 16606 ;; Hardware stack levels used:    1
 16607 ;; Hardware stack levels required when called:    6
 16608 ;; This function calls:
 16609 ;;		_DimmerLightsPointSelect
 16610 ;; This function is called by:
 16611 ;;		_DlyOff_Main
 16612 ;;		_setRFSW_Control
 16613 ;;		_Sw_DimmerOnFunc
 16614 ;;		_Sw_DimmerOffFunc
 16615 ;; This function uses a non-reentrant model
 16616 ;;
 16617                           
 16618                           
 16619                           ;psect for function _setDimmerLights_Trigger
 16620  1BA7                     _setDimmerLights_Trigger:	
 16621                           
 16622                           ;incstack = 0
 16623                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16624                           ;setDimmerLights_Trigger@lights stored from wreg
 16625  1BA7  0020               	movlb	0	; select bank0
 16626  1BA8  00A3               	movwf	setDimmerLights_Trigger@lights
 16627                           
 16628                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 16629  1BA9  0823               	movf	setDimmerLights_Trigger@lights,w
 16630  1BAA  319C  2473         	fcall	_DimmerLightsPointSelect
 16631                           
 16632                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
 16633  1BAC  0879               	movf	_DimmerLights,w
 16634  1BAD  3E08               	addlw	8
 16635  1BAE  0086               	movwf	6
 16636  1BAF  3001               	movlw	1	; select bank2/3
 16637  1BB0  0087               	movwf	7
 16638  1BB1  0020               	movlb	0	; select bank0
 16639  1BB2  0822               	movf	setDimmerLights_Trigger@command,w
 16640  1BB3  1101               	bcf	1,2
 16641  1BB4  1D03               	skipz
 16642  1BB5  1501               	bsf	1,2
 16643  1BB6  0008               	return
 16644  1BB7                     __end_of_setDimmerLights_Trigger:	
 16645                           
 16646                           	psect	text111
 16647  1B97                     __ptext111:	
 16648 ;; *************** function _setDimmerLights_Switch *****************
 16649 ;; Defined at:
 16650 ;;		line 693 in file "../src/Dimmer_B1.c"
 16651 ;; Parameters:    Size  Location     Type
 16652 ;;  lights          1    wreg     unsigned char 
 16653 ;;  command         1    2[BANK0 ] unsigned char 
 16654 ;; Auto vars:     Size  Location     Type
 16655 ;;  lights          1    3[BANK0 ] unsigned char 
 16656 ;; Return value:  Size  Location     Type
 16657 ;;		None               void
 16658 ;; Registers used:
 16659 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16660 ;; Tracked objects:
 16661 ;;		On entry : 0/0
 16662 ;;		On exit  : 0/0
 16663 ;;		Unchanged: 0/0
 16664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16665 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16669 ;;Total ram usage:        2 bytes
 16670 ;; Hardware stack levels used:    1
 16671 ;; Hardware stack levels required when called:    6
 16672 ;; This function calls:
 16673 ;;		_DimmerLightsPointSelect
 16674 ;; This function is called by:
 16675 ;;		_DlyOff_Main
 16676 ;;		_setRFSW_Control
 16677 ;;		_Sw_DimmerOnFunc
 16678 ;;		_Sw_DimmerOffFunc
 16679 ;; This function uses a non-reentrant model
 16680 ;;
 16681                           
 16682                           
 16683                           ;psect for function _setDimmerLights_Switch
 16684  1B97                     _setDimmerLights_Switch:	
 16685                           
 16686                           ;incstack = 0
 16687                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16688                           ;setDimmerLights_Switch@lights stored from wreg
 16689  1B97  0020               	movlb	0	; select bank0
 16690  1B98  00A3               	movwf	setDimmerLights_Switch@lights
 16691                           
 16692                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
 16693  1B99  0823               	movf	setDimmerLights_Switch@lights,w
 16694  1B9A  319C  2473         	fcall	_DimmerLightsPointSelect
 16695                           
 16696                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
 16697  1B9C  0879               	movf	_DimmerLights,w
 16698  1B9D  3E08               	addlw	8
 16699  1B9E  0086               	movwf	6
 16700  1B9F  3001               	movlw	1	; select bank2/3
 16701  1BA0  0087               	movwf	7
 16702  1BA1  0020               	movlb	0	; select bank0
 16703  1BA2  0822               	movf	setDimmerLights_Switch@command,w
 16704  1BA3  1081               	bcf	1,1
 16705  1BA4  1D03               	skipz
 16706  1BA5  1481               	bsf	1,1
 16707  1BA6  0008               	return
 16708  1BA7                     __end_of_setDimmerLights_Switch:	
 16709                           
 16710                           	psect	text112
 16711  1C73                     __ptext112:	
 16712 ;; *************** function _DimmerLightsPointSelect *****************
 16713 ;; Defined at:
 16714 ;;		line 315 in file "../src/Dimmer_B1.c"
 16715 ;; Parameters:    Size  Location     Type
 16716 ;;  lights          1    wreg     unsigned char 
 16717 ;; Auto vars:     Size  Location     Type
 16718 ;;  lights          1    1[BANK0 ] unsigned char 
 16719 ;; Return value:  Size  Location     Type
 16720 ;;		None               void
 16721 ;; Registers used:
 16722 ;;		wreg
 16723 ;; Tracked objects:
 16724 ;;		On entry : 0/0
 16725 ;;		On exit  : 0/0
 16726 ;;		Unchanged: 0/0
 16727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16732 ;;Total ram usage:        2 bytes
 16733 ;; Hardware stack levels used:    1
 16734 ;; Hardware stack levels required when called:    5
 16735 ;; This function calls:
 16736 ;;		Nothing
 16737 ;; This function is called by:
 16738 ;;		_setDimmerLights_Initialization
 16739 ;;		_setDimmerLights_Main
 16740 ;;		_setDimmerLights_ERROR
 16741 ;;		_setDimmerLights_TriggerERROR
 16742 ;;		_setDimmerLights
 16743 ;;		_setDimmerLights_Adj
 16744 ;;		_setDimmerLights_AdjRF
 16745 ;;		_setDimmerLights_Switch
 16746 ;;		_setDimmerLights_AdjGo
 16747 ;;		_setDimmerLights_Trigger
 16748 ;;		_setDimmerLights_TriggerAdj
 16749 ;;		_setDimmerLights_Clear
 16750 ;;		_setDimmerLights_GO
 16751 ;;		_setDimmerLights_MaxmumValue
 16752 ;; This function uses a non-reentrant model
 16753 ;;
 16754                           
 16755                           
 16756                           ;psect for function _DimmerLightsPointSelect
 16757  1C73                     _DimmerLightsPointSelect:	
 16758                           
 16759                           ;incstack = 0
 16760                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16761                           ;DimmerLightsPointSelect@lights stored from wreg
 16762  1C73  0020               	movlb	0	; select bank0
 16763  1C74  00A1               	movwf	DimmerLightsPointSelect@lights
 16764                           
 16765                           ;Dimmer_B1.c: 317: if (lights == 1) {
 16766  1C75  0821               	movf	DimmerLightsPointSelect@lights,w
 16767  1C76  3A01               	xorlw	1
 16768  1C77  1D03               	skipz
 16769  1C78  2C7D               	goto	l820
 16770                           
 16771                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 16772  1C79  303D               	movlw	_DimmerLights1& (0+255)
 16773  1C7A  00A0               	movwf	??_DimmerLightsPointSelect
 16774  1C7B  0820               	movf	??_DimmerLightsPointSelect,w
 16775  1C7C  00F9               	movwf	_DimmerLights
 16776  1C7D                     l820:	
 16777                           
 16778                           ;Dimmer_B1.c: 319: }
 16779                           ;Dimmer_B1.c: 322: if (lights == 2) {
 16780  1C7D  0821               	movf	DimmerLightsPointSelect@lights,w
 16781  1C7E  3A02               	xorlw	2
 16782  1C7F  1D03               	skipz
 16783  1C80  0008               	return
 16784                           
 16785                           ;Dimmer_B1.c: 323: DimmerLights = &DimmerLights2;
 16786  1C81  304C               	movlw	_DimmerLights2& (0+255)
 16787  1C82  00A0               	movwf	??_DimmerLightsPointSelect
 16788  1C83  0820               	movf	??_DimmerLightsPointSelect,w
 16789  1C84  00F9               	movwf	_DimmerLights
 16790  1C85  0008               	return
 16791  1C86                     __end_of_DimmerLightsPointSelect:	
 16792                           
 16793                           	psect	text113
 16794  1689                     __ptext113:	
 16795 ;; *************** function _setBuz *****************
 16796 ;; Defined at:
 16797 ;;		line 22 in file "../src/Buzzer_B1.c"
 16798 ;; Parameters:    Size  Location     Type
 16799 ;;  count           1    wreg     unsigned char 
 16800 ;;  time            2    9[BANK0 ] int 
 16801 ;; Auto vars:     Size  Location     Type
 16802 ;;  count           1   12[BANK0 ] unsigned char 
 16803 ;; Return value:  Size  Location     Type
 16804 ;;		None               void
 16805 ;; Registers used:
 16806 ;;		wreg, status,2, status,0, pclath, cstack
 16807 ;; Tracked objects:
 16808 ;;		On entry : 0/0
 16809 ;;		On exit  : 0/0
 16810 ;;		Unchanged: 0/0
 16811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16812 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16816 ;;Total ram usage:        4 bytes
 16817 ;; Hardware stack levels used:    1
 16818 ;; Hardware stack levels required when called:    6
 16819 ;; This function calls:
 16820 ;;		___awdiv
 16821 ;; This function is called by:
 16822 ;;		_DlyOff_Main
 16823 ;;		_setDimmerLights_Main
 16824 ;;		_DimmerLights_Exceptions
 16825 ;;		_my_Main
 16826 ;;		_setOverTemp_Exceptions
 16827 ;;		_setLog_Code
 16828 ;;		_setControl_Lights_Table
 16829 ;;		_setRFSW_Control
 16830 ;;		_setSw_Main
 16831 ;;		_Sw_DimmerOnFunc
 16832 ;; This function uses a non-reentrant model
 16833 ;;
 16834                           
 16835                           
 16836                           ;psect for function _setBuz
 16837  1689                     _setBuz:	
 16838                           
 16839                           ;incstack = 0
 16840                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16841                           ;setBuz@count stored from wreg
 16842  1689  0020               	movlb	0	; select bank0
 16843  168A  00AC               	movwf	setBuz@count
 16844                           
 16845                           ;Buzzer_B1.c: 23: time /= 10;
 16846  168B  300A               	movlw	10
 16847  168C  00A0               	movwf	___awdiv@divisor
 16848  168D  3000               	movlw	0
 16849  168E  00A1               	movwf	___awdiv@divisor+1
 16850  168F  082A               	movf	setBuz@time+1,w
 16851  1690  01A3               	clrf	___awdiv@dividend+1
 16852  1691  07A3               	addwf	___awdiv@dividend+1,f
 16853  1692  0829               	movf	setBuz@time,w
 16854  1693  01A2               	clrf	___awdiv@dividend
 16855  1694  07A2               	addwf	___awdiv@dividend,f
 16856  1695  3195  2586  3196   	fcall	___awdiv
 16857  1698  0020               	movlb	0	; select bank0
 16858  1699  0821               	movf	?___awdiv+1,w
 16859  169A  01AA               	clrf	setBuz@time+1
 16860  169B  07AA               	addwf	setBuz@time+1,f
 16861  169C  0820               	movf	?___awdiv,w
 16862  169D  01A9               	clrf	setBuz@time
 16863  169E  07A9               	addwf	setBuz@time,f
 16864                           
 16865                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16866  169F  0021               	movlb	1	; select bank1
 16867  16A0  1C32               	btfss	_Buz1^(0+128),0
 16868  16A1  0008               	return
 16869                           
 16870                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16871  16A2  18B2               	btfsc	_Buz1^(0+128),1
 16872  16A3  2EBA               	goto	l102
 16873                           
 16874                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16875  16A4  14B2               	bsf	_Buz1^(0+128),1
 16876                           
 16877                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16878  16A5  01B3               	clrf	(_Buz1^(0+128)+1)
 16879  16A6  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 16880                           
 16881                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16882  16A7  0020               	movlb	0	; select bank0
 16883  16A8  082C               	movf	setBuz@count,w
 16884  16A9  00AB               	movwf	??_setBuz
 16885  16AA  082B               	movf	??_setBuz,w
 16886  16AB  0021               	movlb	1	; select bank1
 16887  16AC  00B5               	movwf	(_Buz1^(0+128)+3)
 16888                           
 16889                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16890  16AD  0020               	movlb	0	; select bank0
 16891  16AE  082A               	movf	setBuz@time+1,w
 16892  16AF  0021               	movlb	1	; select bank1
 16893  16B0  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16894  16B1  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16895  16B2  0020               	movlb	0	; select bank0
 16896  16B3  0829               	movf	setBuz@time,w
 16897  16B4  0021               	movlb	1	; select bank1
 16898  16B5  01B8               	clrf	(_Buz1^(0+128)+6)
 16899  16B6  07B8               	addwf	(_Buz1^(0+128)+6),f
 16900                           
 16901                           ;Buzzer_B1.c: 30: RB3 = 1;
 16902  16B7  0020               	movlb	0	; select bank0
 16903  16B8  158D               	bsf	13,3	;volatile
 16904                           
 16905                           ;Buzzer_B1.c: 31: } else {
 16906  16B9  0008               	return
 16907  16BA                     l102:	
 16908                           
 16909                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16910  16BA  19B2               	btfsc	_Buz1^(0+128),3
 16911  16BB  2ECE               	goto	l104
 16912                           
 16913                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16914  16BC  15B2               	bsf	_Buz1^(0+128),3
 16915                           
 16916                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16917  16BD  0020               	movlb	0	; select bank0
 16918  16BE  082C               	movf	setBuz@count,w
 16919  16BF  00AB               	movwf	??_setBuz
 16920  16C0  082B               	movf	??_setBuz,w
 16921  16C1  0021               	movlb	1	; select bank1
 16922  16C2  00B6               	movwf	(_Buz1^(0+128)+4)
 16923                           
 16924                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16925  16C3  0020               	movlb	0	; select bank0
 16926  16C4  082A               	movf	setBuz@time+1,w
 16927  16C5  0021               	movlb	1	; select bank1
 16928  16C6  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 16929  16C7  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 16930  16C8  0020               	movlb	0	; select bank0
 16931  16C9  0829               	movf	setBuz@time,w
 16932  16CA  0021               	movlb	1	; select bank1
 16933  16CB  01BA               	clrf	(_Buz1^(0+128)+8)
 16934  16CC  07BA               	addwf	(_Buz1^(0+128)+8),f
 16935                           
 16936                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16937  16CD  0008               	return
 16938  16CE                     l104:	
 16939  16CE  1A32               	btfsc	_Buz1^(0+128),4
 16940  16CF  0008               	return
 16941                           
 16942                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16943  16D0  1632               	bsf	_Buz1^(0+128),4
 16944                           
 16945                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16946  16D1  0020               	movlb	0	; select bank0
 16947  16D2  082C               	movf	setBuz@count,w
 16948  16D3  00AB               	movwf	??_setBuz
 16949  16D4  082B               	movf	??_setBuz,w
 16950  16D5  0021               	movlb	1	; select bank1
 16951  16D6  00B7               	movwf	(_Buz1^(0+128)+5)
 16952                           
 16953                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16954  16D7  0020               	movlb	0	; select bank0
 16955  16D8  082A               	movf	setBuz@time+1,w
 16956  16D9  0021               	movlb	1	; select bank1
 16957  16DA  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 16958  16DB  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 16959  16DC  0020               	movlb	0	; select bank0
 16960  16DD  0829               	movf	setBuz@time,w
 16961  16DE  0021               	movlb	1	; select bank1
 16962  16DF  01BC               	clrf	(_Buz1^(0+128)+10)
 16963  16E0  07BC               	addwf	(_Buz1^(0+128)+10),f
 16964  16E1  0008               	return
 16965  16E2                     __end_of_setBuz:	
 16966                           
 16967                           	psect	text114
 16968  1586                     __ptext114:	
 16969 ;; *************** function ___awdiv *****************
 16970 ;; Defined at:
 16971 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16972 ;; Parameters:    Size  Location     Type
 16973 ;;  divisor         2    0[BANK0 ] int 
 16974 ;;  dividend        2    2[BANK0 ] int 
 16975 ;; Auto vars:     Size  Location     Type
 16976 ;;  quotient        2    7[BANK0 ] int 
 16977 ;;  sign            1    6[BANK0 ] unsigned char 
 16978 ;;  counter         1    5[BANK0 ] unsigned char 
 16979 ;; Return value:  Size  Location     Type
 16980 ;;                  2    0[BANK0 ] int 
 16981 ;; Registers used:
 16982 ;;		wreg, status,2, status,0
 16983 ;; Tracked objects:
 16984 ;;		On entry : 0/0
 16985 ;;		On exit  : 0/0
 16986 ;;		Unchanged: 0/0
 16987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16988 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16989 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16991 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16992 ;;Total ram usage:        9 bytes
 16993 ;; Hardware stack levels used:    1
 16994 ;; Hardware stack levels required when called:    5
 16995 ;; This function calls:
 16996 ;;		Nothing
 16997 ;; This function is called by:
 16998 ;;		_setBuz
 16999 ;; This function uses a non-reentrant model
 17000 ;;
 17001                           
 17002                           
 17003                           ;psect for function ___awdiv
 17004  1586                     ___awdiv:	
 17005                           
 17006                           ;incstack = 0
 17007                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17008  1586  0020               	movlb	0	; select bank0
 17009  1587  01A6               	clrf	___awdiv@sign
 17010  1588  1FA1               	btfss	___awdiv@divisor+1,7
 17011  1589  2D91               	goto	l8696
 17012  158A  09A0               	comf	___awdiv@divisor,f
 17013  158B  09A1               	comf	___awdiv@divisor+1,f
 17014  158C  0AA0               	incf	___awdiv@divisor,f
 17015  158D  1903               	skipnz
 17016  158E  0AA1               	incf	___awdiv@divisor+1,f
 17017  158F  01A6               	clrf	___awdiv@sign
 17018  1590  0AA6               	incf	___awdiv@sign,f
 17019  1591                     l8696:	
 17020  1591  1FA3               	btfss	___awdiv@dividend+1,7
 17021  1592  2D9C               	goto	l8702
 17022  1593  09A2               	comf	___awdiv@dividend,f
 17023  1594  09A3               	comf	___awdiv@dividend+1,f
 17024  1595  0AA2               	incf	___awdiv@dividend,f
 17025  1596  1903               	skipnz
 17026  1597  0AA3               	incf	___awdiv@dividend+1,f
 17027  1598  3001               	movlw	1
 17028  1599  00A4               	movwf	??___awdiv
 17029  159A  0824               	movf	??___awdiv,w
 17030  159B  06A6               	xorwf	___awdiv@sign,f
 17031  159C                     l8702:	
 17032  159C  01A7               	clrf	___awdiv@quotient
 17033  159D  01A8               	clrf	___awdiv@quotient+1
 17034  159E  0821               	movf	___awdiv@divisor+1,w
 17035  159F  0420               	iorwf	___awdiv@divisor,w
 17036  15A0  1903               	skipnz
 17037  15A1  2DCB               	goto	l8724
 17038  15A2  01A5               	clrf	___awdiv@counter
 17039  15A3  0AA5               	incf	___awdiv@counter,f
 17040  15A4                     l8712:	
 17041  15A4  1BA1               	btfsc	___awdiv@divisor+1,7
 17042  15A5  2DB0               	goto	l8714
 17043  15A6  3001               	movlw	1
 17044  15A7                     u9005:	
 17045  15A7  35A0               	lslf	___awdiv@divisor,f
 17046  15A8  0DA1               	rlf	___awdiv@divisor+1,f
 17047  15A9  0B89               	decfsz	9,f
 17048  15AA  2DA7               	goto	u9005
 17049  15AB  3001               	movlw	1
 17050  15AC  00A4               	movwf	??___awdiv
 17051  15AD  0824               	movf	??___awdiv,w
 17052  15AE  07A5               	addwf	___awdiv@counter,f
 17053  15AF  2DA4               	goto	l8712
 17054  15B0                     l8714:	
 17055  15B0  3001               	movlw	1
 17056  15B1                     u9025:	
 17057  15B1  35A7               	lslf	___awdiv@quotient,f
 17058  15B2  0DA8               	rlf	___awdiv@quotient+1,f
 17059  15B3  0B89               	decfsz	9,f
 17060  15B4  2DB1               	goto	u9025
 17061  15B5  0821               	movf	___awdiv@divisor+1,w
 17062  15B6  0223               	subwf	___awdiv@dividend+1,w
 17063  15B7  1D03               	skipz
 17064  15B8  2DBB               	goto	u9035
 17065  15B9  0820               	movf	___awdiv@divisor,w
 17066  15BA  0222               	subwf	___awdiv@dividend,w
 17067  15BB                     u9035:	
 17068  15BB  1C03               	skipc
 17069  15BC  2DC2               	goto	l8720
 17070  15BD  0820               	movf	___awdiv@divisor,w
 17071  15BE  02A2               	subwf	___awdiv@dividend,f
 17072  15BF  0821               	movf	___awdiv@divisor+1,w
 17073  15C0  3BA3               	subwfb	___awdiv@dividend+1,f
 17074  15C1  1427               	bsf	___awdiv@quotient,0
 17075  15C2                     l8720:	
 17076  15C2  3001               	movlw	1
 17077  15C3                     u9045:	
 17078  15C3  36A1               	lsrf	___awdiv@divisor+1,f
 17079  15C4  0CA0               	rrf	___awdiv@divisor,f
 17080  15C5  0B89               	decfsz	9,f
 17081  15C6  2DC3               	goto	u9045
 17082  15C7  3001               	movlw	1
 17083  15C8  02A5               	subwf	___awdiv@counter,f
 17084  15C9  1D03               	btfss	3,2
 17085  15CA  2DB0               	goto	l8714
 17086  15CB                     l8724:	
 17087  15CB  0826               	movf	___awdiv@sign,w
 17088  15CC  1903               	btfsc	3,2
 17089  15CD  2DD3               	goto	l8728
 17090  15CE  09A7               	comf	___awdiv@quotient,f
 17091  15CF  09A8               	comf	___awdiv@quotient+1,f
 17092  15D0  0AA7               	incf	___awdiv@quotient,f
 17093  15D1  1903               	skipnz
 17094  15D2  0AA8               	incf	___awdiv@quotient+1,f
 17095  15D3                     l8728:	
 17096  15D3  0828               	movf	___awdiv@quotient+1,w
 17097  15D4  01A1               	clrf	?___awdiv+1
 17098  15D5  07A1               	addwf	?___awdiv+1,f
 17099  15D6  0827               	movf	___awdiv@quotient,w
 17100  15D7  01A0               	clrf	?___awdiv
 17101  15D8  07A0               	addwf	?___awdiv,f
 17102  15D9  0008               	return
 17103  15DA                     __end_of___awdiv:	
 17104                           
 17105                           	psect	text115
 17106  1A71                     __ptext115:	
 17107 ;; *************** function _DelayOff_Initialization *****************
 17108 ;; Defined at:
 17109 ;;		line 26 in file "../src/DelayOff_B1.c"
 17110 ;; Parameters:    Size  Location     Type
 17111 ;;		None
 17112 ;; Auto vars:     Size  Location     Type
 17113 ;;		None
 17114 ;; Return value:  Size  Location     Type
 17115 ;;		None               void
 17116 ;; Registers used:
 17117 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17118 ;; Tracked objects:
 17119 ;;		On entry : 0/0
 17120 ;;		On exit  : 0/0
 17121 ;;		Unchanged: 0/0
 17122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17127 ;;Total ram usage:        0 bytes
 17128 ;; Hardware stack levels used:    1
 17129 ;; Hardware stack levels required when called:    7
 17130 ;; This function calls:
 17131 ;;		_DlyOff_Initialization
 17132 ;; This function is called by:
 17133 ;;		_main
 17134 ;; This function uses a non-reentrant model
 17135 ;;
 17136                           
 17137                           
 17138                           ;psect for function _DelayOff_Initialization
 17139  1A71                     _DelayOff_Initialization:	
 17140                           
 17141                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17142                           
 17143                           ;incstack = 0
 17144                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 17145  1A71  3001               	movlw	1
 17146  1A72  319A  22D3  319A   	fcall	_DlyOff_Initialization
 17147                           
 17148                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17149  1A75  3002               	movlw	2
 17150  1A76  319A  22D3         	fcall	_DlyOff_Initialization
 17151  1A78  0008               	return
 17152  1A79                     __end_of_DelayOff_Initialization:	
 17153                           
 17154                           	psect	text116
 17155  1AD3                     __ptext116:	
 17156 ;; *************** function _DlyOff_Initialization *****************
 17157 ;; Defined at:
 17158 ;;		line 56 in file "../src/DelayOff_B1.c"
 17159 ;; Parameters:    Size  Location     Type
 17160 ;;  sw              1    wreg     unsigned char 
 17161 ;; Auto vars:     Size  Location     Type
 17162 ;;  sw              1    2[BANK0 ] unsigned char 
 17163 ;; Return value:  Size  Location     Type
 17164 ;;		None               void
 17165 ;; Registers used:
 17166 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17167 ;; Tracked objects:
 17168 ;;		On entry : 0/0
 17169 ;;		On exit  : 0/0
 17170 ;;		Unchanged: 0/0
 17171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17175 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17176 ;;Total ram usage:        1 bytes
 17177 ;; Hardware stack levels used:    1
 17178 ;; Hardware stack levels required when called:    6
 17179 ;; This function calls:
 17180 ;;		_DelayOffPointSelect
 17181 ;; This function is called by:
 17182 ;;		_DelayOff_Initialization
 17183 ;; This function uses a non-reentrant model
 17184 ;;
 17185                           
 17186                           
 17187                           ;psect for function _DlyOff_Initialization
 17188  1AD3                     _DlyOff_Initialization:	
 17189                           
 17190                           ;incstack = 0
 17191                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17192                           ;DlyOff_Initialization@sw stored from wreg
 17193  1AD3  0020               	movlb	0	; select bank0
 17194  1AD4  00A2               	movwf	DlyOff_Initialization@sw
 17195                           
 17196                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17197  1AD5  0822               	movf	DlyOff_Initialization@sw,w
 17198  1AD6  319C  24AE         	fcall	_DelayOffPointSelect
 17199                           
 17200                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 17201  1AD8  0878               	movf	_DelayOff,w
 17202  1AD9  0086               	movwf	6
 17203  1ADA  3001               	movlw	1	; select bank2/3
 17204  1ADB  0087               	movwf	7
 17205  1ADC  1401               	bsf	1,0
 17206  1ADD  0008               	return
 17207  1ADE                     __end_of_DlyOff_Initialization:	
 17208                           
 17209                           	psect	text117
 17210  1CAE                     __ptext117:	
 17211 ;; *************** function _DelayOffPointSelect *****************
 17212 ;; Defined at:
 17213 ;;		line 7 in file "../src/DelayOff_B1.c"
 17214 ;; Parameters:    Size  Location     Type
 17215 ;;  sw              1    wreg     unsigned char 
 17216 ;; Auto vars:     Size  Location     Type
 17217 ;;  sw              1    1[BANK0 ] unsigned char 
 17218 ;; Return value:  Size  Location     Type
 17219 ;;		None               void
 17220 ;; Registers used:
 17221 ;;		wreg
 17222 ;; Tracked objects:
 17223 ;;		On entry : 0/0
 17224 ;;		On exit  : 0/0
 17225 ;;		Unchanged: 0/0
 17226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17230 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17231 ;;Total ram usage:        2 bytes
 17232 ;; Hardware stack levels used:    1
 17233 ;; Hardware stack levels required when called:    5
 17234 ;; This function calls:
 17235 ;;		Nothing
 17236 ;; This function is called by:
 17237 ;;		_DlyOff_Initialization
 17238 ;;		_DlyOff_Main
 17239 ;;		_setDelayOff_GO
 17240 ;; This function uses a non-reentrant model
 17241 ;;
 17242                           
 17243                           
 17244                           ;psect for function _DelayOffPointSelect
 17245  1CAE                     _DelayOffPointSelect:	
 17246                           
 17247                           ;incstack = 0
 17248                           ; Regs used in _DelayOffPointSelect: [wreg]
 17249                           ;DelayOffPointSelect@sw stored from wreg
 17250  1CAE  0020               	movlb	0	; select bank0
 17251  1CAF  00A1               	movwf	DelayOffPointSelect@sw
 17252                           
 17253                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17254  1CB0  0821               	movf	DelayOffPointSelect@sw,w
 17255  1CB1  3A01               	xorlw	1
 17256  1CB2  1D03               	skipz
 17257  1CB3  2CB9               	goto	l8626
 17258                           
 17259                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17260  1CB4  305B               	movlw	_DlySw1& (0+255)
 17261  1CB5  00A0               	movwf	??_DelayOffPointSelect
 17262  1CB6  0820               	movf	??_DelayOffPointSelect,w
 17263  1CB7  00F8               	movwf	_DelayOff
 17264                           
 17265                           ;DelayOff_B1.c: 11: }
 17266  1CB8  0008               	return
 17267  1CB9                     l8626:	
 17268                           
 17269                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17270  1CB9  0821               	movf	DelayOffPointSelect@sw,w
 17271  1CBA  3A02               	xorlw	2
 17272  1CBB  1D03               	skipz
 17273  1CBC  0008               	return
 17274                           
 17275                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17276  1CBD  3060               	movlw	_DlySw2& (0+255)
 17277  1CBE  00A0               	movwf	??_DelayOffPointSelect
 17278  1CBF  0820               	movf	??_DelayOffPointSelect,w
 17279  1CC0  00F8               	movwf	_DelayOff
 17280  1CC1  0008               	return
 17281  1CC2                     __end_of_DelayOffPointSelect:	
 17282                           
 17283                           	psect	text118
 17284  07EB                     __ptext118:	
 17285 ;; *************** function _CC2500_PowerOnInitial *****************
 17286 ;; Defined at:
 17287 ;;		line 124 in file "../src/CC2500_B1.c"
 17288 ;; Parameters:    Size  Location     Type
 17289 ;;		None
 17290 ;; Auto vars:     Size  Location     Type
 17291 ;;		None
 17292 ;; Return value:  Size  Location     Type
 17293 ;;		None               void
 17294 ;; Registers used:
 17295 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17296 ;; Tracked objects:
 17297 ;;		On entry : 0/0
 17298 ;;		On exit  : 0/0
 17299 ;;		Unchanged: 0/0
 17300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17305 ;;Total ram usage:        0 bytes
 17306 ;; Hardware stack levels used:    1
 17307 ;; Hardware stack levels required when called:    8
 17308 ;; This function calls:
 17309 ;;		_CC2500_ClearRXFIFO
 17310 ;;		_CC2500_ClearTXFIFO
 17311 ;;		_CC2500_FrequencyCabr
 17312 ;;		_CC2500_InitPATable
 17313 ;;		_CC2500_InitSetREG
 17314 ;;		_CC2500_PowerRST
 17315 ;;		_CC2500_SIDLEMode
 17316 ;; This function is called by:
 17317 ;;		_main
 17318 ;; This function uses a non-reentrant model
 17319 ;;
 17320                           
 17321                           
 17322                           ;psect for function _CC2500_PowerOnInitial
 17323  07EB                     _CC2500_PowerOnInitial:	
 17324                           
 17325                           ;CC2500_B1.c: 125: CC2500_PowerRST();
 17326                           
 17327                           ;incstack = 0
 17328                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17329  07EB  3192  22B8  3187   	fcall	_CC2500_PowerRST
 17330                           
 17331                           ;CC2500_B1.c: 126: CC2500_InitSetREG();
 17332  07EE  319F  27D6  3187   	fcall	_CC2500_InitSetREG
 17333                           
 17334                           ;CC2500_B1.c: 127: CC2500_InitPATable();
 17335  07F1  319E  261F  3187   	fcall	_CC2500_InitPATable
 17336                           
 17337                           ;CC2500_B1.c: 128: CC2500_ClearTXFIFO();
 17338  07F4  319A  2232  3187   	fcall	_CC2500_ClearTXFIFO
 17339                           
 17340                           ;CC2500_B1.c: 129: CC2500_ClearRXFIFO();
 17341  07F7  319A  222E  3187   	fcall	_CC2500_ClearRXFIFO
 17342                           
 17343                           ;CC2500_B1.c: 130: CC2500_FrequencyCabr();
 17344  07FA  319A  22F4  3187   	fcall	_CC2500_FrequencyCabr
 17345                           
 17346                           ;CC2500_B1.c: 131: CC2500_SIDLEMode();
 17347  07FD  319A  2236         	fcall	_CC2500_SIDLEMode
 17348  07FF  0008               	return
 17349  0800                     __end_of_CC2500_PowerOnInitial:	
 17350                           
 17351                           	psect	text119
 17352  1A36                     __ptext119:	
 17353 ;; *************** function _CC2500_SIDLEMode *****************
 17354 ;; Defined at:
 17355 ;;		line 214 in file "../src/CC2500_B1.c"
 17356 ;; Parameters:    Size  Location     Type
 17357 ;;		None
 17358 ;; Auto vars:     Size  Location     Type
 17359 ;;		None
 17360 ;; Return value:  Size  Location     Type
 17361 ;;		None               void
 17362 ;; Registers used:
 17363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17364 ;; Tracked objects:
 17365 ;;		On entry : 0/0
 17366 ;;		On exit  : 0/0
 17367 ;;		Unchanged: 0/0
 17368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17373 ;;Total ram usage:        0 bytes
 17374 ;; Hardware stack levels used:    1
 17375 ;; Hardware stack levels required when called:    7
 17376 ;; This function calls:
 17377 ;;		_CC2500_WriteCommand
 17378 ;; This function is called by:
 17379 ;;		_CC2500_PowerOnInitial
 17380 ;; This function uses a non-reentrant model
 17381 ;;
 17382                           
 17383                           
 17384                           ;psect for function _CC2500_SIDLEMode
 17385  1A36                     _CC2500_SIDLEMode:	
 17386                           
 17387                           ;CC2500_B1.c: 215: CC2500_WriteCommand(0x36);
 17388                           
 17389                           ;incstack = 0
 17390                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17391  1A36  3036               	movlw	54
 17392  1A37  319D  2576         	fcall	_CC2500_WriteCommand
 17393  1A39  0008               	return
 17394  1A3A                     __end_of_CC2500_SIDLEMode:	
 17395                           
 17396                           	psect	text120
 17397  12B8                     __ptext120:	
 17398 ;; *************** function _CC2500_PowerRST *****************
 17399 ;; Defined at:
 17400 ;;		line 137 in file "../src/CC2500_B1.c"
 17401 ;; Parameters:    Size  Location     Type
 17402 ;;		None
 17403 ;; Auto vars:     Size  Location     Type
 17404 ;;		None
 17405 ;; Return value:  Size  Location     Type
 17406 ;;		None               void
 17407 ;; Registers used:
 17408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17409 ;; Tracked objects:
 17410 ;;		On entry : 0/0
 17411 ;;		On exit  : 0/0
 17412 ;;		Unchanged: 0/0
 17413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17416 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17417 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17418 ;;Total ram usage:        1 bytes
 17419 ;; Hardware stack levels used:    1
 17420 ;; Hardware stack levels required when called:    6
 17421 ;; This function calls:
 17422 ;;		_CC2500_WriteByte
 17423 ;;		_DelayTime_1us
 17424 ;;		_Timeout_Counter
 17425 ;;		_set_TimeoutCleared
 17426 ;; This function is called by:
 17427 ;;		_CC2500_PowerOnInitial
 17428 ;; This function uses a non-reentrant model
 17429 ;;
 17430                           
 17431                           
 17432                           ;psect for function _CC2500_PowerRST
 17433  12B8                     _CC2500_PowerRST:	
 17434                           
 17435                           ;CC2500_B1.c: 138: RC1 = 0;
 17436                           
 17437                           ;incstack = 0
 17438                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17439  12B8  0020               	movlb	0	; select bank0
 17440  12B9  108E               	bcf	14,1	;volatile
 17441                           
 17442                           ;CC2500_B1.c: 139: RC0 = 0;
 17443  12BA  100E               	bcf	14,0	;volatile
 17444                           
 17445                           ;CC2500_B1.c: 140: RC4 = 1;
 17446  12BB  160E               	bsf	14,4	;volatile
 17447                           
 17448                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 17449  12BC  300A               	movlw	10
 17450  12BD  00A0               	movwf	DelayTime_1us@count
 17451  12BE  3000               	movlw	0
 17452  12BF  00A1               	movwf	DelayTime_1us@count+1
 17453  12C0  319F  2789  3192   	fcall	_DelayTime_1us
 17454                           
 17455                           ;CC2500_B1.c: 142: RC4 = 0;
 17456  12C3  0020               	movlb	0	; select bank0
 17457  12C4  120E               	bcf	14,4	;volatile
 17458                           
 17459                           ;CC2500_B1.c: 143: DelayTime_1us(10);
 17460  12C5  300A               	movlw	10
 17461  12C6  00A0               	movwf	DelayTime_1us@count
 17462  12C7  3000               	movlw	0
 17463  12C8  00A1               	movwf	DelayTime_1us@count+1
 17464  12C9  319F  2789  3192   	fcall	_DelayTime_1us
 17465                           
 17466                           ;CC2500_B1.c: 144: RC4 = 1;
 17467  12CC  0020               	movlb	0	; select bank0
 17468  12CD  160E               	bsf	14,4	;volatile
 17469                           
 17470                           ;CC2500_B1.c: 145: DelayTime_1us(40);
 17471  12CE  3028               	movlw	40
 17472  12CF  00A0               	movwf	DelayTime_1us@count
 17473  12D0  3000               	movlw	0
 17474  12D1  00A1               	movwf	DelayTime_1us@count+1
 17475  12D2  319F  2789  3192   	fcall	_DelayTime_1us
 17476                           
 17477                           ;CC2500_B1.c: 146: RC4 = 0;
 17478  12D5  0020               	movlb	0	; select bank0
 17479  12D6  120E               	bcf	14,4	;volatile
 17480                           
 17481                           ;CC2500_B1.c: 147: SPI0Buffer = 0x30;
 17482  12D7  3030               	movlw	48
 17483  12D8  00A6               	movwf	??_CC2500_PowerRST
 17484  12D9  0826               	movf	??_CC2500_PowerRST,w
 17485  12DA  00FB               	movwf	_SPI0Buffer
 17486                           
 17487                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17488  12DB  2ADF               	goto	l7136
 17489  12DC                     l7134:	
 17490                           
 17491                           ;CC2500_B1.c: 149: Timeout_Counter();
 17492  12DC  319C  24C2  3192   	fcall	_Timeout_Counter
 17493  12DF                     l7136:	
 17494  12DF  0020               	movlb	0	; select bank0
 17495  12E0  1D0E               	btfss	14,2	;volatile
 17496  12E1  2AE5               	goto	l7140
 17497  12E2  0021               	movlb	1	; select bank1
 17498  12E3  1D2F               	btfss	(_myMain^(0+128)+15),2
 17499  12E4  2ADC               	goto	l7134
 17500  12E5                     l7140:	
 17501                           
 17502                           ;CC2500_B1.c: 150: };
 17503                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17504  12E5  319A  223E  3192   	fcall	_set_TimeoutCleared
 17505                           
 17506                           ;CC2500_B1.c: 152: CC2500_WriteByte();
 17507  12E8  319C  249A  3192   	fcall	_CC2500_WriteByte
 17508                           
 17509                           ;CC2500_B1.c: 153: while (RC2 == 1 && myMain.Timeout == 0) {
 17510  12EB  2AEF               	goto	l7146
 17511  12EC                     l7144:	
 17512                           
 17513                           ;CC2500_B1.c: 154: Timeout_Counter();
 17514  12EC  319C  24C2  3192   	fcall	_Timeout_Counter
 17515  12EF                     l7146:	
 17516  12EF  0020               	movlb	0	; select bank0
 17517  12F0  1D0E               	btfss	14,2	;volatile
 17518  12F1  2AF5               	goto	l7150
 17519  12F2  0021               	movlb	1	; select bank1
 17520  12F3  1D2F               	btfss	(_myMain^(0+128)+15),2
 17521  12F4  2AEC               	goto	l7144
 17522  12F5                     l7150:	
 17523                           
 17524                           ;CC2500_B1.c: 155: };
 17525                           ;CC2500_B1.c: 156: set_TimeoutCleared();
 17526  12F5  319A  223E         	fcall	_set_TimeoutCleared
 17527                           
 17528                           ;CC2500_B1.c: 157: RC0 = 0;
 17529  12F7  0020               	movlb	0	; select bank0
 17530  12F8  100E               	bcf	14,0	;volatile
 17531                           
 17532                           ;CC2500_B1.c: 158: RC4 = 1;
 17533  12F9  160E               	bsf	14,4	;volatile
 17534  12FA  0008               	return
 17535  12FB                     __end_of_CC2500_PowerRST:	
 17536                           
 17537                           	psect	text121
 17538  1FD6                     __ptext121:	
 17539 ;; *************** function _CC2500_InitSetREG *****************
 17540 ;; Defined at:
 17541 ;;		line 164 in file "../src/CC2500_B1.c"
 17542 ;; Parameters:    Size  Location     Type
 17543 ;;		None
 17544 ;; Auto vars:     Size  Location     Type
 17545 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17546 ;;  temp2           1    7[BANK0 ] unsigned char 
 17547 ;;  temp1           1    6[BANK0 ] unsigned char 
 17548 ;; Return value:  Size  Location     Type
 17549 ;;		None               void
 17550 ;; Registers used:
 17551 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17552 ;; Tracked objects:
 17553 ;;		On entry : 0/0
 17554 ;;		On exit  : 0/0
 17555 ;;		Unchanged: 0/0
 17556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17558 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17560 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17561 ;;Total ram usage:        4 bytes
 17562 ;; Hardware stack levels used:    1
 17563 ;; Hardware stack levels required when called:    7
 17564 ;; This function calls:
 17565 ;;		_CC2500_WriteREG
 17566 ;; This function is called by:
 17567 ;;		_CC2500_PowerOnInitial
 17568 ;; This function uses a non-reentrant model
 17569 ;;
 17570                           
 17571                           
 17572                           ;psect for function _CC2500_InitSetREG
 17573  1FD6                     _CC2500_InitSetREG:	
 17574                           
 17575                           ;CC2500_B1.c: 165: unsigned char loop_c;
 17576                           ;CC2500_B1.c: 166: unsigned char temp1, temp2;
 17577                           ;CC2500_B1.c: 168: for (loop_c = 0; loop_c < 47; loop_c++) {
 17578                           
 17579                           ;incstack = 0
 17580                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17581  1FD6  0020               	movlb	0	; select bank0
 17582  1FD7  01A8               	clrf	CC2500_InitSetREG@loop_c
 17583  1FD8                     L10:	
 17584  1FD8  302F               	movlw	47
 17585  1FD9  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17586  1FDA  1803               	btfsc	3,0
 17587  1FDB  0008               	return
 17588                           
 17589                           ;CC2500_B1.c: 169: temp1 = CC2500_registers_address[loop_c];
 17590  1FDC  0828               	movf	CC2500_InitSetREG@loop_c,w
 17591  1FDD  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17592  1FDE  0084               	movwf	4
 17593  1FDF  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17594  1FE0  1803               	skipnc
 17595  1FE1  3E01               	addlw	1
 17596  1FE2  0085               	movwf	5
 17597  1FE3  0800               	movf	0,w	;code access
 17598  1FE4  00A5               	movwf	??_CC2500_InitSetREG
 17599  1FE5  0825               	movf	??_CC2500_InitSetREG,w
 17600  1FE6  00A6               	movwf	CC2500_InitSetREG@temp1
 17601                           
 17602                           ;CC2500_B1.c: 170: temp2 = CC2500_rfSettings[loop_c];
 17603  1FE7  0828               	movf	CC2500_InitSetREG@loop_c,w
 17604  1FE8  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17605  1FE9  0084               	movwf	4
 17606  1FEA  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17607  1FEB  1803               	skipnc
 17608  1FEC  3E01               	addlw	1
 17609  1FED  0085               	movwf	5
 17610  1FEE  0800               	movf	0,w	;code access
 17611  1FEF  00A5               	movwf	??_CC2500_InitSetREG
 17612  1FF0  0825               	movf	??_CC2500_InitSetREG,w
 17613  1FF1  00A7               	movwf	CC2500_InitSetREG@temp2
 17614                           
 17615                           ;CC2500_B1.c: 172: CC2500_WriteREG(temp1, temp2);
 17616  1FF2  0827               	movf	CC2500_InitSetREG@temp2,w
 17617  1FF3  00A5               	movwf	??_CC2500_InitSetREG
 17618  1FF4  0825               	movf	??_CC2500_InitSetREG,w
 17619  1FF5  00A2               	movwf	CC2500_WriteREG@value
 17620  1FF6  0826               	movf	CC2500_InitSetREG@temp1,w
 17621  1FF7  319E  26BC  319F   	fcall	_CC2500_WriteREG
 17622  1FFA  3001               	movlw	1
 17623  1FFB  0020               	movlb	0	; select bank0
 17624  1FFC  00A5               	movwf	??_CC2500_InitSetREG
 17625  1FFD  0825               	movf	??_CC2500_InitSetREG,w
 17626  1FFE  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17627  1FFF  2FD8               	goto	L10
 17628  2000                     __end_of_CC2500_InitSetREG:	
 17629                           
 17630                           	psect	text122
 17631  1E1F                     __ptext122:	
 17632 ;; *************** function _CC2500_InitPATable *****************
 17633 ;; Defined at:
 17634 ;;		line 179 in file "../src/CC2500_B1.c"
 17635 ;; Parameters:    Size  Location     Type
 17636 ;;		None
 17637 ;; Auto vars:     Size  Location     Type
 17638 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17639 ;;  temp            1    6[BANK0 ] unsigned char 
 17640 ;; Return value:  Size  Location     Type
 17641 ;;		None               void
 17642 ;; Registers used:
 17643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17644 ;; Tracked objects:
 17645 ;;		On entry : 0/0
 17646 ;;		On exit  : 0/0
 17647 ;;		Unchanged: 0/0
 17648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17650 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17651 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17652 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17653 ;;Total ram usage:        3 bytes
 17654 ;; Hardware stack levels used:    1
 17655 ;; Hardware stack levels required when called:    7
 17656 ;; This function calls:
 17657 ;;		_CC2500_WriteREG
 17658 ;; This function is called by:
 17659 ;;		_CC2500_PowerOnInitial
 17660 ;; This function uses a non-reentrant model
 17661 ;;
 17662                           
 17663                           
 17664                           ;psect for function _CC2500_InitPATable
 17665  1E1F                     _CC2500_InitPATable:	
 17666                           
 17667                           ;CC2500_B1.c: 180: unsigned char loop_d;
 17668                           ;CC2500_B1.c: 181: unsigned char temp;
 17669                           ;CC2500_B1.c: 183: for (loop_d = 0; loop_d < 8; loop_d++) {
 17670                           
 17671                           ;incstack = 0
 17672                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17673  1E1F  0020               	movlb	0	; select bank0
 17674  1E20  01A7               	clrf	CC2500_InitPATable@loop_d
 17675  1E21                     L11:	
 17676  1E21  3008               	movlw	8
 17677  1E22  0227               	subwf	CC2500_InitPATable@loop_d,w
 17678  1E23  1803               	btfsc	3,0
 17679  1E24  0008               	return
 17680                           
 17681                           ;CC2500_B1.c: 184: temp = CC2500_patable_vaule[loop_d];
 17682  1E25  0827               	movf	CC2500_InitPATable@loop_d,w
 17683  1E26  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17684  1E27  0084               	movwf	4
 17685  1E28  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17686  1E29  1803               	skipnc
 17687  1E2A  3E01               	addlw	1
 17688  1E2B  0085               	movwf	5
 17689  1E2C  0800               	movf	0,w	;code access
 17690  1E2D  00A5               	movwf	??_CC2500_InitPATable
 17691  1E2E  0825               	movf	??_CC2500_InitPATable,w
 17692  1E2F  00A6               	movwf	CC2500_InitPATable@temp
 17693                           
 17694                           ;CC2500_B1.c: 185: CC2500_WriteREG(0x3E, temp);
 17695  1E30  0826               	movf	CC2500_InitPATable@temp,w
 17696  1E31  00A5               	movwf	??_CC2500_InitPATable
 17697  1E32  0825               	movf	??_CC2500_InitPATable,w
 17698  1E33  00A2               	movwf	CC2500_WriteREG@value
 17699  1E34  303E               	movlw	62
 17700  1E35  319E  26BC  319E   	fcall	_CC2500_WriteREG
 17701  1E38  3001               	movlw	1
 17702  1E39  0020               	movlb	0	; select bank0
 17703  1E3A  00A5               	movwf	??_CC2500_InitPATable
 17704  1E3B  0825               	movf	??_CC2500_InitPATable,w
 17705  1E3C  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17706  1E3D  2E21               	goto	L11
 17707  1E3E                     __end_of_CC2500_InitPATable:	
 17708                           
 17709                           	psect	text123
 17710  1EBC                     __ptext123:	
 17711 ;; *************** function _CC2500_WriteREG *****************
 17712 ;; Defined at:
 17713 ;;		line 256 in file "../src/CC2500_B1.c"
 17714 ;; Parameters:    Size  Location     Type
 17715 ;;  w_addr          1    wreg     unsigned char 
 17716 ;;  value           1    2[BANK0 ] unsigned char 
 17717 ;; Auto vars:     Size  Location     Type
 17718 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17719 ;; Return value:  Size  Location     Type
 17720 ;;		None               void
 17721 ;; Registers used:
 17722 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17723 ;; Tracked objects:
 17724 ;;		On entry : 0/0
 17725 ;;		On exit  : 0/0
 17726 ;;		Unchanged: 0/0
 17727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17728 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17731 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17732 ;;Total ram usage:        3 bytes
 17733 ;; Hardware stack levels used:    1
 17734 ;; Hardware stack levels required when called:    6
 17735 ;; This function calls:
 17736 ;;		_CC2500_WriteByte
 17737 ;;		_Timeout_Counter
 17738 ;;		_set_TimeoutCleared
 17739 ;; This function is called by:
 17740 ;;		_CC2500_InitSetREG
 17741 ;;		_CC2500_InitPATable
 17742 ;; This function uses a non-reentrant model
 17743 ;;
 17744                           
 17745                           
 17746                           ;psect for function _CC2500_WriteREG
 17747  1EBC                     _CC2500_WriteREG:	
 17748                           
 17749                           ;incstack = 0
 17750                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17751                           ;CC2500_WriteREG@w_addr stored from wreg
 17752  1EBC  0020               	movlb	0	; select bank0
 17753  1EBD  00A4               	movwf	CC2500_WriteREG@w_addr
 17754                           
 17755                           ;CC2500_B1.c: 257: RC4 = 0;
 17756  1EBE  120E               	bcf	14,4	;volatile
 17757                           
 17758                           ;CC2500_B1.c: 258: SPI0Buffer = w_addr;
 17759  1EBF  0824               	movf	CC2500_WriteREG@w_addr,w
 17760  1EC0  00A3               	movwf	??_CC2500_WriteREG
 17761  1EC1  0823               	movf	??_CC2500_WriteREG,w
 17762  1EC2  00FB               	movwf	_SPI0Buffer
 17763                           
 17764                           ;CC2500_B1.c: 259: while (RC2 == 1 && myMain.Timeout == 0) {
 17765  1EC3  2EC7               	goto	l6854
 17766  1EC4                     l6852:	
 17767                           
 17768                           ;CC2500_B1.c: 260: Timeout_Counter();
 17769  1EC4  319C  24C2  319E   	fcall	_Timeout_Counter
 17770  1EC7                     l6854:	
 17771  1EC7  0020               	movlb	0	; select bank0
 17772  1EC8  1D0E               	btfss	14,2	;volatile
 17773  1EC9  2ECD               	goto	l6858
 17774  1ECA  0021               	movlb	1	; select bank1
 17775  1ECB  1D2F               	btfss	(_myMain^(0+128)+15),2
 17776  1ECC  2EC4               	goto	l6852
 17777  1ECD                     l6858:	
 17778                           
 17779                           ;CC2500_B1.c: 261: };
 17780                           ;CC2500_B1.c: 262: set_TimeoutCleared();
 17781  1ECD  319A  223E  319E   	fcall	_set_TimeoutCleared
 17782                           
 17783                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17784  1ED0  319C  249A  319E   	fcall	_CC2500_WriteByte
 17785                           
 17786                           ;CC2500_B1.c: 265: SPI0Buffer = value;
 17787  1ED3  0020               	movlb	0	; select bank0
 17788  1ED4  0822               	movf	CC2500_WriteREG@value,w
 17789  1ED5  00A3               	movwf	??_CC2500_WriteREG
 17790  1ED6  0823               	movf	??_CC2500_WriteREG,w
 17791  1ED7  00FB               	movwf	_SPI0Buffer
 17792                           
 17793                           ;CC2500_B1.c: 266: CC2500_WriteByte();
 17794  1ED8  319C  249A         	fcall	_CC2500_WriteByte
 17795                           
 17796                           ;CC2500_B1.c: 267: RC4 = 1;
 17797  1EDA  0020               	movlb	0	; select bank0
 17798  1EDB  160E               	bsf	14,4	;volatile
 17799  1EDC  0008               	return
 17800  1EDD                     __end_of_CC2500_WriteREG:	
 17801                           
 17802                           	psect	text124
 17803  1AF4                     __ptext124:	
 17804 ;; *************** function _CC2500_FrequencyCabr *****************
 17805 ;; Defined at:
 17806 ;;		line 206 in file "../src/CC2500_B1.c"
 17807 ;; Parameters:    Size  Location     Type
 17808 ;;		None
 17809 ;; Auto vars:     Size  Location     Type
 17810 ;;		None
 17811 ;; Return value:  Size  Location     Type
 17812 ;;		None               void
 17813 ;; Registers used:
 17814 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17815 ;; Tracked objects:
 17816 ;;		On entry : 0/0
 17817 ;;		On exit  : 0/0
 17818 ;;		Unchanged: 0/0
 17819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17824 ;;Total ram usage:        0 bytes
 17825 ;; Hardware stack levels used:    1
 17826 ;; Hardware stack levels required when called:    7
 17827 ;; This function calls:
 17828 ;;		_CC2500_WriteCommand
 17829 ;;		_DelayTime_1us
 17830 ;; This function is called by:
 17831 ;;		_CC2500_PowerOnInitial
 17832 ;; This function uses a non-reentrant model
 17833 ;;
 17834                           
 17835                           
 17836                           ;psect for function _CC2500_FrequencyCabr
 17837  1AF4                     _CC2500_FrequencyCabr:	
 17838                           
 17839                           ;CC2500_B1.c: 207: CC2500_WriteCommand(0x33);
 17840                           
 17841                           ;incstack = 0
 17842                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17843  1AF4  3033               	movlw	51
 17844  1AF5  319D  2576  319A   	fcall	_CC2500_WriteCommand
 17845                           
 17846                           ;CC2500_B1.c: 208: DelayTime_1us(1000);
 17847  1AF8  30E8               	movlw	232
 17848  1AF9  0020               	movlb	0	; select bank0
 17849  1AFA  00A0               	movwf	DelayTime_1us@count
 17850  1AFB  3003               	movlw	3
 17851  1AFC  00A1               	movwf	DelayTime_1us@count+1
 17852  1AFD  319F  2789         	fcall	_DelayTime_1us
 17853  1AFF  0008               	return
 17854  1B00                     __end_of_CC2500_FrequencyCabr:	
 17855                           
 17856                           	psect	text125
 17857  1F89                     __ptext125:	
 17858 ;; *************** function _DelayTime_1us *****************
 17859 ;; Defined at:
 17860 ;;		line 325 in file "../src/CC2500_B1.c"
 17861 ;; Parameters:    Size  Location     Type
 17862 ;;  count           2    0[BANK0 ] int 
 17863 ;; Auto vars:     Size  Location     Type
 17864 ;;  j               2    4[BANK0 ] unsigned int 
 17865 ;;  i               2    2[BANK0 ] unsigned int 
 17866 ;; Return value:  Size  Location     Type
 17867 ;;		None               void
 17868 ;; Registers used:
 17869 ;;		wreg, status,2
 17870 ;; Tracked objects:
 17871 ;;		On entry : 0/0
 17872 ;;		On exit  : 0/0
 17873 ;;		Unchanged: 0/0
 17874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17875 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17876 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17878 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17879 ;;Total ram usage:        6 bytes
 17880 ;; Hardware stack levels used:    1
 17881 ;; Hardware stack levels required when called:    5
 17882 ;; This function calls:
 17883 ;;		Nothing
 17884 ;; This function is called by:
 17885 ;;		_CC2500_PowerRST
 17886 ;;		_CC2500_FrequencyCabr
 17887 ;; This function uses a non-reentrant model
 17888 ;;
 17889                           
 17890                           
 17891                           ;psect for function _DelayTime_1us
 17892  1F89                     _DelayTime_1us:	
 17893                           
 17894                           ;CC2500_B1.c: 326: unsigned int i, j;
 17895                           ;CC2500_B1.c: 327: for (i = 1; i < count; i++)
 17896                           
 17897                           ;incstack = 0
 17898                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17899  1F89  3001               	movlw	1
 17900  1F8A  0020               	movlb	0	; select bank0
 17901  1F8B  00A2               	movwf	DelayTime_1us@i
 17902  1F8C  3000               	movlw	0
 17903  1F8D  00A3               	movwf	DelayTime_1us@i+1
 17904  1F8E                     l386:	
 17905  1F8E  0821               	movf	DelayTime_1us@count+1,w
 17906  1F8F  0223               	subwf	DelayTime_1us@i+1,w
 17907  1F90  1D03               	skipz
 17908  1F91  2F94               	goto	u5855
 17909  1F92  0820               	movf	DelayTime_1us@count,w
 17910  1F93  0222               	subwf	DelayTime_1us@i,w
 17911  1F94                     u5855:	
 17912  1F94  1803               	btfsc	3,0
 17913  1F95  0008               	return
 17914                           
 17915                           ;CC2500_B1.c: 328: for (j = 0; j <= 1; j++);
 17916  1F96  01A4               	clrf	DelayTime_1us@j
 17917  1F97  01A5               	clrf	DelayTime_1us@j+1
 17918  1F98  3000               	movlw	0
 17919  1F99  0225               	subwf	DelayTime_1us@j+1,w
 17920  1F9A  3002               	movlw	2
 17921  1F9B  1903               	skipnz
 17922  1F9C  0224               	subwf	DelayTime_1us@j,w
 17923  1F9D  1803               	btfsc	3,0
 17924  1F9E  2FAA               	goto	l6846
 17925  1F9F                     l6844:	
 17926  1F9F  3001               	movlw	1
 17927  1FA0  07A4               	addwf	DelayTime_1us@j,f
 17928  1FA1  3000               	movlw	0
 17929  1FA2  3DA5               	addwfc	DelayTime_1us@j+1,f
 17930  1FA3  3000               	movlw	0
 17931  1FA4  0225               	subwf	DelayTime_1us@j+1,w
 17932  1FA5  3002               	movlw	2
 17933  1FA6  1903               	skipnz
 17934  1FA7  0224               	subwf	DelayTime_1us@j,w
 17935  1FA8  1C03               	skipc
 17936  1FA9  2F9F               	goto	l6844
 17937  1FAA                     l6846:	
 17938  1FAA  3001               	movlw	1
 17939  1FAB  07A2               	addwf	DelayTime_1us@i,f
 17940  1FAC  3000               	movlw	0
 17941  1FAD  3DA3               	addwfc	DelayTime_1us@i+1,f
 17942  1FAE  2F8E               	goto	l386
 17943  1FAF                     __end_of_DelayTime_1us:	
 17944                           
 17945                           	psect	text126
 17946  1A32                     __ptext126:	
 17947 ;; *************** function _CC2500_ClearTXFIFO *****************
 17948 ;; Defined at:
 17949 ;;		line 192 in file "../src/CC2500_B1.c"
 17950 ;; Parameters:    Size  Location     Type
 17951 ;;		None
 17952 ;; Auto vars:     Size  Location     Type
 17953 ;;		None
 17954 ;; Return value:  Size  Location     Type
 17955 ;;		None               void
 17956 ;; Registers used:
 17957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17958 ;; Tracked objects:
 17959 ;;		On entry : 0/0
 17960 ;;		On exit  : 0/0
 17961 ;;		Unchanged: 0/0
 17962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17967 ;;Total ram usage:        0 bytes
 17968 ;; Hardware stack levels used:    1
 17969 ;; Hardware stack levels required when called:    7
 17970 ;; This function calls:
 17971 ;;		_CC2500_WriteCommand
 17972 ;; This function is called by:
 17973 ;;		_CC2500_PowerOnInitial
 17974 ;; This function uses a non-reentrant model
 17975 ;;
 17976                           
 17977                           
 17978                           ;psect for function _CC2500_ClearTXFIFO
 17979  1A32                     _CC2500_ClearTXFIFO:	
 17980                           
 17981                           ;CC2500_B1.c: 193: CC2500_WriteCommand(0x3B);
 17982                           
 17983                           ;incstack = 0
 17984                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17985  1A32  303B               	movlw	59
 17986  1A33  319D  2576         	fcall	_CC2500_WriteCommand
 17987  1A35  0008               	return
 17988  1A36                     __end_of_CC2500_ClearTXFIFO:	
 17989                           
 17990                           	psect	text127
 17991  1A2E                     __ptext127:	
 17992 ;; *************** function _CC2500_ClearRXFIFO *****************
 17993 ;; Defined at:
 17994 ;;		line 199 in file "../src/CC2500_B1.c"
 17995 ;; Parameters:    Size  Location     Type
 17996 ;;		None
 17997 ;; Auto vars:     Size  Location     Type
 17998 ;;		None
 17999 ;; Return value:  Size  Location     Type
 18000 ;;		None               void
 18001 ;; Registers used:
 18002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18003 ;; Tracked objects:
 18004 ;;		On entry : 0/0
 18005 ;;		On exit  : 0/0
 18006 ;;		Unchanged: 0/0
 18007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18012 ;;Total ram usage:        0 bytes
 18013 ;; Hardware stack levels used:    1
 18014 ;; Hardware stack levels required when called:    7
 18015 ;; This function calls:
 18016 ;;		_CC2500_WriteCommand
 18017 ;; This function is called by:
 18018 ;;		_CC2500_PowerOnInitial
 18019 ;; This function uses a non-reentrant model
 18020 ;;
 18021                           
 18022                           
 18023                           ;psect for function _CC2500_ClearRXFIFO
 18024  1A2E                     _CC2500_ClearRXFIFO:	
 18025                           
 18026                           ;CC2500_B1.c: 200: CC2500_WriteCommand(0x3A);
 18027                           
 18028                           ;incstack = 0
 18029                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18030  1A2E  303A               	movlw	58
 18031  1A2F  319D  2576         	fcall	_CC2500_WriteCommand
 18032  1A31  0008               	return
 18033  1A32                     __end_of_CC2500_ClearRXFIFO:	
 18034                           
 18035                           	psect	text128
 18036  1D76                     __ptext128:	
 18037 ;; *************** function _CC2500_WriteCommand *****************
 18038 ;; Defined at:
 18039 ;;		line 290 in file "../src/CC2500_B1.c"
 18040 ;; Parameters:    Size  Location     Type
 18041 ;;  command         1    wreg     unsigned char 
 18042 ;; Auto vars:     Size  Location     Type
 18043 ;;  command         1    3[BANK0 ] unsigned char 
 18044 ;; Return value:  Size  Location     Type
 18045 ;;		None               void
 18046 ;; Registers used:
 18047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18048 ;; Tracked objects:
 18049 ;;		On entry : 0/0
 18050 ;;		On exit  : 0/0
 18051 ;;		Unchanged: 0/0
 18052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18057 ;;Total ram usage:        2 bytes
 18058 ;; Hardware stack levels used:    1
 18059 ;; Hardware stack levels required when called:    6
 18060 ;; This function calls:
 18061 ;;		_CC2500_WriteByte
 18062 ;;		_Timeout_Counter
 18063 ;;		_set_TimeoutCleared
 18064 ;; This function is called by:
 18065 ;;		_CC2500_TxData
 18066 ;;		_CC2500_RxData
 18067 ;;		_CC2500_ClearTXFIFO
 18068 ;;		_CC2500_ClearRXFIFO
 18069 ;;		_CC2500_FrequencyCabr
 18070 ;;		_CC2500_SIDLEMode
 18071 ;;		_setRF_Main
 18072 ;;		_RF_RxDisable
 18073 ;; This function uses a non-reentrant model
 18074 ;;
 18075                           
 18076                           
 18077                           ;psect for function _CC2500_WriteCommand
 18078  1D76                     _CC2500_WriteCommand:	
 18079                           
 18080                           ;incstack = 0
 18081                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18082                           ;CC2500_WriteCommand@command stored from wreg
 18083  1D76  0020               	movlb	0	; select bank0
 18084  1D77  00A3               	movwf	CC2500_WriteCommand@command
 18085                           
 18086                           ;CC2500_B1.c: 291: RC4 = 0;
 18087  1D78  120E               	bcf	14,4	;volatile
 18088                           
 18089                           ;CC2500_B1.c: 292: SPI0Buffer = command;
 18090  1D79  0823               	movf	CC2500_WriteCommand@command,w
 18091  1D7A  00A2               	movwf	??_CC2500_WriteCommand
 18092  1D7B  0822               	movf	??_CC2500_WriteCommand,w
 18093  1D7C  00FB               	movwf	_SPI0Buffer
 18094                           
 18095                           ;CC2500_B1.c: 294: while (RC2 == 1 && myMain.Timeout == 0) {
 18096  1D7D  2D81               	goto	l6574
 18097  1D7E                     l6572:	
 18098                           
 18099                           ;CC2500_B1.c: 295: Timeout_Counter();
 18100  1D7E  319C  24C2  319D   	fcall	_Timeout_Counter
 18101  1D81                     l6574:	
 18102  1D81  0020               	movlb	0	; select bank0
 18103  1D82  1D0E               	btfss	14,2	;volatile
 18104  1D83  2D87               	goto	l6578
 18105  1D84  0021               	movlb	1	; select bank1
 18106  1D85  1D2F               	btfss	(_myMain^(0+128)+15),2
 18107  1D86  2D7E               	goto	l6572
 18108  1D87                     l6578:	
 18109                           
 18110                           ;CC2500_B1.c: 296: };
 18111                           ;CC2500_B1.c: 297: set_TimeoutCleared();
 18112  1D87  319A  223E  319D   	fcall	_set_TimeoutCleared
 18113                           
 18114                           ;CC2500_B1.c: 299: CC2500_WriteByte();
 18115  1D8A  319C  249A         	fcall	_CC2500_WriteByte
 18116                           
 18117                           ;CC2500_B1.c: 300: RC4 = 1;
 18118  1D8C  0020               	movlb	0	; select bank0
 18119  1D8D  160E               	bsf	14,4	;volatile
 18120  1D8E  0008               	return
 18121  1D8F                     __end_of_CC2500_WriteCommand:	
 18122                           
 18123                           	psect	text129
 18124  1A3E                     __ptext129:	
 18125 ;; *************** function _set_TimeoutCleared *****************
 18126 ;; Defined at:
 18127 ;;		line 218 in file "../src/Main_B1.c"
 18128 ;; Parameters:    Size  Location     Type
 18129 ;;		None
 18130 ;; Auto vars:     Size  Location     Type
 18131 ;;		None
 18132 ;; Return value:  Size  Location     Type
 18133 ;;		None               void
 18134 ;; Registers used:
 18135 ;;		status,2
 18136 ;; Tracked objects:
 18137 ;;		On entry : 0/0
 18138 ;;		On exit  : 0/0
 18139 ;;		Unchanged: 0/0
 18140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18145 ;;Total ram usage:        0 bytes
 18146 ;; Hardware stack levels used:    1
 18147 ;; Hardware stack levels required when called:    5
 18148 ;; This function calls:
 18149 ;;		Nothing
 18150 ;; This function is called by:
 18151 ;;		_CC2500_TxData
 18152 ;;		_CC2500_RxData
 18153 ;;		_CC2500_PowerRST
 18154 ;;		_CC2500_WriteREG
 18155 ;;		_CC2500_WriteCommand
 18156 ;;		_CC2500_ReadStatus
 18157 ;;		_getAD
 18158 ;;		_TouchPower
 18159 ;;		_CC2500_ReadREG
 18160 ;; This function uses a non-reentrant model
 18161 ;;
 18162                           
 18163                           
 18164                           ;psect for function _set_TimeoutCleared
 18165  1A3E                     _set_TimeoutCleared:	
 18166                           
 18167                           ;Main_B1.c: 219: myMain.Timeout = 0;
 18168                           
 18169                           ;incstack = 0
 18170                           ; Regs used in _set_TimeoutCleared: [status,2]
 18171  1A3E  0021               	movlb	1	; select bank1
 18172  1A3F  112F               	bcf	(_myMain^(0+128)+15),2
 18173                           
 18174                           ;Main_B1.c: 220: myMain.Timeout_Counter = 0;
 18175  1A40  01B0               	clrf	(_myMain^(0+128)+16)
 18176  1A41  01B1               	clrf	((_myMain+1)^(0+128)+16)
 18177  1A42  0008               	return
 18178  1A43                     __end_of_set_TimeoutCleared:	
 18179                           
 18180                           	psect	text130
 18181  1CC2                     __ptext130:	
 18182 ;; *************** function _Timeout_Counter *****************
 18183 ;; Defined at:
 18184 ;;		line 209 in file "../src/Main_B1.c"
 18185 ;; Parameters:    Size  Location     Type
 18186 ;;		None
 18187 ;; Auto vars:     Size  Location     Type
 18188 ;;		None
 18189 ;; Return value:  Size  Location     Type
 18190 ;;		None               void
 18191 ;; Registers used:
 18192 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18193 ;; Tracked objects:
 18194 ;;		On entry : 0/0
 18195 ;;		On exit  : 0/0
 18196 ;;		Unchanged: 0/0
 18197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18202 ;;Total ram usage:        0 bytes
 18203 ;; Hardware stack levels used:    1
 18204 ;; Hardware stack levels required when called:    5
 18205 ;; This function calls:
 18206 ;;		Nothing
 18207 ;; This function is called by:
 18208 ;;		_CC2500_TxData
 18209 ;;		_CC2500_RxData
 18210 ;;		_CC2500_PowerRST
 18211 ;;		_CC2500_WriteREG
 18212 ;;		_CC2500_WriteCommand
 18213 ;;		_CC2500_ReadStatus
 18214 ;;		_getAD
 18215 ;;		_TouchPower
 18216 ;;		_CC2500_ReadREG
 18217 ;; This function uses a non-reentrant model
 18218 ;;
 18219                           
 18220                           
 18221                           ;psect for function _Timeout_Counter
 18222  1CC2                     _Timeout_Counter:	
 18223                           
 18224                           ;Main_B1.c: 210: myMain.Timeout_Counter++;
 18225                           
 18226                           ;incstack = 0
 18227                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18228  1CC2  3001               	movlw	1
 18229  1CC3  0021               	movlb	1	; select bank1
 18230  1CC4  07B0               	addwf	(_myMain^(0+128)+16),f
 18231  1CC5  3000               	movlw	0
 18232  1CC6  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 18233                           
 18234                           ;Main_B1.c: 211: if (myMain.Timeout_Counter == 10000) {
 18235  1CC7  3010               	movlw	16
 18236  1CC8  3EA0               	addlw	_myMain& (0+255)
 18237  1CC9  0086               	movwf	6
 18238  1CCA  0187               	clrf	7
 18239  1CCB  3F40               	moviw [0]fsr1
 18240  1CCC  3A10               	xorlw	16
 18241  1CCD  1D03               	skipz
 18242  1CCE  2CD1               	goto	u5335
 18243  1CCF  3F41               	moviw [1]fsr1
 18244  1CD0  3A27               	xorlw	39
 18245  1CD1                     u5335:	
 18246  1CD1  1D03               	skipz
 18247  1CD2  0008               	return
 18248                           
 18249                           ;Main_B1.c: 212: myMain.Timeout_Counter = 0;
 18250  1CD3  01B0               	clrf	(_myMain^(0+128)+16)
 18251  1CD4  01B1               	clrf	((_myMain+1)^(0+128)+16)
 18252                           
 18253                           ;Main_B1.c: 213: myMain.Timeout = 1;
 18254  1CD5  152F               	bsf	(_myMain^(0+128)+15),2
 18255  1CD6  0008               	return
 18256  1CD7                     __end_of_Timeout_Counter:	
 18257                           
 18258                           	psect	text131
 18259  1C9A                     __ptext131:	
 18260 ;; *************** function _CC2500_WriteByte *****************
 18261 ;; Defined at:
 18262 ;;		line 224 in file "../src/CC2500_B1.c"
 18263 ;; Parameters:    Size  Location     Type
 18264 ;;		None
 18265 ;; Auto vars:     Size  Location     Type
 18266 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18267 ;; Return value:  Size  Location     Type
 18268 ;;		None               void
 18269 ;; Registers used:
 18270 ;;		wreg, status,2, status,0
 18271 ;; Tracked objects:
 18272 ;;		On entry : 0/0
 18273 ;;		On exit  : 0/0
 18274 ;;		Unchanged: 0/0
 18275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18278 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18279 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18280 ;;Total ram usage:        2 bytes
 18281 ;; Hardware stack levels used:    1
 18282 ;; Hardware stack levels required when called:    5
 18283 ;; This function calls:
 18284 ;;		Nothing
 18285 ;; This function is called by:
 18286 ;;		_CC2500_TxData
 18287 ;;		_CC2500_RxData
 18288 ;;		_CC2500_PowerRST
 18289 ;;		_CC2500_WriteREG
 18290 ;;		_CC2500_WriteCommand
 18291 ;;		_CC2500_ReadStatus
 18292 ;;		_CC2500_ReadREG
 18293 ;; This function uses a non-reentrant model
 18294 ;;
 18295                           
 18296                           
 18297                           ;psect for function _CC2500_WriteByte
 18298  1C9A                     _CC2500_WriteByte:	
 18299                           
 18300                           ;CC2500_B1.c: 225: unsigned char loop_a;
 18301                           ;CC2500_B1.c: 226: for (loop_a = 0; loop_a < 8; loop_a++) {
 18302                           
 18303                           ;incstack = 0
 18304                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18305  1C9A  0020               	movlb	0	; select bank0
 18306  1C9B  01A1               	clrf	CC2500_WriteByte@loop_a
 18307  1C9C                     L12:	
 18308  1C9C  3008               	movlw	8
 18309  1C9D  0221               	subwf	CC2500_WriteByte@loop_a,w
 18310  1C9E  1803               	btfsc	3,0
 18311  1C9F  0008               	return
 18312                           
 18313                           ;CC2500_B1.c: 227: if (SPI0Buffer & 0x80)
 18314  1CA0  1FFB               	btfss	_SPI0Buffer,7
 18315  1CA1  2CA4               	goto	l342
 18316                           
 18317                           ;CC2500_B1.c: 228: RC0 = 1;
 18318  1CA2  140E               	bsf	14,0	;volatile
 18319  1CA3  2CA5               	goto	l343
 18320  1CA4                     l342:	
 18321                           
 18322                           ;CC2500_B1.c: 229: else
 18323                           ;CC2500_B1.c: 230: RC0 = 0;
 18324  1CA4  100E               	bcf	14,0	;volatile
 18325  1CA5                     l343:	
 18326                           
 18327                           ;CC2500_B1.c: 231: RC1 = 1;
 18328  1CA5  148E               	bsf	14,1	;volatile
 18329                           
 18330                           ;CC2500_B1.c: 232: SPI0Buffer <<= 1;
 18331  1CA6  1003               	clrc
 18332  1CA7  0DFB               	rlf	_SPI0Buffer,f
 18333                           
 18334                           ;CC2500_B1.c: 233: RC1 = 0;
 18335  1CA8  108E               	bcf	14,1	;volatile
 18336  1CA9  3001               	movlw	1
 18337  1CAA  00A0               	movwf	??_CC2500_WriteByte
 18338  1CAB  0820               	movf	??_CC2500_WriteByte,w
 18339  1CAC  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18340  1CAD  2C9C               	goto	L12
 18341  1CAE                     __end_of_CC2500_WriteByte:	
 18342                           
 18343                           	psect	text132
 18344  1458                     __ptext132:	
 18345 ;; *************** function _Buzzer_Main *****************
 18346 ;; Defined at:
 18347 ;;		line 46 in file "../src/Buzzer_B1.c"
 18348 ;; Parameters:    Size  Location     Type
 18349 ;;		None
 18350 ;; Auto vars:     Size  Location     Type
 18351 ;;		None
 18352 ;; Return value:  Size  Location     Type
 18353 ;;		None               void
 18354 ;; Registers used:
 18355 ;;		wreg, status,2, status,0
 18356 ;; Tracked objects:
 18357 ;;		On entry : 0/0
 18358 ;;		On exit  : 0/0
 18359 ;;		Unchanged: 0/0
 18360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18364 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18365 ;;Total ram usage:        1 bytes
 18366 ;; Hardware stack levels used:    1
 18367 ;; Hardware stack levels required when called:    5
 18368 ;; This function calls:
 18369 ;;		Nothing
 18370 ;; This function is called by:
 18371 ;;		_main
 18372 ;; This function uses a non-reentrant model
 18373 ;;
 18374                           
 18375                           
 18376                           ;psect for function _Buzzer_Main
 18377  1458                     _Buzzer_Main:	
 18378                           
 18379                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18380                           
 18381                           ;incstack = 0
 18382                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18383  1458  0021               	movlb	1	; select bank1
 18384  1459  1CB2               	btfss	_Buz1^(0+128),1
 18385  145A  0008               	return
 18386                           
 18387                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18388  145B  3001               	movlw	1
 18389  145C  07B3               	addwf	(_Buz1^(0+128)+1),f
 18390  145D  3000               	movlw	0
 18391  145E  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 18392                           
 18393                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18394  145F  0839               	movf	((_Buz1+1)^(0+128)+6),w
 18395  1460  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 18396  1461  1D03               	skipz
 18397  1462  2C65               	goto	u7475
 18398  1463  0838               	movf	(_Buz1^(0+128)+6),w
 18399  1464  0233               	subwf	(_Buz1^(0+128)+1),w
 18400  1465                     u7475:	
 18401  1465  1C03               	skipc
 18402  1466  0008               	return
 18403                           
 18404                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18405  1467  01B3               	clrf	(_Buz1^(0+128)+1)
 18406  1468  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 18407                           
 18408                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18409  1469  12B2               	bcf	_Buz1^(0+128),5
 18410  146A  0020               	movlb	0	; select bank0
 18411  146B  1D8D               	btfss	13,3	;volatile
 18412  146C  2C6F               	goto	l7838
 18413  146D  0021               	movlb	1	; select bank1
 18414  146E  16B2               	bsf	_Buz1^(0+128),5
 18415  146F                     l7838:	
 18416                           
 18417                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18418  146F  0021               	movlb	1	; select bank1
 18419  1470  1AB2               	btfsc	_Buz1^(0+128),5
 18420  1471  2C9B               	goto	l112
 18421                           
 18422                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18423  1472  08B5               	movf	(_Buz1^(0+128)+3),f
 18424  1473  1D03               	skipz
 18425  1474  2C97               	goto	l113
 18426                           
 18427                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18428  1475  1DB2               	btfss	_Buz1^(0+128),3
 18429  1476  2C85               	goto	l114
 18430                           
 18431                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18432  1477  11B2               	bcf	_Buz1^(0+128),3
 18433                           
 18434                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18435  1478  0836               	movf	(_Buz1^(0+128)+4),w
 18436  1479  0020               	movlb	0	; select bank0
 18437  147A  00A0               	movwf	??_Buzzer_Main
 18438  147B  0820               	movf	??_Buzzer_Main,w
 18439  147C  0021               	movlb	1	; select bank1
 18440  147D  00B5               	movwf	(_Buz1^(0+128)+3)
 18441                           
 18442                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18443  147E  083B               	movf	((_Buz1+1)^(0+128)+8),w
 18444  147F  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 18445  1480  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 18446  1481  083A               	movf	(_Buz1^(0+128)+8),w
 18447  1482  01B8               	clrf	(_Buz1^(0+128)+6)
 18448  1483  07B8               	addwf	(_Buz1^(0+128)+6),f
 18449                           
 18450                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18451  1484  0008               	return
 18452  1485                     l114:	
 18453  1485  1E32               	btfss	_Buz1^(0+128),4
 18454  1486  2C95               	goto	l116
 18455                           
 18456                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18457  1487  1232               	bcf	_Buz1^(0+128),4
 18458                           
 18459                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18460  1488  0837               	movf	(_Buz1^(0+128)+5),w
 18461  1489  0020               	movlb	0	; select bank0
 18462  148A  00A0               	movwf	??_Buzzer_Main
 18463  148B  0820               	movf	??_Buzzer_Main,w
 18464  148C  0021               	movlb	1	; select bank1
 18465  148D  00B5               	movwf	(_Buz1^(0+128)+3)
 18466                           
 18467                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18468  148E  083D               	movf	((_Buz1+1)^(0+128)+10),w
 18469  148F  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 18470  1490  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 18471  1491  083C               	movf	(_Buz1^(0+128)+10),w
 18472  1492  01B8               	clrf	(_Buz1^(0+128)+6)
 18473  1493  07B8               	addwf	(_Buz1^(0+128)+6),f
 18474                           
 18475                           ;Buzzer_B1.c: 62: } else {
 18476  1494  0008               	return
 18477  1495                     l116:	
 18478                           
 18479                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18480  1495  10B2               	bcf	_Buz1^(0+128),1
 18481                           
 18482                           ;Buzzer_B1.c: 64: }
 18483                           ;Buzzer_B1.c: 65: } else {
 18484  1496  0008               	return
 18485  1497                     l113:	
 18486                           
 18487                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18488  1497  16B2               	bsf	_Buz1^(0+128),5
 18489                           
 18490                           ;Buzzer_B1.c: 68: RB3 = 1;
 18491  1498  0020               	movlb	0	; select bank0
 18492  1499  158D               	bsf	13,3	;volatile
 18493                           
 18494                           ;Buzzer_B1.c: 69: }
 18495                           ;Buzzer_B1.c: 70: } else {
 18496  149A  0008               	return
 18497  149B                     l112:	
 18498                           
 18499                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18500  149B  12B2               	bcf	_Buz1^(0+128),5
 18501                           
 18502                           ;Buzzer_B1.c: 73: RB3 = 0;
 18503  149C  0020               	movlb	0	; select bank0
 18504  149D  118D               	bcf	13,3	;volatile
 18505                           
 18506                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18507  149E  3001               	movlw	1
 18508  149F  0021               	movlb	1	; select bank1
 18509  14A0  02B5               	subwf	(_Buz1^(0+128)+3),f
 18510  14A1  0008               	return
 18511  14A2                     __end_of_Buzzer_Main:	
 18512                           
 18513                           	psect	text133
 18514  1A1C                     __ptext133:	
 18515 ;; *************** function _Buzzer_Initialization *****************
 18516 ;; Defined at:
 18517 ;;		line 11 in file "../src/Buzzer_B1.c"
 18518 ;; Parameters:    Size  Location     Type
 18519 ;;		None
 18520 ;; Auto vars:     Size  Location     Type
 18521 ;;		None
 18522 ;; Return value:  Size  Location     Type
 18523 ;;		None               void
 18524 ;; Registers used:
 18525 ;;		None
 18526 ;; Tracked objects:
 18527 ;;		On entry : 0/0
 18528 ;;		On exit  : 0/0
 18529 ;;		Unchanged: 0/0
 18530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18535 ;;Total ram usage:        0 bytes
 18536 ;; Hardware stack levels used:    1
 18537 ;; Hardware stack levels required when called:    5
 18538 ;; This function calls:
 18539 ;;		Nothing
 18540 ;; This function is called by:
 18541 ;;		_main
 18542 ;; This function uses a non-reentrant model
 18543 ;;
 18544                           
 18545                           
 18546                           ;psect for function _Buzzer_Initialization
 18547  1A1C                     _Buzzer_Initialization:	
 18548                           
 18549                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18550                           
 18551                           ;incstack = 0
 18552                           ; Regs used in _Buzzer_Initialization: []
 18553  1A1C  0021               	movlb	1	; select bank1
 18554  1A1D  1432               	bsf	_Buz1^(0+128),0
 18555  1A1E  0008               	return
 18556  1A1F                     __end_of_Buzzer_Initialization:	
 18557                           
 18558                           	psect	intentry
 18559  0004                     __pintentry:	
 18560 ;; *************** function _ISR *****************
 18561 ;; Defined at:
 18562 ;;		line 107 in file "../src/MCU_B1.c"
 18563 ;; Parameters:    Size  Location     Type
 18564 ;;		None
 18565 ;; Auto vars:     Size  Location     Type
 18566 ;;		None
 18567 ;; Return value:  Size  Location     Type
 18568 ;;		None               void
 18569 ;; Registers used:
 18570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18571 ;; Tracked objects:
 18572 ;;		On entry : 0/0
 18573 ;;		On exit  : 0/0
 18574 ;;		Unchanged: 0/0
 18575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18578 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18579 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18580 ;;Total ram usage:        1 bytes
 18581 ;; Hardware stack levels used:    1
 18582 ;; Hardware stack levels required when called:    4
 18583 ;; This function calls:
 18584 ;;		_IOC_ISR
 18585 ;;		_TMR0_ISR
 18586 ;; This function is called by:
 18587 ;;		Interrupt level 1
 18588 ;; This function uses a non-reentrant model
 18589 ;;
 18590                           
 18591  0004                     _ISR:	
 18592                           
 18593                           ;incstack = 0
 18594                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18595  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18596  0005  3180               	pagesel	$
 18597  0006  0020               	movlb	0	; select bank0
 18598  0007  087F               	movf	127,w
 18599  0008  00F7               	movwf	??_ISR
 18600                           
 18601                           ;MCU_B1.c: 109: IOC_ISR();
 18602  0009  319B  2318  3180   	fcall	_IOC_ISR
 18603                           
 18604                           ;MCU_B1.c: 111: TMR0_ISR();
 18605  000C  319F  27AF         	fcall	_TMR0_ISR
 18606  000E  0877               	movf	??_ISR,w
 18607  000F  0020               	movlb	0	; select bank0
 18608  0010  00FF               	movwf	127
 18609  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18610  0012  0009               	retfie
 18611  0013                     __end_of_ISR:	
 18612                           
 18613                           	psect	text135
 18614  1FAF                     __ptext135:	
 18615 ;; *************** function _TMR0_ISR *****************
 18616 ;; Defined at:
 18617 ;;		line 135 in file "../src/MCU_B1.c"
 18618 ;; Parameters:    Size  Location     Type
 18619 ;;		None
 18620 ;; Auto vars:     Size  Location     Type
 18621 ;;		None
 18622 ;; Return value:  Size  Location     Type
 18623 ;;		None               void
 18624 ;; Registers used:
 18625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18626 ;; Tracked objects:
 18627 ;;		On entry : 0/0
 18628 ;;		On exit  : 0/0
 18629 ;;		Unchanged: 0/0
 18630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18635 ;;Total ram usage:        0 bytes
 18636 ;; Hardware stack levels used:    1
 18637 ;; Hardware stack levels required when called:    2
 18638 ;; This function calls:
 18639 ;;		_setDimmerLights_IntrControl
 18640 ;; This function is called by:
 18641 ;;		_ISR
 18642 ;; This function uses a non-reentrant model
 18643 ;;
 18644                           
 18645                           
 18646                           ;psect for function _TMR0_ISR
 18647  1FAF                     _TMR0_ISR:	
 18648                           
 18649                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 18650                           
 18651                           ;incstack = 0
 18652                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18653  1FAF  1E8B               	btfss	11,5	;volatile
 18654  1FB0  0008               	return
 18655  1FB1  1D0B               	btfss	11,2	;volatile
 18656  1FB2  0008               	return
 18657                           
 18658                           ;MCU_B1.c: 138: TMR0 = (256-190);
 18659  1FB3  3042               	movlw	66
 18660  1FB4  0020               	movlb	0	; select bank0
 18661  1FB5  0095               	movwf	21	;volatile
 18662                           
 18663                           ;MCU_B1.c: 139: TMR0IF = 0;
 18664  1FB6  110B               	bcf	11,2	;volatile
 18665                           
 18666                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 18667  1FB7  3001               	movlw	1
 18668  1FB8  3180  2049  319F   	fcall	_setDimmerLights_IntrControl
 18669                           
 18670                           ;MCU_B1.c: 149: setDimmerLights_IntrControl(2);
 18671  1FBB  3002               	movlw	2
 18672  1FBC  3180  2049  319F   	fcall	_setDimmerLights_IntrControl
 18673                           
 18674                           ;MCU_B1.c: 160: Timer0.Count++;
 18675  1FBF  3001               	movlw	1
 18676  1FC0  0022               	movlb	2	; select bank2
 18677  1FC1  07B6               	addwf	(_Timer0^(0+256)+1),f
 18678  1FC2  3000               	movlw	0
 18679  1FC3  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 18680                           
 18681                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 18682  1FC4  3001               	movlw	1
 18683  1FC5  3E35               	addlw	_Timer0& (0+255)
 18684  1FC6  0086               	movwf	6
 18685  1FC7  3001               	movlw	1	; select bank2/3
 18686  1FC8  0087               	movwf	7
 18687  1FC9  3F40               	moviw [0]fsr1
 18688  1FCA  3A64               	xorlw	100
 18689  1FCB  1D03               	skipz
 18690  1FCC  2FCF               	goto	u758_25
 18691  1FCD  3F41               	moviw [1]fsr1
 18692  1FCE  3A00               	xorlw	0
 18693  1FCF                     u758_25:	
 18694  1FCF  1D03               	skipz
 18695  1FD0  0008               	return
 18696                           
 18697                           ;MCU_B1.c: 162: Timer0.Count = 0;
 18698  1FD1  01B6               	clrf	(_Timer0^(0+256)+1)
 18699  1FD2  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 18700                           
 18701                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 18702  1FD3  0021               	movlb	1	; select bank1
 18703  1FD4  14A0               	bsf	_myMain^(0+128),1
 18704  1FD5  0008               	return
 18705  1FD6                     __end_of_TMR0_ISR:	
 18706                           
 18707                           	psect	text136
 18708  0049                     __ptext136:	
 18709 ;; *************** function _setDimmerLights_IntrControl *****************
 18710 ;; Defined at:
 18711 ;;		line 87 in file "../src/Dimmer_B1.c"
 18712 ;; Parameters:    Size  Location     Type
 18713 ;;  lights          1    wreg     unsigned char 
 18714 ;; Auto vars:     Size  Location     Type
 18715 ;;  lights          1    6[COMMON] unsigned char 
 18716 ;; Return value:  Size  Location     Type
 18717 ;;		None               void
 18718 ;; Registers used:
 18719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18720 ;; Tracked objects:
 18721 ;;		On entry : 0/0
 18722 ;;		On exit  : 0/0
 18723 ;;		Unchanged: 0/0
 18724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18727 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18728 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18729 ;;Total ram usage:        5 bytes
 18730 ;; Hardware stack levels used:    1
 18731 ;; Hardware stack levels required when called:    1
 18732 ;; This function calls:
 18733 ;;		_DimmerIntrPointSelect
 18734 ;;		i1_setLoad_StatusOff
 18735 ;; This function is called by:
 18736 ;;		_TMR0_ISR
 18737 ;; This function uses a non-reentrant model
 18738 ;;
 18739                           
 18740                           
 18741                           ;psect for function _setDimmerLights_IntrControl
 18742  0049                     _setDimmerLights_IntrControl:	
 18743                           
 18744                           ;incstack = 0
 18745                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18746                           ;setDimmerLights_IntrControl@lights stored from wreg
 18747  0049  00F6               	movwf	setDimmerLights_IntrControl@lights
 18748                           
 18749                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 18750  004A  0876               	movf	setDimmerLights_IntrControl@lights,w
 18751  004B  319C  2419  3180   	fcall	_DimmerIntrPointSelect
 18752                           
 18753                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 18754  004E  087A               	movf	_DimmerLightsIntr,w
 18755  004F  0086               	movwf	6
 18756  0050  3001               	movlw	1	; select bank2/3
 18757  0051  0087               	movwf	7
 18758  0052  1C01               	btfss	1,0
 18759  0053  28AE               	goto	i1l7252
 18760                           
 18761                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 18762  0054  3001               	movlw	1
 18763  0055  00F2               	movwf	??_setDimmerLights_IntrControl
 18764  0056  087A               	movf	_DimmerLightsIntr,w
 18765  0057  3E03               	addlw	3
 18766  0058  0086               	movwf	6
 18767  0059  3001               	movlw	1	; select bank2/3
 18768  005A  0087               	movwf	7
 18769  005B  0872               	movf	??_setDimmerLights_IntrControl,w
 18770  005C  0781               	addwf	1,f
 18771                           
 18772                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 18773  005D  0021               	movlb	1	; select bank1
 18774  005E  084C               	movf	_Dimmer^(0+128),w
 18775  005F  3E02               	addlw	2
 18776  0060  0086               	movwf	6
 18777  0061  0187               	clrf	7
 18778  0062  0801               	movf	1,w
 18779  0063  00F2               	movwf	??_setDimmerLights_IntrControl
 18780  0064  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18781  0065  09F2               	comf	??_setDimmerLights_IntrControl,f
 18782  0066  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18783  0067  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18784  0068  1903               	skipnz
 18785  0069  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18786  006A  087A               	movf	_DimmerLightsIntr,w
 18787  006B  3E04               	addlw	4
 18788  006C  0086               	movwf	6
 18789  006D  3001               	movlw	1	; select bank2/3
 18790  006E  0087               	movwf	7
 18791  006F  0801               	movf	1,w
 18792  0070  0772               	addwf	??_setDimmerLights_IntrControl,w
 18793  0071  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18794  0072  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18795  0073  1803               	skipnc
 18796  0074  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18797  0075  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18798  0076  087A               	movf	_DimmerLightsIntr,w
 18799  0077  3E03               	addlw	3
 18800  0078  0086               	movwf	6
 18801  0079  3001               	movlw	1	; select bank2/3
 18802  007A  0087               	movwf	7
 18803  007B  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18804  007C  3A80               	xorlw	128
 18805  007D  3C80               	sublw	128
 18806  007E  1D03               	skipz
 18807  007F  2882               	goto	u637_25
 18808  0080  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18809  0081  0201               	subwf	1,w
 18810  0082                     u637_25:	
 18811  0082  1C03               	skipc
 18812  0083  29BD               	goto	i1l7316
 18813                           
 18814                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 18815  0084  087A               	movf	_DimmerLightsIntr,w
 18816  0085  3E03               	addlw	3
 18817  0086  0086               	movwf	6
 18818  0087  3001               	movlw	1	; select bank2/3
 18819  0088  0087               	movwf	7
 18820  0089  0181               	clrf	1
 18821                           
 18822                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 18823  008A  087A               	movf	_DimmerLightsIntr,w
 18824  008B  0086               	movwf	6
 18825  008C  3001               	movlw	1	; select bank2/3
 18826  008D  0087               	movwf	7
 18827  008E  1001               	bcf	1,0
 18828                           
 18829                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 18830  008F  087A               	movf	_DimmerLightsIntr,w
 18831  0090  0086               	movwf	6
 18832  0091  3001               	movlw	1	; select bank2/3
 18833  0092  0087               	movwf	7
 18834  0093  1F01               	btfss	1,6
 18835  0094  29BD               	goto	i1l7316
 18836                           
 18837                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 18838  0095  087A               	movf	_DimmerLightsIntr,w
 18839  0096  3E08               	addlw	8
 18840  0097  0086               	movwf	6
 18841  0098  3001               	movlw	1	; select bank2/3
 18842  0099  0087               	movwf	7
 18843  009A  1401               	bsf	1,0
 18844                           
 18845                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 18846  009B  087A               	movf	_DimmerLightsIntr,w
 18847  009C  3E08               	addlw	8
 18848  009D  0086               	movwf	6
 18849  009E  3001               	movlw	1	; select bank2/3
 18850  009F  0087               	movwf	7
 18851  00A0  1681               	bsf	1,5
 18852                           
 18853                           ;Dimmer_B1.c: 100: if (lights == 1) {
 18854  00A1  0876               	movf	setDimmerLights_IntrControl@lights,w
 18855  00A2  3A01               	xorlw	1
 18856  00A3  1D03               	skipz
 18857  00A4  28A7               	goto	i1l7248
 18858                           
 18859                           ;Dimmer_B1.c: 101: RA7 = 1;
 18860  00A5  0020               	movlb	0	; select bank0
 18861  00A6  178C               	bsf	12,7	;volatile
 18862  00A7                     i1l7248:	
 18863                           ;Dimmer_B1.c: 102: ;;
 18864                           
 18865                           
 18866                           ;Dimmer_B1.c: 103: }
 18867                           ;Dimmer_B1.c: 106: if (lights == 2) {
 18868  00A7  0876               	movf	setDimmerLights_IntrControl@lights,w
 18869  00A8  3A02               	xorlw	2
 18870  00A9  1D03               	skipz
 18871  00AA  29BD               	goto	i1l7316
 18872                           
 18873                           ;Dimmer_B1.c: 107: RB4 = 1;
 18874  00AB  0020               	movlb	0	; select bank0
 18875  00AC  160D               	bsf	13,4	;volatile
 18876                           
 18877                           ;Dimmer_B1.c: 108: }
 18878                           ;Dimmer_B1.c: 115: }
 18879                           ;Dimmer_B1.c: 116: }
 18880                           ;Dimmer_B1.c: 117: } else {
 18881  00AD  29BD               	goto	i1l7316
 18882  00AE                     i1l7252:	
 18883                           
 18884                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 18885  00AE  087A               	movf	_DimmerLightsIntr,w
 18886  00AF  3E08               	addlw	8
 18887  00B0  0086               	movwf	6
 18888  00B1  3001               	movlw	1	; select bank2/3
 18889  00B2  0087               	movwf	7
 18890  00B3  1C01               	btfss	1,0
 18891  00B4  29BD               	goto	i1l7316
 18892                           
 18893                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 18894  00B5  087A               	movf	_DimmerLightsIntr,w
 18895  00B6  3E08               	addlw	8
 18896  00B7  0086               	movwf	6
 18897  00B8  3001               	movlw	1	; select bank2/3
 18898  00B9  0087               	movwf	7
 18899  00BA  1001               	bcf	1,0
 18900                           
 18901                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 18902  00BB  087A               	movf	_DimmerLightsIntr,w
 18903  00BC  0086               	movwf	6
 18904  00BD  3001               	movlw	1	; select bank2/3
 18905  00BE  0087               	movwf	7
 18906  00BF  1C81               	btfss	1,1
 18907  00C0  29BD               	goto	i1l7316
 18908                           
 18909                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 18910  00C1  3001               	movlw	1
 18911  00C2  00F2               	movwf	??_setDimmerLights_IntrControl
 18912  00C3  0A7A               	incf	_DimmerLightsIntr,w
 18913  00C4  0086               	movwf	6
 18914  00C5  3001               	movlw	1	; select bank2/3
 18915  00C6  0087               	movwf	7
 18916  00C7  0872               	movf	??_setDimmerLights_IntrControl,w
 18917  00C8  0781               	addwf	1,f
 18918                           
 18919                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18920  00C9  0A7A               	incf	_DimmerLightsIntr,w
 18921  00CA  0086               	movwf	6
 18922  00CB  3001               	movlw	1	; select bank2/3
 18923  00CC  0087               	movwf	7
 18924  00CD  087A               	movf	_DimmerLightsIntr,w
 18925  00CE  3E02               	addlw	2
 18926  00CF  0084               	movwf	4
 18927  00D0  3001               	movlw	1	; select bank2/3
 18928  00D1  0085               	movwf	5
 18929  00D2  0800               	movf	0,w
 18930  00D3  0201               	subwf	1,w
 18931  00D4  1C03               	skipc
 18932  00D5  29BD               	goto	i1l7316
 18933                           
 18934                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 18935  00D6  0A7A               	incf	_DimmerLightsIntr,w
 18936  00D7  0086               	movwf	6
 18937  00D8  3001               	movlw	1	; select bank2/3
 18938  00D9  0087               	movwf	7
 18939  00DA  0181               	clrf	1
 18940                           
 18941                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 18942  00DB  087A               	movf	_DimmerLightsIntr,w
 18943  00DC  0086               	movwf	6
 18944  00DD  3001               	movlw	1	; select bank2/3
 18945  00DE  0087               	movwf	7
 18946  00DF  1D81               	btfss	1,3
 18947  00E0  2917               	goto	i1l7278
 18948                           
 18949                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 18950  00E1  087A               	movf	_DimmerLightsIntr,w
 18951  00E2  0086               	movwf	6
 18952  00E3  3001               	movlw	1	; select bank2/3
 18953  00E4  0087               	movwf	7
 18954  00E5  1A01               	btfsc	1,4
 18955  00E6  28FE               	goto	i1l7272
 18956                           
 18957                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 18958  00E7  087A               	movf	_DimmerLightsIntr,w
 18959  00E8  3E04               	addlw	4
 18960  00E9  0086               	movwf	6
 18961  00EA  3001               	movlw	1	; select bank2/3
 18962  00EB  0087               	movwf	7
 18963  00EC  3021               	movlw	33
 18964  00ED  0201               	subwf	1,w
 18965  00EE  1C03               	skipc
 18966  00EF  28F8               	goto	i1l7270
 18967                           
 18968                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 18969  00F0  087A               	movf	_DimmerLightsIntr,w
 18970  00F1  3E04               	addlw	4
 18971  00F2  0086               	movwf	6
 18972  00F3  3001               	movlw	1	; select bank2/3
 18973  00F4  0087               	movwf	7
 18974  00F5  3001               	movlw	1
 18975  00F6  0281               	subwf	1,f
 18976                           
 18977                           ;Dimmer_B1.c: 128: } else {
 18978  00F7  29BD               	goto	i1l7316
 18979  00F8                     i1l7270:	
 18980                           
 18981                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 18982  00F8  087A               	movf	_DimmerLightsIntr,w
 18983  00F9  0086               	movwf	6
 18984  00FA  3001               	movlw	1	; select bank2/3
 18985  00FB  0087               	movwf	7
 18986  00FC  1601               	bsf	1,4
 18987                           
 18988                           ;Dimmer_B1.c: 130: }
 18989                           ;Dimmer_B1.c: 131: } else {
 18990  00FD  29BD               	goto	i1l7316
 18991  00FE                     i1l7272:	
 18992                           
 18993                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 18994  00FE  087A               	movf	_DimmerLightsIntr,w
 18995  00FF  3E04               	addlw	4
 18996  0100  0086               	movwf	6
 18997  0101  3001               	movlw	1	; select bank2/3
 18998  0102  0087               	movwf	7
 18999  0103  303C               	movlw	60
 19000  0104  0201               	subwf	1,w
 19001  0105  1803               	skipnc
 19002  0106  2911               	goto	i1l7276
 19003                           
 19004                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 19005  0107  3001               	movlw	1
 19006  0108  00F2               	movwf	??_setDimmerLights_IntrControl
 19007  0109  087A               	movf	_DimmerLightsIntr,w
 19008  010A  3E04               	addlw	4
 19009  010B  0086               	movwf	6
 19010  010C  3001               	movlw	1	; select bank2/3
 19011  010D  0087               	movwf	7
 19012  010E  0872               	movf	??_setDimmerLights_IntrControl,w
 19013  010F  0781               	addwf	1,f
 19014                           
 19015                           ;Dimmer_B1.c: 134: } else {
 19016  0110  29BD               	goto	i1l7316
 19017  0111                     i1l7276:	
 19018                           
 19019                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 19020  0111  087A               	movf	_DimmerLightsIntr,w
 19021  0112  0086               	movwf	6
 19022  0113  3001               	movlw	1	; select bank2/3
 19023  0114  0087               	movwf	7
 19024  0115  1201               	bcf	1,4
 19025                           
 19026                           ;Dimmer_B1.c: 136: }
 19027                           ;Dimmer_B1.c: 137: }
 19028                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 19029  0116  29BD               	goto	i1l7316
 19030  0117                     i1l7278:	
 19031  0117  087A               	movf	_DimmerLightsIntr,w
 19032  0118  0086               	movwf	6
 19033  0119  3001               	movlw	1	; select bank2/3
 19034  011A  0087               	movwf	7
 19035  011B  1D01               	btfss	1,2
 19036  011C  295E               	goto	i1l7292
 19037                           
 19038                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 19039  011D  087A               	movf	_DimmerLightsIntr,w
 19040  011E  3E05               	addlw	5
 19041  011F  0086               	movwf	6
 19042  0120  3001               	movlw	1	; select bank2/3
 19043  0121  0087               	movwf	7
 19044  0122  087A               	movf	_DimmerLightsIntr,w
 19045  0123  3E04               	addlw	4
 19046  0124  0084               	movwf	4
 19047  0125  3001               	movlw	1	; select bank2/3
 19048  0126  0085               	movwf	5
 19049  0127  0800               	movf	0,w
 19050  0128  0201               	subwf	1,w
 19051  0129  1803               	skipnc
 19052  012A  2933               	goto	i1l7284
 19053                           
 19054                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 19055  012B  087A               	movf	_DimmerLightsIntr,w
 19056  012C  3E04               	addlw	4
 19057  012D  0086               	movwf	6
 19058  012E  3001               	movlw	1	; select bank2/3
 19059  012F  0087               	movwf	7
 19060  0130  3001               	movlw	1
 19061  0131  0281               	subwf	1,f
 19062                           
 19063                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 19064  0132  294A               	goto	i1l7288
 19065  0133                     i1l7284:	
 19066  0133  087A               	movf	_DimmerLightsIntr,w
 19067  0134  3E04               	addlw	4
 19068  0135  0086               	movwf	6
 19069  0136  3001               	movlw	1	; select bank2/3
 19070  0137  0087               	movwf	7
 19071  0138  087A               	movf	_DimmerLightsIntr,w
 19072  0139  3E05               	addlw	5
 19073  013A  0084               	movwf	4
 19074  013B  3001               	movlw	1	; select bank2/3
 19075  013C  0085               	movwf	5
 19076  013D  0800               	movf	0,w
 19077  013E  0201               	subwf	1,w
 19078  013F  1803               	skipnc
 19079  0140  294A               	goto	i1l7288
 19080                           
 19081                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 19082  0141  3001               	movlw	1
 19083  0142  00F2               	movwf	??_setDimmerLights_IntrControl
 19084  0143  087A               	movf	_DimmerLightsIntr,w
 19085  0144  3E04               	addlw	4
 19086  0145  0086               	movwf	6
 19087  0146  3001               	movlw	1	; select bank2/3
 19088  0147  0087               	movwf	7
 19089  0148  0872               	movf	??_setDimmerLights_IntrControl,w
 19090  0149  0781               	addwf	1,f
 19091  014A                     i1l7288:	
 19092                           
 19093                           ;Dimmer_B1.c: 143: }
 19094                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 19095  014A  087A               	movf	_DimmerLightsIntr,w
 19096  014B  3E05               	addlw	5
 19097  014C  0086               	movwf	6
 19098  014D  3001               	movlw	1	; select bank2/3
 19099  014E  0087               	movwf	7
 19100  014F  087A               	movf	_DimmerLightsIntr,w
 19101  0150  3E04               	addlw	4
 19102  0151  0084               	movwf	4
 19103  0152  3001               	movlw	1	; select bank2/3
 19104  0153  0085               	movwf	5
 19105  0154  0800               	movf	0,w
 19106  0155  0601               	xorwf	1,w
 19107  0156  1D03               	skipz
 19108  0157  29BD               	goto	i1l7316
 19109                           
 19110                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 19111  0158  087A               	movf	_DimmerLightsIntr,w
 19112  0159  0086               	movwf	6
 19113  015A  3001               	movlw	1	; select bank2/3
 19114  015B  0087               	movwf	7
 19115  015C  1101               	bcf	1,2
 19116  015D  2979               	goto	i1l7298
 19117  015E                     i1l7292:	
 19118                           ;Dimmer_B1.c: 147: }
 19119                           ;Dimmer_B1.c: 148: } else {
 19120                           
 19121                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 19122                           
 19123                           
 19124                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 19125  015E  087A               	movf	_DimmerLightsIntr,w
 19126  015F  0086               	movwf	6
 19127  0160  3001               	movlw	1	; select bank2/3
 19128  0161  0087               	movwf	7
 19129  0162  1E81               	btfss	1,5
 19130  0163  297F               	goto	i1l7300
 19131                           
 19132                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 19133  0164  087A               	movf	_DimmerLightsIntr,w
 19134  0165  3E04               	addlw	4
 19135  0166  0086               	movwf	6
 19136  0167  3001               	movlw	1	; select bank2/3
 19137  0168  0087               	movwf	7
 19138  0169  3001               	movlw	1
 19139  016A  0281               	subwf	1,f
 19140                           
 19141                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 19142  016B  087A               	movf	_DimmerLightsIntr,w
 19143  016C  3E05               	addlw	5
 19144  016D  0086               	movwf	6
 19145  016E  3001               	movlw	1	; select bank2/3
 19146  016F  0087               	movwf	7
 19147  0170  087A               	movf	_DimmerLightsIntr,w
 19148  0171  3E04               	addlw	4
 19149  0172  0084               	movwf	4
 19150  0173  3001               	movlw	1	; select bank2/3
 19151  0174  0085               	movwf	5
 19152  0175  0800               	movf	0,w
 19153  0176  0201               	subwf	1,w
 19154  0177  1C03               	skipc
 19155  0178  29BD               	goto	i1l7316
 19156  0179                     i1l7298:	
 19157                           
 19158                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 19159  0179  087A               	movf	_DimmerLightsIntr,w
 19160  017A  0086               	movwf	6
 19161  017B  3001               	movlw	1	; select bank2/3
 19162  017C  0087               	movwf	7
 19163  017D  1081               	bcf	1,1
 19164                           
 19165                           ;Dimmer_B1.c: 153: }
 19166                           ;Dimmer_B1.c: 154: } else {
 19167  017E  29BD               	goto	i1l7316
 19168  017F                     i1l7300:	
 19169                           
 19170                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 19171  017F  3001               	movlw	1
 19172  0180  00F2               	movwf	??_setDimmerLights_IntrControl
 19173  0181  087A               	movf	_DimmerLightsIntr,w
 19174  0182  3E04               	addlw	4
 19175  0183  0086               	movwf	6
 19176  0184  3001               	movlw	1	; select bank2/3
 19177  0185  0087               	movwf	7
 19178  0186  0872               	movf	??_setDimmerLights_IntrControl,w
 19179  0187  0781               	addwf	1,f
 19180                           
 19181                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 19182  0188  087A               	movf	_DimmerLightsIntr,w
 19183  0189  3E04               	addlw	4
 19184  018A  0086               	movwf	6
 19185  018B  3001               	movlw	1	; select bank2/3
 19186  018C  0087               	movwf	7
 19187  018D  087A               	movf	_DimmerLightsIntr,w
 19188  018E  3E06               	addlw	6
 19189  018F  0084               	movwf	4
 19190  0190  3001               	movlw	1	; select bank2/3
 19191  0191  0085               	movwf	5
 19192  0192  0800               	movf	0,w
 19193  0193  0201               	subwf	1,w
 19194  0194  1C03               	skipc
 19195  0195  29BD               	goto	i1l7316
 19196                           
 19197                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 19198  0196  087A               	movf	_DimmerLightsIntr,w
 19199  0197  0086               	movwf	6
 19200  0198  3001               	movlw	1	; select bank2/3
 19201  0199  0087               	movwf	7
 19202  019A  1081               	bcf	1,1
 19203                           
 19204                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 19205  019B  087A               	movf	_DimmerLightsIntr,w
 19206  019C  0086               	movwf	6
 19207  019D  3001               	movlw	1	; select bank2/3
 19208  019E  0087               	movwf	7
 19209  019F  1301               	bcf	1,6
 19210                           
 19211                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 19212  01A0  087A               	movf	_DimmerLightsIntr,w
 19213  01A1  3E09               	addlw	9
 19214  01A2  0086               	movwf	6
 19215  01A3  3001               	movlw	1	; select bank2/3
 19216  01A4  0087               	movwf	7
 19217  01A5  1501               	bsf	1,2
 19218                           
 19219                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 19220  01A6  0021               	movlb	1	; select bank1
 19221  01A7  084C               	movf	_Dimmer^(0+128),w
 19222  01A8  0086               	movwf	6
 19223  01A9  0187               	clrf	7
 19224  01AA  1401               	bsf	1,0
 19225                           
 19226                           ;Dimmer_B1.c: 162: if (lights == 1) {
 19227  01AB  0876               	movf	setDimmerLights_IntrControl@lights,w
 19228  01AC  3A01               	xorlw	1
 19229  01AD  1D03               	skipz
 19230  01AE  29B1               	goto	i1l7310
 19231                           
 19232                           ;Dimmer_B1.c: 163: RA3 = 0;
 19233  01AF  0020               	movlb	0	; select bank0
 19234  01B0  118C               	bcf	12,3	;volatile
 19235  01B1                     i1l7310:	
 19236                           
 19237                           ;Dimmer_B1.c: 165: }
 19238                           ;Dimmer_B1.c: 168: if (lights == 2) {
 19239  01B1  0876               	movf	setDimmerLights_IntrControl@lights,w
 19240  01B2  3A02               	xorlw	2
 19241  01B3  1D03               	skipz
 19242  01B4  29B7               	goto	i1l7314
 19243                           
 19244                           ;Dimmer_B1.c: 169: RC7 = 0;
 19245  01B5  0020               	movlb	0	; select bank0
 19246  01B6  138E               	bcf	14,7	;volatile
 19247  01B7                     i1l7314:	
 19248                           
 19249                           ;Dimmer_B1.c: 170: }
 19250                           ;Dimmer_B1.c: 177: setLoad_StatusOff(lights, 1);
 19251  01B7  01F0               	clrf	i1setLoad_StatusOff@command
 19252  01B8  0AF0               	incf	i1setLoad_StatusOff@command,f
 19253  01B9  0876               	movf	setDimmerLights_IntrControl@lights,w
 19254  01BA  319C  24D7  3180   	fcall	i1_setLoad_StatusOff
 19255  01BD                     i1l7316:	
 19256                           
 19257                           ;Dimmer_B1.c: 178: }
 19258                           ;Dimmer_B1.c: 179: }
 19259                           ;Dimmer_B1.c: 180: }
 19260                           ;Dimmer_B1.c: 181: }
 19261                           ;Dimmer_B1.c: 182: }
 19262                           ;Dimmer_B1.c: 183: }
 19263                           ;Dimmer_B1.c: 184: }
 19264                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 19265  01BD  087A               	movf	_DimmerLightsIntr,w
 19266  01BE  3E08               	addlw	8
 19267  01BF  0086               	movwf	6
 19268  01C0  3001               	movlw	1	; select bank2/3
 19269  01C1  0087               	movwf	7
 19270  01C2  1E81               	btfss	1,5
 19271  01C3  29EE               	goto	i1l7334
 19272                           
 19273                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 19274  01C4  3001               	movlw	1
 19275  01C5  00F2               	movwf	??_setDimmerLights_IntrControl
 19276  01C6  087A               	movf	_DimmerLightsIntr,w
 19277  01C7  3E07               	addlw	7
 19278  01C8  0086               	movwf	6
 19279  01C9  3001               	movlw	1	; select bank2/3
 19280  01CA  0087               	movwf	7
 19281  01CB  0872               	movf	??_setDimmerLights_IntrControl,w
 19282  01CC  0781               	addwf	1,f
 19283                           
 19284                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 19285  01CD  087A               	movf	_DimmerLightsIntr,w
 19286  01CE  3E07               	addlw	7
 19287  01CF  0086               	movwf	6
 19288  01D0  3001               	movlw	1	; select bank2/3
 19289  01D1  0087               	movwf	7
 19290  01D2  3005               	movlw	5
 19291  01D3  0201               	subwf	1,w
 19292  01D4  1C03               	skipc
 19293  01D5  29EE               	goto	i1l7334
 19294                           
 19295                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 19296  01D6  087A               	movf	_DimmerLightsIntr,w
 19297  01D7  3E07               	addlw	7
 19298  01D8  0086               	movwf	6
 19299  01D9  3001               	movlw	1	; select bank2/3
 19300  01DA  0087               	movwf	7
 19301  01DB  0181               	clrf	1
 19302                           
 19303                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 19304  01DC  087A               	movf	_DimmerLightsIntr,w
 19305  01DD  3E08               	addlw	8
 19306  01DE  0086               	movwf	6
 19307  01DF  3001               	movlw	1	; select bank2/3
 19308  01E0  0087               	movwf	7
 19309  01E1  1281               	bcf	1,5
 19310                           
 19311                           ;Dimmer_B1.c: 192: if (lights == 1) {
 19312  01E2  0876               	movf	setDimmerLights_IntrControl@lights,w
 19313  01E3  3A01               	xorlw	1
 19314  01E4  1D03               	skipz
 19315  01E5  29E8               	goto	i1l7330
 19316                           
 19317                           ;Dimmer_B1.c: 193: RA7 = 0;
 19318  01E6  0020               	movlb	0	; select bank0
 19319  01E7  138C               	bcf	12,7	;volatile
 19320  01E8                     i1l7330:	
 19321                           ;Dimmer_B1.c: 194: ;;
 19322                           
 19323                           
 19324                           ;Dimmer_B1.c: 195: }
 19325                           ;Dimmer_B1.c: 198: if (lights == 2) {
 19326  01E8  0876               	movf	setDimmerLights_IntrControl@lights,w
 19327  01E9  3A02               	xorlw	2
 19328  01EA  1D03               	skipz
 19329  01EB  29EE               	goto	i1l7334
 19330                           
 19331                           ;Dimmer_B1.c: 199: RB4 = 0;
 19332  01EC  0020               	movlb	0	; select bank0
 19333  01ED  120D               	bcf	13,4	;volatile
 19334  01EE                     i1l7334:	
 19335                           
 19336                           ;Dimmer_B1.c: 200: }
 19337                           ;Dimmer_B1.c: 207: }
 19338                           ;Dimmer_B1.c: 208: }
 19339                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 19340  01EE  087A               	movf	_DimmerLightsIntr,w
 19341  01EF  3E09               	addlw	9
 19342  01F0  0086               	movwf	6
 19343  01F1  3001               	movlw	1	; select bank2/3
 19344  01F2  0087               	movwf	7
 19345  01F3  1E81               	btfss	1,5
 19346  01F4  0008               	return
 19347                           
 19348                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 19349  01F5  3001               	movlw	1
 19350  01F6  00F2               	movwf	??_setDimmerLights_IntrControl
 19351  01F7  087A               	movf	_DimmerLightsIntr,w
 19352  01F8  3E0A               	addlw	10
 19353  01F9  0086               	movwf	6
 19354  01FA  3001               	movlw	1	; select bank2/3
 19355  01FB  0087               	movwf	7
 19356  01FC  0872               	movf	??_setDimmerLights_IntrControl,w
 19357  01FD  0781               	addwf	1,f
 19358                           
 19359                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 19360  01FE  087A               	movf	_DimmerLightsIntr,w
 19361  01FF  3E0A               	addlw	10
 19362  0200  0086               	movwf	6
 19363  0201  3001               	movlw	1	; select bank2/3
 19364  0202  0087               	movwf	7
 19365  0203  0801               	movf	1,w
 19366  0204  3A46               	xorlw	70
 19367  0205  1D03               	skipz
 19368  0206  0008               	return
 19369                           
 19370                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 19371  0207  087A               	movf	_DimmerLightsIntr,w
 19372  0208  3E0A               	addlw	10
 19373  0209  0086               	movwf	6
 19374  020A  3001               	movlw	1	; select bank2/3
 19375  020B  0087               	movwf	7
 19376  020C  0181               	clrf	1
 19377                           
 19378                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 19379  020D  087A               	movf	_DimmerLightsIntr,w
 19380  020E  3E09               	addlw	9
 19381  020F  0086               	movwf	6
 19382  0210  3001               	movlw	1	; select bank2/3
 19383  0211  0087               	movwf	7
 19384  0212  1281               	bcf	1,5
 19385  0213  0008               	return
 19386  0214                     __end_of_setDimmerLights_IntrControl:	
 19387                           
 19388                           	psect	text137
 19389  1CD7                     __ptext137:	
 19390 ;; *************** function i1_setLoad_StatusOff *****************
 19391 ;; Defined at:
 19392 ;;		line 282 in file "../src/OverLoad_B1.c"
 19393 ;; Parameters:    Size  Location     Type
 19394 ;;  lights          1    wreg     unsigned char 
 19395 ;;  command         1    0[COMMON] unsigned char 
 19396 ;; Auto vars:     Size  Location     Type
 19397 ;;  lights          1    1[COMMON] unsigned char 
 19398 ;; Return value:  Size  Location     Type
 19399 ;;		None               void
 19400 ;; Registers used:
 19401 ;;		wreg, status,2, status,0
 19402 ;; Tracked objects:
 19403 ;;		On entry : 0/0
 19404 ;;		On exit  : 0/0
 19405 ;;		Unchanged: 0/0
 19406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19407 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19408 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19410 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19411 ;;Total ram usage:        2 bytes
 19412 ;; Hardware stack levels used:    1
 19413 ;; This function calls:
 19414 ;;		Nothing
 19415 ;; This function is called by:
 19416 ;;		_setDimmerLights_IntrControl
 19417 ;; This function uses a non-reentrant model
 19418 ;;
 19419                           
 19420                           
 19421                           ;psect for function i1_setLoad_StatusOff
 19422  1CD7                     i1_setLoad_StatusOff:	
 19423                           
 19424                           ;incstack = 0
 19425                           ; Regs used in i1_setLoad_StatusOff: [wreg+status,2+status,0]
 19426                           ;i1setLoad_StatusOff@lights stored from wreg
 19427  1CD7  00F1               	movwf	i1setLoad_StatusOff@lights
 19428                           
 19429                           ;OverLoad_B1.c: 283: Load1.StatusOff = command;
 19430  1CD8  0870               	movf	i1setLoad_StatusOff@command,w
 19431  1CD9  0023               	movlb	3	; select bank3
 19432  1CDA  13A0               	bcf	_Load1^(0+384),7
 19433  1CDB  1D03               	skipz
 19434  1CDC  17A0               	bsf	_Load1^(0+384),7
 19435                           
 19436                           ;OverLoad_B1.c: 284: Load1.SafeCount -= 2;
 19437  1CDD  3002               	movlw	2
 19438  1CDE  02E2               	subwf	(_Load1^(0+384)+66),f
 19439                           
 19440                           ;OverLoad_B1.c: 285: if (lights == 1) {
 19441  1CDF  0871               	movf	i1setLoad_StatusOff@lights,w
 19442  1CE0  3A01               	xorlw	1
 19443  1CE1  1903               	btfsc	3,2
 19444                           
 19445                           ;OverLoad_B1.c: 286: Load1.Lights1Status = 0;
 19446  1CE2  01E3               	clrf	(_Load1^(0+384)+67)
 19447                           
 19448                           ;OverLoad_B1.c: 287: }
 19449                           ;OverLoad_B1.c: 288: if (lights == 2) {
 19450  1CE3  0871               	movf	i1setLoad_StatusOff@lights,w
 19451  1CE4  3A02               	xorlw	2
 19452  1CE5  1903               	btfsc	3,2
 19453                           
 19454                           ;OverLoad_B1.c: 289: Load1.Lights2Status = 0;
 19455  1CE6  01E4               	clrf	(_Load1^(0+384)+68)
 19456                           
 19457                           ;OverLoad_B1.c: 290: }
 19458                           ;OverLoad_B1.c: 291: if (lights == 3) {
 19459  1CE7  0871               	movf	i1setLoad_StatusOff@lights,w
 19460  1CE8  3A03               	xorlw	3
 19461  1CE9  1D03               	skipz
 19462  1CEA  0008               	return
 19463                           
 19464                           ;OverLoad_B1.c: 292: Load1.Lights3Status = 0;
 19465  1CEB  01E5               	clrf	(_Load1^(0+384)+69)
 19466  1CEC  0008               	return
 19467  1CED                     __end_ofi1_setLoad_StatusOff:	
 19468                           
 19469                           	psect	text138
 19470  1C19                     __ptext138:	
 19471 ;; *************** function _DimmerIntrPointSelect *****************
 19472 ;; Defined at:
 19473 ;;		line 65 in file "../src/Dimmer_B1.c"
 19474 ;; Parameters:    Size  Location     Type
 19475 ;;  lights          1    wreg     unsigned char 
 19476 ;; Auto vars:     Size  Location     Type
 19477 ;;  lights          1    1[COMMON] unsigned char 
 19478 ;; Return value:  Size  Location     Type
 19479 ;;		None               void
 19480 ;; Registers used:
 19481 ;;		wreg
 19482 ;; Tracked objects:
 19483 ;;		On entry : 0/0
 19484 ;;		On exit  : 0/0
 19485 ;;		Unchanged: 0/0
 19486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19488 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19489 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19490 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19491 ;;Total ram usage:        2 bytes
 19492 ;; Hardware stack levels used:    1
 19493 ;; This function calls:
 19494 ;;		Nothing
 19495 ;; This function is called by:
 19496 ;;		_setDimmerLights_IntrControl
 19497 ;; This function uses a non-reentrant model
 19498 ;;
 19499                           
 19500                           
 19501                           ;psect for function _DimmerIntrPointSelect
 19502  1C19                     _DimmerIntrPointSelect:	
 19503                           
 19504                           ;incstack = 0
 19505                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19506                           ;DimmerIntrPointSelect@lights stored from wreg
 19507  1C19  00F1               	movwf	DimmerIntrPointSelect@lights
 19508                           
 19509                           ;Dimmer_B1.c: 67: if (lights == 1) {
 19510  1C1A  0871               	movf	DimmerIntrPointSelect@lights,w
 19511  1C1B  3A01               	xorlw	1
 19512  1C1C  1D03               	skipz
 19513  1C1D  2C22               	goto	i1l777
 19514                           
 19515                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 19516  1C1E  303D               	movlw	_DimmerLights1& (0+255)
 19517  1C1F  00F0               	movwf	??_DimmerIntrPointSelect
 19518  1C20  0870               	movf	??_DimmerIntrPointSelect,w
 19519  1C21  00FA               	movwf	_DimmerLightsIntr
 19520  1C22                     i1l777:	
 19521                           
 19522                           ;Dimmer_B1.c: 69: }
 19523                           ;Dimmer_B1.c: 72: if (lights == 2) {
 19524  1C22  0871               	movf	DimmerIntrPointSelect@lights,w
 19525  1C23  3A02               	xorlw	2
 19526  1C24  1D03               	skipz
 19527  1C25  0008               	return
 19528                           
 19529                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights2;
 19530  1C26  304C               	movlw	_DimmerLights2& (0+255)
 19531  1C27  00F0               	movwf	??_DimmerIntrPointSelect
 19532  1C28  0870               	movf	??_DimmerIntrPointSelect,w
 19533  1C29  00FA               	movwf	_DimmerLightsIntr
 19534  1C2A  0008               	return
 19535  1C2B                     __end_of_DimmerIntrPointSelect:	
 19536                           
 19537                           	psect	text139
 19538  1B18                     __ptext139:	
 19539 ;; *************** function _IOC_ISR *****************
 19540 ;; Defined at:
 19541 ;;		line 291 in file "../src/MCU_B1.c"
 19542 ;; Parameters:    Size  Location     Type
 19543 ;;		None
 19544 ;; Auto vars:     Size  Location     Type
 19545 ;;		None
 19546 ;; Return value:  Size  Location     Type
 19547 ;;		None               void
 19548 ;; Registers used:
 19549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19550 ;; Tracked objects:
 19551 ;;		On entry : 0/0
 19552 ;;		On exit  : 0/0
 19553 ;;		Unchanged: 0/0
 19554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19559 ;;Total ram usage:        0 bytes
 19560 ;; Hardware stack levels used:    1
 19561 ;; Hardware stack levels required when called:    3
 19562 ;; This function calls:
 19563 ;;		_setDimmerReClock
 19564 ;; This function is called by:
 19565 ;;		_ISR
 19566 ;; This function uses a non-reentrant model
 19567 ;;
 19568                           
 19569                           
 19570                           ;psect for function _IOC_ISR
 19571  1B18                     _IOC_ISR:	
 19572                           
 19573                           ;MCU_B1.c: 292: if (IOCIE == 1 && IOCBF2 == 1) {
 19574                           
 19575                           ;incstack = 0
 19576                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19577  1B18  1D8B               	btfss	11,3	;volatile
 19578  1B19  0008               	return
 19579  1B1A  0027               	movlb	7	; select bank7
 19580  1B1B  1D16               	btfss	22,2	;volatile
 19581  1B1C  0008               	return
 19582                           
 19583                           ;MCU_B1.c: 293: IOCBF2 = 0;
 19584  1B1D  1116               	bcf	22,2	;volatile
 19585                           
 19586                           ;MCU_B1.c: 294: IOCIF = 0;
 19587  1B1E  100B               	bcf	11,0	;volatile
 19588                           
 19589                           ;MCU_B1.c: 295: if (myMain.PowerON == 1) {
 19590  1B1F  0021               	movlb	1	; select bank1
 19591  1B20  1C20               	btfss	_myMain^(0+128),0
 19592  1B21  0008               	return
 19593                           
 19594                           ;MCU_B1.c: 297: setDimmerReClock();
 19595  1B22  319A  2269         	fcall	_setDimmerReClock
 19596  1B24  0008               	return
 19597  1B25                     __end_of_IOC_ISR:	
 19598                           
 19599                           	psect	text140
 19600  1A69                     __ptext140:	
 19601 ;; *************** function _setDimmerReClock *****************
 19602 ;; Defined at:
 19603 ;;		line 169 in file "../src/MCU_B1.c"
 19604 ;; Parameters:    Size  Location     Type
 19605 ;;		None
 19606 ;; Auto vars:     Size  Location     Type
 19607 ;;		None
 19608 ;; Return value:  Size  Location     Type
 19609 ;;		None               void
 19610 ;; Registers used:
 19611 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19612 ;; Tracked objects:
 19613 ;;		On entry : 0/0
 19614 ;;		On exit  : 0/0
 19615 ;;		Unchanged: 0/0
 19616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19621 ;;Total ram usage:        0 bytes
 19622 ;; Hardware stack levels used:    1
 19623 ;; Hardware stack levels required when called:    2
 19624 ;; This function calls:
 19625 ;;		_setDimmerLights_IntrIOC_GO
 19626 ;; This function is called by:
 19627 ;;		_IOC_ISR
 19628 ;; This function uses a non-reentrant model
 19629 ;;
 19630                           
 19631                           
 19632                           ;psect for function _setDimmerReClock
 19633  1A69                     _setDimmerReClock:	
 19634                           
 19635                           ;MCU_B1.c: 174: setDimmerLights_IntrIOC_GO(1);
 19636                           
 19637                           ;incstack = 0
 19638                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19639  1A69  3001               	movlw	1
 19640  1A6A  319E  2600  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19641                           
 19642                           ;MCU_B1.c: 178: setDimmerLights_IntrIOC_GO(2);
 19643  1A6D  3002               	movlw	2
 19644  1A6E  319E  2600         	fcall	_setDimmerLights_IntrIOC_GO
 19645  1A70  0008               	return
 19646  1A71                     __end_of_setDimmerReClock:	
 19647                           
 19648                           	psect	text141
 19649  1E00                     __ptext141:	
 19650 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19651 ;; Defined at:
 19652 ;;		line 28 in file "../src/Dimmer_B1.c"
 19653 ;; Parameters:    Size  Location     Type
 19654 ;;  lights          1    wreg     unsigned char 
 19655 ;; Auto vars:     Size  Location     Type
 19656 ;;  lights          1    2[COMMON] unsigned char 
 19657 ;; Return value:  Size  Location     Type
 19658 ;;		None               void
 19659 ;; Registers used:
 19660 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19661 ;; Tracked objects:
 19662 ;;		On entry : 0/0
 19663 ;;		On exit  : 0/0
 19664 ;;		Unchanged: 0/0
 19665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19669 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19670 ;;Total ram usage:        1 bytes
 19671 ;; Hardware stack levels used:    1
 19672 ;; Hardware stack levels required when called:    1
 19673 ;; This function calls:
 19674 ;;		_DimmerIntrIOCPointSelect
 19675 ;; This function is called by:
 19676 ;;		_setDimmerReClock
 19677 ;; This function uses a non-reentrant model
 19678 ;;
 19679                           
 19680                           
 19681                           ;psect for function _setDimmerLights_IntrIOC_GO
 19682  1E00                     _setDimmerLights_IntrIOC_GO:	
 19683                           
 19684                           ;incstack = 0
 19685                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19686                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19687  1E00  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19688                           
 19689                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 19690  1E01  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19691  1E02  319C  2486  319E   	fcall	_DimmerIntrIOCPointSelect
 19692                           
 19693                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 19694  1E05  0021               	movlb	1	; select bank1
 19695  1E06  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19696  1E07  0086               	movwf	6
 19697  1E08  3001               	movlw	1	; select bank2/3
 19698  1E09  0087               	movwf	7
 19699  1E0A  1801               	btfsc	1,0
 19700  1E0B  0008               	return
 19701  1E0C  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19702  1E0D  3E09               	addlw	9
 19703  1E0E  0086               	movwf	6
 19704  1E0F  3001               	movlw	1	; select bank2/3
 19705  1E10  0087               	movwf	7
 19706  1E11  1A81               	btfsc	1,5
 19707  1E12  0008               	return
 19708                           
 19709                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 19710  1E13  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19711  1E14  0086               	movwf	6
 19712  1E15  3001               	movlw	1	; select bank2/3
 19713  1E16  0087               	movwf	7
 19714  1E17  1401               	bsf	1,0
 19715                           
 19716                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 19717  1E18  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19718  1E19  3E09               	addlw	9
 19719  1E1A  0086               	movwf	6
 19720  1E1B  3001               	movlw	1	; select bank2/3
 19721  1E1C  0087               	movwf	7
 19722  1E1D  1681               	bsf	1,5
 19723  1E1E  0008               	return
 19724  1E1F                     __end_of_setDimmerLights_IntrIOC_GO:	
 19725                           
 19726                           	psect	text142
 19727  1C86                     __ptext142:	
 19728 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19729 ;; Defined at:
 19730 ;;		line 8 in file "../src/Dimmer_B1.c"
 19731 ;; Parameters:    Size  Location     Type
 19732 ;;  lights          1    wreg     unsigned char 
 19733 ;; Auto vars:     Size  Location     Type
 19734 ;;  lights          1    1[COMMON] unsigned char 
 19735 ;; Return value:  Size  Location     Type
 19736 ;;		None               void
 19737 ;; Registers used:
 19738 ;;		wreg
 19739 ;; Tracked objects:
 19740 ;;		On entry : 0/0
 19741 ;;		On exit  : 0/0
 19742 ;;		Unchanged: 0/0
 19743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19746 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19747 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19748 ;;Total ram usage:        2 bytes
 19749 ;; Hardware stack levels used:    1
 19750 ;; This function calls:
 19751 ;;		Nothing
 19752 ;; This function is called by:
 19753 ;;		_setDimmerLights_IntrIOC_GO
 19754 ;; This function uses a non-reentrant model
 19755 ;;
 19756                           
 19757                           
 19758                           ;psect for function _DimmerIntrIOCPointSelect
 19759  1C86                     _DimmerIntrIOCPointSelect:	
 19760                           
 19761                           ;incstack = 0
 19762                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19763                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19764  1C86  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19765                           
 19766                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19767  1C87  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19768  1C88  3A01               	xorlw	1
 19769  1C89  1D03               	skipz
 19770  1C8A  2C90               	goto	i1l768
 19771                           
 19772                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19773  1C8B  303D               	movlw	_DimmerLights1& (0+255)
 19774  1C8C  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19775  1C8D  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19776  1C8E  0021               	movlb	1	; select bank1
 19777  1C8F  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19778  1C90                     i1l768:	
 19779                           
 19780                           ;Dimmer_B1.c: 12: }
 19781                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19782  1C90  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19783  1C91  3A02               	xorlw	2
 19784  1C92  1D03               	skipz
 19785  1C93  0008               	return
 19786                           
 19787                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19788  1C94  304C               	movlw	_DimmerLights2& (0+255)
 19789  1C95  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19790  1C96  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19791  1C97  0021               	movlb	1	; select bank1
 19792  1C98  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19793  1C99  0008               	return
 19794  1C9A                     __end_of_DimmerIntrIOCPointSelect:	
 19795  007E                     btemp	set	126	;btemp
 19796  007E                     pic14e$flags	set	126
 19797  007E                     wtemp	set	126
 19798  007E                     wtemp0	set	126
 19799  0080                     wtemp1	set	128
 19800  0082                     wtemp2	set	130
 19801  0084                     wtemp3	set	132
 19802  0086                     wtemp4	set	134
 19803  0088                     wtemp5	set	136
 19804  007F                     wtemp6	set	127
 19805  007E                     ttemp	set	126
 19806  007E                     ttemp0	set	126
 19807  0081                     ttemp1	set	129
 19808  0084                     ttemp2	set	132
 19809  0087                     ttemp3	set	135
 19810  007F                     ttemp4	set	127
 19811  007E                     ltemp	set	126
 19812  007E                     ltemp0	set	126
 19813  0082                     ltemp1	set	130
 19814  0086                     ltemp2	set	134
 19815  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         284
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     78      79
    BANK1            80      0      78
    BANK2            80      0      77
    BANK3            80      0      79
    BANK4            80      0      78
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(2) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK4[9]), Sw1(BANK3[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerLights_IntrControl->i1_setLoad_StatusOff
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  112467
                                             74 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1856
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     194
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           5     5      0     399
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     172
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    7962
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    7962
                                             17 BANK0      1     1      0
                       _getLoad_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    7939
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   25384
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   25384
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   11133
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   10818
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1414
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     278
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     278
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   33796
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   33796
                                             71 BANK0      2     2      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   33120
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   31454
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   12731
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1467
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   14032
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   13846
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   13753
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   13660
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3926
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            3     3      0    7589
                                             17 BANK0      3     3      0
                            ___lwdiv
                             ___wmul
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   3     3      0    6273
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     124
                                              1 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4887
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     371
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2709
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     432
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getTemp_Safe                                         1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     230
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    6993
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   12020
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   11884
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8092
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     254
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1776
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     152
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1     989
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       1     1      0      93
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     136
         _getDimmerLights_StatusFlag
                         _setLoad_GO
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   11710
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   11710
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     586
                                              1 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    7529
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    6659
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     525
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     663
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     509
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     509
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     400
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     334
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     334
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (14) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___awdiv
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setLoad_Enable
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect
       i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      4E      13       97.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     194      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     194      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Oct 21 17:21:41 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1EDD                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 00C7  
     __end_of_getDimmerLights_StatusFlag 1C08               _getDimmerLights_StatusFlag 1BF7  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 08D7  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1E5D  
                   _setDimmerLights_Main 09B0                             ___ftadd@sign 0048  
                                    l102 16BA                                      l112 149B  
                                    l104 16CE                                      l113 1497  
                                    l114 1485                                      l116 1495  
                                    l342 1CA4                                      l343 1CA5  
                                    l267 0845                                      l292 0C2B  
                                    l293 0C7B                                      l386 1F8E  
                                    l820 1C7D                                      l866 1522  
                                    _GIE 005F                                      _CRC 00CB  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00C3  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00BE                                      _ISR 0004  
                                    _WDT 00C9                                      _Sw1 01E6  
                                    _Sw2 0245                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1CAE           ??_setDimmerLights_TriggerERROR 0023  
                  _Buzzer_Initialization 1A1C                          __end_of_ADC_Set 1A62  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0D8E  
                  _setDimmerLights_ERROR 15DA                    _setDimmerLights_AdjRF 1F66  
                  _setDimmerLights_AdjGo 1BD7                  __size_of_setTemp_Enable 0008  
                  _setDimmerLights_Clear 1BC7                                     ?_ISR 0070  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1B25  
                             Load_Main@i 0033                             ___ftdiv@sign 003D  
                                   l3010 1770                                     l2302 1161  
                                   l1343 1E7A                                     l2320 1CF8  
                                   l3016 1787                 ?_DimmerLightsPointSelect 0070  
                                   l1356 112B                                     l1365 137B  
                                   l2261 0963                                     l2334 1264  
                                   l1550 14EA                                     l3039 0584  
                                   l1714 122A                                     l1706 0364  
                                   l2266 098A                                     l2284 1B6F  
                                   l2268 099B                          __end_of_IOC_Set 1B32  
                                   l1684 022A                                     l1687 0355  
                                   l2673 1B7A                                     l2849 1DCD  
                                   l6314 1E4E                                     l7140 12E5  
                                   l8020 0B53                                     l7150 12F5  
                                   l7134 12DC                                     l6318 1E55  
                                   l8014 0B30                                     l7144 12EC  
                                   l7136 12DF                                     l8024 0B5B  
                                   l7146 12EF                                     l8036 0B83  
                                   l6462 1C01                                     l6390 1F5D  
                                   l7510 135B                                     l6446 1D54  
                                   l9022 1252                                     l9110 0E9A  
                                   l9102 0E88                                     l9120 1311  
                                   l7504 1346                                     l6448 1D58  
                                   l6800 0C22                                     l8048 11C0  
                                   l6386 1F55                                     l9042 1515  
                                   l6730 0816                                     l8402 0523  
                                   l9106 0E91                                     l6572 1D7E  
                                   l9044 151A                                     l9036 1502  
                                   l8420 0550                                     l9140 12A4  
                                   l6574 1D81                                     l8350 174D  
                                   l6590 1F2D                                     l6814 0C3C  
                                   l6734 081C                                     l8422 055A  
                                   l8414 053D                                     l8510 0F79  
                                   l9214 0AFD                                     l8360 1775  
                                   l8352 1757                                     l6816 0C54  
                                   l6760 0858                                     l6752 084B  
                                   l6728 0813                                     l8432 0576  
                                   l8424 055F                                     l8504 0F63  
                                   l9224 1549                                     l9136 1298  
                                   l6578 1D87                                     l8362 177D  
                                   l8354 175C                                     l8346 1746  
                                   l9330 09F5                                     l9314 09C4  
                                   l6594 1F33                                     l6834 0C7D  
                                   l6762 085B                                     l6754 084E  
                                   l8442 05A8                                     l8434 0580  
                                   l8426 0563                                     l8522 0FB4  
                                   l9154 141E                                     l6844 1F9F  
                                   l6852 1EC4                                     l8380 1EE8  
                                   l9340 0A1D                                     l7820 11F6  
                                   l7812 11D8                                     l6588 1F2A  
                                   l6780 0C07                                     l6748 082D  
                                   l8452 05C3                                     l8612 1C58  
                                   l9092 0E64                                     l9228 1556  
                                   l7492 1E8F                                     l6846 1FAA  
                                   l6854 1EC7                                     l8702 159C  
                                   l8462 0EBA                                     l9326 09E9  
                                   l9318 09CE                                     l7814 11E4  
                                   l6782 0C0A                                     l6766 0861  
                                   l6758 0854                                     l8438 0596  
                                   l8534 0FD0                                     l8526 0FBC  
                                   l9166 1434                                     l9190 0AAB  
                                   l9430 0CE9                                     l7486 1E87  
                                   l8720 15C2                                     l8712 15A4  
                                   l7824 11FF                                     l8392 050D  
                                   l8608 1C52                                     l7488 1E8A  
                                   l6858 1ECD                                     l8626 1CB9  
                                   l8714 15B0                                     l8490 0F2A  
                                   l8482 0F11                                     l8554 0D20  
                                   l6938 1113                                     l9370 1409  
                                   l6786 0C10                                     l8538 0FD8  
                                   l8642 10A9                                     l9098 0E7F  
                                   l9258 0A74                                     l9194 0AB8  
                                   l9418 0CD0                                     l8724 15CB  
                                   l8468 0ED0                                     l8580 0D6B  
                                   l8572 0D50                                     l6788 0C13  
                                   l8396 0514                                     l9452 0957  
                                   l7684 1B7F                                     l9516 039A  
                                   l9428 0CE7                    _myMain_Initialization 1B88  
                                   l7838 146F                                     l8582 0D74  
                                   l8574 0D5E                                     l8670 1F16  
                                   l8902 17E9                                     l8910 17F5  
                                   l9366 1402                                     l6798 0C28  
                                   l9542 03E9                                     l9526 03AC  
                                   l9518 03A2                                     l8728 15D3  
                                   l8584 0D77                                     l7792 1DC7  
                                   l9472 0973                                     l7688 1B85  
                                   l9552 0419                                     l9528 03B6  
                                   l8666 1F0B                                     l8906 17EF  
                                   l9642 064D                                     l8850 08A9  
                                   l9394 0C9D                                     l8588 0D85  
                                   l8684 1D25                                     l9804 035B  
                                   l9740 0273                                     l8860 08C8  
                                   l9396 0CA3                                     l8950 0DEC  
                                   l9734 0249                                     l8918 1171  
                                   l8854 08AF                                     l9566 0459  
                                   l8696 1591                                     l8784 0933  
                                   l8872 17AE                                     l8880 17BA  
                                   l9760 02E9                                     l8856 08BC  
                                   l9576 048D                                     _CFGS 0CAE  
                                   l8890 17CA                                     l9754 02DC  
                                   l9762 02EF                                     l8876 17B4  
                                   l9772 0307                                     l8886 17C4  
                                   l8894 17D0                                     l9790 0330  
                                   l9870 1655                                     l8984 0779  
                                   l9778 0313                                     l8994 079D  
                                   l9698 14D3                                     l9874 1660  
                                   l9798 0352                                     l8998 07B3  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   _PEIE 005E                                     u5335 1CD1  
                                   u9005 15A7                                     u7405 11DB  
                                   u9110 08E1                                     u8215 176B  
                                   u9025 15B1                                     u7425 11E5  
                                   u9035 15BB                                     u8235 1778  
                                   u9115 08DF                                     u7435 11EF  
                                   u9045 15C3                                     u7445 11F7  
                                   u7365 1DCE                                     u5855 1F94  
                                   u7375 1DD3                                     u8415 0551  
                                   u8265 178E                                     u7705 0B43  
                                   u7475 1465                                     u8195 1752  
                                   u8445 0564                                     u7655 1E71  
                                   u8545 0EE2                                     u8385 053E  
                                   u8705 0FDF                                     u8625 0F85  
                                   u7745 0B75                                     u8555 0EF2  
                                   u8475 0577                                     u8635 0F95  
                                   u8565 0F12                                     u8575 0F21  
                                   u8735 0D27                                     u8655 0FBD  
                                   u7775 11B7                                     u8585 0F2B  
                                   u8665 0FC3                                     u7785 11C6  
                                   u8765 0D51                                     u8695 0FD9  
                                   u8795 0D6C                                     _LWLO 0CAD  
                                   _RFSW 00D0                                     u8895 1095  
                                   _TMR0 0015                                     _RSSI 00D1  
                                   _WREN 0CAA                                     _Buz1 00B2  
                                   _main 1631                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0C03                          __end_of_RF_Main 1A25  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1AF4  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1A69                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1279  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 080C            __end_of_DimmerIntrPointSelect 1C2B  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
                  __end_of_setLoad_Count 1B4D                                    ?_main 006A  
                        __end_of___awdiv 15DA                          __end_of___ftadd 05DB  
                        __end_of___ftdiv 0F4C                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    u10625 02F5  
                        __end_of___fttol 0D8E                                    u10485 14B3  
                                  u10575 02B0                                    u10495 14E2  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1206                                    i1l768 1C90  
                                  i1l777 1C22                   _setDimmerLights_Switch 1B97  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EC                                    _RFSW2 00ED  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0016                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _Load1 01A0  
                __end_of_Timeout_Counter 1CD7                            __CFG_WRT$HALF 0000  
                                  _Temp1 00D7       __end_of_setDimmerLights_IntrIOC_GO 1E1F  
             _setDimmerLights_IntrIOC_GO 1E00                         __end_of_TMR0_ISR 1FD6  
           __size_of_CC2500_WriteCommand 0019                         __end_of_TMR0_Set 1A99  
                                  _getAD 1E7C                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 1537            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 14EC                           _setLoad_Enable 1ACA  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1C73              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E0  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0012            __end_of_setLED_Initialization 1C3D  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 08D7              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
                         setSw_Status@sw 0022                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0070  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 16E2  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 1AB9                        ??_setPercentValue 0059  
                           __end_of_main 1689                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1A3E                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0E18  
                   _setSw_Initialization 1A99                  setOverTemp_Exceptions@i 002F  
             __size_of_setLoad_StatusOff 001F                                   ??_main 006E  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0E18                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C86  
                 ?_setDimmerLights_AdjRF 0070                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0024  
                 __end_of_setLoad_Enable 1AD3                     __end_of_getTemp_Safe 1A91  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 0B89                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0070  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1EFF                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 179E                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1BA7                                   i1l7300 017F  
                                 i1l7310 01B1                                   i1l7330 01E8  
                                 i1l7314 01B7                                   i1l7316 01BD  
                                 i1l7252 00AE                                   i1l7334 01EE  
                                 i1l7270 00F8                                   i1l7272 00FE  
                                 i1l7248 00A7                                   i1l7284 0133  
                                 i1l7292 015E                                   i1l7276 0111  
                                 i1l7278 0117                                   i1l7288 014A  
                                 i1l7298 0179                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                                 u637_25 0082                       __size_of_Load_Main 016E  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 u758_25 1FCF                                   _IO_Set 1D8F  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1A54           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 0800                                   _Dimmer 00CC  
                                 _DlySw1 015B                                   _DlySw2 0160  
            __size_of_setLoad_Exceptions 0038               __end_of_Mcu_Initialization 1C4F  
                    __end_of_Buzzer_Main 14A2                                   _Memory 0220  
                                 _Timer0 0135       __end_of_setDimmerLights_TriggerAdj 1BF7  
             _setDimmerLights_TriggerAdj 1BE7                                   ___bmul 1C4F  
          setDimmerLights_Switch@command 0022                                   ___wmul 1DC4  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                  setDimmerLights@lights 0025                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                              ??___lwdiv 0024              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00D5  
                                 _s_data 00D6                                   _setLED 179E  
                                 _myMain 00A0                         _DimmerLightsIntr 007A  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0023  
                       ___awdiv@quotient 0027                                   _setBuz 1689  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 1A48  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002D      __end_of_setDimmerLights_IntrControl 0214  
            _setDimmerLights_IntrControl 0049                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0070  
                  __end_of_SwPointSelect 1D30                          ?_setLoad_Enable 0070  
                          ?_setRF_Enable 0070                           _setTemp_Enable 1AB9  
                        _RfSWPointSelect 1CED             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0018  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1B79  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 173D  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0045  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0021  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                       getLoad_Safe@result 0020  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK4 1E9C                            __end_of_getAD 1E9C  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0044  
                     _LED_Initialization 1B0C                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 004B                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070                __size_of_setLoad_StatusOn 0023  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0023  
                              ?_WDT_Main 0070                        __end_of_Load_Main 0382  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 1A43  
               __end_of_setDimmerReClock 1A71                       __size_of_getRxData 0048  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1AC1  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00CD                           _DimmerLights22 00CE  
                   __size_of_setLED_Main 0047                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1A28  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                              ?_Fosc_Set 0070                              _Buzzer_Main 1458  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 1A2E  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0024                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1A71  
                  __size_of_getLoad_Safe 0008                            ??_Switch_Main 006A  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0024                             _DimmerLights 0079  
                      LedPointSelect@led 0020                      i1_setLoad_StatusOff 1CD7  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0008  
                     getTemp_Safe@result 0020                              setBuz@count 002C  
                             __pmaintext 1631                      _CC2500_WriteCommand 1D76  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 0077                            ?_setTemp_Main 0070  
                             ??_TMR0_Set 0020                               _getLoad_AD 0B10  
                             __pintentry 0004                   ??_setSw_Initialization 0023  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00B9  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0021                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1A5B                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1199                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1A69                    __size_of_getTemp_Safe 0008  
                          ?_setSw_Status 0021                       _setRFSW_AdjControl 123E  
                __end_of_RfSWPointSelect 1D03                        Sw_DimmerOnFunc@sw 0063  
                   ?i1_setLoad_StatusOff 0070                                  _IOC_ISR 1B18  
                        ?_setTemp_Enable 0070                                  _IOC_Set 1B25  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1E5D                        _Flash_Memory_Read 1067  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 007E  
                 __size_of_CC2500_TxData 0065                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 1AB1  
                                _RF_Data 0120                                  _RF_Main 1A22  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1AE9          __end_of_setControl_Lights_Table 0EA3  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0A99                          _setPercentValue 1383  
                ??_setLoad_AH_AL_Restore 0020                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E9  
           __end_of_CC2500_FrequencyCabr 1B00                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1C19                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0165  
                                _VarLED2 0169                        __end_of_getRxData 1458  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C9A  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1BB7  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 1A89  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1BA7                                  ___awdiv 1586  
                                ___ftadd 04E5                           ??_setSw_Enable 0021  
                                ___ftdiv 0EA3                          __size_of___wmul 001E  
                                ___ftmul 0F4C                                  ___fttol 0D07  
                    __end_of_Switch_Main 1AB1                                  ___lwdiv 11CF  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0062                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0022                                  __ptext1 14A2  
                                __ptext2 1AB9                                  __ptext3 1ACA  
                                __ptext4 1B88                                  __ptext5 1199  
                                __ptext6 0B10                                  __ptext7 1E7C  
                                __ptext8 1C61                                  __ptext9 0002  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0071  
                  _DimmerIntrPointSelect 1C19                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 1E7C                __end_of_Flash_Memory_Read 1081  
                             _setRF_Main 0943                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1A79                        _DimmerLights_Main 1ADE  
                                _my_Main 14A2           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1ADE  
             __end_of_CC2500_ClearRXFIFO 1A32                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1A36            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1EFF  
                    _DelayOffPointSelect 1CAE                                  clrloop0 1A4F  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1B3F  
                   end_of_initialization 0045                ??_DelayOff_Initialization 0023  
                             _setLoad_GO 1A81                        _CC2500_InitSetREG 1FD6  
                          _DelayTime_1us 1F89                        __end_of_setTxData 075B  
             __end_of_Flash_Memory_Write 1132                                  init_ram 1A48  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1A49  
                             _setSw_Main 0382                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 1F21                   __size_of_setLoad_Count 000E  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1C2B  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0C03                            _CC2500_TxData 080C  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1B5B  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 133F  
                _DimmerLights_Exceptions 14EC                              ?_getLoad_AD 0070  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1AC1  
                    ??_CC2500_ReadStatus 0022                         _setLoad_StatusOn 1F43  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                setLoad_Exceptions@command 0030  
                    __size_of_TouchPower 000F                 setLED_Initialization@led 0023  
                 setSw_Initialization@sw 0023                __end_of_DimmerLights_Main 1AE9  
                     _Mcu_Initialization 1C3D                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0043                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$6015 0067  
                        _setSw_Main$6016 0068                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1F21                  __end_of_Sw_DimmerOnFunc 0B10  
                __end_of_setPercentValue 13C9                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 2000                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 12FB  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1F43  
                          ?_RF_RxDisable 0070               __end_of_setLoad_Exceptions 123E  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1DA8  
                   _setRF_Initialization 1A62                              _Switch_Main 1AA9  
            setDimmerLights_Clear@lights 0023                      setLoad_Exceptions@i 002F  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C73  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 07EB  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1C61                __size_of_Sw_DimmerAdjFunc 004F  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1C86  
                         __end_of___wmul 1DE2                        __size_of_TMR0_ISR 0027  
        __size_of_setOverTemp_Exceptions 003F                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 1D19  
          __size_of_setDimmerLights_Main 0073                           __end_of_setLED 1800  
                         __end_of_setBuz 16E2                            _setLoad_Count 1B3F  
        _getDimmerLights_StatusFlag$2246 0022                     _CC2500_FrequencyCabr 1AF4  
                setLoad_StatusOn@command 0020                __size_of_Sw_DimmerOffFunc 0076  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 075B  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 1164  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1D76  
                              _Load_Main 0214                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1E3E  
        __size_of_setTemp_Initialization 0003                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0D07  
                            ?_setLoad_GO 0070                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1E00                      __size_of_getLoad_AD 0079  
                           ?_Buzzer_Main 0070                       _set_TimeoutCleared 1A3E  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 00E5                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 0036  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1BC7  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                i1setLoad_StatusOff@lights 0071  
                __size_of_setRFSW_Status 000F                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1A2B                ??_DimmerLights_Exceptions 002D  
          setOverTemp_Exceptions@command 0030                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D2  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 0017                                _Tx_Length 00D3  
                            __pdataBANK4 024E                                 ??_setLED 0022  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0070  
                       _CC2500_SIDLEMode 1A36               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 1199                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0021                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$5046 0068                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                             ?_Load_Main 0070                    setTemp_Enable@command 0020  
                    setRF_Enable@command 0020                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 008A  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 007A               __size_of_CC2500_ReadStatus 0022  
                 _setOverTemp_Exceptions 1279                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 013D  
                          _DimmerLights2 014C                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                    __size_of_setRF_Enable 000E  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1DC4  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 006D  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                   _setTemp_Initialization 1A25  
                              _getBuz_GO 1C08      __end_of_Flash_Memory_Initialization 06A2  
            _Flash_Memory_Initialization 05DB                                 ?___awdiv 0020  
                              __ptext100 1BB7                                __ptext101 1D19  
                              __ptext110 1BA7                                __ptext102 08D7  
                              __ptext111 1B97                                __ptext103 1383  
                              __ptext120 12B8                                __ptext112 1C73  
                              __ptext104 0D07                                __ptext121 1FD6  
                              __ptext113 1689                                __ptext105 0EA3  
                              __ptext130 1CC2                                __ptext122 1E1F  
                              __ptext114 1586                                __ptext106 1EDD  
                              __ptext131 1C9A                                __ptext123 1EBC  
                              __ptext115 1A71                                __ptext107 173D  
                              __ptext140 1A69                                __ptext132 1458  
                              __ptext124 1AF4                                __ptext116 1AD3  
                              __ptext108 1B5B                                __ptext141 1E00  
                              __ptext133 1A1C                                __ptext125 1F89  
                              __ptext117 1CAE                                __ptext109 1CED  
                               ?___ftadd 003E                                __ptext142 1C86  
                              __ptext126 1A32                                __ptext118 07EB  
                              __ptext135 1FAF                                __ptext127 1A2E  
                              __ptext119 1A36                                __ptext136 0049  
                              __ptext128 1D76                                __ptext137 1CD7  
                              __ptext129 1A3E                                __ptext138 1C19  
                              __ptext139 1B18                                _getRxData 1410  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 07EB                      __size_of_setLoad_GO 0008  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1A1F                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1B88       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0057                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 0163  
          __end_of_setDimmerLights_ERROR 1631             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 1F89            __end_of_setDimmerLights_AdjGo 1BE7  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
                               ?_my_Main 0070            __end_of_setDimmerLights_Clear 1BD7  
                              _r_address 00D4           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1B97  
                       __CFG_WDTE$SWDTEN 0000                           __size_of_getAD 0020  
                           _setRF_Enable 1B4D                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1D19  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 1410  
                    _DimmerLightsIntrIOC 00CF                 __end_of_setLoad_StatusOn 1F66  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1A2B  
                      _CC2500_rfSettings 102F                           ___wmul@product 0024  
                               _LED_Main 0800                          SwPointSelect@sw 0020  
                              clear_ram0 1A4E                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 06A2      __end_of_DimmerLights_Initialization 1D47  
            _DimmerLights_Initialization 1D30                       _CC2500_ClearRXFIFO 1A2E  
                     _CC2500_ClearTXFIFO 1A32           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1AA9                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003B  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 1103  
                             ?_getRxData 0070                                 _TMR0_ISR 1FAF  
                           ??_getLoad_AD 0024                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1CED  
                               _TMR0_Set 1A91                         _Sw_DimmerAdjFunc 1537  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00C5                     __end_of_RF_RxDisable 1B79  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1D8F  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1C61  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0A23  
                  __size_of_setTemp_Main 0086                  __size_of_setDelayOff_GO 0066  
                  __size_of_setSw_Enable 001E                                 _DelayOff 0078  
                           setSw_Main@sw 0069         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0031                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1B0C                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0023                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 1164                    _DlyOff_Initialization 1AD3  
                  __size_of_setSw_Status 0010                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1A3A  
                       __size_of_WDT_Set 000B                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 0B89                    _Switch_Initialization 1B32  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0024  
                         _setRFSW_Status 1B5B                             _setMemory_GO 1D03  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 11CF  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1C9A  
                      getLoad_AD@channel 0026             Flash_Memory_Initialization@i 005E  
                            ??_Temp_Main 0032                        setRFSW_Control@sw 0063  
                    _Load_Initialization 1A43                                setLED@led 0022  
   __end_of_setDimmerLights_TriggerERROR 10D6    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 10AB                  ??_DimmerIntrPointSelect 0070  
                           _setTemp_Main 0C81                       _setLoad_Exceptions 1206  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1DE2                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
                               ___awtoft 1EDD                         ??_LedPointSelect 0020  
                               ___ftpack 173D                             _setSw_Status 1BB7  
                      getTemp_AD@channel 0025                             ??_setRF_Main 0067  
                   CC2500_WriteREG@value 0022                              _setLED_Main 13C9  
                    ?_setLoad_Exceptions 0070                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0943                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E                          ___lwdiv@divisor 0020  
                       __size_of_my_Main 004A                     ?_Load_Initialization 0070  
                        ___lwdiv@counter 0027                                 __ptext10 1A2B  
                               __ptext11 0C81                                 __ptext20 0A23  
                               __ptext12 1279                                 __ptext21 1537  
                               __ptext13 1AB1                                 __ptext30 1132  
                               __ptext22 1BE7                                 __ptext14 1A28  
                               __ptext31 0E18                                 __ptext23 1BD7  
                               __ptext15 1A25                                 __ptext40 0F4C  
                               __ptext32 075B                                 __ptext24 1B32  
                               __ptext16 1AA9                                 __ptext41 04E5  
                               __ptext33 0871                                 __ptext25 1A99  
                               __ptext17 0382                                 __ptext50 1C3D  
                               __ptext42 1C08                                 __ptext34 1081  
                               __ptext26 1B79                                 __ptext18 1AA1  
                               __ptext51 1AE9                                 __ptext43 1B6A  
                               __ptext35 1C4F                                 __ptext27 1A22  
                               __ptext19 0A99                                 __ptext60 1B4D  
                               __ptext52 1A91                                 __ptext44 080C  
                               __ptext36 123E                                 __ptext28 0943  
                               __ptext61 14EC                                 __ptext53 1D8F  
                               __ptext45 0C03                                 __ptext37 1164  
                               __ptext29 1410                                 __ptext70 0800  
                               __ptext62 10AB                                 __ptext54 1B25  
                               __ptext46 1F21                                 __ptext38 1F66  
                               __ptext71 13C9                                 __ptext63 15DA  
                               __ptext55 1A3A                                 __ptext47 1D47  
                               __ptext39 16E2                                 __ptext80 1067  
                               __ptext72 1B0C                                 __ptext64 1BC7  
                               __ptext56 1A5B                                 __ptext48 1A1F  
                               __ptext81 1ADE                                 __ptext73 1C2B  
                               __ptext65 1A89                                 __ptext57 0214  
                               __ptext49 1A62                                 __ptext90 1D5E  
                               __ptext82 09B0                                 __ptext74 1E5D  
                               __ptext66 1DC4                                 __ptext58 1206  
                               __ptext91 1D03                                 __ptext83 12FB  
                               __ptext75 133F                                 __ptext67 11CF  
                               __ptext59 1DE2                                 __ptext92 1A81  
                               __ptext84 1E3E                                 __ptext76 1B00  
                               __ptext68 1A43                                 __ptext93 1BF7  
                               __ptext85 0D8E                                 __ptext77 05DB  
                               __ptext69 1DA8                                 __ptext94 1D30  
                               __ptext86 1F43                                 __ptext78 1103  
                               __ptext95 10D6                                 __ptext87 1B3F  
                               __ptext79 1AC1                                 __ptext96 1A54  
                               __ptext88 179E                                 __ptext97 1A79  
                               __ptext89 1EFF                                 __ptext98 0B89  
                               __ptext99 06A2                                 __product 024E  
          ??_setDimmerLights_IntrControl 0072                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0023                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1B6A  
          __end_of_Dimmer_Initialization 1A5B             __end_of_setDimmerLights_Main 0A23  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0021                            __size_of_main 0058  
                            _setRF_Learn 1AA1                 __end_of_CC2500_SIDLEMode 1A3A  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1CC2  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1D5E  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 0008  
                   ??_setLoad_Exceptions 002E                          _CC2500_ReadByte 1D47  
                     _CC2500_InitPATable 1E1F      __size_of_getDimmerLights_StatusFlag 0011  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 09B0  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 006A            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 006C                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 12B8                       __end_of_setLoad_GO 1A89  
            __end_of_Flash_Memory_Modify 1383                        ??_getPercentValue 0059  
                            _setLog_Code 1132              __end_of_Flash_Memory_Unlock 1ACA  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1EBC  
                     __end_of_setSw_Main 04E5                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E1  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0070  
                ?_setOverTemp_Exceptions 0070                           _DelayTimejudge 1081  
                          ?_getLoad_Safe 0070                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0009                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1103  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 10D6              __end_of_setDimmerLights_Adj 133F  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 000F  
                      _RF_Initialization 1A1F     __size_of_setDimmerLights_IntrControl 01CB  
                            getLoad_AD@i 0028                              getLoad_AD@j 0027  
                          ?_getTemp_Safe 0070                     _Flash_Memory_Erasing 1B00  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
        __end_of_DelayOff_Initialization 1A79      __size_of_setDimmerLights_IntrIOC_GO 001F  
                             _OPTION_REG 0095                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1A81                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 0871         __size_of_setControl_Lights_Table 008B  
                      _setLoad_StatusOff 1E3E                   __end_of_DelayTimejudge 10AB  
         __end_of_setOverTemp_Exceptions 12B8                           ??_getLoad_Safe 0020  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1FAF                 __end_of_Sw_DimmerAdjFunc 1586  
                __end_of_CC2500_ReadByte 1D5E             __end_of_setSw_Initialization 1AA1  
                        _Timeout_Counter 1CC2                     getPercentValue@value 005B  
                           _RF_RxDisable 1B6A               __end_of_LED_Initialization 1B18  
       __size_of_setDimmerLights_Trigger 0010                        ?_setLoad_StatusOn 0020  
         __end_of_setTemp_Initialization 1A28                 __size_of_Sw_DimmerOnFunc 0077  
                    ??_setLoad_StatusOff 0021                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1A22                 __end_of_Sw_DimmerOffFunc 0A99  
                     ??_setLoad_StatusOn 0021          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    __end_of_CC2500_RxData 0C81  
                  __end_of_CC2500_TxData 0871                           ??_getTemp_Safe 0020  
                  _setLoad_AH_AL_Restore 1DA8                      setSw_Status@command 0021  
                __end_of_CC2500_PowerRST 12FB  
