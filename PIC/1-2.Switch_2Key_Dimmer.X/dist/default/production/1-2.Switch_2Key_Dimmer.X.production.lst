

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Oct 18 14:51:38 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	intentry,global,class=CODE,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	dabs	1,0x7E,2
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  0116                     	;# 
   202  0117                     	;# 
   203  011D                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  018E                     	;# 
   207  0191                     	;# 
   208  0191                     	;# 
   209  0192                     	;# 
   210  0193                     	;# 
   211  0193                     	;# 
   212  0194                     	;# 
   213  0195                     	;# 
   214  0196                     	;# 
   215  0197                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019C                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019F                     	;# 
   227  020D                     	;# 
   228  0210                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0216                     	;# 
   241  0216                     	;# 
   242  0217                     	;# 
   243  0217                     	;# 
   244  0291                     	;# 
   245  0291                     	;# 
   246  0292                     	;# 
   247  0293                     	;# 
   248  0298                     	;# 
   249  0298                     	;# 
   250  0299                     	;# 
   251  029A                     	;# 
   252  0394                     	;# 
   253  0395                     	;# 
   254  0396                     	;# 
   255  0FE4                     	;# 
   256  0FE5                     	;# 
   257  0FE6                     	;# 
   258  0FE7                     	;# 
   259  0FE8                     	;# 
   260  0FE9                     	;# 
   261  0FEA                     	;# 
   262  0FEB                     	;# 
   263  0FED                     	;# 
   264  0FEE                     	;# 
   265  0FEF                     	;# 
   266  0000                     	;# 
   267  0001                     	;# 
   268  0002                     	;# 
   269  0003                     	;# 
   270  0004                     	;# 
   271  0005                     	;# 
   272  0006                     	;# 
   273  0007                     	;# 
   274  0008                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  0010                     	;# 
   282  0011                     	;# 
   283  0012                     	;# 
   284  0015                     	;# 
   285  0016                     	;# 
   286  0016                     	;# 
   287  0017                     	;# 
   288  0018                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001C                     	;# 
   293  008C                     	;# 
   294  008D                     	;# 
   295  008E                     	;# 
   296  0090                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0095                     	;# 
   300  0096                     	;# 
   301  0097                     	;# 
   302  0099                     	;# 
   303  009A                     	;# 
   304  009B                     	;# 
   305  009B                     	;# 
   306  009C                     	;# 
   307  009D                     	;# 
   308  009E                     	;# 
   309  010C                     	;# 
   310  010D                     	;# 
   311  010E                     	;# 
   312  0116                     	;# 
   313  0117                     	;# 
   314  011D                     	;# 
   315  018C                     	;# 
   316  018D                     	;# 
   317  018E                     	;# 
   318  0191                     	;# 
   319  0191                     	;# 
   320  0192                     	;# 
   321  0193                     	;# 
   322  0193                     	;# 
   323  0194                     	;# 
   324  0195                     	;# 
   325  0196                     	;# 
   326  0197                     	;# 
   327  0199                     	;# 
   328  019A                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019C                     	;# 
   334  019C                     	;# 
   335  019D                     	;# 
   336  019E                     	;# 
   337  019F                     	;# 
   338  020D                     	;# 
   339  0210                     	;# 
   340  0211                     	;# 
   341  0211                     	;# 
   342  0212                     	;# 
   343  0212                     	;# 
   344  0213                     	;# 
   345  0213                     	;# 
   346  0214                     	;# 
   347  0214                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0216                     	;# 
   352  0216                     	;# 
   353  0217                     	;# 
   354  0217                     	;# 
   355  0291                     	;# 
   356  0291                     	;# 
   357  0292                     	;# 
   358  0293                     	;# 
   359  0298                     	;# 
   360  0298                     	;# 
   361  0299                     	;# 
   362  029A                     	;# 
   363  0394                     	;# 
   364  0395                     	;# 
   365  0396                     	;# 
   366  0FE4                     	;# 
   367  0FE5                     	;# 
   368  0FE6                     	;# 
   369  0FE7                     	;# 
   370  0FE8                     	;# 
   371  0FE9                     	;# 
   372  0FEA                     	;# 
   373  0FEB                     	;# 
   374  0FED                     	;# 
   375  0FEE                     	;# 
   376  0FEF                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0008                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000D                     	;# 
   391  000E                     	;# 
   392  0010                     	;# 
   393  0011                     	;# 
   394  0012                     	;# 
   395  0015                     	;# 
   396  0016                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001C                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  0090                     	;# 
   408  0091                     	;# 
   409  0092                     	;# 
   410  0095                     	;# 
   411  0096                     	;# 
   412  0097                     	;# 
   413  0099                     	;# 
   414  009A                     	;# 
   415  009B                     	;# 
   416  009B                     	;# 
   417  009C                     	;# 
   418  009D                     	;# 
   419  009E                     	;# 
   420  010C                     	;# 
   421  010D                     	;# 
   422  010E                     	;# 
   423  0116                     	;# 
   424  0117                     	;# 
   425  011D                     	;# 
   426  018C                     	;# 
   427  018D                     	;# 
   428  018E                     	;# 
   429  0191                     	;# 
   430  0191                     	;# 
   431  0192                     	;# 
   432  0193                     	;# 
   433  0193                     	;# 
   434  0194                     	;# 
   435  0195                     	;# 
   436  0196                     	;# 
   437  0197                     	;# 
   438  0199                     	;# 
   439  019A                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019C                     	;# 
   445  019C                     	;# 
   446  019D                     	;# 
   447  019E                     	;# 
   448  019F                     	;# 
   449  020D                     	;# 
   450  0210                     	;# 
   451  0211                     	;# 
   452  0211                     	;# 
   453  0212                     	;# 
   454  0212                     	;# 
   455  0213                     	;# 
   456  0213                     	;# 
   457  0214                     	;# 
   458  0214                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0216                     	;# 
   463  0216                     	;# 
   464  0217                     	;# 
   465  0217                     	;# 
   466  0291                     	;# 
   467  0291                     	;# 
   468  0292                     	;# 
   469  0293                     	;# 
   470  0298                     	;# 
   471  0298                     	;# 
   472  0299                     	;# 
   473  029A                     	;# 
   474  0394                     	;# 
   475  0395                     	;# 
   476  0396                     	;# 
   477  0FE4                     	;# 
   478  0FE5                     	;# 
   479  0FE6                     	;# 
   480  0FE7                     	;# 
   481  0FE8                     	;# 
   482  0FE9                     	;# 
   483  0FEA                     	;# 
   484  0FEB                     	;# 
   485  0FED                     	;# 
   486  0FEE                     	;# 
   487  0FEF                     	;# 
   488  0000                     	;# 
   489  0001                     	;# 
   490  0002                     	;# 
   491  0003                     	;# 
   492  0004                     	;# 
   493  0005                     	;# 
   494  0006                     	;# 
   495  0007                     	;# 
   496  0008                     	;# 
   497  0009                     	;# 
   498  000A                     	;# 
   499  000B                     	;# 
   500  000C                     	;# 
   501  000D                     	;# 
   502  000E                     	;# 
   503  0010                     	;# 
   504  0011                     	;# 
   505  0012                     	;# 
   506  0015                     	;# 
   507  0016                     	;# 
   508  0016                     	;# 
   509  0017                     	;# 
   510  0018                     	;# 
   511  0019                     	;# 
   512  001A                     	;# 
   513  001B                     	;# 
   514  001C                     	;# 
   515  008C                     	;# 
   516  008D                     	;# 
   517  008E                     	;# 
   518  0090                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0095                     	;# 
   522  0096                     	;# 
   523  0097                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  010C                     	;# 
   532  010D                     	;# 
   533  010E                     	;# 
   534  0116                     	;# 
   535  0117                     	;# 
   536  011D                     	;# 
   537  018C                     	;# 
   538  018D                     	;# 
   539  018E                     	;# 
   540  0191                     	;# 
   541  0191                     	;# 
   542  0192                     	;# 
   543  0193                     	;# 
   544  0193                     	;# 
   545  0194                     	;# 
   546  0195                     	;# 
   547  0196                     	;# 
   548  0197                     	;# 
   549  0199                     	;# 
   550  019A                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019C                     	;# 
   556  019C                     	;# 
   557  019D                     	;# 
   558  019E                     	;# 
   559  019F                     	;# 
   560  020D                     	;# 
   561  0210                     	;# 
   562  0211                     	;# 
   563  0211                     	;# 
   564  0212                     	;# 
   565  0212                     	;# 
   566  0213                     	;# 
   567  0213                     	;# 
   568  0214                     	;# 
   569  0214                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0216                     	;# 
   574  0216                     	;# 
   575  0217                     	;# 
   576  0217                     	;# 
   577  0291                     	;# 
   578  0291                     	;# 
   579  0292                     	;# 
   580  0293                     	;# 
   581  0298                     	;# 
   582  0298                     	;# 
   583  0299                     	;# 
   584  029A                     	;# 
   585  0394                     	;# 
   586  0395                     	;# 
   587  0396                     	;# 
   588  0FE4                     	;# 
   589  0FE5                     	;# 
   590  0FE6                     	;# 
   591  0FE7                     	;# 
   592  0FE8                     	;# 
   593  0FE9                     	;# 
   594  0FEA                     	;# 
   595  0FEB                     	;# 
   596  0FED                     	;# 
   597  0FEE                     	;# 
   598  0FEF                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  0010                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0015                     	;# 
   618  0016                     	;# 
   619  0016                     	;# 
   620  0017                     	;# 
   621  0018                     	;# 
   622  0019                     	;# 
   623  001A                     	;# 
   624  001B                     	;# 
   625  001C                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  0090                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0095                     	;# 
   633  0096                     	;# 
   634  0097                     	;# 
   635  0099                     	;# 
   636  009A                     	;# 
   637  009B                     	;# 
   638  009B                     	;# 
   639  009C                     	;# 
   640  009D                     	;# 
   641  009E                     	;# 
   642  010C                     	;# 
   643  010D                     	;# 
   644  010E                     	;# 
   645  0116                     	;# 
   646  0117                     	;# 
   647  011D                     	;# 
   648  018C                     	;# 
   649  018D                     	;# 
   650  018E                     	;# 
   651  0191                     	;# 
   652  0191                     	;# 
   653  0192                     	;# 
   654  0193                     	;# 
   655  0193                     	;# 
   656  0194                     	;# 
   657  0195                     	;# 
   658  0196                     	;# 
   659  0197                     	;# 
   660  0199                     	;# 
   661  019A                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019C                     	;# 
   667  019C                     	;# 
   668  019D                     	;# 
   669  019E                     	;# 
   670  019F                     	;# 
   671  020D                     	;# 
   672  0210                     	;# 
   673  0211                     	;# 
   674  0211                     	;# 
   675  0212                     	;# 
   676  0212                     	;# 
   677  0213                     	;# 
   678  0213                     	;# 
   679  0214                     	;# 
   680  0214                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0216                     	;# 
   685  0216                     	;# 
   686  0217                     	;# 
   687  0217                     	;# 
   688  0291                     	;# 
   689  0291                     	;# 
   690  0292                     	;# 
   691  0293                     	;# 
   692  0298                     	;# 
   693  0298                     	;# 
   694  0299                     	;# 
   695  029A                     	;# 
   696  0394                     	;# 
   697  0395                     	;# 
   698  0396                     	;# 
   699  0FE4                     	;# 
   700  0FE5                     	;# 
   701  0FE6                     	;# 
   702  0FE7                     	;# 
   703  0FE8                     	;# 
   704  0FE9                     	;# 
   705  0FEA                     	;# 
   706  0FEB                     	;# 
   707  0FED                     	;# 
   708  0FEE                     	;# 
   709  0FEF                     	;# 
   710  0000                     	;# 
   711  0001                     	;# 
   712  0002                     	;# 
   713  0003                     	;# 
   714  0004                     	;# 
   715  0005                     	;# 
   716  0006                     	;# 
   717  0007                     	;# 
   718  0008                     	;# 
   719  0009                     	;# 
   720  000A                     	;# 
   721  000B                     	;# 
   722  000C                     	;# 
   723  000D                     	;# 
   724  000E                     	;# 
   725  0010                     	;# 
   726  0011                     	;# 
   727  0012                     	;# 
   728  0015                     	;# 
   729  0016                     	;# 
   730  0016                     	;# 
   731  0017                     	;# 
   732  0018                     	;# 
   733  0019                     	;# 
   734  001A                     	;# 
   735  001B                     	;# 
   736  001C                     	;# 
   737  008C                     	;# 
   738  008D                     	;# 
   739  008E                     	;# 
   740  0090                     	;# 
   741  0091                     	;# 
   742  0092                     	;# 
   743  0095                     	;# 
   744  0096                     	;# 
   745  0097                     	;# 
   746  0099                     	;# 
   747  009A                     	;# 
   748  009B                     	;# 
   749  009B                     	;# 
   750  009C                     	;# 
   751  009D                     	;# 
   752  009E                     	;# 
   753  010C                     	;# 
   754  010D                     	;# 
   755  010E                     	;# 
   756  0116                     	;# 
   757  0117                     	;# 
   758  011D                     	;# 
   759  018C                     	;# 
   760  018D                     	;# 
   761  018E                     	;# 
   762  0191                     	;# 
   763  0191                     	;# 
   764  0192                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0194                     	;# 
   768  0195                     	;# 
   769  0196                     	;# 
   770  0197                     	;# 
   771  0199                     	;# 
   772  019A                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019C                     	;# 
   778  019C                     	;# 
   779  019D                     	;# 
   780  019E                     	;# 
   781  019F                     	;# 
   782  020D                     	;# 
   783  0210                     	;# 
   784  0211                     	;# 
   785  0211                     	;# 
   786  0212                     	;# 
   787  0212                     	;# 
   788  0213                     	;# 
   789  0213                     	;# 
   790  0214                     	;# 
   791  0214                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0216                     	;# 
   796  0216                     	;# 
   797  0217                     	;# 
   798  0217                     	;# 
   799  0291                     	;# 
   800  0291                     	;# 
   801  0292                     	;# 
   802  0293                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  0394                     	;# 
   808  0395                     	;# 
   809  0396                     	;# 
   810  0FE4                     	;# 
   811  0FE5                     	;# 
   812  0FE6                     	;# 
   813  0FE7                     	;# 
   814  0FE8                     	;# 
   815  0FE9                     	;# 
   816  0FEA                     	;# 
   817  0FEB                     	;# 
   818  0FED                     	;# 
   819  0FEE                     	;# 
   820  0FEF                     	;# 
   821  0000                     	;# 
   822  0001                     	;# 
   823  0002                     	;# 
   824  0003                     	;# 
   825  0004                     	;# 
   826  0005                     	;# 
   827  0006                     	;# 
   828  0007                     	;# 
   829  0008                     	;# 
   830  0009                     	;# 
   831  000A                     	;# 
   832  000B                     	;# 
   833  000C                     	;# 
   834  000D                     	;# 
   835  000E                     	;# 
   836  0010                     	;# 
   837  0011                     	;# 
   838  0012                     	;# 
   839  0015                     	;# 
   840  0016                     	;# 
   841  0016                     	;# 
   842  0017                     	;# 
   843  0018                     	;# 
   844  0019                     	;# 
   845  001A                     	;# 
   846  001B                     	;# 
   847  001C                     	;# 
   848  008C                     	;# 
   849  008D                     	;# 
   850  008E                     	;# 
   851  0090                     	;# 
   852  0091                     	;# 
   853  0092                     	;# 
   854  0095                     	;# 
   855  0096                     	;# 
   856  0097                     	;# 
   857  0099                     	;# 
   858  009A                     	;# 
   859  009B                     	;# 
   860  009B                     	;# 
   861  009C                     	;# 
   862  009D                     	;# 
   863  009E                     	;# 
   864  010C                     	;# 
   865  010D                     	;# 
   866  010E                     	;# 
   867  0116                     	;# 
   868  0117                     	;# 
   869  011D                     	;# 
   870  018C                     	;# 
   871  018D                     	;# 
   872  018E                     	;# 
   873  0191                     	;# 
   874  0191                     	;# 
   875  0192                     	;# 
   876  0193                     	;# 
   877  0193                     	;# 
   878  0194                     	;# 
   879  0195                     	;# 
   880  0196                     	;# 
   881  0197                     	;# 
   882  0199                     	;# 
   883  019A                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019C                     	;# 
   889  019C                     	;# 
   890  019D                     	;# 
   891  019E                     	;# 
   892  019F                     	;# 
   893  020D                     	;# 
   894  0210                     	;# 
   895  0211                     	;# 
   896  0211                     	;# 
   897  0212                     	;# 
   898  0212                     	;# 
   899  0213                     	;# 
   900  0213                     	;# 
   901  0214                     	;# 
   902  0214                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0216                     	;# 
   907  0216                     	;# 
   908  0217                     	;# 
   909  0217                     	;# 
   910  0291                     	;# 
   911  0291                     	;# 
   912  0292                     	;# 
   913  0293                     	;# 
   914  0298                     	;# 
   915  0298                     	;# 
   916  0299                     	;# 
   917  029A                     	;# 
   918  0394                     	;# 
   919  0395                     	;# 
   920  0396                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0010                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  010C                     	;# 
   976  010D                     	;# 
   977  010E                     	;# 
   978  0116                     	;# 
   979  0117                     	;# 
   980  011D                     	;# 
   981  018C                     	;# 
   982  018D                     	;# 
   983  018E                     	;# 
   984  0191                     	;# 
   985  0191                     	;# 
   986  0192                     	;# 
   987  0193                     	;# 
   988  0193                     	;# 
   989  0194                     	;# 
   990  0195                     	;# 
   991  0196                     	;# 
   992  0197                     	;# 
   993  0199                     	;# 
   994  019A                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019C                     	;# 
  1000  019C                     	;# 
  1001  019D                     	;# 
  1002  019E                     	;# 
  1003  019F                     	;# 
  1004  020D                     	;# 
  1005  0210                     	;# 
  1006  0211                     	;# 
  1007  0211                     	;# 
  1008  0212                     	;# 
  1009  0212                     	;# 
  1010  0213                     	;# 
  1011  0213                     	;# 
  1012  0214                     	;# 
  1013  0214                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0216                     	;# 
  1018  0216                     	;# 
  1019  0217                     	;# 
  1020  0217                     	;# 
  1021  0291                     	;# 
  1022  0291                     	;# 
  1023  0292                     	;# 
  1024  0293                     	;# 
  1025  0298                     	;# 
  1026  0298                     	;# 
  1027  0299                     	;# 
  1028  029A                     	;# 
  1029  0394                     	;# 
  1030  0395                     	;# 
  1031  0396                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  0010                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0015                     	;# 
  1062  0016                     	;# 
  1063  0016                     	;# 
  1064  0017                     	;# 
  1065  0018                     	;# 
  1066  0019                     	;# 
  1067  001A                     	;# 
  1068  001B                     	;# 
  1069  001C                     	;# 
  1070  008C                     	;# 
  1071  008D                     	;# 
  1072  008E                     	;# 
  1073  0090                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0099                     	;# 
  1080  009A                     	;# 
  1081  009B                     	;# 
  1082  009B                     	;# 
  1083  009C                     	;# 
  1084  009D                     	;# 
  1085  009E                     	;# 
  1086  010C                     	;# 
  1087  010D                     	;# 
  1088  010E                     	;# 
  1089  0116                     	;# 
  1090  0117                     	;# 
  1091  011D                     	;# 
  1092  018C                     	;# 
  1093  018D                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  0199                     	;# 
  1105  019A                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019C                     	;# 
  1111  019C                     	;# 
  1112  019D                     	;# 
  1113  019E                     	;# 
  1114  019F                     	;# 
  1115  020D                     	;# 
  1116  0210                     	;# 
  1117  0211                     	;# 
  1118  0211                     	;# 
  1119  0212                     	;# 
  1120  0212                     	;# 
  1121  0213                     	;# 
  1122  0213                     	;# 
  1123  0214                     	;# 
  1124  0214                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0216                     	;# 
  1129  0216                     	;# 
  1130  0217                     	;# 
  1131  0217                     	;# 
  1132  0291                     	;# 
  1133  0291                     	;# 
  1134  0292                     	;# 
  1135  0293                     	;# 
  1136  0298                     	;# 
  1137  0298                     	;# 
  1138  0299                     	;# 
  1139  029A                     	;# 
  1140  0394                     	;# 
  1141  0395                     	;# 
  1142  0396                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000D                     	;# 
  1168  000E                     	;# 
  1169  0010                     	;# 
  1170  0011                     	;# 
  1171  0012                     	;# 
  1172  0015                     	;# 
  1173  0016                     	;# 
  1174  0016                     	;# 
  1175  0017                     	;# 
  1176  0018                     	;# 
  1177  0019                     	;# 
  1178  001A                     	;# 
  1179  001B                     	;# 
  1180  001C                     	;# 
  1181  008C                     	;# 
  1182  008D                     	;# 
  1183  008E                     	;# 
  1184  0090                     	;# 
  1185  0091                     	;# 
  1186  0092                     	;# 
  1187  0095                     	;# 
  1188  0096                     	;# 
  1189  0097                     	;# 
  1190  0099                     	;# 
  1191  009A                     	;# 
  1192  009B                     	;# 
  1193  009B                     	;# 
  1194  009C                     	;# 
  1195  009D                     	;# 
  1196  009E                     	;# 
  1197  010C                     	;# 
  1198  010D                     	;# 
  1199  010E                     	;# 
  1200  0116                     	;# 
  1201  0117                     	;# 
  1202  011D                     	;# 
  1203  018C                     	;# 
  1204  018D                     	;# 
  1205  018E                     	;# 
  1206  0191                     	;# 
  1207  0191                     	;# 
  1208  0192                     	;# 
  1209  0193                     	;# 
  1210  0193                     	;# 
  1211  0194                     	;# 
  1212  0195                     	;# 
  1213  0196                     	;# 
  1214  0197                     	;# 
  1215  0199                     	;# 
  1216  019A                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019C                     	;# 
  1222  019C                     	;# 
  1223  019D                     	;# 
  1224  019E                     	;# 
  1225  019F                     	;# 
  1226  020D                     	;# 
  1227  0210                     	;# 
  1228  0211                     	;# 
  1229  0211                     	;# 
  1230  0212                     	;# 
  1231  0212                     	;# 
  1232  0213                     	;# 
  1233  0213                     	;# 
  1234  0214                     	;# 
  1235  0214                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0216                     	;# 
  1240  0216                     	;# 
  1241  0217                     	;# 
  1242  0217                     	;# 
  1243  0291                     	;# 
  1244  0291                     	;# 
  1245  0292                     	;# 
  1246  0293                     	;# 
  1247  0298                     	;# 
  1248  0298                     	;# 
  1249  0299                     	;# 
  1250  029A                     	;# 
  1251  0394                     	;# 
  1252  0395                     	;# 
  1253  0396                     	;# 
  1254  0FE4                     	;# 
  1255  0FE5                     	;# 
  1256  0FE6                     	;# 
  1257  0FE7                     	;# 
  1258  0FE8                     	;# 
  1259  0FE9                     	;# 
  1260  0FEA                     	;# 
  1261  0FEB                     	;# 
  1262  0FED                     	;# 
  1263  0FEE                     	;# 
  1264  0FEF                     	;# 
  1265  0000                     	;# 
  1266  0001                     	;# 
  1267  0002                     	;# 
  1268  0003                     	;# 
  1269  0004                     	;# 
  1270  0005                     	;# 
  1271  0006                     	;# 
  1272  0007                     	;# 
  1273  0008                     	;# 
  1274  0009                     	;# 
  1275  000A                     	;# 
  1276  000B                     	;# 
  1277  000C                     	;# 
  1278  000D                     	;# 
  1279  000E                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0015                     	;# 
  1284  0016                     	;# 
  1285  0016                     	;# 
  1286  0017                     	;# 
  1287  0018                     	;# 
  1288  0019                     	;# 
  1289  001A                     	;# 
  1290  001B                     	;# 
  1291  001C                     	;# 
  1292  008C                     	;# 
  1293  008D                     	;# 
  1294  008E                     	;# 
  1295  0090                     	;# 
  1296  0091                     	;# 
  1297  0092                     	;# 
  1298  0095                     	;# 
  1299  0096                     	;# 
  1300  0097                     	;# 
  1301  0099                     	;# 
  1302  009A                     	;# 
  1303  009B                     	;# 
  1304  009B                     	;# 
  1305  009C                     	;# 
  1306  009D                     	;# 
  1307  009E                     	;# 
  1308  010C                     	;# 
  1309  010D                     	;# 
  1310  010E                     	;# 
  1311  0116                     	;# 
  1312  0117                     	;# 
  1313  011D                     	;# 
  1314  018C                     	;# 
  1315  018D                     	;# 
  1316  018E                     	;# 
  1317  0191                     	;# 
  1318  0191                     	;# 
  1319  0192                     	;# 
  1320  0193                     	;# 
  1321  0193                     	;# 
  1322  0194                     	;# 
  1323  0195                     	;# 
  1324  0196                     	;# 
  1325  0197                     	;# 
  1326  0199                     	;# 
  1327  019A                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019F                     	;# 
  1337  020D                     	;# 
  1338  0210                     	;# 
  1339  0211                     	;# 
  1340  0211                     	;# 
  1341  0212                     	;# 
  1342  0212                     	;# 
  1343  0213                     	;# 
  1344  0213                     	;# 
  1345  0214                     	;# 
  1346  0214                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0216                     	;# 
  1351  0216                     	;# 
  1352  0217                     	;# 
  1353  0217                     	;# 
  1354  0291                     	;# 
  1355  0291                     	;# 
  1356  0292                     	;# 
  1357  0293                     	;# 
  1358  0298                     	;# 
  1359  0298                     	;# 
  1360  0299                     	;# 
  1361  029A                     	;# 
  1362  0394                     	;# 
  1363  0395                     	;# 
  1364  0396                     	;# 
  1365  0FE4                     	;# 
  1366  0FE5                     	;# 
  1367  0FE6                     	;# 
  1368  0FE7                     	;# 
  1369  0FE8                     	;# 
  1370  0FE9                     	;# 
  1371  0FEA                     	;# 
  1372  0FEB                     	;# 
  1373  0FED                     	;# 
  1374  0FEE                     	;# 
  1375  0FEF                     	;# 
  1376  0000                     	;# 
  1377  0001                     	;# 
  1378  0002                     	;# 
  1379  0003                     	;# 
  1380  0004                     	;# 
  1381  0005                     	;# 
  1382  0006                     	;# 
  1383  0007                     	;# 
  1384  0008                     	;# 
  1385  0009                     	;# 
  1386  000A                     	;# 
  1387  000B                     	;# 
  1388  000C                     	;# 
  1389  000D                     	;# 
  1390  000E                     	;# 
  1391  0010                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0015                     	;# 
  1395  0016                     	;# 
  1396  0016                     	;# 
  1397  0017                     	;# 
  1398  0018                     	;# 
  1399  0019                     	;# 
  1400  001A                     	;# 
  1401  001B                     	;# 
  1402  001C                     	;# 
  1403  008C                     	;# 
  1404  008D                     	;# 
  1405  008E                     	;# 
  1406  0090                     	;# 
  1407  0091                     	;# 
  1408  0092                     	;# 
  1409  0095                     	;# 
  1410  0096                     	;# 
  1411  0097                     	;# 
  1412  0099                     	;# 
  1413  009A                     	;# 
  1414  009B                     	;# 
  1415  009B                     	;# 
  1416  009C                     	;# 
  1417  009D                     	;# 
  1418  009E                     	;# 
  1419  010C                     	;# 
  1420  010D                     	;# 
  1421  010E                     	;# 
  1422  0116                     	;# 
  1423  0117                     	;# 
  1424  011D                     	;# 
  1425  018C                     	;# 
  1426  018D                     	;# 
  1427  018E                     	;# 
  1428  0191                     	;# 
  1429  0191                     	;# 
  1430  0192                     	;# 
  1431  0193                     	;# 
  1432  0193                     	;# 
  1433  0194                     	;# 
  1434  0195                     	;# 
  1435  0196                     	;# 
  1436  0197                     	;# 
  1437  0199                     	;# 
  1438  019A                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019C                     	;# 
  1444  019C                     	;# 
  1445  019D                     	;# 
  1446  019E                     	;# 
  1447  019F                     	;# 
  1448  020D                     	;# 
  1449  0210                     	;# 
  1450  0211                     	;# 
  1451  0211                     	;# 
  1452  0212                     	;# 
  1453  0212                     	;# 
  1454  0213                     	;# 
  1455  0213                     	;# 
  1456  0214                     	;# 
  1457  0214                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0216                     	;# 
  1462  0216                     	;# 
  1463  0217                     	;# 
  1464  0217                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0298                     	;# 
  1470  0298                     	;# 
  1471  0299                     	;# 
  1472  029A                     	;# 
  1473  0394                     	;# 
  1474  0395                     	;# 
  1475  0396                     	;# 
  1476  0FE4                     	;# 
  1477  0FE5                     	;# 
  1478  0FE6                     	;# 
  1479  0FE7                     	;# 
  1480  0FE8                     	;# 
  1481  0FE9                     	;# 
  1482  0FEA                     	;# 
  1483  0FEB                     	;# 
  1484  0FED                     	;# 
  1485  0FEE                     	;# 
  1486  0FEF                     	;# 
  1487  0000                     	;# 
  1488  0001                     	;# 
  1489  0002                     	;# 
  1490  0003                     	;# 
  1491  0004                     	;# 
  1492  0005                     	;# 
  1493  0006                     	;# 
  1494  0007                     	;# 
  1495  0008                     	;# 
  1496  0009                     	;# 
  1497  000A                     	;# 
  1498  000B                     	;# 
  1499  000C                     	;# 
  1500  000D                     	;# 
  1501  000E                     	;# 
  1502  0010                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0015                     	;# 
  1506  0016                     	;# 
  1507  0016                     	;# 
  1508  0017                     	;# 
  1509  0018                     	;# 
  1510  0019                     	;# 
  1511  001A                     	;# 
  1512  001B                     	;# 
  1513  001C                     	;# 
  1514  008C                     	;# 
  1515  008D                     	;# 
  1516  008E                     	;# 
  1517  0090                     	;# 
  1518  0091                     	;# 
  1519  0092                     	;# 
  1520  0095                     	;# 
  1521  0096                     	;# 
  1522  0097                     	;# 
  1523  0099                     	;# 
  1524  009A                     	;# 
  1525  009B                     	;# 
  1526  009B                     	;# 
  1527  009C                     	;# 
  1528  009D                     	;# 
  1529  009E                     	;# 
  1530  010C                     	;# 
  1531  010D                     	;# 
  1532  010E                     	;# 
  1533  0116                     	;# 
  1534  0117                     	;# 
  1535  011D                     	;# 
  1536  018C                     	;# 
  1537  018D                     	;# 
  1538  018E                     	;# 
  1539  0191                     	;# 
  1540  0191                     	;# 
  1541  0192                     	;# 
  1542  0193                     	;# 
  1543  0193                     	;# 
  1544  0194                     	;# 
  1545  0195                     	;# 
  1546  0196                     	;# 
  1547  0197                     	;# 
  1548  0199                     	;# 
  1549  019A                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019C                     	;# 
  1555  019C                     	;# 
  1556  019D                     	;# 
  1557  019E                     	;# 
  1558  019F                     	;# 
  1559  020D                     	;# 
  1560  0210                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0298                     	;# 
  1581  0298                     	;# 
  1582  0299                     	;# 
  1583  029A                     	;# 
  1584  0394                     	;# 
  1585  0395                     	;# 
  1586  0396                     	;# 
  1587  0FE4                     	;# 
  1588  0FE5                     	;# 
  1589  0FE6                     	;# 
  1590  0FE7                     	;# 
  1591  0FE8                     	;# 
  1592  0FE9                     	;# 
  1593  0FEA                     	;# 
  1594  0FEB                     	;# 
  1595  0FED                     	;# 
  1596  0FEE                     	;# 
  1597  0FEF                     	;# 
  1598  0000                     	;# 
  1599  0001                     	;# 
  1600  0002                     	;# 
  1601  0003                     	;# 
  1602  0004                     	;# 
  1603  0005                     	;# 
  1604  0006                     	;# 
  1605  0007                     	;# 
  1606  0008                     	;# 
  1607  0009                     	;# 
  1608  000A                     	;# 
  1609  000B                     	;# 
  1610  000C                     	;# 
  1611  000D                     	;# 
  1612  000E                     	;# 
  1613  0010                     	;# 
  1614  0011                     	;# 
  1615  0012                     	;# 
  1616  0015                     	;# 
  1617  0016                     	;# 
  1618  0016                     	;# 
  1619  0017                     	;# 
  1620  0018                     	;# 
  1621  0019                     	;# 
  1622  001A                     	;# 
  1623  001B                     	;# 
  1624  001C                     	;# 
  1625  008C                     	;# 
  1626  008D                     	;# 
  1627  008E                     	;# 
  1628  0090                     	;# 
  1629  0091                     	;# 
  1630  0092                     	;# 
  1631  0095                     	;# 
  1632  0096                     	;# 
  1633  0097                     	;# 
  1634  0099                     	;# 
  1635  009A                     	;# 
  1636  009B                     	;# 
  1637  009B                     	;# 
  1638  009C                     	;# 
  1639  009D                     	;# 
  1640  009E                     	;# 
  1641  010C                     	;# 
  1642  010D                     	;# 
  1643  010E                     	;# 
  1644  0116                     	;# 
  1645  0117                     	;# 
  1646  011D                     	;# 
  1647  018C                     	;# 
  1648  018D                     	;# 
  1649  018E                     	;# 
  1650  0191                     	;# 
  1651  0191                     	;# 
  1652  0192                     	;# 
  1653  0193                     	;# 
  1654  0193                     	;# 
  1655  0194                     	;# 
  1656  0195                     	;# 
  1657  0196                     	;# 
  1658  0197                     	;# 
  1659  0199                     	;# 
  1660  019A                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019C                     	;# 
  1666  019C                     	;# 
  1667  019D                     	;# 
  1668  019E                     	;# 
  1669  019F                     	;# 
  1670  020D                     	;# 
  1671  0210                     	;# 
  1672  0211                     	;# 
  1673  0211                     	;# 
  1674  0212                     	;# 
  1675  0212                     	;# 
  1676  0213                     	;# 
  1677  0213                     	;# 
  1678  0214                     	;# 
  1679  0214                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0216                     	;# 
  1684  0216                     	;# 
  1685  0217                     	;# 
  1686  0217                     	;# 
  1687  0291                     	;# 
  1688  0291                     	;# 
  1689  0292                     	;# 
  1690  0293                     	;# 
  1691  0298                     	;# 
  1692  0298                     	;# 
  1693  0299                     	;# 
  1694  029A                     	;# 
  1695  0394                     	;# 
  1696  0395                     	;# 
  1697  0396                     	;# 
  1698  0FE4                     	;# 
  1699  0FE5                     	;# 
  1700  0FE6                     	;# 
  1701  0FE7                     	;# 
  1702  0FE8                     	;# 
  1703  0FE9                     	;# 
  1704  0FEA                     	;# 
  1705  0FEB                     	;# 
  1706  0FED                     	;# 
  1707  0FEE                     	;# 
  1708  0FEF                     	;# 
  1709  0000                     	;# 
  1710  0001                     	;# 
  1711  0002                     	;# 
  1712  0003                     	;# 
  1713  0004                     	;# 
  1714  0005                     	;# 
  1715  0006                     	;# 
  1716  0007                     	;# 
  1717  0008                     	;# 
  1718  0009                     	;# 
  1719  000A                     	;# 
  1720  000B                     	;# 
  1721  000C                     	;# 
  1722  000D                     	;# 
  1723  000E                     	;# 
  1724  0010                     	;# 
  1725  0011                     	;# 
  1726  0012                     	;# 
  1727  0015                     	;# 
  1728  0016                     	;# 
  1729  0016                     	;# 
  1730  0017                     	;# 
  1731  0018                     	;# 
  1732  0019                     	;# 
  1733  001A                     	;# 
  1734  001B                     	;# 
  1735  001C                     	;# 
  1736  008C                     	;# 
  1737  008D                     	;# 
  1738  008E                     	;# 
  1739  0090                     	;# 
  1740  0091                     	;# 
  1741  0092                     	;# 
  1742  0095                     	;# 
  1743  0096                     	;# 
  1744  0097                     	;# 
  1745  0099                     	;# 
  1746  009A                     	;# 
  1747  009B                     	;# 
  1748  009B                     	;# 
  1749  009C                     	;# 
  1750  009D                     	;# 
  1751  009E                     	;# 
  1752  010C                     	;# 
  1753  010D                     	;# 
  1754  010E                     	;# 
  1755  0116                     	;# 
  1756  0117                     	;# 
  1757  011D                     	;# 
  1758  018C                     	;# 
  1759  018D                     	;# 
  1760  018E                     	;# 
  1761  0191                     	;# 
  1762  0191                     	;# 
  1763  0192                     	;# 
  1764  0193                     	;# 
  1765  0193                     	;# 
  1766  0194                     	;# 
  1767  0195                     	;# 
  1768  0196                     	;# 
  1769  0197                     	;# 
  1770  0199                     	;# 
  1771  019A                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019C                     	;# 
  1777  019C                     	;# 
  1778  019D                     	;# 
  1779  019E                     	;# 
  1780  019F                     	;# 
  1781  020D                     	;# 
  1782  0210                     	;# 
  1783  0211                     	;# 
  1784  0211                     	;# 
  1785  0212                     	;# 
  1786  0212                     	;# 
  1787  0213                     	;# 
  1788  0213                     	;# 
  1789  0214                     	;# 
  1790  0214                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0216                     	;# 
  1795  0216                     	;# 
  1796  0217                     	;# 
  1797  0217                     	;# 
  1798  0291                     	;# 
  1799  0291                     	;# 
  1800  0292                     	;# 
  1801  0293                     	;# 
  1802  0298                     	;# 
  1803  0298                     	;# 
  1804  0299                     	;# 
  1805  029A                     	;# 
  1806  0394                     	;# 
  1807  0395                     	;# 
  1808  0396                     	;# 
  1809  0FE4                     	;# 
  1810  0FE5                     	;# 
  1811  0FE6                     	;# 
  1812  0FE7                     	;# 
  1813  0FE8                     	;# 
  1814  0FE9                     	;# 
  1815  0FEA                     	;# 
  1816  0FEB                     	;# 
  1817  0FED                     	;# 
  1818  0FEE                     	;# 
  1819  0FEF                     	;# 
  1820  0000                     	;# 
  1821  0001                     	;# 
  1822  0002                     	;# 
  1823  0003                     	;# 
  1824  0004                     	;# 
  1825  0005                     	;# 
  1826  0006                     	;# 
  1827  0007                     	;# 
  1828  0008                     	;# 
  1829  0009                     	;# 
  1830  000A                     	;# 
  1831  000B                     	;# 
  1832  000C                     	;# 
  1833  000D                     	;# 
  1834  000E                     	;# 
  1835  0010                     	;# 
  1836  0011                     	;# 
  1837  0012                     	;# 
  1838  0015                     	;# 
  1839  0016                     	;# 
  1840  0016                     	;# 
  1841  0017                     	;# 
  1842  0018                     	;# 
  1843  0019                     	;# 
  1844  001A                     	;# 
  1845  001B                     	;# 
  1846  001C                     	;# 
  1847  008C                     	;# 
  1848  008D                     	;# 
  1849  008E                     	;# 
  1850  0090                     	;# 
  1851  0091                     	;# 
  1852  0092                     	;# 
  1853  0095                     	;# 
  1854  0096                     	;# 
  1855  0097                     	;# 
  1856  0099                     	;# 
  1857  009A                     	;# 
  1858  009B                     	;# 
  1859  009B                     	;# 
  1860  009C                     	;# 
  1861  009D                     	;# 
  1862  009E                     	;# 
  1863  010C                     	;# 
  1864  010D                     	;# 
  1865  010E                     	;# 
  1866  0116                     	;# 
  1867  0117                     	;# 
  1868  011D                     	;# 
  1869  018C                     	;# 
  1870  018D                     	;# 
  1871  018E                     	;# 
  1872  0191                     	;# 
  1873  0191                     	;# 
  1874  0192                     	;# 
  1875  0193                     	;# 
  1876  0193                     	;# 
  1877  0194                     	;# 
  1878  0195                     	;# 
  1879  0196                     	;# 
  1880  0197                     	;# 
  1881  0199                     	;# 
  1882  019A                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019C                     	;# 
  1888  019C                     	;# 
  1889  019D                     	;# 
  1890  019E                     	;# 
  1891  019F                     	;# 
  1892  020D                     	;# 
  1893  0210                     	;# 
  1894  0211                     	;# 
  1895  0211                     	;# 
  1896  0212                     	;# 
  1897  0212                     	;# 
  1898  0213                     	;# 
  1899  0213                     	;# 
  1900  0214                     	;# 
  1901  0214                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0216                     	;# 
  1906  0216                     	;# 
  1907  0217                     	;# 
  1908  0217                     	;# 
  1909  0291                     	;# 
  1910  0291                     	;# 
  1911  0292                     	;# 
  1912  0293                     	;# 
  1913  0298                     	;# 
  1914  0298                     	;# 
  1915  0299                     	;# 
  1916  029A                     	;# 
  1917  0394                     	;# 
  1918  0395                     	;# 
  1919  0396                     	;# 
  1920  0FE4                     	;# 
  1921  0FE5                     	;# 
  1922  0FE6                     	;# 
  1923  0FE7                     	;# 
  1924  0FE8                     	;# 
  1925  0FE9                     	;# 
  1926  0FEA                     	;# 
  1927  0FEB                     	;# 
  1928  0FED                     	;# 
  1929  0FEE                     	;# 
  1930  0FEF                     	;# 
  1931  0000                     	;# 
  1932  0001                     	;# 
  1933  0002                     	;# 
  1934  0003                     	;# 
  1935  0004                     	;# 
  1936  0005                     	;# 
  1937  0006                     	;# 
  1938  0007                     	;# 
  1939  0008                     	;# 
  1940  0009                     	;# 
  1941  000A                     	;# 
  1942  000B                     	;# 
  1943  000C                     	;# 
  1944  000D                     	;# 
  1945  000E                     	;# 
  1946  0010                     	;# 
  1947  0011                     	;# 
  1948  0012                     	;# 
  1949  0015                     	;# 
  1950  0016                     	;# 
  1951  0016                     	;# 
  1952  0017                     	;# 
  1953  0018                     	;# 
  1954  0019                     	;# 
  1955  001A                     	;# 
  1956  001B                     	;# 
  1957  001C                     	;# 
  1958  008C                     	;# 
  1959  008D                     	;# 
  1960  008E                     	;# 
  1961  0090                     	;# 
  1962  0091                     	;# 
  1963  0092                     	;# 
  1964  0095                     	;# 
  1965  0096                     	;# 
  1966  0097                     	;# 
  1967  0099                     	;# 
  1968  009A                     	;# 
  1969  009B                     	;# 
  1970  009B                     	;# 
  1971  009C                     	;# 
  1972  009D                     	;# 
  1973  009E                     	;# 
  1974  010C                     	;# 
  1975  010D                     	;# 
  1976  010E                     	;# 
  1977  0116                     	;# 
  1978  0117                     	;# 
  1979  011D                     	;# 
  1980  018C                     	;# 
  1981  018D                     	;# 
  1982  018E                     	;# 
  1983  0191                     	;# 
  1984  0191                     	;# 
  1985  0192                     	;# 
  1986  0193                     	;# 
  1987  0193                     	;# 
  1988  0194                     	;# 
  1989  0195                     	;# 
  1990  0196                     	;# 
  1991  0197                     	;# 
  1992  0199                     	;# 
  1993  019A                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019C                     	;# 
  1999  019C                     	;# 
  2000  019D                     	;# 
  2001  019E                     	;# 
  2002  019F                     	;# 
  2003  020D                     	;# 
  2004  0210                     	;# 
  2005  0211                     	;# 
  2006  0211                     	;# 
  2007  0212                     	;# 
  2008  0212                     	;# 
  2009  0213                     	;# 
  2010  0213                     	;# 
  2011  0214                     	;# 
  2012  0214                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0216                     	;# 
  2017  0216                     	;# 
  2018  0217                     	;# 
  2019  0217                     	;# 
  2020  0291                     	;# 
  2021  0291                     	;# 
  2022  0292                     	;# 
  2023  0293                     	;# 
  2024  0298                     	;# 
  2025  0298                     	;# 
  2026  0299                     	;# 
  2027  029A                     	;# 
  2028  0394                     	;# 
  2029  0395                     	;# 
  2030  0396                     	;# 
  2031  0FE4                     	;# 
  2032  0FE5                     	;# 
  2033  0FE6                     	;# 
  2034  0FE7                     	;# 
  2035  0FE8                     	;# 
  2036  0FE9                     	;# 
  2037  0FEA                     	;# 
  2038  0FEB                     	;# 
  2039  0FED                     	;# 
  2040  0FEE                     	;# 
  2041  0FEF                     	;# 
  2042                           
  2043                           	psect	idataBANK4
  2044  1092                     __pidataBANK4:	
  2045                           
  2046                           ;initializer for __product
  2047  1092  3463               	retlw	99
  2048  1093  3402               	retlw	2
  2049  1094  3400               	retlw	0
  2050  1095  3400               	retlw	0
  2051  1096  3400               	retlw	0
  2052  1097  3400               	retlw	0
  2053  1098  3400               	retlw	0
  2054  1099  3400               	retlw	0
  2055  109A  3400               	retlw	0
  2056  109B  3400               	retlw	0
  2057  109C  3400               	retlw	0
  2058  109D  3400               	retlw	0
  2059  109E  34FF               	retlw	255
  2060  109F  34FF               	retlw	255
  2061  10A0  34FF               	retlw	255
  2062  10A1  3400               	retlw	0
  2063  10A2  3400               	retlw	0
  2064  10A3  3400               	retlw	0
  2065  10A4  3400               	retlw	0
  2066  10A5  3400               	retlw	0
  2067  10A6  3400               	retlw	0
  2068  10A7  3400               	retlw	0
  2069  10A8  3400               	retlw	0
  2070  10A9  3400               	retlw	0
  2071  10AA  3400               	retlw	0
  2072  10AB  3400               	retlw	0
  2073  10AC  3400               	retlw	0
  2074  10AD  3400               	retlw	0
  2075  10AE  3400               	retlw	0
  2076  10AF  3400               	retlw	0
  2077  10B0  3400               	retlw	0
  2078  10B1  3400               	retlw	0
  2079                           
  2080                           	psect	stringtext
  2081  1000                     __pstringtext:	
  2082  1000                     _CC2500_registers_address:	
  2083  1000  3403               	retlw	3
  2084  1001  3416               	retlw	22
  2085  1002  3417               	retlw	23
  2086  1003  341E               	retlw	30
  2087  1004  341F               	retlw	31
  2088  1005  3420               	retlw	32
  2089  1006  342A               	retlw	42
  2090  1007  342B               	retlw	43
  2091  1008  340B               	retlw	11
  2092  1009  340C               	retlw	12
  2093  100A  340D               	retlw	13
  2094  100B  340E               	retlw	14
  2095  100C  340F               	retlw	15
  2096  100D  3410               	retlw	16
  2097  100E  3411               	retlw	17
  2098  100F  3412               	retlw	18
  2099  1010  3413               	retlw	19
  2100  1011  3414               	retlw	20
  2101  1012  340A               	retlw	10
  2102  1013  3415               	retlw	21
  2103  1014  3421               	retlw	33
  2104  1015  3422               	retlw	34
  2105  1016  3418               	retlw	24
  2106  1017  3419               	retlw	25
  2107  1018  341A               	retlw	26
  2108  1019  341B               	retlw	27
  2109  101A  341C               	retlw	28
  2110  101B  341D               	retlw	29
  2111  101C  3423               	retlw	35
  2112  101D  3424               	retlw	36
  2113  101E  3425               	retlw	37
  2114  101F  3426               	retlw	38
  2115  1020  3429               	retlw	41
  2116  1021  342C               	retlw	44
  2117  1022  342D               	retlw	45
  2118  1023  342E               	retlw	46
  2119  1024  3400               	retlw	0
  2120  1025  3401               	retlw	1
  2121  1026  3402               	retlw	2
  2122  1027  3407               	retlw	7
  2123  1028  3408               	retlw	8
  2124  1029  3409               	retlw	9
  2125  102A  3406               	retlw	6
  2126  102B  3404               	retlw	4
  2127  102C  3405               	retlw	5
  2128  102D  3427               	retlw	39
  2129  102E  3428               	retlw	40
  2130  102F                     __end_of_CC2500_registers_address:	
  2131  102F                     _CC2500_rfSettings:	
  2132  102F  3407               	retlw	7
  2133  1030  3407               	retlw	7
  2134  1031  3430               	retlw	48
  2135  1032  3487               	retlw	135
  2136  1033  346B               	retlw	107
  2137  1034  34F8               	retlw	248
  2138  1035  347F               	retlw	127
  2139  1036  343F               	retlw	63
  2140  1037  3409               	retlw	9
  2141  1038  3400               	retlw	0
  2142  1039  345C               	retlw	92
  2143  103A  34A7               	retlw	167
  2144  103B  3462               	retlw	98
  2145  103C  3486               	retlw	134
  2146  103D  3483               	retlw	131
  2147  103E  3403               	retlw	3
  2148  103F  3422               	retlw	34
  2149  1040  34F8               	retlw	248
  2150  1041  3400               	retlw	0
  2151  1042  3444               	retlw	68
  2152  1043  34B6               	retlw	182
  2153  1044  3410               	retlw	16
  2154  1045  3418               	retlw	24
  2155  1046  341D               	retlw	29
  2156  1047  341C               	retlw	28
  2157  1048  34C7               	retlw	199
  2158  1049  3400               	retlw	0
  2159  104A  34B2               	retlw	178
  2160  104B  34EA               	retlw	234
  2161  104C  340A               	retlw	10
  2162  104D  3400               	retlw	0
  2163  104E  3411               	retlw	17
  2164  104F  3459               	retlw	89
  2165  1050  3488               	retlw	136
  2166  1051  3431               	retlw	49
  2167  1052  340B               	retlw	11
  2168  1053  342F               	retlw	47
  2169  1054  342E               	retlw	46
  2170  1055  3406               	retlw	6
  2171  1056  3404               	retlw	4
  2172  1057  3405               	retlw	5
  2173  1058  3400               	retlw	0
  2174  1059  3430               	retlw	48
  2175  105A  34D3               	retlw	211
  2176  105B  3491               	retlw	145
  2177  105C  3441               	retlw	65
  2178  105D  3400               	retlw	0
  2179  105E                     __end_of_CC2500_rfSettings:	
  2180  105E                     _CC2500_patable_vaule:	
  2181  105E  34FE               	retlw	254
  2182  105F  34FE               	retlw	254
  2183  1060  34FE               	retlw	254
  2184  1061  34FE               	retlw	254
  2185  1062  34FE               	retlw	254
  2186  1063  34FE               	retlw	254
  2187  1064  34FE               	retlw	254
  2188  1065  34FE               	retlw	254
  2189  1066                     __end_of_CC2500_patable_vaule:	
  2190                           
  2191                           	psect	nvBANK0
  2192  006E                     __pnvBANK0:	
  2193  006E                     _product:	
  2194  006E                     	ds	1
  2195  000C                     _PORTA	set	12
  2196  000D                     _PORTB	set	13
  2197  000E                     _PORTC	set	14
  2198  0015                     _TMR0	set	21
  2199  005F                     _GIE	set	95
  2200  005C                     _INTE	set	92
  2201  0059                     _INTF	set	89
  2202  005B                     _IOCIE	set	91
  2203  0058                     _IOCIF	set	88
  2204  005E                     _PEIE	set	94
  2205  0060                     _RA0	set	96
  2206  0063                     _RA3	set	99
  2207  0064                     _RA4	set	100
  2208  0066                     _RA6	set	102
  2209  0067                     _RA7	set	103
  2210  0068                     _RB0	set	104
  2211  0069                     _RB1	set	105
  2212  006B                     _RB3	set	107
  2213  006C                     _RB4	set	108
  2214  006D                     _RB5	set	109
  2215  0070                     _RC0	set	112
  2216  0071                     _RC1	set	113
  2217  0072                     _RC2	set	114
  2218  0074                     _RC4	set	116
  2219  0075                     _RC5	set	117
  2220  0077                     _RC7	set	119
  2221  005D                     _TMR0IE	set	93
  2222  005A                     _TMR0IF	set	90
  2223  009D                     _ADCON0	set	157
  2224  009E                     _ADCON1	set	158
  2225  009C                     _ADRESH	set	156
  2226  009B                     _ADRESL	set	155
  2227  0095                     _OPTION_REG	set	149
  2228  0099                     _OSCCON	set	153
  2229  008C                     _TRISA	set	140
  2230  008D                     _TRISB	set	141
  2231  008E                     _TRISC	set	142
  2232  04E9                     _GO_nDONE	set	1257
  2233  0117                     _FVRCON	set	279
  2234  010C                     _LATA	set	268
  2235  010D                     _LATB	set	269
  2236  010E                     _LATC	set	270
  2237  018C                     _ANSELA	set	396
  2238  018D                     _ANSELB	set	397
  2239  018E                     _ANSELC	set	398
  2240  0192                     _PMADRH	set	402
  2241  0191                     _PMADRL	set	401
  2242  0196                     _PMCON2	set	406
  2243  0194                     _PMDATH	set	404
  2244  0193                     _PMDATL	set	403
  2245  0CAE                     _CFGS	set	3246
  2246  0CAC                     _FREE	set	3244
  2247  0CAD                     _LWLO	set	3245
  2248  0CA8                     _RD	set	3240
  2249  0CA9                     _WR	set	3241
  2250  0CAA                     _WREN	set	3242
  2251  1068                     _WPUB0	set	4200
  2252  1069                     _WPUB1	set	4201
  2253  106A                     _WPUB2	set	4202
  2254  0396                     _IOCBF	set	918
  2255  0395                     _IOCBN	set	917
  2256  0394                     _IOCBP	set	916
  2257  1CB2                     _IOCBF2	set	7346
  2258                           
  2259                           ; #config settings
  2260  0000                     
  2261                           	psect	cinit
  2262  0018                     start_initialization:	
  2263  0018                     __initialization:	
  2264                           
  2265                           ; Clear objects allocated to BITCOMMON
  2266  0018  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2267                           
  2268                           ; Clear objects allocated to COMMON
  2269  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2270  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2271  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2272  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2273  001D  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2274                           
  2275                           ; Clear objects allocated to BANK0
  2276  001E  01EF               	clrf	__pbssBANK0& (0+127)
  2277                           
  2278                           ; Clear objects allocated to BANK1
  2279  001F  30A0               	movlw	low __pbssBANK1
  2280  0020  0084               	movwf	4
  2281  0021  3000               	movlw	high __pbssBANK1
  2282  0022  0085               	movwf	5
  2283  0023  304F               	movlw	79
  2284  0024  319B  23B1  3180   	fcall	clear_ram0
  2285                           
  2286                           ; Clear objects allocated to BANK2
  2287  0027  3020               	movlw	low __pbssBANK2
  2288  0028  0084               	movwf	4
  2289  0029  3001               	movlw	high __pbssBANK2
  2290  002A  0085               	movwf	5
  2291  002B  304E               	movlw	78
  2292  002C  319B  23B1  3180   	fcall	clear_ram0
  2293                           
  2294                           ; Clear objects allocated to BANK3
  2295  002F  30A0               	movlw	low __pbssBANK3
  2296  0030  0084               	movwf	4
  2297  0031  3001               	movlw	high __pbssBANK3
  2298  0032  0085               	movwf	5
  2299  0033  3046               	movlw	70
  2300  0034  319B  23B1  3180   	fcall	clear_ram0
  2301                           
  2302                           ; Clear objects allocated to BANK4
  2303  0037  3020               	movlw	low __pbssBANK4
  2304  0038  0084               	movwf	4
  2305  0039  3002               	movlw	high __pbssBANK4
  2306  003A  0085               	movwf	5
  2307  003B  3025               	movlw	37
  2308  003C  319B  23B1  3180   	fcall	clear_ram0
  2309                           
  2310                           ; Initialize objects allocated to BANK4
  2311  003F  3092               	movlw	low __pidataBANK4
  2312  0040  0084               	movwf	4
  2313  0041  3090               	movlw	(high __pidataBANK4)| (0+128)
  2314  0042  0085               	movwf	5
  2315  0043  3045               	movlw	low __pdataBANK4
  2316  0044  0086               	movwf	6
  2317  0045  3002               	movlw	high __pdataBANK4
  2318  0046  0087               	movwf	7
  2319  0047  3020               	movlw	32
  2320  0048  319B  23AB         	fcall	init_ram
  2321  004A                     end_of_initialization:	
  2322                           ;End of C runtime variable initialization code
  2323                           
  2324  004A                     __end_of__initialization:	
  2325  004A  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2326  004B  0020               	movlb	0
  2327  004C  3196  2E0A         	ljmp	_main	;jump to C main() function
  2328                           
  2329                           	psect	bitbssCOMMON
  2330  03E8                     __pbitbssCOMMON:	
  2331  03E8                     _Receive_OK:	
  2332  03E8                     	ds	1
  2333  03E9                     _Transceive_OK:	
  2334  03E9                     	ds	1
  2335                           
  2336                           	psect	bssCOMMON
  2337  0078                     __pbssCOMMON:	
  2338  0078                     _DelayOff:	
  2339  0078                     	ds	1
  2340  0079                     _DimmerLights:	
  2341  0079                     	ds	1
  2342  007A                     _DimmerLightsIntr:	
  2343  007A                     	ds	1
  2344  007B                     _LED:	
  2345  007B                     	ds	1
  2346  007C                     _SPI0Buffer:	
  2347  007C                     	ds	1
  2348                           
  2349                           	psect	bssBANK0
  2350  006F                     __pbssBANK0:	
  2351  006F                     _Sw:	
  2352  006F                     	ds	1
  2353                           
  2354                           	psect	bssBANK1
  2355  00A0                     __pbssBANK1:	
  2356  00A0                     _myMain:	
  2357  00A0                     	ds	22
  2358  00B6                     _RF_Data:	
  2359  00B6                     	ds	21
  2360  00CB                     _Buz1:	
  2361  00CB                     	ds	12
  2362  00D7                     _RF1:	
  2363  00D7                     	ds	5
  2364  00DC                     _RF_Count:	
  2365  00DC                     	ds	2
  2366  00DE                     _CRC:	
  2367  00DE                     	ds	1
  2368  00DF                     _Dimmer:	
  2369  00DF                     	ds	1
  2370  00E0                     _DimmerLights11:	
  2371  00E0                     	ds	1
  2372  00E1                     _DimmerLights22:	
  2373  00E1                     	ds	1
  2374  00E2                     _DimmerLightsIntrIOC:	
  2375  00E2                     	ds	1
  2376  00E3                     _RFSW:	
  2377  00E3                     	ds	1
  2378  00E4                     _RSSI:	
  2379  00E4                     	ds	1
  2380  00E5                     _Rx_Length:	
  2381  00E5                     	ds	1
  2382  00E6                     _Tx_Length:	
  2383  00E6                     	ds	1
  2384  00E7                     _r_address:	
  2385  00E7                     	ds	1
  2386  00E8                     _r_data:	
  2387  00E8                     	ds	1
  2388  00E9                     _s_data:	
  2389  00E9                     	ds	1
  2390  00EA                     _Dimmer1:	
  2391  00EA                     	ds	3
  2392  00ED                     _RFSW1:	
  2393  00ED                     	ds	1
  2394  00EE                     _RFSW2:	
  2395  00EE                     	ds	1
  2396                           
  2397                           	psect	bssBANK2
  2398  0120                     __pbssBANK2:	
  2399  0120                     _Timer0:	
  2400  0120                     	ds	8
  2401  0128                     _DimmerLights1:	
  2402  0128                     	ds	15
  2403  0137                     _DimmerLights2:	
  2404  0137                     	ds	15
  2405  0146                     _Sw1:	
  2406  0146                     	ds	9
  2407  014F                     _Sw2:	
  2408  014F                     	ds	9
  2409  0158                     _DlySw1:	
  2410  0158                     	ds	5
  2411  015D                     _DlySw2:	
  2412  015D                     	ds	5
  2413  0162                     _VarErrLED:	
  2414  0162                     	ds	4
  2415  0166                     _VarLED1:	
  2416  0166                     	ds	4
  2417  016A                     _VarLED2:	
  2418  016A                     	ds	4
  2419                           
  2420                           	psect	bssBANK3
  2421  01A0                     __pbssBANK3:	
  2422  01A0                     _Load1:	
  2423  01A0                     	ds	70
  2424                           
  2425                           	psect	bssBANK4
  2426  0220                     __pbssBANK4:	
  2427  0220                     _Memory:	
  2428  0220                     	ds	37
  2429                           
  2430                           	psect	dataBANK4
  2431  0245                     __pdataBANK4:	
  2432  0245                     __product:	
  2433  0245                     	ds	32
  2434                           
  2435                           	psect	clrtext
  2436  1BB1                     clear_ram0:	
  2437                           ;	Called with FSR0 containing the base address, and
  2438                           ;	WREG with the size to clear
  2439                           
  2440  1BB1  0064               	clrwdt	;clear the watchdog before getting into this loop
  2441  1BB2                     clrloop0:	
  2442  1BB2  0180               	clrf	0	;clear RAM location pointed to by FSR
  2443  1BB3  3101               	addfsr 0,1
  2444  1BB4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2445  1BB5  2BB2               	goto	clrloop0	;have we reached the end yet?
  2446  1BB6  3400               	retlw	0	;all done for this memory range, return
  2447                           
  2448                           	psect	inittext
  2449  1BAB                     init_ram:	
  2450  1BAB  00FE               	movwf	126
  2451  1BAC                     initloop:	
  2452  1BAC  0012               	moviw fsr0++
  2453  1BAD  001E               	movwi fsr1++
  2454  1BAE  0BFE               	decfsz	126,f
  2455  1BAF  2BAC               	goto	initloop
  2456  1BB0  3400               	retlw	0
  2457                           
  2458                           	psect	cstackCOMMON
  2459  0070                     __pcstackCOMMON:	
  2460  0070                     ?_Timeout_Counter:	
  2461  0070                     ?_set_TimeoutCleared:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0070                     ?_CC2500_WriteByte:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0070                     ?_CC2500_WriteCommand:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0070                     ?_CC2500_ReadStatus:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0070                     ?_CC2500_ReadByte:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0070                     ?_CC2500_PowerRST:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0070                     ?_CC2500_InitSetREG:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0070                     ?_CC2500_InitPATable:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_CC2500_ClearTXFIFO:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_ClearRXFIFO:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_FrequencyCabr:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_CC2500_SIDLEMode:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_DlyOff_Initialization:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_DlyOff_Main:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_setTxData:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_setDimmerLights_Initialization:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_Dimmer_Initialization:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_setLoad_GO:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_setMemory_GO:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_setDimmerLights_Main:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_setDimmerLights_ERROR:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_setLoad_Count:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_setLED_Initialization:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_setLED_Main:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_Fosc_Set:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_IO_Set:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_TMR0_Set:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_ADC_Set:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_INT_Set:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_IOC_Set:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_IOC_ISR:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_TMR0_ISR:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_INT_ISR:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_setRF_ReceiveGO:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ??_setRF_ReceiveGO:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_Flash_Memory_Write:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_Flash_Memory_Modify:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_myMain_Initialization:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_Load_Initialization:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_Switch_Initialization:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_RF_Initialization:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_getLoad_AD:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_my_Main:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_Load_Main:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_Switch_Main:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_RF_Main:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_setLoad_Enable:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_setSw_Enable:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_setRF_Enable:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setLoad_AH_AL_Restore:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_setLoad_Exceptions:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setRF_Initialization:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setRF_Main:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_RF_RxDisable:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_getRxData:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setLog_Code:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setControl_Lights_Table:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setRFSW_Control:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setRFSW_AdjControl:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setRF_DimmerValue:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setSw_Initialization:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setSw_Main:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_Sw_DimmerOnFunc:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_Sw_DimmerAdjFunc:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_Sw_DimmerOffFunc:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_Buzzer_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_Buzzer_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_CC2500_TxData:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_CC2500_RxData:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_CC2500_PowerOnInitial:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_DelayOffPointSelect:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_DelayOff_Initialization:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_DelayOff_Main:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DimmerIntrIOCPointSelect:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ??_DimmerIntrIOCPointSelect:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_DimmerIntrPointSelect:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ??_DimmerIntrPointSelect:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setDimmerLights_IntrControl:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_DimmerLightsPointSelect:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_DimmerLights_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_DimmerLights_Close:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_DimmerLights_Main:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_DimmerLights_Exceptions:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_setDimmerLights_AdjRF:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_LedPointSelect:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_LED_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_LED_Main:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Mcu_Initialization:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_ISR:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setDimmerReClock:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Flash_Memory_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Flash_Memory_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Flash_Memory_Unlock:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Flash_Memory_Erasing:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setRF_Learn:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_RfSWPointSelect:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_TouchPower:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_SwPointSelect:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?i1_setLoad_StatusOff:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_DelayTimejudge:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_getDimmerLights_StatusFlag:	
  2765                           ; 1 bytes @ 0x0
  2766                           
  2767  0070                     ?_getPercentValue:	
  2768                           ; 1 bytes @ 0x0
  2769                           
  2770  0070                     ?_Flash_Memory_Read:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0070                     ?_setPercentValue:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0070                     setRF_ReceiveGO@command:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0070                     i1setLoad_StatusOff@command:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782                           
  2783                           ; 1 bytes @ 0x0
  2784  0070                     	ds	1
  2785  0071                     ??_INT_ISR:	
  2786  0071                     ??i1_setLoad_StatusOff:	
  2787                           ; 0 bytes @ 0x1
  2788                           
  2789  0071                     DimmerIntrIOCPointSelect@lights:	
  2790                           ; 0 bytes @ 0x1
  2791                           
  2792  0071                     DimmerIntrPointSelect@lights:	
  2793                           ; 1 bytes @ 0x1
  2794                           
  2795  0071                     i1setLoad_StatusOff@lights:	
  2796                           ; 1 bytes @ 0x1
  2797                           
  2798                           
  2799                           ; 1 bytes @ 0x1
  2800  0071                     	ds	1
  2801  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2802  0072                     ??_setDimmerLights_IntrControl:	
  2803                           ; 0 bytes @ 0x2
  2804                           
  2805  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2806                           ; 0 bytes @ 0x2
  2807                           
  2808                           
  2809                           ; 1 bytes @ 0x2
  2810  0072                     	ds	1
  2811  0073                     ??_IOC_ISR:	
  2812  0073                     ??_setDimmerReClock:	
  2813                           ; 0 bytes @ 0x3
  2814                           
  2815                           
  2816                           ; 0 bytes @ 0x3
  2817  0073                     	ds	3
  2818  0076                     setDimmerLights_IntrControl@lights:	
  2819                           
  2820                           ; 1 bytes @ 0x6
  2821  0076                     	ds	1
  2822  0077                     ??_TMR0_ISR:	
  2823  0077                     ??_ISR:	
  2824                           ; 0 bytes @ 0x7
  2825                           
  2826                           
  2827                           ; 0 bytes @ 0x7
  2828  0077                     	ds	1
  2829                           
  2830                           	psect	cstackBANK0
  2831  0020                     __pcstackBANK0:	
  2832  0020                     ??_Timeout_Counter:	
  2833  0020                     ??_set_TimeoutCleared:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_CC2500_WriteByte:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_CC2500_ReadByte:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ?_DelayTime_1us:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_setTxData:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ?_setLoad_StatusOff:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_Dimmer_Initialization:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_getDimmerLights_StatusFlag:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_setLoad_GO:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_setMemory_GO:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_setLoad_Count:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ?_setLoad_StatusOn:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_Fosc_Set:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_IO_Set:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_TMR0_Set:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_ADC_Set:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_INT_Set:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_IOC_Set:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_Flash_Memory_Read:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_Flash_Memory_Write:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_myMain_Initialization:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_setLoad_Enable:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_setRF_Enable:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_setLoad_AH_AL_Restore:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_setRF_Initialization:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_Buzzer_Initialization:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_Buzzer_Main:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ??_DelayOffPointSelect:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ??_DimmerLightsPointSelect:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0020                     ??_LedPointSelect:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0020                     ??_Mcu_Initialization:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0020                     ??_Flash_Memory_Unlock:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0020                     ??_Flash_Memory_Erasing:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0020                     ??_setRF_Learn:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0020                     ??_RfSWPointSelect:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ??_TouchPower:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ??_SwPointSelect:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ?___bmul:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0020                     ?_getBuz_GO:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0020                     ?_getAD:	
  2951                           ; 2 bytes @ 0x0
  2952                           
  2953  0020                     ?___wmul:	
  2954                           ; 2 bytes @ 0x0
  2955                           
  2956  0020                     ?___awdiv:	
  2957                           ; 2 bytes @ 0x0
  2958                           
  2959  0020                     ?___lwdiv:	
  2960                           ; 2 bytes @ 0x0
  2961                           
  2962  0020                     ?___ftpack:	
  2963                           ; 2 bytes @ 0x0
  2964                           
  2965  0020                     getAD@adcon1:	
  2966                           ; 3 bytes @ 0x0
  2967                           
  2968  0020                     setLoad_Enable@command:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0020                     setLoad_GO@command:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974  0020                     setLoad_StatusOn@command:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977  0020                     setLoad_StatusOff@command:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0020                     setRF_Learn@command:	
  2981                           ; 1 bytes @ 0x0
  2982                           
  2983  0020                     setRF_Enable@command:	
  2984                           ; 1 bytes @ 0x0
  2985                           
  2986  0020                     ___bmul@multiplicand:	
  2987                           ; 1 bytes @ 0x0
  2988                           
  2989  0020                     DelayTime_1us@count:	
  2990                           ; 1 bytes @ 0x0
  2991                           
  2992  0020                     ___wmul@multiplier:	
  2993                           ; 2 bytes @ 0x0
  2994                           
  2995  0020                     ___awdiv@divisor:	
  2996                           ; 2 bytes @ 0x0
  2997                           
  2998  0020                     ___lwdiv@divisor:	
  2999                           ; 2 bytes @ 0x0
  3000                           
  3001  0020                     ___ftpack@arg:	
  3002                           ; 2 bytes @ 0x0
  3003                           
  3004                           
  3005                           ; 3 bytes @ 0x0
  3006  0020                     	ds	1
  3007  0021                     ??_setLoad_StatusOff:	
  3008  0021                     ??_setLoad_StatusOn:	
  3009                           ; 0 bytes @ 0x1
  3010                           
  3011  0021                     ??_RF_Initialization:	
  3012                           ; 0 bytes @ 0x1
  3013                           
  3014  0021                     ??___bmul:	
  3015                           ; 0 bytes @ 0x1
  3016                           
  3017  0021                     CC2500_WriteByte@loop_a:	
  3018                           ; 0 bytes @ 0x1
  3019                           
  3020  0021                     CC2500_ReadByte@loop_b:	
  3021                           ; 1 bytes @ 0x1
  3022                           
  3023  0021                     DelayOffPointSelect@sw:	
  3024                           ; 1 bytes @ 0x1
  3025                           
  3026  0021                     DimmerLightsPointSelect@lights:	
  3027                           ; 1 bytes @ 0x1
  3028                           
  3029  0021                     getDimmerLights_StatusFlag@Status:	
  3030                           ; 1 bytes @ 0x1
  3031                           
  3032  0021                     LedPointSelect@led:	
  3033                           ; 1 bytes @ 0x1
  3034                           
  3035  0021                     Flash_Memory_Read@i:	
  3036                           ; 1 bytes @ 0x1
  3037                           
  3038  0021                     Flash_Memory_Write@i:	
  3039                           ; 1 bytes @ 0x1
  3040                           
  3041  0021                     setLoad_Count@command:	
  3042                           ; 1 bytes @ 0x1
  3043                           
  3044  0021                     setLoad_StatusOn@lights:	
  3045                           ; 1 bytes @ 0x1
  3046                           
  3047  0021                     setLoad_StatusOff@lights:	
  3048                           ; 1 bytes @ 0x1
  3049                           
  3050  0021                     setLoad_AH_AL_Restore@i:	
  3051                           ; 1 bytes @ 0x1
  3052                           
  3053  0021                     RfSWPointSelect@sw:	
  3054                           ; 1 bytes @ 0x1
  3055                           
  3056  0021                     SwPointSelect@sw:	
  3057                           ; 1 bytes @ 0x1
  3058                           
  3059                           
  3060                           ; 1 bytes @ 0x1
  3061  0021                     	ds	1
  3062  0022                     ??_CC2500_WriteCommand:	
  3063  0022                     ??_CC2500_ReadStatus:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0022                     ??_DelayTime_1us:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0022                     ?_CC2500_WriteREG:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0022                     ??_DlyOff_Initialization:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0022                     ?_setSw_Status:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0022                     ?_setRFSW_Status:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0022                     ?_setDimmerLights_Trigger:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0022                     ?_setDimmerLights_Switch:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0022                     ??_setDimmerLights_Initialization:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0022                     ?_setDimmerLights_TriggerERROR:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0022                     ?_setLED:	
  3094                           ; 0 bytes @ 0x2
  3095                           
  3096  0022                     ??_setLED_Main:	
  3097                           ; 0 bytes @ 0x2
  3098                           
  3099  0022                     ??_Load_Initialization:	
  3100                           ; 0 bytes @ 0x2
  3101                           
  3102  0022                     ??_setSw_Enable:	
  3103                           ; 0 bytes @ 0x2
  3104                           
  3105  0022                     ??_getBuz_GO:	
  3106                           ; 0 bytes @ 0x2
  3107                           
  3108  0022                     ?_setDimmerLights_AdjGo:	
  3109                           ; 0 bytes @ 0x2
  3110                           
  3111  0022                     ?_setDimmerLights_TriggerAdj:	
  3112                           ; 0 bytes @ 0x2
  3113                           
  3114  0022                     ?_setDimmerLights_Clear:	
  3115                           ; 0 bytes @ 0x2
  3116                           
  3117  0022                     CC2500_WriteREG@value:	
  3118                           ; 0 bytes @ 0x2
  3119                           
  3120  0022                     DlyOff_Initialization@sw:	
  3121                           ; 1 bytes @ 0x2
  3122                           
  3123  0022                     _getDimmerLights_StatusFlag$2128:	
  3124                           ; 1 bytes @ 0x2
  3125                           
  3126  0022                     setDimmerLights_TriggerERROR@command:	
  3127                           ; 1 bytes @ 0x2
  3128                           
  3129  0022                     setDimmerLights_Switch@command:	
  3130                           ; 1 bytes @ 0x2
  3131                           
  3132  0022                     setDimmerLights_AdjGo@command:	
  3133                           ; 1 bytes @ 0x2
  3134                           
  3135  0022                     setDimmerLights_Trigger@command:	
  3136                           ; 1 bytes @ 0x2
  3137                           
  3138  0022                     setDimmerLights_TriggerAdj@command:	
  3139                           ; 1 bytes @ 0x2
  3140                           
  3141  0022                     setDimmerLights_Clear@command:	
  3142                           ; 1 bytes @ 0x2
  3143                           
  3144  0022                     setLED@command:	
  3145                           ; 1 bytes @ 0x2
  3146                           
  3147  0022                     Flash_Memory_Read@address:	
  3148                           ; 1 bytes @ 0x2
  3149                           
  3150  0022                     setMemory_GO@command:	
  3151                           ; 1 bytes @ 0x2
  3152                           
  3153  0022                     setRFSW_Status@command:	
  3154                           ; 1 bytes @ 0x2
  3155                           
  3156  0022                     setSw_Enable@command:	
  3157                           ; 1 bytes @ 0x2
  3158                           
  3159  0022                     setSw_Status@command:	
  3160                           ; 1 bytes @ 0x2
  3161                           
  3162  0022                     ___bmul@product:	
  3163                           ; 1 bytes @ 0x2
  3164                           
  3165  0022                     DelayTime_1us@i:	
  3166                           ; 1 bytes @ 0x2
  3167                           
  3168  0022                     ___wmul@multiplicand:	
  3169                           ; 2 bytes @ 0x2
  3170                           
  3171  0022                     ___awdiv@dividend:	
  3172                           ; 2 bytes @ 0x2
  3173                           
  3174  0022                     ___lwdiv@dividend:	
  3175                           ; 2 bytes @ 0x2
  3176                           
  3177                           
  3178                           ; 2 bytes @ 0x2
  3179  0022                     	ds	1
  3180  0023                     ??_CC2500_WriteREG:	
  3181  0023                     ??_setSw_Status:	
  3182                           ; 0 bytes @ 0x3
  3183                           
  3184  0023                     ??_setRFSW_Status:	
  3185                           ; 0 bytes @ 0x3
  3186                           
  3187  0023                     ??_setDimmerLights_Trigger:	
  3188                           ; 0 bytes @ 0x3
  3189                           
  3190  0023                     ??_setDimmerLights_Switch:	
  3191                           ; 0 bytes @ 0x3
  3192                           
  3193  0023                     ??_setDimmerLights_TriggerERROR:	
  3194                           ; 0 bytes @ 0x3
  3195                           
  3196  0023                     ??_setLED:	
  3197                           ; 0 bytes @ 0x3
  3198                           
  3199  0023                     ??_DelayOff_Initialization:	
  3200                           ; 0 bytes @ 0x3
  3201                           
  3202  0023                     ??_DimmerLights_Close:	
  3203                           ; 0 bytes @ 0x3
  3204                           
  3205  0023                     ??_setDimmerLights_AdjGo:	
  3206                           ; 0 bytes @ 0x3
  3207                           
  3208  0023                     ??_setDimmerLights_TriggerAdj:	
  3209                           ; 0 bytes @ 0x3
  3210                           
  3211  0023                     ??_setDimmerLights_Clear:	
  3212                           ; 0 bytes @ 0x3
  3213                           
  3214  0023                     ??_getAD:	
  3215                           ; 0 bytes @ 0x3
  3216                           
  3217  0023                     CC2500_WriteCommand@command:	
  3218                           ; 0 bytes @ 0x3
  3219                           
  3220  0023                     CC2500_ReadStatus@status_addr:	
  3221                           ; 1 bytes @ 0x3
  3222                           
  3223  0023                     setDimmerLights_Initialization@lights:	
  3224                           ; 1 bytes @ 0x3
  3225                           
  3226  0023                     setDimmerLights_TriggerERROR@lights:	
  3227                           ; 1 bytes @ 0x3
  3228                           
  3229  0023                     setDimmerLights_Switch@lights:	
  3230                           ; 1 bytes @ 0x3
  3231                           
  3232  0023                     setDimmerLights_AdjGo@lights:	
  3233                           ; 1 bytes @ 0x3
  3234                           
  3235  0023                     setDimmerLights_Trigger@lights:	
  3236                           ; 1 bytes @ 0x3
  3237                           
  3238  0023                     setDimmerLights_TriggerAdj@lights:	
  3239                           ; 1 bytes @ 0x3
  3240                           
  3241  0023                     setDimmerLights_Clear@lights:	
  3242                           ; 1 bytes @ 0x3
  3243                           
  3244  0023                     setLED@led:	
  3245                           ; 1 bytes @ 0x3
  3246                           
  3247  0023                     getAD@adcon0:	
  3248                           ; 1 bytes @ 0x3
  3249                           
  3250  0023                     Flash_Memory_Read@ret:	
  3251                           ; 1 bytes @ 0x3
  3252                           
  3253  0023                     setRFSW_Status@sw:	
  3254                           ; 1 bytes @ 0x3
  3255                           
  3256  0023                     setSw_Status@sw:	
  3257                           ; 1 bytes @ 0x3
  3258                           
  3259  0023                     ___bmul@multiplier:	
  3260                           ; 1 bytes @ 0x3
  3261                           
  3262  0023                     ___ftpack@exp:	
  3263                           ; 1 bytes @ 0x3
  3264                           
  3265                           
  3266                           ; 1 bytes @ 0x3
  3267  0023                     	ds	1
  3268  0024                     ??_CC2500_ClearTXFIFO:	
  3269  0024                     ??_CC2500_ClearRXFIFO:	
  3270                           ; 0 bytes @ 0x4
  3271                           
  3272  0024                     ??_CC2500_SIDLEMode:	
  3273                           ; 0 bytes @ 0x4
  3274                           
  3275  0024                     ??_DelayTimejudge:	
  3276                           ; 0 bytes @ 0x4
  3277                           
  3278  0024                     ?_setDimmerLights:	
  3279                           ; 0 bytes @ 0x4
  3280                           
  3281  0024                     ??_setDimmerLights_ERROR:	
  3282                           ; 0 bytes @ 0x4
  3283                           
  3284  0024                     ??_setLED_Initialization:	
  3285                           ; 0 bytes @ 0x4
  3286                           
  3287  0024                     ??_Flash_Memory_Modify:	
  3288                           ; 0 bytes @ 0x4
  3289                           
  3290  0024                     ??_getLoad_AD:	
  3291                           ; 0 bytes @ 0x4
  3292                           
  3293  0024                     ??_RF_RxDisable:	
  3294                           ; 0 bytes @ 0x4
  3295                           
  3296  0024                     ??_setSw_Initialization:	
  3297                           ; 0 bytes @ 0x4
  3298                           
  3299  0024                     ??_Sw_DimmerAdjFunc:	
  3300                           ; 0 bytes @ 0x4
  3301                           
  3302  0024                     ??_CC2500_TxData:	
  3303                           ; 0 bytes @ 0x4
  3304                           
  3305  0024                     ??_CC2500_RxData:	
  3306                           ; 0 bytes @ 0x4
  3307                           
  3308  0024                     ??_DimmerLights_Initialization:	
  3309                           ; 0 bytes @ 0x4
  3310                           
  3311  0024                     ??___wmul:	
  3312                           ; 0 bytes @ 0x4
  3313                           
  3314  0024                     ??___awdiv:	
  3315                           ; 0 bytes @ 0x4
  3316                           
  3317  0024                     ??___lwdiv:	
  3318                           ; 0 bytes @ 0x4
  3319                           
  3320  0024                     CC2500_WriteREG@w_addr:	
  3321                           ; 0 bytes @ 0x4
  3322                           
  3323  0024                     setDimmerLights@status:	
  3324                           ; 1 bytes @ 0x4
  3325                           
  3326  0024                     setLED_Initialization@led:	
  3327                           ; 1 bytes @ 0x4
  3328                           
  3329  0024                     setLED_Main@led:	
  3330                           ; 1 bytes @ 0x4
  3331                           
  3332  0024                     setSw_Initialization@sw:	
  3333                           ; 1 bytes @ 0x4
  3334                           
  3335  0024                     Sw_DimmerAdjFunc@Idle:	
  3336                           ; 1 bytes @ 0x4
  3337                           
  3338  0024                     ___ftpack@sign:	
  3339                           ; 1 bytes @ 0x4
  3340                           
  3341  0024                     getBuz_GO@i:	
  3342                           ; 1 bytes @ 0x4
  3343                           
  3344  0024                     DelayTime_1us@j:	
  3345                           ; 2 bytes @ 0x4
  3346                           
  3347  0024                     ___wmul@product:	
  3348                           ; 2 bytes @ 0x4
  3349                           
  3350                           
  3351                           ; 2 bytes @ 0x4
  3352  0024                     	ds	1
  3353  0025                     ??_CC2500_InitSetREG:	
  3354  0025                     ??_CC2500_InitPATable:	
  3355                           ; 0 bytes @ 0x5
  3356                           
  3357  0025                     ??_setDimmerLights:	
  3358                           ; 0 bytes @ 0x5
  3359                           
  3360  0025                     ??_Switch_Initialization:	
  3361                           ; 0 bytes @ 0x5
  3362                           
  3363  0025                     ??___ftpack:	
  3364                           ; 0 bytes @ 0x5
  3365                           
  3366  0025                     ??_LED_Initialization:	
  3367                           ; 0 bytes @ 0x5
  3368                           
  3369  0025                     ??_LED_Main:	
  3370                           ; 0 bytes @ 0x5
  3371                           
  3372  0025                     CC2500_TxData@loop_e:	
  3373                           ; 0 bytes @ 0x5
  3374                           
  3375  0025                     CC2500_RxData@loop_f:	
  3376                           ; 1 bytes @ 0x5
  3377                           
  3378  0025                     setDimmerLights_ERROR@lights:	
  3379                           ; 1 bytes @ 0x5
  3380                           
  3381  0025                     Flash_Memory_Modify@i:	
  3382                           ; 1 bytes @ 0x5
  3383                           
  3384  0025                     Sw_DimmerAdjFunc@sw:	
  3385                           ; 1 bytes @ 0x5
  3386                           
  3387  0025                     ___awdiv@counter:	
  3388                           ; 1 bytes @ 0x5
  3389                           
  3390  0025                     ___lwdiv@quotient:	
  3391                           ; 1 bytes @ 0x5
  3392                           
  3393                           
  3394                           ; 2 bytes @ 0x5
  3395  0025                     	ds	1
  3396  0026                     ??_CC2500_PowerRST:	
  3397  0026                     ??_CC2500_FrequencyCabr:	
  3398                           ; 0 bytes @ 0x6
  3399                           
  3400  0026                     ??_Flash_Memory_Main:	
  3401                           ; 0 bytes @ 0x6
  3402                           
  3403  0026                     CC2500_InitSetREG@temp1:	
  3404                           ; 0 bytes @ 0x6
  3405                           
  3406  0026                     CC2500_InitPATable@temp:	
  3407                           ; 1 bytes @ 0x6
  3408                           
  3409  0026                     DelayTimejudge@i:	
  3410                           ; 1 bytes @ 0x6
  3411                           
  3412  0026                     setDimmerLights@lights:	
  3413                           ; 1 bytes @ 0x6
  3414                           
  3415  0026                     getLoad_AD@channel:	
  3416                           ; 1 bytes @ 0x6
  3417                           
  3418  0026                     ___awdiv@sign:	
  3419                           ; 1 bytes @ 0x6
  3420                           
  3421                           
  3422                           ; 1 bytes @ 0x6
  3423  0026                     	ds	1
  3424  0027                     CC2500_InitSetREG@temp2:	
  3425  0027                     CC2500_InitPATable@loop_d:	
  3426                           ; 1 bytes @ 0x7
  3427                           
  3428  0027                     DelayTimejudge@j:	
  3429                           ; 1 bytes @ 0x7
  3430                           
  3431  0027                     getLoad_AD@j:	
  3432                           ; 1 bytes @ 0x7
  3433                           
  3434  0027                     ___lwdiv@counter:	
  3435                           ; 1 bytes @ 0x7
  3436                           
  3437  0027                     ___awdiv@quotient:	
  3438                           ; 1 bytes @ 0x7
  3439                           
  3440                           
  3441                           ; 2 bytes @ 0x7
  3442  0027                     	ds	1
  3443  0028                     ?___awtoft:	
  3444  0028                     CC2500_InitSetREG@loop_c:	
  3445                           ; 3 bytes @ 0x8
  3446                           
  3447  0028                     DelayTimejudge@k:	
  3448                           ; 1 bytes @ 0x8
  3449                           
  3450  0028                     getLoad_AD@i:	
  3451                           ; 1 bytes @ 0x8
  3452                           
  3453  0028                     ___awtoft@c:	
  3454                           ; 1 bytes @ 0x8
  3455                           
  3456                           
  3457                           ; 2 bytes @ 0x8
  3458  0028                     	ds	1
  3459  0029                     ?_setBuz:	
  3460  0029                     ??_CC2500_PowerOnInitial:	
  3461                           ; 0 bytes @ 0x9
  3462                           
  3463  0029                     DelayTimejudge@value:	
  3464                           ; 0 bytes @ 0x9
  3465                           
  3466  0029                     setBuz@time:	
  3467                           ; 1 bytes @ 0x9
  3468                           
  3469                           
  3470                           ; 2 bytes @ 0x9
  3471  0029                     	ds	1
  3472  002A                     ?_setDelayOff_GO:	
  3473  002A                     setDelayOff_GO@command:	
  3474                           ; 0 bytes @ 0xA
  3475                           
  3476                           
  3477                           ; 1 bytes @ 0xA
  3478  002A                     	ds	1
  3479  002B                     ??_setBuz:	
  3480  002B                     ??___awtoft:	
  3481                           ; 0 bytes @ 0xB
  3482                           
  3483  002B                     setDelayOff_GO@value:	
  3484                           ; 0 bytes @ 0xB
  3485                           
  3486                           
  3487                           ; 1 bytes @ 0xB
  3488  002B                     	ds	1
  3489  002C                     ??_setDelayOff_GO:	
  3490  002C                     setBuz@count:	
  3491                           ; 0 bytes @ 0xC
  3492                           
  3493                           
  3494                           ; 1 bytes @ 0xC
  3495  002C                     	ds	1
  3496  002D                     ??_my_Main:	
  3497  002D                     ??_setLog_Code:	
  3498                           ; 0 bytes @ 0xD
  3499                           
  3500  002D                     ??_DimmerLights_Exceptions:	
  3501                           ; 0 bytes @ 0xD
  3502                           
  3503  002D                     DimmerLights_Exceptions@status:	
  3504                           ; 0 bytes @ 0xD
  3505                           
  3506  002D                     ___awtoft@sign:	
  3507                           ; 1 bytes @ 0xD
  3508                           
  3509                           
  3510                           ; 1 bytes @ 0xD
  3511  002D                     	ds	1
  3512  002E                     ??_setLoad_Exceptions:	
  3513  002E                     ?___ftdiv:	
  3514                           ; 0 bytes @ 0xE
  3515                           
  3516  002E                     ?___ftmul:	
  3517                           ; 3 bytes @ 0xE
  3518                           
  3519  002E                     setDelayOff_GO@sw:	
  3520                           ; 3 bytes @ 0xE
  3521                           
  3522  002E                     ___ftdiv@f2:	
  3523                           ; 1 bytes @ 0xE
  3524                           
  3525  002E                     ___ftmul@f1:	
  3526                           ; 3 bytes @ 0xE
  3527                           
  3528                           
  3529                           ; 3 bytes @ 0xE
  3530  002E                     	ds	1
  3531  002F                     setLoad_Exceptions@i:	
  3532                           
  3533                           ; 1 bytes @ 0xF
  3534  002F                     	ds	1
  3535  0030                     setLoad_Exceptions@command:	
  3536                           
  3537                           ; 1 bytes @ 0x10
  3538  0030                     	ds	1
  3539  0031                     ??_Load_Main:	
  3540  0031                     ___ftdiv@f1:	
  3541                           ; 0 bytes @ 0x11
  3542                           
  3543  0031                     ___ftmul@f2:	
  3544                           ; 3 bytes @ 0x11
  3545                           
  3546                           
  3547                           ; 3 bytes @ 0x11
  3548  0031                     	ds	2
  3549  0033                     Load_Main@i:	
  3550                           
  3551                           ; 1 bytes @ 0x13
  3552  0033                     	ds	1
  3553  0034                     ??___ftdiv:	
  3554  0034                     ??___ftmul:	
  3555                           ; 0 bytes @ 0x14
  3556                           
  3557                           
  3558                           ; 0 bytes @ 0x14
  3559  0034                     	ds	4
  3560  0038                     ___ftdiv@cntr:	
  3561  0038                     ___ftmul@exp:	
  3562                           ; 1 bytes @ 0x18
  3563                           
  3564                           
  3565                           ; 1 bytes @ 0x18
  3566  0038                     	ds	1
  3567  0039                     ___ftdiv@f3:	
  3568  0039                     ___ftmul@f3_as_product:	
  3569                           ; 3 bytes @ 0x19
  3570                           
  3571                           
  3572                           ; 3 bytes @ 0x19
  3573  0039                     	ds	3
  3574  003C                     ___ftdiv@exp:	
  3575  003C                     ___ftmul@cntr:	
  3576                           ; 1 bytes @ 0x1C
  3577                           
  3578                           
  3579                           ; 1 bytes @ 0x1C
  3580  003C                     	ds	1
  3581  003D                     ___ftdiv@sign:	
  3582  003D                     ___ftmul@sign:	
  3583                           ; 1 bytes @ 0x1D
  3584                           
  3585                           
  3586                           ; 1 bytes @ 0x1D
  3587  003D                     	ds	1
  3588  003E                     ?___ftadd:	
  3589  003E                     ___ftadd@f1:	
  3590                           ; 3 bytes @ 0x1E
  3591                           
  3592                           
  3593                           ; 3 bytes @ 0x1E
  3594  003E                     	ds	3
  3595  0041                     ___ftadd@f2:	
  3596                           
  3597                           ; 3 bytes @ 0x21
  3598  0041                     	ds	3
  3599  0044                     ??___ftadd:	
  3600                           
  3601                           ; 0 bytes @ 0x24
  3602  0044                     	ds	4
  3603  0048                     ___ftadd@sign:	
  3604                           
  3605                           ; 1 bytes @ 0x28
  3606  0048                     	ds	1
  3607  0049                     ___ftadd@exp2:	
  3608                           
  3609                           ; 1 bytes @ 0x29
  3610  0049                     	ds	1
  3611  004A                     ___ftadd@exp1:	
  3612                           
  3613                           ; 1 bytes @ 0x2A
  3614  004A                     	ds	1
  3615  004B                     ?___fttol:	
  3616  004B                     ___fttol@f1:	
  3617                           ; 4 bytes @ 0x2B
  3618                           
  3619                           
  3620                           ; 3 bytes @ 0x2B
  3621  004B                     	ds	4
  3622  004F                     ??___fttol:	
  3623                           
  3624                           ; 0 bytes @ 0x2F
  3625  004F                     	ds	4
  3626  0053                     ___fttol@sign1:	
  3627                           
  3628                           ; 1 bytes @ 0x33
  3629  0053                     	ds	1
  3630  0054                     ___fttol@lval:	
  3631                           
  3632                           ; 4 bytes @ 0x34
  3633  0054                     	ds	4
  3634  0058                     ___fttol@exp1:	
  3635                           
  3636                           ; 1 bytes @ 0x38
  3637  0058                     	ds	1
  3638  0059                     ??_getPercentValue:	
  3639  0059                     ??_setPercentValue:	
  3640                           ; 0 bytes @ 0x39
  3641                           
  3642  0059                     setPercentValue@value:	
  3643                           ; 0 bytes @ 0x39
  3644                           
  3645                           
  3646                           ; 1 bytes @ 0x39
  3647  0059                     	ds	1
  3648  005A                     setPercentValue@i:	
  3649                           
  3650                           ; 3 bytes @ 0x3A
  3651  005A                     	ds	1
  3652  005B                     getPercentValue@value:	
  3653                           
  3654                           ; 1 bytes @ 0x3B
  3655  005B                     	ds	1
  3656  005C                     getPercentValue@i:	
  3657                           
  3658                           ; 3 bytes @ 0x3C
  3659  005C                     	ds	1
  3660  005D                     ?_setRF_DimmerLights:	
  3661  005D                     ??_Flash_Memory_Initialization:	
  3662                           ; 0 bytes @ 0x3D
  3663                           
  3664  005D                     setRF_DimmerLights@on:	
  3665                           ; 0 bytes @ 0x3D
  3666                           
  3667                           
  3668                           ; 1 bytes @ 0x3D
  3669  005D                     	ds	1
  3670  005E                     ??_setRF_DimmerLights:	
  3671  005E                     Flash_Memory_Initialization@i:	
  3672                           ; 0 bytes @ 0x3E
  3673                           
  3674                           
  3675                           ; 1 bytes @ 0x3E
  3676  005E                     	ds	1
  3677  005F                     ??_setDimmerLights_AdjRF:	
  3678                           
  3679                           ; 0 bytes @ 0x3F
  3680  005F                     	ds	1
  3681  0060                     setDimmerLights_AdjRF@lights:	
  3682  0060                     setRF_DimmerLights@status:	
  3683                           ; 1 bytes @ 0x40
  3684                           
  3685                           
  3686                           ; 1 bytes @ 0x40
  3687  0060                     	ds	1
  3688  0061                     ??_setRF_DimmerValue:	
  3689  0061                     setRF_DimmerLights@lights:	
  3690                           ; 0 bytes @ 0x41
  3691                           
  3692                           
  3693                           ; 1 bytes @ 0x41
  3694  0061                     	ds	1
  3695  0062                     ??_DlyOff_Main:	
  3696  0062                     ?_setDimmerLights_Adj:	
  3697                           ; 0 bytes @ 0x42
  3698                           
  3699  0062                     ??_setRFSW_Control:	
  3700                           ; 0 bytes @ 0x42
  3701                           
  3702  0062                     ??_Sw_DimmerOnFunc:	
  3703                           ; 0 bytes @ 0x42
  3704                           
  3705  0062                     ??_Sw_DimmerOffFunc:	
  3706                           ; 0 bytes @ 0x42
  3707                           
  3708  0062                     setDimmerLights_Adj@status:	
  3709                           ; 0 bytes @ 0x42
  3710                           
  3711  0062                     Sw_DimmerOnFunc@Idle:	
  3712                           ; 1 bytes @ 0x42
  3713                           
  3714                           
  3715                           ; 1 bytes @ 0x42
  3716  0062                     	ds	1
  3717  0063                     ??_setDimmerLights_Adj:	
  3718  0063                     setRFSW_Control@sw:	
  3719                           ; 0 bytes @ 0x43
  3720                           
  3721  0063                     setRF_DimmerValue@lights:	
  3722                           ; 1 bytes @ 0x43
  3723                           
  3724  0063                     Sw_DimmerOnFunc@sw:	
  3725                           ; 1 bytes @ 0x43
  3726                           
  3727                           
  3728                           ; 1 bytes @ 0x43
  3729  0063                     	ds	1
  3730  0064                     ??_setRFSW_AdjControl:	
  3731  0064                     DlyOff_Main@sw:	
  3732                           ; 0 bytes @ 0x44
  3733                           
  3734  0064                     setDimmerLights_Adj@lights:	
  3735                           ; 1 bytes @ 0x44
  3736                           
  3737  0064                     Sw_DimmerOffFunc@sw:	
  3738                           ; 1 bytes @ 0x44
  3739                           
  3740                           
  3741                           ; 1 bytes @ 0x44
  3742  0064                     	ds	1
  3743  0065                     ??_setDimmerLights_Main:	
  3744  0065                     ??_setSw_Main:	
  3745                           ; 0 bytes @ 0x45
  3746                           
  3747  0065                     ??_DelayOff_Main:	
  3748                           ; 0 bytes @ 0x45
  3749                           
  3750  0065                     setDimmerLights_Main@clear:	
  3751                           ; 0 bytes @ 0x45
  3752                           
  3753                           
  3754                           ; 1 bytes @ 0x45
  3755  0065                     	ds	1
  3756  0066                     setDimmerLights_Main@lights:	
  3757  0066                     setRFSW_AdjControl@sw:	
  3758                           ; 1 bytes @ 0x46
  3759                           
  3760                           
  3761                           ; 1 bytes @ 0x46
  3762  0066                     	ds	1
  3763  0067                     ??_setRF_Main:	
  3764  0067                     ??_getRxData:	
  3765                           ; 0 bytes @ 0x47
  3766                           
  3767  0067                     ??_setControl_Lights_Table:	
  3768                           ; 0 bytes @ 0x47
  3769                           
  3770  0067                     ??_DimmerLights_Main:	
  3771                           ; 0 bytes @ 0x47
  3772                           
  3773  0067                     _setSw_Main$5623:	
  3774                           ; 0 bytes @ 0x47
  3775                           
  3776                           
  3777                           ; 1 bytes @ 0x47
  3778  0067                     	ds	1
  3779  0068                     _setRF_Main$4712:	
  3780  0068                     _setSw_Main$5624:	
  3781                           ; 1 bytes @ 0x48
  3782                           
  3783                           
  3784                           ; 1 bytes @ 0x48
  3785  0068                     	ds	1
  3786  0069                     ??_RF_Main:	
  3787  0069                     setSw_Main@sw:	
  3788                           ; 0 bytes @ 0x49
  3789                           
  3790                           
  3791                           ; 1 bytes @ 0x49
  3792  0069                     	ds	1
  3793  006A                     ??_Switch_Main:	
  3794  006A                     ?_main:	
  3795                           ; 0 bytes @ 0x4A
  3796                           
  3797  006A                     main@argc:	
  3798                           ; 2 bytes @ 0x4A
  3799                           
  3800                           
  3801                           ; 2 bytes @ 0x4A
  3802  006A                     	ds	2
  3803  006C                     main@argv:	
  3804                           
  3805                           ; 2 bytes @ 0x4C
  3806  006C                     	ds	2
  3807  006E                     ??_main:	
  3808                           
  3809                           	psect	maintext
  3810  160A                     __pmaintext:	
  3811                           ; 0 bytes @ 0x4E
  3812 ;;
  3813 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3814 ;;
  3815 ;; *************** function _main *****************
  3816 ;; Defined at:
  3817 ;;		line 7 in file "../src/Main_B1.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  argc            2   74[BANK0 ] int 
  3820 ;;  argv            2   76[BANK0 ] PTR PTR unsigned char 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;		None
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  2   74[BANK0 ] int 
  3825 ;; Registers used:
  3826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3827 ;; Tracked objects:
  3828 ;;		On entry : 17F/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3832 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3835 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3836 ;;Total ram usage:        4 bytes
  3837 ;; Hardware stack levels required when called:   15
  3838 ;; This function calls:
  3839 ;;		_Buzzer_Initialization
  3840 ;;		_Buzzer_Main
  3841 ;;		_CC2500_PowerOnInitial
  3842 ;;		_DelayOff_Initialization
  3843 ;;		_DelayOff_Main
  3844 ;;		_DimmerLights_Initialization
  3845 ;;		_DimmerLights_Main
  3846 ;;		_Flash_Memory_Initialization
  3847 ;;		_Flash_Memory_Main
  3848 ;;		_LED_Initialization
  3849 ;;		_LED_Main
  3850 ;;		_Load_Initialization
  3851 ;;		_Load_Main
  3852 ;;		_Mcu_Initialization
  3853 ;;		_RF_Initialization
  3854 ;;		_RF_Main
  3855 ;;		_Switch_Initialization
  3856 ;;		_Switch_Main
  3857 ;;		_getLoad_AD
  3858 ;;		_myMain_Initialization
  3859 ;;		_my_Main
  3860 ;; This function is called by:
  3861 ;;		Startup code after reset
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           
  3866                           ;psect for function _main
  3867  160A                     _main:	
  3868                           
  3869                           ;Main_B1.c: 9: myMain_Initialization();
  3870                           
  3871                           ;incstack = 0
  3872                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3873  160A  319C  24E5  3196   	fcall	_myMain_Initialization
  3874                           
  3875                           ;Main_B1.c: 10: Mcu_Initialization();
  3876  160D  319D  2589  3196   	fcall	_Mcu_Initialization
  3877                           
  3878                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3879  1610  3185  25C2  3196   	fcall	_Flash_Memory_Initialization
  3880                           
  3881                           ;Main_B1.c: 12: LED_Initialization();
  3882  1613  319C  245A  3196   	fcall	_LED_Initialization
  3883                           
  3884                           ;Main_B1.c: 13: Buzzer_Initialization();
  3885  1616  319B  2382  3196   	fcall	_Buzzer_Initialization
  3886                           
  3887                           ;Main_B1.c: 15: ;;
  3888                           ;Main_B1.c: 16: ;;
  3889                           ;Main_B1.c: 17: Load_Initialization();
  3890  1619  319B  23A0  3196   	fcall	_Load_Initialization
  3891                           
  3892                           ;Main_B1.c: 18: ;;
  3893                           ;Main_B1.c: 19: DelayOff_Initialization();
  3894  161C  319B  23CC  3196   	fcall	_DelayOff_Initialization
  3895                           
  3896                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3897  161F  319E  2667  3196   	fcall	_DimmerLights_Initialization
  3898                           
  3899                           ;Main_B1.c: 22: ;;
  3900                           ;Main_B1.c: 23: ;;
  3901                           ;Main_B1.c: 24: ;;
  3902                           ;Main_B1.c: 25: Switch_Initialization();
  3903  1622  319C  2480  3196   	fcall	_Switch_Initialization
  3904                           
  3905                           ;Main_B1.c: 26: RF_Initialization();
  3906  1625  319B  2385  3196   	fcall	_RF_Initialization
  3907                           
  3908                           ;Main_B1.c: 27: CC2500_PowerOnInitial();
  3909  1628  319E  2610  3196   	fcall	_CC2500_PowerOnInitial
  3910  162B                     l7939:	
  3911                           ;Main_B1.c: 28: ;;
  3912                           ;Main_B1.c: 31: while (1) {
  3913                           
  3914                           
  3915                           ;Main_B1.c: 33: if (myMain.PowerON) {
  3916  162B  0021               	movlb	1	; select bank1
  3917  162C  1C20               	btfss	_myMain^(0+128),0
  3918  162D  2E32               	goto	l7943
  3919                           
  3920                           ;Main_B1.c: 35: ;;
  3921                           ;Main_B1.c: 39: getLoad_AD(0x05);
  3922  162E  3005               	movlw	5
  3923  162F  318B  23B5  3196   	fcall	_getLoad_AD
  3924  1632                     l7943:	
  3925                           ;Main_B1.c: 43: ;;
  3926                           ;Main_B1.c: 47: ;;
  3927                           
  3928                           
  3929                           ;Main_B1.c: 62: }
  3930                           ;Main_B1.c: 65: if (myMain.T0_Timerout) {
  3931  1632  0021               	movlb	1	; select bank1
  3932  1633  1CA0               	btfss	_myMain^(0+128),1
  3933  1634  2E2B               	goto	l7939
  3934                           
  3935                           ;Main_B1.c: 66: myMain.T0_Timerout = 0;
  3936  1635  10A0               	bcf	_myMain^(0+128),1
  3937                           
  3938                           ;Main_B1.c: 67: my_Main();
  3939  1636  3194  24E8  3196   	fcall	_my_Main
  3940                           
  3941                           ;Main_B1.c: 68: ;;
  3942                           ;Main_B1.c: 69: ;;
  3943                           ;Main_B1.c: 70: ;;
  3944                           ;Main_B1.c: 71: if (myMain.PowerON) {
  3945  1639  0021               	movlb	1	; select bank1
  3946  163A  1C20               	btfss	_myMain^(0+128),0
  3947  163B  2E2B               	goto	l7939
  3948                           
  3949                           ;Main_B1.c: 72: Flash_Memory_Main();
  3950  163C  319F  27E1  3196   	fcall	_Flash_Memory_Main
  3951                           
  3952                           ;Main_B1.c: 74: LED_Main();
  3953  163F  3190  2066  3196   	fcall	_LED_Main
  3954                           
  3955                           ;Main_B1.c: 75: Buzzer_Main();
  3956  1642  3195  2575  3196   	fcall	_Buzzer_Main
  3957                           
  3958                           ;Main_B1.c: 77: ;;
  3959                           ;Main_B1.c: 78: ;;
  3960                           ;Main_B1.c: 79: Load_Main();
  3961  1645  3182  2219  3196   	fcall	_Load_Main
  3962                           
  3963                           ;Main_B1.c: 80: ;;
  3964                           ;Main_B1.c: 82: ;;
  3965                           ;Main_B1.c: 83: DimmerLights_Main();
  3966  1648  319C  2437  3196   	fcall	_DimmerLights_Main
  3967                           
  3968                           ;Main_B1.c: 84: Switch_Main();
  3969  164B  319B  23FC  3196   	fcall	_Switch_Main
  3970                           
  3971                           ;Main_B1.c: 85: ;;
  3972                           ;Main_B1.c: 86: ;;
  3973                           ;Main_B1.c: 88: RF_Main();
  3974  164E  319B  2388  3196   	fcall	_RF_Main
  3975                           
  3976                           ;Main_B1.c: 89: DelayOff_Main();
  3977  1651  319B  23D4  3196   	fcall	_DelayOff_Main
  3978                           
  3979                           ;Main_B1.c: 90: ;;
  3980  1654  2E2B               	goto	l7939
  3981  1655                     __end_of_main:	
  3982                           ;Main_B1.c: 91: }
  3983                           ;Main_B1.c: 92: }
  3984                           ;Main_B1.c: 110: }
  3985                           ;Main_B1.c: 111: return (0);
  3986                           ;	Return value of _main is never used
  3987                           
  3988                           
  3989                           	psect	text1
  3990  14E8                     __ptext1:	
  3991 ;; *************** function _my_Main *****************
  3992 ;; Defined at:
  3993 ;;		line 128 in file "../src/Main_B1.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;		None
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;		None
  3998 ;; Return value:  Size  Location     Type
  3999 ;;		None               void
  4000 ;; Registers used:
  4001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4011 ;;Total ram usage:        0 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    7
  4014 ;; This function calls:
  4015 ;;		_setBuz
  4016 ;;		_setLoad_Enable
  4017 ;;		_setRF_Enable
  4018 ;;		_setSw_Enable
  4019 ;; This function is called by:
  4020 ;;		_main
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           
  4025                           ;psect for function _my_Main
  4026  14E8                     _my_Main:	
  4027                           
  4028                           ;Main_B1.c: 130: if (myMain.PowerON == 0) {
  4029                           
  4030                           ;incstack = 0
  4031                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4032  14E8  0021               	movlb	1	; select bank1
  4033  14E9  1820               	btfsc	_myMain^(0+128),0
  4034  14EA  2D15               	goto	l7741
  4035                           
  4036                           ;Main_B1.c: 131: myMain.PowerCount++;
  4037  14EB  3001               	movlw	1
  4038  14EC  07A1               	addwf	(_myMain^(0+128)+1),f
  4039  14ED  3000               	movlw	0
  4040  14EE  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  4041                           
  4042                           ;Main_B1.c: 132: if (myMain.PowerCount == 150)
  4043  14EF  3001               	movlw	1
  4044  14F0  3EA0               	addlw	_myMain& (0+255)
  4045  14F1  0086               	movwf	6
  4046  14F2  0187               	clrf	7
  4047  14F3  3F40               	moviw [0]fsr1
  4048  14F4  3A96               	xorlw	150
  4049  14F5  1D03               	skipz
  4050  14F6  2CF9               	goto	u7555
  4051  14F7  3F41               	moviw [1]fsr1
  4052  14F8  3A00               	xorlw	0
  4053  14F9                     u7555:	
  4054  14F9  1D03               	skipz
  4055  14FA  0008               	return
  4056                           
  4057                           ;Main_B1.c: 133: {
  4058                           ;Main_B1.c: 134: myMain.PowerCount = 0;
  4059  14FB  01A1               	clrf	(_myMain^(0+128)+1)
  4060  14FC  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4061                           
  4062                           ;Main_B1.c: 135: myMain.PowerON = 1;
  4063  14FD  1420               	bsf	_myMain^(0+128),0
  4064                           
  4065                           ;Main_B1.c: 138: ;;
  4066                           ;Main_B1.c: 142: setLoad_Enable(1);
  4067  14FE  3001               	movlw	1
  4068  14FF  3187  27F6  3194   	fcall	_setLoad_Enable
  4069                           
  4070                           ;Main_B1.c: 148: setBuz(3, 50);
  4071  1502  3032               	movlw	50
  4072  1503  0020               	movlb	0	; select bank0
  4073  1504  00A9               	movwf	setBuz@time
  4074  1505  3000               	movlw	0
  4075  1506  00AA               	movwf	setBuz@time+1
  4076  1507  3003               	movlw	3
  4077  1508  3197  274C  3194   	fcall	_setBuz
  4078                           
  4079                           ;Main_B1.c: 149: myMain.SelfTest = 1;
  4080  150B  0021               	movlb	1	; select bank1
  4081  150C  1720               	bsf	_myMain^(0+128),6
  4082                           
  4083                           ;Main_B1.c: 151: setSw_Enable(1);
  4084  150D  3001               	movlw	1
  4085  150E  319F  272D  3194   	fcall	_setSw_Enable
  4086                           
  4087                           ;Main_B1.c: 154: setRF_Enable(1);
  4088  1511  3001               	movlw	1
  4089  1512  319C  249B         	fcall	_setRF_Enable
  4090                           
  4091                           ;Main_B1.c: 158: }
  4092                           ;Main_B1.c: 159: } else {
  4093  1514  0008               	return
  4094  1515                     l7741:	
  4095                           
  4096                           ;Main_B1.c: 167: myMain.Count1++;
  4097  1515  3001               	movlw	1
  4098  1516  0021               	movlb	1	; select bank1
  4099  1517  07A5               	addwf	(_myMain^(0+128)+5),f
  4100  1518  3000               	movlw	0
  4101  1519  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4102                           
  4103                           ;Main_B1.c: 168: if (myMain.Count1 == 100)
  4104  151A  3005               	movlw	5
  4105  151B  3EA0               	addlw	_myMain& (0+255)
  4106  151C  0086               	movwf	6
  4107  151D  0187               	clrf	7
  4108  151E  3F40               	moviw [0]fsr1
  4109  151F  3A64               	xorlw	100
  4110  1520  1D03               	skipz
  4111  1521  2D24               	goto	u7565
  4112  1522  3F41               	moviw [1]fsr1
  4113  1523  3A00               	xorlw	0
  4114  1524                     u7565:	
  4115  1524  1D03               	skipz
  4116  1525  0008               	return
  4117                           
  4118                           ;Main_B1.c: 169: {
  4119                           ;Main_B1.c: 170: myMain.Count1 = 0;
  4120  1526  01A5               	clrf	(_myMain^(0+128)+5)
  4121  1527  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4122                           
  4123                           ;Main_B1.c: 183: if (myMain.Flag) {
  4124  1528  1DA0               	btfss	_myMain^(0+128),3
  4125  1529  2D2C               	goto	l1513
  4126                           
  4127                           ;Main_B1.c: 184: myMain.Flag = 0;
  4128  152A  11A0               	bcf	_myMain^(0+128),3
  4129                           
  4130                           ;Main_B1.c: 193: } else {
  4131  152B  0008               	return
  4132  152C                     l1513:	
  4133                           
  4134                           ;Main_B1.c: 194: myMain.Flag = 1;
  4135  152C  15A0               	bsf	_myMain^(0+128),3
  4136  152D  0008               	return
  4137  152E                     __end_of_my_Main:	
  4138                           
  4139                           	psect	text2
  4140  07F6                     __ptext2:	
  4141 ;; *************** function _setLoad_Enable *****************
  4142 ;; Defined at:
  4143 ;;		line 260 in file "../src/OverLoad_B1.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  command         1    wreg     unsigned char 
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;  command         1    0[BANK0 ] unsigned char 
  4148 ;; Return value:  Size  Location     Type
  4149 ;;		None               void
  4150 ;; Registers used:
  4151 ;;		wreg
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4160 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4161 ;;Total ram usage:        1 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    5
  4164 ;; This function calls:
  4165 ;;		Nothing
  4166 ;; This function is called by:
  4167 ;;		_my_Main
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           
  4172                           ;psect for function _setLoad_Enable
  4173  07F6                     _setLoad_Enable:	
  4174                           
  4175                           ;incstack = 0
  4176                           ; Regs used in _setLoad_Enable: [wreg]
  4177                           ;setLoad_Enable@command stored from wreg
  4178  07F6  0020               	movlb	0	; select bank0
  4179  07F7  00A0               	movwf	setLoad_Enable@command
  4180                           
  4181                           ;OverLoad_B1.c: 261: Load1.Enable = command;
  4182  07F8  0820               	movf	setLoad_Enable@command,w
  4183  07F9  0023               	movlb	3	; select bank3
  4184  07FA  1020               	bcf	_Load1^(0+384),0
  4185  07FB  1D03               	skipz
  4186  07FC  1420               	bsf	_Load1^(0+384),0
  4187                           
  4188                           ;OverLoad_B1.c: 262: Load1.GO = 0;
  4189  07FD  10A0               	bcf	_Load1^(0+384),1
  4190  07FE  0008               	return
  4191  07FF                     __end_of_setLoad_Enable:	
  4192                           
  4193                           	psect	text3
  4194  1CE5                     __ptext3:	
  4195 ;; *************** function _myMain_Initialization *****************
  4196 ;; Defined at:
  4197 ;;		line 116 in file "../src/Main_B1.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;		None
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;		None
  4202 ;; Return value:  Size  Location     Type
  4203 ;;		None               void
  4204 ;; Registers used:
  4205 ;;		wreg, fsr1l, fsr1h
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;Total ram usage:        1 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    5
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_main
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           
  4226                           ;psect for function _myMain_Initialization
  4227  1CE5                     _myMain_Initialization:	
  4228                           
  4229                           ;Main_B1.c: 118: product = &_product;
  4230                           
  4231                           ;incstack = 0
  4232                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4233  1CE5  3045               	movlw	__product& (0+255)
  4234  1CE6  0020               	movlb	0	; select bank0
  4235  1CE7  00A0               	movwf	??_myMain_Initialization
  4236  1CE8  0820               	movf	??_myMain_Initialization,w
  4237  1CE9  00EE               	movwf	_product
  4238                           
  4239                           ;Main_B1.c: 119: product->Data[20] = 210;
  4240  1CEA  30D2               	movlw	210
  4241  1CEB  00A0               	movwf	??_myMain_Initialization
  4242  1CEC  086E               	movf	_product,w
  4243  1CED  3E14               	addlw	20
  4244  1CEE  0086               	movwf	6
  4245  1CEF  3002               	movlw	2	; select bank4/5
  4246  1CF0  0087               	movwf	7
  4247  1CF1  0820               	movf	??_myMain_Initialization,w
  4248  1CF2  0081               	movwf	1
  4249  1CF3  0008               	return
  4250  1CF4                     __end_of_myMain_Initialization:	
  4251                           
  4252                           	psect	text4
  4253  0BB5                     __ptext4:	
  4254 ;; *************** function _getLoad_AD *****************
  4255 ;; Defined at:
  4256 ;;		line 15 in file "../src/OverLoad_B1.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  channel         1    wreg     unsigned char 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;  channel         1    6[BANK0 ] unsigned char 
  4261 ;;  i               1    8[BANK0 ] unsigned char 
  4262 ;;  j               1    7[BANK0 ] unsigned char 
  4263 ;; Return value:  Size  Location     Type
  4264 ;;		None               void
  4265 ;; Registers used:
  4266 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4273 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4274 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4275 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4276 ;;Total ram usage:        5 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    7
  4279 ;; This function calls:
  4280 ;;		_getAD
  4281 ;; This function is called by:
  4282 ;;		_main
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           
  4287                           ;psect for function _getLoad_AD
  4288  0BB5                     _getLoad_AD:	
  4289                           
  4290                           ;incstack = 0
  4291                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4292                           ;getLoad_AD@channel stored from wreg
  4293  0BB5  0020               	movlb	0	; select bank0
  4294  0BB6  00A6               	movwf	getLoad_AD@channel
  4295                           
  4296                           ;OverLoad_B1.c: 16: char i = 0, j = 0;
  4297  0BB7  01A8               	clrf	getLoad_AD@i
  4298  0BB8  01A7               	clrf	getLoad_AD@j
  4299                           
  4300                           ;OverLoad_B1.c: 18: if (Load1.ADtoGO == 1) {
  4301  0BB9  0023               	movlb	3	; select bank3
  4302  0BBA  1E20               	btfss	_Load1^(0+384),4
  4303  0BBB  0008               	return
  4304                           
  4305                           ;OverLoad_B1.c: 19: Load1.ADRES = getAD(channel, 0xc0);
  4306  0BBC  30C0               	movlw	192
  4307  0BBD  0020               	movlb	0	; select bank0
  4308  0BBE  00A4               	movwf	??_getLoad_AD
  4309  0BBF  0824               	movf	??_getLoad_AD,w
  4310  0BC0  00A0               	movwf	getAD@adcon1
  4311  0BC1  0826               	movf	getLoad_AD@channel,w
  4312  0BC2  3190  2072  318B   	fcall	_getAD
  4313  0BC5  0020               	movlb	0	; select bank0
  4314  0BC6  0821               	movf	?_getAD+1,w
  4315  0BC7  0023               	movlb	3	; select bank3
  4316  0BC8  01D3               	clrf	((_Load1+1)^(0+384)+50)
  4317  0BC9  07D3               	addwf	((_Load1+1)^(0+384)+50),f
  4318  0BCA  0020               	movlb	0	; select bank0
  4319  0BCB  0820               	movf	?_getAD,w
  4320  0BCC  0023               	movlb	3	; select bank3
  4321  0BCD  01D2               	clrf	(_Load1^(0+384)+50)
  4322  0BCE  07D2               	addwf	(_Load1^(0+384)+50),f
  4323                           
  4324                           ;OverLoad_B1.c: 20: for (i = 0; i < 5; i++) {
  4325  0BCF  0020               	movlb	0	; select bank0
  4326  0BD0  01A8               	clrf	getLoad_AD@i
  4327  0BD1  3005               	movlw	5
  4328  0BD2  0228               	subwf	getLoad_AD@i,w
  4329  0BD3  1803               	btfsc	3,0
  4330  0BD4  2C00               	goto	l7705
  4331  0BD5                     l7695:	
  4332                           
  4333                           ;OverLoad_B1.c: 21: if (Load1.AH[i] < Load1.ADRES) {
  4334  0BD5  3528               	lslf	getLoad_AD@i,w
  4335  0BD6  3EA8               	addlw	(_Load1+8)& (0+255)
  4336  0BD7  0086               	movwf	6
  4337  0BD8  3001               	movlw	1	; select bank3/4
  4338  0BD9  0087               	movwf	7
  4339  0BDA  3F40               	moviw [0]fsr1
  4340  0BDB  00A4               	movwf	??_getLoad_AD
  4341  0BDC  3F41               	moviw [1]fsr1
  4342  0BDD  00A5               	movwf	??_getLoad_AD+1
  4343  0BDE  0023               	movlb	3	; select bank3
  4344  0BDF  0853               	movf	((_Load1+1)^(0+384)+50),w
  4345  0BE0  0020               	movlb	0	; select bank0
  4346  0BE1  0225               	subwf	??_getLoad_AD+1,w
  4347  0BE2  1D03               	skipz
  4348  0BE3  2BE8               	goto	u7485
  4349  0BE4  0023               	movlb	3	; select bank3
  4350  0BE5  0852               	movf	(_Load1^(0+384)+50),w
  4351  0BE6  0020               	movlb	0	; select bank0
  4352  0BE7  0224               	subwf	??_getLoad_AD,w
  4353  0BE8                     u7485:	
  4354  0BE8  1803               	skipnc
  4355  0BE9  2BF8               	goto	l7701
  4356                           
  4357                           ;OverLoad_B1.c: 22: Load1.AH[i] = Load1.ADRES;
  4358  0BEA  3528               	lslf	getLoad_AD@i,w
  4359  0BEB  3EA8               	addlw	(_Load1+8)& (0+255)
  4360  0BEC  0086               	movwf	6
  4361  0BED  3001               	movlw	1	; select bank3/4
  4362  0BEE  0087               	movwf	7
  4363  0BEF  0023               	movlb	3	; select bank3
  4364  0BF0  0852               	movf	(_Load1^(0+384)+50),w
  4365  0BF1  3FC0               	movwi [0]fsr1
  4366  0BF2  0853               	movf	((_Load1+1)^(0+384)+50),w
  4367  0BF3  3FC1               	movwi [1]fsr1
  4368                           
  4369                           ;OverLoad_B1.c: 23: j = 1;
  4370  0BF4  0020               	movlb	0	; select bank0
  4371  0BF5  01A7               	clrf	getLoad_AD@j
  4372  0BF6  0AA7               	incf	getLoad_AD@j,f
  4373                           
  4374                           ;OverLoad_B1.c: 24: break;
  4375  0BF7  2C00               	goto	l7705
  4376  0BF8                     l7701:	
  4377  0BF8  3001               	movlw	1
  4378  0BF9  00A4               	movwf	??_getLoad_AD
  4379  0BFA  0824               	movf	??_getLoad_AD,w
  4380  0BFB  07A8               	addwf	getLoad_AD@i,f
  4381  0BFC  3005               	movlw	5
  4382  0BFD  0228               	subwf	getLoad_AD@i,w
  4383  0BFE  1C03               	skipc
  4384  0BFF  2BD5               	goto	l7695
  4385  0C00                     l7705:	
  4386                           
  4387                           ;OverLoad_B1.c: 25: }
  4388                           ;OverLoad_B1.c: 26: }
  4389                           ;OverLoad_B1.c: 27: if (j == 0) {
  4390  0C00  08A7               	movf	getLoad_AD@j,f
  4391  0C01  1D03               	skipz
  4392  0C02  0008               	return
  4393                           
  4394                           ;OverLoad_B1.c: 28: for (i = 0; i < 5; i++) {
  4395  0C03  01A8               	clrf	getLoad_AD@i
  4396  0C04                     L1:	
  4397  0C04  3005               	movlw	5
  4398  0C05  0228               	subwf	getLoad_AD@i,w
  4399  0C06  1803               	btfsc	3,0
  4400  0C07  0008               	return
  4401                           
  4402                           ;OverLoad_B1.c: 29: if (Load1.AL[i] > Load1.ADRES) {
  4403  0C08  3528               	lslf	getLoad_AD@i,w
  4404  0C09  3EBA               	addlw	(_Load1+26)& (0+255)
  4405  0C0A  0086               	movwf	6
  4406  0C0B  3001               	movlw	1	; select bank3/4
  4407  0C0C  0087               	movwf	7
  4408  0C0D  3F40               	moviw [0]fsr1
  4409  0C0E  00A4               	movwf	??_getLoad_AD
  4410  0C0F  3F41               	moviw [1]fsr1
  4411  0C10  00A5               	movwf	??_getLoad_AD+1
  4412  0C11  0825               	movf	??_getLoad_AD+1,w
  4413  0C12  0023               	movlb	3	; select bank3
  4414  0C13  0253               	subwf	((_Load1+1)^(0+384)+50),w
  4415  0C14  1D03               	skipz
  4416  0C15  2C1A               	goto	u7525
  4417  0C16  0020               	movlb	0	; select bank0
  4418  0C17  0824               	movf	??_getLoad_AD,w
  4419  0C18  0023               	movlb	3	; select bank3
  4420  0C19  0252               	subwf	(_Load1^(0+384)+50),w
  4421  0C1A                     u7525:	
  4422  0C1A  1803               	skipnc
  4423  0C1B  2C28               	goto	l7717
  4424                           
  4425                           ;OverLoad_B1.c: 30: Load1.AL[i] = Load1.ADRES;
  4426  0C1C  0020               	movlb	0	; select bank0
  4427  0C1D  3528               	lslf	getLoad_AD@i,w
  4428  0C1E  3EBA               	addlw	(_Load1+26)& (0+255)
  4429  0C1F  0086               	movwf	6
  4430  0C20  3001               	movlw	1	; select bank3/4
  4431  0C21  0087               	movwf	7
  4432  0C22  0023               	movlb	3	; select bank3
  4433  0C23  0852               	movf	(_Load1^(0+384)+50),w
  4434  0C24  3FC0               	movwi [0]fsr1
  4435  0C25  0853               	movf	((_Load1+1)^(0+384)+50),w
  4436  0C26  3FC1               	movwi [1]fsr1
  4437                           
  4438                           ;OverLoad_B1.c: 31: break;
  4439  0C27  0008               	return
  4440  0C28                     l7717:	
  4441  0C28  3001               	movlw	1
  4442  0C29  0020               	movlb	0	; select bank0
  4443  0C2A  00A4               	movwf	??_getLoad_AD
  4444  0C2B  0824               	movf	??_getLoad_AD,w
  4445  0C2C  07A8               	addwf	getLoad_AD@i,f
  4446  0C2D  2C04               	goto	L1
  4447  0C2E                     __end_of_getLoad_AD:	
  4448                           
  4449                           	psect	text5
  4450  1072                     __ptext5:	
  4451 ;; *************** function _getAD *****************
  4452 ;; Defined at:
  4453 ;;		line 346 in file "../src/MCU_B1.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  adcon0          1    wreg     unsigned char 
  4456 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  2    0[BANK0 ] int 
  4461 ;; Registers used:
  4462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4468 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;Total ram usage:        4 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    6
  4475 ;; This function calls:
  4476 ;;		_Timeout_Counter
  4477 ;;		_set_TimeoutCleared
  4478 ;; This function is called by:
  4479 ;;		_getLoad_AD
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           
  4484                           ;psect for function _getAD
  4485  1072                     _getAD:	
  4486                           
  4487                           ;incstack = 0
  4488                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4489                           ;getAD@adcon0 stored from wreg
  4490  1072  0020               	movlb	0	; select bank0
  4491  1073  00A3               	movwf	getAD@adcon0
  4492                           
  4493                           ;MCU_B1.c: 347: ADCON0 = adcon0;
  4494  1074  0823               	movf	getAD@adcon0,w
  4495  1075  0021               	movlb	1	; select bank1
  4496  1076  009D               	movwf	29	;volatile
  4497                           
  4498                           ;MCU_B1.c: 348: ADCON1 = adcon1;
  4499  1077  0020               	movlb	0	; select bank0
  4500  1078  0820               	movf	getAD@adcon1,w
  4501  1079  0021               	movlb	1	; select bank1
  4502  107A  009E               	movwf	30	;volatile
  4503                           
  4504                           ;MCU_B1.c: 349: GO_nDONE = 1;
  4505  107B  149D               	bsf	29,1	;volatile
  4506                           
  4507                           ;MCU_B1.c: 350: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4508  107C  2880               	goto	l7227
  4509  107D                     l7225:	
  4510                           
  4511                           ;MCU_B1.c: 351: Timeout_Counter();
  4512  107D  319E  2695  3190   	fcall	_Timeout_Counter
  4513  1080                     l7227:	
  4514  1080  0021               	movlb	1	; select bank1
  4515  1081  1C9D               	btfss	29,1	;volatile
  4516  1082  2885               	goto	l7231
  4517  1083  1D2F               	btfss	(_myMain^(0+128)+15),2
  4518  1084  287D               	goto	l7225
  4519  1085                     l7231:	
  4520                           
  4521                           ;MCU_B1.c: 352: };
  4522                           ;MCU_B1.c: 353: set_TimeoutCleared();
  4523  1085  319B  239B         	fcall	_set_TimeoutCleared
  4524                           
  4525                           ;MCU_B1.c: 354: return ((ADRESH*256)+ADRESL);
  4526  1087  0021               	movlb	1	; select bank1
  4527  1088  081C               	movf	28,w	;volatile
  4528  1089  0020               	movlb	0	; select bank0
  4529  108A  01A1               	clrf	?_getAD+1
  4530  108B  07A1               	addwf	?_getAD+1,f
  4531  108C  0021               	movlb	1	; select bank1
  4532  108D  081B               	movf	27,w	;volatile
  4533  108E  0020               	movlb	0	; select bank0
  4534  108F  01A0               	clrf	?_getAD
  4535  1090  07A0               	addwf	?_getAD,f
  4536  1091  0008               	return
  4537  1092                     __end_of_getAD:	
  4538                           
  4539                           	psect	text6
  4540  1BFC                     __ptext6:	
  4541 ;; *************** function _Switch_Main *****************
  4542 ;; Defined at:
  4543 ;;		line 65 in file "../src/Switch_B1.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;		None
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;		None
  4548 ;; Return value:  Size  Location     Type
  4549 ;;		None               void
  4550 ;; Registers used:
  4551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4561 ;;Total ram usage:        0 bytes
  4562 ;; Hardware stack levels used:    1
  4563 ;; Hardware stack levels required when called:   11
  4564 ;; This function calls:
  4565 ;;		_setSw_Main
  4566 ;; This function is called by:
  4567 ;;		_main
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           
  4572                           ;psect for function _Switch_Main
  4573  1BFC                     _Switch_Main:	
  4574                           
  4575                           ;Switch_B1.c: 67: setSw_Main(1);
  4576                           
  4577                           ;incstack = 0
  4578                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4579  1BFC  3001               	movlw	1
  4580  1BFD  3183  2380  319B   	fcall	_setSw_Main
  4581                           
  4582                           ;Switch_B1.c: 71: setSw_Main(2);
  4583  1C00  3002               	movlw	2
  4584  1C01  3183  2380         	fcall	_setSw_Main
  4585  1C03  0008               	return
  4586  1C04                     __end_of_Switch_Main:	
  4587                           
  4588                           	psect	text7
  4589  0380                     __ptext7:	
  4590 ;; *************** function _setSw_Main *****************
  4591 ;; Defined at:
  4592 ;;		line 115 in file "../src/Switch_B1.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;  sw              1    wreg     unsigned char 
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;  sw              1   73[BANK0 ] unsigned char 
  4597 ;; Return value:  Size  Location     Type
  4598 ;;		None               void
  4599 ;; Registers used:
  4600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4607 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;Total ram usage:        5 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:   10
  4613 ;; This function calls:
  4614 ;;		_SwPointSelect
  4615 ;;		_Sw_DimmerAdjFunc
  4616 ;;		_Sw_DimmerOffFunc
  4617 ;;		_Sw_DimmerOnFunc
  4618 ;;		_setBuz
  4619 ;;		_setRF_Learn
  4620 ;; This function is called by:
  4621 ;;		_Switch_Main
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           
  4626                           ;psect for function _setSw_Main
  4627  0380                     _setSw_Main:	
  4628                           
  4629                           ;incstack = 0
  4630                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4631                           ;setSw_Main@sw stored from wreg
  4632  0380  0020               	movlb	0	; select bank0
  4633  0381  00E9               	movwf	setSw_Main@sw
  4634                           
  4635                           ;Switch_B1.c: 116: SwPointSelect(sw);
  4636  0382  0869               	movf	setSw_Main@sw,w
  4637  0383  319D  25FC  3183   	fcall	_SwPointSelect
  4638                           
  4639                           ;Switch_B1.c: 117: if (Sw->Enable == 1) {
  4640  0386  0020               	movlb	0	; select bank0
  4641  0387  086F               	movf	_Sw,w
  4642  0388  0086               	movwf	6
  4643  0389  3001               	movlw	1	; select bank2/3
  4644  038A  0087               	movwf	7
  4645  038B  1C01               	btfss	1,0
  4646  038C  0008               	return
  4647                           
  4648                           ;Switch_B1.c: 129: if (sw == 1) {
  4649  038D  0869               	movf	setSw_Main@sw,w
  4650  038E  3A01               	xorlw	1
  4651  038F  1D03               	skipz
  4652  0390  2B9D               	goto	l7385
  4653                           
  4654                           ;Switch_B1.c: 130: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  4655  0391  01E7               	clrf	_setSw_Main$5623
  4656  0392  0AE7               	incf	_setSw_Main$5623,f
  4657  0393  1F0C               	btfss	12,6	;volatile
  4658  0394  1A0C               	btfsc	12,4	;volatile
  4659  0395  2B97               	goto	l7383
  4660  0396  01E7               	clrf	_setSw_Main$5623
  4661  0397                     l7383:	
  4662  0397  086F               	movf	_Sw,w
  4663  0398  0086               	movwf	6
  4664  0399  3001               	movlw	1	; select bank2/3
  4665  039A  0087               	movwf	7
  4666  039B  0867               	movf	_setSw_Main$5623,w
  4667  039C  2BAC               	goto	L2
  4668  039D                     l7385:	
  4669                           ;Switch_B1.c: 131: } else if (sw == 2) {
  4670                           
  4671  039D  0869               	movf	setSw_Main@sw,w
  4672  039E  3A02               	xorlw	2
  4673  039F  1D03               	skipz
  4674  03A0  2BAF               	goto	l7395
  4675                           
  4676                           ;Switch_B1.c: 132: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  4677  03A1  01E8               	clrf	_setSw_Main$5624
  4678  03A2  0AE8               	incf	_setSw_Main$5624,f
  4679  03A3  1C0C               	btfss	12,0	;volatile
  4680  03A4  188D               	btfsc	13,1	;volatile
  4681  03A5  2BA7               	goto	l7393
  4682  03A6  01E8               	clrf	_setSw_Main$5624
  4683  03A7                     l7393:	
  4684  03A7  086F               	movf	_Sw,w
  4685  03A8  0086               	movwf	6
  4686  03A9  3001               	movlw	1	; select bank2/3
  4687  03AA  0087               	movwf	7
  4688  03AB  0868               	movf	_setSw_Main$5624,w
  4689  03AC                     L2:	
  4690  03AC  1081               	bcf	1,1
  4691  03AD  1D03               	skipz
  4692  03AE  1481               	bsf	1,1
  4693  03AF                     l7395:	
  4694                           
  4695                           ;Switch_B1.c: 133: }
  4696                           ;Switch_B1.c: 139: if (Sw->Touch == 1) {
  4697  03AF  086F               	movf	_Sw,w
  4698  03B0  0086               	movwf	6
  4699  03B1  3001               	movlw	1	; select bank2/3
  4700  03B2  0087               	movwf	7
  4701  03B3  1C81               	btfss	1,1
  4702  03B4  2C79               	goto	l7443
  4703                           
  4704                           ;Switch_B1.c: 140: if (Sw->Debounce == 0) {
  4705  03B5  086F               	movf	_Sw,w
  4706  03B6  0086               	movwf	6
  4707  03B7  3001               	movlw	1	; select bank2/3
  4708  03B8  0087               	movwf	7
  4709  03B9  1901               	btfsc	1,2
  4710  03BA  2BDC               	goto	l7409
  4711                           
  4712                           ;Switch_B1.c: 141: Sw->DebounceTime++;
  4713  03BB  3001               	movlw	1
  4714  03BC  00E5               	movwf	??_setSw_Main
  4715  03BD  086F               	movf	_Sw,w
  4716  03BE  3E02               	addlw	2
  4717  03BF  0086               	movwf	6
  4718  03C0  3001               	movlw	1	; select bank2/3
  4719  03C1  0087               	movwf	7
  4720  03C2  0865               	movf	??_setSw_Main,w
  4721  03C3  0781               	addwf	1,f
  4722                           
  4723                           ;Switch_B1.c: 142: if (Sw->DebounceTime >= 5) {
  4724  03C4  086F               	movf	_Sw,w
  4725  03C5  3E02               	addlw	2
  4726  03C6  0086               	movwf	6
  4727  03C7  3001               	movlw	1	; select bank2/3
  4728  03C8  0087               	movwf	7
  4729  03C9  3005               	movlw	5
  4730  03CA  0201               	subwf	1,w
  4731  03CB  1C03               	skipc
  4732  03CC  0008               	return
  4733                           
  4734                           ;Switch_B1.c: 143: Sw->DebounceTime = 0;
  4735  03CD  086F               	movf	_Sw,w
  4736  03CE  3E02               	addlw	2
  4737  03CF  0086               	movwf	6
  4738  03D0  3001               	movlw	1	; select bank2/3
  4739  03D1  0087               	movwf	7
  4740  03D2  0181               	clrf	1
  4741                           
  4742                           ;Switch_B1.c: 144: Sw->Debounce = 1;
  4743  03D3  086F               	movf	_Sw,w
  4744  03D4  0086               	movwf	6
  4745  03D5  3001               	movlw	1	; select bank2/3
  4746  03D6  0087               	movwf	7
  4747  03D7  1501               	bsf	1,2
  4748                           
  4749                           ;Switch_B1.c: 147: Sw_DimmerOnFunc(sw);
  4750  03D8  0869               	movf	setSw_Main@sw,w
  4751  03D9  318A  22D0         	fcall	_Sw_DimmerOnFunc
  4752                           
  4753                           ;Switch_B1.c: 149: }
  4754                           ;Switch_B1.c: 150: } else {
  4755  03DB  0008               	return
  4756  03DC                     l7409:	
  4757                           
  4758                           ;Switch_B1.c: 151: if (Sw->Hold1 == 0) {
  4759  03DC  0020               	movlb	0	; select bank0
  4760  03DD  086F               	movf	_Sw,w
  4761  03DE  0086               	movwf	6
  4762  03DF  3001               	movlw	1	; select bank2/3
  4763  03E0  0087               	movwf	7
  4764  03E1  1981               	btfsc	1,3
  4765  03E2  2C09               	goto	l7419
  4766                           
  4767                           ;Switch_B1.c: 152: Sw->Hold1Time++;
  4768  03E3  086F               	movf	_Sw,w
  4769  03E4  3E03               	addlw	3
  4770  03E5  0086               	movwf	6
  4771  03E6  3001               	movlw	1	; select bank2/3
  4772  03E7  0087               	movwf	7
  4773  03E8  3001               	movlw	1
  4774  03E9  0781               	addwf	1,f
  4775  03EA  3141               	addfsr 1,1
  4776  03EB  1803               	skipnc
  4777  03EC  0A81               	incf	1,f
  4778                           
  4779                           ;Switch_B1.c: 153: if (Sw->Hold1Time >= 150) {
  4780  03ED  086F               	movf	_Sw,w
  4781  03EE  3E03               	addlw	3
  4782  03EF  0086               	movwf	6
  4783  03F0  3001               	movlw	1	; select bank2/3
  4784  03F1  0087               	movwf	7
  4785  03F2  3F40               	moviw [0]fsr1
  4786  03F3  00E5               	movwf	??_setSw_Main
  4787  03F4  3F41               	moviw [1]fsr1
  4788  03F5  00E6               	movwf	??_setSw_Main+1
  4789  03F6  3000               	movlw	0
  4790  03F7  0266               	subwf	??_setSw_Main+1,w
  4791  03F8  3096               	movlw	150
  4792  03F9  1903               	skipnz
  4793  03FA  0265               	subwf	??_setSw_Main,w
  4794  03FB  1C03               	skipc
  4795  03FC  0008               	return
  4796                           
  4797                           ;Switch_B1.c: 154: Sw->Hold1Time = 0;
  4798  03FD  086F               	movf	_Sw,w
  4799  03FE  3E03               	addlw	3
  4800  03FF  0086               	movwf	6
  4801  0400  3001               	movlw	1	; select bank2/3
  4802  0401  0087               	movwf	7
  4803  0402  3000               	movlw	0
  4804  0403  3FC0               	movwi [0]fsr1
  4805  0404  3FC1               	movwi [1]fsr1
  4806                           
  4807                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  4808  0405  0869               	movf	setSw_Main@sw,w
  4809  0406  3196  2655         	fcall	_Sw_DimmerAdjFunc
  4810                           
  4811                           ;Switch_B1.c: 160: }
  4812                           ;Switch_B1.c: 161: } else {
  4813  0408  0008               	return
  4814  0409                     l7419:	
  4815                           
  4816                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  4817  0409  0020               	movlb	0	; select bank0
  4818  040A  086F               	movf	_Sw,w
  4819  040B  0086               	movwf	6
  4820  040C  3001               	movlw	1	; select bank2/3
  4821  040D  0087               	movwf	7
  4822  040E  1A01               	btfsc	1,4
  4823  040F  2C47               	goto	l7433
  4824                           
  4825                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  4826  0410  086F               	movf	_Sw,w
  4827  0411  3E05               	addlw	5
  4828  0412  0086               	movwf	6
  4829  0413  3001               	movlw	1	; select bank2/3
  4830  0414  0087               	movwf	7
  4831  0415  3001               	movlw	1
  4832  0416  0781               	addwf	1,f
  4833  0417  3141               	addfsr 1,1
  4834  0418  1803               	skipnc
  4835  0419  0A81               	incf	1,f
  4836                           
  4837                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  4838  041A  086F               	movf	_Sw,w
  4839  041B  3E05               	addlw	5
  4840  041C  0086               	movwf	6
  4841  041D  3001               	movlw	1	; select bank2/3
  4842  041E  0087               	movwf	7
  4843  041F  3F40               	moviw [0]fsr1
  4844  0420  00E5               	movwf	??_setSw_Main
  4845  0421  3F41               	moviw [1]fsr1
  4846  0422  00E6               	movwf	??_setSw_Main+1
  4847  0423  3000               	movlw	0
  4848  0424  0266               	subwf	??_setSw_Main+1,w
  4849  0425  3096               	movlw	150
  4850  0426  1903               	skipnz
  4851  0427  0265               	subwf	??_setSw_Main,w
  4852  0428  1C03               	skipc
  4853  0429  0008               	return
  4854                           
  4855                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  4856  042A  086F               	movf	_Sw,w
  4857  042B  3E05               	addlw	5
  4858  042C  0086               	movwf	6
  4859  042D  3001               	movlw	1	; select bank2/3
  4860  042E  0087               	movwf	7
  4861  042F  3000               	movlw	0
  4862  0430  3FC0               	movwi [0]fsr1
  4863  0431  3FC1               	movwi [1]fsr1
  4864                           
  4865                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  4866  0432  086F               	movf	_Sw,w
  4867  0433  0086               	movwf	6
  4868  0434  3001               	movlw	1	; select bank2/3
  4869  0435  0087               	movwf	7
  4870  0436  1601               	bsf	1,4
  4871                           
  4872                           ;Switch_B1.c: 169: setRF_Learn(1);
  4873  0437  3001               	movlw	1
  4874  0438  319B  23F4  3183   	fcall	_setRF_Learn
  4875                           
  4876                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  4877  043B  0021               	movlb	1	; select bank1
  4878  043C  1FA0               	btfss	_myMain^(0+128),7
  4879  043D  0008               	return
  4880                           
  4881                           ;Switch_B1.c: 172: setBuz(2, 100);
  4882  043E  3064               	movlw	100
  4883  043F  0020               	movlb	0	; select bank0
  4884  0440  00A9               	movwf	setBuz@time
  4885  0441  3000               	movlw	0
  4886  0442  00AA               	movwf	setBuz@time+1
  4887  0443  3002               	movlw	2
  4888  0444  3197  274C         	fcall	_setBuz
  4889                           
  4890                           ;Switch_B1.c: 173: }
  4891                           ;Switch_B1.c: 175: }
  4892                           ;Switch_B1.c: 176: } else {
  4893  0446  0008               	return
  4894  0447                     l7433:	
  4895                           
  4896                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  4897  0447  0020               	movlb	0	; select bank0
  4898  0448  086F               	movf	_Sw,w
  4899  0449  0086               	movwf	6
  4900  044A  3001               	movlw	1	; select bank2/3
  4901  044B  0087               	movwf	7
  4902  044C  1A81               	btfsc	1,5
  4903  044D  0008               	return
  4904                           
  4905                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  4906  044E  086F               	movf	_Sw,w
  4907  044F  3E07               	addlw	7
  4908  0450  0086               	movwf	6
  4909  0451  3001               	movlw	1	; select bank2/3
  4910  0452  0087               	movwf	7
  4911  0453  3001               	movlw	1
  4912  0454  0781               	addwf	1,f
  4913  0455  3141               	addfsr 1,1
  4914  0456  1803               	skipnc
  4915  0457  0A81               	incf	1,f
  4916                           
  4917                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  4918  0458  086F               	movf	_Sw,w
  4919  0459  3E07               	addlw	7
  4920  045A  0086               	movwf	6
  4921  045B  3001               	movlw	1	; select bank2/3
  4922  045C  0087               	movwf	7
  4923  045D  3F40               	moviw [0]fsr1
  4924  045E  00E5               	movwf	??_setSw_Main
  4925  045F  3F41               	moviw [1]fsr1
  4926  0460  00E6               	movwf	??_setSw_Main+1
  4927  0461  3001               	movlw	1
  4928  0462  0266               	subwf	??_setSw_Main+1,w
  4929  0463  302C               	movlw	44
  4930  0464  1903               	skipnz
  4931  0465  0265               	subwf	??_setSw_Main,w
  4932  0466  1C03               	skipc
  4933  0467  0008               	return
  4934                           
  4935                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  4936  0468  086F               	movf	_Sw,w
  4937  0469  3E07               	addlw	7
  4938  046A  0086               	movwf	6
  4939  046B  3001               	movlw	1	; select bank2/3
  4940  046C  0087               	movwf	7
  4941  046D  3000               	movlw	0
  4942  046E  3FC0               	movwi [0]fsr1
  4943  046F  3FC1               	movwi [1]fsr1
  4944                           
  4945                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  4946  0470  086F               	movf	_Sw,w
  4947  0471  0086               	movwf	6
  4948  0472  3001               	movlw	1	; select bank2/3
  4949  0473  0087               	movwf	7
  4950  0474  1681               	bsf	1,5
  4951                           
  4952                           ;Switch_B1.c: 184: setRF_Learn(0);
  4953  0475  3000               	movlw	0
  4954  0476  319B  23F4         	fcall	_setRF_Learn
  4955                           
  4956                           ;Switch_B1.c: 187: }
  4957                           ;Switch_B1.c: 188: }
  4958                           ;Switch_B1.c: 189: }
  4959                           ;Switch_B1.c: 190: }
  4960                           ;Switch_B1.c: 191: }
  4961                           ;Switch_B1.c: 192: } else {
  4962  0478  0008               	return
  4963  0479                     l7443:	
  4964                           
  4965                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  4966  0479  0020               	movlb	0	; select bank0
  4967  047A  086F               	movf	_Sw,w
  4968  047B  0086               	movwf	6
  4969  047C  3001               	movlw	1	; select bank2/3
  4970  047D  0087               	movwf	7
  4971  047E  1D01               	btfss	1,2
  4972  047F  0008               	return
  4973                           
  4974                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  4975  0480  3001               	movlw	1
  4976  0481  00E5               	movwf	??_setSw_Main
  4977  0482  086F               	movf	_Sw,w
  4978  0483  3E02               	addlw	2
  4979  0484  0086               	movwf	6
  4980  0485  3001               	movlw	1	; select bank2/3
  4981  0486  0087               	movwf	7
  4982  0487  0865               	movf	??_setSw_Main,w
  4983  0488  0781               	addwf	1,f
  4984                           
  4985                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  4986  0489  086F               	movf	_Sw,w
  4987  048A  3E02               	addlw	2
  4988  048B  0086               	movwf	6
  4989  048C  3001               	movlw	1	; select bank2/3
  4990  048D  0087               	movwf	7
  4991  048E  3005               	movlw	5
  4992  048F  0201               	subwf	1,w
  4993  0490  1C03               	skipc
  4994  0491  0008               	return
  4995                           
  4996                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  4997  0492  086F               	movf	_Sw,w
  4998  0493  3E02               	addlw	2
  4999  0494  0086               	movwf	6
  5000  0495  3001               	movlw	1	; select bank2/3
  5001  0496  0087               	movwf	7
  5002  0497  0181               	clrf	1
  5003                           
  5004                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  5005  0498  086F               	movf	_Sw,w
  5006  0499  0086               	movwf	6
  5007  049A  3001               	movlw	1	; select bank2/3
  5008  049B  0087               	movwf	7
  5009  049C  1101               	bcf	1,2
  5010                           
  5011                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  5012  049D  086F               	movf	_Sw,w
  5013  049E  3E03               	addlw	3
  5014  049F  0086               	movwf	6
  5015  04A0  3001               	movlw	1	; select bank2/3
  5016  04A1  0087               	movwf	7
  5017  04A2  3000               	movlw	0
  5018  04A3  3FC0               	movwi [0]fsr1
  5019  04A4  3FC1               	movwi [1]fsr1
  5020                           
  5021                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  5022  04A5  086F               	movf	_Sw,w
  5023  04A6  0086               	movwf	6
  5024  04A7  3001               	movlw	1	; select bank2/3
  5025  04A8  0087               	movwf	7
  5026  04A9  1181               	bcf	1,3
  5027                           
  5028                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  5029  04AA  086F               	movf	_Sw,w
  5030  04AB  3E05               	addlw	5
  5031  04AC  0086               	movwf	6
  5032  04AD  3001               	movlw	1	; select bank2/3
  5033  04AE  0087               	movwf	7
  5034  04AF  3000               	movlw	0
  5035  04B0  3FC0               	movwi [0]fsr1
  5036  04B1  3FC1               	movwi [1]fsr1
  5037                           
  5038                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  5039  04B2  086F               	movf	_Sw,w
  5040  04B3  0086               	movwf	6
  5041  04B4  3001               	movlw	1	; select bank2/3
  5042  04B5  0087               	movwf	7
  5043  04B6  1201               	bcf	1,4
  5044                           
  5045                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  5046  04B7  086F               	movf	_Sw,w
  5047  04B8  3E07               	addlw	7
  5048  04B9  0086               	movwf	6
  5049  04BA  3001               	movlw	1	; select bank2/3
  5050  04BB  0087               	movwf	7
  5051  04BC  3000               	movlw	0
  5052  04BD  3FC0               	movwi [0]fsr1
  5053  04BE  3FC1               	movwi [1]fsr1
  5054                           
  5055                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  5056  04BF  086F               	movf	_Sw,w
  5057  04C0  0086               	movwf	6
  5058  04C1  3001               	movlw	1	; select bank2/3
  5059  04C2  0087               	movwf	7
  5060  04C3  1281               	bcf	1,5
  5061                           
  5062                           ;Switch_B1.c: 205: Sw_DimmerOffFunc(sw);
  5063  04C4  0869               	movf	setSw_Main@sw,w
  5064  04C5  318A  2261  3183   	fcall	_Sw_DimmerOffFunc
  5065                           
  5066                           ;Switch_B1.c: 208: setRF_Learn(0);
  5067  04C8  3000               	movlw	0
  5068  04C9  319B  23F4         	fcall	_setRF_Learn
  5069  04CB  0008               	return
  5070  04CC                     __end_of_setSw_Main:	
  5071                           
  5072                           	psect	text8
  5073  1BF4                     __ptext8:	
  5074 ;; *************** function _setRF_Learn *****************
  5075 ;; Defined at:
  5076 ;;		line 23 in file "../src/RF_Control_B1.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;  command         1    wreg     unsigned char 
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;  command         1    0[BANK0 ] unsigned char 
  5081 ;; Return value:  Size  Location     Type
  5082 ;;		None               void
  5083 ;; Registers used:
  5084 ;;		wreg
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5093 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5094 ;;Total ram usage:        1 bytes
  5095 ;; Hardware stack levels used:    1
  5096 ;; Hardware stack levels required when called:    5
  5097 ;; This function calls:
  5098 ;;		Nothing
  5099 ;; This function is called by:
  5100 ;;		_setSw_Main
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           
  5105                           ;psect for function _setRF_Learn
  5106  1BF4                     _setRF_Learn:	
  5107                           
  5108                           ;incstack = 0
  5109                           ; Regs used in _setRF_Learn: [wreg]
  5110                           ;setRF_Learn@command stored from wreg
  5111  1BF4  0020               	movlb	0	; select bank0
  5112  1BF5  00A0               	movwf	setRF_Learn@command
  5113                           
  5114                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  5115  1BF6  0820               	movf	setRF_Learn@command,w
  5116  1BF7  0021               	movlb	1	; select bank1
  5117  1BF8  1357               	bcf	_RF1^(0+128),6
  5118  1BF9  1D03               	skipz
  5119  1BFA  1757               	bsf	_RF1^(0+128),6
  5120  1BFB  0008               	return
  5121  1BFC                     __end_of_setRF_Learn:	
  5122                           
  5123                           	psect	text9
  5124  0AD0                     __ptext9:	
  5125 ;; *************** function _Sw_DimmerOnFunc *****************
  5126 ;; Defined at:
  5127 ;;		line 217 in file "../src/Switch_B1.c"
  5128 ;; Parameters:    Size  Location     Type
  5129 ;;  sw              1    wreg     unsigned char 
  5130 ;; Auto vars:     Size  Location     Type
  5131 ;;  sw              1   67[BANK0 ] unsigned char 
  5132 ;;  Idle            1   66[BANK0 ] unsigned char 
  5133 ;; Return value:  Size  Location     Type
  5134 ;;		None               void
  5135 ;; Registers used:
  5136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5143 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5145 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5146 ;;Total ram usage:        2 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; Hardware stack levels required when called:    9
  5149 ;; This function calls:
  5150 ;;		_setBuz
  5151 ;;		_setDimmerLights_Switch
  5152 ;;		_setDimmerLights_Trigger
  5153 ;;		_setRFSW_Status
  5154 ;;		_setRF_DimmerLights
  5155 ;;		_setTxData
  5156 ;; This function is called by:
  5157 ;;		_setSw_Main
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           
  5162                           ;psect for function _Sw_DimmerOnFunc
  5163  0AD0                     _Sw_DimmerOnFunc:	
  5164                           
  5165                           ;incstack = 0
  5166                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5167                           ;Sw_DimmerOnFunc@sw stored from wreg
  5168  0AD0  0020               	movlb	0	; select bank0
  5169  0AD1  00E3               	movwf	Sw_DimmerOnFunc@sw
  5170                           
  5171                           ;Switch_B1.c: 218: char Idle = 1;
  5172  0AD2  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5173  0AD3  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5174                           
  5175                           ;Switch_B1.c: 232: if (sw == 1) {
  5176  0AD4  0863               	movf	Sw_DimmerOnFunc@sw,w
  5177  0AD5  3A01               	xorlw	1
  5178  0AD6  1D03               	skipz
  5179  0AD7  2AE2               	goto	l6769
  5180                           
  5181                           ;Switch_B1.c: 233: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  5182  0AD8  1003               	clrc
  5183  0AD9  0022               	movlb	2	; select bank2
  5184  0ADA  1DBF               	btfss	(_DimmerLights2^(0+256)+8),3
  5185  0ADB  1403               	setc
  5186  0ADC  3000               	movlw	0
  5187  0ADD  1803               	btfsc	3,0
  5188  0ADE  3001               	movlw	1
  5189  0ADF  0020               	movlb	0	; select bank0
  5190  0AE0  00E2               	movwf	Sw_DimmerOnFunc@Idle
  5191                           
  5192                           ;Switch_B1.c: 234: } else if (sw == 2) {
  5193  0AE1  2AEF               	goto	l6773
  5194  0AE2                     l6769:	
  5195  0AE2  0863               	movf	Sw_DimmerOnFunc@sw,w
  5196  0AE3  3A02               	xorlw	2
  5197  0AE4  1D03               	skipz
  5198  0AE5  2AEF               	goto	l6773
  5199                           
  5200                           ;Switch_B1.c: 235: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  5201  0AE6  1003               	clrc
  5202  0AE7  0022               	movlb	2	; select bank2
  5203  0AE8  1DB0               	btfss	(_DimmerLights1^(0+256)+8),3
  5204  0AE9  1403               	setc
  5205  0AEA  3000               	movlw	0
  5206  0AEB  1803               	btfsc	3,0
  5207  0AEC  3001               	movlw	1
  5208  0AED  0020               	movlb	0	; select bank0
  5209  0AEE  00E2               	movwf	Sw_DimmerOnFunc@Idle
  5210  0AEF                     l6773:	
  5211                           
  5212                           ;Switch_B1.c: 236: }
  5213                           ;Switch_B1.c: 239: if (Idle == 1) {
  5214  0AEF  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5215  0AF0  3A01               	xorlw	1
  5216  0AF1  1D03               	skipz
  5217  0AF2  0008               	return
  5218                           
  5219                           ;Switch_B1.c: 240: Sw->Flag = 1;
  5220  0AF3  086F               	movf	_Sw,w
  5221  0AF4  0086               	movwf	6
  5222  0AF5  3001               	movlw	1	; select bank2/3
  5223  0AF6  0087               	movwf	7
  5224  0AF7  1781               	bsf	1,7
  5225                           
  5226                           ;Switch_B1.c: 241: setBuz(1, 100);
  5227  0AF8  3064               	movlw	100
  5228  0AF9  00A9               	movwf	setBuz@time
  5229  0AFA  3000               	movlw	0
  5230  0AFB  00AA               	movwf	setBuz@time+1
  5231  0AFC  3001               	movlw	1
  5232  0AFD  3197  274C  318A   	fcall	_setBuz
  5233                           
  5234                           ;Switch_B1.c: 242: if (Sw->Status == 0) {
  5235  0B00  0020               	movlb	0	; select bank0
  5236  0B01  086F               	movf	_Sw,w
  5237  0B02  0086               	movwf	6
  5238  0B03  3001               	movlw	1	; select bank2/3
  5239  0B04  0087               	movwf	7
  5240  0B05  1B01               	btfsc	1,6
  5241  0B06  2B30               	goto	l6793
  5242                           
  5243                           ;Switch_B1.c: 243: Sw->Status = 1;
  5244  0B07  086F               	movf	_Sw,w
  5245  0B08  0086               	movwf	6
  5246  0B09  3001               	movlw	1	; select bank2/3
  5247  0B0A  0087               	movwf	7
  5248  0B0B  1701               	bsf	1,6
  5249                           
  5250                           ;Switch_B1.c: 244: setRFSW_Status(sw, 1);
  5251  0B0C  01A2               	clrf	setRFSW_Status@command
  5252  0B0D  0AA2               	incf	setRFSW_Status@command,f
  5253  0B0E  0863               	movf	Sw_DimmerOnFunc@sw,w
  5254  0B0F  319C  24A9  318A   	fcall	_setRFSW_Status
  5255                           
  5256                           ;Switch_B1.c: 246: setDimmerLights_Trigger(sw, 1);
  5257  0B12  0020               	movlb	0	; select bank0
  5258  0B13  01A2               	clrf	setDimmerLights_Trigger@command
  5259  0B14  0AA2               	incf	setDimmerLights_Trigger@command,f
  5260  0B15  0863               	movf	Sw_DimmerOnFunc@sw,w
  5261  0B16  319D  2504  318A   	fcall	_setDimmerLights_Trigger
  5262                           
  5263                           ;Switch_B1.c: 247: setDimmerLights_Switch(sw, 1);
  5264  0B19  0020               	movlb	0	; select bank0
  5265  0B1A  01A2               	clrf	setDimmerLights_Switch@command
  5266  0B1B  0AA2               	incf	setDimmerLights_Switch@command,f
  5267  0B1C  0863               	movf	Sw_DimmerOnFunc@sw,w
  5268  0B1D  319C  24F4  318A   	fcall	_setDimmerLights_Switch
  5269                           
  5270                           ;Switch_B1.c: 249: setRF_DimmerLights(sw, Sw->Status);
  5271  0B20  0020               	movlb	0	; select bank0
  5272  0B21  086F               	movf	_Sw,w
  5273  0B22  0086               	movwf	6
  5274  0B23  3001               	movlw	1	; select bank2/3
  5275  0B24  0087               	movwf	7
  5276  0B25  3000               	movlw	0
  5277  0B26  1B01               	btfsc	1,6
  5278  0B27  3001               	movlw	1
  5279  0B28  00DD               	movwf	setRF_DimmerLights@on
  5280  0B29  0863               	movf	Sw_DimmerOnFunc@sw,w
  5281  0B2A  3189  2186  318A   	fcall	_setRF_DimmerLights
  5282                           
  5283                           ;Switch_B1.c: 250: setTxData();
  5284  0B2D  3186  2689         	fcall	_setTxData
  5285                           
  5286                           ;Switch_B1.c: 252: } else {
  5287  0B2F  0008               	return
  5288  0B30                     l6793:	
  5289                           
  5290                           ;Switch_B1.c: 253: Sw->Status = 0;
  5291  0B30  0020               	movlb	0	; select bank0
  5292  0B31  086F               	movf	_Sw,w
  5293  0B32  0086               	movwf	6
  5294  0B33  3001               	movlw	1	; select bank2/3
  5295  0B34  0087               	movwf	7
  5296  0B35  1301               	bcf	1,6
  5297                           
  5298                           ;Switch_B1.c: 254: setRFSW_Status(sw, Sw->Status);
  5299  0B36  086F               	movf	_Sw,w
  5300  0B37  0086               	movwf	6
  5301  0B38  3001               	movlw	1	; select bank2/3
  5302  0B39  0087               	movwf	7
  5303  0B3A  3000               	movlw	0
  5304  0B3B  1B01               	btfsc	1,6
  5305  0B3C  3001               	movlw	1
  5306  0B3D  00A2               	movwf	setRFSW_Status@command
  5307  0B3E  0863               	movf	Sw_DimmerOnFunc@sw,w
  5308  0B3F  319C  24A9         	fcall	_setRFSW_Status
  5309  0B41  0008               	return
  5310  0B42                     __end_of_Sw_DimmerOnFunc:	
  5311                           
  5312                           	psect	text10
  5313  0A61                     __ptext10:	
  5314 ;; *************** function _Sw_DimmerOffFunc *****************
  5315 ;; Defined at:
  5316 ;;		line 260 in file "../src/Switch_B1.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;  sw              1    wreg     unsigned char 
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;  sw              1   68[BANK0 ] unsigned char 
  5321 ;; Return value:  Size  Location     Type
  5322 ;;		None               void
  5323 ;; Registers used:
  5324 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5334 ;;Total ram usage:        3 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    9
  5337 ;; This function calls:
  5338 ;;		_setDelayOff_GO
  5339 ;;		_setDimmerLights_AdjGo
  5340 ;;		_setDimmerLights_Switch
  5341 ;;		_setDimmerLights_Trigger
  5342 ;;		_setDimmerLights_TriggerAdj
  5343 ;;		_setRF_DimmerLights
  5344 ;;		_setTxData
  5345 ;; This function is called by:
  5346 ;;		_setSw_Main
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           
  5351                           ;psect for function _Sw_DimmerOffFunc
  5352  0A61                     _Sw_DimmerOffFunc:	
  5353                           
  5354                           ;incstack = 0
  5355                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5356                           ;Sw_DimmerOffFunc@sw stored from wreg
  5357  0A61  0020               	movlb	0	; select bank0
  5358  0A62  00E4               	movwf	Sw_DimmerOffFunc@sw
  5359                           
  5360                           ;Switch_B1.c: 261: if (Sw->Flag == 1) {
  5361  0A63  086F               	movf	_Sw,w
  5362  0A64  0086               	movwf	6
  5363  0A65  3001               	movlw	1	; select bank2/3
  5364  0A66  0087               	movwf	7
  5365  0A67  1F81               	btfss	1,7
  5366  0A68  0008               	return
  5367                           
  5368                           ;Switch_B1.c: 262: Sw->Flag = 0;
  5369  0A69  086F               	movf	_Sw,w
  5370  0A6A  0086               	movwf	6
  5371  0A6B  3001               	movlw	1	; select bank2/3
  5372  0A6C  0087               	movwf	7
  5373  0A6D  1381               	bcf	1,7
  5374                           
  5375                           ;Switch_B1.c: 263: if (Sw->Status == 1) {
  5376  0A6E  086F               	movf	_Sw,w
  5377  0A6F  0086               	movwf	6
  5378  0A70  3001               	movlw	1	; select bank2/3
  5379  0A71  0087               	movwf	7
  5380  0A72  1F01               	btfss	1,6
  5381  0A73  2AAC               	goto	l6837
  5382                           
  5383                           ;Switch_B1.c: 264: if (Sw->Adj == 1) {
  5384  0A74  0A6F               	incf	_Sw,w
  5385  0A75  0086               	movwf	6
  5386  0A76  3001               	movlw	1	; select bank2/3
  5387  0A77  0087               	movwf	7
  5388  0A78  1C01               	btfss	1,0
  5389  0A79  0008               	return
  5390                           
  5391                           ;Switch_B1.c: 265: Sw->Adj = 0;
  5392  0A7A  0A6F               	incf	_Sw,w
  5393  0A7B  0086               	movwf	6
  5394  0A7C  3001               	movlw	1	; select bank2/3
  5395  0A7D  0087               	movwf	7
  5396  0A7E  1001               	bcf	1,0
  5397                           
  5398                           ;Switch_B1.c: 266: setDimmerLights_TriggerAdj(sw, 1);
  5399  0A7F  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5400  0A80  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5401  0A81  0864               	movf	Sw_DimmerOffFunc@sw,w
  5402  0A82  319D  2534  318A   	fcall	_setDimmerLights_TriggerAdj
  5403                           
  5404                           ;Switch_B1.c: 267: setDimmerLights_AdjGo(sw, 0);
  5405  0A85  0020               	movlb	0	; select bank0
  5406  0A86  01A2               	clrf	setDimmerLights_AdjGo@command
  5407  0A87  0864               	movf	Sw_DimmerOffFunc@sw,w
  5408  0A88  319D  2524  318A   	fcall	_setDimmerLights_AdjGo
  5409                           
  5410                           ;Switch_B1.c: 269: product->Data[17]=product->Data[26 + sw];
  5411  0A8B  0020               	movlb	0	; select bank0
  5412  0A8C  0864               	movf	Sw_DimmerOffFunc@sw,w
  5413  0A8D  3E1A               	addlw	26
  5414  0A8E  076E               	addwf	_product,w
  5415  0A8F  00E2               	movwf	??_Sw_DimmerOffFunc
  5416  0A90  0862               	movf	??_Sw_DimmerOffFunc,w
  5417  0A91  0086               	movwf	6
  5418  0A92  3002               	movlw	2	; select bank4/5
  5419  0A93  0087               	movwf	7
  5420  0A94  0801               	movf	1,w
  5421  0A95  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5422  0A96  086E               	movf	_product,w
  5423  0A97  3E11               	addlw	17
  5424  0A98  0086               	movwf	6
  5425  0A99  3002               	movlw	2	; select bank4/5
  5426  0A9A  0087               	movwf	7
  5427  0A9B  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5428  0A9C  0081               	movwf	1
  5429                           
  5430                           ;Switch_B1.c: 270: setRF_DimmerLights(sw, Sw->Status);
  5431  0A9D  086F               	movf	_Sw,w
  5432  0A9E  0086               	movwf	6
  5433  0A9F  3001               	movlw	1	; select bank2/3
  5434  0AA0  0087               	movwf	7
  5435  0AA1  3000               	movlw	0
  5436  0AA2  1B01               	btfsc	1,6
  5437  0AA3  3001               	movlw	1
  5438  0AA4  00DD               	movwf	setRF_DimmerLights@on
  5439  0AA5  0864               	movf	Sw_DimmerOffFunc@sw,w
  5440  0AA6  3189  2186  318A   	fcall	_setRF_DimmerLights
  5441                           
  5442                           ;Switch_B1.c: 271: setTxData();
  5443  0AA9  3186  2689         	fcall	_setTxData
  5444                           
  5445                           ;Switch_B1.c: 273: }
  5446                           ;Switch_B1.c: 274: } else {
  5447  0AAB  0008               	return
  5448  0AAC                     l6837:	
  5449                           
  5450                           ;Switch_B1.c: 275: setDimmerLights_Trigger(sw, 1);
  5451  0AAC  0020               	movlb	0	; select bank0
  5452  0AAD  01A2               	clrf	setDimmerLights_Trigger@command
  5453  0AAE  0AA2               	incf	setDimmerLights_Trigger@command,f
  5454  0AAF  0864               	movf	Sw_DimmerOffFunc@sw,w
  5455  0AB0  319D  2504  318A   	fcall	_setDimmerLights_Trigger
  5456                           
  5457                           ;Switch_B1.c: 276: setDimmerLights_Switch(sw, 0);
  5458  0AB3  0020               	movlb	0	; select bank0
  5459  0AB4  01A2               	clrf	setDimmerLights_Switch@command
  5460  0AB5  0864               	movf	Sw_DimmerOffFunc@sw,w
  5461  0AB6  319C  24F4  318A   	fcall	_setDimmerLights_Switch
  5462                           
  5463                           ;Switch_B1.c: 278: setDelayOff_GO(sw, 0, 0);
  5464  0AB9  0020               	movlb	0	; select bank0
  5465  0ABA  01AA               	clrf	setDelayOff_GO@command
  5466  0ABB  01AB               	clrf	setDelayOff_GO@value
  5467  0ABC  0864               	movf	Sw_DimmerOffFunc@sw,w
  5468  0ABD  3189  2120  318A   	fcall	_setDelayOff_GO
  5469                           
  5470                           ;Switch_B1.c: 279: setRF_DimmerLights(sw, Sw->Status);
  5471  0AC0  0020               	movlb	0	; select bank0
  5472  0AC1  086F               	movf	_Sw,w
  5473  0AC2  0086               	movwf	6
  5474  0AC3  3001               	movlw	1	; select bank2/3
  5475  0AC4  0087               	movwf	7
  5476  0AC5  3000               	movlw	0
  5477  0AC6  1B01               	btfsc	1,6
  5478  0AC7  3001               	movlw	1
  5479  0AC8  00DD               	movwf	setRF_DimmerLights@on
  5480  0AC9  0864               	movf	Sw_DimmerOffFunc@sw,w
  5481  0ACA  3189  2186  318A   	fcall	_setRF_DimmerLights
  5482                           
  5483                           ;Switch_B1.c: 280: setTxData();
  5484  0ACD  3186  2689         	fcall	_setTxData
  5485  0ACF  0008               	return
  5486  0AD0                     __end_of_Sw_DimmerOffFunc:	
  5487                           
  5488                           	psect	text11
  5489  1655                     __ptext11:	
  5490 ;; *************** function _Sw_DimmerAdjFunc *****************
  5491 ;; Defined at:
  5492 ;;		line 287 in file "../src/Switch_B1.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;  sw              1    wreg     unsigned char 
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;  sw              1    5[BANK0 ] unsigned char 
  5497 ;;  Idle            1    4[BANK0 ] unsigned char 
  5498 ;; Return value:  Size  Location     Type
  5499 ;;		None               void
  5500 ;; Registers used:
  5501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5508 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5511 ;;Total ram usage:        2 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    7
  5514 ;; This function calls:
  5515 ;;		_setDimmerLights_AdjGo
  5516 ;;		_setDimmerLights_TriggerAdj
  5517 ;;		_setRFSW_Status
  5518 ;; This function is called by:
  5519 ;;		_setSw_Main
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           
  5524                           ;psect for function _Sw_DimmerAdjFunc
  5525  1655                     _Sw_DimmerAdjFunc:	
  5526                           
  5527                           ;incstack = 0
  5528                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5529                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5530  1655  0020               	movlb	0	; select bank0
  5531  1656  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5532                           
  5533                           ;Switch_B1.c: 288: char Idle = 1;
  5534  1657  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5535  1658  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5536                           
  5537                           ;Switch_B1.c: 301: if (sw == 1) {
  5538  1659  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5539  165A  3A01               	xorlw	1
  5540  165B  1D03               	skipz
  5541  165C  2E67               	goto	l6803
  5542                           
  5543                           ;Switch_B1.c: 302: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  5544  165D  1003               	clrc
  5545  165E  0022               	movlb	2	; select bank2
  5546  165F  1DBF               	btfss	(_DimmerLights2^(0+256)+8),3
  5547  1660  1403               	setc
  5548  1661  3000               	movlw	0
  5549  1662  1803               	btfsc	3,0
  5550  1663  3001               	movlw	1
  5551  1664  0020               	movlb	0	; select bank0
  5552  1665  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5553                           
  5554                           ;Switch_B1.c: 303: } else if (sw == 2) {
  5555  1666  2E74               	goto	l6807
  5556  1667                     l6803:	
  5557  1667  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5558  1668  3A02               	xorlw	2
  5559  1669  1D03               	skipz
  5560  166A  2E74               	goto	l6807
  5561                           
  5562                           ;Switch_B1.c: 304: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  5563  166B  1003               	clrc
  5564  166C  0022               	movlb	2	; select bank2
  5565  166D  1DB0               	btfss	(_DimmerLights1^(0+256)+8),3
  5566  166E  1403               	setc
  5567  166F  3000               	movlw	0
  5568  1670  1803               	btfsc	3,0
  5569  1671  3001               	movlw	1
  5570  1672  0020               	movlb	0	; select bank0
  5571  1673  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5572  1674                     l6807:	
  5573                           
  5574                           ;Switch_B1.c: 305: }
  5575                           ;Switch_B1.c: 308: if (Idle == 1) {
  5576  1674  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5577  1675  3A01               	xorlw	1
  5578  1676  1D03               	skipz
  5579  1677  0008               	return
  5580                           
  5581                           ;Switch_B1.c: 309: if (Sw->Flag == 1) {
  5582  1678  086F               	movf	_Sw,w
  5583  1679  0086               	movwf	6
  5584  167A  3001               	movlw	1	; select bank2/3
  5585  167B  0087               	movwf	7
  5586  167C  1F81               	btfss	1,7
  5587  167D  0008               	return
  5588                           
  5589                           ;Switch_B1.c: 310: Sw->Hold1 = 1;
  5590  167E  086F               	movf	_Sw,w
  5591  167F  0086               	movwf	6
  5592  1680  3001               	movlw	1	; select bank2/3
  5593  1681  0087               	movwf	7
  5594  1682  1581               	bsf	1,3
  5595                           
  5596                           ;Switch_B1.c: 311: Sw->Adj = 1;
  5597  1683  0A6F               	incf	_Sw,w
  5598  1684  0086               	movwf	6
  5599  1685  3001               	movlw	1	; select bank2/3
  5600  1686  0087               	movwf	7
  5601  1687  1401               	bsf	1,0
  5602                           
  5603                           ;Switch_B1.c: 312: Sw->Status = 1;
  5604  1688  086F               	movf	_Sw,w
  5605  1689  0086               	movwf	6
  5606  168A  3001               	movlw	1	; select bank2/3
  5607  168B  0087               	movwf	7
  5608  168C  1701               	bsf	1,6
  5609                           
  5610                           ;Switch_B1.c: 313: setRFSW_Status(sw, 1);
  5611  168D  01A2               	clrf	setRFSW_Status@command
  5612  168E  0AA2               	incf	setRFSW_Status@command,f
  5613  168F  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5614  1690  319C  24A9  3196   	fcall	_setRFSW_Status
  5615                           
  5616                           ;Switch_B1.c: 315: setDimmerLights_TriggerAdj(sw, 1);
  5617  1693  0020               	movlb	0	; select bank0
  5618  1694  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5619  1695  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5620  1696  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5621  1697  319D  2534  3196   	fcall	_setDimmerLights_TriggerAdj
  5622                           
  5623                           ;Switch_B1.c: 316: setDimmerLights_AdjGo(sw, 1);
  5624  169A  0020               	movlb	0	; select bank0
  5625  169B  01A2               	clrf	setDimmerLights_AdjGo@command
  5626  169C  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5627  169D  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5628  169E  319D  2524         	fcall	_setDimmerLights_AdjGo
  5629  16A0  0008               	return
  5630  16A1                     __end_of_Sw_DimmerAdjFunc:	
  5631                           
  5632                           	psect	text12
  5633  1D34                     __ptext12:	
  5634 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5635 ;; Defined at:
  5636 ;;		line 711 in file "../src/Dimmer_B1.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;  lights          1    wreg     unsigned char 
  5639 ;;  command         1    2[BANK0 ] unsigned char 
  5640 ;; Auto vars:     Size  Location     Type
  5641 ;;  lights          1    3[BANK0 ] unsigned char 
  5642 ;; Return value:  Size  Location     Type
  5643 ;;		None               void
  5644 ;; Registers used:
  5645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 0/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5651 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5652 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5654 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5655 ;;Total ram usage:        2 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; Hardware stack levels required when called:    6
  5658 ;; This function calls:
  5659 ;;		_DimmerLightsPointSelect
  5660 ;; This function is called by:
  5661 ;;		_Sw_DimmerOffFunc
  5662 ;;		_Sw_DimmerAdjFunc
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           
  5667                           ;psect for function _setDimmerLights_TriggerAdj
  5668  1D34                     _setDimmerLights_TriggerAdj:	
  5669                           
  5670                           ;incstack = 0
  5671                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5672                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5673  1D34  0020               	movlb	0	; select bank0
  5674  1D35  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5675                           
  5676                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  5677  1D36  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5678  1D37  319D  25AD         	fcall	_DimmerLightsPointSelect
  5679                           
  5680                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  5681  1D39  0879               	movf	_DimmerLights,w
  5682  1D3A  3E08               	addlw	8
  5683  1D3B  0086               	movwf	6
  5684  1D3C  3001               	movlw	1	; select bank2/3
  5685  1D3D  0087               	movwf	7
  5686  1D3E  0020               	movlb	0	; select bank0
  5687  1D3F  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5688  1D40  1201               	bcf	1,4
  5689  1D41  1D03               	skipz
  5690  1D42  1601               	bsf	1,4
  5691  1D43  0008               	return
  5692  1D44                     __end_of_setDimmerLights_TriggerAdj:	
  5693                           
  5694                           	psect	text13
  5695  1D24                     __ptext13:	
  5696 ;; *************** function _setDimmerLights_AdjGo *****************
  5697 ;; Defined at:
  5698 ;;		line 699 in file "../src/Dimmer_B1.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;  lights          1    wreg     unsigned char 
  5701 ;;  command         1    2[BANK0 ] unsigned char 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;  lights          1    3[BANK0 ] unsigned char 
  5704 ;; Return value:  Size  Location     Type
  5705 ;;		None               void
  5706 ;; Registers used:
  5707 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5713 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5717 ;;Total ram usage:        2 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    6
  5720 ;; This function calls:
  5721 ;;		_DimmerLightsPointSelect
  5722 ;; This function is called by:
  5723 ;;		_Sw_DimmerOffFunc
  5724 ;;		_Sw_DimmerAdjFunc
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           
  5729                           ;psect for function _setDimmerLights_AdjGo
  5730  1D24                     _setDimmerLights_AdjGo:	
  5731                           
  5732                           ;incstack = 0
  5733                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5734                           ;setDimmerLights_AdjGo@lights stored from wreg
  5735  1D24  0020               	movlb	0	; select bank0
  5736  1D25  00A3               	movwf	setDimmerLights_AdjGo@lights
  5737                           
  5738                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  5739  1D26  0823               	movf	setDimmerLights_AdjGo@lights,w
  5740  1D27  319D  25AD         	fcall	_DimmerLightsPointSelect
  5741                           
  5742                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  5743  1D29  0879               	movf	_DimmerLights,w
  5744  1D2A  3E08               	addlw	8
  5745  1D2B  0086               	movwf	6
  5746  1D2C  3001               	movlw	1	; select bank2/3
  5747  1D2D  0087               	movwf	7
  5748  1D2E  0020               	movlb	0	; select bank0
  5749  1D2F  0822               	movf	setDimmerLights_AdjGo@command,w
  5750  1D30  1181               	bcf	1,3
  5751  1D31  1D03               	skipz
  5752  1D32  1581               	bsf	1,3
  5753  1D33  0008               	return
  5754  1D34                     __end_of_setDimmerLights_AdjGo:	
  5755                           
  5756                           	psect	text14
  5757  1C80                     __ptext14:	
  5758 ;; *************** function _Switch_Initialization *****************
  5759 ;; Defined at:
  5760 ;;		line 41 in file "../src/Switch_B1.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;		None
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;		None
  5765 ;; Return value:  Size  Location     Type
  5766 ;;		None               void
  5767 ;; Registers used:
  5768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5778 ;;Total ram usage:        0 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    8
  5781 ;; This function calls:
  5782 ;;		_TouchPower
  5783 ;;		_setSw_Initialization
  5784 ;; This function is called by:
  5785 ;;		_main
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           
  5790                           ;psect for function _Switch_Initialization
  5791  1C80                     _Switch_Initialization:	
  5792                           
  5793                           ;Switch_B1.c: 42: TouchPower();
  5794                           
  5795                           ;incstack = 0
  5796                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5797  1C80  319C  24D6  319C   	fcall	_TouchPower
  5798                           
  5799                           ;Switch_B1.c: 44: WPUB1 = 0;
  5800  1C83  0024               	movlb	4	; select bank4
  5801  1C84  108D               	bcf	13,1	;volatile
  5802                           
  5803                           ;Switch_B1.c: 53: setSw_Initialization(1);
  5804  1C85  3001               	movlw	1
  5805  1C86  319B  23EC  319C   	fcall	_setSw_Initialization
  5806                           
  5807                           ;Switch_B1.c: 56: setSw_Initialization(2);
  5808  1C89  3002               	movlw	2
  5809  1C8A  319B  23EC         	fcall	_setSw_Initialization
  5810  1C8C  0008               	return
  5811  1C8D                     __end_of_Switch_Initialization:	
  5812                           
  5813                           	psect	text15
  5814  1BEC                     __ptext15:	
  5815 ;; *************** function _setSw_Initialization *****************
  5816 ;; Defined at:
  5817 ;;		line 81 in file "../src/Switch_B1.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;  sw              1    wreg     unsigned char 
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;  sw              1    4[BANK0 ] unsigned char 
  5822 ;; Return value:  Size  Location     Type
  5823 ;;		None               void
  5824 ;; Registers used:
  5825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5835 ;;Total ram usage:        1 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    7
  5838 ;; This function calls:
  5839 ;;		_setLED
  5840 ;; This function is called by:
  5841 ;;		_Switch_Initialization
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           
  5846                           ;psect for function _setSw_Initialization
  5847  1BEC                     _setSw_Initialization:	
  5848                           
  5849                           ;incstack = 0
  5850                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5851                           ;setSw_Initialization@sw stored from wreg
  5852  1BEC  0020               	movlb	0	; select bank0
  5853  1BED  00A4               	movwf	setSw_Initialization@sw
  5854                           
  5855                           ;Switch_B1.c: 82: setLED(sw, 1);
  5856  1BEE  01A2               	clrf	setLED@command
  5857  1BEF  0AA2               	incf	setLED@command,f
  5858  1BF0  0824               	movf	setSw_Initialization@sw,w
  5859  1BF1  3188  2001         	fcall	_setLED
  5860  1BF3  0008               	return
  5861  1BF4                     __end_of_setSw_Initialization:	
  5862                           
  5863                           	psect	text16
  5864  1CD6                     __ptext16:	
  5865 ;; *************** function _TouchPower *****************
  5866 ;; Defined at:
  5867 ;;		line 10 in file "../src/Switch_B1.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;		None
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;		None
  5872 ;; Return value:  Size  Location     Type
  5873 ;;		None               void
  5874 ;; Registers used:
  5875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5885 ;;Total ram usage:        0 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:    6
  5888 ;; This function calls:
  5889 ;;		_Timeout_Counter
  5890 ;;		_set_TimeoutCleared
  5891 ;; This function is called by:
  5892 ;;		_Switch_Initialization
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           
  5897                           ;psect for function _TouchPower
  5898  1CD6                     _TouchPower:	
  5899                           
  5900                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  5901                           
  5902                           ;incstack = 0
  5903                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5904  1CD6  2CDC               	goto	l7363
  5905  1CD7                     l2536:	
  5906                           
  5907                           ;Switch_B1.c: 12: RC5 = 1;
  5908  1CD7  0020               	movlb	0	; select bank0
  5909  1CD8  168E               	bsf	14,5	;volatile
  5910                           
  5911                           ;Switch_B1.c: 13: Timeout_Counter();
  5912  1CD9  319E  2695  319C   	fcall	_Timeout_Counter
  5913  1CDC                     l7363:	
  5914  1CDC  0020               	movlb	0	; select bank0
  5915  1CDD  1A8E               	btfsc	14,5	;volatile
  5916  1CDE  2CE2               	goto	l7367
  5917  1CDF  0021               	movlb	1	; select bank1
  5918  1CE0  1D2F               	btfss	(_myMain^(0+128)+15),2
  5919  1CE1  2CD7               	goto	l2536
  5920  1CE2                     l7367:	
  5921                           
  5922                           ;Switch_B1.c: 14: }
  5923                           ;Switch_B1.c: 15: set_TimeoutCleared();
  5924  1CE2  319B  239B         	fcall	_set_TimeoutCleared
  5925  1CE4  0008               	return
  5926  1CE5                     __end_of_TouchPower:	
  5927                           
  5928                           	psect	text17
  5929  1B88                     __ptext17:	
  5930 ;; *************** function _RF_Main *****************
  5931 ;; Defined at:
  5932 ;;		line 16 in file "../src/RF_Control_B1.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;		None
  5935 ;; Auto vars:     Size  Location     Type
  5936 ;;		None
  5937 ;; Return value:  Size  Location     Type
  5938 ;;		None               void
  5939 ;; Registers used:
  5940 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5941 ;; Tracked objects:
  5942 ;;		On entry : 0/0
  5943 ;;		On exit  : 0/0
  5944 ;;		Unchanged: 0/0
  5945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5950 ;;Total ram usage:        0 bytes
  5951 ;; Hardware stack levels used:    1
  5952 ;; Hardware stack levels required when called:   14
  5953 ;; This function calls:
  5954 ;;		_setRF_Main
  5955 ;; This function is called by:
  5956 ;;		_main
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           
  5961                           ;psect for function _RF_Main
  5962  1B88                     _RF_Main:	
  5963                           
  5964                           ;RF_Control_B1.c: 18: setRF_Main();
  5965                           
  5966                           ;incstack = 0
  5967                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5968  1B88  318C  24A8         	fcall	_setRF_Main
  5969  1B8A  0008               	return
  5970  1B8B                     __end_of_RF_Main:	
  5971                           
  5972                           	psect	text18
  5973  0CA8                     __ptext18:	
  5974 ;; *************** function _setRF_Main *****************
  5975 ;; Defined at:
  5976 ;;		line 51 in file "../src/RF_Control_B1.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;		None
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;		None
  5981 ;; Return value:  Size  Location     Type
  5982 ;;		None               void
  5983 ;; Registers used:
  5984 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5993 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5994 ;;Total ram usage:        2 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; Hardware stack levels required when called:   13
  5997 ;; This function calls:
  5998 ;;		_CC2500_ReadStatus
  5999 ;;		_CC2500_RxData
  6000 ;;		_CC2500_TxData
  6001 ;;		_CC2500_WriteCommand
  6002 ;;		_RF_RxDisable
  6003 ;;		_getBuz_GO
  6004 ;;		_getRxData
  6005 ;; This function is called by:
  6006 ;;		_RF_Main
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           
  6011                           ;psect for function _setRF_Main
  6012  0CA8                     _setRF_Main:	
  6013                           
  6014                           ;RF_Control_B1.c: 52: if (RF1.Enable == 1) {
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6018  0CA8  0021               	movlb	1	; select bank1
  6019  0CA9  1C57               	btfss	_RF1^(0+128),0
  6020  0CAA  0008               	return
  6021                           
  6022                           ;RF_Control_B1.c: 55: if (getBuz_GO() == 0) {
  6023  0CAB  319D  2566  318C   	fcall	_getBuz_GO
  6024  0CAE  0020               	movlb	0	; select bank0
  6025  0CAF  0821               	movf	?_getBuz_GO+1,w
  6026  0CB0  0420               	iorwf	?_getBuz_GO,w
  6027  0CB1  1D03               	skipz
  6028  0CB2  0008               	return
  6029                           
  6030                           ;RF_Control_B1.c: 61: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6031  0CB3  01E8               	clrf	_setRF_Main$4712
  6032  0CB4  0AE8               	incf	_setRF_Main$4712,f
  6033  0CB5  1F0C               	btfss	12,6	;volatile
  6034  0CB6  1A0C               	btfsc	12,4	;volatile
  6035  0CB7  2CBC               	goto	l7299
  6036  0CB8  1C0C               	btfss	12,0	;volatile
  6037  0CB9  188D               	btfsc	13,1	;volatile
  6038  0CBA  2CBC               	goto	l7299
  6039  0CBB  01E8               	clrf	_setRF_Main$4712
  6040  0CBC                     l7299:	
  6041  0CBC  0868               	movf	_setRF_Main$4712,w
  6042  0CBD  0021               	movlb	1	; select bank1
  6043  0CBE  13D7               	bcf	_RF1^(0+128),7
  6044  0CBF  1D03               	skipz
  6045  0CC0  17D7               	bsf	_RF1^(0+128),7
  6046                           
  6047                           ;RF_Control_B1.c: 67: if (RF1.Key == 1 && RF1.Learn == 0) {
  6048  0CC1  1BD7               	btfsc	_RF1^(0+128),7
  6049  0CC2  1B57               	btfsc	_RF1^(0+128),6
  6050  0CC3  2CC8               	goto	l2134
  6051                           
  6052                           ;RF_Control_B1.c: 68: RF1.Run = 1;
  6053  0CC4  14D8               	bsf	(_RF1^(0+128)+1),1
  6054                           
  6055                           ;RF_Control_B1.c: 69: RF_RxDisable();
  6056  0CC5  319C  24C7         	fcall	_RF_RxDisable
  6057                           
  6058                           ;RF_Control_B1.c: 70: } else {
  6059  0CC7  0008               	return
  6060  0CC8                     l2134:	
  6061                           
  6062                           ;RF_Control_B1.c: 71: if (RF1.Run == 1 && RF1.Learn == 0) {
  6063  0CC8  18D8               	btfsc	(_RF1^(0+128)+1),1
  6064  0CC9  1B57               	btfsc	_RF1^(0+128),6
  6065  0CCA  2CD8               	goto	l7319
  6066                           
  6067                           ;RF_Control_B1.c: 72: RF1.Count++;
  6068  0CCB  3001               	movlw	1
  6069  0CCC  0020               	movlb	0	; select bank0
  6070  0CCD  00E7               	movwf	??_setRF_Main
  6071  0CCE  0867               	movf	??_setRF_Main,w
  6072  0CCF  0021               	movlb	1	; select bank1
  6073  0CD0  07DA               	addwf	(_RF1^(0+128)+3),f
  6074                           
  6075                           ;RF_Control_B1.c: 73: if (RF1.Count == 5) {
  6076  0CD1  085A               	movf	(_RF1^(0+128)+3),w
  6077  0CD2  3A05               	xorlw	5
  6078  0CD3  1D03               	skipz
  6079  0CD4  0008               	return
  6080                           
  6081                           ;RF_Control_B1.c: 74: RF1.Count = 0;
  6082  0CD5  01DA               	clrf	(_RF1^(0+128)+3)
  6083                           
  6084                           ;RF_Control_B1.c: 75: RF1.Run = 0;
  6085  0CD6  10D8               	bcf	(_RF1^(0+128)+1),1
  6086                           
  6087                           ;RF_Control_B1.c: 76: }
  6088                           ;RF_Control_B1.c: 77: } else {
  6089  0CD7  0008               	return
  6090  0CD8                     l7319:	
  6091                           
  6092                           ;RF_Control_B1.c: 78: RF1.Count = 0;
  6093  0CD8  01DA               	clrf	(_RF1^(0+128)+3)
  6094                           
  6095                           ;RF_Control_B1.c: 79: RF1.Run = 0;
  6096  0CD9  10D8               	bcf	(_RF1^(0+128)+1),1
  6097                           
  6098                           ;RF_Control_B1.c: 81: if (RB0 == 0 && RF1.RxStatus == 1) {
  6099  0CDA  0020               	movlb	0	; select bank0
  6100  0CDB  180D               	btfsc	13,0	;volatile
  6101  0CDC  2CEA               	goto	l2139
  6102  0CDD  0021               	movlb	1	; select bank1
  6103  0CDE  1DD7               	btfss	_RF1^(0+128),3
  6104  0CDF  2CEA               	goto	l2139
  6105                           
  6106                           ;RF_Control_B1.c: 82: CC2500_ReadStatus(0x3B);
  6107  0CE0  303B               	movlw	59
  6108  0CE1  3190  20F5  318C   	fcall	_CC2500_ReadStatus
  6109                           
  6110                           ;RF_Control_B1.c: 83: if (s_data != 0) {
  6111  0CE4  0021               	movlb	1	; select bank1
  6112  0CE5  0869               	movf	_s_data^(0+128),w
  6113  0CE6  1903               	btfsc	3,2
  6114  0CE7  2CEA               	goto	l2139
  6115                           
  6116                           ;RF_Control_B1.c: 84: RF1.ReceiveGO = 1;
  6117  0CE8  14D7               	bsf	_RF1^(0+128),1
  6118                           
  6119                           ;RF_Control_B1.c: 85: RF1.RxStatus = 0;
  6120  0CE9  11D7               	bcf	_RF1^(0+128),3
  6121  0CEA                     l2139:	
  6122                           
  6123                           ;RF_Control_B1.c: 86: }
  6124                           ;RF_Control_B1.c: 87: }
  6125                           ;RF_Control_B1.c: 89: if (RF1.ReceiveGO == 1) {
  6126  0CEA  0021               	movlb	1	; select bank1
  6127  0CEB  1CD7               	btfss	_RF1^(0+128),1
  6128  0CEC  2CF6               	goto	l2141
  6129                           
  6130                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6131  0CED  10D7               	bcf	_RF1^(0+128),1
  6132                           
  6133                           ;RF_Control_B1.c: 91: CC2500_RxData();
  6134  0CEE  3189  21F2  318C   	fcall	_CC2500_RxData
  6135                           
  6136                           ;RF_Control_B1.c: 98: getRxData();
  6137  0CF1  3195  252E         	fcall	_getRxData
  6138                           
  6139                           ;RF_Control_B1.c: 100: RF1.Run = 1;
  6140  0CF3  0021               	movlb	1	; select bank1
  6141  0CF4  14D8               	bsf	(_RF1^(0+128)+1),1
  6142                           
  6143                           ;RF_Control_B1.c: 102: } else {
  6144  0CF5  0008               	return
  6145  0CF6                     l2141:	
  6146                           
  6147                           ;RF_Control_B1.c: 103: if (RF1.Learn == 0) {
  6148  0CF6  1B57               	btfsc	_RF1^(0+128),6
  6149  0CF7  2D1B               	goto	l2143
  6150                           
  6151                           ;RF_Control_B1.c: 104: if (RF1.TransceiveGO == 1) {
  6152  0CF8  1D57               	btfss	_RF1^(0+128),2
  6153  0CF9  2D0A               	goto	l2144
  6154                           
  6155                           ;RF_Control_B1.c: 105: RF1.TransceiveGO = 0;
  6156  0CFA  1157               	bcf	_RF1^(0+128),2
  6157                           
  6158                           ;RF_Control_B1.c: 106: RF1.RxStatus = 0;
  6159  0CFB  11D7               	bcf	_RF1^(0+128),3
  6160                           
  6161                           ;RF_Control_B1.c: 107: RF1.ReceiveGO = 0;
  6162  0CFC  10D7               	bcf	_RF1^(0+128),1
  6163                           
  6164                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x36);
  6165  0CFD  3036               	movlw	54
  6166  0CFE  319E  26C5  318C   	fcall	_CC2500_WriteCommand
  6167                           
  6168                           ;RF_Control_B1.c: 110: CC2500_WriteCommand(0x3B);
  6169  0D01  303B               	movlw	59
  6170  0D02  319E  26C5  318C   	fcall	_CC2500_WriteCommand
  6171                           
  6172                           ;RF_Control_B1.c: 111: CC2500_TxData();
  6173  0D05  3188  205F         	fcall	_CC2500_TxData
  6174                           
  6175                           ;RF_Control_B1.c: 112: RF1.Run = 1;
  6176  0D07  0021               	movlb	1	; select bank1
  6177  0D08  14D8               	bsf	(_RF1^(0+128)+1),1
  6178                           
  6179                           ;RF_Control_B1.c: 113: } else {
  6180  0D09  0008               	return
  6181  0D0A                     l2144:	
  6182                           
  6183                           ;RF_Control_B1.c: 115: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6184  0D0A  19D7               	btfsc	_RF1^(0+128),3
  6185  0D0B  0008               	return
  6186  0D0C  18D7               	btfsc	_RF1^(0+128),1
  6187  0D0D  0008               	return
  6188                           
  6189                           ;RF_Control_B1.c: 116: RF1.RxStatus = 1;
  6190  0D0E  15D7               	bsf	_RF1^(0+128),3
  6191                           
  6192                           ;RF_Control_B1.c: 117: CC2500_WriteCommand(0x36);
  6193  0D0F  3036               	movlw	54
  6194  0D10  319E  26C5  318C   	fcall	_CC2500_WriteCommand
  6195                           
  6196                           ;RF_Control_B1.c: 118: CC2500_WriteCommand(0x3A);
  6197  0D13  303A               	movlw	58
  6198  0D14  319E  26C5  318C   	fcall	_CC2500_WriteCommand
  6199                           
  6200                           ;RF_Control_B1.c: 119: CC2500_WriteCommand(0x34);
  6201  0D17  3034               	movlw	52
  6202  0D18  319E  26C5         	fcall	_CC2500_WriteCommand
  6203                           
  6204                           ;RF_Control_B1.c: 121: }
  6205                           ;RF_Control_B1.c: 124: }
  6206                           ;RF_Control_B1.c: 125: } else {
  6207  0D1A  0008               	return
  6208  0D1B                     l2143:	
  6209                           
  6210                           ;RF_Control_B1.c: 127: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6211  0D1B  19D7               	btfsc	_RF1^(0+128),3
  6212  0D1C  0008               	return
  6213  0D1D  18D7               	btfsc	_RF1^(0+128),1
  6214  0D1E  0008               	return
  6215                           
  6216                           ;RF_Control_B1.c: 128: RF1.RxStatus = 1;
  6217  0D1F  15D7               	bsf	_RF1^(0+128),3
  6218                           
  6219                           ;RF_Control_B1.c: 129: CC2500_WriteCommand(0x36);
  6220  0D20  3036               	movlw	54
  6221  0D21  319E  26C5  318C   	fcall	_CC2500_WriteCommand
  6222                           
  6223                           ;RF_Control_B1.c: 130: CC2500_WriteCommand(0x3A);
  6224  0D24  303A               	movlw	58
  6225  0D25  319E  26C5  318C   	fcall	_CC2500_WriteCommand
  6226                           
  6227                           ;RF_Control_B1.c: 131: CC2500_WriteCommand(0x34);
  6228  0D28  3034               	movlw	52
  6229  0D29  319E  26C5         	fcall	_CC2500_WriteCommand
  6230  0D2B  0008               	return
  6231  0D2C                     __end_of_setRF_Main:	
  6232                           
  6233                           	psect	text19
  6234  152E                     __ptext19:	
  6235 ;; *************** function _getRxData *****************
  6236 ;; Defined at:
  6237 ;;		line 216 in file "../src/RF_Control_B1.c"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;		None
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;		None
  6242 ;; Return value:  Size  Location     Type
  6243 ;;		None               void
  6244 ;; Registers used:
  6245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;Total ram usage:        0 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:   12
  6258 ;; This function calls:
  6259 ;;		_setControl_Lights_Table
  6260 ;;		_setLog_Code
  6261 ;; This function is called by:
  6262 ;;		_setRF_Main
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           
  6266                           
  6267                           ;psect for function _getRxData
  6268  152E                     _getRxData:	
  6269                           
  6270                           ;RF_Control_B1.c: 217: if (RF1.Learn == 1) {
  6271                           
  6272                           ;incstack = 0
  6273                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6274  152E  0021               	movlb	1	; select bank1
  6275  152F  1F57               	btfss	_RF1^(0+128),6
  6276  1530  2D3B               	goto	l6733
  6277                           
  6278                           ;RF_Control_B1.c: 218: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6279  1531  08B6               	movf	_RF_Data^(0+128),f
  6280  1532  1D03               	skipz
  6281  1533  0008               	return
  6282  1534  0837               	movf	(_RF_Data^(0+128)+1),w
  6283  1535  3A64               	xorlw	100
  6284  1536  1D03               	skipz
  6285  1537  0008               	return
  6286                           
  6287                           ;RF_Control_B1.c: 219: {
  6288                           ;RF_Control_B1.c: 220: setLog_Code();
  6289  1538  3192  2285         	fcall	_setLog_Code
  6290                           
  6291                           ;RF_Control_B1.c: 221: }
  6292                           ;RF_Control_B1.c: 222: } else {
  6293  153A  0008               	return
  6294  153B                     l6733:	
  6295                           
  6296                           ;RF_Control_B1.c: 223: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6297  153B  0021               	movlb	1	; select bank1
  6298  153C  08B6               	movf	_RF_Data^(0+128),f
  6299  153D  1D03               	skipz
  6300  153E  0008               	return
  6301  153F  0837               	movf	(_RF_Data^(0+128)+1),w
  6302  1540  3A02               	xorlw	2
  6303  1541  1D03               	skipz
  6304  1542  0008               	return
  6305                           
  6306                           ;RF_Control_B1.c: 224: {
  6307                           ;RF_Control_B1.c: 225: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6308  1543  0842               	movf	(_RF_Data^(0+128)+12),w
  6309  1544  3AFF               	xorlw	255
  6310  1545  1D03               	skipz
  6311  1546  2D51               	goto	l6745
  6312  1547  0843               	movf	(_RF_Data^(0+128)+13),w
  6313  1548  3AFF               	xorlw	255
  6314  1549  1D03               	skipz
  6315  154A  2D51               	goto	l6745
  6316  154B  0844               	movf	(_RF_Data^(0+128)+14),w
  6317  154C  3AFF               	xorlw	255
  6318  154D  1D03               	skipz
  6319  154E  2D51               	goto	l6745
  6320                           
  6321                           ;RF_Control_B1.c: 226: __nop();
  6322  154F  0000               	nop
  6323                           
  6324                           ;RF_Control_B1.c: 227: } else {
  6325  1550  0008               	return
  6326  1551                     l6745:	
  6327                           
  6328                           ;RF_Control_B1.c: 228: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6329  1551  0020               	movlb	0	; select bank0
  6330  1552  086E               	movf	_product,w
  6331  1553  3E0C               	addlw	12
  6332  1554  0086               	movwf	6
  6333  1555  3002               	movlw	2	; select bank4/5
  6334  1556  0087               	movwf	7
  6335  1557  0021               	movlb	1	; select bank1
  6336  1558  0842               	movf	(_RF_Data^(0+128)+12),w
  6337  1559  0601               	xorwf	1,w
  6338  155A  1D03               	skipz
  6339  155B  0008               	return
  6340  155C  0020               	movlb	0	; select bank0
  6341  155D  086E               	movf	_product,w
  6342  155E  3E0D               	addlw	13
  6343  155F  0086               	movwf	6
  6344  1560  3002               	movlw	2	; select bank4/5
  6345  1561  0087               	movwf	7
  6346  1562  0021               	movlb	1	; select bank1
  6347  1563  0843               	movf	(_RF_Data^(0+128)+13),w
  6348  1564  0601               	xorwf	1,w
  6349  1565  1D03               	skipz
  6350  1566  0008               	return
  6351  1567  0020               	movlb	0	; select bank0
  6352  1568  086E               	movf	_product,w
  6353  1569  3E0E               	addlw	14
  6354  156A  0086               	movwf	6
  6355  156B  3002               	movlw	2	; select bank4/5
  6356  156C  0087               	movwf	7
  6357  156D  0021               	movlb	1	; select bank1
  6358  156E  0844               	movf	(_RF_Data^(0+128)+14),w
  6359  156F  0601               	xorwf	1,w
  6360  1570  1D03               	skipz
  6361  1571  0008               	return
  6362                           
  6363                           ;RF_Control_B1.c: 229: setControl_Lights_Table();
  6364  1572  318E  263D         	fcall	_setControl_Lights_Table
  6365                           
  6366                           ;RF_Control_B1.c: 236: {
  6367                           ;RF_Control_B1.c: 237: ;
  6368                           
  6369                           ;RF_Control_B1.c: 233: {
  6370                           ;RF_Control_B1.c: 234: ;
  6371                           ;RF_Control_B1.c: 235: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6372                           
  6373                           ;RF_Control_B1.c: 230: }
  6374                           ;RF_Control_B1.c: 231: }
  6375                           ;RF_Control_B1.c: 232: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6376  1574  0008               	return
  6377  1575                     __end_of_getRxData:	
  6378                           
  6379                           	psect	text20
  6380  1285                     __ptext20:	
  6381 ;; *************** function _setLog_Code *****************
  6382 ;; Defined at:
  6383 ;;		line 247 in file "../src/RF_Control_B1.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;		None
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;		None
  6388 ;; Return value:  Size  Location     Type
  6389 ;;		None               void
  6390 ;; Registers used:
  6391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;Total ram usage:        1 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    7
  6404 ;; This function calls:
  6405 ;;		_setBuz
  6406 ;; This function is called by:
  6407 ;;		_getRxData
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           
  6412                           ;psect for function _setLog_Code
  6413  1285                     _setLog_Code:	
  6414                           
  6415                           ;RF_Control_B1.c: 248: product->Data[12]=RF_Data[12];
  6416                           
  6417                           ;incstack = 0
  6418                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6419  1285  0021               	movlb	1	; select bank1
  6420  1286  0842               	movf	(_RF_Data^(0+128)+12),w
  6421  1287  0020               	movlb	0	; select bank0
  6422  1288  00AD               	movwf	??_setLog_Code
  6423  1289  086E               	movf	_product,w
  6424  128A  3E0C               	addlw	12
  6425  128B  0086               	movwf	6
  6426  128C  3002               	movlw	2	; select bank4/5
  6427  128D  0087               	movwf	7
  6428  128E  082D               	movf	??_setLog_Code,w
  6429  128F  0081               	movwf	1
  6430                           
  6431                           ;RF_Control_B1.c: 249: product->Data[13]=RF_Data[13];
  6432  1290  0021               	movlb	1	; select bank1
  6433  1291  0843               	movf	(_RF_Data^(0+128)+13),w
  6434  1292  0020               	movlb	0	; select bank0
  6435  1293  00AD               	movwf	??_setLog_Code
  6436  1294  086E               	movf	_product,w
  6437  1295  3E0D               	addlw	13
  6438  1296  0086               	movwf	6
  6439  1297  3002               	movlw	2	; select bank4/5
  6440  1298  0087               	movwf	7
  6441  1299  082D               	movf	??_setLog_Code,w
  6442  129A  0081               	movwf	1
  6443                           
  6444                           ;RF_Control_B1.c: 250: product->Data[14]=RF_Data[14];
  6445  129B  0021               	movlb	1	; select bank1
  6446  129C  0844               	movf	(_RF_Data^(0+128)+14),w
  6447  129D  0020               	movlb	0	; select bank0
  6448  129E  00AD               	movwf	??_setLog_Code
  6449  129F  086E               	movf	_product,w
  6450  12A0  3E0E               	addlw	14
  6451  12A1  0086               	movwf	6
  6452  12A2  3002               	movlw	2	; select bank4/5
  6453  12A3  0087               	movwf	7
  6454  12A4  082D               	movf	??_setLog_Code,w
  6455  12A5  0081               	movwf	1
  6456                           
  6457                           ;RF_Control_B1.c: 251: setBuz(1, 100);
  6458  12A6  3064               	movlw	100
  6459  12A7  00A9               	movwf	setBuz@time
  6460  12A8  3000               	movlw	0
  6461  12A9  00AA               	movwf	setBuz@time+1
  6462  12AA  3001               	movlw	1
  6463  12AB  3197  274C  3192   	fcall	_setBuz
  6464                           
  6465                           ;RF_Control_B1.c: 252: RF1.Learn = 0;
  6466  12AE  0021               	movlb	1	; select bank1
  6467  12AF  1357               	bcf	_RF1^(0+128),6
  6468                           
  6469                           ;RF_Control_B1.c: 253: if (myMain.First) {
  6470  12B0  1FA0               	btfss	_myMain^(0+128),7
  6471  12B1  2AB4               	goto	l2179
  6472                           
  6473                           ;RF_Control_B1.c: 254: Memory.LoopSave=1;
  6474  12B2  0024               	movlb	4	; select bank4
  6475  12B3  1544               	bsf	(_Memory^(0+512)+36),2
  6476  12B4                     l2179:	
  6477                           
  6478                           ;RF_Control_B1.c: 255: }
  6479                           ;RF_Control_B1.c: 256: Memory.Modify=1;
  6480  12B4  0024               	movlb	4	; select bank4
  6481  12B5  1444               	bsf	(_Memory^(0+512)+36),0
  6482  12B6  0008               	return
  6483  12B7                     __end_of_setLog_Code:	
  6484                           
  6485                           	psect	text21
  6486  0E3D                     __ptext21:	
  6487 ;; *************** function _setControl_Lights_Table *****************
  6488 ;; Defined at:
  6489 ;;		line 260 in file "../src/RF_Control_B1.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;		None
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;		None
  6494 ;; Return value:  Size  Location     Type
  6495 ;;		None               void
  6496 ;; Registers used:
  6497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6498 ;; Tracked objects:
  6499 ;;		On entry : 0/0
  6500 ;;		On exit  : 0/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;Total ram usage:        0 bytes
  6508 ;; Hardware stack levels used:    1
  6509 ;; Hardware stack levels required when called:   11
  6510 ;; This function calls:
  6511 ;;		_setBuz
  6512 ;;		_setDimmerLights
  6513 ;;		_setRFSW_AdjControl
  6514 ;;		_setRFSW_Control
  6515 ;;		_setRFSW_Status
  6516 ;;		_setSw_Status
  6517 ;;		_setTxData
  6518 ;; This function is called by:
  6519 ;;		_getRxData
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           
  6524                           ;psect for function _setControl_Lights_Table
  6525  0E3D                     _setControl_Lights_Table:	
  6526                           
  6527                           ;RF_Control_B1.c: 261: if (RF_Data[15] == 0x00) {
  6528                           
  6529                           ;incstack = 0
  6530                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6531  0E3D  0021               	movlb	1	; select bank1
  6532  0E3E  08C5               	movf	(_RF_Data^(0+128)+15),f
  6533  0E3F  1D03               	skipz
  6534  0E40  2E89               	goto	l6407
  6535                           
  6536                           ;RF_Control_B1.c: 263: setDimmerLights(1, 0);
  6537  0E41  0020               	movlb	0	; select bank0
  6538  0E42  01A4               	clrf	setDimmerLights@status
  6539  0E43  3001               	movlw	1
  6540  0E44  318D  25B3  318E   	fcall	_setDimmerLights
  6541                           
  6542                           ;RF_Control_B1.c: 264: setRFSW_Status(1, 0);
  6543  0E47  0020               	movlb	0	; select bank0
  6544  0E48  01A2               	clrf	setRFSW_Status@command
  6545  0E49  3001               	movlw	1
  6546  0E4A  319C  24A9  318E   	fcall	_setRFSW_Status
  6547                           
  6548                           ;RF_Control_B1.c: 265: setSw_Status(1, 0);
  6549  0E4D  0020               	movlb	0	; select bank0
  6550  0E4E  01A2               	clrf	setSw_Status@command
  6551  0E4F  3001               	movlw	1
  6552  0E50  319C  24B8  318E   	fcall	_setSw_Status
  6553                           
  6554                           ;RF_Control_B1.c: 268: setDimmerLights(2, 0);
  6555  0E53  0020               	movlb	0	; select bank0
  6556  0E54  01A4               	clrf	setDimmerLights@status
  6557  0E55  3002               	movlw	2
  6558  0E56  318D  25B3  318E   	fcall	_setDimmerLights
  6559                           
  6560                           ;RF_Control_B1.c: 269: setRFSW_Status(2, 0);
  6561  0E59  0020               	movlb	0	; select bank0
  6562  0E5A  01A2               	clrf	setRFSW_Status@command
  6563  0E5B  3002               	movlw	2
  6564  0E5C  319C  24A9  318E   	fcall	_setRFSW_Status
  6565                           
  6566                           ;RF_Control_B1.c: 270: setSw_Status(2, 0);
  6567  0E5F  0020               	movlb	0	; select bank0
  6568  0E60  01A2               	clrf	setSw_Status@command
  6569  0E61  3002               	movlw	2
  6570  0E62  319C  24B8  318E   	fcall	_setSw_Status
  6571                           
  6572                           ;RF_Control_B1.c: 278: product->Data[9]=0;
  6573  0E65  0020               	movlb	0	; select bank0
  6574  0E66  086E               	movf	_product,w
  6575  0E67  3E09               	addlw	9
  6576  0E68  0086               	movwf	6
  6577  0E69  3002               	movlw	2	; select bank4/5
  6578  0E6A  0087               	movwf	7
  6579  0E6B  0181               	clrf	1
  6580                           
  6581                           ;RF_Control_B1.c: 279: product->Data[11]=0;
  6582  0E6C  086E               	movf	_product,w
  6583  0E6D  3E0B               	addlw	11
  6584  0E6E  0086               	movwf	6
  6585  0E6F  3002               	movlw	2	; select bank4/5
  6586  0E70  0087               	movwf	7
  6587  0E71  0181               	clrf	1
  6588                           
  6589                           ;RF_Control_B1.c: 280: product->Data[15]=0;
  6590  0E72  086E               	movf	_product,w
  6591  0E73  3E0F               	addlw	15
  6592  0E74  0086               	movwf	6
  6593  0E75  3002               	movlw	2	; select bank4/5
  6594  0E76  0087               	movwf	7
  6595  0E77  0181               	clrf	1
  6596                           
  6597                           ;RF_Control_B1.c: 281: product->Data[17]=0;
  6598  0E78  086E               	movf	_product,w
  6599  0E79  3E11               	addlw	17
  6600  0E7A  0086               	movwf	6
  6601  0E7B  3002               	movlw	2	; select bank4/5
  6602  0E7C  0087               	movwf	7
  6603  0E7D  0181               	clrf	1
  6604                           
  6605                           ;RF_Control_B1.c: 282: setBuz(1, 100);
  6606  0E7E  3064               	movlw	100
  6607  0E7F  00A9               	movwf	setBuz@time
  6608  0E80  3000               	movlw	0
  6609  0E81  00AA               	movwf	setBuz@time+1
  6610  0E82  3001               	movlw	1
  6611  0E83  3197  274C  318E   	fcall	_setBuz
  6612                           
  6613                           ;RF_Control_B1.c: 283: setTxData();
  6614  0E86  3186  2689         	fcall	_setTxData
  6615                           
  6616                           ;RF_Control_B1.c: 284: } else if (RF_Data[15] == 0x20) {
  6617  0E88  0008               	return
  6618  0E89                     l6407:	
  6619  0E89  0021               	movlb	1	; select bank1
  6620  0E8A  0845               	movf	(_RF_Data^(0+128)+15),w
  6621  0E8B  3A20               	xorlw	32
  6622  0E8C  1D03               	skipz
  6623  0E8D  2EA4               	goto	l6413
  6624                           
  6625                           ;RF_Control_B1.c: 285: product->Data[9]=0;
  6626  0E8E  0020               	movlb	0	; select bank0
  6627  0E8F  086E               	movf	_product,w
  6628  0E90  3E09               	addlw	9
  6629  0E91  0086               	movwf	6
  6630  0E92  3002               	movlw	2	; select bank4/5
  6631  0E93  0087               	movwf	7
  6632  0E94  0181               	clrf	1
  6633                           
  6634                           ;RF_Control_B1.c: 286: product->Data[11]=0;
  6635  0E95  086E               	movf	_product,w
  6636  0E96  3E0B               	addlw	11
  6637  0E97  0086               	movwf	6
  6638  0E98  3002               	movlw	2	; select bank4/5
  6639  0E99  0087               	movwf	7
  6640  0E9A  0181               	clrf	1
  6641                           
  6642                           ;RF_Control_B1.c: 287: product->Data[17]=0;
  6643  0E9B  086E               	movf	_product,w
  6644  0E9C  3E11               	addlw	17
  6645  0E9D  0086               	movwf	6
  6646  0E9E  3002               	movlw	2	; select bank4/5
  6647  0E9F  0087               	movwf	7
  6648  0EA0  0181               	clrf	1
  6649                           
  6650                           ;RF_Control_B1.c: 288: setTxData();
  6651  0EA1  3186  2689         	fcall	_setTxData
  6652                           
  6653                           ;RF_Control_B1.c: 289: }
  6654  0EA3  0008               	return
  6655  0EA4                     l6413:	
  6656                           
  6657                           ;RF_Control_B1.c: 291: else if (RF_Data[15] == 0x01) {
  6658  0EA4  0021               	movlb	1	; select bank1
  6659  0EA5  0845               	movf	(_RF_Data^(0+128)+15),w
  6660  0EA6  3A01               	xorlw	1
  6661  0EA7  1D03               	skipz
  6662  0EA8  2EAD               	goto	l6417
  6663                           
  6664                           ;RF_Control_B1.c: 292: setRFSW_Control(1);
  6665  0EA9  3001               	movlw	1
  6666  0EAA  318E  26C8         	fcall	_setRFSW_Control
  6667                           
  6668                           ;RF_Control_B1.c: 293: }
  6669  0EAC  0008               	return
  6670  0EAD                     l6417:	
  6671                           
  6672                           ;RF_Control_B1.c: 295: else if (RF_Data[15] == 0x11) {
  6673  0EAD  0021               	movlb	1	; select bank1
  6674  0EAE  0845               	movf	(_RF_Data^(0+128)+15),w
  6675  0EAF  3A11               	xorlw	17
  6676  0EB0  1D03               	skipz
  6677  0EB1  2EB6               	goto	l6421
  6678                           
  6679                           ;RF_Control_B1.c: 296: setRFSW_AdjControl(1);
  6680  0EB2  3001               	movlw	1
  6681  0EB3  3193  235B         	fcall	_setRFSW_AdjControl
  6682                           
  6683                           ;RF_Control_B1.c: 297: }
  6684  0EB5  0008               	return
  6685  0EB6                     l6421:	
  6686                           
  6687                           ;RF_Control_B1.c: 302: else if (RF_Data[15] == 0x02) {
  6688  0EB6  0021               	movlb	1	; select bank1
  6689  0EB7  0845               	movf	(_RF_Data^(0+128)+15),w
  6690  0EB8  3A02               	xorlw	2
  6691  0EB9  1D03               	skipz
  6692  0EBA  2EBF               	goto	l6425
  6693                           
  6694                           ;RF_Control_B1.c: 303: setRFSW_Control(2);
  6695  0EBB  3002               	movlw	2
  6696  0EBC  318E  26C8         	fcall	_setRFSW_Control
  6697                           
  6698                           ;RF_Control_B1.c: 304: }
  6699  0EBE  0008               	return
  6700  0EBF                     l6425:	
  6701                           
  6702                           ;RF_Control_B1.c: 306: else if (RF_Data[15] == 0x21) {
  6703  0EBF  0021               	movlb	1	; select bank1
  6704  0EC0  0845               	movf	(_RF_Data^(0+128)+15),w
  6705  0EC1  3A21               	xorlw	33
  6706  0EC2  1D03               	skipz
  6707  0EC3  0008               	return
  6708                           
  6709                           ;RF_Control_B1.c: 307: setRFSW_AdjControl(2);
  6710  0EC4  3002               	movlw	2
  6711  0EC5  3193  235B         	fcall	_setRFSW_AdjControl
  6712  0EC7  0008               	return
  6713  0EC8                     __end_of_setControl_Lights_Table:	
  6714                           
  6715                           	psect	text22
  6716  0EC8                     __ptext22:	
  6717 ;; *************** function _setRFSW_Control *****************
  6718 ;; Defined at:
  6719 ;;		line 348 in file "../src/RF_Control_B1.c"
  6720 ;; Parameters:    Size  Location     Type
  6721 ;;  sw              1    wreg     unsigned char 
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;  sw              1   67[BANK0 ] unsigned char 
  6724 ;; Return value:  Size  Location     Type
  6725 ;;		None               void
  6726 ;; Registers used:
  6727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6728 ;; Tracked objects:
  6729 ;;		On entry : 0/0
  6730 ;;		On exit  : 0/0
  6731 ;;		Unchanged: 0/0
  6732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;Total ram usage:        2 bytes
  6738 ;; Hardware stack levels used:    1
  6739 ;; Hardware stack levels required when called:    9
  6740 ;; This function calls:
  6741 ;;		_RfSWPointSelect
  6742 ;;		_setBuz
  6743 ;;		_setDelayOff_GO
  6744 ;;		_setDimmerLights_Switch
  6745 ;;		_setDimmerLights_Trigger
  6746 ;;		_setRF_DimmerLights
  6747 ;;		_setSw_Status
  6748 ;;		_setTxData
  6749 ;; This function is called by:
  6750 ;;		_setControl_Lights_Table
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           
  6755                           ;psect for function _setRFSW_Control
  6756  0EC8                     _setRFSW_Control:	
  6757                           
  6758                           ;incstack = 0
  6759                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6760                           ;setRFSW_Control@sw stored from wreg
  6761  0EC8  0020               	movlb	0	; select bank0
  6762  0EC9  00E3               	movwf	setRFSW_Control@sw
  6763                           
  6764                           ;RF_Control_B1.c: 349: RfSWPointSelect(sw);
  6765  0ECA  0863               	movf	setRFSW_Control@sw,w
  6766  0ECB  319E  263B  318E   	fcall	_RfSWPointSelect
  6767                           
  6768                           ;RF_Control_B1.c: 350: if (RFSW->Status == 0) {
  6769  0ECE  0021               	movlb	1	; select bank1
  6770  0ECF  0863               	movf	_RFSW^(0+128),w
  6771  0ED0  0086               	movwf	6
  6772  0ED1  0187               	clrf	7
  6773  0ED2  1801               	btfsc	1,0
  6774  0ED3  2F09               	goto	l6251
  6775                           
  6776                           ;RF_Control_B1.c: 351: if (RF_Data[16] == 0x80) {
  6777  0ED4  0846               	movf	(_RF_Data^(0+128)+16),w
  6778  0ED5  3A80               	xorlw	128
  6779  0ED6  1D03               	skipz
  6780  0ED7  2EE5               	goto	l6241
  6781                           
  6782                           ;RF_Control_B1.c: 352: setDelayOff_GO(sw, 1, RF_Data[17]);
  6783  0ED8  0020               	movlb	0	; select bank0
  6784  0ED9  01AA               	clrf	setDelayOff_GO@command
  6785  0EDA  0AAA               	incf	setDelayOff_GO@command,f
  6786  0EDB  0021               	movlb	1	; select bank1
  6787  0EDC  0847               	movf	(_RF_Data^(0+128)+17),w
  6788  0EDD  0020               	movlb	0	; select bank0
  6789  0EDE  00E2               	movwf	??_setRFSW_Control
  6790  0EDF  0862               	movf	??_setRFSW_Control,w
  6791  0EE0  00AB               	movwf	setDelayOff_GO@value
  6792  0EE1  0863               	movf	setRFSW_Control@sw,w
  6793  0EE2  3189  2120  318E   	fcall	_setDelayOff_GO
  6794  0EE5                     l6241:	
  6795                           
  6796                           ;RF_Control_B1.c: 353: }
  6797                           ;RF_Control_B1.c: 354: RFSW->Status = 1;
  6798  0EE5  0021               	movlb	1	; select bank1
  6799  0EE6  0863               	movf	_RFSW^(0+128),w
  6800  0EE7  0086               	movwf	6
  6801  0EE8  0187               	clrf	7
  6802  0EE9  1401               	bsf	1,0
  6803                           
  6804                           ;RF_Control_B1.c: 355: setSw_Status(sw, 1);
  6805  0EEA  0020               	movlb	0	; select bank0
  6806  0EEB  01A2               	clrf	setSw_Status@command
  6807  0EEC  0AA2               	incf	setSw_Status@command,f
  6808  0EED  0863               	movf	setRFSW_Control@sw,w
  6809  0EEE  319C  24B8  318E   	fcall	_setSw_Status
  6810                           
  6811                           ;RF_Control_B1.c: 357: setDimmerLights_Trigger(sw, 1);
  6812  0EF1  0020               	movlb	0	; select bank0
  6813  0EF2  01A2               	clrf	setDimmerLights_Trigger@command
  6814  0EF3  0AA2               	incf	setDimmerLights_Trigger@command,f
  6815  0EF4  0863               	movf	setRFSW_Control@sw,w
  6816  0EF5  319D  2504  318E   	fcall	_setDimmerLights_Trigger
  6817                           
  6818                           ;RF_Control_B1.c: 358: setDimmerLights_Switch(sw, 1);
  6819  0EF8  0020               	movlb	0	; select bank0
  6820  0EF9  01A2               	clrf	setDimmerLights_Switch@command
  6821  0EFA  0AA2               	incf	setDimmerLights_Switch@command,f
  6822  0EFB  0863               	movf	setRFSW_Control@sw,w
  6823  0EFC  319C  24F4  318E   	fcall	_setDimmerLights_Switch
  6824                           
  6825                           ;RF_Control_B1.c: 360: setRF_DimmerLights(sw, RFSW->Status);
  6826  0EFF  0021               	movlb	1	; select bank1
  6827  0F00  0863               	movf	_RFSW^(0+128),w
  6828  0F01  0086               	movwf	6
  6829  0F02  0187               	clrf	7
  6830  0F03  3000               	movlw	0
  6831  0F04  1801               	btfsc	1,0
  6832  0F05  3001               	movlw	1
  6833  0F06  0020               	movlb	0	; select bank0
  6834  0F07  00DD               	movwf	setRF_DimmerLights@on
  6835  0F08  2F47               	goto	L3
  6836  0F09                     l6251:	
  6837                           ;RF_Control_B1.c: 361: } else {
  6838                           
  6839                           
  6840                           ;RF_Control_B1.c: 362: if (RF_Data[16] == 0x80) {
  6841  0F09  0021               	movlb	1	; select bank1
  6842  0F0A  0846               	movf	(_RF_Data^(0+128)+16),w
  6843  0F0B  3A80               	xorlw	128
  6844  0F0C  1D03               	skipz
  6845  0F0D  2F1F               	goto	l6255
  6846                           
  6847                           ;RF_Control_B1.c: 363: setDelayOff_GO(sw, 1, RF_Data[17]);
  6848  0F0E  0020               	movlb	0	; select bank0
  6849  0F0F  01AA               	clrf	setDelayOff_GO@command
  6850  0F10  0AAA               	incf	setDelayOff_GO@command,f
  6851  0F11  0021               	movlb	1	; select bank1
  6852  0F12  0847               	movf	(_RF_Data^(0+128)+17),w
  6853  0F13  0020               	movlb	0	; select bank0
  6854  0F14  00E2               	movwf	??_setRFSW_Control
  6855  0F15  0862               	movf	??_setRFSW_Control,w
  6856  0F16  00AB               	movwf	setDelayOff_GO@value
  6857  0F17  0863               	movf	setRFSW_Control@sw,w
  6858  0F18  3189  2120  318E   	fcall	_setDelayOff_GO
  6859                           
  6860                           ;RF_Control_B1.c: 364: setRF_DimmerLights(sw, 1);
  6861  0F1B  0020               	movlb	0	; select bank0
  6862  0F1C  01DD               	clrf	setRF_DimmerLights@on
  6863  0F1D  0ADD               	incf	setRF_DimmerLights@on,f
  6864  0F1E  2F47               	goto	L3
  6865  0F1F                     l6255:	
  6866                           ;RF_Control_B1.c: 365: } else {
  6867                           
  6868                           
  6869                           ;RF_Control_B1.c: 366: RFSW->Status = 0;
  6870  0F1F  0021               	movlb	1	; select bank1
  6871  0F20  0863               	movf	_RFSW^(0+128),w
  6872  0F21  0086               	movwf	6
  6873  0F22  0187               	clrf	7
  6874  0F23  1001               	bcf	1,0
  6875                           
  6876                           ;RF_Control_B1.c: 367: setSw_Status(sw, 0);
  6877  0F24  0020               	movlb	0	; select bank0
  6878  0F25  01A2               	clrf	setSw_Status@command
  6879  0F26  0863               	movf	setRFSW_Control@sw,w
  6880  0F27  319C  24B8  318E   	fcall	_setSw_Status
  6881                           
  6882                           ;RF_Control_B1.c: 369: setDimmerLights_Trigger(sw, 1);
  6883  0F2A  0020               	movlb	0	; select bank0
  6884  0F2B  01A2               	clrf	setDimmerLights_Trigger@command
  6885  0F2C  0AA2               	incf	setDimmerLights_Trigger@command,f
  6886  0F2D  0863               	movf	setRFSW_Control@sw,w
  6887  0F2E  319D  2504  318E   	fcall	_setDimmerLights_Trigger
  6888                           
  6889                           ;RF_Control_B1.c: 370: setDimmerLights_Switch(sw, RFSW->Status);
  6890  0F31  0021               	movlb	1	; select bank1
  6891  0F32  0863               	movf	_RFSW^(0+128),w
  6892  0F33  0086               	movwf	6
  6893  0F34  0187               	clrf	7
  6894  0F35  3000               	movlw	0
  6895  0F36  1801               	btfsc	1,0
  6896  0F37  3001               	movlw	1
  6897  0F38  0020               	movlb	0	; select bank0
  6898  0F39  00A2               	movwf	setDimmerLights_Switch@command
  6899  0F3A  0863               	movf	setRFSW_Control@sw,w
  6900  0F3B  319C  24F4  318E   	fcall	_setDimmerLights_Switch
  6901                           
  6902                           ;RF_Control_B1.c: 372: setDelayOff_GO(sw, 0, 0);
  6903  0F3E  0020               	movlb	0	; select bank0
  6904  0F3F  01AA               	clrf	setDelayOff_GO@command
  6905  0F40  01AB               	clrf	setDelayOff_GO@value
  6906  0F41  0863               	movf	setRFSW_Control@sw,w
  6907  0F42  3189  2120  318E   	fcall	_setDelayOff_GO
  6908                           
  6909                           ;RF_Control_B1.c: 373: setRF_DimmerLights(sw, 0);
  6910  0F45  0020               	movlb	0	; select bank0
  6911  0F46  01DD               	clrf	setRF_DimmerLights@on
  6912  0F47                     L3:	
  6913  0F47  0863               	movf	setRFSW_Control@sw,w
  6914  0F48  3189  2186  318E   	fcall	_setRF_DimmerLights
  6915                           
  6916                           ;RF_Control_B1.c: 374: }
  6917                           ;RF_Control_B1.c: 375: }
  6918                           ;RF_Control_B1.c: 376: setBuz(1, 100);
  6919  0F4B  3064               	movlw	100
  6920  0F4C  0020               	movlb	0	; select bank0
  6921  0F4D  00A9               	movwf	setBuz@time
  6922  0F4E  3000               	movlw	0
  6923  0F4F  00AA               	movwf	setBuz@time+1
  6924  0F50  3001               	movlw	1
  6925  0F51  3197  274C  318E   	fcall	_setBuz
  6926                           
  6927                           ;RF_Control_B1.c: 377: setTxData();
  6928  0F54  3186  2689         	fcall	_setTxData
  6929  0F56  0008               	return
  6930  0F57                     __end_of_setRFSW_Control:	
  6931                           
  6932                           	psect	text23
  6933  0920                     __ptext23:	
  6934 ;; *************** function _setDelayOff_GO *****************
  6935 ;; Defined at:
  6936 ;;		line 86 in file "../src/DelayOff_B1.c"
  6937 ;; Parameters:    Size  Location     Type
  6938 ;;  sw              1    wreg     unsigned char 
  6939 ;;  command         1   10[BANK0 ] unsigned char 
  6940 ;;  value           1   11[BANK0 ] unsigned char 
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;  sw              1   14[BANK0 ] unsigned char 
  6943 ;; Return value:  Size  Location     Type
  6944 ;;		None               void
  6945 ;; Registers used:
  6946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6952 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;Total ram usage:        5 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    7
  6959 ;; This function calls:
  6960 ;;		_DelayOffPointSelect
  6961 ;;		_DelayTimejudge
  6962 ;; This function is called by:
  6963 ;;		_setRFSW_Control
  6964 ;;		_Sw_DimmerOffFunc
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           
  6969                           ;psect for function _setDelayOff_GO
  6970  0920                     _setDelayOff_GO:	
  6971                           
  6972                           ;incstack = 0
  6973                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6974                           ;setDelayOff_GO@sw stored from wreg
  6975  0920  0020               	movlb	0	; select bank0
  6976  0921  00AE               	movwf	setDelayOff_GO@sw
  6977                           
  6978                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  6979  0922  082E               	movf	setDelayOff_GO@sw,w
  6980  0923  319D  25E8  3189   	fcall	_DelayOffPointSelect
  6981                           
  6982                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  6983  0926  0878               	movf	_DelayOff,w
  6984  0927  0086               	movwf	6
  6985  0928  3001               	movlw	1	; select bank2/3
  6986  0929  0087               	movwf	7
  6987  092A  1C01               	btfss	1,0
  6988  092B  0008               	return
  6989                           
  6990                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  6991  092C  0020               	movlb	0	; select bank0
  6992  092D  082A               	movf	setDelayOff_GO@command,w
  6993  092E  3A01               	xorlw	1
  6994  092F  3000               	movlw	0
  6995  0930  1903               	skipnz
  6996  0931  3001               	movlw	1
  6997  0932  00AC               	movwf	??_setDelayOff_GO
  6998  0933  0878               	movf	_DelayOff,w
  6999  0934  0086               	movwf	6
  7000  0935  3001               	movlw	1	; select bank2/3
  7001  0936  0087               	movwf	7
  7002  0937  0DAC               	rlf	??_setDelayOff_GO,f
  7003  0938  0801               	movf	1,w
  7004  0939  062C               	xorwf	??_setDelayOff_GO,w
  7005  093A  39FD               	andlw	-3
  7006  093B  062C               	xorwf	??_setDelayOff_GO,w
  7007  093C  0081               	movwf	1
  7008                           
  7009                           ;DelayOff_B1.c: 90: if (command == 1) {
  7010  093D  082A               	movf	setDelayOff_GO@command,w
  7011  093E  3A01               	xorlw	1
  7012  093F  1D03               	skipz
  7013  0940  296B               	goto	l6041
  7014                           
  7015                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7016  0941  082B               	movf	setDelayOff_GO@value,w
  7017  0942  3191  21D4  3189   	fcall	_DelayTimejudge
  7018  0945  0020               	movlb	0	; select bank0
  7019  0946  00AC               	movwf	??_setDelayOff_GO
  7020  0947  0A78               	incf	_DelayOff,w
  7021  0948  0086               	movwf	6
  7022  0949  3001               	movlw	1	; select bank2/3
  7023  094A  0087               	movwf	7
  7024  094B  082C               	movf	??_setDelayOff_GO,w
  7025  094C  0081               	movwf	1
  7026                           
  7027                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7028  094D  300F               	movlw	15
  7029  094E  052B               	andwf	setDelayOff_GO@value,w
  7030  094F  00AC               	movwf	??_setDelayOff_GO
  7031  0950  082C               	movf	??_setDelayOff_GO,w
  7032  0951  3A05               	xorlw	5
  7033  0952  1903               	skipnz
  7034  0953  2958               	goto	l6035
  7035  0954  082B               	movf	setDelayOff_GO@value,w
  7036  0955  390F               	andlw	15
  7037  0956  1D03               	btfss	3,2
  7038  0957  295E               	goto	l6039
  7039  0958                     l6035:	
  7040  0958  3026               	movlw	38
  7041  0959  022B               	subwf	setDelayOff_GO@value,w
  7042  095A  1803               	skipnc
  7043  095B  295E               	goto	l6039
  7044                           
  7045                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7046  095C  082B               	movf	setDelayOff_GO@value,w
  7047  095D  295F               	goto	L4
  7048  095E                     l6039:	
  7049                           ;DelayOff_B1.c: 94: } else {
  7050                           
  7051                           
  7052                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7053  095E  3005               	movlw	5
  7054  095F                     L4:	
  7055  095F  00AC               	movwf	??_setDelayOff_GO
  7056  0960  082E               	movf	setDelayOff_GO@sw,w
  7057  0961  3E1A               	addlw	26
  7058  0962  076E               	addwf	_product,w
  7059  0963  00AD               	movwf	??_setDelayOff_GO+1
  7060  0964  082D               	movf	??_setDelayOff_GO+1,w
  7061  0965  0086               	movwf	6
  7062  0966  3002               	movlw	2	; select bank4/5
  7063  0967  0087               	movwf	7
  7064  0968  082C               	movf	??_setDelayOff_GO,w
  7065  0969  0081               	movwf	1
  7066                           
  7067                           ;DelayOff_B1.c: 96: }
  7068                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7069  096A  2977               	goto	l6045
  7070  096B                     l6041:	
  7071  096B  08AA               	movf	setDelayOff_GO@command,f
  7072  096C  1D03               	skipz
  7073  096D  2977               	goto	l6045
  7074                           
  7075                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7076  096E  082E               	movf	setDelayOff_GO@sw,w
  7077  096F  3E1A               	addlw	26
  7078  0970  076E               	addwf	_product,w
  7079  0971  00AC               	movwf	??_setDelayOff_GO
  7080  0972  082C               	movf	??_setDelayOff_GO,w
  7081  0973  0086               	movwf	6
  7082  0974  3002               	movlw	2	; select bank4/5
  7083  0975  0087               	movwf	7
  7084  0976  0181               	clrf	1
  7085  0977                     l6045:	
  7086                           
  7087                           ;DelayOff_B1.c: 99: }
  7088                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7089  0977  0878               	movf	_DelayOff,w
  7090  0978  3E02               	addlw	2
  7091  0979  0086               	movwf	6
  7092  097A  3001               	movlw	1	; select bank2/3
  7093  097B  0087               	movwf	7
  7094  097C  3000               	movlw	0
  7095  097D  3FC0               	movwi [0]fsr1
  7096  097E  3FC1               	movwi [1]fsr1
  7097                           
  7098                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7099  097F  0878               	movf	_DelayOff,w
  7100  0980  3E04               	addlw	4
  7101  0981  0086               	movwf	6
  7102  0982  3001               	movlw	1	; select bank2/3
  7103  0983  0087               	movwf	7
  7104  0984  0181               	clrf	1
  7105  0985  0008               	return
  7106  0986                     __end_of_setDelayOff_GO:	
  7107                           
  7108                           	psect	text24
  7109  11D4                     __ptext24:	
  7110 ;; *************** function _DelayTimejudge *****************
  7111 ;; Defined at:
  7112 ;;		line 106 in file "../src/DelayOff_B1.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;  value           1    wreg     unsigned char 
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;  value           1    9[BANK0 ] unsigned char 
  7117 ;;  k               1    8[BANK0 ] unsigned char 
  7118 ;;  j               1    7[BANK0 ] unsigned char 
  7119 ;;  i               1    6[BANK0 ] unsigned char 
  7120 ;; Return value:  Size  Location     Type
  7121 ;;                  1    wreg      unsigned char 
  7122 ;; Registers used:
  7123 ;;		wreg, status,2, status,0, pclath, cstack
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7130 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7131 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7132 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7133 ;;Total ram usage:        6 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:    6
  7136 ;; This function calls:
  7137 ;;		___bmul
  7138 ;; This function is called by:
  7139 ;;		_setDelayOff_GO
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           
  7144                           ;psect for function _DelayTimejudge
  7145  11D4                     _DelayTimejudge:	
  7146                           
  7147                           ;incstack = 0
  7148                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7149                           ;DelayTimejudge@value stored from wreg
  7150  11D4  0020               	movlb	0	; select bank0
  7151  11D5  00A9               	movwf	DelayTimejudge@value
  7152                           
  7153                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7154  11D6  3005               	movlw	5
  7155  11D7  00A4               	movwf	??_DelayTimejudge
  7156  11D8  0824               	movf	??_DelayTimejudge,w
  7157  11D9  00A6               	movwf	DelayTimejudge@i
  7158  11DA  01A7               	clrf	DelayTimejudge@j
  7159  11DB  01A8               	clrf	DelayTimejudge@k
  7160                           
  7161                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7162  11DC  3031               	movlw	49
  7163  11DD  0229               	subwf	DelayTimejudge@value,w
  7164  11DE  1803               	skipnc
  7165  11DF  29FC               	goto	l5837
  7166                           
  7167                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7168  11E0  0829               	movf	DelayTimejudge@value,w
  7169  11E1  390F               	andlw	15
  7170  11E2  00A4               	movwf	??_DelayTimejudge
  7171  11E3  0824               	movf	??_DelayTimejudge,w
  7172  11E4  00A7               	movwf	DelayTimejudge@j
  7173                           
  7174                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7175  11E5  0829               	movf	DelayTimejudge@value,w
  7176  11E6  00A4               	movwf	??_DelayTimejudge
  7177  11E7  3004               	movlw	4
  7178  11E8                     u4685:	
  7179  11E8  36A4               	lsrf	??_DelayTimejudge,f
  7180  11E9  0B89               	decfsz	9,f
  7181  11EA  29E8               	goto	u4685
  7182  11EB  0824               	movf	??_DelayTimejudge,w
  7183  11EC  390F               	andlw	15
  7184  11ED  00A5               	movwf	??_DelayTimejudge+1
  7185  11EE  0825               	movf	??_DelayTimejudge+1,w
  7186  11EF  00A8               	movwf	DelayTimejudge@k
  7187                           
  7188                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7189  11F0  300A               	movlw	10
  7190  11F1  00A4               	movwf	??_DelayTimejudge
  7191  11F2  0824               	movf	??_DelayTimejudge,w
  7192  11F3  00A0               	movwf	___bmul@multiplicand
  7193  11F4  0828               	movf	DelayTimejudge@k,w
  7194  11F5  319D  259B         	fcall	___bmul
  7195  11F7  0020               	movlb	0	; select bank0
  7196  11F8  0727               	addwf	DelayTimejudge@j,w
  7197  11F9  00A5               	movwf	??_DelayTimejudge+1
  7198  11FA  0825               	movf	??_DelayTimejudge+1,w
  7199  11FB  00A6               	movwf	DelayTimejudge@i
  7200  11FC                     l5837:	
  7201                           
  7202                           ;DelayOff_B1.c: 112: }
  7203                           ;DelayOff_B1.c: 133: return i;
  7204  11FC  0826               	movf	DelayTimejudge@i,w
  7205  11FD  0008               	return
  7206  11FE                     __end_of_DelayTimejudge:	
  7207                           
  7208                           	psect	text25
  7209  1D9B                     __ptext25:	
  7210 ;; *************** function ___bmul *****************
  7211 ;; Defined at:
  7212 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;  multiplier      1    wreg     unsigned char 
  7215 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7218 ;;  product         1    2[BANK0 ] unsigned char 
  7219 ;; Return value:  Size  Location     Type
  7220 ;;                  1    wreg      unsigned char 
  7221 ;; Registers used:
  7222 ;;		wreg, status,2, status,0
  7223 ;; Tracked objects:
  7224 ;;		On entry : 0/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7228 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7232 ;;Total ram usage:        4 bytes
  7233 ;; Hardware stack levels used:    1
  7234 ;; Hardware stack levels required when called:    5
  7235 ;; This function calls:
  7236 ;;		Nothing
  7237 ;; This function is called by:
  7238 ;;		_DelayTimejudge
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           
  7243                           ;psect for function ___bmul
  7244  1D9B                     ___bmul:	
  7245                           
  7246                           ;incstack = 0
  7247                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7248                           ;___bmul@multiplier stored from wreg
  7249  1D9B  0020               	movlb	0	; select bank0
  7250  1D9C  00A3               	movwf	___bmul@multiplier
  7251  1D9D  01A2               	clrf	___bmul@product
  7252  1D9E                     l5803:	
  7253  1D9E  1C23               	btfss	___bmul@multiplier,0
  7254  1D9F  2DA4               	goto	l5807
  7255  1DA0  0820               	movf	___bmul@multiplicand,w
  7256  1DA1  00A1               	movwf	??___bmul
  7257  1DA2  0821               	movf	??___bmul,w
  7258  1DA3  07A2               	addwf	___bmul@product,f
  7259  1DA4                     l5807:	
  7260  1DA4  1003               	clrc
  7261  1DA5  0DA0               	rlf	___bmul@multiplicand,f
  7262  1DA6  1003               	clrc
  7263  1DA7  0CA3               	rrf	___bmul@multiplier,f
  7264  1DA8  08A3               	movf	___bmul@multiplier,f
  7265  1DA9  1D03               	skipz
  7266  1DAA  2D9E               	goto	l5803
  7267  1DAB  0822               	movf	___bmul@product,w
  7268  1DAC  0008               	return
  7269  1DAD                     __end_of___bmul:	
  7270                           
  7271                           	psect	text26
  7272  135B                     __ptext26:	
  7273 ;; *************** function _setRFSW_AdjControl *****************
  7274 ;; Defined at:
  7275 ;;		line 381 in file "../src/RF_Control_B1.c"
  7276 ;; Parameters:    Size  Location     Type
  7277 ;;  sw              1    wreg     unsigned char 
  7278 ;; Auto vars:     Size  Location     Type
  7279 ;;  sw              1   70[BANK0 ] unsigned char 
  7280 ;; Return value:  Size  Location     Type
  7281 ;;		None               void
  7282 ;; Registers used:
  7283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7284 ;; Tracked objects:
  7285 ;;		On entry : 0/0
  7286 ;;		On exit  : 0/0
  7287 ;;		Unchanged: 0/0
  7288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;Total ram usage:        3 bytes
  7294 ;; Hardware stack levels used:    1
  7295 ;; Hardware stack levels required when called:   10
  7296 ;; This function calls:
  7297 ;;		_RfSWPointSelect
  7298 ;;		_setRF_DimmerValue
  7299 ;;		_setTxData
  7300 ;; This function is called by:
  7301 ;;		_setControl_Lights_Table
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           
  7306                           ;psect for function _setRFSW_AdjControl
  7307  135B                     _setRFSW_AdjControl:	
  7308                           
  7309                           ;incstack = 0
  7310                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7311                           ;setRFSW_AdjControl@sw stored from wreg
  7312  135B  0020               	movlb	0	; select bank0
  7313  135C  00E6               	movwf	setRFSW_AdjControl@sw
  7314                           
  7315                           ;RF_Control_B1.c: 382: RfSWPointSelect(sw);
  7316  135D  0866               	movf	setRFSW_AdjControl@sw,w
  7317  135E  319E  263B  3193   	fcall	_RfSWPointSelect
  7318                           
  7319                           ;RF_Control_B1.c: 383: if (RFSW->Status == 1) {
  7320  1361  0021               	movlb	1	; select bank1
  7321  1362  0863               	movf	_RFSW^(0+128),w
  7322  1363  0086               	movwf	6
  7323  1364  0187               	clrf	7
  7324  1365  1C01               	btfss	1,0
  7325  1366  2B6F               	goto	l6279
  7326                           
  7327                           ;RF_Control_B1.c: 384: Memory.Modify=1;
  7328  1367  0024               	movlb	4	; select bank4
  7329  1368  1444               	bsf	(_Memory^(0+512)+36),0
  7330                           
  7331                           ;RF_Control_B1.c: 385: setRF_DimmerValue(sw);
  7332  1369  0020               	movlb	0	; select bank0
  7333  136A  0866               	movf	setRFSW_AdjControl@sw,w
  7334  136B  3192  22B7  3193   	fcall	_setRF_DimmerValue
  7335                           
  7336                           ;RF_Control_B1.c: 386: } else {
  7337  136E  2B81               	goto	l2211
  7338  136F                     l6279:	
  7339                           
  7340                           ;RF_Control_B1.c: 387: product->Data[9]=product->Data[20 + sw];
  7341  136F  0020               	movlb	0	; select bank0
  7342  1370  0866               	movf	setRFSW_AdjControl@sw,w
  7343  1371  3E14               	addlw	20
  7344  1372  076E               	addwf	_product,w
  7345  1373  00E4               	movwf	??_setRFSW_AdjControl
  7346  1374  0864               	movf	??_setRFSW_AdjControl,w
  7347  1375  0086               	movwf	6
  7348  1376  3002               	movlw	2	; select bank4/5
  7349  1377  0087               	movwf	7
  7350  1378  0801               	movf	1,w
  7351  1379  00E5               	movwf	??_setRFSW_AdjControl+1
  7352  137A  086E               	movf	_product,w
  7353  137B  3E09               	addlw	9
  7354  137C  0086               	movwf	6
  7355  137D  3002               	movlw	2	; select bank4/5
  7356  137E  0087               	movwf	7
  7357  137F  0865               	movf	??_setRFSW_AdjControl+1,w
  7358  1380  0081               	movwf	1
  7359  1381                     l2211:	
  7360                           
  7361                           ;RF_Control_B1.c: 388: }
  7362                           ;RF_Control_B1.c: 389: product->Data[17]=product->Data[26 + sw];
  7363  1381  0020               	movlb	0	; select bank0
  7364  1382  0866               	movf	setRFSW_AdjControl@sw,w
  7365  1383  3E1A               	addlw	26
  7366  1384  076E               	addwf	_product,w
  7367  1385  00E4               	movwf	??_setRFSW_AdjControl
  7368  1386  0864               	movf	??_setRFSW_AdjControl,w
  7369  1387  0086               	movwf	6
  7370  1388  3002               	movlw	2	; select bank4/5
  7371  1389  0087               	movwf	7
  7372  138A  0801               	movf	1,w
  7373  138B  00E5               	movwf	??_setRFSW_AdjControl+1
  7374  138C  086E               	movf	_product,w
  7375  138D  3E11               	addlw	17
  7376  138E  0086               	movwf	6
  7377  138F  3002               	movlw	2	; select bank4/5
  7378  1390  0087               	movwf	7
  7379  1391  0865               	movf	??_setRFSW_AdjControl+1,w
  7380  1392  0081               	movwf	1
  7381                           
  7382                           ;RF_Control_B1.c: 390: setTxData();
  7383  1393  3186  2689         	fcall	_setTxData
  7384  1395  0008               	return
  7385  1396                     __end_of_setRFSW_AdjControl:	
  7386                           
  7387                           	psect	text27
  7388  12B7                     __ptext27:	
  7389 ;; *************** function _setRF_DimmerValue *****************
  7390 ;; Defined at:
  7391 ;;		line 401 in file "../src/RF_Control_B1.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;  lights          1    wreg     unsigned char 
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;  lights          1   67[BANK0 ] unsigned char 
  7396 ;; Return value:  Size  Location     Type
  7397 ;;		None               void
  7398 ;; Registers used:
  7399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7400 ;; Tracked objects:
  7401 ;;		On entry : 0/0
  7402 ;;		On exit  : 0/0
  7403 ;;		Unchanged: 0/0
  7404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;Total ram usage:        3 bytes
  7410 ;; Hardware stack levels used:    1
  7411 ;; Hardware stack levels required when called:    9
  7412 ;; This function calls:
  7413 ;;		_setDimmerLights_AdjRF
  7414 ;; This function is called by:
  7415 ;;		_setRFSW_AdjControl
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           
  7420                           ;psect for function _setRF_DimmerValue
  7421  12B7                     _setRF_DimmerValue:	
  7422                           
  7423                           ;incstack = 0
  7424                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7425                           ;setRF_DimmerValue@lights stored from wreg
  7426  12B7  0020               	movlb	0	; select bank0
  7427  12B8  00E3               	movwf	setRF_DimmerValue@lights
  7428                           
  7429                           ;RF_Control_B1.c: 402: if (RF_Data[9] > 0x64) {
  7430  12B9  3065               	movlw	101
  7431  12BA  0021               	movlb	1	; select bank1
  7432  12BB  023F               	subwf	(_RF_Data^(0+128)+9),w
  7433  12BC  1C03               	skipc
  7434  12BD  2AC4               	goto	l6131
  7435                           
  7436                           ;RF_Control_B1.c: 403: RF_Data[9] = 0x64;
  7437  12BE  3064               	movlw	100
  7438  12BF  0020               	movlb	0	; select bank0
  7439  12C0  00E1               	movwf	??_setRF_DimmerValue
  7440  12C1  0861               	movf	??_setRF_DimmerValue,w
  7441  12C2  0021               	movlb	1	; select bank1
  7442  12C3  00BF               	movwf	(_RF_Data^(0+128)+9)
  7443  12C4                     l6131:	
  7444                           
  7445                           ;RF_Control_B1.c: 404: }
  7446                           ;RF_Control_B1.c: 405: product->Data[9]=RF_Data[9];
  7447  12C4  083F               	movf	(_RF_Data^(0+128)+9),w
  7448  12C5  0020               	movlb	0	; select bank0
  7449  12C6  00E1               	movwf	??_setRF_DimmerValue
  7450  12C7  086E               	movf	_product,w
  7451  12C8  3E09               	addlw	9
  7452  12C9  0086               	movwf	6
  7453  12CA  3002               	movlw	2	; select bank4/5
  7454  12CB  0087               	movwf	7
  7455  12CC  0861               	movf	??_setRF_DimmerValue,w
  7456  12CD  0081               	movwf	1
  7457                           
  7458                           ;RF_Control_B1.c: 406: product->Data[11]=lights;
  7459  12CE  0863               	movf	setRF_DimmerValue@lights,w
  7460  12CF  00E1               	movwf	??_setRF_DimmerValue
  7461  12D0  086E               	movf	_product,w
  7462  12D1  3E0B               	addlw	11
  7463  12D2  0086               	movwf	6
  7464  12D3  3002               	movlw	2	; select bank4/5
  7465  12D4  0087               	movwf	7
  7466  12D5  0861               	movf	??_setRF_DimmerValue,w
  7467  12D6  0081               	movwf	1
  7468                           
  7469                           ;RF_Control_B1.c: 407: product->Data[(20 + lights)]=product->Data[9];
  7470  12D7  086E               	movf	_product,w
  7471  12D8  3E09               	addlw	9
  7472  12D9  0086               	movwf	6
  7473  12DA  3002               	movlw	2	; select bank4/5
  7474  12DB  0087               	movwf	7
  7475  12DC  0801               	movf	1,w
  7476  12DD  00E1               	movwf	??_setRF_DimmerValue
  7477  12DE  0863               	movf	setRF_DimmerValue@lights,w
  7478  12DF  3E14               	addlw	20
  7479  12E0  076E               	addwf	_product,w
  7480  12E1  00E2               	movwf	??_setRF_DimmerValue+1
  7481  12E2  0862               	movf	??_setRF_DimmerValue+1,w
  7482  12E3  0086               	movwf	6
  7483  12E4  3002               	movlw	2	; select bank4/5
  7484  12E5  0087               	movwf	7
  7485  12E6  0861               	movf	??_setRF_DimmerValue,w
  7486  12E7  0081               	movwf	1
  7487                           
  7488                           ;RF_Control_B1.c: 408: setDimmerLights_AdjRF(lights);
  7489  12E8  0863               	movf	setRF_DimmerValue@lights,w
  7490  12E9  3191  213A         	fcall	_setDimmerLights_AdjRF
  7491  12EB  0008               	return
  7492  12EC                     __end_of_setRF_DimmerValue:	
  7493                           
  7494                           	psect	text28
  7495  113A                     __ptext28:	
  7496 ;; *************** function _setDimmerLights_AdjRF *****************
  7497 ;; Defined at:
  7498 ;;		line 679 in file "../src/Dimmer_B1.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;  lights          1    wreg     unsigned char 
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;  lights          1   64[BANK0 ] unsigned char 
  7503 ;; Return value:  Size  Location     Type
  7504 ;;		None               void
  7505 ;; Registers used:
  7506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7507 ;; Tracked objects:
  7508 ;;		On entry : 0/0
  7509 ;;		On exit  : 0/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;Total ram usage:        2 bytes
  7517 ;; Hardware stack levels used:    1
  7518 ;; Hardware stack levels required when called:    8
  7519 ;; This function calls:
  7520 ;;		_DimmerLightsPointSelect
  7521 ;;		_getPercentValue
  7522 ;; This function is called by:
  7523 ;;		_setRF_DimmerValue
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           
  7528                           ;psect for function _setDimmerLights_AdjRF
  7529  113A                     _setDimmerLights_AdjRF:	
  7530                           
  7531                           ;incstack = 0
  7532                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7533                           ;setDimmerLights_AdjRF@lights stored from wreg
  7534  113A  0020               	movlb	0	; select bank0
  7535  113B  00E0               	movwf	setDimmerLights_AdjRF@lights
  7536                           
  7537                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  7538  113C  0860               	movf	setDimmerLights_AdjRF@lights,w
  7539  113D  319D  25AD  3191   	fcall	_DimmerLightsPointSelect
  7540                           
  7541                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  7542  1140  0879               	movf	_DimmerLights,w
  7543  1141  0086               	movwf	6
  7544  1142  3001               	movlw	1	; select bank2/3
  7545  1143  0087               	movwf	7
  7546  1144  1501               	bsf	1,2
  7547                           
  7548                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  7549  1145  0879               	movf	_DimmerLights,w
  7550  1146  0086               	movwf	6
  7551  1147  3001               	movlw	1	; select bank2/3
  7552  1148  0087               	movwf	7
  7553  1149  1481               	bsf	1,1
  7554                           
  7555                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7556  114A  0020               	movlb	0	; select bank0
  7557  114B  086E               	movf	_product,w
  7558  114C  3E09               	addlw	9
  7559  114D  0086               	movwf	6
  7560  114E  3002               	movlw	2	; select bank4/5
  7561  114F  0087               	movwf	7
  7562  1150  0801               	movf	1,w
  7563  1151  3197  27A5         	fcall	_getPercentValue
  7564  1153  0020               	movlb	0	; select bank0
  7565  1154  00DF               	movwf	??_setDimmerLights_AdjRF
  7566  1155  0879               	movf	_DimmerLights,w
  7567  1156  3E05               	addlw	5
  7568  1157  0086               	movwf	6
  7569  1158  3001               	movlw	1	; select bank2/3
  7570  1159  0087               	movwf	7
  7571  115A  085F               	movf	??_setDimmerLights_AdjRF,w
  7572  115B  0081               	movwf	1
  7573  115C  0008               	return
  7574  115D                     __end_of_setDimmerLights_AdjRF:	
  7575                           
  7576                           	psect	text29
  7577  17A5                     __ptext29:	
  7578 ;; *************** function _getPercentValue *****************
  7579 ;; Defined at:
  7580 ;;		line 752 in file "../src/Dimmer_B1.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;  value           1    wreg     unsigned char 
  7583 ;; Auto vars:     Size  Location     Type
  7584 ;;  value           1   59[BANK0 ] unsigned char 
  7585 ;;  i               3   60[BANK0 ] float 
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1    wreg      unsigned char 
  7588 ;; Registers used:
  7589 ;;		wreg, status,2, status,0, pclath, cstack
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;Total ram usage:        6 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:    7
  7602 ;; This function calls:
  7603 ;;		___awtoft
  7604 ;;		___ftadd
  7605 ;;		___ftdiv
  7606 ;;		___ftmul
  7607 ;;		___fttol
  7608 ;; This function is called by:
  7609 ;;		_setDimmerLights_AdjRF
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           
  7614                           ;psect for function _getPercentValue
  7615  17A5                     _getPercentValue:	
  7616                           
  7617                           ;incstack = 0
  7618                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7619                           ;getPercentValue@value stored from wreg
  7620  17A5  0020               	movlb	0	; select bank0
  7621  17A6  00DB               	movwf	getPercentValue@value
  7622                           
  7623                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  7624  17A7  3000               	movlw	0
  7625  17A8  00DC               	movwf	getPercentValue@i
  7626  17A9  30E0               	movlw	224
  7627  17AA  00DD               	movwf	getPercentValue@i+1
  7628  17AB  3041               	movlw	65
  7629  17AC  00DE               	movwf	getPercentValue@i+2
  7630                           
  7631                           ;Dimmer_B1.c: 755: i /= 100;
  7632  17AD  3000               	movlw	0
  7633  17AE  00AE               	movwf	___ftdiv@f2
  7634  17AF  30C8               	movlw	200
  7635  17B0  00AF               	movwf	___ftdiv@f2+1
  7636  17B1  3042               	movlw	66
  7637  17B2  00B0               	movwf	___ftdiv@f2+2
  7638  17B3  085C               	movf	getPercentValue@i,w
  7639  17B4  00B1               	movwf	___ftdiv@f1
  7640  17B5  085D               	movf	getPercentValue@i+1,w
  7641  17B6  00B2               	movwf	___ftdiv@f1+1
  7642  17B7  085E               	movf	getPercentValue@i+2,w
  7643  17B8  00B3               	movwf	___ftdiv@f1+2
  7644  17B9  318F  2757  3197   	fcall	___ftdiv
  7645  17BC  0020               	movlb	0	; select bank0
  7646  17BD  082E               	movf	?___ftdiv,w
  7647  17BE  00DC               	movwf	getPercentValue@i
  7648  17BF  082F               	movf	?___ftdiv+1,w
  7649  17C0  00DD               	movwf	getPercentValue@i+1
  7650  17C1  0830               	movf	?___ftdiv+2,w
  7651  17C2  00DE               	movwf	getPercentValue@i+2
  7652                           
  7653                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  7654  17C3  085B               	movf	getPercentValue@value,w
  7655  17C4  00D9               	movwf	??_getPercentValue
  7656  17C5  01DA               	clrf	??_getPercentValue+1
  7657  17C6  09D9               	comf	??_getPercentValue,f
  7658  17C7  09DA               	comf	??_getPercentValue+1,f
  7659  17C8  0AD9               	incf	??_getPercentValue,f
  7660  17C9  1903               	skipnz
  7661  17CA  0ADA               	incf	??_getPercentValue+1,f
  7662  17CB  0859               	movf	??_getPercentValue,w
  7663  17CC  3E64               	addlw	100
  7664  17CD  00A8               	movwf	___awtoft@c
  7665  17CE  3000               	movlw	0
  7666  17CF  3D5A               	addwfc	??_getPercentValue+1,w
  7667  17D0  00A9               	movwf	___awtoft@c+1
  7668  17D1  3190  20D3  3197   	fcall	___awtoft
  7669  17D4  0020               	movlb	0	; select bank0
  7670  17D5  0828               	movf	?___awtoft,w
  7671  17D6  00B1               	movwf	___ftmul@f2
  7672  17D7  0829               	movf	?___awtoft+1,w
  7673  17D8  00B2               	movwf	___ftmul@f2+1
  7674  17D9  082A               	movf	?___awtoft+2,w
  7675  17DA  00B3               	movwf	___ftmul@f2+2
  7676  17DB  085C               	movf	getPercentValue@i,w
  7677  17DC  00AE               	movwf	___ftmul@f1
  7678  17DD  085D               	movf	getPercentValue@i+1,w
  7679  17DE  00AF               	movwf	___ftmul@f1+1
  7680  17DF  085E               	movf	getPercentValue@i+2,w
  7681  17E0  00B0               	movwf	___ftmul@f1+2
  7682  17E1  3187  2742  3197   	fcall	___ftmul
  7683  17E4  0020               	movlb	0	; select bank0
  7684  17E5  082E               	movf	?___ftmul,w
  7685  17E6  00C1               	movwf	___ftadd@f2
  7686  17E7  082F               	movf	?___ftmul+1,w
  7687  17E8  00C2               	movwf	___ftadd@f2+1
  7688  17E9  0830               	movf	?___ftmul+2,w
  7689  17EA  00C3               	movwf	___ftadd@f2+2
  7690  17EB  3000               	movlw	0
  7691  17EC  00BE               	movwf	___ftadd@f1
  7692  17ED  3000               	movlw	0
  7693  17EE  00BF               	movwf	___ftadd@f1+1
  7694  17EF  3042               	movlw	66
  7695  17F0  00C0               	movwf	___ftadd@f1+2
  7696  17F1  3184  24CC  3197   	fcall	___ftadd
  7697  17F4  0020               	movlb	0	; select bank0
  7698  17F5  083E               	movf	?___ftadd,w
  7699  17F6  00CB               	movwf	___fttol@f1
  7700  17F7  083F               	movf	?___ftadd+1,w
  7701  17F8  00CC               	movwf	___fttol@f1+1
  7702  17F9  0840               	movf	?___ftadd+2,w
  7703  17FA  00CD               	movwf	___fttol@f1+2
  7704  17FB  318D  252C         	fcall	___fttol
  7705  17FD  0020               	movlb	0	; select bank0
  7706  17FE  084B               	movf	?___fttol,w
  7707  17FF  0008               	return
  7708  1800                     __end_of_getPercentValue:	
  7709                           
  7710                           	psect	text30
  7711  0742                     __ptext30:	
  7712 ;; *************** function ___ftmul *****************
  7713 ;; Defined at:
  7714 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;  f1              3   14[BANK0 ] float 
  7717 ;;  f2              3   17[BANK0 ] float 
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7720 ;;  sign            1   29[BANK0 ] unsigned char 
  7721 ;;  cntr            1   28[BANK0 ] unsigned char 
  7722 ;;  exp             1   24[BANK0 ] unsigned char 
  7723 ;; Return value:  Size  Location     Type
  7724 ;;                  3   14[BANK0 ] float 
  7725 ;; Registers used:
  7726 ;;		wreg, status,2, status,0, pclath, cstack
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7732 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7733 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7734 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;Total ram usage:       16 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; Hardware stack levels required when called:    6
  7739 ;; This function calls:
  7740 ;;		___ftpack
  7741 ;; This function is called by:
  7742 ;;		_getPercentValue
  7743 ;; This function uses a non-reentrant model
  7744 ;;
  7745                           
  7746                           
  7747                           ;psect for function ___ftmul
  7748  0742                     ___ftmul:	
  7749                           
  7750                           ;incstack = 0
  7751                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7752  0742  0020               	movlb	0	; select bank0
  7753  0743  082E               	movf	___ftmul@f1,w
  7754  0744  00B4               	movwf	??___ftmul
  7755  0745  082F               	movf	___ftmul@f1+1,w
  7756  0746  00B5               	movwf	??___ftmul+1
  7757  0747  0830               	movf	___ftmul@f1+2,w
  7758  0748  00B6               	movwf	??___ftmul+2
  7759  0749  1003               	clrc
  7760  074A  0D35               	rlf	??___ftmul+1,w
  7761  074B  0D36               	rlf	??___ftmul+2,w
  7762  074C  00B7               	movwf	??___ftmul+3
  7763  074D  0837               	movf	??___ftmul+3,w
  7764  074E  00B8               	movwf	___ftmul@exp
  7765  074F  08B8               	movf	___ftmul@exp,f
  7766  0750  1D03               	skipz
  7767  0751  2F59               	goto	l5699
  7768  0752  3000               	movlw	0
  7769  0753  00AE               	movwf	?___ftmul
  7770  0754  3000               	movlw	0
  7771  0755  00AF               	movwf	?___ftmul+1
  7772  0756  3000               	movlw	0
  7773  0757  00B0               	movwf	?___ftmul+2
  7774  0758  0008               	return
  7775  0759                     l5699:	
  7776  0759  0831               	movf	___ftmul@f2,w
  7777  075A  00B4               	movwf	??___ftmul
  7778  075B  0832               	movf	___ftmul@f2+1,w
  7779  075C  00B5               	movwf	??___ftmul+1
  7780  075D  0833               	movf	___ftmul@f2+2,w
  7781  075E  00B6               	movwf	??___ftmul+2
  7782  075F  1003               	clrc
  7783  0760  0D35               	rlf	??___ftmul+1,w
  7784  0761  0D36               	rlf	??___ftmul+2,w
  7785  0762  00B7               	movwf	??___ftmul+3
  7786  0763  0837               	movf	??___ftmul+3,w
  7787  0764  00BD               	movwf	___ftmul@sign
  7788  0765  08BD               	movf	___ftmul@sign,f
  7789  0766  1D03               	skipz
  7790  0767  2F6F               	goto	l5705
  7791  0768  3000               	movlw	0
  7792  0769  00AE               	movwf	?___ftmul
  7793  076A  3000               	movlw	0
  7794  076B  00AF               	movwf	?___ftmul+1
  7795  076C  3000               	movlw	0
  7796  076D  00B0               	movwf	?___ftmul+2
  7797  076E  0008               	return
  7798  076F                     l5705:	
  7799  076F  083D               	movf	___ftmul@sign,w
  7800  0770  3E7B               	addlw	123
  7801  0771  00B4               	movwf	??___ftmul
  7802  0772  0834               	movf	??___ftmul,w
  7803  0773  07B8               	addwf	___ftmul@exp,f
  7804  0774  082E               	movf	___ftmul@f1,w
  7805  0775  00B4               	movwf	??___ftmul
  7806  0776  082F               	movf	___ftmul@f1+1,w
  7807  0777  00B5               	movwf	??___ftmul+1
  7808  0778  0830               	movf	___ftmul@f1+2,w
  7809  0779  00B6               	movwf	??___ftmul+2
  7810  077A  3010               	movlw	16
  7811  077B                     u4415:	
  7812  077B  36B6               	lsrf	??___ftmul+2,f
  7813  077C  0CB5               	rrf	??___ftmul+1,f
  7814  077D  0CB4               	rrf	??___ftmul,f
  7815  077E  0B89               	decfsz	9,f
  7816  077F  2F7B               	goto	u4415
  7817  0780  0834               	movf	??___ftmul,w
  7818  0781  00B7               	movwf	??___ftmul+3
  7819  0782  0837               	movf	??___ftmul+3,w
  7820  0783  00BD               	movwf	___ftmul@sign
  7821  0784  0831               	movf	___ftmul@f2,w
  7822  0785  00B4               	movwf	??___ftmul
  7823  0786  0832               	movf	___ftmul@f2+1,w
  7824  0787  00B5               	movwf	??___ftmul+1
  7825  0788  0833               	movf	___ftmul@f2+2,w
  7826  0789  00B6               	movwf	??___ftmul+2
  7827  078A  3010               	movlw	16
  7828  078B                     u4425:	
  7829  078B  36B6               	lsrf	??___ftmul+2,f
  7830  078C  0CB5               	rrf	??___ftmul+1,f
  7831  078D  0CB4               	rrf	??___ftmul,f
  7832  078E  0B89               	decfsz	9,f
  7833  078F  2F8B               	goto	u4425
  7834  0790  0834               	movf	??___ftmul,w
  7835  0791  00B7               	movwf	??___ftmul+3
  7836  0792  0837               	movf	??___ftmul+3,w
  7837  0793  06BD               	xorwf	___ftmul@sign,f
  7838  0794  3080               	movlw	128
  7839  0795  00B4               	movwf	??___ftmul
  7840  0796  0834               	movf	??___ftmul,w
  7841  0797  05BD               	andwf	___ftmul@sign,f
  7842  0798  17AF               	bsf	___ftmul@f1+1,7
  7843  0799  17B2               	bsf	___ftmul@f2+1,7
  7844  079A  30FF               	movlw	255
  7845  079B  05B1               	andwf	___ftmul@f2,f
  7846  079C  30FF               	movlw	255
  7847  079D  05B2               	andwf	___ftmul@f2+1,f
  7848  079E  3000               	movlw	0
  7849  079F  05B3               	andwf	___ftmul@f2+2,f
  7850  07A0  3000               	movlw	0
  7851  07A1  00B9               	movwf	___ftmul@f3_as_product
  7852  07A2  3000               	movlw	0
  7853  07A3  00BA               	movwf	___ftmul@f3_as_product+1
  7854  07A4  3000               	movlw	0
  7855  07A5  00BB               	movwf	___ftmul@f3_as_product+2
  7856  07A6  3007               	movlw	7
  7857  07A7  00B4               	movwf	??___ftmul
  7858  07A8  0834               	movf	??___ftmul,w
  7859  07A9  00BC               	movwf	___ftmul@cntr
  7860  07AA                     l5717:	
  7861  07AA  1C2E               	btfss	___ftmul@f1,0
  7862  07AB  2FB2               	goto	l5721
  7863  07AC  0831               	movf	___ftmul@f2,w
  7864  07AD  07B9               	addwf	___ftmul@f3_as_product,f
  7865  07AE  0832               	movf	___ftmul@f2+1,w
  7866  07AF  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7867  07B0  0833               	movf	___ftmul@f2+2,w
  7868  07B1  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7869  07B2                     l5721:	
  7870  07B2  3001               	movlw	1
  7871  07B3                     u4445:	
  7872  07B3  36B0               	lsrf	___ftmul@f1+2,f
  7873  07B4  0CAF               	rrf	___ftmul@f1+1,f
  7874  07B5  0CAE               	rrf	___ftmul@f1,f
  7875  07B6  0B89               	decfsz	9,f
  7876  07B7  2FB3               	goto	u4445
  7877  07B8  3001               	movlw	1
  7878  07B9                     u4455:	
  7879  07B9  35B1               	lslf	___ftmul@f2,f
  7880  07BA  0DB2               	rlf	___ftmul@f2+1,f
  7881  07BB  0DB3               	rlf	___ftmul@f2+2,f
  7882  07BC  0B89               	decfsz	9,f
  7883  07BD  2FB9               	goto	u4455
  7884  07BE  3001               	movlw	1
  7885  07BF  02BC               	subwf	___ftmul@cntr,f
  7886  07C0  1D03               	btfss	3,2
  7887  07C1  2FAA               	goto	l5717
  7888  07C2  3009               	movlw	9
  7889  07C3  00B4               	movwf	??___ftmul
  7890  07C4  0834               	movf	??___ftmul,w
  7891  07C5  00BC               	movwf	___ftmul@cntr
  7892  07C6                     l5729:	
  7893  07C6  1C2E               	btfss	___ftmul@f1,0
  7894  07C7  2FCE               	goto	l5733
  7895  07C8  0831               	movf	___ftmul@f2,w
  7896  07C9  07B9               	addwf	___ftmul@f3_as_product,f
  7897  07CA  0832               	movf	___ftmul@f2+1,w
  7898  07CB  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7899  07CC  0833               	movf	___ftmul@f2+2,w
  7900  07CD  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7901  07CE                     l5733:	
  7902  07CE  3001               	movlw	1
  7903  07CF                     u4485:	
  7904  07CF  36B0               	lsrf	___ftmul@f1+2,f
  7905  07D0  0CAF               	rrf	___ftmul@f1+1,f
  7906  07D1  0CAE               	rrf	___ftmul@f1,f
  7907  07D2  0B89               	decfsz	9,f
  7908  07D3  2FCF               	goto	u4485
  7909  07D4  3001               	movlw	1
  7910  07D5                     u4495:	
  7911  07D5  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7912  07D6  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7913  07D7  0CB9               	rrf	___ftmul@f3_as_product,f
  7914  07D8  0B89               	decfsz	9,f
  7915  07D9  2FD5               	goto	u4495
  7916  07DA  3001               	movlw	1
  7917  07DB  02BC               	subwf	___ftmul@cntr,f
  7918  07DC  1D03               	btfss	3,2
  7919  07DD  2FC6               	goto	l5729
  7920  07DE  0839               	movf	___ftmul@f3_as_product,w
  7921  07DF  00A0               	movwf	___ftpack@arg
  7922  07E0  083A               	movf	___ftmul@f3_as_product+1,w
  7923  07E1  00A1               	movwf	___ftpack@arg+1
  7924  07E2  083B               	movf	___ftmul@f3_as_product+2,w
  7925  07E3  00A2               	movwf	___ftpack@arg+2
  7926  07E4  0838               	movf	___ftmul@exp,w
  7927  07E5  00B4               	movwf	??___ftmul
  7928  07E6  0834               	movf	??___ftmul,w
  7929  07E7  00A3               	movwf	___ftpack@exp
  7930  07E8  083D               	movf	___ftmul@sign,w
  7931  07E9  00B5               	movwf	??___ftmul+1
  7932  07EA  0835               	movf	??___ftmul+1,w
  7933  07EB  00A4               	movwf	___ftpack@sign
  7934  07EC  3188  20BF         	fcall	___ftpack
  7935  07EE  0020               	movlb	0	; select bank0
  7936  07EF  0820               	movf	?___ftpack,w
  7937  07F0  00AE               	movwf	?___ftmul
  7938  07F1  0821               	movf	?___ftpack+1,w
  7939  07F2  00AF               	movwf	?___ftmul+1
  7940  07F3  0822               	movf	?___ftpack+2,w
  7941  07F4  00B0               	movwf	?___ftmul+2
  7942  07F5  0008               	return
  7943  07F6                     __end_of___ftmul:	
  7944                           
  7945                           	psect	text31
  7946  04CC                     __ptext31:	
  7947 ;; *************** function ___ftadd *****************
  7948 ;; Defined at:
  7949 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7950 ;; Parameters:    Size  Location     Type
  7951 ;;  f1              3   30[BANK0 ] float 
  7952 ;;  f2              3   33[BANK0 ] float 
  7953 ;; Auto vars:     Size  Location     Type
  7954 ;;  exp1            1   42[BANK0 ] unsigned char 
  7955 ;;  exp2            1   41[BANK0 ] unsigned char 
  7956 ;;  sign            1   40[BANK0 ] unsigned char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;                  3   30[BANK0 ] float 
  7959 ;; Registers used:
  7960 ;;		wreg, status,2, status,0, pclath, cstack
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7966 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;Total ram usage:       13 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    6
  7973 ;; This function calls:
  7974 ;;		___ftpack
  7975 ;; This function is called by:
  7976 ;;		_getPercentValue
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           
  7981                           ;psect for function ___ftadd
  7982  04CC                     ___ftadd:	
  7983                           
  7984                           ;incstack = 0
  7985                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7986  04CC  0020               	movlb	0	; select bank0
  7987  04CD  083E               	movf	___ftadd@f1,w
  7988  04CE  00C4               	movwf	??___ftadd
  7989  04CF  083F               	movf	___ftadd@f1+1,w
  7990  04D0  00C5               	movwf	??___ftadd+1
  7991  04D1  0840               	movf	___ftadd@f1+2,w
  7992  04D2  00C6               	movwf	??___ftadd+2
  7993  04D3  1003               	clrc
  7994  04D4  0D45               	rlf	??___ftadd+1,w
  7995  04D5  0D46               	rlf	??___ftadd+2,w
  7996  04D6  00C7               	movwf	??___ftadd+3
  7997  04D7  0847               	movf	??___ftadd+3,w
  7998  04D8  00CA               	movwf	___ftadd@exp1
  7999  04D9  0841               	movf	___ftadd@f2,w
  8000  04DA  00C4               	movwf	??___ftadd
  8001  04DB  0842               	movf	___ftadd@f2+1,w
  8002  04DC  00C5               	movwf	??___ftadd+1
  8003  04DD  0843               	movf	___ftadd@f2+2,w
  8004  04DE  00C6               	movwf	??___ftadd+2
  8005  04DF  1003               	clrc
  8006  04E0  0D45               	rlf	??___ftadd+1,w
  8007  04E1  0D46               	rlf	??___ftadd+2,w
  8008  04E2  00C7               	movwf	??___ftadd+3
  8009  04E3  0847               	movf	??___ftadd+3,w
  8010  04E4  00C9               	movwf	___ftadd@exp2
  8011  04E5  084A               	movf	___ftadd@exp1,w
  8012  04E6  1903               	btfsc	3,2
  8013  04E7  2CF4               	goto	l5587
  8014  04E8  0849               	movf	___ftadd@exp2,w
  8015  04E9  024A               	subwf	___ftadd@exp1,w
  8016  04EA  1803               	skipnc
  8017  04EB  2CFB               	goto	l5591
  8018  04EC  034A               	decf	___ftadd@exp1,w
  8019  04ED  3AFF               	xorlw	255
  8020  04EE  0749               	addwf	___ftadd@exp2,w
  8021  04EF  00C4               	movwf	??___ftadd
  8022  04F0  3019               	movlw	25
  8023  04F1  0244               	subwf	??___ftadd,w
  8024  04F2  1C03               	skipc
  8025  04F3  2CFB               	goto	l5591
  8026  04F4                     l5587:	
  8027  04F4  0841               	movf	___ftadd@f2,w
  8028  04F5  00BE               	movwf	?___ftadd
  8029  04F6  0842               	movf	___ftadd@f2+1,w
  8030  04F7  00BF               	movwf	?___ftadd+1
  8031  04F8  0843               	movf	___ftadd@f2+2,w
  8032  04F9  00C0               	movwf	?___ftadd+2
  8033  04FA  0008               	return
  8034  04FB                     l5591:	
  8035  04FB  0849               	movf	___ftadd@exp2,w
  8036  04FC  1903               	btfsc	3,2
  8037  04FD  0008               	return
  8038  04FE  084A               	movf	___ftadd@exp1,w
  8039  04FF  0249               	subwf	___ftadd@exp2,w
  8040  0500  1803               	skipnc
  8041  0501  2D0A               	goto	l5597
  8042  0502  0349               	decf	___ftadd@exp2,w
  8043  0503  3AFF               	xorlw	255
  8044  0504  074A               	addwf	___ftadd@exp1,w
  8045  0505  00C4               	movwf	??___ftadd
  8046  0506  3019               	movlw	25
  8047  0507  0244               	subwf	??___ftadd,w
  8048  0508  1803               	btfsc	3,0
  8049  0509  0008               	return
  8050  050A                     l5597:	
  8051  050A  3006               	movlw	6
  8052  050B  00C4               	movwf	??___ftadd
  8053  050C  0844               	movf	??___ftadd,w
  8054  050D  00C8               	movwf	___ftadd@sign
  8055  050E  1BC0               	btfsc	___ftadd@f1+2,7
  8056  050F  17C8               	bsf	___ftadd@sign,7
  8057  0510  1BC3               	btfsc	___ftadd@f2+2,7
  8058  0511  1748               	bsf	___ftadd@sign,6
  8059  0512  17BF               	bsf	___ftadd@f1+1,7
  8060  0513  30FF               	movlw	255
  8061  0514  05BE               	andwf	___ftadd@f1,f
  8062  0515  30FF               	movlw	255
  8063  0516  05BF               	andwf	___ftadd@f1+1,f
  8064  0517  3000               	movlw	0
  8065  0518  05C0               	andwf	___ftadd@f1+2,f
  8066  0519  17C2               	bsf	___ftadd@f2+1,7
  8067  051A  30FF               	movlw	255
  8068  051B  05C1               	andwf	___ftadd@f2,f
  8069  051C  30FF               	movlw	255
  8070  051D  05C2               	andwf	___ftadd@f2+1,f
  8071  051E  3000               	movlw	0
  8072  051F  05C3               	andwf	___ftadd@f2+2,f
  8073  0520  0849               	movf	___ftadd@exp2,w
  8074  0521  024A               	subwf	___ftadd@exp1,w
  8075  0522  1803               	skipnc
  8076  0523  2D46               	goto	l5619
  8077  0524                     l5609:	
  8078  0524  3001               	movlw	1
  8079  0525                     u4175:	
  8080  0525  35C1               	lslf	___ftadd@f2,f
  8081  0526  0DC2               	rlf	___ftadd@f2+1,f
  8082  0527  0DC3               	rlf	___ftadd@f2+2,f
  8083  0528  0B89               	decfsz	9,f
  8084  0529  2D25               	goto	u4175
  8085  052A  3001               	movlw	1
  8086  052B  02C9               	subwf	___ftadd@exp2,f
  8087  052C  0849               	movf	___ftadd@exp2,w
  8088  052D  064A               	xorwf	___ftadd@exp1,w
  8089  052E  1903               	skipnz
  8090  052F  2D41               	goto	l5617
  8091  0530  3001               	movlw	1
  8092  0531  02C8               	subwf	___ftadd@sign,f
  8093  0532  0848               	movf	___ftadd@sign,w
  8094  0533  3907               	andlw	7
  8095  0534  1903               	btfsc	3,2
  8096  0535  2D41               	goto	l5617
  8097  0536  2D24               	goto	l5609
  8098  0537                     l5615:	
  8099  0537  3001               	movlw	1
  8100  0538                     u4205:	
  8101  0538  36C0               	lsrf	___ftadd@f1+2,f
  8102  0539  0CBF               	rrf	___ftadd@f1+1,f
  8103  053A  0CBE               	rrf	___ftadd@f1,f
  8104  053B  0B89               	decfsz	9,f
  8105  053C  2D38               	goto	u4205
  8106  053D  3001               	movlw	1
  8107  053E  00C4               	movwf	??___ftadd
  8108  053F  0844               	movf	??___ftadd,w
  8109  0540  07CA               	addwf	___ftadd@exp1,f
  8110  0541                     l5617:	
  8111  0541  084A               	movf	___ftadd@exp1,w
  8112  0542  0649               	xorwf	___ftadd@exp2,w
  8113  0543  1903               	btfsc	3,2
  8114  0544  2D6B               	goto	l2898
  8115  0545  2D37               	goto	l5615
  8116  0546                     l5619:	
  8117  0546  084A               	movf	___ftadd@exp1,w
  8118  0547  0249               	subwf	___ftadd@exp2,w
  8119  0548  1803               	skipnc
  8120  0549  2D6B               	goto	l2898
  8121  054A                     l5621:	
  8122  054A  3001               	movlw	1
  8123  054B                     u4235:	
  8124  054B  35BE               	lslf	___ftadd@f1,f
  8125  054C  0DBF               	rlf	___ftadd@f1+1,f
  8126  054D  0DC0               	rlf	___ftadd@f1+2,f
  8127  054E  0B89               	decfsz	9,f
  8128  054F  2D4B               	goto	u4235
  8129  0550  3001               	movlw	1
  8130  0551  02CA               	subwf	___ftadd@exp1,f
  8131  0552  0849               	movf	___ftadd@exp2,w
  8132  0553  064A               	xorwf	___ftadd@exp1,w
  8133  0554  1903               	skipnz
  8134  0555  2D67               	goto	l5629
  8135  0556  3001               	movlw	1
  8136  0557  02C8               	subwf	___ftadd@sign,f
  8137  0558  0848               	movf	___ftadd@sign,w
  8138  0559  3907               	andlw	7
  8139  055A  1903               	btfsc	3,2
  8140  055B  2D67               	goto	l5629
  8141  055C  2D4A               	goto	l5621
  8142  055D                     l5627:	
  8143  055D  3001               	movlw	1
  8144  055E                     u4265:	
  8145  055E  36C3               	lsrf	___ftadd@f2+2,f
  8146  055F  0CC2               	rrf	___ftadd@f2+1,f
  8147  0560  0CC1               	rrf	___ftadd@f2,f
  8148  0561  0B89               	decfsz	9,f
  8149  0562  2D5E               	goto	u4265
  8150  0563  3001               	movlw	1
  8151  0564  00C4               	movwf	??___ftadd
  8152  0565  0844               	movf	??___ftadd,w
  8153  0566  07C9               	addwf	___ftadd@exp2,f
  8154  0567                     l5629:	
  8155  0567  084A               	movf	___ftadd@exp1,w
  8156  0568  0649               	xorwf	___ftadd@exp2,w
  8157  0569  1D03               	skipz
  8158  056A  2D5D               	goto	l5627
  8159  056B                     l2898:	
  8160  056B  1FC8               	btfss	___ftadd@sign,7
  8161  056C  2D7D               	goto	l5633
  8162  056D  30FF               	movlw	255
  8163  056E  06BE               	xorwf	___ftadd@f1,f
  8164  056F  30FF               	movlw	255
  8165  0570  06BF               	xorwf	___ftadd@f1+1,f
  8166  0571  30FF               	movlw	255
  8167  0572  06C0               	xorwf	___ftadd@f1+2,f
  8168  0573  3001               	movlw	1
  8169  0574  07BE               	addwf	___ftadd@f1,f
  8170  0575  3000               	movlw	0
  8171  0576  1803               	skipnc
  8172  0577  3001               	movlw	1
  8173  0578  07BF               	addwf	___ftadd@f1+1,f
  8174  0579  3000               	movlw	0
  8175  057A  1803               	skipnc
  8176  057B  3001               	movlw	1
  8177  057C  07C0               	addwf	___ftadd@f1+2,f
  8178  057D                     l5633:	
  8179  057D  1F48               	btfss	___ftadd@sign,6
  8180  057E  2D8F               	goto	l5637
  8181  057F  30FF               	movlw	255
  8182  0580  06C1               	xorwf	___ftadd@f2,f
  8183  0581  30FF               	movlw	255
  8184  0582  06C2               	xorwf	___ftadd@f2+1,f
  8185  0583  30FF               	movlw	255
  8186  0584  06C3               	xorwf	___ftadd@f2+2,f
  8187  0585  3001               	movlw	1
  8188  0586  07C1               	addwf	___ftadd@f2,f
  8189  0587  3000               	movlw	0
  8190  0588  1803               	skipnc
  8191  0589  3001               	movlw	1
  8192  058A  07C2               	addwf	___ftadd@f2+1,f
  8193  058B  3000               	movlw	0
  8194  058C  1803               	skipnc
  8195  058D  3001               	movlw	1
  8196  058E  07C3               	addwf	___ftadd@f2+2,f
  8197  058F                     l5637:	
  8198  058F  01C8               	clrf	___ftadd@sign
  8199  0590  083E               	movf	___ftadd@f1,w
  8200  0591  07C1               	addwf	___ftadd@f2,f
  8201  0592  083F               	movf	___ftadd@f1+1,w
  8202  0593  3DC2               	addwfc	___ftadd@f2+1,f
  8203  0594  0840               	movf	___ftadd@f1+2,w
  8204  0595  3DC3               	addwfc	___ftadd@f2+2,f
  8205  0596  1FC3               	btfss	___ftadd@f2+2,7
  8206  0597  2DAA               	goto	l5647
  8207  0598  30FF               	movlw	255
  8208  0599  06C1               	xorwf	___ftadd@f2,f
  8209  059A  30FF               	movlw	255
  8210  059B  06C2               	xorwf	___ftadd@f2+1,f
  8211  059C  30FF               	movlw	255
  8212  059D  06C3               	xorwf	___ftadd@f2+2,f
  8213  059E  3001               	movlw	1
  8214  059F  07C1               	addwf	___ftadd@f2,f
  8215  05A0  3000               	movlw	0
  8216  05A1  1803               	skipnc
  8217  05A2  3001               	movlw	1
  8218  05A3  07C2               	addwf	___ftadd@f2+1,f
  8219  05A4  3000               	movlw	0
  8220  05A5  1803               	skipnc
  8221  05A6  3001               	movlw	1
  8222  05A7  07C3               	addwf	___ftadd@f2+2,f
  8223  05A8  01C8               	clrf	___ftadd@sign
  8224  05A9  0AC8               	incf	___ftadd@sign,f
  8225  05AA                     l5647:	
  8226  05AA  0841               	movf	___ftadd@f2,w
  8227  05AB  00A0               	movwf	___ftpack@arg
  8228  05AC  0842               	movf	___ftadd@f2+1,w
  8229  05AD  00A1               	movwf	___ftpack@arg+1
  8230  05AE  0843               	movf	___ftadd@f2+2,w
  8231  05AF  00A2               	movwf	___ftpack@arg+2
  8232  05B0  084A               	movf	___ftadd@exp1,w
  8233  05B1  00C4               	movwf	??___ftadd
  8234  05B2  0844               	movf	??___ftadd,w
  8235  05B3  00A3               	movwf	___ftpack@exp
  8236  05B4  0848               	movf	___ftadd@sign,w
  8237  05B5  00C5               	movwf	??___ftadd+1
  8238  05B6  0845               	movf	??___ftadd+1,w
  8239  05B7  00A4               	movwf	___ftpack@sign
  8240  05B8  3188  20BF         	fcall	___ftpack
  8241  05BA  0020               	movlb	0	; select bank0
  8242  05BB  0820               	movf	?___ftpack,w
  8243  05BC  00BE               	movwf	?___ftadd
  8244  05BD  0821               	movf	?___ftpack+1,w
  8245  05BE  00BF               	movwf	?___ftadd+1
  8246  05BF  0822               	movf	?___ftpack+2,w
  8247  05C0  00C0               	movwf	?___ftadd+2
  8248  05C1  0008               	return
  8249  05C2                     __end_of___ftadd:	
  8250                           
  8251                           	psect	text32
  8252  1D66                     __ptext32:	
  8253 ;; *************** function _getBuz_GO *****************
  8254 ;; Defined at:
  8255 ;;		line 82 in file "../src/Buzzer_B1.c"
  8256 ;; Parameters:    Size  Location     Type
  8257 ;;		None
  8258 ;; Auto vars:     Size  Location     Type
  8259 ;;  i               2    4[BANK0 ] int 
  8260 ;; Return value:  Size  Location     Type
  8261 ;;                  2    0[BANK0 ] int 
  8262 ;; Registers used:
  8263 ;;		wreg, status,2, status,0
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8269 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;Total ram usage:        6 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; Hardware stack levels required when called:    5
  8276 ;; This function calls:
  8277 ;;		Nothing
  8278 ;; This function is called by:
  8279 ;;		_setRF_Main
  8280 ;; This function uses a non-reentrant model
  8281 ;;
  8282                           
  8283                           
  8284                           ;psect for function _getBuz_GO
  8285  1D66                     _getBuz_GO:	
  8286                           
  8287                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8288                           
  8289                           ;incstack = 0
  8290                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8291  1D66  0021               	movlb	1	; select bank1
  8292  1D67  0C4B               	rrf	_Buz1^(0+128),w
  8293  1D68  3901               	andlw	1
  8294  1D69  0020               	movlb	0	; select bank0
  8295  1D6A  00A2               	movwf	??_getBuz_GO
  8296  1D6B  01A3               	clrf	??_getBuz_GO+1
  8297  1D6C  0822               	movf	??_getBuz_GO,w
  8298  1D6D  00A4               	movwf	getBuz_GO@i
  8299  1D6E  0823               	movf	??_getBuz_GO+1,w
  8300  1D6F  00A5               	movwf	getBuz_GO@i+1
  8301                           
  8302                           ;Buzzer_B1.c: 84: return i;
  8303  1D70  0825               	movf	getBuz_GO@i+1,w
  8304  1D71  01A1               	clrf	?_getBuz_GO+1
  8305  1D72  07A1               	addwf	?_getBuz_GO+1,f
  8306  1D73  0824               	movf	getBuz_GO@i,w
  8307  1D74  01A0               	clrf	?_getBuz_GO
  8308  1D75  07A0               	addwf	?_getBuz_GO,f
  8309  1D76  0008               	return
  8310  1D77                     __end_of_getBuz_GO:	
  8311                           
  8312                           	psect	text33
  8313  1CC7                     __ptext33:	
  8314 ;; *************** function _RF_RxDisable *****************
  8315 ;; Defined at:
  8316 ;;		line 205 in file "../src/RF_Control_B1.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;		None
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;		None
  8321 ;; Return value:  Size  Location     Type
  8322 ;;		None               void
  8323 ;; Registers used:
  8324 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8334 ;;Total ram usage:        0 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; Hardware stack levels required when called:    7
  8337 ;; This function calls:
  8338 ;;		_CC2500_WriteCommand
  8339 ;; This function is called by:
  8340 ;;		_setRF_Main
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           
  8345                           ;psect for function _RF_RxDisable
  8346  1CC7                     _RF_RxDisable:	
  8347                           
  8348                           ;RF_Control_B1.c: 206: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8349                           
  8350                           ;incstack = 0
  8351                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8352  1CC7  0021               	movlb	1	; select bank1
  8353  1CC8  18D7               	btfsc	_RF1^(0+128),1
  8354  1CC9  2CCC               	goto	l2161
  8355  1CCA  1DD7               	btfss	_RF1^(0+128),3
  8356  1CCB  0008               	return
  8357  1CCC                     l2161:	
  8358                           
  8359                           ;RF_Control_B1.c: 207: RF1.RxStatus = 0;
  8360  1CCC  11D7               	bcf	_RF1^(0+128),3
  8361                           
  8362                           ;RF_Control_B1.c: 208: RF1.ReceiveGO = 0;
  8363  1CCD  10D7               	bcf	_RF1^(0+128),1
  8364                           
  8365                           ;RF_Control_B1.c: 209: CC2500_WriteCommand(0x36);
  8366  1CCE  3036               	movlw	54
  8367  1CCF  319E  26C5  319C   	fcall	_CC2500_WriteCommand
  8368                           
  8369                           ;RF_Control_B1.c: 210: CC2500_WriteCommand(0x3A);
  8370  1CD2  303A               	movlw	58
  8371  1CD3  319E  26C5         	fcall	_CC2500_WriteCommand
  8372  1CD5  0008               	return
  8373  1CD6                     __end_of_RF_RxDisable:	
  8374                           
  8375                           	psect	text34
  8376  085F                     __ptext34:	
  8377 ;; *************** function _CC2500_TxData *****************
  8378 ;; Defined at:
  8379 ;;		line 32 in file "../src/CC2500_B1.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;		None
  8382 ;; Auto vars:     Size  Location     Type
  8383 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8384 ;; Return value:  Size  Location     Type
  8385 ;;		None               void
  8386 ;; Registers used:
  8387 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;Total ram usage:        2 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:    7
  8400 ;; This function calls:
  8401 ;;		_CC2500_WriteByte
  8402 ;;		_CC2500_WriteCommand
  8403 ;;		_Timeout_Counter
  8404 ;;		_set_TimeoutCleared
  8405 ;; This function is called by:
  8406 ;;		_setRF_Main
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           
  8411                           ;psect for function _CC2500_TxData
  8412  085F                     _CC2500_TxData:	
  8413                           
  8414                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8415                           ;CC2500_B1.c: 35: RC4 = 0;
  8416                           
  8417                           ;incstack = 0
  8418                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8419  085F  0020               	movlb	0	; select bank0
  8420  0860  120E               	bcf	14,4	;volatile
  8421                           
  8422                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8423  0861  307F               	movlw	127
  8424  0862  00A4               	movwf	??_CC2500_TxData
  8425  0863  0824               	movf	??_CC2500_TxData,w
  8426  0864  00FC               	movwf	_SPI0Buffer
  8427                           
  8428                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8429  0865  2869               	goto	l6439
  8430  0866                     l6437:	
  8431                           
  8432                           ;CC2500_B1.c: 38: Timeout_Counter();
  8433  0866  319E  2695  3188   	fcall	_Timeout_Counter
  8434  0869                     l6439:	
  8435  0869  0020               	movlb	0	; select bank0
  8436  086A  1D0E               	btfss	14,2	;volatile
  8437  086B  286F               	goto	l6443
  8438  086C  0021               	movlb	1	; select bank1
  8439  086D  1D2F               	btfss	(_myMain^(0+128)+15),2
  8440  086E  2866               	goto	l6437
  8441  086F                     l6443:	
  8442                           
  8443                           ;CC2500_B1.c: 39: };
  8444                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8445  086F  319B  239B  3188   	fcall	_set_TimeoutCleared
  8446                           
  8447                           ;CC2500_B1.c: 41: CC2500_WriteByte();
  8448  0872  319D  25D4  3188   	fcall	_CC2500_WriteByte
  8449                           
  8450                           ;CC2500_B1.c: 42: SPI0Buffer = Tx_Length;
  8451  0875  0021               	movlb	1	; select bank1
  8452  0876  0866               	movf	_Tx_Length^(0+128),w
  8453  0877  0020               	movlb	0	; select bank0
  8454  0878  00A4               	movwf	??_CC2500_TxData
  8455  0879  0824               	movf	??_CC2500_TxData,w
  8456  087A  00FC               	movwf	_SPI0Buffer
  8457                           
  8458                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8459  087B  319D  25D4  3188   	fcall	_CC2500_WriteByte
  8460                           
  8461                           ;CC2500_B1.c: 44: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8462  087E  0020               	movlb	0	; select bank0
  8463  087F  01A5               	clrf	CC2500_TxData@loop_e
  8464  0880                     l6457:	
  8465  0880  0021               	movlb	1	; select bank1
  8466  0881  0866               	movf	_Tx_Length^(0+128),w
  8467  0882  0020               	movlb	0	; select bank0
  8468  0883  0225               	subwf	CC2500_TxData@loop_e,w
  8469  0884  1803               	btfsc	3,0
  8470  0885  2897               	goto	l259
  8471                           
  8472                           ;CC2500_B1.c: 45: SPI0Buffer = RF_Data[loop_e];
  8473  0886  0825               	movf	CC2500_TxData@loop_e,w
  8474  0887  3EB6               	addlw	_RF_Data& (0+255)
  8475  0888  0086               	movwf	6
  8476  0889  0187               	clrf	7
  8477  088A  0801               	movf	1,w
  8478  088B  00A4               	movwf	??_CC2500_TxData
  8479  088C  0824               	movf	??_CC2500_TxData,w
  8480  088D  00FC               	movwf	_SPI0Buffer
  8481                           
  8482                           ;CC2500_B1.c: 46: CC2500_WriteByte();
  8483  088E  319D  25D4  3188   	fcall	_CC2500_WriteByte
  8484  0891  3001               	movlw	1
  8485  0892  0020               	movlb	0	; select bank0
  8486  0893  00A4               	movwf	??_CC2500_TxData
  8487  0894  0824               	movf	??_CC2500_TxData,w
  8488  0895  07A5               	addwf	CC2500_TxData@loop_e,f
  8489  0896  2880               	goto	l6457
  8490  0897                     l259:	
  8491                           
  8492                           ;CC2500_B1.c: 47: }
  8493                           ;CC2500_B1.c: 48: RC4 = 1;
  8494  0897  160E               	bsf	14,4	;volatile
  8495                           
  8496                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x35);
  8497  0898  3035               	movlw	53
  8498  0899  319E  26C5  3188   	fcall	_CC2500_WriteCommand
  8499                           
  8500                           ;CC2500_B1.c: 50: while (RB0 == 0 && myMain.Timeout == 0) {
  8501  089C  28A0               	goto	l6463
  8502  089D                     l6461:	
  8503                           
  8504                           ;CC2500_B1.c: 51: Timeout_Counter();
  8505  089D  319E  2695  3188   	fcall	_Timeout_Counter
  8506  08A0                     l6463:	
  8507  08A0  0020               	movlb	0	; select bank0
  8508  08A1  180D               	btfsc	13,0	;volatile
  8509  08A2  28A6               	goto	l6467
  8510  08A3  0021               	movlb	1	; select bank1
  8511  08A4  1D2F               	btfss	(_myMain^(0+128)+15),2
  8512  08A5  289D               	goto	l6461
  8513  08A6                     l6467:	
  8514                           
  8515                           ;CC2500_B1.c: 52: };
  8516                           ;CC2500_B1.c: 53: set_TimeoutCleared();
  8517  08A6  319B  239B  3188   	fcall	_set_TimeoutCleared
  8518                           
  8519                           ;CC2500_B1.c: 54: while (RB0 == 1 && myMain.Timeout == 0) {
  8520  08A9  28AD               	goto	l6471
  8521  08AA                     l6469:	
  8522                           
  8523                           ;CC2500_B1.c: 55: Timeout_Counter();
  8524  08AA  319E  2695  3188   	fcall	_Timeout_Counter
  8525  08AD                     l6471:	
  8526  08AD  0020               	movlb	0	; select bank0
  8527  08AE  1C0D               	btfss	13,0	;volatile
  8528  08AF  28B3               	goto	l6475
  8529  08B0  0021               	movlb	1	; select bank1
  8530  08B1  1D2F               	btfss	(_myMain^(0+128)+15),2
  8531  08B2  28AA               	goto	l6469
  8532  08B3                     l6475:	
  8533                           
  8534                           ;CC2500_B1.c: 56: };
  8535                           ;CC2500_B1.c: 57: set_TimeoutCleared();
  8536  08B3  319B  239B  3188   	fcall	_set_TimeoutCleared
  8537                           
  8538                           ;CC2500_B1.c: 58: CC2500_WriteCommand(0x36);
  8539  08B6  3036               	movlw	54
  8540  08B7  319E  26C5  3188   	fcall	_CC2500_WriteCommand
  8541                           
  8542                           ;CC2500_B1.c: 59: CC2500_WriteCommand(0x3B);
  8543  08BA  303B               	movlw	59
  8544  08BB  319E  26C5         	fcall	_CC2500_WriteCommand
  8545                           
  8546                           ;CC2500_B1.c: 60: Transceive_OK = 1;
  8547  08BD  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8548  08BE  0008               	return
  8549  08BF                     __end_of_CC2500_TxData:	
  8550                           
  8551                           	psect	text35
  8552  09F2                     __ptext35:	
  8553 ;; *************** function _CC2500_RxData *****************
  8554 ;; Defined at:
  8555 ;;		line 66 in file "../src/CC2500_B1.c"
  8556 ;; Parameters:    Size  Location     Type
  8557 ;;		None
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8560 ;; Return value:  Size  Location     Type
  8561 ;;		None               void
  8562 ;; Registers used:
  8563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8564 ;; Tracked objects:
  8565 ;;		On entry : 0/0
  8566 ;;		On exit  : 0/0
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8572 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8573 ;;Total ram usage:        2 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:    7
  8576 ;; This function calls:
  8577 ;;		_CC2500_ReadByte
  8578 ;;		_CC2500_ReadStatus
  8579 ;;		_CC2500_WriteByte
  8580 ;;		_CC2500_WriteCommand
  8581 ;;		_Timeout_Counter
  8582 ;;		_set_TimeoutCleared
  8583 ;; This function is called by:
  8584 ;;		_setRF_Main
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           
  8589                           ;psect for function _CC2500_RxData
  8590  09F2                     _CC2500_RxData:	
  8591                           
  8592                           ;CC2500_B1.c: 67: unsigned char loop_f;
  8593                           ;CC2500_B1.c: 71: if (RB0 == 1)
  8594                           
  8595                           ;incstack = 0
  8596                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8597  09F2  0020               	movlb	0	; select bank0
  8598  09F3  180D               	btfsc	13,0	;volatile
  8599  09F4  29F9               	goto	l6489
  8600  09F5  2A02               	goto	l6495
  8601  09F6                     l6487:	
  8602                           ;CC2500_B1.c: 72: {
  8603                           ;CC2500_B1.c: 73: while (RB0 == 1 && myMain.Timeout == 0) {
  8604                           
  8605                           
  8606                           ;CC2500_B1.c: 74: Timeout_Counter();
  8607  09F6  319E  2695  3189   	fcall	_Timeout_Counter
  8608  09F9                     l6489:	
  8609  09F9  0020               	movlb	0	; select bank0
  8610  09FA  1C0D               	btfss	13,0	;volatile
  8611  09FB  29FF               	goto	l6493
  8612  09FC  0021               	movlb	1	; select bank1
  8613  09FD  1D2F               	btfss	(_myMain^(0+128)+15),2
  8614  09FE  29F6               	goto	l6487
  8615  09FF                     l6493:	
  8616                           
  8617                           ;CC2500_B1.c: 75: };
  8618                           ;CC2500_B1.c: 76: set_TimeoutCleared();
  8619  09FF  319B  239B  3189   	fcall	_set_TimeoutCleared
  8620  0A02                     l6495:	
  8621                           
  8622                           ;CC2500_B1.c: 77: }
  8623                           ;CC2500_B1.c: 79: CC2500_ReadStatus(0x3B);
  8624  0A02  303B               	movlw	59
  8625  0A03  3190  20F5  3189   	fcall	_CC2500_ReadStatus
  8626                           
  8627                           ;CC2500_B1.c: 80: if (s_data != 0) {
  8628  0A06  0021               	movlb	1	; select bank1
  8629  0A07  0869               	movf	_s_data^(0+128),w
  8630  0A08  1903               	btfsc	3,2
  8631  0A09  2A59               	goto	l6539
  8632                           
  8633                           ;CC2500_B1.c: 81: RC4 = 0;
  8634  0A0A  0020               	movlb	0	; select bank0
  8635  0A0B  120E               	bcf	14,4	;volatile
  8636                           
  8637                           ;CC2500_B1.c: 82: SPI0Buffer = 0x3F + 0xC0;
  8638  0A0C  30FF               	movlw	255
  8639  0A0D  00A4               	movwf	??_CC2500_RxData
  8640  0A0E  0824               	movf	??_CC2500_RxData,w
  8641  0A0F  00FC               	movwf	_SPI0Buffer
  8642                           
  8643                           ;CC2500_B1.c: 83: while (RC2 == 1 && myMain.Timeout == 0) {
  8644  0A10  2A14               	goto	l6505
  8645  0A11                     l6503:	
  8646                           
  8647                           ;CC2500_B1.c: 84: Timeout_Counter();
  8648  0A11  319E  2695  3189   	fcall	_Timeout_Counter
  8649  0A14                     l6505:	
  8650  0A14  0020               	movlb	0	; select bank0
  8651  0A15  1D0E               	btfss	14,2	;volatile
  8652  0A16  2A1A               	goto	l6509
  8653  0A17  0021               	movlb	1	; select bank1
  8654  0A18  1D2F               	btfss	(_myMain^(0+128)+15),2
  8655  0A19  2A11               	goto	l6503
  8656  0A1A                     l6509:	
  8657                           
  8658                           ;CC2500_B1.c: 85: };
  8659                           ;CC2500_B1.c: 86: set_TimeoutCleared();
  8660  0A1A  319B  239B  3189   	fcall	_set_TimeoutCleared
  8661                           
  8662                           ;CC2500_B1.c: 87: CC2500_WriteByte();
  8663  0A1D  319D  25D4  3189   	fcall	_CC2500_WriteByte
  8664                           
  8665                           ;CC2500_B1.c: 89: CC2500_ReadByte();
  8666  0A20  319E  267E  3189   	fcall	_CC2500_ReadByte
  8667                           
  8668                           ;CC2500_B1.c: 90: Rx_Length = SPI0Buffer;
  8669  0A23  087C               	movf	_SPI0Buffer,w
  8670  0A24  0020               	movlb	0	; select bank0
  8671  0A25  00A4               	movwf	??_CC2500_RxData
  8672  0A26  0824               	movf	??_CC2500_RxData,w
  8673  0A27  0021               	movlb	1	; select bank1
  8674  0A28  00E5               	movwf	_Rx_Length^(0+128)
  8675                           
  8676                           ;CC2500_B1.c: 91: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8677  0A29  0020               	movlb	0	; select bank0
  8678  0A2A  01A5               	clrf	CC2500_RxData@loop_f
  8679  0A2B                     l6525:	
  8680  0A2B  0021               	movlb	1	; select bank1
  8681  0A2C  0865               	movf	_Rx_Length^(0+128),w
  8682  0A2D  0020               	movlb	0	; select bank0
  8683  0A2E  0225               	subwf	CC2500_RxData@loop_f,w
  8684  0A2F  1803               	btfsc	3,0
  8685  0A30  2A42               	goto	l6527
  8686                           
  8687                           ;CC2500_B1.c: 92: CC2500_ReadByte();
  8688  0A31  319E  267E  3189   	fcall	_CC2500_ReadByte
  8689                           
  8690                           ;CC2500_B1.c: 93: RF_Data[loop_f] = SPI0Buffer;
  8691  0A34  087C               	movf	_SPI0Buffer,w
  8692  0A35  0020               	movlb	0	; select bank0
  8693  0A36  00A4               	movwf	??_CC2500_RxData
  8694  0A37  0825               	movf	CC2500_RxData@loop_f,w
  8695  0A38  3EB6               	addlw	_RF_Data& (0+255)
  8696  0A39  0086               	movwf	6
  8697  0A3A  0187               	clrf	7
  8698  0A3B  0824               	movf	??_CC2500_RxData,w
  8699  0A3C  0081               	movwf	1
  8700  0A3D  3001               	movlw	1
  8701  0A3E  00A4               	movwf	??_CC2500_RxData
  8702  0A3F  0824               	movf	??_CC2500_RxData,w
  8703  0A40  07A5               	addwf	CC2500_RxData@loop_f,f
  8704  0A41  2A2B               	goto	l6525
  8705  0A42                     l6527:	
  8706                           
  8707                           ;CC2500_B1.c: 94: }
  8708                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  8709  0A42  319E  267E  3189   	fcall	_CC2500_ReadByte
  8710                           
  8711                           ;CC2500_B1.c: 96: RSSI = SPI0Buffer;
  8712  0A45  087C               	movf	_SPI0Buffer,w
  8713  0A46  0020               	movlb	0	; select bank0
  8714  0A47  00A4               	movwf	??_CC2500_RxData
  8715  0A48  0824               	movf	??_CC2500_RxData,w
  8716  0A49  0021               	movlb	1	; select bank1
  8717  0A4A  00E4               	movwf	_RSSI^(0+128)
  8718                           
  8719                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8720  0A4B  319E  267E  3189   	fcall	_CC2500_ReadByte
  8721                           
  8722                           ;CC2500_B1.c: 98: CRC = SPI0Buffer;
  8723  0A4E  087C               	movf	_SPI0Buffer,w
  8724  0A4F  0020               	movlb	0	; select bank0
  8725  0A50  00A4               	movwf	??_CC2500_RxData
  8726  0A51  0824               	movf	??_CC2500_RxData,w
  8727  0A52  0021               	movlb	1	; select bank1
  8728  0A53  00DE               	movwf	_CRC^(0+128)
  8729                           
  8730                           ;CC2500_B1.c: 99: RC4 = 1;
  8731  0A54  0020               	movlb	0	; select bank0
  8732  0A55  160E               	bsf	14,4	;volatile
  8733                           
  8734                           ;CC2500_B1.c: 100: if (CRC & 0x80)
  8735  0A56  0021               	movlb	1	; select bank1
  8736  0A57  1BDE               	btfsc	_CRC^(0+128),7
  8737                           
  8738                           ;CC2500_B1.c: 101: Receive_OK = 1;
  8739  0A58  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8740  0A59                     l6539:	
  8741                           
  8742                           ;CC2500_B1.c: 102: }
  8743                           ;CC2500_B1.c: 104: CC2500_WriteCommand(0x36);
  8744  0A59  3036               	movlw	54
  8745  0A5A  319E  26C5  3189   	fcall	_CC2500_WriteCommand
  8746                           
  8747                           ;CC2500_B1.c: 105: CC2500_WriteCommand(0x3A);
  8748  0A5D  303A               	movlw	58
  8749  0A5E  319E  26C5         	fcall	_CC2500_WriteCommand
  8750  0A60  0008               	return
  8751  0A61                     __end_of_CC2500_RxData:	
  8752                           
  8753                           	psect	text36
  8754  10F5                     __ptext36:	
  8755 ;; *************** function _CC2500_ReadStatus *****************
  8756 ;; Defined at:
  8757 ;;		line 290 in file "../src/CC2500_B1.c"
  8758 ;; Parameters:    Size  Location     Type
  8759 ;;  status_addr     1    wreg     unsigned char 
  8760 ;; Auto vars:     Size  Location     Type
  8761 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8762 ;; Return value:  Size  Location     Type
  8763 ;;		None               void
  8764 ;; Registers used:
  8765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8766 ;; Tracked objects:
  8767 ;;		On entry : 0/0
  8768 ;;		On exit  : 0/0
  8769 ;;		Unchanged: 0/0
  8770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8774 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8775 ;;Total ram usage:        2 bytes
  8776 ;; Hardware stack levels used:    1
  8777 ;; Hardware stack levels required when called:    6
  8778 ;; This function calls:
  8779 ;;		_CC2500_ReadByte
  8780 ;;		_CC2500_WriteByte
  8781 ;;		_Timeout_Counter
  8782 ;;		_set_TimeoutCleared
  8783 ;; This function is called by:
  8784 ;;		_CC2500_RxData
  8785 ;;		_setRF_Main
  8786 ;; This function uses a non-reentrant model
  8787 ;;
  8788                           
  8789                           
  8790                           ;psect for function _CC2500_ReadStatus
  8791  10F5                     _CC2500_ReadStatus:	
  8792                           
  8793                           ;incstack = 0
  8794                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8795                           ;CC2500_ReadStatus@status_addr stored from wreg
  8796  10F5  0020               	movlb	0	; select bank0
  8797  10F6  00A3               	movwf	CC2500_ReadStatus@status_addr
  8798                           
  8799                           ;CC2500_B1.c: 291: RC4 = 0;
  8800  10F7  120E               	bcf	14,4	;volatile
  8801                           
  8802                           ;CC2500_B1.c: 292: SPI0Buffer = status_addr + 0xC0;
  8803  10F8  0823               	movf	CC2500_ReadStatus@status_addr,w
  8804  10F9  3EC0               	addlw	192
  8805  10FA  00A2               	movwf	??_CC2500_ReadStatus
  8806  10FB  0822               	movf	??_CC2500_ReadStatus,w
  8807  10FC  00FC               	movwf	_SPI0Buffer
  8808                           
  8809                           ;CC2500_B1.c: 294: while (RC2 == 1 && myMain.Timeout == 0) {
  8810  10FD  2901               	goto	l6305
  8811  10FE                     l6303:	
  8812                           
  8813                           ;CC2500_B1.c: 295: Timeout_Counter();
  8814  10FE  319E  2695  3190   	fcall	_Timeout_Counter
  8815  1101                     l6305:	
  8816  1101  0020               	movlb	0	; select bank0
  8817  1102  1D0E               	btfss	14,2	;volatile
  8818  1103  2907               	goto	l6309
  8819  1104  0021               	movlb	1	; select bank1
  8820  1105  1D2F               	btfss	(_myMain^(0+128)+15),2
  8821  1106  28FE               	goto	l6303
  8822  1107                     l6309:	
  8823                           
  8824                           ;CC2500_B1.c: 296: };
  8825                           ;CC2500_B1.c: 297: set_TimeoutCleared();
  8826  1107  319B  239B  3190   	fcall	_set_TimeoutCleared
  8827                           
  8828                           ;CC2500_B1.c: 298: CC2500_WriteByte();
  8829  110A  319D  25D4  3190   	fcall	_CC2500_WriteByte
  8830                           
  8831                           ;CC2500_B1.c: 299: CC2500_ReadByte();
  8832  110D  319E  267E         	fcall	_CC2500_ReadByte
  8833                           
  8834                           ;CC2500_B1.c: 300: RC4 = 1;
  8835  110F  0020               	movlb	0	; select bank0
  8836  1110  160E               	bsf	14,4	;volatile
  8837                           
  8838                           ;CC2500_B1.c: 302: s_data = SPI0Buffer;
  8839  1111  087C               	movf	_SPI0Buffer,w
  8840  1112  00A2               	movwf	??_CC2500_ReadStatus
  8841  1113  0822               	movf	??_CC2500_ReadStatus,w
  8842  1114  0021               	movlb	1	; select bank1
  8843  1115  00E9               	movwf	_s_data^(0+128)
  8844  1116  0008               	return
  8845  1117                     __end_of_CC2500_ReadStatus:	
  8846                           
  8847                           	psect	text37
  8848  1E7E                     __ptext37:	
  8849 ;; *************** function _CC2500_ReadByte *****************
  8850 ;; Defined at:
  8851 ;;		line 227 in file "../src/CC2500_B1.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;		None
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8856 ;; Return value:  Size  Location     Type
  8857 ;;		None               void
  8858 ;; Registers used:
  8859 ;;		wreg, status,2, status,0
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;Total ram usage:        2 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; Hardware stack levels required when called:    5
  8872 ;; This function calls:
  8873 ;;		Nothing
  8874 ;; This function is called by:
  8875 ;;		_CC2500_RxData
  8876 ;;		_CC2500_ReadStatus
  8877 ;;		_CC2500_ReadREG
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           
  8882                           ;psect for function _CC2500_ReadByte
  8883  1E7E                     _CC2500_ReadByte:	
  8884                           
  8885                           ;CC2500_B1.c: 228: unsigned char loop_b;
  8886                           ;CC2500_B1.c: 229: for (loop_b = 0; loop_b < 8; loop_b++) {
  8887                           
  8888                           ;incstack = 0
  8889                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8890  1E7E  0020               	movlb	0	; select bank0
  8891  1E7F  01A1               	clrf	CC2500_ReadByte@loop_b
  8892  1E80                     L5:	
  8893  1E80  3008               	movlw	8
  8894  1E81  0221               	subwf	CC2500_ReadByte@loop_b,w
  8895  1E82  1803               	btfsc	3,0
  8896  1E83  0008               	return
  8897                           
  8898                           ;CC2500_B1.c: 230: RC1 = 1;
  8899  1E84  148E               	bsf	14,1	;volatile
  8900                           
  8901                           ;CC2500_B1.c: 231: SPI0Buffer <<= 1;
  8902  1E85  1003               	clrc
  8903  1E86  0DFC               	rlf	_SPI0Buffer,f
  8904                           
  8905                           ;CC2500_B1.c: 232: if (RC2 == 1)
  8906  1E87  1D0E               	btfss	14,2	;volatile
  8907  1E88  2E8B               	goto	l6181
  8908                           
  8909                           ;CC2500_B1.c: 233: SPI0Buffer |= 0x01;
  8910  1E89  147C               	bsf	_SPI0Buffer,0
  8911  1E8A  2E8F               	goto	l6183
  8912  1E8B                     l6181:	
  8913                           
  8914                           ;CC2500_B1.c: 234: else
  8915                           ;CC2500_B1.c: 235: SPI0Buffer &= 0xFE;
  8916  1E8B  30FE               	movlw	254
  8917  1E8C  00A0               	movwf	??_CC2500_ReadByte
  8918  1E8D  0820               	movf	??_CC2500_ReadByte,w
  8919  1E8E  05FC               	andwf	_SPI0Buffer,f
  8920  1E8F                     l6183:	
  8921                           
  8922                           ;CC2500_B1.c: 236: RC1 = 0;
  8923  1E8F  108E               	bcf	14,1	;volatile
  8924  1E90  3001               	movlw	1
  8925  1E91  00A0               	movwf	??_CC2500_ReadByte
  8926  1E92  0820               	movf	??_CC2500_ReadByte,w
  8927  1E93  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8928  1E94  2E80               	goto	L5
  8929  1E95                     __end_of_CC2500_ReadByte:	
  8930                           
  8931                           	psect	text38
  8932  1B85                     __ptext38:	
  8933 ;; *************** function _RF_Initialization *****************
  8934 ;; Defined at:
  8935 ;;		line 9 in file "../src/RF_Control_B1.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;		None
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;		None
  8940 ;; Return value:  Size  Location     Type
  8941 ;;		None               void
  8942 ;; Registers used:
  8943 ;;		wreg, status,2, status,0, pclath, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;Total ram usage:        0 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    6
  8956 ;; This function calls:
  8957 ;;		_setRF_Initialization
  8958 ;; This function is called by:
  8959 ;;		_main
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           
  8964                           ;psect for function _RF_Initialization
  8965  1B85                     _RF_Initialization:	
  8966                           
  8967                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8968                           
  8969                           ;incstack = 0
  8970                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8971  1B85  319B  23C5         	fcall	_setRF_Initialization
  8972  1B87  0008               	return
  8973  1B88                     __end_of_RF_Initialization:	
  8974                           
  8975                           	psect	text39
  8976  1BC5                     __ptext39:	
  8977 ;; *************** function _setRF_Initialization *****************
  8978 ;; Defined at:
  8979 ;;		line 43 in file "../src/RF_Control_B1.c"
  8980 ;; Parameters:    Size  Location     Type
  8981 ;;		None
  8982 ;; Auto vars:     Size  Location     Type
  8983 ;;		None
  8984 ;; Return value:  Size  Location     Type
  8985 ;;		None               void
  8986 ;; Registers used:
  8987 ;;		wreg
  8988 ;; Tracked objects:
  8989 ;;		On entry : 0/0
  8990 ;;		On exit  : 0/0
  8991 ;;		Unchanged: 0/0
  8992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8995 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8996 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8997 ;;Total ram usage:        1 bytes
  8998 ;; Hardware stack levels used:    1
  8999 ;; Hardware stack levels required when called:    5
  9000 ;; This function calls:
  9001 ;;		Nothing
  9002 ;; This function is called by:
  9003 ;;		_RF_Initialization
  9004 ;; This function uses a non-reentrant model
  9005 ;;
  9006                           
  9007                           
  9008                           ;psect for function _setRF_Initialization
  9009  1BC5                     _setRF_Initialization:	
  9010                           
  9011                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9012                           
  9013                           ;incstack = 0
  9014                           ; Regs used in _setRF_Initialization: [wreg]
  9015  1BC5  3015               	movlw	21
  9016  1BC6  0020               	movlb	0	; select bank0
  9017  1BC7  00A0               	movwf	??_setRF_Initialization
  9018  1BC8  0820               	movf	??_setRF_Initialization,w
  9019  1BC9  0021               	movlb	1	; select bank1
  9020  1BCA  00E6               	movwf	_Tx_Length^(0+128)
  9021  1BCB  0008               	return
  9022  1BCC                     __end_of_setRF_Initialization:	
  9023                           
  9024                           	psect	text40
  9025  1D89                     __ptext40:	
  9026 ;; *************** function _Mcu_Initialization *****************
  9027 ;; Defined at:
  9028 ;;		line 30 in file "../src/MCU_B1.c"
  9029 ;; Parameters:    Size  Location     Type
  9030 ;;		None
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;		None
  9033 ;; Return value:  Size  Location     Type
  9034 ;;		None               void
  9035 ;; Registers used:
  9036 ;;		wreg, status,2, status,0, pclath, cstack
  9037 ;; Tracked objects:
  9038 ;;		On entry : 0/0
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;Total ram usage:        0 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    6
  9049 ;; This function calls:
  9050 ;;		_ADC_Set
  9051 ;;		_Fosc_Set
  9052 ;;		_INT_Set
  9053 ;;		_IOC_Set
  9054 ;;		_IO_Set
  9055 ;;		_TMR0_Set
  9056 ;; This function is called by:
  9057 ;;		_main
  9058 ;; This function uses a non-reentrant model
  9059 ;;
  9060                           
  9061                           
  9062                           ;psect for function _Mcu_Initialization
  9063  1D89                     _Mcu_Initialization:	
  9064                           
  9065                           ;MCU_B1.c: 32: Fosc_Set();
  9066                           
  9067                           ;incstack = 0
  9068                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9069  1D89  319B  2397  319D   	fcall	_Fosc_Set
  9070                           
  9071                           ;MCU_B1.c: 34: IO_Set();
  9072  1D8C  319E  26DE  319D   	fcall	_IO_Set
  9073                           
  9074                           ;MCU_B1.c: 36: TMR0_Set();
  9075  1D8F  319B  23E4  319D   	fcall	_TMR0_Set
  9076                           
  9077                           ;MCU_B1.c: 38: ;;
  9078                           ;MCU_B1.c: 40: ADC_Set();
  9079  1D92  319B  23BE  319D   	fcall	_ADC_Set
  9080                           
  9081                           ;MCU_B1.c: 44: INT_Set();
  9082  1D95  319B  23A5  319D   	fcall	_INT_Set
  9083                           
  9084                           ;MCU_B1.c: 46: IOC_Set();
  9085  1D98  319C  2473         	fcall	_IOC_Set
  9086  1D9A  0008               	return
  9087  1D9B                     __end_of_Mcu_Initialization:	
  9088                           
  9089                           	psect	text41
  9090  1BE4                     __ptext41:	
  9091 ;; *************** function _TMR0_Set *****************
  9092 ;; Defined at:
  9093 ;;		line 126 in file "../src/MCU_B1.c"
  9094 ;; Parameters:    Size  Location     Type
  9095 ;;		None
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;		None
  9098 ;; Return value:  Size  Location     Type
  9099 ;;		None               void
  9100 ;; Registers used:
  9101 ;;		wreg, status,2
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;Total ram usage:        0 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    5
  9114 ;; This function calls:
  9115 ;;		Nothing
  9116 ;; This function is called by:
  9117 ;;		_Mcu_Initialization
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _TMR0_Set
  9123  1BE4                     _TMR0_Set:	
  9124                           
  9125                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9129  1BE4  0021               	movlb	1	; select bank1
  9130  1BE5  0195               	clrf	21	;volatile
  9131                           
  9132                           ;MCU_B1.c: 129: TMR0 = (256-190);
  9133  1BE6  3042               	movlw	66
  9134  1BE7  0020               	movlb	0	; select bank0
  9135  1BE8  0095               	movwf	21	;volatile
  9136                           
  9137                           ;MCU_B1.c: 130: TMR0IE = 1;
  9138  1BE9  168B               	bsf	11,5	;volatile
  9139                           
  9140                           ;MCU_B1.c: 131: GIE = 1;
  9141  1BEA  178B               	bsf	11,7	;volatile
  9142  1BEB  0008               	return
  9143  1BEC                     __end_of_TMR0_Set:	
  9144                           
  9145                           	psect	text42
  9146  1EDE                     __ptext42:	
  9147 ;; *************** function _IO_Set *****************
  9148 ;; Defined at:
  9149 ;;		line 60 in file "../src/MCU_B1.c"
  9150 ;; Parameters:    Size  Location     Type
  9151 ;;		None
  9152 ;; Auto vars:     Size  Location     Type
  9153 ;;		None
  9154 ;; Return value:  Size  Location     Type
  9155 ;;		None               void
  9156 ;; Registers used:
  9157 ;;		wreg, status,2
  9158 ;; Tracked objects:
  9159 ;;		On entry : 0/0
  9160 ;;		On exit  : 0/0
  9161 ;;		Unchanged: 0/0
  9162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;Total ram usage:        0 bytes
  9168 ;; Hardware stack levels used:    1
  9169 ;; Hardware stack levels required when called:    5
  9170 ;; This function calls:
  9171 ;;		Nothing
  9172 ;; This function is called by:
  9173 ;;		_Mcu_Initialization
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           
  9178                           ;psect for function _IO_Set
  9179  1EDE                     _IO_Set:	
  9180                           
  9181                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9182                           
  9183                           ;incstack = 0
  9184                           ; Regs used in _IO_Set: [wreg+status,2]
  9185  1EDE  3077               	movlw	119
  9186  1EDF  0021               	movlb	1	; select bank1
  9187  1EE0  008C               	movwf	12	;volatile
  9188                           
  9189                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9190  1EE1  3007               	movlw	7
  9191  1EE2  008D               	movwf	13	;volatile
  9192                           
  9193                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9194  1EE3  300C               	movlw	12
  9195  1EE4  008E               	movwf	14	;volatile
  9196                           
  9197                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9198  1EE5  0022               	movlb	2	; select bank2
  9199  1EE6  018C               	clrf	12	;volatile
  9200                           
  9201                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9202  1EE7  3002               	movlw	2
  9203  1EE8  008D               	movwf	13	;volatile
  9204                           
  9205                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9206  1EE9  018E               	clrf	14	;volatile
  9207                           
  9208                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9209  1EEA  3022               	movlw	34
  9210  1EEB  0023               	movlb	3	; select bank3
  9211  1EEC  008C               	movwf	12	;volatile
  9212                           
  9213                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9214  1EED  018D               	clrf	13	;volatile
  9215                           
  9216                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9217  1EEE  018E               	clrf	14	;volatile
  9218                           
  9219                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9220  1EEF  3077               	movlw	119
  9221  1EF0  0020               	movlb	0	; select bank0
  9222  1EF1  008C               	movwf	12	;volatile
  9223                           
  9224                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9225  1EF2  3007               	movlw	7
  9226  1EF3  008D               	movwf	13	;volatile
  9227                           
  9228                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9229  1EF4  300C               	movlw	12
  9230  1EF5  008E               	movwf	14	;volatile
  9231  1EF6  0008               	return
  9232  1EF7                     __end_of_IO_Set:	
  9233                           
  9234                           	psect	text43
  9235  1C73                     __ptext43:	
  9236 ;; *************** function _IOC_Set *****************
  9237 ;; Defined at:
  9238 ;;		line 267 in file "../src/MCU_B1.c"
  9239 ;; Parameters:    Size  Location     Type
  9240 ;;		None
  9241 ;; Auto vars:     Size  Location     Type
  9242 ;;		None
  9243 ;; Return value:  Size  Location     Type
  9244 ;;		None               void
  9245 ;; Registers used:
  9246 ;;		wreg, status,2
  9247 ;; Tracked objects:
  9248 ;;		On entry : 0/0
  9249 ;;		On exit  : 0/0
  9250 ;;		Unchanged: 0/0
  9251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;Total ram usage:        0 bytes
  9257 ;; Hardware stack levels used:    1
  9258 ;; Hardware stack levels required when called:    5
  9259 ;; This function calls:
  9260 ;;		Nothing
  9261 ;; This function is called by:
  9262 ;;		_Mcu_Initialization
  9263 ;; This function uses a non-reentrant model
  9264 ;;
  9265                           
  9266                           
  9267                           ;psect for function _IOC_Set
  9268  1C73                     _IOC_Set:	
  9269                           
  9270                           ;MCU_B1.c: 268: WPUB2 = 0;
  9271                           
  9272                           ;incstack = 0
  9273                           ; Regs used in _IOC_Set: [wreg+status,2]
  9274  1C73  0024               	movlb	4	; select bank4
  9275  1C74  110D               	bcf	13,2	;volatile
  9276                           
  9277                           ;MCU_B1.c: 270: IOCBP = 0b00000100;
  9278  1C75  3004               	movlw	4
  9279  1C76  0027               	movlb	7	; select bank7
  9280  1C77  0094               	movwf	20	;volatile
  9281                           
  9282                           ;MCU_B1.c: 271: IOCBN = 0b00000100;
  9283  1C78  3004               	movlw	4
  9284  1C79  0095               	movwf	21	;volatile
  9285                           
  9286                           ;MCU_B1.c: 286: IOCBF = 0b00000000;
  9287  1C7A  0196               	clrf	22	;volatile
  9288                           
  9289                           ;MCU_B1.c: 288: IOCIE = 1;
  9290  1C7B  158B               	bsf	11,3	;volatile
  9291                           
  9292                           ;MCU_B1.c: 289: IOCIF = 0;
  9293  1C7C  100B               	bcf	11,0	;volatile
  9294                           
  9295                           ;MCU_B1.c: 290: PEIE = 1;
  9296  1C7D  170B               	bsf	11,6	;volatile
  9297                           
  9298                           ;MCU_B1.c: 291: GIE = 1;
  9299  1C7E  178B               	bsf	11,7	;volatile
  9300  1C7F  0008               	return
  9301  1C80                     __end_of_IOC_Set:	
  9302                           
  9303                           	psect	text44
  9304  1BA5                     __ptext44:	
  9305 ;; *************** function _INT_Set *****************
  9306 ;; Defined at:
  9307 ;;		line 240 in file "../src/MCU_B1.c"
  9308 ;; Parameters:    Size  Location     Type
  9309 ;;		None
  9310 ;; Auto vars:     Size  Location     Type
  9311 ;;		None
  9312 ;; Return value:  Size  Location     Type
  9313 ;;		None               void
  9314 ;; Registers used:
  9315 ;;		None
  9316 ;; Tracked objects:
  9317 ;;		On entry : 0/0
  9318 ;;		On exit  : 0/0
  9319 ;;		Unchanged: 0/0
  9320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;Total ram usage:        0 bytes
  9326 ;; Hardware stack levels used:    1
  9327 ;; Hardware stack levels required when called:    5
  9328 ;; This function calls:
  9329 ;;		Nothing
  9330 ;; This function is called by:
  9331 ;;		_Mcu_Initialization
  9332 ;; This function uses a non-reentrant model
  9333 ;;
  9334                           
  9335                           
  9336                           ;psect for function _INT_Set
  9337  1BA5                     _INT_Set:	
  9338                           
  9339                           ;MCU_B1.c: 241: WPUB0 = 0;
  9340                           
  9341                           ;incstack = 0
  9342                           ; Regs used in _INT_Set: []
  9343  1BA5  0024               	movlb	4	; select bank4
  9344  1BA6  100D               	bcf	13,0	;volatile
  9345                           
  9346                           ;MCU_B1.c: 242: INTE = 0;
  9347  1BA7  120B               	bcf	11,4	;volatile
  9348                           
  9349                           ;MCU_B1.c: 243: PEIE = 1;
  9350  1BA8  170B               	bsf	11,6	;volatile
  9351                           
  9352                           ;MCU_B1.c: 244: GIE = 1;
  9353  1BA9  178B               	bsf	11,7	;volatile
  9354  1BAA  0008               	return
  9355  1BAB                     __end_of_INT_Set:	
  9356                           
  9357                           	psect	text45
  9358  1B97                     __ptext45:	
  9359 ;; *************** function _Fosc_Set *****************
  9360 ;; Defined at:
  9361 ;;		line 56 in file "../src/MCU_B1.c"
  9362 ;; Parameters:    Size  Location     Type
  9363 ;;		None
  9364 ;; Auto vars:     Size  Location     Type
  9365 ;;		None
  9366 ;; Return value:  Size  Location     Type
  9367 ;;		None               void
  9368 ;; Registers used:
  9369 ;;		wreg
  9370 ;; Tracked objects:
  9371 ;;		On entry : 0/0
  9372 ;;		On exit  : 0/0
  9373 ;;		Unchanged: 0/0
  9374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;Total ram usage:        0 bytes
  9380 ;; Hardware stack levels used:    1
  9381 ;; Hardware stack levels required when called:    5
  9382 ;; This function calls:
  9383 ;;		Nothing
  9384 ;; This function is called by:
  9385 ;;		_Mcu_Initialization
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           
  9390                           ;psect for function _Fosc_Set
  9391  1B97                     _Fosc_Set:	
  9392                           
  9393                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9394                           
  9395                           ;incstack = 0
  9396                           ; Regs used in _Fosc_Set: [wreg]
  9397  1B97  3078               	movlw	120
  9398  1B98  0021               	movlb	1	; select bank1
  9399  1B99  0099               	movwf	25	;volatile
  9400  1B9A  0008               	return
  9401  1B9B                     __end_of_Fosc_Set:	
  9402                           
  9403                           	psect	text46
  9404  1BBE                     __ptext46:	
  9405 ;; *************** function _ADC_Set *****************
  9406 ;; Defined at:
  9407 ;;		line 313 in file "../src/MCU_B1.c"
  9408 ;; Parameters:    Size  Location     Type
  9409 ;;		None
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;		None
  9412 ;; Return value:  Size  Location     Type
  9413 ;;		None               void
  9414 ;; Registers used:
  9415 ;;		wreg
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/0
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;Total ram usage:        0 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; Hardware stack levels required when called:    5
  9428 ;; This function calls:
  9429 ;;		Nothing
  9430 ;; This function is called by:
  9431 ;;		_Mcu_Initialization
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           
  9436                           ;psect for function _ADC_Set
  9437  1BBE                     _ADC_Set:	
  9438                           
  9439                           ;MCU_B1.c: 314: ADCON1 = 0xf2;
  9440                           
  9441                           ;incstack = 0
  9442                           ; Regs used in _ADC_Set: [wreg]
  9443  1BBE  30F2               	movlw	242
  9444  1BBF  0021               	movlb	1	; select bank1
  9445  1BC0  009E               	movwf	30	;volatile
  9446                           
  9447                           ;MCU_B1.c: 315: FVRCON = 0xc0;
  9448  1BC1  30C0               	movlw	192
  9449  1BC2  0022               	movlb	2	; select bank2
  9450  1BC3  0097               	movwf	23	;volatile
  9451  1BC4  0008               	return
  9452  1BC5                     __end_of_ADC_Set:	
  9453                           
  9454                           	psect	text47
  9455  0219                     __ptext47:	
  9456 ;; *************** function _Load_Main *****************
  9457 ;; Defined at:
  9458 ;;		line 39 in file "../src/OverLoad_B1.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;		None
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;  i               1   19[BANK0 ] unsigned char 
  9463 ;; Return value:  Size  Location     Type
  9464 ;;		None               void
  9465 ;; Registers used:
  9466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;Total ram usage:        3 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:   10
  9479 ;; This function calls:
  9480 ;;		___lwdiv
  9481 ;;		___wmul
  9482 ;;		_setDimmerLights_Clear
  9483 ;;		_setLoad_AH_AL_Restore
  9484 ;;		_setLoad_Exceptions
  9485 ;; This function is called by:
  9486 ;;		_main
  9487 ;; This function uses a non-reentrant model
  9488 ;;
  9489                           
  9490                           
  9491                           ;psect for function _Load_Main
  9492  0219                     _Load_Main:	
  9493                           
  9494                           ;OverLoad_B1.c: 40: char i = 0;
  9495                           
  9496                           ;incstack = 0
  9497                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9498  0219  0020               	movlb	0	; select bank0
  9499  021A  01B3               	clrf	Load_Main@i
  9500                           
  9501                           ;OverLoad_B1.c: 41: if (Load1.ERROR == 1) {
  9502  021B  0023               	movlb	3	; select bank3
  9503  021C  1EA0               	btfss	_Load1^(0+384),5
  9504  021D  2A2F               	goto	l1641
  9505                           
  9506                           ;OverLoad_B1.c: 42: Load1.ErrorTime++;
  9507  021E  3001               	movlw	1
  9508  021F  07A3               	addwf	(_Load1^(0+384)+3),f
  9509  0220  3000               	movlw	0
  9510  0221  3DA4               	addwfc	((_Load1+1)^(0+384)+3),f
  9511                           
  9512                           ;OverLoad_B1.c: 43: if (Load1.ErrorTime >= 1000)
  9513  0222  3003               	movlw	3
  9514  0223  0224               	subwf	((_Load1+1)^(0+384)+3),w
  9515  0224  30E8               	movlw	232
  9516  0225  1903               	skipnz
  9517  0226  0223               	subwf	(_Load1^(0+384)+3),w
  9518  0227  1C03               	skipc
  9519  0228  0008               	return
  9520                           
  9521                           ;OverLoad_B1.c: 44: {
  9522                           ;OverLoad_B1.c: 45: Load1.ErrorTime = 0;
  9523  0229  01A3               	clrf	(_Load1^(0+384)+3)
  9524  022A  01A4               	clrf	((_Load1+1)^(0+384)+3)
  9525                           
  9526                           ;OverLoad_B1.c: 46: setLoad_Exceptions(0);
  9527  022B  3000               	movlw	0
  9528  022C  3193  2323         	fcall	_setLoad_Exceptions
  9529                           
  9530                           ;OverLoad_B1.c: 47: }
  9531                           ;OverLoad_B1.c: 48: } else {
  9532  022E  0008               	return
  9533  022F                     l1641:	
  9534                           
  9535                           ;OverLoad_B1.c: 49: if (Load1.ADtoGO == 1) {
  9536  022F  1E20               	btfss	_Load1^(0+384),4
  9537  0230  2B5A               	goto	l1644
  9538                           
  9539                           ;OverLoad_B1.c: 50: Load1.Time++;
  9540  0231  3001               	movlw	1
  9541  0232  07A1               	addwf	(_Load1^(0+384)+1),f
  9542  0233  3000               	movlw	0
  9543  0234  3DA2               	addwfc	((_Load1+1)^(0+384)+1),f
  9544                           
  9545                           ;OverLoad_B1.c: 51: if (Load1.Time >= 5)
  9546  0235  3000               	movlw	0
  9547  0236  0222               	subwf	((_Load1+1)^(0+384)+1),w
  9548  0237  3005               	movlw	5
  9549  0238  1903               	skipnz
  9550  0239  0221               	subwf	(_Load1^(0+384)+1),w
  9551  023A  1C03               	skipc
  9552  023B  0008               	return
  9553                           
  9554                           ;OverLoad_B1.c: 52: {
  9555                           ;OverLoad_B1.c: 53: Load1.Time = 0;
  9556  023C  01A1               	clrf	(_Load1^(0+384)+1)
  9557  023D  01A2               	clrf	((_Load1+1)^(0+384)+1)
  9558                           
  9559                           ;OverLoad_B1.c: 54: Load1.ADtoGO = 0;
  9560  023E  1220               	bcf	_Load1^(0+384),4
  9561                           
  9562                           ;OverLoad_B1.c: 55: Load1.LightsCount = Load1.Lights1Status + Load1.Lights2Status + Load
      +                          1.Lights3Status;
  9563  023F  0863               	movf	(_Load1^(0+384)+67),w
  9564  0240  0764               	addwf	(_Load1^(0+384)+68),w
  9565  0241  0765               	addwf	(_Load1^(0+384)+69),w
  9566  0242  0020               	movlb	0	; select bank0
  9567  0243  00B1               	movwf	??_Load_Main
  9568  0244  0831               	movf	??_Load_Main,w
  9569  0245  0023               	movlb	3	; select bank3
  9570  0246  00DE               	movwf	(_Load1^(0+384)+62)
  9571                           
  9572                           ;OverLoad_B1.c: 56: for (i = 1; i < 4; i++) {
  9573  0247  0020               	movlb	0	; select bank0
  9574  0248  01B3               	clrf	Load_Main@i
  9575  0249  0AB3               	incf	Load_Main@i,f
  9576  024A  3004               	movlw	4
  9577  024B  0233               	subwf	Load_Main@i,w
  9578  024C  1803               	btfsc	3,0
  9579  024D  2A78               	goto	l7781
  9580  024E                     l7775:	
  9581                           
  9582                           ;OverLoad_B1.c: 57: Load1.ADH += Load1.AH[i];
  9583  024E  3533               	lslf	Load_Main@i,w
  9584  024F  3EA8               	addlw	(_Load1+8)& (0+255)
  9585  0250  0086               	movwf	6
  9586  0251  3001               	movlw	1	; select bank3/4
  9587  0252  0087               	movwf	7
  9588  0253  3F40               	moviw [0]fsr1
  9589  0254  00B1               	movwf	??_Load_Main
  9590  0255  3F41               	moviw [1]fsr1
  9591  0256  00B2               	movwf	??_Load_Main+1
  9592  0257  0831               	movf	??_Load_Main,w
  9593  0258  0023               	movlb	3	; select bank3
  9594  0259  07CE               	addwf	(_Load1^(0+384)+46),f
  9595  025A  0020               	movlb	0	; select bank0
  9596  025B  0832               	movf	??_Load_Main+1,w
  9597  025C  0023               	movlb	3	; select bank3
  9598  025D  3DCF               	addwfc	((_Load1+1)^(0+384)+46),f
  9599                           
  9600                           ;OverLoad_B1.c: 58: Load1.ADL += Load1.AL[i];
  9601  025E  0020               	movlb	0	; select bank0
  9602  025F  3533               	lslf	Load_Main@i,w
  9603  0260  3EBA               	addlw	(_Load1+26)& (0+255)
  9604  0261  0086               	movwf	6
  9605  0262  3001               	movlw	1	; select bank3/4
  9606  0263  0087               	movwf	7
  9607  0264  3F40               	moviw [0]fsr1
  9608  0265  00B1               	movwf	??_Load_Main
  9609  0266  3F41               	moviw [1]fsr1
  9610  0267  00B2               	movwf	??_Load_Main+1
  9611  0268  0831               	movf	??_Load_Main,w
  9612  0269  0023               	movlb	3	; select bank3
  9613  026A  07D0               	addwf	(_Load1^(0+384)+48),f
  9614  026B  0020               	movlb	0	; select bank0
  9615  026C  0832               	movf	??_Load_Main+1,w
  9616  026D  0023               	movlb	3	; select bank3
  9617  026E  3DD1               	addwfc	((_Load1+1)^(0+384)+48),f
  9618  026F  3001               	movlw	1
  9619  0270  0020               	movlb	0	; select bank0
  9620  0271  00B1               	movwf	??_Load_Main
  9621  0272  0831               	movf	??_Load_Main,w
  9622  0273  07B3               	addwf	Load_Main@i,f
  9623  0274  3004               	movlw	4
  9624  0275  0233               	subwf	Load_Main@i,w
  9625  0276  1C03               	skipc
  9626  0277  2A4E               	goto	l7775
  9627  0278                     l7781:	
  9628                           
  9629                           ;OverLoad_B1.c: 59: }
  9630                           ;OverLoad_B1.c: 60: Load1.ADH /= 3;
  9631  0278  3003               	movlw	3
  9632  0279  00A0               	movwf	___lwdiv@divisor
  9633  027A  3000               	movlw	0
  9634  027B  00A1               	movwf	___lwdiv@divisor+1
  9635  027C  0023               	movlb	3	; select bank3
  9636  027D  084F               	movf	((_Load1+1)^(0+384)+46),w
  9637  027E  0020               	movlb	0	; select bank0
  9638  027F  01A3               	clrf	___lwdiv@dividend+1
  9639  0280  07A3               	addwf	___lwdiv@dividend+1,f
  9640  0281  0023               	movlb	3	; select bank3
  9641  0282  084E               	movf	(_Load1^(0+384)+46),w
  9642  0283  0020               	movlb	0	; select bank0
  9643  0284  01A2               	clrf	___lwdiv@dividend
  9644  0285  07A2               	addwf	___lwdiv@dividend,f
  9645  0286  3192  22EC  3182   	fcall	___lwdiv
  9646  0289  0020               	movlb	0	; select bank0
  9647  028A  0821               	movf	?___lwdiv+1,w
  9648  028B  0023               	movlb	3	; select bank3
  9649  028C  01CF               	clrf	((_Load1+1)^(0+384)+46)
  9650  028D  07CF               	addwf	((_Load1+1)^(0+384)+46),f
  9651  028E  0020               	movlb	0	; select bank0
  9652  028F  0820               	movf	?___lwdiv,w
  9653  0290  0023               	movlb	3	; select bank3
  9654  0291  01CE               	clrf	(_Load1^(0+384)+46)
  9655  0292  07CE               	addwf	(_Load1^(0+384)+46),f
  9656                           
  9657                           ;OverLoad_B1.c: 61: Load1.ADL /= 3;
  9658  0293  3003               	movlw	3
  9659  0294  0020               	movlb	0	; select bank0
  9660  0295  00A0               	movwf	___lwdiv@divisor
  9661  0296  3000               	movlw	0
  9662  0297  00A1               	movwf	___lwdiv@divisor+1
  9663  0298  0023               	movlb	3	; select bank3
  9664  0299  0851               	movf	((_Load1+1)^(0+384)+48),w
  9665  029A  0020               	movlb	0	; select bank0
  9666  029B  01A3               	clrf	___lwdiv@dividend+1
  9667  029C  07A3               	addwf	___lwdiv@dividend+1,f
  9668  029D  0023               	movlb	3	; select bank3
  9669  029E  0850               	movf	(_Load1^(0+384)+48),w
  9670  029F  0020               	movlb	0	; select bank0
  9671  02A0  01A2               	clrf	___lwdiv@dividend
  9672  02A1  07A2               	addwf	___lwdiv@dividend,f
  9673  02A2  3192  22EC  3182   	fcall	___lwdiv
  9674  02A5  0020               	movlb	0	; select bank0
  9675  02A6  0821               	movf	?___lwdiv+1,w
  9676  02A7  0023               	movlb	3	; select bank3
  9677  02A8  01D1               	clrf	((_Load1+1)^(0+384)+48)
  9678  02A9  07D1               	addwf	((_Load1+1)^(0+384)+48),f
  9679  02AA  0020               	movlb	0	; select bank0
  9680  02AB  0820               	movf	?___lwdiv,w
  9681  02AC  0023               	movlb	3	; select bank3
  9682  02AD  01D0               	clrf	(_Load1^(0+384)+48)
  9683  02AE  07D0               	addwf	(_Load1^(0+384)+48),f
  9684                           
  9685                           ;OverLoad_B1.c: 62: if (Load1.ADH > Load1.ADL) {
  9686  02AF  084F               	movf	((_Load1+1)^(0+384)+46),w
  9687  02B0  0251               	subwf	((_Load1+1)^(0+384)+48),w
  9688  02B1  1D03               	skipz
  9689  02B2  2AB5               	goto	u7645
  9690  02B3  084E               	movf	(_Load1^(0+384)+46),w
  9691  02B4  0250               	subwf	(_Load1^(0+384)+48),w
  9692  02B5                     u7645:	
  9693  02B5  1803               	skipnc
  9694  02B6  2B57               	goto	l7839
  9695                           
  9696                           ;OverLoad_B1.c: 63: Load1.AD = (Load1.ADH - Load1.ADL);
  9697  02B7  302E               	movlw	46
  9698  02B8  3EA0               	addlw	_Load1& (0+255)
  9699  02B9  0086               	movwf	6
  9700  02BA  3001               	movlw	1	; select bank3/4
  9701  02BB  0087               	movwf	7
  9702  02BC  0950               	comf	(_Load1^(0+384)+48),w
  9703  02BD  0020               	movlb	0	; select bank0
  9704  02BE  00B1               	movwf	??_Load_Main
  9705  02BF  0023               	movlb	3	; select bank3
  9706  02C0  0951               	comf	((_Load1+1)^(0+384)+48),w
  9707  02C1  0020               	movlb	0	; select bank0
  9708  02C2  00B2               	movwf	??_Load_Main+1
  9709  02C3  0AB1               	incf	??_Load_Main,f
  9710  02C4  1903               	skipnz
  9711  02C5  0AB2               	incf	??_Load_Main+1,f
  9712  02C6  3F40               	moviw [0]fsr1
  9713  02C7  0731               	addwf	??_Load_Main,w
  9714  02C8  0023               	movlb	3	; select bank3
  9715  02C9  00CC               	movwf	(_Load1^(0+384)+44)
  9716  02CA  3F41               	moviw [1]fsr1
  9717  02CB  0020               	movlb	0	; select bank0
  9718  02CC  3D32               	addwfc	??_Load_Main+1,w
  9719  02CD  0023               	movlb	3	; select bank3
  9720  02CE  00CD               	movwf	(_Load1^(0+384)+45)
  9721                           
  9722                           ;OverLoad_B1.c: 65: if (Load1.Count < 2) {
  9723  02CF  3002               	movlw	2
  9724  02D0  025A               	subwf	(_Load1^(0+384)+58),w
  9725  02D1  1803               	skipnc
  9726  02D2  2AF4               	goto	l7803
  9727                           
  9728                           ;OverLoad_B1.c: 66: Load1.Count++;
  9729  02D3  3001               	movlw	1
  9730  02D4  0020               	movlb	0	; select bank0
  9731  02D5  00B1               	movwf	??_Load_Main
  9732  02D6  0831               	movf	??_Load_Main,w
  9733  02D7  0023               	movlb	3	; select bank3
  9734  02D8  07DA               	addwf	(_Load1^(0+384)+58),f
  9735                           
  9736                           ;OverLoad_B1.c: 67: if (Load1.Count == 1) {
  9737  02D9  085A               	movf	(_Load1^(0+384)+58),w
  9738  02DA  3A01               	xorlw	1
  9739  02DB  1D03               	skipz
  9740  02DC  2AE1               	goto	l7795
  9741                           
  9742                           ;OverLoad_B1.c: 68: Load1.JudgeValue = 500;
  9743  02DD  30F4               	movlw	244
  9744  02DE  00D6               	movwf	(_Load1^(0+384)+54)
  9745  02DF  3001               	movlw	1
  9746  02E0  2AEC               	goto	L6
  9747  02E1                     l7795:	
  9748                           ;OverLoad_B1.c: 69: } else if (Load1.Count == 2) {
  9749                           
  9750  02E1  085A               	movf	(_Load1^(0+384)+58),w
  9751  02E2  3A02               	xorlw	2
  9752  02E3  1D03               	skipz
  9753  02E4  2AF4               	goto	l7803
  9754                           
  9755                           ;OverLoad_B1.c: 70: if (Load1.LightsCount == 1) {
  9756  02E5  085E               	movf	(_Load1^(0+384)+62),w
  9757  02E6  3A01               	xorlw	1
  9758  02E7  1D03               	skipz
  9759  02E8  2AEE               	goto	l7801
  9760                           
  9761                           ;OverLoad_B1.c: 71: Load1.JudgeValue = 0x32;
  9762  02E9  3032               	movlw	50
  9763  02EA  00D6               	movwf	(_Load1^(0+384)+54)
  9764  02EB  3000               	movlw	0
  9765  02EC                     L6:	
  9766  02EC  00D7               	movwf	(_Load1^(0+384)+55)
  9767                           
  9768                           ;OverLoad_B1.c: 72: } else {
  9769  02ED  2AF4               	goto	l7803
  9770  02EE                     l7801:	
  9771                           
  9772                           ;OverLoad_B1.c: 73: Load1.JudgeValue = (0x32 + Load1.TotalLoad) - 0x08;
  9773  02EE  0826               	movf	(_Load1^(0+384)+6),w
  9774  02EF  3E2A               	addlw	42
  9775  02F0  00D6               	movwf	(_Load1^(0+384)+54)
  9776  02F1  3000               	movlw	0
  9777  02F2  3D27               	addwfc	((_Load1+1)^(0+384)+6),w
  9778  02F3  00D7               	movwf	((_Load1+1)^(0+384)+54)
  9779  02F4                     l7803:	
  9780                           
  9781                           ;OverLoad_B1.c: 74: }
  9782                           ;OverLoad_B1.c: 75: }
  9783                           ;OverLoad_B1.c: 76: }
  9784                           ;OverLoad_B1.c: 78: if (Load1.AD >= Load1.JudgeValue) {
  9785  02F4  0857               	movf	((_Load1+1)^(0+384)+54),w
  9786  02F5  024D               	subwf	((_Load1+1)^(0+384)+44),w
  9787  02F6  1D03               	skipz
  9788  02F7  2AFA               	goto	u7695
  9789  02F8  0856               	movf	(_Load1^(0+384)+54),w
  9790  02F9  024C               	subwf	(_Load1^(0+384)+44),w
  9791  02FA                     u7695:	
  9792  02FA  1C03               	skipc
  9793  02FB  2B0C               	goto	l7813
  9794                           
  9795                           ;OverLoad_B1.c: 79: Load1.ErrorCount++;
  9796  02FC  3001               	movlw	1
  9797  02FD  0020               	movlb	0	; select bank0
  9798  02FE  00B1               	movwf	??_Load_Main
  9799  02FF  0831               	movf	??_Load_Main,w
  9800  0300  0023               	movlb	3	; select bank3
  9801  0301  07DC               	addwf	(_Load1^(0+384)+60),f
  9802                           
  9803                           ;OverLoad_B1.c: 80: if (Load1.ErrorCount > 2) {
  9804  0302  3003               	movlw	3
  9805  0303  025C               	subwf	(_Load1^(0+384)+60),w
  9806  0304  1C03               	skipc
  9807  0305  2B57               	goto	l7839
  9808                           
  9809                           ;OverLoad_B1.c: 81: Load1.ErrorCount = 0;
  9810  0306  01DC               	clrf	(_Load1^(0+384)+60)
  9811                           
  9812                           ;OverLoad_B1.c: 82: setLoad_Exceptions(1);
  9813  0307  3001               	movlw	1
  9814  0308  3193  2323  3182   	fcall	_setLoad_Exceptions
  9815                           
  9816                           ;OverLoad_B1.c: 91: }
  9817                           ;OverLoad_B1.c: 92: } else {
  9818  030B  2B57               	goto	l7839
  9819  030C                     l7813:	
  9820                           
  9821                           ;OverLoad_B1.c: 93: Load1.ErrorCount = 0;
  9822  030C  0023               	movlb	3	; select bank3
  9823  030D  01DC               	clrf	(_Load1^(0+384)+60)
  9824                           
  9825                           ;OverLoad_B1.c: 94: if (Load1.SafeCount < 10) {
  9826  030E  300A               	movlw	10
  9827  030F  0262               	subwf	(_Load1^(0+384)+66),w
  9828  0310  1803               	skipnc
  9829  0311  2B18               	goto	l7819
  9830                           
  9831                           ;OverLoad_B1.c: 95: Load1.SafeCount++;
  9832  0312  3001               	movlw	1
  9833  0313  0020               	movlb	0	; select bank0
  9834  0314  00B1               	movwf	??_Load_Main
  9835  0315  0831               	movf	??_Load_Main,w
  9836  0316  0023               	movlb	3	; select bank3
  9837  0317  07E2               	addwf	(_Load1^(0+384)+66),f
  9838  0318                     l7819:	
  9839                           
  9840                           ;OverLoad_B1.c: 96: }
  9841                           ;OverLoad_B1.c: 97: if (Load1.SafeCount >= 10) {
  9842  0318  300A               	movlw	10
  9843  0319  0262               	subwf	(_Load1^(0+384)+66),w
  9844  031A  1C03               	skipc
  9845  031B  2B57               	goto	l7839
  9846                           
  9847                           ;OverLoad_B1.c: 98: Load1.Safe = 1;
  9848  031C  15A0               	bsf	_Load1^(0+384),3
  9849                           
  9850                           ;OverLoad_B1.c: 102: setDimmerLights_Clear(1, 1);
  9851  031D  0020               	movlb	0	; select bank0
  9852  031E  01A2               	clrf	setDimmerLights_Clear@command
  9853  031F  0AA2               	incf	setDimmerLights_Clear@command,f
  9854  0320  3001               	movlw	1
  9855  0321  319D  2514  3182   	fcall	_setDimmerLights_Clear
  9856                           
  9857                           ;OverLoad_B1.c: 106: ;;
  9858                           ;OverLoad_B1.c: 112: setDimmerLights_Clear(2, 1);
  9859  0324  0020               	movlb	0	; select bank0
  9860  0325  01A2               	clrf	setDimmerLights_Clear@command
  9861  0326  0AA2               	incf	setDimmerLights_Clear@command,f
  9862  0327  3002               	movlw	2
  9863  0328  319D  2514  3182   	fcall	_setDimmerLights_Clear
  9864                           
  9865                           ;OverLoad_B1.c: 116: ;;
  9866                           ;OverLoad_B1.c: 131: if (Load1.StatusOn == 1) {
  9867  032B  0023               	movlb	3	; select bank3
  9868  032C  1F20               	btfss	_Load1^(0+384),6
  9869  032D  2B35               	goto	l7831
  9870                           
  9871                           ;OverLoad_B1.c: 132: Load1.StatusOn = 0;
  9872  032E  1320               	bcf	_Load1^(0+384),6
  9873                           
  9874                           ;OverLoad_B1.c: 133: Load1.TotalLoad = Load1.AD;
  9875  032F  084D               	movf	((_Load1+1)^(0+384)+44),w
  9876  0330  01A7               	clrf	((_Load1+1)^(0+384)+6)
  9877  0331  07A7               	addwf	((_Load1+1)^(0+384)+6),f
  9878  0332  084C               	movf	(_Load1^(0+384)+44),w
  9879  0333  01A6               	clrf	(_Load1^(0+384)+6)
  9880  0334  07A6               	addwf	(_Load1^(0+384)+6),f
  9881  0335                     l7831:	
  9882                           
  9883                           ;OverLoad_B1.c: 135: }
  9884                           ;OverLoad_B1.c: 137: if (Load1.StatusOff == 1) {
  9885  0335  1FA0               	btfss	_Load1^(0+384),7
  9886  0336  2B57               	goto	l7839
  9887                           
  9888                           ;OverLoad_B1.c: 138: Load1.StatusOff = 0;
  9889  0337  13A0               	bcf	_Load1^(0+384),7
  9890                           
  9891                           ;OverLoad_B1.c: 139: Load1.TotalLoad = Load1.AD;
  9892  0338  084D               	movf	((_Load1+1)^(0+384)+44),w
  9893  0339  01A7               	clrf	((_Load1+1)^(0+384)+6)
  9894  033A  07A7               	addwf	((_Load1+1)^(0+384)+6),f
  9895  033B  084C               	movf	(_Load1^(0+384)+44),w
  9896  033C  01A6               	clrf	(_Load1^(0+384)+6)
  9897  033D  07A6               	addwf	(_Load1^(0+384)+6),f
  9898                           
  9899                           ;OverLoad_B1.c: 140: Load1.JudgeValue = 0x32 * Load1.LightsCount;
  9900  033E  085E               	movf	(_Load1^(0+384)+62),w
  9901  033F  0020               	movlb	0	; select bank0
  9902  0340  00B1               	movwf	??_Load_Main
  9903  0341  01B2               	clrf	??_Load_Main+1
  9904  0342  0831               	movf	??_Load_Main,w
  9905  0343  00A0               	movwf	___wmul@multiplier
  9906  0344  0832               	movf	??_Load_Main+1,w
  9907  0345  00A1               	movwf	___wmul@multiplier+1
  9908  0346  3032               	movlw	50
  9909  0347  00A2               	movwf	___wmul@multiplicand
  9910  0348  3000               	movlw	0
  9911  0349  00A3               	movwf	___wmul@multiplicand+1
  9912  034A  319F  2766  3182   	fcall	___wmul
  9913  034D  0020               	movlb	0	; select bank0
  9914  034E  0821               	movf	?___wmul+1,w
  9915  034F  0023               	movlb	3	; select bank3
  9916  0350  01D7               	clrf	((_Load1+1)^(0+384)+54)
  9917  0351  07D7               	addwf	((_Load1+1)^(0+384)+54),f
  9918  0352  0020               	movlb	0	; select bank0
  9919  0353  0820               	movf	?___wmul,w
  9920  0354  0023               	movlb	3	; select bank3
  9921  0355  01D6               	clrf	(_Load1^(0+384)+54)
  9922  0356  07D6               	addwf	(_Load1^(0+384)+54),f
  9923  0357                     l7839:	
  9924                           
  9925                           ;OverLoad_B1.c: 141: }
  9926                           ;OverLoad_B1.c: 142: }
  9927                           ;OverLoad_B1.c: 143: }
  9928                           ;OverLoad_B1.c: 144: }
  9929                           ;OverLoad_B1.c: 145: setLoad_AH_AL_Restore();
  9930  0357  319F  2711         	fcall	_setLoad_AH_AL_Restore
  9931                           
  9932                           ;OverLoad_B1.c: 157: }
  9933                           ;OverLoad_B1.c: 158: } else {
  9934  0359  0008               	return
  9935  035A                     l1644:	
  9936                           
  9937                           ;OverLoad_B1.c: 159: if (Load1.GO == 1) {
  9938  035A  1CA0               	btfss	_Load1^(0+384),1
  9939  035B  2B62               	goto	l1663
  9940                           
  9941                           ;OverLoad_B1.c: 160: if (Load1.LightsON == 0) {
  9942  035C  1920               	btfsc	_Load1^(0+384),2
  9943  035D  2B60               	goto	l1664
  9944                           
  9945                           ;OverLoad_B1.c: 161: Load1.LightsON = 1;
  9946  035E  1520               	bsf	_Load1^(0+384),2
  9947                           
  9948                           ;OverLoad_B1.c: 162: Load1.Safe = 0;
  9949  035F  11A0               	bcf	_Load1^(0+384),3
  9950  0360                     l1664:	
  9951                           ;OverLoad_B1.c: 163: }
  9952                           ;OverLoad_B1.c: 164: if (1 == 1 && 1 == 1) {
  9953                           
  9954                           
  9955                           ;OverLoad_B1.c: 165: Load1.ADtoGO = 1;
  9956  0360  1620               	bsf	_Load1^(0+384),4
  9957                           
  9958                           ;OverLoad_B1.c: 166: }
  9959                           ;OverLoad_B1.c: 167: } else {
  9960  0361  0008               	return
  9961  0362                     l1663:	
  9962                           
  9963                           ;OverLoad_B1.c: 168: if (Load1.LightsON == 1) {
  9964  0362  1D20               	btfss	_Load1^(0+384),2
  9965  0363  0008               	return
  9966                           
  9967                           ;OverLoad_B1.c: 169: Load1.LightsON = 0;
  9968  0364  1120               	bcf	_Load1^(0+384),2
  9969                           
  9970                           ;OverLoad_B1.c: 170: Load1.Safe = 1;
  9971  0365  15A0               	bsf	_Load1^(0+384),3
  9972                           
  9973                           ;OverLoad_B1.c: 171: Load1.ErrorCount = 0;
  9974  0366  01DC               	clrf	(_Load1^(0+384)+60)
  9975                           
  9976                           ;OverLoad_B1.c: 172: Load1.Count = 0;
  9977  0367  01DA               	clrf	(_Load1^(0+384)+58)
  9978                           
  9979                           ;OverLoad_B1.c: 173: Load1.TotalLoad = 0;
  9980  0368  01A6               	clrf	(_Load1^(0+384)+6)
  9981  0369  01A7               	clrf	((_Load1+1)^(0+384)+6)
  9982                           
  9983                           ;OverLoad_B1.c: 174: Load1.NumberCount = 0;
  9984  036A  01DF               	clrf	(_Load1^(0+384)+63)
  9985                           
  9986                           ;OverLoad_B1.c: 175: Load1.StatusOn = 0;
  9987  036B  1320               	bcf	_Load1^(0+384),6
  9988                           
  9989                           ;OverLoad_B1.c: 176: Load1.StatusOff = 0;
  9990  036C  13A0               	bcf	_Load1^(0+384),7
  9991                           
  9992                           ;OverLoad_B1.c: 177: Load1.AD = 0;
  9993  036D  01CC               	clrf	(_Load1^(0+384)+44)
  9994  036E  01CD               	clrf	((_Load1+1)^(0+384)+44)
  9995                           
  9996                           ;OverLoad_B1.c: 178: setLoad_AH_AL_Restore();
  9997  036F  319F  2711  3182   	fcall	_setLoad_AH_AL_Restore
  9998                           
  9999                           ;OverLoad_B1.c: 182: setDimmerLights_Clear(1, 1);
 10000  0372  0020               	movlb	0	; select bank0
 10001  0373  01A2               	clrf	setDimmerLights_Clear@command
 10002  0374  0AA2               	incf	setDimmerLights_Clear@command,f
 10003  0375  3001               	movlw	1
 10004  0376  319D  2514  3182   	fcall	_setDimmerLights_Clear
 10005                           
 10006                           ;OverLoad_B1.c: 186: ;;
 10007                           ;OverLoad_B1.c: 192: setDimmerLights_Clear(2, 1);
 10008  0379  0020               	movlb	0	; select bank0
 10009  037A  01A2               	clrf	setDimmerLights_Clear@command
 10010  037B  0AA2               	incf	setDimmerLights_Clear@command,f
 10011  037C  3002               	movlw	2
 10012  037D  319D  2514         	fcall	_setDimmerLights_Clear
 10013                           
 10014                           ;OverLoad_B1.c: 196: ;;
 10015  037F  0008               	return
 10016  0380                     __end_of_Load_Main:	
 10017                           
 10018                           	psect	text48
 10019  1323                     __ptext48:	
 10020 ;; *************** function _setLoad_Exceptions *****************
 10021 ;; Defined at:
 10022 ;;		line 231 in file "../src/OverLoad_B1.c"
 10023 ;; Parameters:    Size  Location     Type
 10024 ;;  command         1    wreg     unsigned char 
 10025 ;; Auto vars:     Size  Location     Type
 10026 ;;  command         1   16[BANK0 ] unsigned char 
 10027 ;;  i               1   15[BANK0 ] unsigned char 
 10028 ;; Return value:  Size  Location     Type
 10029 ;;		None               void
 10030 ;; Registers used:
 10031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10032 ;; Tracked objects:
 10033 ;;		On entry : 0/0
 10034 ;;		On exit  : 0/0
 10035 ;;		Unchanged: 0/0
 10036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;Total ram usage:        3 bytes
 10042 ;; Hardware stack levels used:    1
 10043 ;; Hardware stack levels required when called:    9
 10044 ;; This function calls:
 10045 ;;		_DimmerLights_Exceptions
 10046 ;;		_setLED
 10047 ;;		_setRF_Enable
 10048 ;;		_setSw_Enable
 10049 ;; This function is called by:
 10050 ;;		_Load_Main
 10051 ;; This function uses a non-reentrant model
 10052 ;;
 10053                           
 10054                           
 10055                           ;psect for function _setLoad_Exceptions
 10056  1323                     _setLoad_Exceptions:	
 10057                           
 10058                           ;incstack = 0
 10059                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10060                           ;setLoad_Exceptions@command stored from wreg
 10061  1323  0020               	movlb	0	; select bank0
 10062  1324  00B0               	movwf	setLoad_Exceptions@command
 10063                           
 10064                           ;OverLoad_B1.c: 232: char i = command == 1 ? 0 : 1;
 10065  1325  0830               	movf	setLoad_Exceptions@command,w
 10066  1326  3A01               	xorlw	1
 10067  1327  3000               	movlw	0
 10068  1328  1D03               	skipz
 10069  1329  3001               	movlw	1
 10070  132A  00AE               	movwf	??_setLoad_Exceptions
 10071  132B  082E               	movf	??_setLoad_Exceptions,w
 10072  132C  00AF               	movwf	setLoad_Exceptions@i
 10073                           
 10074                           ;OverLoad_B1.c: 233: Load1.ERROR = command;
 10075  132D  0830               	movf	setLoad_Exceptions@command,w
 10076  132E  0023               	movlb	3	; select bank3
 10077  132F  12A0               	bcf	_Load1^(0+384),5
 10078  1330  1D03               	skipz
 10079  1331  16A0               	bsf	_Load1^(0+384),5
 10080                           
 10081                           ;OverLoad_B1.c: 234: Load1.Safe = i;
 10082  1332  0020               	movlb	0	; select bank0
 10083  1333  082F               	movf	setLoad_Exceptions@i,w
 10084  1334  0023               	movlb	3	; select bank3
 10085  1335  11A0               	bcf	_Load1^(0+384),3
 10086  1336  1D03               	skipz
 10087  1337  15A0               	bsf	_Load1^(0+384),3
 10088                           
 10089                           ;OverLoad_B1.c: 235: Load1.ErrorStatus = command;
 10090  1338  0020               	movlb	0	; select bank0
 10091  1339  0830               	movf	setLoad_Exceptions@command,w
 10092  133A  00AE               	movwf	??_setLoad_Exceptions
 10093  133B  082E               	movf	??_setLoad_Exceptions,w
 10094  133C  0023               	movlb	3	; select bank3
 10095  133D  00A5               	movwf	(_Load1^(0+384)+5)
 10096                           
 10097                           ;OverLoad_B1.c: 237: if (command == 1) {
 10098  133E  0020               	movlb	0	; select bank0
 10099  133F  0830               	movf	setLoad_Exceptions@command,w
 10100  1340  3A01               	xorlw	1
 10101  1341  1D03               	skipz
 10102  1342  2B47               	goto	l1671
 10103                           
 10104                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 10105  1343  3002               	movlw	2
 10106  1344  3195  25BF  3193   	fcall	_DimmerLights_Exceptions
 10107  1347                     l1671:	
 10108                           
 10109                           ;OverLoad_B1.c: 242: }
 10110                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 10111  1347  0020               	movlb	0	; select bank0
 10112  1348  0830               	movf	setLoad_Exceptions@command,w
 10113  1349  3E0A               	addlw	10
 10114  134A  00AE               	movwf	??_setLoad_Exceptions
 10115  134B  082E               	movf	??_setLoad_Exceptions,w
 10116  134C  00A2               	movwf	setLED@command
 10117  134D  3063               	movlw	99
 10118  134E  3188  2001  3193   	fcall	_setLED
 10119                           
 10120                           ;OverLoad_B1.c: 245: setSw_Enable(i);
 10121  1351  0020               	movlb	0	; select bank0
 10122  1352  082F               	movf	setLoad_Exceptions@i,w
 10123  1353  319F  272D  3193   	fcall	_setSw_Enable
 10124                           
 10125                           ;OverLoad_B1.c: 247: setRF_Enable(i);
 10126  1356  0020               	movlb	0	; select bank0
 10127  1357  082F               	movf	setLoad_Exceptions@i,w
 10128  1358  319C  249B         	fcall	_setRF_Enable
 10129  135A  0008               	return
 10130  135B                     __end_of_setLoad_Exceptions:	
 10131                           
 10132                           	psect	text49
 10133  1F2D                     __ptext49:	
 10134 ;; *************** function _setSw_Enable *****************
 10135 ;; Defined at:
 10136 ;;		line 89 in file "../src/Switch_B1.c"
 10137 ;; Parameters:    Size  Location     Type
 10138 ;;  command         1    wreg     unsigned char 
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;  command         1    2[BANK0 ] unsigned char 
 10141 ;; Return value:  Size  Location     Type
 10142 ;;		None               void
 10143 ;; Registers used:
 10144 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/0
 10147 ;;		On exit  : 0/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;Total ram usage:        1 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:    6
 10157 ;; This function calls:
 10158 ;;		_SwPointSelect
 10159 ;; This function is called by:
 10160 ;;		_my_Main
 10161 ;;		_setLoad_Exceptions
 10162 ;; This function uses a non-reentrant model
 10163 ;;
 10164                           
 10165                           
 10166                           ;psect for function _setSw_Enable
 10167  1F2D                     _setSw_Enable:	
 10168                           
 10169                           ;incstack = 0
 10170                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10171                           ;setSw_Enable@command stored from wreg
 10172  1F2D  0020               	movlb	0	; select bank0
 10173  1F2E  00A2               	movwf	setSw_Enable@command
 10174                           
 10175                           ;Switch_B1.c: 92: SwPointSelect(1);
 10176  1F2F  3001               	movlw	1
 10177  1F30  319D  25FC  319F   	fcall	_SwPointSelect
 10178                           
 10179                           ;Switch_B1.c: 93: Sw->Enable = command;
 10180  1F33  0020               	movlb	0	; select bank0
 10181  1F34  086F               	movf	_Sw,w
 10182  1F35  0086               	movwf	6
 10183  1F36  3001               	movlw	1	; select bank2/3
 10184  1F37  0087               	movwf	7
 10185  1F38  0822               	movf	setSw_Enable@command,w
 10186  1F39  1001               	bcf	1,0
 10187  1F3A  1D03               	skipz
 10188  1F3B  1401               	bsf	1,0
 10189                           
 10190                           ;Switch_B1.c: 97: SwPointSelect(2);
 10191  1F3C  3002               	movlw	2
 10192  1F3D  319D  25FC         	fcall	_SwPointSelect
 10193                           
 10194                           ;Switch_B1.c: 98: Sw->Enable = command;
 10195  1F3F  0020               	movlb	0	; select bank0
 10196  1F40  086F               	movf	_Sw,w
 10197  1F41  0086               	movwf	6
 10198  1F42  3001               	movlw	1	; select bank2/3
 10199  1F43  0087               	movwf	7
 10200  1F44  0822               	movf	setSw_Enable@command,w
 10201  1F45  1001               	bcf	1,0
 10202  1F46  1D03               	skipz
 10203  1F47  1401               	bsf	1,0
 10204  1F48  0008               	return
 10205  1F49                     __end_of_setSw_Enable:	
 10206                           
 10207                           	psect	text50
 10208  1C9B                     __ptext50:	
 10209 ;; *************** function _setRF_Enable *****************
 10210 ;; Defined at:
 10211 ;;		line 193 in file "../src/RF_Control_B1.c"
 10212 ;; Parameters:    Size  Location     Type
 10213 ;;  command         1    wreg     unsigned char 
 10214 ;; Auto vars:     Size  Location     Type
 10215 ;;  command         1    0[BANK0 ] unsigned char 
 10216 ;; Return value:  Size  Location     Type
 10217 ;;		None               void
 10218 ;; Registers used:
 10219 ;;		wreg, status,2
 10220 ;; Tracked objects:
 10221 ;;		On entry : 0/0
 10222 ;;		On exit  : 0/0
 10223 ;;		Unchanged: 0/0
 10224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;Total ram usage:        1 bytes
 10230 ;; Hardware stack levels used:    1
 10231 ;; Hardware stack levels required when called:    5
 10232 ;; This function calls:
 10233 ;;		Nothing
 10234 ;; This function is called by:
 10235 ;;		_my_Main
 10236 ;;		_setLoad_Exceptions
 10237 ;; This function uses a non-reentrant model
 10238 ;;
 10239                           
 10240                           
 10241                           ;psect for function _setRF_Enable
 10242  1C9B                     _setRF_Enable:	
 10243                           
 10244                           ;incstack = 0
 10245                           ; Regs used in _setRF_Enable: [wreg+status,2]
 10246                           ;setRF_Enable@command stored from wreg
 10247  1C9B  0020               	movlb	0	; select bank0
 10248  1C9C  00A0               	movwf	setRF_Enable@command
 10249                           
 10250                           ;RF_Control_B1.c: 194: RF1.Enable = command;
 10251  1C9D  0820               	movf	setRF_Enable@command,w
 10252  1C9E  0021               	movlb	1	; select bank1
 10253  1C9F  1057               	bcf	_RF1^(0+128),0
 10254  1CA0  1D03               	skipz
 10255  1CA1  1457               	bsf	_RF1^(0+128),0
 10256                           
 10257                           ;RF_Control_B1.c: 195: RF1.Learn = 0;
 10258  1CA2  1357               	bcf	_RF1^(0+128),6
 10259                           
 10260                           ;RF_Control_B1.c: 196: RF1.TransceiveGO = 0;
 10261  1CA3  1157               	bcf	_RF1^(0+128),2
 10262                           
 10263                           ;RF_Control_B1.c: 197: RF1.RxStatus = 0;
 10264  1CA4  11D7               	bcf	_RF1^(0+128),3
 10265                           
 10266                           ;RF_Control_B1.c: 198: RF1.ReceiveGO = 0;
 10267  1CA5  10D7               	bcf	_RF1^(0+128),1
 10268                           
 10269                           ;RF_Control_B1.c: 199: RF1.DebounceTime = 0;
 10270  1CA6  01DB               	clrf	(_RF1^(0+128)+4)
 10271                           
 10272                           ;RF_Control_B1.c: 200: RF1.Debounce = 0;
 10273  1CA7  12D7               	bcf	_RF1^(0+128),5
 10274  1CA8  0008               	return
 10275  1CA9                     __end_of_setRF_Enable:	
 10276                           
 10277                           	psect	text51
 10278  15BF                     __ptext51:	
 10279 ;; *************** function _DimmerLights_Exceptions *****************
 10280 ;; Defined at:
 10281 ;;		line 513 in file "../src/Dimmer_B1.c"
 10282 ;; Parameters:    Size  Location     Type
 10283 ;;  status          1    wreg     unsigned char 
 10284 ;; Auto vars:     Size  Location     Type
 10285 ;;  status          1   13[BANK0 ] unsigned char 
 10286 ;; Return value:  Size  Location     Type
 10287 ;;		None               void
 10288 ;; Registers used:
 10289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10290 ;; Tracked objects:
 10291 ;;		On entry : 0/0
 10292 ;;		On exit  : 0/0
 10293 ;;		Unchanged: 0/0
 10294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;Total ram usage:        1 bytes
 10300 ;; Hardware stack levels used:    1
 10301 ;; Hardware stack levels required when called:    8
 10302 ;; This function calls:
 10303 ;;		_getDimmerLights_StatusFlag
 10304 ;;		_setBuz
 10305 ;;		_setDimmerLights_ERROR
 10306 ;;		_setDimmerLights_TriggerERROR
 10307 ;; This function is called by:
 10308 ;;		_setLoad_Exceptions
 10309 ;; This function uses a non-reentrant model
 10310 ;;
 10311                           
 10312                           
 10313                           ;psect for function _DimmerLights_Exceptions
 10314  15BF                     _DimmerLights_Exceptions:	
 10315                           
 10316                           ;incstack = 0
 10317                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10318                           ;DimmerLights_Exceptions@status stored from wreg
 10319  15BF  0020               	movlb	0	; select bank0
 10320  15C0  00AD               	movwf	DimmerLights_Exceptions@status
 10321                           
 10322                           ;Dimmer_B1.c: 514: if (status == 1) {
 10323  15C1  082D               	movf	DimmerLights_Exceptions@status,w
 10324  15C2  3A01               	xorlw	1
 10325  15C3  1D03               	skipz
 10326  15C4  2DD5               	goto	l6615
 10327                           
 10328                           ;Dimmer_B1.c: 515: if (getDimmerLights_StatusFlag() == 1) {
 10329  15C5  319D  2544  3195   	fcall	_getDimmerLights_StatusFlag
 10330  15C8  3A01               	xorlw	1
 10331  15C9  1D03               	skipz
 10332  15CA  2DED               	goto	l6623
 10333                           
 10334                           ;Dimmer_B1.c: 516: setBuz(10, 300);
 10335  15CB  302C               	movlw	44
 10336  15CC  0020               	movlb	0	; select bank0
 10337  15CD  00A9               	movwf	setBuz@time
 10338  15CE  3001               	movlw	1
 10339  15CF  00AA               	movwf	setBuz@time+1
 10340  15D0  300A               	movlw	10
 10341  15D1  3197  274C  3195   	fcall	_setBuz
 10342  15D4  2DED               	goto	l6623
 10343  15D5                     l6615:	
 10344                           ;Dimmer_B1.c: 528: } else if (status == 2)
 10345                           
 10346                           ;Dimmer_B1.c: 523: setDimmerLights_ERROR(2);
 10347                           
 10348                           ;Dimmer_B1.c: 517: }
 10349                           ;Dimmer_B1.c: 520: setDimmerLights_ERROR(1);
 10350                           
 10351  15D5  0020               	movlb	0	; select bank0
 10352  15D6  082D               	movf	DimmerLights_Exceptions@status,w
 10353  15D7  3A02               	xorlw	2
 10354  15D8  1D03               	skipz
 10355  15D9  2DE8               	goto	l6621
 10356                           
 10357                           ;Dimmer_B1.c: 529: {
 10358                           ;Dimmer_B1.c: 530: setBuz(5, 300);
 10359  15DA  302C               	movlw	44
 10360  15DB  00A9               	movwf	setBuz@time
 10361  15DC  3001               	movlw	1
 10362  15DD  00AA               	movwf	setBuz@time+1
 10363  15DE  3005               	movlw	5
 10364  15DF  3197  274C  3195   	fcall	_setBuz
 10365                           
 10366                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(Dimmer->Load);
 10367  15E2  0021               	movlb	1	; select bank1
 10368  15E3  0A5F               	incf	_Dimmer^(0+128),w
 10369  15E4  0086               	movwf	6
 10370  15E5  0187               	clrf	7
 10371  15E6  0801               	movf	1,w
 10372  15E7  2DF2               	goto	L7
 10373  15E8                     l6621:	
 10374                           ;Dimmer_B1.c: 532: } else if (status == 3)
 10375                           
 10376  15E8  0020               	movlb	0	; select bank0
 10377  15E9  082D               	movf	DimmerLights_Exceptions@status,w
 10378  15EA  3A03               	xorlw	3
 10379  15EB  1D03               	skipz
 10380  15EC  2DF5               	goto	l844
 10381  15ED                     l6623:	
 10382                           
 10383                           ;Dimmer_B1.c: 533: {
 10384                           ;Dimmer_B1.c: 535: setDimmerLights_ERROR(1);
 10385  15ED  3001               	movlw	1
 10386  15EE  3196  26F5  3195   	fcall	_setDimmerLights_ERROR
 10387                           
 10388                           ;Dimmer_B1.c: 538: setDimmerLights_ERROR(2);
 10389  15F1  3002               	movlw	2
 10390  15F2                     L7:	
 10391  15F2  3196  26F5  3195   	fcall	_setDimmerLights_ERROR
 10392  15F5                     l844:	
 10393                           
 10394                           ;Dimmer_B1.c: 543: }
 10395                           ;Dimmer_B1.c: 546: setDimmerLights_TriggerERROR(1, 0);
 10396  15F5  0020               	movlb	0	; select bank0
 10397  15F6  01A2               	clrf	setDimmerLights_TriggerERROR@command
 10398  15F7  3001               	movlw	1
 10399  15F8  3191  21FE  3195   	fcall	_setDimmerLights_TriggerERROR
 10400                           
 10401                           ;Dimmer_B1.c: 549: setDimmerLights_TriggerERROR(2, 0);
 10402  15FB  0020               	movlb	0	; select bank0
 10403  15FC  01A2               	clrf	setDimmerLights_TriggerERROR@command
 10404  15FD  3002               	movlw	2
 10405  15FE  3191  21FE  3195   	fcall	_setDimmerLights_TriggerERROR
 10406                           
 10407                           ;Dimmer_B1.c: 555: if (myMain.SelfTest == 0) {
 10408  1601  0021               	movlb	1	; select bank1
 10409  1602  1B20               	btfsc	_myMain^(0+128),6
 10410  1603  0008               	return
 10411                           
 10412                           ;Dimmer_B1.c: 556: myMain.i = 0;
 10413  1604  102E               	bcf	(_myMain^(0+128)+14),0
 10414                           
 10415                           ;Dimmer_B1.c: 557: myMain.j = 0;
 10416  1605  10AE               	bcf	(_myMain^(0+128)+14),1
 10417                           
 10418                           ;Dimmer_B1.c: 558: myMain.k = 1;
 10419  1606  152E               	bsf	(_myMain^(0+128)+14),2
 10420                           
 10421                           ;Dimmer_B1.c: 559: myMain.Count2 = 0;
 10422  1607  01A7               	clrf	(_myMain^(0+128)+7)
 10423  1608  01A8               	clrf	((_myMain+1)^(0+128)+7)
 10424  1609  0008               	return
 10425  160A                     __end_of_DimmerLights_Exceptions:	
 10426                           
 10427                           	psect	text52
 10428  11FE                     __ptext52:	
 10429 ;; *************** function _setDimmerLights_TriggerERROR *****************
 10430 ;; Defined at:
 10431 ;;		line 582 in file "../src/Dimmer_B1.c"
 10432 ;; Parameters:    Size  Location     Type
 10433 ;;  lights          1    wreg     unsigned char 
 10434 ;;  command         1    2[BANK0 ] unsigned char 
 10435 ;; Auto vars:     Size  Location     Type
 10436 ;;  lights          1    3[BANK0 ] unsigned char 
 10437 ;; Return value:  Size  Location     Type
 10438 ;;		None               void
 10439 ;; Registers used:
 10440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10441 ;; Tracked objects:
 10442 ;;		On entry : 0/0
 10443 ;;		On exit  : 0/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10446 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10449 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;Total ram usage:        2 bytes
 10451 ;; Hardware stack levels used:    1
 10452 ;; Hardware stack levels required when called:    6
 10453 ;; This function calls:
 10454 ;;		_DimmerLightsPointSelect
 10455 ;; This function is called by:
 10456 ;;		_DimmerLights_Exceptions
 10457 ;; This function uses a non-reentrant model
 10458 ;;
 10459                           
 10460                           
 10461                           ;psect for function _setDimmerLights_TriggerERROR
 10462  11FE                     _setDimmerLights_TriggerERROR:	
 10463                           
 10464                           ;incstack = 0
 10465                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10466                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 10467  11FE  0020               	movlb	0	; select bank0
 10468  11FF  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 10469                           
 10470                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(lights);
 10471  1200  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 10472  1201  319D  25AD         	fcall	_DimmerLightsPointSelect
 10473                           
 10474                           ;Dimmer_B1.c: 585: DimmerLights->Trigger = command;
 10475  1203  0879               	movf	_DimmerLights,w
 10476  1204  3E08               	addlw	8
 10477  1205  0086               	movwf	6
 10478  1206  3001               	movlw	1	; select bank2/3
 10479  1207  0087               	movwf	7
 10480  1208  0020               	movlb	0	; select bank0
 10481  1209  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10482  120A  1101               	bcf	1,2
 10483  120B  1D03               	skipz
 10484  120C  1501               	bsf	1,2
 10485                           
 10486                           ;Dimmer_B1.c: 586: DimmerLights->Switch = command;
 10487  120D  0879               	movf	_DimmerLights,w
 10488  120E  3E08               	addlw	8
 10489  120F  0086               	movwf	6
 10490  1210  3001               	movlw	1	; select bank2/3
 10491  1211  0087               	movwf	7
 10492  1212  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10493  1213  1081               	bcf	1,1
 10494  1214  1D03               	skipz
 10495  1215  1481               	bsf	1,1
 10496                           
 10497                           ;Dimmer_B1.c: 587: DimmerLights->TriggerAdj = command;
 10498  1216  0879               	movf	_DimmerLights,w
 10499  1217  3E08               	addlw	8
 10500  1218  0086               	movwf	6
 10501  1219  3001               	movlw	1	; select bank2/3
 10502  121A  0087               	movwf	7
 10503  121B  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10504  121C  1201               	bcf	1,4
 10505  121D  1D03               	skipz
 10506  121E  1601               	bsf	1,4
 10507                           
 10508                           ;Dimmer_B1.c: 588: DimmerLights->AdjGo = command;
 10509  121F  0879               	movf	_DimmerLights,w
 10510  1220  3E08               	addlw	8
 10511  1221  0086               	movwf	6
 10512  1222  3001               	movlw	1	; select bank2/3
 10513  1223  0087               	movwf	7
 10514  1224  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10515  1225  1181               	bcf	1,3
 10516  1226  1D03               	skipz
 10517  1227  1581               	bsf	1,3
 10518  1228  0008               	return
 10519  1229                     __end_of_setDimmerLights_TriggerERROR:	
 10520                           
 10521                           	psect	text53
 10522  16F5                     __ptext53:	
 10523 ;; *************** function _setDimmerLights_ERROR *****************
 10524 ;; Defined at:
 10525 ;;		line 564 in file "../src/Dimmer_B1.c"
 10526 ;; Parameters:    Size  Location     Type
 10527 ;;  lights          1    wreg     unsigned char 
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;  lights          1    5[BANK0 ] unsigned char 
 10530 ;; Return value:  Size  Location     Type
 10531 ;;		None               void
 10532 ;; Registers used:
 10533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10534 ;; Tracked objects:
 10535 ;;		On entry : 0/0
 10536 ;;		On exit  : 0/0
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;Total ram usage:        2 bytes
 10544 ;; Hardware stack levels used:    1
 10545 ;; Hardware stack levels required when called:    7
 10546 ;; This function calls:
 10547 ;;		_DimmerLightsPointSelect
 10548 ;;		_setLED
 10549 ;;		_setLoad_StatusOff
 10550 ;;		_setRFSW_Status
 10551 ;;		_setSw_Status
 10552 ;; This function is called by:
 10553 ;;		_DimmerLights_Exceptions
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           
 10558                           ;psect for function _setDimmerLights_ERROR
 10559  16F5                     _setDimmerLights_ERROR:	
 10560                           
 10561                           ;incstack = 0
 10562                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10563                           ;setDimmerLights_ERROR@lights stored from wreg
 10564  16F5  0020               	movlb	0	; select bank0
 10565  16F6  00A5               	movwf	setDimmerLights_ERROR@lights
 10566                           
 10567                           ;Dimmer_B1.c: 565: DimmerLightsPointSelect(lights);
 10568  16F7  0825               	movf	setDimmerLights_ERROR@lights,w
 10569  16F8  319D  25AD  3196   	fcall	_DimmerLightsPointSelect
 10570                           
 10571                           ;Dimmer_B1.c: 566: if (DimmerLights->Status == 1) {
 10572  16FB  0879               	movf	_DimmerLights,w
 10573  16FC  0086               	movwf	6
 10574  16FD  3001               	movlw	1	; select bank2/3
 10575  16FE  0087               	movwf	7
 10576  16FF  1E81               	btfss	1,5
 10577  1700  0008               	return
 10578                           
 10579                           ;Dimmer_B1.c: 568: DimmerLights->Signal = 0;
 10580  1701  0879               	movf	_DimmerLights,w
 10581  1702  0086               	movwf	6
 10582  1703  3001               	movlw	1	; select bank2/3
 10583  1704  0087               	movwf	7
 10584  1705  1081               	bcf	1,1
 10585                           
 10586                           ;Dimmer_B1.c: 569: DimmerLights->AdjFlag = 0;
 10587  1706  0879               	movf	_DimmerLights,w
 10588  1707  0086               	movwf	6
 10589  1708  3001               	movlw	1	; select bank2/3
 10590  1709  0087               	movwf	7
 10591  170A  1181               	bcf	1,3
 10592                           
 10593                           ;Dimmer_B1.c: 570: DimmerLights->AdjStatus = 0;
 10594  170B  0879               	movf	_DimmerLights,w
 10595  170C  0086               	movwf	6
 10596  170D  3001               	movlw	1	; select bank2/3
 10597  170E  0087               	movwf	7
 10598  170F  1201               	bcf	1,4
 10599                           
 10600                           ;Dimmer_B1.c: 571: DimmerLights->StatusFlag = 0;
 10601  1710  0879               	movf	_DimmerLights,w
 10602  1711  0086               	movwf	6
 10603  1712  3001               	movlw	1	; select bank2/3
 10604  1713  0087               	movwf	7
 10605  1714  1301               	bcf	1,6
 10606                           
 10607                           ;Dimmer_B1.c: 572: DimmerLights->DimmingTimeValue = 7;
 10608  1715  3007               	movlw	7
 10609  1716  0020               	movlb	0	; select bank0
 10610  1717  00A4               	movwf	??_setDimmerLights_ERROR
 10611  1718  0879               	movf	_DimmerLights,w
 10612  1719  3E02               	addlw	2
 10613  171A  0086               	movwf	6
 10614  171B  3001               	movlw	1	; select bank2/3
 10615  171C  0087               	movwf	7
 10616  171D  0824               	movf	??_setDimmerLights_ERROR,w
 10617  171E  0081               	movwf	1
 10618                           
 10619                           ;Dimmer_B1.c: 573: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 10620  171F  0879               	movf	_DimmerLights,w
 10621  1720  3E06               	addlw	6
 10622  1721  0086               	movwf	6
 10623  1722  3001               	movlw	1	; select bank2/3
 10624  1723  0087               	movwf	7
 10625  1724  0801               	movf	1,w
 10626  1725  00A4               	movwf	??_setDimmerLights_ERROR
 10627  1726  0879               	movf	_DimmerLights,w
 10628  1727  3E04               	addlw	4
 10629  1728  0086               	movwf	6
 10630  1729  3001               	movlw	1	; select bank2/3
 10631  172A  0087               	movwf	7
 10632  172B  0824               	movf	??_setDimmerLights_ERROR,w
 10633  172C  0081               	movwf	1
 10634                           
 10635                           ;Dimmer_B1.c: 574: Dimmer->Detect = 1;
 10636  172D  0021               	movlb	1	; select bank1
 10637  172E  085F               	movf	_Dimmer^(0+128),w
 10638  172F  0086               	movwf	6
 10639  1730  0187               	clrf	7
 10640  1731  1401               	bsf	1,0
 10641                           
 10642                           ;Dimmer_B1.c: 575: setLoad_StatusOff(lights, 1);
 10643  1732  0020               	movlb	0	; select bank0
 10644  1733  01A0               	clrf	setLoad_StatusOff@command
 10645  1734  0AA0               	incf	setLoad_StatusOff@command,f
 10646  1735  0825               	movf	setDimmerLights_ERROR@lights,w
 10647  1736  319F  27C2  3196   	fcall	_setLoad_StatusOff
 10648                           
 10649                           ;Dimmer_B1.c: 576: setLED(lights, 1);
 10650  1739  0020               	movlb	0	; select bank0
 10651  173A  01A2               	clrf	setLED@command
 10652  173B  0AA2               	incf	setLED@command,f
 10653  173C  0825               	movf	setDimmerLights_ERROR@lights,w
 10654  173D  3188  2001  3196   	fcall	_setLED
 10655                           
 10656                           ;Dimmer_B1.c: 577: setSw_Status(lights, 0);
 10657  1740  0020               	movlb	0	; select bank0
 10658  1741  01A2               	clrf	setSw_Status@command
 10659  1742  0825               	movf	setDimmerLights_ERROR@lights,w
 10660  1743  319C  24B8  3196   	fcall	_setSw_Status
 10661                           
 10662                           ;Dimmer_B1.c: 578: setRFSW_Status(lights, 0);
 10663  1746  0020               	movlb	0	; select bank0
 10664  1747  01A2               	clrf	setRFSW_Status@command
 10665  1748  0825               	movf	setDimmerLights_ERROR@lights,w
 10666  1749  319C  24A9         	fcall	_setRFSW_Status
 10667  174B  0008               	return
 10668  174C                     __end_of_setDimmerLights_ERROR:	
 10669                           
 10670                           	psect	text54
 10671  1D14                     __ptext54:	
 10672 ;; *************** function _setDimmerLights_Clear *****************
 10673 ;; Defined at:
 10674 ;;		line 717 in file "../src/Dimmer_B1.c"
 10675 ;; Parameters:    Size  Location     Type
 10676 ;;  lights          1    wreg     unsigned char 
 10677 ;;  command         1    2[BANK0 ] unsigned char 
 10678 ;; Auto vars:     Size  Location     Type
 10679 ;;  lights          1    3[BANK0 ] unsigned char 
 10680 ;; Return value:  Size  Location     Type
 10681 ;;		None               void
 10682 ;; Registers used:
 10683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10684 ;; Tracked objects:
 10685 ;;		On entry : 0/0
 10686 ;;		On exit  : 0/0
 10687 ;;		Unchanged: 0/0
 10688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10689 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;Total ram usage:        2 bytes
 10694 ;; Hardware stack levels used:    1
 10695 ;; Hardware stack levels required when called:    6
 10696 ;; This function calls:
 10697 ;;		_DimmerLightsPointSelect
 10698 ;; This function is called by:
 10699 ;;		_Load_Main
 10700 ;; This function uses a non-reentrant model
 10701 ;;
 10702                           
 10703                           
 10704                           ;psect for function _setDimmerLights_Clear
 10705  1D14                     _setDimmerLights_Clear:	
 10706                           
 10707                           ;incstack = 0
 10708                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10709                           ;setDimmerLights_Clear@lights stored from wreg
 10710  1D14  0020               	movlb	0	; select bank0
 10711  1D15  00A3               	movwf	setDimmerLights_Clear@lights
 10712                           
 10713                           ;Dimmer_B1.c: 719: DimmerLightsPointSelect(lights);
 10714  1D16  0823               	movf	setDimmerLights_Clear@lights,w
 10715  1D17  319D  25AD         	fcall	_DimmerLightsPointSelect
 10716                           
 10717                           ;Dimmer_B1.c: 720: DimmerLights->Clear = command;
 10718  1D19  0879               	movf	_DimmerLights,w
 10719  1D1A  3E09               	addlw	9
 10720  1D1B  0086               	movwf	6
 10721  1D1C  3001               	movlw	1	; select bank2/3
 10722  1D1D  0087               	movwf	7
 10723  1D1E  0020               	movlb	0	; select bank0
 10724  1D1F  0822               	movf	setDimmerLights_Clear@command,w
 10725  1D20  1101               	bcf	1,2
 10726  1D21  1D03               	skipz
 10727  1D22  1501               	bsf	1,2
 10728  1D23  0008               	return
 10729  1D24                     __end_of_setDimmerLights_Clear:	
 10730                           
 10731                           	psect	text55
 10732  1F66                     __ptext55:	
 10733 ;; *************** function ___wmul *****************
 10734 ;; Defined at:
 10735 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10736 ;; Parameters:    Size  Location     Type
 10737 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10738 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10739 ;; Auto vars:     Size  Location     Type
 10740 ;;  product         2    4[BANK0 ] unsigned int 
 10741 ;; Return value:  Size  Location     Type
 10742 ;;                  2    0[BANK0 ] unsigned int 
 10743 ;; Registers used:
 10744 ;;		wreg, status,2, status,0
 10745 ;; Tracked objects:
 10746 ;;		On entry : 0/0
 10747 ;;		On exit  : 0/0
 10748 ;;		Unchanged: 0/0
 10749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10750 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;Total ram usage:        6 bytes
 10755 ;; Hardware stack levels used:    1
 10756 ;; Hardware stack levels required when called:    5
 10757 ;; This function calls:
 10758 ;;		Nothing
 10759 ;; This function is called by:
 10760 ;;		_Load_Main
 10761 ;; This function uses a non-reentrant model
 10762 ;;
 10763                           
 10764                           
 10765                           ;psect for function ___wmul
 10766  1F66                     ___wmul:	
 10767                           
 10768                           ;incstack = 0
 10769                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10770  1F66  0020               	movlb	0	; select bank0
 10771  1F67  01A4               	clrf	___wmul@product
 10772  1F68  01A5               	clrf	___wmul@product+1
 10773  1F69                     l7471:	
 10774  1F69  1C20               	btfss	___wmul@multiplier,0
 10775  1F6A  2F6F               	goto	l2708
 10776  1F6B  0822               	movf	___wmul@multiplicand,w
 10777  1F6C  07A4               	addwf	___wmul@product,f
 10778  1F6D  0823               	movf	___wmul@multiplicand+1,w
 10779  1F6E  3DA5               	addwfc	___wmul@product+1,f
 10780  1F6F                     l2708:	
 10781  1F6F  3001               	movlw	1
 10782  1F70                     u7145:	
 10783  1F70  35A2               	lslf	___wmul@multiplicand,f
 10784  1F71  0DA3               	rlf	___wmul@multiplicand+1,f
 10785  1F72  0B89               	decfsz	9,f
 10786  1F73  2F70               	goto	u7145
 10787  1F74  3001               	movlw	1
 10788  1F75                     u7155:	
 10789  1F75  36A1               	lsrf	___wmul@multiplier+1,f
 10790  1F76  0CA0               	rrf	___wmul@multiplier,f
 10791  1F77  0B89               	decfsz	9,f
 10792  1F78  2F75               	goto	u7155
 10793  1F79  0821               	movf	___wmul@multiplier+1,w
 10794  1F7A  0420               	iorwf	___wmul@multiplier,w
 10795  1F7B  1D03               	skipz
 10796  1F7C  2F69               	goto	l7471
 10797  1F7D  0825               	movf	___wmul@product+1,w
 10798  1F7E  01A1               	clrf	?___wmul+1
 10799  1F7F  07A1               	addwf	?___wmul+1,f
 10800  1F80  0824               	movf	___wmul@product,w
 10801  1F81  01A0               	clrf	?___wmul
 10802  1F82  07A0               	addwf	?___wmul,f
 10803  1F83  0008               	return
 10804  1F84                     __end_of___wmul:	
 10805                           
 10806                           	psect	text56
 10807  12EC                     __ptext56:	
 10808 ;; *************** function ___lwdiv *****************
 10809 ;; Defined at:
 10810 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10811 ;; Parameters:    Size  Location     Type
 10812 ;;  divisor         2    0[BANK0 ] unsigned int 
 10813 ;;  dividend        2    2[BANK0 ] unsigned int 
 10814 ;; Auto vars:     Size  Location     Type
 10815 ;;  quotient        2    5[BANK0 ] unsigned int 
 10816 ;;  counter         1    7[BANK0 ] unsigned char 
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  2    0[BANK0 ] unsigned int 
 10819 ;; Registers used:
 10820 ;;		wreg, status,2, status,0
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10826 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;Total ram usage:        8 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:    5
 10833 ;; This function calls:
 10834 ;;		Nothing
 10835 ;; This function is called by:
 10836 ;;		_Load_Main
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           
 10841                           ;psect for function ___lwdiv
 10842  12EC                     ___lwdiv:	
 10843                           
 10844                           ;incstack = 0
 10845                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10846  12EC  0020               	movlb	0	; select bank0
 10847  12ED  01A5               	clrf	___lwdiv@quotient
 10848  12EE  01A6               	clrf	___lwdiv@quotient+1
 10849  12EF  0821               	movf	___lwdiv@divisor+1,w
 10850  12F0  0420               	iorwf	___lwdiv@divisor,w
 10851  12F1  1903               	skipnz
 10852  12F2  2B1C               	goto	l7503
 10853  12F3  01A7               	clrf	___lwdiv@counter
 10854  12F4  0AA7               	incf	___lwdiv@counter,f
 10855  12F5                     l7491:	
 10856  12F5  1BA1               	btfsc	___lwdiv@divisor+1,7
 10857  12F6  2B01               	goto	l7493
 10858  12F7  3001               	movlw	1
 10859  12F8                     u7185:	
 10860  12F8  35A0               	lslf	___lwdiv@divisor,f
 10861  12F9  0DA1               	rlf	___lwdiv@divisor+1,f
 10862  12FA  0B89               	decfsz	9,f
 10863  12FB  2AF8               	goto	u7185
 10864  12FC  3001               	movlw	1
 10865  12FD  00A4               	movwf	??___lwdiv
 10866  12FE  0824               	movf	??___lwdiv,w
 10867  12FF  07A7               	addwf	___lwdiv@counter,f
 10868  1300  2AF5               	goto	l7491
 10869  1301                     l7493:	
 10870  1301  3001               	movlw	1
 10871  1302                     u7205:	
 10872  1302  35A5               	lslf	___lwdiv@quotient,f
 10873  1303  0DA6               	rlf	___lwdiv@quotient+1,f
 10874  1304  0B89               	decfsz	9,f
 10875  1305  2B02               	goto	u7205
 10876  1306  0821               	movf	___lwdiv@divisor+1,w
 10877  1307  0223               	subwf	___lwdiv@dividend+1,w
 10878  1308  1D03               	skipz
 10879  1309  2B0C               	goto	u7215
 10880  130A  0820               	movf	___lwdiv@divisor,w
 10881  130B  0222               	subwf	___lwdiv@dividend,w
 10882  130C                     u7215:	
 10883  130C  1C03               	skipc
 10884  130D  2B13               	goto	l7499
 10885  130E  0820               	movf	___lwdiv@divisor,w
 10886  130F  02A2               	subwf	___lwdiv@dividend,f
 10887  1310  0821               	movf	___lwdiv@divisor+1,w
 10888  1311  3BA3               	subwfb	___lwdiv@dividend+1,f
 10889  1312  1425               	bsf	___lwdiv@quotient,0
 10890  1313                     l7499:	
 10891  1313  3001               	movlw	1
 10892  1314                     u7225:	
 10893  1314  36A1               	lsrf	___lwdiv@divisor+1,f
 10894  1315  0CA0               	rrf	___lwdiv@divisor,f
 10895  1316  0B89               	decfsz	9,f
 10896  1317  2B14               	goto	u7225
 10897  1318  3001               	movlw	1
 10898  1319  02A7               	subwf	___lwdiv@counter,f
 10899  131A  1D03               	btfss	3,2
 10900  131B  2B01               	goto	l7493
 10901  131C                     l7503:	
 10902  131C  0826               	movf	___lwdiv@quotient+1,w
 10903  131D  01A1               	clrf	?___lwdiv+1
 10904  131E  07A1               	addwf	?___lwdiv+1,f
 10905  131F  0825               	movf	___lwdiv@quotient,w
 10906  1320  01A0               	clrf	?___lwdiv
 10907  1321  07A0               	addwf	?___lwdiv,f
 10908  1322  0008               	return
 10909  1323                     __end_of___lwdiv:	
 10910                           
 10911                           	psect	text57
 10912  1BA0                     __ptext57:	
 10913 ;; *************** function _Load_Initialization *****************
 10914 ;; Defined at:
 10915 ;;		line 9 in file "../src/OverLoad_B1.c"
 10916 ;; Parameters:    Size  Location     Type
 10917 ;;		None
 10918 ;; Auto vars:     Size  Location     Type
 10919 ;;		None
 10920 ;; Return value:  Size  Location     Type
 10921 ;;		None               void
 10922 ;; Registers used:
 10923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10924 ;; Tracked objects:
 10925 ;;		On entry : 0/0
 10926 ;;		On exit  : 0/0
 10927 ;;		Unchanged: 0/0
 10928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10933 ;;Total ram usage:        0 bytes
 10934 ;; Hardware stack levels used:    1
 10935 ;; Hardware stack levels required when called:    6
 10936 ;; This function calls:
 10937 ;;		_setLoad_AH_AL_Restore
 10938 ;; This function is called by:
 10939 ;;		_main
 10940 ;; This function uses a non-reentrant model
 10941 ;;
 10942                           
 10943                           
 10944                           ;psect for function _Load_Initialization
 10945  1BA0                     _Load_Initialization:	
 10946                           
 10947                           ;OverLoad_B1.c: 10: Load1.Safe = 1;
 10948                           
 10949                           ;incstack = 0
 10950                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10951  1BA0  0023               	movlb	3	; select bank3
 10952  1BA1  15A0               	bsf	_Load1^(0+384),3
 10953                           
 10954                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10955  1BA2  319F  2711         	fcall	_setLoad_AH_AL_Restore
 10956  1BA4  0008               	return
 10957  1BA5                     __end_of_Load_Initialization:	
 10958                           
 10959                           	psect	text58
 10960  1F11                     __ptext58:	
 10961 ;; *************** function _setLoad_AH_AL_Restore *****************
 10962 ;; Defined at:
 10963 ;;		line 307 in file "../src/OverLoad_B1.c"
 10964 ;; Parameters:    Size  Location     Type
 10965 ;;		None
 10966 ;; Auto vars:     Size  Location     Type
 10967 ;;  i               1    1[BANK0 ] unsigned char 
 10968 ;; Return value:  Size  Location     Type
 10969 ;;		None               void
 10970 ;; Registers used:
 10971 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10972 ;; Tracked objects:
 10973 ;;		On entry : 0/0
 10974 ;;		On exit  : 0/0
 10975 ;;		Unchanged: 0/0
 10976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;Total ram usage:        2 bytes
 10982 ;; Hardware stack levels used:    1
 10983 ;; Hardware stack levels required when called:    5
 10984 ;; This function calls:
 10985 ;;		Nothing
 10986 ;; This function is called by:
 10987 ;;		_Load_Initialization
 10988 ;;		_Load_Main
 10989 ;; This function uses a non-reentrant model
 10990 ;;
 10991                           
 10992                           
 10993                           ;psect for function _setLoad_AH_AL_Restore
 10994  1F11                     _setLoad_AH_AL_Restore:	
 10995                           
 10996                           ;OverLoad_B1.c: 308: char i;
 10997                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 10998                           
 10999                           ;incstack = 0
 11000                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11001  1F11  0020               	movlb	0	; select bank0
 11002  1F12  01A1               	clrf	setLoad_AH_AL_Restore@i
 11003  1F13                     L8:	
 11004  1F13  3005               	movlw	5
 11005  1F14  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11006  1F15  1803               	btfsc	3,0
 11007  1F16  0008               	return
 11008                           
 11009                           ;OverLoad_B1.c: 310: Load1.AH[i] = 0;
 11010  1F17  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11011  1F18  3EA8               	addlw	(_Load1+8)& (0+255)
 11012  1F19  0086               	movwf	6
 11013  1F1A  3001               	movlw	1	; select bank3/4
 11014  1F1B  0087               	movwf	7
 11015  1F1C  3000               	movlw	0
 11016  1F1D  3FC0               	movwi [0]fsr1
 11017  1F1E  3FC1               	movwi [1]fsr1
 11018                           
 11019                           ;OverLoad_B1.c: 311: Load1.AL[i] = 0xffff;
 11020  1F1F  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11021  1F20  3EBA               	addlw	(_Load1+26)& (0+255)
 11022  1F21  0086               	movwf	6
 11023  1F22  3001               	movlw	1	; select bank3/4
 11024  1F23  0087               	movwf	7
 11025  1F24  30FF               	movlw	255
 11026  1F25  3FC0               	movwi [0]fsr1
 11027  1F26  30FF               	movlw	255
 11028  1F27  3FC1               	movwi [1]fsr1
 11029  1F28  3001               	movlw	1
 11030  1F29  00A0               	movwf	??_setLoad_AH_AL_Restore
 11031  1F2A  0820               	movf	??_setLoad_AH_AL_Restore,w
 11032  1F2B  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11033  1F2C  2F13               	goto	L8
 11034  1F2D                     __end_of_setLoad_AH_AL_Restore:	
 11035                           
 11036                           	psect	text59
 11037  1066                     __ptext59:	
 11038 ;; *************** function _LED_Main *****************
 11039 ;; Defined at:
 11040 ;;		line 47 in file "../src/LED_B1.c"
 11041 ;; Parameters:    Size  Location     Type
 11042 ;;		None
 11043 ;; Auto vars:     Size  Location     Type
 11044 ;;		None
 11045 ;; Return value:  Size  Location     Type
 11046 ;;		None               void
 11047 ;; Registers used:
 11048 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11049 ;; Tracked objects:
 11050 ;;		On entry : 0/0
 11051 ;;		On exit  : 0/0
 11052 ;;		Unchanged: 0/0
 11053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11058 ;;Total ram usage:        0 bytes
 11059 ;; Hardware stack levels used:    1
 11060 ;; Hardware stack levels required when called:    7
 11061 ;; This function calls:
 11062 ;;		_setLED_Main
 11063 ;; This function is called by:
 11064 ;;		_main
 11065 ;; This function uses a non-reentrant model
 11066 ;;
 11067                           
 11068                           
 11069                           ;psect for function _LED_Main
 11070  1066                     _LED_Main:	
 11071                           
 11072                           ;LED_B1.c: 49: setLED_Main(1);
 11073                           
 11074                           ;incstack = 0
 11075                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11076  1066  3001               	movlw	1
 11077  1067  3193  2396  3190   	fcall	_setLED_Main
 11078                           
 11079                           ;LED_B1.c: 52: setLED_Main(2);
 11080  106A  3002               	movlw	2
 11081  106B  3193  2396  3190   	fcall	_setLED_Main
 11082                           
 11083                           ;LED_B1.c: 58: setLED_Main(99);
 11084  106E  3063               	movlw	99
 11085  106F  3193  2396         	fcall	_setLED_Main
 11086  1071  0008               	return
 11087  1072                     __end_of_LED_Main:	
 11088                           
 11089                           	psect	text60
 11090  1396                     __ptext60:	
 11091 ;; *************** function _setLED_Main *****************
 11092 ;; Defined at:
 11093 ;;		line 192 in file "../src/LED_B1.c"
 11094 ;; Parameters:    Size  Location     Type
 11095 ;;  led             1    wreg     unsigned char 
 11096 ;; Auto vars:     Size  Location     Type
 11097 ;;  led             1    4[BANK0 ] unsigned char 
 11098 ;; Return value:  Size  Location     Type
 11099 ;;		None               void
 11100 ;; Registers used:
 11101 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11102 ;; Tracked objects:
 11103 ;;		On entry : 0/0
 11104 ;;		On exit  : 0/0
 11105 ;;		Unchanged: 0/0
 11106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11109 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11110 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;Total ram usage:        3 bytes
 11112 ;; Hardware stack levels used:    1
 11113 ;; Hardware stack levels required when called:    6
 11114 ;; This function calls:
 11115 ;;		_LedPointSelect
 11116 ;; This function is called by:
 11117 ;;		_LED_Main
 11118 ;; This function uses a non-reentrant model
 11119 ;;
 11120                           
 11121                           
 11122                           ;psect for function _setLED_Main
 11123  1396                     _setLED_Main:	
 11124                           
 11125                           ;incstack = 0
 11126                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11127                           ;setLED_Main@led stored from wreg
 11128  1396  0020               	movlb	0	; select bank0
 11129  1397  00A4               	movwf	setLED_Main@led
 11130                           
 11131                           ;LED_B1.c: 193: LedPointSelect(led);
 11132  1398  0824               	movf	setLED_Main@led,w
 11133  1399  319F  2749  3193   	fcall	_LedPointSelect
 11134                           
 11135                           ;LED_B1.c: 194: if (LED->GO == 1) {
 11136  139C  087B               	movf	_LED,w
 11137  139D  0086               	movwf	6
 11138  139E  3001               	movlw	1	; select bank2/3
 11139  139F  0087               	movwf	7
 11140  13A0  1C81               	btfss	1,1
 11141  13A1  0008               	return
 11142                           
 11143                           ;LED_B1.c: 195: LED->Time++;
 11144  13A2  0A7B               	incf	_LED,w
 11145  13A3  0086               	movwf	6
 11146  13A4  3001               	movlw	1	; select bank2/3
 11147  13A5  0087               	movwf	7
 11148  13A6  3001               	movlw	1
 11149  13A7  0781               	addwf	1,f
 11150  13A8  3141               	addfsr 1,1
 11151  13A9  1803               	skipnc
 11152  13AA  0A81               	incf	1,f
 11153                           
 11154                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 11155  13AB  0A7B               	incf	_LED,w
 11156  13AC  0086               	movwf	6
 11157  13AD  3001               	movlw	1	; select bank2/3
 11158  13AE  0087               	movwf	7
 11159  13AF  3F40               	moviw [0]fsr1
 11160  13B0  0020               	movlb	0	; select bank0
 11161  13B1  00A2               	movwf	??_setLED_Main
 11162  13B2  3F41               	moviw [1]fsr1
 11163  13B3  00A3               	movwf	??_setLED_Main+1
 11164  13B4  3000               	movlw	0
 11165  13B5  0223               	subwf	??_setLED_Main+1,w
 11166  13B6  3032               	movlw	50
 11167  13B7  1903               	skipnz
 11168  13B8  0222               	subwf	??_setLED_Main,w
 11169  13B9  1C03               	skipc
 11170  13BA  0008               	return
 11171                           
 11172                           ;LED_B1.c: 197: LED->Time = 0;
 11173  13BB  0A7B               	incf	_LED,w
 11174  13BC  0086               	movwf	6
 11175  13BD  3001               	movlw	1	; select bank2/3
 11176  13BE  0087               	movwf	7
 11177  13BF  3000               	movlw	0
 11178  13C0  3FC0               	movwi [0]fsr1
 11179  13C1  3FC1               	movwi [1]fsr1
 11180                           
 11181                           ;LED_B1.c: 199: if (led == 1) {
 11182  13C2  0824               	movf	setLED_Main@led,w
 11183  13C3  3A01               	xorlw	1
 11184  13C4  1D03               	skipz
 11185  13C5  2BC9               	goto	l7157
 11186                           
 11187                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 11188  13C6  3008               	movlw	8
 11189  13C7  068C               	xorwf	12,f
 11190                           
 11191                           ;LED_B1.c: 201: }
 11192  13C8  0008               	return
 11193  13C9                     l7157:	
 11194                           
 11195                           ;LED_B1.c: 204: else if (led == 2) {
 11196  13C9  0824               	movf	setLED_Main@led,w
 11197  13CA  3A02               	xorlw	2
 11198  13CB  1D03               	skipz
 11199  13CC  2BD0               	goto	l7161
 11200                           
 11201                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 11202  13CD  3080               	movlw	128
 11203  13CE  068E               	xorwf	14,f
 11204                           
 11205                           ;LED_B1.c: 206: }
 11206  13CF  0008               	return
 11207  13D0                     l7161:	
 11208                           
 11209                           ;LED_B1.c: 214: else if (led == 99) {
 11210  13D0  0824               	movf	setLED_Main@led,w
 11211  13D1  3A63               	xorlw	99
 11212  13D2  1D03               	skipz
 11213  13D3  0008               	return
 11214                           
 11215                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 11216  13D4  3020               	movlw	32
 11217  13D5  068D               	xorwf	13,f
 11218  13D6  0008               	return
 11219  13D7                     __end_of_setLED_Main:	
 11220                           
 11221                           	psect	text61
 11222  1C5A                     __ptext61:	
 11223 ;; *************** function _LED_Initialization *****************
 11224 ;; Defined at:
 11225 ;;		line 31 in file "../src/LED_B1.c"
 11226 ;; Parameters:    Size  Location     Type
 11227 ;;		None
 11228 ;; Auto vars:     Size  Location     Type
 11229 ;;		None
 11230 ;; Return value:  Size  Location     Type
 11231 ;;		None               void
 11232 ;; Registers used:
 11233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11234 ;; Tracked objects:
 11235 ;;		On entry : 0/0
 11236 ;;		On exit  : 0/0
 11237 ;;		Unchanged: 0/0
 11238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;Total ram usage:        0 bytes
 11244 ;; Hardware stack levels used:    1
 11245 ;; Hardware stack levels required when called:    8
 11246 ;; This function calls:
 11247 ;;		_setLED_Initialization
 11248 ;; This function is called by:
 11249 ;;		_main
 11250 ;; This function uses a non-reentrant model
 11251 ;;
 11252                           
 11253                           
 11254                           ;psect for function _LED_Initialization
 11255  1C5A                     _LED_Initialization:	
 11256                           
 11257                           ;LED_B1.c: 33: setLED_Initialization(1);
 11258                           
 11259                           ;incstack = 0
 11260                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11261  1C5A  3001               	movlw	1
 11262  1C5B  319D  2555  319C   	fcall	_setLED_Initialization
 11263                           
 11264                           ;LED_B1.c: 36: setLED_Initialization(2);
 11265  1C5E  3002               	movlw	2
 11266  1C5F  319D  2555  319C   	fcall	_setLED_Initialization
 11267                           
 11268                           ;LED_B1.c: 42: setLED_Initialization(99);
 11269  1C62  3063               	movlw	99
 11270  1C63  319D  2555         	fcall	_setLED_Initialization
 11271  1C65  0008               	return
 11272  1C66                     __end_of_LED_Initialization:	
 11273                           
 11274                           	psect	text62
 11275  1D55                     __ptext62:	
 11276 ;; *************** function _setLED_Initialization *****************
 11277 ;; Defined at:
 11278 ;;		line 63 in file "../src/LED_B1.c"
 11279 ;; Parameters:    Size  Location     Type
 11280 ;;  led             1    wreg     unsigned char 
 11281 ;; Auto vars:     Size  Location     Type
 11282 ;;  led             1    4[BANK0 ] unsigned char 
 11283 ;; Return value:  Size  Location     Type
 11284 ;;		None               void
 11285 ;; Registers used:
 11286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11287 ;; Tracked objects:
 11288 ;;		On entry : 0/0
 11289 ;;		On exit  : 0/0
 11290 ;;		Unchanged: 0/0
 11291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;Total ram usage:        1 bytes
 11297 ;; Hardware stack levels used:    1
 11298 ;; Hardware stack levels required when called:    7
 11299 ;; This function calls:
 11300 ;;		_LedPointSelect
 11301 ;;		_setLED
 11302 ;; This function is called by:
 11303 ;;		_LED_Initialization
 11304 ;; This function uses a non-reentrant model
 11305 ;;
 11306                           
 11307                           
 11308                           ;psect for function _setLED_Initialization
 11309  1D55                     _setLED_Initialization:	
 11310                           
 11311                           ;incstack = 0
 11312                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11313                           ;setLED_Initialization@led stored from wreg
 11314  1D55  0020               	movlb	0	; select bank0
 11315  1D56  00A4               	movwf	setLED_Initialization@led
 11316                           
 11317                           ;LED_B1.c: 64: LedPointSelect(led);
 11318  1D57  0824               	movf	setLED_Initialization@led,w
 11319  1D58  319F  2749  319D   	fcall	_LedPointSelect
 11320                           
 11321                           ;LED_B1.c: 65: LED->Enable = 1;
 11322  1D5B  087B               	movf	_LED,w
 11323  1D5C  0086               	movwf	6
 11324  1D5D  3001               	movlw	1	; select bank2/3
 11325  1D5E  0087               	movwf	7
 11326  1D5F  1401               	bsf	1,0
 11327                           
 11328                           ;LED_B1.c: 66: setLED(led, 0);
 11329  1D60  0020               	movlb	0	; select bank0
 11330  1D61  01A2               	clrf	setLED@command
 11331  1D62  0824               	movf	setLED_Initialization@led,w
 11332  1D63  3188  2001         	fcall	_setLED
 11333  1D65  0008               	return
 11334  1D66                     __end_of_setLED_Initialization:	
 11335                           
 11336                           	psect	text63
 11337  1FE1                     __ptext63:	
 11338 ;; *************** function _Flash_Memory_Main *****************
 11339 ;; Defined at:
 11340 ;;		line 793 in file "../src/MCU_B1.c"
 11341 ;; Parameters:    Size  Location     Type
 11342 ;;		None
 11343 ;; Auto vars:     Size  Location     Type
 11344 ;;		None
 11345 ;; Return value:  Size  Location     Type
 11346 ;;		None               void
 11347 ;; Registers used:
 11348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11349 ;; Tracked objects:
 11350 ;;		On entry : 0/0
 11351 ;;		On exit  : 0/0
 11352 ;;		Unchanged: 0/0
 11353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;Total ram usage:        0 bytes
 11359 ;; Hardware stack levels used:    1
 11360 ;; Hardware stack levels required when called:    8
 11361 ;; This function calls:
 11362 ;;		_Flash_Memory_Modify
 11363 ;; This function is called by:
 11364 ;;		_main
 11365 ;; This function uses a non-reentrant model
 11366 ;;
 11367                           
 11368                           
 11369                           ;psect for function _Flash_Memory_Main
 11370  1FE1                     _Flash_Memory_Main:	
 11371                           
 11372                           ;MCU_B1.c: 794: if (Memory.GO == 1) {
 11373                           
 11374                           ;incstack = 0
 11375                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11376  1FE1  0024               	movlb	4	; select bank4
 11377  1FE2  1CC4               	btfss	(_Memory^(0+512)+36),1
 11378  1FE3  0008               	return
 11379                           
 11380                           ;MCU_B1.c: 795: if (Memory.Modify == 1) {
 11381  1FE4  1C44               	btfss	(_Memory^(0+512)+36),0
 11382  1FE5  2FFE               	goto	l1329
 11383                           
 11384                           ;MCU_B1.c: 796: Memory.Time++;
 11385  1FE6  3001               	movlw	1
 11386  1FE7  07C2               	addwf	(_Memory^(0+512)+34),f
 11387  1FE8  3000               	movlw	0
 11388  1FE9  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11389                           
 11390                           ;MCU_B1.c: 797: if (Memory.Time == 25)
 11391  1FEA  3022               	movlw	34
 11392  1FEB  3E20               	addlw	_Memory& (0+255)
 11393  1FEC  0086               	movwf	6
 11394  1FED  3002               	movlw	2	; select bank4/5
 11395  1FEE  0087               	movwf	7
 11396  1FEF  3F40               	moviw [0]fsr1
 11397  1FF0  3A19               	xorlw	25
 11398  1FF1  1D03               	skipz
 11399  1FF2  2FF5               	goto	u7455
 11400  1FF3  3F41               	moviw [1]fsr1
 11401  1FF4  3A00               	xorlw	0
 11402  1FF5                     u7455:	
 11403  1FF5  1D03               	skipz
 11404  1FF6  0008               	return
 11405                           
 11406                           ;MCU_B1.c: 798: {
 11407                           ;MCU_B1.c: 799: Memory.Time = 0;
 11408  1FF7  01C2               	clrf	(_Memory^(0+512)+34)
 11409  1FF8  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11410                           
 11411                           ;MCU_B1.c: 800: Memory.Modify = 0;
 11412  1FF9  1044               	bcf	(_Memory^(0+512)+36),0
 11413                           
 11414                           ;MCU_B1.c: 801: Memory.GO = 0;
 11415  1FFA  10C4               	bcf	(_Memory^(0+512)+36),1
 11416                           
 11417                           ;MCU_B1.c: 802: Flash_Memory_Modify();
 11418  1FFB  3194  245E         	fcall	_Flash_Memory_Modify
 11419                           
 11420                           ;MCU_B1.c: 803: }
 11421                           ;MCU_B1.c: 804: } else {
 11422  1FFD  0008               	return
 11423  1FFE                     l1329:	
 11424                           
 11425                           ;MCU_B1.c: 805: Memory.GO = 0;
 11426  1FFE  10C4               	bcf	(_Memory^(0+512)+36),1
 11427  1FFF  0008               	return
 11428  2000                     __end_of_Flash_Memory_Main:	
 11429                           
 11430                           	psect	text64
 11431  145E                     __ptext64:	
 11432 ;; *************** function _Flash_Memory_Modify *****************
 11433 ;; Defined at:
 11434 ;;		line 862 in file "../src/MCU_B1.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;		None
 11437 ;; Auto vars:     Size  Location     Type
 11438 ;;  i               1    5[BANK0 ] unsigned char 
 11439 ;; Return value:  Size  Location     Type
 11440 ;;		None               void
 11441 ;; Registers used:
 11442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11443 ;; Tracked objects:
 11444 ;;		On entry : 0/0
 11445 ;;		On exit  : 0/0
 11446 ;;		Unchanged: 0/0
 11447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11452 ;;Total ram usage:        2 bytes
 11453 ;; Hardware stack levels used:    1
 11454 ;; Hardware stack levels required when called:    7
 11455 ;; This function calls:
 11456 ;;		_Flash_Memory_Erasing
 11457 ;;		_Flash_Memory_Read
 11458 ;;		_Flash_Memory_Write
 11459 ;; This function is called by:
 11460 ;;		_Flash_Memory_Main
 11461 ;; This function uses a non-reentrant model
 11462 ;;
 11463                           
 11464                           
 11465                           ;psect for function _Flash_Memory_Modify
 11466  145E                     _Flash_Memory_Modify:	
 11467                           
 11468                           ;MCU_B1.c: 863: char i = 0;
 11469                           
 11470                           ;incstack = 0
 11471                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11472  145E  0020               	movlb	0	; select bank0
 11473  145F  01A5               	clrf	Flash_Memory_Modify@i
 11474                           
 11475                           ;MCU_B1.c: 864: for (i = 0; i < 32; i++) {
 11476  1460  01A5               	clrf	Flash_Memory_Modify@i
 11477  1461  3020               	movlw	32
 11478  1462  0225               	subwf	Flash_Memory_Modify@i,w
 11479  1463  1803               	btfsc	3,0
 11480  1464  2C7A               	goto	l7249
 11481  1465                     l7243:	
 11482                           
 11483                           ;MCU_B1.c: 865: Memory.Data[i] = Flash_Memory_Read(i);
 11484  1465  0825               	movf	Flash_Memory_Modify@i,w
 11485  1466  319E  26F7  3194   	fcall	_Flash_Memory_Read
 11486  1469  0020               	movlb	0	; select bank0
 11487  146A  00A4               	movwf	??_Flash_Memory_Modify
 11488  146B  0825               	movf	Flash_Memory_Modify@i,w
 11489  146C  3E20               	addlw	_Memory& (0+255)
 11490  146D  0086               	movwf	6
 11491  146E  3002               	movlw	2	; select bank4/5
 11492  146F  0087               	movwf	7
 11493  1470  0824               	movf	??_Flash_Memory_Modify,w
 11494  1471  0081               	movwf	1
 11495  1472  3001               	movlw	1
 11496  1473  00A4               	movwf	??_Flash_Memory_Modify
 11497  1474  0824               	movf	??_Flash_Memory_Modify,w
 11498  1475  07A5               	addwf	Flash_Memory_Modify@i,f
 11499  1476  3020               	movlw	32
 11500  1477  0225               	subwf	Flash_Memory_Modify@i,w
 11501  1478  1C03               	skipc
 11502  1479  2C65               	goto	l7243
 11503  147A                     l7249:	
 11504                           
 11505                           ;MCU_B1.c: 866: }
 11506                           ;MCU_B1.c: 867: Memory.Data[0]=product->Data[12];
 11507  147A  086E               	movf	_product,w
 11508  147B  0086               	movwf	6
 11509  147C  3002               	movlw	2	; select bank4/5
 11510  147D  0087               	movwf	7
 11511  147E  3002               	movlw	2	; select bank4/5
 11512  147F  3F4C               	moviw [12]fsr1
 11513  1480  0024               	movlb	4	; select bank4
 11514  1481  00A0               	movwf	_Memory^(0+512)
 11515                           
 11516                           ;MCU_B1.c: 868: Memory.Data[1]=product->Data[13];
 11517  1482  0020               	movlb	0	; select bank0
 11518  1483  086E               	movf	_product,w
 11519  1484  0086               	movwf	6
 11520  1485  3002               	movlw	2	; select bank4/5
 11521  1486  0087               	movwf	7
 11522  1487  3002               	movlw	2	; select bank4/5
 11523  1488  3F4D               	moviw [13]fsr1
 11524  1489  0024               	movlb	4	; select bank4
 11525  148A  00A1               	movwf	(_Memory^(0+512)+1)
 11526                           
 11527                           ;MCU_B1.c: 869: Memory.Data[2]=product->Data[14];
 11528  148B  0020               	movlb	0	; select bank0
 11529  148C  086E               	movf	_product,w
 11530  148D  0086               	movwf	6
 11531  148E  3002               	movlw	2	; select bank4/5
 11532  148F  0087               	movwf	7
 11533  1490  3002               	movlw	2	; select bank4/5
 11534  1491  3F4E               	moviw [14]fsr1
 11535  1492  0024               	movlb	4	; select bank4
 11536  1493  00A2               	movwf	(_Memory^(0+512)+2)
 11537                           
 11538                           ;MCU_B1.c: 875: if (Memory.LoopSave == 1) {
 11539  1494  1D44               	btfss	(_Memory^(0+512)+36),2
 11540  1495  2C9A               	goto	l1351
 11541                           
 11542                           ;MCU_B1.c: 876: Memory.LoopSave = 0;
 11543  1496  1144               	bcf	(_Memory^(0+512)+36),2
 11544                           
 11545                           ;MCU_B1.c: 877: myMain.FirstOpen = 0;
 11546  1497  0021               	movlb	1	; select bank1
 11547  1498  12A0               	bcf	_myMain^(0+128),5
 11548                           
 11549                           ;MCU_B1.c: 878: myMain.First = 0;
 11550  1499  13A0               	bcf	_myMain^(0+128),7
 11551  149A                     l1351:	
 11552                           
 11553                           ;MCU_B1.c: 880: }
 11554                           ;MCU_B1.c: 881: GIE = 0;
 11555  149A  138B               	bcf	11,7	;volatile
 11556                           
 11557                           ;MCU_B1.c: 882: Flash_Memory_Erasing();
 11558  149B  319C  244E  3194   	fcall	_Flash_Memory_Erasing
 11559                           
 11560                           ;MCU_B1.c: 883: Flash_Memory_Write();
 11561  149E  3192  2256         	fcall	_Flash_Memory_Write
 11562                           
 11563                           ;MCU_B1.c: 884: GIE = 1;
 11564  14A0  178B               	bsf	11,7	;volatile
 11565  14A1  0008               	return
 11566  14A2                     __end_of_Flash_Memory_Modify:	
 11567                           
 11568                           	psect	text65
 11569  1C4E                     __ptext65:	
 11570 ;; *************** function _Flash_Memory_Erasing *****************
 11571 ;; Defined at:
 11572 ;;		line 851 in file "../src/MCU_B1.c"
 11573 ;; Parameters:    Size  Location     Type
 11574 ;;		None
 11575 ;; Auto vars:     Size  Location     Type
 11576 ;;		None
 11577 ;; Return value:  Size  Location     Type
 11578 ;;		None               void
 11579 ;; Registers used:
 11580 ;;		wreg, status,2, status,0, pclath, cstack
 11581 ;; Tracked objects:
 11582 ;;		On entry : 0/0
 11583 ;;		On exit  : 0/0
 11584 ;;		Unchanged: 0/0
 11585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11590 ;;Total ram usage:        0 bytes
 11591 ;; Hardware stack levels used:    1
 11592 ;; Hardware stack levels required when called:    6
 11593 ;; This function calls:
 11594 ;;		_Flash_Memory_Unlock
 11595 ;; This function is called by:
 11596 ;;		_Flash_Memory_Modify
 11597 ;; This function uses a non-reentrant model
 11598 ;;
 11599                           
 11600                           
 11601                           ;psect for function _Flash_Memory_Erasing
 11602  1C4E                     _Flash_Memory_Erasing:	
 11603                           
 11604                           ;MCU_B1.c: 852: CFGS = 0;
 11605                           
 11606                           ;incstack = 0
 11607                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11608  1C4E  0023               	movlb	3	; select bank3
 11609  1C4F  1315               	bcf	21,6	;volatile
 11610                           
 11611                           ;MCU_B1.c: 853: PMADRH = 0x30;
 11612  1C50  3030               	movlw	48
 11613  1C51  0092               	movwf	18	;volatile
 11614                           
 11615                           ;MCU_B1.c: 854: PMADRL = 0x00;
 11616  1C52  0191               	clrf	17	;volatile
 11617                           
 11618                           ;MCU_B1.c: 855: FREE = 1;
 11619  1C53  1615               	bsf	21,4	;volatile
 11620                           
 11621                           ;MCU_B1.c: 856: WREN = 1;
 11622  1C54  1515               	bsf	21,2	;volatile
 11623                           
 11624                           ;MCU_B1.c: 857: Flash_Memory_Unlock();
 11625  1C55  319C  240D         	fcall	_Flash_Memory_Unlock
 11626                           
 11627                           ;MCU_B1.c: 858: WREN = 0;
 11628  1C57  0023               	movlb	3	; select bank3
 11629  1C58  1115               	bcf	21,2	;volatile
 11630  1C59  0008               	return
 11631  1C5A                     __end_of_Flash_Memory_Erasing:	
 11632                           
 11633                           	psect	text66
 11634  05C2                     __ptext66:	
 11635 ;; *************** function _Flash_Memory_Initialization *****************
 11636 ;; Defined at:
 11637 ;;		line 752 in file "../src/MCU_B1.c"
 11638 ;; Parameters:    Size  Location     Type
 11639 ;;		None
 11640 ;; Auto vars:     Size  Location     Type
 11641 ;;  i               1   62[BANK0 ] unsigned char 
 11642 ;; Return value:  Size  Location     Type
 11643 ;;		None               void
 11644 ;; Registers used:
 11645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11646 ;; Tracked objects:
 11647 ;;		On entry : 0/0
 11648 ;;		On exit  : 0/0
 11649 ;;		Unchanged: 0/0
 11650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11655 ;;Total ram usage:        2 bytes
 11656 ;; Hardware stack levels used:    1
 11657 ;; Hardware stack levels required when called:    8
 11658 ;; This function calls:
 11659 ;;		_Flash_Memory_Read
 11660 ;;		_Flash_Memory_Write
 11661 ;;		_setPercentValue
 11662 ;; This function is called by:
 11663 ;;		_main
 11664 ;; This function uses a non-reentrant model
 11665 ;;
 11666                           
 11667                           
 11668                           ;psect for function _Flash_Memory_Initialization
 11669  05C2                     _Flash_Memory_Initialization:	
 11670                           
 11671                           ;MCU_B1.c: 753: char i = 0;
 11672                           
 11673                           ;incstack = 0
 11674                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11675  05C2  0020               	movlb	0	; select bank0
 11676  05C3  01DE               	clrf	Flash_Memory_Initialization@i
 11677                           
 11678                           ;MCU_B1.c: 754: if (Flash_Memory_Read(31) == 0xaa) {
 11679  05C4  301F               	movlw	31
 11680  05C5  319E  26F7  3185   	fcall	_Flash_Memory_Read
 11681  05C8  3AAA               	xorlw	170
 11682  05C9  1D03               	skipz
 11683  05CA  2E34               	goto	l7623
 11684                           
 11685                           ;MCU_B1.c: 755: product->Data[12] = Flash_Memory_Read(0);
 11686  05CB  3000               	movlw	0
 11687  05CC  319E  26F7  3185   	fcall	_Flash_Memory_Read
 11688  05CF  0020               	movlb	0	; select bank0
 11689  05D0  00DD               	movwf	??_Flash_Memory_Initialization
 11690  05D1  086E               	movf	_product,w
 11691  05D2  3E0C               	addlw	12
 11692  05D3  0086               	movwf	6
 11693  05D4  3002               	movlw	2	; select bank4/5
 11694  05D5  0087               	movwf	7
 11695  05D6  085D               	movf	??_Flash_Memory_Initialization,w
 11696  05D7  0081               	movwf	1
 11697                           
 11698                           ;MCU_B1.c: 756: product->Data[13] = Flash_Memory_Read(1);
 11699  05D8  3001               	movlw	1
 11700  05D9  319E  26F7  3185   	fcall	_Flash_Memory_Read
 11701  05DC  0020               	movlb	0	; select bank0
 11702  05DD  00DD               	movwf	??_Flash_Memory_Initialization
 11703  05DE  086E               	movf	_product,w
 11704  05DF  3E0D               	addlw	13
 11705  05E0  0086               	movwf	6
 11706  05E1  3002               	movlw	2	; select bank4/5
 11707  05E2  0087               	movwf	7
 11708  05E3  085D               	movf	??_Flash_Memory_Initialization,w
 11709  05E4  0081               	movwf	1
 11710                           
 11711                           ;MCU_B1.c: 757: product->Data[14] = Flash_Memory_Read(2);
 11712  05E5  3002               	movlw	2
 11713  05E6  319E  26F7  3185   	fcall	_Flash_Memory_Read
 11714  05E9  0020               	movlb	0	; select bank0
 11715  05EA  00DD               	movwf	??_Flash_Memory_Initialization
 11716  05EB  086E               	movf	_product,w
 11717  05EC  3E0E               	addlw	14
 11718  05ED  0086               	movwf	6
 11719  05EE  3002               	movlw	2	; select bank4/5
 11720  05EF  0087               	movwf	7
 11721  05F0  085D               	movf	??_Flash_Memory_Initialization,w
 11722  05F1  0081               	movwf	1
 11723                           
 11724                           ;MCU_B1.c: 763: i = setPercentValue(((char)((100-60)*0.8)));
 11725  05F2  3020               	movlw	32
 11726  05F3  3194  24A2  3185   	fcall	_setPercentValue
 11727  05F6  0020               	movlb	0	; select bank0
 11728  05F7  00DD               	movwf	??_Flash_Memory_Initialization
 11729  05F8  085D               	movf	??_Flash_Memory_Initialization,w
 11730  05F9  00DE               	movwf	Flash_Memory_Initialization@i
 11731                           
 11732                           ;MCU_B1.c: 764: product->Data[21] = i;
 11733  05FA  085E               	movf	Flash_Memory_Initialization@i,w
 11734  05FB  00DD               	movwf	??_Flash_Memory_Initialization
 11735  05FC  086E               	movf	_product,w
 11736  05FD  3E15               	addlw	21
 11737  05FE  0086               	movwf	6
 11738  05FF  3002               	movlw	2	; select bank4/5
 11739  0600  0087               	movwf	7
 11740  0601  085D               	movf	??_Flash_Memory_Initialization,w
 11741  0602  0081               	movwf	1
 11742                           
 11743                           ;MCU_B1.c: 765: product->Data[22] = i;
 11744  0603  085E               	movf	Flash_Memory_Initialization@i,w
 11745  0604  00DD               	movwf	??_Flash_Memory_Initialization
 11746  0605  086E               	movf	_product,w
 11747  0606  3E16               	addlw	22
 11748  0607  0086               	movwf	6
 11749  0608  3002               	movlw	2	; select bank4/5
 11750  0609  0087               	movwf	7
 11751  060A  085D               	movf	??_Flash_Memory_Initialization,w
 11752  060B  0081               	movwf	1
 11753                           
 11754                           ;MCU_B1.c: 766: product->Data[23] = i;
 11755  060C  085E               	movf	Flash_Memory_Initialization@i,w
 11756  060D  00DD               	movwf	??_Flash_Memory_Initialization
 11757  060E  086E               	movf	_product,w
 11758  060F  3E17               	addlw	23
 11759  0610  0086               	movwf	6
 11760  0611  3002               	movlw	2	; select bank4/5
 11761  0612  0087               	movwf	7
 11762  0613  085D               	movf	??_Flash_Memory_Initialization,w
 11763  0614  0081               	movwf	1
 11764                           
 11765                           ;MCU_B1.c: 768: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11766  0615  086E               	movf	_product,w
 11767  0616  3E0C               	addlw	12
 11768  0617  0086               	movwf	6
 11769  0618  3002               	movlw	2	; select bank4/5
 11770  0619  0087               	movwf	7
 11771  061A  0801               	movf	1,w
 11772  061B  3AFF               	xorlw	255
 11773  061C  1D03               	skipz
 11774  061D  0008               	return
 11775  061E  086E               	movf	_product,w
 11776  061F  3E0D               	addlw	13
 11777  0620  0086               	movwf	6
 11778  0621  3002               	movlw	2	; select bank4/5
 11779  0622  0087               	movwf	7
 11780  0623  0801               	movf	1,w
 11781  0624  3AFF               	xorlw	255
 11782  0625  1D03               	skipz
 11783  0626  0008               	return
 11784  0627  086E               	movf	_product,w
 11785  0628  3E0E               	addlw	14
 11786  0629  0086               	movwf	6
 11787  062A  3002               	movlw	2	; select bank4/5
 11788  062B  0087               	movwf	7
 11789  062C  0801               	movf	1,w
 11790  062D  3AFF               	xorlw	255
 11791  062E  1D03               	skipz
 11792  062F  0008               	return
 11793                           
 11794                           ;MCU_B1.c: 769: myMain.FirstOpen = 1;
 11795  0630  0021               	movlb	1	; select bank1
 11796  0631  16A0               	bsf	_myMain^(0+128),5
 11797                           
 11798                           ;MCU_B1.c: 770: myMain.First = 1;
 11799  0632  17A0               	bsf	_myMain^(0+128),7
 11800                           
 11801                           ;MCU_B1.c: 771: }
 11802                           ;MCU_B1.c: 772: } else {
 11803  0633  0008               	return
 11804  0634                     l7623:	
 11805                           
 11806                           ;MCU_B1.c: 773: i = setPercentValue(((char)((100-60)*0.8)));
 11807  0634  3020               	movlw	32
 11808  0635  3194  24A2  3185   	fcall	_setPercentValue
 11809  0638  0020               	movlb	0	; select bank0
 11810  0639  00DD               	movwf	??_Flash_Memory_Initialization
 11811  063A  085D               	movf	??_Flash_Memory_Initialization,w
 11812  063B  00DE               	movwf	Flash_Memory_Initialization@i
 11813                           
 11814                           ;MCU_B1.c: 774: Memory.Data[0]=0xff;
 11815  063C  30FF               	movlw	255
 11816  063D  00DD               	movwf	??_Flash_Memory_Initialization
 11817  063E  085D               	movf	??_Flash_Memory_Initialization,w
 11818  063F  0024               	movlb	4	; select bank4
 11819  0640  00A0               	movwf	_Memory^(0+512)
 11820                           
 11821                           ;MCU_B1.c: 775: Memory.Data[1]=0xff;
 11822  0641  30FF               	movlw	255
 11823  0642  0020               	movlb	0	; select bank0
 11824  0643  00DD               	movwf	??_Flash_Memory_Initialization
 11825  0644  085D               	movf	??_Flash_Memory_Initialization,w
 11826  0645  0024               	movlb	4	; select bank4
 11827  0646  00A1               	movwf	(_Memory^(0+512)+1)
 11828                           
 11829                           ;MCU_B1.c: 776: Memory.Data[2]=0xff;
 11830  0647  30FF               	movlw	255
 11831  0648  0020               	movlb	0	; select bank0
 11832  0649  00DD               	movwf	??_Flash_Memory_Initialization
 11833  064A  085D               	movf	??_Flash_Memory_Initialization,w
 11834  064B  0024               	movlb	4	; select bank4
 11835  064C  00A2               	movwf	(_Memory^(0+512)+2)
 11836                           
 11837                           ;MCU_B1.c: 777: Memory.Data[3]=0xff;
 11838  064D  30FF               	movlw	255
 11839  064E  0020               	movlb	0	; select bank0
 11840  064F  00DD               	movwf	??_Flash_Memory_Initialization
 11841  0650  085D               	movf	??_Flash_Memory_Initialization,w
 11842  0651  0024               	movlb	4	; select bank4
 11843  0652  00A3               	movwf	(_Memory^(0+512)+3)
 11844                           
 11845                           ;MCU_B1.c: 778: Memory.Data[4]=0xff;
 11846  0653  30FF               	movlw	255
 11847  0654  0020               	movlb	0	; select bank0
 11848  0655  00DD               	movwf	??_Flash_Memory_Initialization
 11849  0656  085D               	movf	??_Flash_Memory_Initialization,w
 11850  0657  0024               	movlb	4	; select bank4
 11851  0658  00A4               	movwf	(_Memory^(0+512)+4)
 11852                           
 11853                           ;MCU_B1.c: 779: Memory.Data[5]=0xff;
 11854  0659  30FF               	movlw	255
 11855  065A  0020               	movlb	0	; select bank0
 11856  065B  00DD               	movwf	??_Flash_Memory_Initialization
 11857  065C  085D               	movf	??_Flash_Memory_Initialization,w
 11858  065D  0024               	movlb	4	; select bank4
 11859  065E  00A5               	movwf	(_Memory^(0+512)+5)
 11860                           
 11861                           ;MCU_B1.c: 780: Memory.Data[31]=0xaa;
 11862  065F  30AA               	movlw	170
 11863  0660  0020               	movlb	0	; select bank0
 11864  0661  00DD               	movwf	??_Flash_Memory_Initialization
 11865  0662  085D               	movf	??_Flash_Memory_Initialization,w
 11866  0663  0024               	movlb	4	; select bank4
 11867  0664  00BF               	movwf	(_Memory^(0+512)+31)
 11868                           
 11869                           ;MCU_B1.c: 781: product->Data[21] = i;
 11870  0665  0020               	movlb	0	; select bank0
 11871  0666  085E               	movf	Flash_Memory_Initialization@i,w
 11872  0667  00DD               	movwf	??_Flash_Memory_Initialization
 11873  0668  086E               	movf	_product,w
 11874  0669  3E15               	addlw	21
 11875  066A  0086               	movwf	6
 11876  066B  3002               	movlw	2	; select bank4/5
 11877  066C  0087               	movwf	7
 11878  066D  085D               	movf	??_Flash_Memory_Initialization,w
 11879  066E  0081               	movwf	1
 11880                           
 11881                           ;MCU_B1.c: 782: product->Data[22] = i;
 11882  066F  085E               	movf	Flash_Memory_Initialization@i,w
 11883  0670  00DD               	movwf	??_Flash_Memory_Initialization
 11884  0671  086E               	movf	_product,w
 11885  0672  3E16               	addlw	22
 11886  0673  0086               	movwf	6
 11887  0674  3002               	movlw	2	; select bank4/5
 11888  0675  0087               	movwf	7
 11889  0676  085D               	movf	??_Flash_Memory_Initialization,w
 11890  0677  0081               	movwf	1
 11891                           
 11892                           ;MCU_B1.c: 783: product->Data[23] = i;
 11893  0678  085E               	movf	Flash_Memory_Initialization@i,w
 11894  0679  00DD               	movwf	??_Flash_Memory_Initialization
 11895  067A  086E               	movf	_product,w
 11896  067B  3E17               	addlw	23
 11897  067C  0086               	movwf	6
 11898  067D  3002               	movlw	2	; select bank4/5
 11899  067E  0087               	movwf	7
 11900  067F  085D               	movf	??_Flash_Memory_Initialization,w
 11901  0680  0081               	movwf	1
 11902                           
 11903                           ;MCU_B1.c: 784: GIE = 0;
 11904  0681  138B               	bcf	11,7	;volatile
 11905                           
 11906                           ;MCU_B1.c: 785: Flash_Memory_Write();
 11907  0682  3192  2256         	fcall	_Flash_Memory_Write
 11908                           
 11909                           ;MCU_B1.c: 786: GIE = 1;
 11910  0684  178B               	bsf	11,7	;volatile
 11911                           
 11912                           ;MCU_B1.c: 787: myMain.FirstOpen = 1;
 11913  0685  0021               	movlb	1	; select bank1
 11914  0686  16A0               	bsf	_myMain^(0+128),5
 11915                           
 11916                           ;MCU_B1.c: 788: myMain.First = 1;
 11917  0687  17A0               	bsf	_myMain^(0+128),7
 11918  0688  0008               	return
 11919  0689                     __end_of_Flash_Memory_Initialization:	
 11920                           
 11921                           	psect	text67
 11922  1256                     __ptext67:	
 11923 ;; *************** function _Flash_Memory_Write *****************
 11924 ;; Defined at:
 11925 ;;		line 832 in file "../src/MCU_B1.c"
 11926 ;; Parameters:    Size  Location     Type
 11927 ;;		None
 11928 ;; Auto vars:     Size  Location     Type
 11929 ;;  i               1    1[BANK0 ] unsigned char 
 11930 ;; Return value:  Size  Location     Type
 11931 ;;		None               void
 11932 ;; Registers used:
 11933 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11934 ;; Tracked objects:
 11935 ;;		On entry : 0/0
 11936 ;;		On exit  : 0/0
 11937 ;;		Unchanged: 0/0
 11938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11941 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11942 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11943 ;;Total ram usage:        2 bytes
 11944 ;; Hardware stack levels used:    1
 11945 ;; Hardware stack levels required when called:    6
 11946 ;; This function calls:
 11947 ;;		_Flash_Memory_Unlock
 11948 ;; This function is called by:
 11949 ;;		_Flash_Memory_Initialization
 11950 ;;		_Flash_Memory_Modify
 11951 ;; This function uses a non-reentrant model
 11952 ;;
 11953                           
 11954                           
 11955                           ;psect for function _Flash_Memory_Write
 11956  1256                     _Flash_Memory_Write:	
 11957                           
 11958                           ;MCU_B1.c: 833: char i = 0;
 11959                           
 11960                           ;incstack = 0
 11961                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11962  1256  0020               	movlb	0	; select bank0
 11963  1257  01A1               	clrf	Flash_Memory_Write@i
 11964                           
 11965                           ;MCU_B1.c: 834: CFGS = 0;
 11966  1258  0023               	movlb	3	; select bank3
 11967  1259  1315               	bcf	21,6	;volatile
 11968                           
 11969                           ;MCU_B1.c: 835: PMADRH = 0x30;
 11970  125A  3030               	movlw	48
 11971  125B  0092               	movwf	18	;volatile
 11972                           
 11973                           ;MCU_B1.c: 836: PMDATH = 0;
 11974  125C  0194               	clrf	20	;volatile
 11975                           
 11976                           ;MCU_B1.c: 837: FREE = 0;
 11977  125D  1215               	bcf	21,4	;volatile
 11978                           
 11979                           ;MCU_B1.c: 838: LWLO = 1;
 11980  125E  1695               	bsf	21,5	;volatile
 11981                           
 11982                           ;MCU_B1.c: 839: WREN = 1;
 11983  125F  1515               	bsf	21,2	;volatile
 11984                           
 11985                           ;MCU_B1.c: 840: for (i = 0; i < 32; i++) {
 11986  1260  0020               	movlb	0	; select bank0
 11987  1261  01A1               	clrf	Flash_Memory_Write@i
 11988  1262  3020               	movlw	32
 11989  1263  0221               	subwf	Flash_Memory_Write@i,w
 11990  1264  1803               	btfsc	3,0
 11991  1265  2A7E               	goto	l1342
 11992  1266                     l6669:	
 11993                           
 11994                           ;MCU_B1.c: 841: PMADRL = i;
 11995  1266  0821               	movf	Flash_Memory_Write@i,w
 11996  1267  0023               	movlb	3	; select bank3
 11997  1268  0091               	movwf	17	;volatile
 11998                           
 11999                           ;MCU_B1.c: 842: PMDATL = Memory.Data[i];
 12000  1269  0020               	movlb	0	; select bank0
 12001  126A  0821               	movf	Flash_Memory_Write@i,w
 12002  126B  3E20               	addlw	_Memory& (0+255)
 12003  126C  0086               	movwf	6
 12004  126D  3002               	movlw	2	; select bank4/5
 12005  126E  0087               	movwf	7
 12006  126F  0801               	movf	1,w
 12007  1270  0023               	movlb	3	; select bank3
 12008  1271  0093               	movwf	19	;volatile
 12009                           
 12010                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
 12011  1272  319C  240D  3192   	fcall	_Flash_Memory_Unlock
 12012  1275  3001               	movlw	1
 12013  1276  0020               	movlb	0	; select bank0
 12014  1277  00A0               	movwf	??_Flash_Memory_Write
 12015  1278  0820               	movf	??_Flash_Memory_Write,w
 12016  1279  07A1               	addwf	Flash_Memory_Write@i,f
 12017  127A  3020               	movlw	32
 12018  127B  0221               	subwf	Flash_Memory_Write@i,w
 12019  127C  1C03               	skipc
 12020  127D  2A66               	goto	l6669
 12021  127E                     l1342:	
 12022                           
 12023                           ;MCU_B1.c: 844: }
 12024                           ;MCU_B1.c: 845: LWLO = 0;
 12025  127E  0023               	movlb	3	; select bank3
 12026  127F  1295               	bcf	21,5	;volatile
 12027                           
 12028                           ;MCU_B1.c: 846: Flash_Memory_Unlock();
 12029  1280  319C  240D         	fcall	_Flash_Memory_Unlock
 12030                           
 12031                           ;MCU_B1.c: 847: WREN = 0;
 12032  1282  0023               	movlb	3	; select bank3
 12033  1283  1115               	bcf	21,2	;volatile
 12034  1284  0008               	return
 12035  1285                     __end_of_Flash_Memory_Write:	
 12036                           
 12037                           	psect	text68
 12038  1C0D                     __ptext68:	
 12039 ;; *************** function _Flash_Memory_Unlock *****************
 12040 ;; Defined at:
 12041 ;;		line 811 in file "../src/MCU_B1.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;		None
 12044 ;; Auto vars:     Size  Location     Type
 12045 ;;		None
 12046 ;; Return value:  Size  Location     Type
 12047 ;;		None               void
 12048 ;; Registers used:
 12049 ;;		wreg
 12050 ;; Tracked objects:
 12051 ;;		On entry : 0/0
 12052 ;;		On exit  : 0/0
 12053 ;;		Unchanged: 0/0
 12054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;Total ram usage:        0 bytes
 12060 ;; Hardware stack levels used:    1
 12061 ;; Hardware stack levels required when called:    5
 12062 ;; This function calls:
 12063 ;;		Nothing
 12064 ;; This function is called by:
 12065 ;;		_Flash_Memory_Write
 12066 ;;		_Flash_Memory_Erasing
 12067 ;; This function uses a non-reentrant model
 12068 ;;
 12069                           
 12070                           
 12071                           ;psect for function _Flash_Memory_Unlock
 12072  1C0D                     _Flash_Memory_Unlock:	
 12073                           
 12074                           ;MCU_B1.c: 812: PMCON2 = 0x55;
 12075                           
 12076                           ;incstack = 0
 12077                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12078  1C0D  3055               	movlw	85
 12079  1C0E  0023               	movlb	3	; select bank3
 12080  1C0F  0096               	movwf	22	;volatile
 12081                           
 12082                           ;MCU_B1.c: 813: PMCON2 = 0xaa;
 12083  1C10  30AA               	movlw	170
 12084  1C11  0096               	movwf	22	;volatile
 12085                           
 12086                           ;MCU_B1.c: 814: WR = 1;
 12087  1C12  1495               	bsf	21,1	;volatile
 12088                           
 12089                           ;MCU_B1.c: 815: __nop();
 12090  1C13  0000               	nop
 12091                           
 12092                           ;MCU_B1.c: 816: __nop();
 12093  1C14  0000               	nop
 12094  1C15  0008               	return
 12095  1C16                     __end_of_Flash_Memory_Unlock:	
 12096                           
 12097                           	psect	text69
 12098  1EF7                     __ptext69:	
 12099 ;; *************** function _Flash_Memory_Read *****************
 12100 ;; Defined at:
 12101 ;;		line 820 in file "../src/MCU_B1.c"
 12102 ;; Parameters:    Size  Location     Type
 12103 ;;  address         1    wreg     unsigned char 
 12104 ;; Auto vars:     Size  Location     Type
 12105 ;;  address         1    2[BANK0 ] unsigned char 
 12106 ;;  ret             1    3[BANK0 ] unsigned char 
 12107 ;;  i               1    1[BANK0 ] unsigned char 
 12108 ;; Return value:  Size  Location     Type
 12109 ;;                  1    wreg      unsigned char 
 12110 ;; Registers used:
 12111 ;;		wreg, status,2
 12112 ;; Tracked objects:
 12113 ;;		On entry : 0/0
 12114 ;;		On exit  : 0/0
 12115 ;;		Unchanged: 0/0
 12116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12119 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12120 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12121 ;;Total ram usage:        4 bytes
 12122 ;; Hardware stack levels used:    1
 12123 ;; Hardware stack levels required when called:    5
 12124 ;; This function calls:
 12125 ;;		Nothing
 12126 ;; This function is called by:
 12127 ;;		_Flash_Memory_Initialization
 12128 ;;		_Flash_Memory_Modify
 12129 ;; This function uses a non-reentrant model
 12130 ;;
 12131                           
 12132                           
 12133                           ;psect for function _Flash_Memory_Read
 12134  1EF7                     _Flash_Memory_Read:	
 12135                           
 12136                           ;incstack = 0
 12137                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12138                           ;Flash_Memory_Read@address stored from wreg
 12139  1EF7  0020               	movlb	0	; select bank0
 12140  1EF8  00A2               	movwf	Flash_Memory_Read@address
 12141                           
 12142                           ;MCU_B1.c: 821: char i = 0, ret = 0;
 12143  1EF9  01A1               	clrf	Flash_Memory_Read@i
 12144  1EFA  01A3               	clrf	Flash_Memory_Read@ret
 12145                           
 12146                           ;MCU_B1.c: 822: PMADRH = 0x30;
 12147  1EFB  3030               	movlw	48
 12148  1EFC  0023               	movlb	3	; select bank3
 12149  1EFD  0092               	movwf	18	;volatile
 12150                           
 12151                           ;MCU_B1.c: 823: PMADRL = address;
 12152  1EFE  0020               	movlb	0	; select bank0
 12153  1EFF  0822               	movf	Flash_Memory_Read@address,w
 12154  1F00  0023               	movlb	3	; select bank3
 12155  1F01  0091               	movwf	17	;volatile
 12156                           
 12157                           ;MCU_B1.c: 824: CFGS = 0;
 12158  1F02  1315               	bcf	21,6	;volatile
 12159                           
 12160                           ;MCU_B1.c: 825: RD = 1;
 12161  1F03  1415               	bsf	21,0	;volatile
 12162                           
 12163                           ;MCU_B1.c: 826: i = PMDATH;
 12164  1F04  0814               	movf	20,w	;volatile
 12165  1F05  0020               	movlb	0	; select bank0
 12166  1F06  00A0               	movwf	??_Flash_Memory_Read
 12167  1F07  0820               	movf	??_Flash_Memory_Read,w
 12168  1F08  00A1               	movwf	Flash_Memory_Read@i
 12169                           
 12170                           ;MCU_B1.c: 827: ret = PMDATL;
 12171  1F09  0023               	movlb	3	; select bank3
 12172  1F0A  0813               	movf	19,w	;volatile
 12173  1F0B  0020               	movlb	0	; select bank0
 12174  1F0C  00A0               	movwf	??_Flash_Memory_Read
 12175  1F0D  0820               	movf	??_Flash_Memory_Read,w
 12176  1F0E  00A3               	movwf	Flash_Memory_Read@ret
 12177                           
 12178                           ;MCU_B1.c: 828: return ret;
 12179  1F0F  0823               	movf	Flash_Memory_Read@ret,w
 12180  1F10  0008               	return
 12181  1F11                     __end_of_Flash_Memory_Read:	
 12182                           
 12183                           	psect	text70
 12184  1C37                     __ptext70:	
 12185 ;; *************** function _DimmerLights_Main *****************
 12186 ;; Defined at:
 12187 ;;		line 407 in file "../src/Dimmer_B1.c"
 12188 ;; Parameters:    Size  Location     Type
 12189 ;;		None
 12190 ;; Auto vars:     Size  Location     Type
 12191 ;;		None
 12192 ;; Return value:  Size  Location     Type
 12193 ;;		None               void
 12194 ;; Registers used:
 12195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12196 ;; Tracked objects:
 12197 ;;		On entry : 0/0
 12198 ;;		On exit  : 0/0
 12199 ;;		Unchanged: 0/0
 12200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12205 ;;Total ram usage:        0 bytes
 12206 ;; Hardware stack levels used:    1
 12207 ;; Hardware stack levels required when called:   11
 12208 ;; This function calls:
 12209 ;;		_DimmerLights_Close
 12210 ;;		_setDimmerLights_Main
 12211 ;; This function is called by:
 12212 ;;		_main
 12213 ;; This function uses a non-reentrant model
 12214 ;;
 12215                           
 12216                           
 12217                           ;psect for function _DimmerLights_Main
 12218  1C37                     _DimmerLights_Main:	
 12219                           
 12220                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 12221                           
 12222                           ;incstack = 0
 12223                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12224  1C37  3001               	movlw	1
 12225  1C38  318B  2342  319C   	fcall	_setDimmerLights_Main
 12226                           
 12227                           ;Dimmer_B1.c: 414: setDimmerLights_Main(2);
 12228  1C3B  3002               	movlw	2
 12229  1C3C  318B  2342  319C   	fcall	_setDimmerLights_Main
 12230                           
 12231                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 12232  1C3F  319E  26AD         	fcall	_DimmerLights_Close
 12233  1C41  0008               	return
 12234  1C42                     __end_of_DimmerLights_Main:	
 12235                           
 12236                           	psect	text71
 12237  0B42                     __ptext71:	
 12238 ;; *************** function _setDimmerLights_Main *****************
 12239 ;; Defined at:
 12240 ;;		line 425 in file "../src/Dimmer_B1.c"
 12241 ;; Parameters:    Size  Location     Type
 12242 ;;  lights          1    wreg     unsigned char 
 12243 ;; Auto vars:     Size  Location     Type
 12244 ;;  lights          1   70[BANK0 ] unsigned char 
 12245 ;;  clear           1   69[BANK0 ] unsigned char 
 12246 ;; Return value:  Size  Location     Type
 12247 ;;		None               void
 12248 ;; Registers used:
 12249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12250 ;; Tracked objects:
 12251 ;;		On entry : 0/0
 12252 ;;		On exit  : 0/0
 12253 ;;		Unchanged: 0/0
 12254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12256 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12258 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12259 ;;Total ram usage:        2 bytes
 12260 ;; Hardware stack levels used:    1
 12261 ;; Hardware stack levels required when called:   10
 12262 ;; This function calls:
 12263 ;;		_DimmerLightsPointSelect
 12264 ;;		_setBuz
 12265 ;;		_setDimmerLights
 12266 ;;		_setDimmerLights_Adj
 12267 ;; This function is called by:
 12268 ;;		_DimmerLights_Main
 12269 ;; This function uses a non-reentrant model
 12270 ;;
 12271                           
 12272                           
 12273                           ;psect for function _setDimmerLights_Main
 12274  0B42                     _setDimmerLights_Main:	
 12275                           
 12276                           ;incstack = 0
 12277                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12278                           ;setDimmerLights_Main@lights stored from wreg
 12279  0B42  0020               	movlb	0	; select bank0
 12280  0B43  00E6               	movwf	setDimmerLights_Main@lights
 12281                           
 12282                           ;Dimmer_B1.c: 426: char clear = 1;
 12283  0B44  01E5               	clrf	setDimmerLights_Main@clear
 12284  0B45  0AE5               	incf	setDimmerLights_Main@clear,f
 12285                           
 12286                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 12287  0B46  0866               	movf	setDimmerLights_Main@lights,w
 12288  0B47  319D  25AD  318B   	fcall	_DimmerLightsPointSelect
 12289                           
 12290                           ;Dimmer_B1.c: 440: if (lights == 1) {
 12291  0B4A  0020               	movlb	0	; select bank0
 12292  0B4B  0866               	movf	setDimmerLights_Main@lights,w
 12293  0B4C  3A01               	xorlw	1
 12294  0B4D  1D03               	skipz
 12295  0B4E  2B56               	goto	l7105
 12296                           
 12297                           ;Dimmer_B1.c: 441: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 12298  0B4F  3000               	movlw	0
 12299  0B50  0022               	movlb	2	; select bank2
 12300  0B51  1940               	btfsc	(_DimmerLights2^(0+256)+9),2
 12301  0B52  3001               	movlw	1
 12302  0B53  0020               	movlb	0	; select bank0
 12303  0B54  00E5               	movwf	setDimmerLights_Main@clear
 12304                           
 12305                           ;Dimmer_B1.c: 442: } else if (lights == 2) {
 12306  0B55  2B60               	goto	l7109
 12307  0B56                     l7105:	
 12308  0B56  0866               	movf	setDimmerLights_Main@lights,w
 12309  0B57  3A02               	xorlw	2
 12310  0B58  1D03               	skipz
 12311  0B59  2B60               	goto	l7109
 12312                           
 12313                           ;Dimmer_B1.c: 443: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 12314  0B5A  3000               	movlw	0
 12315  0B5B  0022               	movlb	2	; select bank2
 12316  0B5C  1931               	btfsc	(_DimmerLights1^(0+256)+9),2
 12317  0B5D  3001               	movlw	1
 12318  0B5E  0020               	movlb	0	; select bank0
 12319  0B5F  00E5               	movwf	setDimmerLights_Main@clear
 12320  0B60                     l7109:	
 12321                           
 12322                           ;Dimmer_B1.c: 444: }
 12323                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 12324  0B60  0879               	movf	_DimmerLights,w
 12325  0B61  3E08               	addlw	8
 12326  0B62  0086               	movwf	6
 12327  0B63  3001               	movlw	1	; select bank2/3
 12328  0B64  0087               	movwf	7
 12329  0B65  1D01               	btfss	1,2
 12330  0B66  2B87               	goto	l7121
 12331                           
 12332                           ;Dimmer_B1.c: 448: if (clear == 1) {
 12333  0B67  0865               	movf	setDimmerLights_Main@clear,w
 12334  0B68  3A01               	xorlw	1
 12335  0B69  1D03               	skipz
 12336  0B6A  0008               	return
 12337                           
 12338                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 12339  0B6B  0879               	movf	_DimmerLights,w
 12340  0B6C  3E08               	addlw	8
 12341  0B6D  0086               	movwf	6
 12342  0B6E  3001               	movlw	1	; select bank2/3
 12343  0B6F  0087               	movwf	7
 12344  0B70  1101               	bcf	1,2
 12345                           
 12346                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 12347  0B71  0879               	movf	_DimmerLights,w
 12348  0B72  3E08               	addlw	8
 12349  0B73  0086               	movwf	6
 12350  0B74  3001               	movlw	1	; select bank2/3
 12351  0B75  0087               	movwf	7
 12352  0B76  1C81               	btfss	1,1
 12353  0B77  2B7B               	goto	l7117
 12354                           
 12355                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 12356  0B78  01A4               	clrf	setDimmerLights@status
 12357  0B79  0AA4               	incf	setDimmerLights@status,f
 12358  0B7A  2B7D               	goto	L9
 12359  0B7B                     l7117:	
 12360                           ;Dimmer_B1.c: 452: } else {
 12361                           
 12362                           
 12363                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 12364  0B7B  0020               	movlb	0	; select bank0
 12365  0B7C  01A4               	clrf	setDimmerLights@status
 12366  0B7D                     L9:	
 12367  0B7D  0866               	movf	setDimmerLights_Main@lights,w
 12368  0B7E  318D  25B3         	fcall	_setDimmerLights
 12369                           
 12370                           ;Dimmer_B1.c: 454: }
 12371                           ;Dimmer_B1.c: 456: DimmerLights->Clear = 0;
 12372  0B80  0879               	movf	_DimmerLights,w
 12373  0B81  3E09               	addlw	9
 12374  0B82  0086               	movwf	6
 12375  0B83  3001               	movlw	1	; select bank2/3
 12376  0B84  0087               	movwf	7
 12377  0B85  1101               	bcf	1,2
 12378                           
 12379                           ;Dimmer_B1.c: 458: }
 12380                           ;Dimmer_B1.c: 459: } else {
 12381  0B86  0008               	return
 12382  0B87                     l7121:	
 12383                           
 12384                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 12385  0B87  0879               	movf	_DimmerLights,w
 12386  0B88  3E08               	addlw	8
 12387  0B89  0086               	movwf	6
 12388  0B8A  3001               	movlw	1	; select bank2/3
 12389  0B8B  0087               	movwf	7
 12390  0B8C  1E01               	btfss	1,4
 12391  0B8D  0008               	return
 12392                           
 12393                           ;Dimmer_B1.c: 461: if (clear == 1) {
 12394  0B8E  0020               	movlb	0	; select bank0
 12395  0B8F  0865               	movf	setDimmerLights_Main@clear,w
 12396  0B90  3A01               	xorlw	1
 12397  0B91  1D03               	skipz
 12398  0B92  0008               	return
 12399                           
 12400                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 12401  0B93  0879               	movf	_DimmerLights,w
 12402  0B94  3E08               	addlw	8
 12403  0B95  0086               	movwf	6
 12404  0B96  3001               	movlw	1	; select bank2/3
 12405  0B97  0087               	movwf	7
 12406  0B98  1201               	bcf	1,4
 12407                           
 12408                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 12409  0B99  0879               	movf	_DimmerLights,w
 12410  0B9A  3E08               	addlw	8
 12411  0B9B  0086               	movwf	6
 12412  0B9C  3001               	movlw	1	; select bank2/3
 12413  0B9D  0087               	movwf	7
 12414  0B9E  1D81               	btfss	1,3
 12415  0B9F  2BAF               	goto	l7131
 12416                           
 12417                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 12418  0BA0  01E2               	clrf	setDimmerLights_Adj@status
 12419  0BA1  0AE2               	incf	setDimmerLights_Adj@status,f
 12420  0BA2  0866               	movf	setDimmerLights_Main@lights,w
 12421  0BA3  3194  241A  318B   	fcall	_setDimmerLights_Adj
 12422                           
 12423                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 12424  0BA6  3064               	movlw	100
 12425  0BA7  0020               	movlb	0	; select bank0
 12426  0BA8  00A9               	movwf	setBuz@time
 12427  0BA9  3000               	movlw	0
 12428  0BAA  00AA               	movwf	setBuz@time+1
 12429  0BAB  3001               	movlw	1
 12430  0BAC  3197  274C         	fcall	_setBuz
 12431                           
 12432                           ;Dimmer_B1.c: 466: } else {
 12433  0BAE  0008               	return
 12434  0BAF                     l7131:	
 12435                           
 12436                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 12437  0BAF  0020               	movlb	0	; select bank0
 12438  0BB0  01E2               	clrf	setDimmerLights_Adj@status
 12439  0BB1  0866               	movf	setDimmerLights_Main@lights,w
 12440  0BB2  3194  241A         	fcall	_setDimmerLights_Adj
 12441  0BB4  0008               	return
 12442  0BB5                     __end_of_setDimmerLights_Main:	
 12443                           
 12444                           	psect	text72
 12445  141A                     __ptext72:	
 12446 ;; *************** function _setDimmerLights_Adj *****************
 12447 ;; Defined at:
 12448 ;;		line 646 in file "../src/Dimmer_B1.c"
 12449 ;; Parameters:    Size  Location     Type
 12450 ;;  lights          1    wreg     unsigned char 
 12451 ;;  status          1   66[BANK0 ] unsigned char 
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;  lights          1   68[BANK0 ] unsigned char 
 12454 ;; Return value:  Size  Location     Type
 12455 ;;		None               void
 12456 ;; Registers used:
 12457 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12458 ;; Tracked objects:
 12459 ;;		On entry : 0/0
 12460 ;;		On exit  : 0/0
 12461 ;;		Unchanged: 0/0
 12462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12463 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;Total ram usage:        3 bytes
 12468 ;; Hardware stack levels used:    1
 12469 ;; Hardware stack levels required when called:    9
 12470 ;; This function calls:
 12471 ;;		_DimmerLightsPointSelect
 12472 ;;		_setLoad_StatusOff
 12473 ;;		_setRF_DimmerLights
 12474 ;;		_setTxData
 12475 ;; This function is called by:
 12476 ;;		_setDimmerLights_Main
 12477 ;; This function uses a non-reentrant model
 12478 ;;
 12479                           
 12480                           
 12481                           ;psect for function _setDimmerLights_Adj
 12482  141A                     _setDimmerLights_Adj:	
 12483                           
 12484                           ;incstack = 0
 12485                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12486                           ;setDimmerLights_Adj@lights stored from wreg
 12487  141A  0020               	movlb	0	; select bank0
 12488  141B  00E4               	movwf	setDimmerLights_Adj@lights
 12489                           
 12490                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 12491  141C  0864               	movf	setDimmerLights_Adj@lights,w
 12492  141D  319D  25AD  3194   	fcall	_DimmerLightsPointSelect
 12493                           
 12494                           ;Dimmer_B1.c: 648: if (status == 1) {
 12495  1420  0020               	movlb	0	; select bank0
 12496  1421  0862               	movf	setDimmerLights_Adj@status,w
 12497  1422  3A01               	xorlw	1
 12498  1423  1D03               	skipz
 12499  1424  2C30               	goto	l6593
 12500                           
 12501                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 12502  1425  0879               	movf	_DimmerLights,w
 12503  1426  0086               	movwf	6
 12504  1427  3001               	movlw	1	; select bank2/3
 12505  1428  0087               	movwf	7
 12506  1429  1581               	bsf	1,3
 12507                           
 12508                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 12509  142A  0879               	movf	_DimmerLights,w
 12510  142B  0086               	movwf	6
 12511  142C  3001               	movlw	1	; select bank2/3
 12512  142D  0087               	movwf	7
 12513  142E  1481               	bsf	1,1
 12514                           
 12515                           ;Dimmer_B1.c: 651: } else {
 12516  142F  0008               	return
 12517  1430                     l6593:	
 12518                           
 12519                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 12520  1430  0879               	movf	_DimmerLights,w
 12521  1431  0086               	movwf	6
 12522  1432  3001               	movlw	1	; select bank2/3
 12523  1433  0087               	movwf	7
 12524  1434  1D81               	btfss	1,3
 12525  1435  0008               	return
 12526                           
 12527                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 12528  1436  0879               	movf	_DimmerLights,w
 12529  1437  0086               	movwf	6
 12530  1438  3001               	movlw	1	; select bank2/3
 12531  1439  0087               	movwf	7
 12532  143A  1081               	bcf	1,1
 12533                           
 12534                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 12535  143B  0879               	movf	_DimmerLights,w
 12536  143C  0086               	movwf	6
 12537  143D  3001               	movlw	1	; select bank2/3
 12538  143E  0087               	movwf	7
 12539  143F  1181               	bcf	1,3
 12540                           
 12541                           ;Dimmer_B1.c: 656: setLoad_StatusOff(0, 1);
 12542  1440  01A0               	clrf	setLoad_StatusOff@command
 12543  1441  0AA0               	incf	setLoad_StatusOff@command,f
 12544  1442  3000               	movlw	0
 12545  1443  319F  27C2  3194   	fcall	_setLoad_StatusOff
 12546                           
 12547                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12548  1446  0879               	movf	_DimmerLights,w
 12549  1447  3E04               	addlw	4
 12550  1448  0086               	movwf	6
 12551  1449  3001               	movlw	1	; select bank2/3
 12552  144A  0087               	movwf	7
 12553  144B  0801               	movf	1,w
 12554  144C  0020               	movlb	0	; select bank0
 12555  144D  00E3               	movwf	??_setDimmerLights_Adj
 12556  144E  0879               	movf	_DimmerLights,w
 12557  144F  3E05               	addlw	5
 12558  1450  0086               	movwf	6
 12559  1451  3001               	movlw	1	; select bank2/3
 12560  1452  0087               	movwf	7
 12561  1453  0863               	movf	??_setDimmerLights_Adj,w
 12562  1454  0081               	movwf	1
 12563                           
 12564                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 12565  1455  01DD               	clrf	setRF_DimmerLights@on
 12566  1456  0ADD               	incf	setRF_DimmerLights@on,f
 12567  1457  0864               	movf	setDimmerLights_Adj@lights,w
 12568  1458  3189  2186  3194   	fcall	_setRF_DimmerLights
 12569                           
 12570                           ;Dimmer_B1.c: 666: setTxData();
 12571  145B  3186  2689         	fcall	_setTxData
 12572  145D  0008               	return
 12573  145E                     __end_of_setDimmerLights_Adj:	
 12574                           
 12575                           	psect	text73
 12576  1FC2                     __ptext73:	
 12577 ;; *************** function _setLoad_StatusOff *****************
 12578 ;; Defined at:
 12579 ;;		line 284 in file "../src/OverLoad_B1.c"
 12580 ;; Parameters:    Size  Location     Type
 12581 ;;  lights          1    wreg     unsigned char 
 12582 ;;  command         1    0[BANK0 ] unsigned char 
 12583 ;; Auto vars:     Size  Location     Type
 12584 ;;  lights          1    1[BANK0 ] unsigned char 
 12585 ;; Return value:  Size  Location     Type
 12586 ;;		None               void
 12587 ;; Registers used:
 12588 ;;		wreg, status,2, status,0
 12589 ;; Tracked objects:
 12590 ;;		On entry : 0/0
 12591 ;;		On exit  : 0/0
 12592 ;;		Unchanged: 0/0
 12593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12594 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12597 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12598 ;;Total ram usage:        2 bytes
 12599 ;; Hardware stack levels used:    1
 12600 ;; Hardware stack levels required when called:    5
 12601 ;; This function calls:
 12602 ;;		Nothing
 12603 ;; This function is called by:
 12604 ;;		_setDimmerLights_ERROR
 12605 ;;		_setDimmerLights_Adj
 12606 ;; This function uses a non-reentrant model
 12607 ;;
 12608                           
 12609                           
 12610                           ;psect for function _setLoad_StatusOff
 12611  1FC2                     _setLoad_StatusOff:	
 12612                           
 12613                           ;incstack = 0
 12614                           ; Regs used in _setLoad_StatusOff: [wreg+status,2+status,0]
 12615                           ;setLoad_StatusOff@lights stored from wreg
 12616  1FC2  0020               	movlb	0	; select bank0
 12617  1FC3  00A1               	movwf	setLoad_StatusOff@lights
 12618                           
 12619                           ;OverLoad_B1.c: 285: Load1.StatusOff = command;
 12620  1FC4  0820               	movf	setLoad_StatusOff@command,w
 12621  1FC5  0023               	movlb	3	; select bank3
 12622  1FC6  13A0               	bcf	_Load1^(0+384),7
 12623  1FC7  1D03               	skipz
 12624  1FC8  17A0               	bsf	_Load1^(0+384),7
 12625                           
 12626                           ;OverLoad_B1.c: 286: Load1.SafeCount -= 2;
 12627  1FC9  3002               	movlw	2
 12628  1FCA  02E2               	subwf	(_Load1^(0+384)+66),f
 12629                           
 12630                           ;OverLoad_B1.c: 287: if (lights == 1) {
 12631  1FCB  0020               	movlb	0	; select bank0
 12632  1FCC  0821               	movf	setLoad_StatusOff@lights,w
 12633  1FCD  3A01               	xorlw	1
 12634  1FCE  1D03               	skipz
 12635  1FCF  2FD2               	goto	l6199
 12636                           
 12637                           ;OverLoad_B1.c: 288: Load1.Lights1Status = 0;
 12638  1FD0  0023               	movlb	3	; select bank3
 12639  1FD1  01E3               	clrf	(_Load1^(0+384)+67)
 12640  1FD2                     l6199:	
 12641                           
 12642                           ;OverLoad_B1.c: 289: }
 12643                           ;OverLoad_B1.c: 290: if (lights == 2) {
 12644  1FD2  0020               	movlb	0	; select bank0
 12645  1FD3  0821               	movf	setLoad_StatusOff@lights,w
 12646  1FD4  3A02               	xorlw	2
 12647  1FD5  1D03               	skipz
 12648  1FD6  2FD9               	goto	l6203
 12649                           
 12650                           ;OverLoad_B1.c: 291: Load1.Lights2Status = 0;
 12651  1FD7  0023               	movlb	3	; select bank3
 12652  1FD8  01E4               	clrf	(_Load1^(0+384)+68)
 12653  1FD9                     l6203:	
 12654                           
 12655                           ;OverLoad_B1.c: 292: }
 12656                           ;OverLoad_B1.c: 293: if (lights == 3) {
 12657  1FD9  0020               	movlb	0	; select bank0
 12658  1FDA  0821               	movf	setLoad_StatusOff@lights,w
 12659  1FDB  3A03               	xorlw	3
 12660  1FDC  1D03               	skipz
 12661  1FDD  0008               	return
 12662                           
 12663                           ;OverLoad_B1.c: 294: Load1.Lights3Status = 0;
 12664  1FDE  0023               	movlb	3	; select bank3
 12665  1FDF  01E5               	clrf	(_Load1^(0+384)+69)
 12666  1FE0  0008               	return
 12667  1FE1                     __end_of_setLoad_StatusOff:	
 12668                           
 12669                           	psect	text74
 12670  0DB3                     __ptext74:	
 12671 ;; *************** function _setDimmerLights *****************
 12672 ;; Defined at:
 12673 ;;		line 593 in file "../src/Dimmer_B1.c"
 12674 ;; Parameters:    Size  Location     Type
 12675 ;;  lights          1    wreg     unsigned char 
 12676 ;;  status          1    4[BANK0 ] unsigned char 
 12677 ;; Auto vars:     Size  Location     Type
 12678 ;;  lights          1    6[BANK0 ] unsigned char 
 12679 ;; Return value:  Size  Location     Type
 12680 ;;		None               void
 12681 ;; Registers used:
 12682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12683 ;; Tracked objects:
 12684 ;;		On entry : 0/0
 12685 ;;		On exit  : 0/0
 12686 ;;		Unchanged: 0/0
 12687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12688 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12689 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12690 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12691 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12692 ;;Total ram usage:        3 bytes
 12693 ;; Hardware stack levels used:    1
 12694 ;; Hardware stack levels required when called:    7
 12695 ;; This function calls:
 12696 ;;		_DimmerLightsPointSelect
 12697 ;;		_setLED
 12698 ;;		_setLoad_Count
 12699 ;;		_setLoad_StatusOn
 12700 ;;		_setMemory_GO
 12701 ;; This function is called by:
 12702 ;;		_setDimmerLights_Main
 12703 ;;		_setControl_Lights_Table
 12704 ;; This function uses a non-reentrant model
 12705 ;;
 12706                           
 12707                           
 12708                           ;psect for function _setDimmerLights
 12709  0DB3                     _setDimmerLights:	
 12710                           
 12711                           ;incstack = 0
 12712                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12713                           ;setDimmerLights@lights stored from wreg
 12714  0DB3  0020               	movlb	0	; select bank0
 12715  0DB4  00A6               	movwf	setDimmerLights@lights
 12716                           
 12717                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 12718  0DB5  0826               	movf	setDimmerLights@lights,w
 12719  0DB6  319D  25AD  318D   	fcall	_DimmerLightsPointSelect
 12720                           
 12721                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 12722  0DB9  0020               	movlb	0	; select bank0
 12723  0DBA  0826               	movf	setDimmerLights@lights,w
 12724  0DBB  00A5               	movwf	??_setDimmerLights
 12725  0DBC  0021               	movlb	1	; select bank1
 12726  0DBD  0A5F               	incf	_Dimmer^(0+128),w
 12727  0DBE  0086               	movwf	6
 12728  0DBF  0187               	clrf	7
 12729  0DC0  0020               	movlb	0	; select bank0
 12730  0DC1  0825               	movf	??_setDimmerLights,w
 12731  0DC2  0081               	movwf	1
 12732                           
 12733                           ;Dimmer_B1.c: 596: if (status == 1) {
 12734  0DC3  0824               	movf	setDimmerLights@status,w
 12735  0DC4  3A01               	xorlw	1
 12736  0DC5  1D03               	skipz
 12737  0DC6  2E11               	goto	l6231
 12738                           
 12739                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 12740  0DC7  0879               	movf	_DimmerLights,w
 12741  0DC8  0086               	movwf	6
 12742  0DC9  3001               	movlw	1	; select bank2/3
 12743  0DCA  0087               	movwf	7
 12744  0DCB  1681               	bsf	1,5
 12745                           
 12746                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 12747  0DCC  01A2               	clrf	setLED@command
 12748  0DCD  0826               	movf	setDimmerLights@lights,w
 12749  0DCE  3188  2001  318D   	fcall	_setLED
 12750                           
 12751                           ;Dimmer_B1.c: 600: setLoad_Count(0);
 12752  0DD1  3000               	movlw	0
 12753  0DD2  319C  248D  318D   	fcall	_setLoad_Count
 12754                           
 12755                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 12756  0DD5  0879               	movf	_DimmerLights,w
 12757  0DD6  0086               	movwf	6
 12758  0DD7  3001               	movlw	1	; select bank2/3
 12759  0DD8  0087               	movwf	7
 12760  0DD9  1481               	bsf	1,1
 12761                           
 12762                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 12763  0DDA  3007               	movlw	7
 12764  0DDB  0020               	movlb	0	; select bank0
 12765  0DDC  00A5               	movwf	??_setDimmerLights
 12766  0DDD  0879               	movf	_DimmerLights,w
 12767  0DDE  3E02               	addlw	2
 12768  0DDF  0086               	movwf	6
 12769  0DE0  3001               	movlw	1	; select bank2/3
 12770  0DE1  0087               	movwf	7
 12771  0DE2  0825               	movf	??_setDimmerLights,w
 12772  0DE3  0081               	movwf	1
 12773                           
 12774                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 12775  0DE4  0879               	movf	_DimmerLights,w
 12776  0DE5  0086               	movwf	6
 12777  0DE6  3001               	movlw	1	; select bank2/3
 12778  0DE7  0087               	movwf	7
 12779  0DE8  1B01               	btfsc	1,6
 12780  0DE9  0008               	return
 12781                           
 12782                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 12783  0DEA  0879               	movf	_DimmerLights,w
 12784  0DEB  0086               	movwf	6
 12785  0DEC  3001               	movlw	1	; select bank2/3
 12786  0DED  0087               	movwf	7
 12787  0DEE  1701               	bsf	1,6
 12788                           
 12789                           ;Dimmer_B1.c: 607: setLoad_StatusOn(lights, 1);
 12790  0DEF  01A0               	clrf	setLoad_StatusOn@command
 12791  0DF0  0AA0               	incf	setLoad_StatusOn@command,f
 12792  0DF1  0826               	movf	setDimmerLights@lights,w
 12793  0DF2  3191  2117  318D   	fcall	_setLoad_StatusOn
 12794                           
 12795                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 12796  0DF5  3000               	movlw	0
 12797  0DF6  319E  2651         	fcall	_setMemory_GO
 12798                           
 12799                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12800  0DF8  0879               	movf	_DimmerLights,w
 12801  0DF9  3E05               	addlw	5
 12802  0DFA  0086               	movwf	6
 12803  0DFB  3001               	movlw	1	; select bank2/3
 12804  0DFC  0087               	movwf	7
 12805  0DFD  0801               	movf	1,w
 12806  0DFE  0020               	movlb	0	; select bank0
 12807  0DFF  00A5               	movwf	??_setDimmerLights
 12808  0E00  0879               	movf	_DimmerLights,w
 12809  0E01  3E04               	addlw	4
 12810  0E02  0086               	movwf	6
 12811  0E03  3001               	movlw	1	; select bank2/3
 12812  0E04  0087               	movwf	7
 12813  0E05  0825               	movf	??_setDimmerLights,w
 12814  0E06  0081               	movwf	1
 12815                           
 12816                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12817  0E07  3020               	movlw	32
 12818  0E08  00A5               	movwf	??_setDimmerLights
 12819  0E09  0879               	movf	_DimmerLights,w
 12820  0E0A  3E04               	addlw	4
 12821  0E0B  0086               	movwf	6
 12822  0E0C  3001               	movlw	1	; select bank2/3
 12823  0E0D  0087               	movwf	7
 12824  0E0E  0825               	movf	??_setDimmerLights,w
 12825  0E0F  0081               	movwf	1
 12826                           
 12827                           ;Dimmer_B1.c: 617: }
 12828                           ;Dimmer_B1.c: 618: } else {
 12829  0E10  0008               	return
 12830  0E11                     l6231:	
 12831                           
 12832                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 12833  0E11  0879               	movf	_DimmerLights,w
 12834  0E12  0086               	movwf	6
 12835  0E13  3001               	movlw	1	; select bank2/3
 12836  0E14  0087               	movwf	7
 12837  0E15  1281               	bcf	1,5
 12838                           
 12839                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12840  0E16  0879               	movf	_DimmerLights,w
 12841  0E17  3E06               	addlw	6
 12842  0E18  0086               	movwf	6
 12843  0E19  3001               	movlw	1	; select bank2/3
 12844  0E1A  0087               	movwf	7
 12845  0E1B  0801               	movf	1,w
 12846  0E1C  00A5               	movwf	??_setDimmerLights
 12847  0E1D  0879               	movf	_DimmerLights,w
 12848  0E1E  3E04               	addlw	4
 12849  0E1F  0086               	movwf	6
 12850  0E20  3001               	movlw	1	; select bank2/3
 12851  0E21  0087               	movwf	7
 12852  0E22  0825               	movf	??_setDimmerLights,w
 12853  0E23  0081               	movwf	1
 12854                           
 12855                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 12856  0E24  0879               	movf	_DimmerLights,w
 12857  0E25  0086               	movwf	6
 12858  0E26  3001               	movlw	1	; select bank2/3
 12859  0E27  0087               	movwf	7
 12860  0E28  1481               	bsf	1,1
 12861                           
 12862                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 12863  0E29  0879               	movf	_DimmerLights,w
 12864  0E2A  0086               	movwf	6
 12865  0E2B  3001               	movlw	1	; select bank2/3
 12866  0E2C  0087               	movwf	7
 12867  0E2D  1181               	bcf	1,3
 12868                           
 12869                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 12870  0E2E  0879               	movf	_DimmerLights,w
 12871  0E2F  0086               	movwf	6
 12872  0E30  3001               	movlw	1	; select bank2/3
 12873  0E31  0087               	movwf	7
 12874  0E32  1201               	bcf	1,4
 12875                           
 12876                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 12877  0E33  3007               	movlw	7
 12878  0E34  00A5               	movwf	??_setDimmerLights
 12879  0E35  0879               	movf	_DimmerLights,w
 12880  0E36  3E02               	addlw	2
 12881  0E37  0086               	movwf	6
 12882  0E38  3001               	movlw	1	; select bank2/3
 12883  0E39  0087               	movwf	7
 12884  0E3A  0825               	movf	??_setDimmerLights,w
 12885  0E3B  0081               	movwf	1
 12886  0E3C  0008               	return
 12887  0E3D                     __end_of_setDimmerLights:	
 12888                           
 12889                           	psect	text75
 12890  1117                     __ptext75:	
 12891 ;; *************** function _setLoad_StatusOn *****************
 12892 ;; Defined at:
 12893 ;;		line 269 in file "../src/OverLoad_B1.c"
 12894 ;; Parameters:    Size  Location     Type
 12895 ;;  lights          1    wreg     unsigned char 
 12896 ;;  command         1    0[BANK0 ] unsigned char 
 12897 ;; Auto vars:     Size  Location     Type
 12898 ;;  lights          1    1[BANK0 ] unsigned char 
 12899 ;; Return value:  Size  Location     Type
 12900 ;;		None               void
 12901 ;; Registers used:
 12902 ;;		wreg
 12903 ;; Tracked objects:
 12904 ;;		On entry : 0/0
 12905 ;;		On exit  : 0/0
 12906 ;;		Unchanged: 0/0
 12907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12908 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12911 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12912 ;;Total ram usage:        2 bytes
 12913 ;; Hardware stack levels used:    1
 12914 ;; Hardware stack levels required when called:    5
 12915 ;; This function calls:
 12916 ;;		Nothing
 12917 ;; This function is called by:
 12918 ;;		_setDimmerLights
 12919 ;; This function uses a non-reentrant model
 12920 ;;
 12921                           
 12922                           
 12923                           ;psect for function _setLoad_StatusOn
 12924  1117                     _setLoad_StatusOn:	
 12925                           
 12926                           ;incstack = 0
 12927                           ; Regs used in _setLoad_StatusOn: [wreg]
 12928                           ;setLoad_StatusOn@lights stored from wreg
 12929  1117  0020               	movlb	0	; select bank0
 12930  1118  00A1               	movwf	setLoad_StatusOn@lights
 12931                           
 12932                           ;OverLoad_B1.c: 270: Load1.GO = 1;
 12933  1119  0023               	movlb	3	; select bank3
 12934  111A  14A0               	bsf	_Load1^(0+384),1
 12935                           
 12936                           ;OverLoad_B1.c: 271: Load1.StatusOn = command;
 12937  111B  0020               	movlb	0	; select bank0
 12938  111C  0820               	movf	setLoad_StatusOn@command,w
 12939  111D  0023               	movlb	3	; select bank3
 12940  111E  1320               	bcf	_Load1^(0+384),6
 12941  111F  1D03               	skipz
 12942  1120  1720               	bsf	_Load1^(0+384),6
 12943                           
 12944                           ;OverLoad_B1.c: 273: if (lights == 1) {
 12945  1121  0020               	movlb	0	; select bank0
 12946  1122  0821               	movf	setLoad_StatusOn@lights,w
 12947  1123  3A01               	xorlw	1
 12948  1124  1D03               	skipz
 12949  1125  2929               	goto	l6113
 12950                           
 12951                           ;OverLoad_B1.c: 274: Load1.Lights1Status = 1;
 12952  1126  0023               	movlb	3	; select bank3
 12953  1127  01E3               	clrf	(_Load1^(0+384)+67)
 12954  1128  0AE3               	incf	(_Load1^(0+384)+67),f
 12955  1129                     l6113:	
 12956                           
 12957                           ;OverLoad_B1.c: 275: }
 12958                           ;OverLoad_B1.c: 276: if (lights == 2) {
 12959  1129  0020               	movlb	0	; select bank0
 12960  112A  0821               	movf	setLoad_StatusOn@lights,w
 12961  112B  3A02               	xorlw	2
 12962  112C  1D03               	skipz
 12963  112D  2931               	goto	l6117
 12964                           
 12965                           ;OverLoad_B1.c: 277: Load1.Lights2Status = 1;
 12966  112E  0023               	movlb	3	; select bank3
 12967  112F  01E4               	clrf	(_Load1^(0+384)+68)
 12968  1130  0AE4               	incf	(_Load1^(0+384)+68),f
 12969  1131                     l6117:	
 12970                           
 12971                           ;OverLoad_B1.c: 278: }
 12972                           ;OverLoad_B1.c: 279: if (lights == 3) {
 12973  1131  0020               	movlb	0	; select bank0
 12974  1132  0821               	movf	setLoad_StatusOn@lights,w
 12975  1133  3A03               	xorlw	3
 12976  1134  1D03               	skipz
 12977  1135  0008               	return
 12978                           
 12979                           ;OverLoad_B1.c: 280: Load1.Lights3Status = 1;
 12980  1136  0023               	movlb	3	; select bank3
 12981  1137  01E5               	clrf	(_Load1^(0+384)+69)
 12982  1138  0AE5               	incf	(_Load1^(0+384)+69),f
 12983  1139  0008               	return
 12984  113A                     __end_of_setLoad_StatusOn:	
 12985                           
 12986                           	psect	text76
 12987  1C8D                     __ptext76:	
 12988 ;; *************** function _setLoad_Count *****************
 12989 ;; Defined at:
 12990 ;;		line 254 in file "../src/OverLoad_B1.c"
 12991 ;; Parameters:    Size  Location     Type
 12992 ;;  command         1    wreg     unsigned char 
 12993 ;; Auto vars:     Size  Location     Type
 12994 ;;  command         1    1[BANK0 ] unsigned char 
 12995 ;; Return value:  Size  Location     Type
 12996 ;;		None               void
 12997 ;; Registers used:
 12998 ;;		wreg
 12999 ;; Tracked objects:
 13000 ;;		On entry : 0/0
 13001 ;;		On exit  : 0/0
 13002 ;;		Unchanged: 0/0
 13003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13006 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13007 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13008 ;;Total ram usage:        2 bytes
 13009 ;; Hardware stack levels used:    1
 13010 ;; Hardware stack levels required when called:    5
 13011 ;; This function calls:
 13012 ;;		Nothing
 13013 ;; This function is called by:
 13014 ;;		_setDimmerLights
 13015 ;; This function uses a non-reentrant model
 13016 ;;
 13017                           
 13018                           
 13019                           ;psect for function _setLoad_Count
 13020  1C8D                     _setLoad_Count:	
 13021                           
 13022                           ;incstack = 0
 13023                           ; Regs used in _setLoad_Count: [wreg]
 13024                           ;setLoad_Count@command stored from wreg
 13025  1C8D  0020               	movlb	0	; select bank0
 13026  1C8E  00A1               	movwf	setLoad_Count@command
 13027                           
 13028                           ;OverLoad_B1.c: 255: Load1.Count = command;
 13029  1C8F  0821               	movf	setLoad_Count@command,w
 13030  1C90  00A0               	movwf	??_setLoad_Count
 13031  1C91  0820               	movf	??_setLoad_Count,w
 13032  1C92  0023               	movlb	3	; select bank3
 13033  1C93  00DA               	movwf	(_Load1^(0+384)+58)
 13034                           
 13035                           ;OverLoad_B1.c: 256: Load1.SafeCount = command;
 13036  1C94  0020               	movlb	0	; select bank0
 13037  1C95  0821               	movf	setLoad_Count@command,w
 13038  1C96  00A0               	movwf	??_setLoad_Count
 13039  1C97  0820               	movf	??_setLoad_Count,w
 13040  1C98  0023               	movlb	3	; select bank3
 13041  1C99  00E2               	movwf	(_Load1^(0+384)+66)
 13042  1C9A  0008               	return
 13043  1C9B                     __end_of_setLoad_Count:	
 13044                           
 13045                           	psect	text77
 13046  0801                     __ptext77:	
 13047 ;; *************** function _setLED *****************
 13048 ;; Defined at:
 13049 ;;		line 70 in file "../src/LED_B1.c"
 13050 ;; Parameters:    Size  Location     Type
 13051 ;;  led             1    wreg     unsigned char 
 13052 ;;  command         1    2[BANK0 ] unsigned char 
 13053 ;; Auto vars:     Size  Location     Type
 13054 ;;  led             1    3[BANK0 ] unsigned char 
 13055 ;; Return value:  Size  Location     Type
 13056 ;;		None               void
 13057 ;; Registers used:
 13058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13059 ;; Tracked objects:
 13060 ;;		On entry : 0/0
 13061 ;;		On exit  : 0/0
 13062 ;;		Unchanged: 0/0
 13063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13064 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13065 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13067 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;Total ram usage:        2 bytes
 13069 ;; Hardware stack levels used:    1
 13070 ;; Hardware stack levels required when called:    6
 13071 ;; This function calls:
 13072 ;;		_LedPointSelect
 13073 ;; This function is called by:
 13074 ;;		_setDimmerLights_ERROR
 13075 ;;		_setDimmerLights
 13076 ;;		_setLED_Initialization
 13077 ;;		_setLoad_Exceptions
 13078 ;;		_setSw_Initialization
 13079 ;; This function uses a non-reentrant model
 13080 ;;
 13081                           
 13082                           
 13083                           ;psect for function _setLED
 13084  0801                     _setLED:	
 13085                           
 13086                           ;incstack = 0
 13087                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13088                           ;setLED@led stored from wreg
 13089  0801  0020               	movlb	0	; select bank0
 13090  0802  00A3               	movwf	setLED@led
 13091                           
 13092                           ;LED_B1.c: 71: LedPointSelect(led);
 13093  0803  0823               	movf	setLED@led,w
 13094  0804  319F  2749  3188   	fcall	_LedPointSelect
 13095                           
 13096                           ;LED_B1.c: 72: if (command == 0) {
 13097  0807  0020               	movlb	0	; select bank0
 13098  0808  08A2               	movf	setLED@command,f
 13099  0809  1D03               	skipz
 13100  080A  281D               	goto	l6071
 13101                           
 13102                           ;LED_B1.c: 74: if (led == 1) {
 13103  080B  0823               	movf	setLED@led,w
 13104  080C  3A01               	xorlw	1
 13105  080D  1D03               	skipz
 13106  080E  2811               	goto	l6063
 13107                           
 13108                           ;LED_B1.c: 78: RA3 = 1;
 13109  080F  158C               	bsf	12,3	;volatile
 13110                           
 13111                           ;LED_B1.c: 80: }
 13112  0810  0008               	return
 13113  0811                     l6063:	
 13114                           
 13115                           ;LED_B1.c: 83: else if (led == 2) {
 13116  0811  0823               	movf	setLED@led,w
 13117  0812  3A02               	xorlw	2
 13118  0813  1D03               	skipz
 13119  0814  2817               	goto	l6067
 13120                           
 13121                           ;LED_B1.c: 87: RC7 = 1;
 13122  0815  178E               	bsf	14,7	;volatile
 13123                           
 13124                           ;LED_B1.c: 89: }
 13125  0816  0008               	return
 13126  0817                     l6067:	
 13127                           
 13128                           ;LED_B1.c: 101: else if (led == 99) {
 13129  0817  0823               	movf	setLED@led,w
 13130  0818  3A63               	xorlw	99
 13131  0819  1D03               	skipz
 13132  081A  0008               	return
 13133                           
 13134                           ;LED_B1.c: 105: RB5 = 1;
 13135  081B  168D               	bsf	13,5	;volatile
 13136                           
 13137                           ;LED_B1.c: 107: }
 13138                           ;LED_B1.c: 109: } else if (command == 1) {
 13139  081C  0008               	return
 13140  081D                     l6071:	
 13141  081D  0822               	movf	setLED@command,w
 13142  081E  3A01               	xorlw	1
 13143  081F  1D03               	skipz
 13144  0820  2833               	goto	l6085
 13145                           
 13146                           ;LED_B1.c: 111: if (led == 1) {
 13147  0821  0823               	movf	setLED@led,w
 13148  0822  3A01               	xorlw	1
 13149  0823  1D03               	skipz
 13150  0824  2827               	goto	l6077
 13151                           
 13152                           ;LED_B1.c: 115: RA3 = 0;
 13153  0825  118C               	bcf	12,3	;volatile
 13154                           
 13155                           ;LED_B1.c: 117: }
 13156  0826  0008               	return
 13157  0827                     l6077:	
 13158                           
 13159                           ;LED_B1.c: 120: else if (led == 2) {
 13160  0827  0823               	movf	setLED@led,w
 13161  0828  3A02               	xorlw	2
 13162  0829  1D03               	skipz
 13163  082A  282D               	goto	l6081
 13164                           
 13165                           ;LED_B1.c: 124: RC7 = 0;
 13166  082B  138E               	bcf	14,7	;volatile
 13167                           
 13168                           ;LED_B1.c: 126: }
 13169  082C  0008               	return
 13170  082D                     l6081:	
 13171                           
 13172                           ;LED_B1.c: 138: else if (led == 99) {
 13173  082D  0823               	movf	setLED@led,w
 13174  082E  3A63               	xorlw	99
 13175  082F  1D03               	skipz
 13176  0830  0008               	return
 13177                           
 13178                           ;LED_B1.c: 142: RB5 = 0;
 13179  0831  128D               	bcf	13,5	;volatile
 13180                           
 13181                           ;LED_B1.c: 144: }
 13182                           ;LED_B1.c: 146: } else if (command == 10) {
 13183  0832  0008               	return
 13184  0833                     l6085:	
 13185  0833  0822               	movf	setLED@command,w
 13186  0834  3A0A               	xorlw	10
 13187  0835  1D03               	skipz
 13188  0836  2855               	goto	l6101
 13189                           
 13190                           ;LED_B1.c: 147: LED->GO = 0;
 13191  0837  087B               	movf	_LED,w
 13192  0838  0086               	movwf	6
 13193  0839  3001               	movlw	1	; select bank2/3
 13194  083A  0087               	movwf	7
 13195  083B  1081               	bcf	1,1
 13196                           
 13197                           ;LED_B1.c: 148: LED->Time = 0;
 13198  083C  0A7B               	incf	_LED,w
 13199  083D  0086               	movwf	6
 13200  083E  3001               	movlw	1	; select bank2/3
 13201  083F  0087               	movwf	7
 13202  0840  3000               	movlw	0
 13203  0841  3FC0               	movwi [0]fsr1
 13204  0842  3FC1               	movwi [1]fsr1
 13205                           
 13206                           ;LED_B1.c: 150: if (led == 1) {
 13207  0843  0823               	movf	setLED@led,w
 13208  0844  3A01               	xorlw	1
 13209  0845  1D03               	skipz
 13210  0846  2849               	goto	l6093
 13211                           
 13212                           ;LED_B1.c: 154: RA3 = 1;
 13213  0847  158C               	bsf	12,3	;volatile
 13214                           
 13215                           ;LED_B1.c: 156: }
 13216  0848  0008               	return
 13217  0849                     l6093:	
 13218                           
 13219                           ;LED_B1.c: 159: else if (led == 2) {
 13220  0849  0823               	movf	setLED@led,w
 13221  084A  3A02               	xorlw	2
 13222  084B  1D03               	skipz
 13223  084C  284F               	goto	l6097
 13224                           
 13225                           ;LED_B1.c: 163: RC7 = 1;
 13226  084D  178E               	bsf	14,7	;volatile
 13227                           
 13228                           ;LED_B1.c: 165: }
 13229  084E  0008               	return
 13230  084F                     l6097:	
 13231                           
 13232                           ;LED_B1.c: 177: else if (led == 99) {
 13233  084F  0823               	movf	setLED@led,w
 13234  0850  3A63               	xorlw	99
 13235  0851  1D03               	skipz
 13236  0852  0008               	return
 13237                           
 13238                           ;LED_B1.c: 181: RB5 = 1;
 13239  0853  168D               	bsf	13,5	;volatile
 13240                           
 13241                           ;LED_B1.c: 183: }
 13242                           ;LED_B1.c: 185: } else if (command == 11) {
 13243  0854  0008               	return
 13244  0855                     l6101:	
 13245  0855  0822               	movf	setLED@command,w
 13246  0856  3A0B               	xorlw	11
 13247  0857  1D03               	skipz
 13248  0858  0008               	return
 13249                           
 13250                           ;LED_B1.c: 186: LED->GO = 1;
 13251  0859  087B               	movf	_LED,w
 13252  085A  0086               	movwf	6
 13253  085B  3001               	movlw	1	; select bank2/3
 13254  085C  0087               	movwf	7
 13255  085D  1481               	bsf	1,1
 13256  085E  0008               	return
 13257  085F                     __end_of_setLED:	
 13258                           
 13259                           	psect	text78
 13260  1F49                     __ptext78:	
 13261 ;; *************** function _LedPointSelect *****************
 13262 ;; Defined at:
 13263 ;;		line 7 in file "../src/LED_B1.c"
 13264 ;; Parameters:    Size  Location     Type
 13265 ;;  led             1    wreg     unsigned char 
 13266 ;; Auto vars:     Size  Location     Type
 13267 ;;  led             1    1[BANK0 ] unsigned char 
 13268 ;; Return value:  Size  Location     Type
 13269 ;;		None               void
 13270 ;; Registers used:
 13271 ;;		wreg
 13272 ;; Tracked objects:
 13273 ;;		On entry : 0/0
 13274 ;;		On exit  : 0/0
 13275 ;;		Unchanged: 0/0
 13276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13278 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13280 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13281 ;;Total ram usage:        2 bytes
 13282 ;; Hardware stack levels used:    1
 13283 ;; Hardware stack levels required when called:    5
 13284 ;; This function calls:
 13285 ;;		Nothing
 13286 ;; This function is called by:
 13287 ;;		_setLED_Initialization
 13288 ;;		_setLED
 13289 ;;		_setLED_Main
 13290 ;; This function uses a non-reentrant model
 13291 ;;
 13292                           
 13293                           
 13294                           ;psect for function _LedPointSelect
 13295  1F49                     _LedPointSelect:	
 13296                           
 13297                           ;incstack = 0
 13298                           ; Regs used in _LedPointSelect: [wreg]
 13299                           ;LedPointSelect@led stored from wreg
 13300  1F49  0020               	movlb	0	; select bank0
 13301  1F4A  00A1               	movwf	LedPointSelect@led
 13302                           
 13303                           ;LED_B1.c: 9: if (led == 1) {
 13304  1F4B  0821               	movf	LedPointSelect@led,w
 13305  1F4C  3A01               	xorlw	1
 13306  1F4D  1D03               	skipz
 13307  1F4E  2F54               	goto	l5861
 13308                           
 13309                           ;LED_B1.c: 10: LED = &VarLED1;
 13310  1F4F  3066               	movlw	_VarLED1& (0+255)
 13311  1F50  00A0               	movwf	??_LedPointSelect
 13312  1F51  0820               	movf	??_LedPointSelect,w
 13313  1F52  00FB               	movwf	_LED
 13314                           
 13315                           ;LED_B1.c: 11: }
 13316  1F53  0008               	return
 13317  1F54                     l5861:	
 13318                           
 13319                           ;LED_B1.c: 14: else if (led == 2) {
 13320  1F54  0821               	movf	LedPointSelect@led,w
 13321  1F55  3A02               	xorlw	2
 13322  1F56  1D03               	skipz
 13323  1F57  2F5D               	goto	l5865
 13324                           
 13325                           ;LED_B1.c: 15: LED = &VarLED2;
 13326  1F58  306A               	movlw	_VarLED2& (0+255)
 13327  1F59  00A0               	movwf	??_LedPointSelect
 13328  1F5A  0820               	movf	??_LedPointSelect,w
 13329  1F5B  00FB               	movwf	_LED
 13330                           
 13331                           ;LED_B1.c: 16: }
 13332  1F5C  0008               	return
 13333  1F5D                     l5865:	
 13334                           
 13335                           ;LED_B1.c: 24: else if (led == 99) {
 13336  1F5D  0821               	movf	LedPointSelect@led,w
 13337  1F5E  3A63               	xorlw	99
 13338  1F5F  1D03               	skipz
 13339  1F60  0008               	return
 13340                           
 13341                           ;LED_B1.c: 25: LED = &VarErrLED;
 13342  1F61  3062               	movlw	_VarErrLED& (0+255)
 13343  1F62  00A0               	movwf	??_LedPointSelect
 13344  1F63  0820               	movf	??_LedPointSelect,w
 13345  1F64  00FB               	movwf	_LED
 13346  1F65  0008               	return
 13347  1F66                     __end_of_LedPointSelect:	
 13348                           
 13349                           	psect	text79
 13350  1EAD                     __ptext79:	
 13351 ;; *************** function _DimmerLights_Close *****************
 13352 ;; Defined at:
 13353 ;;		line 396 in file "../src/Dimmer_B1.c"
 13354 ;; Parameters:    Size  Location     Type
 13355 ;;		None
 13356 ;; Auto vars:     Size  Location     Type
 13357 ;;		None
 13358 ;; Return value:  Size  Location     Type
 13359 ;;		None               void
 13360 ;; Registers used:
 13361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13362 ;; Tracked objects:
 13363 ;;		On entry : 0/0
 13364 ;;		On exit  : 0/0
 13365 ;;		Unchanged: 0/0
 13366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13371 ;;Total ram usage:        0 bytes
 13372 ;; Hardware stack levels used:    1
 13373 ;; Hardware stack levels required when called:    6
 13374 ;; This function calls:
 13375 ;;		_getDimmerLights_StatusFlag
 13376 ;;		_setLoad_GO
 13377 ;;		_setMemory_GO
 13378 ;; This function is called by:
 13379 ;;		_DimmerLights_Main
 13380 ;; This function uses a non-reentrant model
 13381 ;;
 13382                           
 13383                           
 13384                           ;psect for function _DimmerLights_Close
 13385  1EAD                     _DimmerLights_Close:	
 13386                           
 13387                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 13388                           
 13389                           ;incstack = 0
 13390                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13391  1EAD  0021               	movlb	1	; select bank1
 13392  1EAE  085F               	movf	_Dimmer^(0+128),w
 13393  1EAF  0086               	movwf	6
 13394  1EB0  0187               	clrf	7
 13395  1EB1  1C01               	btfss	1,0
 13396  1EB2  0008               	return
 13397                           
 13398                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 13399  1EB3  085F               	movf	_Dimmer^(0+128),w
 13400  1EB4  0086               	movwf	6
 13401  1EB5  0187               	clrf	7
 13402  1EB6  1001               	bcf	1,0
 13403                           
 13404                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 13405  1EB7  319D  2544  319E   	fcall	_getDimmerLights_StatusFlag
 13406  1EBA  3800               	iorlw	0
 13407  1EBB  1D03               	skipz
 13408  1EBC  0008               	return
 13409                           
 13410                           ;Dimmer_B1.c: 400: setLoad_GO(0);
 13411  1EBD  3000               	movlw	0
 13412  1EBE  319B  23DC  319E   	fcall	_setLoad_GO
 13413                           
 13414                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 13415  1EC1  3001               	movlw	1
 13416  1EC2  319E  2651         	fcall	_setMemory_GO
 13417  1EC4  0008               	return
 13418  1EC5                     __end_of_DimmerLights_Close:	
 13419                           
 13420                           	psect	text80
 13421  1E51                     __ptext80:	
 13422 ;; *************** function _setMemory_GO *****************
 13423 ;; Defined at:
 13424 ;;		line 889 in file "../src/MCU_B1.c"
 13425 ;; Parameters:    Size  Location     Type
 13426 ;;  command         1    wreg     unsigned char 
 13427 ;; Auto vars:     Size  Location     Type
 13428 ;;  command         1    2[BANK0 ] unsigned char 
 13429 ;; Return value:  Size  Location     Type
 13430 ;;		None               void
 13431 ;; Registers used:
 13432 ;;		wreg, status,2, status,0
 13433 ;; Tracked objects:
 13434 ;;		On entry : 0/0
 13435 ;;		On exit  : 0/0
 13436 ;;		Unchanged: 0/0
 13437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13440 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13441 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13442 ;;Total ram usage:        3 bytes
 13443 ;; Hardware stack levels used:    1
 13444 ;; Hardware stack levels required when called:    5
 13445 ;; This function calls:
 13446 ;;		Nothing
 13447 ;; This function is called by:
 13448 ;;		_DimmerLights_Close
 13449 ;;		_setDimmerLights
 13450 ;; This function uses a non-reentrant model
 13451 ;;
 13452                           
 13453                           
 13454                           ;psect for function _setMemory_GO
 13455  1E51                     _setMemory_GO:	
 13456                           
 13457                           ;incstack = 0
 13458                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 13459                           ;setMemory_GO@command stored from wreg
 13460  1E51  0020               	movlb	0	; select bank0
 13461  1E52  00A2               	movwf	setMemory_GO@command
 13462                           
 13463                           ;MCU_B1.c: 890: Memory.GO = command;
 13464  1E53  0822               	movf	setMemory_GO@command,w
 13465  1E54  0024               	movlb	4	; select bank4
 13466  1E55  10C4               	bcf	(_Memory^(0+512)+36),1
 13467  1E56  1D03               	skipz
 13468  1E57  14C4               	bsf	(_Memory^(0+512)+36),1
 13469                           
 13470                           ;MCU_B1.c: 891: if (command == 0) {
 13471  1E58  0020               	movlb	0	; select bank0
 13472  1E59  08A2               	movf	setMemory_GO@command,f
 13473  1E5A  1D03               	skipz
 13474  1E5B  0008               	return
 13475                           
 13476                           ;MCU_B1.c: 892: Memory.Time = command;
 13477  1E5C  0822               	movf	setMemory_GO@command,w
 13478  1E5D  00A0               	movwf	??_setMemory_GO
 13479  1E5E  01A1               	clrf	??_setMemory_GO+1
 13480  1E5F  0820               	movf	??_setMemory_GO,w
 13481  1E60  0024               	movlb	4	; select bank4
 13482  1E61  00C2               	movwf	(_Memory^(0+512)+34)
 13483  1E62  0020               	movlb	0	; select bank0
 13484  1E63  0821               	movf	??_setMemory_GO+1,w
 13485  1E64  0024               	movlb	4	; select bank4
 13486  1E65  00C3               	movwf	((_Memory+1)^(0+512)+34)
 13487  1E66  0008               	return
 13488  1E67                     __end_of_setMemory_GO:	
 13489                           
 13490                           	psect	text81
 13491  1BDC                     __ptext81:	
 13492 ;; *************** function _setLoad_GO *****************
 13493 ;; Defined at:
 13494 ;;		line 265 in file "../src/OverLoad_B1.c"
 13495 ;; Parameters:    Size  Location     Type
 13496 ;;  command         1    wreg     unsigned char 
 13497 ;; Auto vars:     Size  Location     Type
 13498 ;;  command         1    0[BANK0 ] unsigned char 
 13499 ;; Return value:  Size  Location     Type
 13500 ;;		None               void
 13501 ;; Registers used:
 13502 ;;		wreg
 13503 ;; Tracked objects:
 13504 ;;		On entry : 0/0
 13505 ;;		On exit  : 0/0
 13506 ;;		Unchanged: 0/0
 13507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13511 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13512 ;;Total ram usage:        1 bytes
 13513 ;; Hardware stack levels used:    1
 13514 ;; Hardware stack levels required when called:    5
 13515 ;; This function calls:
 13516 ;;		Nothing
 13517 ;; This function is called by:
 13518 ;;		_DimmerLights_Close
 13519 ;; This function uses a non-reentrant model
 13520 ;;
 13521                           
 13522                           
 13523                           ;psect for function _setLoad_GO
 13524  1BDC                     _setLoad_GO:	
 13525                           
 13526                           ;incstack = 0
 13527                           ; Regs used in _setLoad_GO: [wreg]
 13528                           ;setLoad_GO@command stored from wreg
 13529  1BDC  0020               	movlb	0	; select bank0
 13530  1BDD  00A0               	movwf	setLoad_GO@command
 13531                           
 13532                           ;OverLoad_B1.c: 266: Load1.GO = command;
 13533  1BDE  0820               	movf	setLoad_GO@command,w
 13534  1BDF  0023               	movlb	3	; select bank3
 13535  1BE0  10A0               	bcf	_Load1^(0+384),1
 13536  1BE1  1D03               	skipz
 13537  1BE2  14A0               	bsf	_Load1^(0+384),1
 13538  1BE3  0008               	return
 13539  1BE4                     __end_of_setLoad_GO:	
 13540                           
 13541                           	psect	text82
 13542  1D44                     __ptext82:	
 13543 ;; *************** function _getDimmerLights_StatusFlag *****************
 13544 ;; Defined at:
 13545 ;;		line 475 in file "../src/Dimmer_B1.c"
 13546 ;; Parameters:    Size  Location     Type
 13547 ;;		None
 13548 ;; Auto vars:     Size  Location     Type
 13549 ;;  Status          1    1[BANK0 ] unsigned char 
 13550 ;; Return value:  Size  Location     Type
 13551 ;;                  1    wreg      unsigned char 
 13552 ;; Registers used:
 13553 ;;		wreg, status,2
 13554 ;; Tracked objects:
 13555 ;;		On entry : 0/0
 13556 ;;		On exit  : 0/0
 13557 ;;		Unchanged: 0/0
 13558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13562 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13563 ;;Total ram usage:        3 bytes
 13564 ;; Hardware stack levels used:    1
 13565 ;; Hardware stack levels required when called:    5
 13566 ;; This function calls:
 13567 ;;		Nothing
 13568 ;; This function is called by:
 13569 ;;		_DimmerLights_Close
 13570 ;;		_DimmerLights_Exceptions
 13571 ;; This function uses a non-reentrant model
 13572 ;;
 13573                           
 13574                           
 13575                           ;psect for function _getDimmerLights_StatusFlag
 13576  1D44                     _getDimmerLights_StatusFlag:	
 13577                           
 13578                           ;Dimmer_B1.c: 476: char Status = 0;
 13579                           
 13580                           ;incstack = 0
 13581                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 13582  1D44  0020               	movlb	0	; select bank0
 13583  1D45  01A1               	clrf	getDimmerLights_StatusFlag@Status
 13584                           
 13585                           ;Dimmer_B1.c: 483: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 13586  1D46  01A2               	clrf	_getDimmerLights_StatusFlag$2128
 13587  1D47  0AA2               	incf	_getDimmerLights_StatusFlag$2128,f
 13588  1D48  0022               	movlb	2	; select bank2
 13589  1D49  1F28               	btfss	_DimmerLights1^(0+256),6
 13590  1D4A  1B37               	btfsc	_DimmerLights2^(0+256),6
 13591  1D4B  2D4E               	goto	l6335
 13592  1D4C  0020               	movlb	0	; select bank0
 13593  1D4D  01A2               	clrf	_getDimmerLights_StatusFlag$2128
 13594  1D4E                     l6335:	
 13595  1D4E  0020               	movlb	0	; select bank0
 13596  1D4F  0822               	movf	_getDimmerLights_StatusFlag$2128,w
 13597  1D50  00A0               	movwf	??_getDimmerLights_StatusFlag
 13598  1D51  0820               	movf	??_getDimmerLights_StatusFlag,w
 13599  1D52  00A1               	movwf	getDimmerLights_StatusFlag@Status
 13600                           
 13601                           ;Dimmer_B1.c: 490: return Status;
 13602  1D53  0821               	movf	getDimmerLights_StatusFlag@Status,w
 13603  1D54  0008               	return
 13604  1D55                     __end_of_getDimmerLights_StatusFlag:	
 13605                           
 13606                           	psect	text83
 13607  1E67                     __ptext83:	
 13608 ;; *************** function _DimmerLights_Initialization *****************
 13609 ;; Defined at:
 13610 ;;		line 334 in file "../src/Dimmer_B1.c"
 13611 ;; Parameters:    Size  Location     Type
 13612 ;;		None
 13613 ;; Auto vars:     Size  Location     Type
 13614 ;;		None
 13615 ;; Return value:  Size  Location     Type
 13616 ;;		None               void
 13617 ;; Registers used:
 13618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13619 ;; Tracked objects:
 13620 ;;		On entry : 0/0
 13621 ;;		On exit  : 0/0
 13622 ;;		Unchanged: 0/0
 13623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13626 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13627 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13628 ;;Total ram usage:        1 bytes
 13629 ;; Hardware stack levels used:    1
 13630 ;; Hardware stack levels required when called:    7
 13631 ;; This function calls:
 13632 ;;		_Dimmer_Initialization
 13633 ;;		_setDimmerLights_Initialization
 13634 ;; This function is called by:
 13635 ;;		_main
 13636 ;; This function uses a non-reentrant model
 13637 ;;
 13638                           
 13639                           
 13640                           ;psect for function _DimmerLights_Initialization
 13641  1E67                     _DimmerLights_Initialization:	
 13642                           
 13643                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 13644                           
 13645                           ;incstack = 0
 13646                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13647  1E67  3028               	movlw	_DimmerLights1& (0+255)
 13648  1E68  0020               	movlb	0	; select bank0
 13649  1E69  00A4               	movwf	??_DimmerLights_Initialization
 13650  1E6A  0824               	movf	??_DimmerLights_Initialization,w
 13651  1E6B  0021               	movlb	1	; select bank1
 13652  1E6C  00E0               	movwf	_DimmerLights11^(0+128)
 13653                           
 13654                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 13655  1E6D  3001               	movlw	1
 13656  1E6E  3192  2229  319E   	fcall	_setDimmerLights_Initialization
 13657                           
 13658                           ;Dimmer_B1.c: 342: DimmerLights22 = &DimmerLights2;
 13659  1E71  3037               	movlw	_DimmerLights2& (0+255)
 13660  1E72  0020               	movlb	0	; select bank0
 13661  1E73  00A4               	movwf	??_DimmerLights_Initialization
 13662  1E74  0824               	movf	??_DimmerLights_Initialization,w
 13663  1E75  0021               	movlb	1	; select bank1
 13664  1E76  00E1               	movwf	_DimmerLights22^(0+128)
 13665                           
 13666                           ;Dimmer_B1.c: 343: setDimmerLights_Initialization(2);
 13667  1E77  3002               	movlw	2
 13668  1E78  3192  2229  319E   	fcall	_setDimmerLights_Initialization
 13669                           
 13670                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 13671  1E7B  319B  23B7         	fcall	_Dimmer_Initialization
 13672  1E7D  0008               	return
 13673  1E7E                     __end_of_DimmerLights_Initialization:	
 13674                           
 13675                           	psect	text84
 13676  1229                     __ptext84:	
 13677 ;; *************** function _setDimmerLights_Initialization *****************
 13678 ;; Defined at:
 13679 ;;		line 357 in file "../src/Dimmer_B1.c"
 13680 ;; Parameters:    Size  Location     Type
 13681 ;;  lights          1    wreg     unsigned char 
 13682 ;; Auto vars:     Size  Location     Type
 13683 ;;  lights          1    3[BANK0 ] unsigned char 
 13684 ;; Return value:  Size  Location     Type
 13685 ;;		None               void
 13686 ;; Registers used:
 13687 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13688 ;; Tracked objects:
 13689 ;;		On entry : 0/0
 13690 ;;		On exit  : 0/0
 13691 ;;		Unchanged: 0/0
 13692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13694 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13695 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13696 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;Total ram usage:        2 bytes
 13698 ;; Hardware stack levels used:    1
 13699 ;; Hardware stack levels required when called:    6
 13700 ;; This function calls:
 13701 ;;		_DimmerLightsPointSelect
 13702 ;; This function is called by:
 13703 ;;		_DimmerLights_Initialization
 13704 ;; This function uses a non-reentrant model
 13705 ;;
 13706                           
 13707                           
 13708                           ;psect for function _setDimmerLights_Initialization
 13709  1229                     _setDimmerLights_Initialization:	
 13710                           
 13711                           ;incstack = 0
 13712                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13713                           ;setDimmerLights_Initialization@lights stored from wreg
 13714  1229  0020               	movlb	0	; select bank0
 13715  122A  00A3               	movwf	setDimmerLights_Initialization@lights
 13716                           
 13717                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 13718  122B  0823               	movf	setDimmerLights_Initialization@lights,w
 13719  122C  319D  25AD         	fcall	_DimmerLightsPointSelect
 13720                           
 13721                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 13722  122E  0879               	movf	_DimmerLights,w
 13723  122F  3E09               	addlw	9
 13724  1230  0086               	movwf	6
 13725  1231  3001               	movlw	1	; select bank2/3
 13726  1232  0087               	movwf	7
 13727  1233  1501               	bsf	1,2
 13728                           
 13729                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13730  1234  3020               	movlw	32
 13731  1235  0020               	movlb	0	; select bank0
 13732  1236  00A2               	movwf	??_setDimmerLights_Initialization
 13733  1237  0879               	movf	_DimmerLights,w
 13734  1238  3E05               	addlw	5
 13735  1239  0086               	movwf	6
 13736  123A  3001               	movlw	1	; select bank2/3
 13737  123B  0087               	movwf	7
 13738  123C  0822               	movf	??_setDimmerLights_Initialization,w
 13739  123D  0081               	movwf	1
 13740                           
 13741                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13742  123E  303C               	movlw	60
 13743  123F  00A2               	movwf	??_setDimmerLights_Initialization
 13744  1240  0879               	movf	_DimmerLights,w
 13745  1241  3E06               	addlw	6
 13746  1242  0086               	movwf	6
 13747  1243  3001               	movlw	1	; select bank2/3
 13748  1244  0087               	movwf	7
 13749  1245  0822               	movf	??_setDimmerLights_Initialization,w
 13750  1246  0081               	movwf	1
 13751                           
 13752                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13753  1247  0879               	movf	_DimmerLights,w
 13754  1248  3E06               	addlw	6
 13755  1249  0086               	movwf	6
 13756  124A  3001               	movlw	1	; select bank2/3
 13757  124B  0087               	movwf	7
 13758  124C  0801               	movf	1,w
 13759  124D  00A2               	movwf	??_setDimmerLights_Initialization
 13760  124E  0879               	movf	_DimmerLights,w
 13761  124F  3E04               	addlw	4
 13762  1250  0086               	movwf	6
 13763  1251  3001               	movlw	1	; select bank2/3
 13764  1252  0087               	movwf	7
 13765  1253  0822               	movf	??_setDimmerLights_Initialization,w
 13766  1254  0081               	movwf	1
 13767  1255  0008               	return
 13768  1256                     __end_of_setDimmerLights_Initialization:	
 13769                           
 13770                           	psect	text85
 13771  1BB7                     __ptext85:	
 13772 ;; *************** function _Dimmer_Initialization *****************
 13773 ;; Defined at:
 13774 ;;		line 786 in file "../src/Dimmer_B1.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;		None
 13777 ;; Auto vars:     Size  Location     Type
 13778 ;;		None
 13779 ;; Return value:  Size  Location     Type
 13780 ;;		None               void
 13781 ;; Registers used:
 13782 ;;		wreg
 13783 ;; Tracked objects:
 13784 ;;		On entry : 0/0
 13785 ;;		On exit  : 0/0
 13786 ;;		Unchanged: 0/0
 13787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;Total ram usage:        1 bytes
 13793 ;; Hardware stack levels used:    1
 13794 ;; Hardware stack levels required when called:    5
 13795 ;; This function calls:
 13796 ;;		Nothing
 13797 ;; This function is called by:
 13798 ;;		_DimmerLights_Initialization
 13799 ;; This function uses a non-reentrant model
 13800 ;;
 13801                           
 13802                           
 13803                           ;psect for function _Dimmer_Initialization
 13804  1BB7                     _Dimmer_Initialization:	
 13805                           
 13806                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 13807                           
 13808                           ;incstack = 0
 13809                           ; Regs used in _Dimmer_Initialization: [wreg]
 13810  1BB7  30EA               	movlw	_Dimmer1& (0+255)
 13811  1BB8  0020               	movlb	0	; select bank0
 13812  1BB9  00A0               	movwf	??_Dimmer_Initialization
 13813  1BBA  0820               	movf	??_Dimmer_Initialization,w
 13814  1BBB  0021               	movlb	1	; select bank1
 13815  1BBC  00DF               	movwf	_Dimmer^(0+128)
 13816  1BBD  0008               	return
 13817  1BBE                     __end_of_Dimmer_Initialization:	
 13818                           
 13819                           	psect	text86
 13820  1BD4                     __ptext86:	
 13821 ;; *************** function _DelayOff_Main *****************
 13822 ;; Defined at:
 13823 ;;		line 41 in file "../src/DelayOff_B1.c"
 13824 ;; Parameters:    Size  Location     Type
 13825 ;;		None
 13826 ;; Auto vars:     Size  Location     Type
 13827 ;;		None
 13828 ;; Return value:  Size  Location     Type
 13829 ;;		None               void
 13830 ;; Registers used:
 13831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13832 ;; Tracked objects:
 13833 ;;		On entry : 0/0
 13834 ;;		On exit  : 0/0
 13835 ;;		Unchanged: 0/0
 13836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13841 ;;Total ram usage:        0 bytes
 13842 ;; Hardware stack levels used:    1
 13843 ;; Hardware stack levels required when called:   10
 13844 ;; This function calls:
 13845 ;;		_DlyOff_Main
 13846 ;; This function is called by:
 13847 ;;		_main
 13848 ;; This function uses a non-reentrant model
 13849 ;;
 13850                           
 13851                           
 13852                           ;psect for function _DelayOff_Main
 13853  1BD4                     _DelayOff_Main:	
 13854                           
 13855                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13856                           
 13857                           ;incstack = 0
 13858                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13859  1BD4  3001               	movlw	1
 13860  1BD5  318C  242E  319B   	fcall	_DlyOff_Main
 13861                           
 13862                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 13863  1BD8  3002               	movlw	2
 13864  1BD9  318C  242E         	fcall	_DlyOff_Main
 13865  1BDB  0008               	return
 13866  1BDC                     __end_of_DelayOff_Main:	
 13867                           
 13868                           	psect	text87
 13869  0C2E                     __ptext87:	
 13870 ;; *************** function _DlyOff_Main *****************
 13871 ;; Defined at:
 13872 ;;		line 62 in file "../src/DelayOff_B1.c"
 13873 ;; Parameters:    Size  Location     Type
 13874 ;;  sw              1    wreg     unsigned char 
 13875 ;; Auto vars:     Size  Location     Type
 13876 ;;  sw              1   68[BANK0 ] unsigned char 
 13877 ;; Return value:  Size  Location     Type
 13878 ;;		None               void
 13879 ;; Registers used:
 13880 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13881 ;; Tracked objects:
 13882 ;;		On entry : 0/0
 13883 ;;		On exit  : 0/0
 13884 ;;		Unchanged: 0/0
 13885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13889 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13890 ;;Total ram usage:        3 bytes
 13891 ;; Hardware stack levels used:    1
 13892 ;; Hardware stack levels required when called:    9
 13893 ;; This function calls:
 13894 ;;		_DelayOffPointSelect
 13895 ;;		_setBuz
 13896 ;;		_setDimmerLights_Switch
 13897 ;;		_setDimmerLights_Trigger
 13898 ;;		_setRFSW_Status
 13899 ;;		_setRF_DimmerLights
 13900 ;;		_setSw_Status
 13901 ;;		_setTxData
 13902 ;; This function is called by:
 13903 ;;		_DelayOff_Main
 13904 ;; This function uses a non-reentrant model
 13905 ;;
 13906                           
 13907                           
 13908                           ;psect for function _DlyOff_Main
 13909  0C2E                     _DlyOff_Main:	
 13910                           
 13911                           ;incstack = 0
 13912                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13913                           ;DlyOff_Main@sw stored from wreg
 13914  0C2E  0020               	movlb	0	; select bank0
 13915  0C2F  00E4               	movwf	DlyOff_Main@sw
 13916                           
 13917                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13918  0C30  0864               	movf	DlyOff_Main@sw,w
 13919  0C31  319D  25E8  318C   	fcall	_DelayOffPointSelect
 13920                           
 13921                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13922  0C34  0878               	movf	_DelayOff,w
 13923  0C35  0086               	movwf	6
 13924  0C36  3001               	movlw	1	; select bank2/3
 13925  0C37  0087               	movwf	7
 13926  0C38  1C81               	btfss	1,1
 13927  0C39  0008               	return
 13928                           
 13929                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13930  0C3A  0878               	movf	_DelayOff,w
 13931  0C3B  3E02               	addlw	2
 13932  0C3C  0086               	movwf	6
 13933  0C3D  3001               	movlw	1	; select bank2/3
 13934  0C3E  0087               	movwf	7
 13935  0C3F  3001               	movlw	1
 13936  0C40  0781               	addwf	1,f
 13937  0C41  3141               	addfsr 1,1
 13938  0C42  1803               	skipnc
 13939  0C43  0A81               	incf	1,f
 13940                           
 13941                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 13942  0C44  0878               	movf	_DelayOff,w
 13943  0C45  3E02               	addlw	2
 13944  0C46  0086               	movwf	6
 13945  0C47  3001               	movlw	1	; select bank2/3
 13946  0C48  0087               	movwf	7
 13947  0C49  3F40               	moviw [0]fsr1
 13948  0C4A  0020               	movlb	0	; select bank0
 13949  0C4B  00E2               	movwf	??_DlyOff_Main
 13950  0C4C  3F41               	moviw [1]fsr1
 13951  0C4D  00E3               	movwf	??_DlyOff_Main+1
 13952  0C4E  3016               	movlw	22
 13953  0C4F  0263               	subwf	??_DlyOff_Main+1,w
 13954  0C50  3012               	movlw	18
 13955  0C51  1903               	skipnz
 13956  0C52  0262               	subwf	??_DlyOff_Main,w
 13957  0C53  1C03               	skipc
 13958  0C54  0008               	return
 13959                           
 13960                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13961  0C55  0878               	movf	_DelayOff,w
 13962  0C56  3E02               	addlw	2
 13963  0C57  0086               	movwf	6
 13964  0C58  3001               	movlw	1	; select bank2/3
 13965  0C59  0087               	movwf	7
 13966  0C5A  3000               	movlw	0
 13967  0C5B  3FC0               	movwi [0]fsr1
 13968  0C5C  3FC1               	movwi [1]fsr1
 13969                           
 13970                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13971  0C5D  3001               	movlw	1
 13972  0C5E  00E2               	movwf	??_DlyOff_Main
 13973  0C5F  0878               	movf	_DelayOff,w
 13974  0C60  3E04               	addlw	4
 13975  0C61  0086               	movwf	6
 13976  0C62  3001               	movlw	1	; select bank2/3
 13977  0C63  0087               	movwf	7
 13978  0C64  0862               	movf	??_DlyOff_Main,w
 13979  0C65  0781               	addwf	1,f
 13980                           
 13981                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13982  0C66  0878               	movf	_DelayOff,w
 13983  0C67  3E04               	addlw	4
 13984  0C68  0086               	movwf	6
 13985  0C69  3001               	movlw	1	; select bank2/3
 13986  0C6A  0087               	movwf	7
 13987  0C6B  0A78               	incf	_DelayOff,w
 13988  0C6C  0084               	movwf	4
 13989  0C6D  3001               	movlw	1	; select bank2/3
 13990  0C6E  0085               	movwf	5
 13991  0C6F  0800               	movf	0,w
 13992  0C70  0201               	subwf	1,w
 13993  0C71  1C03               	skipc
 13994  0C72  0008               	return
 13995                           
 13996                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13997  0C73  0878               	movf	_DelayOff,w
 13998  0C74  3E04               	addlw	4
 13999  0C75  0086               	movwf	6
 14000  0C76  3001               	movlw	1	; select bank2/3
 14001  0C77  0087               	movwf	7
 14002  0C78  0181               	clrf	1
 14003                           
 14004                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14005  0C79  0878               	movf	_DelayOff,w
 14006  0C7A  0086               	movwf	6
 14007  0C7B  3001               	movlw	1	; select bank2/3
 14008  0C7C  0087               	movwf	7
 14009  0C7D  1081               	bcf	1,1
 14010                           
 14011                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 14012  0C7E  01A2               	clrf	setSw_Status@command
 14013  0C7F  0864               	movf	DlyOff_Main@sw,w
 14014  0C80  319C  24B8  318C   	fcall	_setSw_Status
 14015                           
 14016                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 14017  0C83  0020               	movlb	0	; select bank0
 14018  0C84  01A2               	clrf	setRFSW_Status@command
 14019  0C85  0864               	movf	DlyOff_Main@sw,w
 14020  0C86  319C  24A9  318C   	fcall	_setRFSW_Status
 14021                           
 14022                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 14023  0C89  0020               	movlb	0	; select bank0
 14024  0C8A  01DD               	clrf	setRF_DimmerLights@on
 14025  0C8B  0864               	movf	DlyOff_Main@sw,w
 14026  0C8C  3189  2186  318C   	fcall	_setRF_DimmerLights
 14027                           
 14028                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 14029  0C8F  0020               	movlb	0	; select bank0
 14030  0C90  01A2               	clrf	setDimmerLights_Trigger@command
 14031  0C91  0AA2               	incf	setDimmerLights_Trigger@command,f
 14032  0C92  0864               	movf	DlyOff_Main@sw,w
 14033  0C93  319D  2504  318C   	fcall	_setDimmerLights_Trigger
 14034                           
 14035                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 14036  0C96  0020               	movlb	0	; select bank0
 14037  0C97  01A2               	clrf	setDimmerLights_Switch@command
 14038  0C98  0864               	movf	DlyOff_Main@sw,w
 14039  0C99  319C  24F4  318C   	fcall	_setDimmerLights_Switch
 14040                           
 14041                           ;DelayOff_B1.c: 78: setTxData();
 14042  0C9C  3186  2689  318C   	fcall	_setTxData
 14043                           
 14044                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 14045  0C9F  3064               	movlw	100
 14046  0CA0  0020               	movlb	0	; select bank0
 14047  0CA1  00A9               	movwf	setBuz@time
 14048  0CA2  3000               	movlw	0
 14049  0CA3  00AA               	movwf	setBuz@time+1
 14050  0CA4  3001               	movlw	1
 14051  0CA5  3197  274C         	fcall	_setBuz
 14052  0CA7  0008               	return
 14053  0CA8                     __end_of_DlyOff_Main:	
 14054                           
 14055                           	psect	text88
 14056  0689                     __ptext88:	
 14057 ;; *************** function _setTxData *****************
 14058 ;; Defined at:
 14059 ;;		line 153 in file "../src/RF_Control_B1.c"
 14060 ;; Parameters:    Size  Location     Type
 14061 ;;		None
 14062 ;; Auto vars:     Size  Location     Type
 14063 ;;  i               1    0        unsigned char 
 14064 ;; Return value:  Size  Location     Type
 14065 ;;		None               void
 14066 ;; Registers used:
 14067 ;;		wreg, fsr1l, fsr1h
 14068 ;; Tracked objects:
 14069 ;;		On entry : 0/0
 14070 ;;		On exit  : 0/0
 14071 ;;		Unchanged: 0/0
 14072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14076 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14077 ;;Total ram usage:        1 bytes
 14078 ;; Hardware stack levels used:    1
 14079 ;; Hardware stack levels required when called:    5
 14080 ;; This function calls:
 14081 ;;		Nothing
 14082 ;; This function is called by:
 14083 ;;		_DlyOff_Main
 14084 ;;		_setDimmerLights_Adj
 14085 ;;		_setControl_Lights_Table
 14086 ;;		_setRFSW_Control
 14087 ;;		_setRFSW_AdjControl
 14088 ;;		_Sw_DimmerOnFunc
 14089 ;;		_Sw_DimmerOffFunc
 14090 ;; This function uses a non-reentrant model
 14091 ;;
 14092                           
 14093                           
 14094                           ;psect for function _setTxData
 14095  0689                     _setTxData:	
 14096                           
 14097                           ;RF_Control_B1.c: 154: char i;
 14098                           ;RF_Control_B1.c: 155: if (RF1.Enable == 1) {
 14099                           
 14100                           ;incstack = 0
 14101                           ; Regs used in _setTxData: [wregfsr1]
 14102  0689  0021               	movlb	1	; select bank1
 14103  068A  1C57               	btfss	_RF1^(0+128),0
 14104  068B  0008               	return
 14105                           
 14106                           ;RF_Control_B1.c: 157: RF1.TransceiveGO = 1;
 14107  068C  1557               	bsf	_RF1^(0+128),2
 14108                           
 14109                           ;RF_Control_B1.c: 167: RF_Data[0] = 0x63;
 14110  068D  3063               	movlw	99
 14111  068E  0020               	movlb	0	; select bank0
 14112  068F  00A0               	movwf	??_setTxData
 14113  0690  0820               	movf	??_setTxData,w
 14114  0691  0021               	movlb	1	; select bank1
 14115  0692  00B6               	movwf	_RF_Data^(0+128)
 14116                           
 14117                           ;RF_Control_B1.c: 168: RF_Data[1] = 0x02;
 14118  0693  3002               	movlw	2
 14119  0694  0020               	movlb	0	; select bank0
 14120  0695  00A0               	movwf	??_setTxData
 14121  0696  0820               	movf	??_setTxData,w
 14122  0697  0021               	movlb	1	; select bank1
 14123  0698  00B7               	movwf	(_RF_Data^(0+128)+1)
 14124                           
 14125                           ;RF_Control_B1.c: 169: RF_Data[2] = product->Data[2];
 14126  0699  0020               	movlb	0	; select bank0
 14127  069A  086E               	movf	_product,w
 14128  069B  0086               	movwf	6
 14129  069C  3002               	movlw	2	; select bank4/5
 14130  069D  0087               	movwf	7
 14131  069E  3002               	movlw	2	; select bank4/5
 14132  069F  3F42               	moviw [2]fsr1
 14133  06A0  0021               	movlb	1	; select bank1
 14134  06A1  00B8               	movwf	(_RF_Data^(0+128)+2)
 14135                           
 14136                           ;RF_Control_B1.c: 170: RF_Data[3] = product->Data[3];
 14137  06A2  0020               	movlb	0	; select bank0
 14138  06A3  086E               	movf	_product,w
 14139  06A4  0086               	movwf	6
 14140  06A5  3002               	movlw	2	; select bank4/5
 14141  06A6  0087               	movwf	7
 14142  06A7  3002               	movlw	2	; select bank4/5
 14143  06A8  3F43               	moviw [3]fsr1
 14144  06A9  0021               	movlb	1	; select bank1
 14145  06AA  00B9               	movwf	(_RF_Data^(0+128)+3)
 14146                           
 14147                           ;RF_Control_B1.c: 171: RF_Data[4] = product->Data[4];
 14148  06AB  0020               	movlb	0	; select bank0
 14149  06AC  086E               	movf	_product,w
 14150  06AD  0086               	movwf	6
 14151  06AE  3002               	movlw	2	; select bank4/5
 14152  06AF  0087               	movwf	7
 14153  06B0  3002               	movlw	2	; select bank4/5
 14154  06B1  3F44               	moviw [4]fsr1
 14155  06B2  0021               	movlb	1	; select bank1
 14156  06B3  00BA               	movwf	(_RF_Data^(0+128)+4)
 14157                           
 14158                           ;RF_Control_B1.c: 172: RF_Data[5] = product->Data[5];
 14159  06B4  0020               	movlb	0	; select bank0
 14160  06B5  086E               	movf	_product,w
 14161  06B6  0086               	movwf	6
 14162  06B7  3002               	movlw	2	; select bank4/5
 14163  06B8  0087               	movwf	7
 14164  06B9  3002               	movlw	2	; select bank4/5
 14165  06BA  3F45               	moviw [5]fsr1
 14166  06BB  0021               	movlb	1	; select bank1
 14167  06BC  00BB               	movwf	(_RF_Data^(0+128)+5)
 14168                           
 14169                           ;RF_Control_B1.c: 173: RF_Data[6] = product->Data[6];
 14170  06BD  0020               	movlb	0	; select bank0
 14171  06BE  086E               	movf	_product,w
 14172  06BF  0086               	movwf	6
 14173  06C0  3002               	movlw	2	; select bank4/5
 14174  06C1  0087               	movwf	7
 14175  06C2  3002               	movlw	2	; select bank4/5
 14176  06C3  3F46               	moviw [6]fsr1
 14177  06C4  0021               	movlb	1	; select bank1
 14178  06C5  00BC               	movwf	(_RF_Data^(0+128)+6)
 14179                           
 14180                           ;RF_Control_B1.c: 174: RF_Data[7] = product->Data[7];
 14181  06C6  0020               	movlb	0	; select bank0
 14182  06C7  086E               	movf	_product,w
 14183  06C8  0086               	movwf	6
 14184  06C9  3002               	movlw	2	; select bank4/5
 14185  06CA  0087               	movwf	7
 14186  06CB  3002               	movlw	2	; select bank4/5
 14187  06CC  3F47               	moviw [7]fsr1
 14188  06CD  0021               	movlb	1	; select bank1
 14189  06CE  00BD               	movwf	(_RF_Data^(0+128)+7)
 14190                           
 14191                           ;RF_Control_B1.c: 175: RF_Data[8] = product->Data[8];
 14192  06CF  0020               	movlb	0	; select bank0
 14193  06D0  086E               	movf	_product,w
 14194  06D1  0086               	movwf	6
 14195  06D2  3002               	movlw	2	; select bank4/5
 14196  06D3  0087               	movwf	7
 14197  06D4  3002               	movlw	2	; select bank4/5
 14198  06D5  3F48               	moviw [8]fsr1
 14199  06D6  0021               	movlb	1	; select bank1
 14200  06D7  00BE               	movwf	(_RF_Data^(0+128)+8)
 14201                           
 14202                           ;RF_Control_B1.c: 176: RF_Data[9] = product->Data[9];
 14203  06D8  0020               	movlb	0	; select bank0
 14204  06D9  086E               	movf	_product,w
 14205  06DA  0086               	movwf	6
 14206  06DB  3002               	movlw	2	; select bank4/5
 14207  06DC  0087               	movwf	7
 14208  06DD  3002               	movlw	2	; select bank4/5
 14209  06DE  3F49               	moviw [9]fsr1
 14210  06DF  0021               	movlb	1	; select bank1
 14211  06E0  00BF               	movwf	(_RF_Data^(0+128)+9)
 14212                           
 14213                           ;RF_Control_B1.c: 177: RF_Data[10] = product->Data[10];
 14214  06E1  0020               	movlb	0	; select bank0
 14215  06E2  086E               	movf	_product,w
 14216  06E3  0086               	movwf	6
 14217  06E4  3002               	movlw	2	; select bank4/5
 14218  06E5  0087               	movwf	7
 14219  06E6  3002               	movlw	2	; select bank4/5
 14220  06E7  3F4A               	moviw [10]fsr1
 14221  06E8  0021               	movlb	1	; select bank1
 14222  06E9  00C0               	movwf	(_RF_Data^(0+128)+10)
 14223                           
 14224                           ;RF_Control_B1.c: 178: RF_Data[11] = product->Data[11];
 14225  06EA  0020               	movlb	0	; select bank0
 14226  06EB  086E               	movf	_product,w
 14227  06EC  0086               	movwf	6
 14228  06ED  3002               	movlw	2	; select bank4/5
 14229  06EE  0087               	movwf	7
 14230  06EF  3002               	movlw	2	; select bank4/5
 14231  06F0  3F4B               	moviw [11]fsr1
 14232  06F1  0021               	movlb	1	; select bank1
 14233  06F2  00C1               	movwf	(_RF_Data^(0+128)+11)
 14234                           
 14235                           ;RF_Control_B1.c: 179: RF_Data[12] = product->Data[12];
 14236  06F3  0020               	movlb	0	; select bank0
 14237  06F4  086E               	movf	_product,w
 14238  06F5  0086               	movwf	6
 14239  06F6  3002               	movlw	2	; select bank4/5
 14240  06F7  0087               	movwf	7
 14241  06F8  3002               	movlw	2	; select bank4/5
 14242  06F9  3F4C               	moviw [12]fsr1
 14243  06FA  0021               	movlb	1	; select bank1
 14244  06FB  00C2               	movwf	(_RF_Data^(0+128)+12)
 14245                           
 14246                           ;RF_Control_B1.c: 180: RF_Data[13] = product->Data[13];
 14247  06FC  0020               	movlb	0	; select bank0
 14248  06FD  086E               	movf	_product,w
 14249  06FE  0086               	movwf	6
 14250  06FF  3002               	movlw	2	; select bank4/5
 14251  0700  0087               	movwf	7
 14252  0701  3002               	movlw	2	; select bank4/5
 14253  0702  3F4D               	moviw [13]fsr1
 14254  0703  0021               	movlb	1	; select bank1
 14255  0704  00C3               	movwf	(_RF_Data^(0+128)+13)
 14256                           
 14257                           ;RF_Control_B1.c: 181: RF_Data[14] = product->Data[14];
 14258  0705  0020               	movlb	0	; select bank0
 14259  0706  086E               	movf	_product,w
 14260  0707  0086               	movwf	6
 14261  0708  3002               	movlw	2	; select bank4/5
 14262  0709  0087               	movwf	7
 14263  070A  3002               	movlw	2	; select bank4/5
 14264  070B  3F4E               	moviw [14]fsr1
 14265  070C  0021               	movlb	1	; select bank1
 14266  070D  00C4               	movwf	(_RF_Data^(0+128)+14)
 14267                           
 14268                           ;RF_Control_B1.c: 182: RF_Data[15] = product->Data[15];
 14269  070E  0020               	movlb	0	; select bank0
 14270  070F  086E               	movf	_product,w
 14271  0710  0086               	movwf	6
 14272  0711  3002               	movlw	2	; select bank4/5
 14273  0712  0087               	movwf	7
 14274  0713  3002               	movlw	2	; select bank4/5
 14275  0714  3F4F               	moviw [15]fsr1
 14276  0715  0021               	movlb	1	; select bank1
 14277  0716  00C5               	movwf	(_RF_Data^(0+128)+15)
 14278                           
 14279                           ;RF_Control_B1.c: 183: RF_Data[16] = product->Data[16];
 14280  0717  0020               	movlb	0	; select bank0
 14281  0718  086E               	movf	_product,w
 14282  0719  0086               	movwf	6
 14283  071A  3002               	movlw	2	; select bank4/5
 14284  071B  0087               	movwf	7
 14285  071C  3002               	movlw	2	; select bank4/5
 14286  071D  3F50               	moviw [16]fsr1
 14287  071E  0021               	movlb	1	; select bank1
 14288  071F  00C6               	movwf	(_RF_Data^(0+128)+16)
 14289                           
 14290                           ;RF_Control_B1.c: 184: RF_Data[17] = product->Data[17];
 14291  0720  0020               	movlb	0	; select bank0
 14292  0721  086E               	movf	_product,w
 14293  0722  0086               	movwf	6
 14294  0723  3002               	movlw	2	; select bank4/5
 14295  0724  0087               	movwf	7
 14296  0725  3002               	movlw	2	; select bank4/5
 14297  0726  3F51               	moviw [17]fsr1
 14298  0727  0021               	movlb	1	; select bank1
 14299  0728  00C7               	movwf	(_RF_Data^(0+128)+17)
 14300                           
 14301                           ;RF_Control_B1.c: 185: RF_Data[18] = product->Data[18];
 14302  0729  0020               	movlb	0	; select bank0
 14303  072A  086E               	movf	_product,w
 14304  072B  0086               	movwf	6
 14305  072C  3002               	movlw	2	; select bank4/5
 14306  072D  0087               	movwf	7
 14307  072E  3002               	movlw	2	; select bank4/5
 14308  072F  3F52               	moviw [18]fsr1
 14309  0730  0021               	movlb	1	; select bank1
 14310  0731  00C8               	movwf	(_RF_Data^(0+128)+18)
 14311                           
 14312                           ;RF_Control_B1.c: 186: RF_Data[19] = product->Data[19];
 14313  0732  0020               	movlb	0	; select bank0
 14314  0733  086E               	movf	_product,w
 14315  0734  0086               	movwf	6
 14316  0735  3002               	movlw	2	; select bank4/5
 14317  0736  0087               	movwf	7
 14318  0737  3002               	movlw	2	; select bank4/5
 14319  0738  3F53               	moviw [19]fsr1
 14320  0739  0021               	movlb	1	; select bank1
 14321  073A  00C9               	movwf	(_RF_Data^(0+128)+19)
 14322                           
 14323                           ;RF_Control_B1.c: 187: RF_Data[20] = 210;
 14324  073B  30D2               	movlw	210
 14325  073C  0020               	movlb	0	; select bank0
 14326  073D  00A0               	movwf	??_setTxData
 14327  073E  0820               	movf	??_setTxData,w
 14328  073F  0021               	movlb	1	; select bank1
 14329  0740  00CA               	movwf	(_RF_Data^(0+128)+20)
 14330  0741  0008               	return
 14331  0742                     __end_of_setTxData:	
 14332                           
 14333                           	psect	text89
 14334  1CB8                     __ptext89:	
 14335 ;; *************** function _setSw_Status *****************
 14336 ;; Defined at:
 14337 ;;		line 109 in file "../src/Switch_B1.c"
 14338 ;; Parameters:    Size  Location     Type
 14339 ;;  sw              1    wreg     unsigned char 
 14340 ;;  command         1    2[BANK0 ] unsigned char 
 14341 ;; Auto vars:     Size  Location     Type
 14342 ;;  sw              1    3[BANK0 ] unsigned char 
 14343 ;; Return value:  Size  Location     Type
 14344 ;;		None               void
 14345 ;; Registers used:
 14346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14347 ;; Tracked objects:
 14348 ;;		On entry : 0/0
 14349 ;;		On exit  : 0/0
 14350 ;;		Unchanged: 0/0
 14351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14352 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;Total ram usage:        2 bytes
 14357 ;; Hardware stack levels used:    1
 14358 ;; Hardware stack levels required when called:    6
 14359 ;; This function calls:
 14360 ;;		_SwPointSelect
 14361 ;; This function is called by:
 14362 ;;		_DlyOff_Main
 14363 ;;		_setDimmerLights_ERROR
 14364 ;;		_setControl_Lights_Table
 14365 ;;		_setRFSW_Control
 14366 ;; This function uses a non-reentrant model
 14367 ;;
 14368                           
 14369                           
 14370                           ;psect for function _setSw_Status
 14371  1CB8                     _setSw_Status:	
 14372                           
 14373                           ;incstack = 0
 14374                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14375                           ;setSw_Status@sw stored from wreg
 14376  1CB8  0020               	movlb	0	; select bank0
 14377  1CB9  00A3               	movwf	setSw_Status@sw
 14378                           
 14379                           ;Switch_B1.c: 110: SwPointSelect(sw);
 14380  1CBA  0823               	movf	setSw_Status@sw,w
 14381  1CBB  319D  25FC         	fcall	_SwPointSelect
 14382                           
 14383                           ;Switch_B1.c: 111: Sw->Status = command;
 14384  1CBD  0020               	movlb	0	; select bank0
 14385  1CBE  086F               	movf	_Sw,w
 14386  1CBF  0086               	movwf	6
 14387  1CC0  3001               	movlw	1	; select bank2/3
 14388  1CC1  0087               	movwf	7
 14389  1CC2  0822               	movf	setSw_Status@command,w
 14390  1CC3  1301               	bcf	1,6
 14391  1CC4  1D03               	skipz
 14392  1CC5  1701               	bsf	1,6
 14393  1CC6  0008               	return
 14394  1CC7                     __end_of_setSw_Status:	
 14395                           
 14396                           	psect	text90
 14397  1DFC                     __ptext90:	
 14398 ;; *************** function _SwPointSelect *****************
 14399 ;; Defined at:
 14400 ;;		line 21 in file "../src/Switch_B1.c"
 14401 ;; Parameters:    Size  Location     Type
 14402 ;;  sw              1    wreg     unsigned char 
 14403 ;; Auto vars:     Size  Location     Type
 14404 ;;  sw              1    1[BANK0 ] unsigned char 
 14405 ;; Return value:  Size  Location     Type
 14406 ;;		None               void
 14407 ;; Registers used:
 14408 ;;		wreg
 14409 ;; Tracked objects:
 14410 ;;		On entry : 0/0
 14411 ;;		On exit  : 0/0
 14412 ;;		Unchanged: 0/0
 14413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14416 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14417 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14418 ;;Total ram usage:        2 bytes
 14419 ;; Hardware stack levels used:    1
 14420 ;; Hardware stack levels required when called:    5
 14421 ;; This function calls:
 14422 ;;		Nothing
 14423 ;; This function is called by:
 14424 ;;		_setSw_Enable
 14425 ;;		_setSw_Status
 14426 ;;		_setSw_Main
 14427 ;;		_Sw_Detect
 14428 ;; This function uses a non-reentrant model
 14429 ;;
 14430                           
 14431                           
 14432                           ;psect for function _SwPointSelect
 14433  1DFC                     _SwPointSelect:	
 14434                           
 14435                           ;incstack = 0
 14436                           ; Regs used in _SwPointSelect: [wreg]
 14437                           ;SwPointSelect@sw stored from wreg
 14438  1DFC  0020               	movlb	0	; select bank0
 14439  1DFD  00A1               	movwf	SwPointSelect@sw
 14440                           
 14441                           ;Switch_B1.c: 24: if (sw == 1) {
 14442  1DFE  0821               	movf	SwPointSelect@sw,w
 14443  1DFF  3A01               	xorlw	1
 14444  1E00  1D03               	skipz
 14445  1E01  2E07               	goto	l5873
 14446                           
 14447                           ;Switch_B1.c: 25: Sw = &Sw1;
 14448  1E02  3046               	movlw	_Sw1& (0+255)
 14449  1E03  00A0               	movwf	??_SwPointSelect
 14450  1E04  0820               	movf	??_SwPointSelect,w
 14451  1E05  00EF               	movwf	_Sw
 14452                           
 14453                           ;Switch_B1.c: 26: }
 14454  1E06  0008               	return
 14455  1E07                     l5873:	
 14456                           
 14457                           ;Switch_B1.c: 29: else if (sw == 2) {
 14458  1E07  0821               	movf	SwPointSelect@sw,w
 14459  1E08  3A02               	xorlw	2
 14460  1E09  1D03               	skipz
 14461  1E0A  0008               	return
 14462                           
 14463                           ;Switch_B1.c: 30: Sw = &Sw2;
 14464  1E0B  304F               	movlw	_Sw2& (0+255)
 14465  1E0C  00A0               	movwf	??_SwPointSelect
 14466  1E0D  0820               	movf	??_SwPointSelect,w
 14467  1E0E  00EF               	movwf	_Sw
 14468  1E0F  0008               	return
 14469  1E10                     __end_of_SwPointSelect:	
 14470                           
 14471                           	psect	text91
 14472  0986                     __ptext91:	
 14473 ;; *************** function _setRF_DimmerLights *****************
 14474 ;; Defined at:
 14475 ;;		line 412 in file "../src/RF_Control_B1.c"
 14476 ;; Parameters:    Size  Location     Type
 14477 ;;  lights          1    wreg     unsigned char 
 14478 ;;  on              1   61[BANK0 ] unsigned char 
 14479 ;; Auto vars:     Size  Location     Type
 14480 ;;  lights          1   65[BANK0 ] unsigned char 
 14481 ;;  status          1   64[BANK0 ] unsigned char 
 14482 ;; Return value:  Size  Location     Type
 14483 ;;		None               void
 14484 ;; Registers used:
 14485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14486 ;; Tracked objects:
 14487 ;;		On entry : 0/0
 14488 ;;		On exit  : 0/0
 14489 ;;		Unchanged: 0/0
 14490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14491 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14493 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14494 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;Total ram usage:        5 bytes
 14496 ;; Hardware stack levels used:    1
 14497 ;; Hardware stack levels required when called:    8
 14498 ;; This function calls:
 14499 ;;		_setPercentValue
 14500 ;; This function is called by:
 14501 ;;		_DlyOff_Main
 14502 ;;		_setDimmerLights_Adj
 14503 ;;		_setRFSW_Control
 14504 ;;		_Sw_DimmerOnFunc
 14505 ;;		_Sw_DimmerOffFunc
 14506 ;; This function uses a non-reentrant model
 14507 ;;
 14508                           
 14509                           
 14510                           ;psect for function _setRF_DimmerLights
 14511  0986                     _setRF_DimmerLights:	
 14512                           
 14513                           ;incstack = 0
 14514                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14515                           ;setRF_DimmerLights@lights stored from wreg
 14516  0986  0020               	movlb	0	; select bank0
 14517  0987  00E1               	movwf	setRF_DimmerLights@lights
 14518                           
 14519                           ;RF_Control_B1.c: 413: char status;
 14520                           ;RF_Control_B1.c: 414: status = 1;
 14521  0988  01E0               	clrf	setRF_DimmerLights@status
 14522  0989  0AE0               	incf	setRF_DimmerLights@status,f
 14523                           
 14524                           ;RF_Control_B1.c: 415: status <<= (lights - 1);
 14525  098A  0861               	movf	setRF_DimmerLights@lights,w
 14526  098B  3EFF               	addlw	-1
 14527  098C  0A89               	incf	9,f
 14528  098D  2990               	goto	u4880
 14529  098E                     u4885:	
 14530  098E  1003               	clrc
 14531  098F  0DE0               	rlf	setRF_DimmerLights@status,f
 14532  0990                     u4880:	
 14533  0990  3EFF               	addlw	-1
 14534  0991  1D03               	skipz
 14535  0992  298E               	goto	u4885
 14536                           
 14537                           ;RF_Control_B1.c: 416: product->Data[11]=lights;
 14538  0993  0861               	movf	setRF_DimmerLights@lights,w
 14539  0994  00DE               	movwf	??_setRF_DimmerLights
 14540  0995  086E               	movf	_product,w
 14541  0996  3E0B               	addlw	11
 14542  0997  0086               	movwf	6
 14543  0998  3002               	movlw	2	; select bank4/5
 14544  0999  0087               	movwf	7
 14545  099A  085E               	movf	??_setRF_DimmerLights,w
 14546  099B  0081               	movwf	1
 14547                           
 14548                           ;RF_Control_B1.c: 419: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 14549  099C  3020               	movlw	32
 14550  099D  3194  24A2  3189   	fcall	_setPercentValue
 14551  09A0  0020               	movlb	0	; select bank0
 14552  09A1  00DE               	movwf	??_setRF_DimmerLights
 14553  09A2  0861               	movf	setRF_DimmerLights@lights,w
 14554  09A3  3E14               	addlw	20
 14555  09A4  076E               	addwf	_product,w
 14556  09A5  00DF               	movwf	??_setRF_DimmerLights+1
 14557  09A6  085F               	movf	??_setRF_DimmerLights+1,w
 14558  09A7  0086               	movwf	6
 14559  09A8  3002               	movlw	2	; select bank4/5
 14560  09A9  0087               	movwf	7
 14561  09AA  085E               	movf	??_setRF_DimmerLights,w
 14562  09AB  0081               	movwf	1
 14563                           
 14564                           ;RF_Control_B1.c: 422: product->Data[9]=product->Data[20 + lights];
 14565  09AC  0861               	movf	setRF_DimmerLights@lights,w
 14566  09AD  3E14               	addlw	20
 14567  09AE  076E               	addwf	_product,w
 14568  09AF  00DE               	movwf	??_setRF_DimmerLights
 14569  09B0  085E               	movf	??_setRF_DimmerLights,w
 14570  09B1  0086               	movwf	6
 14571  09B2  3002               	movlw	2	; select bank4/5
 14572  09B3  0087               	movwf	7
 14573  09B4  0801               	movf	1,w
 14574  09B5  00DF               	movwf	??_setRF_DimmerLights+1
 14575  09B6  086E               	movf	_product,w
 14576  09B7  3E09               	addlw	9
 14577  09B8  0086               	movwf	6
 14578  09B9  3002               	movlw	2	; select bank4/5
 14579  09BA  0087               	movwf	7
 14580  09BB  085F               	movf	??_setRF_DimmerLights+1,w
 14581  09BC  0081               	movwf	1
 14582                           
 14583                           ;RF_Control_B1.c: 423: product->Data[17]=product->Data[26 + lights];
 14584  09BD  0861               	movf	setRF_DimmerLights@lights,w
 14585  09BE  3E1A               	addlw	26
 14586  09BF  076E               	addwf	_product,w
 14587  09C0  00DE               	movwf	??_setRF_DimmerLights
 14588  09C1  085E               	movf	??_setRF_DimmerLights,w
 14589  09C2  0086               	movwf	6
 14590  09C3  3002               	movlw	2	; select bank4/5
 14591  09C4  0087               	movwf	7
 14592  09C5  0801               	movf	1,w
 14593  09C6  00DF               	movwf	??_setRF_DimmerLights+1
 14594  09C7  086E               	movf	_product,w
 14595  09C8  3E11               	addlw	17
 14596  09C9  0086               	movwf	6
 14597  09CA  3002               	movlw	2	; select bank4/5
 14598  09CB  0087               	movwf	7
 14599  09CC  085F               	movf	??_setRF_DimmerLights+1,w
 14600  09CD  0081               	movwf	1
 14601                           
 14602                           ;RF_Control_B1.c: 424: if (on == 1) {
 14603  09CE  085D               	movf	setRF_DimmerLights@on,w
 14604  09CF  3A01               	xorlw	1
 14605  09D0  1D03               	skipz
 14606  09D1  29E2               	goto	l5969
 14607                           
 14608                           ;RF_Control_B1.c: 425: product->Data[15]=(product->Data[15] | status);
 14609  09D2  086E               	movf	_product,w
 14610  09D3  3E0F               	addlw	15
 14611  09D4  0086               	movwf	6
 14612  09D5  3002               	movlw	2	; select bank4/5
 14613  09D6  0087               	movwf	7
 14614  09D7  0801               	movf	1,w
 14615  09D8  0460               	iorwf	setRF_DimmerLights@status,w
 14616  09D9  00DE               	movwf	??_setRF_DimmerLights
 14617  09DA  086E               	movf	_product,w
 14618  09DB  3E0F               	addlw	15
 14619  09DC  0086               	movwf	6
 14620  09DD  3002               	movlw	2	; select bank4/5
 14621  09DE  0087               	movwf	7
 14622  09DF  085E               	movf	??_setRF_DimmerLights,w
 14623  09E0  0081               	movwf	1
 14624                           
 14625                           ;RF_Control_B1.c: 426: } else {
 14626  09E1  0008               	return
 14627  09E2                     l5969:	
 14628                           
 14629                           ;RF_Control_B1.c: 427: product->Data[15]=(product->Data[15]&(~status));
 14630  09E2  086E               	movf	_product,w
 14631  09E3  3E0F               	addlw	15
 14632  09E4  0086               	movwf	6
 14633  09E5  3002               	movlw	2	; select bank4/5
 14634  09E6  0087               	movwf	7
 14635  09E7  0960               	comf	setRF_DimmerLights@status,w
 14636  09E8  0501               	andwf	1,w
 14637  09E9  00DE               	movwf	??_setRF_DimmerLights
 14638  09EA  086E               	movf	_product,w
 14639  09EB  3E0F               	addlw	15
 14640  09EC  0086               	movwf	6
 14641  09ED  3002               	movlw	2	; select bank4/5
 14642  09EE  0087               	movwf	7
 14643  09EF  085E               	movf	??_setRF_DimmerLights,w
 14644  09F0  0081               	movwf	1
 14645  09F1  0008               	return
 14646  09F2                     __end_of_setRF_DimmerLights:	
 14647                           
 14648                           	psect	text92
 14649  14A2                     __ptext92:	
 14650 ;; *************** function _setPercentValue *****************
 14651 ;; Defined at:
 14652 ;;		line 768 in file "../src/Dimmer_B1.c"
 14653 ;; Parameters:    Size  Location     Type
 14654 ;;  value           1    wreg     unsigned char 
 14655 ;; Auto vars:     Size  Location     Type
 14656 ;;  value           1   57[BANK0 ] unsigned char 
 14657 ;;  i               3   58[BANK0 ] float 
 14658 ;; Return value:  Size  Location     Type
 14659 ;;                  1    wreg      unsigned char 
 14660 ;; Registers used:
 14661 ;;		wreg, status,2, status,0, pclath, cstack
 14662 ;; Tracked objects:
 14663 ;;		On entry : 0/0
 14664 ;;		On exit  : 0/0
 14665 ;;		Unchanged: 0/0
 14666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14668 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14670 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;Total ram usage:        4 bytes
 14672 ;; Hardware stack levels used:    1
 14673 ;; Hardware stack levels required when called:    7
 14674 ;; This function calls:
 14675 ;;		___awtoft
 14676 ;;		___ftdiv
 14677 ;;		___fttol
 14678 ;; This function is called by:
 14679 ;;		_Flash_Memory_Initialization
 14680 ;;		_setRF_DimmerLights
 14681 ;; This function uses a non-reentrant model
 14682 ;;
 14683                           
 14684                           
 14685                           ;psect for function _setPercentValue
 14686  14A2                     _setPercentValue:	
 14687                           
 14688                           ;incstack = 0
 14689                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14690                           ;setPercentValue@value stored from wreg
 14691  14A2  0020               	movlb	0	; select bank0
 14692  14A3  00D9               	movwf	setPercentValue@value
 14693                           
 14694                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 14695  14A4  3000               	movlw	0
 14696  14A5  00DA               	movwf	setPercentValue@i
 14697  14A6  30E0               	movlw	224
 14698  14A7  00DB               	movwf	setPercentValue@i+1
 14699  14A8  3041               	movlw	65
 14700  14A9  00DC               	movwf	setPercentValue@i+2
 14701                           
 14702                           ;Dimmer_B1.c: 771: i /= 100;
 14703  14AA  3000               	movlw	0
 14704  14AB  00AE               	movwf	___ftdiv@f2
 14705  14AC  30C8               	movlw	200
 14706  14AD  00AF               	movwf	___ftdiv@f2+1
 14707  14AE  3042               	movlw	66
 14708  14AF  00B0               	movwf	___ftdiv@f2+2
 14709  14B0  085A               	movf	setPercentValue@i,w
 14710  14B1  00B1               	movwf	___ftdiv@f1
 14711  14B2  085B               	movf	setPercentValue@i+1,w
 14712  14B3  00B2               	movwf	___ftdiv@f1+1
 14713  14B4  085C               	movf	setPercentValue@i+2,w
 14714  14B5  00B3               	movwf	___ftdiv@f1+2
 14715  14B6  318F  2757  3194   	fcall	___ftdiv
 14716  14B9  0020               	movlb	0	; select bank0
 14717  14BA  082E               	movf	?___ftdiv,w
 14718  14BB  00DA               	movwf	setPercentValue@i
 14719  14BC  082F               	movf	?___ftdiv+1,w
 14720  14BD  00DB               	movwf	setPercentValue@i+1
 14721  14BE  0830               	movf	?___ftdiv+2,w
 14722  14BF  00DC               	movwf	setPercentValue@i+2
 14723                           
 14724                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 14725  14C0  0859               	movf	setPercentValue@value,w
 14726  14C1  3EE0               	addlw	224
 14727  14C2  00A8               	movwf	___awtoft@c
 14728  14C3  30FF               	movlw	255
 14729  14C4  1803               	skipnc
 14730  14C5  3000               	movlw	0
 14731  14C6  00A9               	movwf	___awtoft@c+1
 14732  14C7  3190  20D3  3194   	fcall	___awtoft
 14733  14CA  0020               	movlb	0	; select bank0
 14734  14CB  0828               	movf	?___awtoft,w
 14735  14CC  00B1               	movwf	___ftdiv@f1
 14736  14CD  0829               	movf	?___awtoft+1,w
 14737  14CE  00B2               	movwf	___ftdiv@f1+1
 14738  14CF  082A               	movf	?___awtoft+2,w
 14739  14D0  00B3               	movwf	___ftdiv@f1+2
 14740  14D1  085A               	movf	setPercentValue@i,w
 14741  14D2  00AE               	movwf	___ftdiv@f2
 14742  14D3  085B               	movf	setPercentValue@i+1,w
 14743  14D4  00AF               	movwf	___ftdiv@f2+1
 14744  14D5  085C               	movf	setPercentValue@i+2,w
 14745  14D6  00B0               	movwf	___ftdiv@f2+2
 14746  14D7  318F  2757  3194   	fcall	___ftdiv
 14747  14DA  0020               	movlb	0	; select bank0
 14748  14DB  082E               	movf	?___ftdiv,w
 14749  14DC  00CB               	movwf	___fttol@f1
 14750  14DD  082F               	movf	?___ftdiv+1,w
 14751  14DE  00CC               	movwf	___fttol@f1+1
 14752  14DF  0830               	movf	?___ftdiv+2,w
 14753  14E0  00CD               	movwf	___fttol@f1+2
 14754  14E1  318D  252C         	fcall	___fttol
 14755  14E3  0020               	movlb	0	; select bank0
 14756  14E4  034B               	decf	?___fttol,w
 14757  14E5  3AFF               	xorlw	255
 14758  14E6  3E64               	addlw	100
 14759  14E7  0008               	return
 14760  14E8                     __end_of_setPercentValue:	
 14761                           
 14762                           	psect	text93
 14763  0D2C                     __ptext93:	
 14764 ;; *************** function ___fttol *****************
 14765 ;; Defined at:
 14766 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14767 ;; Parameters:    Size  Location     Type
 14768 ;;  f1              3   43[BANK0 ] float 
 14769 ;; Auto vars:     Size  Location     Type
 14770 ;;  lval            4   52[BANK0 ] unsigned long 
 14771 ;;  exp1            1   56[BANK0 ] unsigned char 
 14772 ;;  sign1           1   51[BANK0 ] unsigned char 
 14773 ;; Return value:  Size  Location     Type
 14774 ;;                  4   43[BANK0 ] long 
 14775 ;; Registers used:
 14776 ;;		wreg, status,2, status,0
 14777 ;; Tracked objects:
 14778 ;;		On entry : 0/0
 14779 ;;		On exit  : 0/0
 14780 ;;		Unchanged: 0/0
 14781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14782 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;Total ram usage:       14 bytes
 14787 ;; Hardware stack levels used:    1
 14788 ;; Hardware stack levels required when called:    5
 14789 ;; This function calls:
 14790 ;;		Nothing
 14791 ;; This function is called by:
 14792 ;;		_getPercentValue
 14793 ;;		_setPercentValue
 14794 ;; This function uses a non-reentrant model
 14795 ;;
 14796                           
 14797                           
 14798                           ;psect for function ___fttol
 14799  0D2C                     ___fttol:	
 14800                           
 14801                           ;incstack = 0
 14802                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14803  0D2C  0020               	movlb	0	; select bank0
 14804  0D2D  084B               	movf	___fttol@f1,w
 14805  0D2E  00CF               	movwf	??___fttol
 14806  0D2F  084C               	movf	___fttol@f1+1,w
 14807  0D30  00D0               	movwf	??___fttol+1
 14808  0D31  084D               	movf	___fttol@f1+2,w
 14809  0D32  00D1               	movwf	??___fttol+2
 14810  0D33  1003               	clrc
 14811  0D34  0D50               	rlf	??___fttol+1,w
 14812  0D35  0D51               	rlf	??___fttol+2,w
 14813  0D36  00D2               	movwf	??___fttol+3
 14814  0D37  0852               	movf	??___fttol+3,w
 14815  0D38  00D8               	movwf	___fttol@exp1
 14816  0D39  08D8               	movf	___fttol@exp1,f
 14817  0D3A  1D03               	skipz
 14818  0D3B  2D45               	goto	l5749
 14819  0D3C  3000               	movlw	0
 14820  0D3D  00CE               	movwf	?___fttol+3
 14821  0D3E  3000               	movlw	0
 14822  0D3F  00CD               	movwf	?___fttol+2
 14823  0D40  3000               	movlw	0
 14824  0D41  00CC               	movwf	?___fttol+1
 14825  0D42  3000               	movlw	0
 14826  0D43  00CB               	movwf	?___fttol
 14827  0D44  0008               	return
 14828  0D45                     l5749:	
 14829  0D45  084B               	movf	___fttol@f1,w
 14830  0D46  00CF               	movwf	??___fttol
 14831  0D47  084C               	movf	___fttol@f1+1,w
 14832  0D48  00D0               	movwf	??___fttol+1
 14833  0D49  084D               	movf	___fttol@f1+2,w
 14834  0D4A  00D1               	movwf	??___fttol+2
 14835  0D4B  3017               	movlw	23
 14836  0D4C                     u4525:	
 14837  0D4C  36D1               	lsrf	??___fttol+2,f
 14838  0D4D  0CD0               	rrf	??___fttol+1,f
 14839  0D4E  0CCF               	rrf	??___fttol,f
 14840  0D4F  0B89               	decfsz	9,f
 14841  0D50  2D4C               	goto	u4525
 14842  0D51  084F               	movf	??___fttol,w
 14843  0D52  00D2               	movwf	??___fttol+3
 14844  0D53  0852               	movf	??___fttol+3,w
 14845  0D54  00D3               	movwf	___fttol@sign1
 14846  0D55  17CC               	bsf	___fttol@f1+1,7
 14847  0D56  30FF               	movlw	255
 14848  0D57  05CB               	andwf	___fttol@f1,f
 14849  0D58  30FF               	movlw	255
 14850  0D59  05CC               	andwf	___fttol@f1+1,f
 14851  0D5A  3000               	movlw	0
 14852  0D5B  05CD               	andwf	___fttol@f1+2,f
 14853  0D5C  084B               	movf	___fttol@f1,w
 14854  0D5D  00D4               	movwf	___fttol@lval
 14855  0D5E  084C               	movf	___fttol@f1+1,w
 14856  0D5F  00D5               	movwf	___fttol@lval+1
 14857  0D60  084D               	movf	___fttol@f1+2,w
 14858  0D61  00D6               	movwf	___fttol@lval+2
 14859  0D62  01D7               	clrf	___fttol@lval+3
 14860  0D63  308E               	movlw	142
 14861  0D64  02D8               	subwf	___fttol@exp1,f
 14862  0D65  1FD8               	btfss	___fttol@exp1,7
 14863  0D66  2D83               	goto	l5769
 14864  0D67  0858               	movf	___fttol@exp1,w
 14865  0D68  3A80               	xorlw	128
 14866  0D69  3E8F               	addlw	143
 14867  0D6A  1803               	skipnc
 14868  0D6B  2D75               	goto	l5767
 14869  0D6C  3000               	movlw	0
 14870  0D6D  00CE               	movwf	?___fttol+3
 14871  0D6E  3000               	movlw	0
 14872  0D6F  00CD               	movwf	?___fttol+2
 14873  0D70  3000               	movlw	0
 14874  0D71  00CC               	movwf	?___fttol+1
 14875  0D72  3000               	movlw	0
 14876  0D73  00CB               	movwf	?___fttol
 14877  0D74  0008               	return
 14878  0D75                     l5767:	
 14879  0D75  3001               	movlw	1
 14880  0D76                     u4555:	
 14881  0D76  36D7               	lsrf	___fttol@lval+3,f
 14882  0D77  0CD6               	rrf	___fttol@lval+2,f
 14883  0D78  0CD5               	rrf	___fttol@lval+1,f
 14884  0D79  0CD4               	rrf	___fttol@lval,f
 14885  0D7A  0B89               	decfsz	9,f
 14886  0D7B  2D76               	goto	u4555
 14887  0D7C  3001               	movlw	1
 14888  0D7D  00CF               	movwf	??___fttol
 14889  0D7E  084F               	movf	??___fttol,w
 14890  0D7F  07D8               	addwf	___fttol@exp1,f
 14891  0D80  1903               	btfsc	3,2
 14892  0D81  2D9C               	goto	l5779
 14893  0D82  2D75               	goto	l5767
 14894  0D83                     l5769:	
 14895  0D83  3018               	movlw	24
 14896  0D84  0258               	subwf	___fttol@exp1,w
 14897  0D85  1C03               	skipc
 14898  0D86  2D99               	goto	l5777
 14899  0D87  3000               	movlw	0
 14900  0D88  00CE               	movwf	?___fttol+3
 14901  0D89  3000               	movlw	0
 14902  0D8A  00CD               	movwf	?___fttol+2
 14903  0D8B  3000               	movlw	0
 14904  0D8C  00CC               	movwf	?___fttol+1
 14905  0D8D  3000               	movlw	0
 14906  0D8E  00CB               	movwf	?___fttol
 14907  0D8F  0008               	return
 14908  0D90                     l5775:	
 14909  0D90  3001               	movlw	1
 14910  0D91                     u4585:	
 14911  0D91  35D4               	lslf	___fttol@lval,f
 14912  0D92  0DD5               	rlf	___fttol@lval+1,f
 14913  0D93  0DD6               	rlf	___fttol@lval+2,f
 14914  0D94  0DD7               	rlf	___fttol@lval+3,f
 14915  0D95  0B89               	decfsz	9,f
 14916  0D96  2D91               	goto	u4585
 14917  0D97  3001               	movlw	1
 14918  0D98  02D8               	subwf	___fttol@exp1,f
 14919  0D99                     l5777:	
 14920  0D99  08D8               	movf	___fttol@exp1,f
 14921  0D9A  1D03               	skipz
 14922  0D9B  2D90               	goto	l5775
 14923  0D9C                     l5779:	
 14924  0D9C  0853               	movf	___fttol@sign1,w
 14925  0D9D  1903               	btfsc	3,2
 14926  0D9E  2DAA               	goto	l5783
 14927  0D9F  09D4               	comf	___fttol@lval,f
 14928  0DA0  09D5               	comf	___fttol@lval+1,f
 14929  0DA1  09D6               	comf	___fttol@lval+2,f
 14930  0DA2  09D7               	comf	___fttol@lval+3,f
 14931  0DA3  0AD4               	incf	___fttol@lval,f
 14932  0DA4  1903               	skipnz
 14933  0DA5  0AD5               	incf	___fttol@lval+1,f
 14934  0DA6  1903               	skipnz
 14935  0DA7  0AD6               	incf	___fttol@lval+2,f
 14936  0DA8  1903               	skipnz
 14937  0DA9  0AD7               	incf	___fttol@lval+3,f
 14938  0DAA                     l5783:	
 14939  0DAA  0857               	movf	___fttol@lval+3,w
 14940  0DAB  00CE               	movwf	?___fttol+3
 14941  0DAC  0856               	movf	___fttol@lval+2,w
 14942  0DAD  00CD               	movwf	?___fttol+2
 14943  0DAE  0855               	movf	___fttol@lval+1,w
 14944  0DAF  00CC               	movwf	?___fttol+1
 14945  0DB0  0854               	movf	___fttol@lval,w
 14946  0DB1  00CB               	movwf	?___fttol
 14947  0DB2  0008               	return
 14948  0DB3                     __end_of___fttol:	
 14949                           
 14950                           	psect	text94
 14951  0F57                     __ptext94:	
 14952 ;; *************** function ___ftdiv *****************
 14953 ;; Defined at:
 14954 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14955 ;; Parameters:    Size  Location     Type
 14956 ;;  f2              3   14[BANK0 ] float 
 14957 ;;  f1              3   17[BANK0 ] float 
 14958 ;; Auto vars:     Size  Location     Type
 14959 ;;  f3              3   25[BANK0 ] float 
 14960 ;;  sign            1   29[BANK0 ] unsigned char 
 14961 ;;  exp             1   28[BANK0 ] unsigned char 
 14962 ;;  cntr            1   24[BANK0 ] unsigned char 
 14963 ;; Return value:  Size  Location     Type
 14964 ;;                  3   14[BANK0 ] float 
 14965 ;; Registers used:
 14966 ;;		wreg, status,2, status,0, pclath, cstack
 14967 ;; Tracked objects:
 14968 ;;		On entry : 0/0
 14969 ;;		On exit  : 0/0
 14970 ;;		Unchanged: 0/0
 14971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14972 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;Total ram usage:       16 bytes
 14977 ;; Hardware stack levels used:    1
 14978 ;; Hardware stack levels required when called:    6
 14979 ;; This function calls:
 14980 ;;		___ftpack
 14981 ;; This function is called by:
 14982 ;;		_getPercentValue
 14983 ;;		_setPercentValue
 14984 ;; This function uses a non-reentrant model
 14985 ;;
 14986                           
 14987                           
 14988                           ;psect for function ___ftdiv
 14989  0F57                     ___ftdiv:	
 14990                           
 14991                           ;incstack = 0
 14992                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14993  0F57  0020               	movlb	0	; select bank0
 14994  0F58  0831               	movf	___ftdiv@f1,w
 14995  0F59  00B4               	movwf	??___ftdiv
 14996  0F5A  0832               	movf	___ftdiv@f1+1,w
 14997  0F5B  00B5               	movwf	??___ftdiv+1
 14998  0F5C  0833               	movf	___ftdiv@f1+2,w
 14999  0F5D  00B6               	movwf	??___ftdiv+2
 15000  0F5E  1003               	clrc
 15001  0F5F  0D35               	rlf	??___ftdiv+1,w
 15002  0F60  0D36               	rlf	??___ftdiv+2,w
 15003  0F61  00B7               	movwf	??___ftdiv+3
 15004  0F62  0837               	movf	??___ftdiv+3,w
 15005  0F63  00BC               	movwf	___ftdiv@exp
 15006  0F64  08BC               	movf	___ftdiv@exp,f
 15007  0F65  1D03               	skipz
 15008  0F66  2F6E               	goto	l5657
 15009  0F67  3000               	movlw	0
 15010  0F68  00AE               	movwf	?___ftdiv
 15011  0F69  3000               	movlw	0
 15012  0F6A  00AF               	movwf	?___ftdiv+1
 15013  0F6B  3000               	movlw	0
 15014  0F6C  00B0               	movwf	?___ftdiv+2
 15015  0F6D  0008               	return
 15016  0F6E                     l5657:	
 15017  0F6E  082E               	movf	___ftdiv@f2,w
 15018  0F6F  00B4               	movwf	??___ftdiv
 15019  0F70  082F               	movf	___ftdiv@f2+1,w
 15020  0F71  00B5               	movwf	??___ftdiv+1
 15021  0F72  0830               	movf	___ftdiv@f2+2,w
 15022  0F73  00B6               	movwf	??___ftdiv+2
 15023  0F74  1003               	clrc
 15024  0F75  0D35               	rlf	??___ftdiv+1,w
 15025  0F76  0D36               	rlf	??___ftdiv+2,w
 15026  0F77  00B7               	movwf	??___ftdiv+3
 15027  0F78  0837               	movf	??___ftdiv+3,w
 15028  0F79  00BD               	movwf	___ftdiv@sign
 15029  0F7A  08BD               	movf	___ftdiv@sign,f
 15030  0F7B  1D03               	skipz
 15031  0F7C  2F84               	goto	l5663
 15032  0F7D  3000               	movlw	0
 15033  0F7E  00AE               	movwf	?___ftdiv
 15034  0F7F  3000               	movlw	0
 15035  0F80  00AF               	movwf	?___ftdiv+1
 15036  0F81  3000               	movlw	0
 15037  0F82  00B0               	movwf	?___ftdiv+2
 15038  0F83  0008               	return
 15039  0F84                     l5663:	
 15040  0F84  3000               	movlw	0
 15041  0F85  00B9               	movwf	___ftdiv@f3
 15042  0F86  3000               	movlw	0
 15043  0F87  00BA               	movwf	___ftdiv@f3+1
 15044  0F88  3000               	movlw	0
 15045  0F89  00BB               	movwf	___ftdiv@f3+2
 15046  0F8A  3089               	movlw	137
 15047  0F8B  073D               	addwf	___ftdiv@sign,w
 15048  0F8C  00B4               	movwf	??___ftdiv
 15049  0F8D  0834               	movf	??___ftdiv,w
 15050  0F8E  02BC               	subwf	___ftdiv@exp,f
 15051  0F8F  0831               	movf	___ftdiv@f1,w
 15052  0F90  00B4               	movwf	??___ftdiv
 15053  0F91  0832               	movf	___ftdiv@f1+1,w
 15054  0F92  00B5               	movwf	??___ftdiv+1
 15055  0F93  0833               	movf	___ftdiv@f1+2,w
 15056  0F94  00B6               	movwf	??___ftdiv+2
 15057  0F95  3010               	movlw	16
 15058  0F96                     u4335:	
 15059  0F96  36B6               	lsrf	??___ftdiv+2,f
 15060  0F97  0CB5               	rrf	??___ftdiv+1,f
 15061  0F98  0CB4               	rrf	??___ftdiv,f
 15062  0F99  0B89               	decfsz	9,f
 15063  0F9A  2F96               	goto	u4335
 15064  0F9B  0834               	movf	??___ftdiv,w
 15065  0F9C  00B7               	movwf	??___ftdiv+3
 15066  0F9D  0837               	movf	??___ftdiv+3,w
 15067  0F9E  00BD               	movwf	___ftdiv@sign
 15068  0F9F  082E               	movf	___ftdiv@f2,w
 15069  0FA0  00B4               	movwf	??___ftdiv
 15070  0FA1  082F               	movf	___ftdiv@f2+1,w
 15071  0FA2  00B5               	movwf	??___ftdiv+1
 15072  0FA3  0830               	movf	___ftdiv@f2+2,w
 15073  0FA4  00B6               	movwf	??___ftdiv+2
 15074  0FA5  3010               	movlw	16
 15075  0FA6                     u4345:	
 15076  0FA6  36B6               	lsrf	??___ftdiv+2,f
 15077  0FA7  0CB5               	rrf	??___ftdiv+1,f
 15078  0FA8  0CB4               	rrf	??___ftdiv,f
 15079  0FA9  0B89               	decfsz	9,f
 15080  0FAA  2FA6               	goto	u4345
 15081  0FAB  0834               	movf	??___ftdiv,w
 15082  0FAC  00B7               	movwf	??___ftdiv+3
 15083  0FAD  0837               	movf	??___ftdiv+3,w
 15084  0FAE  06BD               	xorwf	___ftdiv@sign,f
 15085  0FAF  3080               	movlw	128
 15086  0FB0  00B4               	movwf	??___ftdiv
 15087  0FB1  0834               	movf	??___ftdiv,w
 15088  0FB2  05BD               	andwf	___ftdiv@sign,f
 15089  0FB3  17B2               	bsf	___ftdiv@f1+1,7
 15090  0FB4  30FF               	movlw	255
 15091  0FB5  05B1               	andwf	___ftdiv@f1,f
 15092  0FB6  30FF               	movlw	255
 15093  0FB7  05B2               	andwf	___ftdiv@f1+1,f
 15094  0FB8  3000               	movlw	0
 15095  0FB9  05B3               	andwf	___ftdiv@f1+2,f
 15096  0FBA  17AF               	bsf	___ftdiv@f2+1,7
 15097  0FBB  30FF               	movlw	255
 15098  0FBC  05AE               	andwf	___ftdiv@f2,f
 15099  0FBD  30FF               	movlw	255
 15100  0FBE  05AF               	andwf	___ftdiv@f2+1,f
 15101  0FBF  3000               	movlw	0
 15102  0FC0  05B0               	andwf	___ftdiv@f2+2,f
 15103  0FC1  3018               	movlw	24
 15104  0FC2  00B4               	movwf	??___ftdiv
 15105  0FC3  0834               	movf	??___ftdiv,w
 15106  0FC4  00B8               	movwf	___ftdiv@cntr
 15107  0FC5                     l5677:	
 15108  0FC5  3001               	movlw	1
 15109  0FC6                     u4355:	
 15110  0FC6  35B9               	lslf	___ftdiv@f3,f
 15111  0FC7  0DBA               	rlf	___ftdiv@f3+1,f
 15112  0FC8  0DBB               	rlf	___ftdiv@f3+2,f
 15113  0FC9  0B89               	decfsz	9,f
 15114  0FCA  2FC6               	goto	u4355
 15115  0FCB  0830               	movf	___ftdiv@f2+2,w
 15116  0FCC  0233               	subwf	___ftdiv@f1+2,w
 15117  0FCD  1D03               	skipz
 15118  0FCE  2FD5               	goto	u4365
 15119  0FCF  082F               	movf	___ftdiv@f2+1,w
 15120  0FD0  0232               	subwf	___ftdiv@f1+1,w
 15121  0FD1  1D03               	skipz
 15122  0FD2  2FD5               	goto	u4365
 15123  0FD3  082E               	movf	___ftdiv@f2,w
 15124  0FD4  0231               	subwf	___ftdiv@f1,w
 15125  0FD5                     u4365:	
 15126  0FD5  1C03               	skipc
 15127  0FD6  2FDE               	goto	l5685
 15128  0FD7  082E               	movf	___ftdiv@f2,w
 15129  0FD8  02B1               	subwf	___ftdiv@f1,f
 15130  0FD9  082F               	movf	___ftdiv@f2+1,w
 15131  0FDA  3BB2               	subwfb	___ftdiv@f1+1,f
 15132  0FDB  0830               	movf	___ftdiv@f2+2,w
 15133  0FDC  3BB3               	subwfb	___ftdiv@f1+2,f
 15134  0FDD  1439               	bsf	___ftdiv@f3,0
 15135  0FDE                     l5685:	
 15136  0FDE  3001               	movlw	1
 15137  0FDF                     u4375:	
 15138  0FDF  35B1               	lslf	___ftdiv@f1,f
 15139  0FE0  0DB2               	rlf	___ftdiv@f1+1,f
 15140  0FE1  0DB3               	rlf	___ftdiv@f1+2,f
 15141  0FE2  0B89               	decfsz	9,f
 15142  0FE3  2FDF               	goto	u4375
 15143  0FE4  3001               	movlw	1
 15144  0FE5  02B8               	subwf	___ftdiv@cntr,f
 15145  0FE6  1D03               	btfss	3,2
 15146  0FE7  2FC5               	goto	l5677
 15147  0FE8  0839               	movf	___ftdiv@f3,w
 15148  0FE9  00A0               	movwf	___ftpack@arg
 15149  0FEA  083A               	movf	___ftdiv@f3+1,w
 15150  0FEB  00A1               	movwf	___ftpack@arg+1
 15151  0FEC  083B               	movf	___ftdiv@f3+2,w
 15152  0FED  00A2               	movwf	___ftpack@arg+2
 15153  0FEE  083C               	movf	___ftdiv@exp,w
 15154  0FEF  00B4               	movwf	??___ftdiv
 15155  0FF0  0834               	movf	??___ftdiv,w
 15156  0FF1  00A3               	movwf	___ftpack@exp
 15157  0FF2  083D               	movf	___ftdiv@sign,w
 15158  0FF3  00B5               	movwf	??___ftdiv+1
 15159  0FF4  0835               	movf	??___ftdiv+1,w
 15160  0FF5  00A4               	movwf	___ftpack@sign
 15161  0FF6  3188  20BF         	fcall	___ftpack
 15162  0FF8  0020               	movlb	0	; select bank0
 15163  0FF9  0820               	movf	?___ftpack,w
 15164  0FFA  00AE               	movwf	?___ftdiv
 15165  0FFB  0821               	movf	?___ftpack+1,w
 15166  0FFC  00AF               	movwf	?___ftdiv+1
 15167  0FFD  0822               	movf	?___ftpack+2,w
 15168  0FFE  00B0               	movwf	?___ftdiv+2
 15169  0FFF  0008               	return
 15170  1000                     __end_of___ftdiv:	
 15171                           
 15172                           	psect	text95
 15173  10D3                     __ptext95:	
 15174 ;; *************** function ___awtoft *****************
 15175 ;; Defined at:
 15176 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15177 ;; Parameters:    Size  Location     Type
 15178 ;;  c               2    8[BANK0 ] int 
 15179 ;; Auto vars:     Size  Location     Type
 15180 ;;  sign            1   13[BANK0 ] unsigned char 
 15181 ;; Return value:  Size  Location     Type
 15182 ;;                  3    8[BANK0 ] float 
 15183 ;; Registers used:
 15184 ;;		wreg, status,2, status,0, pclath, cstack
 15185 ;; Tracked objects:
 15186 ;;		On entry : 0/0
 15187 ;;		On exit  : 0/0
 15188 ;;		Unchanged: 0/0
 15189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15190 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15192 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15193 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15194 ;;Total ram usage:        6 bytes
 15195 ;; Hardware stack levels used:    1
 15196 ;; Hardware stack levels required when called:    6
 15197 ;; This function calls:
 15198 ;;		___ftpack
 15199 ;; This function is called by:
 15200 ;;		_getPercentValue
 15201 ;;		_setPercentValue
 15202 ;; This function uses a non-reentrant model
 15203 ;;
 15204                           
 15205                           
 15206                           ;psect for function ___awtoft
 15207  10D3                     ___awtoft:	
 15208                           
 15209                           ;incstack = 0
 15210                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15211  10D3  0020               	movlb	0	; select bank0
 15212  10D4  01AD               	clrf	___awtoft@sign
 15213  10D5  1FA9               	btfss	___awtoft@c+1,7
 15214  10D6  28DE               	goto	l5575
 15215  10D7  09A8               	comf	___awtoft@c,f
 15216  10D8  09A9               	comf	___awtoft@c+1,f
 15217  10D9  0AA8               	incf	___awtoft@c,f
 15218  10DA  1903               	skipnz
 15219  10DB  0AA9               	incf	___awtoft@c+1,f
 15220  10DC  01AD               	clrf	___awtoft@sign
 15221  10DD  0AAD               	incf	___awtoft@sign,f
 15222  10DE                     l5575:	
 15223  10DE  0828               	movf	___awtoft@c,w
 15224  10DF  00A0               	movwf	___ftpack@arg
 15225  10E0  0829               	movf	___awtoft@c+1,w
 15226  10E1  00A1               	movwf	___ftpack@arg+1
 15227  10E2  01A2               	clrf	___ftpack@arg+2
 15228  10E3  308E               	movlw	142
 15229  10E4  00AB               	movwf	??___awtoft
 15230  10E5  082B               	movf	??___awtoft,w
 15231  10E6  00A3               	movwf	___ftpack@exp
 15232  10E7  082D               	movf	___awtoft@sign,w
 15233  10E8  00AC               	movwf	??___awtoft+1
 15234  10E9  082C               	movf	??___awtoft+1,w
 15235  10EA  00A4               	movwf	___ftpack@sign
 15236  10EB  3188  20BF         	fcall	___ftpack
 15237  10ED  0020               	movlb	0	; select bank0
 15238  10EE  0820               	movf	?___ftpack,w
 15239  10EF  00A8               	movwf	?___awtoft
 15240  10F0  0821               	movf	?___ftpack+1,w
 15241  10F1  00A9               	movwf	?___awtoft+1
 15242  10F2  0822               	movf	?___ftpack+2,w
 15243  10F3  00AA               	movwf	?___awtoft+2
 15244  10F4  0008               	return
 15245  10F5                     __end_of___awtoft:	
 15246                           
 15247                           	psect	text96
 15248  08BF                     __ptext96:	
 15249 ;; *************** function ___ftpack *****************
 15250 ;; Defined at:
 15251 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15252 ;; Parameters:    Size  Location     Type
 15253 ;;  arg             3    0[BANK0 ] unsigned um
 15254 ;;  exp             1    3[BANK0 ] unsigned char 
 15255 ;;  sign            1    4[BANK0 ] unsigned char 
 15256 ;; Auto vars:     Size  Location     Type
 15257 ;;		None
 15258 ;; Return value:  Size  Location     Type
 15259 ;;                  3    0[BANK0 ] float 
 15260 ;; Registers used:
 15261 ;;		wreg, status,2, status,0
 15262 ;; Tracked objects:
 15263 ;;		On entry : 0/0
 15264 ;;		On exit  : 0/0
 15265 ;;		Unchanged: 0/0
 15266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15267 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;Total ram usage:        8 bytes
 15272 ;; Hardware stack levels used:    1
 15273 ;; Hardware stack levels required when called:    5
 15274 ;; This function calls:
 15275 ;;		Nothing
 15276 ;; This function is called by:
 15277 ;;		___awtoft
 15278 ;;		___ftadd
 15279 ;;		___ftdiv
 15280 ;;		___ftmul
 15281 ;; This function uses a non-reentrant model
 15282 ;;
 15283                           
 15284                           
 15285                           ;psect for function ___ftpack
 15286  08BF                     ___ftpack:	
 15287                           
 15288                           ;incstack = 0
 15289                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15290  08BF  0020               	movlb	0	; select bank0
 15291  08C0  0823               	movf	___ftpack@exp,w
 15292  08C1  1903               	btfsc	3,2
 15293  08C2  28C8               	goto	l5541
 15294  08C3  0822               	movf	___ftpack@arg+2,w
 15295  08C4  0421               	iorwf	___ftpack@arg+1,w
 15296  08C5  0420               	iorwf	___ftpack@arg,w
 15297  08C6  1D03               	skipz
 15298  08C7  28D9               	goto	l5547
 15299  08C8                     l5541:	
 15300  08C8  3000               	movlw	0
 15301  08C9  00A0               	movwf	?___ftpack
 15302  08CA  3000               	movlw	0
 15303  08CB  00A1               	movwf	?___ftpack+1
 15304  08CC  3000               	movlw	0
 15305  08CD  00A2               	movwf	?___ftpack+2
 15306  08CE  0008               	return
 15307  08CF                     l5545:	
 15308  08CF  3001               	movlw	1
 15309  08D0  00A5               	movwf	??___ftpack
 15310  08D1  0825               	movf	??___ftpack,w
 15311  08D2  07A3               	addwf	___ftpack@exp,f
 15312  08D3  3001               	movlw	1
 15313  08D4                     u3985:	
 15314  08D4  36A2               	lsrf	___ftpack@arg+2,f
 15315  08D5  0CA1               	rrf	___ftpack@arg+1,f
 15316  08D6  0CA0               	rrf	___ftpack@arg,f
 15317  08D7  0B89               	decfsz	9,f
 15318  08D8  28D4               	goto	u3985
 15319  08D9                     l5547:	
 15320  08D9  30FE               	movlw	254
 15321  08DA  0522               	andwf	___ftpack@arg+2,w
 15322  08DB  1903               	btfsc	3,2
 15323  08DC  28F2               	goto	l2869
 15324  08DD  28CF               	goto	l5545
 15325  08DE                     l5549:	
 15326  08DE  3001               	movlw	1
 15327  08DF  00A5               	movwf	??___ftpack
 15328  08E0  0825               	movf	??___ftpack,w
 15329  08E1  07A3               	addwf	___ftpack@exp,f
 15330  08E2  3001               	movlw	1
 15331  08E3  07A0               	addwf	___ftpack@arg,f
 15332  08E4  3000               	movlw	0
 15333  08E5  1803               	skipnc
 15334  08E6  3001               	movlw	1
 15335  08E7  07A1               	addwf	___ftpack@arg+1,f
 15336  08E8  3000               	movlw	0
 15337  08E9  1803               	skipnc
 15338  08EA  3001               	movlw	1
 15339  08EB  07A2               	addwf	___ftpack@arg+2,f
 15340  08EC  3001               	movlw	1
 15341  08ED                     u4005:	
 15342  08ED  36A2               	lsrf	___ftpack@arg+2,f
 15343  08EE  0CA1               	rrf	___ftpack@arg+1,f
 15344  08EF  0CA0               	rrf	___ftpack@arg,f
 15345  08F0  0B89               	decfsz	9,f
 15346  08F1  28ED               	goto	u4005
 15347  08F2                     l2869:	
 15348  08F2  30FF               	movlw	255
 15349  08F3  0522               	andwf	___ftpack@arg+2,w
 15350  08F4  1903               	btfsc	3,2
 15351  08F5  28FF               	goto	l5557
 15352  08F6  28DE               	goto	l5549
 15353  08F7                     l5555:	
 15354  08F7  3001               	movlw	1
 15355  08F8  02A3               	subwf	___ftpack@exp,f
 15356  08F9  3001               	movlw	1
 15357  08FA                     u4025:	
 15358  08FA  35A0               	lslf	___ftpack@arg,f
 15359  08FB  0DA1               	rlf	___ftpack@arg+1,f
 15360  08FC  0DA2               	rlf	___ftpack@arg+2,f
 15361  08FD  0B89               	decfsz	9,f
 15362  08FE  28FA               	goto	u4025
 15363  08FF                     l5557:	
 15364  08FF  1FA1               	btfss	___ftpack@arg+1,7
 15365  0900  28F7               	goto	l5555
 15366  0901  1823               	btfsc	___ftpack@exp,0
 15367  0902  2909               	goto	l2875
 15368  0903  30FF               	movlw	255
 15369  0904  05A0               	andwf	___ftpack@arg,f
 15370  0905  307F               	movlw	127
 15371  0906  05A1               	andwf	___ftpack@arg+1,f
 15372  0907  30FF               	movlw	255
 15373  0908  05A2               	andwf	___ftpack@arg+2,f
 15374  0909                     l2875:	
 15375  0909  1003               	clrc
 15376  090A  0CA3               	rrf	___ftpack@exp,f
 15377  090B  0823               	movf	___ftpack@exp,w
 15378  090C  00A5               	movwf	??___ftpack
 15379  090D  01A6               	clrf	??___ftpack+1
 15380  090E  01A7               	clrf	??___ftpack+2
 15381  090F  3010               	movlw	16
 15382  0910                     u4055:	
 15383  0910  35A5               	lslf	??___ftpack,f
 15384  0911  0DA6               	rlf	??___ftpack+1,f
 15385  0912  0DA7               	rlf	??___ftpack+2,f
 15386  0913  0B89               	decfsz	9,f
 15387  0914  2910               	goto	u4055
 15388  0915  0825               	movf	??___ftpack,w
 15389  0916  04A0               	iorwf	___ftpack@arg,f
 15390  0917  0826               	movf	??___ftpack+1,w
 15391  0918  04A1               	iorwf	___ftpack@arg+1,f
 15392  0919  0827               	movf	??___ftpack+2,w
 15393  091A  04A2               	iorwf	___ftpack@arg+2,f
 15394  091B  0824               	movf	___ftpack@sign,w
 15395  091C  1903               	btfsc	3,2
 15396  091D  0008               	return
 15397  091E  17A2               	bsf	___ftpack@arg+2,7
 15398  091F  0008               	return
 15399  0920                     __end_of___ftpack:	
 15400                           
 15401                           	psect	text97
 15402  1CA9                     __ptext97:	
 15403 ;; *************** function _setRFSW_Status *****************
 15404 ;; Defined at:
 15405 ;;		line 394 in file "../src/RF_Control_B1.c"
 15406 ;; Parameters:    Size  Location     Type
 15407 ;;  sw              1    wreg     unsigned char 
 15408 ;;  command         1    2[BANK0 ] unsigned char 
 15409 ;; Auto vars:     Size  Location     Type
 15410 ;;  sw              1    3[BANK0 ] unsigned char 
 15411 ;; Return value:  Size  Location     Type
 15412 ;;		None               void
 15413 ;; Registers used:
 15414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15415 ;; Tracked objects:
 15416 ;;		On entry : 0/0
 15417 ;;		On exit  : 0/0
 15418 ;;		Unchanged: 0/0
 15419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15420 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15424 ;;Total ram usage:        2 bytes
 15425 ;; Hardware stack levels used:    1
 15426 ;; Hardware stack levels required when called:    6
 15427 ;; This function calls:
 15428 ;;		_RfSWPointSelect
 15429 ;; This function is called by:
 15430 ;;		_DlyOff_Main
 15431 ;;		_setDimmerLights_ERROR
 15432 ;;		_setControl_Lights_Table
 15433 ;;		_Sw_DimmerOnFunc
 15434 ;;		_Sw_DimmerAdjFunc
 15435 ;; This function uses a non-reentrant model
 15436 ;;
 15437                           
 15438                           
 15439                           ;psect for function _setRFSW_Status
 15440  1CA9                     _setRFSW_Status:	
 15441                           
 15442                           ;incstack = 0
 15443                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15444                           ;setRFSW_Status@sw stored from wreg
 15445  1CA9  0020               	movlb	0	; select bank0
 15446  1CAA  00A3               	movwf	setRFSW_Status@sw
 15447                           
 15448                           ;RF_Control_B1.c: 395: RfSWPointSelect(sw);
 15449  1CAB  0823               	movf	setRFSW_Status@sw,w
 15450  1CAC  319E  263B         	fcall	_RfSWPointSelect
 15451                           
 15452                           ;RF_Control_B1.c: 396: RFSW->Status = command;
 15453  1CAE  0021               	movlb	1	; select bank1
 15454  1CAF  0863               	movf	_RFSW^(0+128),w
 15455  1CB0  0086               	movwf	6
 15456  1CB1  0187               	clrf	7
 15457  1CB2  0020               	movlb	0	; select bank0
 15458  1CB3  0822               	movf	setRFSW_Status@command,w
 15459  1CB4  1001               	bcf	1,0
 15460  1CB5  1D03               	skipz
 15461  1CB6  1401               	bsf	1,0
 15462  1CB7  0008               	return
 15463  1CB8                     __end_of_setRFSW_Status:	
 15464                           
 15465                           	psect	text98
 15466  1E3B                     __ptext98:	
 15467 ;; *************** function _RfSWPointSelect *****************
 15468 ;; Defined at:
 15469 ;;		line 329 in file "../src/RF_Control_B1.c"
 15470 ;; Parameters:    Size  Location     Type
 15471 ;;  sw              1    wreg     unsigned char 
 15472 ;; Auto vars:     Size  Location     Type
 15473 ;;  sw              1    1[BANK0 ] unsigned char 
 15474 ;; Return value:  Size  Location     Type
 15475 ;;		None               void
 15476 ;; Registers used:
 15477 ;;		wreg
 15478 ;; Tracked objects:
 15479 ;;		On entry : 0/0
 15480 ;;		On exit  : 0/0
 15481 ;;		Unchanged: 0/0
 15482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15486 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15487 ;;Total ram usage:        2 bytes
 15488 ;; Hardware stack levels used:    1
 15489 ;; Hardware stack levels required when called:    5
 15490 ;; This function calls:
 15491 ;;		Nothing
 15492 ;; This function is called by:
 15493 ;;		_setRFSW_Control
 15494 ;;		_setRFSW_AdjControl
 15495 ;;		_setRFSW_Status
 15496 ;; This function uses a non-reentrant model
 15497 ;;
 15498                           
 15499                           
 15500                           ;psect for function _RfSWPointSelect
 15501  1E3B                     _RfSWPointSelect:	
 15502                           
 15503                           ;incstack = 0
 15504                           ; Regs used in _RfSWPointSelect: [wreg]
 15505                           ;RfSWPointSelect@sw stored from wreg
 15506  1E3B  0020               	movlb	0	; select bank0
 15507  1E3C  00A1               	movwf	RfSWPointSelect@sw
 15508                           
 15509                           ;RF_Control_B1.c: 331: if (sw == 1) {
 15510  1E3D  0821               	movf	RfSWPointSelect@sw,w
 15511  1E3E  3A01               	xorlw	1
 15512  1E3F  1D03               	skipz
 15513  1E40  2E46               	goto	l2197
 15514                           
 15515                           ;RF_Control_B1.c: 332: RFSW = &RFSW1;
 15516  1E41  30ED               	movlw	_RFSW1& (0+255)
 15517  1E42  00A0               	movwf	??_RfSWPointSelect
 15518  1E43  0820               	movf	??_RfSWPointSelect,w
 15519  1E44  0021               	movlb	1	; select bank1
 15520  1E45  00E3               	movwf	_RFSW^(0+128)
 15521  1E46                     l2197:	
 15522                           
 15523                           ;RF_Control_B1.c: 333: }
 15524                           ;RF_Control_B1.c: 336: if (sw == 2) {
 15525  1E46  0020               	movlb	0	; select bank0
 15526  1E47  0821               	movf	RfSWPointSelect@sw,w
 15527  1E48  3A02               	xorlw	2
 15528  1E49  1D03               	skipz
 15529  1E4A  0008               	return
 15530                           
 15531                           ;RF_Control_B1.c: 337: RFSW = &RFSW2;
 15532  1E4B  30EE               	movlw	_RFSW2& (0+255)
 15533  1E4C  00A0               	movwf	??_RfSWPointSelect
 15534  1E4D  0820               	movf	??_RfSWPointSelect,w
 15535  1E4E  0021               	movlb	1	; select bank1
 15536  1E4F  00E3               	movwf	_RFSW^(0+128)
 15537  1E50  0008               	return
 15538  1E51                     __end_of_RfSWPointSelect:	
 15539                           
 15540                           	psect	text99
 15541  1D04                     __ptext99:	
 15542 ;; *************** function _setDimmerLights_Trigger *****************
 15543 ;; Defined at:
 15544 ;;		line 705 in file "../src/Dimmer_B1.c"
 15545 ;; Parameters:    Size  Location     Type
 15546 ;;  lights          1    wreg     unsigned char 
 15547 ;;  command         1    2[BANK0 ] unsigned char 
 15548 ;; Auto vars:     Size  Location     Type
 15549 ;;  lights          1    3[BANK0 ] unsigned char 
 15550 ;; Return value:  Size  Location     Type
 15551 ;;		None               void
 15552 ;; Registers used:
 15553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15554 ;; Tracked objects:
 15555 ;;		On entry : 0/0
 15556 ;;		On exit  : 0/0
 15557 ;;		Unchanged: 0/0
 15558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15559 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15562 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15563 ;;Total ram usage:        2 bytes
 15564 ;; Hardware stack levels used:    1
 15565 ;; Hardware stack levels required when called:    6
 15566 ;; This function calls:
 15567 ;;		_DimmerLightsPointSelect
 15568 ;; This function is called by:
 15569 ;;		_DlyOff_Main
 15570 ;;		_setRFSW_Control
 15571 ;;		_Sw_DimmerOnFunc
 15572 ;;		_Sw_DimmerOffFunc
 15573 ;; This function uses a non-reentrant model
 15574 ;;
 15575                           
 15576                           
 15577                           ;psect for function _setDimmerLights_Trigger
 15578  1D04                     _setDimmerLights_Trigger:	
 15579                           
 15580                           ;incstack = 0
 15581                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15582                           ;setDimmerLights_Trigger@lights stored from wreg
 15583  1D04  0020               	movlb	0	; select bank0
 15584  1D05  00A3               	movwf	setDimmerLights_Trigger@lights
 15585                           
 15586                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 15587  1D06  0823               	movf	setDimmerLights_Trigger@lights,w
 15588  1D07  319D  25AD         	fcall	_DimmerLightsPointSelect
 15589                           
 15590                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
 15591  1D09  0879               	movf	_DimmerLights,w
 15592  1D0A  3E08               	addlw	8
 15593  1D0B  0086               	movwf	6
 15594  1D0C  3001               	movlw	1	; select bank2/3
 15595  1D0D  0087               	movwf	7
 15596  1D0E  0020               	movlb	0	; select bank0
 15597  1D0F  0822               	movf	setDimmerLights_Trigger@command,w
 15598  1D10  1101               	bcf	1,2
 15599  1D11  1D03               	skipz
 15600  1D12  1501               	bsf	1,2
 15601  1D13  0008               	return
 15602  1D14                     __end_of_setDimmerLights_Trigger:	
 15603                           
 15604                           	psect	text100
 15605  1CF4                     __ptext100:	
 15606 ;; *************** function _setDimmerLights_Switch *****************
 15607 ;; Defined at:
 15608 ;;		line 693 in file "../src/Dimmer_B1.c"
 15609 ;; Parameters:    Size  Location     Type
 15610 ;;  lights          1    wreg     unsigned char 
 15611 ;;  command         1    2[BANK0 ] unsigned char 
 15612 ;; Auto vars:     Size  Location     Type
 15613 ;;  lights          1    3[BANK0 ] unsigned char 
 15614 ;; Return value:  Size  Location     Type
 15615 ;;		None               void
 15616 ;; Registers used:
 15617 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15618 ;; Tracked objects:
 15619 ;;		On entry : 0/0
 15620 ;;		On exit  : 0/0
 15621 ;;		Unchanged: 0/0
 15622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15623 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15626 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15627 ;;Total ram usage:        2 bytes
 15628 ;; Hardware stack levels used:    1
 15629 ;; Hardware stack levels required when called:    6
 15630 ;; This function calls:
 15631 ;;		_DimmerLightsPointSelect
 15632 ;; This function is called by:
 15633 ;;		_DlyOff_Main
 15634 ;;		_setRFSW_Control
 15635 ;;		_Sw_DimmerOnFunc
 15636 ;;		_Sw_DimmerOffFunc
 15637 ;; This function uses a non-reentrant model
 15638 ;;
 15639                           
 15640                           
 15641                           ;psect for function _setDimmerLights_Switch
 15642  1CF4                     _setDimmerLights_Switch:	
 15643                           
 15644                           ;incstack = 0
 15645                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15646                           ;setDimmerLights_Switch@lights stored from wreg
 15647  1CF4  0020               	movlb	0	; select bank0
 15648  1CF5  00A3               	movwf	setDimmerLights_Switch@lights
 15649                           
 15650                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
 15651  1CF6  0823               	movf	setDimmerLights_Switch@lights,w
 15652  1CF7  319D  25AD         	fcall	_DimmerLightsPointSelect
 15653                           
 15654                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
 15655  1CF9  0879               	movf	_DimmerLights,w
 15656  1CFA  3E08               	addlw	8
 15657  1CFB  0086               	movwf	6
 15658  1CFC  3001               	movlw	1	; select bank2/3
 15659  1CFD  0087               	movwf	7
 15660  1CFE  0020               	movlb	0	; select bank0
 15661  1CFF  0822               	movf	setDimmerLights_Switch@command,w
 15662  1D00  1081               	bcf	1,1
 15663  1D01  1D03               	skipz
 15664  1D02  1481               	bsf	1,1
 15665  1D03  0008               	return
 15666  1D04                     __end_of_setDimmerLights_Switch:	
 15667                           
 15668                           	psect	text101
 15669  1DAD                     __ptext101:	
 15670 ;; *************** function _DimmerLightsPointSelect *****************
 15671 ;; Defined at:
 15672 ;;		line 315 in file "../src/Dimmer_B1.c"
 15673 ;; Parameters:    Size  Location     Type
 15674 ;;  lights          1    wreg     unsigned char 
 15675 ;; Auto vars:     Size  Location     Type
 15676 ;;  lights          1    1[BANK0 ] unsigned char 
 15677 ;; Return value:  Size  Location     Type
 15678 ;;		None               void
 15679 ;; Registers used:
 15680 ;;		wreg
 15681 ;; Tracked objects:
 15682 ;;		On entry : 0/0
 15683 ;;		On exit  : 0/0
 15684 ;;		Unchanged: 0/0
 15685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15689 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15690 ;;Total ram usage:        2 bytes
 15691 ;; Hardware stack levels used:    1
 15692 ;; Hardware stack levels required when called:    5
 15693 ;; This function calls:
 15694 ;;		Nothing
 15695 ;; This function is called by:
 15696 ;;		_setDimmerLights_Initialization
 15697 ;;		_setDimmerLights_Main
 15698 ;;		_setDimmerLights_ERROR
 15699 ;;		_setDimmerLights_TriggerERROR
 15700 ;;		_setDimmerLights
 15701 ;;		_setDimmerLights_Adj
 15702 ;;		_setDimmerLights_AdjRF
 15703 ;;		_setDimmerLights_Switch
 15704 ;;		_setDimmerLights_AdjGo
 15705 ;;		_setDimmerLights_Trigger
 15706 ;;		_setDimmerLights_TriggerAdj
 15707 ;;		_setDimmerLights_Clear
 15708 ;;		_setDimmerLights_GO
 15709 ;;		_setDimmerLights_MaxmumValue
 15710 ;; This function uses a non-reentrant model
 15711 ;;
 15712                           
 15713                           
 15714                           ;psect for function _DimmerLightsPointSelect
 15715  1DAD                     _DimmerLightsPointSelect:	
 15716                           
 15717                           ;incstack = 0
 15718                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15719                           ;DimmerLightsPointSelect@lights stored from wreg
 15720  1DAD  0020               	movlb	0	; select bank0
 15721  1DAE  00A1               	movwf	DimmerLightsPointSelect@lights
 15722                           
 15723                           ;Dimmer_B1.c: 317: if (lights == 1) {
 15724  1DAF  0821               	movf	DimmerLightsPointSelect@lights,w
 15725  1DB0  3A01               	xorlw	1
 15726  1DB1  1D03               	skipz
 15727  1DB2  2DB7               	goto	l798
 15728                           
 15729                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 15730  1DB3  3028               	movlw	_DimmerLights1& (0+255)
 15731  1DB4  00A0               	movwf	??_DimmerLightsPointSelect
 15732  1DB5  0820               	movf	??_DimmerLightsPointSelect,w
 15733  1DB6  00F9               	movwf	_DimmerLights
 15734  1DB7                     l798:	
 15735                           
 15736                           ;Dimmer_B1.c: 319: }
 15737                           ;Dimmer_B1.c: 322: if (lights == 2) {
 15738  1DB7  0821               	movf	DimmerLightsPointSelect@lights,w
 15739  1DB8  3A02               	xorlw	2
 15740  1DB9  1D03               	skipz
 15741  1DBA  0008               	return
 15742                           
 15743                           ;Dimmer_B1.c: 323: DimmerLights = &DimmerLights2;
 15744  1DBB  3037               	movlw	_DimmerLights2& (0+255)
 15745  1DBC  00A0               	movwf	??_DimmerLightsPointSelect
 15746  1DBD  0820               	movf	??_DimmerLightsPointSelect,w
 15747  1DBE  00F9               	movwf	_DimmerLights
 15748  1DBF  0008               	return
 15749  1DC0                     __end_of_DimmerLightsPointSelect:	
 15750                           
 15751                           	psect	text102
 15752  174C                     __ptext102:	
 15753 ;; *************** function _setBuz *****************
 15754 ;; Defined at:
 15755 ;;		line 22 in file "../src/Buzzer_B1.c"
 15756 ;; Parameters:    Size  Location     Type
 15757 ;;  count           1    wreg     unsigned char 
 15758 ;;  time            2    9[BANK0 ] int 
 15759 ;; Auto vars:     Size  Location     Type
 15760 ;;  count           1   12[BANK0 ] unsigned char 
 15761 ;; Return value:  Size  Location     Type
 15762 ;;		None               void
 15763 ;; Registers used:
 15764 ;;		wreg, status,2, status,0, pclath, cstack
 15765 ;; Tracked objects:
 15766 ;;		On entry : 0/0
 15767 ;;		On exit  : 0/0
 15768 ;;		Unchanged: 0/0
 15769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15770 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15773 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15774 ;;Total ram usage:        4 bytes
 15775 ;; Hardware stack levels used:    1
 15776 ;; Hardware stack levels required when called:    6
 15777 ;; This function calls:
 15778 ;;		___awdiv
 15779 ;; This function is called by:
 15780 ;;		_DlyOff_Main
 15781 ;;		_setDimmerLights_Main
 15782 ;;		_DimmerLights_Exceptions
 15783 ;;		_my_Main
 15784 ;;		_setLog_Code
 15785 ;;		_setControl_Lights_Table
 15786 ;;		_setRFSW_Control
 15787 ;;		_setSw_Main
 15788 ;;		_Sw_DimmerOnFunc
 15789 ;; This function uses a non-reentrant model
 15790 ;;
 15791                           
 15792                           
 15793                           ;psect for function _setBuz
 15794  174C                     _setBuz:	
 15795                           
 15796                           ;incstack = 0
 15797                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15798                           ;setBuz@count stored from wreg
 15799  174C  0020               	movlb	0	; select bank0
 15800  174D  00AC               	movwf	setBuz@count
 15801                           
 15802                           ;Buzzer_B1.c: 23: time /= 10;
 15803  174E  300A               	movlw	10
 15804  174F  00A0               	movwf	___awdiv@divisor
 15805  1750  3000               	movlw	0
 15806  1751  00A1               	movwf	___awdiv@divisor+1
 15807  1752  082A               	movf	setBuz@time+1,w
 15808  1753  01A3               	clrf	___awdiv@dividend+1
 15809  1754  07A3               	addwf	___awdiv@dividend+1,f
 15810  1755  0829               	movf	setBuz@time,w
 15811  1756  01A2               	clrf	___awdiv@dividend
 15812  1757  07A2               	addwf	___awdiv@dividend,f
 15813  1758  3196  26A1  3197   	fcall	___awdiv
 15814  175B  0020               	movlb	0	; select bank0
 15815  175C  0821               	movf	?___awdiv+1,w
 15816  175D  01AA               	clrf	setBuz@time+1
 15817  175E  07AA               	addwf	setBuz@time+1,f
 15818  175F  0820               	movf	?___awdiv,w
 15819  1760  01A9               	clrf	setBuz@time
 15820  1761  07A9               	addwf	setBuz@time,f
 15821                           
 15822                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15823  1762  0021               	movlb	1	; select bank1
 15824  1763  1C4B               	btfss	_Buz1^(0+128),0
 15825  1764  0008               	return
 15826                           
 15827                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15828  1765  18CB               	btfsc	_Buz1^(0+128),1
 15829  1766  2F7D               	goto	l98
 15830                           
 15831                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15832  1767  14CB               	bsf	_Buz1^(0+128),1
 15833                           
 15834                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15835  1768  01CC               	clrf	(_Buz1^(0+128)+1)
 15836  1769  01CD               	clrf	((_Buz1+1)^(0+128)+1)
 15837                           
 15838                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15839  176A  0020               	movlb	0	; select bank0
 15840  176B  082C               	movf	setBuz@count,w
 15841  176C  00AB               	movwf	??_setBuz
 15842  176D  082B               	movf	??_setBuz,w
 15843  176E  0021               	movlb	1	; select bank1
 15844  176F  00CE               	movwf	(_Buz1^(0+128)+3)
 15845                           
 15846                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15847  1770  0020               	movlb	0	; select bank0
 15848  1771  082A               	movf	setBuz@time+1,w
 15849  1772  0021               	movlb	1	; select bank1
 15850  1773  01D2               	clrf	((_Buz1+1)^(0+128)+6)
 15851  1774  07D2               	addwf	((_Buz1+1)^(0+128)+6),f
 15852  1775  0020               	movlb	0	; select bank0
 15853  1776  0829               	movf	setBuz@time,w
 15854  1777  0021               	movlb	1	; select bank1
 15855  1778  01D1               	clrf	(_Buz1^(0+128)+6)
 15856  1779  07D1               	addwf	(_Buz1^(0+128)+6),f
 15857                           
 15858                           ;Buzzer_B1.c: 30: RB3 = 1;
 15859  177A  0020               	movlb	0	; select bank0
 15860  177B  158D               	bsf	13,3	;volatile
 15861                           
 15862                           ;Buzzer_B1.c: 31: } else {
 15863  177C  0008               	return
 15864  177D                     l98:	
 15865                           
 15866                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15867  177D  19CB               	btfsc	_Buz1^(0+128),3
 15868  177E  2F91               	goto	l100
 15869                           
 15870                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15871  177F  15CB               	bsf	_Buz1^(0+128),3
 15872                           
 15873                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15874  1780  0020               	movlb	0	; select bank0
 15875  1781  082C               	movf	setBuz@count,w
 15876  1782  00AB               	movwf	??_setBuz
 15877  1783  082B               	movf	??_setBuz,w
 15878  1784  0021               	movlb	1	; select bank1
 15879  1785  00CF               	movwf	(_Buz1^(0+128)+4)
 15880                           
 15881                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15882  1786  0020               	movlb	0	; select bank0
 15883  1787  082A               	movf	setBuz@time+1,w
 15884  1788  0021               	movlb	1	; select bank1
 15885  1789  01D4               	clrf	((_Buz1+1)^(0+128)+8)
 15886  178A  07D4               	addwf	((_Buz1+1)^(0+128)+8),f
 15887  178B  0020               	movlb	0	; select bank0
 15888  178C  0829               	movf	setBuz@time,w
 15889  178D  0021               	movlb	1	; select bank1
 15890  178E  01D3               	clrf	(_Buz1^(0+128)+8)
 15891  178F  07D3               	addwf	(_Buz1^(0+128)+8),f
 15892                           
 15893                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15894  1790  0008               	return
 15895  1791                     l100:	
 15896  1791  1A4B               	btfsc	_Buz1^(0+128),4
 15897  1792  0008               	return
 15898                           
 15899                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15900  1793  164B               	bsf	_Buz1^(0+128),4
 15901                           
 15902                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15903  1794  0020               	movlb	0	; select bank0
 15904  1795  082C               	movf	setBuz@count,w
 15905  1796  00AB               	movwf	??_setBuz
 15906  1797  082B               	movf	??_setBuz,w
 15907  1798  0021               	movlb	1	; select bank1
 15908  1799  00D0               	movwf	(_Buz1^(0+128)+5)
 15909                           
 15910                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15911  179A  0020               	movlb	0	; select bank0
 15912  179B  082A               	movf	setBuz@time+1,w
 15913  179C  0021               	movlb	1	; select bank1
 15914  179D  01D6               	clrf	((_Buz1+1)^(0+128)+10)
 15915  179E  07D6               	addwf	((_Buz1+1)^(0+128)+10),f
 15916  179F  0020               	movlb	0	; select bank0
 15917  17A0  0829               	movf	setBuz@time,w
 15918  17A1  0021               	movlb	1	; select bank1
 15919  17A2  01D5               	clrf	(_Buz1^(0+128)+10)
 15920  17A3  07D5               	addwf	(_Buz1^(0+128)+10),f
 15921  17A4  0008               	return
 15922  17A5                     __end_of_setBuz:	
 15923                           
 15924                           	psect	text103
 15925  16A1                     __ptext103:	
 15926 ;; *************** function ___awdiv *****************
 15927 ;; Defined at:
 15928 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15929 ;; Parameters:    Size  Location     Type
 15930 ;;  divisor         2    0[BANK0 ] int 
 15931 ;;  dividend        2    2[BANK0 ] int 
 15932 ;; Auto vars:     Size  Location     Type
 15933 ;;  quotient        2    7[BANK0 ] int 
 15934 ;;  sign            1    6[BANK0 ] unsigned char 
 15935 ;;  counter         1    5[BANK0 ] unsigned char 
 15936 ;; Return value:  Size  Location     Type
 15937 ;;                  2    0[BANK0 ] int 
 15938 ;; Registers used:
 15939 ;;		wreg, status,2, status,0
 15940 ;; Tracked objects:
 15941 ;;		On entry : 0/0
 15942 ;;		On exit  : 0/0
 15943 ;;		Unchanged: 0/0
 15944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15945 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15946 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15948 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15949 ;;Total ram usage:        9 bytes
 15950 ;; Hardware stack levels used:    1
 15951 ;; Hardware stack levels required when called:    5
 15952 ;; This function calls:
 15953 ;;		Nothing
 15954 ;; This function is called by:
 15955 ;;		_setBuz
 15956 ;; This function uses a non-reentrant model
 15957 ;;
 15958                           
 15959                           
 15960                           ;psect for function ___awdiv
 15961  16A1                     ___awdiv:	
 15962                           
 15963                           ;incstack = 0
 15964                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15965  16A1  0020               	movlb	0	; select bank0
 15966  16A2  01A6               	clrf	___awdiv@sign
 15967  16A3  1FA1               	btfss	___awdiv@divisor+1,7
 15968  16A4  2EAC               	goto	l5885
 15969  16A5  09A0               	comf	___awdiv@divisor,f
 15970  16A6  09A1               	comf	___awdiv@divisor+1,f
 15971  16A7  0AA0               	incf	___awdiv@divisor,f
 15972  16A8  1903               	skipnz
 15973  16A9  0AA1               	incf	___awdiv@divisor+1,f
 15974  16AA  01A6               	clrf	___awdiv@sign
 15975  16AB  0AA6               	incf	___awdiv@sign,f
 15976  16AC                     l5885:	
 15977  16AC  1FA3               	btfss	___awdiv@dividend+1,7
 15978  16AD  2EB7               	goto	l5891
 15979  16AE  09A2               	comf	___awdiv@dividend,f
 15980  16AF  09A3               	comf	___awdiv@dividend+1,f
 15981  16B0  0AA2               	incf	___awdiv@dividend,f
 15982  16B1  1903               	skipnz
 15983  16B2  0AA3               	incf	___awdiv@dividend+1,f
 15984  16B3  3001               	movlw	1
 15985  16B4  00A4               	movwf	??___awdiv
 15986  16B5  0824               	movf	??___awdiv,w
 15987  16B6  06A6               	xorwf	___awdiv@sign,f
 15988  16B7                     l5891:	
 15989  16B7  01A7               	clrf	___awdiv@quotient
 15990  16B8  01A8               	clrf	___awdiv@quotient+1
 15991  16B9  0821               	movf	___awdiv@divisor+1,w
 15992  16BA  0420               	iorwf	___awdiv@divisor,w
 15993  16BB  1903               	skipnz
 15994  16BC  2EE6               	goto	l5913
 15995  16BD  01A5               	clrf	___awdiv@counter
 15996  16BE  0AA5               	incf	___awdiv@counter,f
 15997  16BF                     l5901:	
 15998  16BF  1BA1               	btfsc	___awdiv@divisor+1,7
 15999  16C0  2ECB               	goto	l5903
 16000  16C1  3001               	movlw	1
 16001  16C2                     u4775:	
 16002  16C2  35A0               	lslf	___awdiv@divisor,f
 16003  16C3  0DA1               	rlf	___awdiv@divisor+1,f
 16004  16C4  0B89               	decfsz	9,f
 16005  16C5  2EC2               	goto	u4775
 16006  16C6  3001               	movlw	1
 16007  16C7  00A4               	movwf	??___awdiv
 16008  16C8  0824               	movf	??___awdiv,w
 16009  16C9  07A5               	addwf	___awdiv@counter,f
 16010  16CA  2EBF               	goto	l5901
 16011  16CB                     l5903:	
 16012  16CB  3001               	movlw	1
 16013  16CC                     u4795:	
 16014  16CC  35A7               	lslf	___awdiv@quotient,f
 16015  16CD  0DA8               	rlf	___awdiv@quotient+1,f
 16016  16CE  0B89               	decfsz	9,f
 16017  16CF  2ECC               	goto	u4795
 16018  16D0  0821               	movf	___awdiv@divisor+1,w
 16019  16D1  0223               	subwf	___awdiv@dividend+1,w
 16020  16D2  1D03               	skipz
 16021  16D3  2ED6               	goto	u4805
 16022  16D4  0820               	movf	___awdiv@divisor,w
 16023  16D5  0222               	subwf	___awdiv@dividend,w
 16024  16D6                     u4805:	
 16025  16D6  1C03               	skipc
 16026  16D7  2EDD               	goto	l5909
 16027  16D8  0820               	movf	___awdiv@divisor,w
 16028  16D9  02A2               	subwf	___awdiv@dividend,f
 16029  16DA  0821               	movf	___awdiv@divisor+1,w
 16030  16DB  3BA3               	subwfb	___awdiv@dividend+1,f
 16031  16DC  1427               	bsf	___awdiv@quotient,0
 16032  16DD                     l5909:	
 16033  16DD  3001               	movlw	1
 16034  16DE                     u4815:	
 16035  16DE  36A1               	lsrf	___awdiv@divisor+1,f
 16036  16DF  0CA0               	rrf	___awdiv@divisor,f
 16037  16E0  0B89               	decfsz	9,f
 16038  16E1  2EDE               	goto	u4815
 16039  16E2  3001               	movlw	1
 16040  16E3  02A5               	subwf	___awdiv@counter,f
 16041  16E4  1D03               	btfss	3,2
 16042  16E5  2ECB               	goto	l5903
 16043  16E6                     l5913:	
 16044  16E6  0826               	movf	___awdiv@sign,w
 16045  16E7  1903               	btfsc	3,2
 16046  16E8  2EEE               	goto	l5917
 16047  16E9  09A7               	comf	___awdiv@quotient,f
 16048  16EA  09A8               	comf	___awdiv@quotient+1,f
 16049  16EB  0AA7               	incf	___awdiv@quotient,f
 16050  16EC  1903               	skipnz
 16051  16ED  0AA8               	incf	___awdiv@quotient+1,f
 16052  16EE                     l5917:	
 16053  16EE  0828               	movf	___awdiv@quotient+1,w
 16054  16EF  01A1               	clrf	?___awdiv+1
 16055  16F0  07A1               	addwf	?___awdiv+1,f
 16056  16F1  0827               	movf	___awdiv@quotient,w
 16057  16F2  01A0               	clrf	?___awdiv
 16058  16F3  07A0               	addwf	?___awdiv,f
 16059  16F4  0008               	return
 16060  16F5                     __end_of___awdiv:	
 16061                           
 16062                           	psect	text104
 16063  1BCC                     __ptext104:	
 16064 ;; *************** function _DelayOff_Initialization *****************
 16065 ;; Defined at:
 16066 ;;		line 26 in file "../src/DelayOff_B1.c"
 16067 ;; Parameters:    Size  Location     Type
 16068 ;;		None
 16069 ;; Auto vars:     Size  Location     Type
 16070 ;;		None
 16071 ;; Return value:  Size  Location     Type
 16072 ;;		None               void
 16073 ;; Registers used:
 16074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16075 ;; Tracked objects:
 16076 ;;		On entry : 0/0
 16077 ;;		On exit  : 0/0
 16078 ;;		Unchanged: 0/0
 16079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16084 ;;Total ram usage:        0 bytes
 16085 ;; Hardware stack levels used:    1
 16086 ;; Hardware stack levels required when called:    7
 16087 ;; This function calls:
 16088 ;;		_DlyOff_Initialization
 16089 ;; This function is called by:
 16090 ;;		_main
 16091 ;; This function uses a non-reentrant model
 16092 ;;
 16093                           
 16094                           
 16095                           ;psect for function _DelayOff_Initialization
 16096  1BCC                     _DelayOff_Initialization:	
 16097                           
 16098                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16099                           
 16100                           ;incstack = 0
 16101                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16102  1BCC  3001               	movlw	1
 16103  1BCD  319C  242C  319B   	fcall	_DlyOff_Initialization
 16104                           
 16105                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 16106  1BD0  3002               	movlw	2
 16107  1BD1  319C  242C         	fcall	_DlyOff_Initialization
 16108  1BD3  0008               	return
 16109  1BD4                     __end_of_DelayOff_Initialization:	
 16110                           
 16111                           	psect	text105
 16112  1C2C                     __ptext105:	
 16113 ;; *************** function _DlyOff_Initialization *****************
 16114 ;; Defined at:
 16115 ;;		line 56 in file "../src/DelayOff_B1.c"
 16116 ;; Parameters:    Size  Location     Type
 16117 ;;  sw              1    wreg     unsigned char 
 16118 ;; Auto vars:     Size  Location     Type
 16119 ;;  sw              1    2[BANK0 ] unsigned char 
 16120 ;; Return value:  Size  Location     Type
 16121 ;;		None               void
 16122 ;; Registers used:
 16123 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16124 ;; Tracked objects:
 16125 ;;		On entry : 0/0
 16126 ;;		On exit  : 0/0
 16127 ;;		Unchanged: 0/0
 16128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16130 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16132 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16133 ;;Total ram usage:        1 bytes
 16134 ;; Hardware stack levels used:    1
 16135 ;; Hardware stack levels required when called:    6
 16136 ;; This function calls:
 16137 ;;		_DelayOffPointSelect
 16138 ;; This function is called by:
 16139 ;;		_DelayOff_Initialization
 16140 ;; This function uses a non-reentrant model
 16141 ;;
 16142                           
 16143                           
 16144                           ;psect for function _DlyOff_Initialization
 16145  1C2C                     _DlyOff_Initialization:	
 16146                           
 16147                           ;incstack = 0
 16148                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16149                           ;DlyOff_Initialization@sw stored from wreg
 16150  1C2C  0020               	movlb	0	; select bank0
 16151  1C2D  00A2               	movwf	DlyOff_Initialization@sw
 16152                           
 16153                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16154  1C2E  0822               	movf	DlyOff_Initialization@sw,w
 16155  1C2F  319D  25E8         	fcall	_DelayOffPointSelect
 16156                           
 16157                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 16158  1C31  0878               	movf	_DelayOff,w
 16159  1C32  0086               	movwf	6
 16160  1C33  3001               	movlw	1	; select bank2/3
 16161  1C34  0087               	movwf	7
 16162  1C35  1401               	bsf	1,0
 16163  1C36  0008               	return
 16164  1C37                     __end_of_DlyOff_Initialization:	
 16165                           
 16166                           	psect	text106
 16167  1DE8                     __ptext106:	
 16168 ;; *************** function _DelayOffPointSelect *****************
 16169 ;; Defined at:
 16170 ;;		line 7 in file "../src/DelayOff_B1.c"
 16171 ;; Parameters:    Size  Location     Type
 16172 ;;  sw              1    wreg     unsigned char 
 16173 ;; Auto vars:     Size  Location     Type
 16174 ;;  sw              1    1[BANK0 ] unsigned char 
 16175 ;; Return value:  Size  Location     Type
 16176 ;;		None               void
 16177 ;; Registers used:
 16178 ;;		wreg
 16179 ;; Tracked objects:
 16180 ;;		On entry : 0/0
 16181 ;;		On exit  : 0/0
 16182 ;;		Unchanged: 0/0
 16183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16188 ;;Total ram usage:        2 bytes
 16189 ;; Hardware stack levels used:    1
 16190 ;; Hardware stack levels required when called:    5
 16191 ;; This function calls:
 16192 ;;		Nothing
 16193 ;; This function is called by:
 16194 ;;		_DlyOff_Initialization
 16195 ;;		_DlyOff_Main
 16196 ;;		_setDelayOff_GO
 16197 ;; This function uses a non-reentrant model
 16198 ;;
 16199                           
 16200                           
 16201                           ;psect for function _DelayOffPointSelect
 16202  1DE8                     _DelayOffPointSelect:	
 16203                           
 16204                           ;incstack = 0
 16205                           ; Regs used in _DelayOffPointSelect: [wreg]
 16206                           ;DelayOffPointSelect@sw stored from wreg
 16207  1DE8  0020               	movlb	0	; select bank0
 16208  1DE9  00A1               	movwf	DelayOffPointSelect@sw
 16209                           
 16210                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16211  1DEA  0821               	movf	DelayOffPointSelect@sw,w
 16212  1DEB  3A01               	xorlw	1
 16213  1DEC  1D03               	skipz
 16214  1DED  2DF3               	goto	l5821
 16215                           
 16216                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16217  1DEE  3058               	movlw	_DlySw1& (0+255)
 16218  1DEF  00A0               	movwf	??_DelayOffPointSelect
 16219  1DF0  0820               	movf	??_DelayOffPointSelect,w
 16220  1DF1  00F8               	movwf	_DelayOff
 16221                           
 16222                           ;DelayOff_B1.c: 11: }
 16223  1DF2  0008               	return
 16224  1DF3                     l5821:	
 16225                           
 16226                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 16227  1DF3  0821               	movf	DelayOffPointSelect@sw,w
 16228  1DF4  3A02               	xorlw	2
 16229  1DF5  1D03               	skipz
 16230  1DF6  0008               	return
 16231                           
 16232                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 16233  1DF7  305D               	movlw	_DlySw2& (0+255)
 16234  1DF8  00A0               	movwf	??_DelayOffPointSelect
 16235  1DF9  0820               	movf	??_DelayOffPointSelect,w
 16236  1DFA  00F8               	movwf	_DelayOff
 16237  1DFB  0008               	return
 16238  1DFC                     __end_of_DelayOffPointSelect:	
 16239                           
 16240                           	psect	text107
 16241  1E10                     __ptext107:	
 16242 ;; *************** function _CC2500_PowerOnInitial *****************
 16243 ;; Defined at:
 16244 ;;		line 111 in file "../src/CC2500_B1.c"
 16245 ;; Parameters:    Size  Location     Type
 16246 ;;		None
 16247 ;; Auto vars:     Size  Location     Type
 16248 ;;		None
 16249 ;; Return value:  Size  Location     Type
 16250 ;;		None               void
 16251 ;; Registers used:
 16252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16253 ;; Tracked objects:
 16254 ;;		On entry : 0/0
 16255 ;;		On exit  : 0/0
 16256 ;;		Unchanged: 0/0
 16257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16262 ;;Total ram usage:        0 bytes
 16263 ;; Hardware stack levels used:    1
 16264 ;; Hardware stack levels required when called:    8
 16265 ;; This function calls:
 16266 ;;		_CC2500_ClearRXFIFO
 16267 ;;		_CC2500_ClearTXFIFO
 16268 ;;		_CC2500_FrequencyCabr
 16269 ;;		_CC2500_InitPATable
 16270 ;;		_CC2500_InitSetREG
 16271 ;;		_CC2500_PowerRST
 16272 ;;		_CC2500_SIDLEMode
 16273 ;; This function is called by:
 16274 ;;		_main
 16275 ;; This function uses a non-reentrant model
 16276 ;;
 16277                           
 16278                           
 16279                           ;psect for function _CC2500_PowerOnInitial
 16280  1E10                     _CC2500_PowerOnInitial:	
 16281                           
 16282                           ;CC2500_B1.c: 112: CC2500_PowerRST();
 16283                           
 16284                           ;incstack = 0
 16285                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16286  1E10  3193  23D7  319E   	fcall	_CC2500_PowerRST
 16287                           
 16288                           ;CC2500_B1.c: 113: CC2500_InitSetREG();
 16289  1E13  3191  21AA  319E   	fcall	_CC2500_InitSetREG
 16290                           
 16291                           ;CC2500_B1.c: 114: CC2500_InitPATable();
 16292  1E16  319F  27A3  319E   	fcall	_CC2500_InitPATable
 16293                           
 16294                           ;CC2500_B1.c: 115: CC2500_ClearTXFIFO();
 16295  1E19  319B  238F  319E   	fcall	_CC2500_ClearTXFIFO
 16296                           
 16297                           ;CC2500_B1.c: 116: CC2500_ClearRXFIFO();
 16298  1E1C  319B  238B  319E   	fcall	_CC2500_ClearRXFIFO
 16299                           
 16300                           ;CC2500_B1.c: 117: CC2500_FrequencyCabr();
 16301  1E1F  319C  2442  319E   	fcall	_CC2500_FrequencyCabr
 16302                           
 16303                           ;CC2500_B1.c: 118: CC2500_SIDLEMode();
 16304  1E22  319B  2393         	fcall	_CC2500_SIDLEMode
 16305  1E24  0008               	return
 16306  1E25                     __end_of_CC2500_PowerOnInitial:	
 16307                           
 16308                           	psect	text108
 16309  1B93                     __ptext108:	
 16310 ;; *************** function _CC2500_SIDLEMode *****************
 16311 ;; Defined at:
 16312 ;;		line 201 in file "../src/CC2500_B1.c"
 16313 ;; Parameters:    Size  Location     Type
 16314 ;;		None
 16315 ;; Auto vars:     Size  Location     Type
 16316 ;;		None
 16317 ;; Return value:  Size  Location     Type
 16318 ;;		None               void
 16319 ;; Registers used:
 16320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16321 ;; Tracked objects:
 16322 ;;		On entry : 0/0
 16323 ;;		On exit  : 0/0
 16324 ;;		Unchanged: 0/0
 16325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16330 ;;Total ram usage:        0 bytes
 16331 ;; Hardware stack levels used:    1
 16332 ;; Hardware stack levels required when called:    7
 16333 ;; This function calls:
 16334 ;;		_CC2500_WriteCommand
 16335 ;; This function is called by:
 16336 ;;		_CC2500_PowerOnInitial
 16337 ;; This function uses a non-reentrant model
 16338 ;;
 16339                           
 16340                           
 16341                           ;psect for function _CC2500_SIDLEMode
 16342  1B93                     _CC2500_SIDLEMode:	
 16343                           
 16344                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x36);
 16345                           
 16346                           ;incstack = 0
 16347                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16348  1B93  3036               	movlw	54
 16349  1B94  319E  26C5         	fcall	_CC2500_WriteCommand
 16350  1B96  0008               	return
 16351  1B97                     __end_of_CC2500_SIDLEMode:	
 16352                           
 16353                           	psect	text109
 16354  13D7                     __ptext109:	
 16355 ;; *************** function _CC2500_PowerRST *****************
 16356 ;; Defined at:
 16357 ;;		line 124 in file "../src/CC2500_B1.c"
 16358 ;; Parameters:    Size  Location     Type
 16359 ;;		None
 16360 ;; Auto vars:     Size  Location     Type
 16361 ;;		None
 16362 ;; Return value:  Size  Location     Type
 16363 ;;		None               void
 16364 ;; Registers used:
 16365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16366 ;; Tracked objects:
 16367 ;;		On entry : 0/0
 16368 ;;		On exit  : 0/0
 16369 ;;		Unchanged: 0/0
 16370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16373 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16374 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16375 ;;Total ram usage:        1 bytes
 16376 ;; Hardware stack levels used:    1
 16377 ;; Hardware stack levels required when called:    6
 16378 ;; This function calls:
 16379 ;;		_CC2500_WriteByte
 16380 ;;		_DelayTime_1us
 16381 ;;		_Timeout_Counter
 16382 ;;		_set_TimeoutCleared
 16383 ;; This function is called by:
 16384 ;;		_CC2500_PowerOnInitial
 16385 ;; This function uses a non-reentrant model
 16386 ;;
 16387                           
 16388                           
 16389                           ;psect for function _CC2500_PowerRST
 16390  13D7                     _CC2500_PowerRST:	
 16391                           
 16392                           ;CC2500_B1.c: 125: RC1 = 0;
 16393                           
 16394                           ;incstack = 0
 16395                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16396  13D7  0020               	movlb	0	; select bank0
 16397  13D8  108E               	bcf	14,1	;volatile
 16398                           
 16399                           ;CC2500_B1.c: 126: RC0 = 0;
 16400  13D9  100E               	bcf	14,0	;volatile
 16401                           
 16402                           ;CC2500_B1.c: 127: RC4 = 1;
 16403  13DA  160E               	bsf	14,4	;volatile
 16404                           
 16405                           ;CC2500_B1.c: 128: DelayTime_1us(10);
 16406  13DB  300A               	movlw	10
 16407  13DC  00A0               	movwf	DelayTime_1us@count
 16408  13DD  3000               	movlw	0
 16409  13DE  00A1               	movwf	DelayTime_1us@count+1
 16410  13DF  3191  215D  3193   	fcall	_DelayTime_1us
 16411                           
 16412                           ;CC2500_B1.c: 129: RC4 = 0;
 16413  13E2  0020               	movlb	0	; select bank0
 16414  13E3  120E               	bcf	14,4	;volatile
 16415                           
 16416                           ;CC2500_B1.c: 130: DelayTime_1us(10);
 16417  13E4  300A               	movlw	10
 16418  13E5  00A0               	movwf	DelayTime_1us@count
 16419  13E6  3000               	movlw	0
 16420  13E7  00A1               	movwf	DelayTime_1us@count+1
 16421  13E8  3191  215D  3193   	fcall	_DelayTime_1us
 16422                           
 16423                           ;CC2500_B1.c: 131: RC4 = 1;
 16424  13EB  0020               	movlb	0	; select bank0
 16425  13EC  160E               	bsf	14,4	;volatile
 16426                           
 16427                           ;CC2500_B1.c: 132: DelayTime_1us(40);
 16428  13ED  3028               	movlw	40
 16429  13EE  00A0               	movwf	DelayTime_1us@count
 16430  13EF  3000               	movlw	0
 16431  13F0  00A1               	movwf	DelayTime_1us@count+1
 16432  13F1  3191  215D  3193   	fcall	_DelayTime_1us
 16433                           
 16434                           ;CC2500_B1.c: 133: RC4 = 0;
 16435  13F4  0020               	movlb	0	; select bank0
 16436  13F5  120E               	bcf	14,4	;volatile
 16437                           
 16438                           ;CC2500_B1.c: 134: SPI0Buffer = 0x30;
 16439  13F6  3030               	movlw	48
 16440  13F7  00A6               	movwf	??_CC2500_PowerRST
 16441  13F8  0826               	movf	??_CC2500_PowerRST,w
 16442  13F9  00FC               	movwf	_SPI0Buffer
 16443                           
 16444                           ;CC2500_B1.c: 135: while (RC2 == 1 && myMain.Timeout == 0) {
 16445  13FA  2BFE               	goto	l6869
 16446  13FB                     l6867:	
 16447                           
 16448                           ;CC2500_B1.c: 136: Timeout_Counter();
 16449  13FB  319E  2695  3193   	fcall	_Timeout_Counter
 16450  13FE                     l6869:	
 16451  13FE  0020               	movlb	0	; select bank0
 16452  13FF  1D0E               	btfss	14,2	;volatile
 16453  1400  2C04               	goto	l6873
 16454  1401  0021               	movlb	1	; select bank1
 16455  1402  1D2F               	btfss	(_myMain^(0+128)+15),2
 16456  1403  2BFB               	goto	l6867
 16457  1404                     l6873:	
 16458                           
 16459                           ;CC2500_B1.c: 137: };
 16460                           ;CC2500_B1.c: 138: set_TimeoutCleared();
 16461  1404  319B  239B  3193   	fcall	_set_TimeoutCleared
 16462                           
 16463                           ;CC2500_B1.c: 139: CC2500_WriteByte();
 16464  1407  319D  25D4  3193   	fcall	_CC2500_WriteByte
 16465                           
 16466                           ;CC2500_B1.c: 140: while (RC2 == 1 && myMain.Timeout == 0) {
 16467  140A  2C0E               	goto	l6879
 16468  140B                     l6877:	
 16469                           
 16470                           ;CC2500_B1.c: 141: Timeout_Counter();
 16471  140B  319E  2695  3193   	fcall	_Timeout_Counter
 16472  140E                     l6879:	
 16473  140E  0020               	movlb	0	; select bank0
 16474  140F  1D0E               	btfss	14,2	;volatile
 16475  1410  2C14               	goto	l6883
 16476  1411  0021               	movlb	1	; select bank1
 16477  1412  1D2F               	btfss	(_myMain^(0+128)+15),2
 16478  1413  2C0B               	goto	l6877
 16479  1414                     l6883:	
 16480                           
 16481                           ;CC2500_B1.c: 142: };
 16482                           ;CC2500_B1.c: 143: set_TimeoutCleared();
 16483  1414  319B  239B         	fcall	_set_TimeoutCleared
 16484                           
 16485                           ;CC2500_B1.c: 144: RC0 = 0;
 16486  1416  0020               	movlb	0	; select bank0
 16487  1417  100E               	bcf	14,0	;volatile
 16488                           
 16489                           ;CC2500_B1.c: 145: RC4 = 1;
 16490  1418  160E               	bsf	14,4	;volatile
 16491  1419  0008               	return
 16492  141A                     __end_of_CC2500_PowerRST:	
 16493                           
 16494                           	psect	text110
 16495  11AA                     __ptext110:	
 16496 ;; *************** function _CC2500_InitSetREG *****************
 16497 ;; Defined at:
 16498 ;;		line 151 in file "../src/CC2500_B1.c"
 16499 ;; Parameters:    Size  Location     Type
 16500 ;;		None
 16501 ;; Auto vars:     Size  Location     Type
 16502 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16503 ;;  temp2           1    7[BANK0 ] unsigned char 
 16504 ;;  temp1           1    6[BANK0 ] unsigned char 
 16505 ;; Return value:  Size  Location     Type
 16506 ;;		None               void
 16507 ;; Registers used:
 16508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16509 ;; Tracked objects:
 16510 ;;		On entry : 0/0
 16511 ;;		On exit  : 0/0
 16512 ;;		Unchanged: 0/0
 16513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16515 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16517 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16518 ;;Total ram usage:        4 bytes
 16519 ;; Hardware stack levels used:    1
 16520 ;; Hardware stack levels required when called:    7
 16521 ;; This function calls:
 16522 ;;		_CC2500_WriteREG
 16523 ;; This function is called by:
 16524 ;;		_CC2500_PowerOnInitial
 16525 ;; This function uses a non-reentrant model
 16526 ;;
 16527                           
 16528                           
 16529                           ;psect for function _CC2500_InitSetREG
 16530  11AA                     _CC2500_InitSetREG:	
 16531                           
 16532                           ;CC2500_B1.c: 152: unsigned char loop_c;
 16533                           ;CC2500_B1.c: 153: unsigned char temp1, temp2;
 16534                           ;CC2500_B1.c: 155: for (loop_c = 0; loop_c < 47; loop_c++) {
 16535                           
 16536                           ;incstack = 0
 16537                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16538  11AA  0020               	movlb	0	; select bank0
 16539  11AB  01A8               	clrf	CC2500_InitSetREG@loop_c
 16540  11AC                     L10:	
 16541  11AC  302F               	movlw	47
 16542  11AD  0228               	subwf	CC2500_InitSetREG@loop_c,w
 16543  11AE  1803               	btfsc	3,0
 16544  11AF  0008               	return
 16545                           
 16546                           ;CC2500_B1.c: 156: temp1 = CC2500_registers_address[loop_c];
 16547  11B0  0828               	movf	CC2500_InitSetREG@loop_c,w
 16548  11B1  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 16549  11B2  0084               	movwf	4
 16550  11B3  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 16551  11B4  1803               	skipnc
 16552  11B5  3E01               	addlw	1
 16553  11B6  0085               	movwf	5
 16554  11B7  0800               	movf	0,w	;code access
 16555  11B8  00A5               	movwf	??_CC2500_InitSetREG
 16556  11B9  0825               	movf	??_CC2500_InitSetREG,w
 16557  11BA  00A6               	movwf	CC2500_InitSetREG@temp1
 16558                           
 16559                           ;CC2500_B1.c: 157: temp2 = CC2500_rfSettings[loop_c];
 16560  11BB  0828               	movf	CC2500_InitSetREG@loop_c,w
 16561  11BC  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 16562  11BD  0084               	movwf	4
 16563  11BE  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 16564  11BF  1803               	skipnc
 16565  11C0  3E01               	addlw	1
 16566  11C1  0085               	movwf	5
 16567  11C2  0800               	movf	0,w	;code access
 16568  11C3  00A5               	movwf	??_CC2500_InitSetREG
 16569  11C4  0825               	movf	??_CC2500_InitSetREG,w
 16570  11C5  00A7               	movwf	CC2500_InitSetREG@temp2
 16571                           
 16572                           ;CC2500_B1.c: 159: CC2500_WriteREG(temp1, temp2);
 16573  11C6  0827               	movf	CC2500_InitSetREG@temp2,w
 16574  11C7  00A5               	movwf	??_CC2500_InitSetREG
 16575  11C8  0825               	movf	??_CC2500_InitSetREG,w
 16576  11C9  00A2               	movwf	CC2500_WriteREG@value
 16577  11CA  0826               	movf	CC2500_InitSetREG@temp1,w
 16578  11CB  3190  20B2  3191   	fcall	_CC2500_WriteREG
 16579  11CE  3001               	movlw	1
 16580  11CF  0020               	movlb	0	; select bank0
 16581  11D0  00A5               	movwf	??_CC2500_InitSetREG
 16582  11D1  0825               	movf	??_CC2500_InitSetREG,w
 16583  11D2  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 16584  11D3  29AC               	goto	L10
 16585  11D4                     __end_of_CC2500_InitSetREG:	
 16586                           
 16587                           	psect	text111
 16588  1FA3                     __ptext111:	
 16589 ;; *************** function _CC2500_InitPATable *****************
 16590 ;; Defined at:
 16591 ;;		line 166 in file "../src/CC2500_B1.c"
 16592 ;; Parameters:    Size  Location     Type
 16593 ;;		None
 16594 ;; Auto vars:     Size  Location     Type
 16595 ;;  loop_d          1    7[BANK0 ] unsigned char 
 16596 ;;  temp            1    6[BANK0 ] unsigned char 
 16597 ;; Return value:  Size  Location     Type
 16598 ;;		None               void
 16599 ;; Registers used:
 16600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16601 ;; Tracked objects:
 16602 ;;		On entry : 0/0
 16603 ;;		On exit  : 0/0
 16604 ;;		Unchanged: 0/0
 16605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16607 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16608 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;Total ram usage:        3 bytes
 16611 ;; Hardware stack levels used:    1
 16612 ;; Hardware stack levels required when called:    7
 16613 ;; This function calls:
 16614 ;;		_CC2500_WriteREG
 16615 ;; This function is called by:
 16616 ;;		_CC2500_PowerOnInitial
 16617 ;; This function uses a non-reentrant model
 16618 ;;
 16619                           
 16620                           
 16621                           ;psect for function _CC2500_InitPATable
 16622  1FA3                     _CC2500_InitPATable:	
 16623                           
 16624                           ;CC2500_B1.c: 167: unsigned char loop_d;
 16625                           ;CC2500_B1.c: 168: unsigned char temp;
 16626                           ;CC2500_B1.c: 170: for (loop_d = 0; loop_d < 8; loop_d++) {
 16627                           
 16628                           ;incstack = 0
 16629                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16630  1FA3  0020               	movlb	0	; select bank0
 16631  1FA4  01A7               	clrf	CC2500_InitPATable@loop_d
 16632  1FA5                     L11:	
 16633  1FA5  3008               	movlw	8
 16634  1FA6  0227               	subwf	CC2500_InitPATable@loop_d,w
 16635  1FA7  1803               	btfsc	3,0
 16636  1FA8  0008               	return
 16637                           
 16638                           ;CC2500_B1.c: 171: temp = CC2500_patable_vaule[loop_d];
 16639  1FA9  0827               	movf	CC2500_InitPATable@loop_d,w
 16640  1FAA  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 16641  1FAB  0084               	movwf	4
 16642  1FAC  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 16643  1FAD  1803               	skipnc
 16644  1FAE  3E01               	addlw	1
 16645  1FAF  0085               	movwf	5
 16646  1FB0  0800               	movf	0,w	;code access
 16647  1FB1  00A5               	movwf	??_CC2500_InitPATable
 16648  1FB2  0825               	movf	??_CC2500_InitPATable,w
 16649  1FB3  00A6               	movwf	CC2500_InitPATable@temp
 16650                           
 16651                           ;CC2500_B1.c: 172: CC2500_WriteREG(0x3E, temp);
 16652  1FB4  0826               	movf	CC2500_InitPATable@temp,w
 16653  1FB5  00A5               	movwf	??_CC2500_InitPATable
 16654  1FB6  0825               	movf	??_CC2500_InitPATable,w
 16655  1FB7  00A2               	movwf	CC2500_WriteREG@value
 16656  1FB8  303E               	movlw	62
 16657  1FB9  3190  20B2  319F   	fcall	_CC2500_WriteREG
 16658  1FBC  3001               	movlw	1
 16659  1FBD  0020               	movlb	0	; select bank0
 16660  1FBE  00A5               	movwf	??_CC2500_InitPATable
 16661  1FBF  0825               	movf	??_CC2500_InitPATable,w
 16662  1FC0  07A7               	addwf	CC2500_InitPATable@loop_d,f
 16663  1FC1  2FA5               	goto	L11
 16664  1FC2                     __end_of_CC2500_InitPATable:	
 16665                           
 16666                           	psect	text112
 16667  10B2                     __ptext112:	
 16668 ;; *************** function _CC2500_WriteREG *****************
 16669 ;; Defined at:
 16670 ;;		line 243 in file "../src/CC2500_B1.c"
 16671 ;; Parameters:    Size  Location     Type
 16672 ;;  w_addr          1    wreg     unsigned char 
 16673 ;;  value           1    2[BANK0 ] unsigned char 
 16674 ;; Auto vars:     Size  Location     Type
 16675 ;;  w_addr          1    4[BANK0 ] unsigned char 
 16676 ;; Return value:  Size  Location     Type
 16677 ;;		None               void
 16678 ;; Registers used:
 16679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16680 ;; Tracked objects:
 16681 ;;		On entry : 0/0
 16682 ;;		On exit  : 0/0
 16683 ;;		Unchanged: 0/0
 16684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16685 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16687 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16688 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16689 ;;Total ram usage:        3 bytes
 16690 ;; Hardware stack levels used:    1
 16691 ;; Hardware stack levels required when called:    6
 16692 ;; This function calls:
 16693 ;;		_CC2500_WriteByte
 16694 ;;		_Timeout_Counter
 16695 ;;		_set_TimeoutCleared
 16696 ;; This function is called by:
 16697 ;;		_CC2500_InitSetREG
 16698 ;;		_CC2500_InitPATable
 16699 ;; This function uses a non-reentrant model
 16700 ;;
 16701                           
 16702                           
 16703                           ;psect for function _CC2500_WriteREG
 16704  10B2                     _CC2500_WriteREG:	
 16705                           
 16706                           ;incstack = 0
 16707                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16708                           ;CC2500_WriteREG@w_addr stored from wreg
 16709  10B2  0020               	movlb	0	; select bank0
 16710  10B3  00A4               	movwf	CC2500_WriteREG@w_addr
 16711                           
 16712                           ;CC2500_B1.c: 244: RC4 = 0;
 16713  10B4  120E               	bcf	14,4	;volatile
 16714                           
 16715                           ;CC2500_B1.c: 245: SPI0Buffer = w_addr;
 16716  10B5  0824               	movf	CC2500_WriteREG@w_addr,w
 16717  10B6  00A3               	movwf	??_CC2500_WriteREG
 16718  10B7  0823               	movf	??_CC2500_WriteREG,w
 16719  10B8  00FC               	movwf	_SPI0Buffer
 16720                           
 16721                           ;CC2500_B1.c: 246: while (RC2 == 1 && myMain.Timeout == 0) {
 16722  10B9  28BD               	goto	l6559
 16723  10BA                     l6557:	
 16724                           
 16725                           ;CC2500_B1.c: 247: Timeout_Counter();
 16726  10BA  319E  2695  3190   	fcall	_Timeout_Counter
 16727  10BD                     l6559:	
 16728  10BD  0020               	movlb	0	; select bank0
 16729  10BE  1D0E               	btfss	14,2	;volatile
 16730  10BF  28C3               	goto	l6563
 16731  10C0  0021               	movlb	1	; select bank1
 16732  10C1  1D2F               	btfss	(_myMain^(0+128)+15),2
 16733  10C2  28BA               	goto	l6557
 16734  10C3                     l6563:	
 16735                           
 16736                           ;CC2500_B1.c: 248: };
 16737                           ;CC2500_B1.c: 249: set_TimeoutCleared();
 16738  10C3  319B  239B  3190   	fcall	_set_TimeoutCleared
 16739                           
 16740                           ;CC2500_B1.c: 250: CC2500_WriteByte();
 16741  10C6  319D  25D4  3190   	fcall	_CC2500_WriteByte
 16742                           
 16743                           ;CC2500_B1.c: 251: SPI0Buffer = value;
 16744  10C9  0020               	movlb	0	; select bank0
 16745  10CA  0822               	movf	CC2500_WriteREG@value,w
 16746  10CB  00A3               	movwf	??_CC2500_WriteREG
 16747  10CC  0823               	movf	??_CC2500_WriteREG,w
 16748  10CD  00FC               	movwf	_SPI0Buffer
 16749                           
 16750                           ;CC2500_B1.c: 252: CC2500_WriteByte();
 16751  10CE  319D  25D4         	fcall	_CC2500_WriteByte
 16752                           
 16753                           ;CC2500_B1.c: 253: RC4 = 1;
 16754  10D0  0020               	movlb	0	; select bank0
 16755  10D1  160E               	bsf	14,4	;volatile
 16756  10D2  0008               	return
 16757  10D3                     __end_of_CC2500_WriteREG:	
 16758                           
 16759                           	psect	text113
 16760  1C42                     __ptext113:	
 16761 ;; *************** function _CC2500_FrequencyCabr *****************
 16762 ;; Defined at:
 16763 ;;		line 193 in file "../src/CC2500_B1.c"
 16764 ;; Parameters:    Size  Location     Type
 16765 ;;		None
 16766 ;; Auto vars:     Size  Location     Type
 16767 ;;		None
 16768 ;; Return value:  Size  Location     Type
 16769 ;;		None               void
 16770 ;; Registers used:
 16771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16772 ;; Tracked objects:
 16773 ;;		On entry : 0/0
 16774 ;;		On exit  : 0/0
 16775 ;;		Unchanged: 0/0
 16776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16781 ;;Total ram usage:        0 bytes
 16782 ;; Hardware stack levels used:    1
 16783 ;; Hardware stack levels required when called:    7
 16784 ;; This function calls:
 16785 ;;		_CC2500_WriteCommand
 16786 ;;		_DelayTime_1us
 16787 ;; This function is called by:
 16788 ;;		_CC2500_PowerOnInitial
 16789 ;; This function uses a non-reentrant model
 16790 ;;
 16791                           
 16792                           
 16793                           ;psect for function _CC2500_FrequencyCabr
 16794  1C42                     _CC2500_FrequencyCabr:	
 16795                           
 16796                           ;CC2500_B1.c: 194: CC2500_WriteCommand(0x33);
 16797                           
 16798                           ;incstack = 0
 16799                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16800  1C42  3033               	movlw	51
 16801  1C43  319E  26C5  319C   	fcall	_CC2500_WriteCommand
 16802                           
 16803                           ;CC2500_B1.c: 195: DelayTime_1us(1000);
 16804  1C46  30E8               	movlw	232
 16805  1C47  0020               	movlb	0	; select bank0
 16806  1C48  00A0               	movwf	DelayTime_1us@count
 16807  1C49  3003               	movlw	3
 16808  1C4A  00A1               	movwf	DelayTime_1us@count+1
 16809  1C4B  3191  215D         	fcall	_DelayTime_1us
 16810  1C4D  0008               	return
 16811  1C4E                     __end_of_CC2500_FrequencyCabr:	
 16812                           
 16813                           	psect	text114
 16814  115D                     __ptext114:	
 16815 ;; *************** function _DelayTime_1us *****************
 16816 ;; Defined at:
 16817 ;;		line 308 in file "../src/CC2500_B1.c"
 16818 ;; Parameters:    Size  Location     Type
 16819 ;;  count           2    0[BANK0 ] int 
 16820 ;; Auto vars:     Size  Location     Type
 16821 ;;  j               2    4[BANK0 ] unsigned int 
 16822 ;;  i               2    2[BANK0 ] unsigned int 
 16823 ;; Return value:  Size  Location     Type
 16824 ;;		None               void
 16825 ;; Registers used:
 16826 ;;		wreg, status,2
 16827 ;; Tracked objects:
 16828 ;;		On entry : 0/0
 16829 ;;		On exit  : 0/0
 16830 ;;		Unchanged: 0/0
 16831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16832 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16833 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16835 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16836 ;;Total ram usage:        6 bytes
 16837 ;; Hardware stack levels used:    1
 16838 ;; Hardware stack levels required when called:    5
 16839 ;; This function calls:
 16840 ;;		Nothing
 16841 ;; This function is called by:
 16842 ;;		_CC2500_PowerRST
 16843 ;;		_CC2500_FrequencyCabr
 16844 ;; This function uses a non-reentrant model
 16845 ;;
 16846                           
 16847                           
 16848                           ;psect for function _DelayTime_1us
 16849  115D                     _DelayTime_1us:	
 16850                           
 16851                           ;CC2500_B1.c: 309: unsigned int i, j;
 16852                           ;CC2500_B1.c: 310: for (i = 1; i < count; i++)
 16853                           
 16854                           ;incstack = 0
 16855                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16856  115D  3001               	movlw	1
 16857  115E  0020               	movlb	0	; select bank0
 16858  115F  00A2               	movwf	DelayTime_1us@i
 16859  1160  3000               	movlw	0
 16860  1161  00A3               	movwf	DelayTime_1us@i+1
 16861  1162                     l376:	
 16862  1162  0821               	movf	DelayTime_1us@count+1,w
 16863  1163  0223               	subwf	DelayTime_1us@i+1,w
 16864  1164  1D03               	skipz
 16865  1165  2968               	goto	u5665
 16866  1166  0820               	movf	DelayTime_1us@count,w
 16867  1167  0222               	subwf	DelayTime_1us@i,w
 16868  1168                     u5665:	
 16869  1168  1803               	btfsc	3,0
 16870  1169  0008               	return
 16871                           
 16872                           ;CC2500_B1.c: 311: for (j = 0; j <= 1; j++);
 16873  116A  01A4               	clrf	DelayTime_1us@j
 16874  116B  01A5               	clrf	DelayTime_1us@j+1
 16875  116C  3000               	movlw	0
 16876  116D  0225               	subwf	DelayTime_1us@j+1,w
 16877  116E  3002               	movlw	2
 16878  116F  1903               	skipnz
 16879  1170  0224               	subwf	DelayTime_1us@j,w
 16880  1171  1803               	btfsc	3,0
 16881  1172  297E               	goto	l6551
 16882  1173                     l6549:	
 16883  1173  3001               	movlw	1
 16884  1174  07A4               	addwf	DelayTime_1us@j,f
 16885  1175  3000               	movlw	0
 16886  1176  3DA5               	addwfc	DelayTime_1us@j+1,f
 16887  1177  3000               	movlw	0
 16888  1178  0225               	subwf	DelayTime_1us@j+1,w
 16889  1179  3002               	movlw	2
 16890  117A  1903               	skipnz
 16891  117B  0224               	subwf	DelayTime_1us@j,w
 16892  117C  1C03               	skipc
 16893  117D  2973               	goto	l6549
 16894  117E                     l6551:	
 16895  117E  3001               	movlw	1
 16896  117F  07A2               	addwf	DelayTime_1us@i,f
 16897  1180  3000               	movlw	0
 16898  1181  3DA3               	addwfc	DelayTime_1us@i+1,f
 16899  1182  2962               	goto	l376
 16900  1183                     __end_of_DelayTime_1us:	
 16901                           
 16902                           	psect	text115
 16903  1B8F                     __ptext115:	
 16904 ;; *************** function _CC2500_ClearTXFIFO *****************
 16905 ;; Defined at:
 16906 ;;		line 179 in file "../src/CC2500_B1.c"
 16907 ;; Parameters:    Size  Location     Type
 16908 ;;		None
 16909 ;; Auto vars:     Size  Location     Type
 16910 ;;		None
 16911 ;; Return value:  Size  Location     Type
 16912 ;;		None               void
 16913 ;; Registers used:
 16914 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16915 ;; Tracked objects:
 16916 ;;		On entry : 0/0
 16917 ;;		On exit  : 0/0
 16918 ;;		Unchanged: 0/0
 16919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16924 ;;Total ram usage:        0 bytes
 16925 ;; Hardware stack levels used:    1
 16926 ;; Hardware stack levels required when called:    7
 16927 ;; This function calls:
 16928 ;;		_CC2500_WriteCommand
 16929 ;; This function is called by:
 16930 ;;		_CC2500_PowerOnInitial
 16931 ;; This function uses a non-reentrant model
 16932 ;;
 16933                           
 16934                           
 16935                           ;psect for function _CC2500_ClearTXFIFO
 16936  1B8F                     _CC2500_ClearTXFIFO:	
 16937                           
 16938                           ;CC2500_B1.c: 180: CC2500_WriteCommand(0x3B);
 16939                           
 16940                           ;incstack = 0
 16941                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16942  1B8F  303B               	movlw	59
 16943  1B90  319E  26C5         	fcall	_CC2500_WriteCommand
 16944  1B92  0008               	return
 16945  1B93                     __end_of_CC2500_ClearTXFIFO:	
 16946                           
 16947                           	psect	text116
 16948  1B8B                     __ptext116:	
 16949 ;; *************** function _CC2500_ClearRXFIFO *****************
 16950 ;; Defined at:
 16951 ;;		line 186 in file "../src/CC2500_B1.c"
 16952 ;; Parameters:    Size  Location     Type
 16953 ;;		None
 16954 ;; Auto vars:     Size  Location     Type
 16955 ;;		None
 16956 ;; Return value:  Size  Location     Type
 16957 ;;		None               void
 16958 ;; Registers used:
 16959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16960 ;; Tracked objects:
 16961 ;;		On entry : 0/0
 16962 ;;		On exit  : 0/0
 16963 ;;		Unchanged: 0/0
 16964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16969 ;;Total ram usage:        0 bytes
 16970 ;; Hardware stack levels used:    1
 16971 ;; Hardware stack levels required when called:    7
 16972 ;; This function calls:
 16973 ;;		_CC2500_WriteCommand
 16974 ;; This function is called by:
 16975 ;;		_CC2500_PowerOnInitial
 16976 ;; This function uses a non-reentrant model
 16977 ;;
 16978                           
 16979                           
 16980                           ;psect for function _CC2500_ClearRXFIFO
 16981  1B8B                     _CC2500_ClearRXFIFO:	
 16982                           
 16983                           ;CC2500_B1.c: 187: CC2500_WriteCommand(0x3A);
 16984                           
 16985                           ;incstack = 0
 16986                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16987  1B8B  303A               	movlw	58
 16988  1B8C  319E  26C5         	fcall	_CC2500_WriteCommand
 16989  1B8E  0008               	return
 16990  1B8F                     __end_of_CC2500_ClearRXFIFO:	
 16991                           
 16992                           	psect	text117
 16993  1EC5                     __ptext117:	
 16994 ;; *************** function _CC2500_WriteCommand *****************
 16995 ;; Defined at:
 16996 ;;		line 275 in file "../src/CC2500_B1.c"
 16997 ;; Parameters:    Size  Location     Type
 16998 ;;  command         1    wreg     unsigned char 
 16999 ;; Auto vars:     Size  Location     Type
 17000 ;;  command         1    3[BANK0 ] unsigned char 
 17001 ;; Return value:  Size  Location     Type
 17002 ;;		None               void
 17003 ;; Registers used:
 17004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17005 ;; Tracked objects:
 17006 ;;		On entry : 0/0
 17007 ;;		On exit  : 0/0
 17008 ;;		Unchanged: 0/0
 17009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17013 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17014 ;;Total ram usage:        2 bytes
 17015 ;; Hardware stack levels used:    1
 17016 ;; Hardware stack levels required when called:    6
 17017 ;; This function calls:
 17018 ;;		_CC2500_WriteByte
 17019 ;;		_Timeout_Counter
 17020 ;;		_set_TimeoutCleared
 17021 ;; This function is called by:
 17022 ;;		_CC2500_TxData
 17023 ;;		_CC2500_RxData
 17024 ;;		_CC2500_ClearTXFIFO
 17025 ;;		_CC2500_ClearRXFIFO
 17026 ;;		_CC2500_FrequencyCabr
 17027 ;;		_CC2500_SIDLEMode
 17028 ;;		_setRF_Main
 17029 ;;		_RF_RxDisable
 17030 ;; This function uses a non-reentrant model
 17031 ;;
 17032                           
 17033                           
 17034                           ;psect for function _CC2500_WriteCommand
 17035  1EC5                     _CC2500_WriteCommand:	
 17036                           
 17037                           ;incstack = 0
 17038                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17039                           ;CC2500_WriteCommand@command stored from wreg
 17040  1EC5  0020               	movlb	0	; select bank0
 17041  1EC6  00A3               	movwf	CC2500_WriteCommand@command
 17042                           
 17043                           ;CC2500_B1.c: 276: RC4 = 0;
 17044  1EC7  120E               	bcf	14,4	;volatile
 17045                           
 17046                           ;CC2500_B1.c: 277: SPI0Buffer = command;
 17047  1EC8  0823               	movf	CC2500_WriteCommand@command,w
 17048  1EC9  00A2               	movwf	??_CC2500_WriteCommand
 17049  1ECA  0822               	movf	??_CC2500_WriteCommand,w
 17050  1ECB  00FC               	movwf	_SPI0Buffer
 17051                           
 17052                           ;CC2500_B1.c: 279: while (RC2 == 1 && myMain.Timeout == 0) {
 17053  1ECC  2ED0               	goto	l6289
 17054  1ECD                     l6287:	
 17055                           
 17056                           ;CC2500_B1.c: 280: Timeout_Counter();
 17057  1ECD  319E  2695  319E   	fcall	_Timeout_Counter
 17058  1ED0                     l6289:	
 17059  1ED0  0020               	movlb	0	; select bank0
 17060  1ED1  1D0E               	btfss	14,2	;volatile
 17061  1ED2  2ED6               	goto	l6293
 17062  1ED3  0021               	movlb	1	; select bank1
 17063  1ED4  1D2F               	btfss	(_myMain^(0+128)+15),2
 17064  1ED5  2ECD               	goto	l6287
 17065  1ED6                     l6293:	
 17066                           
 17067                           ;CC2500_B1.c: 281: };
 17068                           ;CC2500_B1.c: 282: set_TimeoutCleared();
 17069  1ED6  319B  239B  319E   	fcall	_set_TimeoutCleared
 17070                           
 17071                           ;CC2500_B1.c: 283: CC2500_WriteByte();
 17072  1ED9  319D  25D4         	fcall	_CC2500_WriteByte
 17073                           
 17074                           ;CC2500_B1.c: 284: RC4 = 1;
 17075  1EDB  0020               	movlb	0	; select bank0
 17076  1EDC  160E               	bsf	14,4	;volatile
 17077  1EDD  0008               	return
 17078  1EDE                     __end_of_CC2500_WriteCommand:	
 17079                           
 17080                           	psect	text118
 17081  1B9B                     __ptext118:	
 17082 ;; *************** function _set_TimeoutCleared *****************
 17083 ;; Defined at:
 17084 ;;		line 218 in file "../src/Main_B1.c"
 17085 ;; Parameters:    Size  Location     Type
 17086 ;;		None
 17087 ;; Auto vars:     Size  Location     Type
 17088 ;;		None
 17089 ;; Return value:  Size  Location     Type
 17090 ;;		None               void
 17091 ;; Registers used:
 17092 ;;		status,2
 17093 ;; Tracked objects:
 17094 ;;		On entry : 0/0
 17095 ;;		On exit  : 0/0
 17096 ;;		Unchanged: 0/0
 17097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17102 ;;Total ram usage:        0 bytes
 17103 ;; Hardware stack levels used:    1
 17104 ;; Hardware stack levels required when called:    5
 17105 ;; This function calls:
 17106 ;;		Nothing
 17107 ;; This function is called by:
 17108 ;;		_CC2500_TxData
 17109 ;;		_CC2500_RxData
 17110 ;;		_CC2500_PowerRST
 17111 ;;		_CC2500_WriteREG
 17112 ;;		_CC2500_WriteCommand
 17113 ;;		_CC2500_ReadStatus
 17114 ;;		_getAD
 17115 ;;		_TouchPower
 17116 ;;		_CC2500_ReadREG
 17117 ;; This function uses a non-reentrant model
 17118 ;;
 17119                           
 17120                           
 17121                           ;psect for function _set_TimeoutCleared
 17122  1B9B                     _set_TimeoutCleared:	
 17123                           
 17124                           ;Main_B1.c: 219: myMain.Timeout = 0;
 17125                           
 17126                           ;incstack = 0
 17127                           ; Regs used in _set_TimeoutCleared: [status,2]
 17128  1B9B  0021               	movlb	1	; select bank1
 17129  1B9C  112F               	bcf	(_myMain^(0+128)+15),2
 17130                           
 17131                           ;Main_B1.c: 220: myMain.Timeout_Counter = 0;
 17132  1B9D  01B4               	clrf	(_myMain^(0+128)+20)
 17133  1B9E  01B5               	clrf	((_myMain+1)^(0+128)+20)
 17134  1B9F  0008               	return
 17135  1BA0                     __end_of_set_TimeoutCleared:	
 17136                           
 17137                           	psect	text119
 17138  1E95                     __ptext119:	
 17139 ;; *************** function _Timeout_Counter *****************
 17140 ;; Defined at:
 17141 ;;		line 209 in file "../src/Main_B1.c"
 17142 ;; Parameters:    Size  Location     Type
 17143 ;;		None
 17144 ;; Auto vars:     Size  Location     Type
 17145 ;;		None
 17146 ;; Return value:  Size  Location     Type
 17147 ;;		None               void
 17148 ;; Registers used:
 17149 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17150 ;; Tracked objects:
 17151 ;;		On entry : 0/0
 17152 ;;		On exit  : 0/0
 17153 ;;		Unchanged: 0/0
 17154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17159 ;;Total ram usage:        0 bytes
 17160 ;; Hardware stack levels used:    1
 17161 ;; Hardware stack levels required when called:    5
 17162 ;; This function calls:
 17163 ;;		Nothing
 17164 ;; This function is called by:
 17165 ;;		_CC2500_TxData
 17166 ;;		_CC2500_RxData
 17167 ;;		_CC2500_PowerRST
 17168 ;;		_CC2500_WriteREG
 17169 ;;		_CC2500_WriteCommand
 17170 ;;		_CC2500_ReadStatus
 17171 ;;		_getAD
 17172 ;;		_TouchPower
 17173 ;;		_CC2500_ReadREG
 17174 ;; This function uses a non-reentrant model
 17175 ;;
 17176                           
 17177                           
 17178                           ;psect for function _Timeout_Counter
 17179  1E95                     _Timeout_Counter:	
 17180                           
 17181                           ;Main_B1.c: 210: myMain.Timeout_Counter++;
 17182                           
 17183                           ;incstack = 0
 17184                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17185  1E95  3001               	movlw	1
 17186  1E96  0021               	movlb	1	; select bank1
 17187  1E97  07B4               	addwf	(_myMain^(0+128)+20),f
 17188  1E98  3000               	movlw	0
 17189  1E99  3DB5               	addwfc	((_myMain+1)^(0+128)+20),f
 17190                           
 17191                           ;Main_B1.c: 211: if (myMain.Timeout_Counter == 10000) {
 17192  1E9A  3014               	movlw	20
 17193  1E9B  3EA0               	addlw	_myMain& (0+255)
 17194  1E9C  0086               	movwf	6
 17195  1E9D  0187               	clrf	7
 17196  1E9E  3F40               	moviw [0]fsr1
 17197  1E9F  3A10               	xorlw	16
 17198  1EA0  1D03               	skipz
 17199  1EA1  2EA4               	goto	u5175
 17200  1EA2  3F41               	moviw [1]fsr1
 17201  1EA3  3A27               	xorlw	39
 17202  1EA4                     u5175:	
 17203  1EA4  1D03               	skipz
 17204  1EA5  0008               	return
 17205                           
 17206                           ;Main_B1.c: 212: myMain.Timeout_Counter = 0;
 17207  1EA6  01B4               	clrf	(_myMain^(0+128)+20)
 17208  1EA7  01B5               	clrf	((_myMain+1)^(0+128)+20)
 17209                           
 17210                           ;Main_B1.c: 213: myMain.Timeout = 1;
 17211  1EA8  152F               	bsf	(_myMain^(0+128)+15),2
 17212                           
 17213                           ;Main_B1.c: 214: RB5 = RB5 == 1 ? 0 : 1;
 17214  1EA9  3020               	movlw	32
 17215  1EAA  0020               	movlb	0	; select bank0
 17216  1EAB  068D               	xorwf	13,f
 17217  1EAC  0008               	return
 17218  1EAD                     __end_of_Timeout_Counter:	
 17219                           
 17220                           	psect	text120
 17221  1DD4                     __ptext120:	
 17222 ;; *************** function _CC2500_WriteByte *****************
 17223 ;; Defined at:
 17224 ;;		line 211 in file "../src/CC2500_B1.c"
 17225 ;; Parameters:    Size  Location     Type
 17226 ;;		None
 17227 ;; Auto vars:     Size  Location     Type
 17228 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17229 ;; Return value:  Size  Location     Type
 17230 ;;		None               void
 17231 ;; Registers used:
 17232 ;;		wreg, status,2, status,0
 17233 ;; Tracked objects:
 17234 ;;		On entry : 0/0
 17235 ;;		On exit  : 0/0
 17236 ;;		Unchanged: 0/0
 17237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17241 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17242 ;;Total ram usage:        2 bytes
 17243 ;; Hardware stack levels used:    1
 17244 ;; Hardware stack levels required when called:    5
 17245 ;; This function calls:
 17246 ;;		Nothing
 17247 ;; This function is called by:
 17248 ;;		_CC2500_TxData
 17249 ;;		_CC2500_RxData
 17250 ;;		_CC2500_PowerRST
 17251 ;;		_CC2500_WriteREG
 17252 ;;		_CC2500_WriteCommand
 17253 ;;		_CC2500_ReadStatus
 17254 ;;		_CC2500_ReadREG
 17255 ;; This function uses a non-reentrant model
 17256 ;;
 17257                           
 17258                           
 17259                           ;psect for function _CC2500_WriteByte
 17260  1DD4                     _CC2500_WriteByte:	
 17261                           
 17262                           ;CC2500_B1.c: 212: unsigned char loop_a;
 17263                           ;CC2500_B1.c: 213: for (loop_a = 0; loop_a < 8; loop_a++) {
 17264                           
 17265                           ;incstack = 0
 17266                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17267  1DD4  0020               	movlb	0	; select bank0
 17268  1DD5  01A1               	clrf	CC2500_WriteByte@loop_a
 17269  1DD6                     L12:	
 17270  1DD6  3008               	movlw	8
 17271  1DD7  0221               	subwf	CC2500_WriteByte@loop_a,w
 17272  1DD8  1803               	btfsc	3,0
 17273  1DD9  0008               	return
 17274                           
 17275                           ;CC2500_B1.c: 214: if (SPI0Buffer & 0x80)
 17276  1DDA  1FFC               	btfss	_SPI0Buffer,7
 17277  1DDB  2DDE               	goto	l332
 17278                           
 17279                           ;CC2500_B1.c: 215: RC0 = 1;
 17280  1DDC  140E               	bsf	14,0	;volatile
 17281  1DDD  2DDF               	goto	l333
 17282  1DDE                     l332:	
 17283                           
 17284                           ;CC2500_B1.c: 216: else
 17285                           ;CC2500_B1.c: 217: RC0 = 0;
 17286  1DDE  100E               	bcf	14,0	;volatile
 17287  1DDF                     l333:	
 17288                           
 17289                           ;CC2500_B1.c: 218: RC1 = 1;
 17290  1DDF  148E               	bsf	14,1	;volatile
 17291                           
 17292                           ;CC2500_B1.c: 219: SPI0Buffer <<= 1;
 17293  1DE0  1003               	clrc
 17294  1DE1  0DFC               	rlf	_SPI0Buffer,f
 17295                           
 17296                           ;CC2500_B1.c: 220: RC1 = 0;
 17297  1DE2  108E               	bcf	14,1	;volatile
 17298  1DE3  3001               	movlw	1
 17299  1DE4  00A0               	movwf	??_CC2500_WriteByte
 17300  1DE5  0820               	movf	??_CC2500_WriteByte,w
 17301  1DE6  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17302  1DE7  2DD6               	goto	L12
 17303  1DE8                     __end_of_CC2500_WriteByte:	
 17304                           
 17305                           	psect	text121
 17306  1575                     __ptext121:	
 17307 ;; *************** function _Buzzer_Main *****************
 17308 ;; Defined at:
 17309 ;;		line 46 in file "../src/Buzzer_B1.c"
 17310 ;; Parameters:    Size  Location     Type
 17311 ;;		None
 17312 ;; Auto vars:     Size  Location     Type
 17313 ;;		None
 17314 ;; Return value:  Size  Location     Type
 17315 ;;		None               void
 17316 ;; Registers used:
 17317 ;;		wreg, status,2, status,0
 17318 ;; Tracked objects:
 17319 ;;		On entry : 0/0
 17320 ;;		On exit  : 0/0
 17321 ;;		Unchanged: 0/0
 17322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17326 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17327 ;;Total ram usage:        1 bytes
 17328 ;; Hardware stack levels used:    1
 17329 ;; Hardware stack levels required when called:    5
 17330 ;; This function calls:
 17331 ;;		Nothing
 17332 ;; This function is called by:
 17333 ;;		_main
 17334 ;; This function uses a non-reentrant model
 17335 ;;
 17336                           
 17337                           
 17338                           ;psect for function _Buzzer_Main
 17339  1575                     _Buzzer_Main:	
 17340                           
 17341                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17342                           
 17343                           ;incstack = 0
 17344                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17345  1575  0021               	movlb	1	; select bank1
 17346  1576  1CCB               	btfss	_Buz1^(0+128),1
 17347  1577  0008               	return
 17348                           
 17349                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17350  1578  3001               	movlw	1
 17351  1579  07CC               	addwf	(_Buz1^(0+128)+1),f
 17352  157A  3000               	movlw	0
 17353  157B  3DCD               	addwfc	((_Buz1+1)^(0+128)+1),f
 17354                           
 17355                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17356  157C  0852               	movf	((_Buz1+1)^(0+128)+6),w
 17357  157D  024D               	subwf	((_Buz1+1)^(0+128)+1),w
 17358  157E  1D03               	skipz
 17359  157F  2D82               	goto	u7255
 17360  1580  0851               	movf	(_Buz1^(0+128)+6),w
 17361  1581  024C               	subwf	(_Buz1^(0+128)+1),w
 17362  1582                     u7255:	
 17363  1582  1C03               	skipc
 17364  1583  0008               	return
 17365                           
 17366                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17367  1584  01CC               	clrf	(_Buz1^(0+128)+1)
 17368  1585  01CD               	clrf	((_Buz1+1)^(0+128)+1)
 17369                           
 17370                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17371  1586  12CB               	bcf	_Buz1^(0+128),5
 17372  1587  0020               	movlb	0	; select bank0
 17373  1588  1D8D               	btfss	13,3	;volatile
 17374  1589  2D8C               	goto	l7517
 17375  158A  0021               	movlb	1	; select bank1
 17376  158B  16CB               	bsf	_Buz1^(0+128),5
 17377  158C                     l7517:	
 17378                           
 17379                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17380  158C  0021               	movlb	1	; select bank1
 17381  158D  1ACB               	btfsc	_Buz1^(0+128),5
 17382  158E  2DB8               	goto	l108
 17383                           
 17384                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17385  158F  08CE               	movf	(_Buz1^(0+128)+3),f
 17386  1590  1D03               	skipz
 17387  1591  2DB4               	goto	l109
 17388                           
 17389                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17390  1592  1DCB               	btfss	_Buz1^(0+128),3
 17391  1593  2DA2               	goto	l110
 17392                           
 17393                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17394  1594  11CB               	bcf	_Buz1^(0+128),3
 17395                           
 17396                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17397  1595  084F               	movf	(_Buz1^(0+128)+4),w
 17398  1596  0020               	movlb	0	; select bank0
 17399  1597  00A0               	movwf	??_Buzzer_Main
 17400  1598  0820               	movf	??_Buzzer_Main,w
 17401  1599  0021               	movlb	1	; select bank1
 17402  159A  00CE               	movwf	(_Buz1^(0+128)+3)
 17403                           
 17404                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17405  159B  0854               	movf	((_Buz1+1)^(0+128)+8),w
 17406  159C  01D2               	clrf	((_Buz1+1)^(0+128)+6)
 17407  159D  07D2               	addwf	((_Buz1+1)^(0+128)+6),f
 17408  159E  0853               	movf	(_Buz1^(0+128)+8),w
 17409  159F  01D1               	clrf	(_Buz1^(0+128)+6)
 17410  15A0  07D1               	addwf	(_Buz1^(0+128)+6),f
 17411                           
 17412                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17413  15A1  0008               	return
 17414  15A2                     l110:	
 17415  15A2  1E4B               	btfss	_Buz1^(0+128),4
 17416  15A3  2DB2               	goto	l112
 17417                           
 17418                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17419  15A4  124B               	bcf	_Buz1^(0+128),4
 17420                           
 17421                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17422  15A5  0850               	movf	(_Buz1^(0+128)+5),w
 17423  15A6  0020               	movlb	0	; select bank0
 17424  15A7  00A0               	movwf	??_Buzzer_Main
 17425  15A8  0820               	movf	??_Buzzer_Main,w
 17426  15A9  0021               	movlb	1	; select bank1
 17427  15AA  00CE               	movwf	(_Buz1^(0+128)+3)
 17428                           
 17429                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17430  15AB  0856               	movf	((_Buz1+1)^(0+128)+10),w
 17431  15AC  01D2               	clrf	((_Buz1+1)^(0+128)+6)
 17432  15AD  07D2               	addwf	((_Buz1+1)^(0+128)+6),f
 17433  15AE  0855               	movf	(_Buz1^(0+128)+10),w
 17434  15AF  01D1               	clrf	(_Buz1^(0+128)+6)
 17435  15B0  07D1               	addwf	(_Buz1^(0+128)+6),f
 17436                           
 17437                           ;Buzzer_B1.c: 62: } else {
 17438  15B1  0008               	return
 17439  15B2                     l112:	
 17440                           
 17441                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17442  15B2  10CB               	bcf	_Buz1^(0+128),1
 17443                           
 17444                           ;Buzzer_B1.c: 64: }
 17445                           ;Buzzer_B1.c: 65: } else {
 17446  15B3  0008               	return
 17447  15B4                     l109:	
 17448                           
 17449                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17450  15B4  16CB               	bsf	_Buz1^(0+128),5
 17451                           
 17452                           ;Buzzer_B1.c: 68: RB3 = 1;
 17453  15B5  0020               	movlb	0	; select bank0
 17454  15B6  158D               	bsf	13,3	;volatile
 17455                           
 17456                           ;Buzzer_B1.c: 69: }
 17457                           ;Buzzer_B1.c: 70: } else {
 17458  15B7  0008               	return
 17459  15B8                     l108:	
 17460                           
 17461                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17462  15B8  12CB               	bcf	_Buz1^(0+128),5
 17463                           
 17464                           ;Buzzer_B1.c: 73: RB3 = 0;
 17465  15B9  0020               	movlb	0	; select bank0
 17466  15BA  118D               	bcf	13,3	;volatile
 17467                           
 17468                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17469  15BB  3001               	movlw	1
 17470  15BC  0021               	movlb	1	; select bank1
 17471  15BD  02CE               	subwf	(_Buz1^(0+128)+3),f
 17472  15BE  0008               	return
 17473  15BF                     __end_of_Buzzer_Main:	
 17474                           
 17475                           	psect	text122
 17476  1B82                     __ptext122:	
 17477 ;; *************** function _Buzzer_Initialization *****************
 17478 ;; Defined at:
 17479 ;;		line 11 in file "../src/Buzzer_B1.c"
 17480 ;; Parameters:    Size  Location     Type
 17481 ;;		None
 17482 ;; Auto vars:     Size  Location     Type
 17483 ;;		None
 17484 ;; Return value:  Size  Location     Type
 17485 ;;		None               void
 17486 ;; Registers used:
 17487 ;;		None
 17488 ;; Tracked objects:
 17489 ;;		On entry : 0/0
 17490 ;;		On exit  : 0/0
 17491 ;;		Unchanged: 0/0
 17492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17497 ;;Total ram usage:        0 bytes
 17498 ;; Hardware stack levels used:    1
 17499 ;; Hardware stack levels required when called:    5
 17500 ;; This function calls:
 17501 ;;		Nothing
 17502 ;; This function is called by:
 17503 ;;		_main
 17504 ;; This function uses a non-reentrant model
 17505 ;;
 17506                           
 17507                           
 17508                           ;psect for function _Buzzer_Initialization
 17509  1B82                     _Buzzer_Initialization:	
 17510                           
 17511                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17512                           
 17513                           ;incstack = 0
 17514                           ; Regs used in _Buzzer_Initialization: []
 17515  1B82  0021               	movlb	1	; select bank1
 17516  1B83  144B               	bsf	_Buz1^(0+128),0
 17517  1B84  0008               	return
 17518  1B85                     __end_of_Buzzer_Initialization:	
 17519                           
 17520                           	psect	intentry
 17521  0004                     __pintentry:	
 17522 ;; *************** function _ISR *****************
 17523 ;; Defined at:
 17524 ;;		line 107 in file "../src/MCU_B1.c"
 17525 ;; Parameters:    Size  Location     Type
 17526 ;;		None
 17527 ;; Auto vars:     Size  Location     Type
 17528 ;;		None
 17529 ;; Return value:  Size  Location     Type
 17530 ;;		None               void
 17531 ;; Registers used:
 17532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17533 ;; Tracked objects:
 17534 ;;		On entry : 0/0
 17535 ;;		On exit  : 0/0
 17536 ;;		Unchanged: 0/0
 17537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17541 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17542 ;;Total ram usage:        1 bytes
 17543 ;; Hardware stack levels used:    1
 17544 ;; Hardware stack levels required when called:    4
 17545 ;; This function calls:
 17546 ;;		_INT_ISR
 17547 ;;		_IOC_ISR
 17548 ;;		_TMR0_ISR
 17549 ;; This function is called by:
 17550 ;;		Interrupt level 1
 17551 ;; This function uses a non-reentrant model
 17552 ;;
 17553                           
 17554  0004                     _ISR:	
 17555                           
 17556                           ;incstack = 0
 17557                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17558  0004  147E               	bsf	126,0	;set compiler interrupt flag
 17559  0005  3180               	pagesel	$
 17560  0006  0020               	movlb	0	; select bank0
 17561  0007  087F               	movf	127,w
 17562  0008  00F7               	movwf	??_ISR
 17563                           
 17564                           ;MCU_B1.c: 109: IOC_ISR();
 17565  0009  319C  2466  3180   	fcall	_IOC_ISR
 17566                           
 17567                           ;MCU_B1.c: 111: TMR0_ISR();
 17568  000C  3191  2183  3180   	fcall	_TMR0_ISR
 17569                           
 17570                           ;MCU_B1.c: 113: ;;
 17571                           ;MCU_B1.c: 117: INT_ISR();
 17572  000F  319C  2404         	fcall	_INT_ISR
 17573  0011  0877               	movf	??_ISR,w
 17574  0012  0020               	movlb	0	; select bank0
 17575  0013  00FF               	movwf	127
 17576  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 17577  0015  0009               	retfie
 17578  0016                     __end_of_ISR:	
 17579                           
 17580                           	psect	text124
 17581  1183                     __ptext124:	
 17582 ;; *************** function _TMR0_ISR *****************
 17583 ;; Defined at:
 17584 ;;		line 135 in file "../src/MCU_B1.c"
 17585 ;; Parameters:    Size  Location     Type
 17586 ;;		None
 17587 ;; Auto vars:     Size  Location     Type
 17588 ;;		None
 17589 ;; Return value:  Size  Location     Type
 17590 ;;		None               void
 17591 ;; Registers used:
 17592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17593 ;; Tracked objects:
 17594 ;;		On entry : 0/0
 17595 ;;		On exit  : 0/0
 17596 ;;		Unchanged: 0/0
 17597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17602 ;;Total ram usage:        0 bytes
 17603 ;; Hardware stack levels used:    1
 17604 ;; Hardware stack levels required when called:    2
 17605 ;; This function calls:
 17606 ;;		_setDimmerLights_IntrControl
 17607 ;; This function is called by:
 17608 ;;		_ISR
 17609 ;; This function uses a non-reentrant model
 17610 ;;
 17611                           
 17612                           
 17613                           ;psect for function _TMR0_ISR
 17614  1183                     _TMR0_ISR:	
 17615                           
 17616                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 17617                           
 17618                           ;incstack = 0
 17619                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17620  1183  1E8B               	btfss	11,5	;volatile
 17621  1184  0008               	return
 17622  1185  1D0B               	btfss	11,2	;volatile
 17623  1186  0008               	return
 17624                           
 17625                           ;MCU_B1.c: 137: TMR0 = (256-190);
 17626  1187  3042               	movlw	66
 17627  1188  0020               	movlb	0	; select bank0
 17628  1189  0095               	movwf	21	;volatile
 17629                           
 17630                           ;MCU_B1.c: 138: TMR0IF = 0;
 17631  118A  110B               	bcf	11,2	;volatile
 17632                           
 17633                           ;MCU_B1.c: 143: setDimmerLights_IntrControl(1);
 17634  118B  3001               	movlw	1
 17635  118C  3180  204E  3191   	fcall	_setDimmerLights_IntrControl
 17636                           
 17637                           ;MCU_B1.c: 148: setDimmerLights_IntrControl(2);
 17638  118F  3002               	movlw	2
 17639  1190  3180  204E  3191   	fcall	_setDimmerLights_IntrControl
 17640                           
 17641                           ;MCU_B1.c: 159: Timer0.Count++;
 17642  1193  3001               	movlw	1
 17643  1194  0022               	movlb	2	; select bank2
 17644  1195  07A1               	addwf	(_Timer0^(0+256)+1),f
 17645  1196  3000               	movlw	0
 17646  1197  3DA2               	addwfc	((_Timer0+1)^(0+256)+1),f
 17647                           
 17648                           ;MCU_B1.c: 160: if (Timer0.Count == 100) {
 17649  1198  3001               	movlw	1
 17650  1199  3E20               	addlw	_Timer0& (0+255)
 17651  119A  0086               	movwf	6
 17652  119B  3001               	movlw	1	; select bank2/3
 17653  119C  0087               	movwf	7
 17654  119D  3F40               	moviw [0]fsr1
 17655  119E  3A64               	xorlw	100
 17656  119F  1D03               	skipz
 17657  11A0  29A3               	goto	u736_25
 17658  11A1  3F41               	moviw [1]fsr1
 17659  11A2  3A00               	xorlw	0
 17660  11A3                     u736_25:	
 17661  11A3  1D03               	skipz
 17662  11A4  0008               	return
 17663                           
 17664                           ;MCU_B1.c: 161: Timer0.Count = 0;
 17665  11A5  01A1               	clrf	(_Timer0^(0+256)+1)
 17666  11A6  01A2               	clrf	((_Timer0+1)^(0+256)+1)
 17667                           
 17668                           ;MCU_B1.c: 162: myMain.T0_Timerout = 1;
 17669  11A7  0021               	movlb	1	; select bank1
 17670  11A8  14A0               	bsf	_myMain^(0+128),1
 17671  11A9  0008               	return
 17672  11AA                     __end_of_TMR0_ISR:	
 17673                           
 17674                           	psect	text125
 17675  004E                     __ptext125:	
 17676 ;; *************** function _setDimmerLights_IntrControl *****************
 17677 ;; Defined at:
 17678 ;;		line 87 in file "../src/Dimmer_B1.c"
 17679 ;; Parameters:    Size  Location     Type
 17680 ;;  lights          1    wreg     unsigned char 
 17681 ;; Auto vars:     Size  Location     Type
 17682 ;;  lights          1    6[COMMON] unsigned char 
 17683 ;; Return value:  Size  Location     Type
 17684 ;;		None               void
 17685 ;; Registers used:
 17686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17687 ;; Tracked objects:
 17688 ;;		On entry : 0/0
 17689 ;;		On exit  : 0/0
 17690 ;;		Unchanged: 0/0
 17691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17694 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17695 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17696 ;;Total ram usage:        5 bytes
 17697 ;; Hardware stack levels used:    1
 17698 ;; Hardware stack levels required when called:    1
 17699 ;; This function calls:
 17700 ;;		_DimmerIntrPointSelect
 17701 ;;		i1_setLoad_StatusOff
 17702 ;; This function is called by:
 17703 ;;		_TMR0_ISR
 17704 ;; This function uses a non-reentrant model
 17705 ;;
 17706                           
 17707                           
 17708                           ;psect for function _setDimmerLights_IntrControl
 17709  004E                     _setDimmerLights_IntrControl:	
 17710                           
 17711                           ;incstack = 0
 17712                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17713                           ;setDimmerLights_IntrControl@lights stored from wreg
 17714  004E  00F6               	movwf	setDimmerLights_IntrControl@lights
 17715                           
 17716                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 17717  004F  0876               	movf	setDimmerLights_IntrControl@lights,w
 17718  0050  319D  2577  3180   	fcall	_DimmerIntrPointSelect
 17719                           
 17720                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 17721  0053  087A               	movf	_DimmerLightsIntr,w
 17722  0054  0086               	movwf	6
 17723  0055  3001               	movlw	1	; select bank2/3
 17724  0056  0087               	movwf	7
 17725  0057  1C01               	btfss	1,0
 17726  0058  28B3               	goto	i1l6985
 17727                           
 17728                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 17729  0059  3001               	movlw	1
 17730  005A  00F2               	movwf	??_setDimmerLights_IntrControl
 17731  005B  087A               	movf	_DimmerLightsIntr,w
 17732  005C  3E03               	addlw	3
 17733  005D  0086               	movwf	6
 17734  005E  3001               	movlw	1	; select bank2/3
 17735  005F  0087               	movwf	7
 17736  0060  0872               	movf	??_setDimmerLights_IntrControl,w
 17737  0061  0781               	addwf	1,f
 17738                           
 17739                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 17740  0062  0021               	movlb	1	; select bank1
 17741  0063  085F               	movf	_Dimmer^(0+128),w
 17742  0064  3E02               	addlw	2
 17743  0065  0086               	movwf	6
 17744  0066  0187               	clrf	7
 17745  0067  0801               	movf	1,w
 17746  0068  00F2               	movwf	??_setDimmerLights_IntrControl
 17747  0069  01F3               	clrf	??_setDimmerLights_IntrControl+1
 17748  006A  09F2               	comf	??_setDimmerLights_IntrControl,f
 17749  006B  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 17750  006C  0AF2               	incf	??_setDimmerLights_IntrControl,f
 17751  006D  1903               	skipnz
 17752  006E  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 17753  006F  087A               	movf	_DimmerLightsIntr,w
 17754  0070  3E04               	addlw	4
 17755  0071  0086               	movwf	6
 17756  0072  3001               	movlw	1	; select bank2/3
 17757  0073  0087               	movwf	7
 17758  0074  0801               	movf	1,w
 17759  0075  0772               	addwf	??_setDimmerLights_IntrControl,w
 17760  0076  00F4               	movwf	??_setDimmerLights_IntrControl+2
 17761  0077  0873               	movf	??_setDimmerLights_IntrControl+1,w
 17762  0078  1803               	skipnc
 17763  0079  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 17764  007A  00F5               	movwf	??_setDimmerLights_IntrControl+3
 17765  007B  087A               	movf	_DimmerLightsIntr,w
 17766  007C  3E03               	addlw	3
 17767  007D  0086               	movwf	6
 17768  007E  3001               	movlw	1	; select bank2/3
 17769  007F  0087               	movwf	7
 17770  0080  0875               	movf	??_setDimmerLights_IntrControl+3,w
 17771  0081  3A80               	xorlw	128
 17772  0082  3C80               	sublw	128
 17773  0083  1D03               	skipz
 17774  0084  2887               	goto	u621_25
 17775  0085  0874               	movf	??_setDimmerLights_IntrControl+2,w
 17776  0086  0201               	subwf	1,w
 17777  0087                     u621_25:	
 17778  0087  1C03               	skipc
 17779  0088  29C2               	goto	i1l7049
 17780                           
 17781                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 17782  0089  087A               	movf	_DimmerLightsIntr,w
 17783  008A  3E03               	addlw	3
 17784  008B  0086               	movwf	6
 17785  008C  3001               	movlw	1	; select bank2/3
 17786  008D  0087               	movwf	7
 17787  008E  0181               	clrf	1
 17788                           
 17789                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 17790  008F  087A               	movf	_DimmerLightsIntr,w
 17791  0090  0086               	movwf	6
 17792  0091  3001               	movlw	1	; select bank2/3
 17793  0092  0087               	movwf	7
 17794  0093  1001               	bcf	1,0
 17795                           
 17796                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 17797  0094  087A               	movf	_DimmerLightsIntr,w
 17798  0095  0086               	movwf	6
 17799  0096  3001               	movlw	1	; select bank2/3
 17800  0097  0087               	movwf	7
 17801  0098  1F01               	btfss	1,6
 17802  0099  29C2               	goto	i1l7049
 17803                           
 17804                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 17805  009A  087A               	movf	_DimmerLightsIntr,w
 17806  009B  3E08               	addlw	8
 17807  009C  0086               	movwf	6
 17808  009D  3001               	movlw	1	; select bank2/3
 17809  009E  0087               	movwf	7
 17810  009F  1401               	bsf	1,0
 17811                           
 17812                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 17813  00A0  087A               	movf	_DimmerLightsIntr,w
 17814  00A1  3E08               	addlw	8
 17815  00A2  0086               	movwf	6
 17816  00A3  3001               	movlw	1	; select bank2/3
 17817  00A4  0087               	movwf	7
 17818  00A5  1681               	bsf	1,5
 17819                           
 17820                           ;Dimmer_B1.c: 100: if (lights == 1) {
 17821  00A6  0876               	movf	setDimmerLights_IntrControl@lights,w
 17822  00A7  3A01               	xorlw	1
 17823  00A8  1D03               	skipz
 17824  00A9  28AC               	goto	i1l6981
 17825                           
 17826                           ;Dimmer_B1.c: 101: RA7 = 1;
 17827  00AA  0020               	movlb	0	; select bank0
 17828  00AB  178C               	bsf	12,7	;volatile
 17829  00AC                     i1l6981:	
 17830                           ;Dimmer_B1.c: 102: ;;
 17831                           
 17832                           
 17833                           ;Dimmer_B1.c: 103: }
 17834                           ;Dimmer_B1.c: 106: if (lights == 2) {
 17835  00AC  0876               	movf	setDimmerLights_IntrControl@lights,w
 17836  00AD  3A02               	xorlw	2
 17837  00AE  1D03               	skipz
 17838  00AF  29C2               	goto	i1l7049
 17839                           
 17840                           ;Dimmer_B1.c: 107: RB4 = 1;
 17841  00B0  0020               	movlb	0	; select bank0
 17842  00B1  160D               	bsf	13,4	;volatile
 17843                           
 17844                           ;Dimmer_B1.c: 108: }
 17845                           ;Dimmer_B1.c: 115: }
 17846                           ;Dimmer_B1.c: 116: }
 17847                           ;Dimmer_B1.c: 117: } else {
 17848  00B2  29C2               	goto	i1l7049
 17849  00B3                     i1l6985:	
 17850                           
 17851                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 17852  00B3  087A               	movf	_DimmerLightsIntr,w
 17853  00B4  3E08               	addlw	8
 17854  00B5  0086               	movwf	6
 17855  00B6  3001               	movlw	1	; select bank2/3
 17856  00B7  0087               	movwf	7
 17857  00B8  1C01               	btfss	1,0
 17858  00B9  29C2               	goto	i1l7049
 17859                           
 17860                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 17861  00BA  087A               	movf	_DimmerLightsIntr,w
 17862  00BB  3E08               	addlw	8
 17863  00BC  0086               	movwf	6
 17864  00BD  3001               	movlw	1	; select bank2/3
 17865  00BE  0087               	movwf	7
 17866  00BF  1001               	bcf	1,0
 17867                           
 17868                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 17869  00C0  087A               	movf	_DimmerLightsIntr,w
 17870  00C1  0086               	movwf	6
 17871  00C2  3001               	movlw	1	; select bank2/3
 17872  00C3  0087               	movwf	7
 17873  00C4  1C81               	btfss	1,1
 17874  00C5  29C2               	goto	i1l7049
 17875                           
 17876                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 17877  00C6  3001               	movlw	1
 17878  00C7  00F2               	movwf	??_setDimmerLights_IntrControl
 17879  00C8  0A7A               	incf	_DimmerLightsIntr,w
 17880  00C9  0086               	movwf	6
 17881  00CA  3001               	movlw	1	; select bank2/3
 17882  00CB  0087               	movwf	7
 17883  00CC  0872               	movf	??_setDimmerLights_IntrControl,w
 17884  00CD  0781               	addwf	1,f
 17885                           
 17886                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17887  00CE  0A7A               	incf	_DimmerLightsIntr,w
 17888  00CF  0086               	movwf	6
 17889  00D0  3001               	movlw	1	; select bank2/3
 17890  00D1  0087               	movwf	7
 17891  00D2  087A               	movf	_DimmerLightsIntr,w
 17892  00D3  3E02               	addlw	2
 17893  00D4  0084               	movwf	4
 17894  00D5  3001               	movlw	1	; select bank2/3
 17895  00D6  0085               	movwf	5
 17896  00D7  0800               	movf	0,w
 17897  00D8  0201               	subwf	1,w
 17898  00D9  1C03               	skipc
 17899  00DA  29C2               	goto	i1l7049
 17900                           
 17901                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 17902  00DB  0A7A               	incf	_DimmerLightsIntr,w
 17903  00DC  0086               	movwf	6
 17904  00DD  3001               	movlw	1	; select bank2/3
 17905  00DE  0087               	movwf	7
 17906  00DF  0181               	clrf	1
 17907                           
 17908                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 17909  00E0  087A               	movf	_DimmerLightsIntr,w
 17910  00E1  0086               	movwf	6
 17911  00E2  3001               	movlw	1	; select bank2/3
 17912  00E3  0087               	movwf	7
 17913  00E4  1D81               	btfss	1,3
 17914  00E5  291C               	goto	i1l7011
 17915                           
 17916                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 17917  00E6  087A               	movf	_DimmerLightsIntr,w
 17918  00E7  0086               	movwf	6
 17919  00E8  3001               	movlw	1	; select bank2/3
 17920  00E9  0087               	movwf	7
 17921  00EA  1A01               	btfsc	1,4
 17922  00EB  2903               	goto	i1l7005
 17923                           
 17924                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 17925  00EC  087A               	movf	_DimmerLightsIntr,w
 17926  00ED  3E04               	addlw	4
 17927  00EE  0086               	movwf	6
 17928  00EF  3001               	movlw	1	; select bank2/3
 17929  00F0  0087               	movwf	7
 17930  00F1  3021               	movlw	33
 17931  00F2  0201               	subwf	1,w
 17932  00F3  1C03               	skipc
 17933  00F4  28FD               	goto	i1l7003
 17934                           
 17935                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 17936  00F5  087A               	movf	_DimmerLightsIntr,w
 17937  00F6  3E04               	addlw	4
 17938  00F7  0086               	movwf	6
 17939  00F8  3001               	movlw	1	; select bank2/3
 17940  00F9  0087               	movwf	7
 17941  00FA  3001               	movlw	1
 17942  00FB  0281               	subwf	1,f
 17943                           
 17944                           ;Dimmer_B1.c: 128: } else {
 17945  00FC  29C2               	goto	i1l7049
 17946  00FD                     i1l7003:	
 17947                           
 17948                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 17949  00FD  087A               	movf	_DimmerLightsIntr,w
 17950  00FE  0086               	movwf	6
 17951  00FF  3001               	movlw	1	; select bank2/3
 17952  0100  0087               	movwf	7
 17953  0101  1601               	bsf	1,4
 17954                           
 17955                           ;Dimmer_B1.c: 130: }
 17956                           ;Dimmer_B1.c: 131: } else {
 17957  0102  29C2               	goto	i1l7049
 17958  0103                     i1l7005:	
 17959                           
 17960                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17961  0103  087A               	movf	_DimmerLightsIntr,w
 17962  0104  3E04               	addlw	4
 17963  0105  0086               	movwf	6
 17964  0106  3001               	movlw	1	; select bank2/3
 17965  0107  0087               	movwf	7
 17966  0108  303C               	movlw	60
 17967  0109  0201               	subwf	1,w
 17968  010A  1803               	skipnc
 17969  010B  2916               	goto	i1l7009
 17970                           
 17971                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 17972  010C  3001               	movlw	1
 17973  010D  00F2               	movwf	??_setDimmerLights_IntrControl
 17974  010E  087A               	movf	_DimmerLightsIntr,w
 17975  010F  3E04               	addlw	4
 17976  0110  0086               	movwf	6
 17977  0111  3001               	movlw	1	; select bank2/3
 17978  0112  0087               	movwf	7
 17979  0113  0872               	movf	??_setDimmerLights_IntrControl,w
 17980  0114  0781               	addwf	1,f
 17981                           
 17982                           ;Dimmer_B1.c: 134: } else {
 17983  0115  29C2               	goto	i1l7049
 17984  0116                     i1l7009:	
 17985                           
 17986                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 17987  0116  087A               	movf	_DimmerLightsIntr,w
 17988  0117  0086               	movwf	6
 17989  0118  3001               	movlw	1	; select bank2/3
 17990  0119  0087               	movwf	7
 17991  011A  1201               	bcf	1,4
 17992                           
 17993                           ;Dimmer_B1.c: 136: }
 17994                           ;Dimmer_B1.c: 137: }
 17995                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 17996  011B  29C2               	goto	i1l7049
 17997  011C                     i1l7011:	
 17998  011C  087A               	movf	_DimmerLightsIntr,w
 17999  011D  0086               	movwf	6
 18000  011E  3001               	movlw	1	; select bank2/3
 18001  011F  0087               	movwf	7
 18002  0120  1D01               	btfss	1,2
 18003  0121  2963               	goto	i1l7025
 18004                           
 18005                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 18006  0122  087A               	movf	_DimmerLightsIntr,w
 18007  0123  3E05               	addlw	5
 18008  0124  0086               	movwf	6
 18009  0125  3001               	movlw	1	; select bank2/3
 18010  0126  0087               	movwf	7
 18011  0127  087A               	movf	_DimmerLightsIntr,w
 18012  0128  3E04               	addlw	4
 18013  0129  0084               	movwf	4
 18014  012A  3001               	movlw	1	; select bank2/3
 18015  012B  0085               	movwf	5
 18016  012C  0800               	movf	0,w
 18017  012D  0201               	subwf	1,w
 18018  012E  1803               	skipnc
 18019  012F  2938               	goto	i1l7017
 18020                           
 18021                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 18022  0130  087A               	movf	_DimmerLightsIntr,w
 18023  0131  3E04               	addlw	4
 18024  0132  0086               	movwf	6
 18025  0133  3001               	movlw	1	; select bank2/3
 18026  0134  0087               	movwf	7
 18027  0135  3001               	movlw	1
 18028  0136  0281               	subwf	1,f
 18029                           
 18030                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 18031  0137  294F               	goto	i1l7021
 18032  0138                     i1l7017:	
 18033  0138  087A               	movf	_DimmerLightsIntr,w
 18034  0139  3E04               	addlw	4
 18035  013A  0086               	movwf	6
 18036  013B  3001               	movlw	1	; select bank2/3
 18037  013C  0087               	movwf	7
 18038  013D  087A               	movf	_DimmerLightsIntr,w
 18039  013E  3E05               	addlw	5
 18040  013F  0084               	movwf	4
 18041  0140  3001               	movlw	1	; select bank2/3
 18042  0141  0085               	movwf	5
 18043  0142  0800               	movf	0,w
 18044  0143  0201               	subwf	1,w
 18045  0144  1803               	skipnc
 18046  0145  294F               	goto	i1l7021
 18047                           
 18048                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 18049  0146  3001               	movlw	1
 18050  0147  00F2               	movwf	??_setDimmerLights_IntrControl
 18051  0148  087A               	movf	_DimmerLightsIntr,w
 18052  0149  3E04               	addlw	4
 18053  014A  0086               	movwf	6
 18054  014B  3001               	movlw	1	; select bank2/3
 18055  014C  0087               	movwf	7
 18056  014D  0872               	movf	??_setDimmerLights_IntrControl,w
 18057  014E  0781               	addwf	1,f
 18058  014F                     i1l7021:	
 18059                           
 18060                           ;Dimmer_B1.c: 143: }
 18061                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18062  014F  087A               	movf	_DimmerLightsIntr,w
 18063  0150  3E05               	addlw	5
 18064  0151  0086               	movwf	6
 18065  0152  3001               	movlw	1	; select bank2/3
 18066  0153  0087               	movwf	7
 18067  0154  087A               	movf	_DimmerLightsIntr,w
 18068  0155  3E04               	addlw	4
 18069  0156  0084               	movwf	4
 18070  0157  3001               	movlw	1	; select bank2/3
 18071  0158  0085               	movwf	5
 18072  0159  0800               	movf	0,w
 18073  015A  0601               	xorwf	1,w
 18074  015B  1D03               	skipz
 18075  015C  29C2               	goto	i1l7049
 18076                           
 18077                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 18078  015D  087A               	movf	_DimmerLightsIntr,w
 18079  015E  0086               	movwf	6
 18080  015F  3001               	movlw	1	; select bank2/3
 18081  0160  0087               	movwf	7
 18082  0161  1101               	bcf	1,2
 18083  0162  297E               	goto	i1l7031
 18084  0163                     i1l7025:	
 18085                           ;Dimmer_B1.c: 147: }
 18086                           ;Dimmer_B1.c: 148: } else {
 18087                           
 18088                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 18089                           
 18090                           
 18091                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 18092  0163  087A               	movf	_DimmerLightsIntr,w
 18093  0164  0086               	movwf	6
 18094  0165  3001               	movlw	1	; select bank2/3
 18095  0166  0087               	movwf	7
 18096  0167  1E81               	btfss	1,5
 18097  0168  2984               	goto	i1l7033
 18098                           
 18099                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 18100  0169  087A               	movf	_DimmerLightsIntr,w
 18101  016A  3E04               	addlw	4
 18102  016B  0086               	movwf	6
 18103  016C  3001               	movlw	1	; select bank2/3
 18104  016D  0087               	movwf	7
 18105  016E  3001               	movlw	1
 18106  016F  0281               	subwf	1,f
 18107                           
 18108                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 18109  0170  087A               	movf	_DimmerLightsIntr,w
 18110  0171  3E05               	addlw	5
 18111  0172  0086               	movwf	6
 18112  0173  3001               	movlw	1	; select bank2/3
 18113  0174  0087               	movwf	7
 18114  0175  087A               	movf	_DimmerLightsIntr,w
 18115  0176  3E04               	addlw	4
 18116  0177  0084               	movwf	4
 18117  0178  3001               	movlw	1	; select bank2/3
 18118  0179  0085               	movwf	5
 18119  017A  0800               	movf	0,w
 18120  017B  0201               	subwf	1,w
 18121  017C  1C03               	skipc
 18122  017D  29C2               	goto	i1l7049
 18123  017E                     i1l7031:	
 18124                           
 18125                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 18126  017E  087A               	movf	_DimmerLightsIntr,w
 18127  017F  0086               	movwf	6
 18128  0180  3001               	movlw	1	; select bank2/3
 18129  0181  0087               	movwf	7
 18130  0182  1081               	bcf	1,1
 18131                           
 18132                           ;Dimmer_B1.c: 153: }
 18133                           ;Dimmer_B1.c: 154: } else {
 18134  0183  29C2               	goto	i1l7049
 18135  0184                     i1l7033:	
 18136                           
 18137                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 18138  0184  3001               	movlw	1
 18139  0185  00F2               	movwf	??_setDimmerLights_IntrControl
 18140  0186  087A               	movf	_DimmerLightsIntr,w
 18141  0187  3E04               	addlw	4
 18142  0188  0086               	movwf	6
 18143  0189  3001               	movlw	1	; select bank2/3
 18144  018A  0087               	movwf	7
 18145  018B  0872               	movf	??_setDimmerLights_IntrControl,w
 18146  018C  0781               	addwf	1,f
 18147                           
 18148                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 18149  018D  087A               	movf	_DimmerLightsIntr,w
 18150  018E  3E04               	addlw	4
 18151  018F  0086               	movwf	6
 18152  0190  3001               	movlw	1	; select bank2/3
 18153  0191  0087               	movwf	7
 18154  0192  087A               	movf	_DimmerLightsIntr,w
 18155  0193  3E06               	addlw	6
 18156  0194  0084               	movwf	4
 18157  0195  3001               	movlw	1	; select bank2/3
 18158  0196  0085               	movwf	5
 18159  0197  0800               	movf	0,w
 18160  0198  0201               	subwf	1,w
 18161  0199  1C03               	skipc
 18162  019A  29C2               	goto	i1l7049
 18163                           
 18164                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 18165  019B  087A               	movf	_DimmerLightsIntr,w
 18166  019C  0086               	movwf	6
 18167  019D  3001               	movlw	1	; select bank2/3
 18168  019E  0087               	movwf	7
 18169  019F  1081               	bcf	1,1
 18170                           
 18171                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 18172  01A0  087A               	movf	_DimmerLightsIntr,w
 18173  01A1  0086               	movwf	6
 18174  01A2  3001               	movlw	1	; select bank2/3
 18175  01A3  0087               	movwf	7
 18176  01A4  1301               	bcf	1,6
 18177                           
 18178                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 18179  01A5  087A               	movf	_DimmerLightsIntr,w
 18180  01A6  3E09               	addlw	9
 18181  01A7  0086               	movwf	6
 18182  01A8  3001               	movlw	1	; select bank2/3
 18183  01A9  0087               	movwf	7
 18184  01AA  1501               	bsf	1,2
 18185                           
 18186                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 18187  01AB  0021               	movlb	1	; select bank1
 18188  01AC  085F               	movf	_Dimmer^(0+128),w
 18189  01AD  0086               	movwf	6
 18190  01AE  0187               	clrf	7
 18191  01AF  1401               	bsf	1,0
 18192                           
 18193                           ;Dimmer_B1.c: 162: if (lights == 1) {
 18194  01B0  0876               	movf	setDimmerLights_IntrControl@lights,w
 18195  01B1  3A01               	xorlw	1
 18196  01B2  1D03               	skipz
 18197  01B3  29B6               	goto	i1l7043
 18198                           
 18199                           ;Dimmer_B1.c: 163: RA3 = 0;
 18200  01B4  0020               	movlb	0	; select bank0
 18201  01B5  118C               	bcf	12,3	;volatile
 18202  01B6                     i1l7043:	
 18203                           
 18204                           ;Dimmer_B1.c: 165: }
 18205                           ;Dimmer_B1.c: 168: if (lights == 2) {
 18206  01B6  0876               	movf	setDimmerLights_IntrControl@lights,w
 18207  01B7  3A02               	xorlw	2
 18208  01B8  1D03               	skipz
 18209  01B9  29BC               	goto	i1l7047
 18210                           
 18211                           ;Dimmer_B1.c: 169: RC7 = 0;
 18212  01BA  0020               	movlb	0	; select bank0
 18213  01BB  138E               	bcf	14,7	;volatile
 18214  01BC                     i1l7047:	
 18215                           
 18216                           ;Dimmer_B1.c: 170: }
 18217                           ;Dimmer_B1.c: 177: setLoad_StatusOff(lights, 1);
 18218  01BC  01F0               	clrf	i1setLoad_StatusOff@command
 18219  01BD  0AF0               	incf	i1setLoad_StatusOff@command,f
 18220  01BE  0876               	movf	setDimmerLights_IntrControl@lights,w
 18221  01BF  319E  2625  3180   	fcall	i1_setLoad_StatusOff
 18222  01C2                     i1l7049:	
 18223                           
 18224                           ;Dimmer_B1.c: 178: }
 18225                           ;Dimmer_B1.c: 179: }
 18226                           ;Dimmer_B1.c: 180: }
 18227                           ;Dimmer_B1.c: 181: }
 18228                           ;Dimmer_B1.c: 182: }
 18229                           ;Dimmer_B1.c: 183: }
 18230                           ;Dimmer_B1.c: 184: }
 18231                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 18232  01C2  087A               	movf	_DimmerLightsIntr,w
 18233  01C3  3E08               	addlw	8
 18234  01C4  0086               	movwf	6
 18235  01C5  3001               	movlw	1	; select bank2/3
 18236  01C6  0087               	movwf	7
 18237  01C7  1E81               	btfss	1,5
 18238  01C8  29F3               	goto	i1l7067
 18239                           
 18240                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 18241  01C9  3001               	movlw	1
 18242  01CA  00F2               	movwf	??_setDimmerLights_IntrControl
 18243  01CB  087A               	movf	_DimmerLightsIntr,w
 18244  01CC  3E07               	addlw	7
 18245  01CD  0086               	movwf	6
 18246  01CE  3001               	movlw	1	; select bank2/3
 18247  01CF  0087               	movwf	7
 18248  01D0  0872               	movf	??_setDimmerLights_IntrControl,w
 18249  01D1  0781               	addwf	1,f
 18250                           
 18251                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 18252  01D2  087A               	movf	_DimmerLightsIntr,w
 18253  01D3  3E07               	addlw	7
 18254  01D4  0086               	movwf	6
 18255  01D5  3001               	movlw	1	; select bank2/3
 18256  01D6  0087               	movwf	7
 18257  01D7  3005               	movlw	5
 18258  01D8  0201               	subwf	1,w
 18259  01D9  1C03               	skipc
 18260  01DA  29F3               	goto	i1l7067
 18261                           
 18262                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 18263  01DB  087A               	movf	_DimmerLightsIntr,w
 18264  01DC  3E07               	addlw	7
 18265  01DD  0086               	movwf	6
 18266  01DE  3001               	movlw	1	; select bank2/3
 18267  01DF  0087               	movwf	7
 18268  01E0  0181               	clrf	1
 18269                           
 18270                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 18271  01E1  087A               	movf	_DimmerLightsIntr,w
 18272  01E2  3E08               	addlw	8
 18273  01E3  0086               	movwf	6
 18274  01E4  3001               	movlw	1	; select bank2/3
 18275  01E5  0087               	movwf	7
 18276  01E6  1281               	bcf	1,5
 18277                           
 18278                           ;Dimmer_B1.c: 192: if (lights == 1) {
 18279  01E7  0876               	movf	setDimmerLights_IntrControl@lights,w
 18280  01E8  3A01               	xorlw	1
 18281  01E9  1D03               	skipz
 18282  01EA  29ED               	goto	i1l7063
 18283                           
 18284                           ;Dimmer_B1.c: 193: RA7 = 0;
 18285  01EB  0020               	movlb	0	; select bank0
 18286  01EC  138C               	bcf	12,7	;volatile
 18287  01ED                     i1l7063:	
 18288                           ;Dimmer_B1.c: 194: ;;
 18289                           
 18290                           
 18291                           ;Dimmer_B1.c: 195: }
 18292                           ;Dimmer_B1.c: 198: if (lights == 2) {
 18293  01ED  0876               	movf	setDimmerLights_IntrControl@lights,w
 18294  01EE  3A02               	xorlw	2
 18295  01EF  1D03               	skipz
 18296  01F0  29F3               	goto	i1l7067
 18297                           
 18298                           ;Dimmer_B1.c: 199: RB4 = 0;
 18299  01F1  0020               	movlb	0	; select bank0
 18300  01F2  120D               	bcf	13,4	;volatile
 18301  01F3                     i1l7067:	
 18302                           
 18303                           ;Dimmer_B1.c: 200: }
 18304                           ;Dimmer_B1.c: 207: }
 18305                           ;Dimmer_B1.c: 208: }
 18306                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 18307  01F3  087A               	movf	_DimmerLightsIntr,w
 18308  01F4  3E09               	addlw	9
 18309  01F5  0086               	movwf	6
 18310  01F6  3001               	movlw	1	; select bank2/3
 18311  01F7  0087               	movwf	7
 18312  01F8  1E81               	btfss	1,5
 18313  01F9  0008               	return
 18314                           
 18315                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 18316  01FA  3001               	movlw	1
 18317  01FB  00F2               	movwf	??_setDimmerLights_IntrControl
 18318  01FC  087A               	movf	_DimmerLightsIntr,w
 18319  01FD  3E0A               	addlw	10
 18320  01FE  0086               	movwf	6
 18321  01FF  3001               	movlw	1	; select bank2/3
 18322  0200  0087               	movwf	7
 18323  0201  0872               	movf	??_setDimmerLights_IntrControl,w
 18324  0202  0781               	addwf	1,f
 18325                           
 18326                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 18327  0203  087A               	movf	_DimmerLightsIntr,w
 18328  0204  3E0A               	addlw	10
 18329  0205  0086               	movwf	6
 18330  0206  3001               	movlw	1	; select bank2/3
 18331  0207  0087               	movwf	7
 18332  0208  0801               	movf	1,w
 18333  0209  3A46               	xorlw	70
 18334  020A  1D03               	skipz
 18335  020B  0008               	return
 18336                           
 18337                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 18338  020C  087A               	movf	_DimmerLightsIntr,w
 18339  020D  3E0A               	addlw	10
 18340  020E  0086               	movwf	6
 18341  020F  3001               	movlw	1	; select bank2/3
 18342  0210  0087               	movwf	7
 18343  0211  0181               	clrf	1
 18344                           
 18345                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 18346  0212  087A               	movf	_DimmerLightsIntr,w
 18347  0213  3E09               	addlw	9
 18348  0214  0086               	movwf	6
 18349  0215  3001               	movlw	1	; select bank2/3
 18350  0216  0087               	movwf	7
 18351  0217  1281               	bcf	1,5
 18352  0218  0008               	return
 18353  0219                     __end_of_setDimmerLights_IntrControl:	
 18354                           
 18355                           	psect	text126
 18356  1E25                     __ptext126:	
 18357 ;; *************** function i1_setLoad_StatusOff *****************
 18358 ;; Defined at:
 18359 ;;		line 284 in file "../src/OverLoad_B1.c"
 18360 ;; Parameters:    Size  Location     Type
 18361 ;;  lights          1    wreg     unsigned char 
 18362 ;;  command         1    0[COMMON] unsigned char 
 18363 ;; Auto vars:     Size  Location     Type
 18364 ;;  lights          1    1[COMMON] unsigned char 
 18365 ;; Return value:  Size  Location     Type
 18366 ;;		None               void
 18367 ;; Registers used:
 18368 ;;		wreg, status,2, status,0
 18369 ;; Tracked objects:
 18370 ;;		On entry : 0/0
 18371 ;;		On exit  : 0/0
 18372 ;;		Unchanged: 0/0
 18373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18374 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18375 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18377 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18378 ;;Total ram usage:        2 bytes
 18379 ;; Hardware stack levels used:    1
 18380 ;; This function calls:
 18381 ;;		Nothing
 18382 ;; This function is called by:
 18383 ;;		_setDimmerLights_IntrControl
 18384 ;; This function uses a non-reentrant model
 18385 ;;
 18386                           
 18387                           
 18388                           ;psect for function i1_setLoad_StatusOff
 18389  1E25                     i1_setLoad_StatusOff:	
 18390                           
 18391                           ;incstack = 0
 18392                           ; Regs used in i1_setLoad_StatusOff: [wreg+status,2+status,0]
 18393                           ;i1setLoad_StatusOff@lights stored from wreg
 18394  1E25  00F1               	movwf	i1setLoad_StatusOff@lights
 18395                           
 18396                           ;OverLoad_B1.c: 285: Load1.StatusOff = command;
 18397  1E26  0870               	movf	i1setLoad_StatusOff@command,w
 18398  1E27  0023               	movlb	3	; select bank3
 18399  1E28  13A0               	bcf	_Load1^(0+384),7
 18400  1E29  1D03               	skipz
 18401  1E2A  17A0               	bsf	_Load1^(0+384),7
 18402                           
 18403                           ;OverLoad_B1.c: 286: Load1.SafeCount -= 2;
 18404  1E2B  3002               	movlw	2
 18405  1E2C  02E2               	subwf	(_Load1^(0+384)+66),f
 18406                           
 18407                           ;OverLoad_B1.c: 287: if (lights == 1) {
 18408  1E2D  0871               	movf	i1setLoad_StatusOff@lights,w
 18409  1E2E  3A01               	xorlw	1
 18410  1E2F  1903               	btfsc	3,2
 18411                           
 18412                           ;OverLoad_B1.c: 288: Load1.Lights1Status = 0;
 18413  1E30  01E3               	clrf	(_Load1^(0+384)+67)
 18414                           
 18415                           ;OverLoad_B1.c: 289: }
 18416                           ;OverLoad_B1.c: 290: if (lights == 2) {
 18417  1E31  0871               	movf	i1setLoad_StatusOff@lights,w
 18418  1E32  3A02               	xorlw	2
 18419  1E33  1903               	btfsc	3,2
 18420                           
 18421                           ;OverLoad_B1.c: 291: Load1.Lights2Status = 0;
 18422  1E34  01E4               	clrf	(_Load1^(0+384)+68)
 18423                           
 18424                           ;OverLoad_B1.c: 292: }
 18425                           ;OverLoad_B1.c: 293: if (lights == 3) {
 18426  1E35  0871               	movf	i1setLoad_StatusOff@lights,w
 18427  1E36  3A03               	xorlw	3
 18428  1E37  1D03               	skipz
 18429  1E38  0008               	return
 18430                           
 18431                           ;OverLoad_B1.c: 294: Load1.Lights3Status = 0;
 18432  1E39  01E5               	clrf	(_Load1^(0+384)+69)
 18433  1E3A  0008               	return
 18434  1E3B                     __end_ofi1_setLoad_StatusOff:	
 18435                           
 18436                           	psect	text127
 18437  1D77                     __ptext127:	
 18438 ;; *************** function _DimmerIntrPointSelect *****************
 18439 ;; Defined at:
 18440 ;;		line 65 in file "../src/Dimmer_B1.c"
 18441 ;; Parameters:    Size  Location     Type
 18442 ;;  lights          1    wreg     unsigned char 
 18443 ;; Auto vars:     Size  Location     Type
 18444 ;;  lights          1    1[COMMON] unsigned char 
 18445 ;; Return value:  Size  Location     Type
 18446 ;;		None               void
 18447 ;; Registers used:
 18448 ;;		wreg
 18449 ;; Tracked objects:
 18450 ;;		On entry : 0/0
 18451 ;;		On exit  : 0/0
 18452 ;;		Unchanged: 0/0
 18453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18455 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18456 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18457 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18458 ;;Total ram usage:        2 bytes
 18459 ;; Hardware stack levels used:    1
 18460 ;; This function calls:
 18461 ;;		Nothing
 18462 ;; This function is called by:
 18463 ;;		_setDimmerLights_IntrControl
 18464 ;; This function uses a non-reentrant model
 18465 ;;
 18466                           
 18467                           
 18468                           ;psect for function _DimmerIntrPointSelect
 18469  1D77                     _DimmerIntrPointSelect:	
 18470                           
 18471                           ;incstack = 0
 18472                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18473                           ;DimmerIntrPointSelect@lights stored from wreg
 18474  1D77  00F1               	movwf	DimmerIntrPointSelect@lights
 18475                           
 18476                           ;Dimmer_B1.c: 67: if (lights == 1) {
 18477  1D78  0871               	movf	DimmerIntrPointSelect@lights,w
 18478  1D79  3A01               	xorlw	1
 18479  1D7A  1D03               	skipz
 18480  1D7B  2D80               	goto	i1l755
 18481                           
 18482                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 18483  1D7C  3028               	movlw	_DimmerLights1& (0+255)
 18484  1D7D  00F0               	movwf	??_DimmerIntrPointSelect
 18485  1D7E  0870               	movf	??_DimmerIntrPointSelect,w
 18486  1D7F  00FA               	movwf	_DimmerLightsIntr
 18487  1D80                     i1l755:	
 18488                           
 18489                           ;Dimmer_B1.c: 69: }
 18490                           ;Dimmer_B1.c: 72: if (lights == 2) {
 18491  1D80  0871               	movf	DimmerIntrPointSelect@lights,w
 18492  1D81  3A02               	xorlw	2
 18493  1D82  1D03               	skipz
 18494  1D83  0008               	return
 18495                           
 18496                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights2;
 18497  1D84  3037               	movlw	_DimmerLights2& (0+255)
 18498  1D85  00F0               	movwf	??_DimmerIntrPointSelect
 18499  1D86  0870               	movf	??_DimmerIntrPointSelect,w
 18500  1D87  00FA               	movwf	_DimmerLightsIntr
 18501  1D88  0008               	return
 18502  1D89                     __end_of_DimmerIntrPointSelect:	
 18503                           
 18504                           	psect	text128
 18505  1C66                     __ptext128:	
 18506 ;; *************** function _IOC_ISR *****************
 18507 ;; Defined at:
 18508 ;;		line 295 in file "../src/MCU_B1.c"
 18509 ;; Parameters:    Size  Location     Type
 18510 ;;		None
 18511 ;; Auto vars:     Size  Location     Type
 18512 ;;		None
 18513 ;; Return value:  Size  Location     Type
 18514 ;;		None               void
 18515 ;; Registers used:
 18516 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18517 ;; Tracked objects:
 18518 ;;		On entry : 0/0
 18519 ;;		On exit  : 0/0
 18520 ;;		Unchanged: 0/0
 18521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18526 ;;Total ram usage:        0 bytes
 18527 ;; Hardware stack levels used:    1
 18528 ;; Hardware stack levels required when called:    3
 18529 ;; This function calls:
 18530 ;;		_setDimmerReClock
 18531 ;; This function is called by:
 18532 ;;		_ISR
 18533 ;; This function uses a non-reentrant model
 18534 ;;
 18535                           
 18536                           
 18537                           ;psect for function _IOC_ISR
 18538  1C66                     _IOC_ISR:	
 18539                           
 18540                           ;MCU_B1.c: 296: if (IOCIE == 1 && IOCBF2 == 1) {
 18541                           
 18542                           ;incstack = 0
 18543                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18544  1C66  1D8B               	btfss	11,3	;volatile
 18545  1C67  0008               	return
 18546  1C68  0027               	movlb	7	; select bank7
 18547  1C69  1D16               	btfss	22,2	;volatile
 18548  1C6A  0008               	return
 18549                           
 18550                           ;MCU_B1.c: 297: IOCBF2 = 0;
 18551  1C6B  1116               	bcf	22,2	;volatile
 18552                           
 18553                           ;MCU_B1.c: 298: IOCIF = 0;
 18554  1C6C  100B               	bcf	11,0	;volatile
 18555                           
 18556                           ;MCU_B1.c: 299: if (myMain.PowerON == 1) {
 18557  1C6D  0021               	movlb	1	; select bank1
 18558  1C6E  1C20               	btfss	_myMain^(0+128),0
 18559  1C6F  0008               	return
 18560                           
 18561                           ;MCU_B1.c: 301: setDimmerReClock();
 18562  1C70  319C  2421         	fcall	_setDimmerReClock
 18563  1C72  0008               	return
 18564  1C73                     __end_of_IOC_ISR:	
 18565                           
 18566                           	psect	text129
 18567  1C21                     __ptext129:	
 18568 ;; *************** function _setDimmerReClock *****************
 18569 ;; Defined at:
 18570 ;;		line 173 in file "../src/MCU_B1.c"
 18571 ;; Parameters:    Size  Location     Type
 18572 ;;		None
 18573 ;; Auto vars:     Size  Location     Type
 18574 ;;		None
 18575 ;; Return value:  Size  Location     Type
 18576 ;;		None               void
 18577 ;; Registers used:
 18578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18579 ;; Tracked objects:
 18580 ;;		On entry : 0/0
 18581 ;;		On exit  : 0/0
 18582 ;;		Unchanged: 0/0
 18583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18588 ;;Total ram usage:        0 bytes
 18589 ;; Hardware stack levels used:    1
 18590 ;; Hardware stack levels required when called:    2
 18591 ;; This function calls:
 18592 ;;		_setDimmerLights_IntrIOC_GO
 18593 ;; This function is called by:
 18594 ;;		_IOC_ISR
 18595 ;; This function uses a non-reentrant model
 18596 ;;
 18597                           
 18598                           
 18599                           ;psect for function _setDimmerReClock
 18600  1C21                     _setDimmerReClock:	
 18601                           
 18602                           ;MCU_B1.c: 178: setDimmerLights_IntrIOC_GO(1);
 18603                           
 18604                           ;incstack = 0
 18605                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18606  1C21  3001               	movlw	1
 18607  1C22  319F  2784  319C   	fcall	_setDimmerLights_IntrIOC_GO
 18608                           
 18609                           ;MCU_B1.c: 182: setDimmerLights_IntrIOC_GO(2);
 18610  1C25  3002               	movlw	2
 18611  1C26  319F  2784         	fcall	_setDimmerLights_IntrIOC_GO
 18612                           
 18613                           ;MCU_B1.c: 189: TMR0 = 255;
 18614  1C28  30FF               	movlw	255
 18615  1C29  0020               	movlb	0	; select bank0
 18616  1C2A  0095               	movwf	21	;volatile
 18617  1C2B  0008               	return
 18618  1C2C                     __end_of_setDimmerReClock:	
 18619                           
 18620                           	psect	text130
 18621  1F84                     __ptext130:	
 18622 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18623 ;; Defined at:
 18624 ;;		line 28 in file "../src/Dimmer_B1.c"
 18625 ;; Parameters:    Size  Location     Type
 18626 ;;  lights          1    wreg     unsigned char 
 18627 ;; Auto vars:     Size  Location     Type
 18628 ;;  lights          1    2[COMMON] unsigned char 
 18629 ;; Return value:  Size  Location     Type
 18630 ;;		None               void
 18631 ;; Registers used:
 18632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18633 ;; Tracked objects:
 18634 ;;		On entry : 0/0
 18635 ;;		On exit  : 0/0
 18636 ;;		Unchanged: 0/0
 18637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18639 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18641 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18642 ;;Total ram usage:        1 bytes
 18643 ;; Hardware stack levels used:    1
 18644 ;; Hardware stack levels required when called:    1
 18645 ;; This function calls:
 18646 ;;		_DimmerIntrIOCPointSelect
 18647 ;; This function is called by:
 18648 ;;		_setDimmerReClock
 18649 ;; This function uses a non-reentrant model
 18650 ;;
 18651                           
 18652                           
 18653                           ;psect for function _setDimmerLights_IntrIOC_GO
 18654  1F84                     _setDimmerLights_IntrIOC_GO:	
 18655                           
 18656                           ;incstack = 0
 18657                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18658                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18659  1F84  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18660                           
 18661                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 18662  1F85  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18663  1F86  319D  25C0  319F   	fcall	_DimmerIntrIOCPointSelect
 18664                           
 18665                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 18666  1F89  0021               	movlb	1	; select bank1
 18667  1F8A  0862               	movf	_DimmerLightsIntrIOC^(0+128),w
 18668  1F8B  0086               	movwf	6
 18669  1F8C  3001               	movlw	1	; select bank2/3
 18670  1F8D  0087               	movwf	7
 18671  1F8E  1801               	btfsc	1,0
 18672  1F8F  0008               	return
 18673  1F90  0862               	movf	_DimmerLightsIntrIOC^(0+128),w
 18674  1F91  3E09               	addlw	9
 18675  1F92  0086               	movwf	6
 18676  1F93  3001               	movlw	1	; select bank2/3
 18677  1F94  0087               	movwf	7
 18678  1F95  1A81               	btfsc	1,5
 18679  1F96  0008               	return
 18680                           
 18681                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 18682  1F97  0862               	movf	_DimmerLightsIntrIOC^(0+128),w
 18683  1F98  0086               	movwf	6
 18684  1F99  3001               	movlw	1	; select bank2/3
 18685  1F9A  0087               	movwf	7
 18686  1F9B  1401               	bsf	1,0
 18687                           
 18688                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 18689  1F9C  0862               	movf	_DimmerLightsIntrIOC^(0+128),w
 18690  1F9D  3E09               	addlw	9
 18691  1F9E  0086               	movwf	6
 18692  1F9F  3001               	movlw	1	; select bank2/3
 18693  1FA0  0087               	movwf	7
 18694  1FA1  1681               	bsf	1,5
 18695  1FA2  0008               	return
 18696  1FA3                     __end_of_setDimmerLights_IntrIOC_GO:	
 18697                           
 18698                           	psect	text131
 18699  1DC0                     __ptext131:	
 18700 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18701 ;; Defined at:
 18702 ;;		line 8 in file "../src/Dimmer_B1.c"
 18703 ;; Parameters:    Size  Location     Type
 18704 ;;  lights          1    wreg     unsigned char 
 18705 ;; Auto vars:     Size  Location     Type
 18706 ;;  lights          1    1[COMMON] unsigned char 
 18707 ;; Return value:  Size  Location     Type
 18708 ;;		None               void
 18709 ;; Registers used:
 18710 ;;		wreg
 18711 ;; Tracked objects:
 18712 ;;		On entry : 0/0
 18713 ;;		On exit  : 0/0
 18714 ;;		Unchanged: 0/0
 18715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18717 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18718 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18719 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18720 ;;Total ram usage:        2 bytes
 18721 ;; Hardware stack levels used:    1
 18722 ;; This function calls:
 18723 ;;		Nothing
 18724 ;; This function is called by:
 18725 ;;		_setDimmerLights_IntrIOC_GO
 18726 ;; This function uses a non-reentrant model
 18727 ;;
 18728                           
 18729                           
 18730                           ;psect for function _DimmerIntrIOCPointSelect
 18731  1DC0                     _DimmerIntrIOCPointSelect:	
 18732                           
 18733                           ;incstack = 0
 18734                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18735                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18736  1DC0  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18737                           
 18738                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18739  1DC1  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18740  1DC2  3A01               	xorlw	1
 18741  1DC3  1D03               	skipz
 18742  1DC4  2DCA               	goto	i1l746
 18743                           
 18744                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18745  1DC5  3028               	movlw	_DimmerLights1& (0+255)
 18746  1DC6  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18747  1DC7  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18748  1DC8  0021               	movlb	1	; select bank1
 18749  1DC9  00E2               	movwf	_DimmerLightsIntrIOC^(0+128)
 18750  1DCA                     i1l746:	
 18751                           
 18752                           ;Dimmer_B1.c: 12: }
 18753                           ;Dimmer_B1.c: 15: if (lights == 2) {
 18754  1DCA  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18755  1DCB  3A02               	xorlw	2
 18756  1DCC  1D03               	skipz
 18757  1DCD  0008               	return
 18758                           
 18759                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 18760  1DCE  3037               	movlw	_DimmerLights2& (0+255)
 18761  1DCF  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18762  1DD0  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18763  1DD1  0021               	movlb	1	; select bank1
 18764  1DD2  00E2               	movwf	_DimmerLightsIntrIOC^(0+128)
 18765  1DD3  0008               	return
 18766  1DD4                     __end_of_DimmerIntrIOCPointSelect:	
 18767                           
 18768                           	psect	text132
 18769  1C04                     __ptext132:	
 18770 ;; *************** function _INT_ISR *****************
 18771 ;; Defined at:
 18772 ;;		line 248 in file "../src/MCU_B1.c"
 18773 ;; Parameters:    Size  Location     Type
 18774 ;;		None
 18775 ;; Auto vars:     Size  Location     Type
 18776 ;;		None
 18777 ;; Return value:  Size  Location     Type
 18778 ;;		None               void
 18779 ;; Registers used:
 18780 ;;		wreg, status,2, status,0, pclath, cstack
 18781 ;; Tracked objects:
 18782 ;;		On entry : 0/0
 18783 ;;		On exit  : 0/0
 18784 ;;		Unchanged: 0/0
 18785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18790 ;;Total ram usage:        0 bytes
 18791 ;; Hardware stack levels used:    1
 18792 ;; Hardware stack levels required when called:    1
 18793 ;; This function calls:
 18794 ;;		_setRF_ReceiveGO
 18795 ;; This function is called by:
 18796 ;;		_ISR
 18797 ;; This function uses a non-reentrant model
 18798 ;;
 18799                           
 18800                           
 18801                           ;psect for function _INT_ISR
 18802  1C04                     _INT_ISR:	
 18803                           
 18804                           ;MCU_B1.c: 249: if (INTE == 1 && INTF == 1) {
 18805                           
 18806                           ;incstack = 0
 18807                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 18808  1C04  1E0B               	btfss	11,4	;volatile
 18809  1C05  0008               	return
 18810  1C06  1C8B               	btfss	11,1	;volatile
 18811  1C07  0008               	return
 18812                           
 18813                           ;MCU_B1.c: 250: INTF = 0;
 18814  1C08  108B               	bcf	11,1	;volatile
 18815                           
 18816                           ;MCU_B1.c: 252: setRF_ReceiveGO(1);
 18817  1C09  3001               	movlw	1
 18818  1C0A  319C  2416         	fcall	_setRF_ReceiveGO
 18819  1C0C  0008               	return
 18820  1C0D                     __end_of_INT_ISR:	
 18821                           
 18822                           	psect	text133
 18823  1C16                     __ptext133:	
 18824 ;; *************** function _setRF_ReceiveGO *****************
 18825 ;; Defined at:
 18826 ;;		line 28 in file "../src/RF_Control_B1.c"
 18827 ;; Parameters:    Size  Location     Type
 18828 ;;  command         1    wreg     unsigned char 
 18829 ;; Auto vars:     Size  Location     Type
 18830 ;;  command         1    0[COMMON] unsigned char 
 18831 ;; Return value:  Size  Location     Type
 18832 ;;		None               void
 18833 ;; Registers used:
 18834 ;;		wreg
 18835 ;; Tracked objects:
 18836 ;;		On entry : 0/0
 18837 ;;		On exit  : 0/0
 18838 ;;		Unchanged: 0/0
 18839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18841 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18843 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18844 ;;Total ram usage:        1 bytes
 18845 ;; Hardware stack levels used:    1
 18846 ;; This function calls:
 18847 ;;		Nothing
 18848 ;; This function is called by:
 18849 ;;		_INT_ISR
 18850 ;; This function uses a non-reentrant model
 18851 ;;
 18852                           
 18853                           
 18854                           ;psect for function _setRF_ReceiveGO
 18855  1C16                     _setRF_ReceiveGO:	
 18856                           
 18857                           ;incstack = 0
 18858                           ; Regs used in _setRF_ReceiveGO: [wreg]
 18859                           ;setRF_ReceiveGO@command stored from wreg
 18860  1C16  00F0               	movwf	setRF_ReceiveGO@command
 18861                           
 18862                           ;RF_Control_B1.c: 29: if (RF1.RxStatus == 1) {
 18863  1C17  0021               	movlb	1	; select bank1
 18864  1C18  1DD7               	btfss	_RF1^(0+128),3
 18865  1C19  0008               	return
 18866                           
 18867                           ;RF_Control_B1.c: 30: RF1.RxStatus = 0;
 18868  1C1A  11D7               	bcf	_RF1^(0+128),3
 18869                           
 18870                           ;RF_Control_B1.c: 31: RF1.Run = 1;
 18871  1C1B  14D8               	bsf	(_RF1^(0+128)+1),1
 18872                           
 18873                           ;RF_Control_B1.c: 32: RF1.ReceiveGO = command;
 18874  1C1C  0870               	movf	setRF_ReceiveGO@command,w
 18875  1C1D  10D7               	bcf	_RF1^(0+128),1
 18876  1C1E  1D03               	skipz
 18877  1C1F  14D7               	bsf	_RF1^(0+128),1
 18878  1C20  0008               	return
 18879  1C21                     __end_of_setRF_ReceiveGO:	
 18880  007E                     btemp	set	126	;btemp
 18881  007E                     pic14e$flags	set	126
 18882  007E                     wtemp	set	126
 18883  007E                     wtemp0	set	126
 18884  0080                     wtemp1	set	128
 18885  0082                     wtemp2	set	130
 18886  0084                     wtemp3	set	132
 18887  0086                     wtemp4	set	134
 18888  0088                     wtemp5	set	136
 18889  007F                     wtemp6	set	127
 18890  007E                     ttemp	set	126
 18891  007E                     ttemp0	set	126
 18892  0081                     ttemp1	set	129
 18893  0084                     ttemp2	set	132
 18894  0087                     ttemp3	set	135
 18895  007F                     ttemp4	set	127
 18896  007E                     ltemp	set	126
 18897  007E                     ltemp0	set	126
 18898  0082                     ltemp1	set	130
 18899  0086                     ltemp2	set	134
 18900  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         270
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      0      79
    BANK2            80      0      78
    BANK3            80      0      70
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerLights_IntrControl->i1_setLoad_StatusOff
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getLoad_AD->_getAD
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   83064
                                             74 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                         _getLoad_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1355
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           5     5      0     335
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     108
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   20098
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   20098
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8871
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8655
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1103
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     716
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     716
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   26980
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   26980
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   26203
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1223
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   24980
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10072
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1114
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            3     3      0    5873
                                             17 BANK0      3     3      0
                            ___lwdiv
                             ___wmul
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   3     3      0    4710
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _DimmerLights_Exceptions                              1     1      0    3729
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerERROR                         2     1      1     282
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_ERROR                                2     2      0    2110
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     344
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     804
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     804
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     230
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9579
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    9443
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6609
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setLoad_StatusOff                                    2     1      1     254
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1366
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     152
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     694
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     136
         _getDimmerLights_StatusFlag
                         _setLoad_GO
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9340
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9340
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     472
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     536
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1223
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     422
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     334
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     334
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (14) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0      22
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___awdiv
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setLoad_Enable
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect
       i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     186      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     186      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Oct 18 14:51:38 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
           ??_setDimmerLights_TriggerAdj 0023                           ___bmul@product 0022  
                                     l98 177D                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 10D3                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006F  
     __end_of_getDimmerLights_StatusFlag 1D55               _getDimmerLights_StatusFlag 1D44  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 0986  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1FE1  
                   _setDimmerLights_Main 0B42                             ___ftadd@sign 0048  
                                    l100 1791                                      l110 15A2  
                                    l112 15B2                                      l108 15B8  
                                    l109 15B4                                      l332 1DDE  
                                    l333 1DDF                                      l259 0897  
                                    l376 1162                                      l844 15F5  
                                    l798 1DB7                                      _GIE 005F  
                                    _CRC 00DE                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 007B                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00D7  
                                    _ISR 0004                                      _Sw1 0146  
                                    _Sw2 014F                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1DE8           ??_setDimmerLights_TriggerERROR 0023  
                  _Buzzer_Initialization 1B82                          __end_of_ADC_Set 1BC5  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0DB3  
                  _setDimmerLights_ERROR 16F5                    _setDimmerLights_AdjRF 113A  
                  _setDimmerLights_AdjGo 1D24                    _setDimmerLights_Clear 1D14  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1C73                               Load_Main@i 0033  
                           ___ftdiv@sign 003D                                     l2211 1381  
                                   l2141 0CF6                                     l1342 127E  
                                   l2134 0CC8                                     l1351 149A  
                                   l2143 0D1B                                     l2144 0D0A  
                                   l1329 1FFE                                     l2161 1CCC  
                                   l1513 152C                 ?_DimmerLightsPointSelect 0070  
                                   l2139 0CEA                                     l1641 022F  
                                   l2179 12B4                                     l1644 035A  
                                   l2197 1E46                          __end_of_IOC_Set 1C80  
                                   l1671 1347                                     l1663 0362  
                                   l1664 0360                                     l2536 1CD7  
                                   l2708 1F6F                                     l6101 0855  
                                   l6113 1129                                     l6041 096B  
                                   l6203 1FD9                                     l6131 12C4  
                                   l6035 0958                                     l6117 1131  
                                   l6045 0977                                     l6063 0811  
                                   l6071 081D                                     l6231 0E11  
                                   l6303 10FE                                     l6039 095E  
                                   l6081 082D                                     l7121 0B87  
                                   l7105 0B56                                     l6305 1101  
                                   l6241 0EE5                                     l2875 0909  
                                   l6067 0817                                     l7131 0BAF  
                                   l6251 0F09                                     l2869 08F2  
                                   l5541 08C8                                     l6093 0849  
                                   l6077 0827                                     l6085 0833  
                                   l7117 0B7B                                     l7109 0B60  
                                   l6181 1E8B                                     l6309 1107  
                                   l5621 054A                                     l6421 0EB6  
                                   l6413 0EA4                                     l6335 1D4E  
                                   l6183 1E8F                                     l6503 0A11  
                                   l5615 0537                                     l6255 0F1F  
                                   l6407 0E89                                     l7231 1085  
                                   l5545 08CF                                     l6097 084F  
                                   l7161 13D0                                     l6505 0A14  
                                   l5633 057D                                     l5617 0541  
                                   l5609 0524                                     l5721 07B2  
                                   l5705 076F                                     l6425 0EBF  
                                   l6417 0EAD                                     l7225 107D  
                                   l2898 056B                                     l5555 08F7  
                                   l5547 08D9                                     l7243 1465  
                                   l6443 086F                                     l5627 055D  
                                   l5619 0546                                     l5803 1D9E  
                                   l7227 1080                                     l6293 1ED6  
                                   l5821 1DF3                                     l5901 16BF  
                                   l5557 08FF                                     l5549 08DE  
                                   l7157 13C9                                     l6621 15E8  
                                   l6525 0A2B                                     l6509 0A1A  
                                   l6461 089D                                     l6437 0866  
                                   l5637 058F                                     l5629 0567  
                                   l5733 07CE                                     l5717 07AA  
                                   l6287 1ECD                                     l6551 117E  
                                   l5903 16CB                                     l5575 10DE  
                                   l5663 0F84                                     l6199 1FD2  
                                   l7503 131C                                     l6623 15ED  
                                   l6615 15D5                                     l6527 0A42  
                                   l6471 08AD                                     l6463 08A0  
                                   l6439 0869                                     l5647 05AA  
                                   l5591 04FB                                     l6279 136F  
                                   l5807 1DA4                                     l7319 0CD8  
                                   l6289 1ED0                                     l5913 16E6  
                                   l5657 0F6E                                     l7249 147A  
                                   l6457 0880                                     l5729 07C6  
                                   l7433 0447                                     l7409 03DC  
                                   l6563 10C3                                     l6539 0A59  
                                   l6475 08B3                                     l6467 08A6  
                                   l5587 04F4                                     l7363 1CDC  
                                   l6803 1667                                     l7419 0409  
                                   l7443 0479                                     l7517 158C  
                                   l6549 1173                                     l6557 10BA  
                                   l5917 16EE                                     l5909 16DD  
                                   l5685 0FDE                                     l5677 0FC5  
                                   l5749 0D45                                     l5861 1F54  
                                   l6493 09FF                                     l6469 08AA  
                                   l5597 050A                                     l5837 11FC  
                                   l6733 153B                                     l7701 0BF8  
                                   l6559 10BD                                     l5783 0DAA  
                                   l5775 0D90                                     l5767 0D75  
                                   l7623 0634                                     l7471 1F69  
                                   l6487 09F6                                     l6495 0A02  
                                   l7367 1CE2                                     l6807 1674  
                                   l7383 0397                                     l5777 0D99  
                                   l5769 0D83                                     l5873 1E07  
                                   l5865 1F5D                                     l6593 1430  
                                   l7801 02EE                                     l6489 09F9  
                                   l6745 1551                                     l7393 03A7  
                                   l7385 039D                                     l7705 0C00  
                                   l5891 16B7                                     l5779 0D9C  
                                   l7491 12F5                                     l7803 02F4  
                                   l5699 0759                                     l7299 0CBC  
                                   l7395 03AF                                     l5885 16AC  
                                   l6669 1266                                     l7493 1301  
                                   l7813 030C                                     l6837 0AAC  
                                   l6773 0AEF                                     l7717 0C28  
                                   l7741 1515                                     l7831 0335  
                                   l6873 1404                                     l5969 09E2  
                                   l6793 0B30                                     l6769 0AE2  
                                   l6883 1414                                     l6867 13FB  
                                   l7499 1313                                     l7819 0318  
                                   l6877 140B                                     l6869 13FE  
                                   l7781 0278                    _myMain_Initialization 1CE5  
                                   l6879 140E                                     l7839 0357  
                                   l7775 024E                                     l7695 0BD5  
                                   l7943 1632                                     l7795 02E1  
                                   l7939 162B                                     _CFGS 0CAE  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                          __end_of_INT_ISR 1C0D  
                                   _LATC 010E                                     u4005 08ED  
                                   u4025 08FA                                     u4205 0538  
                                   u4055 0910                                     u4235 054B  
                                   u4335 0F96                                     u4175 0525  
                                   u4415 077B                                     u4345 0FA6  
                                   u4265 055E                                     u4425 078B  
                                   u4355 0FC6                                     _PEIE 005E  
                                   u4365 0FD5                                     u4525 0D4C  
                                   u4445 07B3                                     _INTE 005C  
                                   _INTF 0059                                     u5175 1EA4  
                                   u4375 0FDF                                     u4455 07B9  
                                   u4555 0D76                                     u4805 16D6  
                                   u7205 1302                                     u4485 07CF  
                                   u4815 16DE                                     u7215 130C  
                                   u4495 07D5                                     u4585 0D91  
                                   u7225 1314                                     u7145 1F70  
                                   u7155 1F75                                     u4685 11E8  
                                   u7255 1582                                     u4775 16C2  
                                   u4880 0990                                     u5665 1168  
                                   u3985 08D4                                     u7185 12F8  
                                   u4795 16CC                                     u4885 098E  
                                   u7525 0C1A                                     u7455 1FF5  
                                   u7555 14F9                                     u7645 02B5  
                                   u7485 0BE8                                     u7565 1524  
                                   u7695 02FA                                     _LWLO 0CAD  
                                   _RFSW 00E3                                     _TMR0 0015  
                        __end_of_INT_Set 1BAB                                     _RSSI 00E4  
                                   _WREN 0CAA                                     _Buz1 00CB  
                                   _main 160A                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0CA8                          __end_of_RF_Main 1B8B  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 1C21  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1396                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1072            __end_of_DimmerIntrPointSelect 1D89  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
                  __end_of_setLoad_Count 1C9B                                    ?_main 006A  
                        __end_of___awdiv 16F5                          __end_of___ftadd 05C2  
                          __CFG_WDTE$OFF 0000                          __end_of___ftdiv 1000  
                        __end_of___ftmul 07F6                          ___awdiv@divisor 0020  
                        __end_of___fttol 0DB3             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                          __end_of___lwdiv 1323  
                                  i1l746 1DCA                                    i1l755 1D80  
                 _setDimmerLights_Switch 1CF4                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00ED  
                                  _RFSW2 00EE                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0016  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _Load1 01A0  
                __end_of_Timeout_Counter 1EAD                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 1FA3               _setDimmerLights_IntrIOC_GO 1F84  
                       __end_of_TMR0_ISR 11AA             __size_of_CC2500_WriteCommand 0019  
                       __end_of_TMR0_Set 1BEC                                    _getAD 1072  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 160A  
          DimmerLights_Exceptions@status 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024                          __end_of_my_Main 152E  
                         _setLoad_Enable 07F6              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 1D66  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 0986              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
                         setSw_Status@sw 0023                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0008                   ?_setLoad_AH_AL_Restore 0070  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 17A5  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 1655  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1B9B  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0E3D                     _setSw_Initialization 1BEC  
             __size_of_setLoad_StatusOff 001F                                   ??_main 006E  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0E3D                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1DC0  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0071  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 008F  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 07FF                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 0C2E  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 0069  
                                 _ADRESH 009C                                   _ADRESL 009B  
             i1setLoad_StatusOff@command 0070                         ___awdiv@dividend 0022  
                       __end_of___awtoft 10F5                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0920                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1D04                                   i1l7003 00FD  
                                 i1l7011 011C                                   i1l7021 014F  
                                 i1l7005 0103                                   i1l7031 017E  
                                 i1l7033 0184                                   i1l7017 0138  
                                 i1l7025 0163                                   i1l7009 0116  
                                 i1l7043 01B6                                   i1l7063 01ED  
                                 i1l7047 01BC                                   i1l7049 01C2  
                                 i1l7067 01F3                                   i1l6981 00AC  
                                 i1l6985 00B3                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   u621_25 0087  
                                 _OSCCON 0099                       __size_of_Load_Main 0167  
                                 u736_25 11A3                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1EDE  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1BB7  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1E25  
                                 _Dimmer 00DF                                   _DlySw1 0158  
                                 _DlySw2 015D              __size_of_setLoad_Exceptions 0038  
             __end_of_Mcu_Initialization 1D9B                      __end_of_Buzzer_Main 15BF  
                                 _Memory 0220                                   _Timer0 0120  
     __end_of_setDimmerLights_TriggerAdj 1D44               _setDimmerLights_TriggerAdj 1D34  
                                 ___bmul 1D9B            setDimmerLights_Switch@command 0022  
                                 ___wmul 1F66                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                                ??___lwdiv 0024  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00E8                                   _s_data 00E9  
                                 _setLED 0801                                   _myMain 00A0  
                       _DimmerLightsIntr 007A                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 174C              __end_of_Load_Initialization 1BA5  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002D      __end_of_setDimmerLights_IntrControl 0219  
            _setDimmerLights_IntrControl 004E                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0070  
                  __end_of_SwPointSelect 1E10                          ?_setLoad_Enable 0070  
                          ?_setRF_Enable 0070                          _RfSWPointSelect 1E3B  
           __size_of_Flash_Memory_Modify 0044        setDimmerLights_IntrControl@lights 0076  
            __size_of_DimmerLights_Close 0018                  __size_of_LedPointSelect 001D  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1CD6                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 1800         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 004A              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK4 1092                            __end_of_getAD 1092  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0044  
                     _LED_Initialization 1C5A                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 004B                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070                __size_of_setLoad_StatusOn 0023  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000B  
                       ?_setDimmerLights 0024                        __end_of_Load_Main 0380  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 1BA0  
               __end_of_setDimmerReClock 1C2C                       __size_of_getRxData 0047  
                    ?_LED_Initialization 0070                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0020                           _DimmerLights11 00E0  
                         _DimmerLights22 00E1                     __size_of_setLED_Main 0041  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                     ??_CC2500_WriteByte 0020             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 1575                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1BCC  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0079                        LedPointSelect@led 0021  
                    i1_setLoad_StatusOff 1E25                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0008                              setBuz@count 002C  
                             __pmaintext 160A                      _CC2500_WriteCommand 1EC5  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                                ?___wmul 0020                               ??_TMR0_ISR 0077  
                             ??_TMR0_Set 0020                               _getLoad_AD 0BB5  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00B9  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1BBE                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
           __end_of_setRF_Initialization 1BCC                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 135B                  __end_of_RfSWPointSelect 1E51  
                      Sw_DimmerOnFunc@sw 0063                     ?i1_setLoad_StatusOff 0070  
                                _IOC_ISR 1C66                                  _IOC_Set 1C73  
                   __size_of_setLog_Code 0032                                  _INT_ISR 1C04  
                                _INT_Set 1BA5                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1FE1                        _Flash_Memory_Read 1EF7  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 006F  
                 __size_of_CC2500_TxData 0060                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                                  _RF_Data 00B6  
                                _RF_Main 1B88                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070          __end_of_setControl_Lights_Table 0EC8  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0AD0                          _setPercentValue 14A2  
                ??_setLoad_AH_AL_Restore 0020                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00EA  
           __end_of_CC2500_FrequencyCabr 1C4E                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1D77                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0166  
                                _VarLED2 016A                        __end_of_getRxData 1575  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1DD4  
        __end_of_setDimmerLights_Trigger 1D14                     ??_setRFSW_AdjControl 0064  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 1D04  
                                ___awdiv 16A1                                  ___ftadd 04CC  
                         ??_setSw_Enable 0022                                  ___ftdiv 0F57  
                        __size_of___wmul 001E                                  ___ftmul 0742  
                                ___fttol 0D2C                      __end_of_Switch_Main 1C04  
                                ___lwdiv 12EC                  ??_Buzzer_Initialization 0020  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 14E8  
                                __ptext2 07F6                                  __ptext3 1CE5  
                                __ptext4 0BB5                                  __ptext5 1072  
                                __ptext6 1BFC                                  __ptext7 0380  
                                __ptext8 1BF4                                  __ptext9 0AD0  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0023  
                    Sw_DimmerOnFunc@Idle 0062                    ??i1_setLoad_StatusOff 0071  
                  _DimmerIntrPointSelect 1D77                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 2000                __end_of_Flash_Memory_Read 1F11  
                             _setRF_Main 0CA8                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1BD4                        _DimmerLights_Main 1C37  
                                _my_Main 14E8           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1C37  
                      ??_setRF_ReceiveGO 0070               __end_of_CC2500_ClearRXFIFO 1B8F  
             __end_of_CC2500_ClearTXFIFO 1B93            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1F49  
                    _DelayOffPointSelect 1DE8                                  clrloop0 1BB2  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1C8D  
                   end_of_initialization 004A                ??_DelayOff_Initialization 0023  
                             _setLoad_GO 1BDC                        _CC2500_InitSetREG 11AA  
                          _DelayTime_1us 115D                        __end_of_setTxData 0742  
             __end_of_Flash_Memory_Write 1285                                  init_ram 1BAB  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1BAC  
                             _setSw_Main 0380                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 10F5                   __size_of_setLoad_Count 000E  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1D55  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 09F2                            _CC2500_TxData 085F  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1CA9  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 145E  
                _DimmerLights_Exceptions 15BF                              ?_getLoad_AD 0070  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1C0D  
                    ??_CC2500_ReadStatus 0022                         _setLoad_StatusOn 1117  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
              setLoad_Exceptions@command 0030                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1C42                       _Mcu_Initialization 1D89  
                       ??_setLoad_Enable 0020                 __size_of_CC2500_PowerRST 0043  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$5623 0067                          _setSw_Main$5624 0068  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1F66  
                __end_of_Sw_DimmerOnFunc 0B42                  __end_of_setPercentValue 14E8  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 11D4  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 141A                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1117                            ?_RF_RxDisable 0070  
             __end_of_setLoad_Exceptions 135B                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1EF7                     _setRF_Initialization 1BC5  
                            _Switch_Main 1BFC              setDimmerLights_Clear@lights 0023  
                    setLoad_Exceptions@i 002F                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1DAD                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1E10                     ??_Mcu_Initialization 0020  
                  ??_DelayOffPointSelect 0020                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1DAD                __size_of_Sw_DimmerAdjFunc 004C  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1DC0  
                         __end_of___wmul 1F84                        __size_of_TMR0_ISR 0027  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR0_Set 0008  
                   __end_of_setMemory_GO 1E67            __size_of_setDimmerLights_Main 0073  
                         __end_of_setLED 085F                           __end_of_setBuz 17A5  
                          _setLoad_Count 1C8D          _getDimmerLights_StatusFlag$2128 0022  
                   _CC2500_FrequencyCabr 1C42                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 006F               __size_of_Flash_Memory_Main 001F  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 0EC8                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 12B7  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1EC5  
                              _Load_Main 0219                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1FC2  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                            ?_setLoad_GO 0070                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1F49                      __size_of_getLoad_AD 0079  
                           ?_Buzzer_Main 0070                       _set_TimeoutCleared 1B9B  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0018  
                              _VarErrLED 0162                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1CC7                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              i1setLoad_StatusOff@lights 0071                  __size_of_setRFSW_Status 000F  
              __size_of_CC2500_WriteByte 0014                ??_DimmerLights_Exceptions 002D  
                    ?_set_TimeoutCleared 0070                                _Rx_Length 00E5  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00E6  
                            __pdataBANK4 0245                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                         ?_setLoad_Count 0070                         _CC2500_SIDLEMode 1B93  
             __size_of_DimmerLights_Main 000B                __end_of_setRF_DimmerValue 12EC  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4712 0068  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                               ?_Load_Main 0070  
                               ?_INT_ISR 0070                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                   ??_set_TimeoutCleared 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 008A  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070             setDimmerLights_Clear@command 0022  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 007A  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 0128  
                          _DimmerLights2 0137                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                    __size_of_setRF_Enable 000E  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1F2D  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                    __size_of_setRF_Main 0084                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                              _getBuz_GO 1D66      __end_of_Flash_Memory_Initialization 0689  
            _Flash_Memory_Initialization 05C2                                 ?___awdiv 0020  
                              __ptext100 1CF4                                __ptext101 1DAD  
                              __ptext110 11AA                                __ptext102 174C  
                              __ptext111 1FA3                                __ptext103 16A1  
                              __ptext120 1DD4                                __ptext112 10B2  
                              __ptext104 1BCC                                __ptext121 1575  
                              __ptext113 1C42                                __ptext105 1C2C  
                              __ptext130 1F84                                __ptext122 1B82  
                              __ptext114 115D                                __ptext106 1DE8  
                              __ptext131 1DC0                                __ptext115 1B8F  
                              __ptext107 1E10                                __ptext132 1C04  
                              __ptext124 1183                                __ptext116 1B8B  
                              __ptext108 1B93                                __ptext133 1C16  
                              __ptext125 004E                                __ptext117 1EC5  
                              __ptext109 13D7                                 ?___ftadd 003E  
                              __ptext126 1E25                                __ptext118 1B9B  
                              __ptext127 1D77                                __ptext119 1E95  
                              __ptext128 1C66                                __ptext129 1C21  
                              _getRxData 152E                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 0F57  
                        _setRF_ReceiveGO 1C16                      __size_of_setLoad_GO 0008  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1B85                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1CE5       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0057                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 014C  
          __end_of_setDimmerLights_ERROR 174C             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 115D            __end_of_setDimmerLights_AdjGo 1D34  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
                               ?_my_Main 0070            __end_of_setDimmerLights_Clear 1D24  
                              _r_address 00E7           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1CF4  
                         __size_of_getAD 0020                             _setRF_Enable 1C9B  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1DFC                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 13D7                      _DimmerLightsIntrIOC 00E2  
               __end_of_setLoad_StatusOn 113A                   ??_setRF_Initialization 0020  
                      _CC2500_rfSettings 102F                           ___wmul@product 0024  
                               _LED_Main 1066                          SwPointSelect@sw 0021  
                              clear_ram0 1BB1                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0689      __end_of_DimmerLights_Initialization 1E7E  
            _DimmerLights_Initialization 1E67                       _CC2500_ClearRXFIFO 1B8B  
                     _CC2500_ClearTXFIFO 1B8F           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1BFC                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0070  
            __size_of_setRFSW_AdjControl 003B                    __size_of_setMemory_GO 0016  
                     _Flash_Memory_Write 1256                               ?_getRxData 0070  
                               _TMR0_ISR 1183                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1E3B                                 _TMR0_Set 1BE4  
                       _Sw_DimmerAdjFunc 1655                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00DC  
                   __end_of_RF_RxDisable 1CD6              __end_of_CC2500_WriteCommand 1EDE  
                 ??_CC2500_FrequencyCabr 0026                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 0A61                  __size_of_setDelayOff_GO 0066  
                  __size_of_setSw_Enable 001C                                 _DelayOff 0078  
                           setSw_Main@sw 0069         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0031                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1C5A                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 0009                           setLED_Main@led 0024  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 12B7  
                  _DlyOff_Initialization 1C2C                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1B97                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 0C2E                    _Switch_Initialization 1C80  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1CA9                             _setMemory_GO 1E51  
                   __size_of_Buzzer_Main 004A                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1DD4                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 1C21  
                      setRFSW_Control@sw 0063                      _Load_Initialization 1BA0  
                              setLED@led 0023     __end_of_setDimmerLights_TriggerERROR 1229  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 11FE  
                ??_DimmerIntrPointSelect 0070                       _setLoad_Exceptions 1323  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1F2D                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
                               ___awtoft 10D3                         ??_LedPointSelect 0020  
                               ___ftpack 08BF                             _setSw_Status 1CB8  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1396                      ?_setLoad_Exceptions 0070  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 09F2  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
                        ___lwdiv@divisor 0020                         __size_of_my_Main 0046  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0027  
                               __ptext10 0A61                                 __ptext11 1655  
                               __ptext20 1285                                 __ptext12 1D34  
                               __ptext21 0E3D                                 __ptext13 1D24  
                               __ptext30 0742                                 __ptext22 0EC8  
                               __ptext14 1C80                                 __ptext31 04CC  
                               __ptext23 0920                                 __ptext15 1BEC  
                               __ptext40 1D89                                 __ptext32 1D66  
                               __ptext24 11D4                                 __ptext16 1CD6  
                               __ptext41 1BE4                                 __ptext33 1CC7  
                               __ptext25 1D9B                                 __ptext17 1B88  
                               __ptext50 1C9B                                 __ptext42 1EDE  
                               __ptext34 085F                                 __ptext26 135B  
                               __ptext18 0CA8                                 __ptext51 15BF  
                               __ptext43 1C73                                 __ptext35 09F2  
                               __ptext27 12B7                                 __ptext19 152E  
                               __ptext60 1396                                 __ptext52 11FE  
                               __ptext44 1BA5                                 __ptext36 10F5  
                               __ptext28 113A                                 __ptext61 1C5A  
                               __ptext53 16F5                                 __ptext45 1B97  
                               __ptext37 1E7E                                 __ptext29 17A5  
                               __ptext70 1C37                                 __ptext62 1D55  
                               __ptext54 1D14                                 __ptext46 1BBE  
                               __ptext38 1B85                                 __ptext71 0B42  
                               __ptext63 1FE1                                 __ptext55 1F66  
                               __ptext47 0219                                 __ptext39 1BC5  
                               __ptext80 1E51                                 __ptext72 141A  
                               __ptext64 145E                                 __ptext56 12EC  
                               __ptext48 1323                                 __ptext81 1BDC  
                               __ptext73 1FC2                                 __ptext65 1C4E  
                               __ptext57 1BA0                                 __ptext49 1F2D  
                               __ptext90 1DFC                                 __ptext82 1D44  
                               __ptext74 0DB3                                 __ptext66 05C2  
                               __ptext58 1F11                                 __ptext91 0986  
                               __ptext83 1E67                                 __ptext75 1117  
                               __ptext67 1256                                 __ptext59 1066  
                               __ptext92 14A2                                 __ptext84 1229  
                               __ptext76 1C8D                                 __ptext68 1C0D  
                               __ptext93 0D2C                                 __ptext85 1BB7  
                               __ptext77 0801                                 __ptext69 1EF7  
                               __ptext94 0F57                                 __ptext86 1BD4  
                               __ptext78 1F49                                 __ptext95 10D3  
                               __ptext87 0C2E                                 __ptext79 1EAD  
                               __ptext96 08BF                                 __ptext88 0689  
                               __ptext97 1CA9                                 __ptext89 1CB8  
                               __ptext98 1E3B                                 __ptext99 1D04  
                               __product 0245            ??_setDimmerLights_IntrControl 0072  
                           ??_setLoad_GO 0020                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 0016           __size_of_Dimmer_Initialization 0007  
                 __end_of_setRFSW_Status 1CB8            __end_of_Dimmer_Initialization 1BBE  
           __end_of_setDimmerLights_Main 0BB5              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 004B                              _setRF_Learn 1BF4  
               __end_of_CC2500_SIDLEMode 1B97               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1DFC               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1EAD                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000B                     ??_setLoad_Exceptions 002E  
                        _CC2500_ReadByte 1E7E                       _CC2500_InitPATable 1FA3  
    __size_of_getDimmerLights_StatusFlag 0011            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 0D2C                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006A  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 006C  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 13D7  
                     __end_of_setLoad_GO 1BE4              __end_of_Flash_Memory_Modify 14A2  
                      ??_getPercentValue 0059                              _setLog_Code 1285  
            __end_of_Flash_Memory_Unlock 1C16                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 10B2                       __end_of_setSw_Main 04CC  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E9                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 11D4  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0072                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                  __size_of_setLoad_Enable 0009  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1256  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1229  
            __end_of_setDimmerLights_Adj 145E                              ??_setTxData 0020  
                       ?_setRF_ReceiveGO 0070                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1B85  
   __size_of_setDimmerLights_IntrControl 01CB                              getLoad_AD@i 0028  
                            getLoad_AD@j 0027                     _Flash_Memory_Erasing 1C4E  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007C  
        __end_of_DelayOff_Initialization 1BD4      __size_of_setDimmerLights_IntrIOC_GO 001F  
                             _OPTION_REG 0095                    __end_of_DelayOff_Main 1BDC  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 0920  
       __size_of_setControl_Lights_Table 008B                        _setLoad_StatusOff 1FC2  
                 __end_of_DelayTimejudge 11FE     __size_of_Flash_Memory_Initialization 00C7  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0062  
                     ?_setLoad_StatusOff 0020                    __end_of_DelayTime_1us 1183  
               __end_of_Sw_DimmerAdjFunc 16A1                  __end_of_CC2500_ReadByte 1E95  
           __end_of_setSw_Initialization 1BF4                          _Timeout_Counter 1E95  
                   getPercentValue@value 005B                             _RF_RxDisable 1CC7  
             __end_of_LED_Initialization 1C66         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020                 __size_of_Sw_DimmerOnFunc 0072  
                    ??_setLoad_StatusOff 0021                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1B88                 __end_of_Sw_DimmerOffFunc 0AD0  
                     ??_setLoad_StatusOn 0021          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    __end_of_CC2500_RxData 0A61  
                  __end_of_CC2500_TxData 08BF                    _setLoad_AH_AL_Restore 1F11  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 141A  
