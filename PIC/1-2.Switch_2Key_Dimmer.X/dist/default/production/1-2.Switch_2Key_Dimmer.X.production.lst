

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Oct 20 17:30:22 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	intentry,global,class=CODE,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   132                           	dabs	1,0x7E,2
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  0090                     	;# 
   164  0091                     	;# 
   165  0092                     	;# 
   166  0095                     	;# 
   167  0096                     	;# 
   168  0097                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009B                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  011D                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184  018E                     	;# 
   185  0191                     	;# 
   186  0191                     	;# 
   187  0192                     	;# 
   188  0193                     	;# 
   189  0193                     	;# 
   190  0194                     	;# 
   191  0195                     	;# 
   192  0196                     	;# 
   193  0197                     	;# 
   194  0199                     	;# 
   195  019A                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019C                     	;# 
   201  019C                     	;# 
   202  019D                     	;# 
   203  019E                     	;# 
   204  019F                     	;# 
   205  020D                     	;# 
   206  0210                     	;# 
   207  0211                     	;# 
   208  0211                     	;# 
   209  0212                     	;# 
   210  0212                     	;# 
   211  0213                     	;# 
   212  0213                     	;# 
   213  0214                     	;# 
   214  0214                     	;# 
   215  0215                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0216                     	;# 
   219  0216                     	;# 
   220  0217                     	;# 
   221  0217                     	;# 
   222  0291                     	;# 
   223  0291                     	;# 
   224  0292                     	;# 
   225  0293                     	;# 
   226  0298                     	;# 
   227  0298                     	;# 
   228  0299                     	;# 
   229  029A                     	;# 
   230  0394                     	;# 
   231  0395                     	;# 
   232  0396                     	;# 
   233  0FE4                     	;# 
   234  0FE5                     	;# 
   235  0FE6                     	;# 
   236  0FE7                     	;# 
   237  0FE8                     	;# 
   238  0FE9                     	;# 
   239  0FEA                     	;# 
   240  0FEB                     	;# 
   241  0FED                     	;# 
   242  0FEE                     	;# 
   243  0FEF                     	;# 
   244  0000                     	;# 
   245  0001                     	;# 
   246  0002                     	;# 
   247  0003                     	;# 
   248  0004                     	;# 
   249  0005                     	;# 
   250  0006                     	;# 
   251  0007                     	;# 
   252  0008                     	;# 
   253  0009                     	;# 
   254  000A                     	;# 
   255  000B                     	;# 
   256  000C                     	;# 
   257  000D                     	;# 
   258  000E                     	;# 
   259  0010                     	;# 
   260  0011                     	;# 
   261  0012                     	;# 
   262  0015                     	;# 
   263  0016                     	;# 
   264  0016                     	;# 
   265  0017                     	;# 
   266  0018                     	;# 
   267  0019                     	;# 
   268  001A                     	;# 
   269  001B                     	;# 
   270  001C                     	;# 
   271  008C                     	;# 
   272  008D                     	;# 
   273  008E                     	;# 
   274  0090                     	;# 
   275  0091                     	;# 
   276  0092                     	;# 
   277  0095                     	;# 
   278  0096                     	;# 
   279  0097                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009B                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009E                     	;# 
   287  010C                     	;# 
   288  010D                     	;# 
   289  010E                     	;# 
   290  0116                     	;# 
   291  0117                     	;# 
   292  011D                     	;# 
   293  018C                     	;# 
   294  018D                     	;# 
   295  018E                     	;# 
   296  0191                     	;# 
   297  0191                     	;# 
   298  0192                     	;# 
   299  0193                     	;# 
   300  0193                     	;# 
   301  0194                     	;# 
   302  0195                     	;# 
   303  0196                     	;# 
   304  0197                     	;# 
   305  0199                     	;# 
   306  019A                     	;# 
   307  019B                     	;# 
   308  019B                     	;# 
   309  019B                     	;# 
   310  019B                     	;# 
   311  019C                     	;# 
   312  019C                     	;# 
   313  019D                     	;# 
   314  019E                     	;# 
   315  019F                     	;# 
   316  020D                     	;# 
   317  0210                     	;# 
   318  0211                     	;# 
   319  0211                     	;# 
   320  0212                     	;# 
   321  0212                     	;# 
   322  0213                     	;# 
   323  0213                     	;# 
   324  0214                     	;# 
   325  0214                     	;# 
   326  0215                     	;# 
   327  0215                     	;# 
   328  0215                     	;# 
   329  0216                     	;# 
   330  0216                     	;# 
   331  0217                     	;# 
   332  0217                     	;# 
   333  0291                     	;# 
   334  0291                     	;# 
   335  0292                     	;# 
   336  0293                     	;# 
   337  0298                     	;# 
   338  0298                     	;# 
   339  0299                     	;# 
   340  029A                     	;# 
   341  0394                     	;# 
   342  0395                     	;# 
   343  0396                     	;# 
   344  0FE4                     	;# 
   345  0FE5                     	;# 
   346  0FE6                     	;# 
   347  0FE7                     	;# 
   348  0FE8                     	;# 
   349  0FE9                     	;# 
   350  0FEA                     	;# 
   351  0FEB                     	;# 
   352  0FED                     	;# 
   353  0FEE                     	;# 
   354  0FEF                     	;# 
   355  0000                     	;# 
   356  0001                     	;# 
   357  0002                     	;# 
   358  0003                     	;# 
   359  0004                     	;# 
   360  0005                     	;# 
   361  0006                     	;# 
   362  0007                     	;# 
   363  0008                     	;# 
   364  0009                     	;# 
   365  000A                     	;# 
   366  000B                     	;# 
   367  000C                     	;# 
   368  000D                     	;# 
   369  000E                     	;# 
   370  0010                     	;# 
   371  0011                     	;# 
   372  0012                     	;# 
   373  0015                     	;# 
   374  0016                     	;# 
   375  0016                     	;# 
   376  0017                     	;# 
   377  0018                     	;# 
   378  0019                     	;# 
   379  001A                     	;# 
   380  001B                     	;# 
   381  001C                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  0090                     	;# 
   386  0091                     	;# 
   387  0092                     	;# 
   388  0095                     	;# 
   389  0096                     	;# 
   390  0097                     	;# 
   391  0099                     	;# 
   392  009A                     	;# 
   393  009B                     	;# 
   394  009B                     	;# 
   395  009C                     	;# 
   396  009D                     	;# 
   397  009E                     	;# 
   398  010C                     	;# 
   399  010D                     	;# 
   400  010E                     	;# 
   401  0116                     	;# 
   402  0117                     	;# 
   403  011D                     	;# 
   404  018C                     	;# 
   405  018D                     	;# 
   406  018E                     	;# 
   407  0191                     	;# 
   408  0191                     	;# 
   409  0192                     	;# 
   410  0193                     	;# 
   411  0193                     	;# 
   412  0194                     	;# 
   413  0195                     	;# 
   414  0196                     	;# 
   415  0197                     	;# 
   416  0199                     	;# 
   417  019A                     	;# 
   418  019B                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019C                     	;# 
   423  019C                     	;# 
   424  019D                     	;# 
   425  019E                     	;# 
   426  019F                     	;# 
   427  020D                     	;# 
   428  0210                     	;# 
   429  0211                     	;# 
   430  0211                     	;# 
   431  0212                     	;# 
   432  0212                     	;# 
   433  0213                     	;# 
   434  0213                     	;# 
   435  0214                     	;# 
   436  0214                     	;# 
   437  0215                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0216                     	;# 
   441  0216                     	;# 
   442  0217                     	;# 
   443  0217                     	;# 
   444  0291                     	;# 
   445  0291                     	;# 
   446  0292                     	;# 
   447  0293                     	;# 
   448  0298                     	;# 
   449  0298                     	;# 
   450  0299                     	;# 
   451  029A                     	;# 
   452  0394                     	;# 
   453  0395                     	;# 
   454  0396                     	;# 
   455  0FE4                     	;# 
   456  0FE5                     	;# 
   457  0FE6                     	;# 
   458  0FE7                     	;# 
   459  0FE8                     	;# 
   460  0FE9                     	;# 
   461  0FEA                     	;# 
   462  0FEB                     	;# 
   463  0FED                     	;# 
   464  0FEE                     	;# 
   465  0FEF                     	;# 
   466  0000                     	;# 
   467  0001                     	;# 
   468  0002                     	;# 
   469  0003                     	;# 
   470  0004                     	;# 
   471  0005                     	;# 
   472  0006                     	;# 
   473  0007                     	;# 
   474  0008                     	;# 
   475  0009                     	;# 
   476  000A                     	;# 
   477  000B                     	;# 
   478  000C                     	;# 
   479  000D                     	;# 
   480  000E                     	;# 
   481  0010                     	;# 
   482  0011                     	;# 
   483  0012                     	;# 
   484  0015                     	;# 
   485  0016                     	;# 
   486  0016                     	;# 
   487  0017                     	;# 
   488  0018                     	;# 
   489  0019                     	;# 
   490  001A                     	;# 
   491  001B                     	;# 
   492  001C                     	;# 
   493  008C                     	;# 
   494  008D                     	;# 
   495  008E                     	;# 
   496  0090                     	;# 
   497  0091                     	;# 
   498  0092                     	;# 
   499  0095                     	;# 
   500  0096                     	;# 
   501  0097                     	;# 
   502  0099                     	;# 
   503  009A                     	;# 
   504  009B                     	;# 
   505  009B                     	;# 
   506  009C                     	;# 
   507  009D                     	;# 
   508  009E                     	;# 
   509  010C                     	;# 
   510  010D                     	;# 
   511  010E                     	;# 
   512  0116                     	;# 
   513  0117                     	;# 
   514  011D                     	;# 
   515  018C                     	;# 
   516  018D                     	;# 
   517  018E                     	;# 
   518  0191                     	;# 
   519  0191                     	;# 
   520  0192                     	;# 
   521  0193                     	;# 
   522  0193                     	;# 
   523  0194                     	;# 
   524  0195                     	;# 
   525  0196                     	;# 
   526  0197                     	;# 
   527  0199                     	;# 
   528  019A                     	;# 
   529  019B                     	;# 
   530  019B                     	;# 
   531  019B                     	;# 
   532  019B                     	;# 
   533  019C                     	;# 
   534  019C                     	;# 
   535  019D                     	;# 
   536  019E                     	;# 
   537  019F                     	;# 
   538  020D                     	;# 
   539  0210                     	;# 
   540  0211                     	;# 
   541  0211                     	;# 
   542  0212                     	;# 
   543  0212                     	;# 
   544  0213                     	;# 
   545  0213                     	;# 
   546  0214                     	;# 
   547  0214                     	;# 
   548  0215                     	;# 
   549  0215                     	;# 
   550  0215                     	;# 
   551  0216                     	;# 
   552  0216                     	;# 
   553  0217                     	;# 
   554  0217                     	;# 
   555  0291                     	;# 
   556  0291                     	;# 
   557  0292                     	;# 
   558  0293                     	;# 
   559  0298                     	;# 
   560  0298                     	;# 
   561  0299                     	;# 
   562  029A                     	;# 
   563  0394                     	;# 
   564  0395                     	;# 
   565  0396                     	;# 
   566  0FE4                     	;# 
   567  0FE5                     	;# 
   568  0FE6                     	;# 
   569  0FE7                     	;# 
   570  0FE8                     	;# 
   571  0FE9                     	;# 
   572  0FEA                     	;# 
   573  0FEB                     	;# 
   574  0FED                     	;# 
   575  0FEE                     	;# 
   576  0FEF                     	;# 
   577  0000                     	;# 
   578  0001                     	;# 
   579  0002                     	;# 
   580  0003                     	;# 
   581  0004                     	;# 
   582  0005                     	;# 
   583  0006                     	;# 
   584  0007                     	;# 
   585  0008                     	;# 
   586  0009                     	;# 
   587  000A                     	;# 
   588  000B                     	;# 
   589  000C                     	;# 
   590  000D                     	;# 
   591  000E                     	;# 
   592  0010                     	;# 
   593  0011                     	;# 
   594  0012                     	;# 
   595  0015                     	;# 
   596  0016                     	;# 
   597  0016                     	;# 
   598  0017                     	;# 
   599  0018                     	;# 
   600  0019                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001C                     	;# 
   604  008C                     	;# 
   605  008D                     	;# 
   606  008E                     	;# 
   607  0090                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0095                     	;# 
   611  0096                     	;# 
   612  0097                     	;# 
   613  0099                     	;# 
   614  009A                     	;# 
   615  009B                     	;# 
   616  009B                     	;# 
   617  009C                     	;# 
   618  009D                     	;# 
   619  009E                     	;# 
   620  010C                     	;# 
   621  010D                     	;# 
   622  010E                     	;# 
   623  0116                     	;# 
   624  0117                     	;# 
   625  011D                     	;# 
   626  018C                     	;# 
   627  018D                     	;# 
   628  018E                     	;# 
   629  0191                     	;# 
   630  0191                     	;# 
   631  0192                     	;# 
   632  0193                     	;# 
   633  0193                     	;# 
   634  0194                     	;# 
   635  0195                     	;# 
   636  0196                     	;# 
   637  0197                     	;# 
   638  0199                     	;# 
   639  019A                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019C                     	;# 
   645  019C                     	;# 
   646  019D                     	;# 
   647  019E                     	;# 
   648  019F                     	;# 
   649  020D                     	;# 
   650  0210                     	;# 
   651  0211                     	;# 
   652  0211                     	;# 
   653  0212                     	;# 
   654  0212                     	;# 
   655  0213                     	;# 
   656  0213                     	;# 
   657  0214                     	;# 
   658  0214                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0216                     	;# 
   663  0216                     	;# 
   664  0217                     	;# 
   665  0217                     	;# 
   666  0291                     	;# 
   667  0291                     	;# 
   668  0292                     	;# 
   669  0293                     	;# 
   670  0298                     	;# 
   671  0298                     	;# 
   672  0299                     	;# 
   673  029A                     	;# 
   674  0394                     	;# 
   675  0395                     	;# 
   676  0396                     	;# 
   677  0FE4                     	;# 
   678  0FE5                     	;# 
   679  0FE6                     	;# 
   680  0FE7                     	;# 
   681  0FE8                     	;# 
   682  0FE9                     	;# 
   683  0FEA                     	;# 
   684  0FEB                     	;# 
   685  0FED                     	;# 
   686  0FEE                     	;# 
   687  0FEF                     	;# 
   688  0000                     	;# 
   689  0001                     	;# 
   690  0002                     	;# 
   691  0003                     	;# 
   692  0004                     	;# 
   693  0005                     	;# 
   694  0006                     	;# 
   695  0007                     	;# 
   696  0008                     	;# 
   697  0009                     	;# 
   698  000A                     	;# 
   699  000B                     	;# 
   700  000C                     	;# 
   701  000D                     	;# 
   702  000E                     	;# 
   703  0010                     	;# 
   704  0011                     	;# 
   705  0012                     	;# 
   706  0015                     	;# 
   707  0016                     	;# 
   708  0016                     	;# 
   709  0017                     	;# 
   710  0018                     	;# 
   711  0019                     	;# 
   712  001A                     	;# 
   713  001B                     	;# 
   714  001C                     	;# 
   715  008C                     	;# 
   716  008D                     	;# 
   717  008E                     	;# 
   718  0090                     	;# 
   719  0091                     	;# 
   720  0092                     	;# 
   721  0095                     	;# 
   722  0096                     	;# 
   723  0097                     	;# 
   724  0099                     	;# 
   725  009A                     	;# 
   726  009B                     	;# 
   727  009B                     	;# 
   728  009C                     	;# 
   729  009D                     	;# 
   730  009E                     	;# 
   731  010C                     	;# 
   732  010D                     	;# 
   733  010E                     	;# 
   734  0116                     	;# 
   735  0117                     	;# 
   736  011D                     	;# 
   737  018C                     	;# 
   738  018D                     	;# 
   739  018E                     	;# 
   740  0191                     	;# 
   741  0191                     	;# 
   742  0192                     	;# 
   743  0193                     	;# 
   744  0193                     	;# 
   745  0194                     	;# 
   746  0195                     	;# 
   747  0196                     	;# 
   748  0197                     	;# 
   749  0199                     	;# 
   750  019A                     	;# 
   751  019B                     	;# 
   752  019B                     	;# 
   753  019B                     	;# 
   754  019B                     	;# 
   755  019C                     	;# 
   756  019C                     	;# 
   757  019D                     	;# 
   758  019E                     	;# 
   759  019F                     	;# 
   760  020D                     	;# 
   761  0210                     	;# 
   762  0211                     	;# 
   763  0211                     	;# 
   764  0212                     	;# 
   765  0212                     	;# 
   766  0213                     	;# 
   767  0213                     	;# 
   768  0214                     	;# 
   769  0214                     	;# 
   770  0215                     	;# 
   771  0215                     	;# 
   772  0215                     	;# 
   773  0216                     	;# 
   774  0216                     	;# 
   775  0217                     	;# 
   776  0217                     	;# 
   777  0291                     	;# 
   778  0291                     	;# 
   779  0292                     	;# 
   780  0293                     	;# 
   781  0298                     	;# 
   782  0298                     	;# 
   783  0299                     	;# 
   784  029A                     	;# 
   785  0394                     	;# 
   786  0395                     	;# 
   787  0396                     	;# 
   788  0FE4                     	;# 
   789  0FE5                     	;# 
   790  0FE6                     	;# 
   791  0FE7                     	;# 
   792  0FE8                     	;# 
   793  0FE9                     	;# 
   794  0FEA                     	;# 
   795  0FEB                     	;# 
   796  0FED                     	;# 
   797  0FEE                     	;# 
   798  0FEF                     	;# 
   799  0000                     	;# 
   800  0001                     	;# 
   801  0002                     	;# 
   802  0003                     	;# 
   803  0004                     	;# 
   804  0005                     	;# 
   805  0006                     	;# 
   806  0007                     	;# 
   807  0008                     	;# 
   808  0009                     	;# 
   809  000A                     	;# 
   810  000B                     	;# 
   811  000C                     	;# 
   812  000D                     	;# 
   813  000E                     	;# 
   814  0010                     	;# 
   815  0011                     	;# 
   816  0012                     	;# 
   817  0015                     	;# 
   818  0016                     	;# 
   819  0016                     	;# 
   820  0017                     	;# 
   821  0018                     	;# 
   822  0019                     	;# 
   823  001A                     	;# 
   824  001B                     	;# 
   825  001C                     	;# 
   826  008C                     	;# 
   827  008D                     	;# 
   828  008E                     	;# 
   829  0090                     	;# 
   830  0091                     	;# 
   831  0092                     	;# 
   832  0095                     	;# 
   833  0096                     	;# 
   834  0097                     	;# 
   835  0099                     	;# 
   836  009A                     	;# 
   837  009B                     	;# 
   838  009B                     	;# 
   839  009C                     	;# 
   840  009D                     	;# 
   841  009E                     	;# 
   842  010C                     	;# 
   843  010D                     	;# 
   844  010E                     	;# 
   845  0116                     	;# 
   846  0117                     	;# 
   847  011D                     	;# 
   848  018C                     	;# 
   849  018D                     	;# 
   850  018E                     	;# 
   851  0191                     	;# 
   852  0191                     	;# 
   853  0192                     	;# 
   854  0193                     	;# 
   855  0193                     	;# 
   856  0194                     	;# 
   857  0195                     	;# 
   858  0196                     	;# 
   859  0197                     	;# 
   860  0199                     	;# 
   861  019A                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019D                     	;# 
   869  019E                     	;# 
   870  019F                     	;# 
   871  020D                     	;# 
   872  0210                     	;# 
   873  0211                     	;# 
   874  0211                     	;# 
   875  0212                     	;# 
   876  0212                     	;# 
   877  0213                     	;# 
   878  0213                     	;# 
   879  0214                     	;# 
   880  0214                     	;# 
   881  0215                     	;# 
   882  0215                     	;# 
   883  0215                     	;# 
   884  0216                     	;# 
   885  0216                     	;# 
   886  0217                     	;# 
   887  0217                     	;# 
   888  0291                     	;# 
   889  0291                     	;# 
   890  0292                     	;# 
   891  0293                     	;# 
   892  0298                     	;# 
   893  0298                     	;# 
   894  0299                     	;# 
   895  029A                     	;# 
   896  0394                     	;# 
   897  0395                     	;# 
   898  0396                     	;# 
   899  0FE4                     	;# 
   900  0FE5                     	;# 
   901  0FE6                     	;# 
   902  0FE7                     	;# 
   903  0FE8                     	;# 
   904  0FE9                     	;# 
   905  0FEA                     	;# 
   906  0FEB                     	;# 
   907  0FED                     	;# 
   908  0FEE                     	;# 
   909  0FEF                     	;# 
   910  0000                     	;# 
   911  0001                     	;# 
   912  0002                     	;# 
   913  0003                     	;# 
   914  0004                     	;# 
   915  0005                     	;# 
   916  0006                     	;# 
   917  0007                     	;# 
   918  0008                     	;# 
   919  0009                     	;# 
   920  000A                     	;# 
   921  000B                     	;# 
   922  000C                     	;# 
   923  000D                     	;# 
   924  000E                     	;# 
   925  0010                     	;# 
   926  0011                     	;# 
   927  0012                     	;# 
   928  0015                     	;# 
   929  0016                     	;# 
   930  0016                     	;# 
   931  0017                     	;# 
   932  0018                     	;# 
   933  0019                     	;# 
   934  001A                     	;# 
   935  001B                     	;# 
   936  001C                     	;# 
   937  008C                     	;# 
   938  008D                     	;# 
   939  008E                     	;# 
   940  0090                     	;# 
   941  0091                     	;# 
   942  0092                     	;# 
   943  0095                     	;# 
   944  0096                     	;# 
   945  0097                     	;# 
   946  0099                     	;# 
   947  009A                     	;# 
   948  009B                     	;# 
   949  009B                     	;# 
   950  009C                     	;# 
   951  009D                     	;# 
   952  009E                     	;# 
   953  010C                     	;# 
   954  010D                     	;# 
   955  010E                     	;# 
   956  0116                     	;# 
   957  0117                     	;# 
   958  011D                     	;# 
   959  018C                     	;# 
   960  018D                     	;# 
   961  018E                     	;# 
   962  0191                     	;# 
   963  0191                     	;# 
   964  0192                     	;# 
   965  0193                     	;# 
   966  0193                     	;# 
   967  0194                     	;# 
   968  0195                     	;# 
   969  0196                     	;# 
   970  0197                     	;# 
   971  0199                     	;# 
   972  019A                     	;# 
   973  019B                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019B                     	;# 
   977  019C                     	;# 
   978  019C                     	;# 
   979  019D                     	;# 
   980  019E                     	;# 
   981  019F                     	;# 
   982  020D                     	;# 
   983  0210                     	;# 
   984  0211                     	;# 
   985  0211                     	;# 
   986  0212                     	;# 
   987  0212                     	;# 
   988  0213                     	;# 
   989  0213                     	;# 
   990  0214                     	;# 
   991  0214                     	;# 
   992  0215                     	;# 
   993  0215                     	;# 
   994  0215                     	;# 
   995  0216                     	;# 
   996  0216                     	;# 
   997  0217                     	;# 
   998  0217                     	;# 
   999  0291                     	;# 
  1000  0291                     	;# 
  1001  0292                     	;# 
  1002  0293                     	;# 
  1003  0298                     	;# 
  1004  0298                     	;# 
  1005  0299                     	;# 
  1006  029A                     	;# 
  1007  0394                     	;# 
  1008  0395                     	;# 
  1009  0396                     	;# 
  1010  0FE4                     	;# 
  1011  0FE5                     	;# 
  1012  0FE6                     	;# 
  1013  0FE7                     	;# 
  1014  0FE8                     	;# 
  1015  0FE9                     	;# 
  1016  0FEA                     	;# 
  1017  0FEB                     	;# 
  1018  0FED                     	;# 
  1019  0FEE                     	;# 
  1020  0FEF                     	;# 
  1021  0000                     	;# 
  1022  0001                     	;# 
  1023  0002                     	;# 
  1024  0003                     	;# 
  1025  0004                     	;# 
  1026  0005                     	;# 
  1027  0006                     	;# 
  1028  0007                     	;# 
  1029  0008                     	;# 
  1030  0009                     	;# 
  1031  000A                     	;# 
  1032  000B                     	;# 
  1033  000C                     	;# 
  1034  000D                     	;# 
  1035  000E                     	;# 
  1036  0010                     	;# 
  1037  0011                     	;# 
  1038  0012                     	;# 
  1039  0015                     	;# 
  1040  0016                     	;# 
  1041  0016                     	;# 
  1042  0017                     	;# 
  1043  0018                     	;# 
  1044  0019                     	;# 
  1045  001A                     	;# 
  1046  001B                     	;# 
  1047  001C                     	;# 
  1048  008C                     	;# 
  1049  008D                     	;# 
  1050  008E                     	;# 
  1051  0090                     	;# 
  1052  0091                     	;# 
  1053  0092                     	;# 
  1054  0095                     	;# 
  1055  0096                     	;# 
  1056  0097                     	;# 
  1057  0099                     	;# 
  1058  009A                     	;# 
  1059  009B                     	;# 
  1060  009B                     	;# 
  1061  009C                     	;# 
  1062  009D                     	;# 
  1063  009E                     	;# 
  1064  010C                     	;# 
  1065  010D                     	;# 
  1066  010E                     	;# 
  1067  0116                     	;# 
  1068  0117                     	;# 
  1069  011D                     	;# 
  1070  018C                     	;# 
  1071  018D                     	;# 
  1072  018E                     	;# 
  1073  0191                     	;# 
  1074  0191                     	;# 
  1075  0192                     	;# 
  1076  0193                     	;# 
  1077  0193                     	;# 
  1078  0194                     	;# 
  1079  0195                     	;# 
  1080  0196                     	;# 
  1081  0197                     	;# 
  1082  0199                     	;# 
  1083  019A                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019B                     	;# 
  1088  019C                     	;# 
  1089  019C                     	;# 
  1090  019D                     	;# 
  1091  019E                     	;# 
  1092  019F                     	;# 
  1093  020D                     	;# 
  1094  0210                     	;# 
  1095  0211                     	;# 
  1096  0211                     	;# 
  1097  0212                     	;# 
  1098  0212                     	;# 
  1099  0213                     	;# 
  1100  0213                     	;# 
  1101  0214                     	;# 
  1102  0214                     	;# 
  1103  0215                     	;# 
  1104  0215                     	;# 
  1105  0215                     	;# 
  1106  0216                     	;# 
  1107  0216                     	;# 
  1108  0217                     	;# 
  1109  0217                     	;# 
  1110  0291                     	;# 
  1111  0291                     	;# 
  1112  0292                     	;# 
  1113  0293                     	;# 
  1114  0298                     	;# 
  1115  0298                     	;# 
  1116  0299                     	;# 
  1117  029A                     	;# 
  1118  0394                     	;# 
  1119  0395                     	;# 
  1120  0396                     	;# 
  1121  0FE4                     	;# 
  1122  0FE5                     	;# 
  1123  0FE6                     	;# 
  1124  0FE7                     	;# 
  1125  0FE8                     	;# 
  1126  0FE9                     	;# 
  1127  0FEA                     	;# 
  1128  0FEB                     	;# 
  1129  0FED                     	;# 
  1130  0FEE                     	;# 
  1131  0FEF                     	;# 
  1132  0000                     	;# 
  1133  0001                     	;# 
  1134  0002                     	;# 
  1135  0003                     	;# 
  1136  0004                     	;# 
  1137  0005                     	;# 
  1138  0006                     	;# 
  1139  0007                     	;# 
  1140  0008                     	;# 
  1141  0009                     	;# 
  1142  000A                     	;# 
  1143  000B                     	;# 
  1144  000C                     	;# 
  1145  000D                     	;# 
  1146  000E                     	;# 
  1147  0010                     	;# 
  1148  0011                     	;# 
  1149  0012                     	;# 
  1150  0015                     	;# 
  1151  0016                     	;# 
  1152  0016                     	;# 
  1153  0017                     	;# 
  1154  0018                     	;# 
  1155  0019                     	;# 
  1156  001A                     	;# 
  1157  001B                     	;# 
  1158  001C                     	;# 
  1159  008C                     	;# 
  1160  008D                     	;# 
  1161  008E                     	;# 
  1162  0090                     	;# 
  1163  0091                     	;# 
  1164  0092                     	;# 
  1165  0095                     	;# 
  1166  0096                     	;# 
  1167  0097                     	;# 
  1168  0099                     	;# 
  1169  009A                     	;# 
  1170  009B                     	;# 
  1171  009B                     	;# 
  1172  009C                     	;# 
  1173  009D                     	;# 
  1174  009E                     	;# 
  1175  010C                     	;# 
  1176  010D                     	;# 
  1177  010E                     	;# 
  1178  0116                     	;# 
  1179  0117                     	;# 
  1180  011D                     	;# 
  1181  018C                     	;# 
  1182  018D                     	;# 
  1183  018E                     	;# 
  1184  0191                     	;# 
  1185  0191                     	;# 
  1186  0192                     	;# 
  1187  0193                     	;# 
  1188  0193                     	;# 
  1189  0194                     	;# 
  1190  0195                     	;# 
  1191  0196                     	;# 
  1192  0197                     	;# 
  1193  0199                     	;# 
  1194  019A                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019C                     	;# 
  1200  019C                     	;# 
  1201  019D                     	;# 
  1202  019E                     	;# 
  1203  019F                     	;# 
  1204  020D                     	;# 
  1205  0210                     	;# 
  1206  0211                     	;# 
  1207  0211                     	;# 
  1208  0212                     	;# 
  1209  0212                     	;# 
  1210  0213                     	;# 
  1211  0213                     	;# 
  1212  0214                     	;# 
  1213  0214                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0216                     	;# 
  1218  0216                     	;# 
  1219  0217                     	;# 
  1220  0217                     	;# 
  1221  0291                     	;# 
  1222  0291                     	;# 
  1223  0292                     	;# 
  1224  0293                     	;# 
  1225  0298                     	;# 
  1226  0298                     	;# 
  1227  0299                     	;# 
  1228  029A                     	;# 
  1229  0394                     	;# 
  1230  0395                     	;# 
  1231  0396                     	;# 
  1232  0FE4                     	;# 
  1233  0FE5                     	;# 
  1234  0FE6                     	;# 
  1235  0FE7                     	;# 
  1236  0FE8                     	;# 
  1237  0FE9                     	;# 
  1238  0FEA                     	;# 
  1239  0FEB                     	;# 
  1240  0FED                     	;# 
  1241  0FEE                     	;# 
  1242  0FEF                     	;# 
  1243  0000                     	;# 
  1244  0001                     	;# 
  1245  0002                     	;# 
  1246  0003                     	;# 
  1247  0004                     	;# 
  1248  0005                     	;# 
  1249  0006                     	;# 
  1250  0007                     	;# 
  1251  0008                     	;# 
  1252  0009                     	;# 
  1253  000A                     	;# 
  1254  000B                     	;# 
  1255  000C                     	;# 
  1256  000D                     	;# 
  1257  000E                     	;# 
  1258  0010                     	;# 
  1259  0011                     	;# 
  1260  0012                     	;# 
  1261  0015                     	;# 
  1262  0016                     	;# 
  1263  0016                     	;# 
  1264  0017                     	;# 
  1265  0018                     	;# 
  1266  0019                     	;# 
  1267  001A                     	;# 
  1268  001B                     	;# 
  1269  001C                     	;# 
  1270  008C                     	;# 
  1271  008D                     	;# 
  1272  008E                     	;# 
  1273  0090                     	;# 
  1274  0091                     	;# 
  1275  0092                     	;# 
  1276  0095                     	;# 
  1277  0096                     	;# 
  1278  0097                     	;# 
  1279  0099                     	;# 
  1280  009A                     	;# 
  1281  009B                     	;# 
  1282  009B                     	;# 
  1283  009C                     	;# 
  1284  009D                     	;# 
  1285  009E                     	;# 
  1286  010C                     	;# 
  1287  010D                     	;# 
  1288  010E                     	;# 
  1289  0116                     	;# 
  1290  0117                     	;# 
  1291  011D                     	;# 
  1292  018C                     	;# 
  1293  018D                     	;# 
  1294  018E                     	;# 
  1295  0191                     	;# 
  1296  0191                     	;# 
  1297  0192                     	;# 
  1298  0193                     	;# 
  1299  0193                     	;# 
  1300  0194                     	;# 
  1301  0195                     	;# 
  1302  0196                     	;# 
  1303  0197                     	;# 
  1304  0199                     	;# 
  1305  019A                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019B                     	;# 
  1309  019B                     	;# 
  1310  019C                     	;# 
  1311  019C                     	;# 
  1312  019D                     	;# 
  1313  019E                     	;# 
  1314  019F                     	;# 
  1315  020D                     	;# 
  1316  0210                     	;# 
  1317  0211                     	;# 
  1318  0211                     	;# 
  1319  0212                     	;# 
  1320  0212                     	;# 
  1321  0213                     	;# 
  1322  0213                     	;# 
  1323  0214                     	;# 
  1324  0214                     	;# 
  1325  0215                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0216                     	;# 
  1329  0216                     	;# 
  1330  0217                     	;# 
  1331  0217                     	;# 
  1332  0291                     	;# 
  1333  0291                     	;# 
  1334  0292                     	;# 
  1335  0293                     	;# 
  1336  0298                     	;# 
  1337  0298                     	;# 
  1338  0299                     	;# 
  1339  029A                     	;# 
  1340  0394                     	;# 
  1341  0395                     	;# 
  1342  0396                     	;# 
  1343  0FE4                     	;# 
  1344  0FE5                     	;# 
  1345  0FE6                     	;# 
  1346  0FE7                     	;# 
  1347  0FE8                     	;# 
  1348  0FE9                     	;# 
  1349  0FEA                     	;# 
  1350  0FEB                     	;# 
  1351  0FED                     	;# 
  1352  0FEE                     	;# 
  1353  0FEF                     	;# 
  1354  0000                     	;# 
  1355  0001                     	;# 
  1356  0002                     	;# 
  1357  0003                     	;# 
  1358  0004                     	;# 
  1359  0005                     	;# 
  1360  0006                     	;# 
  1361  0007                     	;# 
  1362  0008                     	;# 
  1363  0009                     	;# 
  1364  000A                     	;# 
  1365  000B                     	;# 
  1366  000C                     	;# 
  1367  000D                     	;# 
  1368  000E                     	;# 
  1369  0010                     	;# 
  1370  0011                     	;# 
  1371  0012                     	;# 
  1372  0015                     	;# 
  1373  0016                     	;# 
  1374  0016                     	;# 
  1375  0017                     	;# 
  1376  0018                     	;# 
  1377  0019                     	;# 
  1378  001A                     	;# 
  1379  001B                     	;# 
  1380  001C                     	;# 
  1381  008C                     	;# 
  1382  008D                     	;# 
  1383  008E                     	;# 
  1384  0090                     	;# 
  1385  0091                     	;# 
  1386  0092                     	;# 
  1387  0095                     	;# 
  1388  0096                     	;# 
  1389  0097                     	;# 
  1390  0099                     	;# 
  1391  009A                     	;# 
  1392  009B                     	;# 
  1393  009B                     	;# 
  1394  009C                     	;# 
  1395  009D                     	;# 
  1396  009E                     	;# 
  1397  010C                     	;# 
  1398  010D                     	;# 
  1399  010E                     	;# 
  1400  0116                     	;# 
  1401  0117                     	;# 
  1402  011D                     	;# 
  1403  018C                     	;# 
  1404  018D                     	;# 
  1405  018E                     	;# 
  1406  0191                     	;# 
  1407  0191                     	;# 
  1408  0192                     	;# 
  1409  0193                     	;# 
  1410  0193                     	;# 
  1411  0194                     	;# 
  1412  0195                     	;# 
  1413  0196                     	;# 
  1414  0197                     	;# 
  1415  0199                     	;# 
  1416  019A                     	;# 
  1417  019B                     	;# 
  1418  019B                     	;# 
  1419  019B                     	;# 
  1420  019B                     	;# 
  1421  019C                     	;# 
  1422  019C                     	;# 
  1423  019D                     	;# 
  1424  019E                     	;# 
  1425  019F                     	;# 
  1426  020D                     	;# 
  1427  0210                     	;# 
  1428  0211                     	;# 
  1429  0211                     	;# 
  1430  0212                     	;# 
  1431  0212                     	;# 
  1432  0213                     	;# 
  1433  0213                     	;# 
  1434  0214                     	;# 
  1435  0214                     	;# 
  1436  0215                     	;# 
  1437  0215                     	;# 
  1438  0215                     	;# 
  1439  0216                     	;# 
  1440  0216                     	;# 
  1441  0217                     	;# 
  1442  0217                     	;# 
  1443  0291                     	;# 
  1444  0291                     	;# 
  1445  0292                     	;# 
  1446  0293                     	;# 
  1447  0298                     	;# 
  1448  0298                     	;# 
  1449  0299                     	;# 
  1450  029A                     	;# 
  1451  0394                     	;# 
  1452  0395                     	;# 
  1453  0396                     	;# 
  1454  0FE4                     	;# 
  1455  0FE5                     	;# 
  1456  0FE6                     	;# 
  1457  0FE7                     	;# 
  1458  0FE8                     	;# 
  1459  0FE9                     	;# 
  1460  0FEA                     	;# 
  1461  0FEB                     	;# 
  1462  0FED                     	;# 
  1463  0FEE                     	;# 
  1464  0FEF                     	;# 
  1465  0000                     	;# 
  1466  0001                     	;# 
  1467  0002                     	;# 
  1468  0003                     	;# 
  1469  0004                     	;# 
  1470  0005                     	;# 
  1471  0006                     	;# 
  1472  0007                     	;# 
  1473  0008                     	;# 
  1474  0009                     	;# 
  1475  000A                     	;# 
  1476  000B                     	;# 
  1477  000C                     	;# 
  1478  000D                     	;# 
  1479  000E                     	;# 
  1480  0010                     	;# 
  1481  0011                     	;# 
  1482  0012                     	;# 
  1483  0015                     	;# 
  1484  0016                     	;# 
  1485  0016                     	;# 
  1486  0017                     	;# 
  1487  0018                     	;# 
  1488  0019                     	;# 
  1489  001A                     	;# 
  1490  001B                     	;# 
  1491  001C                     	;# 
  1492  008C                     	;# 
  1493  008D                     	;# 
  1494  008E                     	;# 
  1495  0090                     	;# 
  1496  0091                     	;# 
  1497  0092                     	;# 
  1498  0095                     	;# 
  1499  0096                     	;# 
  1500  0097                     	;# 
  1501  0099                     	;# 
  1502  009A                     	;# 
  1503  009B                     	;# 
  1504  009B                     	;# 
  1505  009C                     	;# 
  1506  009D                     	;# 
  1507  009E                     	;# 
  1508  010C                     	;# 
  1509  010D                     	;# 
  1510  010E                     	;# 
  1511  0116                     	;# 
  1512  0117                     	;# 
  1513  011D                     	;# 
  1514  018C                     	;# 
  1515  018D                     	;# 
  1516  018E                     	;# 
  1517  0191                     	;# 
  1518  0191                     	;# 
  1519  0192                     	;# 
  1520  0193                     	;# 
  1521  0193                     	;# 
  1522  0194                     	;# 
  1523  0195                     	;# 
  1524  0196                     	;# 
  1525  0197                     	;# 
  1526  0199                     	;# 
  1527  019A                     	;# 
  1528  019B                     	;# 
  1529  019B                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019C                     	;# 
  1533  019C                     	;# 
  1534  019D                     	;# 
  1535  019E                     	;# 
  1536  019F                     	;# 
  1537  020D                     	;# 
  1538  0210                     	;# 
  1539  0211                     	;# 
  1540  0211                     	;# 
  1541  0212                     	;# 
  1542  0212                     	;# 
  1543  0213                     	;# 
  1544  0213                     	;# 
  1545  0214                     	;# 
  1546  0214                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0216                     	;# 
  1551  0216                     	;# 
  1552  0217                     	;# 
  1553  0217                     	;# 
  1554  0291                     	;# 
  1555  0291                     	;# 
  1556  0292                     	;# 
  1557  0293                     	;# 
  1558  0298                     	;# 
  1559  0298                     	;# 
  1560  0299                     	;# 
  1561  029A                     	;# 
  1562  0394                     	;# 
  1563  0395                     	;# 
  1564  0396                     	;# 
  1565  0FE4                     	;# 
  1566  0FE5                     	;# 
  1567  0FE6                     	;# 
  1568  0FE7                     	;# 
  1569  0FE8                     	;# 
  1570  0FE9                     	;# 
  1571  0FEA                     	;# 
  1572  0FEB                     	;# 
  1573  0FED                     	;# 
  1574  0FEE                     	;# 
  1575  0FEF                     	;# 
  1576  0000                     	;# 
  1577  0001                     	;# 
  1578  0002                     	;# 
  1579  0003                     	;# 
  1580  0004                     	;# 
  1581  0005                     	;# 
  1582  0006                     	;# 
  1583  0007                     	;# 
  1584  0008                     	;# 
  1585  0009                     	;# 
  1586  000A                     	;# 
  1587  000B                     	;# 
  1588  000C                     	;# 
  1589  000D                     	;# 
  1590  000E                     	;# 
  1591  0010                     	;# 
  1592  0011                     	;# 
  1593  0012                     	;# 
  1594  0015                     	;# 
  1595  0016                     	;# 
  1596  0016                     	;# 
  1597  0017                     	;# 
  1598  0018                     	;# 
  1599  0019                     	;# 
  1600  001A                     	;# 
  1601  001B                     	;# 
  1602  001C                     	;# 
  1603  008C                     	;# 
  1604  008D                     	;# 
  1605  008E                     	;# 
  1606  0090                     	;# 
  1607  0091                     	;# 
  1608  0092                     	;# 
  1609  0095                     	;# 
  1610  0096                     	;# 
  1611  0097                     	;# 
  1612  0099                     	;# 
  1613  009A                     	;# 
  1614  009B                     	;# 
  1615  009B                     	;# 
  1616  009C                     	;# 
  1617  009D                     	;# 
  1618  009E                     	;# 
  1619  010C                     	;# 
  1620  010D                     	;# 
  1621  010E                     	;# 
  1622  0116                     	;# 
  1623  0117                     	;# 
  1624  011D                     	;# 
  1625  018C                     	;# 
  1626  018D                     	;# 
  1627  018E                     	;# 
  1628  0191                     	;# 
  1629  0191                     	;# 
  1630  0192                     	;# 
  1631  0193                     	;# 
  1632  0193                     	;# 
  1633  0194                     	;# 
  1634  0195                     	;# 
  1635  0196                     	;# 
  1636  0197                     	;# 
  1637  0199                     	;# 
  1638  019A                     	;# 
  1639  019B                     	;# 
  1640  019B                     	;# 
  1641  019B                     	;# 
  1642  019B                     	;# 
  1643  019C                     	;# 
  1644  019C                     	;# 
  1645  019D                     	;# 
  1646  019E                     	;# 
  1647  019F                     	;# 
  1648  020D                     	;# 
  1649  0210                     	;# 
  1650  0211                     	;# 
  1651  0211                     	;# 
  1652  0212                     	;# 
  1653  0212                     	;# 
  1654  0213                     	;# 
  1655  0213                     	;# 
  1656  0214                     	;# 
  1657  0214                     	;# 
  1658  0215                     	;# 
  1659  0215                     	;# 
  1660  0215                     	;# 
  1661  0216                     	;# 
  1662  0216                     	;# 
  1663  0217                     	;# 
  1664  0217                     	;# 
  1665  0291                     	;# 
  1666  0291                     	;# 
  1667  0292                     	;# 
  1668  0293                     	;# 
  1669  0298                     	;# 
  1670  0298                     	;# 
  1671  0299                     	;# 
  1672  029A                     	;# 
  1673  0394                     	;# 
  1674  0395                     	;# 
  1675  0396                     	;# 
  1676  0FE4                     	;# 
  1677  0FE5                     	;# 
  1678  0FE6                     	;# 
  1679  0FE7                     	;# 
  1680  0FE8                     	;# 
  1681  0FE9                     	;# 
  1682  0FEA                     	;# 
  1683  0FEB                     	;# 
  1684  0FED                     	;# 
  1685  0FEE                     	;# 
  1686  0FEF                     	;# 
  1687  0000                     	;# 
  1688  0001                     	;# 
  1689  0002                     	;# 
  1690  0003                     	;# 
  1691  0004                     	;# 
  1692  0005                     	;# 
  1693  0006                     	;# 
  1694  0007                     	;# 
  1695  0008                     	;# 
  1696  0009                     	;# 
  1697  000A                     	;# 
  1698  000B                     	;# 
  1699  000C                     	;# 
  1700  000D                     	;# 
  1701  000E                     	;# 
  1702  0010                     	;# 
  1703  0011                     	;# 
  1704  0012                     	;# 
  1705  0015                     	;# 
  1706  0016                     	;# 
  1707  0016                     	;# 
  1708  0017                     	;# 
  1709  0018                     	;# 
  1710  0019                     	;# 
  1711  001A                     	;# 
  1712  001B                     	;# 
  1713  001C                     	;# 
  1714  008C                     	;# 
  1715  008D                     	;# 
  1716  008E                     	;# 
  1717  0090                     	;# 
  1718  0091                     	;# 
  1719  0092                     	;# 
  1720  0095                     	;# 
  1721  0096                     	;# 
  1722  0097                     	;# 
  1723  0099                     	;# 
  1724  009A                     	;# 
  1725  009B                     	;# 
  1726  009B                     	;# 
  1727  009C                     	;# 
  1728  009D                     	;# 
  1729  009E                     	;# 
  1730  010C                     	;# 
  1731  010D                     	;# 
  1732  010E                     	;# 
  1733  0116                     	;# 
  1734  0117                     	;# 
  1735  011D                     	;# 
  1736  018C                     	;# 
  1737  018D                     	;# 
  1738  018E                     	;# 
  1739  0191                     	;# 
  1740  0191                     	;# 
  1741  0192                     	;# 
  1742  0193                     	;# 
  1743  0193                     	;# 
  1744  0194                     	;# 
  1745  0195                     	;# 
  1746  0196                     	;# 
  1747  0197                     	;# 
  1748  0199                     	;# 
  1749  019A                     	;# 
  1750  019B                     	;# 
  1751  019B                     	;# 
  1752  019B                     	;# 
  1753  019B                     	;# 
  1754  019C                     	;# 
  1755  019C                     	;# 
  1756  019D                     	;# 
  1757  019E                     	;# 
  1758  019F                     	;# 
  1759  020D                     	;# 
  1760  0210                     	;# 
  1761  0211                     	;# 
  1762  0211                     	;# 
  1763  0212                     	;# 
  1764  0212                     	;# 
  1765  0213                     	;# 
  1766  0213                     	;# 
  1767  0214                     	;# 
  1768  0214                     	;# 
  1769  0215                     	;# 
  1770  0215                     	;# 
  1771  0215                     	;# 
  1772  0216                     	;# 
  1773  0216                     	;# 
  1774  0217                     	;# 
  1775  0217                     	;# 
  1776  0291                     	;# 
  1777  0291                     	;# 
  1778  0292                     	;# 
  1779  0293                     	;# 
  1780  0298                     	;# 
  1781  0298                     	;# 
  1782  0299                     	;# 
  1783  029A                     	;# 
  1784  0394                     	;# 
  1785  0395                     	;# 
  1786  0396                     	;# 
  1787  0FE4                     	;# 
  1788  0FE5                     	;# 
  1789  0FE6                     	;# 
  1790  0FE7                     	;# 
  1791  0FE8                     	;# 
  1792  0FE9                     	;# 
  1793  0FEA                     	;# 
  1794  0FEB                     	;# 
  1795  0FED                     	;# 
  1796  0FEE                     	;# 
  1797  0FEF                     	;# 
  1798  0000                     	;# 
  1799  0001                     	;# 
  1800  0002                     	;# 
  1801  0003                     	;# 
  1802  0004                     	;# 
  1803  0005                     	;# 
  1804  0006                     	;# 
  1805  0007                     	;# 
  1806  0008                     	;# 
  1807  0009                     	;# 
  1808  000A                     	;# 
  1809  000B                     	;# 
  1810  000C                     	;# 
  1811  000D                     	;# 
  1812  000E                     	;# 
  1813  0010                     	;# 
  1814  0011                     	;# 
  1815  0012                     	;# 
  1816  0015                     	;# 
  1817  0016                     	;# 
  1818  0016                     	;# 
  1819  0017                     	;# 
  1820  0018                     	;# 
  1821  0019                     	;# 
  1822  001A                     	;# 
  1823  001B                     	;# 
  1824  001C                     	;# 
  1825  008C                     	;# 
  1826  008D                     	;# 
  1827  008E                     	;# 
  1828  0090                     	;# 
  1829  0091                     	;# 
  1830  0092                     	;# 
  1831  0095                     	;# 
  1832  0096                     	;# 
  1833  0097                     	;# 
  1834  0099                     	;# 
  1835  009A                     	;# 
  1836  009B                     	;# 
  1837  009B                     	;# 
  1838  009C                     	;# 
  1839  009D                     	;# 
  1840  009E                     	;# 
  1841  010C                     	;# 
  1842  010D                     	;# 
  1843  010E                     	;# 
  1844  0116                     	;# 
  1845  0117                     	;# 
  1846  011D                     	;# 
  1847  018C                     	;# 
  1848  018D                     	;# 
  1849  018E                     	;# 
  1850  0191                     	;# 
  1851  0191                     	;# 
  1852  0192                     	;# 
  1853  0193                     	;# 
  1854  0193                     	;# 
  1855  0194                     	;# 
  1856  0195                     	;# 
  1857  0196                     	;# 
  1858  0197                     	;# 
  1859  0199                     	;# 
  1860  019A                     	;# 
  1861  019B                     	;# 
  1862  019B                     	;# 
  1863  019B                     	;# 
  1864  019B                     	;# 
  1865  019C                     	;# 
  1866  019C                     	;# 
  1867  019D                     	;# 
  1868  019E                     	;# 
  1869  019F                     	;# 
  1870  020D                     	;# 
  1871  0210                     	;# 
  1872  0211                     	;# 
  1873  0211                     	;# 
  1874  0212                     	;# 
  1875  0212                     	;# 
  1876  0213                     	;# 
  1877  0213                     	;# 
  1878  0214                     	;# 
  1879  0214                     	;# 
  1880  0215                     	;# 
  1881  0215                     	;# 
  1882  0215                     	;# 
  1883  0216                     	;# 
  1884  0216                     	;# 
  1885  0217                     	;# 
  1886  0217                     	;# 
  1887  0291                     	;# 
  1888  0291                     	;# 
  1889  0292                     	;# 
  1890  0293                     	;# 
  1891  0298                     	;# 
  1892  0298                     	;# 
  1893  0299                     	;# 
  1894  029A                     	;# 
  1895  0394                     	;# 
  1896  0395                     	;# 
  1897  0396                     	;# 
  1898  0FE4                     	;# 
  1899  0FE5                     	;# 
  1900  0FE6                     	;# 
  1901  0FE7                     	;# 
  1902  0FE8                     	;# 
  1903  0FE9                     	;# 
  1904  0FEA                     	;# 
  1905  0FEB                     	;# 
  1906  0FED                     	;# 
  1907  0FEE                     	;# 
  1908  0FEF                     	;# 
  1909  0000                     	;# 
  1910  0001                     	;# 
  1911  0002                     	;# 
  1912  0003                     	;# 
  1913  0004                     	;# 
  1914  0005                     	;# 
  1915  0006                     	;# 
  1916  0007                     	;# 
  1917  0008                     	;# 
  1918  0009                     	;# 
  1919  000A                     	;# 
  1920  000B                     	;# 
  1921  000C                     	;# 
  1922  000D                     	;# 
  1923  000E                     	;# 
  1924  0010                     	;# 
  1925  0011                     	;# 
  1926  0012                     	;# 
  1927  0015                     	;# 
  1928  0016                     	;# 
  1929  0016                     	;# 
  1930  0017                     	;# 
  1931  0018                     	;# 
  1932  0019                     	;# 
  1933  001A                     	;# 
  1934  001B                     	;# 
  1935  001C                     	;# 
  1936  008C                     	;# 
  1937  008D                     	;# 
  1938  008E                     	;# 
  1939  0090                     	;# 
  1940  0091                     	;# 
  1941  0092                     	;# 
  1942  0095                     	;# 
  1943  0096                     	;# 
  1944  0097                     	;# 
  1945  0099                     	;# 
  1946  009A                     	;# 
  1947  009B                     	;# 
  1948  009B                     	;# 
  1949  009C                     	;# 
  1950  009D                     	;# 
  1951  009E                     	;# 
  1952  010C                     	;# 
  1953  010D                     	;# 
  1954  010E                     	;# 
  1955  0116                     	;# 
  1956  0117                     	;# 
  1957  011D                     	;# 
  1958  018C                     	;# 
  1959  018D                     	;# 
  1960  018E                     	;# 
  1961  0191                     	;# 
  1962  0191                     	;# 
  1963  0192                     	;# 
  1964  0193                     	;# 
  1965  0193                     	;# 
  1966  0194                     	;# 
  1967  0195                     	;# 
  1968  0196                     	;# 
  1969  0197                     	;# 
  1970  0199                     	;# 
  1971  019A                     	;# 
  1972  019B                     	;# 
  1973  019B                     	;# 
  1974  019B                     	;# 
  1975  019B                     	;# 
  1976  019C                     	;# 
  1977  019C                     	;# 
  1978  019D                     	;# 
  1979  019E                     	;# 
  1980  019F                     	;# 
  1981  020D                     	;# 
  1982  0210                     	;# 
  1983  0211                     	;# 
  1984  0211                     	;# 
  1985  0212                     	;# 
  1986  0212                     	;# 
  1987  0213                     	;# 
  1988  0213                     	;# 
  1989  0214                     	;# 
  1990  0214                     	;# 
  1991  0215                     	;# 
  1992  0215                     	;# 
  1993  0215                     	;# 
  1994  0216                     	;# 
  1995  0216                     	;# 
  1996  0217                     	;# 
  1997  0217                     	;# 
  1998  0291                     	;# 
  1999  0291                     	;# 
  2000  0292                     	;# 
  2001  0293                     	;# 
  2002  0298                     	;# 
  2003  0298                     	;# 
  2004  0299                     	;# 
  2005  029A                     	;# 
  2006  0394                     	;# 
  2007  0395                     	;# 
  2008  0396                     	;# 
  2009  0FE4                     	;# 
  2010  0FE5                     	;# 
  2011  0FE6                     	;# 
  2012  0FE7                     	;# 
  2013  0FE8                     	;# 
  2014  0FE9                     	;# 
  2015  0FEA                     	;# 
  2016  0FEB                     	;# 
  2017  0FED                     	;# 
  2018  0FEE                     	;# 
  2019  0FEF                     	;# 
  2020                           
  2021                           	psect	idataBANK3
  2022  1404                     __pidataBANK3:	
  2023                           
  2024                           ;initializer for __product
  2025  1404  3463               	retlw	99
  2026  1405  3402               	retlw	2
  2027  1406  3400               	retlw	0
  2028  1407  3400               	retlw	0
  2029  1408  3400               	retlw	0
  2030  1409  3400               	retlw	0
  2031  140A  3400               	retlw	0
  2032  140B  3400               	retlw	0
  2033  140C  3400               	retlw	0
  2034  140D  3400               	retlw	0
  2035  140E  3400               	retlw	0
  2036  140F  3400               	retlw	0
  2037  1410  34FF               	retlw	255
  2038  1411  34FF               	retlw	255
  2039  1412  34FF               	retlw	255
  2040  1413  3400               	retlw	0
  2041  1414  3400               	retlw	0
  2042  1415  3400               	retlw	0
  2043  1416  3400               	retlw	0
  2044  1417  3400               	retlw	0
  2045  1418  3400               	retlw	0
  2046  1419  3400               	retlw	0
  2047  141A  3400               	retlw	0
  2048  141B  3400               	retlw	0
  2049  141C  3400               	retlw	0
  2050  141D  3400               	retlw	0
  2051  141E  3400               	retlw	0
  2052  141F  3400               	retlw	0
  2053  1420  3400               	retlw	0
  2054  1421  3400               	retlw	0
  2055  1422  3400               	retlw	0
  2056  1423  3400               	retlw	0
  2057                           
  2058                           	psect	stringtext
  2059  1000                     __pstringtext:	
  2060  1000                     _CC2500_registers_address:	
  2061  1000  3403               	retlw	3
  2062  1001  3416               	retlw	22
  2063  1002  3417               	retlw	23
  2064  1003  341E               	retlw	30
  2065  1004  341F               	retlw	31
  2066  1005  3420               	retlw	32
  2067  1006  342A               	retlw	42
  2068  1007  342B               	retlw	43
  2069  1008  340B               	retlw	11
  2070  1009  340C               	retlw	12
  2071  100A  340D               	retlw	13
  2072  100B  340E               	retlw	14
  2073  100C  340F               	retlw	15
  2074  100D  3410               	retlw	16
  2075  100E  3411               	retlw	17
  2076  100F  3412               	retlw	18
  2077  1010  3413               	retlw	19
  2078  1011  3414               	retlw	20
  2079  1012  340A               	retlw	10
  2080  1013  3415               	retlw	21
  2081  1014  3421               	retlw	33
  2082  1015  3422               	retlw	34
  2083  1016  3418               	retlw	24
  2084  1017  3419               	retlw	25
  2085  1018  341A               	retlw	26
  2086  1019  341B               	retlw	27
  2087  101A  341C               	retlw	28
  2088  101B  341D               	retlw	29
  2089  101C  3423               	retlw	35
  2090  101D  3424               	retlw	36
  2091  101E  3425               	retlw	37
  2092  101F  3426               	retlw	38
  2093  1020  3429               	retlw	41
  2094  1021  342C               	retlw	44
  2095  1022  342D               	retlw	45
  2096  1023  342E               	retlw	46
  2097  1024  3400               	retlw	0
  2098  1025  3401               	retlw	1
  2099  1026  3402               	retlw	2
  2100  1027  3407               	retlw	7
  2101  1028  3408               	retlw	8
  2102  1029  3409               	retlw	9
  2103  102A  3406               	retlw	6
  2104  102B  3404               	retlw	4
  2105  102C  3405               	retlw	5
  2106  102D  3427               	retlw	39
  2107  102E  3428               	retlw	40
  2108  102F                     __end_of_CC2500_registers_address:	
  2109  102F                     _CC2500_rfSettings:	
  2110  102F  3407               	retlw	7
  2111  1030  3407               	retlw	7
  2112  1031  3430               	retlw	48
  2113  1032  3487               	retlw	135
  2114  1033  346B               	retlw	107
  2115  1034  34F8               	retlw	248
  2116  1035  347F               	retlw	127
  2117  1036  343F               	retlw	63
  2118  1037  3409               	retlw	9
  2119  1038  3400               	retlw	0
  2120  1039  345C               	retlw	92
  2121  103A  34A7               	retlw	167
  2122  103B  3462               	retlw	98
  2123  103C  3486               	retlw	134
  2124  103D  3483               	retlw	131
  2125  103E  3403               	retlw	3
  2126  103F  3422               	retlw	34
  2127  1040  34F8               	retlw	248
  2128  1041  3400               	retlw	0
  2129  1042  3444               	retlw	68
  2130  1043  34B6               	retlw	182
  2131  1044  3410               	retlw	16
  2132  1045  3418               	retlw	24
  2133  1046  341D               	retlw	29
  2134  1047  341C               	retlw	28
  2135  1048  34C7               	retlw	199
  2136  1049  3400               	retlw	0
  2137  104A  34B2               	retlw	178
  2138  104B  34EA               	retlw	234
  2139  104C  340A               	retlw	10
  2140  104D  3400               	retlw	0
  2141  104E  3411               	retlw	17
  2142  104F  3459               	retlw	89
  2143  1050  3488               	retlw	136
  2144  1051  3431               	retlw	49
  2145  1052  340B               	retlw	11
  2146  1053  342F               	retlw	47
  2147  1054  342E               	retlw	46
  2148  1055  3406               	retlw	6
  2149  1056  3404               	retlw	4
  2150  1057  3405               	retlw	5
  2151  1058  3400               	retlw	0
  2152  1059  3430               	retlw	48
  2153  105A  34D3               	retlw	211
  2154  105B  3491               	retlw	145
  2155  105C  3441               	retlw	65
  2156  105D  3400               	retlw	0
  2157  105E                     __end_of_CC2500_rfSettings:	
  2158  105E                     _CC2500_patable_vaule:	
  2159  105E  34FE               	retlw	254
  2160  105F  34FE               	retlw	254
  2161  1060  34FE               	retlw	254
  2162  1061  34FE               	retlw	254
  2163  1062  34FE               	retlw	254
  2164  1063  34FE               	retlw	254
  2165  1064  34FE               	retlw	254
  2166  1065  34FE               	retlw	254
  2167  1066                     __end_of_CC2500_patable_vaule:	
  2168                           
  2169                           	psect	nvBANK0
  2170  006E                     __pnvBANK0:	
  2171  006E                     _product:	
  2172  006E                     	ds	1
  2173  000C                     _PORTA	set	12
  2174  000D                     _PORTB	set	13
  2175  000E                     _PORTC	set	14
  2176  0015                     _TMR0	set	21
  2177  005F                     _GIE	set	95
  2178  005B                     _IOCIE	set	91
  2179  0058                     _IOCIF	set	88
  2180  005E                     _PEIE	set	94
  2181  0060                     _RA0	set	96
  2182  0063                     _RA3	set	99
  2183  0064                     _RA4	set	100
  2184  0066                     _RA6	set	102
  2185  0067                     _RA7	set	103
  2186  0068                     _RB0	set	104
  2187  0069                     _RB1	set	105
  2188  006B                     _RB3	set	107
  2189  006C                     _RB4	set	108
  2190  006D                     _RB5	set	109
  2191  0070                     _RC0	set	112
  2192  0071                     _RC1	set	113
  2193  0072                     _RC2	set	114
  2194  0074                     _RC4	set	116
  2195  0075                     _RC5	set	117
  2196  0077                     _RC7	set	119
  2197  005D                     _TMR0IE	set	93
  2198  005A                     _TMR0IF	set	90
  2199  009D                     _ADCON0	set	157
  2200  009E                     _ADCON1	set	158
  2201  009C                     _ADRESH	set	156
  2202  009B                     _ADRESL	set	155
  2203  0095                     _OPTION_REG	set	149
  2204  0099                     _OSCCON	set	153
  2205  008C                     _TRISA	set	140
  2206  008D                     _TRISB	set	141
  2207  008E                     _TRISC	set	142
  2208  04E9                     _GO_nDONE	set	1257
  2209  0117                     _FVRCON	set	279
  2210  010C                     _LATA	set	268
  2211  010D                     _LATB	set	269
  2212  010E                     _LATC	set	270
  2213  018C                     _ANSELA	set	396
  2214  018D                     _ANSELB	set	397
  2215  018E                     _ANSELC	set	398
  2216  0192                     _PMADRH	set	402
  2217  0191                     _PMADRL	set	401
  2218  0196                     _PMCON2	set	406
  2219  0194                     _PMDATH	set	404
  2220  0193                     _PMDATL	set	403
  2221  0CAE                     _CFGS	set	3246
  2222  0CAC                     _FREE	set	3244
  2223  0CAD                     _LWLO	set	3245
  2224  0CA8                     _RD	set	3240
  2225  0CA9                     _WR	set	3241
  2226  0CAA                     _WREN	set	3242
  2227  1069                     _WPUB1	set	4201
  2228  106A                     _WPUB2	set	4202
  2229  0396                     _IOCBF	set	918
  2230  0395                     _IOCBN	set	917
  2231  0394                     _IOCBP	set	916
  2232  1CB2                     _IOCBF2	set	7346
  2233                           
  2234                           ; #config settings
  2235  0000                     
  2236                           	psect	cinit
  2237  0015                     start_initialization:	
  2238  0015                     __initialization:	
  2239                           
  2240                           ; Clear objects allocated to BITCOMMON
  2241  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2242                           
  2243                           ; Clear objects allocated to COMMON
  2244  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2245  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2246  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2247  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2248                           
  2249                           ; Clear objects allocated to BANK0
  2250  001A  01EF               	clrf	__pbssBANK0& (0+127)
  2251                           
  2252                           ; Clear objects allocated to BANK1
  2253  001B  30A0               	movlw	low __pbssBANK1
  2254  001C  0084               	movwf	4
  2255  001D  3000               	movlw	high __pbssBANK1
  2256  001E  0085               	movwf	5
  2257  001F  304C               	movlw	76
  2258  0020  3190  2078  3180   	fcall	clear_ram0
  2259                           
  2260                           ; Clear objects allocated to BANK2
  2261  0023  3020               	movlw	low __pbssBANK2
  2262  0024  0084               	movwf	4
  2263  0025  3001               	movlw	high __pbssBANK2
  2264  0026  0085               	movwf	5
  2265  0027  304E               	movlw	78
  2266  0028  3190  2078  3180   	fcall	clear_ram0
  2267                           
  2268                           ; Clear objects allocated to BANK3
  2269  002B  30A0               	movlw	low __pbssBANK3
  2270  002C  0084               	movwf	4
  2271  002D  3001               	movlw	high __pbssBANK3
  2272  002E  0085               	movwf	5
  2273  002F  3025               	movlw	37
  2274  0030  3190  2078  3180   	fcall	clear_ram0
  2275                           
  2276                           ; Initialize objects allocated to BANK3
  2277  0033  3004               	movlw	low __pidataBANK3
  2278  0034  0084               	movwf	4
  2279  0035  3094               	movlw	(high __pidataBANK3)| (0+128)
  2280  0036  0085               	movwf	5
  2281  0037  30C5               	movlw	low __pdataBANK3
  2282  0038  0086               	movwf	6
  2283  0039  3001               	movlw	high __pdataBANK3
  2284  003A  0087               	movwf	7
  2285  003B  3020               	movlw	32
  2286  003C  3190  2072         	fcall	init_ram
  2287  003E                     end_of_initialization:	
  2288                           ;End of C runtime variable initialization code
  2289                           
  2290  003E                     __end_of__initialization:	
  2291  003E  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2292  003F  0020               	movlb	0
  2293  0040  3196  2E6F         	ljmp	_main	;jump to C main() function
  2294                           
  2295                           	psect	bitbssCOMMON
  2296  03E0                     __pbitbssCOMMON:	
  2297  03E0                     _Receive_OK:	
  2298  03E0                     	ds	1
  2299  03E1                     _Transceive_OK:	
  2300  03E1                     	ds	1
  2301                           
  2302                           	psect	bssCOMMON
  2303  0078                     __pbssCOMMON:	
  2304  0078                     _DelayOff:	
  2305  0078                     	ds	1
  2306  0079                     _DimmerLights:	
  2307  0079                     	ds	1
  2308  007A                     _DimmerLightsIntr:	
  2309  007A                     	ds	1
  2310  007B                     _SPI0Buffer:	
  2311  007B                     	ds	1
  2312                           
  2313                           	psect	bssBANK0
  2314  006F                     __pbssBANK0:	
  2315  006F                     _Sw:	
  2316  006F                     	ds	1
  2317                           
  2318                           	psect	bssBANK1
  2319  00A0                     __pbssBANK1:	
  2320  00A0                     _RF_Data:	
  2321  00A0                     	ds	21
  2322  00B5                     _myMain:	
  2323  00B5                     	ds	18
  2324  00C7                     _Buz1:	
  2325  00C7                     	ds	12
  2326  00D3                     _RF1:	
  2327  00D3                     	ds	5
  2328  00D8                     _RF_Count:	
  2329  00D8                     	ds	2
  2330  00DA                     _CRC:	
  2331  00DA                     	ds	1
  2332  00DB                     _Dimmer:	
  2333  00DB                     	ds	1
  2334  00DC                     _DimmerLights11:	
  2335  00DC                     	ds	1
  2336  00DD                     _DimmerLights22:	
  2337  00DD                     	ds	1
  2338  00DE                     _DimmerLightsIntrIOC:	
  2339  00DE                     	ds	1
  2340  00DF                     _LED:	
  2341  00DF                     	ds	1
  2342  00E0                     _RFSW:	
  2343  00E0                     	ds	1
  2344  00E1                     _RSSI:	
  2345  00E1                     	ds	1
  2346  00E2                     _Rx_Length:	
  2347  00E2                     	ds	1
  2348  00E3                     _Tx_Length:	
  2349  00E3                     	ds	1
  2350  00E4                     _r_address:	
  2351  00E4                     	ds	1
  2352  00E5                     _r_data:	
  2353  00E5                     	ds	1
  2354  00E6                     _s_data:	
  2355  00E6                     	ds	1
  2356  00E7                     _Dimmer1:	
  2357  00E7                     	ds	3
  2358  00EA                     _RFSW1:	
  2359  00EA                     	ds	1
  2360  00EB                     _RFSW2:	
  2361  00EB                     	ds	1
  2362                           
  2363                           	psect	bssBANK2
  2364  0120                     __pbssBANK2:	
  2365  0120                     _Timer0:	
  2366  0120                     	ds	8
  2367  0128                     _DimmerLights1:	
  2368  0128                     	ds	15
  2369  0137                     _DimmerLights2:	
  2370  0137                     	ds	15
  2371  0146                     _Sw1:	
  2372  0146                     	ds	9
  2373  014F                     _Sw2:	
  2374  014F                     	ds	9
  2375  0158                     _DlySw1:	
  2376  0158                     	ds	5
  2377  015D                     _DlySw2:	
  2378  015D                     	ds	5
  2379  0162                     _VarErrLED:	
  2380  0162                     	ds	4
  2381  0166                     _VarLED1:	
  2382  0166                     	ds	4
  2383  016A                     _VarLED2:	
  2384  016A                     	ds	4
  2385                           
  2386                           	psect	bssBANK3
  2387  01A0                     __pbssBANK3:	
  2388  01A0                     _Memory:	
  2389  01A0                     	ds	37
  2390                           
  2391                           	psect	dataBANK3
  2392  01C5                     __pdataBANK3:	
  2393  01C5                     __product:	
  2394  01C5                     	ds	32
  2395                           
  2396                           	psect	clrtext
  2397  1078                     clear_ram0:	
  2398                           ;	Called with FSR0 containing the base address, and
  2399                           ;	WREG with the size to clear
  2400                           
  2401  1078  0064               	clrwdt	;clear the watchdog before getting into this loop
  2402  1079                     clrloop0:	
  2403  1079  0180               	clrf	0	;clear RAM location pointed to by FSR
  2404  107A  3101               	addfsr 0,1
  2405  107B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2406  107C  2879               	goto	clrloop0	;have we reached the end yet?
  2407  107D  3400               	retlw	0	;all done for this memory range, return
  2408                           
  2409                           	psect	inittext
  2410  1072                     init_ram:	
  2411  1072  00FE               	movwf	126
  2412  1073                     initloop:	
  2413  1073  0012               	moviw fsr0++
  2414  1074  001E               	movwi fsr1++
  2415  1075  0BFE               	decfsz	126,f
  2416  1076  2873               	goto	initloop
  2417  1077  3400               	retlw	0
  2418                           
  2419                           	psect	cstackCOMMON
  2420  0070                     __pcstackCOMMON:	
  2421  0070                     ?_Timeout_Counter:	
  2422  0070                     ?_set_TimeoutCleared:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0070                     ?_CC2500_WriteByte:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0070                     ?_CC2500_WriteCommand:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0070                     ?_CC2500_ReadStatus:	
  2432                           ; 0 bytes @ 0x0
  2433                           
  2434  0070                     ?_CC2500_ReadByte:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437  0070                     ?_CC2500_PowerRST:	
  2438                           ; 0 bytes @ 0x0
  2439                           
  2440  0070                     ?_CC2500_InitSetREG:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0070                     ?_CC2500_InitPATable:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0070                     ?_CC2500_ClearTXFIFO:	
  2447                           ; 0 bytes @ 0x0
  2448                           
  2449  0070                     ?_CC2500_ClearRXFIFO:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0070                     ?_CC2500_FrequencyCabr:	
  2453                           ; 0 bytes @ 0x0
  2454                           
  2455  0070                     ?_CC2500_SIDLEMode:	
  2456                           ; 0 bytes @ 0x0
  2457                           
  2458  0070                     ?_DlyOff_Initialization:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0070                     ?_DlyOff_Main:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0070                     ?_setTxData:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0070                     ?_setDimmerLights_Initialization:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0070                     ?_Dimmer_Initialization:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0070                     ?_setMemory_GO:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0070                     ?_setDimmerLights_Main:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0070                     ?_setLED_Initialization:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0070                     ?_setLED_Main:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_Fosc_Set:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_IO_Set:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_TMR0_Set:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_ADC_Set:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_IOC_Set:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_IOC_ISR:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_TMR0_ISR:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_Flash_Memory_Write:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_Flash_Memory_Modify:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_myMain_Initialization:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_Switch_Initialization:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_RF_Initialization:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_my_Main:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_Switch_Main:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_RF_Main:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_setSw_Enable:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_setRF_Enable:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_setRF_Initialization:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_setRF_Main:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_RF_RxDisable:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_getRxData:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_setLog_Code:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_setControl_Lights_Table:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_setRFSW_Control:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_setRFSW_AdjControl:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_setRF_DimmerValue:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_setSw_Initialization:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_setSw_Main:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_Sw_DimmerOnFunc:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_Sw_DimmerAdjFunc:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_Sw_DimmerOffFunc:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_Buzzer_Initialization:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_Buzzer_Main:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_CC2500_TxData:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_CC2500_RxData:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_CC2500_PowerOnInitial:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_DelayOffPointSelect:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_DelayOff_Initialization:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_DelayOff_Main:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_DimmerIntrIOCPointSelect:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ??_DimmerIntrIOCPointSelect:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_DimmerIntrPointSelect:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ??_DimmerIntrPointSelect:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setDimmerLights_IntrControl:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_DimmerLightsPointSelect:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_DimmerLights_Initialization:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_DimmerLights_Close:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_DimmerLights_Main:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setDimmerLights_AdjRF:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_LedPointSelect:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_LED_Initialization:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_LED_Main:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_Mcu_Initialization:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_ISR:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerReClock:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_Flash_Memory_Initialization:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_Flash_Memory_Main:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_Flash_Memory_Unlock:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_Flash_Memory_Erasing:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setRF_Learn:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_RfSWPointSelect:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_TouchPower:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_SwPointSelect:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_DelayTimejudge:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_getDimmerLights_StatusFlag:	
  2681                           ; 1 bytes @ 0x0
  2682                           
  2683  0070                     ?_getPercentValue:	
  2684                           ; 1 bytes @ 0x0
  2685                           
  2686  0070                     ?_Flash_Memory_Read:	
  2687                           ; 1 bytes @ 0x0
  2688                           
  2689  0070                     ?_setPercentValue:	
  2690                           ; 1 bytes @ 0x0
  2691                           
  2692                           
  2693                           ; 1 bytes @ 0x0
  2694  0070                     	ds	1
  2695  0071                     DimmerIntrIOCPointSelect@lights:	
  2696  0071                     DimmerIntrPointSelect@lights:	
  2697                           ; 1 bytes @ 0x1
  2698                           
  2699                           
  2700                           ; 1 bytes @ 0x1
  2701  0071                     	ds	1
  2702  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2703  0072                     ??_setDimmerLights_IntrControl:	
  2704                           ; 0 bytes @ 0x2
  2705                           
  2706  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2707                           ; 0 bytes @ 0x2
  2708                           
  2709                           
  2710                           ; 1 bytes @ 0x2
  2711  0072                     	ds	1
  2712  0073                     ??_IOC_ISR:	
  2713  0073                     ??_setDimmerReClock:	
  2714                           ; 0 bytes @ 0x3
  2715                           
  2716                           
  2717                           ; 0 bytes @ 0x3
  2718  0073                     	ds	3
  2719  0076                     setDimmerLights_IntrControl@lights:	
  2720                           
  2721                           ; 1 bytes @ 0x6
  2722  0076                     	ds	1
  2723  0077                     ??_TMR0_ISR:	
  2724  0077                     ??_ISR:	
  2725                           ; 0 bytes @ 0x7
  2726                           
  2727                           
  2728                           ; 0 bytes @ 0x7
  2729  0077                     	ds	1
  2730                           
  2731                           	psect	cstackBANK0
  2732  0020                     __pcstackBANK0:	
  2733  0020                     ??_Timeout_Counter:	
  2734  0020                     ??_set_TimeoutCleared:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0020                     ??_CC2500_WriteByte:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0020                     ??_CC2500_ReadByte:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0020                     ?_DelayTime_1us:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0020                     ??_setTxData:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0020                     ??_Dimmer_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0020                     ??_getDimmerLights_StatusFlag:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0020                     ??_setMemory_GO:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0020                     ??_Fosc_Set:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0020                     ??_IO_Set:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0020                     ??_TMR0_Set:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0020                     ??_ADC_Set:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0020                     ??_IOC_Set:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0020                     ??_Flash_Memory_Read:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0020                     ??_Flash_Memory_Write:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0020                     ??_myMain_Initialization:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0020                     ??_setRF_Enable:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0020                     ??_setRF_Initialization:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0020                     ??_Buzzer_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0020                     ??_Buzzer_Main:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0020                     ??_DelayOffPointSelect:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0020                     ??_DimmerLightsPointSelect:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0020                     ??_LedPointSelect:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0020                     ??_Mcu_Initialization:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0020                     ??_Flash_Memory_Unlock:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0020                     ??_Flash_Memory_Erasing:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0020                     ??_setRF_Learn:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0020                     ??_RfSWPointSelect:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0020                     ??_TouchPower:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0020                     ??_SwPointSelect:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0020                     ?___bmul:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0020                     ?_getBuz_GO:	
  2828                           ; 1 bytes @ 0x0
  2829                           
  2830  0020                     ?___awdiv:	
  2831                           ; 2 bytes @ 0x0
  2832                           
  2833  0020                     ?___ftpack:	
  2834                           ; 2 bytes @ 0x0
  2835                           
  2836  0020                     setRF_Learn@command:	
  2837                           ; 3 bytes @ 0x0
  2838                           
  2839  0020                     setRF_Enable@command:	
  2840                           ; 1 bytes @ 0x0
  2841                           
  2842  0020                     ___bmul@multiplicand:	
  2843                           ; 1 bytes @ 0x0
  2844                           
  2845  0020                     DelayTime_1us@count:	
  2846                           ; 1 bytes @ 0x0
  2847                           
  2848  0020                     ___awdiv@divisor:	
  2849                           ; 2 bytes @ 0x0
  2850                           
  2851  0020                     ___ftpack@arg:	
  2852                           ; 2 bytes @ 0x0
  2853                           
  2854                           
  2855                           ; 3 bytes @ 0x0
  2856  0020                     	ds	1
  2857  0021                     ??_RF_Initialization:	
  2858  0021                     ??___bmul:	
  2859                           ; 0 bytes @ 0x1
  2860                           
  2861  0021                     CC2500_WriteByte@loop_a:	
  2862                           ; 0 bytes @ 0x1
  2863                           
  2864  0021                     CC2500_ReadByte@loop_b:	
  2865                           ; 1 bytes @ 0x1
  2866                           
  2867  0021                     DelayOffPointSelect@sw:	
  2868                           ; 1 bytes @ 0x1
  2869                           
  2870  0021                     DimmerLightsPointSelect@lights:	
  2871                           ; 1 bytes @ 0x1
  2872                           
  2873  0021                     getDimmerLights_StatusFlag@Status:	
  2874                           ; 1 bytes @ 0x1
  2875                           
  2876  0021                     LedPointSelect@led:	
  2877                           ; 1 bytes @ 0x1
  2878                           
  2879  0021                     Flash_Memory_Read@i:	
  2880                           ; 1 bytes @ 0x1
  2881                           
  2882  0021                     Flash_Memory_Write@i:	
  2883                           ; 1 bytes @ 0x1
  2884                           
  2885  0021                     RfSWPointSelect@sw:	
  2886                           ; 1 bytes @ 0x1
  2887                           
  2888  0021                     SwPointSelect@sw:	
  2889                           ; 1 bytes @ 0x1
  2890                           
  2891                           
  2892                           ; 1 bytes @ 0x1
  2893  0021                     	ds	1
  2894  0022                     ??_CC2500_WriteCommand:	
  2895  0022                     ??_CC2500_ReadStatus:	
  2896                           ; 0 bytes @ 0x2
  2897                           
  2898  0022                     ??_DelayTime_1us:	
  2899                           ; 0 bytes @ 0x2
  2900                           
  2901  0022                     ?_CC2500_WriteREG:	
  2902                           ; 0 bytes @ 0x2
  2903                           
  2904  0022                     ??_DlyOff_Initialization:	
  2905                           ; 0 bytes @ 0x2
  2906                           
  2907  0022                     ?_setSw_Status:	
  2908                           ; 0 bytes @ 0x2
  2909                           
  2910  0022                     ?_setRFSW_Status:	
  2911                           ; 0 bytes @ 0x2
  2912                           
  2913  0022                     ?_setDimmerLights_Trigger:	
  2914                           ; 0 bytes @ 0x2
  2915                           
  2916  0022                     ?_setDimmerLights_Switch:	
  2917                           ; 0 bytes @ 0x2
  2918                           
  2919  0022                     ??_setDimmerLights_Initialization:	
  2920                           ; 0 bytes @ 0x2
  2921                           
  2922  0022                     ?_setLED:	
  2923                           ; 0 bytes @ 0x2
  2924                           
  2925  0022                     ??_setLED_Main:	
  2926                           ; 0 bytes @ 0x2
  2927                           
  2928  0022                     ??_setSw_Enable:	
  2929                           ; 0 bytes @ 0x2
  2930                           
  2931  0022                     ??_getBuz_GO:	
  2932                           ; 0 bytes @ 0x2
  2933                           
  2934  0022                     ?_setDimmerLights_AdjGo:	
  2935                           ; 0 bytes @ 0x2
  2936                           
  2937  0022                     ?_setDimmerLights_TriggerAdj:	
  2938                           ; 0 bytes @ 0x2
  2939                           
  2940  0022                     CC2500_WriteREG@value:	
  2941                           ; 0 bytes @ 0x2
  2942                           
  2943  0022                     DlyOff_Initialization@sw:	
  2944                           ; 1 bytes @ 0x2
  2945                           
  2946  0022                     _getDimmerLights_StatusFlag$1884:	
  2947                           ; 1 bytes @ 0x2
  2948                           
  2949  0022                     setDimmerLights_Switch@command:	
  2950                           ; 1 bytes @ 0x2
  2951                           
  2952  0022                     setDimmerLights_AdjGo@command:	
  2953                           ; 1 bytes @ 0x2
  2954                           
  2955  0022                     setDimmerLights_Trigger@command:	
  2956                           ; 1 bytes @ 0x2
  2957                           
  2958  0022                     setDimmerLights_TriggerAdj@command:	
  2959                           ; 1 bytes @ 0x2
  2960                           
  2961  0022                     setLED@command:	
  2962                           ; 1 bytes @ 0x2
  2963                           
  2964  0022                     Flash_Memory_Read@address:	
  2965                           ; 1 bytes @ 0x2
  2966                           
  2967  0022                     setMemory_GO@command:	
  2968                           ; 1 bytes @ 0x2
  2969                           
  2970  0022                     setRFSW_Status@command:	
  2971                           ; 1 bytes @ 0x2
  2972                           
  2973  0022                     setSw_Enable@command:	
  2974                           ; 1 bytes @ 0x2
  2975                           
  2976  0022                     setSw_Status@command:	
  2977                           ; 1 bytes @ 0x2
  2978                           
  2979  0022                     ___bmul@product:	
  2980                           ; 1 bytes @ 0x2
  2981                           
  2982  0022                     DelayTime_1us@i:	
  2983                           ; 1 bytes @ 0x2
  2984                           
  2985  0022                     ___awdiv@dividend:	
  2986                           ; 2 bytes @ 0x2
  2987                           
  2988                           
  2989                           ; 2 bytes @ 0x2
  2990  0022                     	ds	1
  2991  0023                     ??_CC2500_WriteREG:	
  2992  0023                     ??_setSw_Status:	
  2993                           ; 0 bytes @ 0x3
  2994                           
  2995  0023                     ??_setRFSW_Status:	
  2996                           ; 0 bytes @ 0x3
  2997                           
  2998  0023                     ??_setDimmerLights_Trigger:	
  2999                           ; 0 bytes @ 0x3
  3000                           
  3001  0023                     ??_setDimmerLights_Switch:	
  3002                           ; 0 bytes @ 0x3
  3003                           
  3004  0023                     ??_setLED:	
  3005                           ; 0 bytes @ 0x3
  3006                           
  3007  0023                     ??_DelayOff_Initialization:	
  3008                           ; 0 bytes @ 0x3
  3009                           
  3010  0023                     ??_DimmerLights_Close:	
  3011                           ; 0 bytes @ 0x3
  3012                           
  3013  0023                     ??_setDimmerLights_AdjGo:	
  3014                           ; 0 bytes @ 0x3
  3015                           
  3016  0023                     ??_setDimmerLights_TriggerAdj:	
  3017                           ; 0 bytes @ 0x3
  3018                           
  3019  0023                     CC2500_WriteCommand@command:	
  3020                           ; 0 bytes @ 0x3
  3021                           
  3022  0023                     CC2500_ReadStatus@status_addr:	
  3023                           ; 1 bytes @ 0x3
  3024                           
  3025  0023                     setDimmerLights_Initialization@lights:	
  3026                           ; 1 bytes @ 0x3
  3027                           
  3028  0023                     setDimmerLights_Switch@lights:	
  3029                           ; 1 bytes @ 0x3
  3030                           
  3031  0023                     setDimmerLights_AdjGo@lights:	
  3032                           ; 1 bytes @ 0x3
  3033                           
  3034  0023                     setDimmerLights_Trigger@lights:	
  3035                           ; 1 bytes @ 0x3
  3036                           
  3037  0023                     setDimmerLights_TriggerAdj@lights:	
  3038                           ; 1 bytes @ 0x3
  3039                           
  3040  0023                     setLED@led:	
  3041                           ; 1 bytes @ 0x3
  3042                           
  3043  0023                     Flash_Memory_Read@ret:	
  3044                           ; 1 bytes @ 0x3
  3045                           
  3046  0023                     setRFSW_Status@sw:	
  3047                           ; 1 bytes @ 0x3
  3048                           
  3049  0023                     setSw_Status@sw:	
  3050                           ; 1 bytes @ 0x3
  3051                           
  3052  0023                     ___bmul@multiplier:	
  3053                           ; 1 bytes @ 0x3
  3054                           
  3055  0023                     ___ftpack@exp:	
  3056                           ; 1 bytes @ 0x3
  3057                           
  3058                           
  3059                           ; 1 bytes @ 0x3
  3060  0023                     	ds	1
  3061  0024                     ??_CC2500_ClearTXFIFO:	
  3062  0024                     ??_CC2500_ClearRXFIFO:	
  3063                           ; 0 bytes @ 0x4
  3064                           
  3065  0024                     ??_CC2500_SIDLEMode:	
  3066                           ; 0 bytes @ 0x4
  3067                           
  3068  0024                     ??_DelayTimejudge:	
  3069                           ; 0 bytes @ 0x4
  3070                           
  3071  0024                     ?_setDimmerLights:	
  3072                           ; 0 bytes @ 0x4
  3073                           
  3074  0024                     ??_setLED_Initialization:	
  3075                           ; 0 bytes @ 0x4
  3076                           
  3077  0024                     ??_Flash_Memory_Modify:	
  3078                           ; 0 bytes @ 0x4
  3079                           
  3080  0024                     ??_RF_RxDisable:	
  3081                           ; 0 bytes @ 0x4
  3082                           
  3083  0024                     ??_setSw_Initialization:	
  3084                           ; 0 bytes @ 0x4
  3085                           
  3086  0024                     ??_Sw_DimmerAdjFunc:	
  3087                           ; 0 bytes @ 0x4
  3088                           
  3089  0024                     ??_CC2500_TxData:	
  3090                           ; 0 bytes @ 0x4
  3091                           
  3092  0024                     ??_CC2500_RxData:	
  3093                           ; 0 bytes @ 0x4
  3094                           
  3095  0024                     ??_DimmerLights_Initialization:	
  3096                           ; 0 bytes @ 0x4
  3097                           
  3098  0024                     ??___awdiv:	
  3099                           ; 0 bytes @ 0x4
  3100                           
  3101  0024                     CC2500_WriteREG@w_addr:	
  3102                           ; 0 bytes @ 0x4
  3103                           
  3104  0024                     setDimmerLights@status:	
  3105                           ; 1 bytes @ 0x4
  3106                           
  3107  0024                     setLED_Initialization@led:	
  3108                           ; 1 bytes @ 0x4
  3109                           
  3110  0024                     setLED_Main@led:	
  3111                           ; 1 bytes @ 0x4
  3112                           
  3113  0024                     setSw_Initialization@sw:	
  3114                           ; 1 bytes @ 0x4
  3115                           
  3116  0024                     Sw_DimmerAdjFunc@Idle:	
  3117                           ; 1 bytes @ 0x4
  3118                           
  3119  0024                     ___ftpack@sign:	
  3120                           ; 1 bytes @ 0x4
  3121                           
  3122  0024                     getBuz_GO@i:	
  3123                           ; 1 bytes @ 0x4
  3124                           
  3125  0024                     DelayTime_1us@j:	
  3126                           ; 2 bytes @ 0x4
  3127                           
  3128                           
  3129                           ; 2 bytes @ 0x4
  3130  0024                     	ds	1
  3131  0025                     ??_CC2500_InitSetREG:	
  3132  0025                     ??_CC2500_InitPATable:	
  3133                           ; 0 bytes @ 0x5
  3134                           
  3135  0025                     ??_setDimmerLights:	
  3136                           ; 0 bytes @ 0x5
  3137                           
  3138  0025                     ??_Switch_Initialization:	
  3139                           ; 0 bytes @ 0x5
  3140                           
  3141  0025                     ??___ftpack:	
  3142                           ; 0 bytes @ 0x5
  3143                           
  3144  0025                     ??_LED_Initialization:	
  3145                           ; 0 bytes @ 0x5
  3146                           
  3147  0025                     ??_LED_Main:	
  3148                           ; 0 bytes @ 0x5
  3149                           
  3150  0025                     CC2500_TxData@loop_e:	
  3151                           ; 0 bytes @ 0x5
  3152                           
  3153  0025                     CC2500_RxData@loop_f:	
  3154                           ; 1 bytes @ 0x5
  3155                           
  3156  0025                     Flash_Memory_Modify@i:	
  3157                           ; 1 bytes @ 0x5
  3158                           
  3159  0025                     Sw_DimmerAdjFunc@sw:	
  3160                           ; 1 bytes @ 0x5
  3161                           
  3162  0025                     ___awdiv@counter:	
  3163                           ; 1 bytes @ 0x5
  3164                           
  3165                           
  3166                           ; 1 bytes @ 0x5
  3167  0025                     	ds	1
  3168  0026                     ??_CC2500_PowerRST:	
  3169  0026                     ??_CC2500_FrequencyCabr:	
  3170                           ; 0 bytes @ 0x6
  3171                           
  3172  0026                     ??_Flash_Memory_Main:	
  3173                           ; 0 bytes @ 0x6
  3174                           
  3175  0026                     CC2500_InitSetREG@temp1:	
  3176                           ; 0 bytes @ 0x6
  3177                           
  3178  0026                     CC2500_InitPATable@temp:	
  3179                           ; 1 bytes @ 0x6
  3180                           
  3181  0026                     DelayTimejudge@i:	
  3182                           ; 1 bytes @ 0x6
  3183                           
  3184  0026                     setDimmerLights@lights:	
  3185                           ; 1 bytes @ 0x6
  3186                           
  3187  0026                     ___awdiv@sign:	
  3188                           ; 1 bytes @ 0x6
  3189                           
  3190                           
  3191                           ; 1 bytes @ 0x6
  3192  0026                     	ds	1
  3193  0027                     CC2500_InitSetREG@temp2:	
  3194  0027                     CC2500_InitPATable@loop_d:	
  3195                           ; 1 bytes @ 0x7
  3196                           
  3197  0027                     DelayTimejudge@j:	
  3198                           ; 1 bytes @ 0x7
  3199                           
  3200  0027                     ___awdiv@quotient:	
  3201                           ; 1 bytes @ 0x7
  3202                           
  3203                           
  3204                           ; 2 bytes @ 0x7
  3205  0027                     	ds	1
  3206  0028                     ?___awtoft:	
  3207  0028                     CC2500_InitSetREG@loop_c:	
  3208                           ; 3 bytes @ 0x8
  3209                           
  3210  0028                     DelayTimejudge@k:	
  3211                           ; 1 bytes @ 0x8
  3212                           
  3213  0028                     ___awtoft@c:	
  3214                           ; 1 bytes @ 0x8
  3215                           
  3216                           
  3217                           ; 2 bytes @ 0x8
  3218  0028                     	ds	1
  3219  0029                     ?_setBuz:	
  3220  0029                     ??_CC2500_PowerOnInitial:	
  3221                           ; 0 bytes @ 0x9
  3222                           
  3223  0029                     DelayTimejudge@value:	
  3224                           ; 0 bytes @ 0x9
  3225                           
  3226  0029                     setBuz@time:	
  3227                           ; 1 bytes @ 0x9
  3228                           
  3229                           
  3230                           ; 2 bytes @ 0x9
  3231  0029                     	ds	1
  3232  002A                     ?_setDelayOff_GO:	
  3233  002A                     setDelayOff_GO@command:	
  3234                           ; 0 bytes @ 0xA
  3235                           
  3236                           
  3237                           ; 1 bytes @ 0xA
  3238  002A                     	ds	1
  3239  002B                     ??_setBuz:	
  3240  002B                     ??___awtoft:	
  3241                           ; 0 bytes @ 0xB
  3242                           
  3243  002B                     setDelayOff_GO@value:	
  3244                           ; 0 bytes @ 0xB
  3245                           
  3246                           
  3247                           ; 1 bytes @ 0xB
  3248  002B                     	ds	1
  3249  002C                     ??_setDelayOff_GO:	
  3250  002C                     setBuz@count:	
  3251                           ; 0 bytes @ 0xC
  3252                           
  3253                           
  3254                           ; 1 bytes @ 0xC
  3255  002C                     	ds	1
  3256  002D                     ??_my_Main:	
  3257  002D                     ??_setLog_Code:	
  3258                           ; 0 bytes @ 0xD
  3259                           
  3260  002D                     ___awtoft@sign:	
  3261                           ; 0 bytes @ 0xD
  3262                           
  3263                           
  3264                           ; 1 bytes @ 0xD
  3265  002D                     	ds	1
  3266  002E                     ?___ftdiv:	
  3267  002E                     ?___ftmul:	
  3268                           ; 3 bytes @ 0xE
  3269                           
  3270  002E                     setDelayOff_GO@sw:	
  3271                           ; 3 bytes @ 0xE
  3272                           
  3273  002E                     ___ftdiv@f2:	
  3274                           ; 1 bytes @ 0xE
  3275                           
  3276  002E                     ___ftmul@f1:	
  3277                           ; 3 bytes @ 0xE
  3278                           
  3279                           
  3280                           ; 3 bytes @ 0xE
  3281  002E                     	ds	3
  3282  0031                     ___ftdiv@f1:	
  3283  0031                     ___ftmul@f2:	
  3284                           ; 3 bytes @ 0x11
  3285                           
  3286                           
  3287                           ; 3 bytes @ 0x11
  3288  0031                     	ds	3
  3289  0034                     ??___ftdiv:	
  3290  0034                     ??___ftmul:	
  3291                           ; 0 bytes @ 0x14
  3292                           
  3293                           
  3294                           ; 0 bytes @ 0x14
  3295  0034                     	ds	4
  3296  0038                     ___ftdiv@cntr:	
  3297  0038                     ___ftmul@exp:	
  3298                           ; 1 bytes @ 0x18
  3299                           
  3300                           
  3301                           ; 1 bytes @ 0x18
  3302  0038                     	ds	1
  3303  0039                     ___ftdiv@f3:	
  3304  0039                     ___ftmul@f3_as_product:	
  3305                           ; 3 bytes @ 0x19
  3306                           
  3307                           
  3308                           ; 3 bytes @ 0x19
  3309  0039                     	ds	3
  3310  003C                     ___ftdiv@exp:	
  3311  003C                     ___ftmul@cntr:	
  3312                           ; 1 bytes @ 0x1C
  3313                           
  3314                           
  3315                           ; 1 bytes @ 0x1C
  3316  003C                     	ds	1
  3317  003D                     ___ftdiv@sign:	
  3318  003D                     ___ftmul@sign:	
  3319                           ; 1 bytes @ 0x1D
  3320                           
  3321                           
  3322                           ; 1 bytes @ 0x1D
  3323  003D                     	ds	1
  3324  003E                     ?___ftadd:	
  3325  003E                     ___ftadd@f1:	
  3326                           ; 3 bytes @ 0x1E
  3327                           
  3328                           
  3329                           ; 3 bytes @ 0x1E
  3330  003E                     	ds	3
  3331  0041                     ___ftadd@f2:	
  3332                           
  3333                           ; 3 bytes @ 0x21
  3334  0041                     	ds	3
  3335  0044                     ??___ftadd:	
  3336                           
  3337                           ; 0 bytes @ 0x24
  3338  0044                     	ds	4
  3339  0048                     ___ftadd@sign:	
  3340                           
  3341                           ; 1 bytes @ 0x28
  3342  0048                     	ds	1
  3343  0049                     ___ftadd@exp2:	
  3344                           
  3345                           ; 1 bytes @ 0x29
  3346  0049                     	ds	1
  3347  004A                     ___ftadd@exp1:	
  3348                           
  3349                           ; 1 bytes @ 0x2A
  3350  004A                     	ds	1
  3351  004B                     ?___fttol:	
  3352  004B                     ___fttol@f1:	
  3353                           ; 4 bytes @ 0x2B
  3354                           
  3355                           
  3356                           ; 3 bytes @ 0x2B
  3357  004B                     	ds	4
  3358  004F                     ??___fttol:	
  3359                           
  3360                           ; 0 bytes @ 0x2F
  3361  004F                     	ds	4
  3362  0053                     ___fttol@sign1:	
  3363                           
  3364                           ; 1 bytes @ 0x33
  3365  0053                     	ds	1
  3366  0054                     ___fttol@lval:	
  3367                           
  3368                           ; 4 bytes @ 0x34
  3369  0054                     	ds	4
  3370  0058                     ___fttol@exp1:	
  3371                           
  3372                           ; 1 bytes @ 0x38
  3373  0058                     	ds	1
  3374  0059                     ??_getPercentValue:	
  3375  0059                     ??_setPercentValue:	
  3376                           ; 0 bytes @ 0x39
  3377                           
  3378  0059                     setPercentValue@value:	
  3379                           ; 0 bytes @ 0x39
  3380                           
  3381                           
  3382                           ; 1 bytes @ 0x39
  3383  0059                     	ds	1
  3384  005A                     setPercentValue@i:	
  3385                           
  3386                           ; 3 bytes @ 0x3A
  3387  005A                     	ds	1
  3388  005B                     getPercentValue@value:	
  3389                           
  3390                           ; 1 bytes @ 0x3B
  3391  005B                     	ds	1
  3392  005C                     getPercentValue@i:	
  3393                           
  3394                           ; 3 bytes @ 0x3C
  3395  005C                     	ds	1
  3396  005D                     ?_setRF_DimmerLights:	
  3397  005D                     ??_Flash_Memory_Initialization:	
  3398                           ; 0 bytes @ 0x3D
  3399                           
  3400  005D                     setRF_DimmerLights@on:	
  3401                           ; 0 bytes @ 0x3D
  3402                           
  3403                           
  3404                           ; 1 bytes @ 0x3D
  3405  005D                     	ds	1
  3406  005E                     ??_setRF_DimmerLights:	
  3407  005E                     Flash_Memory_Initialization@i:	
  3408                           ; 0 bytes @ 0x3E
  3409                           
  3410                           
  3411                           ; 1 bytes @ 0x3E
  3412  005E                     	ds	1
  3413  005F                     ??_setDimmerLights_AdjRF:	
  3414                           
  3415                           ; 0 bytes @ 0x3F
  3416  005F                     	ds	1
  3417  0060                     setDimmerLights_AdjRF@lights:	
  3418  0060                     setRF_DimmerLights@status:	
  3419                           ; 1 bytes @ 0x40
  3420                           
  3421                           
  3422                           ; 1 bytes @ 0x40
  3423  0060                     	ds	1
  3424  0061                     ??_setRF_DimmerValue:	
  3425  0061                     setRF_DimmerLights@lights:	
  3426                           ; 0 bytes @ 0x41
  3427                           
  3428                           
  3429                           ; 1 bytes @ 0x41
  3430  0061                     	ds	1
  3431  0062                     ??_DlyOff_Main:	
  3432  0062                     ?_setDimmerLights_Adj:	
  3433                           ; 0 bytes @ 0x42
  3434                           
  3435  0062                     ??_setRFSW_Control:	
  3436                           ; 0 bytes @ 0x42
  3437                           
  3438  0062                     ??_Sw_DimmerOnFunc:	
  3439                           ; 0 bytes @ 0x42
  3440                           
  3441  0062                     ??_Sw_DimmerOffFunc:	
  3442                           ; 0 bytes @ 0x42
  3443                           
  3444  0062                     setDimmerLights_Adj@status:	
  3445                           ; 0 bytes @ 0x42
  3446                           
  3447  0062                     Sw_DimmerOnFunc@Idle:	
  3448                           ; 1 bytes @ 0x42
  3449                           
  3450                           
  3451                           ; 1 bytes @ 0x42
  3452  0062                     	ds	1
  3453  0063                     ??_setDimmerLights_Adj:	
  3454  0063                     setRFSW_Control@sw:	
  3455                           ; 0 bytes @ 0x43
  3456                           
  3457  0063                     setRF_DimmerValue@lights:	
  3458                           ; 1 bytes @ 0x43
  3459                           
  3460  0063                     Sw_DimmerOnFunc@sw:	
  3461                           ; 1 bytes @ 0x43
  3462                           
  3463                           
  3464                           ; 1 bytes @ 0x43
  3465  0063                     	ds	1
  3466  0064                     ??_setRFSW_AdjControl:	
  3467  0064                     DlyOff_Main@sw:	
  3468                           ; 0 bytes @ 0x44
  3469                           
  3470  0064                     setDimmerLights_Adj@lights:	
  3471                           ; 1 bytes @ 0x44
  3472                           
  3473  0064                     Sw_DimmerOffFunc@sw:	
  3474                           ; 1 bytes @ 0x44
  3475                           
  3476                           
  3477                           ; 1 bytes @ 0x44
  3478  0064                     	ds	1
  3479  0065                     ??_setDimmerLights_Main:	
  3480  0065                     ??_setSw_Main:	
  3481                           ; 0 bytes @ 0x45
  3482                           
  3483  0065                     ??_DelayOff_Main:	
  3484                           ; 0 bytes @ 0x45
  3485                           
  3486  0065                     setDimmerLights_Main@clear:	
  3487                           ; 0 bytes @ 0x45
  3488                           
  3489                           
  3490                           ; 1 bytes @ 0x45
  3491  0065                     	ds	1
  3492  0066                     setDimmerLights_Main@lights:	
  3493  0066                     setRFSW_AdjControl@sw:	
  3494                           ; 1 bytes @ 0x46
  3495                           
  3496                           
  3497                           ; 1 bytes @ 0x46
  3498  0066                     	ds	1
  3499  0067                     ??_setRF_Main:	
  3500  0067                     ??_getRxData:	
  3501                           ; 0 bytes @ 0x47
  3502                           
  3503  0067                     ??_setControl_Lights_Table:	
  3504                           ; 0 bytes @ 0x47
  3505                           
  3506  0067                     ??_DimmerLights_Main:	
  3507                           ; 0 bytes @ 0x47
  3508                           
  3509  0067                     _setSw_Main$4866:	
  3510                           ; 0 bytes @ 0x47
  3511                           
  3512                           
  3513                           ; 1 bytes @ 0x47
  3514  0067                     	ds	1
  3515  0068                     _setRF_Main$4073:	
  3516  0068                     _setSw_Main$4867:	
  3517                           ; 1 bytes @ 0x48
  3518                           
  3519                           
  3520                           ; 1 bytes @ 0x48
  3521  0068                     	ds	1
  3522  0069                     ??_RF_Main:	
  3523  0069                     setSw_Main@sw:	
  3524                           ; 0 bytes @ 0x49
  3525                           
  3526                           
  3527                           ; 1 bytes @ 0x49
  3528  0069                     	ds	1
  3529  006A                     ??_Switch_Main:	
  3530  006A                     ?_main:	
  3531                           ; 0 bytes @ 0x4A
  3532                           
  3533  006A                     main@argc:	
  3534                           ; 2 bytes @ 0x4A
  3535                           
  3536                           
  3537                           ; 2 bytes @ 0x4A
  3538  006A                     	ds	2
  3539  006C                     main@argv:	
  3540                           
  3541                           ; 2 bytes @ 0x4C
  3542  006C                     	ds	2
  3543  006E                     ??_main:	
  3544                           
  3545                           	psect	maintext
  3546  166F                     __pmaintext:	
  3547                           ; 0 bytes @ 0x4E
  3548 ;;
  3549 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3550 ;;
  3551 ;; *************** function _main *****************
  3552 ;; Defined at:
  3553 ;;		line 7 in file "../src/Main_B1.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  argc            2   74[BANK0 ] int 
  3556 ;;  argv            2   76[BANK0 ] PTR PTR unsigned char 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;		None
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  2   74[BANK0 ] int 
  3561 ;; Registers used:
  3562 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 17F/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3568 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3571 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3572 ;;Total ram usage:        4 bytes
  3573 ;; Hardware stack levels required when called:   15
  3574 ;; This function calls:
  3575 ;;		_Buzzer_Initialization
  3576 ;;		_Buzzer_Main
  3577 ;;		_CC2500_PowerOnInitial
  3578 ;;		_DelayOff_Initialization
  3579 ;;		_DelayOff_Main
  3580 ;;		_DimmerLights_Initialization
  3581 ;;		_DimmerLights_Main
  3582 ;;		_Flash_Memory_Initialization
  3583 ;;		_Flash_Memory_Main
  3584 ;;		_LED_Initialization
  3585 ;;		_LED_Main
  3586 ;;		_Mcu_Initialization
  3587 ;;		_RF_Initialization
  3588 ;;		_RF_Main
  3589 ;;		_Switch_Initialization
  3590 ;;		_Switch_Main
  3591 ;;		_myMain_Initialization
  3592 ;;		_my_Main
  3593 ;; This function is called by:
  3594 ;;		Startup code after reset
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           
  3599                           ;psect for function _main
  3600  166F                     _main:	
  3601                           
  3602                           ;Main_B1.c: 9: myMain_Initialization();
  3603                           
  3604                           ;incstack = 0
  3605                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3606  166F  3191  219A  3196   	fcall	_myMain_Initialization
  3607                           
  3608                           ;Main_B1.c: 10: Mcu_Initialization();
  3609  1672  3191  216D  3196   	fcall	_Mcu_Initialization
  3610                           
  3611                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3612  1675  3184  2449  3196   	fcall	_Flash_Memory_Initialization
  3613                           
  3614                           ;Main_B1.c: 12: LED_Initialization();
  3615  1678  3191  2102  3196   	fcall	_LED_Initialization
  3616                           
  3617                           ;Main_B1.c: 13: Buzzer_Initialization();
  3618  167B  319F  27EE  3196   	fcall	_Buzzer_Initialization
  3619                           
  3620                           ;Main_B1.c: 15: ;;
  3621                           ;Main_B1.c: 16: ;;
  3622                           ;Main_B1.c: 17: ;;
  3623                           ;Main_B1.c: 18: ;;
  3624                           ;Main_B1.c: 19: DelayOff_Initialization();
  3625  167E  3190  209B  3196   	fcall	_DelayOff_Initialization
  3626                           
  3627                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3628  1681  3192  22F9  3196   	fcall	_DimmerLights_Initialization
  3629                           
  3630                           ;Main_B1.c: 22: ;;
  3631                           ;Main_B1.c: 23: ;;
  3632                           ;Main_B1.c: 24: ;;
  3633                           ;Main_B1.c: 25: Switch_Initialization();
  3634  1684  3191  2134  3196   	fcall	_Switch_Initialization
  3635                           
  3636                           ;Main_B1.c: 26: RF_Initialization();
  3637  1687  319F  27F1  3196   	fcall	_RF_Initialization
  3638                           
  3639                           ;Main_B1.c: 27: CC2500_PowerOnInitial();
  3640  168A  3192  22B8  3196   	fcall	_CC2500_PowerOnInitial
  3641  168D                     l1444:	
  3642                           ;Main_B1.c: 35: ;;
  3643                           ;Main_B1.c: 39: ;;
  3644                           ;Main_B1.c: 43: ;;
  3645                           ;Main_B1.c: 47: ;;
  3646                           
  3647                           ;Main_B1.c: 28: ;;
  3648                           ;Main_B1.c: 31: while (1) {
  3649                           
  3650                           
  3651                           ;Main_B1.c: 62: }
  3652                           ;Main_B1.c: 65: if (myMain.T0_Timerout) {
  3653  168D  0021               	movlb	1	; select bank1
  3654  168E  1CB5               	btfss	_myMain^(0+128),1
  3655  168F  2E8D               	goto	l1444
  3656                           
  3657                           ;Main_B1.c: 66: myMain.T0_Timerout = 0;
  3658  1690  10B5               	bcf	_myMain^(0+128),1
  3659                           
  3660                           ;Main_B1.c: 67: my_Main();
  3661  1691  3196  26AD  3196   	fcall	_my_Main
  3662                           
  3663                           ;Main_B1.c: 68: ;;
  3664                           ;Main_B1.c: 69: ;;
  3665                           ;Main_B1.c: 70: ;;
  3666                           ;Main_B1.c: 71: if (myMain.PowerON) {
  3667  1694  0021               	movlb	1	; select bank1
  3668  1695  1C35               	btfss	_myMain^(0+128),0
  3669  1696  2E8D               	goto	l1444
  3670                           
  3671                           ;Main_B1.c: 72: Flash_Memory_Main();
  3672  1697  3193  23E5  3196   	fcall	_Flash_Memory_Main
  3673                           
  3674                           ;Main_B1.c: 74: LED_Main();
  3675  169A  3191  210E  3196   	fcall	_LED_Main
  3676                           
  3677                           ;Main_B1.c: 75: Buzzer_Main();
  3678  169D  3187  27B5  3196   	fcall	_Buzzer_Main
  3679                           
  3680                           ;Main_B1.c: 77: ;;
  3681                           ;Main_B1.c: 78: ;;
  3682                           ;Main_B1.c: 79: ;;
  3683                           ;Main_B1.c: 80: ;;
  3684                           ;Main_B1.c: 82: ;;
  3685                           ;Main_B1.c: 83: DimmerLights_Main();
  3686  16A0  3190  20DF  3196   	fcall	_DimmerLights_Main
  3687                           
  3688                           ;Main_B1.c: 84: Switch_Main();
  3689  16A3  3190  20C3  3196   	fcall	_Switch_Main
  3690                           
  3691                           ;Main_B1.c: 85: ;;
  3692                           ;Main_B1.c: 86: ;;
  3693                           ;Main_B1.c: 88: RF_Main();
  3694  16A6  3190  2066  3196   	fcall	_RF_Main
  3695                           
  3696                           ;Main_B1.c: 89: DelayOff_Main();
  3697  16A9  3190  20A3  3196   	fcall	_DelayOff_Main
  3698                           
  3699                           ;Main_B1.c: 90: ;;
  3700  16AC  2E8D               	goto	l1444
  3701  16AD                     __end_of_main:	
  3702                           ;Main_B1.c: 91: }
  3703                           ;Main_B1.c: 92: }
  3704                           ;Main_B1.c: 110: }
  3705                           ;Main_B1.c: 111: return (0);
  3706                           ;	Return value of _main is never used
  3707                           
  3708                           
  3709                           	psect	text1
  3710  16AD                     __ptext1:	
  3711 ;; *************** function _my_Main *****************
  3712 ;; Defined at:
  3713 ;;		line 128 in file "../src/Main_B1.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;		None
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;		None
  3718 ;; Return value:  Size  Location     Type
  3719 ;;		None               void
  3720 ;; Registers used:
  3721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3731 ;;Total ram usage:        0 bytes
  3732 ;; Hardware stack levels used:    1
  3733 ;; Hardware stack levels required when called:    7
  3734 ;; This function calls:
  3735 ;;		_setBuz
  3736 ;;		_setRF_Enable
  3737 ;;		_setSw_Enable
  3738 ;; This function is called by:
  3739 ;;		_main
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742                           
  3743                           
  3744                           ;psect for function _my_Main
  3745  16AD                     _my_Main:	
  3746                           
  3747                           ;Main_B1.c: 130: if (myMain.PowerON == 0) {
  3748                           
  3749                           ;incstack = 0
  3750                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3751  16AD  0021               	movlb	1	; select bank1
  3752  16AE  1835               	btfsc	_myMain^(0+128),0
  3753  16AF  2ED6               	goto	l6995
  3754                           
  3755                           ;Main_B1.c: 131: myMain.PowerCount++;
  3756  16B0  3001               	movlw	1
  3757  16B1  07B6               	addwf	(_myMain^(0+128)+1),f
  3758  16B2  3000               	movlw	0
  3759  16B3  3DB7               	addwfc	((_myMain+1)^(0+128)+1),f
  3760                           
  3761                           ;Main_B1.c: 132: if (myMain.PowerCount == 150)
  3762  16B4  3001               	movlw	1
  3763  16B5  3EB5               	addlw	_myMain& (0+255)
  3764  16B6  0086               	movwf	6
  3765  16B7  0187               	clrf	7
  3766  16B8  3F40               	moviw [0]fsr1
  3767  16B9  3A96               	xorlw	150
  3768  16BA  1D03               	skipz
  3769  16BB  2EBE               	goto	u6485
  3770  16BC  3F41               	moviw [1]fsr1
  3771  16BD  3A00               	xorlw	0
  3772  16BE                     u6485:	
  3773  16BE  1D03               	skipz
  3774  16BF  0008               	return
  3775                           
  3776                           ;Main_B1.c: 133: {
  3777                           ;Main_B1.c: 134: myMain.PowerCount = 0;
  3778  16C0  01B6               	clrf	(_myMain^(0+128)+1)
  3779  16C1  01B7               	clrf	((_myMain+1)^(0+128)+1)
  3780                           
  3781                           ;Main_B1.c: 135: myMain.PowerON = 1;
  3782  16C2  1435               	bsf	_myMain^(0+128),0
  3783                           
  3784                           ;Main_B1.c: 138: ;;
  3785                           ;Main_B1.c: 142: ;;
  3786                           ;Main_B1.c: 148: setBuz(3, 50);
  3787  16C3  3032               	movlw	50
  3788  16C4  0020               	movlb	0	; select bank0
  3789  16C5  00A9               	movwf	setBuz@time
  3790  16C6  3000               	movlw	0
  3791  16C7  00AA               	movwf	setBuz@time+1
  3792  16C8  3003               	movlw	3
  3793  16C9  3189  2122  3196   	fcall	_setBuz
  3794                           
  3795                           ;Main_B1.c: 149: myMain.SelfTest = 1;
  3796  16CC  0021               	movlb	1	; select bank1
  3797  16CD  1735               	bsf	_myMain^(0+128),6
  3798                           
  3799                           ;Main_B1.c: 151: setSw_Enable(1);
  3800  16CE  3001               	movlw	1
  3801  16CF  3193  238B  3196   	fcall	_setSw_Enable
  3802                           
  3803                           ;Main_B1.c: 154: setRF_Enable(1);
  3804  16D2  3001               	movlw	1
  3805  16D3  3191  2141         	fcall	_setRF_Enable
  3806                           
  3807                           ;Main_B1.c: 158: }
  3808                           ;Main_B1.c: 159: } else {
  3809  16D5  0008               	return
  3810  16D6                     l6995:	
  3811                           
  3812                           ;Main_B1.c: 167: myMain.Count1++;
  3813  16D6  3001               	movlw	1
  3814  16D7  0021               	movlb	1	; select bank1
  3815  16D8  07BA               	addwf	(_myMain^(0+128)+5),f
  3816  16D9  3000               	movlw	0
  3817  16DA  3DBB               	addwfc	((_myMain+1)^(0+128)+5),f
  3818                           
  3819                           ;Main_B1.c: 168: if (myMain.Count1 == 100)
  3820  16DB  3005               	movlw	5
  3821  16DC  3EB5               	addlw	_myMain& (0+255)
  3822  16DD  0086               	movwf	6
  3823  16DE  0187               	clrf	7
  3824  16DF  3F40               	moviw [0]fsr1
  3825  16E0  3A64               	xorlw	100
  3826  16E1  1D03               	skipz
  3827  16E2  2EE5               	goto	u6495
  3828  16E3  3F41               	moviw [1]fsr1
  3829  16E4  3A00               	xorlw	0
  3830  16E5                     u6495:	
  3831  16E5  1D03               	skipz
  3832  16E6  0008               	return
  3833                           
  3834                           ;Main_B1.c: 169: {
  3835                           ;Main_B1.c: 170: myMain.Count1 = 0;
  3836  16E7  01BA               	clrf	(_myMain^(0+128)+5)
  3837  16E8  01BB               	clrf	((_myMain+1)^(0+128)+5)
  3838                           
  3839                           ;Main_B1.c: 183: if (myMain.Flag) {
  3840  16E9  1DB5               	btfss	_myMain^(0+128),3
  3841  16EA  2EED               	goto	l1459
  3842                           
  3843                           ;Main_B1.c: 184: myMain.Flag = 0;
  3844  16EB  11B5               	bcf	_myMain^(0+128),3
  3845                           
  3846                           ;Main_B1.c: 193: } else {
  3847  16EC  0008               	return
  3848  16ED                     l1459:	
  3849                           
  3850                           ;Main_B1.c: 194: myMain.Flag = 1;
  3851  16ED  15B5               	bsf	_myMain^(0+128),3
  3852  16EE  0008               	return
  3853  16EF                     __end_of_my_Main:	
  3854                           
  3855                           	psect	text2
  3856  138B                     __ptext2:	
  3857 ;; *************** function _setSw_Enable *****************
  3858 ;; Defined at:
  3859 ;;		line 89 in file "../src/Switch_B1.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  command         1    wreg     unsigned char 
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;  command         1    2[BANK0 ] unsigned char 
  3864 ;; Return value:  Size  Location     Type
  3865 ;;		None               void
  3866 ;; Registers used:
  3867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3874 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3876 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3877 ;;Total ram usage:        1 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:    6
  3880 ;; This function calls:
  3881 ;;		_SwPointSelect
  3882 ;; This function is called by:
  3883 ;;		_my_Main
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           
  3888                           ;psect for function _setSw_Enable
  3889  138B                     _setSw_Enable:	
  3890                           
  3891                           ;incstack = 0
  3892                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3893                           ;setSw_Enable@command stored from wreg
  3894  138B  0020               	movlb	0	; select bank0
  3895  138C  00A2               	movwf	setSw_Enable@command
  3896                           
  3897                           ;Switch_B1.c: 92: SwPointSelect(1);
  3898  138D  3001               	movlw	1
  3899  138E  3192  2290  3193   	fcall	_SwPointSelect
  3900                           
  3901                           ;Switch_B1.c: 93: Sw->Enable = command;
  3902  1391  0020               	movlb	0	; select bank0
  3903  1392  086F               	movf	_Sw,w
  3904  1393  0086               	movwf	6
  3905  1394  3001               	movlw	1	; select bank2/3
  3906  1395  0087               	movwf	7
  3907  1396  0822               	movf	setSw_Enable@command,w
  3908  1397  1001               	bcf	1,0
  3909  1398  1D03               	skipz
  3910  1399  1401               	bsf	1,0
  3911                           
  3912                           ;Switch_B1.c: 97: SwPointSelect(2);
  3913  139A  3002               	movlw	2
  3914  139B  3192  2290         	fcall	_SwPointSelect
  3915                           
  3916                           ;Switch_B1.c: 98: Sw->Enable = command;
  3917  139D  0020               	movlb	0	; select bank0
  3918  139E  086F               	movf	_Sw,w
  3919  139F  0086               	movwf	6
  3920  13A0  3001               	movlw	1	; select bank2/3
  3921  13A1  0087               	movwf	7
  3922  13A2  0822               	movf	setSw_Enable@command,w
  3923  13A3  1001               	bcf	1,0
  3924  13A4  1D03               	skipz
  3925  13A5  1401               	bsf	1,0
  3926  13A6  0008               	return
  3927  13A7                     __end_of_setSw_Enable:	
  3928                           
  3929                           	psect	text3
  3930  1141                     __ptext3:	
  3931 ;; *************** function _setRF_Enable *****************
  3932 ;; Defined at:
  3933 ;;		line 176 in file "../src/RF_Control_B1.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  command         1    wreg     unsigned char 
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  command         1    0[BANK0 ] unsigned char 
  3938 ;; Return value:  Size  Location     Type
  3939 ;;		None               void
  3940 ;; Registers used:
  3941 ;;		wreg, status,2
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3950 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3951 ;;Total ram usage:        1 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    5
  3954 ;; This function calls:
  3955 ;;		Nothing
  3956 ;; This function is called by:
  3957 ;;		_my_Main
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           
  3962                           ;psect for function _setRF_Enable
  3963  1141                     _setRF_Enable:	
  3964                           
  3965                           ;incstack = 0
  3966                           ; Regs used in _setRF_Enable: [wreg+status,2]
  3967                           ;setRF_Enable@command stored from wreg
  3968  1141  0020               	movlb	0	; select bank0
  3969  1142  00A0               	movwf	setRF_Enable@command
  3970                           
  3971                           ;RF_Control_B1.c: 177: RF1.Enable = command;
  3972  1143  0820               	movf	setRF_Enable@command,w
  3973  1144  0021               	movlb	1	; select bank1
  3974  1145  1053               	bcf	_RF1^(0+128),0
  3975  1146  1D03               	skipz
  3976  1147  1453               	bsf	_RF1^(0+128),0
  3977                           
  3978                           ;RF_Control_B1.c: 178: RF1.Learn = 0;
  3979  1148  1353               	bcf	_RF1^(0+128),6
  3980                           
  3981                           ;RF_Control_B1.c: 179: RF1.TransceiveGO = 0;
  3982  1149  1153               	bcf	_RF1^(0+128),2
  3983                           
  3984                           ;RF_Control_B1.c: 180: RF1.RxStatus = 0;
  3985  114A  11D3               	bcf	_RF1^(0+128),3
  3986                           
  3987                           ;RF_Control_B1.c: 181: RF1.ReceiveGO = 0;
  3988  114B  10D3               	bcf	_RF1^(0+128),1
  3989                           
  3990                           ;RF_Control_B1.c: 182: RF1.DebounceTime = 0;
  3991  114C  01D7               	clrf	(_RF1^(0+128)+4)
  3992                           
  3993                           ;RF_Control_B1.c: 183: RF1.Debounce = 0;
  3994  114D  12D3               	bcf	_RF1^(0+128),5
  3995  114E  0008               	return
  3996  114F                     __end_of_setRF_Enable:	
  3997                           
  3998                           	psect	text4
  3999  119A                     __ptext4:	
  4000 ;; *************** function _myMain_Initialization *****************
  4001 ;; Defined at:
  4002 ;;		line 116 in file "../src/Main_B1.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;		None
  4005 ;; Auto vars:     Size  Location     Type
  4006 ;;		None
  4007 ;; Return value:  Size  Location     Type
  4008 ;;		None               void
  4009 ;; Registers used:
  4010 ;;		wreg, fsr1l, fsr1h
  4011 ;; Tracked objects:
  4012 ;;		On entry : 0/0
  4013 ;;		On exit  : 0/0
  4014 ;;		Unchanged: 0/0
  4015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4019 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4020 ;;Total ram usage:        1 bytes
  4021 ;; Hardware stack levels used:    1
  4022 ;; Hardware stack levels required when called:    5
  4023 ;; This function calls:
  4024 ;;		Nothing
  4025 ;; This function is called by:
  4026 ;;		_main
  4027 ;; This function uses a non-reentrant model
  4028 ;;
  4029                           
  4030                           
  4031                           ;psect for function _myMain_Initialization
  4032  119A                     _myMain_Initialization:	
  4033                           
  4034                           ;Main_B1.c: 118: product = &_product;
  4035                           
  4036                           ;incstack = 0
  4037                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4038  119A  30C5               	movlw	__product& (0+255)
  4039  119B  0020               	movlb	0	; select bank0
  4040  119C  00A0               	movwf	??_myMain_Initialization
  4041  119D  0820               	movf	??_myMain_Initialization,w
  4042  119E  00EE               	movwf	_product
  4043                           
  4044                           ;Main_B1.c: 119: product->Data[20] = 210;
  4045  119F  30D2               	movlw	210
  4046  11A0  00A0               	movwf	??_myMain_Initialization
  4047  11A1  086E               	movf	_product,w
  4048  11A2  3E14               	addlw	20
  4049  11A3  0086               	movwf	6
  4050  11A4  3001               	movlw	1	; select bank2/3
  4051  11A5  0087               	movwf	7
  4052  11A6  0820               	movf	??_myMain_Initialization,w
  4053  11A7  0081               	movwf	1
  4054  11A8  0008               	return
  4055  11A9                     __end_of_myMain_Initialization:	
  4056                           
  4057                           	psect	text5
  4058  10C3                     __ptext5:	
  4059 ;; *************** function _Switch_Main *****************
  4060 ;; Defined at:
  4061 ;;		line 65 in file "../src/Switch_B1.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;		None
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;		None
  4066 ;; Return value:  Size  Location     Type
  4067 ;;		None               void
  4068 ;; Registers used:
  4069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4070 ;; Tracked objects:
  4071 ;;		On entry : 0/0
  4072 ;;		On exit  : 0/0
  4073 ;;		Unchanged: 0/0
  4074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4079 ;;Total ram usage:        0 bytes
  4080 ;; Hardware stack levels used:    1
  4081 ;; Hardware stack levels required when called:   11
  4082 ;; This function calls:
  4083 ;;		_setSw_Main
  4084 ;; This function is called by:
  4085 ;;		_main
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           
  4090                           ;psect for function _Switch_Main
  4091  10C3                     _Switch_Main:	
  4092                           
  4093                           ;Switch_B1.c: 67: setSw_Main(1);
  4094                           
  4095                           ;incstack = 0
  4096                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4097  10C3  3001               	movlw	1
  4098  10C4  3182  2207  3190   	fcall	_setSw_Main
  4099                           
  4100                           ;Switch_B1.c: 71: setSw_Main(2);
  4101  10C7  3002               	movlw	2
  4102  10C8  3182  2207         	fcall	_setSw_Main
  4103  10CA  0008               	return
  4104  10CB                     __end_of_Switch_Main:	
  4105                           
  4106                           	psect	text6
  4107  0207                     __ptext6:	
  4108 ;; *************** function _setSw_Main *****************
  4109 ;; Defined at:
  4110 ;;		line 115 in file "../src/Switch_B1.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;  sw              1    wreg     unsigned char 
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;  sw              1   73[BANK0 ] unsigned char 
  4115 ;; Return value:  Size  Location     Type
  4116 ;;		None               void
  4117 ;; Registers used:
  4118 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4125 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4126 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4127 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;Total ram usage:        5 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:   10
  4131 ;; This function calls:
  4132 ;;		_SwPointSelect
  4133 ;;		_Sw_DimmerAdjFunc
  4134 ;;		_Sw_DimmerOffFunc
  4135 ;;		_Sw_DimmerOnFunc
  4136 ;;		_setBuz
  4137 ;;		_setRF_Learn
  4138 ;; This function is called by:
  4139 ;;		_Switch_Main
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           
  4144                           ;psect for function _setSw_Main
  4145  0207                     _setSw_Main:	
  4146                           
  4147                           ;incstack = 0
  4148                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4149                           ;setSw_Main@sw stored from wreg
  4150  0207  0020               	movlb	0	; select bank0
  4151  0208  00E9               	movwf	setSw_Main@sw
  4152                           
  4153                           ;Switch_B1.c: 116: SwPointSelect(sw);
  4154  0209  0869               	movf	setSw_Main@sw,w
  4155  020A  3192  2290  3182   	fcall	_SwPointSelect
  4156                           
  4157                           ;Switch_B1.c: 117: if (Sw->Enable == 1) {
  4158  020D  0020               	movlb	0	; select bank0
  4159  020E  086F               	movf	_Sw,w
  4160  020F  0086               	movwf	6
  4161  0210  3001               	movlw	1	; select bank2/3
  4162  0211  0087               	movwf	7
  4163  0212  1C01               	btfss	1,0
  4164  0213  0008               	return
  4165                           
  4166                           ;Switch_B1.c: 129: if (sw == 1) {
  4167  0214  0869               	movf	setSw_Main@sw,w
  4168  0215  3A01               	xorlw	1
  4169  0216  1D03               	skipz
  4170  0217  2A24               	goto	l6733
  4171                           
  4172                           ;Switch_B1.c: 130: Sw->Touch = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  4173  0218  01E7               	clrf	_setSw_Main$4866
  4174  0219  0AE7               	incf	_setSw_Main$4866,f
  4175  021A  1F0C               	btfss	12,6	;volatile
  4176  021B  1A0C               	btfsc	12,4	;volatile
  4177  021C  2A1E               	goto	l6731
  4178  021D  01E7               	clrf	_setSw_Main$4866
  4179  021E                     l6731:	
  4180  021E  086F               	movf	_Sw,w
  4181  021F  0086               	movwf	6
  4182  0220  3001               	movlw	1	; select bank2/3
  4183  0221  0087               	movwf	7
  4184  0222  0867               	movf	_setSw_Main$4866,w
  4185  0223  2A33               	goto	L1
  4186  0224                     l6733:	
  4187                           ;Switch_B1.c: 131: } else if (sw == 2) {
  4188                           
  4189  0224  0869               	movf	setSw_Main@sw,w
  4190  0225  3A02               	xorlw	2
  4191  0226  1D03               	skipz
  4192  0227  2A36               	goto	l6743
  4193                           
  4194                           ;Switch_B1.c: 132: Sw->Touch = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  4195  0228  01E8               	clrf	_setSw_Main$4867
  4196  0229  0AE8               	incf	_setSw_Main$4867,f
  4197  022A  1C0C               	btfss	12,0	;volatile
  4198  022B  188D               	btfsc	13,1	;volatile
  4199  022C  2A2E               	goto	l6741
  4200  022D  01E8               	clrf	_setSw_Main$4867
  4201  022E                     l6741:	
  4202  022E  086F               	movf	_Sw,w
  4203  022F  0086               	movwf	6
  4204  0230  3001               	movlw	1	; select bank2/3
  4205  0231  0087               	movwf	7
  4206  0232  0868               	movf	_setSw_Main$4867,w
  4207  0233                     L1:	
  4208  0233  1081               	bcf	1,1
  4209  0234  1D03               	skipz
  4210  0235  1481               	bsf	1,1
  4211  0236                     l6743:	
  4212                           
  4213                           ;Switch_B1.c: 133: }
  4214                           ;Switch_B1.c: 139: if (Sw->Touch == 1) {
  4215  0236  086F               	movf	_Sw,w
  4216  0237  0086               	movwf	6
  4217  0238  3001               	movlw	1	; select bank2/3
  4218  0239  0087               	movwf	7
  4219  023A  1C81               	btfss	1,1
  4220  023B  2B00               	goto	l6791
  4221                           
  4222                           ;Switch_B1.c: 140: if (Sw->Debounce == 0) {
  4223  023C  086F               	movf	_Sw,w
  4224  023D  0086               	movwf	6
  4225  023E  3001               	movlw	1	; select bank2/3
  4226  023F  0087               	movwf	7
  4227  0240  1901               	btfsc	1,2
  4228  0241  2A63               	goto	l6757
  4229                           
  4230                           ;Switch_B1.c: 141: Sw->DebounceTime++;
  4231  0242  3001               	movlw	1
  4232  0243  00E5               	movwf	??_setSw_Main
  4233  0244  086F               	movf	_Sw,w
  4234  0245  3E02               	addlw	2
  4235  0246  0086               	movwf	6
  4236  0247  3001               	movlw	1	; select bank2/3
  4237  0248  0087               	movwf	7
  4238  0249  0865               	movf	??_setSw_Main,w
  4239  024A  0781               	addwf	1,f
  4240                           
  4241                           ;Switch_B1.c: 142: if (Sw->DebounceTime >= 5) {
  4242  024B  086F               	movf	_Sw,w
  4243  024C  3E02               	addlw	2
  4244  024D  0086               	movwf	6
  4245  024E  3001               	movlw	1	; select bank2/3
  4246  024F  0087               	movwf	7
  4247  0250  3005               	movlw	5
  4248  0251  0201               	subwf	1,w
  4249  0252  1C03               	skipc
  4250  0253  0008               	return
  4251                           
  4252                           ;Switch_B1.c: 143: Sw->DebounceTime = 0;
  4253  0254  086F               	movf	_Sw,w
  4254  0255  3E02               	addlw	2
  4255  0256  0086               	movwf	6
  4256  0257  3001               	movlw	1	; select bank2/3
  4257  0258  0087               	movwf	7
  4258  0259  0181               	clrf	1
  4259                           
  4260                           ;Switch_B1.c: 144: Sw->Debounce = 1;
  4261  025A  086F               	movf	_Sw,w
  4262  025B  0086               	movwf	6
  4263  025C  3001               	movlw	1	; select bank2/3
  4264  025D  0087               	movwf	7
  4265  025E  1501               	bsf	1,2
  4266                           
  4267                           ;Switch_B1.c: 147: Sw_DimmerOnFunc(sw);
  4268  025F  0869               	movf	setSw_Main@sw,w
  4269  0260  318D  2582         	fcall	_Sw_DimmerOnFunc
  4270                           
  4271                           ;Switch_B1.c: 149: }
  4272                           ;Switch_B1.c: 150: } else {
  4273  0262  0008               	return
  4274  0263                     l6757:	
  4275                           
  4276                           ;Switch_B1.c: 151: if (Sw->Hold1 == 0) {
  4277  0263  0020               	movlb	0	; select bank0
  4278  0264  086F               	movf	_Sw,w
  4279  0265  0086               	movwf	6
  4280  0266  3001               	movlw	1	; select bank2/3
  4281  0267  0087               	movwf	7
  4282  0268  1981               	btfsc	1,3
  4283  0269  2A90               	goto	l6767
  4284                           
  4285                           ;Switch_B1.c: 152: Sw->Hold1Time++;
  4286  026A  086F               	movf	_Sw,w
  4287  026B  3E03               	addlw	3
  4288  026C  0086               	movwf	6
  4289  026D  3001               	movlw	1	; select bank2/3
  4290  026E  0087               	movwf	7
  4291  026F  3001               	movlw	1
  4292  0270  0781               	addwf	1,f
  4293  0271  3141               	addfsr 1,1
  4294  0272  1803               	skipnc
  4295  0273  0A81               	incf	1,f
  4296                           
  4297                           ;Switch_B1.c: 153: if (Sw->Hold1Time >= 150) {
  4298  0274  086F               	movf	_Sw,w
  4299  0275  3E03               	addlw	3
  4300  0276  0086               	movwf	6
  4301  0277  3001               	movlw	1	; select bank2/3
  4302  0278  0087               	movwf	7
  4303  0279  3F40               	moviw [0]fsr1
  4304  027A  00E5               	movwf	??_setSw_Main
  4305  027B  3F41               	moviw [1]fsr1
  4306  027C  00E6               	movwf	??_setSw_Main+1
  4307  027D  3000               	movlw	0
  4308  027E  0266               	subwf	??_setSw_Main+1,w
  4309  027F  3096               	movlw	150
  4310  0280  1903               	skipnz
  4311  0281  0265               	subwf	??_setSw_Main,w
  4312  0282  1C03               	skipc
  4313  0283  0008               	return
  4314                           
  4315                           ;Switch_B1.c: 154: Sw->Hold1Time = 0;
  4316  0284  086F               	movf	_Sw,w
  4317  0285  3E03               	addlw	3
  4318  0286  0086               	movwf	6
  4319  0287  3001               	movlw	1	; select bank2/3
  4320  0288  0087               	movwf	7
  4321  0289  3000               	movlw	0
  4322  028A  3FC0               	movwi [0]fsr1
  4323  028B  3FC1               	movwi [1]fsr1
  4324                           
  4325                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  4326  028C  0869               	movf	setSw_Main@sw,w
  4327  028D  3188  2082         	fcall	_Sw_DimmerAdjFunc
  4328                           
  4329                           ;Switch_B1.c: 160: }
  4330                           ;Switch_B1.c: 161: } else {
  4331  028F  0008               	return
  4332  0290                     l6767:	
  4333                           
  4334                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  4335  0290  0020               	movlb	0	; select bank0
  4336  0291  086F               	movf	_Sw,w
  4337  0292  0086               	movwf	6
  4338  0293  3001               	movlw	1	; select bank2/3
  4339  0294  0087               	movwf	7
  4340  0295  1A01               	btfsc	1,4
  4341  0296  2ACE               	goto	l6781
  4342                           
  4343                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  4344  0297  086F               	movf	_Sw,w
  4345  0298  3E05               	addlw	5
  4346  0299  0086               	movwf	6
  4347  029A  3001               	movlw	1	; select bank2/3
  4348  029B  0087               	movwf	7
  4349  029C  3001               	movlw	1
  4350  029D  0781               	addwf	1,f
  4351  029E  3141               	addfsr 1,1
  4352  029F  1803               	skipnc
  4353  02A0  0A81               	incf	1,f
  4354                           
  4355                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  4356  02A1  086F               	movf	_Sw,w
  4357  02A2  3E05               	addlw	5
  4358  02A3  0086               	movwf	6
  4359  02A4  3001               	movlw	1	; select bank2/3
  4360  02A5  0087               	movwf	7
  4361  02A6  3F40               	moviw [0]fsr1
  4362  02A7  00E5               	movwf	??_setSw_Main
  4363  02A8  3F41               	moviw [1]fsr1
  4364  02A9  00E6               	movwf	??_setSw_Main+1
  4365  02AA  3000               	movlw	0
  4366  02AB  0266               	subwf	??_setSw_Main+1,w
  4367  02AC  3096               	movlw	150
  4368  02AD  1903               	skipnz
  4369  02AE  0265               	subwf	??_setSw_Main,w
  4370  02AF  1C03               	skipc
  4371  02B0  0008               	return
  4372                           
  4373                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  4374  02B1  086F               	movf	_Sw,w
  4375  02B2  3E05               	addlw	5
  4376  02B3  0086               	movwf	6
  4377  02B4  3001               	movlw	1	; select bank2/3
  4378  02B5  0087               	movwf	7
  4379  02B6  3000               	movlw	0
  4380  02B7  3FC0               	movwi [0]fsr1
  4381  02B8  3FC1               	movwi [1]fsr1
  4382                           
  4383                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  4384  02B9  086F               	movf	_Sw,w
  4385  02BA  0086               	movwf	6
  4386  02BB  3001               	movlw	1	; select bank2/3
  4387  02BC  0087               	movwf	7
  4388  02BD  1601               	bsf	1,4
  4389                           
  4390                           ;Switch_B1.c: 169: setRF_Learn(1);
  4391  02BE  3001               	movlw	1
  4392  02BF  3190  20BB  3182   	fcall	_setRF_Learn
  4393                           
  4394                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  4395  02C2  0021               	movlb	1	; select bank1
  4396  02C3  1FB5               	btfss	_myMain^(0+128),7
  4397  02C4  0008               	return
  4398                           
  4399                           ;Switch_B1.c: 172: setBuz(2, 100);
  4400  02C5  3064               	movlw	100
  4401  02C6  0020               	movlb	0	; select bank0
  4402  02C7  00A9               	movwf	setBuz@time
  4403  02C8  3000               	movlw	0
  4404  02C9  00AA               	movwf	setBuz@time+1
  4405  02CA  3002               	movlw	2
  4406  02CB  3189  2122         	fcall	_setBuz
  4407                           
  4408                           ;Switch_B1.c: 173: }
  4409                           ;Switch_B1.c: 175: }
  4410                           ;Switch_B1.c: 176: } else {
  4411  02CD  0008               	return
  4412  02CE                     l6781:	
  4413                           
  4414                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  4415  02CE  0020               	movlb	0	; select bank0
  4416  02CF  086F               	movf	_Sw,w
  4417  02D0  0086               	movwf	6
  4418  02D1  3001               	movlw	1	; select bank2/3
  4419  02D2  0087               	movwf	7
  4420  02D3  1A81               	btfsc	1,5
  4421  02D4  0008               	return
  4422                           
  4423                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  4424  02D5  086F               	movf	_Sw,w
  4425  02D6  3E07               	addlw	7
  4426  02D7  0086               	movwf	6
  4427  02D8  3001               	movlw	1	; select bank2/3
  4428  02D9  0087               	movwf	7
  4429  02DA  3001               	movlw	1
  4430  02DB  0781               	addwf	1,f
  4431  02DC  3141               	addfsr 1,1
  4432  02DD  1803               	skipnc
  4433  02DE  0A81               	incf	1,f
  4434                           
  4435                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  4436  02DF  086F               	movf	_Sw,w
  4437  02E0  3E07               	addlw	7
  4438  02E1  0086               	movwf	6
  4439  02E2  3001               	movlw	1	; select bank2/3
  4440  02E3  0087               	movwf	7
  4441  02E4  3F40               	moviw [0]fsr1
  4442  02E5  00E5               	movwf	??_setSw_Main
  4443  02E6  3F41               	moviw [1]fsr1
  4444  02E7  00E6               	movwf	??_setSw_Main+1
  4445  02E8  3001               	movlw	1
  4446  02E9  0266               	subwf	??_setSw_Main+1,w
  4447  02EA  302C               	movlw	44
  4448  02EB  1903               	skipnz
  4449  02EC  0265               	subwf	??_setSw_Main,w
  4450  02ED  1C03               	skipc
  4451  02EE  0008               	return
  4452                           
  4453                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  4454  02EF  086F               	movf	_Sw,w
  4455  02F0  3E07               	addlw	7
  4456  02F1  0086               	movwf	6
  4457  02F2  3001               	movlw	1	; select bank2/3
  4458  02F3  0087               	movwf	7
  4459  02F4  3000               	movlw	0
  4460  02F5  3FC0               	movwi [0]fsr1
  4461  02F6  3FC1               	movwi [1]fsr1
  4462                           
  4463                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  4464  02F7  086F               	movf	_Sw,w
  4465  02F8  0086               	movwf	6
  4466  02F9  3001               	movlw	1	; select bank2/3
  4467  02FA  0087               	movwf	7
  4468  02FB  1681               	bsf	1,5
  4469                           
  4470                           ;Switch_B1.c: 184: setRF_Learn(0);
  4471  02FC  3000               	movlw	0
  4472  02FD  3190  20BB         	fcall	_setRF_Learn
  4473                           
  4474                           ;Switch_B1.c: 187: }
  4475                           ;Switch_B1.c: 188: }
  4476                           ;Switch_B1.c: 189: }
  4477                           ;Switch_B1.c: 190: }
  4478                           ;Switch_B1.c: 191: }
  4479                           ;Switch_B1.c: 192: } else {
  4480  02FF  0008               	return
  4481  0300                     l6791:	
  4482                           
  4483                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  4484  0300  0020               	movlb	0	; select bank0
  4485  0301  086F               	movf	_Sw,w
  4486  0302  0086               	movwf	6
  4487  0303  3001               	movlw	1	; select bank2/3
  4488  0304  0087               	movwf	7
  4489  0305  1D01               	btfss	1,2
  4490  0306  0008               	return
  4491                           
  4492                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  4493  0307  3001               	movlw	1
  4494  0308  00E5               	movwf	??_setSw_Main
  4495  0309  086F               	movf	_Sw,w
  4496  030A  3E02               	addlw	2
  4497  030B  0086               	movwf	6
  4498  030C  3001               	movlw	1	; select bank2/3
  4499  030D  0087               	movwf	7
  4500  030E  0865               	movf	??_setSw_Main,w
  4501  030F  0781               	addwf	1,f
  4502                           
  4503                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  4504  0310  086F               	movf	_Sw,w
  4505  0311  3E02               	addlw	2
  4506  0312  0086               	movwf	6
  4507  0313  3001               	movlw	1	; select bank2/3
  4508  0314  0087               	movwf	7
  4509  0315  3005               	movlw	5
  4510  0316  0201               	subwf	1,w
  4511  0317  1C03               	skipc
  4512  0318  0008               	return
  4513                           
  4514                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  4515  0319  086F               	movf	_Sw,w
  4516  031A  3E02               	addlw	2
  4517  031B  0086               	movwf	6
  4518  031C  3001               	movlw	1	; select bank2/3
  4519  031D  0087               	movwf	7
  4520  031E  0181               	clrf	1
  4521                           
  4522                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  4523  031F  086F               	movf	_Sw,w
  4524  0320  0086               	movwf	6
  4525  0321  3001               	movlw	1	; select bank2/3
  4526  0322  0087               	movwf	7
  4527  0323  1101               	bcf	1,2
  4528                           
  4529                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  4530  0324  086F               	movf	_Sw,w
  4531  0325  3E03               	addlw	3
  4532  0326  0086               	movwf	6
  4533  0327  3001               	movlw	1	; select bank2/3
  4534  0328  0087               	movwf	7
  4535  0329  3000               	movlw	0
  4536  032A  3FC0               	movwi [0]fsr1
  4537  032B  3FC1               	movwi [1]fsr1
  4538                           
  4539                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  4540  032C  086F               	movf	_Sw,w
  4541  032D  0086               	movwf	6
  4542  032E  3001               	movlw	1	; select bank2/3
  4543  032F  0087               	movwf	7
  4544  0330  1181               	bcf	1,3
  4545                           
  4546                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  4547  0331  086F               	movf	_Sw,w
  4548  0332  3E05               	addlw	5
  4549  0333  0086               	movwf	6
  4550  0334  3001               	movlw	1	; select bank2/3
  4551  0335  0087               	movwf	7
  4552  0336  3000               	movlw	0
  4553  0337  3FC0               	movwi [0]fsr1
  4554  0338  3FC1               	movwi [1]fsr1
  4555                           
  4556                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  4557  0339  086F               	movf	_Sw,w
  4558  033A  0086               	movwf	6
  4559  033B  3001               	movlw	1	; select bank2/3
  4560  033C  0087               	movwf	7
  4561  033D  1201               	bcf	1,4
  4562                           
  4563                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  4564  033E  086F               	movf	_Sw,w
  4565  033F  3E07               	addlw	7
  4566  0340  0086               	movwf	6
  4567  0341  3001               	movlw	1	; select bank2/3
  4568  0342  0087               	movwf	7
  4569  0343  3000               	movlw	0
  4570  0344  3FC0               	movwi [0]fsr1
  4571  0345  3FC1               	movwi [1]fsr1
  4572                           
  4573                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  4574  0346  086F               	movf	_Sw,w
  4575  0347  0086               	movwf	6
  4576  0348  3001               	movlw	1	; select bank2/3
  4577  0349  0087               	movwf	7
  4578  034A  1281               	bcf	1,5
  4579                           
  4580                           ;Switch_B1.c: 205: Sw_DimmerOffFunc(sw);
  4581  034B  0869               	movf	setSw_Main@sw,w
  4582  034C  318C  2431  3182   	fcall	_Sw_DimmerOffFunc
  4583                           
  4584                           ;Switch_B1.c: 208: setRF_Learn(0);
  4585  034F  3000               	movlw	0
  4586  0350  3190  20BB         	fcall	_setRF_Learn
  4587  0352  0008               	return
  4588  0353                     __end_of_setSw_Main:	
  4589                           
  4590                           	psect	text7
  4591  10BB                     __ptext7:	
  4592 ;; *************** function _setRF_Learn *****************
  4593 ;; Defined at:
  4594 ;;		line 23 in file "../src/RF_Control_B1.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;  command         1    wreg     unsigned char 
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;  command         1    0[BANK0 ] unsigned char 
  4599 ;; Return value:  Size  Location     Type
  4600 ;;		None               void
  4601 ;; Registers used:
  4602 ;;		wreg
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4611 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4612 ;;Total ram usage:        1 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; Hardware stack levels required when called:    5
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_setSw_Main
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           
  4623                           ;psect for function _setRF_Learn
  4624  10BB                     _setRF_Learn:	
  4625                           
  4626                           ;incstack = 0
  4627                           ; Regs used in _setRF_Learn: [wreg]
  4628                           ;setRF_Learn@command stored from wreg
  4629  10BB  0020               	movlb	0	; select bank0
  4630  10BC  00A0               	movwf	setRF_Learn@command
  4631                           
  4632                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  4633  10BD  0820               	movf	setRF_Learn@command,w
  4634  10BE  0021               	movlb	1	; select bank1
  4635  10BF  1353               	bcf	_RF1^(0+128),6
  4636  10C0  1D03               	skipz
  4637  10C1  1753               	bsf	_RF1^(0+128),6
  4638  10C2  0008               	return
  4639  10C3                     __end_of_setRF_Learn:	
  4640                           
  4641                           	psect	text8
  4642  0D82                     __ptext8:	
  4643 ;; *************** function _Sw_DimmerOnFunc *****************
  4644 ;; Defined at:
  4645 ;;		line 217 in file "../src/Switch_B1.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  sw              1    wreg     unsigned char 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  sw              1   67[BANK0 ] unsigned char 
  4650 ;;  Idle            1   66[BANK0 ] unsigned char 
  4651 ;; Return value:  Size  Location     Type
  4652 ;;		None               void
  4653 ;; Registers used:
  4654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4661 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;Total ram usage:        2 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; Hardware stack levels required when called:    9
  4667 ;; This function calls:
  4668 ;;		_setBuz
  4669 ;;		_setDimmerLights_Switch
  4670 ;;		_setDimmerLights_Trigger
  4671 ;;		_setRFSW_Status
  4672 ;;		_setRF_DimmerLights
  4673 ;;		_setTxData
  4674 ;; This function is called by:
  4675 ;;		_setSw_Main
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           
  4680                           ;psect for function _Sw_DimmerOnFunc
  4681  0D82                     _Sw_DimmerOnFunc:	
  4682                           
  4683                           ;incstack = 0
  4684                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4685                           ;Sw_DimmerOnFunc@sw stored from wreg
  4686  0D82  0020               	movlb	0	; select bank0
  4687  0D83  00E3               	movwf	Sw_DimmerOnFunc@sw
  4688                           
  4689                           ;Switch_B1.c: 218: char Idle = 1;
  4690  0D84  01E2               	clrf	Sw_DimmerOnFunc@Idle
  4691  0D85  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  4692                           
  4693                           ;Switch_B1.c: 232: if (sw == 1) {
  4694  0D86  0863               	movf	Sw_DimmerOnFunc@sw,w
  4695  0D87  3A01               	xorlw	1
  4696  0D88  1D03               	skipz
  4697  0D89  2D94               	goto	l6177
  4698                           
  4699                           ;Switch_B1.c: 233: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  4700  0D8A  1003               	clrc
  4701  0D8B  0022               	movlb	2	; select bank2
  4702  0D8C  1DBF               	btfss	(_DimmerLights2^(0+256)+8),3
  4703  0D8D  1403               	setc
  4704  0D8E  3000               	movlw	0
  4705  0D8F  1803               	btfsc	3,0
  4706  0D90  3001               	movlw	1
  4707  0D91  0020               	movlb	0	; select bank0
  4708  0D92  00E2               	movwf	Sw_DimmerOnFunc@Idle
  4709                           
  4710                           ;Switch_B1.c: 234: } else if (sw == 2) {
  4711  0D93  2DA1               	goto	l6181
  4712  0D94                     l6177:	
  4713  0D94  0863               	movf	Sw_DimmerOnFunc@sw,w
  4714  0D95  3A02               	xorlw	2
  4715  0D96  1D03               	skipz
  4716  0D97  2DA1               	goto	l6181
  4717                           
  4718                           ;Switch_B1.c: 235: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  4719  0D98  1003               	clrc
  4720  0D99  0022               	movlb	2	; select bank2
  4721  0D9A  1DB0               	btfss	(_DimmerLights1^(0+256)+8),3
  4722  0D9B  1403               	setc
  4723  0D9C  3000               	movlw	0
  4724  0D9D  1803               	btfsc	3,0
  4725  0D9E  3001               	movlw	1
  4726  0D9F  0020               	movlb	0	; select bank0
  4727  0DA0  00E2               	movwf	Sw_DimmerOnFunc@Idle
  4728  0DA1                     l6181:	
  4729                           
  4730                           ;Switch_B1.c: 236: }
  4731                           ;Switch_B1.c: 239: if (Idle == 1) {
  4732  0DA1  0862               	movf	Sw_DimmerOnFunc@Idle,w
  4733  0DA2  3A01               	xorlw	1
  4734  0DA3  1D03               	skipz
  4735  0DA4  0008               	return
  4736                           
  4737                           ;Switch_B1.c: 240: Sw->Flag = 1;
  4738  0DA5  086F               	movf	_Sw,w
  4739  0DA6  0086               	movwf	6
  4740  0DA7  3001               	movlw	1	; select bank2/3
  4741  0DA8  0087               	movwf	7
  4742  0DA9  1781               	bsf	1,7
  4743                           
  4744                           ;Switch_B1.c: 241: setBuz(1, 100);
  4745  0DAA  3064               	movlw	100
  4746  0DAB  00A9               	movwf	setBuz@time
  4747  0DAC  3000               	movlw	0
  4748  0DAD  00AA               	movwf	setBuz@time+1
  4749  0DAE  3001               	movlw	1
  4750  0DAF  3189  2122  318D   	fcall	_setBuz
  4751                           
  4752                           ;Switch_B1.c: 242: if (Sw->Status == 0) {
  4753  0DB2  0020               	movlb	0	; select bank0
  4754  0DB3  086F               	movf	_Sw,w
  4755  0DB4  0086               	movwf	6
  4756  0DB5  3001               	movlw	1	; select bank2/3
  4757  0DB6  0087               	movwf	7
  4758  0DB7  1B01               	btfsc	1,6
  4759  0DB8  2DE2               	goto	l6201
  4760                           
  4761                           ;Switch_B1.c: 243: Sw->Status = 1;
  4762  0DB9  086F               	movf	_Sw,w
  4763  0DBA  0086               	movwf	6
  4764  0DBB  3001               	movlw	1	; select bank2/3
  4765  0DBC  0087               	movwf	7
  4766  0DBD  1701               	bsf	1,6
  4767                           
  4768                           ;Switch_B1.c: 244: setRFSW_Status(sw, 1);
  4769  0DBE  01A2               	clrf	setRFSW_Status@command
  4770  0DBF  0AA2               	incf	setRFSW_Status@command,f
  4771  0DC0  0863               	movf	Sw_DimmerOnFunc@sw,w
  4772  0DC1  3191  214F  318D   	fcall	_setRFSW_Status
  4773                           
  4774                           ;Switch_B1.c: 246: setDimmerLights_Trigger(sw, 1);
  4775  0DC4  0020               	movlb	0	; select bank0
  4776  0DC5  01A2               	clrf	setDimmerLights_Trigger@command
  4777  0DC6  0AA2               	incf	setDimmerLights_Trigger@command,f
  4778  0DC7  0863               	movf	Sw_DimmerOnFunc@sw,w
  4779  0DC8  3191  21B9  318D   	fcall	_setDimmerLights_Trigger
  4780                           
  4781                           ;Switch_B1.c: 247: setDimmerLights_Switch(sw, 1);
  4782  0DCB  0020               	movlb	0	; select bank0
  4783  0DCC  01A2               	clrf	setDimmerLights_Switch@command
  4784  0DCD  0AA2               	incf	setDimmerLights_Switch@command,f
  4785  0DCE  0863               	movf	Sw_DimmerOnFunc@sw,w
  4786  0DCF  3191  21A9  318D   	fcall	_setDimmerLights_Switch
  4787                           
  4788                           ;Switch_B1.c: 249: setRF_DimmerLights(sw, Sw->Status);
  4789  0DD2  0020               	movlb	0	; select bank0
  4790  0DD3  086F               	movf	_Sw,w
  4791  0DD4  0086               	movwf	6
  4792  0DD5  3001               	movlw	1	; select bank2/3
  4793  0DD6  0087               	movwf	7
  4794  0DD7  3000               	movlw	0
  4795  0DD8  1B01               	btfsc	1,6
  4796  0DD9  3001               	movlw	1
  4797  0DDA  00DD               	movwf	setRF_DimmerLights@on
  4798  0DDB  0863               	movf	Sw_DimmerOnFunc@sw,w
  4799  0DDC  318B  23C5  318D   	fcall	_setRF_DimmerLights
  4800                           
  4801                           ;Switch_B1.c: 250: setTxData();
  4802  0DDF  3185  2510         	fcall	_setTxData
  4803                           
  4804                           ;Switch_B1.c: 252: } else {
  4805  0DE1  0008               	return
  4806  0DE2                     l6201:	
  4807                           
  4808                           ;Switch_B1.c: 253: Sw->Status = 0;
  4809  0DE2  0020               	movlb	0	; select bank0
  4810  0DE3  086F               	movf	_Sw,w
  4811  0DE4  0086               	movwf	6
  4812  0DE5  3001               	movlw	1	; select bank2/3
  4813  0DE6  0087               	movwf	7
  4814  0DE7  1301               	bcf	1,6
  4815                           
  4816                           ;Switch_B1.c: 254: setRFSW_Status(sw, Sw->Status);
  4817  0DE8  086F               	movf	_Sw,w
  4818  0DE9  0086               	movwf	6
  4819  0DEA  3001               	movlw	1	; select bank2/3
  4820  0DEB  0087               	movwf	7
  4821  0DEC  3000               	movlw	0
  4822  0DED  1B01               	btfsc	1,6
  4823  0DEE  3001               	movlw	1
  4824  0DEF  00A2               	movwf	setRFSW_Status@command
  4825  0DF0  0863               	movf	Sw_DimmerOnFunc@sw,w
  4826  0DF1  3191  214F         	fcall	_setRFSW_Status
  4827  0DF3  0008               	return
  4828  0DF4                     __end_of_Sw_DimmerOnFunc:	
  4829                           
  4830                           	psect	text9
  4831  0C31                     __ptext9:	
  4832 ;; *************** function _Sw_DimmerOffFunc *****************
  4833 ;; Defined at:
  4834 ;;		line 260 in file "../src/Switch_B1.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  sw              1    wreg     unsigned char 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  sw              1   68[BANK0 ] unsigned char 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;		None               void
  4841 ;; Registers used:
  4842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;Total ram usage:        3 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; Hardware stack levels required when called:    9
  4855 ;; This function calls:
  4856 ;;		_setDelayOff_GO
  4857 ;;		_setDimmerLights_AdjGo
  4858 ;;		_setDimmerLights_Switch
  4859 ;;		_setDimmerLights_Trigger
  4860 ;;		_setDimmerLights_TriggerAdj
  4861 ;;		_setRF_DimmerLights
  4862 ;;		_setTxData
  4863 ;; This function is called by:
  4864 ;;		_setSw_Main
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           
  4869                           ;psect for function _Sw_DimmerOffFunc
  4870  0C31                     _Sw_DimmerOffFunc:	
  4871                           
  4872                           ;incstack = 0
  4873                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4874                           ;Sw_DimmerOffFunc@sw stored from wreg
  4875  0C31  0020               	movlb	0	; select bank0
  4876  0C32  00E4               	movwf	Sw_DimmerOffFunc@sw
  4877                           
  4878                           ;Switch_B1.c: 261: if (Sw->Flag == 1) {
  4879  0C33  086F               	movf	_Sw,w
  4880  0C34  0086               	movwf	6
  4881  0C35  3001               	movlw	1	; select bank2/3
  4882  0C36  0087               	movwf	7
  4883  0C37  1F81               	btfss	1,7
  4884  0C38  0008               	return
  4885                           
  4886                           ;Switch_B1.c: 262: Sw->Flag = 0;
  4887  0C39  086F               	movf	_Sw,w
  4888  0C3A  0086               	movwf	6
  4889  0C3B  3001               	movlw	1	; select bank2/3
  4890  0C3C  0087               	movwf	7
  4891  0C3D  1381               	bcf	1,7
  4892                           
  4893                           ;Switch_B1.c: 263: if (Sw->Status == 1) {
  4894  0C3E  086F               	movf	_Sw,w
  4895  0C3F  0086               	movwf	6
  4896  0C40  3001               	movlw	1	; select bank2/3
  4897  0C41  0087               	movwf	7
  4898  0C42  1F01               	btfss	1,6
  4899  0C43  2C7C               	goto	l6245
  4900                           
  4901                           ;Switch_B1.c: 264: if (Sw->Adj == 1) {
  4902  0C44  0A6F               	incf	_Sw,w
  4903  0C45  0086               	movwf	6
  4904  0C46  3001               	movlw	1	; select bank2/3
  4905  0C47  0087               	movwf	7
  4906  0C48  1C01               	btfss	1,0
  4907  0C49  0008               	return
  4908                           
  4909                           ;Switch_B1.c: 265: Sw->Adj = 0;
  4910  0C4A  0A6F               	incf	_Sw,w
  4911  0C4B  0086               	movwf	6
  4912  0C4C  3001               	movlw	1	; select bank2/3
  4913  0C4D  0087               	movwf	7
  4914  0C4E  1001               	bcf	1,0
  4915                           
  4916                           ;Switch_B1.c: 266: setDimmerLights_TriggerAdj(sw, 1);
  4917  0C4F  01A2               	clrf	setDimmerLights_TriggerAdj@command
  4918  0C50  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  4919  0C51  0864               	movf	Sw_DimmerOffFunc@sw,w
  4920  0C52  3191  21D9  318C   	fcall	_setDimmerLights_TriggerAdj
  4921                           
  4922                           ;Switch_B1.c: 267: setDimmerLights_AdjGo(sw, 0);
  4923  0C55  0020               	movlb	0	; select bank0
  4924  0C56  01A2               	clrf	setDimmerLights_AdjGo@command
  4925  0C57  0864               	movf	Sw_DimmerOffFunc@sw,w
  4926  0C58  3191  21C9  318C   	fcall	_setDimmerLights_AdjGo
  4927                           
  4928                           ;Switch_B1.c: 269: product->Data[17]=product->Data[26 + sw];
  4929  0C5B  0020               	movlb	0	; select bank0
  4930  0C5C  0864               	movf	Sw_DimmerOffFunc@sw,w
  4931  0C5D  3E1A               	addlw	26
  4932  0C5E  076E               	addwf	_product,w
  4933  0C5F  00E2               	movwf	??_Sw_DimmerOffFunc
  4934  0C60  0862               	movf	??_Sw_DimmerOffFunc,w
  4935  0C61  0086               	movwf	6
  4936  0C62  3001               	movlw	1	; select bank2/3
  4937  0C63  0087               	movwf	7
  4938  0C64  0801               	movf	1,w
  4939  0C65  00E3               	movwf	??_Sw_DimmerOffFunc+1
  4940  0C66  086E               	movf	_product,w
  4941  0C67  3E11               	addlw	17
  4942  0C68  0086               	movwf	6
  4943  0C69  3001               	movlw	1	; select bank2/3
  4944  0C6A  0087               	movwf	7
  4945  0C6B  0863               	movf	??_Sw_DimmerOffFunc+1,w
  4946  0C6C  0081               	movwf	1
  4947                           
  4948                           ;Switch_B1.c: 270: setRF_DimmerLights(sw, Sw->Status);
  4949  0C6D  086F               	movf	_Sw,w
  4950  0C6E  0086               	movwf	6
  4951  0C6F  3001               	movlw	1	; select bank2/3
  4952  0C70  0087               	movwf	7
  4953  0C71  3000               	movlw	0
  4954  0C72  1B01               	btfsc	1,6
  4955  0C73  3001               	movlw	1
  4956  0C74  00DD               	movwf	setRF_DimmerLights@on
  4957  0C75  0864               	movf	Sw_DimmerOffFunc@sw,w
  4958  0C76  318B  23C5  318C   	fcall	_setRF_DimmerLights
  4959                           
  4960                           ;Switch_B1.c: 271: setTxData();
  4961  0C79  3185  2510         	fcall	_setTxData
  4962                           
  4963                           ;Switch_B1.c: 273: }
  4964                           ;Switch_B1.c: 274: } else {
  4965  0C7B  0008               	return
  4966  0C7C                     l6245:	
  4967                           
  4968                           ;Switch_B1.c: 275: setDimmerLights_Trigger(sw, 1);
  4969  0C7C  0020               	movlb	0	; select bank0
  4970  0C7D  01A2               	clrf	setDimmerLights_Trigger@command
  4971  0C7E  0AA2               	incf	setDimmerLights_Trigger@command,f
  4972  0C7F  0864               	movf	Sw_DimmerOffFunc@sw,w
  4973  0C80  3191  21B9  318C   	fcall	_setDimmerLights_Trigger
  4974                           
  4975                           ;Switch_B1.c: 276: setDimmerLights_Switch(sw, 0);
  4976  0C83  0020               	movlb	0	; select bank0
  4977  0C84  01A2               	clrf	setDimmerLights_Switch@command
  4978  0C85  0864               	movf	Sw_DimmerOffFunc@sw,w
  4979  0C86  3191  21A9  318C   	fcall	_setDimmerLights_Switch
  4980                           
  4981                           ;Switch_B1.c: 278: setDelayOff_GO(sw, 0, 0);
  4982  0C89  0020               	movlb	0	; select bank0
  4983  0C8A  01AA               	clrf	setDelayOff_GO@command
  4984  0C8B  01AB               	clrf	setDelayOff_GO@value
  4985  0C8C  0864               	movf	Sw_DimmerOffFunc@sw,w
  4986  0C8D  318A  22F8  318C   	fcall	_setDelayOff_GO
  4987                           
  4988                           ;Switch_B1.c: 279: setRF_DimmerLights(sw, Sw->Status);
  4989  0C90  0020               	movlb	0	; select bank0
  4990  0C91  086F               	movf	_Sw,w
  4991  0C92  0086               	movwf	6
  4992  0C93  3001               	movlw	1	; select bank2/3
  4993  0C94  0087               	movwf	7
  4994  0C95  3000               	movlw	0
  4995  0C96  1B01               	btfsc	1,6
  4996  0C97  3001               	movlw	1
  4997  0C98  00DD               	movwf	setRF_DimmerLights@on
  4998  0C99  0864               	movf	Sw_DimmerOffFunc@sw,w
  4999  0C9A  318B  23C5  318C   	fcall	_setRF_DimmerLights
  5000                           
  5001                           ;Switch_B1.c: 280: setTxData();
  5002  0C9D  3185  2510         	fcall	_setTxData
  5003  0C9F  0008               	return
  5004  0CA0                     __end_of_Sw_DimmerOffFunc:	
  5005                           
  5006                           	psect	text10
  5007  0882                     __ptext10:	
  5008 ;; *************** function _Sw_DimmerAdjFunc *****************
  5009 ;; Defined at:
  5010 ;;		line 287 in file "../src/Switch_B1.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;  sw              1    wreg     unsigned char 
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;  sw              1    5[BANK0 ] unsigned char 
  5015 ;;  Idle            1    4[BANK0 ] unsigned char 
  5016 ;; Return value:  Size  Location     Type
  5017 ;;		None               void
  5018 ;; Registers used:
  5019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5020 ;; Tracked objects:
  5021 ;;		On entry : 0/0
  5022 ;;		On exit  : 0/0
  5023 ;;		Unchanged: 0/0
  5024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5028 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;Total ram usage:        2 bytes
  5030 ;; Hardware stack levels used:    1
  5031 ;; Hardware stack levels required when called:    7
  5032 ;; This function calls:
  5033 ;;		_setDimmerLights_AdjGo
  5034 ;;		_setDimmerLights_TriggerAdj
  5035 ;;		_setRFSW_Status
  5036 ;; This function is called by:
  5037 ;;		_setSw_Main
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           
  5042                           ;psect for function _Sw_DimmerAdjFunc
  5043  0882                     _Sw_DimmerAdjFunc:	
  5044                           
  5045                           ;incstack = 0
  5046                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5047                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5048  0882  0020               	movlb	0	; select bank0
  5049  0883  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5050                           
  5051                           ;Switch_B1.c: 288: char Idle = 1;
  5052  0884  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5053  0885  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5054                           
  5055                           ;Switch_B1.c: 301: if (sw == 1) {
  5056  0886  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5057  0887  3A01               	xorlw	1
  5058  0888  1D03               	skipz
  5059  0889  2894               	goto	l6211
  5060                           
  5061                           ;Switch_B1.c: 302: Idle = (DimmerLights2.AdjGo == 1) ? 0 : 1;
  5062  088A  1003               	clrc
  5063  088B  0022               	movlb	2	; select bank2
  5064  088C  1DBF               	btfss	(_DimmerLights2^(0+256)+8),3
  5065  088D  1403               	setc
  5066  088E  3000               	movlw	0
  5067  088F  1803               	btfsc	3,0
  5068  0890  3001               	movlw	1
  5069  0891  0020               	movlb	0	; select bank0
  5070  0892  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5071                           
  5072                           ;Switch_B1.c: 303: } else if (sw == 2) {
  5073  0893  28A1               	goto	l6215
  5074  0894                     l6211:	
  5075  0894  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5076  0895  3A02               	xorlw	2
  5077  0896  1D03               	skipz
  5078  0897  28A1               	goto	l6215
  5079                           
  5080                           ;Switch_B1.c: 304: Idle = (DimmerLights1.AdjGo == 1) ? 0 : 1;
  5081  0898  1003               	clrc
  5082  0899  0022               	movlb	2	; select bank2
  5083  089A  1DB0               	btfss	(_DimmerLights1^(0+256)+8),3
  5084  089B  1403               	setc
  5085  089C  3000               	movlw	0
  5086  089D  1803               	btfsc	3,0
  5087  089E  3001               	movlw	1
  5088  089F  0020               	movlb	0	; select bank0
  5089  08A0  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5090  08A1                     l6215:	
  5091                           
  5092                           ;Switch_B1.c: 305: }
  5093                           ;Switch_B1.c: 308: if (Idle == 1) {
  5094  08A1  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5095  08A2  3A01               	xorlw	1
  5096  08A3  1D03               	skipz
  5097  08A4  0008               	return
  5098                           
  5099                           ;Switch_B1.c: 309: if (Sw->Flag == 1) {
  5100  08A5  086F               	movf	_Sw,w
  5101  08A6  0086               	movwf	6
  5102  08A7  3001               	movlw	1	; select bank2/3
  5103  08A8  0087               	movwf	7
  5104  08A9  1F81               	btfss	1,7
  5105  08AA  0008               	return
  5106                           
  5107                           ;Switch_B1.c: 310: Sw->Hold1 = 1;
  5108  08AB  086F               	movf	_Sw,w
  5109  08AC  0086               	movwf	6
  5110  08AD  3001               	movlw	1	; select bank2/3
  5111  08AE  0087               	movwf	7
  5112  08AF  1581               	bsf	1,3
  5113                           
  5114                           ;Switch_B1.c: 311: Sw->Adj = 1;
  5115  08B0  0A6F               	incf	_Sw,w
  5116  08B1  0086               	movwf	6
  5117  08B2  3001               	movlw	1	; select bank2/3
  5118  08B3  0087               	movwf	7
  5119  08B4  1401               	bsf	1,0
  5120                           
  5121                           ;Switch_B1.c: 312: Sw->Status = 1;
  5122  08B5  086F               	movf	_Sw,w
  5123  08B6  0086               	movwf	6
  5124  08B7  3001               	movlw	1	; select bank2/3
  5125  08B8  0087               	movwf	7
  5126  08B9  1701               	bsf	1,6
  5127                           
  5128                           ;Switch_B1.c: 313: setRFSW_Status(sw, 1);
  5129  08BA  01A2               	clrf	setRFSW_Status@command
  5130  08BB  0AA2               	incf	setRFSW_Status@command,f
  5131  08BC  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5132  08BD  3191  214F  3188   	fcall	_setRFSW_Status
  5133                           
  5134                           ;Switch_B1.c: 315: setDimmerLights_TriggerAdj(sw, 1);
  5135  08C0  0020               	movlb	0	; select bank0
  5136  08C1  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5137  08C2  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5138  08C3  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5139  08C4  3191  21D9  3188   	fcall	_setDimmerLights_TriggerAdj
  5140                           
  5141                           ;Switch_B1.c: 316: setDimmerLights_AdjGo(sw, 1);
  5142  08C7  0020               	movlb	0	; select bank0
  5143  08C8  01A2               	clrf	setDimmerLights_AdjGo@command
  5144  08C9  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5145  08CA  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5146  08CB  3191  21C9         	fcall	_setDimmerLights_AdjGo
  5147  08CD  0008               	return
  5148  08CE                     __end_of_Sw_DimmerAdjFunc:	
  5149                           
  5150                           	psect	text11
  5151  11D9                     __ptext11:	
  5152 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5153 ;; Defined at:
  5154 ;;		line 711 in file "../src/Dimmer_B1.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;  lights          1    wreg     unsigned char 
  5157 ;;  command         1    2[BANK0 ] unsigned char 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;  lights          1    3[BANK0 ] unsigned char 
  5160 ;; Return value:  Size  Location     Type
  5161 ;;		None               void
  5162 ;; Registers used:
  5163 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5169 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5170 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5172 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5173 ;;Total ram usage:        2 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:    6
  5176 ;; This function calls:
  5177 ;;		_DimmerLightsPointSelect
  5178 ;; This function is called by:
  5179 ;;		_Sw_DimmerOffFunc
  5180 ;;		_Sw_DimmerAdjFunc
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           
  5185                           ;psect for function _setDimmerLights_TriggerAdj
  5186  11D9                     _setDimmerLights_TriggerAdj:	
  5187                           
  5188                           ;incstack = 0
  5189                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5190                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5191  11D9  0020               	movlb	0	; select bank0
  5192  11DA  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5193                           
  5194                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  5195  11DB  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5196  11DC  3192  2241         	fcall	_DimmerLightsPointSelect
  5197                           
  5198                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  5199  11DE  0879               	movf	_DimmerLights,w
  5200  11DF  3E08               	addlw	8
  5201  11E0  0086               	movwf	6
  5202  11E1  3001               	movlw	1	; select bank2/3
  5203  11E2  0087               	movwf	7
  5204  11E3  0020               	movlb	0	; select bank0
  5205  11E4  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5206  11E5  1201               	bcf	1,4
  5207  11E6  1D03               	skipz
  5208  11E7  1601               	bsf	1,4
  5209  11E8  0008               	return
  5210  11E9                     __end_of_setDimmerLights_TriggerAdj:	
  5211                           
  5212                           	psect	text12
  5213  11C9                     __ptext12:	
  5214 ;; *************** function _setDimmerLights_AdjGo *****************
  5215 ;; Defined at:
  5216 ;;		line 699 in file "../src/Dimmer_B1.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;  lights          1    wreg     unsigned char 
  5219 ;;  command         1    2[BANK0 ] unsigned char 
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;  lights          1    3[BANK0 ] unsigned char 
  5222 ;; Return value:  Size  Location     Type
  5223 ;;		None               void
  5224 ;; Registers used:
  5225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5226 ;; Tracked objects:
  5227 ;;		On entry : 0/0
  5228 ;;		On exit  : 0/0
  5229 ;;		Unchanged: 0/0
  5230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5231 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5234 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5235 ;;Total ram usage:        2 bytes
  5236 ;; Hardware stack levels used:    1
  5237 ;; Hardware stack levels required when called:    6
  5238 ;; This function calls:
  5239 ;;		_DimmerLightsPointSelect
  5240 ;; This function is called by:
  5241 ;;		_Sw_DimmerOffFunc
  5242 ;;		_Sw_DimmerAdjFunc
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           
  5247                           ;psect for function _setDimmerLights_AdjGo
  5248  11C9                     _setDimmerLights_AdjGo:	
  5249                           
  5250                           ;incstack = 0
  5251                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5252                           ;setDimmerLights_AdjGo@lights stored from wreg
  5253  11C9  0020               	movlb	0	; select bank0
  5254  11CA  00A3               	movwf	setDimmerLights_AdjGo@lights
  5255                           
  5256                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  5257  11CB  0823               	movf	setDimmerLights_AdjGo@lights,w
  5258  11CC  3192  2241         	fcall	_DimmerLightsPointSelect
  5259                           
  5260                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  5261  11CE  0879               	movf	_DimmerLights,w
  5262  11CF  3E08               	addlw	8
  5263  11D0  0086               	movwf	6
  5264  11D1  3001               	movlw	1	; select bank2/3
  5265  11D2  0087               	movwf	7
  5266  11D3  0020               	movlb	0	; select bank0
  5267  11D4  0822               	movf	setDimmerLights_AdjGo@command,w
  5268  11D5  1181               	bcf	1,3
  5269  11D6  1D03               	skipz
  5270  11D7  1581               	bsf	1,3
  5271  11D8  0008               	return
  5272  11D9                     __end_of_setDimmerLights_AdjGo:	
  5273                           
  5274                           	psect	text13
  5275  1134                     __ptext13:	
  5276 ;; *************** function _Switch_Initialization *****************
  5277 ;; Defined at:
  5278 ;;		line 41 in file "../src/Switch_B1.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;		None
  5281 ;; Auto vars:     Size  Location     Type
  5282 ;;		None
  5283 ;; Return value:  Size  Location     Type
  5284 ;;		None               void
  5285 ;; Registers used:
  5286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5287 ;; Tracked objects:
  5288 ;;		On entry : 0/0
  5289 ;;		On exit  : 0/0
  5290 ;;		Unchanged: 0/0
  5291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5296 ;;Total ram usage:        0 bytes
  5297 ;; Hardware stack levels used:    1
  5298 ;; Hardware stack levels required when called:    8
  5299 ;; This function calls:
  5300 ;;		_TouchPower
  5301 ;;		_setSw_Initialization
  5302 ;; This function is called by:
  5303 ;;		_main
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           
  5308                           ;psect for function _Switch_Initialization
  5309  1134                     _Switch_Initialization:	
  5310                           
  5311                           ;Switch_B1.c: 42: TouchPower();
  5312                           
  5313                           ;incstack = 0
  5314                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5315  1134  3191  218B  3191   	fcall	_TouchPower
  5316                           
  5317                           ;Switch_B1.c: 44: WPUB1 = 0;
  5318  1137  0024               	movlb	4	; select bank4
  5319  1138  108D               	bcf	13,1	;volatile
  5320                           
  5321                           ;Switch_B1.c: 53: setSw_Initialization(1);
  5322  1139  3001               	movlw	1
  5323  113A  3190  20B3  3191   	fcall	_setSw_Initialization
  5324                           
  5325                           ;Switch_B1.c: 56: setSw_Initialization(2);
  5326  113D  3002               	movlw	2
  5327  113E  3190  20B3         	fcall	_setSw_Initialization
  5328  1140  0008               	return
  5329  1141                     __end_of_Switch_Initialization:	
  5330                           
  5331                           	psect	text14
  5332  10B3                     __ptext14:	
  5333 ;; *************** function _setSw_Initialization *****************
  5334 ;; Defined at:
  5335 ;;		line 81 in file "../src/Switch_B1.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  sw              1    wreg     unsigned char 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  sw              1    4[BANK0 ] unsigned char 
  5340 ;; Return value:  Size  Location     Type
  5341 ;;		None               void
  5342 ;; Registers used:
  5343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;Total ram usage:        1 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    7
  5356 ;; This function calls:
  5357 ;;		_setLED
  5358 ;; This function is called by:
  5359 ;;		_Switch_Initialization
  5360 ;; This function uses a non-reentrant model
  5361 ;;
  5362                           
  5363                           
  5364                           ;psect for function _setSw_Initialization
  5365  10B3                     _setSw_Initialization:	
  5366                           
  5367                           ;incstack = 0
  5368                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5369                           ;setSw_Initialization@sw stored from wreg
  5370  10B3  0020               	movlb	0	; select bank0
  5371  10B4  00A4               	movwf	setSw_Initialization@sw
  5372                           
  5373                           ;Switch_B1.c: 82: setLED(sw, 1);
  5374  10B5  01A2               	clrf	setLED@command
  5375  10B6  0AA2               	incf	setLED@command,f
  5376  10B7  0824               	movf	setSw_Initialization@sw,w
  5377  10B8  318A  2297         	fcall	_setLED
  5378  10BA  0008               	return
  5379  10BB                     __end_of_setSw_Initialization:	
  5380                           
  5381                           	psect	text15
  5382  118B                     __ptext15:	
  5383 ;; *************** function _TouchPower *****************
  5384 ;; Defined at:
  5385 ;;		line 10 in file "../src/Switch_B1.c"
  5386 ;; Parameters:    Size  Location     Type
  5387 ;;		None
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;		None
  5390 ;; Return value:  Size  Location     Type
  5391 ;;		None               void
  5392 ;; Registers used:
  5393 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 0/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;Total ram usage:        0 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    6
  5406 ;; This function calls:
  5407 ;;		_Timeout_Counter
  5408 ;;		_set_TimeoutCleared
  5409 ;; This function is called by:
  5410 ;;		_Switch_Initialization
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           
  5415                           ;psect for function _TouchPower
  5416  118B                     _TouchPower:	
  5417                           
  5418                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  5419                           
  5420                           ;incstack = 0
  5421                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5422  118B  2991               	goto	l6711
  5423  118C                     l2362:	
  5424                           
  5425                           ;Switch_B1.c: 12: RC5 = 1;
  5426  118C  0020               	movlb	0	; select bank0
  5427  118D  168E               	bsf	14,5	;volatile
  5428                           
  5429                           ;Switch_B1.c: 13: Timeout_Counter();
  5430  118E  3193  2327  3191   	fcall	_Timeout_Counter
  5431  1191                     l6711:	
  5432  1191  0020               	movlb	0	; select bank0
  5433  1192  1A8E               	btfsc	14,5	;volatile
  5434  1193  2997               	goto	l6715
  5435  1194  0021               	movlb	1	; select bank1
  5436  1195  1D44               	btfss	(_myMain^(0+128)+15),2
  5437  1196  298C               	goto	l2362
  5438  1197                     l6715:	
  5439                           
  5440                           ;Switch_B1.c: 14: }
  5441                           ;Switch_B1.c: 15: set_TimeoutCleared();
  5442  1197  3190  206D         	fcall	_set_TimeoutCleared
  5443  1199  0008               	return
  5444  119A                     __end_of_TouchPower:	
  5445                           
  5446                           	psect	text16
  5447  1066                     __ptext16:	
  5448 ;; *************** function _RF_Main *****************
  5449 ;; Defined at:
  5450 ;;		line 16 in file "../src/RF_Control_B1.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;		None
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;		None
  5455 ;; Return value:  Size  Location     Type
  5456 ;;		None               void
  5457 ;; Registers used:
  5458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5468 ;;Total ram usage:        0 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:   14
  5471 ;; This function calls:
  5472 ;;		_setRF_Main
  5473 ;; This function is called by:
  5474 ;;		_main
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           
  5479                           ;psect for function _RF_Main
  5480  1066                     _RF_Main:	
  5481                           
  5482                           ;RF_Control_B1.c: 18: setRF_Main();
  5483                           
  5484                           ;incstack = 0
  5485                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5486  1066  318B  235E         	fcall	_setRF_Main
  5487  1068  0008               	return
  5488  1069                     __end_of_RF_Main:	
  5489                           
  5490                           	psect	text17
  5491  0B5E                     __ptext17:	
  5492 ;; *************** function _setRF_Main *****************
  5493 ;; Defined at:
  5494 ;;		line 51 in file "../src/RF_Control_B1.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;		None
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;  Receive_OK      1    0        unsigned char 
  5499 ;;  loop_f          1    0        unsigned char 
  5500 ;; Return value:  Size  Location     Type
  5501 ;;		None               void
  5502 ;; Registers used:
  5503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;Total ram usage:        2 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:   13
  5516 ;; This function calls:
  5517 ;;		_CC2500_RxData
  5518 ;;		_CC2500_TxData
  5519 ;;		_CC2500_WriteCommand
  5520 ;;		_RF_RxDisable
  5521 ;;		_getBuz_GO
  5522 ;;		_getRxData
  5523 ;; This function is called by:
  5524 ;;		_RF_Main
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           
  5529                           ;psect for function _setRF_Main
  5530  0B5E                     _setRF_Main:	
  5531                           
  5532                           ;RF_Control_B1.c: 52: char loop_f, Receive_OK;
  5533                           ;RF_Control_B1.c: 53: if (RF1.Enable == 1) {
  5534                           
  5535                           ;incstack = 0
  5536                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5537  0B5E  0021               	movlb	1	; select bank1
  5538  0B5F  1C53               	btfss	_RF1^(0+128),0
  5539  0B60  0008               	return
  5540                           
  5541                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  5542  0B61  3191  21FA  318B   	fcall	_getBuz_GO
  5543  0B64  0020               	movlb	0	; select bank0
  5544  0B65  0821               	movf	?_getBuz_GO+1,w
  5545  0B66  0420               	iorwf	?_getBuz_GO,w
  5546  0B67  1D03               	skipz
  5547  0B68  0008               	return
  5548                           
  5549                           ;RF_Control_B1.c: 62: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5550  0B69  01E8               	clrf	_setRF_Main$4073
  5551  0B6A  0AE8               	incf	_setRF_Main$4073,f
  5552  0B6B  1F0C               	btfss	12,6	;volatile
  5553  0B6C  1A0C               	btfsc	12,4	;volatile
  5554  0B6D  2B72               	goto	l7429
  5555  0B6E  1C0C               	btfss	12,0	;volatile
  5556  0B6F  188D               	btfsc	13,1	;volatile
  5557  0B70  2B72               	goto	l7429
  5558  0B71  01E8               	clrf	_setRF_Main$4073
  5559  0B72                     l7429:	
  5560  0B72  0868               	movf	_setRF_Main$4073,w
  5561  0B73  0021               	movlb	1	; select bank1
  5562  0B74  13D3               	bcf	_RF1^(0+128),7
  5563  0B75  1D03               	skipz
  5564  0B76  17D3               	bsf	_RF1^(0+128),7
  5565                           
  5566                           ;RF_Control_B1.c: 68: if (RF1.Key == 1 && RF1.Learn == 0) {
  5567  0B77  1BD3               	btfsc	_RF1^(0+128),7
  5568  0B78  1B53               	btfsc	_RF1^(0+128),6
  5569  0B79  2B7E               	goto	l1972
  5570                           
  5571                           ;RF_Control_B1.c: 69: RF1.Run = 1;
  5572  0B7A  14D4               	bsf	(_RF1^(0+128)+1),1
  5573                           
  5574                           ;RF_Control_B1.c: 70: RF_RxDisable();
  5575  0B7B  3191  217C         	fcall	_RF_RxDisable
  5576                           
  5577                           ;RF_Control_B1.c: 71: } else {
  5578  0B7D  0008               	return
  5579  0B7E                     l1972:	
  5580                           
  5581                           ;RF_Control_B1.c: 72: if (RF1.Run == 1 && RF1.Learn == 0) {
  5582  0B7E  18D4               	btfsc	(_RF1^(0+128)+1),1
  5583  0B7F  1B53               	btfsc	_RF1^(0+128),6
  5584  0B80  2B8E               	goto	l7449
  5585                           
  5586                           ;RF_Control_B1.c: 73: RF1.Count++;
  5587  0B81  3001               	movlw	1
  5588  0B82  0020               	movlb	0	; select bank0
  5589  0B83  00E7               	movwf	??_setRF_Main
  5590  0B84  0867               	movf	??_setRF_Main,w
  5591  0B85  0021               	movlb	1	; select bank1
  5592  0B86  07D6               	addwf	(_RF1^(0+128)+3),f
  5593                           
  5594                           ;RF_Control_B1.c: 74: if (RF1.Count == 10) {
  5595  0B87  0856               	movf	(_RF1^(0+128)+3),w
  5596  0B88  3A0A               	xorlw	10
  5597  0B89  1D03               	skipz
  5598  0B8A  0008               	return
  5599                           
  5600                           ;RF_Control_B1.c: 75: RF1.Count = 0;
  5601  0B8B  01D6               	clrf	(_RF1^(0+128)+3)
  5602                           
  5603                           ;RF_Control_B1.c: 76: RF1.Run = 0;
  5604  0B8C  10D4               	bcf	(_RF1^(0+128)+1),1
  5605                           
  5606                           ;RF_Control_B1.c: 77: }
  5607                           ;RF_Control_B1.c: 78: } else {
  5608  0B8D  0008               	return
  5609  0B8E                     l7449:	
  5610                           
  5611                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  5612  0B8E  01D6               	clrf	(_RF1^(0+128)+3)
  5613                           
  5614                           ;RF_Control_B1.c: 80: RF1.Run = 0;
  5615  0B8F  10D4               	bcf	(_RF1^(0+128)+1),1
  5616                           
  5617                           ;RF_Control_B1.c: 82: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  5618  0B90  1953               	btfsc	_RF1^(0+128),2
  5619  0B91  1B53               	btfsc	_RF1^(0+128),6
  5620  0B92  2BA3               	goto	l1977
  5621                           
  5622                           ;RF_Control_B1.c: 83: RF1.TransceiveGO = 0;
  5623  0B93  1153               	bcf	_RF1^(0+128),2
  5624                           
  5625                           ;RF_Control_B1.c: 84: RF1.RxStatus = 0;
  5626  0B94  11D3               	bcf	_RF1^(0+128),3
  5627                           
  5628                           ;RF_Control_B1.c: 85: RF1.ReceiveGO = 0;
  5629  0B95  10D3               	bcf	_RF1^(0+128),1
  5630                           
  5631                           ;RF_Control_B1.c: 87: CC2500_WriteCommand(0x36);
  5632  0B96  3036               	movlw	54
  5633  0B97  3193  233F  318B   	fcall	_CC2500_WriteCommand
  5634                           
  5635                           ;RF_Control_B1.c: 88: CC2500_WriteCommand(0x3B);
  5636  0B9A  303B               	movlw	59
  5637  0B9B  3193  233F  318B   	fcall	_CC2500_WriteCommand
  5638                           
  5639                           ;RF_Control_B1.c: 89: CC2500_TxData();
  5640  0B9E  3189  21D6         	fcall	_CC2500_TxData
  5641                           
  5642                           ;RF_Control_B1.c: 90: RF1.Run = 1;
  5643  0BA0  0021               	movlb	1	; select bank1
  5644  0BA1  14D4               	bsf	(_RF1^(0+128)+1),1
  5645                           
  5646                           ;RF_Control_B1.c: 91: } else {
  5647  0BA2  0008               	return
  5648  0BA3                     l1977:	
  5649                           
  5650                           ;RF_Control_B1.c: 93: if (RF1.RxStatus == 1) {
  5651  0BA3  1DD3               	btfss	_RF1^(0+128),3
  5652  0BA4  2BB4               	goto	l1979
  5653                           
  5654                           ;RF_Control_B1.c: 94: CC2500_RxData();
  5655  0BA5  318D  2510  318B   	fcall	_CC2500_RxData
  5656                           
  5657                           ;RF_Control_B1.c: 95: if (RF1.ReceiveGO == 1) {
  5658  0BA8  0021               	movlb	1	; select bank1
  5659  0BA9  1CD3               	btfss	_RF1^(0+128),1
  5660  0BAA  0008               	return
  5661                           
  5662                           ;RF_Control_B1.c: 96: RF1.ReceiveGO = 0;
  5663  0BAB  10D3               	bcf	_RF1^(0+128),1
  5664                           
  5665                           ;RF_Control_B1.c: 103: getRxData();
  5666  0BAC  3188  203B         	fcall	_getRxData
  5667                           
  5668                           ;RF_Control_B1.c: 105: RF1.Run = 1;
  5669  0BAE  0021               	movlb	1	; select bank1
  5670  0BAF  14D4               	bsf	(_RF1^(0+128)+1),1
  5671                           
  5672                           ;RF_Control_B1.c: 106: RB5 = RB5 == 1 ? 0 : 1;
  5673  0BB0  3020               	movlw	32
  5674  0BB1  0020               	movlb	0	; select bank0
  5675  0BB2  068D               	xorwf	13,f
  5676                           
  5677                           ;RF_Control_B1.c: 107: }
  5678                           ;RF_Control_B1.c: 108: } else {
  5679  0BB3  0008               	return
  5680  0BB4                     l1979:	
  5681                           
  5682                           ;RF_Control_B1.c: 110: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  5683  0BB4  19D3               	btfsc	_RF1^(0+128),3
  5684  0BB5  0008               	return
  5685  0BB6  18D3               	btfsc	_RF1^(0+128),1
  5686  0BB7  0008               	return
  5687                           
  5688                           ;RF_Control_B1.c: 111: RF1.RxStatus = 1;
  5689  0BB8  15D3               	bsf	_RF1^(0+128),3
  5690                           
  5691                           ;RF_Control_B1.c: 112: CC2500_WriteCommand(0x36);
  5692  0BB9  3036               	movlw	54
  5693  0BBA  3193  233F  318B   	fcall	_CC2500_WriteCommand
  5694                           
  5695                           ;RF_Control_B1.c: 113: CC2500_WriteCommand(0x3A);
  5696  0BBD  303A               	movlw	58
  5697  0BBE  3193  233F  318B   	fcall	_CC2500_WriteCommand
  5698                           
  5699                           ;RF_Control_B1.c: 114: CC2500_WriteCommand(0x34);
  5700  0BC1  3034               	movlw	52
  5701  0BC2  3193  233F         	fcall	_CC2500_WriteCommand
  5702  0BC4  0008               	return
  5703  0BC5                     __end_of_setRF_Main:	
  5704                           
  5705                           	psect	text18
  5706  083B                     __ptext18:	
  5707 ;; *************** function _getRxData *****************
  5708 ;; Defined at:
  5709 ;;		line 199 in file "../src/RF_Control_B1.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;		None
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;		None
  5714 ;; Return value:  Size  Location     Type
  5715 ;;		None               void
  5716 ;; Registers used:
  5717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5727 ;;Total ram usage:        0 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:   12
  5730 ;; This function calls:
  5731 ;;		_setControl_Lights_Table
  5732 ;;		_setLog_Code
  5733 ;; This function is called by:
  5734 ;;		_setRF_Main
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           
  5739                           ;psect for function _getRxData
  5740  083B                     _getRxData:	
  5741                           
  5742                           ;RF_Control_B1.c: 200: if (RF1.Learn == 1) {
  5743                           
  5744                           ;incstack = 0
  5745                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5746  083B  0021               	movlb	1	; select bank1
  5747  083C  1F53               	btfss	_RF1^(0+128),6
  5748  083D  2848               	goto	l7323
  5749                           
  5750                           ;RF_Control_B1.c: 201: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  5751  083E  08A0               	movf	_RF_Data^(0+128),f
  5752  083F  1D03               	skipz
  5753  0840  0008               	return
  5754  0841  0821               	movf	(_RF_Data^(0+128)+1),w
  5755  0842  3A64               	xorlw	100
  5756  0843  1D03               	skipz
  5757  0844  0008               	return
  5758                           
  5759                           ;RF_Control_B1.c: 202: {
  5760                           ;RF_Control_B1.c: 203: setLog_Code();
  5761  0845  3195  25CB         	fcall	_setLog_Code
  5762                           
  5763                           ;RF_Control_B1.c: 204: }
  5764                           ;RF_Control_B1.c: 205: } else {
  5765  0847  0008               	return
  5766  0848                     l7323:	
  5767                           
  5768                           ;RF_Control_B1.c: 206: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  5769  0848  0021               	movlb	1	; select bank1
  5770  0849  08A0               	movf	_RF_Data^(0+128),f
  5771  084A  1D03               	skipz
  5772  084B  0008               	return
  5773  084C  0821               	movf	(_RF_Data^(0+128)+1),w
  5774  084D  3A02               	xorlw	2
  5775  084E  1D03               	skipz
  5776  084F  0008               	return
  5777                           
  5778                           ;RF_Control_B1.c: 207: {
  5779                           ;RF_Control_B1.c: 208: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  5780  0850  082C               	movf	(_RF_Data^(0+128)+12),w
  5781  0851  3AFF               	xorlw	255
  5782  0852  1D03               	skipz
  5783  0853  285E               	goto	l7335
  5784  0854  082D               	movf	(_RF_Data^(0+128)+13),w
  5785  0855  3AFF               	xorlw	255
  5786  0856  1D03               	skipz
  5787  0857  285E               	goto	l7335
  5788  0858  082E               	movf	(_RF_Data^(0+128)+14),w
  5789  0859  3AFF               	xorlw	255
  5790  085A  1D03               	skipz
  5791  085B  285E               	goto	l7335
  5792                           
  5793                           ;RF_Control_B1.c: 209: __nop();
  5794  085C  0000               	nop
  5795                           
  5796                           ;RF_Control_B1.c: 210: } else {
  5797  085D  0008               	return
  5798  085E                     l7335:	
  5799                           
  5800                           ;RF_Control_B1.c: 211: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  5801  085E  0020               	movlb	0	; select bank0
  5802  085F  086E               	movf	_product,w
  5803  0860  3E0C               	addlw	12
  5804  0861  0086               	movwf	6
  5805  0862  3001               	movlw	1	; select bank2/3
  5806  0863  0087               	movwf	7
  5807  0864  0021               	movlb	1	; select bank1
  5808  0865  082C               	movf	(_RF_Data^(0+128)+12),w
  5809  0866  0601               	xorwf	1,w
  5810  0867  1D03               	skipz
  5811  0868  0008               	return
  5812  0869  0020               	movlb	0	; select bank0
  5813  086A  086E               	movf	_product,w
  5814  086B  3E0D               	addlw	13
  5815  086C  0086               	movwf	6
  5816  086D  3001               	movlw	1	; select bank2/3
  5817  086E  0087               	movwf	7
  5818  086F  0021               	movlb	1	; select bank1
  5819  0870  082D               	movf	(_RF_Data^(0+128)+13),w
  5820  0871  0601               	xorwf	1,w
  5821  0872  1D03               	skipz
  5822  0873  0008               	return
  5823  0874  0020               	movlb	0	; select bank0
  5824  0875  086E               	movf	_product,w
  5825  0876  3E0E               	addlw	14
  5826  0877  0086               	movwf	6
  5827  0878  3001               	movlw	1	; select bank2/3
  5828  0879  0087               	movwf	7
  5829  087A  0021               	movlb	1	; select bank1
  5830  087B  082E               	movf	(_RF_Data^(0+128)+14),w
  5831  087C  0601               	xorwf	1,w
  5832  087D  1D03               	skipz
  5833  087E  0008               	return
  5834                           
  5835                           ;RF_Control_B1.c: 212: setControl_Lights_Table();
  5836  087F  318F  2775         	fcall	_setControl_Lights_Table
  5837                           
  5838                           ;RF_Control_B1.c: 219: {
  5839                           ;RF_Control_B1.c: 220: ;
  5840                           
  5841                           ;RF_Control_B1.c: 216: {
  5842                           ;RF_Control_B1.c: 217: ;
  5843                           ;RF_Control_B1.c: 218: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  5844                           
  5845                           ;RF_Control_B1.c: 213: }
  5846                           ;RF_Control_B1.c: 214: }
  5847                           ;RF_Control_B1.c: 215: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  5848  0881  0008               	return
  5849  0882                     __end_of_getRxData:	
  5850                           
  5851                           	psect	text19
  5852  15CB                     __ptext19:	
  5853 ;; *************** function _setLog_Code *****************
  5854 ;; Defined at:
  5855 ;;		line 230 in file "../src/RF_Control_B1.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;		None
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;		None
  5860 ;; Return value:  Size  Location     Type
  5861 ;;		None               void
  5862 ;; Registers used:
  5863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5864 ;; Tracked objects:
  5865 ;;		On entry : 0/0
  5866 ;;		On exit  : 0/0
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;Total ram usage:        1 bytes
  5874 ;; Hardware stack levels used:    1
  5875 ;; Hardware stack levels required when called:    7
  5876 ;; This function calls:
  5877 ;;		_setBuz
  5878 ;; This function is called by:
  5879 ;;		_getRxData
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           
  5884                           ;psect for function _setLog_Code
  5885  15CB                     _setLog_Code:	
  5886                           
  5887                           ;RF_Control_B1.c: 231: product->Data[12]=RF_Data[12];
  5888                           
  5889                           ;incstack = 0
  5890                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5891  15CB  0021               	movlb	1	; select bank1
  5892  15CC  082C               	movf	(_RF_Data^(0+128)+12),w
  5893  15CD  0020               	movlb	0	; select bank0
  5894  15CE  00AD               	movwf	??_setLog_Code
  5895  15CF  086E               	movf	_product,w
  5896  15D0  3E0C               	addlw	12
  5897  15D1  0086               	movwf	6
  5898  15D2  3001               	movlw	1	; select bank2/3
  5899  15D3  0087               	movwf	7
  5900  15D4  082D               	movf	??_setLog_Code,w
  5901  15D5  0081               	movwf	1
  5902                           
  5903                           ;RF_Control_B1.c: 232: product->Data[13]=RF_Data[13];
  5904  15D6  0021               	movlb	1	; select bank1
  5905  15D7  082D               	movf	(_RF_Data^(0+128)+13),w
  5906  15D8  0020               	movlb	0	; select bank0
  5907  15D9  00AD               	movwf	??_setLog_Code
  5908  15DA  086E               	movf	_product,w
  5909  15DB  3E0D               	addlw	13
  5910  15DC  0086               	movwf	6
  5911  15DD  3001               	movlw	1	; select bank2/3
  5912  15DE  0087               	movwf	7
  5913  15DF  082D               	movf	??_setLog_Code,w
  5914  15E0  0081               	movwf	1
  5915                           
  5916                           ;RF_Control_B1.c: 233: product->Data[14]=RF_Data[14];
  5917  15E1  0021               	movlb	1	; select bank1
  5918  15E2  082E               	movf	(_RF_Data^(0+128)+14),w
  5919  15E3  0020               	movlb	0	; select bank0
  5920  15E4  00AD               	movwf	??_setLog_Code
  5921  15E5  086E               	movf	_product,w
  5922  15E6  3E0E               	addlw	14
  5923  15E7  0086               	movwf	6
  5924  15E8  3001               	movlw	1	; select bank2/3
  5925  15E9  0087               	movwf	7
  5926  15EA  082D               	movf	??_setLog_Code,w
  5927  15EB  0081               	movwf	1
  5928                           
  5929                           ;RF_Control_B1.c: 234: setBuz(1, 100);
  5930  15EC  3064               	movlw	100
  5931  15ED  00A9               	movwf	setBuz@time
  5932  15EE  3000               	movlw	0
  5933  15EF  00AA               	movwf	setBuz@time+1
  5934  15F0  3001               	movlw	1
  5935  15F1  3189  2122  3195   	fcall	_setBuz
  5936                           
  5937                           ;RF_Control_B1.c: 235: RF1.Learn = 0;
  5938  15F4  0021               	movlb	1	; select bank1
  5939  15F5  1353               	bcf	_RF1^(0+128),6
  5940                           
  5941                           ;RF_Control_B1.c: 236: if (myMain.First) {
  5942  15F6  1FB5               	btfss	_myMain^(0+128),7
  5943  15F7  2DFA               	goto	l2013
  5944                           
  5945                           ;RF_Control_B1.c: 237: Memory.LoopSave=1;
  5946  15F8  0023               	movlb	3	; select bank3
  5947  15F9  1544               	bsf	(_Memory^(0+384)+36),2
  5948  15FA                     l2013:	
  5949                           
  5950                           ;RF_Control_B1.c: 238: }
  5951                           ;RF_Control_B1.c: 239: Memory.Modify=1;
  5952  15FA  0023               	movlb	3	; select bank3
  5953  15FB  1444               	bsf	(_Memory^(0+384)+36),0
  5954  15FC  0008               	return
  5955  15FD                     __end_of_setLog_Code:	
  5956                           
  5957                           	psect	text20
  5958  0F75                     __ptext20:	
  5959 ;; *************** function _setControl_Lights_Table *****************
  5960 ;; Defined at:
  5961 ;;		line 243 in file "../src/RF_Control_B1.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;		None
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;		None
  5966 ;; Return value:  Size  Location     Type
  5967 ;;		None               void
  5968 ;; Registers used:
  5969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5970 ;; Tracked objects:
  5971 ;;		On entry : 0/0
  5972 ;;		On exit  : 0/0
  5973 ;;		Unchanged: 0/0
  5974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;Total ram usage:        0 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:   11
  5982 ;; This function calls:
  5983 ;;		_setBuz
  5984 ;;		_setDimmerLights
  5985 ;;		_setRFSW_AdjControl
  5986 ;;		_setRFSW_Control
  5987 ;;		_setRFSW_Status
  5988 ;;		_setSw_Status
  5989 ;;		_setTxData
  5990 ;; This function is called by:
  5991 ;;		_getRxData
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           
  5996                           ;psect for function _setControl_Lights_Table
  5997  0F75                     _setControl_Lights_Table:	
  5998                           
  5999                           ;RF_Control_B1.c: 244: if (RF_Data[15] == 0x00) {
  6000                           
  6001                           ;incstack = 0
  6002                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6003  0F75  0021               	movlb	1	; select bank1
  6004  0F76  08AF               	movf	(_RF_Data^(0+128)+15),f
  6005  0F77  1D03               	skipz
  6006  0F78  2FC1               	goto	l7293
  6007                           
  6008                           ;RF_Control_B1.c: 246: setDimmerLights(1, 0);
  6009  0F79  0020               	movlb	0	; select bank0
  6010  0F7A  01A4               	clrf	setDimmerLights@status
  6011  0F7B  3001               	movlw	1
  6012  0F7C  318E  266E  318F   	fcall	_setDimmerLights
  6013                           
  6014                           ;RF_Control_B1.c: 247: setRFSW_Status(1, 0);
  6015  0F7F  0020               	movlb	0	; select bank0
  6016  0F80  01A2               	clrf	setRFSW_Status@command
  6017  0F81  3001               	movlw	1
  6018  0F82  3191  214F  318F   	fcall	_setRFSW_Status
  6019                           
  6020                           ;RF_Control_B1.c: 248: setSw_Status(1, 0);
  6021  0F85  0020               	movlb	0	; select bank0
  6022  0F86  01A2               	clrf	setSw_Status@command
  6023  0F87  3001               	movlw	1
  6024  0F88  3191  215E  318F   	fcall	_setSw_Status
  6025                           
  6026                           ;RF_Control_B1.c: 251: setDimmerLights(2, 0);
  6027  0F8B  0020               	movlb	0	; select bank0
  6028  0F8C  01A4               	clrf	setDimmerLights@status
  6029  0F8D  3002               	movlw	2
  6030  0F8E  318E  266E  318F   	fcall	_setDimmerLights
  6031                           
  6032                           ;RF_Control_B1.c: 252: setRFSW_Status(2, 0);
  6033  0F91  0020               	movlb	0	; select bank0
  6034  0F92  01A2               	clrf	setRFSW_Status@command
  6035  0F93  3002               	movlw	2
  6036  0F94  3191  214F  318F   	fcall	_setRFSW_Status
  6037                           
  6038                           ;RF_Control_B1.c: 253: setSw_Status(2, 0);
  6039  0F97  0020               	movlb	0	; select bank0
  6040  0F98  01A2               	clrf	setSw_Status@command
  6041  0F99  3002               	movlw	2
  6042  0F9A  3191  215E  318F   	fcall	_setSw_Status
  6043                           
  6044                           ;RF_Control_B1.c: 261: product->Data[9]=0;
  6045  0F9D  0020               	movlb	0	; select bank0
  6046  0F9E  086E               	movf	_product,w
  6047  0F9F  3E09               	addlw	9
  6048  0FA0  0086               	movwf	6
  6049  0FA1  3001               	movlw	1	; select bank2/3
  6050  0FA2  0087               	movwf	7
  6051  0FA3  0181               	clrf	1
  6052                           
  6053                           ;RF_Control_B1.c: 262: product->Data[11]=0;
  6054  0FA4  086E               	movf	_product,w
  6055  0FA5  3E0B               	addlw	11
  6056  0FA6  0086               	movwf	6
  6057  0FA7  3001               	movlw	1	; select bank2/3
  6058  0FA8  0087               	movwf	7
  6059  0FA9  0181               	clrf	1
  6060                           
  6061                           ;RF_Control_B1.c: 263: product->Data[15]=0;
  6062  0FAA  086E               	movf	_product,w
  6063  0FAB  3E0F               	addlw	15
  6064  0FAC  0086               	movwf	6
  6065  0FAD  3001               	movlw	1	; select bank2/3
  6066  0FAE  0087               	movwf	7
  6067  0FAF  0181               	clrf	1
  6068                           
  6069                           ;RF_Control_B1.c: 264: product->Data[17]=0;
  6070  0FB0  086E               	movf	_product,w
  6071  0FB1  3E11               	addlw	17
  6072  0FB2  0086               	movwf	6
  6073  0FB3  3001               	movlw	1	; select bank2/3
  6074  0FB4  0087               	movwf	7
  6075  0FB5  0181               	clrf	1
  6076                           
  6077                           ;RF_Control_B1.c: 265: setBuz(1, 100);
  6078  0FB6  3064               	movlw	100
  6079  0FB7  00A9               	movwf	setBuz@time
  6080  0FB8  3000               	movlw	0
  6081  0FB9  00AA               	movwf	setBuz@time+1
  6082  0FBA  3001               	movlw	1
  6083  0FBB  3189  2122  318F   	fcall	_setBuz
  6084                           
  6085                           ;RF_Control_B1.c: 266: setTxData();
  6086  0FBE  3185  2510         	fcall	_setTxData
  6087                           
  6088                           ;RF_Control_B1.c: 267: } else if (RF_Data[15] == 0x20) {
  6089  0FC0  0008               	return
  6090  0FC1                     l7293:	
  6091  0FC1  0021               	movlb	1	; select bank1
  6092  0FC2  082F               	movf	(_RF_Data^(0+128)+15),w
  6093  0FC3  3A20               	xorlw	32
  6094  0FC4  1D03               	skipz
  6095  0FC5  2FDC               	goto	l7299
  6096                           
  6097                           ;RF_Control_B1.c: 268: product->Data[9]=0;
  6098  0FC6  0020               	movlb	0	; select bank0
  6099  0FC7  086E               	movf	_product,w
  6100  0FC8  3E09               	addlw	9
  6101  0FC9  0086               	movwf	6
  6102  0FCA  3001               	movlw	1	; select bank2/3
  6103  0FCB  0087               	movwf	7
  6104  0FCC  0181               	clrf	1
  6105                           
  6106                           ;RF_Control_B1.c: 269: product->Data[11]=0;
  6107  0FCD  086E               	movf	_product,w
  6108  0FCE  3E0B               	addlw	11
  6109  0FCF  0086               	movwf	6
  6110  0FD0  3001               	movlw	1	; select bank2/3
  6111  0FD1  0087               	movwf	7
  6112  0FD2  0181               	clrf	1
  6113                           
  6114                           ;RF_Control_B1.c: 270: product->Data[17]=0;
  6115  0FD3  086E               	movf	_product,w
  6116  0FD4  3E11               	addlw	17
  6117  0FD5  0086               	movwf	6
  6118  0FD6  3001               	movlw	1	; select bank2/3
  6119  0FD7  0087               	movwf	7
  6120  0FD8  0181               	clrf	1
  6121                           
  6122                           ;RF_Control_B1.c: 271: setTxData();
  6123  0FD9  3185  2510         	fcall	_setTxData
  6124                           
  6125                           ;RF_Control_B1.c: 272: }
  6126  0FDB  0008               	return
  6127  0FDC                     l7299:	
  6128                           
  6129                           ;RF_Control_B1.c: 274: else if (RF_Data[15] == 0x01) {
  6130  0FDC  0021               	movlb	1	; select bank1
  6131  0FDD  082F               	movf	(_RF_Data^(0+128)+15),w
  6132  0FDE  3A01               	xorlw	1
  6133  0FDF  1D03               	skipz
  6134  0FE0  2FE5               	goto	l7303
  6135                           
  6136                           ;RF_Control_B1.c: 275: setRFSW_Control(1);
  6137  0FE1  3001               	movlw	1
  6138  0FE2  3187  2726         	fcall	_setRFSW_Control
  6139                           
  6140                           ;RF_Control_B1.c: 276: }
  6141  0FE4  0008               	return
  6142  0FE5                     l7303:	
  6143                           
  6144                           ;RF_Control_B1.c: 278: else if (RF_Data[15] == 0x11) {
  6145  0FE5  0021               	movlb	1	; select bank1
  6146  0FE6  082F               	movf	(_RF_Data^(0+128)+15),w
  6147  0FE7  3A11               	xorlw	17
  6148  0FE8  1D03               	skipz
  6149  0FE9  2FEE               	goto	l7307
  6150                           
  6151                           ;RF_Control_B1.c: 279: setRFSW_AdjControl(1);
  6152  0FEA  3001               	movlw	1
  6153  0FEB  3188  2000         	fcall	_setRFSW_AdjControl
  6154                           
  6155                           ;RF_Control_B1.c: 280: }
  6156  0FED  0008               	return
  6157  0FEE                     l7307:	
  6158                           
  6159                           ;RF_Control_B1.c: 285: else if (RF_Data[15] == 0x02) {
  6160  0FEE  0021               	movlb	1	; select bank1
  6161  0FEF  082F               	movf	(_RF_Data^(0+128)+15),w
  6162  0FF0  3A02               	xorlw	2
  6163  0FF1  1D03               	skipz
  6164  0FF2  2FF7               	goto	l7311
  6165                           
  6166                           ;RF_Control_B1.c: 286: setRFSW_Control(2);
  6167  0FF3  3002               	movlw	2
  6168  0FF4  3187  2726         	fcall	_setRFSW_Control
  6169                           
  6170                           ;RF_Control_B1.c: 287: }
  6171  0FF6  0008               	return
  6172  0FF7                     l7311:	
  6173                           
  6174                           ;RF_Control_B1.c: 289: else if (RF_Data[15] == 0x21) {
  6175  0FF7  0021               	movlb	1	; select bank1
  6176  0FF8  082F               	movf	(_RF_Data^(0+128)+15),w
  6177  0FF9  3A21               	xorlw	33
  6178  0FFA  1D03               	skipz
  6179  0FFB  0008               	return
  6180                           
  6181                           ;RF_Control_B1.c: 290: setRFSW_AdjControl(2);
  6182  0FFC  3002               	movlw	2
  6183  0FFD  3188  2000         	fcall	_setRFSW_AdjControl
  6184  0FFF  0008               	return
  6185  1000                     __end_of_setControl_Lights_Table:	
  6186                           
  6187                           	psect	text21
  6188  0726                     __ptext21:	
  6189 ;; *************** function _setRFSW_Control *****************
  6190 ;; Defined at:
  6191 ;;		line 331 in file "../src/RF_Control_B1.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;  sw              1    wreg     unsigned char 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;  sw              1   67[BANK0 ] unsigned char 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;		None               void
  6198 ;; Registers used:
  6199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;Total ram usage:        2 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    9
  6212 ;; This function calls:
  6213 ;;		_RfSWPointSelect
  6214 ;;		_setBuz
  6215 ;;		_setDelayOff_GO
  6216 ;;		_setDimmerLights_Switch
  6217 ;;		_setDimmerLights_Trigger
  6218 ;;		_setRF_DimmerLights
  6219 ;;		_setSw_Status
  6220 ;;		_setTxData
  6221 ;; This function is called by:
  6222 ;;		_setControl_Lights_Table
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           
  6227                           ;psect for function _setRFSW_Control
  6228  0726                     _setRFSW_Control:	
  6229                           
  6230                           ;incstack = 0
  6231                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6232                           ;setRFSW_Control@sw stored from wreg
  6233  0726  0020               	movlb	0	; select bank0
  6234  0727  00E3               	movwf	setRFSW_Control@sw
  6235                           
  6236                           ;RF_Control_B1.c: 332: RfSWPointSelect(sw);
  6237  0728  0863               	movf	setRFSW_Control@sw,w
  6238  0729  3192  22CD  3187   	fcall	_RfSWPointSelect
  6239                           
  6240                           ;RF_Control_B1.c: 333: if (RFSW->Status == 0) {
  6241  072C  0021               	movlb	1	; select bank1
  6242  072D  0860               	movf	_RFSW^(0+128),w
  6243  072E  0086               	movwf	6
  6244  072F  0187               	clrf	7
  6245  0730  1801               	btfsc	1,0
  6246  0731  2F67               	goto	l5731
  6247                           
  6248                           ;RF_Control_B1.c: 334: if (RF_Data[16] == 0x80) {
  6249  0732  0830               	movf	(_RF_Data^(0+128)+16),w
  6250  0733  3A80               	xorlw	128
  6251  0734  1D03               	skipz
  6252  0735  2F43               	goto	l5721
  6253                           
  6254                           ;RF_Control_B1.c: 335: setDelayOff_GO(sw, 1, RF_Data[17]);
  6255  0736  0020               	movlb	0	; select bank0
  6256  0737  01AA               	clrf	setDelayOff_GO@command
  6257  0738  0AAA               	incf	setDelayOff_GO@command,f
  6258  0739  0021               	movlb	1	; select bank1
  6259  073A  0831               	movf	(_RF_Data^(0+128)+17),w
  6260  073B  0020               	movlb	0	; select bank0
  6261  073C  00E2               	movwf	??_setRFSW_Control
  6262  073D  0862               	movf	??_setRFSW_Control,w
  6263  073E  00AB               	movwf	setDelayOff_GO@value
  6264  073F  0863               	movf	setRFSW_Control@sw,w
  6265  0740  318A  22F8  3187   	fcall	_setDelayOff_GO
  6266  0743                     l5721:	
  6267                           
  6268                           ;RF_Control_B1.c: 336: }
  6269                           ;RF_Control_B1.c: 337: RFSW->Status = 1;
  6270  0743  0021               	movlb	1	; select bank1
  6271  0744  0860               	movf	_RFSW^(0+128),w
  6272  0745  0086               	movwf	6
  6273  0746  0187               	clrf	7
  6274  0747  1401               	bsf	1,0
  6275                           
  6276                           ;RF_Control_B1.c: 338: setSw_Status(sw, 1);
  6277  0748  0020               	movlb	0	; select bank0
  6278  0749  01A2               	clrf	setSw_Status@command
  6279  074A  0AA2               	incf	setSw_Status@command,f
  6280  074B  0863               	movf	setRFSW_Control@sw,w
  6281  074C  3191  215E  3187   	fcall	_setSw_Status
  6282                           
  6283                           ;RF_Control_B1.c: 340: setDimmerLights_Trigger(sw, 1);
  6284  074F  0020               	movlb	0	; select bank0
  6285  0750  01A2               	clrf	setDimmerLights_Trigger@command
  6286  0751  0AA2               	incf	setDimmerLights_Trigger@command,f
  6287  0752  0863               	movf	setRFSW_Control@sw,w
  6288  0753  3191  21B9  3187   	fcall	_setDimmerLights_Trigger
  6289                           
  6290                           ;RF_Control_B1.c: 341: setDimmerLights_Switch(sw, 1);
  6291  0756  0020               	movlb	0	; select bank0
  6292  0757  01A2               	clrf	setDimmerLights_Switch@command
  6293  0758  0AA2               	incf	setDimmerLights_Switch@command,f
  6294  0759  0863               	movf	setRFSW_Control@sw,w
  6295  075A  3191  21A9  3187   	fcall	_setDimmerLights_Switch
  6296                           
  6297                           ;RF_Control_B1.c: 343: setRF_DimmerLights(sw, RFSW->Status);
  6298  075D  0021               	movlb	1	; select bank1
  6299  075E  0860               	movf	_RFSW^(0+128),w
  6300  075F  0086               	movwf	6
  6301  0760  0187               	clrf	7
  6302  0761  3000               	movlw	0
  6303  0762  1801               	btfsc	1,0
  6304  0763  3001               	movlw	1
  6305  0764  0020               	movlb	0	; select bank0
  6306  0765  00DD               	movwf	setRF_DimmerLights@on
  6307  0766  2FA5               	goto	L2
  6308  0767                     l5731:	
  6309                           ;RF_Control_B1.c: 344: } else {
  6310                           
  6311                           
  6312                           ;RF_Control_B1.c: 345: if (RF_Data[16] == 0x80) {
  6313  0767  0021               	movlb	1	; select bank1
  6314  0768  0830               	movf	(_RF_Data^(0+128)+16),w
  6315  0769  3A80               	xorlw	128
  6316  076A  1D03               	skipz
  6317  076B  2F7D               	goto	l5735
  6318                           
  6319                           ;RF_Control_B1.c: 346: setDelayOff_GO(sw, 1, RF_Data[17]);
  6320  076C  0020               	movlb	0	; select bank0
  6321  076D  01AA               	clrf	setDelayOff_GO@command
  6322  076E  0AAA               	incf	setDelayOff_GO@command,f
  6323  076F  0021               	movlb	1	; select bank1
  6324  0770  0831               	movf	(_RF_Data^(0+128)+17),w
  6325  0771  0020               	movlb	0	; select bank0
  6326  0772  00E2               	movwf	??_setRFSW_Control
  6327  0773  0862               	movf	??_setRFSW_Control,w
  6328  0774  00AB               	movwf	setDelayOff_GO@value
  6329  0775  0863               	movf	setRFSW_Control@sw,w
  6330  0776  318A  22F8  3187   	fcall	_setDelayOff_GO
  6331                           
  6332                           ;RF_Control_B1.c: 347: setRF_DimmerLights(sw, 1);
  6333  0779  0020               	movlb	0	; select bank0
  6334  077A  01DD               	clrf	setRF_DimmerLights@on
  6335  077B  0ADD               	incf	setRF_DimmerLights@on,f
  6336  077C  2FA5               	goto	L2
  6337  077D                     l5735:	
  6338                           ;RF_Control_B1.c: 348: } else {
  6339                           
  6340                           
  6341                           ;RF_Control_B1.c: 349: RFSW->Status = 0;
  6342  077D  0021               	movlb	1	; select bank1
  6343  077E  0860               	movf	_RFSW^(0+128),w
  6344  077F  0086               	movwf	6
  6345  0780  0187               	clrf	7
  6346  0781  1001               	bcf	1,0
  6347                           
  6348                           ;RF_Control_B1.c: 350: setSw_Status(sw, 0);
  6349  0782  0020               	movlb	0	; select bank0
  6350  0783  01A2               	clrf	setSw_Status@command
  6351  0784  0863               	movf	setRFSW_Control@sw,w
  6352  0785  3191  215E  3187   	fcall	_setSw_Status
  6353                           
  6354                           ;RF_Control_B1.c: 352: setDimmerLights_Trigger(sw, 1);
  6355  0788  0020               	movlb	0	; select bank0
  6356  0789  01A2               	clrf	setDimmerLights_Trigger@command
  6357  078A  0AA2               	incf	setDimmerLights_Trigger@command,f
  6358  078B  0863               	movf	setRFSW_Control@sw,w
  6359  078C  3191  21B9  3187   	fcall	_setDimmerLights_Trigger
  6360                           
  6361                           ;RF_Control_B1.c: 353: setDimmerLights_Switch(sw, RFSW->Status);
  6362  078F  0021               	movlb	1	; select bank1
  6363  0790  0860               	movf	_RFSW^(0+128),w
  6364  0791  0086               	movwf	6
  6365  0792  0187               	clrf	7
  6366  0793  3000               	movlw	0
  6367  0794  1801               	btfsc	1,0
  6368  0795  3001               	movlw	1
  6369  0796  0020               	movlb	0	; select bank0
  6370  0797  00A2               	movwf	setDimmerLights_Switch@command
  6371  0798  0863               	movf	setRFSW_Control@sw,w
  6372  0799  3191  21A9  3187   	fcall	_setDimmerLights_Switch
  6373                           
  6374                           ;RF_Control_B1.c: 355: setDelayOff_GO(sw, 0, 0);
  6375  079C  0020               	movlb	0	; select bank0
  6376  079D  01AA               	clrf	setDelayOff_GO@command
  6377  079E  01AB               	clrf	setDelayOff_GO@value
  6378  079F  0863               	movf	setRFSW_Control@sw,w
  6379  07A0  318A  22F8  3187   	fcall	_setDelayOff_GO
  6380                           
  6381                           ;RF_Control_B1.c: 356: setRF_DimmerLights(sw, 0);
  6382  07A3  0020               	movlb	0	; select bank0
  6383  07A4  01DD               	clrf	setRF_DimmerLights@on
  6384  07A5                     L2:	
  6385  07A5  0863               	movf	setRFSW_Control@sw,w
  6386  07A6  318B  23C5  3187   	fcall	_setRF_DimmerLights
  6387                           
  6388                           ;RF_Control_B1.c: 357: }
  6389                           ;RF_Control_B1.c: 358: }
  6390                           ;RF_Control_B1.c: 359: setBuz(1, 100);
  6391  07A9  3064               	movlw	100
  6392  07AA  0020               	movlb	0	; select bank0
  6393  07AB  00A9               	movwf	setBuz@time
  6394  07AC  3000               	movlw	0
  6395  07AD  00AA               	movwf	setBuz@time+1
  6396  07AE  3001               	movlw	1
  6397  07AF  3189  2122  3187   	fcall	_setBuz
  6398                           
  6399                           ;RF_Control_B1.c: 360: setTxData();
  6400  07B2  3185  2510         	fcall	_setTxData
  6401  07B4  0008               	return
  6402  07B5                     __end_of_setRFSW_Control:	
  6403                           
  6404                           	psect	text22
  6405  0AF8                     __ptext22:	
  6406 ;; *************** function _setDelayOff_GO *****************
  6407 ;; Defined at:
  6408 ;;		line 86 in file "../src/DelayOff_B1.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;  sw              1    wreg     unsigned char 
  6411 ;;  command         1   10[BANK0 ] unsigned char 
  6412 ;;  value           1   11[BANK0 ] unsigned char 
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  sw              1   14[BANK0 ] unsigned char 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;		None               void
  6417 ;; Registers used:
  6418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6424 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;Total ram usage:        5 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    7
  6431 ;; This function calls:
  6432 ;;		_DelayOffPointSelect
  6433 ;;		_DelayTimejudge
  6434 ;; This function is called by:
  6435 ;;		_setRFSW_Control
  6436 ;;		_Sw_DimmerOffFunc
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           
  6441                           ;psect for function _setDelayOff_GO
  6442  0AF8                     _setDelayOff_GO:	
  6443                           
  6444                           ;incstack = 0
  6445                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6446                           ;setDelayOff_GO@sw stored from wreg
  6447  0AF8  0020               	movlb	0	; select bank0
  6448  0AF9  00AE               	movwf	setDelayOff_GO@sw
  6449                           
  6450                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  6451  0AFA  082E               	movf	setDelayOff_GO@sw,w
  6452  0AFB  3192  227C  318A   	fcall	_DelayOffPointSelect
  6453                           
  6454                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  6455  0AFE  0878               	movf	_DelayOff,w
  6456  0AFF  0086               	movwf	6
  6457  0B00  3001               	movlw	1	; select bank2/3
  6458  0B01  0087               	movwf	7
  6459  0B02  1C01               	btfss	1,0
  6460  0B03  0008               	return
  6461                           
  6462                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  6463  0B04  0020               	movlb	0	; select bank0
  6464  0B05  082A               	movf	setDelayOff_GO@command,w
  6465  0B06  3A01               	xorlw	1
  6466  0B07  3000               	movlw	0
  6467  0B08  1903               	skipnz
  6468  0B09  3001               	movlw	1
  6469  0B0A  00AC               	movwf	??_setDelayOff_GO
  6470  0B0B  0878               	movf	_DelayOff,w
  6471  0B0C  0086               	movwf	6
  6472  0B0D  3001               	movlw	1	; select bank2/3
  6473  0B0E  0087               	movwf	7
  6474  0B0F  0DAC               	rlf	??_setDelayOff_GO,f
  6475  0B10  0801               	movf	1,w
  6476  0B11  062C               	xorwf	??_setDelayOff_GO,w
  6477  0B12  39FD               	andlw	-3
  6478  0B13  062C               	xorwf	??_setDelayOff_GO,w
  6479  0B14  0081               	movwf	1
  6480                           
  6481                           ;DelayOff_B1.c: 90: if (command == 1) {
  6482  0B15  082A               	movf	setDelayOff_GO@command,w
  6483  0B16  3A01               	xorlw	1
  6484  0B17  1D03               	skipz
  6485  0B18  2B43               	goto	l5553
  6486                           
  6487                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  6488  0B19  082B               	movf	setDelayOff_GO@value,w
  6489  0B1A  3195  2545  318A   	fcall	_DelayTimejudge
  6490  0B1D  0020               	movlb	0	; select bank0
  6491  0B1E  00AC               	movwf	??_setDelayOff_GO
  6492  0B1F  0A78               	incf	_DelayOff,w
  6493  0B20  0086               	movwf	6
  6494  0B21  3001               	movlw	1	; select bank2/3
  6495  0B22  0087               	movwf	7
  6496  0B23  082C               	movf	??_setDelayOff_GO,w
  6497  0B24  0081               	movwf	1
  6498                           
  6499                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  6500  0B25  300F               	movlw	15
  6501  0B26  052B               	andwf	setDelayOff_GO@value,w
  6502  0B27  00AC               	movwf	??_setDelayOff_GO
  6503  0B28  082C               	movf	??_setDelayOff_GO,w
  6504  0B29  3A05               	xorlw	5
  6505  0B2A  1903               	skipnz
  6506  0B2B  2B30               	goto	l5547
  6507  0B2C  082B               	movf	setDelayOff_GO@value,w
  6508  0B2D  390F               	andlw	15
  6509  0B2E  1D03               	btfss	3,2
  6510  0B2F  2B36               	goto	l5551
  6511  0B30                     l5547:	
  6512  0B30  3026               	movlw	38
  6513  0B31  022B               	subwf	setDelayOff_GO@value,w
  6514  0B32  1803               	skipnc
  6515  0B33  2B36               	goto	l5551
  6516                           
  6517                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  6518  0B34  082B               	movf	setDelayOff_GO@value,w
  6519  0B35  2B37               	goto	L3
  6520  0B36                     l5551:	
  6521                           ;DelayOff_B1.c: 94: } else {
  6522                           
  6523                           
  6524                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  6525  0B36  3005               	movlw	5
  6526  0B37                     L3:	
  6527  0B37  00AC               	movwf	??_setDelayOff_GO
  6528  0B38  082E               	movf	setDelayOff_GO@sw,w
  6529  0B39  3E1A               	addlw	26
  6530  0B3A  076E               	addwf	_product,w
  6531  0B3B  00AD               	movwf	??_setDelayOff_GO+1
  6532  0B3C  082D               	movf	??_setDelayOff_GO+1,w
  6533  0B3D  0086               	movwf	6
  6534  0B3E  3001               	movlw	1	; select bank2/3
  6535  0B3F  0087               	movwf	7
  6536  0B40  082C               	movf	??_setDelayOff_GO,w
  6537  0B41  0081               	movwf	1
  6538                           
  6539                           ;DelayOff_B1.c: 96: }
  6540                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  6541  0B42  2B4F               	goto	l5557
  6542  0B43                     l5553:	
  6543  0B43  08AA               	movf	setDelayOff_GO@command,f
  6544  0B44  1D03               	skipz
  6545  0B45  2B4F               	goto	l5557
  6546                           
  6547                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  6548  0B46  082E               	movf	setDelayOff_GO@sw,w
  6549  0B47  3E1A               	addlw	26
  6550  0B48  076E               	addwf	_product,w
  6551  0B49  00AC               	movwf	??_setDelayOff_GO
  6552  0B4A  082C               	movf	??_setDelayOff_GO,w
  6553  0B4B  0086               	movwf	6
  6554  0B4C  3001               	movlw	1	; select bank2/3
  6555  0B4D  0087               	movwf	7
  6556  0B4E  0181               	clrf	1
  6557  0B4F                     l5557:	
  6558                           
  6559                           ;DelayOff_B1.c: 99: }
  6560                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  6561  0B4F  0878               	movf	_DelayOff,w
  6562  0B50  3E02               	addlw	2
  6563  0B51  0086               	movwf	6
  6564  0B52  3001               	movlw	1	; select bank2/3
  6565  0B53  0087               	movwf	7
  6566  0B54  3000               	movlw	0
  6567  0B55  3FC0               	movwi [0]fsr1
  6568  0B56  3FC1               	movwi [1]fsr1
  6569                           
  6570                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  6571  0B57  0878               	movf	_DelayOff,w
  6572  0B58  3E04               	addlw	4
  6573  0B59  0086               	movwf	6
  6574  0B5A  3001               	movlw	1	; select bank2/3
  6575  0B5B  0087               	movwf	7
  6576  0B5C  0181               	clrf	1
  6577  0B5D  0008               	return
  6578  0B5E                     __end_of_setDelayOff_GO:	
  6579                           
  6580                           	psect	text23
  6581  1545                     __ptext23:	
  6582 ;; *************** function _DelayTimejudge *****************
  6583 ;; Defined at:
  6584 ;;		line 106 in file "../src/DelayOff_B1.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  value           1    wreg     unsigned char 
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;  value           1    9[BANK0 ] unsigned char 
  6589 ;;  k               1    8[BANK0 ] unsigned char 
  6590 ;;  j               1    7[BANK0 ] unsigned char 
  6591 ;;  i               1    6[BANK0 ] unsigned char 
  6592 ;; Return value:  Size  Location     Type
  6593 ;;                  1    wreg      unsigned char 
  6594 ;; Registers used:
  6595 ;;		wreg, status,2, status,0, pclath, cstack
  6596 ;; Tracked objects:
  6597 ;;		On entry : 0/0
  6598 ;;		On exit  : 0/0
  6599 ;;		Unchanged: 0/0
  6600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;Total ram usage:        6 bytes
  6606 ;; Hardware stack levels used:    1
  6607 ;; Hardware stack levels required when called:    6
  6608 ;; This function calls:
  6609 ;;		___bmul
  6610 ;; This function is called by:
  6611 ;;		_setDelayOff_GO
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           
  6616                           ;psect for function _DelayTimejudge
  6617  1545                     _DelayTimejudge:	
  6618                           
  6619                           ;incstack = 0
  6620                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  6621                           ;DelayTimejudge@value stored from wreg
  6622  1545  0020               	movlb	0	; select bank0
  6623  1546  00A9               	movwf	DelayTimejudge@value
  6624                           
  6625                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  6626  1547  3005               	movlw	5
  6627  1548  00A4               	movwf	??_DelayTimejudge
  6628  1549  0824               	movf	??_DelayTimejudge,w
  6629  154A  00A6               	movwf	DelayTimejudge@i
  6630  154B  01A7               	clrf	DelayTimejudge@j
  6631  154C  01A8               	clrf	DelayTimejudge@k
  6632                           
  6633                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  6634  154D  3031               	movlw	49
  6635  154E  0229               	subwf	DelayTimejudge@value,w
  6636  154F  1803               	skipnc
  6637  1550  2D6D               	goto	l5349
  6638                           
  6639                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  6640  1551  0829               	movf	DelayTimejudge@value,w
  6641  1552  390F               	andlw	15
  6642  1553  00A4               	movwf	??_DelayTimejudge
  6643  1554  0824               	movf	??_DelayTimejudge,w
  6644  1555  00A7               	movwf	DelayTimejudge@j
  6645                           
  6646                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  6647  1556  0829               	movf	DelayTimejudge@value,w
  6648  1557  00A4               	movwf	??_DelayTimejudge
  6649  1558  3004               	movlw	4
  6650  1559                     u4075:	
  6651  1559  36A4               	lsrf	??_DelayTimejudge,f
  6652  155A  0B89               	decfsz	9,f
  6653  155B  2D59               	goto	u4075
  6654  155C  0824               	movf	??_DelayTimejudge,w
  6655  155D  390F               	andlw	15
  6656  155E  00A5               	movwf	??_DelayTimejudge+1
  6657  155F  0825               	movf	??_DelayTimejudge+1,w
  6658  1560  00A8               	movwf	DelayTimejudge@k
  6659                           
  6660                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  6661  1561  300A               	movlw	10
  6662  1562  00A4               	movwf	??_DelayTimejudge
  6663  1563  0824               	movf	??_DelayTimejudge,w
  6664  1564  00A0               	movwf	___bmul@multiplicand
  6665  1565  0828               	movf	DelayTimejudge@k,w
  6666  1566  3192  222F         	fcall	___bmul
  6667  1568  0020               	movlb	0	; select bank0
  6668  1569  0727               	addwf	DelayTimejudge@j,w
  6669  156A  00A5               	movwf	??_DelayTimejudge+1
  6670  156B  0825               	movf	??_DelayTimejudge+1,w
  6671  156C  00A6               	movwf	DelayTimejudge@i
  6672  156D                     l5349:	
  6673                           
  6674                           ;DelayOff_B1.c: 112: }
  6675                           ;DelayOff_B1.c: 133: return i;
  6676  156D  0826               	movf	DelayTimejudge@i,w
  6677  156E  0008               	return
  6678  156F                     __end_of_DelayTimejudge:	
  6679                           
  6680                           	psect	text24
  6681  122F                     __ptext24:	
  6682 ;; *************** function ___bmul *****************
  6683 ;; Defined at:
  6684 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;  multiplier      1    wreg     unsigned char 
  6687 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;  multiplier      1    3[BANK0 ] unsigned char 
  6690 ;;  product         1    2[BANK0 ] unsigned char 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  1    wreg      unsigned char 
  6693 ;; Registers used:
  6694 ;;		wreg, status,2, status,0
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6700 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;Total ram usage:        4 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    5
  6707 ;; This function calls:
  6708 ;;		Nothing
  6709 ;; This function is called by:
  6710 ;;		_DelayTimejudge
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           
  6715                           ;psect for function ___bmul
  6716  122F                     ___bmul:	
  6717                           
  6718                           ;incstack = 0
  6719                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6720                           ;___bmul@multiplier stored from wreg
  6721  122F  0020               	movlb	0	; select bank0
  6722  1230  00A3               	movwf	___bmul@multiplier
  6723  1231  01A2               	clrf	___bmul@product
  6724  1232                     l5315:	
  6725  1232  1C23               	btfss	___bmul@multiplier,0
  6726  1233  2A38               	goto	l5319
  6727  1234  0820               	movf	___bmul@multiplicand,w
  6728  1235  00A1               	movwf	??___bmul
  6729  1236  0821               	movf	??___bmul,w
  6730  1237  07A2               	addwf	___bmul@product,f
  6731  1238                     l5319:	
  6732  1238  1003               	clrc
  6733  1239  0DA0               	rlf	___bmul@multiplicand,f
  6734  123A  1003               	clrc
  6735  123B  0CA3               	rrf	___bmul@multiplier,f
  6736  123C  08A3               	movf	___bmul@multiplier,f
  6737  123D  1D03               	skipz
  6738  123E  2A32               	goto	l5315
  6739  123F  0822               	movf	___bmul@product,w
  6740  1240  0008               	return
  6741  1241                     __end_of___bmul:	
  6742                           
  6743                           	psect	text25
  6744  0800                     __ptext25:	
  6745 ;; *************** function _setRFSW_AdjControl *****************
  6746 ;; Defined at:
  6747 ;;		line 364 in file "../src/RF_Control_B1.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  sw              1    wreg     unsigned char 
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;  sw              1   70[BANK0 ] unsigned char 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;		None               void
  6754 ;; Registers used:
  6755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;Total ram usage:        3 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:   10
  6768 ;; This function calls:
  6769 ;;		_RfSWPointSelect
  6770 ;;		_setRF_DimmerValue
  6771 ;;		_setTxData
  6772 ;; This function is called by:
  6773 ;;		_setControl_Lights_Table
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function _setRFSW_AdjControl
  6779  0800                     _setRFSW_AdjControl:	
  6780                           
  6781                           ;incstack = 0
  6782                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6783                           ;setRFSW_AdjControl@sw stored from wreg
  6784  0800  0020               	movlb	0	; select bank0
  6785  0801  00E6               	movwf	setRFSW_AdjControl@sw
  6786                           
  6787                           ;RF_Control_B1.c: 365: RfSWPointSelect(sw);
  6788  0802  0866               	movf	setRFSW_AdjControl@sw,w
  6789  0803  3192  22CD  3188   	fcall	_RfSWPointSelect
  6790                           
  6791                           ;RF_Control_B1.c: 366: if (RFSW->Status == 1) {
  6792  0806  0021               	movlb	1	; select bank1
  6793  0807  0860               	movf	_RFSW^(0+128),w
  6794  0808  0086               	movwf	6
  6795  0809  0187               	clrf	7
  6796  080A  1C01               	btfss	1,0
  6797  080B  2814               	goto	l5759
  6798                           
  6799                           ;RF_Control_B1.c: 367: Memory.Modify=1;
  6800  080C  0023               	movlb	3	; select bank3
  6801  080D  1444               	bsf	(_Memory^(0+384)+36),0
  6802                           
  6803                           ;RF_Control_B1.c: 368: setRF_DimmerValue(sw);
  6804  080E  0020               	movlb	0	; select bank0
  6805  080F  0866               	movf	setRFSW_AdjControl@sw,w
  6806  0810  3195  25FD  3188   	fcall	_setRF_DimmerValue
  6807                           
  6808                           ;RF_Control_B1.c: 369: } else {
  6809  0813  2826               	goto	l2045
  6810  0814                     l5759:	
  6811                           
  6812                           ;RF_Control_B1.c: 370: product->Data[9]=product->Data[20 + sw];
  6813  0814  0020               	movlb	0	; select bank0
  6814  0815  0866               	movf	setRFSW_AdjControl@sw,w
  6815  0816  3E14               	addlw	20
  6816  0817  076E               	addwf	_product,w
  6817  0818  00E4               	movwf	??_setRFSW_AdjControl
  6818  0819  0864               	movf	??_setRFSW_AdjControl,w
  6819  081A  0086               	movwf	6
  6820  081B  3001               	movlw	1	; select bank2/3
  6821  081C  0087               	movwf	7
  6822  081D  0801               	movf	1,w
  6823  081E  00E5               	movwf	??_setRFSW_AdjControl+1
  6824  081F  086E               	movf	_product,w
  6825  0820  3E09               	addlw	9
  6826  0821  0086               	movwf	6
  6827  0822  3001               	movlw	1	; select bank2/3
  6828  0823  0087               	movwf	7
  6829  0824  0865               	movf	??_setRFSW_AdjControl+1,w
  6830  0825  0081               	movwf	1
  6831  0826                     l2045:	
  6832                           
  6833                           ;RF_Control_B1.c: 371: }
  6834                           ;RF_Control_B1.c: 372: product->Data[17]=product->Data[26 + sw];
  6835  0826  0020               	movlb	0	; select bank0
  6836  0827  0866               	movf	setRFSW_AdjControl@sw,w
  6837  0828  3E1A               	addlw	26
  6838  0829  076E               	addwf	_product,w
  6839  082A  00E4               	movwf	??_setRFSW_AdjControl
  6840  082B  0864               	movf	??_setRFSW_AdjControl,w
  6841  082C  0086               	movwf	6
  6842  082D  3001               	movlw	1	; select bank2/3
  6843  082E  0087               	movwf	7
  6844  082F  0801               	movf	1,w
  6845  0830  00E5               	movwf	??_setRFSW_AdjControl+1
  6846  0831  086E               	movf	_product,w
  6847  0832  3E11               	addlw	17
  6848  0833  0086               	movwf	6
  6849  0834  3001               	movlw	1	; select bank2/3
  6850  0835  0087               	movwf	7
  6851  0836  0865               	movf	??_setRFSW_AdjControl+1,w
  6852  0837  0081               	movwf	1
  6853                           
  6854                           ;RF_Control_B1.c: 373: setTxData();
  6855  0838  3185  2510         	fcall	_setTxData
  6856  083A  0008               	return
  6857  083B                     __end_of_setRFSW_AdjControl:	
  6858                           
  6859                           	psect	text26
  6860  15FD                     __ptext26:	
  6861 ;; *************** function _setRF_DimmerValue *****************
  6862 ;; Defined at:
  6863 ;;		line 384 in file "../src/RF_Control_B1.c"
  6864 ;; Parameters:    Size  Location     Type
  6865 ;;  lights          1    wreg     unsigned char 
  6866 ;; Auto vars:     Size  Location     Type
  6867 ;;  lights          1   67[BANK0 ] unsigned char 
  6868 ;; Return value:  Size  Location     Type
  6869 ;;		None               void
  6870 ;; Registers used:
  6871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6872 ;; Tracked objects:
  6873 ;;		On entry : 0/0
  6874 ;;		On exit  : 0/0
  6875 ;;		Unchanged: 0/0
  6876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6880 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6881 ;;Total ram usage:        3 bytes
  6882 ;; Hardware stack levels used:    1
  6883 ;; Hardware stack levels required when called:    9
  6884 ;; This function calls:
  6885 ;;		_setDimmerLights_AdjRF
  6886 ;; This function is called by:
  6887 ;;		_setRFSW_AdjControl
  6888 ;; This function uses a non-reentrant model
  6889 ;;
  6890                           
  6891                           
  6892                           ;psect for function _setRF_DimmerValue
  6893  15FD                     _setRF_DimmerValue:	
  6894                           
  6895                           ;incstack = 0
  6896                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6897                           ;setRF_DimmerValue@lights stored from wreg
  6898  15FD  0020               	movlb	0	; select bank0
  6899  15FE  00E3               	movwf	setRF_DimmerValue@lights
  6900                           
  6901                           ;RF_Control_B1.c: 385: if (RF_Data[9] > 0x64) {
  6902  15FF  3065               	movlw	101
  6903  1600  0021               	movlb	1	; select bank1
  6904  1601  0229               	subwf	(_RF_Data^(0+128)+9),w
  6905  1602  1C03               	skipc
  6906  1603  2E0A               	goto	l5627
  6907                           
  6908                           ;RF_Control_B1.c: 386: RF_Data[9] = 0x64;
  6909  1604  3064               	movlw	100
  6910  1605  0020               	movlb	0	; select bank0
  6911  1606  00E1               	movwf	??_setRF_DimmerValue
  6912  1607  0861               	movf	??_setRF_DimmerValue,w
  6913  1608  0021               	movlb	1	; select bank1
  6914  1609  00A9               	movwf	(_RF_Data^(0+128)+9)
  6915  160A                     l5627:	
  6916                           
  6917                           ;RF_Control_B1.c: 387: }
  6918                           ;RF_Control_B1.c: 388: product->Data[9]=RF_Data[9];
  6919  160A  0829               	movf	(_RF_Data^(0+128)+9),w
  6920  160B  0020               	movlb	0	; select bank0
  6921  160C  00E1               	movwf	??_setRF_DimmerValue
  6922  160D  086E               	movf	_product,w
  6923  160E  3E09               	addlw	9
  6924  160F  0086               	movwf	6
  6925  1610  3001               	movlw	1	; select bank2/3
  6926  1611  0087               	movwf	7
  6927  1612  0861               	movf	??_setRF_DimmerValue,w
  6928  1613  0081               	movwf	1
  6929                           
  6930                           ;RF_Control_B1.c: 389: product->Data[11]=lights;
  6931  1614  0863               	movf	setRF_DimmerValue@lights,w
  6932  1615  00E1               	movwf	??_setRF_DimmerValue
  6933  1616  086E               	movf	_product,w
  6934  1617  3E0B               	addlw	11
  6935  1618  0086               	movwf	6
  6936  1619  3001               	movlw	1	; select bank2/3
  6937  161A  0087               	movwf	7
  6938  161B  0861               	movf	??_setRF_DimmerValue,w
  6939  161C  0081               	movwf	1
  6940                           
  6941                           ;RF_Control_B1.c: 390: product->Data[(20 + lights)]=product->Data[9];
  6942  161D  086E               	movf	_product,w
  6943  161E  3E09               	addlw	9
  6944  161F  0086               	movwf	6
  6945  1620  3001               	movlw	1	; select bank2/3
  6946  1621  0087               	movwf	7
  6947  1622  0801               	movf	1,w
  6948  1623  00E1               	movwf	??_setRF_DimmerValue
  6949  1624  0863               	movf	setRF_DimmerValue@lights,w
  6950  1625  3E14               	addlw	20
  6951  1626  076E               	addwf	_product,w
  6952  1627  00E2               	movwf	??_setRF_DimmerValue+1
  6953  1628  0862               	movf	??_setRF_DimmerValue+1,w
  6954  1629  0086               	movwf	6
  6955  162A  3001               	movlw	1	; select bank2/3
  6956  162B  0087               	movwf	7
  6957  162C  0861               	movf	??_setRF_DimmerValue,w
  6958  162D  0081               	movwf	1
  6959                           
  6960                           ;RF_Control_B1.c: 391: setDimmerLights_AdjRF(lights);
  6961  162E  0863               	movf	setRF_DimmerValue@lights,w
  6962  162F  3194  24AB         	fcall	_setDimmerLights_AdjRF
  6963  1631  0008               	return
  6964  1632                     __end_of_setRF_DimmerValue:	
  6965                           
  6966                           	psect	text27
  6967  14AB                     __ptext27:	
  6968 ;; *************** function _setDimmerLights_AdjRF *****************
  6969 ;; Defined at:
  6970 ;;		line 679 in file "../src/Dimmer_B1.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;  lights          1    wreg     unsigned char 
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;  lights          1   64[BANK0 ] unsigned char 
  6975 ;; Return value:  Size  Location     Type
  6976 ;;		None               void
  6977 ;; Registers used:
  6978 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;Total ram usage:        2 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; Hardware stack levels required when called:    8
  6991 ;; This function calls:
  6992 ;;		_DimmerLightsPointSelect
  6993 ;;		_getPercentValue
  6994 ;; This function is called by:
  6995 ;;		_setRF_DimmerValue
  6996 ;; This function uses a non-reentrant model
  6997 ;;
  6998                           
  6999                           
  7000                           ;psect for function _setDimmerLights_AdjRF
  7001  14AB                     _setDimmerLights_AdjRF:	
  7002                           
  7003                           ;incstack = 0
  7004                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7005                           ;setDimmerLights_AdjRF@lights stored from wreg
  7006  14AB  0020               	movlb	0	; select bank0
  7007  14AC  00E0               	movwf	setDimmerLights_AdjRF@lights
  7008                           
  7009                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  7010  14AD  0860               	movf	setDimmerLights_AdjRF@lights,w
  7011  14AE  3192  2241  3194   	fcall	_DimmerLightsPointSelect
  7012                           
  7013                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  7014  14B1  0879               	movf	_DimmerLights,w
  7015  14B2  0086               	movwf	6
  7016  14B3  3001               	movlw	1	; select bank2/3
  7017  14B4  0087               	movwf	7
  7018  14B5  1501               	bsf	1,2
  7019                           
  7020                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  7021  14B6  0879               	movf	_DimmerLights,w
  7022  14B7  0086               	movwf	6
  7023  14B8  3001               	movlw	1	; select bank2/3
  7024  14B9  0087               	movwf	7
  7025  14BA  1481               	bsf	1,1
  7026                           
  7027                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7028  14BB  0020               	movlb	0	; select bank0
  7029  14BC  086E               	movf	_product,w
  7030  14BD  3E09               	addlw	9
  7031  14BE  0086               	movwf	6
  7032  14BF  3001               	movlw	1	; select bank2/3
  7033  14C0  0087               	movwf	7
  7034  14C1  0801               	movf	1,w
  7035  14C2  3189  217B         	fcall	_getPercentValue
  7036  14C4  0020               	movlb	0	; select bank0
  7037  14C5  00DF               	movwf	??_setDimmerLights_AdjRF
  7038  14C6  0879               	movf	_DimmerLights,w
  7039  14C7  3E05               	addlw	5
  7040  14C8  0086               	movwf	6
  7041  14C9  3001               	movlw	1	; select bank2/3
  7042  14CA  0087               	movwf	7
  7043  14CB  085F               	movf	??_setDimmerLights_AdjRF,w
  7044  14CC  0081               	movwf	1
  7045  14CD  0008               	return
  7046  14CE                     __end_of_setDimmerLights_AdjRF:	
  7047                           
  7048                           	psect	text28
  7049  097B                     __ptext28:	
  7050 ;; *************** function _getPercentValue *****************
  7051 ;; Defined at:
  7052 ;;		line 752 in file "../src/Dimmer_B1.c"
  7053 ;; Parameters:    Size  Location     Type
  7054 ;;  value           1    wreg     unsigned char 
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;  value           1   59[BANK0 ] unsigned char 
  7057 ;;  i               3   60[BANK0 ] float 
  7058 ;; Return value:  Size  Location     Type
  7059 ;;                  1    wreg      unsigned char 
  7060 ;; Registers used:
  7061 ;;		wreg, status,2, status,0, pclath, cstack
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7070 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7071 ;;Total ram usage:        6 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; Hardware stack levels required when called:    7
  7074 ;; This function calls:
  7075 ;;		___awtoft
  7076 ;;		___ftadd
  7077 ;;		___ftdiv
  7078 ;;		___ftmul
  7079 ;;		___fttol
  7080 ;; This function is called by:
  7081 ;;		_setDimmerLights_AdjRF
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           
  7086                           ;psect for function _getPercentValue
  7087  097B                     _getPercentValue:	
  7088                           
  7089                           ;incstack = 0
  7090                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7091                           ;getPercentValue@value stored from wreg
  7092  097B  0020               	movlb	0	; select bank0
  7093  097C  00DB               	movwf	getPercentValue@value
  7094                           
  7095                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  7096  097D  3000               	movlw	0
  7097  097E  00DC               	movwf	getPercentValue@i
  7098  097F  30E0               	movlw	224
  7099  0980  00DD               	movwf	getPercentValue@i+1
  7100  0981  3041               	movlw	65
  7101  0982  00DE               	movwf	getPercentValue@i+2
  7102                           
  7103                           ;Dimmer_B1.c: 755: i /= 100;
  7104  0983  3000               	movlw	0
  7105  0984  00AE               	movwf	___ftdiv@f2
  7106  0985  30C8               	movlw	200
  7107  0986  00AF               	movwf	___ftdiv@f2+1
  7108  0987  3042               	movlw	66
  7109  0988  00B0               	movwf	___ftdiv@f2+2
  7110  0989  085C               	movf	getPercentValue@i,w
  7111  098A  00B1               	movwf	___ftdiv@f1
  7112  098B  085D               	movf	getPercentValue@i+1,w
  7113  098C  00B2               	movwf	___ftdiv@f1+1
  7114  098D  085E               	movf	getPercentValue@i+2,w
  7115  098E  00B3               	movwf	___ftdiv@f1+2
  7116  098F  3186  267D  3189   	fcall	___ftdiv
  7117  0992  0020               	movlb	0	; select bank0
  7118  0993  082E               	movf	?___ftdiv,w
  7119  0994  00DC               	movwf	getPercentValue@i
  7120  0995  082F               	movf	?___ftdiv+1,w
  7121  0996  00DD               	movwf	getPercentValue@i+1
  7122  0997  0830               	movf	?___ftdiv+2,w
  7123  0998  00DE               	movwf	getPercentValue@i+2
  7124                           
  7125                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  7126  0999  085B               	movf	getPercentValue@value,w
  7127  099A  00D9               	movwf	??_getPercentValue
  7128  099B  01DA               	clrf	??_getPercentValue+1
  7129  099C  09D9               	comf	??_getPercentValue,f
  7130  099D  09DA               	comf	??_getPercentValue+1,f
  7131  099E  0AD9               	incf	??_getPercentValue,f
  7132  099F  1903               	skipnz
  7133  09A0  0ADA               	incf	??_getPercentValue+1,f
  7134  09A1  0859               	movf	??_getPercentValue,w
  7135  09A2  3E64               	addlw	100
  7136  09A3  00A8               	movwf	___awtoft@c
  7137  09A4  3000               	movlw	0
  7138  09A5  3D5A               	addwfc	??_getPercentValue+1,w
  7139  09A6  00A9               	movwf	___awtoft@c+1
  7140  09A7  3194  2445  3189   	fcall	___awtoft
  7141  09AA  0020               	movlb	0	; select bank0
  7142  09AB  0828               	movf	?___awtoft,w
  7143  09AC  00B1               	movwf	___ftmul@f2
  7144  09AD  0829               	movf	?___awtoft+1,w
  7145  09AE  00B2               	movwf	___ftmul@f2+1
  7146  09AF  082A               	movf	?___awtoft+2,w
  7147  09B0  00B3               	movwf	___ftmul@f2+2
  7148  09B1  085C               	movf	getPercentValue@i,w
  7149  09B2  00AE               	movwf	___ftmul@f1
  7150  09B3  085D               	movf	getPercentValue@i+1,w
  7151  09B4  00AF               	movwf	___ftmul@f1+1
  7152  09B5  085E               	movf	getPercentValue@i+2,w
  7153  09B6  00B0               	movwf	___ftmul@f1+2
  7154  09B7  3185  25C9  3189   	fcall	___ftmul
  7155  09BA  0020               	movlb	0	; select bank0
  7156  09BB  082E               	movf	?___ftmul,w
  7157  09BC  00C1               	movwf	___ftadd@f2
  7158  09BD  082F               	movf	?___ftmul+1,w
  7159  09BE  00C2               	movwf	___ftadd@f2+1
  7160  09BF  0830               	movf	?___ftmul+2,w
  7161  09C0  00C3               	movwf	___ftadd@f2+2
  7162  09C1  3000               	movlw	0
  7163  09C2  00BE               	movwf	___ftadd@f1
  7164  09C3  3000               	movlw	0
  7165  09C4  00BF               	movwf	___ftadd@f1+1
  7166  09C5  3042               	movlw	66
  7167  09C6  00C0               	movwf	___ftadd@f1+2
  7168  09C7  3183  2353  3189   	fcall	___ftadd
  7169  09CA  0020               	movlb	0	; select bank0
  7170  09CB  083E               	movf	?___ftadd,w
  7171  09CC  00CB               	movwf	___fttol@f1
  7172  09CD  083F               	movf	?___ftadd+1,w
  7173  09CE  00CC               	movwf	___fttol@f1+1
  7174  09CF  0840               	movf	?___ftadd+2,w
  7175  09D0  00CD               	movwf	___fttol@f1+2
  7176  09D1  318E  26EE         	fcall	___fttol
  7177  09D3  0020               	movlb	0	; select bank0
  7178  09D4  084B               	movf	?___fttol,w
  7179  09D5  0008               	return
  7180  09D6                     __end_of_getPercentValue:	
  7181                           
  7182                           	psect	text29
  7183  05C9                     __ptext29:	
  7184 ;; *************** function ___ftmul *****************
  7185 ;; Defined at:
  7186 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;  f1              3   14[BANK0 ] float 
  7189 ;;  f2              3   17[BANK0 ] float 
  7190 ;; Auto vars:     Size  Location     Type
  7191 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7192 ;;  sign            1   29[BANK0 ] unsigned char 
  7193 ;;  cntr            1   28[BANK0 ] unsigned char 
  7194 ;;  exp             1   24[BANK0 ] unsigned char 
  7195 ;; Return value:  Size  Location     Type
  7196 ;;                  3   14[BANK0 ] float 
  7197 ;; Registers used:
  7198 ;;		wreg, status,2, status,0, pclath, cstack
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7204 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;Total ram usage:       16 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; Hardware stack levels required when called:    6
  7211 ;; This function calls:
  7212 ;;		___ftpack
  7213 ;; This function is called by:
  7214 ;;		_getPercentValue
  7215 ;; This function uses a non-reentrant model
  7216 ;;
  7217                           
  7218                           
  7219                           ;psect for function ___ftmul
  7220  05C9                     ___ftmul:	
  7221                           
  7222                           ;incstack = 0
  7223                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7224  05C9  0020               	movlb	0	; select bank0
  7225  05CA  082E               	movf	___ftmul@f1,w
  7226  05CB  00B4               	movwf	??___ftmul
  7227  05CC  082F               	movf	___ftmul@f1+1,w
  7228  05CD  00B5               	movwf	??___ftmul+1
  7229  05CE  0830               	movf	___ftmul@f1+2,w
  7230  05CF  00B6               	movwf	??___ftmul+2
  7231  05D0  1003               	clrc
  7232  05D1  0D35               	rlf	??___ftmul+1,w
  7233  05D2  0D36               	rlf	??___ftmul+2,w
  7234  05D3  00B7               	movwf	??___ftmul+3
  7235  05D4  0837               	movf	??___ftmul+3,w
  7236  05D5  00B8               	movwf	___ftmul@exp
  7237  05D6  08B8               	movf	___ftmul@exp,f
  7238  05D7  1D03               	skipz
  7239  05D8  2DE0               	goto	l5211
  7240  05D9  3000               	movlw	0
  7241  05DA  00AE               	movwf	?___ftmul
  7242  05DB  3000               	movlw	0
  7243  05DC  00AF               	movwf	?___ftmul+1
  7244  05DD  3000               	movlw	0
  7245  05DE  00B0               	movwf	?___ftmul+2
  7246  05DF  0008               	return
  7247  05E0                     l5211:	
  7248  05E0  0831               	movf	___ftmul@f2,w
  7249  05E1  00B4               	movwf	??___ftmul
  7250  05E2  0832               	movf	___ftmul@f2+1,w
  7251  05E3  00B5               	movwf	??___ftmul+1
  7252  05E4  0833               	movf	___ftmul@f2+2,w
  7253  05E5  00B6               	movwf	??___ftmul+2
  7254  05E6  1003               	clrc
  7255  05E7  0D35               	rlf	??___ftmul+1,w
  7256  05E8  0D36               	rlf	??___ftmul+2,w
  7257  05E9  00B7               	movwf	??___ftmul+3
  7258  05EA  0837               	movf	??___ftmul+3,w
  7259  05EB  00BD               	movwf	___ftmul@sign
  7260  05EC  08BD               	movf	___ftmul@sign,f
  7261  05ED  1D03               	skipz
  7262  05EE  2DF6               	goto	l5217
  7263  05EF  3000               	movlw	0
  7264  05F0  00AE               	movwf	?___ftmul
  7265  05F1  3000               	movlw	0
  7266  05F2  00AF               	movwf	?___ftmul+1
  7267  05F3  3000               	movlw	0
  7268  05F4  00B0               	movwf	?___ftmul+2
  7269  05F5  0008               	return
  7270  05F6                     l5217:	
  7271  05F6  083D               	movf	___ftmul@sign,w
  7272  05F7  3E7B               	addlw	123
  7273  05F8  00B4               	movwf	??___ftmul
  7274  05F9  0834               	movf	??___ftmul,w
  7275  05FA  07B8               	addwf	___ftmul@exp,f
  7276  05FB  082E               	movf	___ftmul@f1,w
  7277  05FC  00B4               	movwf	??___ftmul
  7278  05FD  082F               	movf	___ftmul@f1+1,w
  7279  05FE  00B5               	movwf	??___ftmul+1
  7280  05FF  0830               	movf	___ftmul@f1+2,w
  7281  0600  00B6               	movwf	??___ftmul+2
  7282  0601  3010               	movlw	16
  7283  0602                     u3805:	
  7284  0602  36B6               	lsrf	??___ftmul+2,f
  7285  0603  0CB5               	rrf	??___ftmul+1,f
  7286  0604  0CB4               	rrf	??___ftmul,f
  7287  0605  0B89               	decfsz	9,f
  7288  0606  2E02               	goto	u3805
  7289  0607  0834               	movf	??___ftmul,w
  7290  0608  00B7               	movwf	??___ftmul+3
  7291  0609  0837               	movf	??___ftmul+3,w
  7292  060A  00BD               	movwf	___ftmul@sign
  7293  060B  0831               	movf	___ftmul@f2,w
  7294  060C  00B4               	movwf	??___ftmul
  7295  060D  0832               	movf	___ftmul@f2+1,w
  7296  060E  00B5               	movwf	??___ftmul+1
  7297  060F  0833               	movf	___ftmul@f2+2,w
  7298  0610  00B6               	movwf	??___ftmul+2
  7299  0611  3010               	movlw	16
  7300  0612                     u3815:	
  7301  0612  36B6               	lsrf	??___ftmul+2,f
  7302  0613  0CB5               	rrf	??___ftmul+1,f
  7303  0614  0CB4               	rrf	??___ftmul,f
  7304  0615  0B89               	decfsz	9,f
  7305  0616  2E12               	goto	u3815
  7306  0617  0834               	movf	??___ftmul,w
  7307  0618  00B7               	movwf	??___ftmul+3
  7308  0619  0837               	movf	??___ftmul+3,w
  7309  061A  06BD               	xorwf	___ftmul@sign,f
  7310  061B  3080               	movlw	128
  7311  061C  00B4               	movwf	??___ftmul
  7312  061D  0834               	movf	??___ftmul,w
  7313  061E  05BD               	andwf	___ftmul@sign,f
  7314  061F  17AF               	bsf	___ftmul@f1+1,7
  7315  0620  17B2               	bsf	___ftmul@f2+1,7
  7316  0621  30FF               	movlw	255
  7317  0622  05B1               	andwf	___ftmul@f2,f
  7318  0623  30FF               	movlw	255
  7319  0624  05B2               	andwf	___ftmul@f2+1,f
  7320  0625  3000               	movlw	0
  7321  0626  05B3               	andwf	___ftmul@f2+2,f
  7322  0627  3000               	movlw	0
  7323  0628  00B9               	movwf	___ftmul@f3_as_product
  7324  0629  3000               	movlw	0
  7325  062A  00BA               	movwf	___ftmul@f3_as_product+1
  7326  062B  3000               	movlw	0
  7327  062C  00BB               	movwf	___ftmul@f3_as_product+2
  7328  062D  3007               	movlw	7
  7329  062E  00B4               	movwf	??___ftmul
  7330  062F  0834               	movf	??___ftmul,w
  7331  0630  00BC               	movwf	___ftmul@cntr
  7332  0631                     l5229:	
  7333  0631  1C2E               	btfss	___ftmul@f1,0
  7334  0632  2E39               	goto	l5233
  7335  0633  0831               	movf	___ftmul@f2,w
  7336  0634  07B9               	addwf	___ftmul@f3_as_product,f
  7337  0635  0832               	movf	___ftmul@f2+1,w
  7338  0636  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7339  0637  0833               	movf	___ftmul@f2+2,w
  7340  0638  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7341  0639                     l5233:	
  7342  0639  3001               	movlw	1
  7343  063A                     u3835:	
  7344  063A  36B0               	lsrf	___ftmul@f1+2,f
  7345  063B  0CAF               	rrf	___ftmul@f1+1,f
  7346  063C  0CAE               	rrf	___ftmul@f1,f
  7347  063D  0B89               	decfsz	9,f
  7348  063E  2E3A               	goto	u3835
  7349  063F  3001               	movlw	1
  7350  0640                     u3845:	
  7351  0640  35B1               	lslf	___ftmul@f2,f
  7352  0641  0DB2               	rlf	___ftmul@f2+1,f
  7353  0642  0DB3               	rlf	___ftmul@f2+2,f
  7354  0643  0B89               	decfsz	9,f
  7355  0644  2E40               	goto	u3845
  7356  0645  3001               	movlw	1
  7357  0646  02BC               	subwf	___ftmul@cntr,f
  7358  0647  1D03               	btfss	3,2
  7359  0648  2E31               	goto	l5229
  7360  0649  3009               	movlw	9
  7361  064A  00B4               	movwf	??___ftmul
  7362  064B  0834               	movf	??___ftmul,w
  7363  064C  00BC               	movwf	___ftmul@cntr
  7364  064D                     l5241:	
  7365  064D  1C2E               	btfss	___ftmul@f1,0
  7366  064E  2E55               	goto	l5245
  7367  064F  0831               	movf	___ftmul@f2,w
  7368  0650  07B9               	addwf	___ftmul@f3_as_product,f
  7369  0651  0832               	movf	___ftmul@f2+1,w
  7370  0652  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7371  0653  0833               	movf	___ftmul@f2+2,w
  7372  0654  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7373  0655                     l5245:	
  7374  0655  3001               	movlw	1
  7375  0656                     u3875:	
  7376  0656  36B0               	lsrf	___ftmul@f1+2,f
  7377  0657  0CAF               	rrf	___ftmul@f1+1,f
  7378  0658  0CAE               	rrf	___ftmul@f1,f
  7379  0659  0B89               	decfsz	9,f
  7380  065A  2E56               	goto	u3875
  7381  065B  3001               	movlw	1
  7382  065C                     u3885:	
  7383  065C  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7384  065D  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7385  065E  0CB9               	rrf	___ftmul@f3_as_product,f
  7386  065F  0B89               	decfsz	9,f
  7387  0660  2E5C               	goto	u3885
  7388  0661  3001               	movlw	1
  7389  0662  02BC               	subwf	___ftmul@cntr,f
  7390  0663  1D03               	btfss	3,2
  7391  0664  2E4D               	goto	l5241
  7392  0665  0839               	movf	___ftmul@f3_as_product,w
  7393  0666  00A0               	movwf	___ftpack@arg
  7394  0667  083A               	movf	___ftmul@f3_as_product+1,w
  7395  0668  00A1               	movwf	___ftpack@arg+1
  7396  0669  083B               	movf	___ftmul@f3_as_product+2,w
  7397  066A  00A2               	movwf	___ftpack@arg+2
  7398  066B  0838               	movf	___ftmul@exp,w
  7399  066C  00B4               	movwf	??___ftmul
  7400  066D  0834               	movf	??___ftmul,w
  7401  066E  00A3               	movwf	___ftpack@exp
  7402  066F  083D               	movf	___ftmul@sign,w
  7403  0670  00B5               	movwf	??___ftmul+1
  7404  0671  0835               	movf	??___ftmul+1,w
  7405  0672  00A4               	movwf	___ftpack@sign
  7406  0673  318A  2236         	fcall	___ftpack
  7407  0675  0020               	movlb	0	; select bank0
  7408  0676  0820               	movf	?___ftpack,w
  7409  0677  00AE               	movwf	?___ftmul
  7410  0678  0821               	movf	?___ftpack+1,w
  7411  0679  00AF               	movwf	?___ftmul+1
  7412  067A  0822               	movf	?___ftpack+2,w
  7413  067B  00B0               	movwf	?___ftmul+2
  7414  067C  0008               	return
  7415  067D                     __end_of___ftmul:	
  7416                           
  7417                           	psect	text30
  7418  0353                     __ptext30:	
  7419 ;; *************** function ___ftadd *****************
  7420 ;; Defined at:
  7421 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  f1              3   30[BANK0 ] float 
  7424 ;;  f2              3   33[BANK0 ] float 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  exp1            1   42[BANK0 ] unsigned char 
  7427 ;;  exp2            1   41[BANK0 ] unsigned char 
  7428 ;;  sign            1   40[BANK0 ] unsigned char 
  7429 ;; Return value:  Size  Location     Type
  7430 ;;                  3   30[BANK0 ] float 
  7431 ;; Registers used:
  7432 ;;		wreg, status,2, status,0, pclath, cstack
  7433 ;; Tracked objects:
  7434 ;;		On entry : 0/0
  7435 ;;		On exit  : 0/0
  7436 ;;		Unchanged: 0/0
  7437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7438 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7442 ;;Total ram usage:       13 bytes
  7443 ;; Hardware stack levels used:    1
  7444 ;; Hardware stack levels required when called:    6
  7445 ;; This function calls:
  7446 ;;		___ftpack
  7447 ;; This function is called by:
  7448 ;;		_getPercentValue
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           
  7453                           ;psect for function ___ftadd
  7454  0353                     ___ftadd:	
  7455                           
  7456                           ;incstack = 0
  7457                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7458  0353  0020               	movlb	0	; select bank0
  7459  0354  083E               	movf	___ftadd@f1,w
  7460  0355  00C4               	movwf	??___ftadd
  7461  0356  083F               	movf	___ftadd@f1+1,w
  7462  0357  00C5               	movwf	??___ftadd+1
  7463  0358  0840               	movf	___ftadd@f1+2,w
  7464  0359  00C6               	movwf	??___ftadd+2
  7465  035A  1003               	clrc
  7466  035B  0D45               	rlf	??___ftadd+1,w
  7467  035C  0D46               	rlf	??___ftadd+2,w
  7468  035D  00C7               	movwf	??___ftadd+3
  7469  035E  0847               	movf	??___ftadd+3,w
  7470  035F  00CA               	movwf	___ftadd@exp1
  7471  0360  0841               	movf	___ftadd@f2,w
  7472  0361  00C4               	movwf	??___ftadd
  7473  0362  0842               	movf	___ftadd@f2+1,w
  7474  0363  00C5               	movwf	??___ftadd+1
  7475  0364  0843               	movf	___ftadd@f2+2,w
  7476  0365  00C6               	movwf	??___ftadd+2
  7477  0366  1003               	clrc
  7478  0367  0D45               	rlf	??___ftadd+1,w
  7479  0368  0D46               	rlf	??___ftadd+2,w
  7480  0369  00C7               	movwf	??___ftadd+3
  7481  036A  0847               	movf	??___ftadd+3,w
  7482  036B  00C9               	movwf	___ftadd@exp2
  7483  036C  084A               	movf	___ftadd@exp1,w
  7484  036D  1903               	btfsc	3,2
  7485  036E  2B7B               	goto	l5099
  7486  036F  0849               	movf	___ftadd@exp2,w
  7487  0370  024A               	subwf	___ftadd@exp1,w
  7488  0371  1803               	skipnc
  7489  0372  2B82               	goto	l5103
  7490  0373  034A               	decf	___ftadd@exp1,w
  7491  0374  3AFF               	xorlw	255
  7492  0375  0749               	addwf	___ftadd@exp2,w
  7493  0376  00C4               	movwf	??___ftadd
  7494  0377  3019               	movlw	25
  7495  0378  0244               	subwf	??___ftadd,w
  7496  0379  1C03               	skipc
  7497  037A  2B82               	goto	l5103
  7498  037B                     l5099:	
  7499  037B  0841               	movf	___ftadd@f2,w
  7500  037C  00BE               	movwf	?___ftadd
  7501  037D  0842               	movf	___ftadd@f2+1,w
  7502  037E  00BF               	movwf	?___ftadd+1
  7503  037F  0843               	movf	___ftadd@f2+2,w
  7504  0380  00C0               	movwf	?___ftadd+2
  7505  0381  0008               	return
  7506  0382                     l5103:	
  7507  0382  0849               	movf	___ftadd@exp2,w
  7508  0383  1903               	btfsc	3,2
  7509  0384  0008               	return
  7510  0385  084A               	movf	___ftadd@exp1,w
  7511  0386  0249               	subwf	___ftadd@exp2,w
  7512  0387  1803               	skipnc
  7513  0388  2B91               	goto	l5109
  7514  0389  0349               	decf	___ftadd@exp2,w
  7515  038A  3AFF               	xorlw	255
  7516  038B  074A               	addwf	___ftadd@exp1,w
  7517  038C  00C4               	movwf	??___ftadd
  7518  038D  3019               	movlw	25
  7519  038E  0244               	subwf	??___ftadd,w
  7520  038F  1803               	btfsc	3,0
  7521  0390  0008               	return
  7522  0391                     l5109:	
  7523  0391  3006               	movlw	6
  7524  0392  00C4               	movwf	??___ftadd
  7525  0393  0844               	movf	??___ftadd,w
  7526  0394  00C8               	movwf	___ftadd@sign
  7527  0395  1BC0               	btfsc	___ftadd@f1+2,7
  7528  0396  17C8               	bsf	___ftadd@sign,7
  7529  0397  1BC3               	btfsc	___ftadd@f2+2,7
  7530  0398  1748               	bsf	___ftadd@sign,6
  7531  0399  17BF               	bsf	___ftadd@f1+1,7
  7532  039A  30FF               	movlw	255
  7533  039B  05BE               	andwf	___ftadd@f1,f
  7534  039C  30FF               	movlw	255
  7535  039D  05BF               	andwf	___ftadd@f1+1,f
  7536  039E  3000               	movlw	0
  7537  039F  05C0               	andwf	___ftadd@f1+2,f
  7538  03A0  17C2               	bsf	___ftadd@f2+1,7
  7539  03A1  30FF               	movlw	255
  7540  03A2  05C1               	andwf	___ftadd@f2,f
  7541  03A3  30FF               	movlw	255
  7542  03A4  05C2               	andwf	___ftadd@f2+1,f
  7543  03A5  3000               	movlw	0
  7544  03A6  05C3               	andwf	___ftadd@f2+2,f
  7545  03A7  0849               	movf	___ftadd@exp2,w
  7546  03A8  024A               	subwf	___ftadd@exp1,w
  7547  03A9  1803               	skipnc
  7548  03AA  2BCD               	goto	l5131
  7549  03AB                     l5121:	
  7550  03AB  3001               	movlw	1
  7551  03AC                     u3565:	
  7552  03AC  35C1               	lslf	___ftadd@f2,f
  7553  03AD  0DC2               	rlf	___ftadd@f2+1,f
  7554  03AE  0DC3               	rlf	___ftadd@f2+2,f
  7555  03AF  0B89               	decfsz	9,f
  7556  03B0  2BAC               	goto	u3565
  7557  03B1  3001               	movlw	1
  7558  03B2  02C9               	subwf	___ftadd@exp2,f
  7559  03B3  0849               	movf	___ftadd@exp2,w
  7560  03B4  064A               	xorwf	___ftadd@exp1,w
  7561  03B5  1903               	skipnz
  7562  03B6  2BC8               	goto	l5129
  7563  03B7  3001               	movlw	1
  7564  03B8  02C8               	subwf	___ftadd@sign,f
  7565  03B9  0848               	movf	___ftadd@sign,w
  7566  03BA  3907               	andlw	7
  7567  03BB  1903               	btfsc	3,2
  7568  03BC  2BC8               	goto	l5129
  7569  03BD  2BAB               	goto	l5121
  7570  03BE                     l5127:	
  7571  03BE  3001               	movlw	1
  7572  03BF                     u3595:	
  7573  03BF  36C0               	lsrf	___ftadd@f1+2,f
  7574  03C0  0CBF               	rrf	___ftadd@f1+1,f
  7575  03C1  0CBE               	rrf	___ftadd@f1,f
  7576  03C2  0B89               	decfsz	9,f
  7577  03C3  2BBF               	goto	u3595
  7578  03C4  3001               	movlw	1
  7579  03C5  00C4               	movwf	??___ftadd
  7580  03C6  0844               	movf	??___ftadd,w
  7581  03C7  07CA               	addwf	___ftadd@exp1,f
  7582  03C8                     l5129:	
  7583  03C8  084A               	movf	___ftadd@exp1,w
  7584  03C9  0649               	xorwf	___ftadd@exp2,w
  7585  03CA  1903               	btfsc	3,2
  7586  03CB  2BF2               	goto	l2722
  7587  03CC  2BBE               	goto	l5127
  7588  03CD                     l5131:	
  7589  03CD  084A               	movf	___ftadd@exp1,w
  7590  03CE  0249               	subwf	___ftadd@exp2,w
  7591  03CF  1803               	skipnc
  7592  03D0  2BF2               	goto	l2722
  7593  03D1                     l5133:	
  7594  03D1  3001               	movlw	1
  7595  03D2                     u3625:	
  7596  03D2  35BE               	lslf	___ftadd@f1,f
  7597  03D3  0DBF               	rlf	___ftadd@f1+1,f
  7598  03D4  0DC0               	rlf	___ftadd@f1+2,f
  7599  03D5  0B89               	decfsz	9,f
  7600  03D6  2BD2               	goto	u3625
  7601  03D7  3001               	movlw	1
  7602  03D8  02CA               	subwf	___ftadd@exp1,f
  7603  03D9  0849               	movf	___ftadd@exp2,w
  7604  03DA  064A               	xorwf	___ftadd@exp1,w
  7605  03DB  1903               	skipnz
  7606  03DC  2BEE               	goto	l5141
  7607  03DD  3001               	movlw	1
  7608  03DE  02C8               	subwf	___ftadd@sign,f
  7609  03DF  0848               	movf	___ftadd@sign,w
  7610  03E0  3907               	andlw	7
  7611  03E1  1903               	btfsc	3,2
  7612  03E2  2BEE               	goto	l5141
  7613  03E3  2BD1               	goto	l5133
  7614  03E4                     l5139:	
  7615  03E4  3001               	movlw	1
  7616  03E5                     u3655:	
  7617  03E5  36C3               	lsrf	___ftadd@f2+2,f
  7618  03E6  0CC2               	rrf	___ftadd@f2+1,f
  7619  03E7  0CC1               	rrf	___ftadd@f2,f
  7620  03E8  0B89               	decfsz	9,f
  7621  03E9  2BE5               	goto	u3655
  7622  03EA  3001               	movlw	1
  7623  03EB  00C4               	movwf	??___ftadd
  7624  03EC  0844               	movf	??___ftadd,w
  7625  03ED  07C9               	addwf	___ftadd@exp2,f
  7626  03EE                     l5141:	
  7627  03EE  084A               	movf	___ftadd@exp1,w
  7628  03EF  0649               	xorwf	___ftadd@exp2,w
  7629  03F0  1D03               	skipz
  7630  03F1  2BE4               	goto	l5139
  7631  03F2                     l2722:	
  7632  03F2  1FC8               	btfss	___ftadd@sign,7
  7633  03F3  2C04               	goto	l5145
  7634  03F4  30FF               	movlw	255
  7635  03F5  06BE               	xorwf	___ftadd@f1,f
  7636  03F6  30FF               	movlw	255
  7637  03F7  06BF               	xorwf	___ftadd@f1+1,f
  7638  03F8  30FF               	movlw	255
  7639  03F9  06C0               	xorwf	___ftadd@f1+2,f
  7640  03FA  3001               	movlw	1
  7641  03FB  07BE               	addwf	___ftadd@f1,f
  7642  03FC  3000               	movlw	0
  7643  03FD  1803               	skipnc
  7644  03FE  3001               	movlw	1
  7645  03FF  07BF               	addwf	___ftadd@f1+1,f
  7646  0400  3000               	movlw	0
  7647  0401  1803               	skipnc
  7648  0402  3001               	movlw	1
  7649  0403  07C0               	addwf	___ftadd@f1+2,f
  7650  0404                     l5145:	
  7651  0404  1F48               	btfss	___ftadd@sign,6
  7652  0405  2C16               	goto	l5149
  7653  0406  30FF               	movlw	255
  7654  0407  06C1               	xorwf	___ftadd@f2,f
  7655  0408  30FF               	movlw	255
  7656  0409  06C2               	xorwf	___ftadd@f2+1,f
  7657  040A  30FF               	movlw	255
  7658  040B  06C3               	xorwf	___ftadd@f2+2,f
  7659  040C  3001               	movlw	1
  7660  040D  07C1               	addwf	___ftadd@f2,f
  7661  040E  3000               	movlw	0
  7662  040F  1803               	skipnc
  7663  0410  3001               	movlw	1
  7664  0411  07C2               	addwf	___ftadd@f2+1,f
  7665  0412  3000               	movlw	0
  7666  0413  1803               	skipnc
  7667  0414  3001               	movlw	1
  7668  0415  07C3               	addwf	___ftadd@f2+2,f
  7669  0416                     l5149:	
  7670  0416  01C8               	clrf	___ftadd@sign
  7671  0417  083E               	movf	___ftadd@f1,w
  7672  0418  07C1               	addwf	___ftadd@f2,f
  7673  0419  083F               	movf	___ftadd@f1+1,w
  7674  041A  3DC2               	addwfc	___ftadd@f2+1,f
  7675  041B  0840               	movf	___ftadd@f1+2,w
  7676  041C  3DC3               	addwfc	___ftadd@f2+2,f
  7677  041D  1FC3               	btfss	___ftadd@f2+2,7
  7678  041E  2C31               	goto	l5159
  7679  041F  30FF               	movlw	255
  7680  0420  06C1               	xorwf	___ftadd@f2,f
  7681  0421  30FF               	movlw	255
  7682  0422  06C2               	xorwf	___ftadd@f2+1,f
  7683  0423  30FF               	movlw	255
  7684  0424  06C3               	xorwf	___ftadd@f2+2,f
  7685  0425  3001               	movlw	1
  7686  0426  07C1               	addwf	___ftadd@f2,f
  7687  0427  3000               	movlw	0
  7688  0428  1803               	skipnc
  7689  0429  3001               	movlw	1
  7690  042A  07C2               	addwf	___ftadd@f2+1,f
  7691  042B  3000               	movlw	0
  7692  042C  1803               	skipnc
  7693  042D  3001               	movlw	1
  7694  042E  07C3               	addwf	___ftadd@f2+2,f
  7695  042F  01C8               	clrf	___ftadd@sign
  7696  0430  0AC8               	incf	___ftadd@sign,f
  7697  0431                     l5159:	
  7698  0431  0841               	movf	___ftadd@f2,w
  7699  0432  00A0               	movwf	___ftpack@arg
  7700  0433  0842               	movf	___ftadd@f2+1,w
  7701  0434  00A1               	movwf	___ftpack@arg+1
  7702  0435  0843               	movf	___ftadd@f2+2,w
  7703  0436  00A2               	movwf	___ftpack@arg+2
  7704  0437  084A               	movf	___ftadd@exp1,w
  7705  0438  00C4               	movwf	??___ftadd
  7706  0439  0844               	movf	??___ftadd,w
  7707  043A  00A3               	movwf	___ftpack@exp
  7708  043B  0848               	movf	___ftadd@sign,w
  7709  043C  00C5               	movwf	??___ftadd+1
  7710  043D  0845               	movf	??___ftadd+1,w
  7711  043E  00A4               	movwf	___ftpack@sign
  7712  043F  318A  2236         	fcall	___ftpack
  7713  0441  0020               	movlb	0	; select bank0
  7714  0442  0820               	movf	?___ftpack,w
  7715  0443  00BE               	movwf	?___ftadd
  7716  0444  0821               	movf	?___ftpack+1,w
  7717  0445  00BF               	movwf	?___ftadd+1
  7718  0446  0822               	movf	?___ftpack+2,w
  7719  0447  00C0               	movwf	?___ftadd+2
  7720  0448  0008               	return
  7721  0449                     __end_of___ftadd:	
  7722                           
  7723                           	psect	text31
  7724  11FA                     __ptext31:	
  7725 ;; *************** function _getBuz_GO *****************
  7726 ;; Defined at:
  7727 ;;		line 82 in file "../src/Buzzer_B1.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;		None
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;  i               2    4[BANK0 ] int 
  7732 ;; Return value:  Size  Location     Type
  7733 ;;                  2    0[BANK0 ] int 
  7734 ;; Registers used:
  7735 ;;		wreg, status,2, status,0
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7741 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7744 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7745 ;;Total ram usage:        6 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; Hardware stack levels required when called:    5
  7748 ;; This function calls:
  7749 ;;		Nothing
  7750 ;; This function is called by:
  7751 ;;		_setRF_Main
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           
  7756                           ;psect for function _getBuz_GO
  7757  11FA                     _getBuz_GO:	
  7758                           
  7759                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  7760                           
  7761                           ;incstack = 0
  7762                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  7763  11FA  0021               	movlb	1	; select bank1
  7764  11FB  0C47               	rrf	_Buz1^(0+128),w
  7765  11FC  3901               	andlw	1
  7766  11FD  0020               	movlb	0	; select bank0
  7767  11FE  00A2               	movwf	??_getBuz_GO
  7768  11FF  01A3               	clrf	??_getBuz_GO+1
  7769  1200  0822               	movf	??_getBuz_GO,w
  7770  1201  00A4               	movwf	getBuz_GO@i
  7771  1202  0823               	movf	??_getBuz_GO+1,w
  7772  1203  00A5               	movwf	getBuz_GO@i+1
  7773                           
  7774                           ;Buzzer_B1.c: 84: return i;
  7775  1204  0825               	movf	getBuz_GO@i+1,w
  7776  1205  01A1               	clrf	?_getBuz_GO+1
  7777  1206  07A1               	addwf	?_getBuz_GO+1,f
  7778  1207  0824               	movf	getBuz_GO@i,w
  7779  1208  01A0               	clrf	?_getBuz_GO
  7780  1209  07A0               	addwf	?_getBuz_GO,f
  7781  120A  0008               	return
  7782  120B                     __end_of_getBuz_GO:	
  7783                           
  7784                           	psect	text32
  7785  117C                     __ptext32:	
  7786 ;; *************** function _RF_RxDisable *****************
  7787 ;; Defined at:
  7788 ;;		line 188 in file "../src/RF_Control_B1.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;		None
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;		None
  7793 ;; Return value:  Size  Location     Type
  7794 ;;		None               void
  7795 ;; Registers used:
  7796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;Total ram usage:        0 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    7
  7809 ;; This function calls:
  7810 ;;		_CC2500_WriteCommand
  7811 ;; This function is called by:
  7812 ;;		_setRF_Main
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           
  7817                           ;psect for function _RF_RxDisable
  7818  117C                     _RF_RxDisable:	
  7819                           
  7820                           ;RF_Control_B1.c: 189: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  7821                           
  7822                           ;incstack = 0
  7823                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7824  117C  0021               	movlb	1	; select bank1
  7825  117D  18D3               	btfsc	_RF1^(0+128),1
  7826  117E  2981               	goto	l1995
  7827  117F  1DD3               	btfss	_RF1^(0+128),3
  7828  1180  0008               	return
  7829  1181                     l1995:	
  7830                           
  7831                           ;RF_Control_B1.c: 190: RF1.RxStatus = 0;
  7832  1181  11D3               	bcf	_RF1^(0+128),3
  7833                           
  7834                           ;RF_Control_B1.c: 191: RF1.ReceiveGO = 0;
  7835  1182  10D3               	bcf	_RF1^(0+128),1
  7836                           
  7837                           ;RF_Control_B1.c: 192: CC2500_WriteCommand(0x36);
  7838  1183  3036               	movlw	54
  7839  1184  3193  233F  3191   	fcall	_CC2500_WriteCommand
  7840                           
  7841                           ;RF_Control_B1.c: 193: CC2500_WriteCommand(0x3A);
  7842  1187  303A               	movlw	58
  7843  1188  3193  233F         	fcall	_CC2500_WriteCommand
  7844  118A  0008               	return
  7845  118B                     __end_of_RF_RxDisable:	
  7846                           
  7847                           	psect	text33
  7848  09D6                     __ptext33:	
  7849 ;; *************** function _CC2500_TxData *****************
  7850 ;; Defined at:
  7851 ;;		line 32 in file "../src/CC2500_B1.c"
  7852 ;; Parameters:    Size  Location     Type
  7853 ;;		None
  7854 ;; Auto vars:     Size  Location     Type
  7855 ;;  loop_e          1    5[BANK0 ] unsigned char 
  7856 ;; Return value:  Size  Location     Type
  7857 ;;		None               void
  7858 ;; Registers used:
  7859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7860 ;; Tracked objects:
  7861 ;;		On entry : 0/0
  7862 ;;		On exit  : 0/0
  7863 ;;		Unchanged: 0/0
  7864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7869 ;;Total ram usage:        2 bytes
  7870 ;; Hardware stack levels used:    1
  7871 ;; Hardware stack levels required when called:    7
  7872 ;; This function calls:
  7873 ;;		_CC2500_WriteByte
  7874 ;;		_CC2500_WriteCommand
  7875 ;;		_Timeout_Counter
  7876 ;;		_set_TimeoutCleared
  7877 ;; This function is called by:
  7878 ;;		_setRF_Main
  7879 ;; This function uses a non-reentrant model
  7880 ;;
  7881                           
  7882                           
  7883                           ;psect for function _CC2500_TxData
  7884  09D6                     _CC2500_TxData:	
  7885                           
  7886                           ;CC2500_B1.c: 33: unsigned char loop_e;
  7887                           ;CC2500_B1.c: 35: RC4 = 0;
  7888                           
  7889                           ;incstack = 0
  7890                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7891  09D6  0020               	movlb	0	; select bank0
  7892  09D7  120E               	bcf	14,4	;volatile
  7893                           
  7894                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  7895  09D8  307F               	movlw	127
  7896  09D9  00A4               	movwf	??_CC2500_TxData
  7897  09DA  0824               	movf	??_CC2500_TxData,w
  7898  09DB  00FB               	movwf	_SPI0Buffer
  7899                           
  7900                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  7901  09DC  29E0               	goto	l5879
  7902  09DD                     l5877:	
  7903                           
  7904                           ;CC2500_B1.c: 38: Timeout_Counter();
  7905  09DD  3193  2327  3189   	fcall	_Timeout_Counter
  7906  09E0                     l5879:	
  7907  09E0  0020               	movlb	0	; select bank0
  7908  09E1  1D0E               	btfss	14,2	;volatile
  7909  09E2  29E6               	goto	l5883
  7910  09E3  0021               	movlb	1	; select bank1
  7911  09E4  1D44               	btfss	(_myMain^(0+128)+15),2
  7912  09E5  29DD               	goto	l5877
  7913  09E6                     l5883:	
  7914                           
  7915                           ;CC2500_B1.c: 39: };
  7916                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  7917  09E6  3190  206D  3189   	fcall	_set_TimeoutCleared
  7918                           
  7919                           ;CC2500_B1.c: 41: CC2500_WriteByte();
  7920  09E9  3192  2268  3189   	fcall	_CC2500_WriteByte
  7921                           
  7922                           ;CC2500_B1.c: 42: SPI0Buffer = Tx_Length;
  7923  09EC  0021               	movlb	1	; select bank1
  7924  09ED  0863               	movf	_Tx_Length^(0+128),w
  7925  09EE  0020               	movlb	0	; select bank0
  7926  09EF  00A4               	movwf	??_CC2500_TxData
  7927  09F0  0824               	movf	??_CC2500_TxData,w
  7928  09F1  00FB               	movwf	_SPI0Buffer
  7929                           
  7930                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  7931  09F2  3192  2268  3189   	fcall	_CC2500_WriteByte
  7932                           
  7933                           ;CC2500_B1.c: 44: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  7934  09F5  0020               	movlb	0	; select bank0
  7935  09F6  01A5               	clrf	CC2500_TxData@loop_e
  7936  09F7                     l5897:	
  7937  09F7  0021               	movlb	1	; select bank1
  7938  09F8  0863               	movf	_Tx_Length^(0+128),w
  7939  09F9  0020               	movlb	0	; select bank0
  7940  09FA  0225               	subwf	CC2500_TxData@loop_e,w
  7941  09FB  1803               	btfsc	3,0
  7942  09FC  2A0E               	goto	l255
  7943                           
  7944                           ;CC2500_B1.c: 45: SPI0Buffer = RF_Data[loop_e];
  7945  09FD  0825               	movf	CC2500_TxData@loop_e,w
  7946  09FE  3EA0               	addlw	_RF_Data& (0+255)
  7947  09FF  0086               	movwf	6
  7948  0A00  0187               	clrf	7
  7949  0A01  0801               	movf	1,w
  7950  0A02  00A4               	movwf	??_CC2500_TxData
  7951  0A03  0824               	movf	??_CC2500_TxData,w
  7952  0A04  00FB               	movwf	_SPI0Buffer
  7953                           
  7954                           ;CC2500_B1.c: 46: CC2500_WriteByte();
  7955  0A05  3192  2268  3189   	fcall	_CC2500_WriteByte
  7956  0A08  3001               	movlw	1
  7957  0A09  0020               	movlb	0	; select bank0
  7958  0A0A  00A4               	movwf	??_CC2500_TxData
  7959  0A0B  0824               	movf	??_CC2500_TxData,w
  7960  0A0C  07A5               	addwf	CC2500_TxData@loop_e,f
  7961  0A0D  29F7               	goto	l5897
  7962  0A0E                     l255:	
  7963                           
  7964                           ;CC2500_B1.c: 47: }
  7965                           ;CC2500_B1.c: 48: RC4 = 1;
  7966  0A0E  160E               	bsf	14,4	;volatile
  7967                           
  7968                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x35);
  7969  0A0F  3035               	movlw	53
  7970  0A10  3193  233F  3189   	fcall	_CC2500_WriteCommand
  7971                           
  7972                           ;CC2500_B1.c: 50: while (RB0 == 0 && myMain.Timeout == 0) {
  7973  0A13  2A17               	goto	l5903
  7974  0A14                     l5901:	
  7975                           
  7976                           ;CC2500_B1.c: 51: Timeout_Counter();
  7977  0A14  3193  2327  3189   	fcall	_Timeout_Counter
  7978  0A17                     l5903:	
  7979  0A17  0020               	movlb	0	; select bank0
  7980  0A18  180D               	btfsc	13,0	;volatile
  7981  0A19  2A1D               	goto	l5907
  7982  0A1A  0021               	movlb	1	; select bank1
  7983  0A1B  1D44               	btfss	(_myMain^(0+128)+15),2
  7984  0A1C  2A14               	goto	l5901
  7985  0A1D                     l5907:	
  7986                           
  7987                           ;CC2500_B1.c: 52: };
  7988                           ;CC2500_B1.c: 53: set_TimeoutCleared();
  7989  0A1D  3190  206D  3189   	fcall	_set_TimeoutCleared
  7990                           
  7991                           ;CC2500_B1.c: 54: while (RB0 == 1 && myMain.Timeout == 0) {
  7992  0A20  2A24               	goto	l5911
  7993  0A21                     l5909:	
  7994                           
  7995                           ;CC2500_B1.c: 55: Timeout_Counter();
  7996  0A21  3193  2327  3189   	fcall	_Timeout_Counter
  7997  0A24                     l5911:	
  7998  0A24  0020               	movlb	0	; select bank0
  7999  0A25  1C0D               	btfss	13,0	;volatile
  8000  0A26  2A2A               	goto	l5915
  8001  0A27  0021               	movlb	1	; select bank1
  8002  0A28  1D44               	btfss	(_myMain^(0+128)+15),2
  8003  0A29  2A21               	goto	l5909
  8004  0A2A                     l5915:	
  8005                           
  8006                           ;CC2500_B1.c: 56: };
  8007                           ;CC2500_B1.c: 57: set_TimeoutCleared();
  8008  0A2A  3190  206D  3189   	fcall	_set_TimeoutCleared
  8009                           
  8010                           ;CC2500_B1.c: 58: CC2500_WriteCommand(0x36);
  8011  0A2D  3036               	movlw	54
  8012  0A2E  3193  233F  3189   	fcall	_CC2500_WriteCommand
  8013                           
  8014                           ;CC2500_B1.c: 59: CC2500_WriteCommand(0x3B);
  8015  0A31  303B               	movlw	59
  8016  0A32  3193  233F         	fcall	_CC2500_WriteCommand
  8017                           
  8018                           ;CC2500_B1.c: 60: Transceive_OK = 1;
  8019  0A34  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8020  0A35  0008               	return
  8021  0A36                     __end_of_CC2500_TxData:	
  8022                           
  8023                           	psect	text34
  8024  0D10                     __ptext34:	
  8025 ;; *************** function _CC2500_RxData *****************
  8026 ;; Defined at:
  8027 ;;		line 66 in file "../src/CC2500_B1.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;		None
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8032 ;; Return value:  Size  Location     Type
  8033 ;;		None               void
  8034 ;; Registers used:
  8035 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;Total ram usage:        2 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:    7
  8048 ;; This function calls:
  8049 ;;		_CC2500_ReadByte
  8050 ;;		_CC2500_ReadStatus
  8051 ;;		_CC2500_WriteByte
  8052 ;;		_CC2500_WriteCommand
  8053 ;;		_Timeout_Counter
  8054 ;;		_set_TimeoutCleared
  8055 ;; This function is called by:
  8056 ;;		_setRF_Main
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           
  8061                           ;psect for function _CC2500_RxData
  8062  0D10                     _CC2500_RxData:	
  8063                           
  8064                           ;CC2500_B1.c: 67: unsigned char loop_f;
  8065                           ;CC2500_B1.c: 71: if (RB0 == 1)
  8066                           
  8067                           ;incstack = 0
  8068                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8069  0D10  0020               	movlb	0	; select bank0
  8070  0D11  180D               	btfsc	13,0	;volatile
  8071  0D12  2D17               	goto	l5929
  8072  0D13  2D20               	goto	l5935
  8073  0D14                     l5927:	
  8074                           ;CC2500_B1.c: 72: {
  8075                           ;CC2500_B1.c: 73: while (RB0 == 1 && myMain.Timeout == 0) {
  8076                           
  8077                           
  8078                           ;CC2500_B1.c: 74: Timeout_Counter();
  8079  0D14  3193  2327  318D   	fcall	_Timeout_Counter
  8080  0D17                     l5929:	
  8081  0D17  0020               	movlb	0	; select bank0
  8082  0D18  1C0D               	btfss	13,0	;volatile
  8083  0D19  2D1D               	goto	l5933
  8084  0D1A  0021               	movlb	1	; select bank1
  8085  0D1B  1D44               	btfss	(_myMain^(0+128)+15),2
  8086  0D1C  2D14               	goto	l5927
  8087  0D1D                     l5933:	
  8088                           
  8089                           ;CC2500_B1.c: 75: };
  8090                           ;CC2500_B1.c: 76: set_TimeoutCleared();
  8091  0D1D  3190  206D  318D   	fcall	_set_TimeoutCleared
  8092  0D20                     l5935:	
  8093                           
  8094                           ;CC2500_B1.c: 77: }
  8095                           ;CC2500_B1.c: 79: CC2500_ReadStatus(0x3B);
  8096  0D20  303B               	movlw	59
  8097  0D21  3194  2489  318D   	fcall	_CC2500_ReadStatus
  8098                           
  8099                           ;CC2500_B1.c: 80: if (s_data != 0) {
  8100  0D24  0021               	movlb	1	; select bank1
  8101  0D25  0866               	movf	_s_data^(0+128),w
  8102  0D26  1903               	btfsc	3,2
  8103  0D27  0008               	return
  8104                           
  8105                           ;CC2500_B1.c: 81: RC4 = 0;
  8106  0D28  0020               	movlb	0	; select bank0
  8107  0D29  120E               	bcf	14,4	;volatile
  8108                           
  8109                           ;CC2500_B1.c: 82: SPI0Buffer = 0x3F + 0xC0;
  8110  0D2A  30FF               	movlw	255
  8111  0D2B  00A4               	movwf	??_CC2500_RxData
  8112  0D2C  0824               	movf	??_CC2500_RxData,w
  8113  0D2D  00FB               	movwf	_SPI0Buffer
  8114                           
  8115                           ;CC2500_B1.c: 83: while (RC2 == 1 && myMain.Timeout == 0) {
  8116  0D2E  2D32               	goto	l5945
  8117  0D2F                     l5943:	
  8118                           
  8119                           ;CC2500_B1.c: 84: Timeout_Counter();
  8120  0D2F  3193  2327  318D   	fcall	_Timeout_Counter
  8121  0D32                     l5945:	
  8122  0D32  0020               	movlb	0	; select bank0
  8123  0D33  1D0E               	btfss	14,2	;volatile
  8124  0D34  2D38               	goto	l5949
  8125  0D35  0021               	movlb	1	; select bank1
  8126  0D36  1D44               	btfss	(_myMain^(0+128)+15),2
  8127  0D37  2D2F               	goto	l5943
  8128  0D38                     l5949:	
  8129                           
  8130                           ;CC2500_B1.c: 85: };
  8131                           ;CC2500_B1.c: 86: set_TimeoutCleared();
  8132  0D38  3190  206D  318D   	fcall	_set_TimeoutCleared
  8133                           
  8134                           ;CC2500_B1.c: 87: CC2500_WriteByte();
  8135  0D3B  3192  2268  318D   	fcall	_CC2500_WriteByte
  8136                           
  8137                           ;CC2500_B1.c: 89: CC2500_ReadByte();
  8138  0D3E  3193  2310  318D   	fcall	_CC2500_ReadByte
  8139                           
  8140                           ;CC2500_B1.c: 90: Rx_Length = SPI0Buffer;
  8141  0D41  087B               	movf	_SPI0Buffer,w
  8142  0D42  0020               	movlb	0	; select bank0
  8143  0D43  00A4               	movwf	??_CC2500_RxData
  8144  0D44  0824               	movf	??_CC2500_RxData,w
  8145  0D45  0021               	movlb	1	; select bank1
  8146  0D46  00E2               	movwf	_Rx_Length^(0+128)
  8147                           
  8148                           ;CC2500_B1.c: 91: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8149  0D47  0020               	movlb	0	; select bank0
  8150  0D48  01A5               	clrf	CC2500_RxData@loop_f
  8151  0D49                     l5965:	
  8152  0D49  0021               	movlb	1	; select bank1
  8153  0D4A  0862               	movf	_Rx_Length^(0+128),w
  8154  0D4B  0020               	movlb	0	; select bank0
  8155  0D4C  0225               	subwf	CC2500_RxData@loop_f,w
  8156  0D4D  1803               	btfsc	3,0
  8157  0D4E  2D60               	goto	l5967
  8158                           
  8159                           ;CC2500_B1.c: 92: CC2500_ReadByte();
  8160  0D4F  3193  2310  318D   	fcall	_CC2500_ReadByte
  8161                           
  8162                           ;CC2500_B1.c: 93: RF_Data[loop_f] = SPI0Buffer;
  8163  0D52  087B               	movf	_SPI0Buffer,w
  8164  0D53  0020               	movlb	0	; select bank0
  8165  0D54  00A4               	movwf	??_CC2500_RxData
  8166  0D55  0825               	movf	CC2500_RxData@loop_f,w
  8167  0D56  3EA0               	addlw	_RF_Data& (0+255)
  8168  0D57  0086               	movwf	6
  8169  0D58  0187               	clrf	7
  8170  0D59  0824               	movf	??_CC2500_RxData,w
  8171  0D5A  0081               	movwf	1
  8172  0D5B  3001               	movlw	1
  8173  0D5C  00A4               	movwf	??_CC2500_RxData
  8174  0D5D  0824               	movf	??_CC2500_RxData,w
  8175  0D5E  07A5               	addwf	CC2500_RxData@loop_f,f
  8176  0D5F  2D49               	goto	l5965
  8177  0D60                     l5967:	
  8178                           
  8179                           ;CC2500_B1.c: 94: }
  8180                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  8181  0D60  3193  2310  318D   	fcall	_CC2500_ReadByte
  8182                           
  8183                           ;CC2500_B1.c: 96: RSSI = SPI0Buffer;
  8184  0D63  087B               	movf	_SPI0Buffer,w
  8185  0D64  0020               	movlb	0	; select bank0
  8186  0D65  00A4               	movwf	??_CC2500_RxData
  8187  0D66  0824               	movf	??_CC2500_RxData,w
  8188  0D67  0021               	movlb	1	; select bank1
  8189  0D68  00E1               	movwf	_RSSI^(0+128)
  8190                           
  8191                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8192  0D69  3193  2310  318D   	fcall	_CC2500_ReadByte
  8193                           
  8194                           ;CC2500_B1.c: 98: CRC = SPI0Buffer;
  8195  0D6C  087B               	movf	_SPI0Buffer,w
  8196  0D6D  0020               	movlb	0	; select bank0
  8197  0D6E  00A4               	movwf	??_CC2500_RxData
  8198  0D6F  0824               	movf	??_CC2500_RxData,w
  8199  0D70  0021               	movlb	1	; select bank1
  8200  0D71  00DA               	movwf	_CRC^(0+128)
  8201                           
  8202                           ;CC2500_B1.c: 99: RC4 = 1;
  8203  0D72  0020               	movlb	0	; select bank0
  8204  0D73  160E               	bsf	14,4	;volatile
  8205                           
  8206                           ;CC2500_B1.c: 100: if (CRC & 0x80)
  8207  0D74  0021               	movlb	1	; select bank1
  8208  0D75  1BDA               	btfsc	_CRC^(0+128),7
  8209                           
  8210                           ;CC2500_B1.c: 101: Receive_OK = 1;
  8211  0D76  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8212                           
  8213                           ;CC2500_B1.c: 103: CC2500_WriteCommand(0x36);
  8214  0D77  3036               	movlw	54
  8215  0D78  3193  233F  318D   	fcall	_CC2500_WriteCommand
  8216                           
  8217                           ;CC2500_B1.c: 104: CC2500_WriteCommand(0x3A);
  8218  0D7B  303A               	movlw	58
  8219  0D7C  3193  233F         	fcall	_CC2500_WriteCommand
  8220                           
  8221                           ;CC2500_B1.c: 105: RF1.RxStatus = 0;
  8222  0D7E  0021               	movlb	1	; select bank1
  8223  0D7F  11D3               	bcf	_RF1^(0+128),3
  8224                           
  8225                           ;CC2500_B1.c: 106: RF1.ReceiveGO = 1;
  8226  0D80  14D3               	bsf	_RF1^(0+128),1
  8227  0D81  0008               	return
  8228  0D82                     __end_of_CC2500_RxData:	
  8229                           
  8230                           	psect	text35
  8231  1489                     __ptext35:	
  8232 ;; *************** function _CC2500_ReadStatus *****************
  8233 ;; Defined at:
  8234 ;;		line 294 in file "../src/CC2500_B1.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;  status_addr     1    wreg     unsigned char 
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8239 ;; Return value:  Size  Location     Type
  8240 ;;		None               void
  8241 ;; Registers used:
  8242 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8243 ;; Tracked objects:
  8244 ;;		On entry : 0/0
  8245 ;;		On exit  : 0/0
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;Total ram usage:        2 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:    6
  8255 ;; This function calls:
  8256 ;;		_CC2500_ReadByte
  8257 ;;		_CC2500_WriteByte
  8258 ;;		_Timeout_Counter
  8259 ;;		_set_TimeoutCleared
  8260 ;; This function is called by:
  8261 ;;		_CC2500_RxData
  8262 ;; This function uses a non-reentrant model
  8263 ;;
  8264                           
  8265                           
  8266                           ;psect for function _CC2500_ReadStatus
  8267  1489                     _CC2500_ReadStatus:	
  8268                           
  8269                           ;incstack = 0
  8270                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8271                           ;CC2500_ReadStatus@status_addr stored from wreg
  8272  1489  0020               	movlb	0	; select bank0
  8273  148A  00A3               	movwf	CC2500_ReadStatus@status_addr
  8274                           
  8275                           ;CC2500_B1.c: 295: RC4 = 0;
  8276  148B  120E               	bcf	14,4	;volatile
  8277                           
  8278                           ;CC2500_B1.c: 296: SPI0Buffer = status_addr + 0xC0;
  8279  148C  0823               	movf	CC2500_ReadStatus@status_addr,w
  8280  148D  3EC0               	addlw	192
  8281  148E  00A2               	movwf	??_CC2500_ReadStatus
  8282  148F  0822               	movf	??_CC2500_ReadStatus,w
  8283  1490  00FB               	movwf	_SPI0Buffer
  8284                           
  8285                           ;CC2500_B1.c: 298: while (RC2 == 1 && myMain.Timeout == 0) {
  8286  1491  2C95               	goto	l5785
  8287  1492                     l5783:	
  8288                           
  8289                           ;CC2500_B1.c: 299: Timeout_Counter();
  8290  1492  3193  2327  3194   	fcall	_Timeout_Counter
  8291  1495                     l5785:	
  8292  1495  0020               	movlb	0	; select bank0
  8293  1496  1D0E               	btfss	14,2	;volatile
  8294  1497  2C9B               	goto	l5789
  8295  1498  0021               	movlb	1	; select bank1
  8296  1499  1D44               	btfss	(_myMain^(0+128)+15),2
  8297  149A  2C92               	goto	l5783
  8298  149B                     l5789:	
  8299                           
  8300                           ;CC2500_B1.c: 300: };
  8301                           ;CC2500_B1.c: 301: set_TimeoutCleared();
  8302  149B  3190  206D  3194   	fcall	_set_TimeoutCleared
  8303                           
  8304                           ;CC2500_B1.c: 302: CC2500_WriteByte();
  8305  149E  3192  2268  3194   	fcall	_CC2500_WriteByte
  8306                           
  8307                           ;CC2500_B1.c: 303: CC2500_ReadByte();
  8308  14A1  3193  2310         	fcall	_CC2500_ReadByte
  8309                           
  8310                           ;CC2500_B1.c: 304: RC4 = 1;
  8311  14A3  0020               	movlb	0	; select bank0
  8312  14A4  160E               	bsf	14,4	;volatile
  8313                           
  8314                           ;CC2500_B1.c: 306: s_data = SPI0Buffer;
  8315  14A5  087B               	movf	_SPI0Buffer,w
  8316  14A6  00A2               	movwf	??_CC2500_ReadStatus
  8317  14A7  0822               	movf	??_CC2500_ReadStatus,w
  8318  14A8  0021               	movlb	1	; select bank1
  8319  14A9  00E6               	movwf	_s_data^(0+128)
  8320  14AA  0008               	return
  8321  14AB                     __end_of_CC2500_ReadStatus:	
  8322                           
  8323                           	psect	text36
  8324  1310                     __ptext36:	
  8325 ;; *************** function _CC2500_ReadByte *****************
  8326 ;; Defined at:
  8327 ;;		line 231 in file "../src/CC2500_B1.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;		None
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8332 ;; Return value:  Size  Location     Type
  8333 ;;		None               void
  8334 ;; Registers used:
  8335 ;;		wreg, status,2, status,0
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;Total ram usage:        2 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    5
  8348 ;; This function calls:
  8349 ;;		Nothing
  8350 ;; This function is called by:
  8351 ;;		_CC2500_RxData
  8352 ;;		_CC2500_ReadStatus
  8353 ;;		_CC2500_ReadREG
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           
  8358                           ;psect for function _CC2500_ReadByte
  8359  1310                     _CC2500_ReadByte:	
  8360                           
  8361                           ;CC2500_B1.c: 232: unsigned char loop_b;
  8362                           ;CC2500_B1.c: 233: for (loop_b = 0; loop_b < 8; loop_b++) {
  8363                           
  8364                           ;incstack = 0
  8365                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8366  1310  0020               	movlb	0	; select bank0
  8367  1311  01A1               	clrf	CC2500_ReadByte@loop_b
  8368  1312                     L4:	
  8369  1312  3008               	movlw	8
  8370  1313  0221               	subwf	CC2500_ReadByte@loop_b,w
  8371  1314  1803               	btfsc	3,0
  8372  1315  0008               	return
  8373                           
  8374                           ;CC2500_B1.c: 234: RC1 = 1;
  8375  1316  148E               	bsf	14,1	;volatile
  8376                           
  8377                           ;CC2500_B1.c: 235: SPI0Buffer <<= 1;
  8378  1317  1003               	clrc
  8379  1318  0DFB               	rlf	_SPI0Buffer,f
  8380                           
  8381                           ;CC2500_B1.c: 236: if (RC2 == 1)
  8382  1319  1D0E               	btfss	14,2	;volatile
  8383  131A  2B1D               	goto	l5677
  8384                           
  8385                           ;CC2500_B1.c: 237: SPI0Buffer |= 0x01;
  8386  131B  147B               	bsf	_SPI0Buffer,0
  8387  131C  2B21               	goto	l5679
  8388  131D                     l5677:	
  8389                           
  8390                           ;CC2500_B1.c: 238: else
  8391                           ;CC2500_B1.c: 239: SPI0Buffer &= 0xFE;
  8392  131D  30FE               	movlw	254
  8393  131E  00A0               	movwf	??_CC2500_ReadByte
  8394  131F  0820               	movf	??_CC2500_ReadByte,w
  8395  1320  05FB               	andwf	_SPI0Buffer,f
  8396  1321                     l5679:	
  8397                           
  8398                           ;CC2500_B1.c: 240: RC1 = 0;
  8399  1321  108E               	bcf	14,1	;volatile
  8400  1322  3001               	movlw	1
  8401  1323  00A0               	movwf	??_CC2500_ReadByte
  8402  1324  0820               	movf	??_CC2500_ReadByte,w
  8403  1325  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8404  1326  2B12               	goto	L4
  8405  1327                     __end_of_CC2500_ReadByte:	
  8406                           
  8407                           	psect	text37
  8408  1FF1                     __ptext37:	
  8409 ;; *************** function _RF_Initialization *****************
  8410 ;; Defined at:
  8411 ;;		line 9 in file "../src/RF_Control_B1.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;		None
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;		None
  8416 ;; Return value:  Size  Location     Type
  8417 ;;		None               void
  8418 ;; Registers used:
  8419 ;;		wreg, status,2, status,0, pclath, cstack
  8420 ;; Tracked objects:
  8421 ;;		On entry : 0/0
  8422 ;;		On exit  : 0/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;Total ram usage:        0 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:    6
  8432 ;; This function calls:
  8433 ;;		_setRF_Initialization
  8434 ;; This function is called by:
  8435 ;;		_main
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           
  8440                           ;psect for function _RF_Initialization
  8441  1FF1                     _RF_Initialization:	
  8442                           
  8443                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8444                           
  8445                           ;incstack = 0
  8446                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8447  1FF1  3190  208C         	fcall	_setRF_Initialization
  8448  1FF3  0008               	return
  8449  1FF4                     __end_of_RF_Initialization:	
  8450                           
  8451                           	psect	text38
  8452  108C                     __ptext38:	
  8453 ;; *************** function _setRF_Initialization *****************
  8454 ;; Defined at:
  8455 ;;		line 43 in file "../src/RF_Control_B1.c"
  8456 ;; Parameters:    Size  Location     Type
  8457 ;;		None
  8458 ;; Auto vars:     Size  Location     Type
  8459 ;;		None
  8460 ;; Return value:  Size  Location     Type
  8461 ;;		None               void
  8462 ;; Registers used:
  8463 ;;		wreg
  8464 ;; Tracked objects:
  8465 ;;		On entry : 0/0
  8466 ;;		On exit  : 0/0
  8467 ;;		Unchanged: 0/0
  8468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8472 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8473 ;;Total ram usage:        1 bytes
  8474 ;; Hardware stack levels used:    1
  8475 ;; Hardware stack levels required when called:    5
  8476 ;; This function calls:
  8477 ;;		Nothing
  8478 ;; This function is called by:
  8479 ;;		_RF_Initialization
  8480 ;; This function uses a non-reentrant model
  8481 ;;
  8482                           
  8483                           
  8484                           ;psect for function _setRF_Initialization
  8485  108C                     _setRF_Initialization:	
  8486                           
  8487                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  8488                           
  8489                           ;incstack = 0
  8490                           ; Regs used in _setRF_Initialization: [wreg]
  8491  108C  3015               	movlw	21
  8492  108D  0020               	movlb	0	; select bank0
  8493  108E  00A0               	movwf	??_setRF_Initialization
  8494  108F  0820               	movf	??_setRF_Initialization,w
  8495  1090  0021               	movlb	1	; select bank1
  8496  1091  00E3               	movwf	_Tx_Length^(0+128)
  8497  1092  0008               	return
  8498  1093                     __end_of_setRF_Initialization:	
  8499                           
  8500                           	psect	text39
  8501  116D                     __ptext39:	
  8502 ;; *************** function _Mcu_Initialization *****************
  8503 ;; Defined at:
  8504 ;;		line 30 in file "../src/MCU_B1.c"
  8505 ;; Parameters:    Size  Location     Type
  8506 ;;		None
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;		None
  8509 ;; Return value:  Size  Location     Type
  8510 ;;		None               void
  8511 ;; Registers used:
  8512 ;;		wreg, status,2, status,0, pclath, cstack
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;Total ram usage:        0 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; Hardware stack levels required when called:    6
  8525 ;; This function calls:
  8526 ;;		_ADC_Set
  8527 ;;		_Fosc_Set
  8528 ;;		_IOC_Set
  8529 ;;		_IO_Set
  8530 ;;		_TMR0_Set
  8531 ;; This function is called by:
  8532 ;;		_main
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536                           
  8537                           ;psect for function _Mcu_Initialization
  8538  116D                     _Mcu_Initialization:	
  8539                           
  8540                           ;MCU_B1.c: 32: Fosc_Set();
  8541                           
  8542                           ;incstack = 0
  8543                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8544  116D  3190  2069  3191   	fcall	_Fosc_Set
  8545                           
  8546                           ;MCU_B1.c: 34: IO_Set();
  8547  1170  3193  2358  3191   	fcall	_IO_Set
  8548                           
  8549                           ;MCU_B1.c: 36: TMR0_Set();
  8550  1173  3190  20AB  3191   	fcall	_TMR0_Set
  8551                           
  8552                           ;MCU_B1.c: 38: ;;
  8553                           ;MCU_B1.c: 40: ADC_Set();
  8554  1176  3190  2085  3191   	fcall	_ADC_Set
  8555                           
  8556                           ;MCU_B1.c: 44: ;;
  8557                           ;MCU_B1.c: 46: IOC_Set();
  8558  1179  3191  2127         	fcall	_IOC_Set
  8559  117B  0008               	return
  8560  117C                     __end_of_Mcu_Initialization:	
  8561                           
  8562                           	psect	text40
  8563  10AB                     __ptext40:	
  8564 ;; *************** function _TMR0_Set *****************
  8565 ;; Defined at:
  8566 ;;		line 126 in file "../src/MCU_B1.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;		None
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;		None
  8571 ;; Return value:  Size  Location     Type
  8572 ;;		None               void
  8573 ;; Registers used:
  8574 ;;		wreg, status,2
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;Total ram usage:        0 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    5
  8587 ;; This function calls:
  8588 ;;		Nothing
  8589 ;; This function is called by:
  8590 ;;		_Mcu_Initialization
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           
  8595                           ;psect for function _TMR0_Set
  8596  10AB                     _TMR0_Set:	
  8597                           
  8598                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
  8599                           
  8600                           ;incstack = 0
  8601                           ; Regs used in _TMR0_Set: [wreg+status,2]
  8602  10AB  0021               	movlb	1	; select bank1
  8603  10AC  0195               	clrf	21	;volatile
  8604                           
  8605                           ;MCU_B1.c: 129: TMR0 = (256-190);
  8606  10AD  3042               	movlw	66
  8607  10AE  0020               	movlb	0	; select bank0
  8608  10AF  0095               	movwf	21	;volatile
  8609                           
  8610                           ;MCU_B1.c: 130: TMR0IE = 1;
  8611  10B0  168B               	bsf	11,5	;volatile
  8612                           
  8613                           ;MCU_B1.c: 131: GIE = 1;
  8614  10B1  178B               	bsf	11,7	;volatile
  8615  10B2  0008               	return
  8616  10B3                     __end_of_TMR0_Set:	
  8617                           
  8618                           	psect	text41
  8619  1358                     __ptext41:	
  8620 ;; *************** function _IO_Set *****************
  8621 ;; Defined at:
  8622 ;;		line 60 in file "../src/MCU_B1.c"
  8623 ;; Parameters:    Size  Location     Type
  8624 ;;		None
  8625 ;; Auto vars:     Size  Location     Type
  8626 ;;		None
  8627 ;; Return value:  Size  Location     Type
  8628 ;;		None               void
  8629 ;; Registers used:
  8630 ;;		wreg, status,2
  8631 ;; Tracked objects:
  8632 ;;		On entry : 0/0
  8633 ;;		On exit  : 0/0
  8634 ;;		Unchanged: 0/0
  8635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8640 ;;Total ram usage:        0 bytes
  8641 ;; Hardware stack levels used:    1
  8642 ;; Hardware stack levels required when called:    5
  8643 ;; This function calls:
  8644 ;;		Nothing
  8645 ;; This function is called by:
  8646 ;;		_Mcu_Initialization
  8647 ;; This function uses a non-reentrant model
  8648 ;;
  8649                           
  8650                           
  8651                           ;psect for function _IO_Set
  8652  1358                     _IO_Set:	
  8653                           
  8654                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  8655                           
  8656                           ;incstack = 0
  8657                           ; Regs used in _IO_Set: [wreg+status,2]
  8658  1358  3077               	movlw	119
  8659  1359  0021               	movlb	1	; select bank1
  8660  135A  008C               	movwf	12	;volatile
  8661                           
  8662                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  8663  135B  3007               	movlw	7
  8664  135C  008D               	movwf	13	;volatile
  8665                           
  8666                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  8667  135D  300C               	movlw	12
  8668  135E  008E               	movwf	14	;volatile
  8669                           
  8670                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  8671  135F  0022               	movlb	2	; select bank2
  8672  1360  018C               	clrf	12	;volatile
  8673                           
  8674                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  8675  1361  3002               	movlw	2
  8676  1362  008D               	movwf	13	;volatile
  8677                           
  8678                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  8679  1363  018E               	clrf	14	;volatile
  8680                           
  8681                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  8682  1364  3022               	movlw	34
  8683  1365  0023               	movlb	3	; select bank3
  8684  1366  008C               	movwf	12	;volatile
  8685                           
  8686                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  8687  1367  018D               	clrf	13	;volatile
  8688                           
  8689                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  8690  1368  018E               	clrf	14	;volatile
  8691                           
  8692                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  8693  1369  3077               	movlw	119
  8694  136A  0020               	movlb	0	; select bank0
  8695  136B  008C               	movwf	12	;volatile
  8696                           
  8697                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  8698  136C  3007               	movlw	7
  8699  136D  008D               	movwf	13	;volatile
  8700                           
  8701                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  8702  136E  300C               	movlw	12
  8703  136F  008E               	movwf	14	;volatile
  8704  1370  0008               	return
  8705  1371                     __end_of_IO_Set:	
  8706                           
  8707                           	psect	text42
  8708  1127                     __ptext42:	
  8709 ;; *************** function _IOC_Set *****************
  8710 ;; Defined at:
  8711 ;;		line 263 in file "../src/MCU_B1.c"
  8712 ;; Parameters:    Size  Location     Type
  8713 ;;		None
  8714 ;; Auto vars:     Size  Location     Type
  8715 ;;		None
  8716 ;; Return value:  Size  Location     Type
  8717 ;;		None               void
  8718 ;; Registers used:
  8719 ;;		wreg, status,2
  8720 ;; Tracked objects:
  8721 ;;		On entry : 0/0
  8722 ;;		On exit  : 0/0
  8723 ;;		Unchanged: 0/0
  8724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8729 ;;Total ram usage:        0 bytes
  8730 ;; Hardware stack levels used:    1
  8731 ;; Hardware stack levels required when called:    5
  8732 ;; This function calls:
  8733 ;;		Nothing
  8734 ;; This function is called by:
  8735 ;;		_Mcu_Initialization
  8736 ;; This function uses a non-reentrant model
  8737 ;;
  8738                           
  8739                           
  8740                           ;psect for function _IOC_Set
  8741  1127                     _IOC_Set:	
  8742                           
  8743                           ;MCU_B1.c: 264: WPUB2 = 0;
  8744                           
  8745                           ;incstack = 0
  8746                           ; Regs used in _IOC_Set: [wreg+status,2]
  8747  1127  0024               	movlb	4	; select bank4
  8748  1128  110D               	bcf	13,2	;volatile
  8749                           
  8750                           ;MCU_B1.c: 266: IOCBP = 0b00000100;
  8751  1129  3004               	movlw	4
  8752  112A  0027               	movlb	7	; select bank7
  8753  112B  0094               	movwf	20	;volatile
  8754                           
  8755                           ;MCU_B1.c: 267: IOCBN = 0b00000100;
  8756  112C  3004               	movlw	4
  8757  112D  0095               	movwf	21	;volatile
  8758                           
  8759                           ;MCU_B1.c: 282: IOCBF = 0b00000000;
  8760  112E  0196               	clrf	22	;volatile
  8761                           
  8762                           ;MCU_B1.c: 284: IOCIE = 1;
  8763  112F  158B               	bsf	11,3	;volatile
  8764                           
  8765                           ;MCU_B1.c: 285: IOCIF = 0;
  8766  1130  100B               	bcf	11,0	;volatile
  8767                           
  8768                           ;MCU_B1.c: 286: PEIE = 1;
  8769  1131  170B               	bsf	11,6	;volatile
  8770                           
  8771                           ;MCU_B1.c: 287: GIE = 1;
  8772  1132  178B               	bsf	11,7	;volatile
  8773  1133  0008               	return
  8774  1134                     __end_of_IOC_Set:	
  8775                           
  8776                           	psect	text43
  8777  1069                     __ptext43:	
  8778 ;; *************** function _Fosc_Set *****************
  8779 ;; Defined at:
  8780 ;;		line 56 in file "../src/MCU_B1.c"
  8781 ;; Parameters:    Size  Location     Type
  8782 ;;		None
  8783 ;; Auto vars:     Size  Location     Type
  8784 ;;		None
  8785 ;; Return value:  Size  Location     Type
  8786 ;;		None               void
  8787 ;; Registers used:
  8788 ;;		wreg
  8789 ;; Tracked objects:
  8790 ;;		On entry : 0/0
  8791 ;;		On exit  : 0/0
  8792 ;;		Unchanged: 0/0
  8793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8798 ;;Total ram usage:        0 bytes
  8799 ;; Hardware stack levels used:    1
  8800 ;; Hardware stack levels required when called:    5
  8801 ;; This function calls:
  8802 ;;		Nothing
  8803 ;; This function is called by:
  8804 ;;		_Mcu_Initialization
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           
  8809                           ;psect for function _Fosc_Set
  8810  1069                     _Fosc_Set:	
  8811                           
  8812                           ;MCU_B1.c: 57: OSCCON = 0x78;
  8813                           
  8814                           ;incstack = 0
  8815                           ; Regs used in _Fosc_Set: [wreg]
  8816  1069  3078               	movlw	120
  8817  106A  0021               	movlb	1	; select bank1
  8818  106B  0099               	movwf	25	;volatile
  8819  106C  0008               	return
  8820  106D                     __end_of_Fosc_Set:	
  8821                           
  8822                           	psect	text44
  8823  1085                     __ptext44:	
  8824 ;; *************** function _ADC_Set *****************
  8825 ;; Defined at:
  8826 ;;		line 309 in file "../src/MCU_B1.c"
  8827 ;; Parameters:    Size  Location     Type
  8828 ;;		None
  8829 ;; Auto vars:     Size  Location     Type
  8830 ;;		None
  8831 ;; Return value:  Size  Location     Type
  8832 ;;		None               void
  8833 ;; Registers used:
  8834 ;;		wreg
  8835 ;; Tracked objects:
  8836 ;;		On entry : 0/0
  8837 ;;		On exit  : 0/0
  8838 ;;		Unchanged: 0/0
  8839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;Total ram usage:        0 bytes
  8845 ;; Hardware stack levels used:    1
  8846 ;; Hardware stack levels required when called:    5
  8847 ;; This function calls:
  8848 ;;		Nothing
  8849 ;; This function is called by:
  8850 ;;		_Mcu_Initialization
  8851 ;; This function uses a non-reentrant model
  8852 ;;
  8853                           
  8854                           
  8855                           ;psect for function _ADC_Set
  8856  1085                     _ADC_Set:	
  8857                           
  8858                           ;MCU_B1.c: 310: ADCON1 = 0xf2;
  8859                           
  8860                           ;incstack = 0
  8861                           ; Regs used in _ADC_Set: [wreg]
  8862  1085  30F2               	movlw	242
  8863  1086  0021               	movlb	1	; select bank1
  8864  1087  009E               	movwf	30	;volatile
  8865                           
  8866                           ;MCU_B1.c: 311: FVRCON = 0xc0;
  8867  1088  30C0               	movlw	192
  8868  1089  0022               	movlb	2	; select bank2
  8869  108A  0097               	movwf	23	;volatile
  8870  108B  0008               	return
  8871  108C                     __end_of_ADC_Set:	
  8872                           
  8873                           	psect	text45
  8874  110E                     __ptext45:	
  8875 ;; *************** function _LED_Main *****************
  8876 ;; Defined at:
  8877 ;;		line 47 in file "../src/LED_B1.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;		None
  8880 ;; Auto vars:     Size  Location     Type
  8881 ;;		None
  8882 ;; Return value:  Size  Location     Type
  8883 ;;		None               void
  8884 ;; Registers used:
  8885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;Total ram usage:        0 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; Hardware stack levels required when called:    7
  8898 ;; This function calls:
  8899 ;;		_setLED_Main
  8900 ;; This function is called by:
  8901 ;;		_main
  8902 ;; This function uses a non-reentrant model
  8903 ;;
  8904                           
  8905                           
  8906                           ;psect for function _LED_Main
  8907  110E                     _LED_Main:	
  8908                           
  8909                           ;LED_B1.c: 49: setLED_Main(1);
  8910                           
  8911                           ;incstack = 0
  8912                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8913  110E  3001               	movlw	1
  8914  110F  3197  2776  3191   	fcall	_setLED_Main
  8915                           
  8916                           ;LED_B1.c: 52: setLED_Main(2);
  8917  1112  3002               	movlw	2
  8918  1113  3197  2776  3191   	fcall	_setLED_Main
  8919                           
  8920                           ;LED_B1.c: 58: setLED_Main(99);
  8921  1116  3063               	movlw	99
  8922  1117  3197  2776         	fcall	_setLED_Main
  8923  1119  0008               	return
  8924  111A                     __end_of_LED_Main:	
  8925                           
  8926                           	psect	text46
  8927  1776                     __ptext46:	
  8928 ;; *************** function _setLED_Main *****************
  8929 ;; Defined at:
  8930 ;;		line 192 in file "../src/LED_B1.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;  led             1    wreg     unsigned char 
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;  led             1    4[BANK0 ] unsigned char 
  8935 ;; Return value:  Size  Location     Type
  8936 ;;		None               void
  8937 ;; Registers used:
  8938 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;Total ram usage:        3 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    6
  8951 ;; This function calls:
  8952 ;;		_LedPointSelect
  8953 ;; This function is called by:
  8954 ;;		_LED_Main
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _setLED_Main
  8960  1776                     _setLED_Main:	
  8961                           
  8962                           ;incstack = 0
  8963                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8964                           ;setLED_Main@led stored from wreg
  8965  1776  0020               	movlb	0	; select bank0
  8966  1777  00A4               	movwf	setLED_Main@led
  8967                           
  8968                           ;LED_B1.c: 193: LedPointSelect(led);
  8969  1778  0824               	movf	setLED_Main@led,w
  8970  1779  3194  2467  3197   	fcall	_LedPointSelect
  8971                           
  8972                           ;LED_B1.c: 194: if (LED->GO == 1) {
  8973  177C  0021               	movlb	1	; select bank1
  8974  177D  085F               	movf	_LED^(0+128),w
  8975  177E  0086               	movwf	6
  8976  177F  3001               	movlw	1	; select bank2/3
  8977  1780  0087               	movwf	7
  8978  1781  1C81               	btfss	1,1
  8979  1782  0008               	return
  8980                           
  8981                           ;LED_B1.c: 195: LED->Time++;
  8982  1783  0A5F               	incf	_LED^(0+128),w
  8983  1784  0086               	movwf	6
  8984  1785  3001               	movlw	1	; select bank2/3
  8985  1786  0087               	movwf	7
  8986  1787  3001               	movlw	1
  8987  1788  0781               	addwf	1,f
  8988  1789  3141               	addfsr 1,1
  8989  178A  1803               	skipnc
  8990  178B  0A81               	incf	1,f
  8991                           
  8992                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  8993  178C  0A5F               	incf	_LED^(0+128),w
  8994  178D  0086               	movwf	6
  8995  178E  3001               	movlw	1	; select bank2/3
  8996  178F  0087               	movwf	7
  8997  1790  3F40               	moviw [0]fsr1
  8998  1791  0020               	movlb	0	; select bank0
  8999  1792  00A2               	movwf	??_setLED_Main
  9000  1793  3F41               	moviw [1]fsr1
  9001  1794  00A3               	movwf	??_setLED_Main+1
  9002  1795  3000               	movlw	0
  9003  1796  0223               	subwf	??_setLED_Main+1,w
  9004  1797  3032               	movlw	50
  9005  1798  1903               	skipnz
  9006  1799  0222               	subwf	??_setLED_Main,w
  9007  179A  1C03               	skipc
  9008  179B  0008               	return
  9009                           
  9010                           ;LED_B1.c: 197: LED->Time = 0;
  9011  179C  0021               	movlb	1	; select bank1
  9012  179D  0A5F               	incf	_LED^(0+128),w
  9013  179E  0086               	movwf	6
  9014  179F  3001               	movlw	1	; select bank2/3
  9015  17A0  0087               	movwf	7
  9016  17A1  3000               	movlw	0
  9017  17A2  3FC0               	movwi [0]fsr1
  9018  17A3  3FC1               	movwi [1]fsr1
  9019                           
  9020                           ;LED_B1.c: 199: if (led == 1) {
  9021  17A4  0020               	movlb	0	; select bank0
  9022  17A5  0824               	movf	setLED_Main@led,w
  9023  17A6  3A01               	xorlw	1
  9024  17A7  1D03               	skipz
  9025  17A8  2FAC               	goto	l7407
  9026                           
  9027                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
  9028  17A9  3008               	movlw	8
  9029  17AA  068C               	xorwf	12,f
  9030                           
  9031                           ;LED_B1.c: 201: }
  9032  17AB  0008               	return
  9033  17AC                     l7407:	
  9034                           
  9035                           ;LED_B1.c: 204: else if (led == 2) {
  9036  17AC  0824               	movf	setLED_Main@led,w
  9037  17AD  3A02               	xorlw	2
  9038  17AE  1D03               	skipz
  9039  17AF  2FB3               	goto	l7411
  9040                           
  9041                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
  9042  17B0  3080               	movlw	128
  9043  17B1  068E               	xorwf	14,f
  9044                           
  9045                           ;LED_B1.c: 206: }
  9046  17B2  0008               	return
  9047  17B3                     l7411:	
  9048                           
  9049                           ;LED_B1.c: 214: else if (led == 99) {
  9050  17B3  0824               	movf	setLED_Main@led,w
  9051  17B4  3A63               	xorlw	99
  9052  17B5  1D03               	skipz
  9053  17B6  0008               	return
  9054                           
  9055                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
  9056  17B7  3020               	movlw	32
  9057  17B8  068D               	xorwf	13,f
  9058  17B9  0008               	return
  9059  17BA                     __end_of_setLED_Main:	
  9060                           
  9061                           	psect	text47
  9062  1102                     __ptext47:	
  9063 ;; *************** function _LED_Initialization *****************
  9064 ;; Defined at:
  9065 ;;		line 31 in file "../src/LED_B1.c"
  9066 ;; Parameters:    Size  Location     Type
  9067 ;;		None
  9068 ;; Auto vars:     Size  Location     Type
  9069 ;;		None
  9070 ;; Return value:  Size  Location     Type
  9071 ;;		None               void
  9072 ;; Registers used:
  9073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9074 ;; Tracked objects:
  9075 ;;		On entry : 0/0
  9076 ;;		On exit  : 0/0
  9077 ;;		Unchanged: 0/0
  9078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;Total ram usage:        0 bytes
  9084 ;; Hardware stack levels used:    1
  9085 ;; Hardware stack levels required when called:    8
  9086 ;; This function calls:
  9087 ;;		_setLED_Initialization
  9088 ;; This function is called by:
  9089 ;;		_main
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           
  9094                           ;psect for function _LED_Initialization
  9095  1102                     _LED_Initialization:	
  9096                           
  9097                           ;LED_B1.c: 33: setLED_Initialization(1);
  9098                           
  9099                           ;incstack = 0
  9100                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9101  1102  3001               	movlw	1
  9102  1103  3192  221D  3191   	fcall	_setLED_Initialization
  9103                           
  9104                           ;LED_B1.c: 36: setLED_Initialization(2);
  9105  1106  3002               	movlw	2
  9106  1107  3192  221D  3191   	fcall	_setLED_Initialization
  9107                           
  9108                           ;LED_B1.c: 42: setLED_Initialization(99);
  9109  110A  3063               	movlw	99
  9110  110B  3192  221D         	fcall	_setLED_Initialization
  9111  110D  0008               	return
  9112  110E                     __end_of_LED_Initialization:	
  9113                           
  9114                           	psect	text48
  9115  121D                     __ptext48:	
  9116 ;; *************** function _setLED_Initialization *****************
  9117 ;; Defined at:
  9118 ;;		line 63 in file "../src/LED_B1.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;  led             1    wreg     unsigned char 
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;  led             1    4[BANK0 ] unsigned char 
  9123 ;; Return value:  Size  Location     Type
  9124 ;;		None               void
  9125 ;; Registers used:
  9126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9127 ;; Tracked objects:
  9128 ;;		On entry : 0/0
  9129 ;;		On exit  : 0/0
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;Total ram usage:        1 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:    7
  9139 ;; This function calls:
  9140 ;;		_LedPointSelect
  9141 ;;		_setLED
  9142 ;; This function is called by:
  9143 ;;		_LED_Initialization
  9144 ;; This function uses a non-reentrant model
  9145 ;;
  9146                           
  9147                           
  9148                           ;psect for function _setLED_Initialization
  9149  121D                     _setLED_Initialization:	
  9150                           
  9151                           ;incstack = 0
  9152                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9153                           ;setLED_Initialization@led stored from wreg
  9154  121D  0020               	movlb	0	; select bank0
  9155  121E  00A4               	movwf	setLED_Initialization@led
  9156                           
  9157                           ;LED_B1.c: 64: LedPointSelect(led);
  9158  121F  0824               	movf	setLED_Initialization@led,w
  9159  1220  3194  2467  3192   	fcall	_LedPointSelect
  9160                           
  9161                           ;LED_B1.c: 65: LED->Enable = 1;
  9162  1223  0021               	movlb	1	; select bank1
  9163  1224  085F               	movf	_LED^(0+128),w
  9164  1225  0086               	movwf	6
  9165  1226  3001               	movlw	1	; select bank2/3
  9166  1227  0087               	movwf	7
  9167  1228  1401               	bsf	1,0
  9168                           
  9169                           ;LED_B1.c: 66: setLED(led, 0);
  9170  1229  0020               	movlb	0	; select bank0
  9171  122A  01A2               	clrf	setLED@command
  9172  122B  0824               	movf	setLED_Initialization@led,w
  9173  122C  318A  2297         	fcall	_setLED
  9174  122E  0008               	return
  9175  122F                     __end_of_setLED_Initialization:	
  9176                           
  9177                           	psect	text49
  9178  13E5                     __ptext49:	
  9179 ;; *************** function _Flash_Memory_Main *****************
  9180 ;; Defined at:
  9181 ;;		line 790 in file "../src/MCU_B1.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;		None
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;		None
  9186 ;; Return value:  Size  Location     Type
  9187 ;;		None               void
  9188 ;; Registers used:
  9189 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;Total ram usage:        0 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; Hardware stack levels required when called:    8
  9202 ;; This function calls:
  9203 ;;		_Flash_Memory_Modify
  9204 ;; This function is called by:
  9205 ;;		_main
  9206 ;; This function uses a non-reentrant model
  9207 ;;
  9208                           
  9209                           
  9210                           ;psect for function _Flash_Memory_Main
  9211  13E5                     _Flash_Memory_Main:	
  9212                           
  9213                           ;MCU_B1.c: 791: if (Memory.GO == 1) {
  9214                           
  9215                           ;incstack = 0
  9216                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9217  13E5  0023               	movlb	3	; select bank3
  9218  13E6  1CC4               	btfss	(_Memory^(0+384)+36),1
  9219  13E7  0008               	return
  9220                           
  9221                           ;MCU_B1.c: 792: if (Memory.Modify == 1) {
  9222  13E8  1C44               	btfss	(_Memory^(0+384)+36),0
  9223  13E9  2C02               	goto	l1285
  9224                           
  9225                           ;MCU_B1.c: 793: Memory.Time++;
  9226  13EA  3001               	movlw	1
  9227  13EB  07C2               	addwf	(_Memory^(0+384)+34),f
  9228  13EC  3000               	movlw	0
  9229  13ED  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9230                           
  9231                           ;MCU_B1.c: 794: if (Memory.Time == 25)
  9232  13EE  3022               	movlw	34
  9233  13EF  3EA0               	addlw	_Memory& (0+255)
  9234  13F0  0086               	movwf	6
  9235  13F1  3001               	movlw	1	; select bank3/4
  9236  13F2  0087               	movwf	7
  9237  13F3  3F40               	moviw [0]fsr1
  9238  13F4  3A19               	xorlw	25
  9239  13F5  1D03               	skipz
  9240  13F6  2BF9               	goto	u6465
  9241  13F7  3F41               	moviw [1]fsr1
  9242  13F8  3A00               	xorlw	0
  9243  13F9                     u6465:	
  9244  13F9  1D03               	skipz
  9245  13FA  0008               	return
  9246                           
  9247                           ;MCU_B1.c: 795: {
  9248                           ;MCU_B1.c: 796: Memory.Time = 0;
  9249  13FB  01C2               	clrf	(_Memory^(0+384)+34)
  9250  13FC  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9251                           
  9252                           ;MCU_B1.c: 797: Memory.Modify = 0;
  9253  13FD  1044               	bcf	(_Memory^(0+384)+36),0
  9254                           
  9255                           ;MCU_B1.c: 798: Memory.GO = 0;
  9256  13FE  10C4               	bcf	(_Memory^(0+384)+36),1
  9257                           
  9258                           ;MCU_B1.c: 799: Flash_Memory_Modify();
  9259  13FF  3197  2732         	fcall	_Flash_Memory_Modify
  9260                           
  9261                           ;MCU_B1.c: 800: }
  9262                           ;MCU_B1.c: 801: } else {
  9263  1401  0008               	return
  9264  1402                     l1285:	
  9265                           
  9266                           ;MCU_B1.c: 802: Memory.GO = 0;
  9267  1402  10C4               	bcf	(_Memory^(0+384)+36),1
  9268  1403  0008               	return
  9269  1404                     __end_of_Flash_Memory_Main:	
  9270                           
  9271                           	psect	text50
  9272  1732                     __ptext50:	
  9273 ;; *************** function _Flash_Memory_Modify *****************
  9274 ;; Defined at:
  9275 ;;		line 859 in file "../src/MCU_B1.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;		None
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;  i               1    5[BANK0 ] unsigned char 
  9280 ;; Return value:  Size  Location     Type
  9281 ;;		None               void
  9282 ;; Registers used:
  9283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9284 ;; Tracked objects:
  9285 ;;		On entry : 0/0
  9286 ;;		On exit  : 0/0
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9292 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9293 ;;Total ram usage:        2 bytes
  9294 ;; Hardware stack levels used:    1
  9295 ;; Hardware stack levels required when called:    7
  9296 ;; This function calls:
  9297 ;;		_Flash_Memory_Erasing
  9298 ;;		_Flash_Memory_Read
  9299 ;;		_Flash_Memory_Write
  9300 ;; This function is called by:
  9301 ;;		_Flash_Memory_Main
  9302 ;; This function uses a non-reentrant model
  9303 ;;
  9304                           
  9305                           
  9306                           ;psect for function _Flash_Memory_Modify
  9307  1732                     _Flash_Memory_Modify:	
  9308                           
  9309                           ;MCU_B1.c: 860: char i = 0;
  9310                           
  9311                           ;incstack = 0
  9312                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9313  1732  0020               	movlb	0	; select bank0
  9314  1733  01A5               	clrf	Flash_Memory_Modify@i
  9315                           
  9316                           ;MCU_B1.c: 861: for (i = 0; i < 32; i++) {
  9317  1734  01A5               	clrf	Flash_Memory_Modify@i
  9318  1735  3020               	movlw	32
  9319  1736  0225               	subwf	Flash_Memory_Modify@i,w
  9320  1737  1803               	btfsc	3,0
  9321  1738  2F4E               	goto	l6607
  9322  1739                     l6601:	
  9323                           
  9324                           ;MCU_B1.c: 862: Memory.Data[i] = Flash_Memory_Read(i);
  9325  1739  0825               	movf	Flash_Memory_Modify@i,w
  9326  173A  3193  2371  3197   	fcall	_Flash_Memory_Read
  9327  173D  0020               	movlb	0	; select bank0
  9328  173E  00A4               	movwf	??_Flash_Memory_Modify
  9329  173F  0825               	movf	Flash_Memory_Modify@i,w
  9330  1740  3EA0               	addlw	_Memory& (0+255)
  9331  1741  0086               	movwf	6
  9332  1742  3001               	movlw	1	; select bank3/4
  9333  1743  0087               	movwf	7
  9334  1744  0824               	movf	??_Flash_Memory_Modify,w
  9335  1745  0081               	movwf	1
  9336  1746  3001               	movlw	1
  9337  1747  00A4               	movwf	??_Flash_Memory_Modify
  9338  1748  0824               	movf	??_Flash_Memory_Modify,w
  9339  1749  07A5               	addwf	Flash_Memory_Modify@i,f
  9340  174A  3020               	movlw	32
  9341  174B  0225               	subwf	Flash_Memory_Modify@i,w
  9342  174C  1C03               	skipc
  9343  174D  2F39               	goto	l6601
  9344  174E                     l6607:	
  9345                           
  9346                           ;MCU_B1.c: 863: }
  9347                           ;MCU_B1.c: 864: Memory.Data[0]=product->Data[12];
  9348  174E  086E               	movf	_product,w
  9349  174F  0086               	movwf	6
  9350  1750  3001               	movlw	1	; select bank2/3
  9351  1751  0087               	movwf	7
  9352  1752  3001               	movlw	1	; select bank2/3
  9353  1753  3F4C               	moviw [12]fsr1
  9354  1754  0023               	movlb	3	; select bank3
  9355  1755  00A0               	movwf	_Memory^(0+384)
  9356                           
  9357                           ;MCU_B1.c: 865: Memory.Data[1]=product->Data[13];
  9358  1756  0020               	movlb	0	; select bank0
  9359  1757  086E               	movf	_product,w
  9360  1758  0086               	movwf	6
  9361  1759  3001               	movlw	1	; select bank2/3
  9362  175A  0087               	movwf	7
  9363  175B  3001               	movlw	1	; select bank2/3
  9364  175C  3F4D               	moviw [13]fsr1
  9365  175D  0023               	movlb	3	; select bank3
  9366  175E  00A1               	movwf	(_Memory^(0+384)+1)
  9367                           
  9368                           ;MCU_B1.c: 866: Memory.Data[2]=product->Data[14];
  9369  175F  0020               	movlb	0	; select bank0
  9370  1760  086E               	movf	_product,w
  9371  1761  0086               	movwf	6
  9372  1762  3001               	movlw	1	; select bank2/3
  9373  1763  0087               	movwf	7
  9374  1764  3001               	movlw	1	; select bank2/3
  9375  1765  3F4E               	moviw [14]fsr1
  9376  1766  0023               	movlb	3	; select bank3
  9377  1767  00A2               	movwf	(_Memory^(0+384)+2)
  9378                           
  9379                           ;MCU_B1.c: 872: if (Memory.LoopSave == 1) {
  9380  1768  1D44               	btfss	(_Memory^(0+384)+36),2
  9381  1769  2F6E               	goto	l1307
  9382                           
  9383                           ;MCU_B1.c: 873: Memory.LoopSave = 0;
  9384  176A  1144               	bcf	(_Memory^(0+384)+36),2
  9385                           
  9386                           ;MCU_B1.c: 874: myMain.FirstOpen = 0;
  9387  176B  0021               	movlb	1	; select bank1
  9388  176C  12B5               	bcf	_myMain^(0+128),5
  9389                           
  9390                           ;MCU_B1.c: 875: myMain.First = 0;
  9391  176D  13B5               	bcf	_myMain^(0+128),7
  9392  176E                     l1307:	
  9393                           
  9394                           ;MCU_B1.c: 877: }
  9395                           ;MCU_B1.c: 878: GIE = 0;
  9396  176E  138B               	bcf	11,7	;volatile
  9397                           
  9398                           ;MCU_B1.c: 879: Flash_Memory_Erasing();
  9399  176F  3190  20F6  3197   	fcall	_Flash_Memory_Erasing
  9400                           
  9401                           ;MCU_B1.c: 880: Flash_Memory_Write();
  9402  1772  3195  259C         	fcall	_Flash_Memory_Write
  9403                           
  9404                           ;MCU_B1.c: 881: GIE = 1;
  9405  1774  178B               	bsf	11,7	;volatile
  9406  1775  0008               	return
  9407  1776                     __end_of_Flash_Memory_Modify:	
  9408                           
  9409                           	psect	text51
  9410  10F6                     __ptext51:	
  9411 ;; *************** function _Flash_Memory_Erasing *****************
  9412 ;; Defined at:
  9413 ;;		line 848 in file "../src/MCU_B1.c"
  9414 ;; Parameters:    Size  Location     Type
  9415 ;;		None
  9416 ;; Auto vars:     Size  Location     Type
  9417 ;;		None
  9418 ;; Return value:  Size  Location     Type
  9419 ;;		None               void
  9420 ;; Registers used:
  9421 ;;		wreg, status,2, status,0, pclath, cstack
  9422 ;; Tracked objects:
  9423 ;;		On entry : 0/0
  9424 ;;		On exit  : 0/0
  9425 ;;		Unchanged: 0/0
  9426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;Total ram usage:        0 bytes
  9432 ;; Hardware stack levels used:    1
  9433 ;; Hardware stack levels required when called:    6
  9434 ;; This function calls:
  9435 ;;		_Flash_Memory_Unlock
  9436 ;; This function is called by:
  9437 ;;		_Flash_Memory_Modify
  9438 ;; This function uses a non-reentrant model
  9439 ;;
  9440                           
  9441                           
  9442                           ;psect for function _Flash_Memory_Erasing
  9443  10F6                     _Flash_Memory_Erasing:	
  9444                           
  9445                           ;MCU_B1.c: 849: CFGS = 0;
  9446                           
  9447                           ;incstack = 0
  9448                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
  9449  10F6  0023               	movlb	3	; select bank3
  9450  10F7  1315               	bcf	21,6	;volatile
  9451                           
  9452                           ;MCU_B1.c: 850: PMADRH = 0x30;
  9453  10F8  3030               	movlw	48
  9454  10F9  0092               	movwf	18	;volatile
  9455                           
  9456                           ;MCU_B1.c: 851: PMADRL = 0x00;
  9457  10FA  0191               	clrf	17	;volatile
  9458                           
  9459                           ;MCU_B1.c: 852: FREE = 1;
  9460  10FB  1615               	bsf	21,4	;volatile
  9461                           
  9462                           ;MCU_B1.c: 853: WREN = 1;
  9463  10FC  1515               	bsf	21,2	;volatile
  9464                           
  9465                           ;MCU_B1.c: 854: Flash_Memory_Unlock();
  9466  10FD  3190  20CB         	fcall	_Flash_Memory_Unlock
  9467                           
  9468                           ;MCU_B1.c: 855: WREN = 0;
  9469  10FF  0023               	movlb	3	; select bank3
  9470  1100  1115               	bcf	21,2	;volatile
  9471  1101  0008               	return
  9472  1102                     __end_of_Flash_Memory_Erasing:	
  9473                           
  9474                           	psect	text52
  9475  0449                     __ptext52:	
  9476 ;; *************** function _Flash_Memory_Initialization *****************
  9477 ;; Defined at:
  9478 ;;		line 749 in file "../src/MCU_B1.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;		None
  9481 ;; Auto vars:     Size  Location     Type
  9482 ;;  i               1   62[BANK0 ] unsigned char 
  9483 ;; Return value:  Size  Location     Type
  9484 ;;		None               void
  9485 ;; Registers used:
  9486 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;Total ram usage:        2 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    8
  9499 ;; This function calls:
  9500 ;;		_Flash_Memory_Read
  9501 ;;		_Flash_Memory_Write
  9502 ;;		_setPercentValue
  9503 ;; This function is called by:
  9504 ;;		_main
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           
  9509                           ;psect for function _Flash_Memory_Initialization
  9510  0449                     _Flash_Memory_Initialization:	
  9511                           
  9512                           ;MCU_B1.c: 750: char i = 0;
  9513                           
  9514                           ;incstack = 0
  9515                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  9516  0449  0020               	movlb	0	; select bank0
  9517  044A  01DE               	clrf	Flash_Memory_Initialization@i
  9518                           
  9519                           ;MCU_B1.c: 751: if (Flash_Memory_Read(31) == 0xaa) {
  9520  044B  301F               	movlw	31
  9521  044C  3193  2371  3184   	fcall	_Flash_Memory_Read
  9522  044F  3AAA               	xorlw	170
  9523  0450  1D03               	skipz
  9524  0451  2CBB               	goto	l6921
  9525                           
  9526                           ;MCU_B1.c: 752: product->Data[12] = Flash_Memory_Read(0);
  9527  0452  3000               	movlw	0
  9528  0453  3193  2371  3184   	fcall	_Flash_Memory_Read
  9529  0456  0020               	movlb	0	; select bank0
  9530  0457  00DD               	movwf	??_Flash_Memory_Initialization
  9531  0458  086E               	movf	_product,w
  9532  0459  3E0C               	addlw	12
  9533  045A  0086               	movwf	6
  9534  045B  3001               	movlw	1	; select bank2/3
  9535  045C  0087               	movwf	7
  9536  045D  085D               	movf	??_Flash_Memory_Initialization,w
  9537  045E  0081               	movwf	1
  9538                           
  9539                           ;MCU_B1.c: 753: product->Data[13] = Flash_Memory_Read(1);
  9540  045F  3001               	movlw	1
  9541  0460  3193  2371  3184   	fcall	_Flash_Memory_Read
  9542  0463  0020               	movlb	0	; select bank0
  9543  0464  00DD               	movwf	??_Flash_Memory_Initialization
  9544  0465  086E               	movf	_product,w
  9545  0466  3E0D               	addlw	13
  9546  0467  0086               	movwf	6
  9547  0468  3001               	movlw	1	; select bank2/3
  9548  0469  0087               	movwf	7
  9549  046A  085D               	movf	??_Flash_Memory_Initialization,w
  9550  046B  0081               	movwf	1
  9551                           
  9552                           ;MCU_B1.c: 754: product->Data[14] = Flash_Memory_Read(2);
  9553  046C  3002               	movlw	2
  9554  046D  3193  2371  3184   	fcall	_Flash_Memory_Read
  9555  0470  0020               	movlb	0	; select bank0
  9556  0471  00DD               	movwf	??_Flash_Memory_Initialization
  9557  0472  086E               	movf	_product,w
  9558  0473  3E0E               	addlw	14
  9559  0474  0086               	movwf	6
  9560  0475  3001               	movlw	1	; select bank2/3
  9561  0476  0087               	movwf	7
  9562  0477  085D               	movf	??_Flash_Memory_Initialization,w
  9563  0478  0081               	movwf	1
  9564                           
  9565                           ;MCU_B1.c: 760: i = setPercentValue(((char)((100-60)*0.8)));
  9566  0479  3020               	movlw	32
  9567  047A  3197  27BA  3184   	fcall	_setPercentValue
  9568  047D  0020               	movlb	0	; select bank0
  9569  047E  00DD               	movwf	??_Flash_Memory_Initialization
  9570  047F  085D               	movf	??_Flash_Memory_Initialization,w
  9571  0480  00DE               	movwf	Flash_Memory_Initialization@i
  9572                           
  9573                           ;MCU_B1.c: 761: product->Data[21] = i;
  9574  0481  085E               	movf	Flash_Memory_Initialization@i,w
  9575  0482  00DD               	movwf	??_Flash_Memory_Initialization
  9576  0483  086E               	movf	_product,w
  9577  0484  3E15               	addlw	21
  9578  0485  0086               	movwf	6
  9579  0486  3001               	movlw	1	; select bank2/3
  9580  0487  0087               	movwf	7
  9581  0488  085D               	movf	??_Flash_Memory_Initialization,w
  9582  0489  0081               	movwf	1
  9583                           
  9584                           ;MCU_B1.c: 762: product->Data[22] = i;
  9585  048A  085E               	movf	Flash_Memory_Initialization@i,w
  9586  048B  00DD               	movwf	??_Flash_Memory_Initialization
  9587  048C  086E               	movf	_product,w
  9588  048D  3E16               	addlw	22
  9589  048E  0086               	movwf	6
  9590  048F  3001               	movlw	1	; select bank2/3
  9591  0490  0087               	movwf	7
  9592  0491  085D               	movf	??_Flash_Memory_Initialization,w
  9593  0492  0081               	movwf	1
  9594                           
  9595                           ;MCU_B1.c: 763: product->Data[23] = i;
  9596  0493  085E               	movf	Flash_Memory_Initialization@i,w
  9597  0494  00DD               	movwf	??_Flash_Memory_Initialization
  9598  0495  086E               	movf	_product,w
  9599  0496  3E17               	addlw	23
  9600  0497  0086               	movwf	6
  9601  0498  3001               	movlw	1	; select bank2/3
  9602  0499  0087               	movwf	7
  9603  049A  085D               	movf	??_Flash_Memory_Initialization,w
  9604  049B  0081               	movwf	1
  9605                           
  9606                           ;MCU_B1.c: 765: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
  9607  049C  086E               	movf	_product,w
  9608  049D  3E0C               	addlw	12
  9609  049E  0086               	movwf	6
  9610  049F  3001               	movlw	1	; select bank2/3
  9611  04A0  0087               	movwf	7
  9612  04A1  0801               	movf	1,w
  9613  04A2  3AFF               	xorlw	255
  9614  04A3  1D03               	skipz
  9615  04A4  0008               	return
  9616  04A5  086E               	movf	_product,w
  9617  04A6  3E0D               	addlw	13
  9618  04A7  0086               	movwf	6
  9619  04A8  3001               	movlw	1	; select bank2/3
  9620  04A9  0087               	movwf	7
  9621  04AA  0801               	movf	1,w
  9622  04AB  3AFF               	xorlw	255
  9623  04AC  1D03               	skipz
  9624  04AD  0008               	return
  9625  04AE  086E               	movf	_product,w
  9626  04AF  3E0E               	addlw	14
  9627  04B0  0086               	movwf	6
  9628  04B1  3001               	movlw	1	; select bank2/3
  9629  04B2  0087               	movwf	7
  9630  04B3  0801               	movf	1,w
  9631  04B4  3AFF               	xorlw	255
  9632  04B5  1D03               	skipz
  9633  04B6  0008               	return
  9634                           
  9635                           ;MCU_B1.c: 766: myMain.FirstOpen = 1;
  9636  04B7  0021               	movlb	1	; select bank1
  9637  04B8  16B5               	bsf	_myMain^(0+128),5
  9638                           
  9639                           ;MCU_B1.c: 767: myMain.First = 1;
  9640  04B9  17B5               	bsf	_myMain^(0+128),7
  9641                           
  9642                           ;MCU_B1.c: 768: }
  9643                           ;MCU_B1.c: 769: } else {
  9644  04BA  0008               	return
  9645  04BB                     l6921:	
  9646                           
  9647                           ;MCU_B1.c: 770: i = setPercentValue(((char)((100-60)*0.8)));
  9648  04BB  3020               	movlw	32
  9649  04BC  3197  27BA  3184   	fcall	_setPercentValue
  9650  04BF  0020               	movlb	0	; select bank0
  9651  04C0  00DD               	movwf	??_Flash_Memory_Initialization
  9652  04C1  085D               	movf	??_Flash_Memory_Initialization,w
  9653  04C2  00DE               	movwf	Flash_Memory_Initialization@i
  9654                           
  9655                           ;MCU_B1.c: 771: Memory.Data[0]=0xff;
  9656  04C3  30FF               	movlw	255
  9657  04C4  00DD               	movwf	??_Flash_Memory_Initialization
  9658  04C5  085D               	movf	??_Flash_Memory_Initialization,w
  9659  04C6  0023               	movlb	3	; select bank3
  9660  04C7  00A0               	movwf	_Memory^(0+384)
  9661                           
  9662                           ;MCU_B1.c: 772: Memory.Data[1]=0xff;
  9663  04C8  30FF               	movlw	255
  9664  04C9  0020               	movlb	0	; select bank0
  9665  04CA  00DD               	movwf	??_Flash_Memory_Initialization
  9666  04CB  085D               	movf	??_Flash_Memory_Initialization,w
  9667  04CC  0023               	movlb	3	; select bank3
  9668  04CD  00A1               	movwf	(_Memory^(0+384)+1)
  9669                           
  9670                           ;MCU_B1.c: 773: Memory.Data[2]=0xff;
  9671  04CE  30FF               	movlw	255
  9672  04CF  0020               	movlb	0	; select bank0
  9673  04D0  00DD               	movwf	??_Flash_Memory_Initialization
  9674  04D1  085D               	movf	??_Flash_Memory_Initialization,w
  9675  04D2  0023               	movlb	3	; select bank3
  9676  04D3  00A2               	movwf	(_Memory^(0+384)+2)
  9677                           
  9678                           ;MCU_B1.c: 774: Memory.Data[3]=0xff;
  9679  04D4  30FF               	movlw	255
  9680  04D5  0020               	movlb	0	; select bank0
  9681  04D6  00DD               	movwf	??_Flash_Memory_Initialization
  9682  04D7  085D               	movf	??_Flash_Memory_Initialization,w
  9683  04D8  0023               	movlb	3	; select bank3
  9684  04D9  00A3               	movwf	(_Memory^(0+384)+3)
  9685                           
  9686                           ;MCU_B1.c: 775: Memory.Data[4]=0xff;
  9687  04DA  30FF               	movlw	255
  9688  04DB  0020               	movlb	0	; select bank0
  9689  04DC  00DD               	movwf	??_Flash_Memory_Initialization
  9690  04DD  085D               	movf	??_Flash_Memory_Initialization,w
  9691  04DE  0023               	movlb	3	; select bank3
  9692  04DF  00A4               	movwf	(_Memory^(0+384)+4)
  9693                           
  9694                           ;MCU_B1.c: 776: Memory.Data[5]=0xff;
  9695  04E0  30FF               	movlw	255
  9696  04E1  0020               	movlb	0	; select bank0
  9697  04E2  00DD               	movwf	??_Flash_Memory_Initialization
  9698  04E3  085D               	movf	??_Flash_Memory_Initialization,w
  9699  04E4  0023               	movlb	3	; select bank3
  9700  04E5  00A5               	movwf	(_Memory^(0+384)+5)
  9701                           
  9702                           ;MCU_B1.c: 777: Memory.Data[31]=0xaa;
  9703  04E6  30AA               	movlw	170
  9704  04E7  0020               	movlb	0	; select bank0
  9705  04E8  00DD               	movwf	??_Flash_Memory_Initialization
  9706  04E9  085D               	movf	??_Flash_Memory_Initialization,w
  9707  04EA  0023               	movlb	3	; select bank3
  9708  04EB  00BF               	movwf	(_Memory^(0+384)+31)
  9709                           
  9710                           ;MCU_B1.c: 778: product->Data[21] = i;
  9711  04EC  0020               	movlb	0	; select bank0
  9712  04ED  085E               	movf	Flash_Memory_Initialization@i,w
  9713  04EE  00DD               	movwf	??_Flash_Memory_Initialization
  9714  04EF  086E               	movf	_product,w
  9715  04F0  3E15               	addlw	21
  9716  04F1  0086               	movwf	6
  9717  04F2  3001               	movlw	1	; select bank2/3
  9718  04F3  0087               	movwf	7
  9719  04F4  085D               	movf	??_Flash_Memory_Initialization,w
  9720  04F5  0081               	movwf	1
  9721                           
  9722                           ;MCU_B1.c: 779: product->Data[22] = i;
  9723  04F6  085E               	movf	Flash_Memory_Initialization@i,w
  9724  04F7  00DD               	movwf	??_Flash_Memory_Initialization
  9725  04F8  086E               	movf	_product,w
  9726  04F9  3E16               	addlw	22
  9727  04FA  0086               	movwf	6
  9728  04FB  3001               	movlw	1	; select bank2/3
  9729  04FC  0087               	movwf	7
  9730  04FD  085D               	movf	??_Flash_Memory_Initialization,w
  9731  04FE  0081               	movwf	1
  9732                           
  9733                           ;MCU_B1.c: 780: product->Data[23] = i;
  9734  04FF  085E               	movf	Flash_Memory_Initialization@i,w
  9735  0500  00DD               	movwf	??_Flash_Memory_Initialization
  9736  0501  086E               	movf	_product,w
  9737  0502  3E17               	addlw	23
  9738  0503  0086               	movwf	6
  9739  0504  3001               	movlw	1	; select bank2/3
  9740  0505  0087               	movwf	7
  9741  0506  085D               	movf	??_Flash_Memory_Initialization,w
  9742  0507  0081               	movwf	1
  9743                           
  9744                           ;MCU_B1.c: 781: GIE = 0;
  9745  0508  138B               	bcf	11,7	;volatile
  9746                           
  9747                           ;MCU_B1.c: 782: Flash_Memory_Write();
  9748  0509  3195  259C         	fcall	_Flash_Memory_Write
  9749                           
  9750                           ;MCU_B1.c: 783: GIE = 1;
  9751  050B  178B               	bsf	11,7	;volatile
  9752                           
  9753                           ;MCU_B1.c: 784: myMain.FirstOpen = 1;
  9754  050C  0021               	movlb	1	; select bank1
  9755  050D  16B5               	bsf	_myMain^(0+128),5
  9756                           
  9757                           ;MCU_B1.c: 785: myMain.First = 1;
  9758  050E  17B5               	bsf	_myMain^(0+128),7
  9759  050F  0008               	return
  9760  0510                     __end_of_Flash_Memory_Initialization:	
  9761                           
  9762                           	psect	text53
  9763  159C                     __ptext53:	
  9764 ;; *************** function _Flash_Memory_Write *****************
  9765 ;; Defined at:
  9766 ;;		line 829 in file "../src/MCU_B1.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;		None
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;  i               1    1[BANK0 ] unsigned char 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;		None               void
  9773 ;; Registers used:
  9774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;Total ram usage:        2 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    6
  9787 ;; This function calls:
  9788 ;;		_Flash_Memory_Unlock
  9789 ;; This function is called by:
  9790 ;;		_Flash_Memory_Initialization
  9791 ;;		_Flash_Memory_Modify
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           
  9796                           ;psect for function _Flash_Memory_Write
  9797  159C                     _Flash_Memory_Write:	
  9798                           
  9799                           ;MCU_B1.c: 830: char i = 0;
  9800                           
  9801                           ;incstack = 0
  9802                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9803  159C  0020               	movlb	0	; select bank0
  9804  159D  01A1               	clrf	Flash_Memory_Write@i
  9805                           
  9806                           ;MCU_B1.c: 831: CFGS = 0;
  9807  159E  0023               	movlb	3	; select bank3
  9808  159F  1315               	bcf	21,6	;volatile
  9809                           
  9810                           ;MCU_B1.c: 832: PMADRH = 0x30;
  9811  15A0  3030               	movlw	48
  9812  15A1  0092               	movwf	18	;volatile
  9813                           
  9814                           ;MCU_B1.c: 833: PMDATH = 0;
  9815  15A2  0194               	clrf	20	;volatile
  9816                           
  9817                           ;MCU_B1.c: 834: FREE = 0;
  9818  15A3  1215               	bcf	21,4	;volatile
  9819                           
  9820                           ;MCU_B1.c: 835: LWLO = 1;
  9821  15A4  1695               	bsf	21,5	;volatile
  9822                           
  9823                           ;MCU_B1.c: 836: WREN = 1;
  9824  15A5  1515               	bsf	21,2	;volatile
  9825                           
  9826                           ;MCU_B1.c: 837: for (i = 0; i < 32; i++) {
  9827  15A6  0020               	movlb	0	; select bank0
  9828  15A7  01A1               	clrf	Flash_Memory_Write@i
  9829  15A8  3020               	movlw	32
  9830  15A9  0221               	subwf	Flash_Memory_Write@i,w
  9831  15AA  1803               	btfsc	3,0
  9832  15AB  2DC4               	goto	l1298
  9833  15AC                     l6097:	
  9834                           
  9835                           ;MCU_B1.c: 838: PMADRL = i;
  9836  15AC  0821               	movf	Flash_Memory_Write@i,w
  9837  15AD  0023               	movlb	3	; select bank3
  9838  15AE  0091               	movwf	17	;volatile
  9839                           
  9840                           ;MCU_B1.c: 839: PMDATL = Memory.Data[i];
  9841  15AF  0020               	movlb	0	; select bank0
  9842  15B0  0821               	movf	Flash_Memory_Write@i,w
  9843  15B1  3EA0               	addlw	_Memory& (0+255)
  9844  15B2  0086               	movwf	6
  9845  15B3  3001               	movlw	1	; select bank3/4
  9846  15B4  0087               	movwf	7
  9847  15B5  0801               	movf	1,w
  9848  15B6  0023               	movlb	3	; select bank3
  9849  15B7  0093               	movwf	19	;volatile
  9850                           
  9851                           ;MCU_B1.c: 840: Flash_Memory_Unlock();
  9852  15B8  3190  20CB  3195   	fcall	_Flash_Memory_Unlock
  9853  15BB  3001               	movlw	1
  9854  15BC  0020               	movlb	0	; select bank0
  9855  15BD  00A0               	movwf	??_Flash_Memory_Write
  9856  15BE  0820               	movf	??_Flash_Memory_Write,w
  9857  15BF  07A1               	addwf	Flash_Memory_Write@i,f
  9858  15C0  3020               	movlw	32
  9859  15C1  0221               	subwf	Flash_Memory_Write@i,w
  9860  15C2  1C03               	skipc
  9861  15C3  2DAC               	goto	l6097
  9862  15C4                     l1298:	
  9863                           
  9864                           ;MCU_B1.c: 841: }
  9865                           ;MCU_B1.c: 842: LWLO = 0;
  9866  15C4  0023               	movlb	3	; select bank3
  9867  15C5  1295               	bcf	21,5	;volatile
  9868                           
  9869                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
  9870  15C6  3190  20CB         	fcall	_Flash_Memory_Unlock
  9871                           
  9872                           ;MCU_B1.c: 844: WREN = 0;
  9873  15C8  0023               	movlb	3	; select bank3
  9874  15C9  1115               	bcf	21,2	;volatile
  9875  15CA  0008               	return
  9876  15CB                     __end_of_Flash_Memory_Write:	
  9877                           
  9878                           	psect	text54
  9879  10CB                     __ptext54:	
  9880 ;; *************** function _Flash_Memory_Unlock *****************
  9881 ;; Defined at:
  9882 ;;		line 808 in file "../src/MCU_B1.c"
  9883 ;; Parameters:    Size  Location     Type
  9884 ;;		None
  9885 ;; Auto vars:     Size  Location     Type
  9886 ;;		None
  9887 ;; Return value:  Size  Location     Type
  9888 ;;		None               void
  9889 ;; Registers used:
  9890 ;;		wreg
  9891 ;; Tracked objects:
  9892 ;;		On entry : 0/0
  9893 ;;		On exit  : 0/0
  9894 ;;		Unchanged: 0/0
  9895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;Total ram usage:        0 bytes
  9901 ;; Hardware stack levels used:    1
  9902 ;; Hardware stack levels required when called:    5
  9903 ;; This function calls:
  9904 ;;		Nothing
  9905 ;; This function is called by:
  9906 ;;		_Flash_Memory_Write
  9907 ;;		_Flash_Memory_Erasing
  9908 ;; This function uses a non-reentrant model
  9909 ;;
  9910                           
  9911                           
  9912                           ;psect for function _Flash_Memory_Unlock
  9913  10CB                     _Flash_Memory_Unlock:	
  9914                           
  9915                           ;MCU_B1.c: 809: PMCON2 = 0x55;
  9916                           
  9917                           ;incstack = 0
  9918                           ; Regs used in _Flash_Memory_Unlock: [wreg]
  9919  10CB  3055               	movlw	85
  9920  10CC  0023               	movlb	3	; select bank3
  9921  10CD  0096               	movwf	22	;volatile
  9922                           
  9923                           ;MCU_B1.c: 810: PMCON2 = 0xaa;
  9924  10CE  30AA               	movlw	170
  9925  10CF  0096               	movwf	22	;volatile
  9926                           
  9927                           ;MCU_B1.c: 811: WR = 1;
  9928  10D0  1495               	bsf	21,1	;volatile
  9929                           
  9930                           ;MCU_B1.c: 812: __nop();
  9931  10D1  0000               	nop
  9932                           
  9933                           ;MCU_B1.c: 813: __nop();
  9934  10D2  0000               	nop
  9935  10D3  0008               	return
  9936  10D4                     __end_of_Flash_Memory_Unlock:	
  9937                           
  9938                           	psect	text55
  9939  1371                     __ptext55:	
  9940 ;; *************** function _Flash_Memory_Read *****************
  9941 ;; Defined at:
  9942 ;;		line 817 in file "../src/MCU_B1.c"
  9943 ;; Parameters:    Size  Location     Type
  9944 ;;  address         1    wreg     unsigned char 
  9945 ;; Auto vars:     Size  Location     Type
  9946 ;;  address         1    2[BANK0 ] unsigned char 
  9947 ;;  ret             1    3[BANK0 ] unsigned char 
  9948 ;;  i               1    1[BANK0 ] unsigned char 
  9949 ;; Return value:  Size  Location     Type
  9950 ;;                  1    wreg      unsigned char 
  9951 ;; Registers used:
  9952 ;;		wreg, status,2
  9953 ;; Tracked objects:
  9954 ;;		On entry : 0/0
  9955 ;;		On exit  : 0/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9959 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9960 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9961 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9962 ;;Total ram usage:        4 bytes
  9963 ;; Hardware stack levels used:    1
  9964 ;; Hardware stack levels required when called:    5
  9965 ;; This function calls:
  9966 ;;		Nothing
  9967 ;; This function is called by:
  9968 ;;		_Flash_Memory_Initialization
  9969 ;;		_Flash_Memory_Modify
  9970 ;; This function uses a non-reentrant model
  9971 ;;
  9972                           
  9973                           
  9974                           ;psect for function _Flash_Memory_Read
  9975  1371                     _Flash_Memory_Read:	
  9976                           
  9977                           ;incstack = 0
  9978                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
  9979                           ;Flash_Memory_Read@address stored from wreg
  9980  1371  0020               	movlb	0	; select bank0
  9981  1372  00A2               	movwf	Flash_Memory_Read@address
  9982                           
  9983                           ;MCU_B1.c: 818: char i = 0, ret = 0;
  9984  1373  01A1               	clrf	Flash_Memory_Read@i
  9985  1374  01A3               	clrf	Flash_Memory_Read@ret
  9986                           
  9987                           ;MCU_B1.c: 819: PMADRH = 0x30;
  9988  1375  3030               	movlw	48
  9989  1376  0023               	movlb	3	; select bank3
  9990  1377  0092               	movwf	18	;volatile
  9991                           
  9992                           ;MCU_B1.c: 820: PMADRL = address;
  9993  1378  0020               	movlb	0	; select bank0
  9994  1379  0822               	movf	Flash_Memory_Read@address,w
  9995  137A  0023               	movlb	3	; select bank3
  9996  137B  0091               	movwf	17	;volatile
  9997                           
  9998                           ;MCU_B1.c: 821: CFGS = 0;
  9999  137C  1315               	bcf	21,6	;volatile
 10000                           
 10001                           ;MCU_B1.c: 822: RD = 1;
 10002  137D  1415               	bsf	21,0	;volatile
 10003                           
 10004                           ;MCU_B1.c: 823: i = PMDATH;
 10005  137E  0814               	movf	20,w	;volatile
 10006  137F  0020               	movlb	0	; select bank0
 10007  1380  00A0               	movwf	??_Flash_Memory_Read
 10008  1381  0820               	movf	??_Flash_Memory_Read,w
 10009  1382  00A1               	movwf	Flash_Memory_Read@i
 10010                           
 10011                           ;MCU_B1.c: 824: ret = PMDATL;
 10012  1383  0023               	movlb	3	; select bank3
 10013  1384  0813               	movf	19,w	;volatile
 10014  1385  0020               	movlb	0	; select bank0
 10015  1386  00A0               	movwf	??_Flash_Memory_Read
 10016  1387  0820               	movf	??_Flash_Memory_Read,w
 10017  1388  00A3               	movwf	Flash_Memory_Read@ret
 10018                           
 10019                           ;MCU_B1.c: 825: return ret;
 10020  1389  0823               	movf	Flash_Memory_Read@ret,w
 10021  138A  0008               	return
 10022  138B                     __end_of_Flash_Memory_Read:	
 10023                           
 10024                           	psect	text56
 10025  10DF                     __ptext56:	
 10026 ;; *************** function _DimmerLights_Main *****************
 10027 ;; Defined at:
 10028 ;;		line 407 in file "../src/Dimmer_B1.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;		None
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;		None
 10033 ;; Return value:  Size  Location     Type
 10034 ;;		None               void
 10035 ;; Registers used:
 10036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;Total ram usage:        0 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; Hardware stack levels required when called:   11
 10049 ;; This function calls:
 10050 ;;		_DimmerLights_Close
 10051 ;;		_setDimmerLights_Main
 10052 ;; This function is called by:
 10053 ;;		_main
 10054 ;; This function uses a non-reentrant model
 10055 ;;
 10056                           
 10057                           
 10058                           ;psect for function _DimmerLights_Main
 10059  10DF                     _DimmerLights_Main:	
 10060                           
 10061                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 10062                           
 10063                           ;incstack = 0
 10064                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10065  10DF  3001               	movlw	1
 10066  10E0  318C  24A0  3190   	fcall	_setDimmerLights_Main
 10067                           
 10068                           ;Dimmer_B1.c: 414: setDimmerLights_Main(2);
 10069  10E3  3002               	movlw	2
 10070  10E4  318C  24A0  3190   	fcall	_setDimmerLights_Main
 10071                           
 10072                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 10073  10E7  3192  22A4         	fcall	_DimmerLights_Close
 10074  10E9  0008               	return
 10075  10EA                     __end_of_DimmerLights_Main:	
 10076                           
 10077                           	psect	text57
 10078  0CA0                     __ptext57:	
 10079 ;; *************** function _setDimmerLights_Main *****************
 10080 ;; Defined at:
 10081 ;;		line 425 in file "../src/Dimmer_B1.c"
 10082 ;; Parameters:    Size  Location     Type
 10083 ;;  lights          1    wreg     unsigned char 
 10084 ;; Auto vars:     Size  Location     Type
 10085 ;;  lights          1   70[BANK0 ] unsigned char 
 10086 ;;  clear           1   69[BANK0 ] unsigned char 
 10087 ;; Return value:  Size  Location     Type
 10088 ;;		None               void
 10089 ;; Registers used:
 10090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;Total ram usage:        2 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; Hardware stack levels required when called:   10
 10103 ;; This function calls:
 10104 ;;		_DimmerLightsPointSelect
 10105 ;;		_setBuz
 10106 ;;		_setDimmerLights
 10107 ;;		_setDimmerLights_Adj
 10108 ;; This function is called by:
 10109 ;;		_DimmerLights_Main
 10110 ;; This function uses a non-reentrant model
 10111 ;;
 10112                           
 10113                           
 10114                           ;psect for function _setDimmerLights_Main
 10115  0CA0                     _setDimmerLights_Main:	
 10116                           
 10117                           ;incstack = 0
 10118                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10119                           ;setDimmerLights_Main@lights stored from wreg
 10120  0CA0  0020               	movlb	0	; select bank0
 10121  0CA1  00E6               	movwf	setDimmerLights_Main@lights
 10122                           
 10123                           ;Dimmer_B1.c: 426: char clear = 1;
 10124  0CA2  01E5               	clrf	setDimmerLights_Main@clear
 10125  0CA3  0AE5               	incf	setDimmerLights_Main@clear,f
 10126                           
 10127                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 10128  0CA4  0866               	movf	setDimmerLights_Main@lights,w
 10129  0CA5  3192  2241  318C   	fcall	_DimmerLightsPointSelect
 10130                           
 10131                           ;Dimmer_B1.c: 440: if (lights == 1) {
 10132  0CA8  0020               	movlb	0	; select bank0
 10133  0CA9  0866               	movf	setDimmerLights_Main@lights,w
 10134  0CAA  3A01               	xorlw	1
 10135  0CAB  1D03               	skipz
 10136  0CAC  2CB4               	goto	l7361
 10137                           
 10138                           ;Dimmer_B1.c: 441: clear = (DimmerLights2.Clear == 0) ? 0 : 1;
 10139  0CAD  3000               	movlw	0
 10140  0CAE  0022               	movlb	2	; select bank2
 10141  0CAF  1940               	btfsc	(_DimmerLights2^(0+256)+9),2
 10142  0CB0  3001               	movlw	1
 10143  0CB1  0020               	movlb	0	; select bank0
 10144  0CB2  00E5               	movwf	setDimmerLights_Main@clear
 10145                           
 10146                           ;Dimmer_B1.c: 442: } else if (lights == 2) {
 10147  0CB3  2CBE               	goto	l7365
 10148  0CB4                     l7361:	
 10149  0CB4  0866               	movf	setDimmerLights_Main@lights,w
 10150  0CB5  3A02               	xorlw	2
 10151  0CB6  1D03               	skipz
 10152  0CB7  2CBE               	goto	l7365
 10153                           
 10154                           ;Dimmer_B1.c: 443: clear = (DimmerLights1.Clear == 0) ? 0 : 1;
 10155  0CB8  3000               	movlw	0
 10156  0CB9  0022               	movlb	2	; select bank2
 10157  0CBA  1931               	btfsc	(_DimmerLights1^(0+256)+9),2
 10158  0CBB  3001               	movlw	1
 10159  0CBC  0020               	movlb	0	; select bank0
 10160  0CBD  00E5               	movwf	setDimmerLights_Main@clear
 10161  0CBE                     l7365:	
 10162                           
 10163                           ;Dimmer_B1.c: 444: }
 10164                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 10165  0CBE  0879               	movf	_DimmerLights,w
 10166  0CBF  3E08               	addlw	8
 10167  0CC0  0086               	movwf	6
 10168  0CC1  3001               	movlw	1	; select bank2/3
 10169  0CC2  0087               	movwf	7
 10170  0CC3  1D01               	btfss	1,2
 10171  0CC4  2CE2               	goto	l7375
 10172                           
 10173                           ;Dimmer_B1.c: 448: if (clear == 1) {
 10174  0CC5  0865               	movf	setDimmerLights_Main@clear,w
 10175  0CC6  3A01               	xorlw	1
 10176  0CC7  1D03               	skipz
 10177  0CC8  0008               	return
 10178                           
 10179                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 10180  0CC9  0879               	movf	_DimmerLights,w
 10181  0CCA  3E08               	addlw	8
 10182  0CCB  0086               	movwf	6
 10183  0CCC  3001               	movlw	1	; select bank2/3
 10184  0CCD  0087               	movwf	7
 10185  0CCE  1101               	bcf	1,2
 10186                           
 10187                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 10188  0CCF  0879               	movf	_DimmerLights,w
 10189  0CD0  3E08               	addlw	8
 10190  0CD1  0086               	movwf	6
 10191  0CD2  3001               	movlw	1	; select bank2/3
 10192  0CD3  0087               	movwf	7
 10193  0CD4  1C81               	btfss	1,1
 10194  0CD5  2CDC               	goto	l7373
 10195                           
 10196                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 10197  0CD6  01A4               	clrf	setDimmerLights@status
 10198  0CD7  0AA4               	incf	setDimmerLights@status,f
 10199  0CD8  0866               	movf	setDimmerLights_Main@lights,w
 10200  0CD9  318E  266E         	fcall	_setDimmerLights
 10201                           
 10202                           ;Dimmer_B1.c: 452: } else {
 10203  0CDB  0008               	return
 10204  0CDC                     l7373:	
 10205                           
 10206                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 10207  0CDC  0020               	movlb	0	; select bank0
 10208  0CDD  01A4               	clrf	setDimmerLights@status
 10209  0CDE  0866               	movf	setDimmerLights_Main@lights,w
 10210  0CDF  318E  266E         	fcall	_setDimmerLights
 10211                           
 10212                           ;Dimmer_B1.c: 454: }
 10213                           ;Dimmer_B1.c: 458: }
 10214                           ;Dimmer_B1.c: 459: } else {
 10215  0CE1  0008               	return
 10216  0CE2                     l7375:	
 10217                           
 10218                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 10219  0CE2  0879               	movf	_DimmerLights,w
 10220  0CE3  3E08               	addlw	8
 10221  0CE4  0086               	movwf	6
 10222  0CE5  3001               	movlw	1	; select bank2/3
 10223  0CE6  0087               	movwf	7
 10224  0CE7  1E01               	btfss	1,4
 10225  0CE8  0008               	return
 10226                           
 10227                           ;Dimmer_B1.c: 461: if (clear == 1) {
 10228  0CE9  0020               	movlb	0	; select bank0
 10229  0CEA  0865               	movf	setDimmerLights_Main@clear,w
 10230  0CEB  3A01               	xorlw	1
 10231  0CEC  1D03               	skipz
 10232  0CED  0008               	return
 10233                           
 10234                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 10235  0CEE  0879               	movf	_DimmerLights,w
 10236  0CEF  3E08               	addlw	8
 10237  0CF0  0086               	movwf	6
 10238  0CF1  3001               	movlw	1	; select bank2/3
 10239  0CF2  0087               	movwf	7
 10240  0CF3  1201               	bcf	1,4
 10241                           
 10242                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 10243  0CF4  0879               	movf	_DimmerLights,w
 10244  0CF5  3E08               	addlw	8
 10245  0CF6  0086               	movwf	6
 10246  0CF7  3001               	movlw	1	; select bank2/3
 10247  0CF8  0087               	movwf	7
 10248  0CF9  1D81               	btfss	1,3
 10249  0CFA  2D0A               	goto	l7385
 10250                           
 10251                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 10252  0CFB  01E2               	clrf	setDimmerLights_Adj@status
 10253  0CFC  0AE2               	incf	setDimmerLights_Adj@status,f
 10254  0CFD  0866               	movf	setDimmerLights_Main@lights,w
 10255  0CFE  3196  2632  318C   	fcall	_setDimmerLights_Adj
 10256                           
 10257                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 10258  0D01  3064               	movlw	100
 10259  0D02  0020               	movlb	0	; select bank0
 10260  0D03  00A9               	movwf	setBuz@time
 10261  0D04  3000               	movlw	0
 10262  0D05  00AA               	movwf	setBuz@time+1
 10263  0D06  3001               	movlw	1
 10264  0D07  3189  2122         	fcall	_setBuz
 10265                           
 10266                           ;Dimmer_B1.c: 466: } else {
 10267  0D09  0008               	return
 10268  0D0A                     l7385:	
 10269                           
 10270                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 10271  0D0A  0020               	movlb	0	; select bank0
 10272  0D0B  01E2               	clrf	setDimmerLights_Adj@status
 10273  0D0C  0866               	movf	setDimmerLights_Main@lights,w
 10274  0D0D  3196  2632         	fcall	_setDimmerLights_Adj
 10275  0D0F  0008               	return
 10276  0D10                     __end_of_setDimmerLights_Main:	
 10277                           
 10278                           	psect	text58
 10279  1632                     __ptext58:	
 10280 ;; *************** function _setDimmerLights_Adj *****************
 10281 ;; Defined at:
 10282 ;;		line 646 in file "../src/Dimmer_B1.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;  lights          1    wreg     unsigned char 
 10285 ;;  status          1   66[BANK0 ] unsigned char 
 10286 ;; Auto vars:     Size  Location     Type
 10287 ;;  lights          1   68[BANK0 ] unsigned char 
 10288 ;; Return value:  Size  Location     Type
 10289 ;;		None               void
 10290 ;; Registers used:
 10291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10292 ;; Tracked objects:
 10293 ;;		On entry : 0/0
 10294 ;;		On exit  : 0/0
 10295 ;;		Unchanged: 0/0
 10296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10297 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;Total ram usage:        3 bytes
 10302 ;; Hardware stack levels used:    1
 10303 ;; Hardware stack levels required when called:    9
 10304 ;; This function calls:
 10305 ;;		_DimmerLightsPointSelect
 10306 ;;		_setRF_DimmerLights
 10307 ;;		_setTxData
 10308 ;; This function is called by:
 10309 ;;		_setDimmerLights_Main
 10310 ;; This function uses a non-reentrant model
 10311 ;;
 10312                           
 10313                           
 10314                           ;psect for function _setDimmerLights_Adj
 10315  1632                     _setDimmerLights_Adj:	
 10316                           
 10317                           ;incstack = 0
 10318                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10319                           ;setDimmerLights_Adj@lights stored from wreg
 10320  1632  0020               	movlb	0	; select bank0
 10321  1633  00E4               	movwf	setDimmerLights_Adj@lights
 10322                           
 10323                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 10324  1634  0864               	movf	setDimmerLights_Adj@lights,w
 10325  1635  3192  2241  3196   	fcall	_DimmerLightsPointSelect
 10326                           
 10327                           ;Dimmer_B1.c: 648: if (status == 1) {
 10328  1638  0020               	movlb	0	; select bank0
 10329  1639  0862               	movf	setDimmerLights_Adj@status,w
 10330  163A  3A01               	xorlw	1
 10331  163B  1D03               	skipz
 10332  163C  2E48               	goto	l6051
 10333                           
 10334                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 10335  163D  0879               	movf	_DimmerLights,w
 10336  163E  0086               	movwf	6
 10337  163F  3001               	movlw	1	; select bank2/3
 10338  1640  0087               	movwf	7
 10339  1641  1581               	bsf	1,3
 10340                           
 10341                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 10342  1642  0879               	movf	_DimmerLights,w
 10343  1643  0086               	movwf	6
 10344  1644  3001               	movlw	1	; select bank2/3
 10345  1645  0087               	movwf	7
 10346  1646  1481               	bsf	1,1
 10347                           
 10348                           ;Dimmer_B1.c: 651: } else {
 10349  1647  0008               	return
 10350  1648                     l6051:	
 10351                           
 10352                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 10353  1648  0879               	movf	_DimmerLights,w
 10354  1649  0086               	movwf	6
 10355  164A  3001               	movlw	1	; select bank2/3
 10356  164B  0087               	movwf	7
 10357  164C  1D81               	btfss	1,3
 10358  164D  0008               	return
 10359                           
 10360                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 10361  164E  0879               	movf	_DimmerLights,w
 10362  164F  0086               	movwf	6
 10363  1650  3001               	movlw	1	; select bank2/3
 10364  1651  0087               	movwf	7
 10365  1652  1081               	bcf	1,1
 10366                           
 10367                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 10368  1653  0879               	movf	_DimmerLights,w
 10369  1654  0086               	movwf	6
 10370  1655  3001               	movlw	1	; select bank2/3
 10371  1656  0087               	movwf	7
 10372  1657  1181               	bcf	1,3
 10373                           
 10374                           ;Dimmer_B1.c: 656: ;;
 10375                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 10376  1658  0879               	movf	_DimmerLights,w
 10377  1659  3E04               	addlw	4
 10378  165A  0086               	movwf	6
 10379  165B  3001               	movlw	1	; select bank2/3
 10380  165C  0087               	movwf	7
 10381  165D  0801               	movf	1,w
 10382  165E  00E3               	movwf	??_setDimmerLights_Adj
 10383  165F  0879               	movf	_DimmerLights,w
 10384  1660  3E05               	addlw	5
 10385  1661  0086               	movwf	6
 10386  1662  3001               	movlw	1	; select bank2/3
 10387  1663  0087               	movwf	7
 10388  1664  0863               	movf	??_setDimmerLights_Adj,w
 10389  1665  0081               	movwf	1
 10390                           
 10391                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 10392  1666  01DD               	clrf	setRF_DimmerLights@on
 10393  1667  0ADD               	incf	setRF_DimmerLights@on,f
 10394  1668  0864               	movf	setDimmerLights_Adj@lights,w
 10395  1669  318B  23C5  3196   	fcall	_setRF_DimmerLights
 10396                           
 10397                           ;Dimmer_B1.c: 666: setTxData();
 10398  166C  3185  2510         	fcall	_setTxData
 10399  166E  0008               	return
 10400  166F                     __end_of_setDimmerLights_Adj:	
 10401                           
 10402                           	psect	text59
 10403  0E6E                     __ptext59:	
 10404 ;; *************** function _setDimmerLights *****************
 10405 ;; Defined at:
 10406 ;;		line 593 in file "../src/Dimmer_B1.c"
 10407 ;; Parameters:    Size  Location     Type
 10408 ;;  lights          1    wreg     unsigned char 
 10409 ;;  status          1    4[BANK0 ] unsigned char 
 10410 ;; Auto vars:     Size  Location     Type
 10411 ;;  lights          1    6[BANK0 ] unsigned char 
 10412 ;; Return value:  Size  Location     Type
 10413 ;;		None               void
 10414 ;; Registers used:
 10415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10416 ;; Tracked objects:
 10417 ;;		On entry : 0/0
 10418 ;;		On exit  : 0/0
 10419 ;;		Unchanged: 0/0
 10420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10421 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;Total ram usage:        3 bytes
 10426 ;; Hardware stack levels used:    1
 10427 ;; Hardware stack levels required when called:    7
 10428 ;; This function calls:
 10429 ;;		_DimmerLightsPointSelect
 10430 ;;		_setLED
 10431 ;;		_setMemory_GO
 10432 ;; This function is called by:
 10433 ;;		_setDimmerLights_Main
 10434 ;;		_setControl_Lights_Table
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           
 10439                           ;psect for function _setDimmerLights
 10440  0E6E                     _setDimmerLights:	
 10441                           
 10442                           ;incstack = 0
 10443                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10444                           ;setDimmerLights@lights stored from wreg
 10445  0E6E  0020               	movlb	0	; select bank0
 10446  0E6F  00A6               	movwf	setDimmerLights@lights
 10447                           
 10448                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 10449  0E70  0826               	movf	setDimmerLights@lights,w
 10450  0E71  3192  2241  318E   	fcall	_DimmerLightsPointSelect
 10451                           
 10452                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 10453  0E74  0020               	movlb	0	; select bank0
 10454  0E75  0826               	movf	setDimmerLights@lights,w
 10455  0E76  00A5               	movwf	??_setDimmerLights
 10456  0E77  0021               	movlb	1	; select bank1
 10457  0E78  0A5B               	incf	_Dimmer^(0+128),w
 10458  0E79  0086               	movwf	6
 10459  0E7A  0187               	clrf	7
 10460  0E7B  0020               	movlb	0	; select bank0
 10461  0E7C  0825               	movf	??_setDimmerLights,w
 10462  0E7D  0081               	movwf	1
 10463                           
 10464                           ;Dimmer_B1.c: 596: if (status == 1) {
 10465  0E7E  0824               	movf	setDimmerLights@status,w
 10466  0E7F  3A01               	xorlw	1
 10467  0E80  1D03               	skipz
 10468  0E81  2EC2               	goto	l7275
 10469                           
 10470                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 10471  0E82  0879               	movf	_DimmerLights,w
 10472  0E83  0086               	movwf	6
 10473  0E84  3001               	movlw	1	; select bank2/3
 10474  0E85  0087               	movwf	7
 10475  0E86  1681               	bsf	1,5
 10476                           
 10477                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 10478  0E87  01A2               	clrf	setLED@command
 10479  0E88  0826               	movf	setDimmerLights@lights,w
 10480  0E89  318A  2297  318E   	fcall	_setLED
 10481                           
 10482                           ;Dimmer_B1.c: 600: ;;
 10483                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 10484  0E8C  0879               	movf	_DimmerLights,w
 10485  0E8D  0086               	movwf	6
 10486  0E8E  3001               	movlw	1	; select bank2/3
 10487  0E8F  0087               	movwf	7
 10488  0E90  1481               	bsf	1,1
 10489                           
 10490                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 10491  0E91  3007               	movlw	7
 10492  0E92  0020               	movlb	0	; select bank0
 10493  0E93  00A5               	movwf	??_setDimmerLights
 10494  0E94  0879               	movf	_DimmerLights,w
 10495  0E95  3E02               	addlw	2
 10496  0E96  0086               	movwf	6
 10497  0E97  3001               	movlw	1	; select bank2/3
 10498  0E98  0087               	movwf	7
 10499  0E99  0825               	movf	??_setDimmerLights,w
 10500  0E9A  0081               	movwf	1
 10501                           
 10502                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 10503  0E9B  0879               	movf	_DimmerLights,w
 10504  0E9C  0086               	movwf	6
 10505  0E9D  3001               	movlw	1	; select bank2/3
 10506  0E9E  0087               	movwf	7
 10507  0E9F  1B01               	btfsc	1,6
 10508  0EA0  0008               	return
 10509                           
 10510                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 10511  0EA1  0879               	movf	_DimmerLights,w
 10512  0EA2  0086               	movwf	6
 10513  0EA3  3001               	movlw	1	; select bank2/3
 10514  0EA4  0087               	movwf	7
 10515  0EA5  1701               	bsf	1,6
 10516                           
 10517                           ;Dimmer_B1.c: 607: ;;
 10518                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 10519  0EA6  3000               	movlw	0
 10520  0EA7  3192  22E3         	fcall	_setMemory_GO
 10521                           
 10522                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 10523  0EA9  0879               	movf	_DimmerLights,w
 10524  0EAA  3E05               	addlw	5
 10525  0EAB  0086               	movwf	6
 10526  0EAC  3001               	movlw	1	; select bank2/3
 10527  0EAD  0087               	movwf	7
 10528  0EAE  0801               	movf	1,w
 10529  0EAF  0020               	movlb	0	; select bank0
 10530  0EB0  00A5               	movwf	??_setDimmerLights
 10531  0EB1  0879               	movf	_DimmerLights,w
 10532  0EB2  3E04               	addlw	4
 10533  0EB3  0086               	movwf	6
 10534  0EB4  3001               	movlw	1	; select bank2/3
 10535  0EB5  0087               	movwf	7
 10536  0EB6  0825               	movf	??_setDimmerLights,w
 10537  0EB7  0081               	movwf	1
 10538                           
 10539                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 10540  0EB8  3020               	movlw	32
 10541  0EB9  00A5               	movwf	??_setDimmerLights
 10542  0EBA  0879               	movf	_DimmerLights,w
 10543  0EBB  3E04               	addlw	4
 10544  0EBC  0086               	movwf	6
 10545  0EBD  3001               	movlw	1	; select bank2/3
 10546  0EBE  0087               	movwf	7
 10547  0EBF  0825               	movf	??_setDimmerLights,w
 10548  0EC0  0081               	movwf	1
 10549                           
 10550                           ;Dimmer_B1.c: 617: }
 10551                           ;Dimmer_B1.c: 618: } else {
 10552  0EC1  0008               	return
 10553  0EC2                     l7275:	
 10554                           
 10555                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 10556  0EC2  0879               	movf	_DimmerLights,w
 10557  0EC3  0086               	movwf	6
 10558  0EC4  3001               	movlw	1	; select bank2/3
 10559  0EC5  0087               	movwf	7
 10560  0EC6  1281               	bcf	1,5
 10561                           
 10562                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 10563  0EC7  0879               	movf	_DimmerLights,w
 10564  0EC8  3E06               	addlw	6
 10565  0EC9  0086               	movwf	6
 10566  0ECA  3001               	movlw	1	; select bank2/3
 10567  0ECB  0087               	movwf	7
 10568  0ECC  0801               	movf	1,w
 10569  0ECD  00A5               	movwf	??_setDimmerLights
 10570  0ECE  0879               	movf	_DimmerLights,w
 10571  0ECF  3E04               	addlw	4
 10572  0ED0  0086               	movwf	6
 10573  0ED1  3001               	movlw	1	; select bank2/3
 10574  0ED2  0087               	movwf	7
 10575  0ED3  0825               	movf	??_setDimmerLights,w
 10576  0ED4  0081               	movwf	1
 10577                           
 10578                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 10579  0ED5  0879               	movf	_DimmerLights,w
 10580  0ED6  0086               	movwf	6
 10581  0ED7  3001               	movlw	1	; select bank2/3
 10582  0ED8  0087               	movwf	7
 10583  0ED9  1481               	bsf	1,1
 10584                           
 10585                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 10586  0EDA  0879               	movf	_DimmerLights,w
 10587  0EDB  0086               	movwf	6
 10588  0EDC  3001               	movlw	1	; select bank2/3
 10589  0EDD  0087               	movwf	7
 10590  0EDE  1181               	bcf	1,3
 10591                           
 10592                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 10593  0EDF  0879               	movf	_DimmerLights,w
 10594  0EE0  0086               	movwf	6
 10595  0EE1  3001               	movlw	1	; select bank2/3
 10596  0EE2  0087               	movwf	7
 10597  0EE3  1201               	bcf	1,4
 10598                           
 10599                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 10600  0EE4  3007               	movlw	7
 10601  0EE5  00A5               	movwf	??_setDimmerLights
 10602  0EE6  0879               	movf	_DimmerLights,w
 10603  0EE7  3E02               	addlw	2
 10604  0EE8  0086               	movwf	6
 10605  0EE9  3001               	movlw	1	; select bank2/3
 10606  0EEA  0087               	movwf	7
 10607  0EEB  0825               	movf	??_setDimmerLights,w
 10608  0EEC  0081               	movwf	1
 10609  0EED  0008               	return
 10610  0EEE                     __end_of_setDimmerLights:	
 10611                           
 10612                           	psect	text60
 10613  0A97                     __ptext60:	
 10614 ;; *************** function _setLED *****************
 10615 ;; Defined at:
 10616 ;;		line 70 in file "../src/LED_B1.c"
 10617 ;; Parameters:    Size  Location     Type
 10618 ;;  led             1    wreg     unsigned char 
 10619 ;;  command         1    2[BANK0 ] unsigned char 
 10620 ;; Auto vars:     Size  Location     Type
 10621 ;;  led             1    3[BANK0 ] unsigned char 
 10622 ;; Return value:  Size  Location     Type
 10623 ;;		None               void
 10624 ;; Registers used:
 10625 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10626 ;; Tracked objects:
 10627 ;;		On entry : 0/0
 10628 ;;		On exit  : 0/0
 10629 ;;		Unchanged: 0/0
 10630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10631 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10634 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;Total ram usage:        2 bytes
 10636 ;; Hardware stack levels used:    1
 10637 ;; Hardware stack levels required when called:    6
 10638 ;; This function calls:
 10639 ;;		_LedPointSelect
 10640 ;; This function is called by:
 10641 ;;		_setDimmerLights
 10642 ;;		_setLED_Initialization
 10643 ;;		_setSw_Initialization
 10644 ;;		_setDimmerLights_ERROR
 10645 ;; This function uses a non-reentrant model
 10646 ;;
 10647                           
 10648                           
 10649                           ;psect for function _setLED
 10650  0A97                     _setLED:	
 10651                           
 10652                           ;incstack = 0
 10653                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10654                           ;setLED@led stored from wreg
 10655  0A97  0020               	movlb	0	; select bank0
 10656  0A98  00A3               	movwf	setLED@led
 10657                           
 10658                           ;LED_B1.c: 71: LedPointSelect(led);
 10659  0A99  0823               	movf	setLED@led,w
 10660  0A9A  3194  2467  318A   	fcall	_LedPointSelect
 10661                           
 10662                           ;LED_B1.c: 72: if (command == 0) {
 10663  0A9D  0020               	movlb	0	; select bank0
 10664  0A9E  08A2               	movf	setLED@command,f
 10665  0A9F  1D03               	skipz
 10666  0AA0  2AB3               	goto	l7217
 10667                           
 10668                           ;LED_B1.c: 74: if (led == 1) {
 10669  0AA1  0823               	movf	setLED@led,w
 10670  0AA2  3A01               	xorlw	1
 10671  0AA3  1D03               	skipz
 10672  0AA4  2AA7               	goto	l7209
 10673                           
 10674                           ;LED_B1.c: 78: RA3 = 1;
 10675  0AA5  158C               	bsf	12,3	;volatile
 10676                           
 10677                           ;LED_B1.c: 80: }
 10678  0AA6  0008               	return
 10679  0AA7                     l7209:	
 10680                           
 10681                           ;LED_B1.c: 83: else if (led == 2) {
 10682  0AA7  0823               	movf	setLED@led,w
 10683  0AA8  3A02               	xorlw	2
 10684  0AA9  1D03               	skipz
 10685  0AAA  2AAD               	goto	l7213
 10686                           
 10687                           ;LED_B1.c: 87: RC7 = 1;
 10688  0AAB  178E               	bsf	14,7	;volatile
 10689                           
 10690                           ;LED_B1.c: 89: }
 10691  0AAC  0008               	return
 10692  0AAD                     l7213:	
 10693                           
 10694                           ;LED_B1.c: 101: else if (led == 99) {
 10695  0AAD  0823               	movf	setLED@led,w
 10696  0AAE  3A63               	xorlw	99
 10697  0AAF  1D03               	skipz
 10698  0AB0  0008               	return
 10699                           
 10700                           ;LED_B1.c: 105: RB5 = 1;
 10701  0AB1  168D               	bsf	13,5	;volatile
 10702                           
 10703                           ;LED_B1.c: 107: }
 10704                           ;LED_B1.c: 109: } else if (command == 1) {
 10705  0AB2  0008               	return
 10706  0AB3                     l7217:	
 10707  0AB3  0822               	movf	setLED@command,w
 10708  0AB4  3A01               	xorlw	1
 10709  0AB5  1D03               	skipz
 10710  0AB6  2AC9               	goto	l7231
 10711                           
 10712                           ;LED_B1.c: 111: if (led == 1) {
 10713  0AB7  0823               	movf	setLED@led,w
 10714  0AB8  3A01               	xorlw	1
 10715  0AB9  1D03               	skipz
 10716  0ABA  2ABD               	goto	l7223
 10717                           
 10718                           ;LED_B1.c: 115: RA3 = 0;
 10719  0ABB  118C               	bcf	12,3	;volatile
 10720                           
 10721                           ;LED_B1.c: 117: }
 10722  0ABC  0008               	return
 10723  0ABD                     l7223:	
 10724                           
 10725                           ;LED_B1.c: 120: else if (led == 2) {
 10726  0ABD  0823               	movf	setLED@led,w
 10727  0ABE  3A02               	xorlw	2
 10728  0ABF  1D03               	skipz
 10729  0AC0  2AC3               	goto	l7227
 10730                           
 10731                           ;LED_B1.c: 124: RC7 = 0;
 10732  0AC1  138E               	bcf	14,7	;volatile
 10733                           
 10734                           ;LED_B1.c: 126: }
 10735  0AC2  0008               	return
 10736  0AC3                     l7227:	
 10737                           
 10738                           ;LED_B1.c: 138: else if (led == 99) {
 10739  0AC3  0823               	movf	setLED@led,w
 10740  0AC4  3A63               	xorlw	99
 10741  0AC5  1D03               	skipz
 10742  0AC6  0008               	return
 10743                           
 10744                           ;LED_B1.c: 142: RB5 = 0;
 10745  0AC7  128D               	bcf	13,5	;volatile
 10746                           
 10747                           ;LED_B1.c: 144: }
 10748                           ;LED_B1.c: 146: } else if (command == 10) {
 10749  0AC8  0008               	return
 10750  0AC9                     l7231:	
 10751  0AC9  0822               	movf	setLED@command,w
 10752  0ACA  3A0A               	xorlw	10
 10753  0ACB  1D03               	skipz
 10754  0ACC  2AED               	goto	l7247
 10755                           
 10756                           ;LED_B1.c: 147: LED->GO = 0;
 10757  0ACD  0021               	movlb	1	; select bank1
 10758  0ACE  085F               	movf	_LED^(0+128),w
 10759  0ACF  0086               	movwf	6
 10760  0AD0  3001               	movlw	1	; select bank2/3
 10761  0AD1  0087               	movwf	7
 10762  0AD2  1081               	bcf	1,1
 10763                           
 10764                           ;LED_B1.c: 148: LED->Time = 0;
 10765  0AD3  0A5F               	incf	_LED^(0+128),w
 10766  0AD4  0086               	movwf	6
 10767  0AD5  3001               	movlw	1	; select bank2/3
 10768  0AD6  0087               	movwf	7
 10769  0AD7  3000               	movlw	0
 10770  0AD8  3FC0               	movwi [0]fsr1
 10771  0AD9  3FC1               	movwi [1]fsr1
 10772                           
 10773                           ;LED_B1.c: 150: if (led == 1) {
 10774  0ADA  0020               	movlb	0	; select bank0
 10775  0ADB  0823               	movf	setLED@led,w
 10776  0ADC  3A01               	xorlw	1
 10777  0ADD  1D03               	skipz
 10778  0ADE  2AE1               	goto	l7239
 10779                           
 10780                           ;LED_B1.c: 154: RA3 = 1;
 10781  0ADF  158C               	bsf	12,3	;volatile
 10782                           
 10783                           ;LED_B1.c: 156: }
 10784  0AE0  0008               	return
 10785  0AE1                     l7239:	
 10786                           
 10787                           ;LED_B1.c: 159: else if (led == 2) {
 10788  0AE1  0823               	movf	setLED@led,w
 10789  0AE2  3A02               	xorlw	2
 10790  0AE3  1D03               	skipz
 10791  0AE4  2AE7               	goto	l7243
 10792                           
 10793                           ;LED_B1.c: 163: RC7 = 1;
 10794  0AE5  178E               	bsf	14,7	;volatile
 10795                           
 10796                           ;LED_B1.c: 165: }
 10797  0AE6  0008               	return
 10798  0AE7                     l7243:	
 10799                           
 10800                           ;LED_B1.c: 177: else if (led == 99) {
 10801  0AE7  0823               	movf	setLED@led,w
 10802  0AE8  3A63               	xorlw	99
 10803  0AE9  1D03               	skipz
 10804  0AEA  0008               	return
 10805                           
 10806                           ;LED_B1.c: 181: RB5 = 1;
 10807  0AEB  168D               	bsf	13,5	;volatile
 10808                           
 10809                           ;LED_B1.c: 183: }
 10810                           ;LED_B1.c: 185: } else if (command == 11) {
 10811  0AEC  0008               	return
 10812  0AED                     l7247:	
 10813  0AED  0822               	movf	setLED@command,w
 10814  0AEE  3A0B               	xorlw	11
 10815  0AEF  1D03               	skipz
 10816  0AF0  0008               	return
 10817                           
 10818                           ;LED_B1.c: 186: LED->GO = 1;
 10819  0AF1  0021               	movlb	1	; select bank1
 10820  0AF2  085F               	movf	_LED^(0+128),w
 10821  0AF3  0086               	movwf	6
 10822  0AF4  3001               	movlw	1	; select bank2/3
 10823  0AF5  0087               	movwf	7
 10824  0AF6  1481               	bsf	1,1
 10825  0AF7  0008               	return
 10826  0AF8                     __end_of_setLED:	
 10827                           
 10828                           	psect	text61
 10829  1467                     __ptext61:	
 10830 ;; *************** function _LedPointSelect *****************
 10831 ;; Defined at:
 10832 ;;		line 7 in file "../src/LED_B1.c"
 10833 ;; Parameters:    Size  Location     Type
 10834 ;;  led             1    wreg     unsigned char 
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;  led             1    1[BANK0 ] unsigned char 
 10837 ;; Return value:  Size  Location     Type
 10838 ;;		None               void
 10839 ;; Registers used:
 10840 ;;		wreg
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;Total ram usage:        2 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; Hardware stack levels required when called:    5
 10853 ;; This function calls:
 10854 ;;		Nothing
 10855 ;; This function is called by:
 10856 ;;		_setLED_Initialization
 10857 ;;		_setLED
 10858 ;;		_setLED_Main
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           
 10863                           ;psect for function _LedPointSelect
 10864  1467                     _LedPointSelect:	
 10865                           
 10866                           ;incstack = 0
 10867                           ; Regs used in _LedPointSelect: [wreg]
 10868                           ;LedPointSelect@led stored from wreg
 10869  1467  0020               	movlb	0	; select bank0
 10870  1468  00A1               	movwf	LedPointSelect@led
 10871                           
 10872                           ;LED_B1.c: 9: if (led == 1) {
 10873  1469  0821               	movf	LedPointSelect@led,w
 10874  146A  3A01               	xorlw	1
 10875  146B  1D03               	skipz
 10876  146C  2C73               	goto	l7193
 10877                           
 10878                           ;LED_B1.c: 10: LED = &VarLED1;
 10879  146D  3066               	movlw	_VarLED1& (0+255)
 10880  146E  00A0               	movwf	??_LedPointSelect
 10881  146F  0820               	movf	??_LedPointSelect,w
 10882  1470  0021               	movlb	1	; select bank1
 10883  1471  00DF               	movwf	_LED^(0+128)
 10884                           
 10885                           ;LED_B1.c: 11: }
 10886  1472  0008               	return
 10887  1473                     l7193:	
 10888                           
 10889                           ;LED_B1.c: 14: else if (led == 2) {
 10890  1473  0020               	movlb	0	; select bank0
 10891  1474  0821               	movf	LedPointSelect@led,w
 10892  1475  3A02               	xorlw	2
 10893  1476  1D03               	skipz
 10894  1477  2C7E               	goto	l7197
 10895                           
 10896                           ;LED_B1.c: 15: LED = &VarLED2;
 10897  1478  306A               	movlw	_VarLED2& (0+255)
 10898  1479  00A0               	movwf	??_LedPointSelect
 10899  147A  0820               	movf	??_LedPointSelect,w
 10900  147B  0021               	movlb	1	; select bank1
 10901  147C  00DF               	movwf	_LED^(0+128)
 10902                           
 10903                           ;LED_B1.c: 16: }
 10904  147D  0008               	return
 10905  147E                     l7197:	
 10906                           
 10907                           ;LED_B1.c: 24: else if (led == 99) {
 10908  147E  0020               	movlb	0	; select bank0
 10909  147F  0821               	movf	LedPointSelect@led,w
 10910  1480  3A63               	xorlw	99
 10911  1481  1D03               	skipz
 10912  1482  0008               	return
 10913                           
 10914                           ;LED_B1.c: 25: LED = &VarErrLED;
 10915  1483  3062               	movlw	_VarErrLED& (0+255)
 10916  1484  00A0               	movwf	??_LedPointSelect
 10917  1485  0820               	movf	??_LedPointSelect,w
 10918  1486  0021               	movlb	1	; select bank1
 10919  1487  00DF               	movwf	_LED^(0+128)
 10920  1488  0008               	return
 10921  1489                     __end_of_LedPointSelect:	
 10922                           
 10923                           	psect	text62
 10924  12A4                     __ptext62:	
 10925 ;; *************** function _DimmerLights_Close *****************
 10926 ;; Defined at:
 10927 ;;		line 396 in file "../src/Dimmer_B1.c"
 10928 ;; Parameters:    Size  Location     Type
 10929 ;;		None
 10930 ;; Auto vars:     Size  Location     Type
 10931 ;;		None
 10932 ;; Return value:  Size  Location     Type
 10933 ;;		None               void
 10934 ;; Registers used:
 10935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10936 ;; Tracked objects:
 10937 ;;		On entry : 0/0
 10938 ;;		On exit  : 0/0
 10939 ;;		Unchanged: 0/0
 10940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;Total ram usage:        0 bytes
 10946 ;; Hardware stack levels used:    1
 10947 ;; Hardware stack levels required when called:    6
 10948 ;; This function calls:
 10949 ;;		_getDimmerLights_StatusFlag
 10950 ;;		_setMemory_GO
 10951 ;; This function is called by:
 10952 ;;		_DimmerLights_Main
 10953 ;; This function uses a non-reentrant model
 10954 ;;
 10955                           
 10956                           
 10957                           ;psect for function _DimmerLights_Close
 10958  12A4                     _DimmerLights_Close:	
 10959                           
 10960                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 10961                           
 10962                           ;incstack = 0
 10963                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10964  12A4  0021               	movlb	1	; select bank1
 10965  12A5  085B               	movf	_Dimmer^(0+128),w
 10966  12A6  0086               	movwf	6
 10967  12A7  0187               	clrf	7
 10968  12A8  1C01               	btfss	1,0
 10969  12A9  0008               	return
 10970                           
 10971                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 10972  12AA  085B               	movf	_Dimmer^(0+128),w
 10973  12AB  0086               	movwf	6
 10974  12AC  0187               	clrf	7
 10975  12AD  1001               	bcf	1,0
 10976                           
 10977                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 10978  12AE  3191  21E9  3192   	fcall	_getDimmerLights_StatusFlag
 10979  12B1  3800               	iorlw	0
 10980  12B2  1D03               	skipz
 10981  12B3  0008               	return
 10982                           
 10983                           ;Dimmer_B1.c: 400: ;;
 10984                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 10985  12B4  3001               	movlw	1
 10986  12B5  3192  22E3         	fcall	_setMemory_GO
 10987  12B7  0008               	return
 10988  12B8                     __end_of_DimmerLights_Close:	
 10989                           
 10990                           	psect	text63
 10991  12E3                     __ptext63:	
 10992 ;; *************** function _setMemory_GO *****************
 10993 ;; Defined at:
 10994 ;;		line 885 in file "../src/MCU_B1.c"
 10995 ;; Parameters:    Size  Location     Type
 10996 ;;  command         1    wreg     unsigned char 
 10997 ;; Auto vars:     Size  Location     Type
 10998 ;;  command         1    2[BANK0 ] unsigned char 
 10999 ;; Return value:  Size  Location     Type
 11000 ;;		None               void
 11001 ;; Registers used:
 11002 ;;		wreg, status,2, status,0
 11003 ;; Tracked objects:
 11004 ;;		On entry : 0/0
 11005 ;;		On exit  : 0/0
 11006 ;;		Unchanged: 0/0
 11007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11010 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11012 ;;Total ram usage:        3 bytes
 11013 ;; Hardware stack levels used:    1
 11014 ;; Hardware stack levels required when called:    5
 11015 ;; This function calls:
 11016 ;;		Nothing
 11017 ;; This function is called by:
 11018 ;;		_DimmerLights_Close
 11019 ;;		_setDimmerLights
 11020 ;; This function uses a non-reentrant model
 11021 ;;
 11022                           
 11023                           
 11024                           ;psect for function _setMemory_GO
 11025  12E3                     _setMemory_GO:	
 11026                           
 11027                           ;incstack = 0
 11028                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 11029                           ;setMemory_GO@command stored from wreg
 11030  12E3  0020               	movlb	0	; select bank0
 11031  12E4  00A2               	movwf	setMemory_GO@command
 11032                           
 11033                           ;MCU_B1.c: 886: Memory.GO = command;
 11034  12E5  0822               	movf	setMemory_GO@command,w
 11035  12E6  0023               	movlb	3	; select bank3
 11036  12E7  10C4               	bcf	(_Memory^(0+384)+36),1
 11037  12E8  1D03               	skipz
 11038  12E9  14C4               	bsf	(_Memory^(0+384)+36),1
 11039                           
 11040                           ;MCU_B1.c: 887: if (command == 0) {
 11041  12EA  0020               	movlb	0	; select bank0
 11042  12EB  08A2               	movf	setMemory_GO@command,f
 11043  12EC  1D03               	skipz
 11044  12ED  0008               	return
 11045                           
 11046                           ;MCU_B1.c: 888: Memory.Time = command;
 11047  12EE  0822               	movf	setMemory_GO@command,w
 11048  12EF  00A0               	movwf	??_setMemory_GO
 11049  12F0  01A1               	clrf	??_setMemory_GO+1
 11050  12F1  0820               	movf	??_setMemory_GO,w
 11051  12F2  0023               	movlb	3	; select bank3
 11052  12F3  00C2               	movwf	(_Memory^(0+384)+34)
 11053  12F4  0020               	movlb	0	; select bank0
 11054  12F5  0821               	movf	??_setMemory_GO+1,w
 11055  12F6  0023               	movlb	3	; select bank3
 11056  12F7  00C3               	movwf	((_Memory+1)^(0+384)+34)
 11057  12F8  0008               	return
 11058  12F9                     __end_of_setMemory_GO:	
 11059                           
 11060                           	psect	text64
 11061  11E9                     __ptext64:	
 11062 ;; *************** function _getDimmerLights_StatusFlag *****************
 11063 ;; Defined at:
 11064 ;;		line 475 in file "../src/Dimmer_B1.c"
 11065 ;; Parameters:    Size  Location     Type
 11066 ;;		None
 11067 ;; Auto vars:     Size  Location     Type
 11068 ;;  Status          1    1[BANK0 ] unsigned char 
 11069 ;; Return value:  Size  Location     Type
 11070 ;;                  1    wreg      unsigned char 
 11071 ;; Registers used:
 11072 ;;		wreg, status,2
 11073 ;; Tracked objects:
 11074 ;;		On entry : 0/0
 11075 ;;		On exit  : 0/0
 11076 ;;		Unchanged: 0/0
 11077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11081 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11082 ;;Total ram usage:        3 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; Hardware stack levels required when called:    5
 11085 ;; This function calls:
 11086 ;;		Nothing
 11087 ;; This function is called by:
 11088 ;;		_DimmerLights_Close
 11089 ;;		_DimmerLights_Exceptions
 11090 ;; This function uses a non-reentrant model
 11091 ;;
 11092                           
 11093                           
 11094                           ;psect for function _getDimmerLights_StatusFlag
 11095  11E9                     _getDimmerLights_StatusFlag:	
 11096                           
 11097                           ;Dimmer_B1.c: 476: char Status = 0;
 11098                           
 11099                           ;incstack = 0
 11100                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 11101  11E9  0020               	movlb	0	; select bank0
 11102  11EA  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11103                           
 11104                           ;Dimmer_B1.c: 483: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1) ? 1 : 0;
 11105  11EB  01A2               	clrf	_getDimmerLights_StatusFlag$1884
 11106  11EC  0AA2               	incf	_getDimmerLights_StatusFlag$1884,f
 11107  11ED  0022               	movlb	2	; select bank2
 11108  11EE  1F28               	btfss	_DimmerLights1^(0+256),6
 11109  11EF  1B37               	btfsc	_DimmerLights2^(0+256),6
 11110  11F0  29F3               	goto	l6039
 11111  11F1  0020               	movlb	0	; select bank0
 11112  11F2  01A2               	clrf	_getDimmerLights_StatusFlag$1884
 11113  11F3                     l6039:	
 11114  11F3  0020               	movlb	0	; select bank0
 11115  11F4  0822               	movf	_getDimmerLights_StatusFlag$1884,w
 11116  11F5  00A0               	movwf	??_getDimmerLights_StatusFlag
 11117  11F6  0820               	movf	??_getDimmerLights_StatusFlag,w
 11118  11F7  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11119                           
 11120                           ;Dimmer_B1.c: 490: return Status;
 11121  11F8  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11122  11F9  0008               	return
 11123  11FA                     __end_of_getDimmerLights_StatusFlag:	
 11124                           
 11125                           	psect	text65
 11126  12F9                     __ptext65:	
 11127 ;; *************** function _DimmerLights_Initialization *****************
 11128 ;; Defined at:
 11129 ;;		line 334 in file "../src/Dimmer_B1.c"
 11130 ;; Parameters:    Size  Location     Type
 11131 ;;		None
 11132 ;; Auto vars:     Size  Location     Type
 11133 ;;		None
 11134 ;; Return value:  Size  Location     Type
 11135 ;;		None               void
 11136 ;; Registers used:
 11137 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;Total ram usage:        1 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; Hardware stack levels required when called:    7
 11150 ;; This function calls:
 11151 ;;		_Dimmer_Initialization
 11152 ;;		_setDimmerLights_Initialization
 11153 ;; This function is called by:
 11154 ;;		_main
 11155 ;; This function uses a non-reentrant model
 11156 ;;
 11157                           
 11158                           
 11159                           ;psect for function _DimmerLights_Initialization
 11160  12F9                     _DimmerLights_Initialization:	
 11161                           
 11162                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 11163                           
 11164                           ;incstack = 0
 11165                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11166  12F9  3028               	movlw	_DimmerLights1& (0+255)
 11167  12FA  0020               	movlb	0	; select bank0
 11168  12FB  00A4               	movwf	??_DimmerLights_Initialization
 11169  12FC  0824               	movf	??_DimmerLights_Initialization,w
 11170  12FD  0021               	movlb	1	; select bank1
 11171  12FE  00DC               	movwf	_DimmerLights11^(0+128)
 11172                           
 11173                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 11174  12FF  3001               	movlw	1
 11175  1300  3195  256F  3192   	fcall	_setDimmerLights_Initialization
 11176                           
 11177                           ;Dimmer_B1.c: 342: DimmerLights22 = &DimmerLights2;
 11178  1303  3037               	movlw	_DimmerLights2& (0+255)
 11179  1304  0020               	movlb	0	; select bank0
 11180  1305  00A4               	movwf	??_DimmerLights_Initialization
 11181  1306  0824               	movf	??_DimmerLights_Initialization,w
 11182  1307  0021               	movlb	1	; select bank1
 11183  1308  00DD               	movwf	_DimmerLights22^(0+128)
 11184                           
 11185                           ;Dimmer_B1.c: 343: setDimmerLights_Initialization(2);
 11186  1309  3002               	movlw	2
 11187  130A  3195  256F  3192   	fcall	_setDimmerLights_Initialization
 11188                           
 11189                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 11190  130D  3190  207E         	fcall	_Dimmer_Initialization
 11191  130F  0008               	return
 11192  1310                     __end_of_DimmerLights_Initialization:	
 11193                           
 11194                           	psect	text66
 11195  156F                     __ptext66:	
 11196 ;; *************** function _setDimmerLights_Initialization *****************
 11197 ;; Defined at:
 11198 ;;		line 357 in file "../src/Dimmer_B1.c"
 11199 ;; Parameters:    Size  Location     Type
 11200 ;;  lights          1    wreg     unsigned char 
 11201 ;; Auto vars:     Size  Location     Type
 11202 ;;  lights          1    3[BANK0 ] unsigned char 
 11203 ;; Return value:  Size  Location     Type
 11204 ;;		None               void
 11205 ;; Registers used:
 11206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11207 ;; Tracked objects:
 11208 ;;		On entry : 0/0
 11209 ;;		On exit  : 0/0
 11210 ;;		Unchanged: 0/0
 11211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;Total ram usage:        2 bytes
 11217 ;; Hardware stack levels used:    1
 11218 ;; Hardware stack levels required when called:    6
 11219 ;; This function calls:
 11220 ;;		_DimmerLightsPointSelect
 11221 ;; This function is called by:
 11222 ;;		_DimmerLights_Initialization
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           
 11227                           ;psect for function _setDimmerLights_Initialization
 11228  156F                     _setDimmerLights_Initialization:	
 11229                           
 11230                           ;incstack = 0
 11231                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11232                           ;setDimmerLights_Initialization@lights stored from wreg
 11233  156F  0020               	movlb	0	; select bank0
 11234  1570  00A3               	movwf	setDimmerLights_Initialization@lights
 11235                           
 11236                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 11237  1571  0823               	movf	setDimmerLights_Initialization@lights,w
 11238  1572  3192  2241         	fcall	_DimmerLightsPointSelect
 11239                           
 11240                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 11241  1574  0879               	movf	_DimmerLights,w
 11242  1575  3E09               	addlw	9
 11243  1576  0086               	movwf	6
 11244  1577  3001               	movlw	1	; select bank2/3
 11245  1578  0087               	movwf	7
 11246  1579  1501               	bsf	1,2
 11247                           
 11248                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 11249  157A  3020               	movlw	32
 11250  157B  0020               	movlb	0	; select bank0
 11251  157C  00A2               	movwf	??_setDimmerLights_Initialization
 11252  157D  0879               	movf	_DimmerLights,w
 11253  157E  3E05               	addlw	5
 11254  157F  0086               	movwf	6
 11255  1580  3001               	movlw	1	; select bank2/3
 11256  1581  0087               	movwf	7
 11257  1582  0822               	movf	??_setDimmerLights_Initialization,w
 11258  1583  0081               	movwf	1
 11259                           
 11260                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 11261  1584  303C               	movlw	60
 11262  1585  00A2               	movwf	??_setDimmerLights_Initialization
 11263  1586  0879               	movf	_DimmerLights,w
 11264  1587  3E06               	addlw	6
 11265  1588  0086               	movwf	6
 11266  1589  3001               	movlw	1	; select bank2/3
 11267  158A  0087               	movwf	7
 11268  158B  0822               	movf	??_setDimmerLights_Initialization,w
 11269  158C  0081               	movwf	1
 11270                           
 11271                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11272  158D  0879               	movf	_DimmerLights,w
 11273  158E  3E06               	addlw	6
 11274  158F  0086               	movwf	6
 11275  1590  3001               	movlw	1	; select bank2/3
 11276  1591  0087               	movwf	7
 11277  1592  0801               	movf	1,w
 11278  1593  00A2               	movwf	??_setDimmerLights_Initialization
 11279  1594  0879               	movf	_DimmerLights,w
 11280  1595  3E04               	addlw	4
 11281  1596  0086               	movwf	6
 11282  1597  3001               	movlw	1	; select bank2/3
 11283  1598  0087               	movwf	7
 11284  1599  0822               	movf	??_setDimmerLights_Initialization,w
 11285  159A  0081               	movwf	1
 11286  159B  0008               	return
 11287  159C                     __end_of_setDimmerLights_Initialization:	
 11288                           
 11289                           	psect	text67
 11290  107E                     __ptext67:	
 11291 ;; *************** function _Dimmer_Initialization *****************
 11292 ;; Defined at:
 11293 ;;		line 786 in file "../src/Dimmer_B1.c"
 11294 ;; Parameters:    Size  Location     Type
 11295 ;;		None
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;		None
 11298 ;; Return value:  Size  Location     Type
 11299 ;;		None               void
 11300 ;; Registers used:
 11301 ;;		wreg
 11302 ;; Tracked objects:
 11303 ;;		On entry : 0/0
 11304 ;;		On exit  : 0/0
 11305 ;;		Unchanged: 0/0
 11306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11310 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11311 ;;Total ram usage:        1 bytes
 11312 ;; Hardware stack levels used:    1
 11313 ;; Hardware stack levels required when called:    5
 11314 ;; This function calls:
 11315 ;;		Nothing
 11316 ;; This function is called by:
 11317 ;;		_DimmerLights_Initialization
 11318 ;; This function uses a non-reentrant model
 11319 ;;
 11320                           
 11321                           
 11322                           ;psect for function _Dimmer_Initialization
 11323  107E                     _Dimmer_Initialization:	
 11324                           
 11325                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 11326                           
 11327                           ;incstack = 0
 11328                           ; Regs used in _Dimmer_Initialization: [wreg]
 11329  107E  30E7               	movlw	_Dimmer1& (0+255)
 11330  107F  0020               	movlb	0	; select bank0
 11331  1080  00A0               	movwf	??_Dimmer_Initialization
 11332  1081  0820               	movf	??_Dimmer_Initialization,w
 11333  1082  0021               	movlb	1	; select bank1
 11334  1083  00DB               	movwf	_Dimmer^(0+128)
 11335  1084  0008               	return
 11336  1085                     __end_of_Dimmer_Initialization:	
 11337                           
 11338                           	psect	text68
 11339  10A3                     __ptext68:	
 11340 ;; *************** function _DelayOff_Main *****************
 11341 ;; Defined at:
 11342 ;;		line 41 in file "../src/DelayOff_B1.c"
 11343 ;; Parameters:    Size  Location     Type
 11344 ;;		None
 11345 ;; Auto vars:     Size  Location     Type
 11346 ;;		None
 11347 ;; Return value:  Size  Location     Type
 11348 ;;		None               void
 11349 ;; Registers used:
 11350 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11351 ;; Tracked objects:
 11352 ;;		On entry : 0/0
 11353 ;;		On exit  : 0/0
 11354 ;;		Unchanged: 0/0
 11355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;Total ram usage:        0 bytes
 11361 ;; Hardware stack levels used:    1
 11362 ;; Hardware stack levels required when called:   10
 11363 ;; This function calls:
 11364 ;;		_DlyOff_Main
 11365 ;; This function is called by:
 11366 ;;		_main
 11367 ;; This function uses a non-reentrant model
 11368 ;;
 11369                           
 11370                           
 11371                           ;psect for function _DelayOff_Main
 11372  10A3                     _DelayOff_Main:	
 11373                           
 11374                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 11375                           
 11376                           ;incstack = 0
 11377                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11378  10A3  3001               	movlw	1
 11379  10A4  318D  25F4  3190   	fcall	_DlyOff_Main
 11380                           
 11381                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 11382  10A7  3002               	movlw	2
 11383  10A8  318D  25F4         	fcall	_DlyOff_Main
 11384  10AA  0008               	return
 11385  10AB                     __end_of_DelayOff_Main:	
 11386                           
 11387                           	psect	text69
 11388  0DF4                     __ptext69:	
 11389 ;; *************** function _DlyOff_Main *****************
 11390 ;; Defined at:
 11391 ;;		line 62 in file "../src/DelayOff_B1.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;  sw              1    wreg     unsigned char 
 11394 ;; Auto vars:     Size  Location     Type
 11395 ;;  sw              1   68[BANK0 ] unsigned char 
 11396 ;; Return value:  Size  Location     Type
 11397 ;;		None               void
 11398 ;; Registers used:
 11399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11400 ;; Tracked objects:
 11401 ;;		On entry : 0/0
 11402 ;;		On exit  : 0/0
 11403 ;;		Unchanged: 0/0
 11404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11408 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11409 ;;Total ram usage:        3 bytes
 11410 ;; Hardware stack levels used:    1
 11411 ;; Hardware stack levels required when called:    9
 11412 ;; This function calls:
 11413 ;;		_DelayOffPointSelect
 11414 ;;		_setBuz
 11415 ;;		_setDimmerLights_Switch
 11416 ;;		_setDimmerLights_Trigger
 11417 ;;		_setRFSW_Status
 11418 ;;		_setRF_DimmerLights
 11419 ;;		_setSw_Status
 11420 ;;		_setTxData
 11421 ;; This function is called by:
 11422 ;;		_DelayOff_Main
 11423 ;; This function uses a non-reentrant model
 11424 ;;
 11425                           
 11426                           
 11427                           ;psect for function _DlyOff_Main
 11428  0DF4                     _DlyOff_Main:	
 11429                           
 11430                           ;incstack = 0
 11431                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11432                           ;DlyOff_Main@sw stored from wreg
 11433  0DF4  0020               	movlb	0	; select bank0
 11434  0DF5  00E4               	movwf	DlyOff_Main@sw
 11435                           
 11436                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 11437  0DF6  0864               	movf	DlyOff_Main@sw,w
 11438  0DF7  3192  227C  318D   	fcall	_DelayOffPointSelect
 11439                           
 11440                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 11441  0DFA  0878               	movf	_DelayOff,w
 11442  0DFB  0086               	movwf	6
 11443  0DFC  3001               	movlw	1	; select bank2/3
 11444  0DFD  0087               	movwf	7
 11445  0DFE  1C81               	btfss	1,1
 11446  0DFF  0008               	return
 11447                           
 11448                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 11449  0E00  0878               	movf	_DelayOff,w
 11450  0E01  3E02               	addlw	2
 11451  0E02  0086               	movwf	6
 11452  0E03  3001               	movlw	1	; select bank2/3
 11453  0E04  0087               	movwf	7
 11454  0E05  3001               	movlw	1
 11455  0E06  0781               	addwf	1,f
 11456  0E07  3141               	addfsr 1,1
 11457  0E08  1803               	skipnc
 11458  0E09  0A81               	incf	1,f
 11459                           
 11460                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 11461  0E0A  0878               	movf	_DelayOff,w
 11462  0E0B  3E02               	addlw	2
 11463  0E0C  0086               	movwf	6
 11464  0E0D  3001               	movlw	1	; select bank2/3
 11465  0E0E  0087               	movwf	7
 11466  0E0F  3F40               	moviw [0]fsr1
 11467  0E10  0020               	movlb	0	; select bank0
 11468  0E11  00E2               	movwf	??_DlyOff_Main
 11469  0E12  3F41               	moviw [1]fsr1
 11470  0E13  00E3               	movwf	??_DlyOff_Main+1
 11471  0E14  3016               	movlw	22
 11472  0E15  0263               	subwf	??_DlyOff_Main+1,w
 11473  0E16  3012               	movlw	18
 11474  0E17  1903               	skipnz
 11475  0E18  0262               	subwf	??_DlyOff_Main,w
 11476  0E19  1C03               	skipc
 11477  0E1A  0008               	return
 11478                           
 11479                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 11480  0E1B  0878               	movf	_DelayOff,w
 11481  0E1C  3E02               	addlw	2
 11482  0E1D  0086               	movwf	6
 11483  0E1E  3001               	movlw	1	; select bank2/3
 11484  0E1F  0087               	movwf	7
 11485  0E20  3000               	movlw	0
 11486  0E21  3FC0               	movwi [0]fsr1
 11487  0E22  3FC1               	movwi [1]fsr1
 11488                           
 11489                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 11490  0E23  3001               	movlw	1
 11491  0E24  00E2               	movwf	??_DlyOff_Main
 11492  0E25  0878               	movf	_DelayOff,w
 11493  0E26  3E04               	addlw	4
 11494  0E27  0086               	movwf	6
 11495  0E28  3001               	movlw	1	; select bank2/3
 11496  0E29  0087               	movwf	7
 11497  0E2A  0862               	movf	??_DlyOff_Main,w
 11498  0E2B  0781               	addwf	1,f
 11499                           
 11500                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 11501  0E2C  0878               	movf	_DelayOff,w
 11502  0E2D  3E04               	addlw	4
 11503  0E2E  0086               	movwf	6
 11504  0E2F  3001               	movlw	1	; select bank2/3
 11505  0E30  0087               	movwf	7
 11506  0E31  0A78               	incf	_DelayOff,w
 11507  0E32  0084               	movwf	4
 11508  0E33  3001               	movlw	1	; select bank2/3
 11509  0E34  0085               	movwf	5
 11510  0E35  0800               	movf	0,w
 11511  0E36  0201               	subwf	1,w
 11512  0E37  1C03               	skipc
 11513  0E38  0008               	return
 11514                           
 11515                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 11516  0E39  0878               	movf	_DelayOff,w
 11517  0E3A  3E04               	addlw	4
 11518  0E3B  0086               	movwf	6
 11519  0E3C  3001               	movlw	1	; select bank2/3
 11520  0E3D  0087               	movwf	7
 11521  0E3E  0181               	clrf	1
 11522                           
 11523                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 11524  0E3F  0878               	movf	_DelayOff,w
 11525  0E40  0086               	movwf	6
 11526  0E41  3001               	movlw	1	; select bank2/3
 11527  0E42  0087               	movwf	7
 11528  0E43  1081               	bcf	1,1
 11529                           
 11530                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 11531  0E44  01A2               	clrf	setSw_Status@command
 11532  0E45  0864               	movf	DlyOff_Main@sw,w
 11533  0E46  3191  215E  318D   	fcall	_setSw_Status
 11534                           
 11535                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 11536  0E49  0020               	movlb	0	; select bank0
 11537  0E4A  01A2               	clrf	setRFSW_Status@command
 11538  0E4B  0864               	movf	DlyOff_Main@sw,w
 11539  0E4C  3191  214F  318D   	fcall	_setRFSW_Status
 11540                           
 11541                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 11542  0E4F  0020               	movlb	0	; select bank0
 11543  0E50  01DD               	clrf	setRF_DimmerLights@on
 11544  0E51  0864               	movf	DlyOff_Main@sw,w
 11545  0E52  318B  23C5  318D   	fcall	_setRF_DimmerLights
 11546                           
 11547                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 11548  0E55  0020               	movlb	0	; select bank0
 11549  0E56  01A2               	clrf	setDimmerLights_Trigger@command
 11550  0E57  0AA2               	incf	setDimmerLights_Trigger@command,f
 11551  0E58  0864               	movf	DlyOff_Main@sw,w
 11552  0E59  3191  21B9  318D   	fcall	_setDimmerLights_Trigger
 11553                           
 11554                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 11555  0E5C  0020               	movlb	0	; select bank0
 11556  0E5D  01A2               	clrf	setDimmerLights_Switch@command
 11557  0E5E  0864               	movf	DlyOff_Main@sw,w
 11558  0E5F  3191  21A9  318D   	fcall	_setDimmerLights_Switch
 11559                           
 11560                           ;DelayOff_B1.c: 78: setTxData();
 11561  0E62  3185  2510  318D   	fcall	_setTxData
 11562                           
 11563                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 11564  0E65  3064               	movlw	100
 11565  0E66  0020               	movlb	0	; select bank0
 11566  0E67  00A9               	movwf	setBuz@time
 11567  0E68  3000               	movlw	0
 11568  0E69  00AA               	movwf	setBuz@time+1
 11569  0E6A  3001               	movlw	1
 11570  0E6B  3189  2122         	fcall	_setBuz
 11571  0E6D  0008               	return
 11572  0E6E                     __end_of_DlyOff_Main:	
 11573                           
 11574                           	psect	text70
 11575  0510                     __ptext70:	
 11576 ;; *************** function _setTxData *****************
 11577 ;; Defined at:
 11578 ;;		line 136 in file "../src/RF_Control_B1.c"
 11579 ;; Parameters:    Size  Location     Type
 11580 ;;		None
 11581 ;; Auto vars:     Size  Location     Type
 11582 ;;  i               1    0        unsigned char 
 11583 ;; Return value:  Size  Location     Type
 11584 ;;		None               void
 11585 ;; Registers used:
 11586 ;;		wreg, fsr1l, fsr1h
 11587 ;; Tracked objects:
 11588 ;;		On entry : 0/0
 11589 ;;		On exit  : 0/0
 11590 ;;		Unchanged: 0/0
 11591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;Total ram usage:        1 bytes
 11597 ;; Hardware stack levels used:    1
 11598 ;; Hardware stack levels required when called:    5
 11599 ;; This function calls:
 11600 ;;		Nothing
 11601 ;; This function is called by:
 11602 ;;		_DlyOff_Main
 11603 ;;		_setDimmerLights_Adj
 11604 ;;		_setControl_Lights_Table
 11605 ;;		_setRFSW_Control
 11606 ;;		_setRFSW_AdjControl
 11607 ;;		_Sw_DimmerOnFunc
 11608 ;;		_Sw_DimmerOffFunc
 11609 ;; This function uses a non-reentrant model
 11610 ;;
 11611                           
 11612                           
 11613                           ;psect for function _setTxData
 11614  0510                     _setTxData:	
 11615                           
 11616                           ;RF_Control_B1.c: 137: char i;
 11617                           ;RF_Control_B1.c: 138: if (RF1.Enable == 1) {
 11618                           
 11619                           ;incstack = 0
 11620                           ; Regs used in _setTxData: [wregfsr1]
 11621  0510  0021               	movlb	1	; select bank1
 11622  0511  1C53               	btfss	_RF1^(0+128),0
 11623  0512  0008               	return
 11624                           
 11625                           ;RF_Control_B1.c: 140: RF1.TransceiveGO = 1;
 11626  0513  1553               	bsf	_RF1^(0+128),2
 11627                           
 11628                           ;RF_Control_B1.c: 150: RF_Data[0] = 0x63;
 11629  0514  3063               	movlw	99
 11630  0515  0020               	movlb	0	; select bank0
 11631  0516  00A0               	movwf	??_setTxData
 11632  0517  0820               	movf	??_setTxData,w
 11633  0518  0021               	movlb	1	; select bank1
 11634  0519  00A0               	movwf	_RF_Data^(0+128)
 11635                           
 11636                           ;RF_Control_B1.c: 151: RF_Data[1] = 0x02;
 11637  051A  3002               	movlw	2
 11638  051B  0020               	movlb	0	; select bank0
 11639  051C  00A0               	movwf	??_setTxData
 11640  051D  0820               	movf	??_setTxData,w
 11641  051E  0021               	movlb	1	; select bank1
 11642  051F  00A1               	movwf	(_RF_Data^(0+128)+1)
 11643                           
 11644                           ;RF_Control_B1.c: 152: RF_Data[2] = product->Data[2];
 11645  0520  0020               	movlb	0	; select bank0
 11646  0521  086E               	movf	_product,w
 11647  0522  0086               	movwf	6
 11648  0523  3001               	movlw	1	; select bank2/3
 11649  0524  0087               	movwf	7
 11650  0525  3001               	movlw	1	; select bank2/3
 11651  0526  3F42               	moviw [2]fsr1
 11652  0527  0021               	movlb	1	; select bank1
 11653  0528  00A2               	movwf	(_RF_Data^(0+128)+2)
 11654                           
 11655                           ;RF_Control_B1.c: 153: RF_Data[3] = product->Data[3];
 11656  0529  0020               	movlb	0	; select bank0
 11657  052A  086E               	movf	_product,w
 11658  052B  0086               	movwf	6
 11659  052C  3001               	movlw	1	; select bank2/3
 11660  052D  0087               	movwf	7
 11661  052E  3001               	movlw	1	; select bank2/3
 11662  052F  3F43               	moviw [3]fsr1
 11663  0530  0021               	movlb	1	; select bank1
 11664  0531  00A3               	movwf	(_RF_Data^(0+128)+3)
 11665                           
 11666                           ;RF_Control_B1.c: 154: RF_Data[4] = product->Data[4];
 11667  0532  0020               	movlb	0	; select bank0
 11668  0533  086E               	movf	_product,w
 11669  0534  0086               	movwf	6
 11670  0535  3001               	movlw	1	; select bank2/3
 11671  0536  0087               	movwf	7
 11672  0537  3001               	movlw	1	; select bank2/3
 11673  0538  3F44               	moviw [4]fsr1
 11674  0539  0021               	movlb	1	; select bank1
 11675  053A  00A4               	movwf	(_RF_Data^(0+128)+4)
 11676                           
 11677                           ;RF_Control_B1.c: 155: RF_Data[5] = product->Data[5];
 11678  053B  0020               	movlb	0	; select bank0
 11679  053C  086E               	movf	_product,w
 11680  053D  0086               	movwf	6
 11681  053E  3001               	movlw	1	; select bank2/3
 11682  053F  0087               	movwf	7
 11683  0540  3001               	movlw	1	; select bank2/3
 11684  0541  3F45               	moviw [5]fsr1
 11685  0542  0021               	movlb	1	; select bank1
 11686  0543  00A5               	movwf	(_RF_Data^(0+128)+5)
 11687                           
 11688                           ;RF_Control_B1.c: 156: RF_Data[6] = product->Data[6];
 11689  0544  0020               	movlb	0	; select bank0
 11690  0545  086E               	movf	_product,w
 11691  0546  0086               	movwf	6
 11692  0547  3001               	movlw	1	; select bank2/3
 11693  0548  0087               	movwf	7
 11694  0549  3001               	movlw	1	; select bank2/3
 11695  054A  3F46               	moviw [6]fsr1
 11696  054B  0021               	movlb	1	; select bank1
 11697  054C  00A6               	movwf	(_RF_Data^(0+128)+6)
 11698                           
 11699                           ;RF_Control_B1.c: 157: RF_Data[7] = product->Data[7];
 11700  054D  0020               	movlb	0	; select bank0
 11701  054E  086E               	movf	_product,w
 11702  054F  0086               	movwf	6
 11703  0550  3001               	movlw	1	; select bank2/3
 11704  0551  0087               	movwf	7
 11705  0552  3001               	movlw	1	; select bank2/3
 11706  0553  3F47               	moviw [7]fsr1
 11707  0554  0021               	movlb	1	; select bank1
 11708  0555  00A7               	movwf	(_RF_Data^(0+128)+7)
 11709                           
 11710                           ;RF_Control_B1.c: 158: RF_Data[8] = product->Data[8];
 11711  0556  0020               	movlb	0	; select bank0
 11712  0557  086E               	movf	_product,w
 11713  0558  0086               	movwf	6
 11714  0559  3001               	movlw	1	; select bank2/3
 11715  055A  0087               	movwf	7
 11716  055B  3001               	movlw	1	; select bank2/3
 11717  055C  3F48               	moviw [8]fsr1
 11718  055D  0021               	movlb	1	; select bank1
 11719  055E  00A8               	movwf	(_RF_Data^(0+128)+8)
 11720                           
 11721                           ;RF_Control_B1.c: 159: RF_Data[9] = product->Data[9];
 11722  055F  0020               	movlb	0	; select bank0
 11723  0560  086E               	movf	_product,w
 11724  0561  0086               	movwf	6
 11725  0562  3001               	movlw	1	; select bank2/3
 11726  0563  0087               	movwf	7
 11727  0564  3001               	movlw	1	; select bank2/3
 11728  0565  3F49               	moviw [9]fsr1
 11729  0566  0021               	movlb	1	; select bank1
 11730  0567  00A9               	movwf	(_RF_Data^(0+128)+9)
 11731                           
 11732                           ;RF_Control_B1.c: 160: RF_Data[10] = product->Data[10];
 11733  0568  0020               	movlb	0	; select bank0
 11734  0569  086E               	movf	_product,w
 11735  056A  0086               	movwf	6
 11736  056B  3001               	movlw	1	; select bank2/3
 11737  056C  0087               	movwf	7
 11738  056D  3001               	movlw	1	; select bank2/3
 11739  056E  3F4A               	moviw [10]fsr1
 11740  056F  0021               	movlb	1	; select bank1
 11741  0570  00AA               	movwf	(_RF_Data^(0+128)+10)
 11742                           
 11743                           ;RF_Control_B1.c: 161: RF_Data[11] = product->Data[11];
 11744  0571  0020               	movlb	0	; select bank0
 11745  0572  086E               	movf	_product,w
 11746  0573  0086               	movwf	6
 11747  0574  3001               	movlw	1	; select bank2/3
 11748  0575  0087               	movwf	7
 11749  0576  3001               	movlw	1	; select bank2/3
 11750  0577  3F4B               	moviw [11]fsr1
 11751  0578  0021               	movlb	1	; select bank1
 11752  0579  00AB               	movwf	(_RF_Data^(0+128)+11)
 11753                           
 11754                           ;RF_Control_B1.c: 162: RF_Data[12] = product->Data[12];
 11755  057A  0020               	movlb	0	; select bank0
 11756  057B  086E               	movf	_product,w
 11757  057C  0086               	movwf	6
 11758  057D  3001               	movlw	1	; select bank2/3
 11759  057E  0087               	movwf	7
 11760  057F  3001               	movlw	1	; select bank2/3
 11761  0580  3F4C               	moviw [12]fsr1
 11762  0581  0021               	movlb	1	; select bank1
 11763  0582  00AC               	movwf	(_RF_Data^(0+128)+12)
 11764                           
 11765                           ;RF_Control_B1.c: 163: RF_Data[13] = product->Data[13];
 11766  0583  0020               	movlb	0	; select bank0
 11767  0584  086E               	movf	_product,w
 11768  0585  0086               	movwf	6
 11769  0586  3001               	movlw	1	; select bank2/3
 11770  0587  0087               	movwf	7
 11771  0588  3001               	movlw	1	; select bank2/3
 11772  0589  3F4D               	moviw [13]fsr1
 11773  058A  0021               	movlb	1	; select bank1
 11774  058B  00AD               	movwf	(_RF_Data^(0+128)+13)
 11775                           
 11776                           ;RF_Control_B1.c: 164: RF_Data[14] = product->Data[14];
 11777  058C  0020               	movlb	0	; select bank0
 11778  058D  086E               	movf	_product,w
 11779  058E  0086               	movwf	6
 11780  058F  3001               	movlw	1	; select bank2/3
 11781  0590  0087               	movwf	7
 11782  0591  3001               	movlw	1	; select bank2/3
 11783  0592  3F4E               	moviw [14]fsr1
 11784  0593  0021               	movlb	1	; select bank1
 11785  0594  00AE               	movwf	(_RF_Data^(0+128)+14)
 11786                           
 11787                           ;RF_Control_B1.c: 165: RF_Data[15] = product->Data[15];
 11788  0595  0020               	movlb	0	; select bank0
 11789  0596  086E               	movf	_product,w
 11790  0597  0086               	movwf	6
 11791  0598  3001               	movlw	1	; select bank2/3
 11792  0599  0087               	movwf	7
 11793  059A  3001               	movlw	1	; select bank2/3
 11794  059B  3F4F               	moviw [15]fsr1
 11795  059C  0021               	movlb	1	; select bank1
 11796  059D  00AF               	movwf	(_RF_Data^(0+128)+15)
 11797                           
 11798                           ;RF_Control_B1.c: 166: RF_Data[16] = product->Data[16];
 11799  059E  0020               	movlb	0	; select bank0
 11800  059F  086E               	movf	_product,w
 11801  05A0  0086               	movwf	6
 11802  05A1  3001               	movlw	1	; select bank2/3
 11803  05A2  0087               	movwf	7
 11804  05A3  3001               	movlw	1	; select bank2/3
 11805  05A4  3F50               	moviw [16]fsr1
 11806  05A5  0021               	movlb	1	; select bank1
 11807  05A6  00B0               	movwf	(_RF_Data^(0+128)+16)
 11808                           
 11809                           ;RF_Control_B1.c: 167: RF_Data[17] = product->Data[17];
 11810  05A7  0020               	movlb	0	; select bank0
 11811  05A8  086E               	movf	_product,w
 11812  05A9  0086               	movwf	6
 11813  05AA  3001               	movlw	1	; select bank2/3
 11814  05AB  0087               	movwf	7
 11815  05AC  3001               	movlw	1	; select bank2/3
 11816  05AD  3F51               	moviw [17]fsr1
 11817  05AE  0021               	movlb	1	; select bank1
 11818  05AF  00B1               	movwf	(_RF_Data^(0+128)+17)
 11819                           
 11820                           ;RF_Control_B1.c: 168: RF_Data[18] = product->Data[18];
 11821  05B0  0020               	movlb	0	; select bank0
 11822  05B1  086E               	movf	_product,w
 11823  05B2  0086               	movwf	6
 11824  05B3  3001               	movlw	1	; select bank2/3
 11825  05B4  0087               	movwf	7
 11826  05B5  3001               	movlw	1	; select bank2/3
 11827  05B6  3F52               	moviw [18]fsr1
 11828  05B7  0021               	movlb	1	; select bank1
 11829  05B8  00B2               	movwf	(_RF_Data^(0+128)+18)
 11830                           
 11831                           ;RF_Control_B1.c: 169: RF_Data[19] = product->Data[19];
 11832  05B9  0020               	movlb	0	; select bank0
 11833  05BA  086E               	movf	_product,w
 11834  05BB  0086               	movwf	6
 11835  05BC  3001               	movlw	1	; select bank2/3
 11836  05BD  0087               	movwf	7
 11837  05BE  3001               	movlw	1	; select bank2/3
 11838  05BF  3F53               	moviw [19]fsr1
 11839  05C0  0021               	movlb	1	; select bank1
 11840  05C1  00B3               	movwf	(_RF_Data^(0+128)+19)
 11841                           
 11842                           ;RF_Control_B1.c: 170: RF_Data[20] = 210;
 11843  05C2  30D2               	movlw	210
 11844  05C3  0020               	movlb	0	; select bank0
 11845  05C4  00A0               	movwf	??_setTxData
 11846  05C5  0820               	movf	??_setTxData,w
 11847  05C6  0021               	movlb	1	; select bank1
 11848  05C7  00B4               	movwf	(_RF_Data^(0+128)+20)
 11849  05C8  0008               	return
 11850  05C9                     __end_of_setTxData:	
 11851                           
 11852                           	psect	text71
 11853  115E                     __ptext71:	
 11854 ;; *************** function _setSw_Status *****************
 11855 ;; Defined at:
 11856 ;;		line 109 in file "../src/Switch_B1.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;  sw              1    wreg     unsigned char 
 11859 ;;  command         1    2[BANK0 ] unsigned char 
 11860 ;; Auto vars:     Size  Location     Type
 11861 ;;  sw              1    3[BANK0 ] unsigned char 
 11862 ;; Return value:  Size  Location     Type
 11863 ;;		None               void
 11864 ;; Registers used:
 11865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11866 ;; Tracked objects:
 11867 ;;		On entry : 0/0
 11868 ;;		On exit  : 0/0
 11869 ;;		Unchanged: 0/0
 11870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11871 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;Total ram usage:        2 bytes
 11876 ;; Hardware stack levels used:    1
 11877 ;; Hardware stack levels required when called:    6
 11878 ;; This function calls:
 11879 ;;		_SwPointSelect
 11880 ;; This function is called by:
 11881 ;;		_DlyOff_Main
 11882 ;;		_setControl_Lights_Table
 11883 ;;		_setRFSW_Control
 11884 ;;		_setDimmerLights_ERROR
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           
 11889                           ;psect for function _setSw_Status
 11890  115E                     _setSw_Status:	
 11891                           
 11892                           ;incstack = 0
 11893                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11894                           ;setSw_Status@sw stored from wreg
 11895  115E  0020               	movlb	0	; select bank0
 11896  115F  00A3               	movwf	setSw_Status@sw
 11897                           
 11898                           ;Switch_B1.c: 110: SwPointSelect(sw);
 11899  1160  0823               	movf	setSw_Status@sw,w
 11900  1161  3192  2290         	fcall	_SwPointSelect
 11901                           
 11902                           ;Switch_B1.c: 111: Sw->Status = command;
 11903  1163  0020               	movlb	0	; select bank0
 11904  1164  086F               	movf	_Sw,w
 11905  1165  0086               	movwf	6
 11906  1166  3001               	movlw	1	; select bank2/3
 11907  1167  0087               	movwf	7
 11908  1168  0822               	movf	setSw_Status@command,w
 11909  1169  1301               	bcf	1,6
 11910  116A  1D03               	skipz
 11911  116B  1701               	bsf	1,6
 11912  116C  0008               	return
 11913  116D                     __end_of_setSw_Status:	
 11914                           
 11915                           	psect	text72
 11916  1290                     __ptext72:	
 11917 ;; *************** function _SwPointSelect *****************
 11918 ;; Defined at:
 11919 ;;		line 21 in file "../src/Switch_B1.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;  sw              1    wreg     unsigned char 
 11922 ;; Auto vars:     Size  Location     Type
 11923 ;;  sw              1    1[BANK0 ] unsigned char 
 11924 ;; Return value:  Size  Location     Type
 11925 ;;		None               void
 11926 ;; Registers used:
 11927 ;;		wreg
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;Total ram usage:        2 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:    5
 11940 ;; This function calls:
 11941 ;;		Nothing
 11942 ;; This function is called by:
 11943 ;;		_setSw_Enable
 11944 ;;		_setSw_Status
 11945 ;;		_setSw_Main
 11946 ;;		_Sw_Detect
 11947 ;; This function uses a non-reentrant model
 11948 ;;
 11949                           
 11950                           
 11951                           ;psect for function _SwPointSelect
 11952  1290                     _SwPointSelect:	
 11953                           
 11954                           ;incstack = 0
 11955                           ; Regs used in _SwPointSelect: [wreg]
 11956                           ;SwPointSelect@sw stored from wreg
 11957  1290  0020               	movlb	0	; select bank0
 11958  1291  00A1               	movwf	SwPointSelect@sw
 11959                           
 11960                           ;Switch_B1.c: 24: if (sw == 1) {
 11961  1292  0821               	movf	SwPointSelect@sw,w
 11962  1293  3A01               	xorlw	1
 11963  1294  1D03               	skipz
 11964  1295  2A9B               	goto	l5385
 11965                           
 11966                           ;Switch_B1.c: 25: Sw = &Sw1;
 11967  1296  3046               	movlw	_Sw1& (0+255)
 11968  1297  00A0               	movwf	??_SwPointSelect
 11969  1298  0820               	movf	??_SwPointSelect,w
 11970  1299  00EF               	movwf	_Sw
 11971                           
 11972                           ;Switch_B1.c: 26: }
 11973  129A  0008               	return
 11974  129B                     l5385:	
 11975                           
 11976                           ;Switch_B1.c: 29: else if (sw == 2) {
 11977  129B  0821               	movf	SwPointSelect@sw,w
 11978  129C  3A02               	xorlw	2
 11979  129D  1D03               	skipz
 11980  129E  0008               	return
 11981                           
 11982                           ;Switch_B1.c: 30: Sw = &Sw2;
 11983  129F  304F               	movlw	_Sw2& (0+255)
 11984  12A0  00A0               	movwf	??_SwPointSelect
 11985  12A1  0820               	movf	??_SwPointSelect,w
 11986  12A2  00EF               	movwf	_Sw
 11987  12A3  0008               	return
 11988  12A4                     __end_of_SwPointSelect:	
 11989                           
 11990                           	psect	text73
 11991  0BC5                     __ptext73:	
 11992 ;; *************** function _setRF_DimmerLights *****************
 11993 ;; Defined at:
 11994 ;;		line 395 in file "../src/RF_Control_B1.c"
 11995 ;; Parameters:    Size  Location     Type
 11996 ;;  lights          1    wreg     unsigned char 
 11997 ;;  on              1   61[BANK0 ] unsigned char 
 11998 ;; Auto vars:     Size  Location     Type
 11999 ;;  lights          1   65[BANK0 ] unsigned char 
 12000 ;;  status          1   64[BANK0 ] unsigned char 
 12001 ;; Return value:  Size  Location     Type
 12002 ;;		None               void
 12003 ;; Registers used:
 12004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12005 ;; Tracked objects:
 12006 ;;		On entry : 0/0
 12007 ;;		On exit  : 0/0
 12008 ;;		Unchanged: 0/0
 12009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12010 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12014 ;;Total ram usage:        5 bytes
 12015 ;; Hardware stack levels used:    1
 12016 ;; Hardware stack levels required when called:    8
 12017 ;; This function calls:
 12018 ;;		_setPercentValue
 12019 ;; This function is called by:
 12020 ;;		_DlyOff_Main
 12021 ;;		_setDimmerLights_Adj
 12022 ;;		_setRFSW_Control
 12023 ;;		_Sw_DimmerOnFunc
 12024 ;;		_Sw_DimmerOffFunc
 12025 ;; This function uses a non-reentrant model
 12026 ;;
 12027                           
 12028                           
 12029                           ;psect for function _setRF_DimmerLights
 12030  0BC5                     _setRF_DimmerLights:	
 12031                           
 12032                           ;incstack = 0
 12033                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12034                           ;setRF_DimmerLights@lights stored from wreg
 12035  0BC5  0020               	movlb	0	; select bank0
 12036  0BC6  00E1               	movwf	setRF_DimmerLights@lights
 12037                           
 12038                           ;RF_Control_B1.c: 396: char status;
 12039                           ;RF_Control_B1.c: 397: status = 1;
 12040  0BC7  01E0               	clrf	setRF_DimmerLights@status
 12041  0BC8  0AE0               	incf	setRF_DimmerLights@status,f
 12042                           
 12043                           ;RF_Control_B1.c: 398: status <<= (lights - 1);
 12044  0BC9  0861               	movf	setRF_DimmerLights@lights,w
 12045  0BCA  3EFF               	addlw	-1
 12046  0BCB  0A89               	incf	9,f
 12047  0BCC  2BCF               	goto	u4270
 12048  0BCD                     u4275:	
 12049  0BCD  1003               	clrc
 12050  0BCE  0DE0               	rlf	setRF_DimmerLights@status,f
 12051  0BCF                     u4270:	
 12052  0BCF  3EFF               	addlw	-1
 12053  0BD0  1D03               	skipz
 12054  0BD1  2BCD               	goto	u4275
 12055                           
 12056                           ;RF_Control_B1.c: 399: product->Data[11]=lights;
 12057  0BD2  0861               	movf	setRF_DimmerLights@lights,w
 12058  0BD3  00DE               	movwf	??_setRF_DimmerLights
 12059  0BD4  086E               	movf	_product,w
 12060  0BD5  3E0B               	addlw	11
 12061  0BD6  0086               	movwf	6
 12062  0BD7  3001               	movlw	1	; select bank2/3
 12063  0BD8  0087               	movwf	7
 12064  0BD9  085E               	movf	??_setRF_DimmerLights,w
 12065  0BDA  0081               	movwf	1
 12066                           
 12067                           ;RF_Control_B1.c: 402: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 12068  0BDB  3020               	movlw	32
 12069  0BDC  3197  27BA  318B   	fcall	_setPercentValue
 12070  0BDF  0020               	movlb	0	; select bank0
 12071  0BE0  00DE               	movwf	??_setRF_DimmerLights
 12072  0BE1  0861               	movf	setRF_DimmerLights@lights,w
 12073  0BE2  3E14               	addlw	20
 12074  0BE3  076E               	addwf	_product,w
 12075  0BE4  00DF               	movwf	??_setRF_DimmerLights+1
 12076  0BE5  085F               	movf	??_setRF_DimmerLights+1,w
 12077  0BE6  0086               	movwf	6
 12078  0BE7  3001               	movlw	1	; select bank2/3
 12079  0BE8  0087               	movwf	7
 12080  0BE9  085E               	movf	??_setRF_DimmerLights,w
 12081  0BEA  0081               	movwf	1
 12082                           
 12083                           ;RF_Control_B1.c: 405: product->Data[9]=product->Data[20 + lights];
 12084  0BEB  0861               	movf	setRF_DimmerLights@lights,w
 12085  0BEC  3E14               	addlw	20
 12086  0BED  076E               	addwf	_product,w
 12087  0BEE  00DE               	movwf	??_setRF_DimmerLights
 12088  0BEF  085E               	movf	??_setRF_DimmerLights,w
 12089  0BF0  0086               	movwf	6
 12090  0BF1  3001               	movlw	1	; select bank2/3
 12091  0BF2  0087               	movwf	7
 12092  0BF3  0801               	movf	1,w
 12093  0BF4  00DF               	movwf	??_setRF_DimmerLights+1
 12094  0BF5  086E               	movf	_product,w
 12095  0BF6  3E09               	addlw	9
 12096  0BF7  0086               	movwf	6
 12097  0BF8  3001               	movlw	1	; select bank2/3
 12098  0BF9  0087               	movwf	7
 12099  0BFA  085F               	movf	??_setRF_DimmerLights+1,w
 12100  0BFB  0081               	movwf	1
 12101                           
 12102                           ;RF_Control_B1.c: 406: product->Data[17]=product->Data[26 + lights];
 12103  0BFC  0861               	movf	setRF_DimmerLights@lights,w
 12104  0BFD  3E1A               	addlw	26
 12105  0BFE  076E               	addwf	_product,w
 12106  0BFF  00DE               	movwf	??_setRF_DimmerLights
 12107  0C00  085E               	movf	??_setRF_DimmerLights,w
 12108  0C01  0086               	movwf	6
 12109  0C02  3001               	movlw	1	; select bank2/3
 12110  0C03  0087               	movwf	7
 12111  0C04  0801               	movf	1,w
 12112  0C05  00DF               	movwf	??_setRF_DimmerLights+1
 12113  0C06  086E               	movf	_product,w
 12114  0C07  3E11               	addlw	17
 12115  0C08  0086               	movwf	6
 12116  0C09  3001               	movlw	1	; select bank2/3
 12117  0C0A  0087               	movwf	7
 12118  0C0B  085F               	movf	??_setRF_DimmerLights+1,w
 12119  0C0C  0081               	movwf	1
 12120                           
 12121                           ;RF_Control_B1.c: 407: if (on == 1) {
 12122  0C0D  085D               	movf	setRF_DimmerLights@on,w
 12123  0C0E  3A01               	xorlw	1
 12124  0C0F  1D03               	skipz
 12125  0C10  2C21               	goto	l5481
 12126                           
 12127                           ;RF_Control_B1.c: 408: product->Data[15]=(product->Data[15] | status);
 12128  0C11  086E               	movf	_product,w
 12129  0C12  3E0F               	addlw	15
 12130  0C13  0086               	movwf	6
 12131  0C14  3001               	movlw	1	; select bank2/3
 12132  0C15  0087               	movwf	7
 12133  0C16  0801               	movf	1,w
 12134  0C17  0460               	iorwf	setRF_DimmerLights@status,w
 12135  0C18  00DE               	movwf	??_setRF_DimmerLights
 12136  0C19  086E               	movf	_product,w
 12137  0C1A  3E0F               	addlw	15
 12138  0C1B  0086               	movwf	6
 12139  0C1C  3001               	movlw	1	; select bank2/3
 12140  0C1D  0087               	movwf	7
 12141  0C1E  085E               	movf	??_setRF_DimmerLights,w
 12142  0C1F  0081               	movwf	1
 12143                           
 12144                           ;RF_Control_B1.c: 409: } else {
 12145  0C20  0008               	return
 12146  0C21                     l5481:	
 12147                           
 12148                           ;RF_Control_B1.c: 410: product->Data[15]=(product->Data[15]&(~status));
 12149  0C21  086E               	movf	_product,w
 12150  0C22  3E0F               	addlw	15
 12151  0C23  0086               	movwf	6
 12152  0C24  3001               	movlw	1	; select bank2/3
 12153  0C25  0087               	movwf	7
 12154  0C26  0960               	comf	setRF_DimmerLights@status,w
 12155  0C27  0501               	andwf	1,w
 12156  0C28  00DE               	movwf	??_setRF_DimmerLights
 12157  0C29  086E               	movf	_product,w
 12158  0C2A  3E0F               	addlw	15
 12159  0C2B  0086               	movwf	6
 12160  0C2C  3001               	movlw	1	; select bank2/3
 12161  0C2D  0087               	movwf	7
 12162  0C2E  085E               	movf	??_setRF_DimmerLights,w
 12163  0C2F  0081               	movwf	1
 12164  0C30  0008               	return
 12165  0C31                     __end_of_setRF_DimmerLights:	
 12166                           
 12167                           	psect	text74
 12168  17BA                     __ptext74:	
 12169 ;; *************** function _setPercentValue *****************
 12170 ;; Defined at:
 12171 ;;		line 768 in file "../src/Dimmer_B1.c"
 12172 ;; Parameters:    Size  Location     Type
 12173 ;;  value           1    wreg     unsigned char 
 12174 ;; Auto vars:     Size  Location     Type
 12175 ;;  value           1   57[BANK0 ] unsigned char 
 12176 ;;  i               3   58[BANK0 ] float 
 12177 ;; Return value:  Size  Location     Type
 12178 ;;                  1    wreg      unsigned char 
 12179 ;; Registers used:
 12180 ;;		wreg, status,2, status,0, pclath, cstack
 12181 ;; Tracked objects:
 12182 ;;		On entry : 0/0
 12183 ;;		On exit  : 0/0
 12184 ;;		Unchanged: 0/0
 12185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12189 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12190 ;;Total ram usage:        4 bytes
 12191 ;; Hardware stack levels used:    1
 12192 ;; Hardware stack levels required when called:    7
 12193 ;; This function calls:
 12194 ;;		___awtoft
 12195 ;;		___ftdiv
 12196 ;;		___fttol
 12197 ;; This function is called by:
 12198 ;;		_Flash_Memory_Initialization
 12199 ;;		_setRF_DimmerLights
 12200 ;; This function uses a non-reentrant model
 12201 ;;
 12202                           
 12203                           
 12204                           ;psect for function _setPercentValue
 12205  17BA                     _setPercentValue:	
 12206                           
 12207                           ;incstack = 0
 12208                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12209                           ;setPercentValue@value stored from wreg
 12210  17BA  0020               	movlb	0	; select bank0
 12211  17BB  00D9               	movwf	setPercentValue@value
 12212                           
 12213                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 12214  17BC  3000               	movlw	0
 12215  17BD  00DA               	movwf	setPercentValue@i
 12216  17BE  30E0               	movlw	224
 12217  17BF  00DB               	movwf	setPercentValue@i+1
 12218  17C0  3041               	movlw	65
 12219  17C1  00DC               	movwf	setPercentValue@i+2
 12220                           
 12221                           ;Dimmer_B1.c: 771: i /= 100;
 12222  17C2  3000               	movlw	0
 12223  17C3  00AE               	movwf	___ftdiv@f2
 12224  17C4  30C8               	movlw	200
 12225  17C5  00AF               	movwf	___ftdiv@f2+1
 12226  17C6  3042               	movlw	66
 12227  17C7  00B0               	movwf	___ftdiv@f2+2
 12228  17C8  085A               	movf	setPercentValue@i,w
 12229  17C9  00B1               	movwf	___ftdiv@f1
 12230  17CA  085B               	movf	setPercentValue@i+1,w
 12231  17CB  00B2               	movwf	___ftdiv@f1+1
 12232  17CC  085C               	movf	setPercentValue@i+2,w
 12233  17CD  00B3               	movwf	___ftdiv@f1+2
 12234  17CE  3186  267D  3197   	fcall	___ftdiv
 12235  17D1  0020               	movlb	0	; select bank0
 12236  17D2  082E               	movf	?___ftdiv,w
 12237  17D3  00DA               	movwf	setPercentValue@i
 12238  17D4  082F               	movf	?___ftdiv+1,w
 12239  17D5  00DB               	movwf	setPercentValue@i+1
 12240  17D6  0830               	movf	?___ftdiv+2,w
 12241  17D7  00DC               	movwf	setPercentValue@i+2
 12242                           
 12243                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 12244  17D8  0859               	movf	setPercentValue@value,w
 12245  17D9  3EE0               	addlw	224
 12246  17DA  00A8               	movwf	___awtoft@c
 12247  17DB  30FF               	movlw	255
 12248  17DC  1803               	skipnc
 12249  17DD  3000               	movlw	0
 12250  17DE  00A9               	movwf	___awtoft@c+1
 12251  17DF  3194  2445  3197   	fcall	___awtoft
 12252  17E2  0020               	movlb	0	; select bank0
 12253  17E3  0828               	movf	?___awtoft,w
 12254  17E4  00B1               	movwf	___ftdiv@f1
 12255  17E5  0829               	movf	?___awtoft+1,w
 12256  17E6  00B2               	movwf	___ftdiv@f1+1
 12257  17E7  082A               	movf	?___awtoft+2,w
 12258  17E8  00B3               	movwf	___ftdiv@f1+2
 12259  17E9  085A               	movf	setPercentValue@i,w
 12260  17EA  00AE               	movwf	___ftdiv@f2
 12261  17EB  085B               	movf	setPercentValue@i+1,w
 12262  17EC  00AF               	movwf	___ftdiv@f2+1
 12263  17ED  085C               	movf	setPercentValue@i+2,w
 12264  17EE  00B0               	movwf	___ftdiv@f2+2
 12265  17EF  3186  267D  3197   	fcall	___ftdiv
 12266  17F2  0020               	movlb	0	; select bank0
 12267  17F3  082E               	movf	?___ftdiv,w
 12268  17F4  00CB               	movwf	___fttol@f1
 12269  17F5  082F               	movf	?___ftdiv+1,w
 12270  17F6  00CC               	movwf	___fttol@f1+1
 12271  17F7  0830               	movf	?___ftdiv+2,w
 12272  17F8  00CD               	movwf	___fttol@f1+2
 12273  17F9  318E  26EE         	fcall	___fttol
 12274  17FB  0020               	movlb	0	; select bank0
 12275  17FC  034B               	decf	?___fttol,w
 12276  17FD  3AFF               	xorlw	255
 12277  17FE  3E64               	addlw	100
 12278  17FF  0008               	return
 12279  1800                     __end_of_setPercentValue:	
 12280                           
 12281                           	psect	text75
 12282  0EEE                     __ptext75:	
 12283 ;; *************** function ___fttol *****************
 12284 ;; Defined at:
 12285 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12286 ;; Parameters:    Size  Location     Type
 12287 ;;  f1              3   43[BANK0 ] float 
 12288 ;; Auto vars:     Size  Location     Type
 12289 ;;  lval            4   52[BANK0 ] unsigned long 
 12290 ;;  exp1            1   56[BANK0 ] unsigned char 
 12291 ;;  sign1           1   51[BANK0 ] unsigned char 
 12292 ;; Return value:  Size  Location     Type
 12293 ;;                  4   43[BANK0 ] long 
 12294 ;; Registers used:
 12295 ;;		wreg, status,2, status,0
 12296 ;; Tracked objects:
 12297 ;;		On entry : 0/0
 12298 ;;		On exit  : 0/0
 12299 ;;		Unchanged: 0/0
 12300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12301 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12302 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12303 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12304 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12305 ;;Total ram usage:       14 bytes
 12306 ;; Hardware stack levels used:    1
 12307 ;; Hardware stack levels required when called:    5
 12308 ;; This function calls:
 12309 ;;		Nothing
 12310 ;; This function is called by:
 12311 ;;		_getPercentValue
 12312 ;;		_setPercentValue
 12313 ;; This function uses a non-reentrant model
 12314 ;;
 12315                           
 12316                           
 12317                           ;psect for function ___fttol
 12318  0EEE                     ___fttol:	
 12319                           
 12320                           ;incstack = 0
 12321                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 12322  0EEE  0020               	movlb	0	; select bank0
 12323  0EEF  084B               	movf	___fttol@f1,w
 12324  0EF0  00CF               	movwf	??___fttol
 12325  0EF1  084C               	movf	___fttol@f1+1,w
 12326  0EF2  00D0               	movwf	??___fttol+1
 12327  0EF3  084D               	movf	___fttol@f1+2,w
 12328  0EF4  00D1               	movwf	??___fttol+2
 12329  0EF5  1003               	clrc
 12330  0EF6  0D50               	rlf	??___fttol+1,w
 12331  0EF7  0D51               	rlf	??___fttol+2,w
 12332  0EF8  00D2               	movwf	??___fttol+3
 12333  0EF9  0852               	movf	??___fttol+3,w
 12334  0EFA  00D8               	movwf	___fttol@exp1
 12335  0EFB  08D8               	movf	___fttol@exp1,f
 12336  0EFC  1D03               	skipz
 12337  0EFD  2F07               	goto	l5261
 12338  0EFE  3000               	movlw	0
 12339  0EFF  00CE               	movwf	?___fttol+3
 12340  0F00  3000               	movlw	0
 12341  0F01  00CD               	movwf	?___fttol+2
 12342  0F02  3000               	movlw	0
 12343  0F03  00CC               	movwf	?___fttol+1
 12344  0F04  3000               	movlw	0
 12345  0F05  00CB               	movwf	?___fttol
 12346  0F06  0008               	return
 12347  0F07                     l5261:	
 12348  0F07  084B               	movf	___fttol@f1,w
 12349  0F08  00CF               	movwf	??___fttol
 12350  0F09  084C               	movf	___fttol@f1+1,w
 12351  0F0A  00D0               	movwf	??___fttol+1
 12352  0F0B  084D               	movf	___fttol@f1+2,w
 12353  0F0C  00D1               	movwf	??___fttol+2
 12354  0F0D  3017               	movlw	23
 12355  0F0E                     u3915:	
 12356  0F0E  36D1               	lsrf	??___fttol+2,f
 12357  0F0F  0CD0               	rrf	??___fttol+1,f
 12358  0F10  0CCF               	rrf	??___fttol,f
 12359  0F11  0B89               	decfsz	9,f
 12360  0F12  2F0E               	goto	u3915
 12361  0F13  084F               	movf	??___fttol,w
 12362  0F14  00D2               	movwf	??___fttol+3
 12363  0F15  0852               	movf	??___fttol+3,w
 12364  0F16  00D3               	movwf	___fttol@sign1
 12365  0F17  17CC               	bsf	___fttol@f1+1,7
 12366  0F18  30FF               	movlw	255
 12367  0F19  05CB               	andwf	___fttol@f1,f
 12368  0F1A  30FF               	movlw	255
 12369  0F1B  05CC               	andwf	___fttol@f1+1,f
 12370  0F1C  3000               	movlw	0
 12371  0F1D  05CD               	andwf	___fttol@f1+2,f
 12372  0F1E  084B               	movf	___fttol@f1,w
 12373  0F1F  00D4               	movwf	___fttol@lval
 12374  0F20  084C               	movf	___fttol@f1+1,w
 12375  0F21  00D5               	movwf	___fttol@lval+1
 12376  0F22  084D               	movf	___fttol@f1+2,w
 12377  0F23  00D6               	movwf	___fttol@lval+2
 12378  0F24  01D7               	clrf	___fttol@lval+3
 12379  0F25  308E               	movlw	142
 12380  0F26  02D8               	subwf	___fttol@exp1,f
 12381  0F27  1FD8               	btfss	___fttol@exp1,7
 12382  0F28  2F45               	goto	l5281
 12383  0F29  0858               	movf	___fttol@exp1,w
 12384  0F2A  3A80               	xorlw	128
 12385  0F2B  3E8F               	addlw	143
 12386  0F2C  1803               	skipnc
 12387  0F2D  2F37               	goto	l5279
 12388  0F2E  3000               	movlw	0
 12389  0F2F  00CE               	movwf	?___fttol+3
 12390  0F30  3000               	movlw	0
 12391  0F31  00CD               	movwf	?___fttol+2
 12392  0F32  3000               	movlw	0
 12393  0F33  00CC               	movwf	?___fttol+1
 12394  0F34  3000               	movlw	0
 12395  0F35  00CB               	movwf	?___fttol
 12396  0F36  0008               	return
 12397  0F37                     l5279:	
 12398  0F37  3001               	movlw	1
 12399  0F38                     u3945:	
 12400  0F38  36D7               	lsrf	___fttol@lval+3,f
 12401  0F39  0CD6               	rrf	___fttol@lval+2,f
 12402  0F3A  0CD5               	rrf	___fttol@lval+1,f
 12403  0F3B  0CD4               	rrf	___fttol@lval,f
 12404  0F3C  0B89               	decfsz	9,f
 12405  0F3D  2F38               	goto	u3945
 12406  0F3E  3001               	movlw	1
 12407  0F3F  00CF               	movwf	??___fttol
 12408  0F40  084F               	movf	??___fttol,w
 12409  0F41  07D8               	addwf	___fttol@exp1,f
 12410  0F42  1903               	btfsc	3,2
 12411  0F43  2F5E               	goto	l5291
 12412  0F44  2F37               	goto	l5279
 12413  0F45                     l5281:	
 12414  0F45  3018               	movlw	24
 12415  0F46  0258               	subwf	___fttol@exp1,w
 12416  0F47  1C03               	skipc
 12417  0F48  2F5B               	goto	l5289
 12418  0F49  3000               	movlw	0
 12419  0F4A  00CE               	movwf	?___fttol+3
 12420  0F4B  3000               	movlw	0
 12421  0F4C  00CD               	movwf	?___fttol+2
 12422  0F4D  3000               	movlw	0
 12423  0F4E  00CC               	movwf	?___fttol+1
 12424  0F4F  3000               	movlw	0
 12425  0F50  00CB               	movwf	?___fttol
 12426  0F51  0008               	return
 12427  0F52                     l5287:	
 12428  0F52  3001               	movlw	1
 12429  0F53                     u3975:	
 12430  0F53  35D4               	lslf	___fttol@lval,f
 12431  0F54  0DD5               	rlf	___fttol@lval+1,f
 12432  0F55  0DD6               	rlf	___fttol@lval+2,f
 12433  0F56  0DD7               	rlf	___fttol@lval+3,f
 12434  0F57  0B89               	decfsz	9,f
 12435  0F58  2F53               	goto	u3975
 12436  0F59  3001               	movlw	1
 12437  0F5A  02D8               	subwf	___fttol@exp1,f
 12438  0F5B                     l5289:	
 12439  0F5B  08D8               	movf	___fttol@exp1,f
 12440  0F5C  1D03               	skipz
 12441  0F5D  2F52               	goto	l5287
 12442  0F5E                     l5291:	
 12443  0F5E  0853               	movf	___fttol@sign1,w
 12444  0F5F  1903               	btfsc	3,2
 12445  0F60  2F6C               	goto	l5295
 12446  0F61  09D4               	comf	___fttol@lval,f
 12447  0F62  09D5               	comf	___fttol@lval+1,f
 12448  0F63  09D6               	comf	___fttol@lval+2,f
 12449  0F64  09D7               	comf	___fttol@lval+3,f
 12450  0F65  0AD4               	incf	___fttol@lval,f
 12451  0F66  1903               	skipnz
 12452  0F67  0AD5               	incf	___fttol@lval+1,f
 12453  0F68  1903               	skipnz
 12454  0F69  0AD6               	incf	___fttol@lval+2,f
 12455  0F6A  1903               	skipnz
 12456  0F6B  0AD7               	incf	___fttol@lval+3,f
 12457  0F6C                     l5295:	
 12458  0F6C  0857               	movf	___fttol@lval+3,w
 12459  0F6D  00CE               	movwf	?___fttol+3
 12460  0F6E  0856               	movf	___fttol@lval+2,w
 12461  0F6F  00CD               	movwf	?___fttol+2
 12462  0F70  0855               	movf	___fttol@lval+1,w
 12463  0F71  00CC               	movwf	?___fttol+1
 12464  0F72  0854               	movf	___fttol@lval,w
 12465  0F73  00CB               	movwf	?___fttol
 12466  0F74  0008               	return
 12467  0F75                     __end_of___fttol:	
 12468                           
 12469                           	psect	text76
 12470  067D                     __ptext76:	
 12471 ;; *************** function ___ftdiv *****************
 12472 ;; Defined at:
 12473 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;  f2              3   14[BANK0 ] float 
 12476 ;;  f1              3   17[BANK0 ] float 
 12477 ;; Auto vars:     Size  Location     Type
 12478 ;;  f3              3   25[BANK0 ] float 
 12479 ;;  sign            1   29[BANK0 ] unsigned char 
 12480 ;;  exp             1   28[BANK0 ] unsigned char 
 12481 ;;  cntr            1   24[BANK0 ] unsigned char 
 12482 ;; Return value:  Size  Location     Type
 12483 ;;                  3   14[BANK0 ] float 
 12484 ;; Registers used:
 12485 ;;		wreg, status,2, status,0, pclath, cstack
 12486 ;; Tracked objects:
 12487 ;;		On entry : 0/0
 12488 ;;		On exit  : 0/0
 12489 ;;		Unchanged: 0/0
 12490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12491 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12492 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12493 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;Total ram usage:       16 bytes
 12496 ;; Hardware stack levels used:    1
 12497 ;; Hardware stack levels required when called:    6
 12498 ;; This function calls:
 12499 ;;		___ftpack
 12500 ;; This function is called by:
 12501 ;;		_getPercentValue
 12502 ;;		_setPercentValue
 12503 ;; This function uses a non-reentrant model
 12504 ;;
 12505                           
 12506                           
 12507                           ;psect for function ___ftdiv
 12508  067D                     ___ftdiv:	
 12509                           
 12510                           ;incstack = 0
 12511                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12512  067D  0020               	movlb	0	; select bank0
 12513  067E  0831               	movf	___ftdiv@f1,w
 12514  067F  00B4               	movwf	??___ftdiv
 12515  0680  0832               	movf	___ftdiv@f1+1,w
 12516  0681  00B5               	movwf	??___ftdiv+1
 12517  0682  0833               	movf	___ftdiv@f1+2,w
 12518  0683  00B6               	movwf	??___ftdiv+2
 12519  0684  1003               	clrc
 12520  0685  0D35               	rlf	??___ftdiv+1,w
 12521  0686  0D36               	rlf	??___ftdiv+2,w
 12522  0687  00B7               	movwf	??___ftdiv+3
 12523  0688  0837               	movf	??___ftdiv+3,w
 12524  0689  00BC               	movwf	___ftdiv@exp
 12525  068A  08BC               	movf	___ftdiv@exp,f
 12526  068B  1D03               	skipz
 12527  068C  2E94               	goto	l5169
 12528  068D  3000               	movlw	0
 12529  068E  00AE               	movwf	?___ftdiv
 12530  068F  3000               	movlw	0
 12531  0690  00AF               	movwf	?___ftdiv+1
 12532  0691  3000               	movlw	0
 12533  0692  00B0               	movwf	?___ftdiv+2
 12534  0693  0008               	return
 12535  0694                     l5169:	
 12536  0694  082E               	movf	___ftdiv@f2,w
 12537  0695  00B4               	movwf	??___ftdiv
 12538  0696  082F               	movf	___ftdiv@f2+1,w
 12539  0697  00B5               	movwf	??___ftdiv+1
 12540  0698  0830               	movf	___ftdiv@f2+2,w
 12541  0699  00B6               	movwf	??___ftdiv+2
 12542  069A  1003               	clrc
 12543  069B  0D35               	rlf	??___ftdiv+1,w
 12544  069C  0D36               	rlf	??___ftdiv+2,w
 12545  069D  00B7               	movwf	??___ftdiv+3
 12546  069E  0837               	movf	??___ftdiv+3,w
 12547  069F  00BD               	movwf	___ftdiv@sign
 12548  06A0  08BD               	movf	___ftdiv@sign,f
 12549  06A1  1D03               	skipz
 12550  06A2  2EAA               	goto	l5175
 12551  06A3  3000               	movlw	0
 12552  06A4  00AE               	movwf	?___ftdiv
 12553  06A5  3000               	movlw	0
 12554  06A6  00AF               	movwf	?___ftdiv+1
 12555  06A7  3000               	movlw	0
 12556  06A8  00B0               	movwf	?___ftdiv+2
 12557  06A9  0008               	return
 12558  06AA                     l5175:	
 12559  06AA  3000               	movlw	0
 12560  06AB  00B9               	movwf	___ftdiv@f3
 12561  06AC  3000               	movlw	0
 12562  06AD  00BA               	movwf	___ftdiv@f3+1
 12563  06AE  3000               	movlw	0
 12564  06AF  00BB               	movwf	___ftdiv@f3+2
 12565  06B0  3089               	movlw	137
 12566  06B1  073D               	addwf	___ftdiv@sign,w
 12567  06B2  00B4               	movwf	??___ftdiv
 12568  06B3  0834               	movf	??___ftdiv,w
 12569  06B4  02BC               	subwf	___ftdiv@exp,f
 12570  06B5  0831               	movf	___ftdiv@f1,w
 12571  06B6  00B4               	movwf	??___ftdiv
 12572  06B7  0832               	movf	___ftdiv@f1+1,w
 12573  06B8  00B5               	movwf	??___ftdiv+1
 12574  06B9  0833               	movf	___ftdiv@f1+2,w
 12575  06BA  00B6               	movwf	??___ftdiv+2
 12576  06BB  3010               	movlw	16
 12577  06BC                     u3725:	
 12578  06BC  36B6               	lsrf	??___ftdiv+2,f
 12579  06BD  0CB5               	rrf	??___ftdiv+1,f
 12580  06BE  0CB4               	rrf	??___ftdiv,f
 12581  06BF  0B89               	decfsz	9,f
 12582  06C0  2EBC               	goto	u3725
 12583  06C1  0834               	movf	??___ftdiv,w
 12584  06C2  00B7               	movwf	??___ftdiv+3
 12585  06C3  0837               	movf	??___ftdiv+3,w
 12586  06C4  00BD               	movwf	___ftdiv@sign
 12587  06C5  082E               	movf	___ftdiv@f2,w
 12588  06C6  00B4               	movwf	??___ftdiv
 12589  06C7  082F               	movf	___ftdiv@f2+1,w
 12590  06C8  00B5               	movwf	??___ftdiv+1
 12591  06C9  0830               	movf	___ftdiv@f2+2,w
 12592  06CA  00B6               	movwf	??___ftdiv+2
 12593  06CB  3010               	movlw	16
 12594  06CC                     u3735:	
 12595  06CC  36B6               	lsrf	??___ftdiv+2,f
 12596  06CD  0CB5               	rrf	??___ftdiv+1,f
 12597  06CE  0CB4               	rrf	??___ftdiv,f
 12598  06CF  0B89               	decfsz	9,f
 12599  06D0  2ECC               	goto	u3735
 12600  06D1  0834               	movf	??___ftdiv,w
 12601  06D2  00B7               	movwf	??___ftdiv+3
 12602  06D3  0837               	movf	??___ftdiv+3,w
 12603  06D4  06BD               	xorwf	___ftdiv@sign,f
 12604  06D5  3080               	movlw	128
 12605  06D6  00B4               	movwf	??___ftdiv
 12606  06D7  0834               	movf	??___ftdiv,w
 12607  06D8  05BD               	andwf	___ftdiv@sign,f
 12608  06D9  17B2               	bsf	___ftdiv@f1+1,7
 12609  06DA  30FF               	movlw	255
 12610  06DB  05B1               	andwf	___ftdiv@f1,f
 12611  06DC  30FF               	movlw	255
 12612  06DD  05B2               	andwf	___ftdiv@f1+1,f
 12613  06DE  3000               	movlw	0
 12614  06DF  05B3               	andwf	___ftdiv@f1+2,f
 12615  06E0  17AF               	bsf	___ftdiv@f2+1,7
 12616  06E1  30FF               	movlw	255
 12617  06E2  05AE               	andwf	___ftdiv@f2,f
 12618  06E3  30FF               	movlw	255
 12619  06E4  05AF               	andwf	___ftdiv@f2+1,f
 12620  06E5  3000               	movlw	0
 12621  06E6  05B0               	andwf	___ftdiv@f2+2,f
 12622  06E7  3018               	movlw	24
 12623  06E8  00B4               	movwf	??___ftdiv
 12624  06E9  0834               	movf	??___ftdiv,w
 12625  06EA  00B8               	movwf	___ftdiv@cntr
 12626  06EB                     l5189:	
 12627  06EB  3001               	movlw	1
 12628  06EC                     u3745:	
 12629  06EC  35B9               	lslf	___ftdiv@f3,f
 12630  06ED  0DBA               	rlf	___ftdiv@f3+1,f
 12631  06EE  0DBB               	rlf	___ftdiv@f3+2,f
 12632  06EF  0B89               	decfsz	9,f
 12633  06F0  2EEC               	goto	u3745
 12634  06F1  0830               	movf	___ftdiv@f2+2,w
 12635  06F2  0233               	subwf	___ftdiv@f1+2,w
 12636  06F3  1D03               	skipz
 12637  06F4  2EFB               	goto	u3755
 12638  06F5  082F               	movf	___ftdiv@f2+1,w
 12639  06F6  0232               	subwf	___ftdiv@f1+1,w
 12640  06F7  1D03               	skipz
 12641  06F8  2EFB               	goto	u3755
 12642  06F9  082E               	movf	___ftdiv@f2,w
 12643  06FA  0231               	subwf	___ftdiv@f1,w
 12644  06FB                     u3755:	
 12645  06FB  1C03               	skipc
 12646  06FC  2F04               	goto	l5197
 12647  06FD  082E               	movf	___ftdiv@f2,w
 12648  06FE  02B1               	subwf	___ftdiv@f1,f
 12649  06FF  082F               	movf	___ftdiv@f2+1,w
 12650  0700  3BB2               	subwfb	___ftdiv@f1+1,f
 12651  0701  0830               	movf	___ftdiv@f2+2,w
 12652  0702  3BB3               	subwfb	___ftdiv@f1+2,f
 12653  0703  1439               	bsf	___ftdiv@f3,0
 12654  0704                     l5197:	
 12655  0704  3001               	movlw	1
 12656  0705                     u3765:	
 12657  0705  35B1               	lslf	___ftdiv@f1,f
 12658  0706  0DB2               	rlf	___ftdiv@f1+1,f
 12659  0707  0DB3               	rlf	___ftdiv@f1+2,f
 12660  0708  0B89               	decfsz	9,f
 12661  0709  2F05               	goto	u3765
 12662  070A  3001               	movlw	1
 12663  070B  02B8               	subwf	___ftdiv@cntr,f
 12664  070C  1D03               	btfss	3,2
 12665  070D  2EEB               	goto	l5189
 12666  070E  0839               	movf	___ftdiv@f3,w
 12667  070F  00A0               	movwf	___ftpack@arg
 12668  0710  083A               	movf	___ftdiv@f3+1,w
 12669  0711  00A1               	movwf	___ftpack@arg+1
 12670  0712  083B               	movf	___ftdiv@f3+2,w
 12671  0713  00A2               	movwf	___ftpack@arg+2
 12672  0714  083C               	movf	___ftdiv@exp,w
 12673  0715  00B4               	movwf	??___ftdiv
 12674  0716  0834               	movf	??___ftdiv,w
 12675  0717  00A3               	movwf	___ftpack@exp
 12676  0718  083D               	movf	___ftdiv@sign,w
 12677  0719  00B5               	movwf	??___ftdiv+1
 12678  071A  0835               	movf	??___ftdiv+1,w
 12679  071B  00A4               	movwf	___ftpack@sign
 12680  071C  318A  2236         	fcall	___ftpack
 12681  071E  0020               	movlb	0	; select bank0
 12682  071F  0820               	movf	?___ftpack,w
 12683  0720  00AE               	movwf	?___ftdiv
 12684  0721  0821               	movf	?___ftpack+1,w
 12685  0722  00AF               	movwf	?___ftdiv+1
 12686  0723  0822               	movf	?___ftpack+2,w
 12687  0724  00B0               	movwf	?___ftdiv+2
 12688  0725  0008               	return
 12689  0726                     __end_of___ftdiv:	
 12690                           
 12691                           	psect	text77
 12692  1445                     __ptext77:	
 12693 ;; *************** function ___awtoft *****************
 12694 ;; Defined at:
 12695 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 12696 ;; Parameters:    Size  Location     Type
 12697 ;;  c               2    8[BANK0 ] int 
 12698 ;; Auto vars:     Size  Location     Type
 12699 ;;  sign            1   13[BANK0 ] unsigned char 
 12700 ;; Return value:  Size  Location     Type
 12701 ;;                  3    8[BANK0 ] float 
 12702 ;; Registers used:
 12703 ;;		wreg, status,2, status,0, pclath, cstack
 12704 ;; Tracked objects:
 12705 ;;		On entry : 0/0
 12706 ;;		On exit  : 0/0
 12707 ;;		Unchanged: 0/0
 12708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12709 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12710 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12711 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;Total ram usage:        6 bytes
 12714 ;; Hardware stack levels used:    1
 12715 ;; Hardware stack levels required when called:    6
 12716 ;; This function calls:
 12717 ;;		___ftpack
 12718 ;; This function is called by:
 12719 ;;		_getPercentValue
 12720 ;;		_setPercentValue
 12721 ;; This function uses a non-reentrant model
 12722 ;;
 12723                           
 12724                           
 12725                           ;psect for function ___awtoft
 12726  1445                     ___awtoft:	
 12727                           
 12728                           ;incstack = 0
 12729                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 12730  1445  0020               	movlb	0	; select bank0
 12731  1446  01AD               	clrf	___awtoft@sign
 12732  1447  1FA9               	btfss	___awtoft@c+1,7
 12733  1448  2C50               	goto	l5087
 12734  1449  09A8               	comf	___awtoft@c,f
 12735  144A  09A9               	comf	___awtoft@c+1,f
 12736  144B  0AA8               	incf	___awtoft@c,f
 12737  144C  1903               	skipnz
 12738  144D  0AA9               	incf	___awtoft@c+1,f
 12739  144E  01AD               	clrf	___awtoft@sign
 12740  144F  0AAD               	incf	___awtoft@sign,f
 12741  1450                     l5087:	
 12742  1450  0828               	movf	___awtoft@c,w
 12743  1451  00A0               	movwf	___ftpack@arg
 12744  1452  0829               	movf	___awtoft@c+1,w
 12745  1453  00A1               	movwf	___ftpack@arg+1
 12746  1454  01A2               	clrf	___ftpack@arg+2
 12747  1455  308E               	movlw	142
 12748  1456  00AB               	movwf	??___awtoft
 12749  1457  082B               	movf	??___awtoft,w
 12750  1458  00A3               	movwf	___ftpack@exp
 12751  1459  082D               	movf	___awtoft@sign,w
 12752  145A  00AC               	movwf	??___awtoft+1
 12753  145B  082C               	movf	??___awtoft+1,w
 12754  145C  00A4               	movwf	___ftpack@sign
 12755  145D  318A  2236         	fcall	___ftpack
 12756  145F  0020               	movlb	0	; select bank0
 12757  1460  0820               	movf	?___ftpack,w
 12758  1461  00A8               	movwf	?___awtoft
 12759  1462  0821               	movf	?___ftpack+1,w
 12760  1463  00A9               	movwf	?___awtoft+1
 12761  1464  0822               	movf	?___ftpack+2,w
 12762  1465  00AA               	movwf	?___awtoft+2
 12763  1466  0008               	return
 12764  1467                     __end_of___awtoft:	
 12765                           
 12766                           	psect	text78
 12767  0A36                     __ptext78:	
 12768 ;; *************** function ___ftpack *****************
 12769 ;; Defined at:
 12770 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 12771 ;; Parameters:    Size  Location     Type
 12772 ;;  arg             3    0[BANK0 ] unsigned um
 12773 ;;  exp             1    3[BANK0 ] unsigned char 
 12774 ;;  sign            1    4[BANK0 ] unsigned char 
 12775 ;; Auto vars:     Size  Location     Type
 12776 ;;		None
 12777 ;; Return value:  Size  Location     Type
 12778 ;;                  3    0[BANK0 ] float 
 12779 ;; Registers used:
 12780 ;;		wreg, status,2, status,0
 12781 ;; Tracked objects:
 12782 ;;		On entry : 0/0
 12783 ;;		On exit  : 0/0
 12784 ;;		Unchanged: 0/0
 12785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12786 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12788 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12789 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;Total ram usage:        8 bytes
 12791 ;; Hardware stack levels used:    1
 12792 ;; Hardware stack levels required when called:    5
 12793 ;; This function calls:
 12794 ;;		Nothing
 12795 ;; This function is called by:
 12796 ;;		___awtoft
 12797 ;;		___ftadd
 12798 ;;		___ftdiv
 12799 ;;		___ftmul
 12800 ;; This function uses a non-reentrant model
 12801 ;;
 12802                           
 12803                           
 12804                           ;psect for function ___ftpack
 12805  0A36                     ___ftpack:	
 12806                           
 12807                           ;incstack = 0
 12808                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 12809  0A36  0020               	movlb	0	; select bank0
 12810  0A37  0823               	movf	___ftpack@exp,w
 12811  0A38  1903               	btfsc	3,2
 12812  0A39  2A3F               	goto	l5053
 12813  0A3A  0822               	movf	___ftpack@arg+2,w
 12814  0A3B  0421               	iorwf	___ftpack@arg+1,w
 12815  0A3C  0420               	iorwf	___ftpack@arg,w
 12816  0A3D  1D03               	skipz
 12817  0A3E  2A50               	goto	l5059
 12818  0A3F                     l5053:	
 12819  0A3F  3000               	movlw	0
 12820  0A40  00A0               	movwf	?___ftpack
 12821  0A41  3000               	movlw	0
 12822  0A42  00A1               	movwf	?___ftpack+1
 12823  0A43  3000               	movlw	0
 12824  0A44  00A2               	movwf	?___ftpack+2
 12825  0A45  0008               	return
 12826  0A46                     l5057:	
 12827  0A46  3001               	movlw	1
 12828  0A47  00A5               	movwf	??___ftpack
 12829  0A48  0825               	movf	??___ftpack,w
 12830  0A49  07A3               	addwf	___ftpack@exp,f
 12831  0A4A  3001               	movlw	1
 12832  0A4B                     u3375:	
 12833  0A4B  36A2               	lsrf	___ftpack@arg+2,f
 12834  0A4C  0CA1               	rrf	___ftpack@arg+1,f
 12835  0A4D  0CA0               	rrf	___ftpack@arg,f
 12836  0A4E  0B89               	decfsz	9,f
 12837  0A4F  2A4B               	goto	u3375
 12838  0A50                     l5059:	
 12839  0A50  30FE               	movlw	254
 12840  0A51  0522               	andwf	___ftpack@arg+2,w
 12841  0A52  1903               	btfsc	3,2
 12842  0A53  2A69               	goto	l2693
 12843  0A54  2A46               	goto	l5057
 12844  0A55                     l5061:	
 12845  0A55  3001               	movlw	1
 12846  0A56  00A5               	movwf	??___ftpack
 12847  0A57  0825               	movf	??___ftpack,w
 12848  0A58  07A3               	addwf	___ftpack@exp,f
 12849  0A59  3001               	movlw	1
 12850  0A5A  07A0               	addwf	___ftpack@arg,f
 12851  0A5B  3000               	movlw	0
 12852  0A5C  1803               	skipnc
 12853  0A5D  3001               	movlw	1
 12854  0A5E  07A1               	addwf	___ftpack@arg+1,f
 12855  0A5F  3000               	movlw	0
 12856  0A60  1803               	skipnc
 12857  0A61  3001               	movlw	1
 12858  0A62  07A2               	addwf	___ftpack@arg+2,f
 12859  0A63  3001               	movlw	1
 12860  0A64                     u3395:	
 12861  0A64  36A2               	lsrf	___ftpack@arg+2,f
 12862  0A65  0CA1               	rrf	___ftpack@arg+1,f
 12863  0A66  0CA0               	rrf	___ftpack@arg,f
 12864  0A67  0B89               	decfsz	9,f
 12865  0A68  2A64               	goto	u3395
 12866  0A69                     l2693:	
 12867  0A69  30FF               	movlw	255
 12868  0A6A  0522               	andwf	___ftpack@arg+2,w
 12869  0A6B  1903               	btfsc	3,2
 12870  0A6C  2A76               	goto	l5069
 12871  0A6D  2A55               	goto	l5061
 12872  0A6E                     l5067:	
 12873  0A6E  3001               	movlw	1
 12874  0A6F  02A3               	subwf	___ftpack@exp,f
 12875  0A70  3001               	movlw	1
 12876  0A71                     u3415:	
 12877  0A71  35A0               	lslf	___ftpack@arg,f
 12878  0A72  0DA1               	rlf	___ftpack@arg+1,f
 12879  0A73  0DA2               	rlf	___ftpack@arg+2,f
 12880  0A74  0B89               	decfsz	9,f
 12881  0A75  2A71               	goto	u3415
 12882  0A76                     l5069:	
 12883  0A76  1FA1               	btfss	___ftpack@arg+1,7
 12884  0A77  2A6E               	goto	l5067
 12885  0A78  1823               	btfsc	___ftpack@exp,0
 12886  0A79  2A80               	goto	l2699
 12887  0A7A  30FF               	movlw	255
 12888  0A7B  05A0               	andwf	___ftpack@arg,f
 12889  0A7C  307F               	movlw	127
 12890  0A7D  05A1               	andwf	___ftpack@arg+1,f
 12891  0A7E  30FF               	movlw	255
 12892  0A7F  05A2               	andwf	___ftpack@arg+2,f
 12893  0A80                     l2699:	
 12894  0A80  1003               	clrc
 12895  0A81  0CA3               	rrf	___ftpack@exp,f
 12896  0A82  0823               	movf	___ftpack@exp,w
 12897  0A83  00A5               	movwf	??___ftpack
 12898  0A84  01A6               	clrf	??___ftpack+1
 12899  0A85  01A7               	clrf	??___ftpack+2
 12900  0A86  3010               	movlw	16
 12901  0A87                     u3445:	
 12902  0A87  35A5               	lslf	??___ftpack,f
 12903  0A88  0DA6               	rlf	??___ftpack+1,f
 12904  0A89  0DA7               	rlf	??___ftpack+2,f
 12905  0A8A  0B89               	decfsz	9,f
 12906  0A8B  2A87               	goto	u3445
 12907  0A8C  0825               	movf	??___ftpack,w
 12908  0A8D  04A0               	iorwf	___ftpack@arg,f
 12909  0A8E  0826               	movf	??___ftpack+1,w
 12910  0A8F  04A1               	iorwf	___ftpack@arg+1,f
 12911  0A90  0827               	movf	??___ftpack+2,w
 12912  0A91  04A2               	iorwf	___ftpack@arg+2,f
 12913  0A92  0824               	movf	___ftpack@sign,w
 12914  0A93  1903               	btfsc	3,2
 12915  0A94  0008               	return
 12916  0A95  17A2               	bsf	___ftpack@arg+2,7
 12917  0A96  0008               	return
 12918  0A97                     __end_of___ftpack:	
 12919                           
 12920                           	psect	text79
 12921  114F                     __ptext79:	
 12922 ;; *************** function _setRFSW_Status *****************
 12923 ;; Defined at:
 12924 ;;		line 377 in file "../src/RF_Control_B1.c"
 12925 ;; Parameters:    Size  Location     Type
 12926 ;;  sw              1    wreg     unsigned char 
 12927 ;;  command         1    2[BANK0 ] unsigned char 
 12928 ;; Auto vars:     Size  Location     Type
 12929 ;;  sw              1    3[BANK0 ] unsigned char 
 12930 ;; Return value:  Size  Location     Type
 12931 ;;		None               void
 12932 ;; Registers used:
 12933 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12934 ;; Tracked objects:
 12935 ;;		On entry : 0/0
 12936 ;;		On exit  : 0/0
 12937 ;;		Unchanged: 0/0
 12938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12939 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12943 ;;Total ram usage:        2 bytes
 12944 ;; Hardware stack levels used:    1
 12945 ;; Hardware stack levels required when called:    6
 12946 ;; This function calls:
 12947 ;;		_RfSWPointSelect
 12948 ;; This function is called by:
 12949 ;;		_DlyOff_Main
 12950 ;;		_setControl_Lights_Table
 12951 ;;		_Sw_DimmerOnFunc
 12952 ;;		_Sw_DimmerAdjFunc
 12953 ;;		_setDimmerLights_ERROR
 12954 ;; This function uses a non-reentrant model
 12955 ;;
 12956                           
 12957                           
 12958                           ;psect for function _setRFSW_Status
 12959  114F                     _setRFSW_Status:	
 12960                           
 12961                           ;incstack = 0
 12962                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12963                           ;setRFSW_Status@sw stored from wreg
 12964  114F  0020               	movlb	0	; select bank0
 12965  1150  00A3               	movwf	setRFSW_Status@sw
 12966                           
 12967                           ;RF_Control_B1.c: 378: RfSWPointSelect(sw);
 12968  1151  0823               	movf	setRFSW_Status@sw,w
 12969  1152  3192  22CD         	fcall	_RfSWPointSelect
 12970                           
 12971                           ;RF_Control_B1.c: 379: RFSW->Status = command;
 12972  1154  0021               	movlb	1	; select bank1
 12973  1155  0860               	movf	_RFSW^(0+128),w
 12974  1156  0086               	movwf	6
 12975  1157  0187               	clrf	7
 12976  1158  0020               	movlb	0	; select bank0
 12977  1159  0822               	movf	setRFSW_Status@command,w
 12978  115A  1001               	bcf	1,0
 12979  115B  1D03               	skipz
 12980  115C  1401               	bsf	1,0
 12981  115D  0008               	return
 12982  115E                     __end_of_setRFSW_Status:	
 12983                           
 12984                           	psect	text80
 12985  12CD                     __ptext80:	
 12986 ;; *************** function _RfSWPointSelect *****************
 12987 ;; Defined at:
 12988 ;;		line 312 in file "../src/RF_Control_B1.c"
 12989 ;; Parameters:    Size  Location     Type
 12990 ;;  sw              1    wreg     unsigned char 
 12991 ;; Auto vars:     Size  Location     Type
 12992 ;;  sw              1    1[BANK0 ] unsigned char 
 12993 ;; Return value:  Size  Location     Type
 12994 ;;		None               void
 12995 ;; Registers used:
 12996 ;;		wreg
 12997 ;; Tracked objects:
 12998 ;;		On entry : 0/0
 12999 ;;		On exit  : 0/0
 13000 ;;		Unchanged: 0/0
 13001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13005 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13006 ;;Total ram usage:        2 bytes
 13007 ;; Hardware stack levels used:    1
 13008 ;; Hardware stack levels required when called:    5
 13009 ;; This function calls:
 13010 ;;		Nothing
 13011 ;; This function is called by:
 13012 ;;		_setRFSW_Control
 13013 ;;		_setRFSW_AdjControl
 13014 ;;		_setRFSW_Status
 13015 ;; This function uses a non-reentrant model
 13016 ;;
 13017                           
 13018                           
 13019                           ;psect for function _RfSWPointSelect
 13020  12CD                     _RfSWPointSelect:	
 13021                           
 13022                           ;incstack = 0
 13023                           ; Regs used in _RfSWPointSelect: [wreg]
 13024                           ;RfSWPointSelect@sw stored from wreg
 13025  12CD  0020               	movlb	0	; select bank0
 13026  12CE  00A1               	movwf	RfSWPointSelect@sw
 13027                           
 13028                           ;RF_Control_B1.c: 314: if (sw == 1) {
 13029  12CF  0821               	movf	RfSWPointSelect@sw,w
 13030  12D0  3A01               	xorlw	1
 13031  12D1  1D03               	skipz
 13032  12D2  2AD8               	goto	l2031
 13033                           
 13034                           ;RF_Control_B1.c: 315: RFSW = &RFSW1;
 13035  12D3  30EA               	movlw	_RFSW1& (0+255)
 13036  12D4  00A0               	movwf	??_RfSWPointSelect
 13037  12D5  0820               	movf	??_RfSWPointSelect,w
 13038  12D6  0021               	movlb	1	; select bank1
 13039  12D7  00E0               	movwf	_RFSW^(0+128)
 13040  12D8                     l2031:	
 13041                           
 13042                           ;RF_Control_B1.c: 316: }
 13043                           ;RF_Control_B1.c: 319: if (sw == 2) {
 13044  12D8  0020               	movlb	0	; select bank0
 13045  12D9  0821               	movf	RfSWPointSelect@sw,w
 13046  12DA  3A02               	xorlw	2
 13047  12DB  1D03               	skipz
 13048  12DC  0008               	return
 13049                           
 13050                           ;RF_Control_B1.c: 320: RFSW = &RFSW2;
 13051  12DD  30EB               	movlw	_RFSW2& (0+255)
 13052  12DE  00A0               	movwf	??_RfSWPointSelect
 13053  12DF  0820               	movf	??_RfSWPointSelect,w
 13054  12E0  0021               	movlb	1	; select bank1
 13055  12E1  00E0               	movwf	_RFSW^(0+128)
 13056  12E2  0008               	return
 13057  12E3                     __end_of_RfSWPointSelect:	
 13058                           
 13059                           	psect	text81
 13060  11B9                     __ptext81:	
 13061 ;; *************** function _setDimmerLights_Trigger *****************
 13062 ;; Defined at:
 13063 ;;		line 705 in file "../src/Dimmer_B1.c"
 13064 ;; Parameters:    Size  Location     Type
 13065 ;;  lights          1    wreg     unsigned char 
 13066 ;;  command         1    2[BANK0 ] unsigned char 
 13067 ;; Auto vars:     Size  Location     Type
 13068 ;;  lights          1    3[BANK0 ] unsigned char 
 13069 ;; Return value:  Size  Location     Type
 13070 ;;		None               void
 13071 ;; Registers used:
 13072 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13073 ;; Tracked objects:
 13074 ;;		On entry : 0/0
 13075 ;;		On exit  : 0/0
 13076 ;;		Unchanged: 0/0
 13077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13078 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13079 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;Total ram usage:        2 bytes
 13083 ;; Hardware stack levels used:    1
 13084 ;; Hardware stack levels required when called:    6
 13085 ;; This function calls:
 13086 ;;		_DimmerLightsPointSelect
 13087 ;; This function is called by:
 13088 ;;		_DlyOff_Main
 13089 ;;		_setRFSW_Control
 13090 ;;		_Sw_DimmerOnFunc
 13091 ;;		_Sw_DimmerOffFunc
 13092 ;; This function uses a non-reentrant model
 13093 ;;
 13094                           
 13095                           
 13096                           ;psect for function _setDimmerLights_Trigger
 13097  11B9                     _setDimmerLights_Trigger:	
 13098                           
 13099                           ;incstack = 0
 13100                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13101                           ;setDimmerLights_Trigger@lights stored from wreg
 13102  11B9  0020               	movlb	0	; select bank0
 13103  11BA  00A3               	movwf	setDimmerLights_Trigger@lights
 13104                           
 13105                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 13106  11BB  0823               	movf	setDimmerLights_Trigger@lights,w
 13107  11BC  3192  2241         	fcall	_DimmerLightsPointSelect
 13108                           
 13109                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
 13110  11BE  0879               	movf	_DimmerLights,w
 13111  11BF  3E08               	addlw	8
 13112  11C0  0086               	movwf	6
 13113  11C1  3001               	movlw	1	; select bank2/3
 13114  11C2  0087               	movwf	7
 13115  11C3  0020               	movlb	0	; select bank0
 13116  11C4  0822               	movf	setDimmerLights_Trigger@command,w
 13117  11C5  1101               	bcf	1,2
 13118  11C6  1D03               	skipz
 13119  11C7  1501               	bsf	1,2
 13120  11C8  0008               	return
 13121  11C9                     __end_of_setDimmerLights_Trigger:	
 13122                           
 13123                           	psect	text82
 13124  11A9                     __ptext82:	
 13125 ;; *************** function _setDimmerLights_Switch *****************
 13126 ;; Defined at:
 13127 ;;		line 693 in file "../src/Dimmer_B1.c"
 13128 ;; Parameters:    Size  Location     Type
 13129 ;;  lights          1    wreg     unsigned char 
 13130 ;;  command         1    2[BANK0 ] unsigned char 
 13131 ;; Auto vars:     Size  Location     Type
 13132 ;;  lights          1    3[BANK0 ] unsigned char 
 13133 ;; Return value:  Size  Location     Type
 13134 ;;		None               void
 13135 ;; Registers used:
 13136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13137 ;; Tracked objects:
 13138 ;;		On entry : 0/0
 13139 ;;		On exit  : 0/0
 13140 ;;		Unchanged: 0/0
 13141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13142 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13143 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13145 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;Total ram usage:        2 bytes
 13147 ;; Hardware stack levels used:    1
 13148 ;; Hardware stack levels required when called:    6
 13149 ;; This function calls:
 13150 ;;		_DimmerLightsPointSelect
 13151 ;; This function is called by:
 13152 ;;		_DlyOff_Main
 13153 ;;		_setRFSW_Control
 13154 ;;		_Sw_DimmerOnFunc
 13155 ;;		_Sw_DimmerOffFunc
 13156 ;; This function uses a non-reentrant model
 13157 ;;
 13158                           
 13159                           
 13160                           ;psect for function _setDimmerLights_Switch
 13161  11A9                     _setDimmerLights_Switch:	
 13162                           
 13163                           ;incstack = 0
 13164                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13165                           ;setDimmerLights_Switch@lights stored from wreg
 13166  11A9  0020               	movlb	0	; select bank0
 13167  11AA  00A3               	movwf	setDimmerLights_Switch@lights
 13168                           
 13169                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
 13170  11AB  0823               	movf	setDimmerLights_Switch@lights,w
 13171  11AC  3192  2241         	fcall	_DimmerLightsPointSelect
 13172                           
 13173                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
 13174  11AE  0879               	movf	_DimmerLights,w
 13175  11AF  3E08               	addlw	8
 13176  11B0  0086               	movwf	6
 13177  11B1  3001               	movlw	1	; select bank2/3
 13178  11B2  0087               	movwf	7
 13179  11B3  0020               	movlb	0	; select bank0
 13180  11B4  0822               	movf	setDimmerLights_Switch@command,w
 13181  11B5  1081               	bcf	1,1
 13182  11B6  1D03               	skipz
 13183  11B7  1481               	bsf	1,1
 13184  11B8  0008               	return
 13185  11B9                     __end_of_setDimmerLights_Switch:	
 13186                           
 13187                           	psect	text83
 13188  1241                     __ptext83:	
 13189 ;; *************** function _DimmerLightsPointSelect *****************
 13190 ;; Defined at:
 13191 ;;		line 315 in file "../src/Dimmer_B1.c"
 13192 ;; Parameters:    Size  Location     Type
 13193 ;;  lights          1    wreg     unsigned char 
 13194 ;; Auto vars:     Size  Location     Type
 13195 ;;  lights          1    1[BANK0 ] unsigned char 
 13196 ;; Return value:  Size  Location     Type
 13197 ;;		None               void
 13198 ;; Registers used:
 13199 ;;		wreg
 13200 ;; Tracked objects:
 13201 ;;		On entry : 0/0
 13202 ;;		On exit  : 0/0
 13203 ;;		Unchanged: 0/0
 13204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13209 ;;Total ram usage:        2 bytes
 13210 ;; Hardware stack levels used:    1
 13211 ;; Hardware stack levels required when called:    5
 13212 ;; This function calls:
 13213 ;;		Nothing
 13214 ;; This function is called by:
 13215 ;;		_setDimmerLights_Initialization
 13216 ;;		_setDimmerLights_Main
 13217 ;;		_setDimmerLights
 13218 ;;		_setDimmerLights_Adj
 13219 ;;		_setDimmerLights_AdjRF
 13220 ;;		_setDimmerLights_Switch
 13221 ;;		_setDimmerLights_AdjGo
 13222 ;;		_setDimmerLights_Trigger
 13223 ;;		_setDimmerLights_TriggerAdj
 13224 ;;		_setDimmerLights_ERROR
 13225 ;;		_setDimmerLights_TriggerERROR
 13226 ;;		_setDimmerLights_GO
 13227 ;;		_setDimmerLights_MaxmumValue
 13228 ;;		_setDimmerLights_Clear
 13229 ;; This function uses a non-reentrant model
 13230 ;;
 13231                           
 13232                           
 13233                           ;psect for function _DimmerLightsPointSelect
 13234  1241                     _DimmerLightsPointSelect:	
 13235                           
 13236                           ;incstack = 0
 13237                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13238                           ;DimmerLightsPointSelect@lights stored from wreg
 13239  1241  0020               	movlb	0	; select bank0
 13240  1242  00A1               	movwf	DimmerLightsPointSelect@lights
 13241                           
 13242                           ;Dimmer_B1.c: 317: if (lights == 1) {
 13243  1243  0821               	movf	DimmerLightsPointSelect@lights,w
 13244  1244  3A01               	xorlw	1
 13245  1245  1D03               	skipz
 13246  1246  2A4B               	goto	l780
 13247                           
 13248                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 13249  1247  3028               	movlw	_DimmerLights1& (0+255)
 13250  1248  00A0               	movwf	??_DimmerLightsPointSelect
 13251  1249  0820               	movf	??_DimmerLightsPointSelect,w
 13252  124A  00F9               	movwf	_DimmerLights
 13253  124B                     l780:	
 13254                           
 13255                           ;Dimmer_B1.c: 319: }
 13256                           ;Dimmer_B1.c: 322: if (lights == 2) {
 13257  124B  0821               	movf	DimmerLightsPointSelect@lights,w
 13258  124C  3A02               	xorlw	2
 13259  124D  1D03               	skipz
 13260  124E  0008               	return
 13261                           
 13262                           ;Dimmer_B1.c: 323: DimmerLights = &DimmerLights2;
 13263  124F  3037               	movlw	_DimmerLights2& (0+255)
 13264  1250  00A0               	movwf	??_DimmerLightsPointSelect
 13265  1251  0820               	movf	??_DimmerLightsPointSelect,w
 13266  1252  00F9               	movwf	_DimmerLights
 13267  1253  0008               	return
 13268  1254                     __end_of_DimmerLightsPointSelect:	
 13269                           
 13270                           	psect	text84
 13271  0922                     __ptext84:	
 13272 ;; *************** function _setBuz *****************
 13273 ;; Defined at:
 13274 ;;		line 22 in file "../src/Buzzer_B1.c"
 13275 ;; Parameters:    Size  Location     Type
 13276 ;;  count           1    wreg     unsigned char 
 13277 ;;  time            2    9[BANK0 ] int 
 13278 ;; Auto vars:     Size  Location     Type
 13279 ;;  count           1   12[BANK0 ] unsigned char 
 13280 ;; Return value:  Size  Location     Type
 13281 ;;		None               void
 13282 ;; Registers used:
 13283 ;;		wreg, status,2, status,0, pclath, cstack
 13284 ;; Tracked objects:
 13285 ;;		On entry : 0/0
 13286 ;;		On exit  : 0/0
 13287 ;;		Unchanged: 0/0
 13288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13289 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13293 ;;Total ram usage:        4 bytes
 13294 ;; Hardware stack levels used:    1
 13295 ;; Hardware stack levels required when called:    6
 13296 ;; This function calls:
 13297 ;;		___awdiv
 13298 ;; This function is called by:
 13299 ;;		_DlyOff_Main
 13300 ;;		_setDimmerLights_Main
 13301 ;;		_my_Main
 13302 ;;		_setLog_Code
 13303 ;;		_setControl_Lights_Table
 13304 ;;		_setRFSW_Control
 13305 ;;		_setSw_Main
 13306 ;;		_Sw_DimmerOnFunc
 13307 ;;		_DimmerLights_Exceptions
 13308 ;; This function uses a non-reentrant model
 13309 ;;
 13310                           
 13311                           
 13312                           ;psect for function _setBuz
 13313  0922                     _setBuz:	
 13314                           
 13315                           ;incstack = 0
 13316                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 13317                           ;setBuz@count stored from wreg
 13318  0922  0020               	movlb	0	; select bank0
 13319  0923  00AC               	movwf	setBuz@count
 13320                           
 13321                           ;Buzzer_B1.c: 23: time /= 10;
 13322  0924  300A               	movlw	10
 13323  0925  00A0               	movwf	___awdiv@divisor
 13324  0926  3000               	movlw	0
 13325  0927  00A1               	movwf	___awdiv@divisor+1
 13326  0928  082A               	movf	setBuz@time+1,w
 13327  0929  01A3               	clrf	___awdiv@dividend+1
 13328  092A  07A3               	addwf	___awdiv@dividend+1,f
 13329  092B  0829               	movf	setBuz@time,w
 13330  092C  01A2               	clrf	___awdiv@dividend
 13331  092D  07A2               	addwf	___awdiv@dividend,f
 13332  092E  3188  20CE  3189   	fcall	___awdiv
 13333  0931  0020               	movlb	0	; select bank0
 13334  0932  0821               	movf	?___awdiv+1,w
 13335  0933  01AA               	clrf	setBuz@time+1
 13336  0934  07AA               	addwf	setBuz@time+1,f
 13337  0935  0820               	movf	?___awdiv,w
 13338  0936  01A9               	clrf	setBuz@time
 13339  0937  07A9               	addwf	setBuz@time,f
 13340                           
 13341                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 13342  0938  0021               	movlb	1	; select bank1
 13343  0939  1C47               	btfss	_Buz1^(0+128),0
 13344  093A  0008               	return
 13345                           
 13346                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 13347  093B  18C7               	btfsc	_Buz1^(0+128),1
 13348  093C  2953               	goto	l96
 13349                           
 13350                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 13351  093D  14C7               	bsf	_Buz1^(0+128),1
 13352                           
 13353                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 13354  093E  01C8               	clrf	(_Buz1^(0+128)+1)
 13355  093F  01C9               	clrf	((_Buz1+1)^(0+128)+1)
 13356                           
 13357                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 13358  0940  0020               	movlb	0	; select bank0
 13359  0941  082C               	movf	setBuz@count,w
 13360  0942  00AB               	movwf	??_setBuz
 13361  0943  082B               	movf	??_setBuz,w
 13362  0944  0021               	movlb	1	; select bank1
 13363  0945  00CA               	movwf	(_Buz1^(0+128)+3)
 13364                           
 13365                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 13366  0946  0020               	movlb	0	; select bank0
 13367  0947  082A               	movf	setBuz@time+1,w
 13368  0948  0021               	movlb	1	; select bank1
 13369  0949  01CE               	clrf	((_Buz1+1)^(0+128)+6)
 13370  094A  07CE               	addwf	((_Buz1+1)^(0+128)+6),f
 13371  094B  0020               	movlb	0	; select bank0
 13372  094C  0829               	movf	setBuz@time,w
 13373  094D  0021               	movlb	1	; select bank1
 13374  094E  01CD               	clrf	(_Buz1^(0+128)+6)
 13375  094F  07CD               	addwf	(_Buz1^(0+128)+6),f
 13376                           
 13377                           ;Buzzer_B1.c: 30: RB3 = 1;
 13378  0950  0020               	movlb	0	; select bank0
 13379  0951  158D               	bsf	13,3	;volatile
 13380                           
 13381                           ;Buzzer_B1.c: 31: } else {
 13382  0952  0008               	return
 13383  0953                     l96:	
 13384                           
 13385                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 13386  0953  19C7               	btfsc	_Buz1^(0+128),3
 13387  0954  2967               	goto	l98
 13388                           
 13389                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 13390  0955  15C7               	bsf	_Buz1^(0+128),3
 13391                           
 13392                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 13393  0956  0020               	movlb	0	; select bank0
 13394  0957  082C               	movf	setBuz@count,w
 13395  0958  00AB               	movwf	??_setBuz
 13396  0959  082B               	movf	??_setBuz,w
 13397  095A  0021               	movlb	1	; select bank1
 13398  095B  00CB               	movwf	(_Buz1^(0+128)+4)
 13399                           
 13400                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 13401  095C  0020               	movlb	0	; select bank0
 13402  095D  082A               	movf	setBuz@time+1,w
 13403  095E  0021               	movlb	1	; select bank1
 13404  095F  01D0               	clrf	((_Buz1+1)^(0+128)+8)
 13405  0960  07D0               	addwf	((_Buz1+1)^(0+128)+8),f
 13406  0961  0020               	movlb	0	; select bank0
 13407  0962  0829               	movf	setBuz@time,w
 13408  0963  0021               	movlb	1	; select bank1
 13409  0964  01CF               	clrf	(_Buz1^(0+128)+8)
 13410  0965  07CF               	addwf	(_Buz1^(0+128)+8),f
 13411                           
 13412                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 13413  0966  0008               	return
 13414  0967                     l98:	
 13415  0967  1A47               	btfsc	_Buz1^(0+128),4
 13416  0968  0008               	return
 13417                           
 13418                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 13419  0969  1647               	bsf	_Buz1^(0+128),4
 13420                           
 13421                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 13422  096A  0020               	movlb	0	; select bank0
 13423  096B  082C               	movf	setBuz@count,w
 13424  096C  00AB               	movwf	??_setBuz
 13425  096D  082B               	movf	??_setBuz,w
 13426  096E  0021               	movlb	1	; select bank1
 13427  096F  00CC               	movwf	(_Buz1^(0+128)+5)
 13428                           
 13429                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 13430  0970  0020               	movlb	0	; select bank0
 13431  0971  082A               	movf	setBuz@time+1,w
 13432  0972  0021               	movlb	1	; select bank1
 13433  0973  01D2               	clrf	((_Buz1+1)^(0+128)+10)
 13434  0974  07D2               	addwf	((_Buz1+1)^(0+128)+10),f
 13435  0975  0020               	movlb	0	; select bank0
 13436  0976  0829               	movf	setBuz@time,w
 13437  0977  0021               	movlb	1	; select bank1
 13438  0978  01D1               	clrf	(_Buz1^(0+128)+10)
 13439  0979  07D1               	addwf	(_Buz1^(0+128)+10),f
 13440  097A  0008               	return
 13441  097B                     __end_of_setBuz:	
 13442                           
 13443                           	psect	text85
 13444  08CE                     __ptext85:	
 13445 ;; *************** function ___awdiv *****************
 13446 ;; Defined at:
 13447 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 13448 ;; Parameters:    Size  Location     Type
 13449 ;;  divisor         2    0[BANK0 ] int 
 13450 ;;  dividend        2    2[BANK0 ] int 
 13451 ;; Auto vars:     Size  Location     Type
 13452 ;;  quotient        2    7[BANK0 ] int 
 13453 ;;  sign            1    6[BANK0 ] unsigned char 
 13454 ;;  counter         1    5[BANK0 ] unsigned char 
 13455 ;; Return value:  Size  Location     Type
 13456 ;;                  2    0[BANK0 ] int 
 13457 ;; Registers used:
 13458 ;;		wreg, status,2, status,0
 13459 ;; Tracked objects:
 13460 ;;		On entry : 0/0
 13461 ;;		On exit  : 0/0
 13462 ;;		Unchanged: 0/0
 13463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13464 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13465 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13466 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13467 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13468 ;;Total ram usage:        9 bytes
 13469 ;; Hardware stack levels used:    1
 13470 ;; Hardware stack levels required when called:    5
 13471 ;; This function calls:
 13472 ;;		Nothing
 13473 ;; This function is called by:
 13474 ;;		_setBuz
 13475 ;; This function uses a non-reentrant model
 13476 ;;
 13477                           
 13478                           
 13479                           ;psect for function ___awdiv
 13480  08CE                     ___awdiv:	
 13481                           
 13482                           ;incstack = 0
 13483                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13484  08CE  0020               	movlb	0	; select bank0
 13485  08CF  01A6               	clrf	___awdiv@sign
 13486  08D0  1FA1               	btfss	___awdiv@divisor+1,7
 13487  08D1  28D9               	goto	l5397
 13488  08D2  09A0               	comf	___awdiv@divisor,f
 13489  08D3  09A1               	comf	___awdiv@divisor+1,f
 13490  08D4  0AA0               	incf	___awdiv@divisor,f
 13491  08D5  1903               	skipnz
 13492  08D6  0AA1               	incf	___awdiv@divisor+1,f
 13493  08D7  01A6               	clrf	___awdiv@sign
 13494  08D8  0AA6               	incf	___awdiv@sign,f
 13495  08D9                     l5397:	
 13496  08D9  1FA3               	btfss	___awdiv@dividend+1,7
 13497  08DA  28E4               	goto	l5403
 13498  08DB  09A2               	comf	___awdiv@dividend,f
 13499  08DC  09A3               	comf	___awdiv@dividend+1,f
 13500  08DD  0AA2               	incf	___awdiv@dividend,f
 13501  08DE  1903               	skipnz
 13502  08DF  0AA3               	incf	___awdiv@dividend+1,f
 13503  08E0  3001               	movlw	1
 13504  08E1  00A4               	movwf	??___awdiv
 13505  08E2  0824               	movf	??___awdiv,w
 13506  08E3  06A6               	xorwf	___awdiv@sign,f
 13507  08E4                     l5403:	
 13508  08E4  01A7               	clrf	___awdiv@quotient
 13509  08E5  01A8               	clrf	___awdiv@quotient+1
 13510  08E6  0821               	movf	___awdiv@divisor+1,w
 13511  08E7  0420               	iorwf	___awdiv@divisor,w
 13512  08E8  1903               	skipnz
 13513  08E9  2913               	goto	l5425
 13514  08EA  01A5               	clrf	___awdiv@counter
 13515  08EB  0AA5               	incf	___awdiv@counter,f
 13516  08EC                     l5413:	
 13517  08EC  1BA1               	btfsc	___awdiv@divisor+1,7
 13518  08ED  28F8               	goto	l5415
 13519  08EE  3001               	movlw	1
 13520  08EF                     u4165:	
 13521  08EF  35A0               	lslf	___awdiv@divisor,f
 13522  08F0  0DA1               	rlf	___awdiv@divisor+1,f
 13523  08F1  0B89               	decfsz	9,f
 13524  08F2  28EF               	goto	u4165
 13525  08F3  3001               	movlw	1
 13526  08F4  00A4               	movwf	??___awdiv
 13527  08F5  0824               	movf	??___awdiv,w
 13528  08F6  07A5               	addwf	___awdiv@counter,f
 13529  08F7  28EC               	goto	l5413
 13530  08F8                     l5415:	
 13531  08F8  3001               	movlw	1
 13532  08F9                     u4185:	
 13533  08F9  35A7               	lslf	___awdiv@quotient,f
 13534  08FA  0DA8               	rlf	___awdiv@quotient+1,f
 13535  08FB  0B89               	decfsz	9,f
 13536  08FC  28F9               	goto	u4185
 13537  08FD  0821               	movf	___awdiv@divisor+1,w
 13538  08FE  0223               	subwf	___awdiv@dividend+1,w
 13539  08FF  1D03               	skipz
 13540  0900  2903               	goto	u4195
 13541  0901  0820               	movf	___awdiv@divisor,w
 13542  0902  0222               	subwf	___awdiv@dividend,w
 13543  0903                     u4195:	
 13544  0903  1C03               	skipc
 13545  0904  290A               	goto	l5421
 13546  0905  0820               	movf	___awdiv@divisor,w
 13547  0906  02A2               	subwf	___awdiv@dividend,f
 13548  0907  0821               	movf	___awdiv@divisor+1,w
 13549  0908  3BA3               	subwfb	___awdiv@dividend+1,f
 13550  0909  1427               	bsf	___awdiv@quotient,0
 13551  090A                     l5421:	
 13552  090A  3001               	movlw	1
 13553  090B                     u4205:	
 13554  090B  36A1               	lsrf	___awdiv@divisor+1,f
 13555  090C  0CA0               	rrf	___awdiv@divisor,f
 13556  090D  0B89               	decfsz	9,f
 13557  090E  290B               	goto	u4205
 13558  090F  3001               	movlw	1
 13559  0910  02A5               	subwf	___awdiv@counter,f
 13560  0911  1D03               	btfss	3,2
 13561  0912  28F8               	goto	l5415
 13562  0913                     l5425:	
 13563  0913  0826               	movf	___awdiv@sign,w
 13564  0914  1903               	btfsc	3,2
 13565  0915  291B               	goto	l5429
 13566  0916  09A7               	comf	___awdiv@quotient,f
 13567  0917  09A8               	comf	___awdiv@quotient+1,f
 13568  0918  0AA7               	incf	___awdiv@quotient,f
 13569  0919  1903               	skipnz
 13570  091A  0AA8               	incf	___awdiv@quotient+1,f
 13571  091B                     l5429:	
 13572  091B  0828               	movf	___awdiv@quotient+1,w
 13573  091C  01A1               	clrf	?___awdiv+1
 13574  091D  07A1               	addwf	?___awdiv+1,f
 13575  091E  0827               	movf	___awdiv@quotient,w
 13576  091F  01A0               	clrf	?___awdiv
 13577  0920  07A0               	addwf	?___awdiv,f
 13578  0921  0008               	return
 13579  0922                     __end_of___awdiv:	
 13580                           
 13581                           	psect	text86
 13582  109B                     __ptext86:	
 13583 ;; *************** function _DelayOff_Initialization *****************
 13584 ;; Defined at:
 13585 ;;		line 26 in file "../src/DelayOff_B1.c"
 13586 ;; Parameters:    Size  Location     Type
 13587 ;;		None
 13588 ;; Auto vars:     Size  Location     Type
 13589 ;;		None
 13590 ;; Return value:  Size  Location     Type
 13591 ;;		None               void
 13592 ;; Registers used:
 13593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13594 ;; Tracked objects:
 13595 ;;		On entry : 0/0
 13596 ;;		On exit  : 0/0
 13597 ;;		Unchanged: 0/0
 13598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;Total ram usage:        0 bytes
 13604 ;; Hardware stack levels used:    1
 13605 ;; Hardware stack levels required when called:    7
 13606 ;; This function calls:
 13607 ;;		_DlyOff_Initialization
 13608 ;; This function is called by:
 13609 ;;		_main
 13610 ;; This function uses a non-reentrant model
 13611 ;;
 13612                           
 13613                           
 13614                           ;psect for function _DelayOff_Initialization
 13615  109B                     _DelayOff_Initialization:	
 13616                           
 13617                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 13618                           
 13619                           ;incstack = 0
 13620                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13621  109B  3001               	movlw	1
 13622  109C  3190  20D4  3190   	fcall	_DlyOff_Initialization
 13623                           
 13624                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 13625  109F  3002               	movlw	2
 13626  10A0  3190  20D4         	fcall	_DlyOff_Initialization
 13627  10A2  0008               	return
 13628  10A3                     __end_of_DelayOff_Initialization:	
 13629                           
 13630                           	psect	text87
 13631  10D4                     __ptext87:	
 13632 ;; *************** function _DlyOff_Initialization *****************
 13633 ;; Defined at:
 13634 ;;		line 56 in file "../src/DelayOff_B1.c"
 13635 ;; Parameters:    Size  Location     Type
 13636 ;;  sw              1    wreg     unsigned char 
 13637 ;; Auto vars:     Size  Location     Type
 13638 ;;  sw              1    2[BANK0 ] unsigned char 
 13639 ;; Return value:  Size  Location     Type
 13640 ;;		None               void
 13641 ;; Registers used:
 13642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13643 ;; Tracked objects:
 13644 ;;		On entry : 0/0
 13645 ;;		On exit  : 0/0
 13646 ;;		Unchanged: 0/0
 13647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;Total ram usage:        1 bytes
 13653 ;; Hardware stack levels used:    1
 13654 ;; Hardware stack levels required when called:    6
 13655 ;; This function calls:
 13656 ;;		_DelayOffPointSelect
 13657 ;; This function is called by:
 13658 ;;		_DelayOff_Initialization
 13659 ;; This function uses a non-reentrant model
 13660 ;;
 13661                           
 13662                           
 13663                           ;psect for function _DlyOff_Initialization
 13664  10D4                     _DlyOff_Initialization:	
 13665                           
 13666                           ;incstack = 0
 13667                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13668                           ;DlyOff_Initialization@sw stored from wreg
 13669  10D4  0020               	movlb	0	; select bank0
 13670  10D5  00A2               	movwf	DlyOff_Initialization@sw
 13671                           
 13672                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 13673  10D6  0822               	movf	DlyOff_Initialization@sw,w
 13674  10D7  3192  227C         	fcall	_DelayOffPointSelect
 13675                           
 13676                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 13677  10D9  0878               	movf	_DelayOff,w
 13678  10DA  0086               	movwf	6
 13679  10DB  3001               	movlw	1	; select bank2/3
 13680  10DC  0087               	movwf	7
 13681  10DD  1401               	bsf	1,0
 13682  10DE  0008               	return
 13683  10DF                     __end_of_DlyOff_Initialization:	
 13684                           
 13685                           	psect	text88
 13686  127C                     __ptext88:	
 13687 ;; *************** function _DelayOffPointSelect *****************
 13688 ;; Defined at:
 13689 ;;		line 7 in file "../src/DelayOff_B1.c"
 13690 ;; Parameters:    Size  Location     Type
 13691 ;;  sw              1    wreg     unsigned char 
 13692 ;; Auto vars:     Size  Location     Type
 13693 ;;  sw              1    1[BANK0 ] unsigned char 
 13694 ;; Return value:  Size  Location     Type
 13695 ;;		None               void
 13696 ;; Registers used:
 13697 ;;		wreg
 13698 ;; Tracked objects:
 13699 ;;		On entry : 0/0
 13700 ;;		On exit  : 0/0
 13701 ;;		Unchanged: 0/0
 13702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13706 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13707 ;;Total ram usage:        2 bytes
 13708 ;; Hardware stack levels used:    1
 13709 ;; Hardware stack levels required when called:    5
 13710 ;; This function calls:
 13711 ;;		Nothing
 13712 ;; This function is called by:
 13713 ;;		_DlyOff_Initialization
 13714 ;;		_DlyOff_Main
 13715 ;;		_setDelayOff_GO
 13716 ;; This function uses a non-reentrant model
 13717 ;;
 13718                           
 13719                           
 13720                           ;psect for function _DelayOffPointSelect
 13721  127C                     _DelayOffPointSelect:	
 13722                           
 13723                           ;incstack = 0
 13724                           ; Regs used in _DelayOffPointSelect: [wreg]
 13725                           ;DelayOffPointSelect@sw stored from wreg
 13726  127C  0020               	movlb	0	; select bank0
 13727  127D  00A1               	movwf	DelayOffPointSelect@sw
 13728                           
 13729                           ;DelayOff_B1.c: 9: if (sw == 1) {
 13730  127E  0821               	movf	DelayOffPointSelect@sw,w
 13731  127F  3A01               	xorlw	1
 13732  1280  1D03               	skipz
 13733  1281  2A87               	goto	l5333
 13734                           
 13735                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 13736  1282  3058               	movlw	_DlySw1& (0+255)
 13737  1283  00A0               	movwf	??_DelayOffPointSelect
 13738  1284  0820               	movf	??_DelayOffPointSelect,w
 13739  1285  00F8               	movwf	_DelayOff
 13740                           
 13741                           ;DelayOff_B1.c: 11: }
 13742  1286  0008               	return
 13743  1287                     l5333:	
 13744                           
 13745                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 13746  1287  0821               	movf	DelayOffPointSelect@sw,w
 13747  1288  3A02               	xorlw	2
 13748  1289  1D03               	skipz
 13749  128A  0008               	return
 13750                           
 13751                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 13752  128B  305D               	movlw	_DlySw2& (0+255)
 13753  128C  00A0               	movwf	??_DelayOffPointSelect
 13754  128D  0820               	movf	??_DelayOffPointSelect,w
 13755  128E  00F8               	movwf	_DelayOff
 13756  128F  0008               	return
 13757  1290                     __end_of_DelayOffPointSelect:	
 13758                           
 13759                           	psect	text89
 13760  12B8                     __ptext89:	
 13761 ;; *************** function _CC2500_PowerOnInitial *****************
 13762 ;; Defined at:
 13763 ;;		line 115 in file "../src/CC2500_B1.c"
 13764 ;; Parameters:    Size  Location     Type
 13765 ;;		None
 13766 ;; Auto vars:     Size  Location     Type
 13767 ;;		None
 13768 ;; Return value:  Size  Location     Type
 13769 ;;		None               void
 13770 ;; Registers used:
 13771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13772 ;; Tracked objects:
 13773 ;;		On entry : 0/0
 13774 ;;		On exit  : 0/0
 13775 ;;		Unchanged: 0/0
 13776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;Total ram usage:        0 bytes
 13782 ;; Hardware stack levels used:    1
 13783 ;; Hardware stack levels required when called:    8
 13784 ;; This function calls:
 13785 ;;		_CC2500_ClearRXFIFO
 13786 ;;		_CC2500_ClearTXFIFO
 13787 ;;		_CC2500_FrequencyCabr
 13788 ;;		_CC2500_InitPATable
 13789 ;;		_CC2500_InitSetREG
 13790 ;;		_CC2500_PowerRST
 13791 ;;		_CC2500_SIDLEMode
 13792 ;; This function is called by:
 13793 ;;		_main
 13794 ;; This function uses a non-reentrant model
 13795 ;;
 13796                           
 13797                           
 13798                           ;psect for function _CC2500_PowerOnInitial
 13799  12B8                     _CC2500_PowerOnInitial:	
 13800                           
 13801                           ;CC2500_B1.c: 116: CC2500_PowerRST();
 13802                           
 13803                           ;incstack = 0
 13804                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13805  12B8  3196  26EF  3192   	fcall	_CC2500_PowerRST
 13806                           
 13807                           ;CC2500_B1.c: 117: CC2500_InitSetREG();
 13808  12BB  3195  251B  3192   	fcall	_CC2500_InitSetREG
 13809                           
 13810                           ;CC2500_B1.c: 118: CC2500_InitPATable();
 13811  12BE  3193  23C6  3192   	fcall	_CC2500_InitPATable
 13812                           
 13813                           ;CC2500_B1.c: 119: CC2500_ClearTXFIFO();
 13814  12C1  319F  27F8  3192   	fcall	_CC2500_ClearTXFIFO
 13815                           
 13816                           ;CC2500_B1.c: 120: CC2500_ClearRXFIFO();
 13817  12C4  319F  27F4  3192   	fcall	_CC2500_ClearRXFIFO
 13818                           
 13819                           ;CC2500_B1.c: 121: CC2500_FrequencyCabr();
 13820  12C7  3190  20EA  3192   	fcall	_CC2500_FrequencyCabr
 13821                           
 13822                           ;CC2500_B1.c: 122: CC2500_SIDLEMode();
 13823  12CA  319F  27FC         	fcall	_CC2500_SIDLEMode
 13824  12CC  0008               	return
 13825  12CD                     __end_of_CC2500_PowerOnInitial:	
 13826                           
 13827                           	psect	text90
 13828  1FFC                     __ptext90:	
 13829 ;; *************** function _CC2500_SIDLEMode *****************
 13830 ;; Defined at:
 13831 ;;		line 205 in file "../src/CC2500_B1.c"
 13832 ;; Parameters:    Size  Location     Type
 13833 ;;		None
 13834 ;; Auto vars:     Size  Location     Type
 13835 ;;		None
 13836 ;; Return value:  Size  Location     Type
 13837 ;;		None               void
 13838 ;; Registers used:
 13839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13840 ;; Tracked objects:
 13841 ;;		On entry : 0/0
 13842 ;;		On exit  : 0/0
 13843 ;;		Unchanged: 0/0
 13844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;Total ram usage:        0 bytes
 13850 ;; Hardware stack levels used:    1
 13851 ;; Hardware stack levels required when called:    7
 13852 ;; This function calls:
 13853 ;;		_CC2500_WriteCommand
 13854 ;; This function is called by:
 13855 ;;		_CC2500_PowerOnInitial
 13856 ;; This function uses a non-reentrant model
 13857 ;;
 13858                           
 13859                           
 13860                           ;psect for function _CC2500_SIDLEMode
 13861  1FFC                     _CC2500_SIDLEMode:	
 13862                           
 13863                           ;CC2500_B1.c: 206: CC2500_WriteCommand(0x36);
 13864                           
 13865                           ;incstack = 0
 13866                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13867  1FFC  3036               	movlw	54
 13868  1FFD  3193  233F         	fcall	_CC2500_WriteCommand
 13869  1FFF  0008               	return
 13870  2000                     __end_of_CC2500_SIDLEMode:	
 13871                           
 13872                           	psect	text91
 13873  16EF                     __ptext91:	
 13874 ;; *************** function _CC2500_PowerRST *****************
 13875 ;; Defined at:
 13876 ;;		line 128 in file "../src/CC2500_B1.c"
 13877 ;; Parameters:    Size  Location     Type
 13878 ;;		None
 13879 ;; Auto vars:     Size  Location     Type
 13880 ;;		None
 13881 ;; Return value:  Size  Location     Type
 13882 ;;		None               void
 13883 ;; Registers used:
 13884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13885 ;; Tracked objects:
 13886 ;;		On entry : 0/0
 13887 ;;		On exit  : 0/0
 13888 ;;		Unchanged: 0/0
 13889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13893 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13894 ;;Total ram usage:        1 bytes
 13895 ;; Hardware stack levels used:    1
 13896 ;; Hardware stack levels required when called:    6
 13897 ;; This function calls:
 13898 ;;		_CC2500_WriteByte
 13899 ;;		_DelayTime_1us
 13900 ;;		_Timeout_Counter
 13901 ;;		_set_TimeoutCleared
 13902 ;; This function is called by:
 13903 ;;		_CC2500_PowerOnInitial
 13904 ;; This function uses a non-reentrant model
 13905 ;;
 13906                           
 13907                           
 13908                           ;psect for function _CC2500_PowerRST
 13909  16EF                     _CC2500_PowerRST:	
 13910                           
 13911                           ;CC2500_B1.c: 129: RC1 = 0;
 13912                           
 13913                           ;incstack = 0
 13914                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13915  16EF  0020               	movlb	0	; select bank0
 13916  16F0  108E               	bcf	14,1	;volatile
 13917                           
 13918                           ;CC2500_B1.c: 130: RC0 = 0;
 13919  16F1  100E               	bcf	14,0	;volatile
 13920                           
 13921                           ;CC2500_B1.c: 131: RC4 = 1;
 13922  16F2  160E               	bsf	14,4	;volatile
 13923                           
 13924                           ;CC2500_B1.c: 132: DelayTime_1us(10);
 13925  16F3  300A               	movlw	10
 13926  16F4  00A0               	movwf	DelayTime_1us@count
 13927  16F5  3000               	movlw	0
 13928  16F6  00A1               	movwf	DelayTime_1us@count+1
 13929  16F7  3194  24CE  3196   	fcall	_DelayTime_1us
 13930                           
 13931                           ;CC2500_B1.c: 133: RC4 = 0;
 13932  16FA  0020               	movlb	0	; select bank0
 13933  16FB  120E               	bcf	14,4	;volatile
 13934                           
 13935                           ;CC2500_B1.c: 134: DelayTime_1us(10);
 13936  16FC  300A               	movlw	10
 13937  16FD  00A0               	movwf	DelayTime_1us@count
 13938  16FE  3000               	movlw	0
 13939  16FF  00A1               	movwf	DelayTime_1us@count+1
 13940  1700  3194  24CE  3196   	fcall	_DelayTime_1us
 13941                           
 13942                           ;CC2500_B1.c: 135: RC4 = 1;
 13943  1703  0020               	movlb	0	; select bank0
 13944  1704  160E               	bsf	14,4	;volatile
 13945                           
 13946                           ;CC2500_B1.c: 136: DelayTime_1us(40);
 13947  1705  3028               	movlw	40
 13948  1706  00A0               	movwf	DelayTime_1us@count
 13949  1707  3000               	movlw	0
 13950  1708  00A1               	movwf	DelayTime_1us@count+1
 13951  1709  3194  24CE  3196   	fcall	_DelayTime_1us
 13952                           
 13953                           ;CC2500_B1.c: 137: RC4 = 0;
 13954  170C  0020               	movlb	0	; select bank0
 13955  170D  120E               	bcf	14,4	;volatile
 13956                           
 13957                           ;CC2500_B1.c: 138: SPI0Buffer = 0x30;
 13958  170E  3030               	movlw	48
 13959  170F  00A6               	movwf	??_CC2500_PowerRST
 13960  1710  0826               	movf	??_CC2500_PowerRST,w
 13961  1711  00FB               	movwf	_SPI0Buffer
 13962                           
 13963                           ;CC2500_B1.c: 139: while (RC2 == 1 && myMain.Timeout == 0) {
 13964  1712  2F16               	goto	l6261
 13965  1713                     l6259:	
 13966                           
 13967                           ;CC2500_B1.c: 140: Timeout_Counter();
 13968  1713  3193  2327  3196   	fcall	_Timeout_Counter
 13969  1716                     l6261:	
 13970  1716  0020               	movlb	0	; select bank0
 13971  1717  1D0E               	btfss	14,2	;volatile
 13972  1718  2F1C               	goto	l6265
 13973  1719  0021               	movlb	1	; select bank1
 13974  171A  1D44               	btfss	(_myMain^(0+128)+15),2
 13975  171B  2F13               	goto	l6259
 13976  171C                     l6265:	
 13977                           
 13978                           ;CC2500_B1.c: 141: };
 13979                           ;CC2500_B1.c: 142: set_TimeoutCleared();
 13980  171C  3190  206D  3196   	fcall	_set_TimeoutCleared
 13981                           
 13982                           ;CC2500_B1.c: 143: CC2500_WriteByte();
 13983  171F  3192  2268  3196   	fcall	_CC2500_WriteByte
 13984                           
 13985                           ;CC2500_B1.c: 144: while (RC2 == 1 && myMain.Timeout == 0) {
 13986  1722  2F26               	goto	l6271
 13987  1723                     l6269:	
 13988                           
 13989                           ;CC2500_B1.c: 145: Timeout_Counter();
 13990  1723  3193  2327  3196   	fcall	_Timeout_Counter
 13991  1726                     l6271:	
 13992  1726  0020               	movlb	0	; select bank0
 13993  1727  1D0E               	btfss	14,2	;volatile
 13994  1728  2F2C               	goto	l6275
 13995  1729  0021               	movlb	1	; select bank1
 13996  172A  1D44               	btfss	(_myMain^(0+128)+15),2
 13997  172B  2F23               	goto	l6269
 13998  172C                     l6275:	
 13999                           
 14000                           ;CC2500_B1.c: 146: };
 14001                           ;CC2500_B1.c: 147: set_TimeoutCleared();
 14002  172C  3190  206D         	fcall	_set_TimeoutCleared
 14003                           
 14004                           ;CC2500_B1.c: 148: RC0 = 0;
 14005  172E  0020               	movlb	0	; select bank0
 14006  172F  100E               	bcf	14,0	;volatile
 14007                           
 14008                           ;CC2500_B1.c: 149: RC4 = 1;
 14009  1730  160E               	bsf	14,4	;volatile
 14010  1731  0008               	return
 14011  1732                     __end_of_CC2500_PowerRST:	
 14012                           
 14013                           	psect	text92
 14014  151B                     __ptext92:	
 14015 ;; *************** function _CC2500_InitSetREG *****************
 14016 ;; Defined at:
 14017 ;;		line 155 in file "../src/CC2500_B1.c"
 14018 ;; Parameters:    Size  Location     Type
 14019 ;;		None
 14020 ;; Auto vars:     Size  Location     Type
 14021 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14022 ;;  temp2           1    7[BANK0 ] unsigned char 
 14023 ;;  temp1           1    6[BANK0 ] unsigned char 
 14024 ;; Return value:  Size  Location     Type
 14025 ;;		None               void
 14026 ;; Registers used:
 14027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14028 ;; Tracked objects:
 14029 ;;		On entry : 0/0
 14030 ;;		On exit  : 0/0
 14031 ;;		Unchanged: 0/0
 14032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14034 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14036 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14037 ;;Total ram usage:        4 bytes
 14038 ;; Hardware stack levels used:    1
 14039 ;; Hardware stack levels required when called:    7
 14040 ;; This function calls:
 14041 ;;		_CC2500_WriteREG
 14042 ;; This function is called by:
 14043 ;;		_CC2500_PowerOnInitial
 14044 ;; This function uses a non-reentrant model
 14045 ;;
 14046                           
 14047                           
 14048                           ;psect for function _CC2500_InitSetREG
 14049  151B                     _CC2500_InitSetREG:	
 14050                           
 14051                           ;CC2500_B1.c: 156: unsigned char loop_c;
 14052                           ;CC2500_B1.c: 157: unsigned char temp1, temp2;
 14053                           ;CC2500_B1.c: 159: for (loop_c = 0; loop_c < 47; loop_c++) {
 14054                           
 14055                           ;incstack = 0
 14056                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14057  151B  0020               	movlb	0	; select bank0
 14058  151C  01A8               	clrf	CC2500_InitSetREG@loop_c
 14059  151D                     L5:	
 14060  151D  302F               	movlw	47
 14061  151E  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14062  151F  1803               	btfsc	3,0
 14063  1520  0008               	return
 14064                           
 14065                           ;CC2500_B1.c: 160: temp1 = CC2500_registers_address[loop_c];
 14066  1521  0828               	movf	CC2500_InitSetREG@loop_c,w
 14067  1522  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14068  1523  0084               	movwf	4
 14069  1524  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14070  1525  1803               	skipnc
 14071  1526  3E01               	addlw	1
 14072  1527  0085               	movwf	5
 14073  1528  0800               	movf	0,w	;code access
 14074  1529  00A5               	movwf	??_CC2500_InitSetREG
 14075  152A  0825               	movf	??_CC2500_InitSetREG,w
 14076  152B  00A6               	movwf	CC2500_InitSetREG@temp1
 14077                           
 14078                           ;CC2500_B1.c: 161: temp2 = CC2500_rfSettings[loop_c];
 14079  152C  0828               	movf	CC2500_InitSetREG@loop_c,w
 14080  152D  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14081  152E  0084               	movwf	4
 14082  152F  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14083  1530  1803               	skipnc
 14084  1531  3E01               	addlw	1
 14085  1532  0085               	movwf	5
 14086  1533  0800               	movf	0,w	;code access
 14087  1534  00A5               	movwf	??_CC2500_InitSetREG
 14088  1535  0825               	movf	??_CC2500_InitSetREG,w
 14089  1536  00A7               	movwf	CC2500_InitSetREG@temp2
 14090                           
 14091                           ;CC2500_B1.c: 163: CC2500_WriteREG(temp1, temp2);
 14092  1537  0827               	movf	CC2500_InitSetREG@temp2,w
 14093  1538  00A5               	movwf	??_CC2500_InitSetREG
 14094  1539  0825               	movf	??_CC2500_InitSetREG,w
 14095  153A  00A2               	movwf	CC2500_WriteREG@value
 14096  153B  0826               	movf	CC2500_InitSetREG@temp1,w
 14097  153C  3194  2424  3195   	fcall	_CC2500_WriteREG
 14098  153F  3001               	movlw	1
 14099  1540  0020               	movlb	0	; select bank0
 14100  1541  00A5               	movwf	??_CC2500_InitSetREG
 14101  1542  0825               	movf	??_CC2500_InitSetREG,w
 14102  1543  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14103  1544  2D1D               	goto	L5
 14104  1545                     __end_of_CC2500_InitSetREG:	
 14105                           
 14106                           	psect	text93
 14107  13C6                     __ptext93:	
 14108 ;; *************** function _CC2500_InitPATable *****************
 14109 ;; Defined at:
 14110 ;;		line 170 in file "../src/CC2500_B1.c"
 14111 ;; Parameters:    Size  Location     Type
 14112 ;;		None
 14113 ;; Auto vars:     Size  Location     Type
 14114 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14115 ;;  temp            1    6[BANK0 ] unsigned char 
 14116 ;; Return value:  Size  Location     Type
 14117 ;;		None               void
 14118 ;; Registers used:
 14119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14120 ;; Tracked objects:
 14121 ;;		On entry : 0/0
 14122 ;;		On exit  : 0/0
 14123 ;;		Unchanged: 0/0
 14124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14126 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14128 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14129 ;;Total ram usage:        3 bytes
 14130 ;; Hardware stack levels used:    1
 14131 ;; Hardware stack levels required when called:    7
 14132 ;; This function calls:
 14133 ;;		_CC2500_WriteREG
 14134 ;; This function is called by:
 14135 ;;		_CC2500_PowerOnInitial
 14136 ;; This function uses a non-reentrant model
 14137 ;;
 14138                           
 14139                           
 14140                           ;psect for function _CC2500_InitPATable
 14141  13C6                     _CC2500_InitPATable:	
 14142                           
 14143                           ;CC2500_B1.c: 171: unsigned char loop_d;
 14144                           ;CC2500_B1.c: 172: unsigned char temp;
 14145                           ;CC2500_B1.c: 174: for (loop_d = 0; loop_d < 8; loop_d++) {
 14146                           
 14147                           ;incstack = 0
 14148                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14149  13C6  0020               	movlb	0	; select bank0
 14150  13C7  01A7               	clrf	CC2500_InitPATable@loop_d
 14151  13C8                     L6:	
 14152  13C8  3008               	movlw	8
 14153  13C9  0227               	subwf	CC2500_InitPATable@loop_d,w
 14154  13CA  1803               	btfsc	3,0
 14155  13CB  0008               	return
 14156                           
 14157                           ;CC2500_B1.c: 175: temp = CC2500_patable_vaule[loop_d];
 14158  13CC  0827               	movf	CC2500_InitPATable@loop_d,w
 14159  13CD  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14160  13CE  0084               	movwf	4
 14161  13CF  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14162  13D0  1803               	skipnc
 14163  13D1  3E01               	addlw	1
 14164  13D2  0085               	movwf	5
 14165  13D3  0800               	movf	0,w	;code access
 14166  13D4  00A5               	movwf	??_CC2500_InitPATable
 14167  13D5  0825               	movf	??_CC2500_InitPATable,w
 14168  13D6  00A6               	movwf	CC2500_InitPATable@temp
 14169                           
 14170                           ;CC2500_B1.c: 176: CC2500_WriteREG(0x3E, temp);
 14171  13D7  0826               	movf	CC2500_InitPATable@temp,w
 14172  13D8  00A5               	movwf	??_CC2500_InitPATable
 14173  13D9  0825               	movf	??_CC2500_InitPATable,w
 14174  13DA  00A2               	movwf	CC2500_WriteREG@value
 14175  13DB  303E               	movlw	62
 14176  13DC  3194  2424  3193   	fcall	_CC2500_WriteREG
 14177  13DF  3001               	movlw	1
 14178  13E0  0020               	movlb	0	; select bank0
 14179  13E1  00A5               	movwf	??_CC2500_InitPATable
 14180  13E2  0825               	movf	??_CC2500_InitPATable,w
 14181  13E3  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14182  13E4  2BC8               	goto	L6
 14183  13E5                     __end_of_CC2500_InitPATable:	
 14184                           
 14185                           	psect	text94
 14186  1424                     __ptext94:	
 14187 ;; *************** function _CC2500_WriteREG *****************
 14188 ;; Defined at:
 14189 ;;		line 247 in file "../src/CC2500_B1.c"
 14190 ;; Parameters:    Size  Location     Type
 14191 ;;  w_addr          1    wreg     unsigned char 
 14192 ;;  value           1    2[BANK0 ] unsigned char 
 14193 ;; Auto vars:     Size  Location     Type
 14194 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14195 ;; Return value:  Size  Location     Type
 14196 ;;		None               void
 14197 ;; Registers used:
 14198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14199 ;; Tracked objects:
 14200 ;;		On entry : 0/0
 14201 ;;		On exit  : 0/0
 14202 ;;		Unchanged: 0/0
 14203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14204 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;Total ram usage:        3 bytes
 14209 ;; Hardware stack levels used:    1
 14210 ;; Hardware stack levels required when called:    6
 14211 ;; This function calls:
 14212 ;;		_CC2500_WriteByte
 14213 ;;		_Timeout_Counter
 14214 ;;		_set_TimeoutCleared
 14215 ;; This function is called by:
 14216 ;;		_CC2500_InitSetREG
 14217 ;;		_CC2500_InitPATable
 14218 ;; This function uses a non-reentrant model
 14219 ;;
 14220                           
 14221                           
 14222                           ;psect for function _CC2500_WriteREG
 14223  1424                     _CC2500_WriteREG:	
 14224                           
 14225                           ;incstack = 0
 14226                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14227                           ;CC2500_WriteREG@w_addr stored from wreg
 14228  1424  0020               	movlb	0	; select bank0
 14229  1425  00A4               	movwf	CC2500_WriteREG@w_addr
 14230                           
 14231                           ;CC2500_B1.c: 248: RC4 = 0;
 14232  1426  120E               	bcf	14,4	;volatile
 14233                           
 14234                           ;CC2500_B1.c: 249: SPI0Buffer = w_addr;
 14235  1427  0824               	movf	CC2500_WriteREG@w_addr,w
 14236  1428  00A3               	movwf	??_CC2500_WriteREG
 14237  1429  0823               	movf	??_CC2500_WriteREG,w
 14238  142A  00FB               	movwf	_SPI0Buffer
 14239                           
 14240                           ;CC2500_B1.c: 250: while (RC2 == 1 && myMain.Timeout == 0) {
 14241  142B  2C2F               	goto	l6003
 14242  142C                     l6001:	
 14243                           
 14244                           ;CC2500_B1.c: 251: Timeout_Counter();
 14245  142C  3193  2327  3194   	fcall	_Timeout_Counter
 14246  142F                     l6003:	
 14247  142F  0020               	movlb	0	; select bank0
 14248  1430  1D0E               	btfss	14,2	;volatile
 14249  1431  2C35               	goto	l6007
 14250  1432  0021               	movlb	1	; select bank1
 14251  1433  1D44               	btfss	(_myMain^(0+128)+15),2
 14252  1434  2C2C               	goto	l6001
 14253  1435                     l6007:	
 14254                           
 14255                           ;CC2500_B1.c: 252: };
 14256                           ;CC2500_B1.c: 253: set_TimeoutCleared();
 14257  1435  3190  206D  3194   	fcall	_set_TimeoutCleared
 14258                           
 14259                           ;CC2500_B1.c: 254: CC2500_WriteByte();
 14260  1438  3192  2268  3194   	fcall	_CC2500_WriteByte
 14261                           
 14262                           ;CC2500_B1.c: 255: SPI0Buffer = value;
 14263  143B  0020               	movlb	0	; select bank0
 14264  143C  0822               	movf	CC2500_WriteREG@value,w
 14265  143D  00A3               	movwf	??_CC2500_WriteREG
 14266  143E  0823               	movf	??_CC2500_WriteREG,w
 14267  143F  00FB               	movwf	_SPI0Buffer
 14268                           
 14269                           ;CC2500_B1.c: 256: CC2500_WriteByte();
 14270  1440  3192  2268         	fcall	_CC2500_WriteByte
 14271                           
 14272                           ;CC2500_B1.c: 257: RC4 = 1;
 14273  1442  0020               	movlb	0	; select bank0
 14274  1443  160E               	bsf	14,4	;volatile
 14275  1444  0008               	return
 14276  1445                     __end_of_CC2500_WriteREG:	
 14277                           
 14278                           	psect	text95
 14279  10EA                     __ptext95:	
 14280 ;; *************** function _CC2500_FrequencyCabr *****************
 14281 ;; Defined at:
 14282 ;;		line 197 in file "../src/CC2500_B1.c"
 14283 ;; Parameters:    Size  Location     Type
 14284 ;;		None
 14285 ;; Auto vars:     Size  Location     Type
 14286 ;;		None
 14287 ;; Return value:  Size  Location     Type
 14288 ;;		None               void
 14289 ;; Registers used:
 14290 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14291 ;; Tracked objects:
 14292 ;;		On entry : 0/0
 14293 ;;		On exit  : 0/0
 14294 ;;		Unchanged: 0/0
 14295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14300 ;;Total ram usage:        0 bytes
 14301 ;; Hardware stack levels used:    1
 14302 ;; Hardware stack levels required when called:    7
 14303 ;; This function calls:
 14304 ;;		_CC2500_WriteCommand
 14305 ;;		_DelayTime_1us
 14306 ;; This function is called by:
 14307 ;;		_CC2500_PowerOnInitial
 14308 ;; This function uses a non-reentrant model
 14309 ;;
 14310                           
 14311                           
 14312                           ;psect for function _CC2500_FrequencyCabr
 14313  10EA                     _CC2500_FrequencyCabr:	
 14314                           
 14315                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x33);
 14316                           
 14317                           ;incstack = 0
 14318                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14319  10EA  3033               	movlw	51
 14320  10EB  3193  233F  3190   	fcall	_CC2500_WriteCommand
 14321                           
 14322                           ;CC2500_B1.c: 199: DelayTime_1us(1000);
 14323  10EE  30E8               	movlw	232
 14324  10EF  0020               	movlb	0	; select bank0
 14325  10F0  00A0               	movwf	DelayTime_1us@count
 14326  10F1  3003               	movlw	3
 14327  10F2  00A1               	movwf	DelayTime_1us@count+1
 14328  10F3  3194  24CE         	fcall	_DelayTime_1us
 14329  10F5  0008               	return
 14330  10F6                     __end_of_CC2500_FrequencyCabr:	
 14331                           
 14332                           	psect	text96
 14333  14CE                     __ptext96:	
 14334 ;; *************** function _DelayTime_1us *****************
 14335 ;; Defined at:
 14336 ;;		line 312 in file "../src/CC2500_B1.c"
 14337 ;; Parameters:    Size  Location     Type
 14338 ;;  count           2    0[BANK0 ] int 
 14339 ;; Auto vars:     Size  Location     Type
 14340 ;;  j               2    4[BANK0 ] unsigned int 
 14341 ;;  i               2    2[BANK0 ] unsigned int 
 14342 ;; Return value:  Size  Location     Type
 14343 ;;		None               void
 14344 ;; Registers used:
 14345 ;;		wreg, status,2
 14346 ;; Tracked objects:
 14347 ;;		On entry : 0/0
 14348 ;;		On exit  : 0/0
 14349 ;;		Unchanged: 0/0
 14350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14351 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14354 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;Total ram usage:        6 bytes
 14356 ;; Hardware stack levels used:    1
 14357 ;; Hardware stack levels required when called:    5
 14358 ;; This function calls:
 14359 ;;		Nothing
 14360 ;; This function is called by:
 14361 ;;		_CC2500_PowerRST
 14362 ;;		_CC2500_FrequencyCabr
 14363 ;; This function uses a non-reentrant model
 14364 ;;
 14365                           
 14366                           
 14367                           ;psect for function _DelayTime_1us
 14368  14CE                     _DelayTime_1us:	
 14369                           
 14370                           ;CC2500_B1.c: 313: unsigned int i, j;
 14371                           ;CC2500_B1.c: 314: for (i = 1; i < count; i++)
 14372                           
 14373                           ;incstack = 0
 14374                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 14375  14CE  3001               	movlw	1
 14376  14CF  0020               	movlb	0	; select bank0
 14377  14D0  00A2               	movwf	DelayTime_1us@i
 14378  14D1  3000               	movlw	0
 14379  14D2  00A3               	movwf	DelayTime_1us@i+1
 14380  14D3                     l372:	
 14381  14D3  0821               	movf	DelayTime_1us@count+1,w
 14382  14D4  0223               	subwf	DelayTime_1us@i+1,w
 14383  14D5  1D03               	skipz
 14384  14D6  2CD9               	goto	u4965
 14385  14D7  0820               	movf	DelayTime_1us@count,w
 14386  14D8  0222               	subwf	DelayTime_1us@i,w
 14387  14D9                     u4965:	
 14388  14D9  1803               	btfsc	3,0
 14389  14DA  0008               	return
 14390                           
 14391                           ;CC2500_B1.c: 315: for (j = 0; j <= 1; j++);
 14392  14DB  01A4               	clrf	DelayTime_1us@j
 14393  14DC  01A5               	clrf	DelayTime_1us@j+1
 14394  14DD  3000               	movlw	0
 14395  14DE  0225               	subwf	DelayTime_1us@j+1,w
 14396  14DF  3002               	movlw	2
 14397  14E0  1903               	skipnz
 14398  14E1  0224               	subwf	DelayTime_1us@j,w
 14399  14E2  1803               	btfsc	3,0
 14400  14E3  2CEF               	goto	l5995
 14401  14E4                     l5993:	
 14402  14E4  3001               	movlw	1
 14403  14E5  07A4               	addwf	DelayTime_1us@j,f
 14404  14E6  3000               	movlw	0
 14405  14E7  3DA5               	addwfc	DelayTime_1us@j+1,f
 14406  14E8  3000               	movlw	0
 14407  14E9  0225               	subwf	DelayTime_1us@j+1,w
 14408  14EA  3002               	movlw	2
 14409  14EB  1903               	skipnz
 14410  14EC  0224               	subwf	DelayTime_1us@j,w
 14411  14ED  1C03               	skipc
 14412  14EE  2CE4               	goto	l5993
 14413  14EF                     l5995:	
 14414  14EF  3001               	movlw	1
 14415  14F0  07A2               	addwf	DelayTime_1us@i,f
 14416  14F1  3000               	movlw	0
 14417  14F2  3DA3               	addwfc	DelayTime_1us@i+1,f
 14418  14F3  2CD3               	goto	l372
 14419  14F4                     __end_of_DelayTime_1us:	
 14420                           
 14421                           	psect	text97
 14422  1FF8                     __ptext97:	
 14423 ;; *************** function _CC2500_ClearTXFIFO *****************
 14424 ;; Defined at:
 14425 ;;		line 183 in file "../src/CC2500_B1.c"
 14426 ;; Parameters:    Size  Location     Type
 14427 ;;		None
 14428 ;; Auto vars:     Size  Location     Type
 14429 ;;		None
 14430 ;; Return value:  Size  Location     Type
 14431 ;;		None               void
 14432 ;; Registers used:
 14433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14434 ;; Tracked objects:
 14435 ;;		On entry : 0/0
 14436 ;;		On exit  : 0/0
 14437 ;;		Unchanged: 0/0
 14438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14443 ;;Total ram usage:        0 bytes
 14444 ;; Hardware stack levels used:    1
 14445 ;; Hardware stack levels required when called:    7
 14446 ;; This function calls:
 14447 ;;		_CC2500_WriteCommand
 14448 ;; This function is called by:
 14449 ;;		_CC2500_PowerOnInitial
 14450 ;; This function uses a non-reentrant model
 14451 ;;
 14452                           
 14453                           
 14454                           ;psect for function _CC2500_ClearTXFIFO
 14455  1FF8                     _CC2500_ClearTXFIFO:	
 14456                           
 14457                           ;CC2500_B1.c: 184: CC2500_WriteCommand(0x3B);
 14458                           
 14459                           ;incstack = 0
 14460                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14461  1FF8  303B               	movlw	59
 14462  1FF9  3193  233F         	fcall	_CC2500_WriteCommand
 14463  1FFB  0008               	return
 14464  1FFC                     __end_of_CC2500_ClearTXFIFO:	
 14465                           
 14466                           	psect	text98
 14467  1FF4                     __ptext98:	
 14468 ;; *************** function _CC2500_ClearRXFIFO *****************
 14469 ;; Defined at:
 14470 ;;		line 190 in file "../src/CC2500_B1.c"
 14471 ;; Parameters:    Size  Location     Type
 14472 ;;		None
 14473 ;; Auto vars:     Size  Location     Type
 14474 ;;		None
 14475 ;; Return value:  Size  Location     Type
 14476 ;;		None               void
 14477 ;; Registers used:
 14478 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14479 ;; Tracked objects:
 14480 ;;		On entry : 0/0
 14481 ;;		On exit  : 0/0
 14482 ;;		Unchanged: 0/0
 14483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14488 ;;Total ram usage:        0 bytes
 14489 ;; Hardware stack levels used:    1
 14490 ;; Hardware stack levels required when called:    7
 14491 ;; This function calls:
 14492 ;;		_CC2500_WriteCommand
 14493 ;; This function is called by:
 14494 ;;		_CC2500_PowerOnInitial
 14495 ;; This function uses a non-reentrant model
 14496 ;;
 14497                           
 14498                           
 14499                           ;psect for function _CC2500_ClearRXFIFO
 14500  1FF4                     _CC2500_ClearRXFIFO:	
 14501                           
 14502                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3A);
 14503                           
 14504                           ;incstack = 0
 14505                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14506  1FF4  303A               	movlw	58
 14507  1FF5  3193  233F         	fcall	_CC2500_WriteCommand
 14508  1FF7  0008               	return
 14509  1FF8                     __end_of_CC2500_ClearRXFIFO:	
 14510                           
 14511                           	psect	text99
 14512  133F                     __ptext99:	
 14513 ;; *************** function _CC2500_WriteCommand *****************
 14514 ;; Defined at:
 14515 ;;		line 279 in file "../src/CC2500_B1.c"
 14516 ;; Parameters:    Size  Location     Type
 14517 ;;  command         1    wreg     unsigned char 
 14518 ;; Auto vars:     Size  Location     Type
 14519 ;;  command         1    3[BANK0 ] unsigned char 
 14520 ;; Return value:  Size  Location     Type
 14521 ;;		None               void
 14522 ;; Registers used:
 14523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14524 ;; Tracked objects:
 14525 ;;		On entry : 0/0
 14526 ;;		On exit  : 0/0
 14527 ;;		Unchanged: 0/0
 14528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14531 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14532 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14533 ;;Total ram usage:        2 bytes
 14534 ;; Hardware stack levels used:    1
 14535 ;; Hardware stack levels required when called:    6
 14536 ;; This function calls:
 14537 ;;		_CC2500_WriteByte
 14538 ;;		_Timeout_Counter
 14539 ;;		_set_TimeoutCleared
 14540 ;; This function is called by:
 14541 ;;		_CC2500_TxData
 14542 ;;		_CC2500_RxData
 14543 ;;		_CC2500_ClearTXFIFO
 14544 ;;		_CC2500_ClearRXFIFO
 14545 ;;		_CC2500_FrequencyCabr
 14546 ;;		_CC2500_SIDLEMode
 14547 ;;		_setRF_Main
 14548 ;;		_RF_RxDisable
 14549 ;; This function uses a non-reentrant model
 14550 ;;
 14551                           
 14552                           
 14553                           ;psect for function _CC2500_WriteCommand
 14554  133F                     _CC2500_WriteCommand:	
 14555                           
 14556                           ;incstack = 0
 14557                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14558                           ;CC2500_WriteCommand@command stored from wreg
 14559  133F  0020               	movlb	0	; select bank0
 14560  1340  00A3               	movwf	CC2500_WriteCommand@command
 14561                           
 14562                           ;CC2500_B1.c: 280: RC4 = 0;
 14563  1341  120E               	bcf	14,4	;volatile
 14564                           
 14565                           ;CC2500_B1.c: 281: SPI0Buffer = command;
 14566  1342  0823               	movf	CC2500_WriteCommand@command,w
 14567  1343  00A2               	movwf	??_CC2500_WriteCommand
 14568  1344  0822               	movf	??_CC2500_WriteCommand,w
 14569  1345  00FB               	movwf	_SPI0Buffer
 14570                           
 14571                           ;CC2500_B1.c: 283: while (RC2 == 1 && myMain.Timeout == 0) {
 14572  1346  2B4A               	goto	l5769
 14573  1347                     l5767:	
 14574                           
 14575                           ;CC2500_B1.c: 284: Timeout_Counter();
 14576  1347  3193  2327  3193   	fcall	_Timeout_Counter
 14577  134A                     l5769:	
 14578  134A  0020               	movlb	0	; select bank0
 14579  134B  1D0E               	btfss	14,2	;volatile
 14580  134C  2B50               	goto	l5773
 14581  134D  0021               	movlb	1	; select bank1
 14582  134E  1D44               	btfss	(_myMain^(0+128)+15),2
 14583  134F  2B47               	goto	l5767
 14584  1350                     l5773:	
 14585                           
 14586                           ;CC2500_B1.c: 285: };
 14587                           ;CC2500_B1.c: 286: set_TimeoutCleared();
 14588  1350  3190  206D  3193   	fcall	_set_TimeoutCleared
 14589                           
 14590                           ;CC2500_B1.c: 287: CC2500_WriteByte();
 14591  1353  3192  2268         	fcall	_CC2500_WriteByte
 14592                           
 14593                           ;CC2500_B1.c: 288: RC4 = 1;
 14594  1355  0020               	movlb	0	; select bank0
 14595  1356  160E               	bsf	14,4	;volatile
 14596  1357  0008               	return
 14597  1358                     __end_of_CC2500_WriteCommand:	
 14598                           
 14599                           	psect	text100
 14600  106D                     __ptext100:	
 14601 ;; *************** function _set_TimeoutCleared *****************
 14602 ;; Defined at:
 14603 ;;		line 218 in file "../src/Main_B1.c"
 14604 ;; Parameters:    Size  Location     Type
 14605 ;;		None
 14606 ;; Auto vars:     Size  Location     Type
 14607 ;;		None
 14608 ;; Return value:  Size  Location     Type
 14609 ;;		None               void
 14610 ;; Registers used:
 14611 ;;		status,2
 14612 ;; Tracked objects:
 14613 ;;		On entry : 0/0
 14614 ;;		On exit  : 0/0
 14615 ;;		Unchanged: 0/0
 14616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14621 ;;Total ram usage:        0 bytes
 14622 ;; Hardware stack levels used:    1
 14623 ;; Hardware stack levels required when called:    5
 14624 ;; This function calls:
 14625 ;;		Nothing
 14626 ;; This function is called by:
 14627 ;;		_CC2500_TxData
 14628 ;;		_CC2500_RxData
 14629 ;;		_CC2500_PowerRST
 14630 ;;		_CC2500_WriteREG
 14631 ;;		_CC2500_WriteCommand
 14632 ;;		_CC2500_ReadStatus
 14633 ;;		_TouchPower
 14634 ;;		_CC2500_ReadREG
 14635 ;;		_getAD
 14636 ;; This function uses a non-reentrant model
 14637 ;;
 14638                           
 14639                           
 14640                           ;psect for function _set_TimeoutCleared
 14641  106D                     _set_TimeoutCleared:	
 14642                           
 14643                           ;Main_B1.c: 219: myMain.Timeout = 0;
 14644                           
 14645                           ;incstack = 0
 14646                           ; Regs used in _set_TimeoutCleared: [status,2]
 14647  106D  0021               	movlb	1	; select bank1
 14648  106E  1144               	bcf	(_myMain^(0+128)+15),2
 14649                           
 14650                           ;Main_B1.c: 220: myMain.Timeout_Counter = 0;
 14651  106F  01C5               	clrf	(_myMain^(0+128)+16)
 14652  1070  01C6               	clrf	((_myMain+1)^(0+128)+16)
 14653  1071  0008               	return
 14654  1072                     __end_of_set_TimeoutCleared:	
 14655                           
 14656                           	psect	text101
 14657  1327                     __ptext101:	
 14658 ;; *************** function _Timeout_Counter *****************
 14659 ;; Defined at:
 14660 ;;		line 209 in file "../src/Main_B1.c"
 14661 ;; Parameters:    Size  Location     Type
 14662 ;;		None
 14663 ;; Auto vars:     Size  Location     Type
 14664 ;;		None
 14665 ;; Return value:  Size  Location     Type
 14666 ;;		None               void
 14667 ;; Registers used:
 14668 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14669 ;; Tracked objects:
 14670 ;;		On entry : 0/0
 14671 ;;		On exit  : 0/0
 14672 ;;		Unchanged: 0/0
 14673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;Total ram usage:        0 bytes
 14679 ;; Hardware stack levels used:    1
 14680 ;; Hardware stack levels required when called:    5
 14681 ;; This function calls:
 14682 ;;		Nothing
 14683 ;; This function is called by:
 14684 ;;		_CC2500_TxData
 14685 ;;		_CC2500_RxData
 14686 ;;		_CC2500_PowerRST
 14687 ;;		_CC2500_WriteREG
 14688 ;;		_CC2500_WriteCommand
 14689 ;;		_CC2500_ReadStatus
 14690 ;;		_TouchPower
 14691 ;;		_CC2500_ReadREG
 14692 ;;		_getAD
 14693 ;; This function uses a non-reentrant model
 14694 ;;
 14695                           
 14696                           
 14697                           ;psect for function _Timeout_Counter
 14698  1327                     _Timeout_Counter:	
 14699                           
 14700                           ;Main_B1.c: 210: myMain.Timeout_Counter++;
 14701                           
 14702                           ;incstack = 0
 14703                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 14704  1327  3001               	movlw	1
 14705  1328  0021               	movlb	1	; select bank1
 14706  1329  07C5               	addwf	(_myMain^(0+128)+16),f
 14707  132A  3000               	movlw	0
 14708  132B  3DC6               	addwfc	((_myMain+1)^(0+128)+16),f
 14709                           
 14710                           ;Main_B1.c: 211: if (myMain.Timeout_Counter == 10000) {
 14711  132C  3010               	movlw	16
 14712  132D  3EB5               	addlw	_myMain& (0+255)
 14713  132E  0086               	movwf	6
 14714  132F  0187               	clrf	7
 14715  1330  3F40               	moviw [0]fsr1
 14716  1331  3A10               	xorlw	16
 14717  1332  1D03               	skipz
 14718  1333  2B36               	goto	u4535
 14719  1334  3F41               	moviw [1]fsr1
 14720  1335  3A27               	xorlw	39
 14721  1336                     u4535:	
 14722  1336  1D03               	skipz
 14723  1337  0008               	return
 14724                           
 14725                           ;Main_B1.c: 212: myMain.Timeout_Counter = 0;
 14726  1338  01C5               	clrf	(_myMain^(0+128)+16)
 14727  1339  01C6               	clrf	((_myMain+1)^(0+128)+16)
 14728                           
 14729                           ;Main_B1.c: 213: myMain.Timeout = 1;
 14730  133A  1544               	bsf	(_myMain^(0+128)+15),2
 14731                           
 14732                           ;Main_B1.c: 214: RB5 = RB5 == 1 ? 0 : 1;
 14733  133B  3020               	movlw	32
 14734  133C  0020               	movlb	0	; select bank0
 14735  133D  068D               	xorwf	13,f
 14736  133E  0008               	return
 14737  133F                     __end_of_Timeout_Counter:	
 14738                           
 14739                           	psect	text102
 14740  1268                     __ptext102:	
 14741 ;; *************** function _CC2500_WriteByte *****************
 14742 ;; Defined at:
 14743 ;;		line 215 in file "../src/CC2500_B1.c"
 14744 ;; Parameters:    Size  Location     Type
 14745 ;;		None
 14746 ;; Auto vars:     Size  Location     Type
 14747 ;;  loop_a          1    1[BANK0 ] unsigned char 
 14748 ;; Return value:  Size  Location     Type
 14749 ;;		None               void
 14750 ;; Registers used:
 14751 ;;		wreg, status,2, status,0
 14752 ;; Tracked objects:
 14753 ;;		On entry : 0/0
 14754 ;;		On exit  : 0/0
 14755 ;;		Unchanged: 0/0
 14756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14760 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14761 ;;Total ram usage:        2 bytes
 14762 ;; Hardware stack levels used:    1
 14763 ;; Hardware stack levels required when called:    5
 14764 ;; This function calls:
 14765 ;;		Nothing
 14766 ;; This function is called by:
 14767 ;;		_CC2500_TxData
 14768 ;;		_CC2500_RxData
 14769 ;;		_CC2500_PowerRST
 14770 ;;		_CC2500_WriteREG
 14771 ;;		_CC2500_WriteCommand
 14772 ;;		_CC2500_ReadStatus
 14773 ;;		_CC2500_ReadREG
 14774 ;; This function uses a non-reentrant model
 14775 ;;
 14776                           
 14777                           
 14778                           ;psect for function _CC2500_WriteByte
 14779  1268                     _CC2500_WriteByte:	
 14780                           
 14781                           ;CC2500_B1.c: 216: unsigned char loop_a;
 14782                           ;CC2500_B1.c: 217: for (loop_a = 0; loop_a < 8; loop_a++) {
 14783                           
 14784                           ;incstack = 0
 14785                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 14786  1268  0020               	movlb	0	; select bank0
 14787  1269  01A1               	clrf	CC2500_WriteByte@loop_a
 14788  126A                     L7:	
 14789  126A  3008               	movlw	8
 14790  126B  0221               	subwf	CC2500_WriteByte@loop_a,w
 14791  126C  1803               	btfsc	3,0
 14792  126D  0008               	return
 14793                           
 14794                           ;CC2500_B1.c: 218: if (SPI0Buffer & 0x80)
 14795  126E  1FFB               	btfss	_SPI0Buffer,7
 14796  126F  2A72               	goto	l328
 14797                           
 14798                           ;CC2500_B1.c: 219: RC0 = 1;
 14799  1270  140E               	bsf	14,0	;volatile
 14800  1271  2A73               	goto	l329
 14801  1272                     l328:	
 14802                           
 14803                           ;CC2500_B1.c: 220: else
 14804                           ;CC2500_B1.c: 221: RC0 = 0;
 14805  1272  100E               	bcf	14,0	;volatile
 14806  1273                     l329:	
 14807                           
 14808                           ;CC2500_B1.c: 222: RC1 = 1;
 14809  1273  148E               	bsf	14,1	;volatile
 14810                           
 14811                           ;CC2500_B1.c: 223: SPI0Buffer <<= 1;
 14812  1274  1003               	clrc
 14813  1275  0DFB               	rlf	_SPI0Buffer,f
 14814                           
 14815                           ;CC2500_B1.c: 224: RC1 = 0;
 14816  1276  108E               	bcf	14,1	;volatile
 14817  1277  3001               	movlw	1
 14818  1278  00A0               	movwf	??_CC2500_WriteByte
 14819  1279  0820               	movf	??_CC2500_WriteByte,w
 14820  127A  07A1               	addwf	CC2500_WriteByte@loop_a,f
 14821  127B  2A6A               	goto	L7
 14822  127C                     __end_of_CC2500_WriteByte:	
 14823                           
 14824                           	psect	text103
 14825  07B5                     __ptext103:	
 14826 ;; *************** function _Buzzer_Main *****************
 14827 ;; Defined at:
 14828 ;;		line 46 in file "../src/Buzzer_B1.c"
 14829 ;; Parameters:    Size  Location     Type
 14830 ;;		None
 14831 ;; Auto vars:     Size  Location     Type
 14832 ;;		None
 14833 ;; Return value:  Size  Location     Type
 14834 ;;		None               void
 14835 ;; Registers used:
 14836 ;;		wreg, status,2, status,0
 14837 ;; Tracked objects:
 14838 ;;		On entry : 0/0
 14839 ;;		On exit  : 0/0
 14840 ;;		Unchanged: 0/0
 14841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14846 ;;Total ram usage:        1 bytes
 14847 ;; Hardware stack levels used:    1
 14848 ;; Hardware stack levels required when called:    5
 14849 ;; This function calls:
 14850 ;;		Nothing
 14851 ;; This function is called by:
 14852 ;;		_main
 14853 ;; This function uses a non-reentrant model
 14854 ;;
 14855                           
 14856                           
 14857                           ;psect for function _Buzzer_Main
 14858  07B5                     _Buzzer_Main:	
 14859                           
 14860                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 14861                           
 14862                           ;incstack = 0
 14863                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 14864  07B5  0021               	movlb	1	; select bank1
 14865  07B6  1CC7               	btfss	_Buz1^(0+128),1
 14866  07B7  0008               	return
 14867                           
 14868                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 14869  07B8  3001               	movlw	1
 14870  07B9  07C8               	addwf	(_Buz1^(0+128)+1),f
 14871  07BA  3000               	movlw	0
 14872  07BB  3DC9               	addwfc	((_Buz1+1)^(0+128)+1),f
 14873                           
 14874                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 14875  07BC  084E               	movf	((_Buz1+1)^(0+128)+6),w
 14876  07BD  0249               	subwf	((_Buz1+1)^(0+128)+1),w
 14877  07BE  1D03               	skipz
 14878  07BF  2FC2               	goto	u6285
 14879  07C0  084D               	movf	(_Buz1^(0+128)+6),w
 14880  07C1  0248               	subwf	(_Buz1^(0+128)+1),w
 14881  07C2                     u6285:	
 14882  07C2  1C03               	skipc
 14883  07C3  0008               	return
 14884                           
 14885                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 14886  07C4  01C8               	clrf	(_Buz1^(0+128)+1)
 14887  07C5  01C9               	clrf	((_Buz1+1)^(0+128)+1)
 14888                           
 14889                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 14890  07C6  12C7               	bcf	_Buz1^(0+128),5
 14891  07C7  0020               	movlb	0	; select bank0
 14892  07C8  1D8D               	btfss	13,3	;volatile
 14893  07C9  2FCC               	goto	l6827
 14894  07CA  0021               	movlb	1	; select bank1
 14895  07CB  16C7               	bsf	_Buz1^(0+128),5
 14896  07CC                     l6827:	
 14897                           
 14898                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 14899  07CC  0021               	movlb	1	; select bank1
 14900  07CD  1AC7               	btfsc	_Buz1^(0+128),5
 14901  07CE  2FF8               	goto	l106
 14902                           
 14903                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 14904  07CF  08CA               	movf	(_Buz1^(0+128)+3),f
 14905  07D0  1D03               	skipz
 14906  07D1  2FF4               	goto	l107
 14907                           
 14908                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 14909  07D2  1DC7               	btfss	_Buz1^(0+128),3
 14910  07D3  2FE2               	goto	l108
 14911                           
 14912                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 14913  07D4  11C7               	bcf	_Buz1^(0+128),3
 14914                           
 14915                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 14916  07D5  084B               	movf	(_Buz1^(0+128)+4),w
 14917  07D6  0020               	movlb	0	; select bank0
 14918  07D7  00A0               	movwf	??_Buzzer_Main
 14919  07D8  0820               	movf	??_Buzzer_Main,w
 14920  07D9  0021               	movlb	1	; select bank1
 14921  07DA  00CA               	movwf	(_Buz1^(0+128)+3)
 14922                           
 14923                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 14924  07DB  0850               	movf	((_Buz1+1)^(0+128)+8),w
 14925  07DC  01CE               	clrf	((_Buz1+1)^(0+128)+6)
 14926  07DD  07CE               	addwf	((_Buz1+1)^(0+128)+6),f
 14927  07DE  084F               	movf	(_Buz1^(0+128)+8),w
 14928  07DF  01CD               	clrf	(_Buz1^(0+128)+6)
 14929  07E0  07CD               	addwf	(_Buz1^(0+128)+6),f
 14930                           
 14931                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 14932  07E1  0008               	return
 14933  07E2                     l108:	
 14934  07E2  1E47               	btfss	_Buz1^(0+128),4
 14935  07E3  2FF2               	goto	l110
 14936                           
 14937                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 14938  07E4  1247               	bcf	_Buz1^(0+128),4
 14939                           
 14940                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 14941  07E5  084C               	movf	(_Buz1^(0+128)+5),w
 14942  07E6  0020               	movlb	0	; select bank0
 14943  07E7  00A0               	movwf	??_Buzzer_Main
 14944  07E8  0820               	movf	??_Buzzer_Main,w
 14945  07E9  0021               	movlb	1	; select bank1
 14946  07EA  00CA               	movwf	(_Buz1^(0+128)+3)
 14947                           
 14948                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 14949  07EB  0852               	movf	((_Buz1+1)^(0+128)+10),w
 14950  07EC  01CE               	clrf	((_Buz1+1)^(0+128)+6)
 14951  07ED  07CE               	addwf	((_Buz1+1)^(0+128)+6),f
 14952  07EE  0851               	movf	(_Buz1^(0+128)+10),w
 14953  07EF  01CD               	clrf	(_Buz1^(0+128)+6)
 14954  07F0  07CD               	addwf	(_Buz1^(0+128)+6),f
 14955                           
 14956                           ;Buzzer_B1.c: 62: } else {
 14957  07F1  0008               	return
 14958  07F2                     l110:	
 14959                           
 14960                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 14961  07F2  10C7               	bcf	_Buz1^(0+128),1
 14962                           
 14963                           ;Buzzer_B1.c: 64: }
 14964                           ;Buzzer_B1.c: 65: } else {
 14965  07F3  0008               	return
 14966  07F4                     l107:	
 14967                           
 14968                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 14969  07F4  16C7               	bsf	_Buz1^(0+128),5
 14970                           
 14971                           ;Buzzer_B1.c: 68: RB3 = 1;
 14972  07F5  0020               	movlb	0	; select bank0
 14973  07F6  158D               	bsf	13,3	;volatile
 14974                           
 14975                           ;Buzzer_B1.c: 69: }
 14976                           ;Buzzer_B1.c: 70: } else {
 14977  07F7  0008               	return
 14978  07F8                     l106:	
 14979                           
 14980                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 14981  07F8  12C7               	bcf	_Buz1^(0+128),5
 14982                           
 14983                           ;Buzzer_B1.c: 73: RB3 = 0;
 14984  07F9  0020               	movlb	0	; select bank0
 14985  07FA  118D               	bcf	13,3	;volatile
 14986                           
 14987                           ;Buzzer_B1.c: 75: Buz1.Count--;
 14988  07FB  3001               	movlw	1
 14989  07FC  0021               	movlb	1	; select bank1
 14990  07FD  02CA               	subwf	(_Buz1^(0+128)+3),f
 14991  07FE  0008               	return
 14992  07FF                     __end_of_Buzzer_Main:	
 14993                           
 14994                           	psect	text104
 14995  1FEE                     __ptext104:	
 14996 ;; *************** function _Buzzer_Initialization *****************
 14997 ;; Defined at:
 14998 ;;		line 11 in file "../src/Buzzer_B1.c"
 14999 ;; Parameters:    Size  Location     Type
 15000 ;;		None
 15001 ;; Auto vars:     Size  Location     Type
 15002 ;;		None
 15003 ;; Return value:  Size  Location     Type
 15004 ;;		None               void
 15005 ;; Registers used:
 15006 ;;		None
 15007 ;; Tracked objects:
 15008 ;;		On entry : 0/0
 15009 ;;		On exit  : 0/0
 15010 ;;		Unchanged: 0/0
 15011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;Total ram usage:        0 bytes
 15017 ;; Hardware stack levels used:    1
 15018 ;; Hardware stack levels required when called:    5
 15019 ;; This function calls:
 15020 ;;		Nothing
 15021 ;; This function is called by:
 15022 ;;		_main
 15023 ;; This function uses a non-reentrant model
 15024 ;;
 15025                           
 15026                           
 15027                           ;psect for function _Buzzer_Initialization
 15028  1FEE                     _Buzzer_Initialization:	
 15029                           
 15030                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 15031                           
 15032                           ;incstack = 0
 15033                           ; Regs used in _Buzzer_Initialization: []
 15034  1FEE  0021               	movlb	1	; select bank1
 15035  1FEF  1447               	bsf	_Buz1^(0+128),0
 15036  1FF0  0008               	return
 15037  1FF1                     __end_of_Buzzer_Initialization:	
 15038                           
 15039                           	psect	intentry
 15040  0004                     __pintentry:	
 15041 ;; *************** function _ISR *****************
 15042 ;; Defined at:
 15043 ;;		line 107 in file "../src/MCU_B1.c"
 15044 ;; Parameters:    Size  Location     Type
 15045 ;;		None
 15046 ;; Auto vars:     Size  Location     Type
 15047 ;;		None
 15048 ;; Return value:  Size  Location     Type
 15049 ;;		None               void
 15050 ;; Registers used:
 15051 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15052 ;; Tracked objects:
 15053 ;;		On entry : 0/0
 15054 ;;		On exit  : 0/0
 15055 ;;		Unchanged: 0/0
 15056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15059 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15060 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15061 ;;Total ram usage:        1 bytes
 15062 ;; Hardware stack levels used:    1
 15063 ;; Hardware stack levels required when called:    4
 15064 ;; This function calls:
 15065 ;;		_IOC_ISR
 15066 ;;		_TMR0_ISR
 15067 ;; This function is called by:
 15068 ;;		Interrupt level 1
 15069 ;; This function uses a non-reentrant model
 15070 ;;
 15071                           
 15072  0004                     _ISR:	
 15073                           
 15074                           ;incstack = 0
 15075                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15076  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15077  0005  3180               	pagesel	$
 15078  0006  0020               	movlb	0	; select bank0
 15079  0007  087F               	movf	127,w
 15080  0008  00F7               	movwf	??_ISR
 15081                           
 15082                           ;MCU_B1.c: 109: IOC_ISR();
 15083  0009  3191  211A  3180   	fcall	_IOC_ISR
 15084                           
 15085                           ;MCU_B1.c: 111: TMR0_ISR();
 15086  000C  3194  24F4         	fcall	_TMR0_ISR
 15087  000E  0877               	movf	??_ISR,w
 15088  000F  0020               	movlb	0	; select bank0
 15089  0010  00FF               	movwf	127
 15090  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 15091  0012  0009               	retfie
 15092  0013                     __end_of_ISR:	
 15093                           
 15094                           	psect	text106
 15095  14F4                     __ptext106:	
 15096 ;; *************** function _TMR0_ISR *****************
 15097 ;; Defined at:
 15098 ;;		line 135 in file "../src/MCU_B1.c"
 15099 ;; Parameters:    Size  Location     Type
 15100 ;;		None
 15101 ;; Auto vars:     Size  Location     Type
 15102 ;;		None
 15103 ;; Return value:  Size  Location     Type
 15104 ;;		None               void
 15105 ;; Registers used:
 15106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15107 ;; Tracked objects:
 15108 ;;		On entry : 0/0
 15109 ;;		On exit  : 0/0
 15110 ;;		Unchanged: 0/0
 15111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15116 ;;Total ram usage:        0 bytes
 15117 ;; Hardware stack levels used:    1
 15118 ;; Hardware stack levels required when called:    2
 15119 ;; This function calls:
 15120 ;;		_setDimmerLights_IntrControl
 15121 ;; This function is called by:
 15122 ;;		_ISR
 15123 ;; This function uses a non-reentrant model
 15124 ;;
 15125                           
 15126                           
 15127                           ;psect for function _TMR0_ISR
 15128  14F4                     _TMR0_ISR:	
 15129                           
 15130                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 15131                           
 15132                           ;incstack = 0
 15133                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15134  14F4  1E8B               	btfss	11,5	;volatile
 15135  14F5  0008               	return
 15136  14F6  1D0B               	btfss	11,2	;volatile
 15137  14F7  0008               	return
 15138                           
 15139                           ;MCU_B1.c: 138: TMR0 = (256-190);
 15140  14F8  3042               	movlw	66
 15141  14F9  0020               	movlb	0	; select bank0
 15142  14FA  0095               	movwf	21	;volatile
 15143                           
 15144                           ;MCU_B1.c: 139: TMR0IF = 0;
 15145  14FB  110B               	bcf	11,2	;volatile
 15146                           
 15147                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 15148  14FC  3001               	movlw	1
 15149  14FD  3180  2042  3194   	fcall	_setDimmerLights_IntrControl
 15150                           
 15151                           ;MCU_B1.c: 149: setDimmerLights_IntrControl(2);
 15152  1500  3002               	movlw	2
 15153  1501  3180  2042  3194   	fcall	_setDimmerLights_IntrControl
 15154                           
 15155                           ;MCU_B1.c: 160: Timer0.Count++;
 15156  1504  3001               	movlw	1
 15157  1505  0022               	movlb	2	; select bank2
 15158  1506  07A1               	addwf	(_Timer0^(0+256)+1),f
 15159  1507  3000               	movlw	0
 15160  1508  3DA2               	addwfc	((_Timer0+1)^(0+256)+1),f
 15161                           
 15162                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 15163  1509  3001               	movlw	1
 15164  150A  3E20               	addlw	_Timer0& (0+255)
 15165  150B  0086               	movwf	6
 15166  150C  3001               	movlw	1	; select bank2/3
 15167  150D  0087               	movwf	7
 15168  150E  3F40               	moviw [0]fsr1
 15169  150F  3A64               	xorlw	100
 15170  1510  1D03               	skipz
 15171  1511  2D14               	goto	u639_25
 15172  1512  3F41               	moviw [1]fsr1
 15173  1513  3A00               	xorlw	0
 15174  1514                     u639_25:	
 15175  1514  1D03               	skipz
 15176  1515  0008               	return
 15177                           
 15178                           ;MCU_B1.c: 162: Timer0.Count = 0;
 15179  1516  01A1               	clrf	(_Timer0^(0+256)+1)
 15180  1517  01A2               	clrf	((_Timer0+1)^(0+256)+1)
 15181                           
 15182                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 15183  1518  0021               	movlb	1	; select bank1
 15184  1519  14B5               	bsf	_myMain^(0+128),1
 15185  151A  0008               	return
 15186  151B                     __end_of_TMR0_ISR:	
 15187                           
 15188                           	psect	text107
 15189  0042                     __ptext107:	
 15190 ;; *************** function _setDimmerLights_IntrControl *****************
 15191 ;; Defined at:
 15192 ;;		line 87 in file "../src/Dimmer_B1.c"
 15193 ;; Parameters:    Size  Location     Type
 15194 ;;  lights          1    wreg     unsigned char 
 15195 ;; Auto vars:     Size  Location     Type
 15196 ;;  lights          1    6[COMMON] unsigned char 
 15197 ;; Return value:  Size  Location     Type
 15198 ;;		None               void
 15199 ;; Registers used:
 15200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15201 ;; Tracked objects:
 15202 ;;		On entry : 0/0
 15203 ;;		On exit  : 0/0
 15204 ;;		Unchanged: 0/0
 15205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15209 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15210 ;;Total ram usage:        5 bytes
 15211 ;; Hardware stack levels used:    1
 15212 ;; Hardware stack levels required when called:    1
 15213 ;; This function calls:
 15214 ;;		_DimmerIntrPointSelect
 15215 ;; This function is called by:
 15216 ;;		_TMR0_ISR
 15217 ;; This function uses a non-reentrant model
 15218 ;;
 15219                           
 15220                           
 15221                           ;psect for function _setDimmerLights_IntrControl
 15222  0042                     _setDimmerLights_IntrControl:	
 15223                           
 15224                           ;incstack = 0
 15225                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15226                           ;setDimmerLights_IntrControl@lights stored from wreg
 15227  0042  00F6               	movwf	setDimmerLights_IntrControl@lights
 15228                           
 15229                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 15230  0043  0876               	movf	setDimmerLights_IntrControl@lights,w
 15231  0044  3192  220B  3180   	fcall	_DimmerIntrPointSelect
 15232                           
 15233                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 15234  0047  087A               	movf	_DimmerLightsIntr,w
 15235  0048  0086               	movwf	6
 15236  0049  3001               	movlw	1	; select bank2/3
 15237  004A  0087               	movwf	7
 15238  004B  1C01               	btfss	1,0
 15239  004C  28A7               	goto	i1l6377
 15240                           
 15241                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 15242  004D  3001               	movlw	1
 15243  004E  00F2               	movwf	??_setDimmerLights_IntrControl
 15244  004F  087A               	movf	_DimmerLightsIntr,w
 15245  0050  3E03               	addlw	3
 15246  0051  0086               	movwf	6
 15247  0052  3001               	movlw	1	; select bank2/3
 15248  0053  0087               	movwf	7
 15249  0054  0872               	movf	??_setDimmerLights_IntrControl,w
 15250  0055  0781               	addwf	1,f
 15251                           
 15252                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 15253  0056  0021               	movlb	1	; select bank1
 15254  0057  085B               	movf	_Dimmer^(0+128),w
 15255  0058  3E02               	addlw	2
 15256  0059  0086               	movwf	6
 15257  005A  0187               	clrf	7
 15258  005B  0801               	movf	1,w
 15259  005C  00F2               	movwf	??_setDimmerLights_IntrControl
 15260  005D  01F3               	clrf	??_setDimmerLights_IntrControl+1
 15261  005E  09F2               	comf	??_setDimmerLights_IntrControl,f
 15262  005F  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 15263  0060  0AF2               	incf	??_setDimmerLights_IntrControl,f
 15264  0061  1903               	skipnz
 15265  0062  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 15266  0063  087A               	movf	_DimmerLightsIntr,w
 15267  0064  3E04               	addlw	4
 15268  0065  0086               	movwf	6
 15269  0066  3001               	movlw	1	; select bank2/3
 15270  0067  0087               	movwf	7
 15271  0068  0801               	movf	1,w
 15272  0069  0772               	addwf	??_setDimmerLights_IntrControl,w
 15273  006A  00F4               	movwf	??_setDimmerLights_IntrControl+2
 15274  006B  0873               	movf	??_setDimmerLights_IntrControl+1,w
 15275  006C  1803               	skipnc
 15276  006D  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 15277  006E  00F5               	movwf	??_setDimmerLights_IntrControl+3
 15278  006F  087A               	movf	_DimmerLightsIntr,w
 15279  0070  3E03               	addlw	3
 15280  0071  0086               	movwf	6
 15281  0072  3001               	movlw	1	; select bank2/3
 15282  0073  0087               	movwf	7
 15283  0074  0875               	movf	??_setDimmerLights_IntrControl+3,w
 15284  0075  3A80               	xorlw	128
 15285  0076  3C80               	sublw	128
 15286  0077  1D03               	skipz
 15287  0078  287B               	goto	u545_25
 15288  0079  0874               	movf	??_setDimmerLights_IntrControl+2,w
 15289  007A  0201               	subwf	1,w
 15290  007B                     u545_25:	
 15291  007B  1C03               	skipc
 15292  007C  29B0               	goto	i1l6439
 15293                           
 15294                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 15295  007D  087A               	movf	_DimmerLightsIntr,w
 15296  007E  3E03               	addlw	3
 15297  007F  0086               	movwf	6
 15298  0080  3001               	movlw	1	; select bank2/3
 15299  0081  0087               	movwf	7
 15300  0082  0181               	clrf	1
 15301                           
 15302                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 15303  0083  087A               	movf	_DimmerLightsIntr,w
 15304  0084  0086               	movwf	6
 15305  0085  3001               	movlw	1	; select bank2/3
 15306  0086  0087               	movwf	7
 15307  0087  1001               	bcf	1,0
 15308                           
 15309                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 15310  0088  087A               	movf	_DimmerLightsIntr,w
 15311  0089  0086               	movwf	6
 15312  008A  3001               	movlw	1	; select bank2/3
 15313  008B  0087               	movwf	7
 15314  008C  1F01               	btfss	1,6
 15315  008D  29B0               	goto	i1l6439
 15316                           
 15317                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 15318  008E  087A               	movf	_DimmerLightsIntr,w
 15319  008F  3E08               	addlw	8
 15320  0090  0086               	movwf	6
 15321  0091  3001               	movlw	1	; select bank2/3
 15322  0092  0087               	movwf	7
 15323  0093  1401               	bsf	1,0
 15324                           
 15325                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 15326  0094  087A               	movf	_DimmerLightsIntr,w
 15327  0095  3E08               	addlw	8
 15328  0096  0086               	movwf	6
 15329  0097  3001               	movlw	1	; select bank2/3
 15330  0098  0087               	movwf	7
 15331  0099  1681               	bsf	1,5
 15332                           
 15333                           ;Dimmer_B1.c: 100: if (lights == 1) {
 15334  009A  0876               	movf	setDimmerLights_IntrControl@lights,w
 15335  009B  3A01               	xorlw	1
 15336  009C  1D03               	skipz
 15337  009D  28A0               	goto	i1l6373
 15338                           
 15339                           ;Dimmer_B1.c: 101: RA7 = 1;
 15340  009E  0020               	movlb	0	; select bank0
 15341  009F  178C               	bsf	12,7	;volatile
 15342  00A0                     i1l6373:	
 15343                           ;Dimmer_B1.c: 102: ;;
 15344                           
 15345                           
 15346                           ;Dimmer_B1.c: 103: }
 15347                           ;Dimmer_B1.c: 106: if (lights == 2) {
 15348  00A0  0876               	movf	setDimmerLights_IntrControl@lights,w
 15349  00A1  3A02               	xorlw	2
 15350  00A2  1D03               	skipz
 15351  00A3  29B0               	goto	i1l6439
 15352                           
 15353                           ;Dimmer_B1.c: 107: RB4 = 1;
 15354  00A4  0020               	movlb	0	; select bank0
 15355  00A5  160D               	bsf	13,4	;volatile
 15356                           
 15357                           ;Dimmer_B1.c: 108: }
 15358                           ;Dimmer_B1.c: 115: }
 15359                           ;Dimmer_B1.c: 116: }
 15360                           ;Dimmer_B1.c: 117: } else {
 15361  00A6  29B0               	goto	i1l6439
 15362  00A7                     i1l6377:	
 15363                           
 15364                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 15365  00A7  087A               	movf	_DimmerLightsIntr,w
 15366  00A8  3E08               	addlw	8
 15367  00A9  0086               	movwf	6
 15368  00AA  3001               	movlw	1	; select bank2/3
 15369  00AB  0087               	movwf	7
 15370  00AC  1C01               	btfss	1,0
 15371  00AD  29B0               	goto	i1l6439
 15372                           
 15373                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 15374  00AE  087A               	movf	_DimmerLightsIntr,w
 15375  00AF  3E08               	addlw	8
 15376  00B0  0086               	movwf	6
 15377  00B1  3001               	movlw	1	; select bank2/3
 15378  00B2  0087               	movwf	7
 15379  00B3  1001               	bcf	1,0
 15380                           
 15381                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 15382  00B4  087A               	movf	_DimmerLightsIntr,w
 15383  00B5  0086               	movwf	6
 15384  00B6  3001               	movlw	1	; select bank2/3
 15385  00B7  0087               	movwf	7
 15386  00B8  1C81               	btfss	1,1
 15387  00B9  29B0               	goto	i1l6439
 15388                           
 15389                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 15390  00BA  3001               	movlw	1
 15391  00BB  00F2               	movwf	??_setDimmerLights_IntrControl
 15392  00BC  0A7A               	incf	_DimmerLightsIntr,w
 15393  00BD  0086               	movwf	6
 15394  00BE  3001               	movlw	1	; select bank2/3
 15395  00BF  0087               	movwf	7
 15396  00C0  0872               	movf	??_setDimmerLights_IntrControl,w
 15397  00C1  0781               	addwf	1,f
 15398                           
 15399                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 15400  00C2  0A7A               	incf	_DimmerLightsIntr,w
 15401  00C3  0086               	movwf	6
 15402  00C4  3001               	movlw	1	; select bank2/3
 15403  00C5  0087               	movwf	7
 15404  00C6  087A               	movf	_DimmerLightsIntr,w
 15405  00C7  3E02               	addlw	2
 15406  00C8  0084               	movwf	4
 15407  00C9  3001               	movlw	1	; select bank2/3
 15408  00CA  0085               	movwf	5
 15409  00CB  0800               	movf	0,w
 15410  00CC  0201               	subwf	1,w
 15411  00CD  1C03               	skipc
 15412  00CE  29B0               	goto	i1l6439
 15413                           
 15414                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 15415  00CF  0A7A               	incf	_DimmerLightsIntr,w
 15416  00D0  0086               	movwf	6
 15417  00D1  3001               	movlw	1	; select bank2/3
 15418  00D2  0087               	movwf	7
 15419  00D3  0181               	clrf	1
 15420                           
 15421                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 15422  00D4  087A               	movf	_DimmerLightsIntr,w
 15423  00D5  0086               	movwf	6
 15424  00D6  3001               	movlw	1	; select bank2/3
 15425  00D7  0087               	movwf	7
 15426  00D8  1D81               	btfss	1,3
 15427  00D9  2910               	goto	i1l6403
 15428                           
 15429                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 15430  00DA  087A               	movf	_DimmerLightsIntr,w
 15431  00DB  0086               	movwf	6
 15432  00DC  3001               	movlw	1	; select bank2/3
 15433  00DD  0087               	movwf	7
 15434  00DE  1A01               	btfsc	1,4
 15435  00DF  28F7               	goto	i1l6397
 15436                           
 15437                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 15438  00E0  087A               	movf	_DimmerLightsIntr,w
 15439  00E1  3E04               	addlw	4
 15440  00E2  0086               	movwf	6
 15441  00E3  3001               	movlw	1	; select bank2/3
 15442  00E4  0087               	movwf	7
 15443  00E5  3021               	movlw	33
 15444  00E6  0201               	subwf	1,w
 15445  00E7  1C03               	skipc
 15446  00E8  28F1               	goto	i1l6395
 15447                           
 15448                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 15449  00E9  087A               	movf	_DimmerLightsIntr,w
 15450  00EA  3E04               	addlw	4
 15451  00EB  0086               	movwf	6
 15452  00EC  3001               	movlw	1	; select bank2/3
 15453  00ED  0087               	movwf	7
 15454  00EE  3001               	movlw	1
 15455  00EF  0281               	subwf	1,f
 15456                           
 15457                           ;Dimmer_B1.c: 128: } else {
 15458  00F0  29B0               	goto	i1l6439
 15459  00F1                     i1l6395:	
 15460                           
 15461                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 15462  00F1  087A               	movf	_DimmerLightsIntr,w
 15463  00F2  0086               	movwf	6
 15464  00F3  3001               	movlw	1	; select bank2/3
 15465  00F4  0087               	movwf	7
 15466  00F5  1601               	bsf	1,4
 15467                           
 15468                           ;Dimmer_B1.c: 130: }
 15469                           ;Dimmer_B1.c: 131: } else {
 15470  00F6  29B0               	goto	i1l6439
 15471  00F7                     i1l6397:	
 15472                           
 15473                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 15474  00F7  087A               	movf	_DimmerLightsIntr,w
 15475  00F8  3E04               	addlw	4
 15476  00F9  0086               	movwf	6
 15477  00FA  3001               	movlw	1	; select bank2/3
 15478  00FB  0087               	movwf	7
 15479  00FC  303C               	movlw	60
 15480  00FD  0201               	subwf	1,w
 15481  00FE  1803               	skipnc
 15482  00FF  290A               	goto	i1l6401
 15483                           
 15484                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 15485  0100  3001               	movlw	1
 15486  0101  00F2               	movwf	??_setDimmerLights_IntrControl
 15487  0102  087A               	movf	_DimmerLightsIntr,w
 15488  0103  3E04               	addlw	4
 15489  0104  0086               	movwf	6
 15490  0105  3001               	movlw	1	; select bank2/3
 15491  0106  0087               	movwf	7
 15492  0107  0872               	movf	??_setDimmerLights_IntrControl,w
 15493  0108  0781               	addwf	1,f
 15494                           
 15495                           ;Dimmer_B1.c: 134: } else {
 15496  0109  29B0               	goto	i1l6439
 15497  010A                     i1l6401:	
 15498                           
 15499                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 15500  010A  087A               	movf	_DimmerLightsIntr,w
 15501  010B  0086               	movwf	6
 15502  010C  3001               	movlw	1	; select bank2/3
 15503  010D  0087               	movwf	7
 15504  010E  1201               	bcf	1,4
 15505                           
 15506                           ;Dimmer_B1.c: 136: }
 15507                           ;Dimmer_B1.c: 137: }
 15508                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 15509  010F  29B0               	goto	i1l6439
 15510  0110                     i1l6403:	
 15511  0110  087A               	movf	_DimmerLightsIntr,w
 15512  0111  0086               	movwf	6
 15513  0112  3001               	movlw	1	; select bank2/3
 15514  0113  0087               	movwf	7
 15515  0114  1D01               	btfss	1,2
 15516  0115  2957               	goto	i1l6417
 15517                           
 15518                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 15519  0116  087A               	movf	_DimmerLightsIntr,w
 15520  0117  3E05               	addlw	5
 15521  0118  0086               	movwf	6
 15522  0119  3001               	movlw	1	; select bank2/3
 15523  011A  0087               	movwf	7
 15524  011B  087A               	movf	_DimmerLightsIntr,w
 15525  011C  3E04               	addlw	4
 15526  011D  0084               	movwf	4
 15527  011E  3001               	movlw	1	; select bank2/3
 15528  011F  0085               	movwf	5
 15529  0120  0800               	movf	0,w
 15530  0121  0201               	subwf	1,w
 15531  0122  1803               	skipnc
 15532  0123  292C               	goto	i1l6409
 15533                           
 15534                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 15535  0124  087A               	movf	_DimmerLightsIntr,w
 15536  0125  3E04               	addlw	4
 15537  0126  0086               	movwf	6
 15538  0127  3001               	movlw	1	; select bank2/3
 15539  0128  0087               	movwf	7
 15540  0129  3001               	movlw	1
 15541  012A  0281               	subwf	1,f
 15542                           
 15543                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 15544  012B  2943               	goto	i1l6413
 15545  012C                     i1l6409:	
 15546  012C  087A               	movf	_DimmerLightsIntr,w
 15547  012D  3E04               	addlw	4
 15548  012E  0086               	movwf	6
 15549  012F  3001               	movlw	1	; select bank2/3
 15550  0130  0087               	movwf	7
 15551  0131  087A               	movf	_DimmerLightsIntr,w
 15552  0132  3E05               	addlw	5
 15553  0133  0084               	movwf	4
 15554  0134  3001               	movlw	1	; select bank2/3
 15555  0135  0085               	movwf	5
 15556  0136  0800               	movf	0,w
 15557  0137  0201               	subwf	1,w
 15558  0138  1803               	skipnc
 15559  0139  2943               	goto	i1l6413
 15560                           
 15561                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 15562  013A  3001               	movlw	1
 15563  013B  00F2               	movwf	??_setDimmerLights_IntrControl
 15564  013C  087A               	movf	_DimmerLightsIntr,w
 15565  013D  3E04               	addlw	4
 15566  013E  0086               	movwf	6
 15567  013F  3001               	movlw	1	; select bank2/3
 15568  0140  0087               	movwf	7
 15569  0141  0872               	movf	??_setDimmerLights_IntrControl,w
 15570  0142  0781               	addwf	1,f
 15571  0143                     i1l6413:	
 15572                           
 15573                           ;Dimmer_B1.c: 143: }
 15574                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 15575  0143  087A               	movf	_DimmerLightsIntr,w
 15576  0144  3E05               	addlw	5
 15577  0145  0086               	movwf	6
 15578  0146  3001               	movlw	1	; select bank2/3
 15579  0147  0087               	movwf	7
 15580  0148  087A               	movf	_DimmerLightsIntr,w
 15581  0149  3E04               	addlw	4
 15582  014A  0084               	movwf	4
 15583  014B  3001               	movlw	1	; select bank2/3
 15584  014C  0085               	movwf	5
 15585  014D  0800               	movf	0,w
 15586  014E  0601               	xorwf	1,w
 15587  014F  1D03               	skipz
 15588  0150  29B0               	goto	i1l6439
 15589                           
 15590                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 15591  0151  087A               	movf	_DimmerLightsIntr,w
 15592  0152  0086               	movwf	6
 15593  0153  3001               	movlw	1	; select bank2/3
 15594  0154  0087               	movwf	7
 15595  0155  1101               	bcf	1,2
 15596  0156  2972               	goto	i1l6423
 15597  0157                     i1l6417:	
 15598                           ;Dimmer_B1.c: 147: }
 15599                           ;Dimmer_B1.c: 148: } else {
 15600                           
 15601                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 15602                           
 15603                           
 15604                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 15605  0157  087A               	movf	_DimmerLightsIntr,w
 15606  0158  0086               	movwf	6
 15607  0159  3001               	movlw	1	; select bank2/3
 15608  015A  0087               	movwf	7
 15609  015B  1E81               	btfss	1,5
 15610  015C  2978               	goto	i1l6425
 15611                           
 15612                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 15613  015D  087A               	movf	_DimmerLightsIntr,w
 15614  015E  3E04               	addlw	4
 15615  015F  0086               	movwf	6
 15616  0160  3001               	movlw	1	; select bank2/3
 15617  0161  0087               	movwf	7
 15618  0162  3001               	movlw	1
 15619  0163  0281               	subwf	1,f
 15620                           
 15621                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 15622  0164  087A               	movf	_DimmerLightsIntr,w
 15623  0165  3E05               	addlw	5
 15624  0166  0086               	movwf	6
 15625  0167  3001               	movlw	1	; select bank2/3
 15626  0168  0087               	movwf	7
 15627  0169  087A               	movf	_DimmerLightsIntr,w
 15628  016A  3E04               	addlw	4
 15629  016B  0084               	movwf	4
 15630  016C  3001               	movlw	1	; select bank2/3
 15631  016D  0085               	movwf	5
 15632  016E  0800               	movf	0,w
 15633  016F  0201               	subwf	1,w
 15634  0170  1C03               	skipc
 15635  0171  29B0               	goto	i1l6439
 15636  0172                     i1l6423:	
 15637                           
 15638                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 15639  0172  087A               	movf	_DimmerLightsIntr,w
 15640  0173  0086               	movwf	6
 15641  0174  3001               	movlw	1	; select bank2/3
 15642  0175  0087               	movwf	7
 15643  0176  1081               	bcf	1,1
 15644                           
 15645                           ;Dimmer_B1.c: 153: }
 15646                           ;Dimmer_B1.c: 154: } else {
 15647  0177  29B0               	goto	i1l6439
 15648  0178                     i1l6425:	
 15649                           
 15650                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 15651  0178  3001               	movlw	1
 15652  0179  00F2               	movwf	??_setDimmerLights_IntrControl
 15653  017A  087A               	movf	_DimmerLightsIntr,w
 15654  017B  3E04               	addlw	4
 15655  017C  0086               	movwf	6
 15656  017D  3001               	movlw	1	; select bank2/3
 15657  017E  0087               	movwf	7
 15658  017F  0872               	movf	??_setDimmerLights_IntrControl,w
 15659  0180  0781               	addwf	1,f
 15660                           
 15661                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 15662  0181  087A               	movf	_DimmerLightsIntr,w
 15663  0182  3E04               	addlw	4
 15664  0183  0086               	movwf	6
 15665  0184  3001               	movlw	1	; select bank2/3
 15666  0185  0087               	movwf	7
 15667  0186  087A               	movf	_DimmerLightsIntr,w
 15668  0187  3E06               	addlw	6
 15669  0188  0084               	movwf	4
 15670  0189  3001               	movlw	1	; select bank2/3
 15671  018A  0085               	movwf	5
 15672  018B  0800               	movf	0,w
 15673  018C  0201               	subwf	1,w
 15674  018D  1C03               	skipc
 15675  018E  29B0               	goto	i1l6439
 15676                           
 15677                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 15678  018F  087A               	movf	_DimmerLightsIntr,w
 15679  0190  0086               	movwf	6
 15680  0191  3001               	movlw	1	; select bank2/3
 15681  0192  0087               	movwf	7
 15682  0193  1081               	bcf	1,1
 15683                           
 15684                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 15685  0194  087A               	movf	_DimmerLightsIntr,w
 15686  0195  0086               	movwf	6
 15687  0196  3001               	movlw	1	; select bank2/3
 15688  0197  0087               	movwf	7
 15689  0198  1301               	bcf	1,6
 15690                           
 15691                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 15692  0199  087A               	movf	_DimmerLightsIntr,w
 15693  019A  3E09               	addlw	9
 15694  019B  0086               	movwf	6
 15695  019C  3001               	movlw	1	; select bank2/3
 15696  019D  0087               	movwf	7
 15697  019E  1501               	bsf	1,2
 15698                           
 15699                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 15700  019F  0021               	movlb	1	; select bank1
 15701  01A0  085B               	movf	_Dimmer^(0+128),w
 15702  01A1  0086               	movwf	6
 15703  01A2  0187               	clrf	7
 15704  01A3  1401               	bsf	1,0
 15705                           
 15706                           ;Dimmer_B1.c: 162: if (lights == 1) {
 15707  01A4  0876               	movf	setDimmerLights_IntrControl@lights,w
 15708  01A5  3A01               	xorlw	1
 15709  01A6  1D03               	skipz
 15710  01A7  29AA               	goto	i1l6435
 15711                           
 15712                           ;Dimmer_B1.c: 163: RA3 = 0;
 15713  01A8  0020               	movlb	0	; select bank0
 15714  01A9  118C               	bcf	12,3	;volatile
 15715  01AA                     i1l6435:	
 15716                           
 15717                           ;Dimmer_B1.c: 165: }
 15718                           ;Dimmer_B1.c: 168: if (lights == 2) {
 15719  01AA  0876               	movf	setDimmerLights_IntrControl@lights,w
 15720  01AB  3A02               	xorlw	2
 15721  01AC  1D03               	skipz
 15722  01AD  29B0               	goto	i1l6439
 15723                           
 15724                           ;Dimmer_B1.c: 169: RC7 = 0;
 15725  01AE  0020               	movlb	0	; select bank0
 15726  01AF  138E               	bcf	14,7	;volatile
 15727  01B0                     i1l6439:	
 15728                           ;Dimmer_B1.c: 170: }
 15729                           ;Dimmer_B1.c: 177: ;;
 15730                           
 15731                           
 15732                           ;Dimmer_B1.c: 178: }
 15733                           ;Dimmer_B1.c: 179: }
 15734                           ;Dimmer_B1.c: 180: }
 15735                           ;Dimmer_B1.c: 181: }
 15736                           ;Dimmer_B1.c: 182: }
 15737                           ;Dimmer_B1.c: 183: }
 15738                           ;Dimmer_B1.c: 184: }
 15739                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 15740  01B0  087A               	movf	_DimmerLightsIntr,w
 15741  01B1  3E08               	addlw	8
 15742  01B2  0086               	movwf	6
 15743  01B3  3001               	movlw	1	; select bank2/3
 15744  01B4  0087               	movwf	7
 15745  01B5  1E81               	btfss	1,5
 15746  01B6  29E1               	goto	i1l6457
 15747                           
 15748                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 15749  01B7  3001               	movlw	1
 15750  01B8  00F2               	movwf	??_setDimmerLights_IntrControl
 15751  01B9  087A               	movf	_DimmerLightsIntr,w
 15752  01BA  3E07               	addlw	7
 15753  01BB  0086               	movwf	6
 15754  01BC  3001               	movlw	1	; select bank2/3
 15755  01BD  0087               	movwf	7
 15756  01BE  0872               	movf	??_setDimmerLights_IntrControl,w
 15757  01BF  0781               	addwf	1,f
 15758                           
 15759                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 15760  01C0  087A               	movf	_DimmerLightsIntr,w
 15761  01C1  3E07               	addlw	7
 15762  01C2  0086               	movwf	6
 15763  01C3  3001               	movlw	1	; select bank2/3
 15764  01C4  0087               	movwf	7
 15765  01C5  3005               	movlw	5
 15766  01C6  0201               	subwf	1,w
 15767  01C7  1C03               	skipc
 15768  01C8  29E1               	goto	i1l6457
 15769                           
 15770                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 15771  01C9  087A               	movf	_DimmerLightsIntr,w
 15772  01CA  3E07               	addlw	7
 15773  01CB  0086               	movwf	6
 15774  01CC  3001               	movlw	1	; select bank2/3
 15775  01CD  0087               	movwf	7
 15776  01CE  0181               	clrf	1
 15777                           
 15778                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 15779  01CF  087A               	movf	_DimmerLightsIntr,w
 15780  01D0  3E08               	addlw	8
 15781  01D1  0086               	movwf	6
 15782  01D2  3001               	movlw	1	; select bank2/3
 15783  01D3  0087               	movwf	7
 15784  01D4  1281               	bcf	1,5
 15785                           
 15786                           ;Dimmer_B1.c: 192: if (lights == 1) {
 15787  01D5  0876               	movf	setDimmerLights_IntrControl@lights,w
 15788  01D6  3A01               	xorlw	1
 15789  01D7  1D03               	skipz
 15790  01D8  29DB               	goto	i1l6453
 15791                           
 15792                           ;Dimmer_B1.c: 193: RA7 = 0;
 15793  01D9  0020               	movlb	0	; select bank0
 15794  01DA  138C               	bcf	12,7	;volatile
 15795  01DB                     i1l6453:	
 15796                           ;Dimmer_B1.c: 194: ;;
 15797                           
 15798                           
 15799                           ;Dimmer_B1.c: 195: }
 15800                           ;Dimmer_B1.c: 198: if (lights == 2) {
 15801  01DB  0876               	movf	setDimmerLights_IntrControl@lights,w
 15802  01DC  3A02               	xorlw	2
 15803  01DD  1D03               	skipz
 15804  01DE  29E1               	goto	i1l6457
 15805                           
 15806                           ;Dimmer_B1.c: 199: RB4 = 0;
 15807  01DF  0020               	movlb	0	; select bank0
 15808  01E0  120D               	bcf	13,4	;volatile
 15809  01E1                     i1l6457:	
 15810                           
 15811                           ;Dimmer_B1.c: 200: }
 15812                           ;Dimmer_B1.c: 207: }
 15813                           ;Dimmer_B1.c: 208: }
 15814                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 15815  01E1  087A               	movf	_DimmerLightsIntr,w
 15816  01E2  3E09               	addlw	9
 15817  01E3  0086               	movwf	6
 15818  01E4  3001               	movlw	1	; select bank2/3
 15819  01E5  0087               	movwf	7
 15820  01E6  1E81               	btfss	1,5
 15821  01E7  0008               	return
 15822                           
 15823                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 15824  01E8  3001               	movlw	1
 15825  01E9  00F2               	movwf	??_setDimmerLights_IntrControl
 15826  01EA  087A               	movf	_DimmerLightsIntr,w
 15827  01EB  3E0A               	addlw	10
 15828  01EC  0086               	movwf	6
 15829  01ED  3001               	movlw	1	; select bank2/3
 15830  01EE  0087               	movwf	7
 15831  01EF  0872               	movf	??_setDimmerLights_IntrControl,w
 15832  01F0  0781               	addwf	1,f
 15833                           
 15834                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 15835  01F1  087A               	movf	_DimmerLightsIntr,w
 15836  01F2  3E0A               	addlw	10
 15837  01F3  0086               	movwf	6
 15838  01F4  3001               	movlw	1	; select bank2/3
 15839  01F5  0087               	movwf	7
 15840  01F6  0801               	movf	1,w
 15841  01F7  3A46               	xorlw	70
 15842  01F8  1D03               	skipz
 15843  01F9  0008               	return
 15844                           
 15845                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 15846  01FA  087A               	movf	_DimmerLightsIntr,w
 15847  01FB  3E0A               	addlw	10
 15848  01FC  0086               	movwf	6
 15849  01FD  3001               	movlw	1	; select bank2/3
 15850  01FE  0087               	movwf	7
 15851  01FF  0181               	clrf	1
 15852                           
 15853                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 15854  0200  087A               	movf	_DimmerLightsIntr,w
 15855  0201  3E09               	addlw	9
 15856  0202  0086               	movwf	6
 15857  0203  3001               	movlw	1	; select bank2/3
 15858  0204  0087               	movwf	7
 15859  0205  1281               	bcf	1,5
 15860  0206  0008               	return
 15861  0207                     __end_of_setDimmerLights_IntrControl:	
 15862                           
 15863                           	psect	text108
 15864  120B                     __ptext108:	
 15865 ;; *************** function _DimmerIntrPointSelect *****************
 15866 ;; Defined at:
 15867 ;;		line 65 in file "../src/Dimmer_B1.c"
 15868 ;; Parameters:    Size  Location     Type
 15869 ;;  lights          1    wreg     unsigned char 
 15870 ;; Auto vars:     Size  Location     Type
 15871 ;;  lights          1    1[COMMON] unsigned char 
 15872 ;; Return value:  Size  Location     Type
 15873 ;;		None               void
 15874 ;; Registers used:
 15875 ;;		wreg
 15876 ;; Tracked objects:
 15877 ;;		On entry : 0/0
 15878 ;;		On exit  : 0/0
 15879 ;;		Unchanged: 0/0
 15880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15883 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15884 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15885 ;;Total ram usage:        2 bytes
 15886 ;; Hardware stack levels used:    1
 15887 ;; This function calls:
 15888 ;;		Nothing
 15889 ;; This function is called by:
 15890 ;;		_setDimmerLights_IntrControl
 15891 ;; This function uses a non-reentrant model
 15892 ;;
 15893                           
 15894                           
 15895                           ;psect for function _DimmerIntrPointSelect
 15896  120B                     _DimmerIntrPointSelect:	
 15897                           
 15898                           ;incstack = 0
 15899                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 15900                           ;DimmerIntrPointSelect@lights stored from wreg
 15901  120B  00F1               	movwf	DimmerIntrPointSelect@lights
 15902                           
 15903                           ;Dimmer_B1.c: 67: if (lights == 1) {
 15904  120C  0871               	movf	DimmerIntrPointSelect@lights,w
 15905  120D  3A01               	xorlw	1
 15906  120E  1D03               	skipz
 15907  120F  2A14               	goto	i1l737
 15908                           
 15909                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 15910  1210  3028               	movlw	_DimmerLights1& (0+255)
 15911  1211  00F0               	movwf	??_DimmerIntrPointSelect
 15912  1212  0870               	movf	??_DimmerIntrPointSelect,w
 15913  1213  00FA               	movwf	_DimmerLightsIntr
 15914  1214                     i1l737:	
 15915                           
 15916                           ;Dimmer_B1.c: 69: }
 15917                           ;Dimmer_B1.c: 72: if (lights == 2) {
 15918  1214  0871               	movf	DimmerIntrPointSelect@lights,w
 15919  1215  3A02               	xorlw	2
 15920  1216  1D03               	skipz
 15921  1217  0008               	return
 15922                           
 15923                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights2;
 15924  1218  3037               	movlw	_DimmerLights2& (0+255)
 15925  1219  00F0               	movwf	??_DimmerIntrPointSelect
 15926  121A  0870               	movf	??_DimmerIntrPointSelect,w
 15927  121B  00FA               	movwf	_DimmerLightsIntr
 15928  121C  0008               	return
 15929  121D                     __end_of_DimmerIntrPointSelect:	
 15930                           
 15931                           	psect	text109
 15932  111A                     __ptext109:	
 15933 ;; *************** function _IOC_ISR *****************
 15934 ;; Defined at:
 15935 ;;		line 291 in file "../src/MCU_B1.c"
 15936 ;; Parameters:    Size  Location     Type
 15937 ;;		None
 15938 ;; Auto vars:     Size  Location     Type
 15939 ;;		None
 15940 ;; Return value:  Size  Location     Type
 15941 ;;		None               void
 15942 ;; Registers used:
 15943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15944 ;; Tracked objects:
 15945 ;;		On entry : 0/0
 15946 ;;		On exit  : 0/0
 15947 ;;		Unchanged: 0/0
 15948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15953 ;;Total ram usage:        0 bytes
 15954 ;; Hardware stack levels used:    1
 15955 ;; Hardware stack levels required when called:    3
 15956 ;; This function calls:
 15957 ;;		_setDimmerReClock
 15958 ;; This function is called by:
 15959 ;;		_ISR
 15960 ;; This function uses a non-reentrant model
 15961 ;;
 15962                           
 15963                           
 15964                           ;psect for function _IOC_ISR
 15965  111A                     _IOC_ISR:	
 15966                           
 15967                           ;MCU_B1.c: 292: if (IOCIE == 1 && IOCBF2 == 1) {
 15968                           
 15969                           ;incstack = 0
 15970                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15971  111A  1D8B               	btfss	11,3	;volatile
 15972  111B  0008               	return
 15973  111C  0027               	movlb	7	; select bank7
 15974  111D  1D16               	btfss	22,2	;volatile
 15975  111E  0008               	return
 15976                           
 15977                           ;MCU_B1.c: 293: IOCBF2 = 0;
 15978  111F  1116               	bcf	22,2	;volatile
 15979                           
 15980                           ;MCU_B1.c: 294: IOCIF = 0;
 15981  1120  100B               	bcf	11,0	;volatile
 15982                           
 15983                           ;MCU_B1.c: 295: if (myMain.PowerON == 1) {
 15984  1121  0021               	movlb	1	; select bank1
 15985  1122  1C35               	btfss	_myMain^(0+128),0
 15986  1123  0008               	return
 15987                           
 15988                           ;MCU_B1.c: 297: setDimmerReClock();
 15989  1124  3190  2093         	fcall	_setDimmerReClock
 15990  1126  0008               	return
 15991  1127                     __end_of_IOC_ISR:	
 15992                           
 15993                           	psect	text110
 15994  1093                     __ptext110:	
 15995 ;; *************** function _setDimmerReClock *****************
 15996 ;; Defined at:
 15997 ;;		line 169 in file "../src/MCU_B1.c"
 15998 ;; Parameters:    Size  Location     Type
 15999 ;;		None
 16000 ;; Auto vars:     Size  Location     Type
 16001 ;;		None
 16002 ;; Return value:  Size  Location     Type
 16003 ;;		None               void
 16004 ;; Registers used:
 16005 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16006 ;; Tracked objects:
 16007 ;;		On entry : 0/0
 16008 ;;		On exit  : 0/0
 16009 ;;		Unchanged: 0/0
 16010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16015 ;;Total ram usage:        0 bytes
 16016 ;; Hardware stack levels used:    1
 16017 ;; Hardware stack levels required when called:    2
 16018 ;; This function calls:
 16019 ;;		_setDimmerLights_IntrIOC_GO
 16020 ;; This function is called by:
 16021 ;;		_IOC_ISR
 16022 ;; This function uses a non-reentrant model
 16023 ;;
 16024                           
 16025                           
 16026                           ;psect for function _setDimmerReClock
 16027  1093                     _setDimmerReClock:	
 16028                           
 16029                           ;MCU_B1.c: 174: setDimmerLights_IntrIOC_GO(1);
 16030                           
 16031                           ;incstack = 0
 16032                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16033  1093  3001               	movlw	1
 16034  1094  3193  23A7  3190   	fcall	_setDimmerLights_IntrIOC_GO
 16035                           
 16036                           ;MCU_B1.c: 178: setDimmerLights_IntrIOC_GO(2);
 16037  1097  3002               	movlw	2
 16038  1098  3193  23A7         	fcall	_setDimmerLights_IntrIOC_GO
 16039  109A  0008               	return
 16040  109B                     __end_of_setDimmerReClock:	
 16041                           
 16042                           	psect	text111
 16043  13A7                     __ptext111:	
 16044 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16045 ;; Defined at:
 16046 ;;		line 28 in file "../src/Dimmer_B1.c"
 16047 ;; Parameters:    Size  Location     Type
 16048 ;;  lights          1    wreg     unsigned char 
 16049 ;; Auto vars:     Size  Location     Type
 16050 ;;  lights          1    2[COMMON] unsigned char 
 16051 ;; Return value:  Size  Location     Type
 16052 ;;		None               void
 16053 ;; Registers used:
 16054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16055 ;; Tracked objects:
 16056 ;;		On entry : 0/0
 16057 ;;		On exit  : 0/0
 16058 ;;		Unchanged: 0/0
 16059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16061 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16063 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16064 ;;Total ram usage:        1 bytes
 16065 ;; Hardware stack levels used:    1
 16066 ;; Hardware stack levels required when called:    1
 16067 ;; This function calls:
 16068 ;;		_DimmerIntrIOCPointSelect
 16069 ;; This function is called by:
 16070 ;;		_setDimmerReClock
 16071 ;; This function uses a non-reentrant model
 16072 ;;
 16073                           
 16074                           
 16075                           ;psect for function _setDimmerLights_IntrIOC_GO
 16076  13A7                     _setDimmerLights_IntrIOC_GO:	
 16077                           
 16078                           ;incstack = 0
 16079                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16080                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16081  13A7  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 16082                           
 16083                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 16084  13A8  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16085  13A9  3192  2254  3193   	fcall	_DimmerIntrIOCPointSelect
 16086                           
 16087                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 16088  13AC  0021               	movlb	1	; select bank1
 16089  13AD  085E               	movf	_DimmerLightsIntrIOC^(0+128),w
 16090  13AE  0086               	movwf	6
 16091  13AF  3001               	movlw	1	; select bank2/3
 16092  13B0  0087               	movwf	7
 16093  13B1  1801               	btfsc	1,0
 16094  13B2  0008               	return
 16095  13B3  085E               	movf	_DimmerLightsIntrIOC^(0+128),w
 16096  13B4  3E09               	addlw	9
 16097  13B5  0086               	movwf	6
 16098  13B6  3001               	movlw	1	; select bank2/3
 16099  13B7  0087               	movwf	7
 16100  13B8  1A81               	btfsc	1,5
 16101  13B9  0008               	return
 16102                           
 16103                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 16104  13BA  085E               	movf	_DimmerLightsIntrIOC^(0+128),w
 16105  13BB  0086               	movwf	6
 16106  13BC  3001               	movlw	1	; select bank2/3
 16107  13BD  0087               	movwf	7
 16108  13BE  1401               	bsf	1,0
 16109                           
 16110                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 16111  13BF  085E               	movf	_DimmerLightsIntrIOC^(0+128),w
 16112  13C0  3E09               	addlw	9
 16113  13C1  0086               	movwf	6
 16114  13C2  3001               	movlw	1	; select bank2/3
 16115  13C3  0087               	movwf	7
 16116  13C4  1681               	bsf	1,5
 16117  13C5  0008               	return
 16118  13C6                     __end_of_setDimmerLights_IntrIOC_GO:	
 16119                           
 16120                           	psect	text112
 16121  1254                     __ptext112:	
 16122 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16123 ;; Defined at:
 16124 ;;		line 8 in file "../src/Dimmer_B1.c"
 16125 ;; Parameters:    Size  Location     Type
 16126 ;;  lights          1    wreg     unsigned char 
 16127 ;; Auto vars:     Size  Location     Type
 16128 ;;  lights          1    1[COMMON] unsigned char 
 16129 ;; Return value:  Size  Location     Type
 16130 ;;		None               void
 16131 ;; Registers used:
 16132 ;;		wreg
 16133 ;; Tracked objects:
 16134 ;;		On entry : 0/0
 16135 ;;		On exit  : 0/0
 16136 ;;		Unchanged: 0/0
 16137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16139 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16141 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16142 ;;Total ram usage:        2 bytes
 16143 ;; Hardware stack levels used:    1
 16144 ;; This function calls:
 16145 ;;		Nothing
 16146 ;; This function is called by:
 16147 ;;		_setDimmerLights_IntrIOC_GO
 16148 ;; This function uses a non-reentrant model
 16149 ;;
 16150                           
 16151                           
 16152                           ;psect for function _DimmerIntrIOCPointSelect
 16153  1254                     _DimmerIntrIOCPointSelect:	
 16154                           
 16155                           ;incstack = 0
 16156                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 16157                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 16158  1254  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 16159                           
 16160                           ;Dimmer_B1.c: 10: if (lights == 1) {
 16161  1255  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16162  1256  3A01               	xorlw	1
 16163  1257  1D03               	skipz
 16164  1258  2A5E               	goto	i1l728
 16165                           
 16166                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 16167  1259  3028               	movlw	_DimmerLights1& (0+255)
 16168  125A  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16169  125B  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16170  125C  0021               	movlb	1	; select bank1
 16171  125D  00DE               	movwf	_DimmerLightsIntrIOC^(0+128)
 16172  125E                     i1l728:	
 16173                           
 16174                           ;Dimmer_B1.c: 12: }
 16175                           ;Dimmer_B1.c: 15: if (lights == 2) {
 16176  125E  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16177  125F  3A02               	xorlw	2
 16178  1260  1D03               	skipz
 16179  1261  0008               	return
 16180                           
 16181                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 16182  1262  3037               	movlw	_DimmerLights2& (0+255)
 16183  1263  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16184  1264  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16185  1265  0021               	movlb	1	; select bank1
 16186  1266  00DE               	movwf	_DimmerLightsIntrIOC^(0+128)
 16187  1267  0008               	return
 16188  1268                     __end_of_DimmerIntrIOCPointSelect:	
 16189  007E                     btemp	set	126	;btemp
 16190  007E                     pic14e$flags	set	126
 16191  007E                     wtemp	set	126
 16192  007E                     wtemp0	set	126
 16193  0080                     wtemp1	set	128
 16194  0082                     wtemp2	set	130
 16195  0084                     wtemp3	set	132
 16196  0086                     wtemp4	set	134
 16197  0088                     wtemp5	set	136
 16198  007F                     wtemp6	set	127
 16199  007E                     ttemp	set	126
 16200  007E                     ttemp0	set	126
 16201  0081                     ttemp1	set	129
 16202  0084                     ttemp2	set	132
 16203  0087                     ttemp3	set	135
 16204  007F                     ttemp4	set	127
 16205  007E                     ltemp	set	126
 16206  007E                     ltemp0	set	126
 16207  0082                     ltemp1	set	130
 16208  0086                     ltemp2	set	134
 16209  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         196
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     78      80
    BANK1            80      0      76
    BANK2            80      0      78
    BANK3            80      0      69
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _setSw_Enable->_SwPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   76875
                                             74 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1333
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   20098
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   20098
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8871
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8655
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1103
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     866
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     866
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   26890
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   26890
                                             71 BANK0      2     2      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   26214
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1223
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   24991
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10072
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1114
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     990
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     990
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     230
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9401
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    9287
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6355
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1377
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     835
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     114
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9340
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9340
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     472
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     536
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1223
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     264
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     198
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     198
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     13C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Oct 20 17:30:22 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
           ??_setDimmerLights_TriggerAdj 0023                           ___bmul@product 0022  
                                     l96 0953                                       l98 0967  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1445  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 006F       __end_of_getDimmerLights_StatusFlag 11FA  
             _getDimmerLights_StatusFlag 11E9                   __end_of_setDelayOff_GO 0B5E  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0CA0  
                           ___ftadd@sign 0048                                      l110 07F2  
                                    l106 07F8                                      l107 07F4  
                                    l108 07E2                                      l255 0A0E  
                                    l328 1272                                      l329 1273  
                                    l372 14D3                                      l780 124B  
                                    _GIE 005F                                      _CRC 00DA  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00DF  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00D3                                      _ISR 0004  
                                    _Sw1 0146                                      _Sw2 014F  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 127C  
                  _Buzzer_Initialization 1FEE                          __end_of_ADC_Set 108C  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0E6E  
                  _setDimmerLights_AdjRF 14AB                    _setDimmerLights_AdjGo 11C9  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1127                             ___ftdiv@sign 003D  
                                   l2013 15FA                                     l2031 12D8  
                                   l1307 176E                                     l2045 0826  
               ?_DimmerLightsPointSelect 0070                                     l1444 168D  
                                   l1285 1402                                     l1298 15C4  
                                   l2362 118C                                     l1459 16ED  
                        __end_of_IOC_Set 1134                                     l5103 0382  
                                   l6001 142C                                     l5121 03AB  
                                   l2722 03F2                                     l6003 142F  
                                   l5131 03CD                                     l5211 05E0  
                                   l5061 0A55                                     l5053 0A3F  
                                   l5141 03EE                                     l5133 03D1  
                                   l5109 0391                                     l6007 1435  
                                   l5127 03BE                                     l5057 0A46  
                                   l5145 0404                                     l5129 03C8  
                                   l5241 064D                                     l5233 0639  
                                   l5217 05F6                                     l6201 0DE2  
                                   l5403 08E4                                     l5067 0A6E  
                                   l5059 0A50                                     l6051 1648  
                                   l5139 03E4                                     l5315 1232  
                                   l6211 0894                                     l1972 0B7E  
                                   l5333 1287                                     l5421 090A  
                                   l5413 08EC                                     l5069 0A76  
                                   l2693 0A69                                     l5261 0F07  
                                   l5149 0416                                     l5245 0655  
                                   l5229 0631                                     l5415 08F8  
                                   l5087 1450                                     l5175 06AA  
                                   l6039 11F3                                     l5159 0431  
                                   l5319 1238                                     l6215 08A1  
                                   l5425 0913                                     l5169 0694  
                                   l5281 0F45                                     l1977 0BA3  
                                   l2699 0A80                                     l5291 0F5E  
                                   l1995 1181                                     l5099 037B  
                                   l1979 0BB4                                     l6261 1716  
                                   l5429 091B                                     l5197 0704  
                                   l5189 06EB                                     l7213 0AAD  
                                   l5349 156D                                     l6245 0C7C  
                                   l6181 0DA1                                     l6271 1726  
                                   l5295 0F6C                                     l5287 0F52  
                                   l5279 0F37                                     l7223 0ABD  
                                   l7231 0AC9                                     l5551 0B36  
                                   l7311 0FF7                                     l7303 0FE5  
                                   l6265 171C                                     l5289 0F5B  
                                   l5481 0C21                                     l5385 129B  
                                   l7209 0AA7                                     l7217 0AB3  
                                   l6097 15AC                                     l6601 1739  
                                   l5553 0B43                                     l5721 0743  
                                   l6177 0D94                                     l6275 172C  
                                   l6259 1713                                     l7243 0AE7  
                                   l7227 0AC3                                     l7411 17B3  
                                   l5627 160A                                     l5547 0B30  
                                   l5731 0767                                     l7307 0FEE  
                                   l7323 0848                                     l6269 1723  
                                   l5397 08D9                                     l5901 0A14  
                                   l5557 0B4F                                     l7239 0AE1  
                                   l7247 0AED                                     l6607 174E  
                                   l7407 17AC                                     l5911 0A24  
                                   l5903 0A17                                     l5735 077D  
                                   l7335 085E                                     l6711 1191  
                                   l7193 1473                                     l7361 0CB4  
                                   l7275 0EC2                                     l5915 0A2A  
                                   l5907 0A1D                                     l6715 1197  
                                   l6731 021E                                     l5773 1350  
                                   l7197 147E                                     l7373 0CDC  
                                   l7365 0CBE                                     l5677 131D  
                                   l5933 0D1D                                     l5909 0A21  
                                   l7293 0FC1                                     l7429 0B72  
                                   l6741 022E                                     l6733 0224  
                                   l5767 1347                                     l7375 0CE2  
                                   l5679 1321                                     l5783 1492  
                                   l5943 0D2F                                     l5927 0D14  
                                   l5935 0D20                                     l5759 0814  
                                   l6743 0236                                     l5769 134A  
                                   l7385 0D0A                                     l6921 04BB  
                                   l5785 1495                                     l5945 0D32  
                                   l5929 0D17                                     l7449 0B8E  
                                   l6827 07CC                                     l5883 09E6  
                                   l7299 0FDC                                     l5789 149B  
                                   l5965 0D49                                     l5949 0D38  
                                   l5877 09DD                                     l6781 02CE  
                                   l6757 0263                                     l5967 0D60  
                                   l5879 09E0                                     l6767 0290  
                                   l6791 0300                                     l5993 14E4  
                                   l5897 09F7                                     l5995 14EF  
                  _myMain_Initialization 119A                                     l6995 16D6  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4205 090B  
                                   u3415 0A71                                     u4075 1559  
                                   u4165 08EF                                     u3445 0A87  
                                   u4270 0BCF                                     u3375 0A4B  
                                   u4185 08F9                                     u3625 03D2  
                                   u4195 0903                                     u3395 0A64  
                                   u4275 0BCD                                     _PEIE 005E  
                                   u3725 06BC                                     u3565 03AC  
                                   u3805 0602                                     u4535 1336  
                                   u3735 06CC                                     u3655 03E5  
                                   u3815 0612                                     u3745 06EC  
                                   u3755 06FB                                     u3915 0F0E  
                                   u3595 03BF                                     u3835 063A  
                                   u3765 0705                                     u3845 0640  
                                   u3945 0F38                                     u3875 0656  
                                   u6285 07C2                                     u3885 065C  
                                   u3975 0F53                                     u6465 13F9  
                                   u4965 14D9                                     u6485 16BE  
                                   u6495 16E5                                     _LWLO 0CAD  
                                   _RFSW 00E0                                     _TMR0 0015  
                                   _RSSI 00E1                                     _WREN 0CAA  
                                   _Buz1 00C7                                     _main 166F  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0E6E  
                        __end_of_RF_Main 1069                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1093                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 083B  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D                                    ??_ISR 0077  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 111A  
          __end_of_DimmerIntrPointSelect 121D                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 002A                                    ?_main 006A  
                        __end_of___awdiv 0922                          __end_of___ftadd 0449  
                          __CFG_WDTE$OFF 0000                          __end_of___ftdiv 0726  
                        __end_of___ftmul 067D                          ___awdiv@divisor 0020  
                        __end_of___fttol 0F75             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l728 125E  
                                  i1l737 1214                   _setDimmerLights_Switch 11A9  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EA                                    _RFSW2 00EB  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                __end_of_Timeout_Counter 133F                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 13C6               _setDimmerLights_IntrIOC_GO 13A7  
                       __end_of_TMR0_ISR 151B             __size_of_CC2500_WriteCommand 0019  
                       __end_of_TMR0_Set 10B3                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 16EF              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E0  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0012            __end_of_setLED_Initialization 122F  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 0BC5              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
                         setSw_Status@sw 0023         __size_of_DelayOff_Initialization 0008  
              setDimmerLights_Main@clear 0065                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 097B                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 16AD                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 106D                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0EEE  
                   _setSw_Initialization 10B3                                   ??_main 006E  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0F75                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1254                   ?_setDimmerLights_AdjRF 0070  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 008F  
                       ??_setRFSW_Status 0023                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 005E                              _DlyOff_Main 0DF4  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 0069  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                         __end_of___awtoft 1467  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0A97  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 11B9  
                                 i1l6401 010A                                   i1l6403 0110  
                                 i1l6413 0143                                   i1l6423 0172  
                                 i1l6425 0178                                   i1l6409 012C  
                                 i1l6417 0157                                   i1l6435 01AA  
                                 i1l6453 01DB                                   i1l6373 00A0  
                                 i1l6439 01B0                                   i1l6457 01E1  
                                 i1l6377 00A7                                   i1l6395 00F1  
                                 i1l6397 00F7                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   u545_25 007B  
                                 _OSCCON 0099                                   u639_25 1514  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 1358                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 107E           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 12CD                                   _Dimmer 00DB  
                                 _DlySw1 0158                                   _DlySw2 015D  
             __end_of_Mcu_Initialization 117C                      __end_of_Buzzer_Main 07FF  
                                 _Memory 01A0                                   _Timer0 0120  
     __end_of_setDimmerLights_TriggerAdj 11E9               _setDimmerLights_TriggerAdj 11D9  
                                 ___bmul 122F            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00E5                                   _s_data 00E6  
                                 _setLED 0A97                                   _myMain 00B5  
                       _DimmerLightsIntr 007A                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 0922         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                                ??_my_Main 002D  
    __end_of_setDimmerLights_IntrControl 0207              _setDimmerLights_IntrControl 0042  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ?_Timeout_Counter 0070                    __end_of_SwPointSelect 12A4  
                          ?_setRF_Enable 0070                          _RfSWPointSelect 12CD  
           __size_of_Flash_Memory_Modify 0044        setDimmerLights_IntrControl@lights 0076  
            __size_of_DimmerLights_Close 0014                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 118B                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 09D6         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 003E              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1404                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1102                ??_setControl_Lights_Table 0067  
                       ??_DelayTimejudge 0024              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0024  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 1072  
               __end_of_setDimmerReClock 109B                       __size_of_getRxData 0047  
                    ?_LED_Initialization 0070                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0020                           _DimmerLights11 00DC  
                         _DimmerLights22 00DD                     __size_of_setLED_Main 0044  
              ??_setDimmerLights_Trigger 0023                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK0 006F  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0070  
                            _Buzzer_Main 07B5                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 109B  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0079                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0008  
                            setBuz@count 002C                               __pmaintext 166F  
                    _CC2500_WriteCommand 133F                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 0077  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00B9                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1085  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020             __end_of_setRF_Initialization 1093  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 0800  
                __end_of_RfSWPointSelect 12E3                        Sw_DimmerOnFunc@sw 0063  
                                _IOC_ISR 111A                                  _IOC_Set 1127  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 13E5                        _Flash_Memory_Read 1371  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0072  
                 __size_of_CC2500_TxData 0060                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 00A0                                  _RF_Main 1066  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
        __end_of_setControl_Lights_Table 1000                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 0D82  
                        _setPercentValue 17BA                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E7  
           __end_of_CC2500_FrequencyCabr 10F6                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 120B                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0166  
                                _VarLED2 016A                        __end_of_getRxData 0882  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1268  
        __end_of_setDimmerLights_Trigger 11C9                     ??_setRFSW_AdjControl 0064  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 11B9  
                                ___awdiv 08CE                                  ___ftadd 0353  
                         ??_setSw_Enable 0022                                  ___ftdiv 067D  
                                ___ftmul 05C9                                  ___fttol 0EEE  
                    __end_of_Switch_Main 10CB                  ??_Buzzer_Initialization 0020  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0061                     setRFSW_AdjControl@sw 0066  
                        __size_of_setBuz 0059                           ??_setSw_Status 0023  
                                __ptext1 16AD                                  __ptext2 138B  
                                __ptext3 1141                                  __ptext4 119A  
                                __ptext5 10C3                                  __ptext6 0207  
                                __ptext7 10BB                                  __ptext8 0D82  
                                __ptext9 0C31                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0062                    _DimmerIntrPointSelect 120B  
                           __size_of_ISR 000F                __end_of_Flash_Memory_Main 1404  
              __end_of_Flash_Memory_Read 138B                               _setRF_Main 0B5E  
                ??_myMain_Initialization 0020                            _DelayOff_Main 10A3  
                      _DimmerLights_Main 10DF                                  _my_Main 16AD  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 10DF               __end_of_CC2500_ClearRXFIFO 1FF8  
             __end_of_CC2500_ClearTXFIFO 1FFC            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1467  
                    _DelayOffPointSelect 127C                                  clrloop0 1079  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1141  
                   end_of_initialization 003E                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 151B                            _DelayTime_1us 14CE  
                      __end_of_setTxData 05C9               __end_of_Flash_Memory_Write 15CB  
                                init_ram 1072                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1073                               _setSw_Main 0207  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1489  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 121D  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0D10                            _CC2500_TxData 09D6  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 114F  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 1732  
                           __pstringtext 1000                      _Flash_Memory_Unlock 10CB  
                    ??_CC2500_ReadStatus 0022         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 10EA                       _Mcu_Initialization 116D  
               __size_of_CC2500_PowerRST 0043                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$4866 0067  
                        _setSw_Main$4867 0068                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1489                  __end_of_Sw_DimmerOnFunc 0DF4  
                __end_of_setPercentValue 1800                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 1545                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1632  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 14AB  
                          ?_RF_RxDisable 0070                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1371                     _setRF_Initialization 108C  
                            _Switch_Main 10C3                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1241                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 12B8                     ??_Mcu_Initialization 0020  
                  ??_DelayOffPointSelect 0020                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1241                __size_of_Sw_DimmerAdjFunc 004C  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1254  
                      __size_of_TMR0_ISR 0027                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 12F9  
          __size_of_setDimmerLights_Main 0070                           __end_of_setLED 0AF8  
                         __end_of_setBuz 097B          _getDimmerLights_StatusFlag$1884 0022  
                   _CC2500_FrequencyCabr 10EA                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0726  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 15FD                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 12B8                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 13E5  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 13A7  
                           ?_Buzzer_Main 0070                       _set_TimeoutCleared 106D  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0018  
                              _VarErrLED 0162                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 116D                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                __size_of_setRFSW_Status 000F                __size_of_CC2500_WriteByte 0014  
                    ?_set_TimeoutCleared 0070                                _Rx_Length 00E2  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00E3                              __pdataBANK3 01C5  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                         _CC2500_SIDLEMode 1FFC  
             __size_of_DimmerLights_Main 000B                __end_of_setRF_DimmerValue 1632  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4073 0068  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                      setRF_Enable@command 0020  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0080                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 007A  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 0128  
                          _DimmerLights2 0137                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                    __size_of_setRF_Main 0067                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                                _getBuz_GO 11FA  
    __end_of_Flash_Memory_Initialization 0510              _Flash_Memory_Initialization 0449  
                               ?___awdiv 0020                                __ptext100 106D  
                              __ptext101 1327                                __ptext110 1093  
                              __ptext102 1268                                __ptext111 13A7  
                              __ptext103 07B5                                __ptext112 1254  
                              __ptext104 1FEE                                __ptext106 14F4  
                              __ptext107 0042                                __ptext108 120B  
                              __ptext109 111A                                 ?___ftadd 003E  
                              _getRxData 083B                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 07B5            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1FF1  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 119A  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 014C             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 14CE            __end_of_setDimmerLights_AdjGo 11D9  
                 CC2500_WriteByte@loop_a 0021                                 ?_my_Main 0070  
                              _r_address 00E4           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 11A9  
                           _setRF_Enable 1141                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1290                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 17BA                      _DimmerLightsIntrIOC 00DE  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 102F  
                               _LED_Main 110E                          SwPointSelect@sw 0021  
                              clear_ram0 1078                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0510      __end_of_DimmerLights_Initialization 1310  
            _DimmerLights_Initialization 12F9                       _CC2500_ClearRXFIFO 1FF4  
                     _CC2500_ClearTXFIFO 1FF8           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 10C3                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003B  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 159C  
                             ?_getRxData 0070                                 _TMR0_ISR 14F4  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                               _TMR0_Set 10AB                         _Sw_DimmerAdjFunc 0882  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00D8  
                   __end_of_RF_RxDisable 118B              __end_of_CC2500_WriteCommand 1358  
                 ??_CC2500_FrequencyCabr 0026                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0C31  
                __size_of_setDelayOff_GO 0066                    __size_of_setSw_Enable 001C  
                               _DelayOff 0078                             setSw_Main@sw 0069  
       setDimmerLights_IntrIOC_GO@lights 0072                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1102                           ?_SwPointSelect 0070  
                         setLED_Main@led 0024                      __end_of_setLog_Code 15FD  
                  _DlyOff_Initialization 10D4                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1069                    _Switch_Initialization 1134  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 114F                             _setMemory_GO 12E3  
                   __size_of_Buzzer_Main 004A                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1268             Flash_Memory_Initialization@i 005E  
                      setRFSW_Control@sw 0063                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 138B  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                               ___awtoft 1445                         ??_LedPointSelect 0020  
                               ___ftpack 0A36                             _setSw_Status 115E  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1776                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0C31                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E                         __size_of_my_Main 0042  
                               __ptext10 0882                                 __ptext11 11D9  
                               __ptext20 0F75                                 __ptext12 11C9  
                               __ptext21 0726                                 __ptext13 1134  
                               __ptext30 0353                                 __ptext22 0AF8  
                               __ptext14 10B3                                 __ptext31 11FA  
                               __ptext23 1545                                 __ptext15 118B  
                               __ptext40 10AB                                 __ptext32 117C  
                               __ptext24 122F                                 __ptext16 1066  
                               __ptext41 1358                                 __ptext33 09D6  
                               __ptext25 0800                                 __ptext17 0B5E  
                               __ptext50 1732                                 __ptext42 1127  
                               __ptext34 0D10                                 __ptext26 15FD  
                               __ptext18 083B                                 __ptext51 10F6  
                               __ptext43 1069                                 __ptext35 1489  
                               __ptext27 14AB                                 __ptext19 15CB  
                               __ptext60 0A97                                 __ptext52 0449  
                               __ptext44 1085                                 __ptext36 1310  
                               __ptext28 097B                                 __ptext61 1467  
                               __ptext53 159C                                 __ptext45 110E  
                               __ptext37 1FF1                                 __ptext29 05C9  
                               __ptext70 0510                                 __ptext62 12A4  
                               __ptext54 10CB                                 __ptext46 1776  
                               __ptext38 108C                                 __ptext71 115E  
                               __ptext63 12E3                                 __ptext55 1371  
                               __ptext47 1102                                 __ptext39 116D  
                               __ptext80 12CD                                 __ptext72 1290  
                               __ptext64 11E9                                 __ptext56 10DF  
                               __ptext48 121D                                 __ptext81 11B9  
                               __ptext73 0BC5                                 __ptext65 12F9  
                               __ptext57 0CA0                                 __ptext49 13E5  
                               __ptext90 1FFC                                 __ptext82 11A9  
                               __ptext74 17BA                                 __ptext66 156F  
                               __ptext58 1632                                 __ptext91 16EF  
                               __ptext83 1241                                 __ptext75 0EEE  
                               __ptext67 107E                                 __ptext59 0E6E  
                               __ptext92 151B                                 __ptext84 0922  
                               __ptext76 067D                                 __ptext68 10A3  
                               __ptext93 13C6                                 __ptext85 08CE  
                               __ptext77 1445                                 __ptext69 0DF4  
                               __ptext94 1424                                 __ptext86 109B  
                               __ptext78 0A36                                 __ptext95 10EA  
                               __ptext87 10D4                                 __ptext79 114F  
                               __ptext96 14CE                                 __ptext88 127C  
                               __ptext97 1FF8                                 __ptext89 12B8  
                               __ptext98 1FF4                                 __ptext99 133F  
                               __product 01C5            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 115E  
          __end_of_Dimmer_Initialization 1085             __end_of_setDimmerLights_Main 0D10  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 003E                              _setRF_Learn 10BB  
               __end_of_CC2500_SIDLEMode 2000               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1290               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 12A4                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 0008                          _CC2500_ReadByte 1310  
                     _CC2500_InitPATable 13C6      __size_of_getDimmerLights_StatusFlag 0011  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0BC5  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 000F  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 006A                                 main@argv 006C  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 16EF  
            __end_of_Flash_Memory_Modify 1776                        ??_getPercentValue 0059  
                            _setLog_Code 15CB              __end_of_Flash_Memory_Unlock 10D4  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1424  
                     __end_of_setSw_Main 0353                            _Transceive_OK 03E1  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 1545  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0072                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 159C  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 156F              __end_of_setDimmerLights_Adj 166F  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1FF1  
   __size_of_setDimmerLights_IntrControl 01C5                     _Flash_Memory_Erasing 10F6  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
        __end_of_DelayOff_Initialization 10A3      __size_of_setDimmerLights_IntrIOC_GO 001F  
                             _OPTION_REG 0095                    __end_of_DelayOff_Main 10AB  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 0AF8  
       __size_of_setControl_Lights_Table 008B                   __end_of_DelayTimejudge 156F  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 14F4  
               __end_of_Sw_DimmerAdjFunc 08CE                  __end_of_CC2500_ReadByte 1327  
           __end_of_setSw_Initialization 10BB                          _Timeout_Counter 1327  
                   getPercentValue@value 005B                             _RF_RxDisable 117C  
             __end_of_LED_Initialization 110E         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 0072                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1FF4  
               __end_of_Sw_DimmerOffFunc 0CA0          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    __end_of_CC2500_RxData 0D82  
                  __end_of_CC2500_TxData 0A36                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1732  
