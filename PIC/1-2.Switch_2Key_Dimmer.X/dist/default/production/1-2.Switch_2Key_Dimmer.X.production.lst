

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Nov 07 17:31:14 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	intentry,global,class=CODE,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	dabs	1,0x7E,2
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0008                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  0010                     	;# 
   160  0011                     	;# 
   161  0012                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0016                     	;# 
   165  0017                     	;# 
   166  0018                     	;# 
   167  0019                     	;# 
   168  001A                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  0090                     	;# 
   175  0091                     	;# 
   176  0092                     	;# 
   177  0095                     	;# 
   178  0096                     	;# 
   179  0097                     	;# 
   180  0099                     	;# 
   181  009A                     	;# 
   182  009B                     	;# 
   183  009B                     	;# 
   184  009C                     	;# 
   185  009D                     	;# 
   186  009E                     	;# 
   187  010C                     	;# 
   188  010D                     	;# 
   189  010E                     	;# 
   190  0116                     	;# 
   191  0117                     	;# 
   192  011D                     	;# 
   193  018C                     	;# 
   194  018D                     	;# 
   195  018E                     	;# 
   196  0191                     	;# 
   197  0191                     	;# 
   198  0192                     	;# 
   199  0193                     	;# 
   200  0193                     	;# 
   201  0194                     	;# 
   202  0195                     	;# 
   203  0196                     	;# 
   204  0197                     	;# 
   205  0199                     	;# 
   206  019A                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  019C                     	;# 
   213  019D                     	;# 
   214  019E                     	;# 
   215  019F                     	;# 
   216  020D                     	;# 
   217  0210                     	;# 
   218  0211                     	;# 
   219  0211                     	;# 
   220  0212                     	;# 
   221  0212                     	;# 
   222  0213                     	;# 
   223  0213                     	;# 
   224  0214                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0216                     	;# 
   230  0216                     	;# 
   231  0217                     	;# 
   232  0217                     	;# 
   233  0291                     	;# 
   234  0291                     	;# 
   235  0292                     	;# 
   236  0293                     	;# 
   237  0298                     	;# 
   238  0298                     	;# 
   239  0299                     	;# 
   240  029A                     	;# 
   241  0394                     	;# 
   242  0395                     	;# 
   243  0396                     	;# 
   244  0FE4                     	;# 
   245  0FE5                     	;# 
   246  0FE6                     	;# 
   247  0FE7                     	;# 
   248  0FE8                     	;# 
   249  0FE9                     	;# 
   250  0FEA                     	;# 
   251  0FEB                     	;# 
   252  0FED                     	;# 
   253  0FEE                     	;# 
   254  0FEF                     	;# 
   255  0000                     	;# 
   256  0001                     	;# 
   257  0002                     	;# 
   258  0003                     	;# 
   259  0004                     	;# 
   260  0005                     	;# 
   261  0006                     	;# 
   262  0007                     	;# 
   263  0008                     	;# 
   264  0009                     	;# 
   265  000A                     	;# 
   266  000B                     	;# 
   267  000C                     	;# 
   268  000D                     	;# 
   269  000E                     	;# 
   270  0010                     	;# 
   271  0011                     	;# 
   272  0012                     	;# 
   273  0015                     	;# 
   274  0016                     	;# 
   275  0016                     	;# 
   276  0017                     	;# 
   277  0018                     	;# 
   278  0019                     	;# 
   279  001A                     	;# 
   280  001B                     	;# 
   281  001C                     	;# 
   282  008C                     	;# 
   283  008D                     	;# 
   284  008E                     	;# 
   285  0090                     	;# 
   286  0091                     	;# 
   287  0092                     	;# 
   288  0095                     	;# 
   289  0096                     	;# 
   290  0097                     	;# 
   291  0099                     	;# 
   292  009A                     	;# 
   293  009B                     	;# 
   294  009B                     	;# 
   295  009C                     	;# 
   296  009D                     	;# 
   297  009E                     	;# 
   298  010C                     	;# 
   299  010D                     	;# 
   300  010E                     	;# 
   301  0116                     	;# 
   302  0117                     	;# 
   303  011D                     	;# 
   304  018C                     	;# 
   305  018D                     	;# 
   306  018E                     	;# 
   307  0191                     	;# 
   308  0191                     	;# 
   309  0192                     	;# 
   310  0193                     	;# 
   311  0193                     	;# 
   312  0194                     	;# 
   313  0195                     	;# 
   314  0196                     	;# 
   315  0197                     	;# 
   316  0199                     	;# 
   317  019A                     	;# 
   318  019B                     	;# 
   319  019B                     	;# 
   320  019B                     	;# 
   321  019B                     	;# 
   322  019C                     	;# 
   323  019C                     	;# 
   324  019D                     	;# 
   325  019E                     	;# 
   326  019F                     	;# 
   327  020D                     	;# 
   328  0210                     	;# 
   329  0211                     	;# 
   330  0211                     	;# 
   331  0212                     	;# 
   332  0212                     	;# 
   333  0213                     	;# 
   334  0213                     	;# 
   335  0214                     	;# 
   336  0214                     	;# 
   337  0215                     	;# 
   338  0215                     	;# 
   339  0215                     	;# 
   340  0216                     	;# 
   341  0216                     	;# 
   342  0217                     	;# 
   343  0217                     	;# 
   344  0291                     	;# 
   345  0291                     	;# 
   346  0292                     	;# 
   347  0293                     	;# 
   348  0298                     	;# 
   349  0298                     	;# 
   350  0299                     	;# 
   351  029A                     	;# 
   352  0394                     	;# 
   353  0395                     	;# 
   354  0396                     	;# 
   355  0FE4                     	;# 
   356  0FE5                     	;# 
   357  0FE6                     	;# 
   358  0FE7                     	;# 
   359  0FE8                     	;# 
   360  0FE9                     	;# 
   361  0FEA                     	;# 
   362  0FEB                     	;# 
   363  0FED                     	;# 
   364  0FEE                     	;# 
   365  0FEF                     	;# 
   366  0000                     	;# 
   367  0001                     	;# 
   368  0002                     	;# 
   369  0003                     	;# 
   370  0004                     	;# 
   371  0005                     	;# 
   372  0006                     	;# 
   373  0007                     	;# 
   374  0008                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000D                     	;# 
   380  000E                     	;# 
   381  0010                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0015                     	;# 
   385  0016                     	;# 
   386  0016                     	;# 
   387  0017                     	;# 
   388  0018                     	;# 
   389  0019                     	;# 
   390  001A                     	;# 
   391  001B                     	;# 
   392  001C                     	;# 
   393  008C                     	;# 
   394  008D                     	;# 
   395  008E                     	;# 
   396  0090                     	;# 
   397  0091                     	;# 
   398  0092                     	;# 
   399  0095                     	;# 
   400  0096                     	;# 
   401  0097                     	;# 
   402  0099                     	;# 
   403  009A                     	;# 
   404  009B                     	;# 
   405  009B                     	;# 
   406  009C                     	;# 
   407  009D                     	;# 
   408  009E                     	;# 
   409  010C                     	;# 
   410  010D                     	;# 
   411  010E                     	;# 
   412  0116                     	;# 
   413  0117                     	;# 
   414  011D                     	;# 
   415  018C                     	;# 
   416  018D                     	;# 
   417  018E                     	;# 
   418  0191                     	;# 
   419  0191                     	;# 
   420  0192                     	;# 
   421  0193                     	;# 
   422  0193                     	;# 
   423  0194                     	;# 
   424  0195                     	;# 
   425  0196                     	;# 
   426  0197                     	;# 
   427  0199                     	;# 
   428  019A                     	;# 
   429  019B                     	;# 
   430  019B                     	;# 
   431  019B                     	;# 
   432  019B                     	;# 
   433  019C                     	;# 
   434  019C                     	;# 
   435  019D                     	;# 
   436  019E                     	;# 
   437  019F                     	;# 
   438  020D                     	;# 
   439  0210                     	;# 
   440  0211                     	;# 
   441  0211                     	;# 
   442  0212                     	;# 
   443  0212                     	;# 
   444  0213                     	;# 
   445  0213                     	;# 
   446  0214                     	;# 
   447  0214                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0216                     	;# 
   452  0216                     	;# 
   453  0217                     	;# 
   454  0217                     	;# 
   455  0291                     	;# 
   456  0291                     	;# 
   457  0292                     	;# 
   458  0293                     	;# 
   459  0298                     	;# 
   460  0298                     	;# 
   461  0299                     	;# 
   462  029A                     	;# 
   463  0394                     	;# 
   464  0395                     	;# 
   465  0396                     	;# 
   466  0FE4                     	;# 
   467  0FE5                     	;# 
   468  0FE6                     	;# 
   469  0FE7                     	;# 
   470  0FE8                     	;# 
   471  0FE9                     	;# 
   472  0FEA                     	;# 
   473  0FEB                     	;# 
   474  0FED                     	;# 
   475  0FEE                     	;# 
   476  0FEF                     	;# 
   477  0000                     	;# 
   478  0001                     	;# 
   479  0002                     	;# 
   480  0003                     	;# 
   481  0004                     	;# 
   482  0005                     	;# 
   483  0006                     	;# 
   484  0007                     	;# 
   485  0008                     	;# 
   486  0009                     	;# 
   487  000A                     	;# 
   488  000B                     	;# 
   489  000C                     	;# 
   490  000D                     	;# 
   491  000E                     	;# 
   492  0010                     	;# 
   493  0011                     	;# 
   494  0012                     	;# 
   495  0015                     	;# 
   496  0016                     	;# 
   497  0016                     	;# 
   498  0017                     	;# 
   499  0018                     	;# 
   500  0019                     	;# 
   501  001A                     	;# 
   502  001B                     	;# 
   503  001C                     	;# 
   504  008C                     	;# 
   505  008D                     	;# 
   506  008E                     	;# 
   507  0090                     	;# 
   508  0091                     	;# 
   509  0092                     	;# 
   510  0095                     	;# 
   511  0096                     	;# 
   512  0097                     	;# 
   513  0099                     	;# 
   514  009A                     	;# 
   515  009B                     	;# 
   516  009B                     	;# 
   517  009C                     	;# 
   518  009D                     	;# 
   519  009E                     	;# 
   520  010C                     	;# 
   521  010D                     	;# 
   522  010E                     	;# 
   523  0116                     	;# 
   524  0117                     	;# 
   525  011D                     	;# 
   526  018C                     	;# 
   527  018D                     	;# 
   528  018E                     	;# 
   529  0191                     	;# 
   530  0191                     	;# 
   531  0192                     	;# 
   532  0193                     	;# 
   533  0193                     	;# 
   534  0194                     	;# 
   535  0195                     	;# 
   536  0196                     	;# 
   537  0197                     	;# 
   538  0199                     	;# 
   539  019A                     	;# 
   540  019B                     	;# 
   541  019B                     	;# 
   542  019B                     	;# 
   543  019B                     	;# 
   544  019C                     	;# 
   545  019C                     	;# 
   546  019D                     	;# 
   547  019E                     	;# 
   548  019F                     	;# 
   549  020D                     	;# 
   550  0210                     	;# 
   551  0211                     	;# 
   552  0211                     	;# 
   553  0212                     	;# 
   554  0212                     	;# 
   555  0213                     	;# 
   556  0213                     	;# 
   557  0214                     	;# 
   558  0214                     	;# 
   559  0215                     	;# 
   560  0215                     	;# 
   561  0215                     	;# 
   562  0216                     	;# 
   563  0216                     	;# 
   564  0217                     	;# 
   565  0217                     	;# 
   566  0291                     	;# 
   567  0291                     	;# 
   568  0292                     	;# 
   569  0293                     	;# 
   570  0298                     	;# 
   571  0298                     	;# 
   572  0299                     	;# 
   573  029A                     	;# 
   574  0394                     	;# 
   575  0395                     	;# 
   576  0396                     	;# 
   577  0FE4                     	;# 
   578  0FE5                     	;# 
   579  0FE6                     	;# 
   580  0FE7                     	;# 
   581  0FE8                     	;# 
   582  0FE9                     	;# 
   583  0FEA                     	;# 
   584  0FEB                     	;# 
   585  0FED                     	;# 
   586  0FEE                     	;# 
   587  0FEF                     	;# 
   588  0000                     	;# 
   589  0001                     	;# 
   590  0002                     	;# 
   591  0003                     	;# 
   592  0004                     	;# 
   593  0005                     	;# 
   594  0006                     	;# 
   595  0007                     	;# 
   596  0008                     	;# 
   597  0009                     	;# 
   598  000A                     	;# 
   599  000B                     	;# 
   600  000C                     	;# 
   601  000D                     	;# 
   602  000E                     	;# 
   603  0010                     	;# 
   604  0011                     	;# 
   605  0012                     	;# 
   606  0015                     	;# 
   607  0016                     	;# 
   608  0016                     	;# 
   609  0017                     	;# 
   610  0018                     	;# 
   611  0019                     	;# 
   612  001A                     	;# 
   613  001B                     	;# 
   614  001C                     	;# 
   615  008C                     	;# 
   616  008D                     	;# 
   617  008E                     	;# 
   618  0090                     	;# 
   619  0091                     	;# 
   620  0092                     	;# 
   621  0095                     	;# 
   622  0096                     	;# 
   623  0097                     	;# 
   624  0099                     	;# 
   625  009A                     	;# 
   626  009B                     	;# 
   627  009B                     	;# 
   628  009C                     	;# 
   629  009D                     	;# 
   630  009E                     	;# 
   631  010C                     	;# 
   632  010D                     	;# 
   633  010E                     	;# 
   634  0116                     	;# 
   635  0117                     	;# 
   636  011D                     	;# 
   637  018C                     	;# 
   638  018D                     	;# 
   639  018E                     	;# 
   640  0191                     	;# 
   641  0191                     	;# 
   642  0192                     	;# 
   643  0193                     	;# 
   644  0193                     	;# 
   645  0194                     	;# 
   646  0195                     	;# 
   647  0196                     	;# 
   648  0197                     	;# 
   649  0199                     	;# 
   650  019A                     	;# 
   651  019B                     	;# 
   652  019B                     	;# 
   653  019B                     	;# 
   654  019B                     	;# 
   655  019C                     	;# 
   656  019C                     	;# 
   657  019D                     	;# 
   658  019E                     	;# 
   659  019F                     	;# 
   660  020D                     	;# 
   661  0210                     	;# 
   662  0211                     	;# 
   663  0211                     	;# 
   664  0212                     	;# 
   665  0212                     	;# 
   666  0213                     	;# 
   667  0213                     	;# 
   668  0214                     	;# 
   669  0214                     	;# 
   670  0215                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0216                     	;# 
   674  0216                     	;# 
   675  0217                     	;# 
   676  0217                     	;# 
   677  0291                     	;# 
   678  0291                     	;# 
   679  0292                     	;# 
   680  0293                     	;# 
   681  0298                     	;# 
   682  0298                     	;# 
   683  0299                     	;# 
   684  029A                     	;# 
   685  0394                     	;# 
   686  0395                     	;# 
   687  0396                     	;# 
   688  0FE4                     	;# 
   689  0FE5                     	;# 
   690  0FE6                     	;# 
   691  0FE7                     	;# 
   692  0FE8                     	;# 
   693  0FE9                     	;# 
   694  0FEA                     	;# 
   695  0FEB                     	;# 
   696  0FED                     	;# 
   697  0FEE                     	;# 
   698  0FEF                     	;# 
   699  0000                     	;# 
   700  0001                     	;# 
   701  0002                     	;# 
   702  0003                     	;# 
   703  0004                     	;# 
   704  0005                     	;# 
   705  0006                     	;# 
   706  0007                     	;# 
   707  0008                     	;# 
   708  0009                     	;# 
   709  000A                     	;# 
   710  000B                     	;# 
   711  000C                     	;# 
   712  000D                     	;# 
   713  000E                     	;# 
   714  0010                     	;# 
   715  0011                     	;# 
   716  0012                     	;# 
   717  0015                     	;# 
   718  0016                     	;# 
   719  0016                     	;# 
   720  0017                     	;# 
   721  0018                     	;# 
   722  0019                     	;# 
   723  001A                     	;# 
   724  001B                     	;# 
   725  001C                     	;# 
   726  008C                     	;# 
   727  008D                     	;# 
   728  008E                     	;# 
   729  0090                     	;# 
   730  0091                     	;# 
   731  0092                     	;# 
   732  0095                     	;# 
   733  0096                     	;# 
   734  0097                     	;# 
   735  0099                     	;# 
   736  009A                     	;# 
   737  009B                     	;# 
   738  009B                     	;# 
   739  009C                     	;# 
   740  009D                     	;# 
   741  009E                     	;# 
   742  010C                     	;# 
   743  010D                     	;# 
   744  010E                     	;# 
   745  0116                     	;# 
   746  0117                     	;# 
   747  011D                     	;# 
   748  018C                     	;# 
   749  018D                     	;# 
   750  018E                     	;# 
   751  0191                     	;# 
   752  0191                     	;# 
   753  0192                     	;# 
   754  0193                     	;# 
   755  0193                     	;# 
   756  0194                     	;# 
   757  0195                     	;# 
   758  0196                     	;# 
   759  0197                     	;# 
   760  0199                     	;# 
   761  019A                     	;# 
   762  019B                     	;# 
   763  019B                     	;# 
   764  019B                     	;# 
   765  019B                     	;# 
   766  019C                     	;# 
   767  019C                     	;# 
   768  019D                     	;# 
   769  019E                     	;# 
   770  019F                     	;# 
   771  020D                     	;# 
   772  0210                     	;# 
   773  0211                     	;# 
   774  0211                     	;# 
   775  0212                     	;# 
   776  0212                     	;# 
   777  0213                     	;# 
   778  0213                     	;# 
   779  0214                     	;# 
   780  0214                     	;# 
   781  0215                     	;# 
   782  0215                     	;# 
   783  0215                     	;# 
   784  0216                     	;# 
   785  0216                     	;# 
   786  0217                     	;# 
   787  0217                     	;# 
   788  0291                     	;# 
   789  0291                     	;# 
   790  0292                     	;# 
   791  0293                     	;# 
   792  0298                     	;# 
   793  0298                     	;# 
   794  0299                     	;# 
   795  029A                     	;# 
   796  0394                     	;# 
   797  0395                     	;# 
   798  0396                     	;# 
   799  0FE4                     	;# 
   800  0FE5                     	;# 
   801  0FE6                     	;# 
   802  0FE7                     	;# 
   803  0FE8                     	;# 
   804  0FE9                     	;# 
   805  0FEA                     	;# 
   806  0FEB                     	;# 
   807  0FED                     	;# 
   808  0FEE                     	;# 
   809  0FEF                     	;# 
   810  0000                     	;# 
   811  0001                     	;# 
   812  0002                     	;# 
   813  0003                     	;# 
   814  0004                     	;# 
   815  0005                     	;# 
   816  0006                     	;# 
   817  0007                     	;# 
   818  0008                     	;# 
   819  0009                     	;# 
   820  000A                     	;# 
   821  000B                     	;# 
   822  000C                     	;# 
   823  000D                     	;# 
   824  000E                     	;# 
   825  0010                     	;# 
   826  0011                     	;# 
   827  0012                     	;# 
   828  0015                     	;# 
   829  0016                     	;# 
   830  0016                     	;# 
   831  0017                     	;# 
   832  0018                     	;# 
   833  0019                     	;# 
   834  001A                     	;# 
   835  001B                     	;# 
   836  001C                     	;# 
   837  008C                     	;# 
   838  008D                     	;# 
   839  008E                     	;# 
   840  0090                     	;# 
   841  0091                     	;# 
   842  0092                     	;# 
   843  0095                     	;# 
   844  0096                     	;# 
   845  0097                     	;# 
   846  0099                     	;# 
   847  009A                     	;# 
   848  009B                     	;# 
   849  009B                     	;# 
   850  009C                     	;# 
   851  009D                     	;# 
   852  009E                     	;# 
   853  010C                     	;# 
   854  010D                     	;# 
   855  010E                     	;# 
   856  0116                     	;# 
   857  0117                     	;# 
   858  011D                     	;# 
   859  018C                     	;# 
   860  018D                     	;# 
   861  018E                     	;# 
   862  0191                     	;# 
   863  0191                     	;# 
   864  0192                     	;# 
   865  0193                     	;# 
   866  0193                     	;# 
   867  0194                     	;# 
   868  0195                     	;# 
   869  0196                     	;# 
   870  0197                     	;# 
   871  0199                     	;# 
   872  019A                     	;# 
   873  019B                     	;# 
   874  019B                     	;# 
   875  019B                     	;# 
   876  019B                     	;# 
   877  019C                     	;# 
   878  019C                     	;# 
   879  019D                     	;# 
   880  019E                     	;# 
   881  019F                     	;# 
   882  020D                     	;# 
   883  0210                     	;# 
   884  0211                     	;# 
   885  0211                     	;# 
   886  0212                     	;# 
   887  0212                     	;# 
   888  0213                     	;# 
   889  0213                     	;# 
   890  0214                     	;# 
   891  0214                     	;# 
   892  0215                     	;# 
   893  0215                     	;# 
   894  0215                     	;# 
   895  0216                     	;# 
   896  0216                     	;# 
   897  0217                     	;# 
   898  0217                     	;# 
   899  0291                     	;# 
   900  0291                     	;# 
   901  0292                     	;# 
   902  0293                     	;# 
   903  0298                     	;# 
   904  0298                     	;# 
   905  0299                     	;# 
   906  029A                     	;# 
   907  0394                     	;# 
   908  0395                     	;# 
   909  0396                     	;# 
   910  0FE4                     	;# 
   911  0FE5                     	;# 
   912  0FE6                     	;# 
   913  0FE7                     	;# 
   914  0FE8                     	;# 
   915  0FE9                     	;# 
   916  0FEA                     	;# 
   917  0FEB                     	;# 
   918  0FED                     	;# 
   919  0FEE                     	;# 
   920  0FEF                     	;# 
   921  0000                     	;# 
   922  0001                     	;# 
   923  0002                     	;# 
   924  0003                     	;# 
   925  0004                     	;# 
   926  0005                     	;# 
   927  0006                     	;# 
   928  0007                     	;# 
   929  0008                     	;# 
   930  0009                     	;# 
   931  000A                     	;# 
   932  000B                     	;# 
   933  000C                     	;# 
   934  000D                     	;# 
   935  000E                     	;# 
   936  0010                     	;# 
   937  0011                     	;# 
   938  0012                     	;# 
   939  0015                     	;# 
   940  0016                     	;# 
   941  0016                     	;# 
   942  0017                     	;# 
   943  0018                     	;# 
   944  0019                     	;# 
   945  001A                     	;# 
   946  001B                     	;# 
   947  001C                     	;# 
   948  008C                     	;# 
   949  008D                     	;# 
   950  008E                     	;# 
   951  0090                     	;# 
   952  0091                     	;# 
   953  0092                     	;# 
   954  0095                     	;# 
   955  0096                     	;# 
   956  0097                     	;# 
   957  0099                     	;# 
   958  009A                     	;# 
   959  009B                     	;# 
   960  009B                     	;# 
   961  009C                     	;# 
   962  009D                     	;# 
   963  009E                     	;# 
   964  010C                     	;# 
   965  010D                     	;# 
   966  010E                     	;# 
   967  0116                     	;# 
   968  0117                     	;# 
   969  011D                     	;# 
   970  018C                     	;# 
   971  018D                     	;# 
   972  018E                     	;# 
   973  0191                     	;# 
   974  0191                     	;# 
   975  0192                     	;# 
   976  0193                     	;# 
   977  0193                     	;# 
   978  0194                     	;# 
   979  0195                     	;# 
   980  0196                     	;# 
   981  0197                     	;# 
   982  0199                     	;# 
   983  019A                     	;# 
   984  019B                     	;# 
   985  019B                     	;# 
   986  019B                     	;# 
   987  019B                     	;# 
   988  019C                     	;# 
   989  019C                     	;# 
   990  019D                     	;# 
   991  019E                     	;# 
   992  019F                     	;# 
   993  020D                     	;# 
   994  0210                     	;# 
   995  0211                     	;# 
   996  0211                     	;# 
   997  0212                     	;# 
   998  0212                     	;# 
   999  0213                     	;# 
  1000  0213                     	;# 
  1001  0214                     	;# 
  1002  0214                     	;# 
  1003  0215                     	;# 
  1004  0215                     	;# 
  1005  0215                     	;# 
  1006  0216                     	;# 
  1007  0216                     	;# 
  1008  0217                     	;# 
  1009  0217                     	;# 
  1010  0291                     	;# 
  1011  0291                     	;# 
  1012  0292                     	;# 
  1013  0293                     	;# 
  1014  0298                     	;# 
  1015  0298                     	;# 
  1016  0299                     	;# 
  1017  029A                     	;# 
  1018  0394                     	;# 
  1019  0395                     	;# 
  1020  0396                     	;# 
  1021  0FE4                     	;# 
  1022  0FE5                     	;# 
  1023  0FE6                     	;# 
  1024  0FE7                     	;# 
  1025  0FE8                     	;# 
  1026  0FE9                     	;# 
  1027  0FEA                     	;# 
  1028  0FEB                     	;# 
  1029  0FED                     	;# 
  1030  0FEE                     	;# 
  1031  0FEF                     	;# 
  1032  0000                     	;# 
  1033  0001                     	;# 
  1034  0002                     	;# 
  1035  0003                     	;# 
  1036  0004                     	;# 
  1037  0005                     	;# 
  1038  0006                     	;# 
  1039  0007                     	;# 
  1040  0008                     	;# 
  1041  0009                     	;# 
  1042  000A                     	;# 
  1043  000B                     	;# 
  1044  000C                     	;# 
  1045  000D                     	;# 
  1046  000E                     	;# 
  1047  0010                     	;# 
  1048  0011                     	;# 
  1049  0012                     	;# 
  1050  0015                     	;# 
  1051  0016                     	;# 
  1052  0016                     	;# 
  1053  0017                     	;# 
  1054  0018                     	;# 
  1055  0019                     	;# 
  1056  001A                     	;# 
  1057  001B                     	;# 
  1058  001C                     	;# 
  1059  008C                     	;# 
  1060  008D                     	;# 
  1061  008E                     	;# 
  1062  0090                     	;# 
  1063  0091                     	;# 
  1064  0092                     	;# 
  1065  0095                     	;# 
  1066  0096                     	;# 
  1067  0097                     	;# 
  1068  0099                     	;# 
  1069  009A                     	;# 
  1070  009B                     	;# 
  1071  009B                     	;# 
  1072  009C                     	;# 
  1073  009D                     	;# 
  1074  009E                     	;# 
  1075  010C                     	;# 
  1076  010D                     	;# 
  1077  010E                     	;# 
  1078  0116                     	;# 
  1079  0117                     	;# 
  1080  011D                     	;# 
  1081  018C                     	;# 
  1082  018D                     	;# 
  1083  018E                     	;# 
  1084  0191                     	;# 
  1085  0191                     	;# 
  1086  0192                     	;# 
  1087  0193                     	;# 
  1088  0193                     	;# 
  1089  0194                     	;# 
  1090  0195                     	;# 
  1091  0196                     	;# 
  1092  0197                     	;# 
  1093  0199                     	;# 
  1094  019A                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019B                     	;# 
  1099  019C                     	;# 
  1100  019C                     	;# 
  1101  019D                     	;# 
  1102  019E                     	;# 
  1103  019F                     	;# 
  1104  020D                     	;# 
  1105  0210                     	;# 
  1106  0211                     	;# 
  1107  0211                     	;# 
  1108  0212                     	;# 
  1109  0212                     	;# 
  1110  0213                     	;# 
  1111  0213                     	;# 
  1112  0214                     	;# 
  1113  0214                     	;# 
  1114  0215                     	;# 
  1115  0215                     	;# 
  1116  0215                     	;# 
  1117  0216                     	;# 
  1118  0216                     	;# 
  1119  0217                     	;# 
  1120  0217                     	;# 
  1121  0291                     	;# 
  1122  0291                     	;# 
  1123  0292                     	;# 
  1124  0293                     	;# 
  1125  0298                     	;# 
  1126  0298                     	;# 
  1127  0299                     	;# 
  1128  029A                     	;# 
  1129  0394                     	;# 
  1130  0395                     	;# 
  1131  0396                     	;# 
  1132  0FE4                     	;# 
  1133  0FE5                     	;# 
  1134  0FE6                     	;# 
  1135  0FE7                     	;# 
  1136  0FE8                     	;# 
  1137  0FE9                     	;# 
  1138  0FEA                     	;# 
  1139  0FEB                     	;# 
  1140  0FED                     	;# 
  1141  0FEE                     	;# 
  1142  0FEF                     	;# 
  1143  0000                     	;# 
  1144  0001                     	;# 
  1145  0002                     	;# 
  1146  0003                     	;# 
  1147  0004                     	;# 
  1148  0005                     	;# 
  1149  0006                     	;# 
  1150  0007                     	;# 
  1151  0008                     	;# 
  1152  0009                     	;# 
  1153  000A                     	;# 
  1154  000B                     	;# 
  1155  000C                     	;# 
  1156  000D                     	;# 
  1157  000E                     	;# 
  1158  0010                     	;# 
  1159  0011                     	;# 
  1160  0012                     	;# 
  1161  0015                     	;# 
  1162  0016                     	;# 
  1163  0016                     	;# 
  1164  0017                     	;# 
  1165  0018                     	;# 
  1166  0019                     	;# 
  1167  001A                     	;# 
  1168  001B                     	;# 
  1169  001C                     	;# 
  1170  008C                     	;# 
  1171  008D                     	;# 
  1172  008E                     	;# 
  1173  0090                     	;# 
  1174  0091                     	;# 
  1175  0092                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0097                     	;# 
  1179  0099                     	;# 
  1180  009A                     	;# 
  1181  009B                     	;# 
  1182  009B                     	;# 
  1183  009C                     	;# 
  1184  009D                     	;# 
  1185  009E                     	;# 
  1186  010C                     	;# 
  1187  010D                     	;# 
  1188  010E                     	;# 
  1189  0116                     	;# 
  1190  0117                     	;# 
  1191  011D                     	;# 
  1192  018C                     	;# 
  1193  018D                     	;# 
  1194  018E                     	;# 
  1195  0191                     	;# 
  1196  0191                     	;# 
  1197  0192                     	;# 
  1198  0193                     	;# 
  1199  0193                     	;# 
  1200  0194                     	;# 
  1201  0195                     	;# 
  1202  0196                     	;# 
  1203  0197                     	;# 
  1204  0199                     	;# 
  1205  019A                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019C                     	;# 
  1211  019C                     	;# 
  1212  019D                     	;# 
  1213  019E                     	;# 
  1214  019F                     	;# 
  1215  020D                     	;# 
  1216  0210                     	;# 
  1217  0211                     	;# 
  1218  0211                     	;# 
  1219  0212                     	;# 
  1220  0212                     	;# 
  1221  0213                     	;# 
  1222  0213                     	;# 
  1223  0214                     	;# 
  1224  0214                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0216                     	;# 
  1229  0216                     	;# 
  1230  0217                     	;# 
  1231  0217                     	;# 
  1232  0291                     	;# 
  1233  0291                     	;# 
  1234  0292                     	;# 
  1235  0293                     	;# 
  1236  0298                     	;# 
  1237  0298                     	;# 
  1238  0299                     	;# 
  1239  029A                     	;# 
  1240  0394                     	;# 
  1241  0395                     	;# 
  1242  0396                     	;# 
  1243  0FE4                     	;# 
  1244  0FE5                     	;# 
  1245  0FE6                     	;# 
  1246  0FE7                     	;# 
  1247  0FE8                     	;# 
  1248  0FE9                     	;# 
  1249  0FEA                     	;# 
  1250  0FEB                     	;# 
  1251  0FED                     	;# 
  1252  0FEE                     	;# 
  1253  0FEF                     	;# 
  1254  0000                     	;# 
  1255  0001                     	;# 
  1256  0002                     	;# 
  1257  0003                     	;# 
  1258  0004                     	;# 
  1259  0005                     	;# 
  1260  0006                     	;# 
  1261  0007                     	;# 
  1262  0008                     	;# 
  1263  0009                     	;# 
  1264  000A                     	;# 
  1265  000B                     	;# 
  1266  000C                     	;# 
  1267  000D                     	;# 
  1268  000E                     	;# 
  1269  0010                     	;# 
  1270  0011                     	;# 
  1271  0012                     	;# 
  1272  0015                     	;# 
  1273  0016                     	;# 
  1274  0016                     	;# 
  1275  0017                     	;# 
  1276  0018                     	;# 
  1277  0019                     	;# 
  1278  001A                     	;# 
  1279  001B                     	;# 
  1280  001C                     	;# 
  1281  008C                     	;# 
  1282  008D                     	;# 
  1283  008E                     	;# 
  1284  0090                     	;# 
  1285  0091                     	;# 
  1286  0092                     	;# 
  1287  0095                     	;# 
  1288  0096                     	;# 
  1289  0097                     	;# 
  1290  0099                     	;# 
  1291  009A                     	;# 
  1292  009B                     	;# 
  1293  009B                     	;# 
  1294  009C                     	;# 
  1295  009D                     	;# 
  1296  009E                     	;# 
  1297  010C                     	;# 
  1298  010D                     	;# 
  1299  010E                     	;# 
  1300  0116                     	;# 
  1301  0117                     	;# 
  1302  011D                     	;# 
  1303  018C                     	;# 
  1304  018D                     	;# 
  1305  018E                     	;# 
  1306  0191                     	;# 
  1307  0191                     	;# 
  1308  0192                     	;# 
  1309  0193                     	;# 
  1310  0193                     	;# 
  1311  0194                     	;# 
  1312  0195                     	;# 
  1313  0196                     	;# 
  1314  0197                     	;# 
  1315  0199                     	;# 
  1316  019A                     	;# 
  1317  019B                     	;# 
  1318  019B                     	;# 
  1319  019B                     	;# 
  1320  019B                     	;# 
  1321  019C                     	;# 
  1322  019C                     	;# 
  1323  019D                     	;# 
  1324  019E                     	;# 
  1325  019F                     	;# 
  1326  020D                     	;# 
  1327  0210                     	;# 
  1328  0211                     	;# 
  1329  0211                     	;# 
  1330  0212                     	;# 
  1331  0212                     	;# 
  1332  0213                     	;# 
  1333  0213                     	;# 
  1334  0214                     	;# 
  1335  0214                     	;# 
  1336  0215                     	;# 
  1337  0215                     	;# 
  1338  0215                     	;# 
  1339  0216                     	;# 
  1340  0216                     	;# 
  1341  0217                     	;# 
  1342  0217                     	;# 
  1343  0291                     	;# 
  1344  0291                     	;# 
  1345  0292                     	;# 
  1346  0293                     	;# 
  1347  0298                     	;# 
  1348  0298                     	;# 
  1349  0299                     	;# 
  1350  029A                     	;# 
  1351  0394                     	;# 
  1352  0395                     	;# 
  1353  0396                     	;# 
  1354  0FE4                     	;# 
  1355  0FE5                     	;# 
  1356  0FE6                     	;# 
  1357  0FE7                     	;# 
  1358  0FE8                     	;# 
  1359  0FE9                     	;# 
  1360  0FEA                     	;# 
  1361  0FEB                     	;# 
  1362  0FED                     	;# 
  1363  0FEE                     	;# 
  1364  0FEF                     	;# 
  1365  0000                     	;# 
  1366  0001                     	;# 
  1367  0002                     	;# 
  1368  0003                     	;# 
  1369  0004                     	;# 
  1370  0005                     	;# 
  1371  0006                     	;# 
  1372  0007                     	;# 
  1373  0008                     	;# 
  1374  0009                     	;# 
  1375  000A                     	;# 
  1376  000B                     	;# 
  1377  000C                     	;# 
  1378  000D                     	;# 
  1379  000E                     	;# 
  1380  0010                     	;# 
  1381  0011                     	;# 
  1382  0012                     	;# 
  1383  0015                     	;# 
  1384  0016                     	;# 
  1385  0016                     	;# 
  1386  0017                     	;# 
  1387  0018                     	;# 
  1388  0019                     	;# 
  1389  001A                     	;# 
  1390  001B                     	;# 
  1391  001C                     	;# 
  1392  008C                     	;# 
  1393  008D                     	;# 
  1394  008E                     	;# 
  1395  0090                     	;# 
  1396  0091                     	;# 
  1397  0092                     	;# 
  1398  0095                     	;# 
  1399  0096                     	;# 
  1400  0097                     	;# 
  1401  0099                     	;# 
  1402  009A                     	;# 
  1403  009B                     	;# 
  1404  009B                     	;# 
  1405  009C                     	;# 
  1406  009D                     	;# 
  1407  009E                     	;# 
  1408  010C                     	;# 
  1409  010D                     	;# 
  1410  010E                     	;# 
  1411  0116                     	;# 
  1412  0117                     	;# 
  1413  011D                     	;# 
  1414  018C                     	;# 
  1415  018D                     	;# 
  1416  018E                     	;# 
  1417  0191                     	;# 
  1418  0191                     	;# 
  1419  0192                     	;# 
  1420  0193                     	;# 
  1421  0193                     	;# 
  1422  0194                     	;# 
  1423  0195                     	;# 
  1424  0196                     	;# 
  1425  0197                     	;# 
  1426  0199                     	;# 
  1427  019A                     	;# 
  1428  019B                     	;# 
  1429  019B                     	;# 
  1430  019B                     	;# 
  1431  019B                     	;# 
  1432  019C                     	;# 
  1433  019C                     	;# 
  1434  019D                     	;# 
  1435  019E                     	;# 
  1436  019F                     	;# 
  1437  020D                     	;# 
  1438  0210                     	;# 
  1439  0211                     	;# 
  1440  0211                     	;# 
  1441  0212                     	;# 
  1442  0212                     	;# 
  1443  0213                     	;# 
  1444  0213                     	;# 
  1445  0214                     	;# 
  1446  0214                     	;# 
  1447  0215                     	;# 
  1448  0215                     	;# 
  1449  0215                     	;# 
  1450  0216                     	;# 
  1451  0216                     	;# 
  1452  0217                     	;# 
  1453  0217                     	;# 
  1454  0291                     	;# 
  1455  0291                     	;# 
  1456  0292                     	;# 
  1457  0293                     	;# 
  1458  0298                     	;# 
  1459  0298                     	;# 
  1460  0299                     	;# 
  1461  029A                     	;# 
  1462  0394                     	;# 
  1463  0395                     	;# 
  1464  0396                     	;# 
  1465  0FE4                     	;# 
  1466  0FE5                     	;# 
  1467  0FE6                     	;# 
  1468  0FE7                     	;# 
  1469  0FE8                     	;# 
  1470  0FE9                     	;# 
  1471  0FEA                     	;# 
  1472  0FEB                     	;# 
  1473  0FED                     	;# 
  1474  0FEE                     	;# 
  1475  0FEF                     	;# 
  1476  0000                     	;# 
  1477  0001                     	;# 
  1478  0002                     	;# 
  1479  0003                     	;# 
  1480  0004                     	;# 
  1481  0005                     	;# 
  1482  0006                     	;# 
  1483  0007                     	;# 
  1484  0008                     	;# 
  1485  0009                     	;# 
  1486  000A                     	;# 
  1487  000B                     	;# 
  1488  000C                     	;# 
  1489  000D                     	;# 
  1490  000E                     	;# 
  1491  0010                     	;# 
  1492  0011                     	;# 
  1493  0012                     	;# 
  1494  0015                     	;# 
  1495  0016                     	;# 
  1496  0016                     	;# 
  1497  0017                     	;# 
  1498  0018                     	;# 
  1499  0019                     	;# 
  1500  001A                     	;# 
  1501  001B                     	;# 
  1502  001C                     	;# 
  1503  008C                     	;# 
  1504  008D                     	;# 
  1505  008E                     	;# 
  1506  0090                     	;# 
  1507  0091                     	;# 
  1508  0092                     	;# 
  1509  0095                     	;# 
  1510  0096                     	;# 
  1511  0097                     	;# 
  1512  0099                     	;# 
  1513  009A                     	;# 
  1514  009B                     	;# 
  1515  009B                     	;# 
  1516  009C                     	;# 
  1517  009D                     	;# 
  1518  009E                     	;# 
  1519  010C                     	;# 
  1520  010D                     	;# 
  1521  010E                     	;# 
  1522  0116                     	;# 
  1523  0117                     	;# 
  1524  011D                     	;# 
  1525  018C                     	;# 
  1526  018D                     	;# 
  1527  018E                     	;# 
  1528  0191                     	;# 
  1529  0191                     	;# 
  1530  0192                     	;# 
  1531  0193                     	;# 
  1532  0193                     	;# 
  1533  0194                     	;# 
  1534  0195                     	;# 
  1535  0196                     	;# 
  1536  0197                     	;# 
  1537  0199                     	;# 
  1538  019A                     	;# 
  1539  019B                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019B                     	;# 
  1543  019C                     	;# 
  1544  019C                     	;# 
  1545  019D                     	;# 
  1546  019E                     	;# 
  1547  019F                     	;# 
  1548  020D                     	;# 
  1549  0210                     	;# 
  1550  0211                     	;# 
  1551  0211                     	;# 
  1552  0212                     	;# 
  1553  0212                     	;# 
  1554  0213                     	;# 
  1555  0213                     	;# 
  1556  0214                     	;# 
  1557  0214                     	;# 
  1558  0215                     	;# 
  1559  0215                     	;# 
  1560  0215                     	;# 
  1561  0216                     	;# 
  1562  0216                     	;# 
  1563  0217                     	;# 
  1564  0217                     	;# 
  1565  0291                     	;# 
  1566  0291                     	;# 
  1567  0292                     	;# 
  1568  0293                     	;# 
  1569  0298                     	;# 
  1570  0298                     	;# 
  1571  0299                     	;# 
  1572  029A                     	;# 
  1573  0394                     	;# 
  1574  0395                     	;# 
  1575  0396                     	;# 
  1576  0FE4                     	;# 
  1577  0FE5                     	;# 
  1578  0FE6                     	;# 
  1579  0FE7                     	;# 
  1580  0FE8                     	;# 
  1581  0FE9                     	;# 
  1582  0FEA                     	;# 
  1583  0FEB                     	;# 
  1584  0FED                     	;# 
  1585  0FEE                     	;# 
  1586  0FEF                     	;# 
  1587  0000                     	;# 
  1588  0001                     	;# 
  1589  0002                     	;# 
  1590  0003                     	;# 
  1591  0004                     	;# 
  1592  0005                     	;# 
  1593  0006                     	;# 
  1594  0007                     	;# 
  1595  0008                     	;# 
  1596  0009                     	;# 
  1597  000A                     	;# 
  1598  000B                     	;# 
  1599  000C                     	;# 
  1600  000D                     	;# 
  1601  000E                     	;# 
  1602  0010                     	;# 
  1603  0011                     	;# 
  1604  0012                     	;# 
  1605  0015                     	;# 
  1606  0016                     	;# 
  1607  0016                     	;# 
  1608  0017                     	;# 
  1609  0018                     	;# 
  1610  0019                     	;# 
  1611  001A                     	;# 
  1612  001B                     	;# 
  1613  001C                     	;# 
  1614  008C                     	;# 
  1615  008D                     	;# 
  1616  008E                     	;# 
  1617  0090                     	;# 
  1618  0091                     	;# 
  1619  0092                     	;# 
  1620  0095                     	;# 
  1621  0096                     	;# 
  1622  0097                     	;# 
  1623  0099                     	;# 
  1624  009A                     	;# 
  1625  009B                     	;# 
  1626  009B                     	;# 
  1627  009C                     	;# 
  1628  009D                     	;# 
  1629  009E                     	;# 
  1630  010C                     	;# 
  1631  010D                     	;# 
  1632  010E                     	;# 
  1633  0116                     	;# 
  1634  0117                     	;# 
  1635  011D                     	;# 
  1636  018C                     	;# 
  1637  018D                     	;# 
  1638  018E                     	;# 
  1639  0191                     	;# 
  1640  0191                     	;# 
  1641  0192                     	;# 
  1642  0193                     	;# 
  1643  0193                     	;# 
  1644  0194                     	;# 
  1645  0195                     	;# 
  1646  0196                     	;# 
  1647  0197                     	;# 
  1648  0199                     	;# 
  1649  019A                     	;# 
  1650  019B                     	;# 
  1651  019B                     	;# 
  1652  019B                     	;# 
  1653  019B                     	;# 
  1654  019C                     	;# 
  1655  019C                     	;# 
  1656  019D                     	;# 
  1657  019E                     	;# 
  1658  019F                     	;# 
  1659  020D                     	;# 
  1660  0210                     	;# 
  1661  0211                     	;# 
  1662  0211                     	;# 
  1663  0212                     	;# 
  1664  0212                     	;# 
  1665  0213                     	;# 
  1666  0213                     	;# 
  1667  0214                     	;# 
  1668  0214                     	;# 
  1669  0215                     	;# 
  1670  0215                     	;# 
  1671  0215                     	;# 
  1672  0216                     	;# 
  1673  0216                     	;# 
  1674  0217                     	;# 
  1675  0217                     	;# 
  1676  0291                     	;# 
  1677  0291                     	;# 
  1678  0292                     	;# 
  1679  0293                     	;# 
  1680  0298                     	;# 
  1681  0298                     	;# 
  1682  0299                     	;# 
  1683  029A                     	;# 
  1684  0394                     	;# 
  1685  0395                     	;# 
  1686  0396                     	;# 
  1687  0FE4                     	;# 
  1688  0FE5                     	;# 
  1689  0FE6                     	;# 
  1690  0FE7                     	;# 
  1691  0FE8                     	;# 
  1692  0FE9                     	;# 
  1693  0FEA                     	;# 
  1694  0FEB                     	;# 
  1695  0FED                     	;# 
  1696  0FEE                     	;# 
  1697  0FEF                     	;# 
  1698  0000                     	;# 
  1699  0001                     	;# 
  1700  0002                     	;# 
  1701  0003                     	;# 
  1702  0004                     	;# 
  1703  0005                     	;# 
  1704  0006                     	;# 
  1705  0007                     	;# 
  1706  0008                     	;# 
  1707  0009                     	;# 
  1708  000A                     	;# 
  1709  000B                     	;# 
  1710  000C                     	;# 
  1711  000D                     	;# 
  1712  000E                     	;# 
  1713  0010                     	;# 
  1714  0011                     	;# 
  1715  0012                     	;# 
  1716  0015                     	;# 
  1717  0016                     	;# 
  1718  0016                     	;# 
  1719  0017                     	;# 
  1720  0018                     	;# 
  1721  0019                     	;# 
  1722  001A                     	;# 
  1723  001B                     	;# 
  1724  001C                     	;# 
  1725  008C                     	;# 
  1726  008D                     	;# 
  1727  008E                     	;# 
  1728  0090                     	;# 
  1729  0091                     	;# 
  1730  0092                     	;# 
  1731  0095                     	;# 
  1732  0096                     	;# 
  1733  0097                     	;# 
  1734  0099                     	;# 
  1735  009A                     	;# 
  1736  009B                     	;# 
  1737  009B                     	;# 
  1738  009C                     	;# 
  1739  009D                     	;# 
  1740  009E                     	;# 
  1741  010C                     	;# 
  1742  010D                     	;# 
  1743  010E                     	;# 
  1744  0116                     	;# 
  1745  0117                     	;# 
  1746  011D                     	;# 
  1747  018C                     	;# 
  1748  018D                     	;# 
  1749  018E                     	;# 
  1750  0191                     	;# 
  1751  0191                     	;# 
  1752  0192                     	;# 
  1753  0193                     	;# 
  1754  0193                     	;# 
  1755  0194                     	;# 
  1756  0195                     	;# 
  1757  0196                     	;# 
  1758  0197                     	;# 
  1759  0199                     	;# 
  1760  019A                     	;# 
  1761  019B                     	;# 
  1762  019B                     	;# 
  1763  019B                     	;# 
  1764  019B                     	;# 
  1765  019C                     	;# 
  1766  019C                     	;# 
  1767  019D                     	;# 
  1768  019E                     	;# 
  1769  019F                     	;# 
  1770  020D                     	;# 
  1771  0210                     	;# 
  1772  0211                     	;# 
  1773  0211                     	;# 
  1774  0212                     	;# 
  1775  0212                     	;# 
  1776  0213                     	;# 
  1777  0213                     	;# 
  1778  0214                     	;# 
  1779  0214                     	;# 
  1780  0215                     	;# 
  1781  0215                     	;# 
  1782  0215                     	;# 
  1783  0216                     	;# 
  1784  0216                     	;# 
  1785  0217                     	;# 
  1786  0217                     	;# 
  1787  0291                     	;# 
  1788  0291                     	;# 
  1789  0292                     	;# 
  1790  0293                     	;# 
  1791  0298                     	;# 
  1792  0298                     	;# 
  1793  0299                     	;# 
  1794  029A                     	;# 
  1795  0394                     	;# 
  1796  0395                     	;# 
  1797  0396                     	;# 
  1798  0FE4                     	;# 
  1799  0FE5                     	;# 
  1800  0FE6                     	;# 
  1801  0FE7                     	;# 
  1802  0FE8                     	;# 
  1803  0FE9                     	;# 
  1804  0FEA                     	;# 
  1805  0FEB                     	;# 
  1806  0FED                     	;# 
  1807  0FEE                     	;# 
  1808  0FEF                     	;# 
  1809  0000                     	;# 
  1810  0001                     	;# 
  1811  0002                     	;# 
  1812  0003                     	;# 
  1813  0004                     	;# 
  1814  0005                     	;# 
  1815  0006                     	;# 
  1816  0007                     	;# 
  1817  0008                     	;# 
  1818  0009                     	;# 
  1819  000A                     	;# 
  1820  000B                     	;# 
  1821  000C                     	;# 
  1822  000D                     	;# 
  1823  000E                     	;# 
  1824  0010                     	;# 
  1825  0011                     	;# 
  1826  0012                     	;# 
  1827  0015                     	;# 
  1828  0016                     	;# 
  1829  0016                     	;# 
  1830  0017                     	;# 
  1831  0018                     	;# 
  1832  0019                     	;# 
  1833  001A                     	;# 
  1834  001B                     	;# 
  1835  001C                     	;# 
  1836  008C                     	;# 
  1837  008D                     	;# 
  1838  008E                     	;# 
  1839  0090                     	;# 
  1840  0091                     	;# 
  1841  0092                     	;# 
  1842  0095                     	;# 
  1843  0096                     	;# 
  1844  0097                     	;# 
  1845  0099                     	;# 
  1846  009A                     	;# 
  1847  009B                     	;# 
  1848  009B                     	;# 
  1849  009C                     	;# 
  1850  009D                     	;# 
  1851  009E                     	;# 
  1852  010C                     	;# 
  1853  010D                     	;# 
  1854  010E                     	;# 
  1855  0116                     	;# 
  1856  0117                     	;# 
  1857  011D                     	;# 
  1858  018C                     	;# 
  1859  018D                     	;# 
  1860  018E                     	;# 
  1861  0191                     	;# 
  1862  0191                     	;# 
  1863  0192                     	;# 
  1864  0193                     	;# 
  1865  0193                     	;# 
  1866  0194                     	;# 
  1867  0195                     	;# 
  1868  0196                     	;# 
  1869  0197                     	;# 
  1870  0199                     	;# 
  1871  019A                     	;# 
  1872  019B                     	;# 
  1873  019B                     	;# 
  1874  019B                     	;# 
  1875  019B                     	;# 
  1876  019C                     	;# 
  1877  019C                     	;# 
  1878  019D                     	;# 
  1879  019E                     	;# 
  1880  019F                     	;# 
  1881  020D                     	;# 
  1882  0210                     	;# 
  1883  0211                     	;# 
  1884  0211                     	;# 
  1885  0212                     	;# 
  1886  0212                     	;# 
  1887  0213                     	;# 
  1888  0213                     	;# 
  1889  0214                     	;# 
  1890  0214                     	;# 
  1891  0215                     	;# 
  1892  0215                     	;# 
  1893  0215                     	;# 
  1894  0216                     	;# 
  1895  0216                     	;# 
  1896  0217                     	;# 
  1897  0217                     	;# 
  1898  0291                     	;# 
  1899  0291                     	;# 
  1900  0292                     	;# 
  1901  0293                     	;# 
  1902  0298                     	;# 
  1903  0298                     	;# 
  1904  0299                     	;# 
  1905  029A                     	;# 
  1906  0394                     	;# 
  1907  0395                     	;# 
  1908  0396                     	;# 
  1909  0FE4                     	;# 
  1910  0FE5                     	;# 
  1911  0FE6                     	;# 
  1912  0FE7                     	;# 
  1913  0FE8                     	;# 
  1914  0FE9                     	;# 
  1915  0FEA                     	;# 
  1916  0FEB                     	;# 
  1917  0FED                     	;# 
  1918  0FEE                     	;# 
  1919  0FEF                     	;# 
  1920  0000                     	;# 
  1921  0001                     	;# 
  1922  0002                     	;# 
  1923  0003                     	;# 
  1924  0004                     	;# 
  1925  0005                     	;# 
  1926  0006                     	;# 
  1927  0007                     	;# 
  1928  0008                     	;# 
  1929  0009                     	;# 
  1930  000A                     	;# 
  1931  000B                     	;# 
  1932  000C                     	;# 
  1933  000D                     	;# 
  1934  000E                     	;# 
  1935  0010                     	;# 
  1936  0011                     	;# 
  1937  0012                     	;# 
  1938  0015                     	;# 
  1939  0016                     	;# 
  1940  0016                     	;# 
  1941  0017                     	;# 
  1942  0018                     	;# 
  1943  0019                     	;# 
  1944  001A                     	;# 
  1945  001B                     	;# 
  1946  001C                     	;# 
  1947  008C                     	;# 
  1948  008D                     	;# 
  1949  008E                     	;# 
  1950  0090                     	;# 
  1951  0091                     	;# 
  1952  0092                     	;# 
  1953  0095                     	;# 
  1954  0096                     	;# 
  1955  0097                     	;# 
  1956  0099                     	;# 
  1957  009A                     	;# 
  1958  009B                     	;# 
  1959  009B                     	;# 
  1960  009C                     	;# 
  1961  009D                     	;# 
  1962  009E                     	;# 
  1963  010C                     	;# 
  1964  010D                     	;# 
  1965  010E                     	;# 
  1966  0116                     	;# 
  1967  0117                     	;# 
  1968  011D                     	;# 
  1969  018C                     	;# 
  1970  018D                     	;# 
  1971  018E                     	;# 
  1972  0191                     	;# 
  1973  0191                     	;# 
  1974  0192                     	;# 
  1975  0193                     	;# 
  1976  0193                     	;# 
  1977  0194                     	;# 
  1978  0195                     	;# 
  1979  0196                     	;# 
  1980  0197                     	;# 
  1981  0199                     	;# 
  1982  019A                     	;# 
  1983  019B                     	;# 
  1984  019B                     	;# 
  1985  019B                     	;# 
  1986  019B                     	;# 
  1987  019C                     	;# 
  1988  019C                     	;# 
  1989  019D                     	;# 
  1990  019E                     	;# 
  1991  019F                     	;# 
  1992  020D                     	;# 
  1993  0210                     	;# 
  1994  0211                     	;# 
  1995  0211                     	;# 
  1996  0212                     	;# 
  1997  0212                     	;# 
  1998  0213                     	;# 
  1999  0213                     	;# 
  2000  0214                     	;# 
  2001  0214                     	;# 
  2002  0215                     	;# 
  2003  0215                     	;# 
  2004  0215                     	;# 
  2005  0216                     	;# 
  2006  0216                     	;# 
  2007  0217                     	;# 
  2008  0217                     	;# 
  2009  0291                     	;# 
  2010  0291                     	;# 
  2011  0292                     	;# 
  2012  0293                     	;# 
  2013  0298                     	;# 
  2014  0298                     	;# 
  2015  0299                     	;# 
  2016  029A                     	;# 
  2017  0394                     	;# 
  2018  0395                     	;# 
  2019  0396                     	;# 
  2020  0FE4                     	;# 
  2021  0FE5                     	;# 
  2022  0FE6                     	;# 
  2023  0FE7                     	;# 
  2024  0FE8                     	;# 
  2025  0FE9                     	;# 
  2026  0FEA                     	;# 
  2027  0FEB                     	;# 
  2028  0FED                     	;# 
  2029  0FEE                     	;# 
  2030  0FEF                     	;# 
  2031                           
  2032                           	psect	idataBANK4
  2033  1216                     __pidataBANK4:	
  2034                           
  2035                           ;initializer for __product
  2036  1216  3463               	retlw	99
  2037  1217  3402               	retlw	2
  2038  1218  3400               	retlw	0
  2039  1219  3400               	retlw	0
  2040  121A  3400               	retlw	0
  2041  121B  3400               	retlw	0
  2042  121C  3400               	retlw	0
  2043  121D  3400               	retlw	0
  2044  121E  3400               	retlw	0
  2045  121F  3400               	retlw	0
  2046  1220  3400               	retlw	0
  2047  1221  3400               	retlw	0
  2048  1222  34FF               	retlw	255
  2049  1223  34FF               	retlw	255
  2050  1224  34FF               	retlw	255
  2051  1225  3400               	retlw	0
  2052  1226  3400               	retlw	0
  2053  1227  3400               	retlw	0
  2054  1228  3400               	retlw	0
  2055  1229  3400               	retlw	0
  2056  122A  3400               	retlw	0
  2057  122B  3400               	retlw	0
  2058  122C  3400               	retlw	0
  2059  122D  3400               	retlw	0
  2060  122E  3400               	retlw	0
  2061  122F  3400               	retlw	0
  2062  1230  3400               	retlw	0
  2063  1231  3400               	retlw	0
  2064  1232  3400               	retlw	0
  2065  1233  3400               	retlw	0
  2066  1234  3400               	retlw	0
  2067  1235  3400               	retlw	0
  2068                           
  2069                           	psect	stringtext
  2070  1000                     __pstringtext:	
  2071  1000                     _CC2500_registers_address:	
  2072  1000  3403               	retlw	3
  2073  1001  3416               	retlw	22
  2074  1002  3417               	retlw	23
  2075  1003  341E               	retlw	30
  2076  1004  341F               	retlw	31
  2077  1005  3420               	retlw	32
  2078  1006  342A               	retlw	42
  2079  1007  342B               	retlw	43
  2080  1008  340B               	retlw	11
  2081  1009  340C               	retlw	12
  2082  100A  340D               	retlw	13
  2083  100B  340E               	retlw	14
  2084  100C  340F               	retlw	15
  2085  100D  3410               	retlw	16
  2086  100E  3411               	retlw	17
  2087  100F  3412               	retlw	18
  2088  1010  3413               	retlw	19
  2089  1011  3414               	retlw	20
  2090  1012  340A               	retlw	10
  2091  1013  3415               	retlw	21
  2092  1014  3421               	retlw	33
  2093  1015  3422               	retlw	34
  2094  1016  3418               	retlw	24
  2095  1017  3419               	retlw	25
  2096  1018  341A               	retlw	26
  2097  1019  341B               	retlw	27
  2098  101A  341C               	retlw	28
  2099  101B  341D               	retlw	29
  2100  101C  3423               	retlw	35
  2101  101D  3424               	retlw	36
  2102  101E  3425               	retlw	37
  2103  101F  3426               	retlw	38
  2104  1020  3429               	retlw	41
  2105  1021  342C               	retlw	44
  2106  1022  342D               	retlw	45
  2107  1023  342E               	retlw	46
  2108  1024  3400               	retlw	0
  2109  1025  3401               	retlw	1
  2110  1026  3402               	retlw	2
  2111  1027  3407               	retlw	7
  2112  1028  3408               	retlw	8
  2113  1029  3409               	retlw	9
  2114  102A  3406               	retlw	6
  2115  102B  3404               	retlw	4
  2116  102C  3405               	retlw	5
  2117  102D  3427               	retlw	39
  2118  102E  3428               	retlw	40
  2119  102F                     __end_of_CC2500_registers_address:	
  2120  102F                     _CC2500_rfSettings:	
  2121  102F  3407               	retlw	7
  2122  1030  3407               	retlw	7
  2123  1031  3430               	retlw	48
  2124  1032  3487               	retlw	135
  2125  1033  346B               	retlw	107
  2126  1034  34F8               	retlw	248
  2127  1035  347F               	retlw	127
  2128  1036  343F               	retlw	63
  2129  1037  3409               	retlw	9
  2130  1038  3400               	retlw	0
  2131  1039  345C               	retlw	92
  2132  103A  34A7               	retlw	167
  2133  103B  3462               	retlw	98
  2134  103C  3486               	retlw	134
  2135  103D  3483               	retlw	131
  2136  103E  3403               	retlw	3
  2137  103F  3422               	retlw	34
  2138  1040  34F8               	retlw	248
  2139  1041  3400               	retlw	0
  2140  1042  3444               	retlw	68
  2141  1043  34B6               	retlw	182
  2142  1044  3410               	retlw	16
  2143  1045  3418               	retlw	24
  2144  1046  341D               	retlw	29
  2145  1047  341C               	retlw	28
  2146  1048  34C7               	retlw	199
  2147  1049  3400               	retlw	0
  2148  104A  34B2               	retlw	178
  2149  104B  34EA               	retlw	234
  2150  104C  340A               	retlw	10
  2151  104D  3400               	retlw	0
  2152  104E  3411               	retlw	17
  2153  104F  3459               	retlw	89
  2154  1050  3488               	retlw	136
  2155  1051  3431               	retlw	49
  2156  1052  340B               	retlw	11
  2157  1053  342F               	retlw	47
  2158  1054  342E               	retlw	46
  2159  1055  3406               	retlw	6
  2160  1056  3404               	retlw	4
  2161  1057  3405               	retlw	5
  2162  1058  3400               	retlw	0
  2163  1059  3430               	retlw	48
  2164  105A  34D3               	retlw	211
  2165  105B  3491               	retlw	145
  2166  105C  3441               	retlw	65
  2167  105D  3400               	retlw	0
  2168  105E                     __end_of_CC2500_rfSettings:	
  2169  105E                     _CC2500_patable_vaule:	
  2170  105E  34FE               	retlw	254
  2171  105F  34FE               	retlw	254
  2172  1060  34FE               	retlw	254
  2173  1061  34FE               	retlw	254
  2174  1062  34FE               	retlw	254
  2175  1063  34FE               	retlw	254
  2176  1064  34FE               	retlw	254
  2177  1065  34FE               	retlw	254
  2178  1066                     __end_of_CC2500_patable_vaule:	
  2179                           
  2180                           	psect	nvBANK0
  2181  006F                     __pnvBANK0:	
  2182  006F                     _product:	
  2183  006F                     	ds	1
  2184  000C                     _PORTA	set	12
  2185  000D                     _PORTB	set	13
  2186  000E                     _PORTC	set	14
  2187  0018                     _T1CON	set	24
  2188  0017                     _TMR1H	set	23
  2189  0016                     _TMR1L	set	22
  2190  005F                     _GIE	set	95
  2191  005B                     _IOCIE	set	91
  2192  0058                     _IOCIF	set	88
  2193  005E                     _PEIE	set	94
  2194  0060                     _RA0	set	96
  2195  0063                     _RA3	set	99
  2196  0064                     _RA4	set	100
  2197  0066                     _RA6	set	102
  2198  0067                     _RA7	set	103
  2199  0068                     _RB0	set	104
  2200  0069                     _RB1	set	105
  2201  006A                     _RB2	set	106
  2202  006B                     _RB3	set	107
  2203  006C                     _RB4	set	108
  2204  006D                     _RB5	set	109
  2205  0070                     _RC0	set	112
  2206  0071                     _RC1	set	113
  2207  0072                     _RC2	set	114
  2208  0074                     _RC4	set	116
  2209  0075                     _RC5	set	117
  2210  0077                     _RC7	set	119
  2211  0088                     _TMR1IF	set	136
  2212  009D                     _ADCON0	set	157
  2213  009E                     _ADCON1	set	158
  2214  009C                     _ADRESH	set	156
  2215  009B                     _ADRESL	set	155
  2216  0099                     _OSCCON	set	153
  2217  008C                     _TRISA	set	140
  2218  008D                     _TRISB	set	141
  2219  008E                     _TRISC	set	142
  2220  0097                     _WDTCON	set	151
  2221  04E9                     _GO_nDONE	set	1257
  2222  0488                     _TMR1IE	set	1160
  2223  0117                     _FVRCON	set	279
  2224  010C                     _LATA	set	268
  2225  010D                     _LATB	set	269
  2226  010E                     _LATC	set	270
  2227  018C                     _ANSELA	set	396
  2228  018D                     _ANSELB	set	397
  2229  018E                     _ANSELC	set	398
  2230  0192                     _PMADRH	set	402
  2231  0191                     _PMADRL	set	401
  2232  0196                     _PMCON2	set	406
  2233  0194                     _PMDATH	set	404
  2234  0193                     _PMDATL	set	403
  2235  0CAE                     _CFGS	set	3246
  2236  0CAC                     _FREE	set	3244
  2237  0CAD                     _LWLO	set	3245
  2238  0CA8                     _RD	set	3240
  2239  0CA9                     _WR	set	3241
  2240  0CAA                     _WREN	set	3242
  2241  1069                     _WPUB1	set	4201
  2242  106A                     _WPUB2	set	4202
  2243  0396                     _IOCBF	set	918
  2244  0395                     _IOCBN	set	917
  2245  0394                     _IOCBP	set	916
  2246  1CB2                     _IOCBF2	set	7346
  2247                           
  2248                           ; #config settings
  2249  0000                     
  2250                           	psect	cinit
  2251  0015                     start_initialization:	
  2252  0015                     __initialization:	
  2253                           
  2254                           ; Clear objects allocated to BITCOMMON
  2255  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2256                           
  2257                           ; Clear objects allocated to COMMON
  2258  0016  01F0               	clrf	__pbssCOMMON& (0+127)
  2259  0017  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2260  0018  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2261  0019  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2262  001A  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2263  001B  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2264                           
  2265                           ; Clear objects allocated to BANK0
  2266  001C  01ED               	clrf	__pbssBANK0& (0+127)
  2267  001D  01EE               	clrf	(__pbssBANK0+1)& (0+127)
  2268                           
  2269                           ; Clear objects allocated to BANK1
  2270  001E  30A0               	movlw	low __pbssBANK1
  2271  001F  0084               	movwf	4
  2272  0020  3000               	movlw	high __pbssBANK1
  2273  0021  0085               	movwf	5
  2274  0022  304B               	movlw	75
  2275  0023  319E  2601  3180   	fcall	clear_ram0
  2276                           
  2277                           ; Clear objects allocated to BANK2
  2278  0026  3020               	movlw	low __pbssBANK2
  2279  0027  0084               	movwf	4
  2280  0028  3001               	movlw	high __pbssBANK2
  2281  0029  0085               	movwf	5
  2282  002A  304F               	movlw	79
  2283  002B  319E  2601  3180   	fcall	clear_ram0
  2284                           
  2285                           ; Clear objects allocated to BANK3
  2286  002E  30A0               	movlw	low __pbssBANK3
  2287  002F  0084               	movwf	4
  2288  0030  3001               	movlw	high __pbssBANK3
  2289  0031  0085               	movwf	5
  2290  0032  3037               	movlw	55
  2291  0033  319E  2601  3180   	fcall	clear_ram0
  2292                           
  2293                           ; Initialize objects allocated to BANK4
  2294  0036  3016               	movlw	low __pidataBANK4
  2295  0037  0084               	movwf	4
  2296  0038  3092               	movlw	(high __pidataBANK4)| (0+128)
  2297  0039  0085               	movwf	5
  2298  003A  3020               	movlw	low __pdataBANK4
  2299  003B  0086               	movwf	6
  2300  003C  3002               	movlw	high __pdataBANK4
  2301  003D  0087               	movwf	7
  2302  003E  3020               	movlw	32
  2303  003F  319D  25FB         	fcall	init_ram
  2304  0041                     end_of_initialization:	
  2305                           ;End of C runtime variable initialization code
  2306                           
  2307  0041                     __end_of__initialization:	
  2308  0041  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2309  0042  0020               	movlb	0
  2310  0043  3197  2FB2         	ljmp	_main	;jump to C main() function
  2311                           
  2312                           	psect	bitbssCOMMON
  2313  03E0                     __pbitbssCOMMON:	
  2314  03E0                     _Receive_OK:	
  2315  03E0                     	ds	1
  2316  03E1                     _Transceive_OK:	
  2317  03E1                     	ds	1
  2318                           
  2319                           	psect	bssCOMMON
  2320  0070                     __pbssCOMMON:	
  2321  0070                     _DelayOff:	
  2322  0070                     	ds	2
  2323  0072                     _DimmerLightsIntr:	
  2324  0072                     	ds	1
  2325  0073                     _LED:	
  2326  0073                     	ds	1
  2327  0074                     _SPI0Buffer:	
  2328  0074                     	ds	1
  2329  0075                     _SwDetect:	
  2330  0075                     	ds	1
  2331                           
  2332                           	psect	bssBANK0
  2333  006D                     __pbssBANK0:	
  2334  006D                     _DimmerLights:	
  2335  006D                     	ds	1
  2336  006E                     _Sw:	
  2337  006E                     	ds	1
  2338                           
  2339                           	psect	bssBANK1
  2340  00A0                     __pbssBANK1:	
  2341  00A0                     _myMain:	
  2342  00A0                     	ds	16
  2343  00B0                     _Buz1:	
  2344  00B0                     	ds	12
  2345  00BC                     _RF1:	
  2346  00BC                     	ds	12
  2347  00C8                     _Timer1:	
  2348  00C8                     	ds	3
  2349  00CB                     _WDT:	
  2350  00CB                     	ds	2
  2351  00CD                     _CRC:	
  2352  00CD                     	ds	1
  2353  00CE                     _DimmerLights11:	
  2354  00CE                     	ds	1
  2355  00CF                     _DimmerLights22:	
  2356  00CF                     	ds	1
  2357  00D0                     _DimmerLightsIntrIOC:	
  2358  00D0                     	ds	1
  2359  00D1                     _RSSI:	
  2360  00D1                     	ds	1
  2361  00D2                     _Rx_Length:	
  2362  00D2                     	ds	1
  2363  00D3                     _Tx_Length:	
  2364  00D3                     	ds	1
  2365  00D4                     _r_address:	
  2366  00D4                     	ds	1
  2367  00D5                     _r_data:	
  2368  00D5                     	ds	1
  2369  00D6                     _s_data:	
  2370  00D6                     	ds	1
  2371  00D7                     _Temp:	
  2372  00D7                     	ds	18
  2373  00E9                     _DlySw1:	
  2374  00E9                     	ds	2
  2375                           
  2376                           	psect	bssBANK2
  2377  0120                     __pbssBANK2:	
  2378  0120                     _RF_Data:	
  2379  0120                     	ds	30
  2380  013E                     _Dimmer:	
  2381  013E                     	ds	3
  2382  0141                     _RF_Count:	
  2383  0141                     	ds	2
  2384  0143                     _DimmerLights1:	
  2385  0143                     	ds	15
  2386  0152                     _DimmerLights2:	
  2387  0152                     	ds	15
  2388  0161                     _VarErrLED:	
  2389  0161                     	ds	4
  2390  0165                     _VarLED1:	
  2391  0165                     	ds	4
  2392  0169                     _VarLED2:	
  2393  0169                     	ds	4
  2394  016D                     _DlySw2:	
  2395  016D                     	ds	2
  2396                           
  2397                           	psect	bssBANK3
  2398  01A0                     __pbssBANK3:	
  2399  01A0                     _Memory:	
  2400  01A0                     	ds	37
  2401  01C5                     _Sw1:	
  2402  01C5                     	ds	9
  2403  01CE                     _Sw2:	
  2404  01CE                     	ds	9
  2405                           
  2406                           	psect	dataBANK4
  2407  0220                     __pdataBANK4:	
  2408  0220                     __product:	
  2409  0220                     	ds	32
  2410                           
  2411                           	psect	clrtext
  2412  1E01                     clear_ram0:	
  2413                           ;	Called with FSR0 containing the base address, and
  2414                           ;	WREG with the size to clear
  2415                           
  2416  1E01  0064               	clrwdt	;clear the watchdog before getting into this loop
  2417  1E02                     clrloop0:	
  2418  1E02  0180               	clrf	0	;clear RAM location pointed to by FSR
  2419  1E03  3101               	addfsr 0,1
  2420  1E04  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2421  1E05  2E02               	goto	clrloop0	;have we reached the end yet?
  2422  1E06  3400               	retlw	0	;all done for this memory range, return
  2423                           
  2424                           	psect	inittext
  2425  1DFB                     init_ram:	
  2426  1DFB  00FE               	movwf	126
  2427  1DFC                     initloop:	
  2428  1DFC  0012               	moviw fsr0++
  2429  1DFD  001E               	movwi fsr1++
  2430  1DFE  0BFE               	decfsz	126,f
  2431  1DFF  2DFC               	goto	initloop
  2432  1E00  3400               	retlw	0
  2433                           
  2434                           	psect	cstackBANK3
  2435  01D7                     __pcstackBANK3:	
  2436  01D7                     ?_main:	
  2437  01D7                     main@argc:	
  2438                           ; 2 bytes @ 0x0
  2439                           
  2440                           
  2441                           ; 2 bytes @ 0x0
  2442  01D7                     	ds	2
  2443  01D9                     main@argv:	
  2444                           
  2445                           ; 2 bytes @ 0x2
  2446  01D9                     	ds	2
  2447                           
  2448                           	psect	cstackBANK1
  2449  00EB                     __pcstackBANK1:	
  2450  00EB                     ??_Switch_Main:	
  2451  00EB                     setRF_Main@loop_f:	
  2452                           ; 0 bytes @ 0x0
  2453                           
  2454                           
  2455                           ; 1 bytes @ 0x0
  2456  00EB                     	ds	1
  2457  00EC                     setRF_Main@Receive_OK:	
  2458  00EC                     Switch_Main@error:	
  2459                           ; 1 bytes @ 0x1
  2460                           
  2461                           
  2462                           ; 1 bytes @ 0x1
  2463  00EC                     	ds	1
  2464  00ED                     setRF_Main@error:	
  2465                           
  2466                           ; 1 bytes @ 0x2
  2467  00ED                     	ds	1
  2468                           
  2469                           	psect	cstackCOMMON
  2470  0076                     __pcstackCOMMON:	
  2471  0076                     ?_Timeout_Counter:	
  2472  0076                     ?_set_TimeoutCleared:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0076                     ?_CC2500_WriteByte:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0076                     ?_CC2500_WriteCommand:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0076                     ?_CC2500_ReadStatus:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0076                     ?_CC2500_ReadByte:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0076                     ?_CC2500_PowerRST:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0076                     ?_CC2500_InitSetREG:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0076                     ?_CC2500_InitPATable:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0076                     ?_CC2500_ClearTXFIFO:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0076                     ?_CC2500_ClearRXFIFO:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0076                     ?_CC2500_FrequencyCabr:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0076                     ?_CC2500_SIDLEMode:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0076                     ?_DlyOff_Initialization:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0076                     ?_DlyOff_Main:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0076                     ?_setDimmerLights_SwOn:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0076                     ?_setDimmerLights_SwOff:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0076                     ?_setDimmerLights_Initialization:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0076                     ?_Dimmer_Initialization:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0076                     ?_setDimmerLights_Main:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0076                     ?_setTxData:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0076                     ?_setLED_Initialization:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0076                     ?_setLED_Main:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0076                     ?_Fosc_Set:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0076                     ?_IO_Set:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0076                     ?_TMR1_Set:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0076                     ?_ADC_Set:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0076                     ?_IOC_Set:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0076                     ?_WDT_Set:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0076                     ?_IOC_ISR:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0076                     ?_TMR1_ISR:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0076                     ?_Flash_Memory_Write:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0076                     ?_Flash_Memory_Modify:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0076                     ?_WDT_Clearing:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0076                     ?_myMain_Initialization:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0076                     ?_Temp_Initialization:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0076                     ?_Switch_Initialization:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0076                     ?_RF_Initialization:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0076                     ?_getTemp_AD:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0076                     ?_my_MainTimer:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0076                     ?_Temp_Main:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0076                     ?_Switch_Main:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0076                     ?_RF_Main:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0076                     ?_setTemp_Initialization:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0076                     ?_setTemp_Main:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0076                     ?_setRF_Initialization:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0076                     ?_setRF_Main:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0076                     ?_getRxData:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0076                     ?_setLog_Code:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0076                     ?_setControl_Lights_Table:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0076                     ?_setRFSW_Control:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0076                     ?_setRFSW_AdjControl:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0076                     ?_setRF_DimmerValue:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0076                     ?_setSw_Initialization:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0076                     ?_setSw_Main:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0076                     ?_Buzzer_Initialization:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0076                     ?_Buzzer_Main:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0076                     ?_CC2500_TxData:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0076                     ?_CC2500_RxData:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0076                     ?_CC2500_PowerOnInitial:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0076                     ?_DelayOffPointSelect:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0076                     ?_DelayOff_Initialization:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0076                     ?_DelayOff_Main:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0076                     ?_DimmerIntrIOCPointSelect:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0076                     ??_DimmerIntrIOCPointSelect:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0076                     ?_setDimmerLights_IntrIOC_GO:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0076                     ?_DimmerIntrPointSelect:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0076                     ??_DimmerIntrPointSelect:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0076                     ?_setDimmerLights_IntrControl:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0076                     ?_DimmerLightsPointSelect:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0076                     ?_DimmerLights_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0076                     ?_DimmerLights_Main:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0076                     ?_setDimmerLights_AdjControl:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0076                     ?_setDimmerLights_ErrorClose:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0076                     ?_setDimmerLights_AdjRF:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0076                     ?_LedPointSelect:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0076                     ?_LED_Initialization:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0076                     ?_LED_Main:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0076                     ?_Mcu_Initialization:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0076                     ?_ISR:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0076                     ?_setDimmerReClock:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0076                     ?_Flash_Memory_Initialization:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0076                     ?_Flash_Memory_Main:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0076                     ?_Flash_Memory_Unlock:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0076                     ?_Flash_Memory_Erasing:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0076                     ?_setMemory_Modify:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0076                     ?_setMemory_LoopSave:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0076                     ?_WDT_Main:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0076                     ?_setMain_Exception:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0076                     ?_setRF_Learn:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0076                     ?_TouchPower:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0076                     ?_SwPointSelect:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0076                     ?_getDimmerLights_Status:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0076                     ?_DelayTimejudge:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751  0076                     ?_getPercentValue:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754  0076                     ?_Flash_Memory_Read:	
  2755                           ; 1 bytes @ 0x0
  2756                           
  2757  0076                     ?_getMain_LightsStatus:	
  2758                           ; 1 bytes @ 0x0
  2759                           
  2760  0076                     ?_getRF_KeyStatus:	
  2761                           ; 1 bytes @ 0x0
  2762                           
  2763  0076                     ?_getSw_KeyStatus:	
  2764                           ; 1 bytes @ 0x0
  2765                           
  2766  0076                     ?_getAll_DimmerLights_AdjGO:	
  2767                           ; 1 bytes @ 0x0
  2768                           
  2769  0076                     ?_setPercentValue:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772  0076                     ?_getMain_All_Error_Status:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775                           
  2776                           ; 1 bytes @ 0x0
  2777  0076                     	ds	1
  2778  0077                     DimmerIntrIOCPointSelect@lights:	
  2779  0077                     DimmerIntrPointSelect@lights:	
  2780                           ; 1 bytes @ 0x1
  2781                           
  2782                           
  2783                           ; 1 bytes @ 0x1
  2784  0077                     	ds	1
  2785  0078                     ??_setDimmerLights_IntrIOC_GO:	
  2786  0078                     ??_setDimmerLights_IntrControl:	
  2787                           ; 0 bytes @ 0x2
  2788                           
  2789  0078                     setDimmerLights_IntrIOC_GO@lights:	
  2790                           ; 0 bytes @ 0x2
  2791                           
  2792                           
  2793                           ; 1 bytes @ 0x2
  2794  0078                     	ds	1
  2795  0079                     ??_IOC_ISR:	
  2796  0079                     ??_setDimmerReClock:	
  2797                           ; 0 bytes @ 0x3
  2798                           
  2799                           
  2800                           ; 0 bytes @ 0x3
  2801  0079                     	ds	1
  2802  007A                     setDimmerLights_IntrControl@lights:	
  2803                           
  2804                           ; 1 bytes @ 0x4
  2805  007A                     	ds	1
  2806  007B                     ??_TMR1_ISR:	
  2807  007B                     ??_ISR:	
  2808                           ; 0 bytes @ 0x5
  2809                           
  2810                           
  2811                           ; 0 bytes @ 0x5
  2812  007B                     	ds	1
  2813                           
  2814                           	psect	cstackBANK0
  2815  0020                     __pcstackBANK0:	
  2816  0020                     ??_Timeout_Counter:	
  2817  0020                     ??_set_TimeoutCleared:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_CC2500_WriteByte:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_CC2500_ReadByte:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ?_DelayTime_1us:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_Dimmer_Initialization:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_setTxData:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_Fosc_Set:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_IO_Set:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_TMR1_Set:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_ADC_Set:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_IOC_Set:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_WDT_Set:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_Flash_Memory_Read:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ?_setMemory_Data:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_Flash_Memory_Write:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_WDT_Clearing:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_myMain_Initialization:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_Temp_Initialization:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_setTemp_Initialization:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_setRF_Initialization:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_getRF_KeyStatus:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_Buzzer_Initialization:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_Buzzer_Main:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_DelayOffPointSelect:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_DimmerLightsPointSelect:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_getSw_KeyStatus:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_getAll_DimmerLights_AdjGO:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_LedPointSelect:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_Flash_Memory_Unlock:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_Flash_Memory_Erasing:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_setMemory_Modify:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ??_setMemory_LoopSave:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ??_WDT_Main:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0020                     ??_getMain_All_Error_Status:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0020                     ??_setRF_Learn:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0020                     ??_TouchPower:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0020                     ??_SwPointSelect:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0020                     ?___bmul:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0020                     ?_getBuz_GO:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0020                     ?_getAD:	
  2935                           ; 2 bytes @ 0x0
  2936                           
  2937  0020                     ?___awdiv:	
  2938                           ; 2 bytes @ 0x0
  2939                           
  2940  0020                     ?___ftpack:	
  2941                           ; 2 bytes @ 0x0
  2942                           
  2943  0020                     DelayOffPointSelect@sw:	
  2944                           ; 3 bytes @ 0x0
  2945                           
  2946  0020                     getAD@adcon1:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0020                     setMemory_Data@data:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0020                     ___bmul@multiplicand:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0020                     DelayTime_1us@count:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0020                     ___awdiv@divisor:	
  2959                           ; 2 bytes @ 0x0
  2960                           
  2961  0020                     ___ftpack@arg:	
  2962                           ; 2 bytes @ 0x0
  2963                           
  2964                           
  2965                           ; 3 bytes @ 0x0
  2966  0020                     	ds	1
  2967  0021                     ??_DlyOff_Initialization:	
  2968  0021                     ??_setMemory_Data:	
  2969                           ; 0 bytes @ 0x1
  2970                           
  2971  0021                     ??_RF_Initialization:	
  2972                           ; 0 bytes @ 0x1
  2973                           
  2974  0021                     ??_Mcu_Initialization:	
  2975                           ; 0 bytes @ 0x1
  2976                           
  2977  0021                     ??___bmul:	
  2978                           ; 0 bytes @ 0x1
  2979                           
  2980  0021                     CC2500_WriteByte@loop_a:	
  2981                           ; 0 bytes @ 0x1
  2982                           
  2983  0021                     CC2500_ReadByte@loop_b:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0021                     DlyOff_Initialization@sw:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989  0021                     DimmerLightsPointSelect@lights:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992  0021                     _getSw_KeyStatus$2355:	
  2993                           ; 1 bytes @ 0x1
  2994                           
  2995  0021                     _getAll_DimmerLights_AdjGO$2359:	
  2996                           ; 1 bytes @ 0x1
  2997                           
  2998  0021                     LedPointSelect@led:	
  2999                           ; 1 bytes @ 0x1
  3000                           
  3001  0021                     Flash_Memory_Read@i:	
  3002                           ; 1 bytes @ 0x1
  3003                           
  3004  0021                     Flash_Memory_Write@i:	
  3005                           ; 1 bytes @ 0x1
  3006                           
  3007  0021                     setMemory_Modify@command:	
  3008                           ; 1 bytes @ 0x1
  3009                           
  3010  0021                     setMemory_LoopSave@command:	
  3011                           ; 1 bytes @ 0x1
  3012                           
  3013  0021                     getMain_All_Error_Status@command:	
  3014                           ; 1 bytes @ 0x1
  3015                           
  3016  0021                     setRF_Learn@command:	
  3017                           ; 1 bytes @ 0x1
  3018                           
  3019  0021                     getRF_KeyStatus@key:	
  3020                           ; 1 bytes @ 0x1
  3021                           
  3022  0021                     SwPointSelect@sw:	
  3023                           ; 1 bytes @ 0x1
  3024                           
  3025                           
  3026                           ; 1 bytes @ 0x1
  3027  0021                     	ds	1
  3028  0022                     ??_CC2500_WriteCommand:	
  3029  0022                     ??_CC2500_ReadStatus:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0022                     ??_DelayTime_1us:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0022                     ?_CC2500_WriteREG:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0022                     ??_getDimmerLights_Status:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0022                     ??_setDimmerLights_Initialization:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0022                     ?_setDimmerLights_Trigger:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0022                     ?_setDimmerLights_TriggerAdj:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0022                     ?_setLED:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0022                     ??_setLED_Main:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0022                     ??_getBuz_GO:	
  3057                           ; 0 bytes @ 0x2
  3058                           
  3059  0022                     ??_DelayOff_Initialization:	
  3060                           ; 0 bytes @ 0x2
  3061                           
  3062  0022                     CC2500_WriteREG@value:	
  3063                           ; 0 bytes @ 0x2
  3064                           
  3065  0022                     getDimmerLights_Status@lights:	
  3066                           ; 1 bytes @ 0x2
  3067                           
  3068  0022                     _getSw_KeyStatus$2356:	
  3069                           ; 1 bytes @ 0x2
  3070                           
  3071  0022                     getAll_DimmerLights_AdjGO@adjgo:	
  3072                           ; 1 bytes @ 0x2
  3073                           
  3074  0022                     setDimmerLights_Trigger@command:	
  3075                           ; 1 bytes @ 0x2
  3076                           
  3077  0022                     setDimmerLights_TriggerAdj@command:	
  3078                           ; 1 bytes @ 0x2
  3079                           
  3080  0022                     setLED@command:	
  3081                           ; 1 bytes @ 0x2
  3082                           
  3083  0022                     Flash_Memory_Read@address:	
  3084                           ; 1 bytes @ 0x2
  3085                           
  3086  0022                     setMemory_Data@address:	
  3087                           ; 1 bytes @ 0x2
  3088                           
  3089  0022                     _getRF_KeyStatus$5163:	
  3090                           ; 1 bytes @ 0x2
  3091                           
  3092  0022                     ___bmul@product:	
  3093                           ; 1 bytes @ 0x2
  3094                           
  3095  0022                     DelayTime_1us@i:	
  3096                           ; 1 bytes @ 0x2
  3097                           
  3098  0022                     _getMain_All_Error_Status$3603:	
  3099                           ; 2 bytes @ 0x2
  3100                           
  3101  0022                     ___awdiv@dividend:	
  3102                           ; 2 bytes @ 0x2
  3103                           
  3104                           
  3105                           ; 2 bytes @ 0x2
  3106  0022                     	ds	1
  3107  0023                     ??_CC2500_WriteREG:	
  3108  0023                     ??_setDimmerLights_Trigger:	
  3109                           ; 0 bytes @ 0x3
  3110                           
  3111  0023                     ??_setDimmerLights_TriggerAdj:	
  3112                           ; 0 bytes @ 0x3
  3113                           
  3114  0023                     ??_setLED:	
  3115                           ; 0 bytes @ 0x3
  3116                           
  3117  0023                     ??_getAD:	
  3118                           ; 0 bytes @ 0x3
  3119                           
  3120  0023                     CC2500_WriteCommand@command:	
  3121                           ; 0 bytes @ 0x3
  3122                           
  3123  0023                     CC2500_ReadStatus@status_addr:	
  3124                           ; 1 bytes @ 0x3
  3125                           
  3126  0023                     setDimmerLights_Initialization@lights:	
  3127                           ; 1 bytes @ 0x3
  3128                           
  3129  0023                     getDimmerLights_Status@status:	
  3130                           ; 1 bytes @ 0x3
  3131                           
  3132  0023                     getSw_KeyStatus@status:	
  3133                           ; 1 bytes @ 0x3
  3134                           
  3135  0023                     setLED@led:	
  3136                           ; 1 bytes @ 0x3
  3137                           
  3138  0023                     getAD@adcon0:	
  3139                           ; 1 bytes @ 0x3
  3140                           
  3141  0023                     Flash_Memory_Read@ret:	
  3142                           ; 1 bytes @ 0x3
  3143                           
  3144  0023                     ___bmul@multiplier:	
  3145                           ; 1 bytes @ 0x3
  3146                           
  3147  0023                     ___ftpack@exp:	
  3148                           ; 1 bytes @ 0x3
  3149                           
  3150                           
  3151                           ; 1 bytes @ 0x3
  3152  0023                     	ds	1
  3153  0024                     ??_CC2500_ClearTXFIFO:	
  3154  0024                     ??_CC2500_ClearRXFIFO:	
  3155                           ; 0 bytes @ 0x4
  3156                           
  3157  0024                     ??_CC2500_SIDLEMode:	
  3158                           ; 0 bytes @ 0x4
  3159                           
  3160  0024                     ??_DelayTimejudge:	
  3161                           ; 0 bytes @ 0x4
  3162                           
  3163  0024                     ?_setDimmerLights:	
  3164                           ; 0 bytes @ 0x4
  3165                           
  3166  0024                     ??_setLED_Initialization:	
  3167                           ; 0 bytes @ 0x4
  3168                           
  3169  0024                     ??_getMain_LightsStatus:	
  3170                           ; 0 bytes @ 0x4
  3171                           
  3172  0024                     ??_Flash_Memory_Modify:	
  3173                           ; 0 bytes @ 0x4
  3174                           
  3175  0024                     ??_getTemp_AD:	
  3176                           ; 0 bytes @ 0x4
  3177                           
  3178  0024                     ??_setSw_Initialization:	
  3179                           ; 0 bytes @ 0x4
  3180                           
  3181  0024                     ??_CC2500_TxData:	
  3182                           ; 0 bytes @ 0x4
  3183                           
  3184  0024                     ??_CC2500_RxData:	
  3185                           ; 0 bytes @ 0x4
  3186                           
  3187  0024                     ??_DimmerLights_Initialization:	
  3188                           ; 0 bytes @ 0x4
  3189                           
  3190  0024                     ??___awdiv:	
  3191                           ; 0 bytes @ 0x4
  3192                           
  3193  0024                     CC2500_WriteREG@w_addr:	
  3194                           ; 0 bytes @ 0x4
  3195                           
  3196  0024                     getSw_KeyStatus@sw:	
  3197                           ; 1 bytes @ 0x4
  3198                           
  3199  0024                     setDimmerLights@status:	
  3200                           ; 1 bytes @ 0x4
  3201                           
  3202  0024                     setDimmerLights_Trigger@lights:	
  3203                           ; 1 bytes @ 0x4
  3204                           
  3205  0024                     setDimmerLights_TriggerAdj@lights:	
  3206                           ; 1 bytes @ 0x4
  3207                           
  3208  0024                     setLED_Initialization@led:	
  3209                           ; 1 bytes @ 0x4
  3210                           
  3211  0024                     setLED_Main@led:	
  3212                           ; 1 bytes @ 0x4
  3213                           
  3214  0024                     getMain_All_Error_Status@status:	
  3215                           ; 1 bytes @ 0x4
  3216                           
  3217  0024                     setSw_Initialization@sw:	
  3218                           ; 1 bytes @ 0x4
  3219                           
  3220  0024                     ___ftpack@sign:	
  3221                           ; 1 bytes @ 0x4
  3222                           
  3223  0024                     getBuz_GO@i:	
  3224                           ; 1 bytes @ 0x4
  3225                           
  3226  0024                     DelayTime_1us@j:	
  3227                           ; 2 bytes @ 0x4
  3228                           
  3229                           
  3230                           ; 2 bytes @ 0x4
  3231  0024                     	ds	1
  3232  0025                     ??_CC2500_InitSetREG:	
  3233  0025                     ??_CC2500_InitPATable:	
  3234                           ; 0 bytes @ 0x5
  3235                           
  3236  0025                     ??_setDimmerLights:	
  3237                           ; 0 bytes @ 0x5
  3238                           
  3239  0025                     ??_Switch_Initialization:	
  3240                           ; 0 bytes @ 0x5
  3241                           
  3242  0025                     ??_setTemp_Main:	
  3243                           ; 0 bytes @ 0x5
  3244                           
  3245  0025                     ??___ftpack:	
  3246                           ; 0 bytes @ 0x5
  3247                           
  3248  0025                     ??_setDimmerLights_AdjControl:	
  3249                           ; 0 bytes @ 0x5
  3250                           
  3251  0025                     ??_LED_Initialization:	
  3252                           ; 0 bytes @ 0x5
  3253                           
  3254  0025                     ??_LED_Main:	
  3255                           ; 0 bytes @ 0x5
  3256                           
  3257  0025                     CC2500_TxData@loop_e:	
  3258                           ; 0 bytes @ 0x5
  3259                           
  3260  0025                     CC2500_RxData@loop_f:	
  3261                           ; 1 bytes @ 0x5
  3262                           
  3263  0025                     Flash_Memory_Modify@i:	
  3264                           ; 1 bytes @ 0x5
  3265                           
  3266  0025                     getMain_LightsStatus@status:	
  3267                           ; 1 bytes @ 0x5
  3268                           
  3269  0025                     getTemp_AD@channel:	
  3270                           ; 1 bytes @ 0x5
  3271                           
  3272  0025                     ___awdiv@counter:	
  3273                           ; 1 bytes @ 0x5
  3274                           
  3275                           
  3276                           ; 1 bytes @ 0x5
  3277  0025                     	ds	1
  3278  0026                     ??_CC2500_PowerRST:	
  3279  0026                     ??_CC2500_FrequencyCabr:	
  3280                           ; 0 bytes @ 0x6
  3281                           
  3282  0026                     ??_Flash_Memory_Main:	
  3283                           ; 0 bytes @ 0x6
  3284                           
  3285  0026                     CC2500_InitSetREG@temp1:	
  3286                           ; 0 bytes @ 0x6
  3287                           
  3288  0026                     CC2500_InitPATable@temp:	
  3289                           ; 1 bytes @ 0x6
  3290                           
  3291  0026                     DelayTimejudge@i:	
  3292                           ; 1 bytes @ 0x6
  3293                           
  3294  0026                     setDimmerLights_AdjControl@idle:	
  3295                           ; 1 bytes @ 0x6
  3296                           
  3297  0026                     setDimmerLights@lights:	
  3298                           ; 1 bytes @ 0x6
  3299                           
  3300  0026                     ___awdiv@sign:	
  3301                           ; 1 bytes @ 0x6
  3302                           
  3303                           
  3304                           ; 1 bytes @ 0x6
  3305  0026                     	ds	1
  3306  0027                     ??_Temp_Main:	
  3307  0027                     CC2500_InitSetREG@temp2:	
  3308                           ; 0 bytes @ 0x7
  3309                           
  3310  0027                     CC2500_InitPATable@loop_d:	
  3311                           ; 1 bytes @ 0x7
  3312                           
  3313  0027                     DelayTimejudge@j:	
  3314                           ; 1 bytes @ 0x7
  3315                           
  3316  0027                     setDimmerLights_AdjControl@sw:	
  3317                           ; 1 bytes @ 0x7
  3318                           
  3319  0027                     ___awdiv@quotient:	
  3320                           ; 1 bytes @ 0x7
  3321                           
  3322                           
  3323                           ; 2 bytes @ 0x7
  3324  0027                     	ds	1
  3325  0028                     ?___awtoft:	
  3326  0028                     CC2500_InitSetREG@loop_c:	
  3327                           ; 3 bytes @ 0x8
  3328                           
  3329  0028                     DelayTimejudge@k:	
  3330                           ; 1 bytes @ 0x8
  3331                           
  3332  0028                     ___awtoft@c:	
  3333                           ; 1 bytes @ 0x8
  3334                           
  3335                           
  3336                           ; 2 bytes @ 0x8
  3337  0028                     	ds	1
  3338  0029                     ?_setBuz:	
  3339  0029                     ??_CC2500_PowerOnInitial:	
  3340                           ; 0 bytes @ 0x9
  3341                           
  3342  0029                     DelayTimejudge@value:	
  3343                           ; 0 bytes @ 0x9
  3344                           
  3345  0029                     setBuz@time:	
  3346                           ; 1 bytes @ 0x9
  3347                           
  3348                           
  3349                           ; 2 bytes @ 0x9
  3350  0029                     	ds	1
  3351  002A                     ?_setDelayOff_GO:	
  3352  002A                     setDelayOff_GO@command:	
  3353                           ; 0 bytes @ 0xA
  3354                           
  3355                           
  3356                           ; 1 bytes @ 0xA
  3357  002A                     	ds	1
  3358  002B                     ??_setBuz:	
  3359  002B                     ??___awtoft:	
  3360                           ; 0 bytes @ 0xB
  3361                           
  3362  002B                     setDelayOff_GO@value:	
  3363                           ; 0 bytes @ 0xB
  3364                           
  3365                           
  3366                           ; 1 bytes @ 0xB
  3367  002B                     	ds	1
  3368  002C                     ??_setDelayOff_GO:	
  3369  002C                     setBuz@count:	
  3370                           ; 0 bytes @ 0xC
  3371                           
  3372                           
  3373                           ; 1 bytes @ 0xC
  3374  002C                     	ds	1
  3375  002D                     ??_my_MainTimer:	
  3376  002D                     ??_setLog_Code:	
  3377                           ; 0 bytes @ 0xD
  3378                           
  3379  002D                     ___awtoft@sign:	
  3380                           ; 0 bytes @ 0xD
  3381                           
  3382                           
  3383                           ; 1 bytes @ 0xD
  3384  002D                     	ds	1
  3385  002E                     ?___ftdiv:	
  3386  002E                     ?___ftmul:	
  3387                           ; 3 bytes @ 0xE
  3388                           
  3389  002E                     setDelayOff_GO@sw:	
  3390                           ; 3 bytes @ 0xE
  3391                           
  3392  002E                     ___ftdiv@f2:	
  3393                           ; 1 bytes @ 0xE
  3394                           
  3395  002E                     ___ftmul@f1:	
  3396                           ; 3 bytes @ 0xE
  3397                           
  3398                           
  3399                           ; 3 bytes @ 0xE
  3400  002E                     	ds	3
  3401  0031                     ___ftdiv@f1:	
  3402  0031                     ___ftmul@f2:	
  3403                           ; 3 bytes @ 0x11
  3404                           
  3405                           
  3406                           ; 3 bytes @ 0x11
  3407  0031                     	ds	3
  3408  0034                     ??___ftdiv:	
  3409  0034                     ??___ftmul:	
  3410                           ; 0 bytes @ 0x14
  3411                           
  3412                           
  3413                           ; 0 bytes @ 0x14
  3414  0034                     	ds	4
  3415  0038                     ___ftdiv@cntr:	
  3416  0038                     ___ftmul@exp:	
  3417                           ; 1 bytes @ 0x18
  3418                           
  3419                           
  3420                           ; 1 bytes @ 0x18
  3421  0038                     	ds	1
  3422  0039                     ___ftdiv@f3:	
  3423  0039                     ___ftmul@f3_as_product:	
  3424                           ; 3 bytes @ 0x19
  3425                           
  3426                           
  3427                           ; 3 bytes @ 0x19
  3428  0039                     	ds	3
  3429  003C                     ___ftdiv@exp:	
  3430  003C                     ___ftmul@cntr:	
  3431                           ; 1 bytes @ 0x1C
  3432                           
  3433                           
  3434                           ; 1 bytes @ 0x1C
  3435  003C                     	ds	1
  3436  003D                     ___ftdiv@sign:	
  3437  003D                     ___ftmul@sign:	
  3438                           ; 1 bytes @ 0x1D
  3439                           
  3440                           
  3441                           ; 1 bytes @ 0x1D
  3442  003D                     	ds	1
  3443  003E                     ?___ftadd:	
  3444  003E                     ___ftadd@f1:	
  3445                           ; 3 bytes @ 0x1E
  3446                           
  3447                           
  3448                           ; 3 bytes @ 0x1E
  3449  003E                     	ds	3
  3450  0041                     ___ftadd@f2:	
  3451                           
  3452                           ; 3 bytes @ 0x21
  3453  0041                     	ds	3
  3454  0044                     ??___ftadd:	
  3455                           
  3456                           ; 0 bytes @ 0x24
  3457  0044                     	ds	4
  3458  0048                     ___ftadd@sign:	
  3459                           
  3460                           ; 1 bytes @ 0x28
  3461  0048                     	ds	1
  3462  0049                     ___ftadd@exp2:	
  3463                           
  3464                           ; 1 bytes @ 0x29
  3465  0049                     	ds	1
  3466  004A                     ___ftadd@exp1:	
  3467                           
  3468                           ; 1 bytes @ 0x2A
  3469  004A                     	ds	1
  3470  004B                     ?___fttol:	
  3471  004B                     ___fttol@f1:	
  3472                           ; 4 bytes @ 0x2B
  3473                           
  3474                           
  3475                           ; 3 bytes @ 0x2B
  3476  004B                     	ds	4
  3477  004F                     ??___fttol:	
  3478                           
  3479                           ; 0 bytes @ 0x2F
  3480  004F                     	ds	4
  3481  0053                     ___fttol@sign1:	
  3482                           
  3483                           ; 1 bytes @ 0x33
  3484  0053                     	ds	1
  3485  0054                     ___fttol@lval:	
  3486                           
  3487                           ; 4 bytes @ 0x34
  3488  0054                     	ds	4
  3489  0058                     ___fttol@exp1:	
  3490                           
  3491                           ; 1 bytes @ 0x38
  3492  0058                     	ds	1
  3493  0059                     ??_getPercentValue:	
  3494  0059                     ??_setPercentValue:	
  3495                           ; 0 bytes @ 0x39
  3496                           
  3497  0059                     setPercentValue@value:	
  3498                           ; 0 bytes @ 0x39
  3499                           
  3500                           
  3501                           ; 1 bytes @ 0x39
  3502  0059                     	ds	1
  3503  005A                     setPercentValue@i:	
  3504                           
  3505                           ; 3 bytes @ 0x3A
  3506  005A                     	ds	1
  3507  005B                     getPercentValue@value:	
  3508                           
  3509                           ; 1 bytes @ 0x3B
  3510  005B                     	ds	1
  3511  005C                     getPercentValue@i:	
  3512                           
  3513                           ; 3 bytes @ 0x3C
  3514  005C                     	ds	1
  3515  005D                     ?_setRF_DimmerLights:	
  3516  005D                     ??_Flash_Memory_Initialization:	
  3517                           ; 0 bytes @ 0x3D
  3518                           
  3519  005D                     setRF_DimmerLights@on:	
  3520                           ; 0 bytes @ 0x3D
  3521                           
  3522                           
  3523                           ; 1 bytes @ 0x3D
  3524  005D                     	ds	1
  3525  005E                     ??_setRF_DimmerLights:	
  3526  005E                     Flash_Memory_Initialization@i:	
  3527                           ; 0 bytes @ 0x3E
  3528                           
  3529                           
  3530                           ; 1 bytes @ 0x3E
  3531  005E                     	ds	1
  3532  005F                     ??_setDimmerLights_AdjRF:	
  3533                           
  3534                           ; 0 bytes @ 0x3F
  3535  005F                     	ds	1
  3536  0060                     setDimmerLights_AdjRF@lights:	
  3537  0060                     setRF_DimmerLights@status:	
  3538                           ; 1 bytes @ 0x40
  3539                           
  3540                           
  3541                           ; 1 bytes @ 0x40
  3542  0060                     	ds	1
  3543  0061                     ??_setRF_DimmerValue:	
  3544  0061                     setRF_DimmerLights@lights:	
  3545                           ; 0 bytes @ 0x41
  3546                           
  3547                           
  3548                           ; 1 bytes @ 0x41
  3549  0061                     	ds	1
  3550  0062                     ??_setDimmerLights_SwOn:	
  3551  0062                     ??_setDimmerLights_SwOff:	
  3552                           ; 0 bytes @ 0x42
  3553                           
  3554  0062                     ?_setDimmerLights_Adj:	
  3555                           ; 0 bytes @ 0x42
  3556                           
  3557  0062                     setDimmerLights_Adj@status:	
  3558                           ; 0 bytes @ 0x42
  3559                           
  3560                           
  3561                           ; 1 bytes @ 0x42
  3562  0062                     	ds	1
  3563  0063                     ??_setDimmerLights_Adj:	
  3564  0063                     setDimmerLights_SwOn@idle:	
  3565                           ; 0 bytes @ 0x43
  3566                           
  3567  0063                     setRF_DimmerValue@lights:	
  3568                           ; 1 bytes @ 0x43
  3569                           
  3570                           
  3571                           ; 1 bytes @ 0x43
  3572  0063                     	ds	1
  3573  0064                     ??_setRFSW_AdjControl:	
  3574  0064                     setDimmerLights_SwOn@sw:	
  3575                           ; 0 bytes @ 0x44
  3576                           
  3577  0064                     setDimmerLights_SwOff@command:	
  3578                           ; 1 bytes @ 0x44
  3579                           
  3580  0064                     setDimmerLights_Adj@lights:	
  3581                           ; 1 bytes @ 0x44
  3582                           
  3583                           
  3584                           ; 1 bytes @ 0x44
  3585  0064                     	ds	1
  3586  0065                     ??_setDimmerLights_Main:	
  3587  0065                     setDimmerLights_Main@clear:	
  3588                           ; 0 bytes @ 0x45
  3589                           
  3590  0065                     setDimmerLights_SwOff@sw:	
  3591                           ; 1 bytes @ 0x45
  3592                           
  3593                           
  3594                           ; 1 bytes @ 0x45
  3595  0065                     	ds	1
  3596  0066                     ??_DlyOff_Main:	
  3597  0066                     ??_setRFSW_Control:	
  3598                           ; 0 bytes @ 0x46
  3599                           
  3600  0066                     ??_setSw_Main:	
  3601                           ; 0 bytes @ 0x46
  3602                           
  3603  0066                     ??_setDimmerLights_ErrorClose:	
  3604                           ; 0 bytes @ 0x46
  3605                           
  3606  0066                     setDimmerLights_Main@lights:	
  3607                           ; 0 bytes @ 0x46
  3608                           
  3609  0066                     setDimmerLights_ErrorClose@lights:	
  3610                           ; 1 bytes @ 0x46
  3611                           
  3612  0066                     setRFSW_AdjControl@sw:	
  3613                           ; 1 bytes @ 0x46
  3614                           
  3615                           
  3616                           ; 1 bytes @ 0x46
  3617  0066                     	ds	1
  3618  0067                     ??_DimmerLights_Main:	
  3619  0067                     ??_setMain_Exception:	
  3620                           ; 0 bytes @ 0x47
  3621                           
  3622  0067                     setRFSW_Control@sw:	
  3623                           ; 0 bytes @ 0x47
  3624                           
  3625                           
  3626                           ; 1 bytes @ 0x47
  3627  0067                     	ds	1
  3628  0068                     ??_getRxData:	
  3629  0068                     ??_setControl_Lights_Table:	
  3630                           ; 0 bytes @ 0x48
  3631                           
  3632  0068                     DlyOff_Main@sw:	
  3633                           ; 0 bytes @ 0x48
  3634                           
  3635  0068                     setMain_Exception@buz:	
  3636                           ; 1 bytes @ 0x48
  3637                           
  3638  0068                     setSw_Main@sw:	
  3639                           ; 1 bytes @ 0x48
  3640                           
  3641                           
  3642                           ; 1 bytes @ 0x48
  3643  0068                     	ds	1
  3644  0069                     ??_DelayOff_Main:	
  3645  0069                     getRxData@error:	
  3646                           ; 0 bytes @ 0x49
  3647                           
  3648  0069                     _setMain_Exception$3588:	
  3649                           ; 1 bytes @ 0x49
  3650                           
  3651                           
  3652                           ; 2 bytes @ 0x49
  3653  0069                     	ds	1
  3654  006A                     ??_setRF_Main:	
  3655                           
  3656                           ; 0 bytes @ 0x4A
  3657  006A                     	ds	1
  3658  006B                     ??_RF_Main:	
  3659  006B                     setMain_Exception@status:	
  3660                           ; 0 bytes @ 0x4B
  3661                           
  3662                           
  3663                           ; 1 bytes @ 0x4B
  3664  006B                     	ds	1
  3665  006C                     setMain_Exception@command:	
  3666                           
  3667                           ; 1 bytes @ 0x4C
  3668  006C                     	ds	1
  3669  006D                     ??_main:	
  3670                           
  3671                           	psect	maintext
  3672  17B2                     __pmaintext:	
  3673                           ; 0 bytes @ 0x4D
  3674 ;;
  3675 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3676 ;;
  3677 ;; *************** function _main *****************
  3678 ;; Defined at:
  3679 ;;		line 7 in file "../src/Main_B1.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  argc            2    0[BANK3 ] int 
  3682 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;		None
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  2    0[BANK3 ] int 
  3687 ;; Registers used:
  3688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 17F/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3694 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3698 ;;Total ram usage:        4 bytes
  3699 ;; Hardware stack levels required when called:   15
  3700 ;; This function calls:
  3701 ;;		_Buzzer_Initialization
  3702 ;;		_Buzzer_Main
  3703 ;;		_CC2500_PowerOnInitial
  3704 ;;		_DelayOff_Initialization
  3705 ;;		_DelayOff_Main
  3706 ;;		_DimmerLights_Initialization
  3707 ;;		_DimmerLights_Main
  3708 ;;		_Flash_Memory_Initialization
  3709 ;;		_Flash_Memory_Main
  3710 ;;		_LED_Initialization
  3711 ;;		_LED_Main
  3712 ;;		_Mcu_Initialization
  3713 ;;		_RF_Initialization
  3714 ;;		_RF_Main
  3715 ;;		_Switch_Initialization
  3716 ;;		_Switch_Main
  3717 ;;		_Temp_Initialization
  3718 ;;		_Temp_Main
  3719 ;;		_WDT_Main
  3720 ;;		_getTemp_AD
  3721 ;;		_myMain_Initialization
  3722 ;;		_my_MainTimer
  3723 ;; This function is called by:
  3724 ;;		Startup code after reset
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           
  3729                           ;psect for function _main
  3730  17B2                     _main:	
  3731                           
  3732                           ;Main_B1.c: 8: myMain_Initialization();
  3733                           
  3734                           ;incstack = 0
  3735                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3736  17B2  319E  26B9  3197   	fcall	_myMain_Initialization
  3737                           
  3738                           ;Main_B1.c: 9: Mcu_Initialization();
  3739  17B5  319F  273F  3197   	fcall	_Mcu_Initialization
  3740                           
  3741                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3742  17B8  3185  2546  3197   	fcall	_Flash_Memory_Initialization
  3743                           
  3744                           ;Main_B1.c: 11: LED_Initialization();
  3745  17BB  319E  2679  3197   	fcall	_LED_Initialization
  3746                           
  3747                           ;Main_B1.c: 12: Buzzer_Initialization();
  3748  17BE  319D  25D7  3197   	fcall	_Buzzer_Initialization
  3749                           
  3750                           ;Main_B1.c: 14: ;;
  3751                           ;Main_B1.c: 15: Temp_Initialization();
  3752  17C1  319D  25E0  3197   	fcall	_Temp_Initialization
  3753                           
  3754                           ;Main_B1.c: 16: ;;
  3755                           ;Main_B1.c: 17: ;;
  3756                           ;Main_B1.c: 18: DelayOff_Initialization();
  3757  17C4  319E  2616  3197   	fcall	_DelayOff_Initialization
  3758                           
  3759                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3760  17C7  3190  20C7  3197   	fcall	_DimmerLights_Initialization
  3761                           
  3762                           ;Main_B1.c: 21: ;;
  3763                           ;Main_B1.c: 22: ;;
  3764                           ;Main_B1.c: 23: ;;
  3765                           ;Main_B1.c: 24: Switch_Initialization();
  3766  17CA  319E  269D  3197   	fcall	_Switch_Initialization
  3767                           
  3768                           ;Main_B1.c: 25: RF_Initialization();
  3769  17CD  319D  25DA  3197   	fcall	_RF_Initialization
  3770                           
  3771                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3772  17D0  3190  2086  3197   	fcall	_CC2500_PowerOnInitial
  3773  17D3                     l9632:	
  3774                           ;Main_B1.c: 27: ;;
  3775                           ;Main_B1.c: 29: while (1) {
  3776                           
  3777                           
  3778                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  3779  17D3  0021               	movlb	1	; select bank1
  3780  17D4  1C20               	btfss	_myMain^(0+128),0
  3781  17D5  2FDA               	goto	l9636
  3782                           
  3783                           ;Main_B1.c: 41: getTemp_AD(0x09);
  3784  17D6  3009               	movlw	9
  3785  17D7  3195  2513  3197   	fcall	_getTemp_AD
  3786  17DA                     l9636:	
  3787                           
  3788                           ;Main_B1.c: 56: }
  3789                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  3790  17DA  0021               	movlb	1	; select bank1
  3791  17DB  1C48               	btfss	_Timer1^(0+128),0
  3792  17DC  2FD3               	goto	l9632
  3793                           
  3794                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  3795  17DD  1048               	bcf	_Timer1^(0+128),0
  3796                           
  3797                           ;Main_B1.c: 94: my_MainTimer();
  3798  17DE  3197  2718  3197   	fcall	_my_MainTimer
  3799                           
  3800                           ;Main_B1.c: 95: WDT_Main();
  3801  17E1  319F  2751  3197   	fcall	_WDT_Main
  3802                           
  3803                           ;Main_B1.c: 96: ;;
  3804                           ;Main_B1.c: 97: ;;
  3805                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  3806  17E4  0021               	movlb	1	; select bank1
  3807  17E5  1C20               	btfss	_myMain^(0+128),0
  3808  17E6  2FD3               	goto	l9632
  3809                           
  3810                           ;Main_B1.c: 99: Flash_Memory_Main();
  3811  17E7  3194  24A7  3197   	fcall	_Flash_Memory_Main
  3812                           
  3813                           ;Main_B1.c: 101: LED_Main();
  3814  17EA  319E  2685  3197   	fcall	_LED_Main
  3815                           
  3816                           ;Main_B1.c: 102: Buzzer_Main();
  3817  17ED  3196  26CE  3197   	fcall	_Buzzer_Main
  3818                           
  3819                           ;Main_B1.c: 104: ;;
  3820                           ;Main_B1.c: 105: Temp_Main();
  3821  17F0  319D  25E3  3197   	fcall	_Temp_Main
  3822                           
  3823                           ;Main_B1.c: 106: ;;
  3824                           ;Main_B1.c: 107: ;;
  3825                           ;Main_B1.c: 109: ;;
  3826                           ;Main_B1.c: 110: DimmerLights_Main();
  3827  17F3  319E  2626  3197   	fcall	_DimmerLights_Main
  3828                           
  3829                           ;Main_B1.c: 111: Switch_Main();
  3830  17F6  3192  2278  3197   	fcall	_Switch_Main
  3831                           
  3832                           ;Main_B1.c: 112: ;;
  3833                           ;Main_B1.c: 113: ;;
  3834                           ;Main_B1.c: 115: RF_Main();
  3835  17F9  319D  25DD  3197   	fcall	_RF_Main
  3836                           
  3837                           ;Main_B1.c: 116: DelayOff_Main();
  3838  17FC  319E  261E  3197   	fcall	_DelayOff_Main
  3839                           
  3840                           ;Main_B1.c: 117: ;;
  3841  17FF  2FD3               	goto	l9632
  3842  1800                     __end_of_main:	
  3843                           ;Main_B1.c: 125: }
  3844                           ;Main_B1.c: 126: }
  3845                           ;Main_B1.c: 160: }
  3846                           ;Main_B1.c: 161: return (0);
  3847                           ;	Return value of _main is never used
  3848                           
  3849                           
  3850                           	psect	text1
  3851  1718                     __ptext1:	
  3852 ;; *************** function _my_MainTimer *****************
  3853 ;; Defined at:
  3854 ;;		line 180 in file "../src/Main_B1.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;		None
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;		None
  3859 ;; Return value:  Size  Location     Type
  3860 ;;		None               void
  3861 ;; Registers used:
  3862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3872 ;;Total ram usage:        0 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    7
  3875 ;; This function calls:
  3876 ;;		_setBuz
  3877 ;; This function is called by:
  3878 ;;		_main
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           
  3883                           ;psect for function _my_MainTimer
  3884  1718                     _my_MainTimer:	
  3885                           
  3886                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  3887                           
  3888                           ;incstack = 0
  3889                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3890  1718  0021               	movlb	1	; select bank1
  3891  1719  1820               	btfsc	_myMain^(0+128),0
  3892  171A  2F3A               	goto	l9540
  3893                           
  3894                           ;Main_B1.c: 183: myMain.PowerCount++;
  3895  171B  3001               	movlw	1
  3896  171C  07A2               	addwf	(_myMain^(0+128)+2),f
  3897  171D  3000               	movlw	0
  3898  171E  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  3899                           
  3900                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  3901  171F  3002               	movlw	2
  3902  1720  3EA0               	addlw	_myMain& (0+255)
  3903  1721  0086               	movwf	6
  3904  1722  0187               	clrf	7
  3905  1723  3F40               	moviw [0]fsr1
  3906  1724  3A96               	xorlw	150
  3907  1725  1D03               	skipz
  3908  1726  2F29               	goto	u10665
  3909  1727  3F41               	moviw [1]fsr1
  3910  1728  3A00               	xorlw	0
  3911  1729                     u10665:	
  3912  1729  1D03               	skipz
  3913  172A  2F51               	goto	l9550
  3914                           
  3915                           ;Main_B1.c: 185: {
  3916                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  3917  172B  01A2               	clrf	(_myMain^(0+128)+2)
  3918  172C  01A3               	clrf	((_myMain+1)^(0+128)+2)
  3919                           
  3920                           ;Main_B1.c: 187: myMain.PowerON = 1;
  3921  172D  1420               	bsf	_myMain^(0+128),0
  3922                           
  3923                           ;Main_B1.c: 193: setBuz(3, 50);
  3924  172E  3032               	movlw	50
  3925  172F  0020               	movlb	0	; select bank0
  3926  1730  00A9               	movwf	setBuz@time
  3927  1731  3000               	movlw	0
  3928  1732  00AA               	movwf	setBuz@time+1
  3929  1733  3003               	movlw	3
  3930  1734  3188  20A8  3197   	fcall	_setBuz
  3931                           
  3932                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  3933  1737  0021               	movlb	1	; select bank1
  3934  1738  1620               	bsf	_myMain^(0+128),4
  3935                           
  3936                           ;Main_B1.c: 203: }
  3937                           ;Main_B1.c: 204: } else {
  3938  1739  2F51               	goto	l9550
  3939  173A                     l9540:	
  3940                           
  3941                           ;Main_B1.c: 212: myMain.Count1++;
  3942  173A  3001               	movlw	1
  3943  173B  07A6               	addwf	(_myMain^(0+128)+6),f
  3944  173C  3000               	movlw	0
  3945  173D  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  3946                           
  3947                           ;Main_B1.c: 213: if (myMain.Count1 == 100)
  3948  173E  3006               	movlw	6
  3949  173F  3EA0               	addlw	_myMain& (0+255)
  3950  1740  0086               	movwf	6
  3951  1741  0187               	clrf	7
  3952  1742  3F40               	moviw [0]fsr1
  3953  1743  3A64               	xorlw	100
  3954  1744  1D03               	skipz
  3955  1745  2F48               	goto	u10675
  3956  1746  3F41               	moviw [1]fsr1
  3957  1747  3A00               	xorlw	0
  3958  1748                     u10675:	
  3959  1748  1D03               	skipz
  3960  1749  2F51               	goto	l9550
  3961                           
  3962                           ;Main_B1.c: 214: {
  3963                           ;Main_B1.c: 215: myMain.Count1 = 0;
  3964  174A  01A6               	clrf	(_myMain^(0+128)+6)
  3965  174B  01A7               	clrf	((_myMain+1)^(0+128)+6)
  3966                           
  3967                           ;Main_B1.c: 227: if (myMain.Flag) {
  3968  174C  1CA0               	btfss	_myMain^(0+128),1
  3969  174D  2F50               	goto	l1492
  3970                           
  3971                           ;Main_B1.c: 228: myMain.Flag = 0;
  3972  174E  10A0               	bcf	_myMain^(0+128),1
  3973                           
  3974                           ;Main_B1.c: 237: } else {
  3975  174F  2F51               	goto	l9550
  3976  1750                     l1492:	
  3977                           
  3978                           ;Main_B1.c: 238: myMain.Flag = 1;
  3979  1750  14A0               	bsf	_myMain^(0+128),1
  3980  1751                     l9550:	
  3981                           
  3982                           ;Main_B1.c: 247: }
  3983                           ;Main_B1.c: 248: }
  3984                           ;Main_B1.c: 250: }
  3985                           ;Main_B1.c: 252: myMain.Count2++;
  3986  1751  3001               	movlw	1
  3987  1752  07A8               	addwf	(_myMain^(0+128)+8),f
  3988  1753  3000               	movlw	0
  3989  1754  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  3990                           
  3991                           ;Main_B1.c: 253: if (myMain.Count2 == 50) {
  3992  1755  3008               	movlw	8
  3993  1756  3EA0               	addlw	_myMain& (0+255)
  3994  1757  0086               	movwf	6
  3995  1758  0187               	clrf	7
  3996  1759  3F40               	moviw [0]fsr1
  3997  175A  3A32               	xorlw	50
  3998  175B  1D03               	skipz
  3999  175C  2F5F               	goto	u10695
  4000  175D  3F41               	moviw [1]fsr1
  4001  175E  3A00               	xorlw	0
  4002  175F                     u10695:	
  4003  175F  1D03               	skipz
  4004  1760  0008               	return
  4005                           
  4006                           ;Main_B1.c: 254: myMain.Count2 = 0;
  4007  1761  01A8               	clrf	(_myMain^(0+128)+8)
  4008  1762  01A9               	clrf	((_myMain+1)^(0+128)+8)
  4009  1763  0008               	return
  4010  1764                     __end_of_my_MainTimer:	
  4011                           
  4012                           	psect	text2
  4013  1EB9                     __ptext2:	
  4014 ;; *************** function _myMain_Initialization *****************
  4015 ;; Defined at:
  4016 ;;		line 167 in file "../src/Main_B1.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;		None
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;		None
  4021 ;; Return value:  Size  Location     Type
  4022 ;;		None               void
  4023 ;; Registers used:
  4024 ;;		wreg, fsr1l, fsr1h
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4032 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4033 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4034 ;;Total ram usage:        1 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    5
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_main
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           
  4045                           ;psect for function _myMain_Initialization
  4046  1EB9                     _myMain_Initialization:	
  4047                           
  4048                           ;Main_B1.c: 169: product = &_product;
  4049                           
  4050                           ;incstack = 0
  4051                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4052  1EB9  3020               	movlw	__product& (0+255)
  4053  1EBA  0020               	movlb	0	; select bank0
  4054  1EBB  00A0               	movwf	??_myMain_Initialization
  4055  1EBC  0820               	movf	??_myMain_Initialization,w
  4056  1EBD  00EF               	movwf	_product
  4057                           
  4058                           ;Main_B1.c: 170: product->Data[20] = 210;
  4059  1EBE  30D2               	movlw	210
  4060  1EBF  00A0               	movwf	??_myMain_Initialization
  4061  1EC0  086F               	movf	_product,w
  4062  1EC1  3E14               	addlw	20
  4063  1EC2  0086               	movwf	6
  4064  1EC3  3002               	movlw	2	; select bank4/5
  4065  1EC4  0087               	movwf	7
  4066  1EC5  0820               	movf	??_myMain_Initialization,w
  4067  1EC6  0081               	movwf	1
  4068  1EC7  0008               	return
  4069  1EC8                     __end_of_myMain_Initialization:	
  4070                           
  4071                           	psect	text3
  4072  1513                     __ptext3:	
  4073 ;; *************** function _getTemp_AD *****************
  4074 ;; Defined at:
  4075 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  channel         1    wreg     unsigned char 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  channel         1    5[BANK0 ] unsigned char 
  4080 ;; Return value:  Size  Location     Type
  4081 ;;		None               void
  4082 ;; Registers used:
  4083 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4092 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4093 ;;Total ram usage:        2 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    7
  4096 ;; This function calls:
  4097 ;;		_getAD
  4098 ;; This function is called by:
  4099 ;;		_main
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           
  4104                           ;psect for function _getTemp_AD
  4105  1513                     _getTemp_AD:	
  4106                           
  4107                           ;incstack = 0
  4108                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4109                           ;getTemp_AD@channel stored from wreg
  4110  1513  0020               	movlb	0	; select bank0
  4111  1514  00A5               	movwf	getTemp_AD@channel
  4112                           
  4113                           ;OverTemperature_B1.c: 33: if (Temp.ADtoGO == 1) {
  4114  1515  0021               	movlb	1	; select bank1
  4115  1516  1D57               	btfss	_Temp^(0+128),2
  4116  1517  0008               	return
  4117                           
  4118                           ;OverTemperature_B1.c: 34: Temp.GO = 1;
  4119  1518  1657               	bsf	_Temp^(0+128),4
  4120                           
  4121                           ;OverTemperature_B1.c: 35: Temp.ADRES = getAD(channel, 0xf0);
  4122  1519  30F0               	movlw	240
  4123  151A  0020               	movlb	0	; select bank0
  4124  151B  00A4               	movwf	??_getTemp_AD
  4125  151C  0824               	movf	??_getTemp_AD,w
  4126  151D  00A0               	movwf	getAD@adcon1
  4127  151E  0825               	movf	getTemp_AD@channel,w
  4128  151F  3191  21F6  3195   	fcall	_getAD
  4129  1522  0020               	movlb	0	; select bank0
  4130  1523  0821               	movf	?_getAD+1,w
  4131  1524  0021               	movlb	1	; select bank1
  4132  1525  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4133  1526  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4134  1527  0020               	movlb	0	; select bank0
  4135  1528  0820               	movf	?_getAD,w
  4136  1529  0021               	movlb	1	; select bank1
  4137  152A  01E3               	clrf	(_Temp^(0+128)+12)
  4138  152B  07E3               	addwf	(_Temp^(0+128)+12),f
  4139                           
  4140                           ;OverTemperature_B1.c: 36: if (Temp.ADH[0] < Temp.ADRES) {
  4141  152C  0864               	movf	((_Temp+1)^(0+128)+12),w
  4142  152D  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4143  152E  1D03               	skipz
  4144  152F  2D32               	goto	u10635
  4145  1530  0863               	movf	(_Temp^(0+128)+12),w
  4146  1531  025F               	subwf	(_Temp^(0+128)+8),w
  4147  1532                     u10635:	
  4148  1532  1803               	skipnc
  4149  1533  2D3B               	goto	l9522
  4150                           
  4151                           ;OverTemperature_B1.c: 37: Temp.ADH[0] = Temp.ADRES;
  4152  1534  0864               	movf	((_Temp+1)^(0+128)+12),w
  4153  1535  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4154  1536  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4155  1537  0863               	movf	(_Temp^(0+128)+12),w
  4156  1538  01DF               	clrf	(_Temp^(0+128)+8)
  4157  1539  07DF               	addwf	(_Temp^(0+128)+8),f
  4158                           
  4159                           ;OverTemperature_B1.c: 38: } else if (Temp.ADH[1] < Temp.ADRES) {
  4160  153A  0008               	return
  4161  153B                     l9522:	
  4162  153B  0864               	movf	((_Temp+1)^(0+128)+12),w
  4163  153C  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4164  153D  1D03               	skipz
  4165  153E  2D41               	goto	u10645
  4166  153F  0863               	movf	(_Temp^(0+128)+12),w
  4167  1540  0261               	subwf	(_Temp^(0+128)+10),w
  4168  1541                     u10645:	
  4169  1541  1803               	skipnc
  4170  1542  0008               	return
  4171                           
  4172                           ;OverTemperature_B1.c: 39: Temp.ADH[1] = Temp.ADRES;
  4173  1543  0864               	movf	((_Temp+1)^(0+128)+12),w
  4174  1544  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4175  1545  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4176  1546  0863               	movf	(_Temp^(0+128)+12),w
  4177  1547  01E1               	clrf	(_Temp^(0+128)+10)
  4178  1548  07E1               	addwf	(_Temp^(0+128)+10),f
  4179  1549  0008               	return
  4180  154A                     __end_of_getTemp_AD:	
  4181                           
  4182                           	psect	text4
  4183  11F6                     __ptext4:	
  4184 ;; *************** function _getAD *****************
  4185 ;; Defined at:
  4186 ;;		line 453 in file "../src/MCU_B1.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;  adcon0          1    wreg     unsigned char 
  4189 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  2    0[BANK0 ] int 
  4194 ;; Registers used:
  4195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4201 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4205 ;;Total ram usage:        4 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    6
  4208 ;; This function calls:
  4209 ;;		_Timeout_Counter
  4210 ;;		_set_TimeoutCleared
  4211 ;; This function is called by:
  4212 ;;		_getTemp_AD
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           
  4217                           ;psect for function _getAD
  4218  11F6                     _getAD:	
  4219                           
  4220                           ;incstack = 0
  4221                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4222                           ;getAD@adcon0 stored from wreg
  4223  11F6  0020               	movlb	0	; select bank0
  4224  11F7  00A3               	movwf	getAD@adcon0
  4225                           
  4226                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4227  11F8  0823               	movf	getAD@adcon0,w
  4228  11F9  0021               	movlb	1	; select bank1
  4229  11FA  009D               	movwf	29	;volatile
  4230                           
  4231                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4232  11FB  0020               	movlb	0	; select bank0
  4233  11FC  0820               	movf	getAD@adcon1,w
  4234  11FD  0021               	movlb	1	; select bank1
  4235  11FE  009E               	movwf	30	;volatile
  4236                           
  4237                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4238  11FF  149D               	bsf	29,1	;volatile
  4239                           
  4240                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4241  1200  2A04               	goto	l9002
  4242  1201                     l9000:	
  4243                           
  4244                           ;MCU_B1.c: 458: Timeout_Counter();
  4245  1201  3190  2071  3191   	fcall	_Timeout_Counter
  4246  1204                     l9002:	
  4247  1204  0021               	movlb	1	; select bank1
  4248  1205  1C9D               	btfss	29,1	;volatile
  4249  1206  2A09               	goto	l9006
  4250  1207  1D2D               	btfss	(_myMain^(0+128)+13),2
  4251  1208  2A01               	goto	l9000
  4252  1209                     l9006:	
  4253                           
  4254                           ;MCU_B1.c: 459: };
  4255                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4256  1209  319D  25F6         	fcall	_set_TimeoutCleared
  4257                           
  4258                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4259  120B  0021               	movlb	1	; select bank1
  4260  120C  081C               	movf	28,w	;volatile
  4261  120D  0020               	movlb	0	; select bank0
  4262  120E  01A1               	clrf	?_getAD+1
  4263  120F  07A1               	addwf	?_getAD+1,f
  4264  1210  0021               	movlb	1	; select bank1
  4265  1211  081B               	movf	27,w	;volatile
  4266  1212  0020               	movlb	0	; select bank0
  4267  1213  01A0               	clrf	?_getAD
  4268  1214  07A0               	addwf	?_getAD,f
  4269  1215  0008               	return
  4270  1216                     __end_of_getAD:	
  4271                           
  4272                           	psect	text5
  4273  1F51                     __ptext5:	
  4274 ;; *************** function _WDT_Main *****************
  4275 ;; Defined at:
  4276 ;;		line 1032 in file "../src/MCU_B1.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;		None
  4281 ;; Return value:  Size  Location     Type
  4282 ;;		None               void
  4283 ;; Registers used:
  4284 ;;		wreg, status,2, status,0, pclath, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4293 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4294 ;;Total ram usage:        1 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    6
  4297 ;; This function calls:
  4298 ;;		_WDT_Clearing
  4299 ;; This function is called by:
  4300 ;;		_main
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           
  4305                           ;psect for function _WDT_Main
  4306  1F51                     _WDT_Main:	
  4307                           
  4308                           ;MCU_B1.c: 1033: if (WDT.Enable == 1) {
  4309                           
  4310                           ;incstack = 0
  4311                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4312  1F51  0021               	movlb	1	; select bank1
  4313  1F52  1C4B               	btfss	_WDT^(0+128),0
  4314  1F53  0008               	return
  4315                           
  4316                           ;MCU_B1.c: 1034: if (WDT.Timer-- > 0) {
  4317  1F54  3001               	movlw	1
  4318  1F55  02CC               	subwf	(_WDT^(0+128)+1),f
  4319  1F56  084C               	movf	(_WDT^(0+128)+1),w
  4320  1F57  3AFF               	xorlw	255
  4321  1F58  1903               	skipnz
  4322  1F59  0008               	return
  4323                           
  4324                           ;MCU_B1.c: 1035: WDT.Timer = 100;
  4325  1F5A  3064               	movlw	100
  4326  1F5B  0020               	movlb	0	; select bank0
  4327  1F5C  00A0               	movwf	??_WDT_Main
  4328  1F5D  0820               	movf	??_WDT_Main,w
  4329  1F5E  0021               	movlb	1	; select bank1
  4330  1F5F  00CC               	movwf	(_WDT^(0+128)+1)
  4331                           
  4332                           ;MCU_B1.c: 1036: WDT_Clearing();
  4333  1F60  3180  2002         	fcall	_WDT_Clearing
  4334  1F62  0008               	return
  4335  1F63                     __end_of_WDT_Main:	
  4336                           
  4337                           	psect	text6
  4338  0002                     __ptext6:	
  4339 ;; *************** function _WDT_Clearing *****************
  4340 ;; Defined at:
  4341 ;;		line 1042 in file "../src/MCU_B1.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;		None
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;		None
  4346 ;; Return value:  Size  Location     Type
  4347 ;;		None               void
  4348 ;; Registers used:
  4349 ;;		None
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4359 ;;Total ram usage:        0 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    5
  4362 ;; This function calls:
  4363 ;;		Nothing
  4364 ;; This function is called by:
  4365 ;;		_WDT_Main
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           
  4370                           ;psect for function _WDT_Clearing
  4371  0002                     _WDT_Clearing:	
  4372                           
  4373                           ;incstack = 0
  4374                           ; Regs used in _WDT_Clearing: []
  4375  0002  0064               	clrwdt	;# 
  4376  0003  0008               	return
  4377  0004                     __end_of_WDT_Clearing:	
  4378                           
  4379                           	psect	text7
  4380  1DE3                     __ptext7:	
  4381 ;; *************** function _Temp_Main *****************
  4382 ;; Defined at:
  4383 ;;		line 51 in file "../src/OverTemperature_B1.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;		None
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;		None
  4388 ;; Return value:  Size  Location     Type
  4389 ;;		None               void
  4390 ;; Registers used:
  4391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;Total ram usage:        0 bytes
  4402 ;; Hardware stack levels used:    1
  4403 ;; Hardware stack levels required when called:    7
  4404 ;; This function calls:
  4405 ;;		_setTemp_Main
  4406 ;; This function is called by:
  4407 ;;		_main
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           
  4412                           ;psect for function _Temp_Main
  4413  1DE3                     _Temp_Main:	
  4414                           
  4415                           ;OverTemperature_B1.c: 53: setTemp_Main();
  4416                           
  4417                           ;incstack = 0
  4418                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4419  1DE3  318E  26BE         	fcall	_setTemp_Main
  4420  1DE5  0008               	return
  4421  1DE6                     __end_of_Temp_Main:	
  4422                           
  4423                           	psect	text8
  4424  0EBE                     __ptext8:	
  4425 ;; *************** function _setTemp_Main *****************
  4426 ;; Defined at:
  4427 ;;		line 58 in file "../src/OverTemperature_B1.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;		None
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;		None
  4432 ;; Return value:  Size  Location     Type
  4433 ;;		None               void
  4434 ;; Registers used:
  4435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4443 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4444 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4445 ;;Total ram usage:        2 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    6
  4448 ;; This function calls:
  4449 ;;		_getMain_All_Error_Status
  4450 ;; This function is called by:
  4451 ;;		_Temp_Main
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           
  4456                           ;psect for function _setTemp_Main
  4457  0EBE                     _setTemp_Main:	
  4458                           
  4459                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  4460                           
  4461                           ;incstack = 0
  4462                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4463  0EBE  0021               	movlb	1	; select bank1
  4464  0EBF  1C57               	btfss	_Temp^(0+128),0
  4465  0EC0  2F53               	goto	l1736
  4466                           
  4467                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  4468  0EC1  1957               	btfsc	_Temp^(0+128),2
  4469  0EC2  2ED2               	goto	l9094
  4470                           
  4471                           ;OverTemperature_B1.c: 61: Temp.Time++;
  4472  0EC3  3001               	movlw	1
  4473  0EC4  07D8               	addwf	(_Temp^(0+128)+1),f
  4474  0EC5  3000               	movlw	0
  4475  0EC6  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4476                           
  4477                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  4478  0EC7  3001               	movlw	1
  4479  0EC8  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4480  0EC9  30F4               	movlw	244
  4481  0ECA  1903               	skipnz
  4482  0ECB  0258               	subwf	(_Temp^(0+128)+1),w
  4483  0ECC  1C03               	skipc
  4484  0ECD  0008               	return
  4485                           
  4486                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  4487  0ECE  01D8               	clrf	(_Temp^(0+128)+1)
  4488  0ECF  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4489                           
  4490                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  4491  0ED0  1557               	bsf	_Temp^(0+128),2
  4492                           
  4493                           ;OverTemperature_B1.c: 65: }
  4494                           ;OverTemperature_B1.c: 66: } else {
  4495  0ED1  0008               	return
  4496  0ED2                     l9094:	
  4497                           
  4498                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  4499  0ED2  3002               	movlw	2
  4500  0ED3  3191  2141  318E   	fcall	_getMain_All_Error_Status
  4501  0ED6  3800               	iorlw	0
  4502  0ED7  1D03               	skipz
  4503  0ED8  0008               	return
  4504                           
  4505                           ;OverTemperature_B1.c: 68: Temp.Time++;
  4506  0ED9  3001               	movlw	1
  4507  0EDA  0021               	movlb	1	; select bank1
  4508  0EDB  07D8               	addwf	(_Temp^(0+128)+1),f
  4509  0EDC  3000               	movlw	0
  4510  0EDD  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4511                           
  4512                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  4513  0EDE  3000               	movlw	0
  4514  0EDF  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4515  0EE0  3005               	movlw	5
  4516  0EE1  1903               	skipnz
  4517  0EE2  0258               	subwf	(_Temp^(0+128)+1),w
  4518  0EE3  1C03               	skipc
  4519  0EE4  0008               	return
  4520                           
  4521                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  4522  0EE5  01D8               	clrf	(_Temp^(0+128)+1)
  4523  0EE6  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4524                           
  4525                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  4526  0EE7  1E57               	btfss	_Temp^(0+128),4
  4527  0EE8  0008               	return
  4528                           
  4529                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  4530  0EE9  1157               	bcf	_Temp^(0+128),2
  4531                           
  4532                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4533  0EEA  300A               	movlw	10
  4534  0EEB  3ED7               	addlw	_Temp& (0+255)
  4535  0EEC  0086               	movwf	6
  4536  0EED  0187               	clrf	7
  4537  0EEE  3008               	movlw	8
  4538  0EEF  3ED7               	addlw	_Temp& (0+255)
  4539  0EF0  0084               	movwf	4
  4540  0EF1  0185               	clrf	5
  4541  0EF2  3F40               	moviw [0]fsr1
  4542  0EF3  0700               	addwf	0,w
  4543  0EF4  0020               	movlb	0	; select bank0
  4544  0EF5  00A5               	movwf	??_setTemp_Main
  4545  0EF6  3101               	addfsr 0,1
  4546  0EF7  3F41               	moviw [1]fsr1
  4547  0EF8  3D00               	addwfc	0,w
  4548  0EF9  00A6               	movwf	??_setTemp_Main+1
  4549  0EFA  36A6               	lsrf	??_setTemp_Main+1,f
  4550  0EFB  0CA5               	rrf	??_setTemp_Main,f
  4551  0EFC  0825               	movf	??_setTemp_Main,w
  4552  0EFD  0021               	movlb	1	; select bank1
  4553  0EFE  00DD               	movwf	(_Temp^(0+128)+6)
  4554  0EFF  0020               	movlb	0	; select bank0
  4555  0F00  0826               	movf	??_setTemp_Main+1,w
  4556  0F01  0021               	movlb	1	; select bank1
  4557  0F02  00DE               	movwf	((_Temp+1)^(0+128)+6)
  4558                           
  4559                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 600;
  4560  0F03  3058               	movlw	88
  4561  0F04  00E5               	movwf	(_Temp^(0+128)+14)
  4562  0F05  3002               	movlw	2
  4563  0F06  00E6               	movwf	(_Temp^(0+128)+15)
  4564                           
  4565                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 550;
  4566  0F07  3026               	movlw	38
  4567  0F08  00E7               	movwf	(_Temp^(0+128)+16)
  4568  0F09  3002               	movlw	2
  4569  0F0A  00E8               	movwf	(_Temp^(0+128)+17)
  4570                           
  4571                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  4572  0F0B  1CD7               	btfss	_Temp^(0+128),1
  4573  0F0C  2F22               	goto	l9124
  4574                           
  4575                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  4576  0F0D  0866               	movf	((_Temp+1)^(0+128)+14),w
  4577  0F0E  025E               	subwf	((_Temp+1)^(0+128)+6),w
  4578  0F0F  1D03               	skipz
  4579  0F10  2F13               	goto	u9945
  4580  0F11  0865               	movf	(_Temp^(0+128)+14),w
  4581  0F12  025D               	subwf	(_Temp^(0+128)+6),w
  4582  0F13                     u9945:	
  4583  0F13  1C03               	skipc
  4584  0F14  2F37               	goto	l9134
  4585                           
  4586                           ;OverTemperature_B1.c: 92: Temp.Count++;
  4587  0F15  3001               	movlw	1
  4588  0F16  0020               	movlb	0	; select bank0
  4589  0F17  00A5               	movwf	??_setTemp_Main
  4590  0F18  0825               	movf	??_setTemp_Main,w
  4591  0F19  0021               	movlb	1	; select bank1
  4592  0F1A  07DA               	addwf	(_Temp^(0+128)+3),f
  4593                           
  4594                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  4595  0F1B  3003               	movlw	3
  4596  0F1C  025A               	subwf	(_Temp^(0+128)+3),w
  4597  0F1D  1C03               	skipc
  4598  0F1E  2F38               	goto	l9136
  4599                           
  4600                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  4601  0F1F  01DA               	clrf	(_Temp^(0+128)+3)
  4602                           
  4603                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  4604  0F20  10D7               	bcf	_Temp^(0+128),1
  4605                           
  4606                           ;OverTemperature_B1.c: 96: }
  4607                           ;OverTemperature_B1.c: 97: } else {
  4608  0F21  2F38               	goto	l9136
  4609  0F22                     l9124:	
  4610                           ;OverTemperature_B1.c: 99: }
  4611                           ;OverTemperature_B1.c: 100: } else {
  4612                           
  4613                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  4614                           
  4615                           
  4616                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  4617  0F22  085E               	movf	((_Temp+1)^(0+128)+6),w
  4618  0F23  0268               	subwf	((_Temp+1)^(0+128)+16),w
  4619  0F24  1D03               	skipz
  4620  0F25  2F28               	goto	u9965
  4621  0F26  085D               	movf	(_Temp^(0+128)+6),w
  4622  0F27  0267               	subwf	(_Temp^(0+128)+16),w
  4623  0F28                     u9965:	
  4624  0F28  1C03               	skipc
  4625  0F29  2F37               	goto	l9134
  4626                           
  4627                           ;OverTemperature_B1.c: 102: Temp.Count++;
  4628  0F2A  3001               	movlw	1
  4629  0F2B  0020               	movlb	0	; select bank0
  4630  0F2C  00A5               	movwf	??_setTemp_Main
  4631  0F2D  0825               	movf	??_setTemp_Main,w
  4632  0F2E  0021               	movlb	1	; select bank1
  4633  0F2F  07DA               	addwf	(_Temp^(0+128)+3),f
  4634                           
  4635                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  4636  0F30  3003               	movlw	3
  4637  0F31  025A               	subwf	(_Temp^(0+128)+3),w
  4638  0F32  1C03               	skipc
  4639  0F33  2F38               	goto	l9136
  4640                           
  4641                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  4642  0F34  01DA               	clrf	(_Temp^(0+128)+3)
  4643                           
  4644                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  4645  0F35  14D7               	bsf	_Temp^(0+128),1
  4646                           
  4647                           ;OverTemperature_B1.c: 106: }
  4648                           ;OverTemperature_B1.c: 107: } else {
  4649  0F36  2F38               	goto	l9136
  4650  0F37                     l9134:	
  4651                           
  4652                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  4653  0F37  01DA               	clrf	(_Temp^(0+128)+3)
  4654  0F38                     l9136:	
  4655                           
  4656                           ;OverTemperature_B1.c: 109: }
  4657                           ;OverTemperature_B1.c: 110: }
  4658                           ;OverTemperature_B1.c: 111: product->Data[24]=Temp.AD >> 8;
  4659  0F38  085E               	movf	((_Temp+1)^(0+128)+6),w
  4660  0F39  0020               	movlb	0	; select bank0
  4661  0F3A  00A5               	movwf	??_setTemp_Main
  4662  0F3B  086F               	movf	_product,w
  4663  0F3C  3E18               	addlw	24
  4664  0F3D  0086               	movwf	6
  4665  0F3E  3002               	movlw	2	; select bank4/5
  4666  0F3F  0087               	movwf	7
  4667  0F40  0825               	movf	??_setTemp_Main,w
  4668  0F41  0081               	movwf	1
  4669                           
  4670                           ;OverTemperature_B1.c: 112: product->Data[25]=Temp.AD;
  4671  0F42  0021               	movlb	1	; select bank1
  4672  0F43  085D               	movf	(_Temp^(0+128)+6),w
  4673  0F44  0020               	movlb	0	; select bank0
  4674  0F45  00A5               	movwf	??_setTemp_Main
  4675  0F46  086F               	movf	_product,w
  4676  0F47  3E19               	addlw	25
  4677  0F48  0086               	movwf	6
  4678  0F49  3002               	movlw	2	; select bank4/5
  4679  0F4A  0087               	movwf	7
  4680  0F4B  0825               	movf	??_setTemp_Main,w
  4681  0F4C  0081               	movwf	1
  4682                           
  4683                           ;OverTemperature_B1.c: 115: Temp.ADH[0] = 0;
  4684  0F4D  0021               	movlb	1	; select bank1
  4685  0F4E  01DF               	clrf	(_Temp^(0+128)+8)
  4686  0F4F  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4687                           
  4688                           ;OverTemperature_B1.c: 116: Temp.ADH[1] = 0;
  4689  0F50  01E1               	clrf	(_Temp^(0+128)+10)
  4690  0F51  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4691                           
  4692                           ;OverTemperature_B1.c: 117: }
  4693                           ;OverTemperature_B1.c: 118: }
  4694                           ;OverTemperature_B1.c: 119: }
  4695                           ;OverTemperature_B1.c: 120: }
  4696                           ;OverTemperature_B1.c: 121: } else {
  4697  0F52  0008               	return
  4698  0F53                     l1736:	
  4699                           
  4700                           ;OverTemperature_B1.c: 122: if (myMain.PowerON == 1) {
  4701  0F53  1C20               	btfss	_myMain^(0+128),0
  4702  0F54  0008               	return
  4703                           
  4704                           ;OverTemperature_B1.c: 123: Temp.Enable = 1;
  4705  0F55  1457               	bsf	_Temp^(0+128),0
  4706  0F56  0008               	return
  4707  0F57                     __end_of_setTemp_Main:	
  4708                           
  4709                           	psect	text9
  4710  1DE0                     __ptext9:	
  4711 ;; *************** function _Temp_Initialization *****************
  4712 ;; Defined at:
  4713 ;;		line 9 in file "../src/OverTemperature_B1.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;		None
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;		None
  4718 ;; Return value:  Size  Location     Type
  4719 ;;		None               void
  4720 ;; Registers used:
  4721 ;;		status,2, status,0, pclath, cstack
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4731 ;;Total ram usage:        0 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    6
  4734 ;; This function calls:
  4735 ;;		_setTemp_Initialization
  4736 ;; This function is called by:
  4737 ;;		_main
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           
  4742                           ;psect for function _Temp_Initialization
  4743  1DE0                     _Temp_Initialization:	
  4744                           
  4745                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  4746                           
  4747                           ;incstack = 0
  4748                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4749  1DE0  3187  27FF         	fcall	_setTemp_Initialization
  4750  1DE2  0008               	return
  4751  1DE3                     __end_of_Temp_Initialization:	
  4752                           
  4753                           	psect	text10
  4754  07FF                     __ptext10:	
  4755 ;; *************** function _setTemp_Initialization *****************
  4756 ;; Defined at:
  4757 ;;		line 46 in file "../src/OverTemperature_B1.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;		None
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;		None
  4762 ;; Return value:  Size  Location     Type
  4763 ;;		None               void
  4764 ;; Registers used:
  4765 ;;		None
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4775 ;;Total ram usage:        0 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; Hardware stack levels required when called:    5
  4778 ;; This function calls:
  4779 ;;		Nothing
  4780 ;; This function is called by:
  4781 ;;		_Temp_Initialization
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           
  4786                           ;psect for function _setTemp_Initialization
  4787  07FF                     _setTemp_Initialization:	
  4788                           
  4789                           ;incstack = 0
  4790                           ; Regs used in _setTemp_Initialization: []
  4791  07FF  0008               	return
  4792  0800                     __end_of_setTemp_Initialization:	
  4793                           
  4794                           	psect	text11
  4795  1278                     __ptext11:	
  4796 ;; *************** function _Switch_Main *****************
  4797 ;; Defined at:
  4798 ;;		line 72 in file "../src/Switch_B1.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;		None
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  error           1    1[BANK1 ] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;		None               void
  4805 ;; Registers used:
  4806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4813 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4814 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4815 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4816 ;;Total ram usage:        2 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:   12
  4819 ;; This function calls:
  4820 ;;		_TouchPower
  4821 ;;		_getMain_All_Error_Status
  4822 ;;		_setMain_Exception
  4823 ;;		_setSw_Main
  4824 ;; This function is called by:
  4825 ;;		_main
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           
  4830                           ;psect for function _Switch_Main
  4831  1278                     _Switch_Main:	
  4832                           
  4833                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  4834                           
  4835                           ;incstack = 0
  4836                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4837  1278  3000               	movlw	0
  4838  1279  3191  2141  3192   	fcall	_getMain_All_Error_Status
  4839  127C  0021               	movlb	1	; select bank1
  4840  127D  00EB               	movwf	??_Switch_Main^(0+128)
  4841  127E  086B               	movf	??_Switch_Main^(0+128),w
  4842  127F  00EC               	movwf	Switch_Main@error^(0+128)
  4843                           
  4844                           ;Switch_B1.c: 74: if (error != 0) {
  4845  1280  086C               	movf	Switch_Main@error^(0+128),w
  4846  1281  1903               	btfsc	3,2
  4847  1282  2A87               	goto	l2484
  4848                           
  4849                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  4850  1283  1875               	btfsc	_SwDetect,0
  4851  1284  2A8E               	goto	l9572
  4852                           
  4853                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  4854  1285  1475               	bsf	_SwDetect,0
  4855  1286  2A8A               	goto	L1
  4856  1287                     l2484:	
  4857                           ;Switch_B1.c: 80: }
  4858                           ;Switch_B1.c: 81: } else {
  4859                           
  4860                           ;Switch_B1.c: 78: setMain_Exception(error);
  4861                           
  4862                           
  4863                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  4864  1287  1C75               	btfss	_SwDetect,0
  4865  1288  2A8E               	goto	l9572
  4866                           
  4867                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  4868  1289  1075               	bcf	_SwDetect,0
  4869  128A                     L1:	
  4870                           
  4871                           ;Switch_B1.c: 85: setMain_Exception(error);
  4872  128A  086C               	movf	Switch_Main@error^(0+128),w
  4873  128B  318D  25C3  3192   	fcall	_setMain_Exception
  4874  128E                     l9572:	
  4875                           
  4876                           ;Switch_B1.c: 87: }
  4877                           ;Switch_B1.c: 88: }
  4878                           ;Switch_B1.c: 91: setSw_Main(1);
  4879  128E  3001               	movlw	1
  4880  128F  3181  21F1  3192   	fcall	_setSw_Main
  4881                           
  4882                           ;Switch_B1.c: 95: setSw_Main(2);
  4883  1292  3002               	movlw	2
  4884  1293  3181  21F1  3192   	fcall	_setSw_Main
  4885                           
  4886                           ;Switch_B1.c: 103: TouchPower();
  4887  1296  3190  209B         	fcall	_TouchPower
  4888  1298  0008               	return
  4889  1299                     __end_of_Switch_Main:	
  4890                           
  4891                           	psect	text12
  4892  01F1                     __ptext12:	
  4893 ;; *************** function _setSw_Main *****************
  4894 ;; Defined at:
  4895 ;;		line 137 in file "../src/Switch_B1.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  sw              1    wreg     unsigned char 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  sw              1   72[BANK0 ] unsigned char 
  4900 ;; Return value:  Size  Location     Type
  4901 ;;		None               void
  4902 ;; Registers used:
  4903 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;Total ram usage:        3 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:   10
  4916 ;; This function calls:
  4917 ;;		_SwPointSelect
  4918 ;;		_getSw_KeyStatus
  4919 ;;		_setBuz
  4920 ;;		_setDimmerLights_AdjControl
  4921 ;;		_setDimmerLights_SwOff
  4922 ;;		_setDimmerLights_SwOn
  4923 ;;		_setRF_Learn
  4924 ;; This function is called by:
  4925 ;;		_Switch_Main
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           
  4930                           ;psect for function _setSw_Main
  4931  01F1                     _setSw_Main:	
  4932                           
  4933                           ;incstack = 0
  4934                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4935                           ;setSw_Main@sw stored from wreg
  4936  01F1  0020               	movlb	0	; select bank0
  4937  01F2  00E8               	movwf	setSw_Main@sw
  4938                           
  4939                           ;Switch_B1.c: 138: SwPointSelect(sw);
  4940  01F3  0868               	movf	setSw_Main@sw,w
  4941  01F4  319F  27D8  3181   	fcall	_SwPointSelect
  4942                           
  4943                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  4944  01F7  0020               	movlb	0	; select bank0
  4945  01F8  086E               	movf	_Sw,w
  4946  01F9  0086               	movwf	6
  4947  01FA  3001               	movlw	1	; select bank2/3
  4948  01FB  0087               	movwf	7
  4949  01FC  1C01               	btfss	1,0
  4950  01FD  2B53               	goto	l2494
  4951                           
  4952                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  4953  01FE  1875               	btfsc	_SwDetect,0
  4954  01FF  2A1A               	goto	l9278
  4955                           
  4956                           ;Switch_B1.c: 141: Sw->Detect = 0;
  4957  0200  0A6E               	incf	_Sw,w
  4958  0201  0086               	movwf	6
  4959  0202  3001               	movlw	1	; select bank2/3
  4960  0203  0087               	movwf	7
  4961  0204  1081               	bcf	1,1
  4962                           
  4963                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4964  0205  0868               	movf	setSw_Main@sw,w
  4965  0206  3191  21B7  3181   	fcall	_getSw_KeyStatus
  4966  0209  3A01               	xorlw	1
  4967  020A  3000               	movlw	0
  4968  020B  1903               	skipnz
  4969  020C  3001               	movlw	1
  4970  020D  0020               	movlb	0	; select bank0
  4971  020E  00E6               	movwf	??_setSw_Main
  4972  020F  086E               	movf	_Sw,w
  4973  0210  0086               	movwf	6
  4974  0211  3001               	movlw	1	; select bank2/3
  4975  0212  0087               	movwf	7
  4976  0213  0DE6               	rlf	??_setSw_Main,f
  4977  0214  0801               	movf	1,w
  4978  0215  0666               	xorwf	??_setSw_Main,w
  4979  0216  39FD               	andlw	-3
  4980  0217  0666               	xorwf	??_setSw_Main,w
  4981  0218  0081               	movwf	1
  4982                           
  4983                           ;Switch_B1.c: 143: } else {
  4984  0219  2A2F               	goto	l2496
  4985  021A                     l9278:	
  4986                           
  4987                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  4988  021A  0A6E               	incf	_Sw,w
  4989  021B  0086               	movwf	6
  4990  021C  3001               	movlw	1	; select bank2/3
  4991  021D  0087               	movwf	7
  4992  021E  1881               	btfsc	1,1
  4993  021F  2A2F               	goto	l2496
  4994                           
  4995                           ;Switch_B1.c: 145: Sw->Detect = 1;
  4996  0220  0A6E               	incf	_Sw,w
  4997  0221  0086               	movwf	6
  4998  0222  3001               	movlw	1	; select bank2/3
  4999  0223  0087               	movwf	7
  5000  0224  1481               	bsf	1,1
  5001                           
  5002                           ;Switch_B1.c: 146: Sw->Touch = 1;
  5003  0225  086E               	movf	_Sw,w
  5004  0226  0086               	movwf	6
  5005  0227  3001               	movlw	1	; select bank2/3
  5006  0228  0087               	movwf	7
  5007  0229  1481               	bsf	1,1
  5008                           
  5009                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5010  022A  086E               	movf	_Sw,w
  5011  022B  0086               	movwf	6
  5012  022C  3001               	movlw	1	; select bank2/3
  5013  022D  0087               	movwf	7
  5014  022E  1501               	bsf	1,2
  5015  022F                     l2496:	
  5016                           
  5017                           ;Switch_B1.c: 148: }
  5018                           ;Switch_B1.c: 149: }
  5019                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5020  022F  086E               	movf	_Sw,w
  5021  0230  0086               	movwf	6
  5022  0231  3001               	movlw	1	; select bank2/3
  5023  0232  0087               	movwf	7
  5024  0233  1C81               	btfss	1,1
  5025  0234  2AFE               	goto	l9328
  5026                           
  5027                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5028  0235  086E               	movf	_Sw,w
  5029  0236  0086               	movwf	6
  5030  0237  3001               	movlw	1	; select bank2/3
  5031  0238  0087               	movwf	7
  5032  0239  1901               	btfsc	1,2
  5033  023A  2A5C               	goto	l9294
  5034                           
  5035                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5036  023B  3001               	movlw	1
  5037  023C  00E6               	movwf	??_setSw_Main
  5038  023D  086E               	movf	_Sw,w
  5039  023E  3E02               	addlw	2
  5040  023F  0086               	movwf	6
  5041  0240  3001               	movlw	1	; select bank2/3
  5042  0241  0087               	movwf	7
  5043  0242  0866               	movf	??_setSw_Main,w
  5044  0243  0781               	addwf	1,f
  5045                           
  5046                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5047  0244  086E               	movf	_Sw,w
  5048  0245  3E02               	addlw	2
  5049  0246  0086               	movwf	6
  5050  0247  3001               	movlw	1	; select bank2/3
  5051  0248  0087               	movwf	7
  5052  0249  3005               	movlw	5
  5053  024A  0201               	subwf	1,w
  5054  024B  1C03               	skipc
  5055  024C  0008               	return
  5056                           
  5057                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5058  024D  086E               	movf	_Sw,w
  5059  024E  3E02               	addlw	2
  5060  024F  0086               	movwf	6
  5061  0250  3001               	movlw	1	; select bank2/3
  5062  0251  0087               	movwf	7
  5063  0252  0181               	clrf	1
  5064                           
  5065                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5066  0253  086E               	movf	_Sw,w
  5067  0254  0086               	movwf	6
  5068  0255  3001               	movlw	1	; select bank2/3
  5069  0256  0087               	movwf	7
  5070  0257  1501               	bsf	1,2
  5071                           
  5072                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5073  0258  0868               	movf	setSw_Main@sw,w
  5074  0259  3196  2645         	fcall	_setDimmerLights_SwOn
  5075                           
  5076                           ;Switch_B1.c: 162: }
  5077                           ;Switch_B1.c: 163: } else {
  5078  025B  0008               	return
  5079  025C                     l9294:	
  5080                           
  5081                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5082  025C  0020               	movlb	0	; select bank0
  5083  025D  086E               	movf	_Sw,w
  5084  025E  0086               	movwf	6
  5085  025F  3001               	movlw	1	; select bank2/3
  5086  0260  0087               	movwf	7
  5087  0261  1981               	btfsc	1,3
  5088  0262  2A8E               	goto	l9304
  5089                           
  5090                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5091  0263  086E               	movf	_Sw,w
  5092  0264  3E03               	addlw	3
  5093  0265  0086               	movwf	6
  5094  0266  3001               	movlw	1	; select bank2/3
  5095  0267  0087               	movwf	7
  5096  0268  3001               	movlw	1
  5097  0269  0781               	addwf	1,f
  5098  026A  3141               	addfsr 1,1
  5099  026B  1803               	skipnc
  5100  026C  0A81               	incf	1,f
  5101                           
  5102                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5103  026D  086E               	movf	_Sw,w
  5104  026E  3E03               	addlw	3
  5105  026F  0086               	movwf	6
  5106  0270  3001               	movlw	1	; select bank2/3
  5107  0271  0087               	movwf	7
  5108  0272  3F40               	moviw [0]fsr1
  5109  0273  00E6               	movwf	??_setSw_Main
  5110  0274  3F41               	moviw [1]fsr1
  5111  0275  00E7               	movwf	??_setSw_Main+1
  5112  0276  3000               	movlw	0
  5113  0277  0267               	subwf	??_setSw_Main+1,w
  5114  0278  3096               	movlw	150
  5115  0279  1903               	skipnz
  5116  027A  0266               	subwf	??_setSw_Main,w
  5117  027B  1C03               	skipc
  5118  027C  0008               	return
  5119                           
  5120                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5121  027D  086E               	movf	_Sw,w
  5122  027E  3E03               	addlw	3
  5123  027F  0086               	movwf	6
  5124  0280  3001               	movlw	1	; select bank2/3
  5125  0281  0087               	movwf	7
  5126  0282  3000               	movlw	0
  5127  0283  3FC0               	movwi [0]fsr1
  5128  0284  3FC1               	movwi [1]fsr1
  5129                           
  5130                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5131  0285  086E               	movf	_Sw,w
  5132  0286  0086               	movwf	6
  5133  0287  3001               	movlw	1	; select bank2/3
  5134  0288  0087               	movwf	7
  5135  0289  1581               	bsf	1,3
  5136                           
  5137                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5138  028A  0868               	movf	setSw_Main@sw,w
  5139  028B  3194  2419         	fcall	_setDimmerLights_AdjControl
  5140                           
  5141                           ;Switch_B1.c: 174: }
  5142                           ;Switch_B1.c: 175: } else {
  5143  028D  0008               	return
  5144  028E                     l9304:	
  5145                           
  5146                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5147  028E  0020               	movlb	0	; select bank0
  5148  028F  086E               	movf	_Sw,w
  5149  0290  0086               	movwf	6
  5150  0291  3001               	movlw	1	; select bank2/3
  5151  0292  0087               	movwf	7
  5152  0293  1A01               	btfsc	1,4
  5153  0294  2ACC               	goto	l9318
  5154                           
  5155                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5156  0295  086E               	movf	_Sw,w
  5157  0296  3E05               	addlw	5
  5158  0297  0086               	movwf	6
  5159  0298  3001               	movlw	1	; select bank2/3
  5160  0299  0087               	movwf	7
  5161  029A  3001               	movlw	1
  5162  029B  0781               	addwf	1,f
  5163  029C  3141               	addfsr 1,1
  5164  029D  1803               	skipnc
  5165  029E  0A81               	incf	1,f
  5166                           
  5167                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5168  029F  086E               	movf	_Sw,w
  5169  02A0  3E05               	addlw	5
  5170  02A1  0086               	movwf	6
  5171  02A2  3001               	movlw	1	; select bank2/3
  5172  02A3  0087               	movwf	7
  5173  02A4  3F40               	moviw [0]fsr1
  5174  02A5  00E6               	movwf	??_setSw_Main
  5175  02A6  3F41               	moviw [1]fsr1
  5176  02A7  00E7               	movwf	??_setSw_Main+1
  5177  02A8  3000               	movlw	0
  5178  02A9  0267               	subwf	??_setSw_Main+1,w
  5179  02AA  3096               	movlw	150
  5180  02AB  1903               	skipnz
  5181  02AC  0266               	subwf	??_setSw_Main,w
  5182  02AD  1C03               	skipc
  5183  02AE  0008               	return
  5184                           
  5185                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5186  02AF  086E               	movf	_Sw,w
  5187  02B0  3E05               	addlw	5
  5188  02B1  0086               	movwf	6
  5189  02B2  3001               	movlw	1	; select bank2/3
  5190  02B3  0087               	movwf	7
  5191  02B4  3000               	movlw	0
  5192  02B5  3FC0               	movwi [0]fsr1
  5193  02B6  3FC1               	movwi [1]fsr1
  5194                           
  5195                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5196  02B7  086E               	movf	_Sw,w
  5197  02B8  0086               	movwf	6
  5198  02B9  3001               	movlw	1	; select bank2/3
  5199  02BA  0087               	movwf	7
  5200  02BB  1601               	bsf	1,4
  5201                           
  5202                           ;Switch_B1.c: 183: setRF_Learn(1);
  5203  02BC  3001               	movlw	1
  5204  02BD  319F  27EC  3181   	fcall	_setRF_Learn
  5205                           
  5206                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5207  02C0  0021               	movlb	1	; select bank1
  5208  02C1  1EA0               	btfss	_myMain^(0+128),5
  5209  02C2  0008               	return
  5210                           
  5211                           ;Switch_B1.c: 186: setBuz(2, 100);
  5212  02C3  3064               	movlw	100
  5213  02C4  0020               	movlb	0	; select bank0
  5214  02C5  00A9               	movwf	setBuz@time
  5215  02C6  3000               	movlw	0
  5216  02C7  00AA               	movwf	setBuz@time+1
  5217  02C8  3002               	movlw	2
  5218  02C9  3188  20A8         	fcall	_setBuz
  5219                           
  5220                           ;Switch_B1.c: 187: }
  5221                           ;Switch_B1.c: 189: }
  5222                           ;Switch_B1.c: 190: } else {
  5223  02CB  0008               	return
  5224  02CC                     l9318:	
  5225                           
  5226                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5227  02CC  0020               	movlb	0	; select bank0
  5228  02CD  086E               	movf	_Sw,w
  5229  02CE  0086               	movwf	6
  5230  02CF  3001               	movlw	1	; select bank2/3
  5231  02D0  0087               	movwf	7
  5232  02D1  1A81               	btfsc	1,5
  5233  02D2  0008               	return
  5234                           
  5235                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5236  02D3  086E               	movf	_Sw,w
  5237  02D4  3E07               	addlw	7
  5238  02D5  0086               	movwf	6
  5239  02D6  3001               	movlw	1	; select bank2/3
  5240  02D7  0087               	movwf	7
  5241  02D8  3001               	movlw	1
  5242  02D9  0781               	addwf	1,f
  5243  02DA  3141               	addfsr 1,1
  5244  02DB  1803               	skipnc
  5245  02DC  0A81               	incf	1,f
  5246                           
  5247                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5248  02DD  086E               	movf	_Sw,w
  5249  02DE  3E07               	addlw	7
  5250  02DF  0086               	movwf	6
  5251  02E0  3001               	movlw	1	; select bank2/3
  5252  02E1  0087               	movwf	7
  5253  02E2  3F40               	moviw [0]fsr1
  5254  02E3  00E6               	movwf	??_setSw_Main
  5255  02E4  3F41               	moviw [1]fsr1
  5256  02E5  00E7               	movwf	??_setSw_Main+1
  5257  02E6  3001               	movlw	1
  5258  02E7  0267               	subwf	??_setSw_Main+1,w
  5259  02E8  302C               	movlw	44
  5260  02E9  1903               	skipnz
  5261  02EA  0266               	subwf	??_setSw_Main,w
  5262  02EB  1C03               	skipc
  5263  02EC  0008               	return
  5264                           
  5265                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5266  02ED  086E               	movf	_Sw,w
  5267  02EE  3E07               	addlw	7
  5268  02EF  0086               	movwf	6
  5269  02F0  3001               	movlw	1	; select bank2/3
  5270  02F1  0087               	movwf	7
  5271  02F2  3000               	movlw	0
  5272  02F3  3FC0               	movwi [0]fsr1
  5273  02F4  3FC1               	movwi [1]fsr1
  5274                           
  5275                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5276  02F5  086E               	movf	_Sw,w
  5277  02F6  0086               	movwf	6
  5278  02F7  3001               	movlw	1	; select bank2/3
  5279  02F8  0087               	movwf	7
  5280  02F9  1681               	bsf	1,5
  5281                           
  5282                           ;Switch_B1.c: 198: setRF_Learn(0);
  5283  02FA  3000               	movlw	0
  5284  02FB  319F  27EC         	fcall	_setRF_Learn
  5285                           
  5286                           ;Switch_B1.c: 201: }
  5287                           ;Switch_B1.c: 202: }
  5288                           ;Switch_B1.c: 203: }
  5289                           ;Switch_B1.c: 204: }
  5290                           ;Switch_B1.c: 205: }
  5291                           ;Switch_B1.c: 206: } else {
  5292  02FD  0008               	return
  5293  02FE                     l9328:	
  5294                           
  5295                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5296  02FE  0020               	movlb	0	; select bank0
  5297  02FF  086E               	movf	_Sw,w
  5298  0300  0086               	movwf	6
  5299  0301  3001               	movlw	1	; select bank2/3
  5300  0302  0087               	movwf	7
  5301  0303  1D01               	btfss	1,2
  5302  0304  0008               	return
  5303                           
  5304                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5305  0305  3001               	movlw	1
  5306  0306  00E6               	movwf	??_setSw_Main
  5307  0307  086E               	movf	_Sw,w
  5308  0308  3E02               	addlw	2
  5309  0309  0086               	movwf	6
  5310  030A  3001               	movlw	1	; select bank2/3
  5311  030B  0087               	movwf	7
  5312  030C  0866               	movf	??_setSw_Main,w
  5313  030D  0781               	addwf	1,f
  5314                           
  5315                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5316  030E  086E               	movf	_Sw,w
  5317  030F  3E02               	addlw	2
  5318  0310  0086               	movwf	6
  5319  0311  3001               	movlw	1	; select bank2/3
  5320  0312  0087               	movwf	7
  5321  0313  3005               	movlw	5
  5322  0314  0201               	subwf	1,w
  5323  0315  1C03               	skipc
  5324  0316  0008               	return
  5325                           
  5326                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5327  0317  086E               	movf	_Sw,w
  5328  0318  3E02               	addlw	2
  5329  0319  0086               	movwf	6
  5330  031A  3001               	movlw	1	; select bank2/3
  5331  031B  0087               	movwf	7
  5332  031C  0181               	clrf	1
  5333                           
  5334                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5335  031D  086E               	movf	_Sw,w
  5336  031E  0086               	movwf	6
  5337  031F  3001               	movlw	1	; select bank2/3
  5338  0320  0087               	movwf	7
  5339  0321  1101               	bcf	1,2
  5340                           
  5341                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5342  0322  086E               	movf	_Sw,w
  5343  0323  3E03               	addlw	3
  5344  0324  0086               	movwf	6
  5345  0325  3001               	movlw	1	; select bank2/3
  5346  0326  0087               	movwf	7
  5347  0327  3000               	movlw	0
  5348  0328  3FC0               	movwi [0]fsr1
  5349  0329  3FC1               	movwi [1]fsr1
  5350                           
  5351                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5352  032A  086E               	movf	_Sw,w
  5353  032B  0086               	movwf	6
  5354  032C  3001               	movlw	1	; select bank2/3
  5355  032D  0087               	movwf	7
  5356  032E  1181               	bcf	1,3
  5357                           
  5358                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5359  032F  086E               	movf	_Sw,w
  5360  0330  3E05               	addlw	5
  5361  0331  0086               	movwf	6
  5362  0332  3001               	movlw	1	; select bank2/3
  5363  0333  0087               	movwf	7
  5364  0334  3000               	movlw	0
  5365  0335  3FC0               	movwi [0]fsr1
  5366  0336  3FC1               	movwi [1]fsr1
  5367                           
  5368                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5369  0337  086E               	movf	_Sw,w
  5370  0338  0086               	movwf	6
  5371  0339  3001               	movlw	1	; select bank2/3
  5372  033A  0087               	movwf	7
  5373  033B  1201               	bcf	1,4
  5374                           
  5375                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5376  033C  086E               	movf	_Sw,w
  5377  033D  3E07               	addlw	7
  5378  033E  0086               	movwf	6
  5379  033F  3001               	movlw	1	; select bank2/3
  5380  0340  0087               	movwf	7
  5381  0341  3000               	movlw	0
  5382  0342  3FC0               	movwi [0]fsr1
  5383  0343  3FC1               	movwi [1]fsr1
  5384                           
  5385                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5386  0344  086E               	movf	_Sw,w
  5387  0345  0086               	movwf	6
  5388  0346  3001               	movlw	1	; select bank2/3
  5389  0347  0087               	movwf	7
  5390  0348  1281               	bcf	1,5
  5391                           
  5392                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5393  0349  1875               	btfsc	_SwDetect,0
  5394  034A  2B4F               	goto	l9354
  5395                           
  5396                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5397  034B  0868               	movf	setSw_Main@sw,w
  5398  034C  318C  2405  3181   	fcall	_setDimmerLights_SwOff
  5399  034F                     l9354:	
  5400                           
  5401                           ;Switch_B1.c: 221: }
  5402                           ;Switch_B1.c: 224: setRF_Learn(0);
  5403  034F  3000               	movlw	0
  5404  0350  319F  27EC         	fcall	_setRF_Learn
  5405                           
  5406                           ;Switch_B1.c: 226: }
  5407                           ;Switch_B1.c: 227: }
  5408                           ;Switch_B1.c: 228: }
  5409                           ;Switch_B1.c: 229: } else {
  5410  0352  0008               	return
  5411  0353                     l2494:	
  5412                           
  5413                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5414  0353  0021               	movlb	1	; select bank1
  5415  0354  1C20               	btfss	_myMain^(0+128),0
  5416  0355  0008               	return
  5417                           
  5418                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5419  0356  0020               	movlb	0	; select bank0
  5420  0357  086E               	movf	_Sw,w
  5421  0358  0086               	movwf	6
  5422  0359  3001               	movlw	1	; select bank2/3
  5423  035A  0087               	movwf	7
  5424  035B  1401               	bsf	1,0
  5425  035C  0008               	return
  5426  035D                     __end_of_setSw_Main:	
  5427                           
  5428                           	psect	text13
  5429  1FEC                     __ptext13:	
  5430 ;; *************** function _setRF_Learn *****************
  5431 ;; Defined at:
  5432 ;;		line 23 in file "../src/RF_Control_B1.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  command         1    wreg     unsigned char 
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;  command         1    1[BANK0 ] unsigned char 
  5437 ;; Return value:  Size  Location     Type
  5438 ;;		None               void
  5439 ;; Registers used:
  5440 ;;		wreg, status,2, status,0
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5449 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5450 ;;Total ram usage:        2 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; Hardware stack levels required when called:    5
  5453 ;; This function calls:
  5454 ;;		Nothing
  5455 ;; This function is called by:
  5456 ;;		_setSw_Main
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           
  5461                           ;psect for function _setRF_Learn
  5462  1FEC                     _setRF_Learn:	
  5463                           
  5464                           ;incstack = 0
  5465                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5466                           ;setRF_Learn@command stored from wreg
  5467  1FEC  0020               	movlb	0	; select bank0
  5468  1FED  00A1               	movwf	setRF_Learn@command
  5469                           
  5470                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5471  1FEE  0821               	movf	setRF_Learn@command,w
  5472  1FEF  3A01               	xorlw	1
  5473  1FF0  3000               	movlw	0
  5474  1FF1  1903               	skipnz
  5475  1FF2  3001               	movlw	1
  5476  1FF3  00A0               	movwf	??_setRF_Learn
  5477  1FF4  0EA0               	swapf	??_setRF_Learn,f
  5478  1FF5  0DA0               	rlf	??_setRF_Learn,f
  5479  1FF6  0DA0               	rlf	??_setRF_Learn,f
  5480  1FF7  0021               	movlb	1	; select bank1
  5481  1FF8  083C               	movf	_RF1^(0+128),w
  5482  1FF9  0020               	movlb	0	; select bank0
  5483  1FFA  0620               	xorwf	??_setRF_Learn,w
  5484  1FFB  39BF               	andlw	-65
  5485  1FFC  0620               	xorwf	??_setRF_Learn,w
  5486  1FFD  0021               	movlb	1	; select bank1
  5487  1FFE  00BC               	movwf	_RF1^(0+128)
  5488  1FFF  0008               	return
  5489  2000                     __end_of_setRF_Learn:	
  5490                           
  5491                           	psect	text14
  5492  1419                     __ptext14:	
  5493 ;; *************** function _setDimmerLights_AdjControl *****************
  5494 ;; Defined at:
  5495 ;;		line 600 in file "../src/Dimmer_B1.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;  sw              1    wreg     unsigned char 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  sw              1    7[BANK0 ] unsigned char 
  5500 ;;  idle            1    6[BANK0 ] unsigned char 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;		None               void
  5503 ;; Registers used:
  5504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5511 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;Total ram usage:        3 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    7
  5517 ;; This function calls:
  5518 ;;		_DimmerLightsPointSelect
  5519 ;;		_getAll_DimmerLights_AdjGO
  5520 ;;		_setDimmerLights_TriggerAdj
  5521 ;; This function is called by:
  5522 ;;		_setSw_Main
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           
  5527                           ;psect for function _setDimmerLights_AdjControl
  5528  1419                     _setDimmerLights_AdjControl:	
  5529                           
  5530                           ;incstack = 0
  5531                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5532                           ;setDimmerLights_AdjControl@sw stored from wreg
  5533  1419  0020               	movlb	0	; select bank0
  5534  141A  00A7               	movwf	setDimmerLights_AdjControl@sw
  5535                           
  5536                           ;Dimmer_B1.c: 601: DimmerLightsPointSelect(sw);
  5537  141B  0827               	movf	setDimmerLights_AdjControl@sw,w
  5538  141C  319F  2763  3194   	fcall	_DimmerLightsPointSelect
  5539                           
  5540                           ;Dimmer_B1.c: 602: char idle = 0;
  5541  141F  0020               	movlb	0	; select bank0
  5542  1420  01A6               	clrf	setDimmerLights_AdjControl@idle
  5543                           
  5544                           ;Dimmer_B1.c: 604: idle = getAll_DimmerLights_AdjGO();
  5545  1421  3190  20B0  3194   	fcall	_getAll_DimmerLights_AdjGO
  5546  1424  0020               	movlb	0	; select bank0
  5547  1425  00A5               	movwf	??_setDimmerLights_AdjControl
  5548  1426  0825               	movf	??_setDimmerLights_AdjControl,w
  5549  1427  00A6               	movwf	setDimmerLights_AdjControl@idle
  5550                           
  5551                           ;Dimmer_B1.c: 606: if (idle == 0) {
  5552  1428  08A6               	movf	setDimmerLights_AdjControl@idle,f
  5553  1429  1D03               	skipz
  5554  142A  0008               	return
  5555                           
  5556                           ;Dimmer_B1.c: 607: if (DimmerLights->SwFlag == 1) {
  5557  142B  086D               	movf	_DimmerLights,w
  5558  142C  3E09               	addlw	9
  5559  142D  0086               	movwf	6
  5560  142E  3001               	movlw	1	; select bank2/3
  5561  142F  0087               	movwf	7
  5562  1430  1F01               	btfss	1,6
  5563  1431  0008               	return
  5564                           
  5565                           ;Dimmer_B1.c: 608: DimmerLights->SwAdj = 1;
  5566  1432  086D               	movf	_DimmerLights,w
  5567  1433  3E09               	addlw	9
  5568  1434  0086               	movwf	6
  5569  1435  3001               	movlw	1	; select bank2/3
  5570  1436  0087               	movwf	7
  5571  1437  1781               	bsf	1,7
  5572                           
  5573                           ;Dimmer_B1.c: 609: DimmerLights->Status = 1;
  5574  1438  086D               	movf	_DimmerLights,w
  5575  1439  0086               	movwf	6
  5576  143A  3001               	movlw	1	; select bank2/3
  5577  143B  0087               	movwf	7
  5578  143C  1681               	bsf	1,5
  5579                           
  5580                           ;Dimmer_B1.c: 610: setDimmerLights_TriggerAdj(sw, 1);
  5581  143D  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5582  143E  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5583  143F  0827               	movf	setDimmerLights_AdjControl@sw,w
  5584  1440  3191  21D6         	fcall	_setDimmerLights_TriggerAdj
  5585  1442  0008               	return
  5586  1443                     __end_of_setDimmerLights_AdjControl:	
  5587                           
  5588                           	psect	text15
  5589  11B7                     __ptext15:	
  5590 ;; *************** function _getSw_KeyStatus *****************
  5591 ;; Defined at:
  5592 ;;		line 513 in file "../src/Dimmer_B1.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  sw              1    wreg     unsigned char 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  sw              1    4[BANK0 ] unsigned char 
  5597 ;;  status          1    3[BANK0 ] unsigned char 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  1    wreg      unsigned char 
  5600 ;; Registers used:
  5601 ;;		wreg, status,2
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5608 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5610 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5611 ;;Total ram usage:        5 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    5
  5614 ;; This function calls:
  5615 ;;		Nothing
  5616 ;; This function is called by:
  5617 ;;		_setSw_Main
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           
  5622                           ;psect for function _getSw_KeyStatus
  5623  11B7                     _getSw_KeyStatus:	
  5624                           
  5625                           ;incstack = 0
  5626                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5627                           ;getSw_KeyStatus@sw stored from wreg
  5628  11B7  0020               	movlb	0	; select bank0
  5629  11B8  00A4               	movwf	getSw_KeyStatus@sw
  5630                           
  5631                           ;Dimmer_B1.c: 514: char status = 0;
  5632  11B9  01A3               	clrf	getSw_KeyStatus@status
  5633                           
  5634                           ;Dimmer_B1.c: 526: if (sw == 1) {
  5635  11BA  0824               	movf	getSw_KeyStatus@sw,w
  5636  11BB  3A01               	xorlw	1
  5637  11BC  1D03               	skipz
  5638  11BD  29C6               	goto	l8584
  5639                           
  5640                           ;Dimmer_B1.c: 527: status = (RA6 == 1 || RA4 == 1) ? 1 : 0;
  5641  11BE  01A1               	clrf	_getSw_KeyStatus$2355
  5642  11BF  0AA1               	incf	_getSw_KeyStatus$2355,f
  5643  11C0  1F0C               	btfss	12,6	;volatile
  5644  11C1  1A0C               	btfsc	12,4	;volatile
  5645  11C2  29C4               	goto	l8582
  5646  11C3  01A1               	clrf	_getSw_KeyStatus$2355
  5647  11C4                     l8582:	
  5648  11C4  0821               	movf	_getSw_KeyStatus$2355,w
  5649  11C5  29D1               	goto	L2
  5650  11C6                     l8584:	
  5651                           ;Dimmer_B1.c: 528: } else if (sw == 2) {
  5652                           
  5653  11C6  0824               	movf	getSw_KeyStatus@sw,w
  5654  11C7  3A02               	xorlw	2
  5655  11C8  1D03               	skipz
  5656  11C9  29D4               	goto	l8594
  5657                           
  5658                           ;Dimmer_B1.c: 529: status = (RA0 == 1 || RB1 == 1) ? 1 : 0;
  5659  11CA  01A2               	clrf	_getSw_KeyStatus$2356
  5660  11CB  0AA2               	incf	_getSw_KeyStatus$2356,f
  5661  11CC  1C0C               	btfss	12,0	;volatile
  5662  11CD  188D               	btfsc	13,1	;volatile
  5663  11CE  29D0               	goto	l8592
  5664  11CF  01A2               	clrf	_getSw_KeyStatus$2356
  5665  11D0                     l8592:	
  5666  11D0  0822               	movf	_getSw_KeyStatus$2356,w
  5667  11D1                     L2:	
  5668  11D1  00A0               	movwf	??_getSw_KeyStatus
  5669  11D2  0820               	movf	??_getSw_KeyStatus,w
  5670  11D3  00A3               	movwf	getSw_KeyStatus@status
  5671  11D4                     l8594:	
  5672                           
  5673                           ;Dimmer_B1.c: 530: }
  5674                           ;Dimmer_B1.c: 537: return status;
  5675  11D4  0823               	movf	getSw_KeyStatus@status,w
  5676  11D5  0008               	return
  5677  11D6                     __end_of_getSw_KeyStatus:	
  5678                           
  5679                           	psect	text16
  5680  1FD8                     __ptext16:	
  5681 ;; *************** function _SwPointSelect *****************
  5682 ;; Defined at:
  5683 ;;		line 25 in file "../src/Switch_B1.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;  sw              1    wreg     unsigned char 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;  sw              1    1[BANK0 ] unsigned char 
  5688 ;; Return value:  Size  Location     Type
  5689 ;;		None               void
  5690 ;; Registers used:
  5691 ;;		wreg
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5699 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5700 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5701 ;;Total ram usage:        2 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    5
  5704 ;; This function calls:
  5705 ;;		Nothing
  5706 ;; This function is called by:
  5707 ;;		_setSw_Main
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           
  5712                           ;psect for function _SwPointSelect
  5713  1FD8                     _SwPointSelect:	
  5714                           
  5715                           ;incstack = 0
  5716                           ; Regs used in _SwPointSelect: [wreg]
  5717                           ;SwPointSelect@sw stored from wreg
  5718  1FD8  0020               	movlb	0	; select bank0
  5719  1FD9  00A1               	movwf	SwPointSelect@sw
  5720                           
  5721                           ;Switch_B1.c: 28: if (sw == 1) {
  5722  1FDA  0821               	movf	SwPointSelect@sw,w
  5723  1FDB  3A01               	xorlw	1
  5724  1FDC  1D03               	skipz
  5725  1FDD  2FE3               	goto	l8780
  5726                           
  5727                           ;Switch_B1.c: 29: Sw = &Sw1;
  5728  1FDE  30C5               	movlw	_Sw1& (0+255)
  5729  1FDF  00A0               	movwf	??_SwPointSelect
  5730  1FE0  0820               	movf	??_SwPointSelect,w
  5731  1FE1  00EE               	movwf	_Sw
  5732                           
  5733                           ;Switch_B1.c: 30: }
  5734  1FE2  0008               	return
  5735  1FE3                     l8780:	
  5736                           
  5737                           ;Switch_B1.c: 33: else if (sw == 2) {
  5738  1FE3  0821               	movf	SwPointSelect@sw,w
  5739  1FE4  3A02               	xorlw	2
  5740  1FE5  1D03               	skipz
  5741  1FE6  0008               	return
  5742                           
  5743                           ;Switch_B1.c: 34: Sw = &Sw2;
  5744  1FE7  30CE               	movlw	_Sw2& (0+255)
  5745  1FE8  00A0               	movwf	??_SwPointSelect
  5746  1FE9  0820               	movf	??_SwPointSelect,w
  5747  1FEA  00EE               	movwf	_Sw
  5748  1FEB  0008               	return
  5749  1FEC                     __end_of_SwPointSelect:	
  5750                           
  5751                           	psect	text17
  5752  0DC3                     __ptext17:	
  5753 ;; *************** function _setMain_Exception *****************
  5754 ;; Defined at:
  5755 ;;		line 276 in file "../src/Main_B1.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;  command         1    wreg     unsigned char 
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;  command         1   76[BANK0 ] unsigned char 
  5760 ;;  status          1   75[BANK0 ] unsigned char 
  5761 ;;  buz             1   72[BANK0 ] unsigned char 
  5762 ;; Return value:  Size  Location     Type
  5763 ;;		None               void
  5764 ;; Registers used:
  5765 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5772 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5774 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;Total ram usage:        6 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:   11
  5778 ;; This function calls:
  5779 ;;		_getDimmerLights_Status
  5780 ;;		_getMain_LightsStatus
  5781 ;;		_setBuz
  5782 ;;		_setDimmerLights_ErrorClose
  5783 ;;		_setLED
  5784 ;; This function is called by:
  5785 ;;		_Switch_Main
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           
  5790                           ;psect for function _setMain_Exception
  5791  0DC3                     _setMain_Exception:	
  5792                           
  5793                           ;incstack = 0
  5794                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5795                           ;setMain_Exception@command stored from wreg
  5796  0DC3  0020               	movlb	0	; select bank0
  5797  0DC4  00EC               	movwf	setMain_Exception@command
  5798                           
  5799                           ;Main_B1.c: 277: char status = 0, buz = 0;
  5800  0DC5  01EB               	clrf	setMain_Exception@status
  5801  0DC6  01E8               	clrf	setMain_Exception@buz
  5802                           
  5803                           ;Main_B1.c: 290: status = command == 3 ? 1 : 255;
  5804  0DC7  086C               	movf	setMain_Exception@command,w
  5805  0DC8  3A03               	xorlw	3
  5806  0DC9  1903               	skipnz
  5807  0DCA  2DCD               	goto	l9044
  5808  0DCB  30FF               	movlw	255
  5809  0DCC  2DCE               	goto	L3
  5810  0DCD                     l9044:	
  5811  0DCD  3001               	movlw	1
  5812  0DCE                     L3:	
  5813  0DCE  00E9               	movwf	_setMain_Exception$3588
  5814  0DCF  3000               	movlw	0
  5815  0DD0  00EA               	movwf	_setMain_Exception$3588+1
  5816  0DD1  0869               	movf	_setMain_Exception$3588,w
  5817  0DD2  00E7               	movwf	??_setMain_Exception
  5818  0DD3  0867               	movf	??_setMain_Exception,w
  5819  0DD4  00EB               	movwf	setMain_Exception@status
  5820                           
  5821                           ;Main_B1.c: 292: if (command == 0) {
  5822  0DD5  08EC               	movf	setMain_Exception@command,f
  5823  0DD6  1D03               	skipz
  5824  0DD7  2DDA               	goto	l9050
  5825                           
  5826                           ;Main_B1.c: 293: setLED(99, 10);
  5827  0DD8  300A               	movlw	10
  5828  0DD9  2DDC               	goto	L6
  5829  0DDA                     l9050:	
  5830                           ;Main_B1.c: 294: } else {
  5831                           
  5832                           
  5833                           ;Main_B1.c: 295: setLED(99, 11);
  5834  0DDA  300B               	movlw	11
  5835  0DDB  0020               	movlb	0	; select bank0
  5836  0DDC                     L6:	
  5837  0DDC  00E7               	movwf	??_setMain_Exception
  5838  0DDD  0867               	movf	??_setMain_Exception,w
  5839  0DDE  00A2               	movwf	setLED@command
  5840  0DDF  3063               	movlw	99
  5841  0DE0  3189  21B7  318D   	fcall	_setLED
  5842                           
  5843                           ;Main_B1.c: 296: }
  5844                           ;Main_B1.c: 297: if (command != 0) {
  5845  0DE3  0020               	movlb	0	; select bank0
  5846  0DE4  086C               	movf	setMain_Exception@command,w
  5847  0DE5  1903               	btfsc	3,2
  5848  0DE6  2E09               	goto	l9066
  5849                           
  5850                           ;Main_B1.c: 298: switch (command) {
  5851  0DE7  2E00               	goto	l9064
  5852  0DE8                     l9056:	
  5853                           ;Main_B1.c: 299: case 2:
  5854                           
  5855                           
  5856                           ;Main_B1.c: 300: if (getMain_LightsStatus() == 1) {
  5857  0DE8  3192  2257  318D   	fcall	_getMain_LightsStatus
  5858  0DEB  3A01               	xorlw	1
  5859  0DEC  1D03               	skipz
  5860  0DED  2DFE               	goto	l9062
  5861                           
  5862                           ;Main_B1.c: 301: setBuz(10, 300);
  5863  0DEE  302C               	movlw	44
  5864  0DEF  0020               	movlb	0	; select bank0
  5865  0DF0  00A9               	movwf	setBuz@time
  5866  0DF1  3001               	movlw	1
  5867  0DF2  00AA               	movwf	setBuz@time+1
  5868  0DF3  300A               	movlw	10
  5869  0DF4  2DFB               	goto	L7
  5870  0DF5                     l9060:	
  5871                           ;Main_B1.c: 304: case 3:
  5872                           
  5873                           ;Main_B1.c: 302: }
  5874                           ;Main_B1.c: 303: break;
  5875                           
  5876                           
  5877                           ;Main_B1.c: 305: setBuz(5, 300);
  5878  0DF5  302C               	movlw	44
  5879  0DF6  0020               	movlb	0	; select bank0
  5880  0DF7  00A9               	movwf	setBuz@time
  5881  0DF8  3001               	movlw	1
  5882  0DF9  00AA               	movwf	setBuz@time+1
  5883  0DFA  3005               	movlw	5
  5884  0DFB                     L7:	
  5885  0DFB  3188  20A8  318D   	fcall	_setBuz
  5886  0DFE                     l9062:	
  5887                           ;Main_B1.c: 306: break;
  5888                           
  5889                           
  5890                           ;Main_B1.c: 307: }
  5891  0DFE  0020               	movlb	0	; select bank0
  5892  0DFF  2E09               	goto	l9066
  5893  0E00                     l9064:	
  5894  0E00  0020               	movlb	0	; select bank0
  5895  0E01  086C               	movf	setMain_Exception@command,w
  5896                           
  5897                           ; Switch size 1, requested type "space"
  5898                           ; Number of cases is 2, Range of values is 2 to 3
  5899                           ; switch strategies available:
  5900                           ; Name         Instructions Cycles
  5901                           ; simple_byte            7     4 (average)
  5902                           ; direct_byte           13     9 (fixed)
  5903                           ; jumptable            263     9 (fixed)
  5904                           ;	Chosen strategy is simple_byte
  5905  0E02  3A02               	xorlw	2	; case 2
  5906  0E03  1903               	skipnz
  5907  0E04  2DE8               	goto	l9056
  5908  0E05  3A01               	xorlw	1	; case 3
  5909  0E06  1903               	skipnz
  5910  0E07  2DF5               	goto	l9060
  5911  0E08  2E09               	goto	l9066
  5912  0E09                     l9066:	
  5913                           
  5914                           ;Main_B1.c: 308: }
  5915                           ;Main_B1.c: 311: if (command != 0) {
  5916  0E09  0020               	movlb	0	; select bank0
  5917  0E0A  086C               	movf	setMain_Exception@command,w
  5918  0E0B  1903               	btfsc	3,2
  5919  0E0C  0008               	return
  5920                           
  5921                           ;Main_B1.c: 313: if (status == 1 || status == 255) {
  5922  0E0D  086B               	movf	setMain_Exception@status,w
  5923  0E0E  3A01               	xorlw	1
  5924  0E0F  1903               	skipnz
  5925  0E10  2E15               	goto	l9072
  5926  0E11  086B               	movf	setMain_Exception@status,w
  5927  0E12  3AFF               	xorlw	255
  5928  0E13  1D03               	skipz
  5929  0E14  2E20               	goto	l9076
  5930  0E15                     l9072:	
  5931                           
  5932                           ;Main_B1.c: 319: if (getDimmerLights_Status(1) == 1) {
  5933  0E15  3001               	movlw	1
  5934  0E16  319E  26C8  318D   	fcall	_getDimmerLights_Status
  5935  0E19  3A01               	xorlw	1
  5936  0E1A  1D03               	skipz
  5937  0E1B  2E20               	goto	l9076
  5938                           
  5939                           ;Main_B1.c: 320: setDimmerLights_ErrorClose(1);
  5940  0E1C  3001               	movlw	1
  5941  0E1D  3193  239D  318D   	fcall	_setDimmerLights_ErrorClose
  5942  0E20                     l9076:	
  5943                           
  5944                           ;Main_B1.c: 321: }
  5945                           ;Main_B1.c: 324: }
  5946                           ;Main_B1.c: 328: if (status == 2 || status == 255) {
  5947  0E20  0020               	movlb	0	; select bank0
  5948  0E21  086B               	movf	setMain_Exception@status,w
  5949  0E22  3A02               	xorlw	2
  5950  0E23  1903               	skipnz
  5951  0E24  2E29               	goto	l9080
  5952  0E25  086B               	movf	setMain_Exception@status,w
  5953  0E26  3AFF               	xorlw	255
  5954  0E27  1D03               	skipz
  5955  0E28  0008               	return
  5956  0E29                     l9080:	
  5957                           
  5958                           ;Main_B1.c: 333: if (getDimmerLights_Status(2) == 1) {
  5959  0E29  3002               	movlw	2
  5960  0E2A  319E  26C8  318D   	fcall	_getDimmerLights_Status
  5961  0E2D  3A01               	xorlw	1
  5962  0E2E  1903               	btfsc	3,2
  5963  0E2F  2E32               	goto	l9082
  5964  0E30  0020               	movlb	0	; select bank0
  5965  0E31  0008               	return
  5966  0E32                     l9082:	
  5967                           
  5968                           ;Main_B1.c: 334: setDimmerLights_ErrorClose(2);
  5969  0E32  3002               	movlw	2
  5970  0E33  3193  239D         	fcall	_setDimmerLights_ErrorClose
  5971  0E35  0020               	movlb	0	; select bank0
  5972  0E36  0008               	return
  5973  0E37                     __end_of_setMain_Exception:	
  5974                           
  5975                           	psect	text18
  5976  139D                     __ptext18:	
  5977 ;; *************** function _setDimmerLights_ErrorClose *****************
  5978 ;; Defined at:
  5979 ;;		line 616 in file "../src/Dimmer_B1.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;  lights          1    wreg     unsigned char 
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  lights          1   70[BANK0 ] unsigned char 
  5984 ;; Return value:  Size  Location     Type
  5985 ;;		None               void
  5986 ;; Registers used:
  5987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5988 ;; Tracked objects:
  5989 ;;		On entry : 0/0
  5990 ;;		On exit  : 0/0
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5994 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;Total ram usage:        1 bytes
  5998 ;; Hardware stack levels used:    1
  5999 ;; Hardware stack levels required when called:   10
  6000 ;; This function calls:
  6001 ;;		_DimmerLightsPointSelect
  6002 ;;		_setDimmerLights_SwOff
  6003 ;; This function is called by:
  6004 ;;		_setMain_Exception
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           
  6009                           ;psect for function _setDimmerLights_ErrorClose
  6010  139D                     _setDimmerLights_ErrorClose:	
  6011                           
  6012                           ;incstack = 0
  6013                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6014                           ;setDimmerLights_ErrorClose@lights stored from wreg
  6015  139D  0020               	movlb	0	; select bank0
  6016  139E  00E6               	movwf	setDimmerLights_ErrorClose@lights
  6017                           
  6018                           ;Dimmer_B1.c: 617: DimmerLightsPointSelect(lights);
  6019  139F  0866               	movf	setDimmerLights_ErrorClose@lights,w
  6020  13A0  319F  2763  3193   	fcall	_DimmerLightsPointSelect
  6021                           
  6022                           ;Dimmer_B1.c: 618: if (DimmerLights->SwAdj == 1) {
  6023  13A3  0020               	movlb	0	; select bank0
  6024  13A4  086D               	movf	_DimmerLights,w
  6025  13A5  3E09               	addlw	9
  6026  13A6  0086               	movwf	6
  6027  13A7  3001               	movlw	1	; select bank2/3
  6028  13A8  0087               	movwf	7
  6029  13A9  1F81               	btfss	1,7
  6030  13AA  2BB5               	goto	l8618
  6031                           
  6032                           ;Dimmer_B1.c: 619: DimmerLights->SwFlag = 1;
  6033  13AB  086D               	movf	_DimmerLights,w
  6034  13AC  3E09               	addlw	9
  6035  13AD  0086               	movwf	6
  6036  13AE  3001               	movlw	1	; select bank2/3
  6037  13AF  0087               	movwf	7
  6038  13B0  1701               	bsf	1,6
  6039                           
  6040                           ;Dimmer_B1.c: 620: setDimmerLights_SwOff(lights);
  6041  13B1  0866               	movf	setDimmerLights_ErrorClose@lights,w
  6042  13B2  318C  2405  3193   	fcall	_setDimmerLights_SwOff
  6043  13B5                     l8618:	
  6044                           
  6045                           ;Dimmer_B1.c: 621: }
  6046                           ;Dimmer_B1.c: 622: DimmerLights->SwFlag = 1;
  6047  13B5  0020               	movlb	0	; select bank0
  6048  13B6  086D               	movf	_DimmerLights,w
  6049  13B7  3E09               	addlw	9
  6050  13B8  0086               	movwf	6
  6051  13B9  3001               	movlw	1	; select bank2/3
  6052  13BA  0087               	movwf	7
  6053  13BB  1701               	bsf	1,6
  6054                           
  6055                           ;Dimmer_B1.c: 623: DimmerLights->Status = 0;
  6056  13BC  086D               	movf	_DimmerLights,w
  6057  13BD  0086               	movwf	6
  6058  13BE  3001               	movlw	1	; select bank2/3
  6059  13BF  0087               	movwf	7
  6060  13C0  1281               	bcf	1,5
  6061                           
  6062                           ;Dimmer_B1.c: 624: setDimmerLights_SwOff(lights);
  6063  13C1  0866               	movf	setDimmerLights_ErrorClose@lights,w
  6064  13C2  318C  2405         	fcall	_setDimmerLights_SwOff
  6065  13C4  0008               	return
  6066  13C5                     __end_of_setDimmerLights_ErrorClose:	
  6067                           
  6068                           	psect	text19
  6069  1E9D                     __ptext19:	
  6070 ;; *************** function _Switch_Initialization *****************
  6071 ;; Defined at:
  6072 ;;		line 46 in file "../src/Switch_B1.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;		None
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;		None
  6077 ;; Return value:  Size  Location     Type
  6078 ;;		None               void
  6079 ;; Registers used:
  6080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6081 ;; Tracked objects:
  6082 ;;		On entry : 0/0
  6083 ;;		On exit  : 0/0
  6084 ;;		Unchanged: 0/0
  6085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;Total ram usage:        0 bytes
  6091 ;; Hardware stack levels used:    1
  6092 ;; Hardware stack levels required when called:    8
  6093 ;; This function calls:
  6094 ;;		_TouchPower
  6095 ;;		_setSw_Initialization
  6096 ;; This function is called by:
  6097 ;;		_main
  6098 ;; This function uses a non-reentrant model
  6099 ;;
  6100                           
  6101                           
  6102                           ;psect for function _Switch_Initialization
  6103  1E9D                     _Switch_Initialization:	
  6104                           
  6105                           ;Switch_B1.c: 47: TouchPower();
  6106                           
  6107                           ;incstack = 0
  6108                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6109  1E9D  3190  209B  319E   	fcall	_TouchPower
  6110                           
  6111                           ;Switch_B1.c: 49: WPUB1 = 0;
  6112  1EA0  0024               	movlb	4	; select bank4
  6113  1EA1  108D               	bcf	13,1	;volatile
  6114                           
  6115                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6116  1EA2  3001               	movlw	1
  6117  1EA3  319E  262E  319E   	fcall	_setSw_Initialization
  6118                           
  6119                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6120  1EA6  3002               	movlw	2
  6121  1EA7  319E  262E         	fcall	_setSw_Initialization
  6122  1EA9  0008               	return
  6123  1EAA                     __end_of_Switch_Initialization:	
  6124                           
  6125                           	psect	text20
  6126  1E2E                     __ptext20:	
  6127 ;; *************** function _setSw_Initialization *****************
  6128 ;; Defined at:
  6129 ;;		line 109 in file "../src/Switch_B1.c"
  6130 ;; Parameters:    Size  Location     Type
  6131 ;;  sw              1    wreg     unsigned char 
  6132 ;; Auto vars:     Size  Location     Type
  6133 ;;  sw              1    4[BANK0 ] unsigned char 
  6134 ;; Return value:  Size  Location     Type
  6135 ;;		None               void
  6136 ;; Registers used:
  6137 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6138 ;; Tracked objects:
  6139 ;;		On entry : 0/0
  6140 ;;		On exit  : 0/0
  6141 ;;		Unchanged: 0/0
  6142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;Total ram usage:        1 bytes
  6148 ;; Hardware stack levels used:    1
  6149 ;; Hardware stack levels required when called:    7
  6150 ;; This function calls:
  6151 ;;		_setLED
  6152 ;; This function is called by:
  6153 ;;		_Switch_Initialization
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           
  6158                           ;psect for function _setSw_Initialization
  6159  1E2E                     _setSw_Initialization:	
  6160                           
  6161                           ;incstack = 0
  6162                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6163                           ;setSw_Initialization@sw stored from wreg
  6164  1E2E  0020               	movlb	0	; select bank0
  6165  1E2F  00A4               	movwf	setSw_Initialization@sw
  6166                           
  6167                           ;Switch_B1.c: 110: setLED(sw, 1);
  6168  1E30  01A2               	clrf	setLED@command
  6169  1E31  0AA2               	incf	setLED@command,f
  6170  1E32  0824               	movf	setSw_Initialization@sw,w
  6171  1E33  3189  21B7         	fcall	_setLED
  6172  1E35  0008               	return
  6173  1E36                     __end_of_setSw_Initialization:	
  6174                           
  6175                           	psect	text21
  6176  109B                     __ptext21:	
  6177 ;; *************** function _TouchPower *****************
  6178 ;; Defined at:
  6179 ;;		line 10 in file "../src/Switch_B1.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;		None
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;		None
  6184 ;; Return value:  Size  Location     Type
  6185 ;;		None               void
  6186 ;; Registers used:
  6187 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;Total ram usage:        0 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    6
  6200 ;; This function calls:
  6201 ;;		_Timeout_Counter
  6202 ;;		_set_TimeoutCleared
  6203 ;; This function is called by:
  6204 ;;		_Switch_Initialization
  6205 ;;		_Switch_Main
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           
  6210                           ;psect for function _TouchPower
  6211  109B                     _TouchPower:	
  6212                           
  6213                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6214                           
  6215                           ;incstack = 0
  6216                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6217  109B  0020               	movlb	0	; select bank0
  6218  109C  1A8E               	btfsc	14,5	;volatile
  6219  109D  0008               	return
  6220                           
  6221                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6222  109E  0021               	movlb	1	; select bank1
  6223  109F  1C20               	btfss	_myMain^(0+128),0
  6224  10A0  0008               	return
  6225  10A1  28A7               	goto	l9260
  6226  10A2                     l2468:	
  6227                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6228                           
  6229                           
  6230                           ;Switch_B1.c: 14: RC5 = 1;
  6231  10A2  0020               	movlb	0	; select bank0
  6232  10A3  168E               	bsf	14,5	;volatile
  6233                           
  6234                           ;Switch_B1.c: 15: Timeout_Counter();
  6235  10A4  3190  2071  3190   	fcall	_Timeout_Counter
  6236  10A7                     l9260:	
  6237  10A7  0020               	movlb	0	; select bank0
  6238  10A8  1A8E               	btfsc	14,5	;volatile
  6239  10A9  28AD               	goto	l9264
  6240  10AA  0021               	movlb	1	; select bank1
  6241  10AB  1D2D               	btfss	(_myMain^(0+128)+13),2
  6242  10AC  28A2               	goto	l2468
  6243  10AD                     l9264:	
  6244                           
  6245                           ;Switch_B1.c: 16: }
  6246                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6247  10AD  319D  25F6         	fcall	_set_TimeoutCleared
  6248  10AF  0008               	return
  6249  10B0                     __end_of_TouchPower:	
  6250                           
  6251                           	psect	text22
  6252  1DDD                     __ptext22:	
  6253 ;; *************** function _RF_Main *****************
  6254 ;; Defined at:
  6255 ;;		line 16 in file "../src/RF_Control_B1.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;		None
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;		None
  6260 ;; Return value:  Size  Location     Type
  6261 ;;		None               void
  6262 ;; Registers used:
  6263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;Total ram usage:        0 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:   14
  6276 ;; This function calls:
  6277 ;;		_setRF_Main
  6278 ;; This function is called by:
  6279 ;;		_main
  6280 ;; This function uses a non-reentrant model
  6281 ;;
  6282                           
  6283                           
  6284                           ;psect for function _RF_Main
  6285  1DDD                     _RF_Main:	
  6286                           
  6287                           ;RF_Control_B1.c: 18: setRF_Main();
  6288                           
  6289                           ;incstack = 0
  6290                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6291  1DDD  3184  2453         	fcall	_setRF_Main
  6292  1DDF  0008               	return
  6293  1DE0                     __end_of_RF_Main:	
  6294                           
  6295                           	psect	text23
  6296  0453                     __ptext23:	
  6297 ;; *************** function _setRF_Main *****************
  6298 ;; Defined at:
  6299 ;;		line 52 in file "../src/RF_Control_B1.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;		None
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;  error           1    2[BANK1 ] unsigned char 
  6304 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6305 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6306 ;; Return value:  Size  Location     Type
  6307 ;;		None               void
  6308 ;; Registers used:
  6309 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;Total ram usage:        4 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:   13
  6322 ;; This function calls:
  6323 ;;		_CC2500_ReadStatus
  6324 ;;		_CC2500_RxData
  6325 ;;		_CC2500_TxData
  6326 ;;		_CC2500_WriteCommand
  6327 ;;		_getBuz_GO
  6328 ;;		_getMain_All_Error_Status
  6329 ;;		_getRF_KeyStatus
  6330 ;;		_getRxData
  6331 ;; This function is called by:
  6332 ;;		_RF_Main
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           
  6337                           ;psect for function _setRF_Main
  6338  0453                     _setRF_Main:	
  6339                           
  6340                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6341                           
  6342                           ;incstack = 0
  6343                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6344  0453  0021               	movlb	1	; select bank1
  6345  0454  01EB               	clrf	setRF_Main@loop_f^(0+128)
  6346  0455  01EC               	clrf	setRF_Main@Receive_OK^(0+128)
  6347  0456  01ED               	clrf	setRF_Main@error^(0+128)
  6348                           
  6349                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6350  0457  1C3C               	btfss	_RF1^(0+128),0
  6351  0458  2D42               	goto	l2083
  6352                           
  6353                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6354  0459  319E  26F9  3184   	fcall	_getBuz_GO
  6355  045C  0020               	movlb	0	; select bank0
  6356  045D  0821               	movf	?_getBuz_GO+1,w
  6357  045E  0420               	iorwf	?_getBuz_GO,w
  6358  045F  1D03               	skipz
  6359  0460  0008               	return
  6360                           
  6361                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6362  0461  3000               	movlw	0
  6363  0462  3191  2141  3184   	fcall	_getMain_All_Error_Status
  6364  0465  3800               	iorlw	0
  6365  0466  1D03               	skipz
  6366  0467  2C7C               	goto	l2085
  6367                           
  6368                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6369  0468  319F  270A  3184   	fcall	_getRF_KeyStatus
  6370  046B  3A01               	xorlw	1
  6371  046C  3000               	movlw	0
  6372  046D  1903               	skipnz
  6373  046E  3001               	movlw	1
  6374  046F  0020               	movlb	0	; select bank0
  6375  0470  00EA               	movwf	??_setRF_Main
  6376  0471  0CEA               	rrf	??_setRF_Main,f
  6377  0472  0CEA               	rrf	??_setRF_Main,f
  6378  0473  0021               	movlb	1	; select bank1
  6379  0474  083C               	movf	_RF1^(0+128),w
  6380  0475  0020               	movlb	0	; select bank0
  6381  0476  066A               	xorwf	??_setRF_Main,w
  6382  0477  397F               	andlw	-129
  6383  0478  066A               	xorwf	??_setRF_Main,w
  6384  0479  0021               	movlb	1	; select bank1
  6385  047A  00BC               	movwf	_RF1^(0+128)
  6386                           
  6387                           ;RF_Control_B1.c: 65: } else {
  6388  047B  2C7E               	goto	l2086
  6389  047C                     l2085:	
  6390                           
  6391                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6392  047C  0021               	movlb	1	; select bank1
  6393  047D  13BC               	bcf	_RF1^(0+128),7
  6394  047E                     l2086:	
  6395                           
  6396                           ;RF_Control_B1.c: 70: }
  6397                           ;RF_Control_B1.c: 73: if (RF1.Key == 1 && RF1.Learn == 0) {
  6398  047E  1BBC               	btfsc	_RF1^(0+128),7
  6399  047F  1B3C               	btfsc	_RF1^(0+128),6
  6400  0480  2C86               	goto	l2087
  6401                           
  6402                           ;RF_Control_B1.c: 74: RF1.Count = 0;
  6403  0481  01BE               	clrf	(_RF1^(0+128)+2)
  6404  0482  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6405                           
  6406                           ;RF_Control_B1.c: 75: RF1.Run = 1;
  6407  0483  14BD               	bsf	(_RF1^(0+128)+1),1
  6408                           
  6409                           ;RF_Control_B1.c: 76: RF1.RxStatus = 0;
  6410  0484  11BC               	bcf	_RF1^(0+128),3
  6411                           
  6412                           ;RF_Control_B1.c: 78: } else {
  6413  0485  0008               	return
  6414  0486                     l2087:	
  6415                           
  6416                           ;RF_Control_B1.c: 79: if (RF1.Run == 1 && RF1.Learn == 0) {
  6417  0486  18BD               	btfsc	(_RF1^(0+128)+1),1
  6418  0487  1B3C               	btfsc	_RF1^(0+128),6
  6419  0488  2C9D               	goto	l9174
  6420                           
  6421                           ;RF_Control_B1.c: 80: RF1.Count++;
  6422  0489  3001               	movlw	1
  6423  048A  07BE               	addwf	(_RF1^(0+128)+2),f
  6424  048B  3000               	movlw	0
  6425  048C  3DBF               	addwfc	((_RF1+1)^(0+128)+2),f
  6426                           
  6427                           ;RF_Control_B1.c: 81: if (RF1.Count == RF1.RunTime) {
  6428  048D  3002               	movlw	2
  6429  048E  3EBC               	addlw	_RF1& (0+255)
  6430  048F  0086               	movwf	6
  6431  0490  0187               	clrf	7
  6432  0491  3F40               	moviw [0]fsr1
  6433  0492  0643               	xorwf	(_RF1^(0+128)+7),w
  6434  0493  1D03               	skipz
  6435  0494  2C97               	goto	u10065
  6436  0495  3F41               	moviw [1]fsr1
  6437  0496  0644               	xorwf	((_RF1+1)^(0+128)+7),w
  6438  0497                     u10065:	
  6439  0497  1D03               	skipz
  6440  0498  2D0F               	goto	l9228
  6441                           
  6442                           ;RF_Control_B1.c: 82: RF1.Count = 0;
  6443  0499  01BE               	clrf	(_RF1^(0+128)+2)
  6444  049A  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6445                           
  6446                           ;RF_Control_B1.c: 83: RF1.Run = 0;
  6447  049B  10BD               	bcf	(_RF1^(0+128)+1),1
  6448                           
  6449                           ;RF_Control_B1.c: 84: }
  6450                           ;RF_Control_B1.c: 85: } else {
  6451  049C  2D0F               	goto	l9228
  6452  049D                     l9174:	
  6453                           
  6454                           ;RF_Control_B1.c: 86: RF1.Count = 0;
  6455  049D  01BE               	clrf	(_RF1^(0+128)+2)
  6456  049E  01BF               	clrf	((_RF1+1)^(0+128)+2)
  6457                           
  6458                           ;RF_Control_B1.c: 87: RF1.Run = 0;
  6459  049F  10BD               	bcf	(_RF1^(0+128)+1),1
  6460                           
  6461                           ;RF_Control_B1.c: 89: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6462  04A0  193C               	btfsc	_RF1^(0+128),2
  6463  04A1  1B3C               	btfsc	_RF1^(0+128),6
  6464  04A2  2CBE               	goto	l2092
  6465                           
  6466                           ;RF_Control_B1.c: 90: RF1.TransceiveGO = 0;
  6467  04A3  113C               	bcf	_RF1^(0+128),2
  6468                           
  6469                           ;RF_Control_B1.c: 91: RF1.RxStatus = 0;
  6470  04A4  11BC               	bcf	_RF1^(0+128),3
  6471                           
  6472                           ;RF_Control_B1.c: 92: RF1.ReceiveGO = 0;
  6473  04A5  10BC               	bcf	_RF1^(0+128),1
  6474                           
  6475                           ;RF_Control_B1.c: 94: CC2500_ReadStatus(0x3B);
  6476  04A6  303B               	movlw	59
  6477  04A7  3192  22BB  3184   	fcall	_CC2500_ReadStatus
  6478                           
  6479                           ;RF_Control_B1.c: 95: if (s_data != 0) {
  6480  04AA  0021               	movlb	1	; select bank1
  6481  04AB  0856               	movf	_s_data^(0+128),w
  6482  04AC  1903               	btfsc	3,2
  6483  04AD  2CBA               	goto	l2093
  6484                           
  6485                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x36);
  6486  04AE  3036               	movlw	54
  6487  04AF  3190  20F5  3184   	fcall	_CC2500_WriteCommand
  6488                           
  6489                           ;RF_Control_B1.c: 97: CC2500_WriteCommand(0x3B);
  6490  04B2  303B               	movlw	59
  6491  04B3  3190  20F5  3184   	fcall	_CC2500_WriteCommand
  6492                           
  6493                           ;RF_Control_B1.c: 98: CC2500_WriteCommand(0x3A);
  6494  04B6  303A               	movlw	58
  6495  04B7  3190  20F5  3184   	fcall	_CC2500_WriteCommand
  6496  04BA                     l2093:	
  6497                           
  6498                           ;RF_Control_B1.c: 99: }
  6499                           ;RF_Control_B1.c: 100: CC2500_TxData();
  6500  04BA  318B  2338  3184   	fcall	_CC2500_TxData
  6501                           
  6502                           ;RF_Control_B1.c: 102: } else {
  6503  04BD  2D0F               	goto	l9228
  6504  04BE                     l2092:	
  6505                           
  6506                           ;RF_Control_B1.c: 104: if (RF1.RxStatus == 1) {
  6507  04BE  1DBC               	btfss	_RF1^(0+128),3
  6508  04BF  2CFA               	goto	l2095
  6509                           
  6510                           ;RF_Control_B1.c: 105: CC2500_RxData();
  6511  04C0  318C  24DE  3184   	fcall	_CC2500_RxData
  6512                           
  6513                           ;RF_Control_B1.c: 106: if (RF1.ReceiveGO == 1) {
  6514  04C3  0021               	movlb	1	; select bank1
  6515  04C4  1CBC               	btfss	_RF1^(0+128),1
  6516  04C5  2D0F               	goto	l9228
  6517                           
  6518                           ;RF_Control_B1.c: 107: RF1.ReceiveGO = 0;
  6519  04C6  10BC               	bcf	_RF1^(0+128),1
  6520                           
  6521                           ;RF_Control_B1.c: 108: RF1.Correction = 0;
  6522  04C7  12BD               	bcf	(_RF1^(0+128)+1),5
  6523                           
  6524                           ;RF_Control_B1.c: 109: RF1.CorrectionCounter = 0;
  6525  04C8  01C6               	clrf	(_RF1^(0+128)+10)
  6526  04C9  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6527                           
  6528                           ;RF_Control_B1.c: 118: getRxData();
  6529  04CA  318D  254F  3184   	fcall	_getRxData
  6530                           
  6531                           ;RF_Control_B1.c: 119: RB5 = RB5 == 1 ? 0 : 1;
  6532  04CD  3020               	movlw	32
  6533  04CE  0020               	movlb	0	; select bank0
  6534  04CF  068D               	xorwf	13,f
  6535                           
  6536                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  6537  04D0  0021               	movlb	1	; select bank1
  6538  04D1  14BD               	bsf	(_RF1^(0+128)+1),1
  6539                           
  6540                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  6541  04D2  1DBD               	btfss	(_RF1^(0+128)+1),3
  6542  04D3  2CE1               	goto	l9212
  6543                           
  6544                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 10) {
  6545  04D4  3000               	movlw	0
  6546  04D5  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6547  04D6  300B               	movlw	11
  6548  04D7  1903               	skipnz
  6549  04D8  0243               	subwf	(_RF1^(0+128)+7),w
  6550  04D9  1C03               	skipc
  6551  04DA  2CDF               	goto	l9210
  6552                           
  6553                           ;RF_Control_B1.c: 126: RF1.RunTime = 10;
  6554  04DB  300A               	movlw	10
  6555  04DC  00C3               	movwf	(_RF1^(0+128)+7)
  6556  04DD  3000               	movlw	0
  6557  04DE  00C4               	movwf	(_RF1^(0+128)+8)
  6558  04DF                     l9210:	
  6559                           
  6560                           ;RF_Control_B1.c: 127: }
  6561                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  6562  04DF  01C0               	clrf	(_RF1^(0+128)+4)
  6563                           
  6564                           ;RF_Control_B1.c: 129: } else {
  6565  04E0  2D0F               	goto	l9228
  6566  04E1                     l9212:	
  6567                           
  6568                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  6569  04E1  3001               	movlw	1
  6570  04E2  0020               	movlb	0	; select bank0
  6571  04E3  00EA               	movwf	??_setRF_Main
  6572  04E4  086A               	movf	??_setRF_Main,w
  6573  04E5  0021               	movlb	1	; select bank1
  6574  04E6  07C0               	addwf	(_RF1^(0+128)+4),f
  6575                           
  6576                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  6577  04E7  0840               	movf	(_RF1^(0+128)+4),w
  6578  04E8  3A02               	xorlw	2
  6579  04E9  1D03               	skipz
  6580  04EA  2D0F               	goto	l9228
  6581                           
  6582                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  6583  04EB  01C0               	clrf	(_RF1^(0+128)+4)
  6584                           
  6585                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  6586  04EC  01C1               	clrf	(_RF1^(0+128)+5)
  6587  04ED  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6588                           
  6589                           ;RF_Control_B1.c: 134: if (RF1.RunTime < 200) {
  6590  04EE  3000               	movlw	0
  6591  04EF  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6592  04F0  30C8               	movlw	200
  6593  04F1  1903               	skipnz
  6594  04F2  0243               	subwf	(_RF1^(0+128)+7),w
  6595  04F3  1803               	skipnc
  6596  04F4  2D0F               	goto	l9228
  6597                           
  6598                           ;RF_Control_B1.c: 135: RF1.RunTime += 10;
  6599  04F5  300A               	movlw	10
  6600  04F6  07C3               	addwf	(_RF1^(0+128)+7),f
  6601  04F7  3000               	movlw	0
  6602  04F8  3DC4               	addwfc	((_RF1+1)^(0+128)+7),f
  6603                           
  6604                           ;RF_Control_B1.c: 136: }
  6605                           ;RF_Control_B1.c: 137: }
  6606                           ;RF_Control_B1.c: 138: }
  6607                           ;RF_Control_B1.c: 139: }
  6608                           ;RF_Control_B1.c: 140: } else {
  6609  04F9  2D0F               	goto	l9228
  6610  04FA                     l2095:	
  6611                           
  6612                           ;RF_Control_B1.c: 142: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6613  04FA  1DBC               	btfss	_RF1^(0+128),3
  6614  04FB  18BC               	btfsc	_RF1^(0+128),1
  6615  04FC  2D0F               	goto	l9228
  6616                           
  6617                           ;RF_Control_B1.c: 143: RF1.RxStatus = 1;
  6618  04FD  15BC               	bsf	_RF1^(0+128),3
  6619                           
  6620                           ;RF_Control_B1.c: 144: RF1.Correction = 1;
  6621  04FE  16BD               	bsf	(_RF1^(0+128)+1),5
  6622                           
  6623                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x36);
  6624  04FF  3036               	movlw	54
  6625  0500  3190  20F5  3184   	fcall	_CC2500_WriteCommand
  6626                           
  6627                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x3B);
  6628  0503  303B               	movlw	59
  6629  0504  3190  20F5  3184   	fcall	_CC2500_WriteCommand
  6630                           
  6631                           ;RF_Control_B1.c: 148: CC2500_WriteCommand(0x3A);
  6632  0507  303A               	movlw	58
  6633  0508  3190  20F5  3184   	fcall	_CC2500_WriteCommand
  6634                           
  6635                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x34);
  6636  050B  3034               	movlw	52
  6637  050C  3190  20F5  3184   	fcall	_CC2500_WriteCommand
  6638  050F                     l9228:	
  6639                           
  6640                           ;RF_Control_B1.c: 151: }
  6641                           ;RF_Control_B1.c: 153: }
  6642                           ;RF_Control_B1.c: 154: }
  6643                           ;RF_Control_B1.c: 155: }
  6644                           ;RF_Control_B1.c: 156: if (RF1.RxStatus == 1) {
  6645  050F  0021               	movlb	1	; select bank1
  6646  0510  1DBC               	btfss	_RF1^(0+128),3
  6647  0511  2D30               	goto	l9240
  6648                           
  6649                           ;RF_Control_B1.c: 157: RF1.CheckedCounter++;
  6650  0512  3001               	movlw	1
  6651  0513  07C1               	addwf	(_RF1^(0+128)+5),f
  6652  0514  3000               	movlw	0
  6653  0515  3DC2               	addwfc	((_RF1+1)^(0+128)+5),f
  6654                           
  6655                           ;RF_Control_B1.c: 158: if (RF1.CheckedCounter == 100) {
  6656  0516  3005               	movlw	5
  6657  0517  3EBC               	addlw	_RF1& (0+255)
  6658  0518  0086               	movwf	6
  6659  0519  0187               	clrf	7
  6660  051A  3F40               	moviw [0]fsr1
  6661  051B  3A64               	xorlw	100
  6662  051C  1D03               	skipz
  6663  051D  2D20               	goto	u10195
  6664  051E  3F41               	moviw [1]fsr1
  6665  051F  3A00               	xorlw	0
  6666  0520                     u10195:	
  6667  0520  1D03               	skipz
  6668  0521  2D30               	goto	l9240
  6669                           
  6670                           ;RF_Control_B1.c: 159: RF1.CheckedCounter = 0;
  6671  0522  01C1               	clrf	(_RF1^(0+128)+5)
  6672  0523  01C2               	clrf	((_RF1+1)^(0+128)+5)
  6673                           
  6674                           ;RF_Control_B1.c: 160: RF1.CheckCount = 0;
  6675  0524  01C0               	clrf	(_RF1^(0+128)+4)
  6676                           
  6677                           ;RF_Control_B1.c: 161: if (RF1.RunTime > 10) {
  6678  0525  3000               	movlw	0
  6679  0526  0244               	subwf	((_RF1+1)^(0+128)+7),w
  6680  0527  300B               	movlw	11
  6681  0528  1903               	skipnz
  6682  0529  0243               	subwf	(_RF1^(0+128)+7),w
  6683  052A  1C03               	skipc
  6684  052B  2D30               	goto	l9240
  6685                           
  6686                           ;RF_Control_B1.c: 162: RF1.RunTime -= 10;
  6687  052C  300A               	movlw	10
  6688  052D  02C3               	subwf	(_RF1^(0+128)+7),f
  6689  052E  3000               	movlw	0
  6690  052F  3BC4               	subwfb	((_RF1+1)^(0+128)+7),f
  6691  0530                     l9240:	
  6692                           
  6693                           ;RF_Control_B1.c: 163: }
  6694                           ;RF_Control_B1.c: 164: }
  6695                           ;RF_Control_B1.c: 165: }
  6696                           ;RF_Control_B1.c: 166: if (RF1.Correction == 1) {
  6697  0530  1EBD               	btfss	(_RF1^(0+128)+1),5
  6698  0531  0008               	return
  6699                           
  6700                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter++;
  6701  0532  3001               	movlw	1
  6702  0533  07C6               	addwf	(_RF1^(0+128)+10),f
  6703  0534  3000               	movlw	0
  6704  0535  3DC7               	addwfc	((_RF1+1)^(0+128)+10),f
  6705                           
  6706                           ;RF_Control_B1.c: 168: if (RF1.CorrectionCounter >= 30000) {
  6707  0536  3075               	movlw	117
  6708  0537  0247               	subwf	((_RF1+1)^(0+128)+10),w
  6709  0538  3030               	movlw	48
  6710  0539  1903               	skipnz
  6711  053A  0246               	subwf	(_RF1^(0+128)+10),w
  6712  053B  1C03               	skipc
  6713  053C  0008               	return
  6714                           
  6715                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter = 0;
  6716  053D  01C6               	clrf	(_RF1^(0+128)+10)
  6717  053E  01C7               	clrf	((_RF1+1)^(0+128)+10)
  6718                           
  6719                           ;RF_Control_B1.c: 170: RF1.RxStatus = 0;
  6720  053F  11BC               	bcf	_RF1^(0+128),3
  6721                           
  6722                           ;RF_Control_B1.c: 171: RF1.ReceiveGO = 0;
  6723  0540  10BC               	bcf	_RF1^(0+128),1
  6724                           
  6725                           ;RF_Control_B1.c: 172: }
  6726                           ;RF_Control_B1.c: 173: }
  6727                           ;RF_Control_B1.c: 174: }
  6728                           ;RF_Control_B1.c: 175: }
  6729                           ;RF_Control_B1.c: 182: } else {
  6730  0541  0008               	return
  6731  0542                     l2083:	
  6732                           
  6733                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  6734  0542  1C20               	btfss	_myMain^(0+128),0
  6735  0543  0008               	return
  6736                           
  6737                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  6738  0544  143C               	bsf	_RF1^(0+128),0
  6739  0545  0008               	return
  6740  0546                     __end_of_setRF_Main:	
  6741                           
  6742                           	psect	text24
  6743  0D4F                     __ptext24:	
  6744 ;; *************** function _getRxData *****************
  6745 ;; Defined at:
  6746 ;;		line 273 in file "../src/RF_Control_B1.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;		None
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;  error           1   73[BANK0 ] unsigned char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;		None               void
  6753 ;; Registers used:
  6754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6762 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;Total ram usage:        2 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:   12
  6767 ;; This function calls:
  6768 ;;		_getMain_All_Error_Status
  6769 ;;		_setControl_Lights_Table
  6770 ;;		_setLog_Code
  6771 ;; This function is called by:
  6772 ;;		_setRF_Main
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           
  6777                           ;psect for function _getRxData
  6778  0D4F                     _getRxData:	
  6779                           
  6780                           ;RF_Control_B1.c: 274: char error = getMain_All_Error_Status(0);
  6781                           
  6782                           ;incstack = 0
  6783                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6784  0D4F  3000               	movlw	0
  6785  0D50  3191  2141  318D   	fcall	_getMain_All_Error_Status
  6786  0D53  0020               	movlb	0	; select bank0
  6787  0D54  00E8               	movwf	??_getRxData
  6788  0D55  0868               	movf	??_getRxData,w
  6789  0D56  00E9               	movwf	getRxData@error
  6790                           
  6791                           ;RF_Control_B1.c: 275: if (error == 0) {
  6792  0D57  08E9               	movf	getRxData@error,f
  6793  0D58  1D03               	skipz
  6794  0D59  0008               	return
  6795                           
  6796                           ;RF_Control_B1.c: 276: if (RF1.Learn == 1) {
  6797  0D5A  0021               	movlb	1	; select bank1
  6798  0D5B  1F3C               	btfss	_RF1^(0+128),6
  6799  0D5C  2D6D               	goto	l8742
  6800                           
  6801                           ;RF_Control_B1.c: 277: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6802  0D5D  0022               	movlb	2	; select bank2
  6803  0D5E  08A0               	movf	_RF_Data^(0+256),f
  6804  0D5F  1D03               	skipz
  6805  0D60  2D6A               	goto	l2134
  6806  0D61  0821               	movf	(_RF_Data^(0+256)+1),w
  6807  0D62  3A64               	xorlw	100
  6808  0D63  1D03               	skipz
  6809  0D64  2D6A               	goto	l2134
  6810                           
  6811                           ;RF_Control_B1.c: 278: setLog_Code();
  6812  0D65  3194  24DD         	fcall	_setLog_Code
  6813                           
  6814                           ;RF_Control_B1.c: 279: RF1.Checked = 1;
  6815  0D67  0021               	movlb	1	; select bank1
  6816  0D68  15BD               	bsf	(_RF1^(0+128)+1),3
  6817                           
  6818                           ;RF_Control_B1.c: 280: } else {
  6819  0D69  0008               	return
  6820  0D6A                     l2134:	
  6821                           
  6822                           ;RF_Control_B1.c: 281: RF1.Checked = 0;
  6823  0D6A  0021               	movlb	1	; select bank1
  6824  0D6B  11BD               	bcf	(_RF1^(0+128)+1),3
  6825                           
  6826                           ;RF_Control_B1.c: 282: }
  6827                           ;RF_Control_B1.c: 283: } else {
  6828  0D6C  0008               	return
  6829  0D6D                     l8742:	
  6830                           
  6831                           ;RF_Control_B1.c: 284: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6832  0D6D  0022               	movlb	2	; select bank2
  6833  0D6E  08A0               	movf	_RF_Data^(0+256),f
  6834  0D6F  1D03               	skipz
  6835  0D70  2DAB               	goto	l8764
  6836  0D71  0821               	movf	(_RF_Data^(0+256)+1),w
  6837  0D72  3A02               	xorlw	2
  6838  0D73  1D03               	skipz
  6839  0D74  2DAB               	goto	l8764
  6840                           
  6841                           ;RF_Control_B1.c: 286: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6842  0D75  082C               	movf	(_RF_Data^(0+256)+12),w
  6843  0D76  3AFF               	xorlw	255
  6844  0D77  1D03               	skipz
  6845  0D78  2D85               	goto	l8754
  6846  0D79  082D               	movf	(_RF_Data^(0+256)+13),w
  6847  0D7A  3AFF               	xorlw	255
  6848  0D7B  1D03               	skipz
  6849  0D7C  2D85               	goto	l8754
  6850  0D7D  082E               	movf	(_RF_Data^(0+256)+14),w
  6851  0D7E  3AFF               	xorlw	255
  6852  0D7F  1D03               	skipz
  6853  0D80  2D85               	goto	l8754
  6854                           
  6855                           ;RF_Control_B1.c: 287: __nop();
  6856  0D81  0000               	nop
  6857                           
  6858                           ;RF_Control_B1.c: 288: RF1.Checked = 0;
  6859  0D82  0021               	movlb	1	; select bank1
  6860  0D83  11BD               	bcf	(_RF1^(0+128)+1),3
  6861                           
  6862                           ;RF_Control_B1.c: 289: } else {
  6863  0D84  0008               	return
  6864  0D85                     l8754:	
  6865                           
  6866                           ;RF_Control_B1.c: 290: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6867  0D85  0020               	movlb	0	; select bank0
  6868  0D86  086F               	movf	_product,w
  6869  0D87  3E0C               	addlw	12
  6870  0D88  0086               	movwf	6
  6871  0D89  3002               	movlw	2	; select bank4/5
  6872  0D8A  0087               	movwf	7
  6873  0D8B  0022               	movlb	2	; select bank2
  6874  0D8C  082C               	movf	(_RF_Data^(0+256)+12),w
  6875  0D8D  0601               	xorwf	1,w
  6876  0D8E  1D03               	skipz
  6877  0D8F  0008               	return
  6878  0D90  0020               	movlb	0	; select bank0
  6879  0D91  086F               	movf	_product,w
  6880  0D92  3E0D               	addlw	13
  6881  0D93  0086               	movwf	6
  6882  0D94  3002               	movlw	2	; select bank4/5
  6883  0D95  0087               	movwf	7
  6884  0D96  0022               	movlb	2	; select bank2
  6885  0D97  082D               	movf	(_RF_Data^(0+256)+13),w
  6886  0D98  0601               	xorwf	1,w
  6887  0D99  1D03               	skipz
  6888  0D9A  0008               	return
  6889  0D9B  0020               	movlb	0	; select bank0
  6890  0D9C  086F               	movf	_product,w
  6891  0D9D  3E0E               	addlw	14
  6892  0D9E  0086               	movwf	6
  6893  0D9F  3002               	movlw	2	; select bank4/5
  6894  0DA0  0087               	movwf	7
  6895  0DA1  0022               	movlb	2	; select bank2
  6896  0DA2  082E               	movf	(_RF_Data^(0+256)+14),w
  6897  0DA3  0601               	xorwf	1,w
  6898  0DA4  1D03               	skipz
  6899  0DA5  0008               	return
  6900                           
  6901                           ;RF_Control_B1.c: 291: setControl_Lights_Table();
  6902  0DA6  318C  246F         	fcall	_setControl_Lights_Table
  6903                           
  6904                           ;RF_Control_B1.c: 292: RF1.Checked = 1;
  6905  0DA8  0021               	movlb	1	; select bank1
  6906  0DA9  15BD               	bsf	(_RF1^(0+128)+1),3
  6907                           
  6908                           ;RF_Control_B1.c: 293: }
  6909                           ;RF_Control_B1.c: 294: }
  6910                           ;RF_Control_B1.c: 295: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6911  0DAA  0008               	return
  6912  0DAB                     l8764:	
  6913  0DAB  0022               	movlb	2	; select bank2
  6914  0DAC  0820               	movf	_RF_Data^(0+256),w
  6915  0DAD  3AFF               	xorlw	255
  6916  0DAE  1D03               	skipz
  6917  0DAF  2DB6               	goto	l8770
  6918  0DB0  0821               	movf	(_RF_Data^(0+256)+1),w
  6919  0DB1  3A02               	xorlw	2
  6920  0DB2  1D03               	skipz
  6921  0DB3  2DB6               	goto	l8770
  6922                           
  6923                           ;RF_Control_B1.c: 296: __nop();
  6924  0DB4  0000               	nop
  6925                           
  6926                           ;RF_Control_B1.c: 297: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6927  0DB5  0008               	return
  6928  0DB6                     l8770:	
  6929  0DB6  0022               	movlb	2	; select bank2
  6930  0DB7  08A0               	movf	_RF_Data^(0+256),f
  6931  0DB8  1D03               	skipz
  6932  0DB9  2DC0               	goto	l2144
  6933  0DBA  0821               	movf	(_RF_Data^(0+256)+1),w
  6934  0DBB  3A65               	xorlw	101
  6935  0DBC  1D03               	skipz
  6936  0DBD  2DC0               	goto	l2144
  6937                           
  6938                           ;RF_Control_B1.c: 298: __nop();
  6939  0DBE  0000               	nop
  6940                           
  6941                           ;RF_Control_B1.c: 299: } else {
  6942  0DBF  0008               	return
  6943  0DC0                     l2144:	
  6944                           
  6945                           ;RF_Control_B1.c: 300: RF1.Checked = 0;
  6946  0DC0  0021               	movlb	1	; select bank1
  6947  0DC1  11BD               	bcf	(_RF1^(0+128)+1),3
  6948                           
  6949                           ;RF_Control_B1.c: 301: }
  6950                           ;RF_Control_B1.c: 306: }
  6951                           ;RF_Control_B1.c: 307: } else {
  6952  0DC2  0008               	return
  6953  0DC3                     __end_of_getRxData:	
  6954                           ;RF_Control_B1.c: 308: ;
  6955                           
  6956                           
  6957                           	psect	text25
  6958  14DD                     __ptext25:	
  6959 ;; *************** function _setLog_Code *****************
  6960 ;; Defined at:
  6961 ;;		line 313 in file "../src/RF_Control_B1.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;		None
  6964 ;; Auto vars:     Size  Location     Type
  6965 ;;		None
  6966 ;; Return value:  Size  Location     Type
  6967 ;;		None               void
  6968 ;; Registers used:
  6969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;Total ram usage:        1 bytes
  6980 ;; Hardware stack levels used:    1
  6981 ;; Hardware stack levels required when called:    7
  6982 ;; This function calls:
  6983 ;;		_setBuz
  6984 ;;		_setMemory_LoopSave
  6985 ;;		_setMemory_Modify
  6986 ;; This function is called by:
  6987 ;;		_getRxData
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           
  6992                           ;psect for function _setLog_Code
  6993  14DD                     _setLog_Code:	
  6994                           
  6995                           ;RF_Control_B1.c: 314: RF1.Learn = 0;
  6996                           
  6997                           ;incstack = 0
  6998                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6999  14DD  0021               	movlb	1	; select bank1
  7000  14DE  133C               	bcf	_RF1^(0+128),6
  7001                           
  7002                           ;RF_Control_B1.c: 315: product->Data[12]=RF_Data[12];
  7003  14DF  0022               	movlb	2	; select bank2
  7004  14E0  082C               	movf	(_RF_Data^(0+256)+12),w
  7005  14E1  0020               	movlb	0	; select bank0
  7006  14E2  00AD               	movwf	??_setLog_Code
  7007  14E3  086F               	movf	_product,w
  7008  14E4  3E0C               	addlw	12
  7009  14E5  0086               	movwf	6
  7010  14E6  3002               	movlw	2	; select bank4/5
  7011  14E7  0087               	movwf	7
  7012  14E8  082D               	movf	??_setLog_Code,w
  7013  14E9  0081               	movwf	1
  7014                           
  7015                           ;RF_Control_B1.c: 316: product->Data[13]=RF_Data[13];
  7016  14EA  0022               	movlb	2	; select bank2
  7017  14EB  082D               	movf	(_RF_Data^(0+256)+13),w
  7018  14EC  0020               	movlb	0	; select bank0
  7019  14ED  00AD               	movwf	??_setLog_Code
  7020  14EE  086F               	movf	_product,w
  7021  14EF  3E0D               	addlw	13
  7022  14F0  0086               	movwf	6
  7023  14F1  3002               	movlw	2	; select bank4/5
  7024  14F2  0087               	movwf	7
  7025  14F3  082D               	movf	??_setLog_Code,w
  7026  14F4  0081               	movwf	1
  7027                           
  7028                           ;RF_Control_B1.c: 317: product->Data[14]=RF_Data[14];
  7029  14F5  0022               	movlb	2	; select bank2
  7030  14F6  082E               	movf	(_RF_Data^(0+256)+14),w
  7031  14F7  0020               	movlb	0	; select bank0
  7032  14F8  00AD               	movwf	??_setLog_Code
  7033  14F9  086F               	movf	_product,w
  7034  14FA  3E0E               	addlw	14
  7035  14FB  0086               	movwf	6
  7036  14FC  3002               	movlw	2	; select bank4/5
  7037  14FD  0087               	movwf	7
  7038  14FE  082D               	movf	??_setLog_Code,w
  7039  14FF  0081               	movwf	1
  7040                           
  7041                           ;RF_Control_B1.c: 318: setBuz(1, 100);
  7042  1500  3064               	movlw	100
  7043  1501  00A9               	movwf	setBuz@time
  7044  1502  3000               	movlw	0
  7045  1503  00AA               	movwf	setBuz@time+1
  7046  1504  3001               	movlw	1
  7047  1505  3188  20A8  3194   	fcall	_setBuz
  7048                           
  7049                           ;RF_Control_B1.c: 319: if (myMain.First == 1) {
  7050  1508  0021               	movlb	1	; select bank1
  7051  1509  1EA0               	btfss	_myMain^(0+128),5
  7052  150A  2D0F               	goto	l2150
  7053                           
  7054                           ;RF_Control_B1.c: 320: setMemory_LoopSave(1);
  7055  150B  3001               	movlw	1
  7056  150C  319F  2789  3194   	fcall	_setMemory_LoopSave
  7057  150F                     l2150:	
  7058                           
  7059                           ;RF_Control_B1.c: 321: }
  7060                           ;RF_Control_B1.c: 322: setMemory_Modify(1);
  7061  150F  3001               	movlw	1
  7062  1510  319F  2776         	fcall	_setMemory_Modify
  7063  1512  0008               	return
  7064  1513                     __end_of_setLog_Code:	
  7065                           
  7066                           	psect	text26
  7067  1F89                     __ptext26:	
  7068 ;; *************** function _setMemory_LoopSave *****************
  7069 ;; Defined at:
  7070 ;;		line 1005 in file "../src/MCU_B1.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;  command         1    wreg     unsigned char 
  7073 ;; Auto vars:     Size  Location     Type
  7074 ;;  command         1    1[BANK0 ] unsigned char 
  7075 ;; Return value:  Size  Location     Type
  7076 ;;		None               void
  7077 ;; Registers used:
  7078 ;;		wreg, status,2, status,0
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7087 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7088 ;;Total ram usage:        2 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:    5
  7091 ;; This function calls:
  7092 ;;		Nothing
  7093 ;; This function is called by:
  7094 ;;		_setLog_Code
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098                           
  7099                           ;psect for function _setMemory_LoopSave
  7100  1F89                     _setMemory_LoopSave:	
  7101                           
  7102                           ;incstack = 0
  7103                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7104                           ;setMemory_LoopSave@command stored from wreg
  7105  1F89  0020               	movlb	0	; select bank0
  7106  1F8A  00A1               	movwf	setMemory_LoopSave@command
  7107                           
  7108                           ;MCU_B1.c: 1006: Memory.LoopSave = command == 1 ? 1 : 0;
  7109  1F8B  0821               	movf	setMemory_LoopSave@command,w
  7110  1F8C  3A01               	xorlw	1
  7111  1F8D  3000               	movlw	0
  7112  1F8E  1903               	skipnz
  7113  1F8F  3001               	movlw	1
  7114  1F90  00A0               	movwf	??_setMemory_LoopSave
  7115  1F91  0DA0               	rlf	??_setMemory_LoopSave,f
  7116  1F92  0DA0               	rlf	??_setMemory_LoopSave,f
  7117  1F93  0023               	movlb	3	; select bank3
  7118  1F94  0844               	movf	(_Memory^(0+384)+36),w
  7119  1F95  0020               	movlb	0	; select bank0
  7120  1F96  0620               	xorwf	??_setMemory_LoopSave,w
  7121  1F97  39FB               	andlw	-5
  7122  1F98  0620               	xorwf	??_setMemory_LoopSave,w
  7123  1F99  0023               	movlb	3	; select bank3
  7124  1F9A  00C4               	movwf	(_Memory^(0+384)+36)
  7125  1F9B  0008               	return
  7126  1F9C                     __end_of_setMemory_LoopSave:	
  7127                           
  7128                           	psect	text27
  7129  0C6F                     __ptext27:	
  7130 ;; *************** function _setControl_Lights_Table *****************
  7131 ;; Defined at:
  7132 ;;		line 326 in file "../src/RF_Control_B1.c"
  7133 ;; Parameters:    Size  Location     Type
  7134 ;;		None
  7135 ;; Auto vars:     Size  Location     Type
  7136 ;;		None
  7137 ;; Return value:  Size  Location     Type
  7138 ;;		None               void
  7139 ;; Registers used:
  7140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7141 ;; Tracked objects:
  7142 ;;		On entry : 0/0
  7143 ;;		On exit  : 0/0
  7144 ;;		Unchanged: 0/0
  7145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7150 ;;Total ram usage:        0 bytes
  7151 ;; Hardware stack levels used:    1
  7152 ;; Hardware stack levels required when called:   11
  7153 ;; This function calls:
  7154 ;;		_setBuz
  7155 ;;		_setRFSW_AdjControl
  7156 ;;		_setRFSW_Control
  7157 ;;		_setTxData
  7158 ;; This function is called by:
  7159 ;;		_getRxData
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           
  7164                           ;psect for function _setControl_Lights_Table
  7165  0C6F                     _setControl_Lights_Table:	
  7166                           
  7167                           ;RF_Control_B1.c: 327: switch (RF_Data[15]) {
  7168                           
  7169                           ;incstack = 0
  7170                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7171  0C6F  2CC2               	goto	l8398
  7172  0C70                     l8370:	
  7173                           ;RF_Control_B1.c: 328: case 0x00:
  7174                           
  7175                           
  7176                           ;RF_Control_B1.c: 331: setRFSW_Control(1);
  7177  0C70  3001               	movlw	1
  7178  0C71  3188  2002  318C   	fcall	_setRFSW_Control
  7179                           
  7180                           ;RF_Control_B1.c: 337: setRFSW_Control(2);
  7181  0C74  3002               	movlw	2
  7182  0C75  3188  2002  318C   	fcall	_setRFSW_Control
  7183                           
  7184                           ;RF_Control_B1.c: 347: product->Data[9]=0;
  7185  0C78  0020               	movlb	0	; select bank0
  7186  0C79  086F               	movf	_product,w
  7187  0C7A  3E09               	addlw	9
  7188  0C7B  0086               	movwf	6
  7189  0C7C  3002               	movlw	2	; select bank4/5
  7190  0C7D  0087               	movwf	7
  7191  0C7E  0181               	clrf	1
  7192                           
  7193                           ;RF_Control_B1.c: 348: product->Data[11]=0;
  7194  0C7F  086F               	movf	_product,w
  7195  0C80  3E0B               	addlw	11
  7196  0C81  0086               	movwf	6
  7197  0C82  3002               	movlw	2	; select bank4/5
  7198  0C83  0087               	movwf	7
  7199  0C84  0181               	clrf	1
  7200                           
  7201                           ;RF_Control_B1.c: 349: product->Data[15]=0;
  7202  0C85  086F               	movf	_product,w
  7203  0C86  3E0F               	addlw	15
  7204  0C87  0086               	movwf	6
  7205  0C88  3002               	movlw	2	; select bank4/5
  7206  0C89  0087               	movwf	7
  7207  0C8A  0181               	clrf	1
  7208                           
  7209                           ;RF_Control_B1.c: 350: product->Data[17]=0;
  7210  0C8B  086F               	movf	_product,w
  7211  0C8C  3E11               	addlw	17
  7212  0C8D  0086               	movwf	6
  7213  0C8E  3002               	movlw	2	; select bank4/5
  7214  0C8F  0087               	movwf	7
  7215  0C90  0181               	clrf	1
  7216                           
  7217                           ;RF_Control_B1.c: 351: setBuz(1, 100);
  7218  0C91  3064               	movlw	100
  7219  0C92  00A9               	movwf	setBuz@time
  7220  0C93  3000               	movlw	0
  7221  0C94  00AA               	movwf	setBuz@time+1
  7222  0C95  3001               	movlw	1
  7223  0C96  3188  20A8  318C   	fcall	_setBuz
  7224                           
  7225                           ;RF_Control_B1.c: 352: setTxData();
  7226  0C99  3186  2622         	fcall	_setTxData
  7227                           
  7228                           ;RF_Control_B1.c: 353: break;
  7229  0C9B  0008               	return
  7230  0C9C                     l8384:	
  7231                           ;RF_Control_B1.c: 354: case 0x20:
  7232                           
  7233                           
  7234                           ;RF_Control_B1.c: 355: product->Data[9]=0;
  7235  0C9C  0020               	movlb	0	; select bank0
  7236  0C9D  086F               	movf	_product,w
  7237  0C9E  3E09               	addlw	9
  7238  0C9F  0086               	movwf	6
  7239  0CA0  3002               	movlw	2	; select bank4/5
  7240  0CA1  0087               	movwf	7
  7241  0CA2  0181               	clrf	1
  7242                           
  7243                           ;RF_Control_B1.c: 356: product->Data[11]=0;
  7244  0CA3  086F               	movf	_product,w
  7245  0CA4  3E0B               	addlw	11
  7246  0CA5  0086               	movwf	6
  7247  0CA6  3002               	movlw	2	; select bank4/5
  7248  0CA7  0087               	movwf	7
  7249  0CA8  0181               	clrf	1
  7250                           
  7251                           ;RF_Control_B1.c: 357: product->Data[17]=0;
  7252  0CA9  086F               	movf	_product,w
  7253  0CAA  3E11               	addlw	17
  7254  0CAB  0086               	movwf	6
  7255  0CAC  3002               	movlw	2	; select bank4/5
  7256  0CAD  0087               	movwf	7
  7257  0CAE  0181               	clrf	1
  7258                           
  7259                           ;RF_Control_B1.c: 358: setTxData();
  7260  0CAF  3186  2622         	fcall	_setTxData
  7261                           
  7262                           ;RF_Control_B1.c: 359: break;
  7263  0CB1  0008               	return
  7264  0CB2                     l8388:	
  7265                           ;RF_Control_B1.c: 360: case 0x01:
  7266                           
  7267                           
  7268                           ;RF_Control_B1.c: 362: setRFSW_Control(1);
  7269  0CB2  3001               	movlw	1
  7270  0CB3  3188  2002         	fcall	_setRFSW_Control
  7271                           
  7272                           ;RF_Control_B1.c: 364: break;
  7273  0CB5  0008               	return
  7274  0CB6                     l8390:	
  7275                           ;RF_Control_B1.c: 365: case 0x02:
  7276                           
  7277                           
  7278                           ;RF_Control_B1.c: 367: setRFSW_Control(2);
  7279  0CB6  3002               	movlw	2
  7280  0CB7  3188  2002         	fcall	_setRFSW_Control
  7281                           
  7282                           ;RF_Control_B1.c: 374: break;
  7283                           
  7284                           ;RF_Control_B1.c: 370: case 0x03:
  7285                           
  7286                           ;RF_Control_B1.c: 369: break;
  7287  0CB9  0008               	return
  7288  0CBA                     l8392:	
  7289                           ;RF_Control_B1.c: 375: case 0x11:
  7290                           
  7291                           
  7292                           ;RF_Control_B1.c: 378: setRFSW_AdjControl(1);
  7293  0CBA  3001               	movlw	1
  7294  0CBB  3195  254A         	fcall	_setRFSW_AdjControl
  7295                           
  7296                           ;RF_Control_B1.c: 381: break;
  7297  0CBD  0008               	return
  7298  0CBE                     l8394:	
  7299                           ;RF_Control_B1.c: 382: case 0x21:
  7300                           
  7301                           
  7302                           ;RF_Control_B1.c: 385: setRFSW_AdjControl(2);
  7303  0CBE  3002               	movlw	2
  7304  0CBF  3195  254A         	fcall	_setRFSW_AdjControl
  7305                           
  7306                           ;RF_Control_B1.c: 396: }
  7307                           
  7308                           ;RF_Control_B1.c: 395: break;
  7309                           
  7310                           ;RF_Control_B1.c: 389: case 0x31:
  7311                           
  7312                           ;RF_Control_B1.c: 388: break;
  7313  0CC1  0008               	return
  7314  0CC2                     l8398:	
  7315  0CC2  0022               	movlb	2	; select bank2
  7316  0CC3  082F               	movf	(_RF_Data^(0+256)+15),w
  7317                           
  7318                           ; Switch size 1, requested type "space"
  7319                           ; Number of cases is 8, Range of values is 0 to 49
  7320                           ; switch strategies available:
  7321                           ; Name         Instructions Cycles
  7322                           ; simple_byte           25    13 (average)
  7323                           ; direct_byte          106     6 (fixed)
  7324                           ; jumptable            260     6 (fixed)
  7325                           ;	Chosen strategy is simple_byte
  7326  0CC4  3A00               	xorlw	0	; case 0
  7327  0CC5  1903               	skipnz
  7328  0CC6  2C70               	goto	l8370
  7329  0CC7  3A01               	xorlw	1	; case 1
  7330  0CC8  1903               	skipnz
  7331  0CC9  2CB2               	goto	l8388
  7332  0CCA  3A03               	xorlw	3	; case 2
  7333  0CCB  1903               	skipnz
  7334  0CCC  2CB6               	goto	l8390
  7335  0CCD  3A01               	xorlw	1	; case 3
  7336  0CCE  1903               	skipnz
  7337  0CCF  2CDD               	goto	l2164
  7338  0CD0  3A12               	xorlw	18	; case 17
  7339  0CD1  1903               	skipnz
  7340  0CD2  2CBA               	goto	l8392
  7341  0CD3  3A31               	xorlw	49	; case 32
  7342  0CD4  1903               	skipnz
  7343  0CD5  2C9C               	goto	l8384
  7344  0CD6  3A01               	xorlw	1	; case 33
  7345  0CD7  1903               	skipnz
  7346  0CD8  2CBE               	goto	l8394
  7347  0CD9  3A10               	xorlw	16	; case 49
  7348  0CDA  1903               	skipnz
  7349  0CDB  2CDD               	goto	l2164
  7350  0CDC  2CDD               	goto	l2164
  7351  0CDD                     l2164:	
  7352  0CDD  0008               	return
  7353  0CDE                     __end_of_setControl_Lights_Table:	
  7354                           
  7355                           	psect	text28
  7356  0802                     __ptext28:	
  7357 ;; *************** function _setRFSW_Control *****************
  7358 ;; Defined at:
  7359 ;;		line 479 in file "../src/RF_Control_B1.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;  sw              1    wreg     unsigned char 
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;  sw              1   71[BANK0 ] unsigned char 
  7364 ;; Return value:  Size  Location     Type
  7365 ;;		None               void
  7366 ;; Registers used:
  7367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;Total ram usage:        2 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:   10
  7380 ;; This function calls:
  7381 ;;		_getDimmerLights_Status
  7382 ;;		_setDelayOff_GO
  7383 ;;		_setDimmerLights_SwOff
  7384 ;;		_setDimmerLights_SwOn
  7385 ;;		_setRF_DimmerLights
  7386 ;; This function is called by:
  7387 ;;		_setControl_Lights_Table
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           
  7392                           ;psect for function _setRFSW_Control
  7393  0802                     _setRFSW_Control:	
  7394                           
  7395                           ;incstack = 0
  7396                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7397                           ;setRFSW_Control@sw stored from wreg
  7398  0802  0020               	movlb	0	; select bank0
  7399  0803  00E7               	movwf	setRFSW_Control@sw
  7400                           
  7401                           ;RF_Control_B1.c: 482: setDimmerLights_SwOn(sw);
  7402  0804  0867               	movf	setRFSW_Control@sw,w
  7403  0805  3196  2645  3188   	fcall	_setDimmerLights_SwOn
  7404                           
  7405                           ;RF_Control_B1.c: 484: if (getDimmerLights_Status(sw) == 1) {
  7406  0808  0020               	movlb	0	; select bank0
  7407  0809  0867               	movf	setRFSW_Control@sw,w
  7408  080A  319E  26C8  3188   	fcall	_getDimmerLights_Status
  7409  080D  3A01               	xorlw	1
  7410  080E  1D03               	skipz
  7411  080F  2829               	goto	l8234
  7412                           
  7413                           ;RF_Control_B1.c: 485: if (RF_Data[16] == 0x80) {
  7414  0810  0022               	movlb	2	; select bank2
  7415  0811  0830               	movf	(_RF_Data^(0+256)+16),w
  7416  0812  3A80               	xorlw	128
  7417  0813  1D03               	skipz
  7418  0814  2822               	goto	l2168
  7419                           
  7420                           ;RF_Control_B1.c: 486: setDelayOff_GO(sw, 1, RF_Data[17]);
  7421  0815  0020               	movlb	0	; select bank0
  7422  0816  01AA               	clrf	setDelayOff_GO@command
  7423  0817  0AAA               	incf	setDelayOff_GO@command,f
  7424  0818  0022               	movlb	2	; select bank2
  7425  0819  0831               	movf	(_RF_Data^(0+256)+17),w
  7426  081A  0020               	movlb	0	; select bank0
  7427  081B  00E6               	movwf	??_setRFSW_Control
  7428  081C  0866               	movf	??_setRFSW_Control,w
  7429  081D  00AB               	movwf	setDelayOff_GO@value
  7430  081E  0867               	movf	setRFSW_Control@sw,w
  7431  081F  318A  2215  3188   	fcall	_setDelayOff_GO
  7432  0822                     l2168:	
  7433                           
  7434                           ;RF_Control_B1.c: 487: }
  7435                           ;RF_Control_B1.c: 489: setRF_DimmerLights(sw, 1);
  7436  0822  0020               	movlb	0	; select bank0
  7437  0823  01DD               	clrf	setRF_DimmerLights@on
  7438  0824  0ADD               	incf	setRF_DimmerLights@on,f
  7439  0825  0867               	movf	setRFSW_Control@sw,w
  7440  0826  3187  2793         	fcall	_setRF_DimmerLights
  7441                           
  7442                           ;RF_Control_B1.c: 491: } else {
  7443  0828  0008               	return
  7444  0829                     l8234:	
  7445                           
  7446                           ;RF_Control_B1.c: 492: if (RF_Data[16] == 0x80) {
  7447  0829  0022               	movlb	2	; select bank2
  7448  082A  0830               	movf	(_RF_Data^(0+256)+16),w
  7449  082B  3A80               	xorlw	128
  7450  082C  1D03               	skipz
  7451  082D  2842               	goto	l8238
  7452                           
  7453                           ;RF_Control_B1.c: 493: setDelayOff_GO(sw, 1, RF_Data[17]);
  7454  082E  0020               	movlb	0	; select bank0
  7455  082F  01AA               	clrf	setDelayOff_GO@command
  7456  0830  0AAA               	incf	setDelayOff_GO@command,f
  7457  0831  0022               	movlb	2	; select bank2
  7458  0832  0831               	movf	(_RF_Data^(0+256)+17),w
  7459  0833  0020               	movlb	0	; select bank0
  7460  0834  00E6               	movwf	??_setRFSW_Control
  7461  0835  0866               	movf	??_setRFSW_Control,w
  7462  0836  00AB               	movwf	setDelayOff_GO@value
  7463  0837  0867               	movf	setRFSW_Control@sw,w
  7464  0838  318A  2215  3188   	fcall	_setDelayOff_GO
  7465                           
  7466                           ;RF_Control_B1.c: 494: setRF_DimmerLights(sw, 1);
  7467  083B  0020               	movlb	0	; select bank0
  7468  083C  01DD               	clrf	setRF_DimmerLights@on
  7469  083D  0ADD               	incf	setRF_DimmerLights@on,f
  7470  083E  0867               	movf	setRFSW_Control@sw,w
  7471  083F  3187  2793         	fcall	_setRF_DimmerLights
  7472                           
  7473                           ;RF_Control_B1.c: 495: } else {
  7474  0841  0008               	return
  7475  0842                     l8238:	
  7476                           
  7477                           ;RF_Control_B1.c: 497: setDimmerLights_SwOff(sw);
  7478  0842  0020               	movlb	0	; select bank0
  7479  0843  0867               	movf	setRFSW_Control@sw,w
  7480  0844  318C  2405  3188   	fcall	_setDimmerLights_SwOff
  7481                           
  7482                           ;RF_Control_B1.c: 498: setRF_DimmerLights(sw, 0);
  7483  0847  0020               	movlb	0	; select bank0
  7484  0848  01DD               	clrf	setRF_DimmerLights@on
  7485  0849  0867               	movf	setRFSW_Control@sw,w
  7486  084A  3187  2793  3188   	fcall	_setRF_DimmerLights
  7487                           
  7488                           ;RF_Control_B1.c: 500: setDelayOff_GO(sw, 0, 0);
  7489  084D  0020               	movlb	0	; select bank0
  7490  084E  01AA               	clrf	setDelayOff_GO@command
  7491  084F  01AB               	clrf	setDelayOff_GO@value
  7492  0850  0867               	movf	setRFSW_Control@sw,w
  7493  0851  318A  2215         	fcall	_setDelayOff_GO
  7494  0853  0008               	return
  7495  0854                     __end_of_setRFSW_Control:	
  7496                           
  7497                           	psect	text29
  7498  154A                     __ptext29:	
  7499 ;; *************** function _setRFSW_AdjControl *****************
  7500 ;; Defined at:
  7501 ;;		line 506 in file "../src/RF_Control_B1.c"
  7502 ;; Parameters:    Size  Location     Type
  7503 ;;  sw              1    wreg     unsigned char 
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;  sw              1   70[BANK0 ] unsigned char 
  7506 ;; Return value:  Size  Location     Type
  7507 ;;		None               void
  7508 ;; Registers used:
  7509 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;Total ram usage:        3 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; Hardware stack levels required when called:   10
  7522 ;; This function calls:
  7523 ;;		_getDimmerLights_Status
  7524 ;;		_setMemory_Modify
  7525 ;;		_setRF_DimmerValue
  7526 ;;		_setTxData
  7527 ;; This function is called by:
  7528 ;;		_setControl_Lights_Table
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           
  7533                           ;psect for function _setRFSW_AdjControl
  7534  154A                     _setRFSW_AdjControl:	
  7535                           
  7536                           ;incstack = 0
  7537                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7538                           ;setRFSW_AdjControl@sw stored from wreg
  7539  154A  0020               	movlb	0	; select bank0
  7540  154B  00E6               	movwf	setRFSW_AdjControl@sw
  7541                           
  7542                           ;RF_Control_B1.c: 508: if (getDimmerLights_Status(sw) == 1) {
  7543  154C  0866               	movf	setRFSW_AdjControl@sw,w
  7544  154D  319E  26C8  3195   	fcall	_getDimmerLights_Status
  7545  1550  3A01               	xorlw	1
  7546  1551  1D03               	skipz
  7547  1552  2D5D               	goto	l8246
  7548                           
  7549                           ;RF_Control_B1.c: 509: setMemory_Modify(1);
  7550  1553  3001               	movlw	1
  7551  1554  319F  2776  3195   	fcall	_setMemory_Modify
  7552                           
  7553                           ;RF_Control_B1.c: 510: setRF_DimmerValue(sw);
  7554  1557  0020               	movlb	0	; select bank0
  7555  1558  0866               	movf	setRFSW_AdjControl@sw,w
  7556  1559  3194  2472  3195   	fcall	_setRF_DimmerValue
  7557                           
  7558                           ;RF_Control_B1.c: 511: } else {
  7559  155C  2D6F               	goto	l2176
  7560  155D                     l8246:	
  7561                           
  7562                           ;RF_Control_B1.c: 512: product->Data[9]=product->Data[20 + sw];
  7563  155D  0020               	movlb	0	; select bank0
  7564  155E  0866               	movf	setRFSW_AdjControl@sw,w
  7565  155F  3E14               	addlw	20
  7566  1560  076F               	addwf	_product,w
  7567  1561  00E4               	movwf	??_setRFSW_AdjControl
  7568  1562  0864               	movf	??_setRFSW_AdjControl,w
  7569  1563  0086               	movwf	6
  7570  1564  3002               	movlw	2	; select bank4/5
  7571  1565  0087               	movwf	7
  7572  1566  0801               	movf	1,w
  7573  1567  00E5               	movwf	??_setRFSW_AdjControl+1
  7574  1568  086F               	movf	_product,w
  7575  1569  3E09               	addlw	9
  7576  156A  0086               	movwf	6
  7577  156B  3002               	movlw	2	; select bank4/5
  7578  156C  0087               	movwf	7
  7579  156D  0865               	movf	??_setRFSW_AdjControl+1,w
  7580  156E  0081               	movwf	1
  7581  156F                     l2176:	
  7582                           
  7583                           ;RF_Control_B1.c: 513: }
  7584                           ;RF_Control_B1.c: 514: product->Data[17]=product->Data[26 + sw];
  7585  156F  0020               	movlb	0	; select bank0
  7586  1570  0866               	movf	setRFSW_AdjControl@sw,w
  7587  1571  3E1A               	addlw	26
  7588  1572  076F               	addwf	_product,w
  7589  1573  00E4               	movwf	??_setRFSW_AdjControl
  7590  1574  0864               	movf	??_setRFSW_AdjControl,w
  7591  1575  0086               	movwf	6
  7592  1576  3002               	movlw	2	; select bank4/5
  7593  1577  0087               	movwf	7
  7594  1578  0801               	movf	1,w
  7595  1579  00E5               	movwf	??_setRFSW_AdjControl+1
  7596  157A  086F               	movf	_product,w
  7597  157B  3E11               	addlw	17
  7598  157C  0086               	movwf	6
  7599  157D  3002               	movlw	2	; select bank4/5
  7600  157E  0087               	movwf	7
  7601  157F  0865               	movf	??_setRFSW_AdjControl+1,w
  7602  1580  0081               	movwf	1
  7603                           
  7604                           ;RF_Control_B1.c: 515: setTxData();
  7605  1581  3186  2622         	fcall	_setTxData
  7606  1583  0008               	return
  7607  1584                     __end_of_setRFSW_AdjControl:	
  7608                           
  7609                           	psect	text30
  7610  1472                     __ptext30:	
  7611 ;; *************** function _setRF_DimmerValue *****************
  7612 ;; Defined at:
  7613 ;;		line 520 in file "../src/RF_Control_B1.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;  lights          1    wreg     unsigned char 
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;  lights          1   67[BANK0 ] unsigned char 
  7618 ;; Return value:  Size  Location     Type
  7619 ;;		None               void
  7620 ;; Registers used:
  7621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7622 ;; Tracked objects:
  7623 ;;		On entry : 0/0
  7624 ;;		On exit  : 0/0
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7629 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7630 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;Total ram usage:        3 bytes
  7632 ;; Hardware stack levels used:    1
  7633 ;; Hardware stack levels required when called:    9
  7634 ;; This function calls:
  7635 ;;		_setDimmerLights_AdjRF
  7636 ;; This function is called by:
  7637 ;;		_setRFSW_AdjControl
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           
  7642                           ;psect for function _setRF_DimmerValue
  7643  1472                     _setRF_DimmerValue:	
  7644                           
  7645                           ;incstack = 0
  7646                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7647                           ;setRF_DimmerValue@lights stored from wreg
  7648  1472  0020               	movlb	0	; select bank0
  7649  1473  00E3               	movwf	setRF_DimmerValue@lights
  7650                           
  7651                           ;RF_Control_B1.c: 521: if (RF_Data[9] > 0x64) {
  7652  1474  3065               	movlw	101
  7653  1475  0022               	movlb	2	; select bank2
  7654  1476  0229               	subwf	(_RF_Data^(0+256)+9),w
  7655  1477  1C03               	skipc
  7656  1478  2C7F               	goto	l8160
  7657                           
  7658                           ;RF_Control_B1.c: 522: RF_Data[9] = 0x64;
  7659  1479  3064               	movlw	100
  7660  147A  0020               	movlb	0	; select bank0
  7661  147B  00E1               	movwf	??_setRF_DimmerValue
  7662  147C  0861               	movf	??_setRF_DimmerValue,w
  7663  147D  0022               	movlb	2	; select bank2
  7664  147E  00A9               	movwf	(_RF_Data^(0+256)+9)
  7665  147F                     l8160:	
  7666                           
  7667                           ;RF_Control_B1.c: 523: }
  7668                           ;RF_Control_B1.c: 524: product->Data[9]=RF_Data[9];
  7669  147F  0829               	movf	(_RF_Data^(0+256)+9),w
  7670  1480  0020               	movlb	0	; select bank0
  7671  1481  00E1               	movwf	??_setRF_DimmerValue
  7672  1482  086F               	movf	_product,w
  7673  1483  3E09               	addlw	9
  7674  1484  0086               	movwf	6
  7675  1485  3002               	movlw	2	; select bank4/5
  7676  1486  0087               	movwf	7
  7677  1487  0861               	movf	??_setRF_DimmerValue,w
  7678  1488  0081               	movwf	1
  7679                           
  7680                           ;RF_Control_B1.c: 525: product->Data[11]=lights;
  7681  1489  0863               	movf	setRF_DimmerValue@lights,w
  7682  148A  00E1               	movwf	??_setRF_DimmerValue
  7683  148B  086F               	movf	_product,w
  7684  148C  3E0B               	addlw	11
  7685  148D  0086               	movwf	6
  7686  148E  3002               	movlw	2	; select bank4/5
  7687  148F  0087               	movwf	7
  7688  1490  0861               	movf	??_setRF_DimmerValue,w
  7689  1491  0081               	movwf	1
  7690                           
  7691                           ;RF_Control_B1.c: 526: product->Data[(20 + lights)]=product->Data[9];
  7692  1492  086F               	movf	_product,w
  7693  1493  3E09               	addlw	9
  7694  1494  0086               	movwf	6
  7695  1495  3002               	movlw	2	; select bank4/5
  7696  1496  0087               	movwf	7
  7697  1497  0801               	movf	1,w
  7698  1498  00E1               	movwf	??_setRF_DimmerValue
  7699  1499  0863               	movf	setRF_DimmerValue@lights,w
  7700  149A  3E14               	addlw	20
  7701  149B  076F               	addwf	_product,w
  7702  149C  00E2               	movwf	??_setRF_DimmerValue+1
  7703  149D  0862               	movf	??_setRF_DimmerValue+1,w
  7704  149E  0086               	movwf	6
  7705  149F  3002               	movlw	2	; select bank4/5
  7706  14A0  0087               	movwf	7
  7707  14A1  0861               	movf	??_setRF_DimmerValue,w
  7708  14A2  0081               	movwf	1
  7709                           
  7710                           ;RF_Control_B1.c: 527: setDimmerLights_AdjRF(lights);
  7711  14A3  0863               	movf	setRF_DimmerValue@lights,w
  7712  14A4  3192  22DD         	fcall	_setDimmerLights_AdjRF
  7713  14A6  0008               	return
  7714  14A7                     __end_of_setRF_DimmerValue:	
  7715                           
  7716                           	psect	text31
  7717  12DD                     __ptext31:	
  7718 ;; *************** function _setDimmerLights_AdjRF *****************
  7719 ;; Defined at:
  7720 ;;		line 713 in file "../src/Dimmer_B1.c"
  7721 ;; Parameters:    Size  Location     Type
  7722 ;;  lights          1    wreg     unsigned char 
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;  lights          1   64[BANK0 ] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;		None               void
  7727 ;; Registers used:
  7728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;Total ram usage:        2 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    8
  7741 ;; This function calls:
  7742 ;;		_DimmerLightsPointSelect
  7743 ;;		_getPercentValue
  7744 ;; This function is called by:
  7745 ;;		_setRF_DimmerValue
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748                           
  7749                           
  7750                           ;psect for function _setDimmerLights_AdjRF
  7751  12DD                     _setDimmerLights_AdjRF:	
  7752                           
  7753                           ;incstack = 0
  7754                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7755                           ;setDimmerLights_AdjRF@lights stored from wreg
  7756  12DD  0020               	movlb	0	; select bank0
  7757  12DE  00E0               	movwf	setDimmerLights_AdjRF@lights
  7758                           
  7759                           ;Dimmer_B1.c: 714: DimmerLightsPointSelect(lights);
  7760  12DF  0860               	movf	setDimmerLights_AdjRF@lights,w
  7761  12E0  319F  2763  3192   	fcall	_DimmerLightsPointSelect
  7762                           
  7763                           ;Dimmer_B1.c: 715: DimmerLights->AdjRF = 1;
  7764  12E3  0020               	movlb	0	; select bank0
  7765  12E4  086D               	movf	_DimmerLights,w
  7766  12E5  0086               	movwf	6
  7767  12E6  3001               	movlw	1	; select bank2/3
  7768  12E7  0087               	movwf	7
  7769  12E8  1501               	bsf	1,2
  7770                           
  7771                           ;Dimmer_B1.c: 716: DimmerLights->Signal = 1;
  7772  12E9  086D               	movf	_DimmerLights,w
  7773  12EA  0086               	movwf	6
  7774  12EB  3001               	movlw	1	; select bank2/3
  7775  12EC  0087               	movwf	7
  7776  12ED  1481               	bsf	1,1
  7777                           
  7778                           ;Dimmer_B1.c: 717: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7779  12EE  086F               	movf	_product,w
  7780  12EF  3E09               	addlw	9
  7781  12F0  0086               	movwf	6
  7782  12F1  3002               	movlw	2	; select bank4/5
  7783  12F2  0087               	movwf	7
  7784  12F3  0801               	movf	1,w
  7785  12F4  3189  215C         	fcall	_getPercentValue
  7786  12F6  0020               	movlb	0	; select bank0
  7787  12F7  00DF               	movwf	??_setDimmerLights_AdjRF
  7788  12F8  086D               	movf	_DimmerLights,w
  7789  12F9  3E05               	addlw	5
  7790  12FA  0086               	movwf	6
  7791  12FB  3001               	movlw	1	; select bank2/3
  7792  12FC  0087               	movwf	7
  7793  12FD  085F               	movf	??_setDimmerLights_AdjRF,w
  7794  12FE  0081               	movwf	1
  7795  12FF  0008               	return
  7796  1300                     __end_of_setDimmerLights_AdjRF:	
  7797                           
  7798                           	psect	text32
  7799  095C                     __ptext32:	
  7800 ;; *************** function _getPercentValue *****************
  7801 ;; Defined at:
  7802 ;;		line 859 in file "../src/Dimmer_B1.c"
  7803 ;; Parameters:    Size  Location     Type
  7804 ;;  value           1    wreg     unsigned char 
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;  value           1   59[BANK0 ] unsigned char 
  7807 ;;  i               3   60[BANK0 ] float 
  7808 ;; Return value:  Size  Location     Type
  7809 ;;                  1    wreg      unsigned char 
  7810 ;; Registers used:
  7811 ;;		wreg, status,2, status,0, pclath, cstack
  7812 ;; Tracked objects:
  7813 ;;		On entry : 0/0
  7814 ;;		On exit  : 0/0
  7815 ;;		Unchanged: 0/0
  7816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7821 ;;Total ram usage:        6 bytes
  7822 ;; Hardware stack levels used:    1
  7823 ;; Hardware stack levels required when called:    7
  7824 ;; This function calls:
  7825 ;;		___awtoft
  7826 ;;		___ftadd
  7827 ;;		___ftdiv
  7828 ;;		___ftmul
  7829 ;;		___fttol
  7830 ;; This function is called by:
  7831 ;;		_setDimmerLights_AdjRF
  7832 ;; This function uses a non-reentrant model
  7833 ;;
  7834                           
  7835                           
  7836                           ;psect for function _getPercentValue
  7837  095C                     _getPercentValue:	
  7838                           
  7839                           ;incstack = 0
  7840                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7841                           ;getPercentValue@value stored from wreg
  7842  095C  0020               	movlb	0	; select bank0
  7843  095D  00DB               	movwf	getPercentValue@value
  7844                           
  7845                           ;Dimmer_B1.c: 861: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  7846  095E  3000               	movlw	0
  7847  095F  00DC               	movwf	getPercentValue@i
  7848  0960  30E0               	movlw	224
  7849  0961  00DD               	movwf	getPercentValue@i+1
  7850  0962  3041               	movlw	65
  7851  0963  00DE               	movwf	getPercentValue@i+2
  7852                           
  7853                           ;Dimmer_B1.c: 862: i /= 100;
  7854  0964  3000               	movlw	0
  7855  0965  00AE               	movwf	___ftdiv@f2
  7856  0966  30C8               	movlw	200
  7857  0967  00AF               	movwf	___ftdiv@f2+1
  7858  0968  3042               	movlw	66
  7859  0969  00B0               	movwf	___ftdiv@f2+2
  7860  096A  085C               	movf	getPercentValue@i,w
  7861  096B  00B1               	movwf	___ftdiv@f1
  7862  096C  085D               	movf	getPercentValue@i+1,w
  7863  096D  00B2               	movwf	___ftdiv@f1+1
  7864  096E  085E               	movf	getPercentValue@i+2,w
  7865  096F  00B3               	movwf	___ftdiv@f1+2
  7866  0970  318F  2757  3189   	fcall	___ftdiv
  7867  0973  0020               	movlb	0	; select bank0
  7868  0974  082E               	movf	?___ftdiv,w
  7869  0975  00DC               	movwf	getPercentValue@i
  7870  0976  082F               	movf	?___ftdiv+1,w
  7871  0977  00DD               	movwf	getPercentValue@i+1
  7872  0978  0830               	movf	?___ftdiv+2,w
  7873  0979  00DE               	movwf	getPercentValue@i+2
  7874                           
  7875                           ;Dimmer_B1.c: 863: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  7876  097A  085B               	movf	getPercentValue@value,w
  7877  097B  00D9               	movwf	??_getPercentValue
  7878  097C  01DA               	clrf	??_getPercentValue+1
  7879  097D  09D9               	comf	??_getPercentValue,f
  7880  097E  09DA               	comf	??_getPercentValue+1,f
  7881  097F  0AD9               	incf	??_getPercentValue,f
  7882  0980  1903               	skipnz
  7883  0981  0ADA               	incf	??_getPercentValue+1,f
  7884  0982  0859               	movf	??_getPercentValue,w
  7885  0983  3E64               	addlw	100
  7886  0984  00A8               	movwf	___awtoft@c
  7887  0985  3000               	movlw	0
  7888  0986  3D5A               	addwfc	??_getPercentValue+1,w
  7889  0987  00A9               	movwf	___awtoft@c+1
  7890  0988  3192  2299  3189   	fcall	___awtoft
  7891  098B  0020               	movlb	0	; select bank0
  7892  098C  0828               	movf	?___awtoft,w
  7893  098D  00B1               	movwf	___ftmul@f2
  7894  098E  0829               	movf	?___awtoft+1,w
  7895  098F  00B2               	movwf	___ftmul@f2+1
  7896  0990  082A               	movf	?___awtoft+2,w
  7897  0991  00B3               	movwf	___ftmul@f2+2
  7898  0992  085C               	movf	getPercentValue@i,w
  7899  0993  00AE               	movwf	___ftmul@f1
  7900  0994  085D               	movf	getPercentValue@i+1,w
  7901  0995  00AF               	movwf	___ftmul@f1+1
  7902  0996  085E               	movf	getPercentValue@i+2,w
  7903  0997  00B0               	movwf	___ftmul@f1+2
  7904  0998  3186  26DF  3189   	fcall	___ftmul
  7905  099B  0020               	movlb	0	; select bank0
  7906  099C  082E               	movf	?___ftmul,w
  7907  099D  00C1               	movwf	___ftadd@f2
  7908  099E  082F               	movf	?___ftmul+1,w
  7909  099F  00C2               	movwf	___ftadd@f2+1
  7910  09A0  0830               	movf	?___ftmul+2,w
  7911  09A1  00C3               	movwf	___ftadd@f2+2
  7912  09A2  3000               	movlw	0
  7913  09A3  00BE               	movwf	___ftadd@f1
  7914  09A4  3000               	movlw	0
  7915  09A5  00BF               	movwf	___ftadd@f1+1
  7916  09A6  3042               	movlw	66
  7917  09A7  00C0               	movwf	___ftadd@f1+2
  7918  09A8  3183  235D  3189   	fcall	___ftadd
  7919  09AB  0020               	movlb	0	; select bank0
  7920  09AC  083E               	movf	?___ftadd,w
  7921  09AD  00CB               	movwf	___fttol@f1
  7922  09AE  083F               	movf	?___ftadd+1,w
  7923  09AF  00CC               	movwf	___fttol@f1+1
  7924  09B0  0840               	movf	?___ftadd+2,w
  7925  09B1  00CD               	movwf	___fttol@f1+2
  7926  09B2  318E  2637         	fcall	___fttol
  7927  09B4  0020               	movlb	0	; select bank0
  7928  09B5  084B               	movf	?___fttol,w
  7929  09B6  0008               	return
  7930  09B7                     __end_of_getPercentValue:	
  7931                           
  7932                           	psect	text33
  7933  06DF                     __ptext33:	
  7934 ;; *************** function ___ftmul *****************
  7935 ;; Defined at:
  7936 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;  f1              3   14[BANK0 ] float 
  7939 ;;  f2              3   17[BANK0 ] float 
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7942 ;;  sign            1   29[BANK0 ] unsigned char 
  7943 ;;  cntr            1   28[BANK0 ] unsigned char 
  7944 ;;  exp             1   24[BANK0 ] unsigned char 
  7945 ;; Return value:  Size  Location     Type
  7946 ;;                  3   14[BANK0 ] float 
  7947 ;; Registers used:
  7948 ;;		wreg, status,2, status,0, pclath, cstack
  7949 ;; Tracked objects:
  7950 ;;		On entry : 0/0
  7951 ;;		On exit  : 0/0
  7952 ;;		Unchanged: 0/0
  7953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7954 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7955 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7956 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7957 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7958 ;;Total ram usage:       16 bytes
  7959 ;; Hardware stack levels used:    1
  7960 ;; Hardware stack levels required when called:    6
  7961 ;; This function calls:
  7962 ;;		___ftpack
  7963 ;; This function is called by:
  7964 ;;		_getPercentValue
  7965 ;; This function uses a non-reentrant model
  7966 ;;
  7967                           
  7968                           
  7969                           ;psect for function ___ftmul
  7970  06DF                     ___ftmul:	
  7971                           
  7972                           ;incstack = 0
  7973                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7974  06DF  0020               	movlb	0	; select bank0
  7975  06E0  082E               	movf	___ftmul@f1,w
  7976  06E1  00B4               	movwf	??___ftmul
  7977  06E2  082F               	movf	___ftmul@f1+1,w
  7978  06E3  00B5               	movwf	??___ftmul+1
  7979  06E4  0830               	movf	___ftmul@f1+2,w
  7980  06E5  00B6               	movwf	??___ftmul+2
  7981  06E6  1003               	clrc
  7982  06E7  0D35               	rlf	??___ftmul+1,w
  7983  06E8  0D36               	rlf	??___ftmul+2,w
  7984  06E9  00B7               	movwf	??___ftmul+3
  7985  06EA  0837               	movf	??___ftmul+3,w
  7986  06EB  00B8               	movwf	___ftmul@exp
  7987  06EC  08B8               	movf	___ftmul@exp,f
  7988  06ED  1D03               	skipz
  7989  06EE  2EF6               	goto	l7772
  7990  06EF  3000               	movlw	0
  7991  06F0  00AE               	movwf	?___ftmul
  7992  06F1  3000               	movlw	0
  7993  06F2  00AF               	movwf	?___ftmul+1
  7994  06F3  3000               	movlw	0
  7995  06F4  00B0               	movwf	?___ftmul+2
  7996  06F5  0008               	return
  7997  06F6                     l7772:	
  7998  06F6  0831               	movf	___ftmul@f2,w
  7999  06F7  00B4               	movwf	??___ftmul
  8000  06F8  0832               	movf	___ftmul@f2+1,w
  8001  06F9  00B5               	movwf	??___ftmul+1
  8002  06FA  0833               	movf	___ftmul@f2+2,w
  8003  06FB  00B6               	movwf	??___ftmul+2
  8004  06FC  1003               	clrc
  8005  06FD  0D35               	rlf	??___ftmul+1,w
  8006  06FE  0D36               	rlf	??___ftmul+2,w
  8007  06FF  00B7               	movwf	??___ftmul+3
  8008  0700  0837               	movf	??___ftmul+3,w
  8009  0701  00BD               	movwf	___ftmul@sign
  8010  0702  08BD               	movf	___ftmul@sign,f
  8011  0703  1D03               	skipz
  8012  0704  2F0C               	goto	l7778
  8013  0705  3000               	movlw	0
  8014  0706  00AE               	movwf	?___ftmul
  8015  0707  3000               	movlw	0
  8016  0708  00AF               	movwf	?___ftmul+1
  8017  0709  3000               	movlw	0
  8018  070A  00B0               	movwf	?___ftmul+2
  8019  070B  0008               	return
  8020  070C                     l7778:	
  8021  070C  083D               	movf	___ftmul@sign,w
  8022  070D  3E7B               	addlw	123
  8023  070E  00B4               	movwf	??___ftmul
  8024  070F  0834               	movf	??___ftmul,w
  8025  0710  07B8               	addwf	___ftmul@exp,f
  8026  0711  082E               	movf	___ftmul@f1,w
  8027  0712  00B4               	movwf	??___ftmul
  8028  0713  082F               	movf	___ftmul@f1+1,w
  8029  0714  00B5               	movwf	??___ftmul+1
  8030  0715  0830               	movf	___ftmul@f1+2,w
  8031  0716  00B6               	movwf	??___ftmul+2
  8032  0717  3010               	movlw	16
  8033  0718                     u7985:	
  8034  0718  36B6               	lsrf	??___ftmul+2,f
  8035  0719  0CB5               	rrf	??___ftmul+1,f
  8036  071A  0CB4               	rrf	??___ftmul,f
  8037  071B  0B89               	decfsz	9,f
  8038  071C  2F18               	goto	u7985
  8039  071D  0834               	movf	??___ftmul,w
  8040  071E  00B7               	movwf	??___ftmul+3
  8041  071F  0837               	movf	??___ftmul+3,w
  8042  0720  00BD               	movwf	___ftmul@sign
  8043  0721  0831               	movf	___ftmul@f2,w
  8044  0722  00B4               	movwf	??___ftmul
  8045  0723  0832               	movf	___ftmul@f2+1,w
  8046  0724  00B5               	movwf	??___ftmul+1
  8047  0725  0833               	movf	___ftmul@f2+2,w
  8048  0726  00B6               	movwf	??___ftmul+2
  8049  0727  3010               	movlw	16
  8050  0728                     u7995:	
  8051  0728  36B6               	lsrf	??___ftmul+2,f
  8052  0729  0CB5               	rrf	??___ftmul+1,f
  8053  072A  0CB4               	rrf	??___ftmul,f
  8054  072B  0B89               	decfsz	9,f
  8055  072C  2F28               	goto	u7995
  8056  072D  0834               	movf	??___ftmul,w
  8057  072E  00B7               	movwf	??___ftmul+3
  8058  072F  0837               	movf	??___ftmul+3,w
  8059  0730  06BD               	xorwf	___ftmul@sign,f
  8060  0731  3080               	movlw	128
  8061  0732  00B4               	movwf	??___ftmul
  8062  0733  0834               	movf	??___ftmul,w
  8063  0734  05BD               	andwf	___ftmul@sign,f
  8064  0735  17AF               	bsf	___ftmul@f1+1,7
  8065  0736  17B2               	bsf	___ftmul@f2+1,7
  8066  0737  30FF               	movlw	255
  8067  0738  05B1               	andwf	___ftmul@f2,f
  8068  0739  30FF               	movlw	255
  8069  073A  05B2               	andwf	___ftmul@f2+1,f
  8070  073B  3000               	movlw	0
  8071  073C  05B3               	andwf	___ftmul@f2+2,f
  8072  073D  3000               	movlw	0
  8073  073E  00B9               	movwf	___ftmul@f3_as_product
  8074  073F  3000               	movlw	0
  8075  0740  00BA               	movwf	___ftmul@f3_as_product+1
  8076  0741  3000               	movlw	0
  8077  0742  00BB               	movwf	___ftmul@f3_as_product+2
  8078  0743  3007               	movlw	7
  8079  0744  00B4               	movwf	??___ftmul
  8080  0745  0834               	movf	??___ftmul,w
  8081  0746  00BC               	movwf	___ftmul@cntr
  8082  0747                     l7790:	
  8083  0747  1C2E               	btfss	___ftmul@f1,0
  8084  0748  2F4F               	goto	l7794
  8085  0749  0831               	movf	___ftmul@f2,w
  8086  074A  07B9               	addwf	___ftmul@f3_as_product,f
  8087  074B  0832               	movf	___ftmul@f2+1,w
  8088  074C  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8089  074D  0833               	movf	___ftmul@f2+2,w
  8090  074E  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8091  074F                     l7794:	
  8092  074F  3001               	movlw	1
  8093  0750                     u8015:	
  8094  0750  36B0               	lsrf	___ftmul@f1+2,f
  8095  0751  0CAF               	rrf	___ftmul@f1+1,f
  8096  0752  0CAE               	rrf	___ftmul@f1,f
  8097  0753  0B89               	decfsz	9,f
  8098  0754  2F50               	goto	u8015
  8099  0755  3001               	movlw	1
  8100  0756                     u8025:	
  8101  0756  35B1               	lslf	___ftmul@f2,f
  8102  0757  0DB2               	rlf	___ftmul@f2+1,f
  8103  0758  0DB3               	rlf	___ftmul@f2+2,f
  8104  0759  0B89               	decfsz	9,f
  8105  075A  2F56               	goto	u8025
  8106  075B  3001               	movlw	1
  8107  075C  02BC               	subwf	___ftmul@cntr,f
  8108  075D  1D03               	btfss	3,2
  8109  075E  2F47               	goto	l7790
  8110  075F  3009               	movlw	9
  8111  0760  00B4               	movwf	??___ftmul
  8112  0761  0834               	movf	??___ftmul,w
  8113  0762  00BC               	movwf	___ftmul@cntr
  8114  0763                     l7802:	
  8115  0763  1C2E               	btfss	___ftmul@f1,0
  8116  0764  2F6B               	goto	l7806
  8117  0765  0831               	movf	___ftmul@f2,w
  8118  0766  07B9               	addwf	___ftmul@f3_as_product,f
  8119  0767  0832               	movf	___ftmul@f2+1,w
  8120  0768  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8121  0769  0833               	movf	___ftmul@f2+2,w
  8122  076A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8123  076B                     l7806:	
  8124  076B  3001               	movlw	1
  8125  076C                     u8055:	
  8126  076C  36B0               	lsrf	___ftmul@f1+2,f
  8127  076D  0CAF               	rrf	___ftmul@f1+1,f
  8128  076E  0CAE               	rrf	___ftmul@f1,f
  8129  076F  0B89               	decfsz	9,f
  8130  0770  2F6C               	goto	u8055
  8131  0771  3001               	movlw	1
  8132  0772                     u8065:	
  8133  0772  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8134  0773  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8135  0774  0CB9               	rrf	___ftmul@f3_as_product,f
  8136  0775  0B89               	decfsz	9,f
  8137  0776  2F72               	goto	u8065
  8138  0777  3001               	movlw	1
  8139  0778  02BC               	subwf	___ftmul@cntr,f
  8140  0779  1D03               	btfss	3,2
  8141  077A  2F63               	goto	l7802
  8142  077B  0839               	movf	___ftmul@f3_as_product,w
  8143  077C  00A0               	movwf	___ftpack@arg
  8144  077D  083A               	movf	___ftmul@f3_as_product+1,w
  8145  077E  00A1               	movwf	___ftpack@arg+1
  8146  077F  083B               	movf	___ftmul@f3_as_product+2,w
  8147  0780  00A2               	movwf	___ftpack@arg+2
  8148  0781  0838               	movf	___ftmul@exp,w
  8149  0782  00B4               	movwf	??___ftmul
  8150  0783  0834               	movf	??___ftmul,w
  8151  0784  00A3               	movwf	___ftpack@exp
  8152  0785  083D               	movf	___ftmul@sign,w
  8153  0786  00B5               	movwf	??___ftmul+1
  8154  0787  0835               	movf	??___ftmul+1,w
  8155  0788  00A4               	movwf	___ftpack@sign
  8156  0789  318A  2276         	fcall	___ftpack
  8157  078B  0020               	movlb	0	; select bank0
  8158  078C  0820               	movf	?___ftpack,w
  8159  078D  00AE               	movwf	?___ftmul
  8160  078E  0821               	movf	?___ftpack+1,w
  8161  078F  00AF               	movwf	?___ftmul+1
  8162  0790  0822               	movf	?___ftpack+2,w
  8163  0791  00B0               	movwf	?___ftmul+2
  8164  0792  0008               	return
  8165  0793                     __end_of___ftmul:	
  8166                           
  8167                           	psect	text34
  8168  035D                     __ptext34:	
  8169 ;; *************** function ___ftadd *****************
  8170 ;; Defined at:
  8171 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8172 ;; Parameters:    Size  Location     Type
  8173 ;;  f1              3   30[BANK0 ] float 
  8174 ;;  f2              3   33[BANK0 ] float 
  8175 ;; Auto vars:     Size  Location     Type
  8176 ;;  exp1            1   42[BANK0 ] unsigned char 
  8177 ;;  exp2            1   41[BANK0 ] unsigned char 
  8178 ;;  sign            1   40[BANK0 ] unsigned char 
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  3   30[BANK0 ] float 
  8181 ;; Registers used:
  8182 ;;		wreg, status,2, status,0, pclath, cstack
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8188 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8189 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8190 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;Total ram usage:       13 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; Hardware stack levels required when called:    6
  8195 ;; This function calls:
  8196 ;;		___ftpack
  8197 ;; This function is called by:
  8198 ;;		_getPercentValue
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           
  8203                           ;psect for function ___ftadd
  8204  035D                     ___ftadd:	
  8205                           
  8206                           ;incstack = 0
  8207                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8208  035D  0020               	movlb	0	; select bank0
  8209  035E  083E               	movf	___ftadd@f1,w
  8210  035F  00C4               	movwf	??___ftadd
  8211  0360  083F               	movf	___ftadd@f1+1,w
  8212  0361  00C5               	movwf	??___ftadd+1
  8213  0362  0840               	movf	___ftadd@f1+2,w
  8214  0363  00C6               	movwf	??___ftadd+2
  8215  0364  1003               	clrc
  8216  0365  0D45               	rlf	??___ftadd+1,w
  8217  0366  0D46               	rlf	??___ftadd+2,w
  8218  0367  00C7               	movwf	??___ftadd+3
  8219  0368  0847               	movf	??___ftadd+3,w
  8220  0369  00CA               	movwf	___ftadd@exp1
  8221  036A  0841               	movf	___ftadd@f2,w
  8222  036B  00C4               	movwf	??___ftadd
  8223  036C  0842               	movf	___ftadd@f2+1,w
  8224  036D  00C5               	movwf	??___ftadd+1
  8225  036E  0843               	movf	___ftadd@f2+2,w
  8226  036F  00C6               	movwf	??___ftadd+2
  8227  0370  1003               	clrc
  8228  0371  0D45               	rlf	??___ftadd+1,w
  8229  0372  0D46               	rlf	??___ftadd+2,w
  8230  0373  00C7               	movwf	??___ftadd+3
  8231  0374  0847               	movf	??___ftadd+3,w
  8232  0375  00C9               	movwf	___ftadd@exp2
  8233  0376  084A               	movf	___ftadd@exp1,w
  8234  0377  1903               	btfsc	3,2
  8235  0378  2B85               	goto	l7660
  8236  0379  0849               	movf	___ftadd@exp2,w
  8237  037A  024A               	subwf	___ftadd@exp1,w
  8238  037B  1803               	skipnc
  8239  037C  2B8C               	goto	l7664
  8240  037D  034A               	decf	___ftadd@exp1,w
  8241  037E  3AFF               	xorlw	255
  8242  037F  0749               	addwf	___ftadd@exp2,w
  8243  0380  00C4               	movwf	??___ftadd
  8244  0381  3019               	movlw	25
  8245  0382  0244               	subwf	??___ftadd,w
  8246  0383  1C03               	skipc
  8247  0384  2B8C               	goto	l7664
  8248  0385                     l7660:	
  8249  0385  0841               	movf	___ftadd@f2,w
  8250  0386  00BE               	movwf	?___ftadd
  8251  0387  0842               	movf	___ftadd@f2+1,w
  8252  0388  00BF               	movwf	?___ftadd+1
  8253  0389  0843               	movf	___ftadd@f2+2,w
  8254  038A  00C0               	movwf	?___ftadd+2
  8255  038B  0008               	return
  8256  038C                     l7664:	
  8257  038C  0849               	movf	___ftadd@exp2,w
  8258  038D  1903               	btfsc	3,2
  8259  038E  0008               	return
  8260  038F  084A               	movf	___ftadd@exp1,w
  8261  0390  0249               	subwf	___ftadd@exp2,w
  8262  0391  1803               	skipnc
  8263  0392  2B9B               	goto	l7670
  8264  0393  0349               	decf	___ftadd@exp2,w
  8265  0394  3AFF               	xorlw	255
  8266  0395  074A               	addwf	___ftadd@exp1,w
  8267  0396  00C4               	movwf	??___ftadd
  8268  0397  3019               	movlw	25
  8269  0398  0244               	subwf	??___ftadd,w
  8270  0399  1803               	btfsc	3,0
  8271  039A  0008               	return
  8272  039B                     l7670:	
  8273  039B  3006               	movlw	6
  8274  039C  00C4               	movwf	??___ftadd
  8275  039D  0844               	movf	??___ftadd,w
  8276  039E  00C8               	movwf	___ftadd@sign
  8277  039F  1BC0               	btfsc	___ftadd@f1+2,7
  8278  03A0  17C8               	bsf	___ftadd@sign,7
  8279  03A1  1BC3               	btfsc	___ftadd@f2+2,7
  8280  03A2  1748               	bsf	___ftadd@sign,6
  8281  03A3  17BF               	bsf	___ftadd@f1+1,7
  8282  03A4  30FF               	movlw	255
  8283  03A5  05BE               	andwf	___ftadd@f1,f
  8284  03A6  30FF               	movlw	255
  8285  03A7  05BF               	andwf	___ftadd@f1+1,f
  8286  03A8  3000               	movlw	0
  8287  03A9  05C0               	andwf	___ftadd@f1+2,f
  8288  03AA  17C2               	bsf	___ftadd@f2+1,7
  8289  03AB  30FF               	movlw	255
  8290  03AC  05C1               	andwf	___ftadd@f2,f
  8291  03AD  30FF               	movlw	255
  8292  03AE  05C2               	andwf	___ftadd@f2+1,f
  8293  03AF  3000               	movlw	0
  8294  03B0  05C3               	andwf	___ftadd@f2+2,f
  8295  03B1  0849               	movf	___ftadd@exp2,w
  8296  03B2  024A               	subwf	___ftadd@exp1,w
  8297  03B3  1803               	skipnc
  8298  03B4  2BD7               	goto	l7692
  8299  03B5                     l7682:	
  8300  03B5  3001               	movlw	1
  8301  03B6                     u7745:	
  8302  03B6  35C1               	lslf	___ftadd@f2,f
  8303  03B7  0DC2               	rlf	___ftadd@f2+1,f
  8304  03B8  0DC3               	rlf	___ftadd@f2+2,f
  8305  03B9  0B89               	decfsz	9,f
  8306  03BA  2BB6               	goto	u7745
  8307  03BB  3001               	movlw	1
  8308  03BC  02C9               	subwf	___ftadd@exp2,f
  8309  03BD  0849               	movf	___ftadd@exp2,w
  8310  03BE  064A               	xorwf	___ftadd@exp1,w
  8311  03BF  1903               	skipnz
  8312  03C0  2BD2               	goto	l7690
  8313  03C1  3001               	movlw	1
  8314  03C2  02C8               	subwf	___ftadd@sign,f
  8315  03C3  0848               	movf	___ftadd@sign,w
  8316  03C4  3907               	andlw	7
  8317  03C5  1903               	btfsc	3,2
  8318  03C6  2BD2               	goto	l7690
  8319  03C7  2BB5               	goto	l7682
  8320  03C8                     l7688:	
  8321  03C8  3001               	movlw	1
  8322  03C9                     u7775:	
  8323  03C9  36C0               	lsrf	___ftadd@f1+2,f
  8324  03CA  0CBF               	rrf	___ftadd@f1+1,f
  8325  03CB  0CBE               	rrf	___ftadd@f1,f
  8326  03CC  0B89               	decfsz	9,f
  8327  03CD  2BC9               	goto	u7775
  8328  03CE  3001               	movlw	1
  8329  03CF  00C4               	movwf	??___ftadd
  8330  03D0  0844               	movf	??___ftadd,w
  8331  03D1  07CA               	addwf	___ftadd@exp1,f
  8332  03D2                     l7690:	
  8333  03D2  084A               	movf	___ftadd@exp1,w
  8334  03D3  0649               	xorwf	___ftadd@exp2,w
  8335  03D4  1903               	btfsc	3,2
  8336  03D5  2BFC               	goto	l2793
  8337  03D6  2BC8               	goto	l7688
  8338  03D7                     l7692:	
  8339  03D7  084A               	movf	___ftadd@exp1,w
  8340  03D8  0249               	subwf	___ftadd@exp2,w
  8341  03D9  1803               	skipnc
  8342  03DA  2BFC               	goto	l2793
  8343  03DB                     l7694:	
  8344  03DB  3001               	movlw	1
  8345  03DC                     u7805:	
  8346  03DC  35BE               	lslf	___ftadd@f1,f
  8347  03DD  0DBF               	rlf	___ftadd@f1+1,f
  8348  03DE  0DC0               	rlf	___ftadd@f1+2,f
  8349  03DF  0B89               	decfsz	9,f
  8350  03E0  2BDC               	goto	u7805
  8351  03E1  3001               	movlw	1
  8352  03E2  02CA               	subwf	___ftadd@exp1,f
  8353  03E3  0849               	movf	___ftadd@exp2,w
  8354  03E4  064A               	xorwf	___ftadd@exp1,w
  8355  03E5  1903               	skipnz
  8356  03E6  2BF8               	goto	l7702
  8357  03E7  3001               	movlw	1
  8358  03E8  02C8               	subwf	___ftadd@sign,f
  8359  03E9  0848               	movf	___ftadd@sign,w
  8360  03EA  3907               	andlw	7
  8361  03EB  1903               	btfsc	3,2
  8362  03EC  2BF8               	goto	l7702
  8363  03ED  2BDB               	goto	l7694
  8364  03EE                     l7700:	
  8365  03EE  3001               	movlw	1
  8366  03EF                     u7835:	
  8367  03EF  36C3               	lsrf	___ftadd@f2+2,f
  8368  03F0  0CC2               	rrf	___ftadd@f2+1,f
  8369  03F1  0CC1               	rrf	___ftadd@f2,f
  8370  03F2  0B89               	decfsz	9,f
  8371  03F3  2BEF               	goto	u7835
  8372  03F4  3001               	movlw	1
  8373  03F5  00C4               	movwf	??___ftadd
  8374  03F6  0844               	movf	??___ftadd,w
  8375  03F7  07C9               	addwf	___ftadd@exp2,f
  8376  03F8                     l7702:	
  8377  03F8  084A               	movf	___ftadd@exp1,w
  8378  03F9  0649               	xorwf	___ftadd@exp2,w
  8379  03FA  1D03               	skipz
  8380  03FB  2BEE               	goto	l7700
  8381  03FC                     l2793:	
  8382  03FC  1FC8               	btfss	___ftadd@sign,7
  8383  03FD  2C0E               	goto	l7706
  8384  03FE  30FF               	movlw	255
  8385  03FF  06BE               	xorwf	___ftadd@f1,f
  8386  0400  30FF               	movlw	255
  8387  0401  06BF               	xorwf	___ftadd@f1+1,f
  8388  0402  30FF               	movlw	255
  8389  0403  06C0               	xorwf	___ftadd@f1+2,f
  8390  0404  3001               	movlw	1
  8391  0405  07BE               	addwf	___ftadd@f1,f
  8392  0406  3000               	movlw	0
  8393  0407  1803               	skipnc
  8394  0408  3001               	movlw	1
  8395  0409  07BF               	addwf	___ftadd@f1+1,f
  8396  040A  3000               	movlw	0
  8397  040B  1803               	skipnc
  8398  040C  3001               	movlw	1
  8399  040D  07C0               	addwf	___ftadd@f1+2,f
  8400  040E                     l7706:	
  8401  040E  1F48               	btfss	___ftadd@sign,6
  8402  040F  2C20               	goto	l7710
  8403  0410  30FF               	movlw	255
  8404  0411  06C1               	xorwf	___ftadd@f2,f
  8405  0412  30FF               	movlw	255
  8406  0413  06C2               	xorwf	___ftadd@f2+1,f
  8407  0414  30FF               	movlw	255
  8408  0415  06C3               	xorwf	___ftadd@f2+2,f
  8409  0416  3001               	movlw	1
  8410  0417  07C1               	addwf	___ftadd@f2,f
  8411  0418  3000               	movlw	0
  8412  0419  1803               	skipnc
  8413  041A  3001               	movlw	1
  8414  041B  07C2               	addwf	___ftadd@f2+1,f
  8415  041C  3000               	movlw	0
  8416  041D  1803               	skipnc
  8417  041E  3001               	movlw	1
  8418  041F  07C3               	addwf	___ftadd@f2+2,f
  8419  0420                     l7710:	
  8420  0420  01C8               	clrf	___ftadd@sign
  8421  0421  083E               	movf	___ftadd@f1,w
  8422  0422  07C1               	addwf	___ftadd@f2,f
  8423  0423  083F               	movf	___ftadd@f1+1,w
  8424  0424  3DC2               	addwfc	___ftadd@f2+1,f
  8425  0425  0840               	movf	___ftadd@f1+2,w
  8426  0426  3DC3               	addwfc	___ftadd@f2+2,f
  8427  0427  1FC3               	btfss	___ftadd@f2+2,7
  8428  0428  2C3B               	goto	l7720
  8429  0429  30FF               	movlw	255
  8430  042A  06C1               	xorwf	___ftadd@f2,f
  8431  042B  30FF               	movlw	255
  8432  042C  06C2               	xorwf	___ftadd@f2+1,f
  8433  042D  30FF               	movlw	255
  8434  042E  06C3               	xorwf	___ftadd@f2+2,f
  8435  042F  3001               	movlw	1
  8436  0430  07C1               	addwf	___ftadd@f2,f
  8437  0431  3000               	movlw	0
  8438  0432  1803               	skipnc
  8439  0433  3001               	movlw	1
  8440  0434  07C2               	addwf	___ftadd@f2+1,f
  8441  0435  3000               	movlw	0
  8442  0436  1803               	skipnc
  8443  0437  3001               	movlw	1
  8444  0438  07C3               	addwf	___ftadd@f2+2,f
  8445  0439  01C8               	clrf	___ftadd@sign
  8446  043A  0AC8               	incf	___ftadd@sign,f
  8447  043B                     l7720:	
  8448  043B  0841               	movf	___ftadd@f2,w
  8449  043C  00A0               	movwf	___ftpack@arg
  8450  043D  0842               	movf	___ftadd@f2+1,w
  8451  043E  00A1               	movwf	___ftpack@arg+1
  8452  043F  0843               	movf	___ftadd@f2+2,w
  8453  0440  00A2               	movwf	___ftpack@arg+2
  8454  0441  084A               	movf	___ftadd@exp1,w
  8455  0442  00C4               	movwf	??___ftadd
  8456  0443  0844               	movf	??___ftadd,w
  8457  0444  00A3               	movwf	___ftpack@exp
  8458  0445  0848               	movf	___ftadd@sign,w
  8459  0446  00C5               	movwf	??___ftadd+1
  8460  0447  0845               	movf	??___ftadd+1,w
  8461  0448  00A4               	movwf	___ftpack@sign
  8462  0449  318A  2276         	fcall	___ftpack
  8463  044B  0020               	movlb	0	; select bank0
  8464  044C  0820               	movf	?___ftpack,w
  8465  044D  00BE               	movwf	?___ftadd
  8466  044E  0821               	movf	?___ftpack+1,w
  8467  044F  00BF               	movwf	?___ftadd+1
  8468  0450  0822               	movf	?___ftpack+2,w
  8469  0451  00C0               	movwf	?___ftadd+2
  8470  0452  0008               	return
  8471  0453                     __end_of___ftadd:	
  8472                           
  8473                           	psect	text35
  8474  1F76                     __ptext35:	
  8475 ;; *************** function _setMemory_Modify *****************
  8476 ;; Defined at:
  8477 ;;		line 999 in file "../src/MCU_B1.c"
  8478 ;; Parameters:    Size  Location     Type
  8479 ;;  command         1    wreg     unsigned char 
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;  command         1    1[BANK0 ] unsigned char 
  8482 ;; Return value:  Size  Location     Type
  8483 ;;		None               void
  8484 ;; Registers used:
  8485 ;;		wreg, status,2, status,0
  8486 ;; Tracked objects:
  8487 ;;		On entry : 0/0
  8488 ;;		On exit  : 0/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8495 ;;Total ram usage:        2 bytes
  8496 ;; Hardware stack levels used:    1
  8497 ;; Hardware stack levels required when called:    5
  8498 ;; This function calls:
  8499 ;;		Nothing
  8500 ;; This function is called by:
  8501 ;;		_setLog_Code
  8502 ;;		_setRFSW_AdjControl
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           
  8507                           ;psect for function _setMemory_Modify
  8508  1F76                     _setMemory_Modify:	
  8509                           
  8510                           ;incstack = 0
  8511                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8512                           ;setMemory_Modify@command stored from wreg
  8513  1F76  0020               	movlb	0	; select bank0
  8514  1F77  00A1               	movwf	setMemory_Modify@command
  8515                           
  8516                           ;MCU_B1.c: 1000: Memory.Modify = command == 1 ? 1 : 0;
  8517  1F78  0821               	movf	setMemory_Modify@command,w
  8518  1F79  3A01               	xorlw	1
  8519  1F7A  3000               	movlw	0
  8520  1F7B  1903               	skipnz
  8521  1F7C  3001               	movlw	1
  8522  1F7D  00A0               	movwf	??_setMemory_Modify
  8523  1F7E  0023               	movlb	3	; select bank3
  8524  1F7F  0844               	movf	(_Memory^(0+384)+36),w
  8525  1F80  0020               	movlb	0	; select bank0
  8526  1F81  0620               	xorwf	??_setMemory_Modify,w
  8527  1F82  39FE               	andlw	-2
  8528  1F83  0620               	xorwf	??_setMemory_Modify,w
  8529  1F84  0023               	movlb	3	; select bank3
  8530  1F85  00C4               	movwf	(_Memory^(0+384)+36)
  8531                           
  8532                           ;MCU_B1.c: 1001: Memory.Time = 0;
  8533  1F86  01C2               	clrf	(_Memory^(0+384)+34)
  8534  1F87  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8535  1F88  0008               	return
  8536  1F89                     __end_of_setMemory_Modify:	
  8537                           
  8538                           	psect	text36
  8539  1141                     __ptext36:	
  8540 ;; *************** function _getMain_All_Error_Status *****************
  8541 ;; Defined at:
  8542 ;;		line 412 in file "../src/Main_B1.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;  command         1    wreg     unsigned char 
  8545 ;; Auto vars:     Size  Location     Type
  8546 ;;  command         1    1[BANK0 ] unsigned char 
  8547 ;;  status          1    4[BANK0 ] unsigned char 
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  1    wreg      unsigned char 
  8550 ;; Registers used:
  8551 ;;		wreg, status,2, status,0
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8560 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8561 ;;Total ram usage:        5 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:    5
  8564 ;; This function calls:
  8565 ;;		Nothing
  8566 ;; This function is called by:
  8567 ;;		_setTemp_Main
  8568 ;;		_setRF_Main
  8569 ;;		_getRxData
  8570 ;;		_Switch_Main
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           
  8575                           ;psect for function _getMain_All_Error_Status
  8576  1141                     _getMain_All_Error_Status:	
  8577                           
  8578                           ;incstack = 0
  8579                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  8580                           ;getMain_All_Error_Status@command stored from wreg
  8581  1141  0020               	movlb	0	; select bank0
  8582  1142  00A1               	movwf	getMain_All_Error_Status@command
  8583                           
  8584                           ;Main_B1.c: 413: char status = 0;
  8585  1143  01A4               	clrf	getMain_All_Error_Status@status
  8586                           
  8587                           ;Main_B1.c: 424: if (status == 0 && command != 2) {
  8588  1144  08A4               	movf	getMain_All_Error_Status@status,f
  8589  1145  1D03               	skipz
  8590  1146  295B               	goto	l1537
  8591  1147  0821               	movf	getMain_All_Error_Status@command,w
  8592  1148  3A02               	xorlw	2
  8593  1149  1903               	skipnz
  8594  114A  295B               	goto	l1537
  8595                           
  8596                           ;Main_B1.c: 425: status = Temp.ERROR == 1 ? 2 : 0;
  8597  114B  0021               	movlb	1	; select bank1
  8598  114C  18D7               	btfsc	_Temp^(0+128),1
  8599  114D  2952               	goto	l8354
  8600  114E  0020               	movlb	0	; select bank0
  8601  114F  01A2               	clrf	_getMain_All_Error_Status$3603
  8602  1150  01A3               	clrf	_getMain_All_Error_Status$3603+1
  8603  1151  2957               	goto	l1541
  8604  1152                     l8354:	
  8605  1152  3002               	movlw	2
  8606  1153  0020               	movlb	0	; select bank0
  8607  1154  00A2               	movwf	_getMain_All_Error_Status$3603
  8608  1155  3000               	movlw	0
  8609  1156  00A3               	movwf	_getMain_All_Error_Status$3603+1
  8610  1157                     l1541:	
  8611  1157  0822               	movf	_getMain_All_Error_Status$3603,w
  8612  1158  00A0               	movwf	??_getMain_All_Error_Status
  8613  1159  0820               	movf	??_getMain_All_Error_Status,w
  8614  115A  00A4               	movwf	getMain_All_Error_Status@status
  8615  115B                     l1537:	
  8616                           
  8617                           ;Main_B1.c: 426: }
  8618                           ;Main_B1.c: 449: return status;
  8619  115B  0824               	movf	getMain_All_Error_Status@status,w
  8620  115C  0008               	return
  8621  115D                     __end_of_getMain_All_Error_Status:	
  8622                           
  8623                           	psect	text37
  8624  1F0A                     __ptext37:	
  8625 ;; *************** function _getRF_KeyStatus *****************
  8626 ;; Defined at:
  8627 ;;		line 190 in file "../src/RF_Control_B1.c"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;		None
  8630 ;; Auto vars:     Size  Location     Type
  8631 ;;  key             1    1[BANK0 ] unsigned char 
  8632 ;; Return value:  Size  Location     Type
  8633 ;;                  1    wreg      unsigned char 
  8634 ;; Registers used:
  8635 ;;		wreg, status,2
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;Total ram usage:        3 bytes
  8646 ;; Hardware stack levels used:    1
  8647 ;; Hardware stack levels required when called:    5
  8648 ;; This function calls:
  8649 ;;		Nothing
  8650 ;; This function is called by:
  8651 ;;		_setRF_Main
  8652 ;; This function uses a non-reentrant model
  8653 ;;
  8654                           
  8655                           
  8656                           ;psect for function _getRF_KeyStatus
  8657  1F0A                     _getRF_KeyStatus:	
  8658                           
  8659                           ;RF_Control_B1.c: 191: char key = 0;
  8660                           
  8661                           ;incstack = 0
  8662                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8663  1F0A  0020               	movlb	0	; select bank0
  8664  1F0B  01A1               	clrf	getRF_KeyStatus@key
  8665                           
  8666                           ;RF_Control_B1.c: 197: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8667  1F0C  01A2               	clrf	_getRF_KeyStatus$5163
  8668  1F0D  0AA2               	incf	_getRF_KeyStatus$5163,f
  8669  1F0E  1F0C               	btfss	12,6	;volatile
  8670  1F0F  1A0C               	btfsc	12,4	;volatile
  8671  1F10  2F15               	goto	l8722
  8672  1F11  1C0C               	btfss	12,0	;volatile
  8673  1F12  188D               	btfsc	13,1	;volatile
  8674  1F13  2F15               	goto	l8722
  8675  1F14  01A2               	clrf	_getRF_KeyStatus$5163
  8676  1F15                     l8722:	
  8677  1F15  0822               	movf	_getRF_KeyStatus$5163,w
  8678  1F16  00A0               	movwf	??_getRF_KeyStatus
  8679  1F17  0820               	movf	??_getRF_KeyStatus,w
  8680  1F18  00A1               	movwf	getRF_KeyStatus@key
  8681                           
  8682                           ;RF_Control_B1.c: 203: return key;
  8683  1F19  0821               	movf	getRF_KeyStatus@key,w
  8684  1F1A  0008               	return
  8685  1F1B                     __end_of_getRF_KeyStatus:	
  8686                           
  8687                           	psect	text38
  8688  1EF9                     __ptext38:	
  8689 ;; *************** function _getBuz_GO *****************
  8690 ;; Defined at:
  8691 ;;		line 82 in file "../src/Buzzer_B1.c"
  8692 ;; Parameters:    Size  Location     Type
  8693 ;;		None
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;  i               2    4[BANK0 ] int 
  8696 ;; Return value:  Size  Location     Type
  8697 ;;                  2    0[BANK0 ] int 
  8698 ;; Registers used:
  8699 ;;		wreg, status,2, status,0
  8700 ;; Tracked objects:
  8701 ;;		On entry : 0/0
  8702 ;;		On exit  : 0/0
  8703 ;;		Unchanged: 0/0
  8704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8705 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;Total ram usage:        6 bytes
  8710 ;; Hardware stack levels used:    1
  8711 ;; Hardware stack levels required when called:    5
  8712 ;; This function calls:
  8713 ;;		Nothing
  8714 ;; This function is called by:
  8715 ;;		_setRF_Main
  8716 ;; This function uses a non-reentrant model
  8717 ;;
  8718                           
  8719                           
  8720                           ;psect for function _getBuz_GO
  8721  1EF9                     _getBuz_GO:	
  8722                           
  8723                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8724                           
  8725                           ;incstack = 0
  8726                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8727  1EF9  0021               	movlb	1	; select bank1
  8728  1EFA  0C30               	rrf	_Buz1^(0+128),w
  8729  1EFB  3901               	andlw	1
  8730  1EFC  0020               	movlb	0	; select bank0
  8731  1EFD  00A2               	movwf	??_getBuz_GO
  8732  1EFE  01A3               	clrf	??_getBuz_GO+1
  8733  1EFF  0822               	movf	??_getBuz_GO,w
  8734  1F00  00A4               	movwf	getBuz_GO@i
  8735  1F01  0823               	movf	??_getBuz_GO+1,w
  8736  1F02  00A5               	movwf	getBuz_GO@i+1
  8737                           
  8738                           ;Buzzer_B1.c: 84: return i;
  8739  1F03  0825               	movf	getBuz_GO@i+1,w
  8740  1F04  01A1               	clrf	?_getBuz_GO+1
  8741  1F05  07A1               	addwf	?_getBuz_GO+1,f
  8742  1F06  0824               	movf	getBuz_GO@i,w
  8743  1F07  01A0               	clrf	?_getBuz_GO
  8744  1F08  07A0               	addwf	?_getBuz_GO,f
  8745  1F09  0008               	return
  8746  1F0A                     __end_of_getBuz_GO:	
  8747                           
  8748                           	psect	text39
  8749  0B38                     __ptext39:	
  8750 ;; *************** function _CC2500_TxData *****************
  8751 ;; Defined at:
  8752 ;;		line 32 in file "../src/CC2500_B1.c"
  8753 ;; Parameters:    Size  Location     Type
  8754 ;;		None
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8757 ;; Return value:  Size  Location     Type
  8758 ;;		None               void
  8759 ;; Registers used:
  8760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8761 ;; Tracked objects:
  8762 ;;		On entry : 0/0
  8763 ;;		On exit  : 0/0
  8764 ;;		Unchanged: 0/0
  8765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;Total ram usage:        2 bytes
  8771 ;; Hardware stack levels used:    1
  8772 ;; Hardware stack levels required when called:    7
  8773 ;; This function calls:
  8774 ;;		_CC2500_WriteByte
  8775 ;;		_CC2500_WriteCommand
  8776 ;;		_Timeout_Counter
  8777 ;;		_set_TimeoutCleared
  8778 ;; This function is called by:
  8779 ;;		_setRF_Main
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           
  8784                           ;psect for function _CC2500_TxData
  8785  0B38                     _CC2500_TxData:	
  8786                           
  8787                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8788                           ;CC2500_B1.c: 35: RC4 = 0;
  8789                           
  8790                           ;incstack = 0
  8791                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8792  0B38  0020               	movlb	0	; select bank0
  8793  0B39  120E               	bcf	14,4	;volatile
  8794                           
  8795                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8796  0B3A  307F               	movlw	127
  8797  0B3B  00A4               	movwf	??_CC2500_TxData
  8798  0B3C  0824               	movf	??_CC2500_TxData,w
  8799  0B3D  00F4               	movwf	_SPI0Buffer
  8800                           
  8801                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8802  0B3E  2B42               	goto	l8410
  8803  0B3F                     l8408:	
  8804                           
  8805                           ;CC2500_B1.c: 38: Timeout_Counter();
  8806  0B3F  3190  2071  318B   	fcall	_Timeout_Counter
  8807  0B42                     l8410:	
  8808  0B42  0020               	movlb	0	; select bank0
  8809  0B43  1D0E               	btfss	14,2	;volatile
  8810  0B44  2B48               	goto	l8414
  8811  0B45  0021               	movlb	1	; select bank1
  8812  0B46  1D2D               	btfss	(_myMain^(0+128)+13),2
  8813  0B47  2B3F               	goto	l8408
  8814  0B48                     l8414:	
  8815                           
  8816                           ;CC2500_B1.c: 39: };
  8817                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8818  0B48  319D  25F6  318B   	fcall	_set_TimeoutCleared
  8819                           
  8820                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8821  0B4B  319F  27B0  318B   	fcall	_CC2500_WriteByte
  8822                           
  8823                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8824  0B4E  0021               	movlb	1	; select bank1
  8825  0B4F  0853               	movf	_Tx_Length^(0+128),w
  8826  0B50  0020               	movlb	0	; select bank0
  8827  0B51  00A4               	movwf	??_CC2500_TxData
  8828  0B52  0824               	movf	??_CC2500_TxData,w
  8829  0B53  00F4               	movwf	_SPI0Buffer
  8830                           
  8831                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8832  0B54  319F  27B0  318B   	fcall	_CC2500_WriteByte
  8833                           
  8834                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8835  0B57  0020               	movlb	0	; select bank0
  8836  0B58  01A5               	clrf	CC2500_TxData@loop_e
  8837  0B59                     l8428:	
  8838  0B59  0021               	movlb	1	; select bank1
  8839  0B5A  0853               	movf	_Tx_Length^(0+128),w
  8840  0B5B  0020               	movlb	0	; select bank0
  8841  0B5C  0225               	subwf	CC2500_TxData@loop_e,w
  8842  0B5D  1803               	btfsc	3,0
  8843  0B5E  2B71               	goto	l251
  8844                           
  8845                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8846  0B5F  0825               	movf	CC2500_TxData@loop_e,w
  8847  0B60  3E20               	addlw	_RF_Data& (0+255)
  8848  0B61  0086               	movwf	6
  8849  0B62  3001               	movlw	1	; select bank2/3
  8850  0B63  0087               	movwf	7
  8851  0B64  0801               	movf	1,w
  8852  0B65  00A4               	movwf	??_CC2500_TxData
  8853  0B66  0824               	movf	??_CC2500_TxData,w
  8854  0B67  00F4               	movwf	_SPI0Buffer
  8855                           
  8856                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8857  0B68  319F  27B0  318B   	fcall	_CC2500_WriteByte
  8858  0B6B  3001               	movlw	1
  8859  0B6C  0020               	movlb	0	; select bank0
  8860  0B6D  00A4               	movwf	??_CC2500_TxData
  8861  0B6E  0824               	movf	??_CC2500_TxData,w
  8862  0B6F  07A5               	addwf	CC2500_TxData@loop_e,f
  8863  0B70  2B59               	goto	l8428
  8864  0B71                     l251:	
  8865                           
  8866                           ;CC2500_B1.c: 48: }
  8867                           ;CC2500_B1.c: 49: RC4 = 1;
  8868  0B71  160E               	bsf	14,4	;volatile
  8869                           
  8870                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8871  0B72  3035               	movlw	53
  8872  0B73  3190  20F5  318B   	fcall	_CC2500_WriteCommand
  8873                           
  8874                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8875  0B76  2B7A               	goto	l8434
  8876  0B77                     l8432:	
  8877                           
  8878                           ;CC2500_B1.c: 52: Timeout_Counter();
  8879  0B77  3190  2071  318B   	fcall	_Timeout_Counter
  8880  0B7A                     l8434:	
  8881  0B7A  0020               	movlb	0	; select bank0
  8882  0B7B  180D               	btfsc	13,0	;volatile
  8883  0B7C  2B80               	goto	l8438
  8884  0B7D  0021               	movlb	1	; select bank1
  8885  0B7E  1D2D               	btfss	(_myMain^(0+128)+13),2
  8886  0B7F  2B77               	goto	l8432
  8887  0B80                     l8438:	
  8888                           
  8889                           ;CC2500_B1.c: 53: };
  8890                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8891  0B80  319D  25F6  318B   	fcall	_set_TimeoutCleared
  8892                           
  8893                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8894  0B83  2B87               	goto	l8442
  8895  0B84                     l8440:	
  8896                           
  8897                           ;CC2500_B1.c: 57: Timeout_Counter();
  8898  0B84  3190  2071  318B   	fcall	_Timeout_Counter
  8899  0B87                     l8442:	
  8900  0B87  0020               	movlb	0	; select bank0
  8901  0B88  1C0D               	btfss	13,0	;volatile
  8902  0B89  2B8D               	goto	l8446
  8903  0B8A  0021               	movlb	1	; select bank1
  8904  0B8B  1D2D               	btfss	(_myMain^(0+128)+13),2
  8905  0B8C  2B84               	goto	l8440
  8906  0B8D                     l8446:	
  8907                           
  8908                           ;CC2500_B1.c: 58: };
  8909                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8910  0B8D  319D  25F6  318B   	fcall	_set_TimeoutCleared
  8911                           
  8912                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8913  0B90  3036               	movlw	54
  8914  0B91  3190  20F5  318B   	fcall	_CC2500_WriteCommand
  8915                           
  8916                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8917  0B94  303B               	movlw	59
  8918  0B95  3190  20F5  318B   	fcall	_CC2500_WriteCommand
  8919                           
  8920                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  8921  0B98  303A               	movlw	58
  8922  0B99  3190  20F5         	fcall	_CC2500_WriteCommand
  8923                           
  8924                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8925  0B9B  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8926  0B9C  0008               	return
  8927  0B9D                     __end_of_CC2500_TxData:	
  8928                           
  8929                           	psect	text40
  8930  0CDE                     __ptext40:	
  8931 ;; *************** function _CC2500_RxData *****************
  8932 ;; Defined at:
  8933 ;;		line 70 in file "../src/CC2500_B1.c"
  8934 ;; Parameters:    Size  Location     Type
  8935 ;;		None
  8936 ;; Auto vars:     Size  Location     Type
  8937 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8938 ;; Return value:  Size  Location     Type
  8939 ;;		None               void
  8940 ;; Registers used:
  8941 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8942 ;; Tracked objects:
  8943 ;;		On entry : 0/0
  8944 ;;		On exit  : 0/0
  8945 ;;		Unchanged: 0/0
  8946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;Total ram usage:        2 bytes
  8952 ;; Hardware stack levels used:    1
  8953 ;; Hardware stack levels required when called:    7
  8954 ;; This function calls:
  8955 ;;		_CC2500_ReadByte
  8956 ;;		_CC2500_ReadStatus
  8957 ;;		_CC2500_WriteByte
  8958 ;;		_Timeout_Counter
  8959 ;;		_set_TimeoutCleared
  8960 ;; This function is called by:
  8961 ;;		_setRF_Main
  8962 ;; This function uses a non-reentrant model
  8963 ;;
  8964                           
  8965                           
  8966                           ;psect for function _CC2500_RxData
  8967  0CDE                     _CC2500_RxData:	
  8968                           
  8969                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8970                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8971                           
  8972                           ;incstack = 0
  8973                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8974  0CDE  0020               	movlb	0	; select bank0
  8975  0CDF  180D               	btfsc	13,0	;volatile
  8976  0CE0  2CE5               	goto	l8462
  8977  0CE1  2CEE               	goto	l8468
  8978  0CE2                     l8460:	
  8979                           ;CC2500_B1.c: 76: {
  8980                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8981                           
  8982                           
  8983                           ;CC2500_B1.c: 78: Timeout_Counter();
  8984  0CE2  3190  2071  318C   	fcall	_Timeout_Counter
  8985  0CE5                     l8462:	
  8986  0CE5  0020               	movlb	0	; select bank0
  8987  0CE6  1C0D               	btfss	13,0	;volatile
  8988  0CE7  2CEB               	goto	l8466
  8989  0CE8  0021               	movlb	1	; select bank1
  8990  0CE9  1D2D               	btfss	(_myMain^(0+128)+13),2
  8991  0CEA  2CE2               	goto	l8460
  8992  0CEB                     l8466:	
  8993                           
  8994                           ;CC2500_B1.c: 79: };
  8995                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8996  0CEB  319D  25F6  318C   	fcall	_set_TimeoutCleared
  8997  0CEE                     l8468:	
  8998                           
  8999                           ;CC2500_B1.c: 81: }
  9000                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9001  0CEE  303B               	movlw	59
  9002  0CEF  3192  22BB  318C   	fcall	_CC2500_ReadStatus
  9003                           
  9004                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9005  0CF2  0021               	movlb	1	; select bank1
  9006  0CF3  0856               	movf	_s_data^(0+128),w
  9007  0CF4  1903               	btfsc	3,2
  9008  0CF5  0008               	return
  9009                           
  9010                           ;CC2500_B1.c: 86: RC4 = 0;
  9011  0CF6  0020               	movlb	0	; select bank0
  9012  0CF7  120E               	bcf	14,4	;volatile
  9013                           
  9014                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9015  0CF8  30FF               	movlw	255
  9016  0CF9  00A4               	movwf	??_CC2500_RxData
  9017  0CFA  0824               	movf	??_CC2500_RxData,w
  9018  0CFB  00F4               	movwf	_SPI0Buffer
  9019                           
  9020                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9021  0CFC  2D03               	goto	l8478
  9022  0CFD                     l8480:	
  9023  0CFD  0021               	movlb	1	; select bank1
  9024  0CFE  192D               	btfsc	(_myMain^(0+128)+13),2
  9025  0CFF  2D06               	goto	l276
  9026                           
  9027                           ;CC2500_B1.c: 89: Timeout_Counter();
  9028  0D00  3190  2071  318C   	fcall	_Timeout_Counter
  9029  0D03                     l8478:	
  9030  0D03  0020               	movlb	0	; select bank0
  9031  0D04  190E               	btfsc	14,2	;volatile
  9032  0D05  2CFD               	goto	l8480
  9033  0D06                     l276:	
  9034                           
  9035                           ;CC2500_B1.c: 90: };
  9036                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9037  0D06  0021               	movlb	1	; select bank1
  9038  0D07  192D               	btfsc	(_myMain^(0+128)+13),2
  9039  0D08  2D49               	goto	l277
  9040                           
  9041                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9042  0D09  319F  27B0  318C   	fcall	_CC2500_WriteByte
  9043                           
  9044                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9045  0D0C  3190  20DE  318C   	fcall	_CC2500_ReadByte
  9046                           
  9047                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9048  0D0F  0874               	movf	_SPI0Buffer,w
  9049  0D10  0020               	movlb	0	; select bank0
  9050  0D11  00A4               	movwf	??_CC2500_RxData
  9051  0D12  0824               	movf	??_CC2500_RxData,w
  9052  0D13  0021               	movlb	1	; select bank1
  9053  0D14  00D2               	movwf	_Rx_Length^(0+128)
  9054                           
  9055                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9056  0D15  0020               	movlb	0	; select bank0
  9057  0D16  01A5               	clrf	CC2500_RxData@loop_f
  9058  0D17                     l8494:	
  9059  0D17  0021               	movlb	1	; select bank1
  9060  0D18  0852               	movf	_Rx_Length^(0+128),w
  9061  0D19  0020               	movlb	0	; select bank0
  9062  0D1A  0225               	subwf	CC2500_RxData@loop_f,w
  9063  0D1B  1803               	btfsc	3,0
  9064  0D1C  2D2F               	goto	l8496
  9065                           
  9066                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9067  0D1D  3190  20DE  318C   	fcall	_CC2500_ReadByte
  9068                           
  9069                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9070  0D20  0874               	movf	_SPI0Buffer,w
  9071  0D21  0020               	movlb	0	; select bank0
  9072  0D22  00A4               	movwf	??_CC2500_RxData
  9073  0D23  0825               	movf	CC2500_RxData@loop_f,w
  9074  0D24  3E20               	addlw	_RF_Data& (0+255)
  9075  0D25  0086               	movwf	6
  9076  0D26  3001               	movlw	1	; select bank2/3
  9077  0D27  0087               	movwf	7
  9078  0D28  0824               	movf	??_CC2500_RxData,w
  9079  0D29  0081               	movwf	1
  9080  0D2A  3001               	movlw	1
  9081  0D2B  00A4               	movwf	??_CC2500_RxData
  9082  0D2C  0824               	movf	??_CC2500_RxData,w
  9083  0D2D  07A5               	addwf	CC2500_RxData@loop_f,f
  9084  0D2E  2D17               	goto	l8494
  9085  0D2F                     l8496:	
  9086                           
  9087                           ;CC2500_B1.c: 99: }
  9088                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9089  0D2F  3190  20DE  318C   	fcall	_CC2500_ReadByte
  9090                           
  9091                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9092  0D32  0874               	movf	_SPI0Buffer,w
  9093  0D33  0020               	movlb	0	; select bank0
  9094  0D34  00A4               	movwf	??_CC2500_RxData
  9095  0D35  0824               	movf	??_CC2500_RxData,w
  9096  0D36  0021               	movlb	1	; select bank1
  9097  0D37  00D1               	movwf	_RSSI^(0+128)
  9098                           
  9099                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9100  0D38  3190  20DE  318C   	fcall	_CC2500_ReadByte
  9101                           
  9102                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9103  0D3B  0874               	movf	_SPI0Buffer,w
  9104  0D3C  0020               	movlb	0	; select bank0
  9105  0D3D  00A4               	movwf	??_CC2500_RxData
  9106  0D3E  0824               	movf	??_CC2500_RxData,w
  9107  0D3F  0021               	movlb	1	; select bank1
  9108  0D40  00CD               	movwf	_CRC^(0+128)
  9109                           
  9110                           ;CC2500_B1.c: 104: RC4 = 1;
  9111  0D41  0020               	movlb	0	; select bank0
  9112  0D42  160E               	bsf	14,4	;volatile
  9113                           
  9114                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9115  0D43  0021               	movlb	1	; select bank1
  9116  0D44  1BCD               	btfsc	_CRC^(0+128),7
  9117                           
  9118                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9119  0D45  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9120                           
  9121                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9122  0D46  11BC               	bcf	_RF1^(0+128),3
  9123                           
  9124                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9125  0D47  14BC               	bsf	_RF1^(0+128),1
  9126                           
  9127                           ;CC2500_B1.c: 110: } else {
  9128  0D48  2D4B               	goto	l8508
  9129  0D49                     l277:	
  9130                           
  9131                           ;CC2500_B1.c: 111: RC4 = 1;
  9132  0D49  0020               	movlb	0	; select bank0
  9133  0D4A  160E               	bsf	14,4	;volatile
  9134  0D4B                     l8508:	
  9135                           
  9136                           ;CC2500_B1.c: 112: }
  9137                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9138  0D4B  319D  25F6         	fcall	_set_TimeoutCleared
  9139  0D4D  0021               	movlb	1	; select bank1
  9140  0D4E  0008               	return
  9141  0D4F                     __end_of_CC2500_RxData:	
  9142                           
  9143                           	psect	text41
  9144  12BB                     __ptext41:	
  9145 ;; *************** function _CC2500_ReadStatus *****************
  9146 ;; Defined at:
  9147 ;;		line 304 in file "../src/CC2500_B1.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;  status_addr     1    wreg     unsigned char 
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9152 ;; Return value:  Size  Location     Type
  9153 ;;		None               void
  9154 ;; Registers used:
  9155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;Total ram usage:        2 bytes
  9166 ;; Hardware stack levels used:    1
  9167 ;; Hardware stack levels required when called:    6
  9168 ;; This function calls:
  9169 ;;		_CC2500_ReadByte
  9170 ;;		_CC2500_WriteByte
  9171 ;;		_Timeout_Counter
  9172 ;;		_set_TimeoutCleared
  9173 ;; This function is called by:
  9174 ;;		_CC2500_RxData
  9175 ;;		_setRF_Main
  9176 ;; This function uses a non-reentrant model
  9177 ;;
  9178                           
  9179                           
  9180                           ;psect for function _CC2500_ReadStatus
  9181  12BB                     _CC2500_ReadStatus:	
  9182                           
  9183                           ;incstack = 0
  9184                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9185                           ;CC2500_ReadStatus@status_addr stored from wreg
  9186  12BB  0020               	movlb	0	; select bank0
  9187  12BC  00A3               	movwf	CC2500_ReadStatus@status_addr
  9188                           
  9189                           ;CC2500_B1.c: 305: RC4 = 0;
  9190  12BD  120E               	bcf	14,4	;volatile
  9191                           
  9192                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9193  12BE  0823               	movf	CC2500_ReadStatus@status_addr,w
  9194  12BF  3EC0               	addlw	192
  9195  12C0  00A2               	movwf	??_CC2500_ReadStatus
  9196  12C1  0822               	movf	??_CC2500_ReadStatus,w
  9197  12C2  00F4               	movwf	_SPI0Buffer
  9198                           
  9199                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9200  12C3  2AC7               	goto	l8272
  9201  12C4                     l8270:	
  9202                           
  9203                           ;CC2500_B1.c: 309: Timeout_Counter();
  9204  12C4  3190  2071  3192   	fcall	_Timeout_Counter
  9205  12C7                     l8272:	
  9206  12C7  0020               	movlb	0	; select bank0
  9207  12C8  1D0E               	btfss	14,2	;volatile
  9208  12C9  2ACD               	goto	l8276
  9209  12CA  0021               	movlb	1	; select bank1
  9210  12CB  1D2D               	btfss	(_myMain^(0+128)+13),2
  9211  12CC  2AC4               	goto	l8270
  9212  12CD                     l8276:	
  9213                           
  9214                           ;CC2500_B1.c: 310: };
  9215                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9216  12CD  319D  25F6  3192   	fcall	_set_TimeoutCleared
  9217                           
  9218                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9219  12D0  319F  27B0  3192   	fcall	_CC2500_WriteByte
  9220                           
  9221                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9222  12D3  3190  20DE         	fcall	_CC2500_ReadByte
  9223                           
  9224                           ;CC2500_B1.c: 315: RC4 = 1;
  9225  12D5  0020               	movlb	0	; select bank0
  9226  12D6  160E               	bsf	14,4	;volatile
  9227                           
  9228                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9229  12D7  0874               	movf	_SPI0Buffer,w
  9230  12D8  00A2               	movwf	??_CC2500_ReadStatus
  9231  12D9  0822               	movf	??_CC2500_ReadStatus,w
  9232  12DA  0021               	movlb	1	; select bank1
  9233  12DB  00D6               	movwf	_s_data^(0+128)
  9234  12DC  0008               	return
  9235  12DD                     __end_of_CC2500_ReadStatus:	
  9236                           
  9237                           	psect	text42
  9238  10DE                     __ptext42:	
  9239 ;; *************** function _CC2500_ReadByte *****************
  9240 ;; Defined at:
  9241 ;;		line 238 in file "../src/CC2500_B1.c"
  9242 ;; Parameters:    Size  Location     Type
  9243 ;;		None
  9244 ;; Auto vars:     Size  Location     Type
  9245 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9246 ;; Return value:  Size  Location     Type
  9247 ;;		None               void
  9248 ;; Registers used:
  9249 ;;		wreg, status,2, status,0
  9250 ;; Tracked objects:
  9251 ;;		On entry : 0/0
  9252 ;;		On exit  : 0/0
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;Total ram usage:        2 bytes
  9260 ;; Hardware stack levels used:    1
  9261 ;; Hardware stack levels required when called:    5
  9262 ;; This function calls:
  9263 ;;		Nothing
  9264 ;; This function is called by:
  9265 ;;		_CC2500_RxData
  9266 ;;		_CC2500_ReadStatus
  9267 ;;		_CC2500_ReadREG
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           
  9272                           ;psect for function _CC2500_ReadByte
  9273  10DE                     _CC2500_ReadByte:	
  9274                           
  9275                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9276                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9277                           
  9278                           ;incstack = 0
  9279                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9280  10DE  0020               	movlb	0	; select bank0
  9281  10DF  01A1               	clrf	CC2500_ReadByte@loop_b
  9282  10E0                     L8:	
  9283  10E0  3008               	movlw	8
  9284  10E1  0221               	subwf	CC2500_ReadByte@loop_b,w
  9285  10E2  1803               	btfsc	3,0
  9286  10E3  0008               	return
  9287                           
  9288                           ;CC2500_B1.c: 241: RC1 = 1;
  9289  10E4  148E               	bsf	14,1	;volatile
  9290                           
  9291                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9292  10E5  1003               	clrc
  9293  10E6  0DF4               	rlf	_SPI0Buffer,f
  9294                           
  9295                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9296  10E7  1D0E               	btfss	14,2	;volatile
  9297  10E8  28EB               	goto	l8208
  9298                           
  9299                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9300  10E9  1474               	bsf	_SPI0Buffer,0
  9301  10EA  28EF               	goto	l8210
  9302  10EB                     l8208:	
  9303                           
  9304                           ;CC2500_B1.c: 245: else
  9305                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9306  10EB  30FE               	movlw	254
  9307  10EC  00A0               	movwf	??_CC2500_ReadByte
  9308  10ED  0820               	movf	??_CC2500_ReadByte,w
  9309  10EE  05F4               	andwf	_SPI0Buffer,f
  9310  10EF                     l8210:	
  9311                           
  9312                           ;CC2500_B1.c: 247: RC1 = 0;
  9313  10EF  108E               	bcf	14,1	;volatile
  9314  10F0  3001               	movlw	1
  9315  10F1  00A0               	movwf	??_CC2500_ReadByte
  9316  10F2  0820               	movf	??_CC2500_ReadByte,w
  9317  10F3  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9318  10F4  28E0               	goto	L8
  9319  10F5                     __end_of_CC2500_ReadByte:	
  9320                           
  9321                           	psect	text43
  9322  1DDA                     __ptext43:	
  9323 ;; *************** function _RF_Initialization *****************
  9324 ;; Defined at:
  9325 ;;		line 9 in file "../src/RF_Control_B1.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;		None
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;		None
  9330 ;; Return value:  Size  Location     Type
  9331 ;;		None               void
  9332 ;; Registers used:
  9333 ;;		wreg, status,2, status,0, pclath, cstack
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;Total ram usage:        0 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    6
  9346 ;; This function calls:
  9347 ;;		_setRF_Initialization
  9348 ;; This function is called by:
  9349 ;;		_main
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           
  9354                           ;psect for function _RF_Initialization
  9355  1DDA                     _RF_Initialization:	
  9356                           
  9357                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9358                           
  9359                           ;incstack = 0
  9360                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9361  1DDA  3190  2066         	fcall	_setRF_Initialization
  9362  1DDC  0008               	return
  9363  1DDD                     __end_of_RF_Initialization:	
  9364                           
  9365                           	psect	text44
  9366  1066                     __ptext44:	
  9367 ;; *************** function _setRF_Initialization *****************
  9368 ;; Defined at:
  9369 ;;		line 43 in file "../src/RF_Control_B1.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;		None
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;		None
  9374 ;; Return value:  Size  Location     Type
  9375 ;;		None               void
  9376 ;; Registers used:
  9377 ;;		wreg
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;Total ram usage:        1 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    5
  9390 ;; This function calls:
  9391 ;;		Nothing
  9392 ;; This function is called by:
  9393 ;;		_RF_Initialization
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           
  9398                           ;psect for function _setRF_Initialization
  9399  1066                     _setRF_Initialization:	
  9400                           
  9401                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9402                           
  9403                           ;incstack = 0
  9404                           ; Regs used in _setRF_Initialization: [wreg]
  9405  1066  3015               	movlw	21
  9406  1067  0020               	movlb	0	; select bank0
  9407  1068  00A0               	movwf	??_setRF_Initialization
  9408  1069  0820               	movf	??_setRF_Initialization,w
  9409  106A  0021               	movlb	1	; select bank1
  9410  106B  00D3               	movwf	_Tx_Length^(0+128)
  9411                           
  9412                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9413  106C  300A               	movlw	10
  9414  106D  00C3               	movwf	(_RF1^(0+128)+7)
  9415  106E  3000               	movlw	0
  9416  106F  00C4               	movwf	(_RF1^(0+128)+8)
  9417  1070  0008               	return
  9418  1071                     __end_of_setRF_Initialization:	
  9419                           
  9420                           	psect	text45
  9421  1F3F                     __ptext45:	
  9422 ;; *************** function _Mcu_Initialization *****************
  9423 ;; Defined at:
  9424 ;;		line 30 in file "../src/MCU_B1.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;		None
  9427 ;; Auto vars:     Size  Location     Type
  9428 ;;		None
  9429 ;; Return value:  Size  Location     Type
  9430 ;;		None               void
  9431 ;; Registers used:
  9432 ;;		wreg, status,2, status,0, pclath, cstack
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9442 ;;Total ram usage:        0 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:    6
  9445 ;; This function calls:
  9446 ;;		_ADC_Set
  9447 ;;		_Fosc_Set
  9448 ;;		_IOC_Set
  9449 ;;		_IO_Set
  9450 ;;		_TMR1_Set
  9451 ;;		_WDT_Set
  9452 ;; This function is called by:
  9453 ;;		_main
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           
  9458                           ;psect for function _Mcu_Initialization
  9459  1F3F                     _Mcu_Initialization:	
  9460                           
  9461                           ;MCU_B1.c: 32: Fosc_Set();
  9462                           
  9463                           ;incstack = 0
  9464                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9465  1F3F  319D  25F2  319F   	fcall	_Fosc_Set
  9466                           
  9467                           ;MCU_B1.c: 34: IO_Set();
  9468  1F42  3191  210E  319F   	fcall	_IO_Set
  9469                           
  9470                           ;MCU_B1.c: 36: ;;
  9471                           ;MCU_B1.c: 38: TMR1_Set();
  9472  1F45  319E  2691  319F   	fcall	_TMR1_Set
  9473                           
  9474                           ;MCU_B1.c: 40: ADC_Set();
  9475  1F48  319E  2607  319F   	fcall	_ADC_Set
  9476                           
  9477                           ;MCU_B1.c: 42: ;;
  9478                           ;MCU_B1.c: 44: ;;
  9479                           ;MCU_B1.c: 46: IOC_Set();
  9480  1F4B  319E  26D8  319F   	fcall	_IOC_Set
  9481                           
  9482                           ;MCU_B1.c: 48: ;;
  9483                           ;MCU_B1.c: 50: ;;
  9484                           ;MCU_B1.c: 52: WDT_Set();
  9485  1F4E  319E  264A         	fcall	_WDT_Set
  9486  1F50  0008               	return
  9487  1F51                     __end_of_Mcu_Initialization:	
  9488                           
  9489                           	psect	text46
  9490  1E4A                     __ptext46:	
  9491 ;; *************** function _WDT_Set *****************
  9492 ;; Defined at:
  9493 ;;		line 1018 in file "../src/MCU_B1.c"
  9494 ;; Parameters:    Size  Location     Type
  9495 ;;		None
  9496 ;; Auto vars:     Size  Location     Type
  9497 ;;		None
  9498 ;; Return value:  Size  Location     Type
  9499 ;;		None               void
  9500 ;; Registers used:
  9501 ;;		wreg
  9502 ;; Tracked objects:
  9503 ;;		On entry : 0/0
  9504 ;;		On exit  : 0/0
  9505 ;;		Unchanged: 0/0
  9506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9511 ;;Total ram usage:        1 bytes
  9512 ;; Hardware stack levels used:    1
  9513 ;; Hardware stack levels required when called:    5
  9514 ;; This function calls:
  9515 ;;		Nothing
  9516 ;; This function is called by:
  9517 ;;		_Mcu_Initialization
  9518 ;; This function uses a non-reentrant model
  9519 ;;
  9520                           
  9521                           
  9522                           ;psect for function _WDT_Set
  9523  1E4A                     _WDT_Set:	
  9524                           
  9525                           ;MCU_B1.c: 1025: WDTCON = 0b00010111;;
  9526                           
  9527                           ;incstack = 0
  9528                           ; Regs used in _WDT_Set: [wreg]
  9529  1E4A  3017               	movlw	23
  9530  1E4B  0021               	movlb	1	; select bank1
  9531  1E4C  0097               	movwf	23	;volatile
  9532                           
  9533                           ;MCU_B1.c: 1027: WDT.Enable = 1;
  9534  1E4D  144B               	bsf	_WDT^(0+128),0
  9535                           
  9536                           ;MCU_B1.c: 1028: WDT.Timer = 10;
  9537  1E4E  300A               	movlw	10
  9538  1E4F  0020               	movlb	0	; select bank0
  9539  1E50  00A0               	movwf	??_WDT_Set
  9540  1E51  0820               	movf	??_WDT_Set,w
  9541  1E52  0021               	movlb	1	; select bank1
  9542  1E53  00CC               	movwf	(_WDT^(0+128)+1)
  9543  1E54  0008               	return
  9544  1E55                     __end_of_WDT_Set:	
  9545                           
  9546                           	psect	text47
  9547  1E91                     __ptext47:	
  9548 ;; *************** function _TMR1_Set *****************
  9549 ;; Defined at:
  9550 ;;		line 199 in file "../src/MCU_B1.c"
  9551 ;; Parameters:    Size  Location     Type
  9552 ;;		None
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;		None
  9555 ;; Return value:  Size  Location     Type
  9556 ;;		None               void
  9557 ;; Registers used:
  9558 ;;		wreg
  9559 ;; Tracked objects:
  9560 ;;		On entry : 0/0
  9561 ;;		On exit  : 0/0
  9562 ;;		Unchanged: 0/0
  9563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;Total ram usage:        0 bytes
  9569 ;; Hardware stack levels used:    1
  9570 ;; Hardware stack levels required when called:    5
  9571 ;; This function calls:
  9572 ;;		Nothing
  9573 ;; This function is called by:
  9574 ;;		_Mcu_Initialization
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578                           
  9579                           ;psect for function _TMR1_Set
  9580  1E91                     _TMR1_Set:	
  9581                           
  9582                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9583                           
  9584                           ;incstack = 0
  9585                           ; Regs used in _TMR1_Set: [wreg]
  9586  1E91  3041               	movlw	65
  9587  1E92  0020               	movlb	0	; select bank0
  9588  1E93  0098               	movwf	24	;volatile
  9589                           
  9590                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9591  1E94  30FA               	movlw	250
  9592  1E95  0097               	movwf	23	;volatile
  9593                           
  9594                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9595  1E96  3038               	movlw	56
  9596  1E97  0096               	movwf	22	;volatile
  9597                           
  9598                           ;MCU_B1.c: 203: TMR1IE = 1;
  9599  1E98  0021               	movlb	1	; select bank1
  9600  1E99  1411               	bsf	17,0	;volatile
  9601                           
  9602                           ;MCU_B1.c: 204: PEIE = 1;
  9603  1E9A  170B               	bsf	11,6	;volatile
  9604                           
  9605                           ;MCU_B1.c: 205: GIE = 1;
  9606  1E9B  178B               	bsf	11,7	;volatile
  9607  1E9C  0008               	return
  9608  1E9D                     __end_of_TMR1_Set:	
  9609                           
  9610                           	psect	text48
  9611  110E                     __ptext48:	
  9612 ;; *************** function _IO_Set *****************
  9613 ;; Defined at:
  9614 ;;		line 60 in file "../src/MCU_B1.c"
  9615 ;; Parameters:    Size  Location     Type
  9616 ;;		None
  9617 ;; Auto vars:     Size  Location     Type
  9618 ;;		None
  9619 ;; Return value:  Size  Location     Type
  9620 ;;		None               void
  9621 ;; Registers used:
  9622 ;;		wreg, status,2
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;Total ram usage:        0 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; Hardware stack levels required when called:    5
  9635 ;; This function calls:
  9636 ;;		Nothing
  9637 ;; This function is called by:
  9638 ;;		_Mcu_Initialization
  9639 ;; This function uses a non-reentrant model
  9640 ;;
  9641                           
  9642                           
  9643                           ;psect for function _IO_Set
  9644  110E                     _IO_Set:	
  9645                           
  9646                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9647                           
  9648                           ;incstack = 0
  9649                           ; Regs used in _IO_Set: [wreg+status,2]
  9650  110E  3077               	movlw	119
  9651  110F  0021               	movlb	1	; select bank1
  9652  1110  008C               	movwf	12	;volatile
  9653                           
  9654                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9655  1111  3007               	movlw	7
  9656  1112  008D               	movwf	13	;volatile
  9657                           
  9658                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9659  1113  300C               	movlw	12
  9660  1114  008E               	movwf	14	;volatile
  9661                           
  9662                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9663  1115  0022               	movlb	2	; select bank2
  9664  1116  018C               	clrf	12	;volatile
  9665                           
  9666                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9667  1117  3002               	movlw	2
  9668  1118  008D               	movwf	13	;volatile
  9669                           
  9670                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9671  1119  018E               	clrf	14	;volatile
  9672                           
  9673                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9674  111A  3022               	movlw	34
  9675  111B  0023               	movlb	3	; select bank3
  9676  111C  008C               	movwf	12	;volatile
  9677                           
  9678                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9679  111D  018D               	clrf	13	;volatile
  9680                           
  9681                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9682  111E  018E               	clrf	14	;volatile
  9683                           
  9684                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9685  111F  3077               	movlw	119
  9686  1120  0020               	movlb	0	; select bank0
  9687  1121  008C               	movwf	12	;volatile
  9688                           
  9689                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9690  1122  3007               	movlw	7
  9691  1123  008D               	movwf	13	;volatile
  9692                           
  9693                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9694  1124  300C               	movlw	12
  9695  1125  008E               	movwf	14	;volatile
  9696  1126  0008               	return
  9697  1127                     __end_of_IO_Set:	
  9698                           
  9699                           	psect	text49
  9700  1ED8                     __ptext49:	
  9701 ;; *************** function _IOC_Set *****************
  9702 ;; Defined at:
  9703 ;;		line 367 in file "../src/MCU_B1.c"
  9704 ;; Parameters:    Size  Location     Type
  9705 ;;		None
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;		None
  9708 ;; Return value:  Size  Location     Type
  9709 ;;		None               void
  9710 ;; Registers used:
  9711 ;;		wreg, status,2
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;Total ram usage:        0 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:    5
  9724 ;; This function calls:
  9725 ;;		Nothing
  9726 ;; This function is called by:
  9727 ;;		_Mcu_Initialization
  9728 ;; This function uses a non-reentrant model
  9729 ;;
  9730                           
  9731                           
  9732                           ;psect for function _IOC_Set
  9733  1ED8                     _IOC_Set:	
  9734                           
  9735                           ;MCU_B1.c: 368: WPUB2 = 0;
  9736                           
  9737                           ;incstack = 0
  9738                           ; Regs used in _IOC_Set: [wreg+status,2]
  9739  1ED8  0024               	movlb	4	; select bank4
  9740  1ED9  110D               	bcf	13,2	;volatile
  9741                           
  9742                           ;MCU_B1.c: 371: IOCBP = 0b00000100;
  9743  1EDA  3004               	movlw	4
  9744  1EDB  0027               	movlb	7	; select bank7
  9745  1EDC  0094               	movwf	20	;volatile
  9746                           
  9747                           ;MCU_B1.c: 372: IOCBN = 0b00000100;
  9748  1EDD  3004               	movlw	4
  9749  1EDE  0095               	movwf	21	;volatile
  9750                           
  9751                           ;MCU_B1.c: 375: IOCBP = 0b00000000;
  9752  1EDF  0194               	clrf	20	;volatile
  9753                           
  9754                           ;MCU_B1.c: 376: IOCBN = 0b00000100;
  9755  1EE0  3004               	movlw	4
  9756  1EE1  0095               	movwf	21	;volatile
  9757                           
  9758                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9759  1EE2  0196               	clrf	22	;volatile
  9760                           
  9761                           ;MCU_B1.c: 394: IOCIE = 1;
  9762  1EE3  158B               	bsf	11,3	;volatile
  9763                           
  9764                           ;MCU_B1.c: 395: IOCIF = 0;
  9765  1EE4  100B               	bcf	11,0	;volatile
  9766                           
  9767                           ;MCU_B1.c: 396: PEIE = 1;
  9768  1EE5  170B               	bsf	11,6	;volatile
  9769                           
  9770                           ;MCU_B1.c: 397: GIE = 1;
  9771  1EE6  178B               	bsf	11,7	;volatile
  9772  1EE7  0008               	return
  9773  1EE8                     __end_of_IOC_Set:	
  9774                           
  9775                           	psect	text50
  9776  1DF2                     __ptext50:	
  9777 ;; *************** function _Fosc_Set *****************
  9778 ;; Defined at:
  9779 ;;		line 56 in file "../src/MCU_B1.c"
  9780 ;; Parameters:    Size  Location     Type
  9781 ;;		None
  9782 ;; Auto vars:     Size  Location     Type
  9783 ;;		None
  9784 ;; Return value:  Size  Location     Type
  9785 ;;		None               void
  9786 ;; Registers used:
  9787 ;;		wreg
  9788 ;; Tracked objects:
  9789 ;;		On entry : 0/0
  9790 ;;		On exit  : 0/0
  9791 ;;		Unchanged: 0/0
  9792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9797 ;;Total ram usage:        0 bytes
  9798 ;; Hardware stack levels used:    1
  9799 ;; Hardware stack levels required when called:    5
  9800 ;; This function calls:
  9801 ;;		Nothing
  9802 ;; This function is called by:
  9803 ;;		_Mcu_Initialization
  9804 ;; This function uses a non-reentrant model
  9805 ;;
  9806                           
  9807                           
  9808                           ;psect for function _Fosc_Set
  9809  1DF2                     _Fosc_Set:	
  9810                           
  9811                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9812                           
  9813                           ;incstack = 0
  9814                           ; Regs used in _Fosc_Set: [wreg]
  9815  1DF2  3078               	movlw	120
  9816  1DF3  0021               	movlb	1	; select bank1
  9817  1DF4  0099               	movwf	25	;volatile
  9818  1DF5  0008               	return
  9819  1DF6                     __end_of_Fosc_Set:	
  9820                           
  9821                           	psect	text51
  9822  1E07                     __ptext51:	
  9823 ;; *************** function _ADC_Set *****************
  9824 ;; Defined at:
  9825 ;;		line 419 in file "../src/MCU_B1.c"
  9826 ;; Parameters:    Size  Location     Type
  9827 ;;		None
  9828 ;; Auto vars:     Size  Location     Type
  9829 ;;		None
  9830 ;; Return value:  Size  Location     Type
  9831 ;;		None               void
  9832 ;; Registers used:
  9833 ;;		wreg
  9834 ;; Tracked objects:
  9835 ;;		On entry : 0/0
  9836 ;;		On exit  : 0/0
  9837 ;;		Unchanged: 0/0
  9838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;Total ram usage:        0 bytes
  9844 ;; Hardware stack levels used:    1
  9845 ;; Hardware stack levels required when called:    5
  9846 ;; This function calls:
  9847 ;;		Nothing
  9848 ;; This function is called by:
  9849 ;;		_Mcu_Initialization
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           
  9854                           ;psect for function _ADC_Set
  9855  1E07                     _ADC_Set:	
  9856                           
  9857                           ;MCU_B1.c: 420: ADCON1 = 0xf3;
  9858                           
  9859                           ;incstack = 0
  9860                           ; Regs used in _ADC_Set: [wreg]
  9861  1E07  30F3               	movlw	243
  9862  1E08  0021               	movlb	1	; select bank1
  9863  1E09  009E               	movwf	30	;volatile
  9864                           
  9865                           ;MCU_B1.c: 421: FVRCON = 0xc0;
  9866  1E0A  30C0               	movlw	192
  9867  1E0B  0022               	movlb	2	; select bank2
  9868  1E0C  0097               	movwf	23	;volatile
  9869  1E0D  0008               	return
  9870  1E0E                     __end_of_ADC_Set:	
  9871                           
  9872                           	psect	text52
  9873  1E85                     __ptext52:	
  9874 ;; *************** function _LED_Main *****************
  9875 ;; Defined at:
  9876 ;;		line 47 in file "../src/LED_B1.c"
  9877 ;; Parameters:    Size  Location     Type
  9878 ;;		None
  9879 ;; Auto vars:     Size  Location     Type
  9880 ;;		None
  9881 ;; Return value:  Size  Location     Type
  9882 ;;		None               void
  9883 ;; Registers used:
  9884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9885 ;; Tracked objects:
  9886 ;;		On entry : 0/0
  9887 ;;		On exit  : 0/0
  9888 ;;		Unchanged: 0/0
  9889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;Total ram usage:        0 bytes
  9895 ;; Hardware stack levels used:    1
  9896 ;; Hardware stack levels required when called:    7
  9897 ;; This function calls:
  9898 ;;		_setLED_Main
  9899 ;; This function is called by:
  9900 ;;		_main
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           
  9905                           ;psect for function _LED_Main
  9906  1E85                     _LED_Main:	
  9907                           
  9908                           ;LED_B1.c: 49: setLED_Main(1);
  9909                           
  9910                           ;incstack = 0
  9911                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9912  1E85  3001               	movlw	1
  9913  1E86  3195  25C1  319E   	fcall	_setLED_Main
  9914                           
  9915                           ;LED_B1.c: 52: setLED_Main(2);
  9916  1E89  3002               	movlw	2
  9917  1E8A  3195  25C1  319E   	fcall	_setLED_Main
  9918                           
  9919                           ;LED_B1.c: 58: setLED_Main(99);
  9920  1E8D  3063               	movlw	99
  9921  1E8E  3195  25C1         	fcall	_setLED_Main
  9922  1E90  0008               	return
  9923  1E91                     __end_of_LED_Main:	
  9924                           
  9925                           	psect	text53
  9926  15C1                     __ptext53:	
  9927 ;; *************** function _setLED_Main *****************
  9928 ;; Defined at:
  9929 ;;		line 215 in file "../src/LED_B1.c"
  9930 ;; Parameters:    Size  Location     Type
  9931 ;;  led             1    wreg     unsigned char 
  9932 ;; Auto vars:     Size  Location     Type
  9933 ;;  led             1    4[BANK0 ] unsigned char 
  9934 ;; Return value:  Size  Location     Type
  9935 ;;		None               void
  9936 ;; Registers used:
  9937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9938 ;; Tracked objects:
  9939 ;;		On entry : 0/0
  9940 ;;		On exit  : 0/0
  9941 ;;		Unchanged: 0/0
  9942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9945 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;Total ram usage:        3 bytes
  9948 ;; Hardware stack levels used:    1
  9949 ;; Hardware stack levels required when called:    6
  9950 ;; This function calls:
  9951 ;;		_LedPointSelect
  9952 ;; This function is called by:
  9953 ;;		_LED_Main
  9954 ;; This function uses a non-reentrant model
  9955 ;;
  9956                           
  9957                           
  9958                           ;psect for function _setLED_Main
  9959  15C1                     _setLED_Main:	
  9960                           
  9961                           ;incstack = 0
  9962                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9963                           ;setLED_Main@led stored from wreg
  9964  15C1  0020               	movlb	0	; select bank0
  9965  15C2  00A4               	movwf	setLED_Main@led
  9966                           
  9967                           ;LED_B1.c: 216: LedPointSelect(led);
  9968  15C3  0824               	movf	setLED_Main@led,w
  9969  15C4  3191  215D  3195   	fcall	_LedPointSelect
  9970                           
  9971                           ;LED_B1.c: 217: if (LED->GO == 1) {
  9972  15C7  0873               	movf	_LED,w
  9973  15C8  0086               	movwf	6
  9974  15C9  3001               	movlw	1	; select bank2/3
  9975  15CA  0087               	movwf	7
  9976  15CB  1C81               	btfss	1,1
  9977  15CC  0008               	return
  9978                           
  9979                           ;LED_B1.c: 218: LED->Time++;
  9980  15CD  0A73               	incf	_LED,w
  9981  15CE  0086               	movwf	6
  9982  15CF  3001               	movlw	1	; select bank2/3
  9983  15D0  0087               	movwf	7
  9984  15D1  3001               	movlw	1
  9985  15D2  0781               	addwf	1,f
  9986  15D3  3141               	addfsr 1,1
  9987  15D4  1803               	skipnc
  9988  15D5  0A81               	incf	1,f
  9989                           
  9990                           ;LED_B1.c: 219: if (LED->Time >= 500 / 10) {
  9991  15D6  0A73               	incf	_LED,w
  9992  15D7  0086               	movwf	6
  9993  15D8  3001               	movlw	1	; select bank2/3
  9994  15D9  0087               	movwf	7
  9995  15DA  3F40               	moviw [0]fsr1
  9996  15DB  0020               	movlb	0	; select bank0
  9997  15DC  00A2               	movwf	??_setLED_Main
  9998  15DD  3F41               	moviw [1]fsr1
  9999  15DE  00A3               	movwf	??_setLED_Main+1
 10000  15DF  3000               	movlw	0
 10001  15E0  0223               	subwf	??_setLED_Main+1,w
 10002  15E1  3032               	movlw	50
 10003  15E2  1903               	skipnz
 10004  15E3  0222               	subwf	??_setLED_Main,w
 10005  15E4  1C03               	skipc
 10006  15E5  0008               	return
 10007                           
 10008                           ;LED_B1.c: 220: LED->Time = 0;
 10009  15E6  0A73               	incf	_LED,w
 10010  15E7  0086               	movwf	6
 10011  15E8  3001               	movlw	1	; select bank2/3
 10012  15E9  0087               	movwf	7
 10013  15EA  3000               	movlw	0
 10014  15EB  3FC0               	movwi [0]fsr1
 10015  15EC  3FC1               	movwi [1]fsr1
 10016                           
 10017                           ;LED_B1.c: 222: if (led == 1) {
 10018  15ED  0824               	movf	setLED_Main@led,w
 10019  15EE  3A01               	xorlw	1
 10020  15EF  1D03               	skipz
 10021  15F0  2DF4               	goto	l8938
 10022                           
 10023                           ;LED_B1.c: 223: RA3 = RA3 == 1 ? 0 : 1;
 10024  15F1  3008               	movlw	8
 10025  15F2  068C               	xorwf	12,f
 10026                           
 10027                           ;LED_B1.c: 224: }
 10028  15F3  0008               	return
 10029  15F4                     l8938:	
 10030                           
 10031                           ;LED_B1.c: 227: else if (led == 2) {
 10032  15F4  0824               	movf	setLED_Main@led,w
 10033  15F5  3A02               	xorlw	2
 10034  15F6  1D03               	skipz
 10035  15F7  2DFB               	goto	l8942
 10036                           
 10037                           ;LED_B1.c: 228: RC7 = RC7 == 1 ? 0 : 1;
 10038  15F8  3080               	movlw	128
 10039  15F9  068E               	xorwf	14,f
 10040                           
 10041                           ;LED_B1.c: 229: }
 10042  15FA  0008               	return
 10043  15FB                     l8942:	
 10044                           
 10045                           ;LED_B1.c: 237: else if (led == 99) {
 10046  15FB  0824               	movf	setLED_Main@led,w
 10047  15FC  3A63               	xorlw	99
 10048  15FD  1D03               	skipz
 10049  15FE  0008               	return
 10050                           
 10051                           ;LED_B1.c: 238: RB5 = RB5 == 1 ? 0 : 1;
 10052  15FF  3020               	movlw	32
 10053  1600  068D               	xorwf	13,f
 10054  1601  0008               	return
 10055  1602                     __end_of_setLED_Main:	
 10056                           
 10057                           	psect	text54
 10058  1E79                     __ptext54:	
 10059 ;; *************** function _LED_Initialization *****************
 10060 ;; Defined at:
 10061 ;;		line 31 in file "../src/LED_B1.c"
 10062 ;; Parameters:    Size  Location     Type
 10063 ;;		None
 10064 ;; Auto vars:     Size  Location     Type
 10065 ;;		None
 10066 ;; Return value:  Size  Location     Type
 10067 ;;		None               void
 10068 ;; Registers used:
 10069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10070 ;; Tracked objects:
 10071 ;;		On entry : 0/0
 10072 ;;		On exit  : 0/0
 10073 ;;		Unchanged: 0/0
 10074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;Total ram usage:        0 bytes
 10080 ;; Hardware stack levels used:    1
 10081 ;; Hardware stack levels required when called:    8
 10082 ;; This function calls:
 10083 ;;		_setLED_Initialization
 10084 ;; This function is called by:
 10085 ;;		_main
 10086 ;; This function uses a non-reentrant model
 10087 ;;
 10088                           
 10089                           
 10090                           ;psect for function _LED_Initialization
 10091  1E79                     _LED_Initialization:	
 10092                           
 10093                           ;LED_B1.c: 33: setLED_Initialization(1);
 10094                           
 10095                           ;incstack = 0
 10096                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10097  1E79  3001               	movlw	1
 10098  1E7A  319E  26E8  319E   	fcall	_setLED_Initialization
 10099                           
 10100                           ;LED_B1.c: 36: setLED_Initialization(2);
 10101  1E7D  3002               	movlw	2
 10102  1E7E  319E  26E8  319E   	fcall	_setLED_Initialization
 10103                           
 10104                           ;LED_B1.c: 42: setLED_Initialization(99);
 10105  1E81  3063               	movlw	99
 10106  1E82  319E  26E8         	fcall	_setLED_Initialization
 10107  1E84  0008               	return
 10108  1E85                     __end_of_LED_Initialization:	
 10109                           
 10110                           	psect	text55
 10111  1EE8                     __ptext55:	
 10112 ;; *************** function _setLED_Initialization *****************
 10113 ;; Defined at:
 10114 ;;		line 66 in file "../src/LED_B1.c"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;  led             1    wreg     unsigned char 
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;  led             1    4[BANK0 ] unsigned char 
 10119 ;; Return value:  Size  Location     Type
 10120 ;;		None               void
 10121 ;; Registers used:
 10122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10123 ;; Tracked objects:
 10124 ;;		On entry : 0/0
 10125 ;;		On exit  : 0/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;Total ram usage:        1 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; Hardware stack levels required when called:    7
 10135 ;; This function calls:
 10136 ;;		_LedPointSelect
 10137 ;;		_setLED
 10138 ;; This function is called by:
 10139 ;;		_LED_Initialization
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           
 10144                           ;psect for function _setLED_Initialization
 10145  1EE8                     _setLED_Initialization:	
 10146                           
 10147                           ;incstack = 0
 10148                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10149                           ;setLED_Initialization@led stored from wreg
 10150  1EE8  0020               	movlb	0	; select bank0
 10151  1EE9  00A4               	movwf	setLED_Initialization@led
 10152                           
 10153                           ;LED_B1.c: 67: LedPointSelect(led);
 10154  1EEA  0824               	movf	setLED_Initialization@led,w
 10155  1EEB  3191  215D  319E   	fcall	_LedPointSelect
 10156                           
 10157                           ;LED_B1.c: 68: LED->Enable = 1;
 10158  1EEE  0873               	movf	_LED,w
 10159  1EEF  0086               	movwf	6
 10160  1EF0  3001               	movlw	1	; select bank2/3
 10161  1EF1  0087               	movwf	7
 10162  1EF2  1401               	bsf	1,0
 10163                           
 10164                           ;LED_B1.c: 69: setLED(led, 0);
 10165  1EF3  0020               	movlb	0	; select bank0
 10166  1EF4  01A2               	clrf	setLED@command
 10167  1EF5  0824               	movf	setLED_Initialization@led,w
 10168  1EF6  3189  21B7         	fcall	_setLED
 10169  1EF8  0008               	return
 10170  1EF9                     __end_of_setLED_Initialization:	
 10171                           
 10172                           	psect	text56
 10173  14A7                     __ptext56:	
 10174 ;; *************** function _Flash_Memory_Main *****************
 10175 ;; Defined at:
 10176 ;;		line 900 in file "../src/MCU_B1.c"
 10177 ;; Parameters:    Size  Location     Type
 10178 ;;		None
 10179 ;; Auto vars:     Size  Location     Type
 10180 ;;		None
 10181 ;; Return value:  Size  Location     Type
 10182 ;;		None               void
 10183 ;; Registers used:
 10184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10185 ;; Tracked objects:
 10186 ;;		On entry : 0/0
 10187 ;;		On exit  : 0/0
 10188 ;;		Unchanged: 0/0
 10189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10193 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10194 ;;Total ram usage:        1 bytes
 10195 ;; Hardware stack levels used:    1
 10196 ;; Hardware stack levels required when called:    8
 10197 ;; This function calls:
 10198 ;;		_Flash_Memory_Modify
 10199 ;;		_getMain_LightsStatus
 10200 ;; This function is called by:
 10201 ;;		_main
 10202 ;; This function uses a non-reentrant model
 10203 ;;
 10204                           
 10205                           
 10206                           ;psect for function _Flash_Memory_Main
 10207  14A7                     _Flash_Memory_Main:	
 10208                           
 10209                           ;MCU_B1.c: 901: if (Memory.Modify == 1) {
 10210                           
 10211                           ;incstack = 0
 10212                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10213  14A7  0023               	movlb	3	; select bank3
 10214  14A8  1C44               	btfss	(_Memory^(0+384)+36),0
 10215  14A9  0008               	return
 10216                           
 10217                           ;MCU_B1.c: 902: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 10218  14AA  3192  2257  3194   	fcall	_getMain_LightsStatus
 10219  14AD  3A00               	xorlw	0
 10220  14AE  3000               	movlw	0
 10221  14AF  1903               	skipnz
 10222  14B0  3001               	movlw	1
 10223  14B1  0020               	movlb	0	; select bank0
 10224  14B2  00A6               	movwf	??_Flash_Memory_Main
 10225  14B3  0DA6               	rlf	??_Flash_Memory_Main,f
 10226  14B4  0023               	movlb	3	; select bank3
 10227  14B5  0844               	movf	(_Memory^(0+384)+36),w
 10228  14B6  0020               	movlb	0	; select bank0
 10229  14B7  0626               	xorwf	??_Flash_Memory_Main,w
 10230  14B8  39FD               	andlw	-3
 10231  14B9  0626               	xorwf	??_Flash_Memory_Main,w
 10232  14BA  0023               	movlb	3	; select bank3
 10233  14BB  00C4               	movwf	(_Memory^(0+384)+36)
 10234                           
 10235                           ;MCU_B1.c: 903: if (Memory.GO == 1) {
 10236  14BC  1CC4               	btfss	(_Memory^(0+384)+36),1
 10237  14BD  2CD7               	goto	l1293
 10238                           
 10239                           ;MCU_B1.c: 904: Memory.Runtime = 1;
 10240  14BE  15C4               	bsf	(_Memory^(0+384)+36),3
 10241                           
 10242                           ;MCU_B1.c: 905: Memory.Time++;
 10243  14BF  3001               	movlw	1
 10244  14C0  07C2               	addwf	(_Memory^(0+384)+34),f
 10245  14C1  3000               	movlw	0
 10246  14C2  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 10247                           
 10248                           ;MCU_B1.c: 906: if (Memory.Time == 25) {
 10249  14C3  3022               	movlw	34
 10250  14C4  3EA0               	addlw	_Memory& (0+255)
 10251  14C5  0086               	movwf	6
 10252  14C6  3001               	movlw	1	; select bank3/4
 10253  14C7  0087               	movwf	7
 10254  14C8  3F40               	moviw [0]fsr1
 10255  14C9  3A19               	xorlw	25
 10256  14CA  1D03               	skipz
 10257  14CB  2CCE               	goto	u10585
 10258  14CC  3F41               	moviw [1]fsr1
 10259  14CD  3A00               	xorlw	0
 10260  14CE                     u10585:	
 10261  14CE  1D03               	skipz
 10262  14CF  0008               	return
 10263                           
 10264                           ;MCU_B1.c: 907: Memory.Time = 0;
 10265  14D0  01C2               	clrf	(_Memory^(0+384)+34)
 10266  14D1  01C3               	clrf	((_Memory+1)^(0+384)+34)
 10267                           
 10268                           ;MCU_B1.c: 908: Memory.Modify = 0;
 10269  14D2  1044               	bcf	(_Memory^(0+384)+36),0
 10270                           
 10271                           ;MCU_B1.c: 909: Memory.GO = 0;
 10272  14D3  10C4               	bcf	(_Memory^(0+384)+36),1
 10273                           
 10274                           ;MCU_B1.c: 910: Flash_Memory_Modify();
 10275  14D4  3197  2764         	fcall	_Flash_Memory_Modify
 10276                           
 10277                           ;MCU_B1.c: 911: }
 10278                           ;MCU_B1.c: 912: } else {
 10279  14D6  0008               	return
 10280  14D7                     l1293:	
 10281                           
 10282                           ;MCU_B1.c: 913: if (Memory.Runtime == 1) {
 10283  14D7  1DC4               	btfss	(_Memory^(0+384)+36),3
 10284  14D8  0008               	return
 10285                           
 10286                           ;MCU_B1.c: 914: Memory.Runtime = 0;
 10287  14D9  11C4               	bcf	(_Memory^(0+384)+36),3
 10288                           
 10289                           ;MCU_B1.c: 915: Memory.Time = 0;
 10290  14DA  01C2               	clrf	(_Memory^(0+384)+34)
 10291  14DB  01C3               	clrf	((_Memory+1)^(0+384)+34)
 10292  14DC  0008               	return
 10293  14DD                     __end_of_Flash_Memory_Main:	
 10294                           
 10295                           	psect	text57
 10296  1257                     __ptext57:	
 10297 ;; *************** function _getMain_LightsStatus *****************
 10298 ;; Defined at:
 10299 ;;		line 372 in file "../src/Main_B1.c"
 10300 ;; Parameters:    Size  Location     Type
 10301 ;;		None
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;  status          1    5[BANK0 ] unsigned char 
 10304 ;; Return value:  Size  Location     Type
 10305 ;;                  1    wreg      unsigned char 
 10306 ;; Registers used:
 10307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10308 ;; Tracked objects:
 10309 ;;		On entry : 0/0
 10310 ;;		On exit  : 0/0
 10311 ;;		Unchanged: 0/0
 10312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;Total ram usage:        2 bytes
 10318 ;; Hardware stack levels used:    1
 10319 ;; Hardware stack levels required when called:    7
 10320 ;; This function calls:
 10321 ;;		_getDimmerLights_Status
 10322 ;; This function is called by:
 10323 ;;		_Flash_Memory_Main
 10324 ;;		_setMain_Exception
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           
 10329                           ;psect for function _getMain_LightsStatus
 10330  1257                     _getMain_LightsStatus:	
 10331                           
 10332                           ;Main_B1.c: 373: char status = 0;
 10333                           
 10334                           ;incstack = 0
 10335                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10336  1257  0020               	movlb	0	; select bank0
 10337  1258  01A5               	clrf	getMain_LightsStatus@status
 10338                           
 10339                           ;Main_B1.c: 376: if (status == 0) {
 10340  1259  08A5               	movf	getMain_LightsStatus@status,f
 10341  125A  1D03               	skipz
 10342  125B  2A68               	goto	l8684
 10343                           
 10344                           ;Main_B1.c: 381: status = getDimmerLights_Status(1) == 1 ? 1 : 0;
 10345  125C  3001               	movlw	1
 10346  125D  319E  26C8  3192   	fcall	_getDimmerLights_Status
 10347  1260  3A01               	xorlw	1
 10348  1261  3000               	movlw	0
 10349  1262  1903               	skipnz
 10350  1263  3001               	movlw	1
 10351  1264  0020               	movlb	0	; select bank0
 10352  1265  00A4               	movwf	??_getMain_LightsStatus
 10353  1266  0824               	movf	??_getMain_LightsStatus,w
 10354  1267  00A5               	movwf	getMain_LightsStatus@status
 10355  1268                     l8684:	
 10356                           
 10357                           ;Main_B1.c: 383: }
 10358                           ;Main_B1.c: 386: if (status == 0) {
 10359  1268  08A5               	movf	getMain_LightsStatus@status,f
 10360  1269  1D03               	skipz
 10361  126A  2A76               	goto	l8688
 10362                           
 10363                           ;Main_B1.c: 391: status = getDimmerLights_Status(2) == 1 ? 1 : 0;
 10364  126B  3002               	movlw	2
 10365  126C  319E  26C8         	fcall	_getDimmerLights_Status
 10366  126E  3A01               	xorlw	1
 10367  126F  3000               	movlw	0
 10368  1270  1903               	skipnz
 10369  1271  3001               	movlw	1
 10370  1272  0020               	movlb	0	; select bank0
 10371  1273  00A4               	movwf	??_getMain_LightsStatus
 10372  1274  0824               	movf	??_getMain_LightsStatus,w
 10373  1275  00A5               	movwf	getMain_LightsStatus@status
 10374  1276                     l8688:	
 10375                           
 10376                           ;Main_B1.c: 393: }
 10377                           ;Main_B1.c: 408: return status;
 10378  1276  0825               	movf	getMain_LightsStatus@status,w
 10379  1277  0008               	return
 10380  1278                     __end_of_getMain_LightsStatus:	
 10381                           
 10382                           	psect	text58
 10383  1764                     __ptext58:	
 10384 ;; *************** function _Flash_Memory_Modify *****************
 10385 ;; Defined at:
 10386 ;;		line 973 in file "../src/MCU_B1.c"
 10387 ;; Parameters:    Size  Location     Type
 10388 ;;		None
 10389 ;; Auto vars:     Size  Location     Type
 10390 ;;  i               1    5[BANK0 ] unsigned char 
 10391 ;; Return value:  Size  Location     Type
 10392 ;;		None               void
 10393 ;; Registers used:
 10394 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10395 ;; Tracked objects:
 10396 ;;		On entry : 0/0
 10397 ;;		On exit  : 0/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;Total ram usage:        2 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    7
 10407 ;; This function calls:
 10408 ;;		_Flash_Memory_Erasing
 10409 ;;		_Flash_Memory_Read
 10410 ;;		_Flash_Memory_Write
 10411 ;;		_setMemory_Data
 10412 ;; This function is called by:
 10413 ;;		_Flash_Memory_Main
 10414 ;; This function uses a non-reentrant model
 10415 ;;
 10416                           
 10417                           
 10418                           ;psect for function _Flash_Memory_Modify
 10419  1764                     _Flash_Memory_Modify:	
 10420                           
 10421                           ;MCU_B1.c: 974: char i = 0;
 10422                           
 10423                           ;incstack = 0
 10424                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10425  1764  0020               	movlb	0	; select bank0
 10426  1765  01A5               	clrf	Flash_Memory_Modify@i
 10427                           
 10428                           ;MCU_B1.c: 975: for (i = 0; i < 32; i++) {
 10429  1766  01A5               	clrf	Flash_Memory_Modify@i
 10430  1767  3020               	movlw	32
 10431  1768  0225               	subwf	Flash_Memory_Modify@i,w
 10432  1769  1803               	btfsc	3,0
 10433  176A  2F80               	goto	l9024
 10434  176B                     l9018:	
 10435                           
 10436                           ;MCU_B1.c: 976: Memory.Data[i] = Flash_Memory_Read(i);
 10437  176B  0825               	movf	Flash_Memory_Modify@i,w
 10438  176C  3191  2127  3197   	fcall	_Flash_Memory_Read
 10439  176F  0020               	movlb	0	; select bank0
 10440  1770  00A4               	movwf	??_Flash_Memory_Modify
 10441  1771  0825               	movf	Flash_Memory_Modify@i,w
 10442  1772  3EA0               	addlw	_Memory& (0+255)
 10443  1773  0086               	movwf	6
 10444  1774  3001               	movlw	1	; select bank3/4
 10445  1775  0087               	movwf	7
 10446  1776  0824               	movf	??_Flash_Memory_Modify,w
 10447  1777  0081               	movwf	1
 10448  1778  3001               	movlw	1
 10449  1779  00A4               	movwf	??_Flash_Memory_Modify
 10450  177A  0824               	movf	??_Flash_Memory_Modify,w
 10451  177B  07A5               	addwf	Flash_Memory_Modify@i,f
 10452  177C  3020               	movlw	32
 10453  177D  0225               	subwf	Flash_Memory_Modify@i,w
 10454  177E  1C03               	skipc
 10455  177F  2F6B               	goto	l9018
 10456  1780                     l9024:	
 10457                           
 10458                           ;MCU_B1.c: 977: }
 10459                           ;MCU_B1.c: 978: setMemory_Data(0, product->Data[12]);
 10460  1780  086F               	movf	_product,w
 10461  1781  0086               	movwf	6
 10462  1782  3002               	movlw	2	; select bank4/5
 10463  1783  0087               	movwf	7
 10464  1784  3002               	movlw	2	; select bank4/5
 10465  1785  3F4C               	moviw [12]fsr1
 10466  1786  00A0               	movwf	setMemory_Data@data
 10467  1787  3000               	movlw	0
 10468  1788  319E  2661  3197   	fcall	_setMemory_Data
 10469                           
 10470                           ;MCU_B1.c: 979: setMemory_Data(1, product->Data[13]);
 10471  178B  0020               	movlb	0	; select bank0
 10472  178C  086F               	movf	_product,w
 10473  178D  0086               	movwf	6
 10474  178E  3002               	movlw	2	; select bank4/5
 10475  178F  0087               	movwf	7
 10476  1790  3002               	movlw	2	; select bank4/5
 10477  1791  3F4D               	moviw [13]fsr1
 10478  1792  00A0               	movwf	setMemory_Data@data
 10479  1793  3001               	movlw	1
 10480  1794  319E  2661  3197   	fcall	_setMemory_Data
 10481                           
 10482                           ;MCU_B1.c: 980: setMemory_Data(2, product->Data[14]);
 10483  1797  0020               	movlb	0	; select bank0
 10484  1798  086F               	movf	_product,w
 10485  1799  0086               	movwf	6
 10486  179A  3002               	movlw	2	; select bank4/5
 10487  179B  0087               	movwf	7
 10488  179C  3002               	movlw	2	; select bank4/5
 10489  179D  3F4E               	moviw [14]fsr1
 10490  179E  00A0               	movwf	setMemory_Data@data
 10491  179F  3002               	movlw	2
 10492  17A0  319E  2661  3197   	fcall	_setMemory_Data
 10493                           
 10494                           ;MCU_B1.c: 986: if (Memory.LoopSave == 1) {
 10495  17A3  0023               	movlb	3	; select bank3
 10496  17A4  1D44               	btfss	(_Memory^(0+384)+36),2
 10497  17A5  2FAA               	goto	l1316
 10498                           
 10499                           ;MCU_B1.c: 987: Memory.LoopSave = 0;
 10500  17A6  1144               	bcf	(_Memory^(0+384)+36),2
 10501                           
 10502                           ;MCU_B1.c: 988: myMain.FirstOpen = 0;
 10503  17A7  0021               	movlb	1	; select bank1
 10504  17A8  11A0               	bcf	_myMain^(0+128),3
 10505                           
 10506                           ;MCU_B1.c: 989: myMain.First = 0;
 10507  17A9  12A0               	bcf	_myMain^(0+128),5
 10508  17AA                     l1316:	
 10509                           
 10510                           ;MCU_B1.c: 991: }
 10511                           ;MCU_B1.c: 992: GIE = 0;
 10512  17AA  138B               	bcf	11,7	;volatile
 10513                           
 10514                           ;MCU_B1.c: 993: Flash_Memory_Erasing();
 10515  17AB  319E  266D  3197   	fcall	_Flash_Memory_Erasing
 10516                           
 10517                           ;MCU_B1.c: 994: Flash_Memory_Write();
 10518  17AE  3194  2443         	fcall	_Flash_Memory_Write
 10519                           
 10520                           ;MCU_B1.c: 995: GIE = 1;
 10521  17B0  178B               	bsf	11,7	;volatile
 10522  17B1  0008               	return
 10523  17B2                     __end_of_Flash_Memory_Modify:	
 10524                           
 10525                           	psect	text59
 10526  1E6D                     __ptext59:	
 10527 ;; *************** function _Flash_Memory_Erasing *****************
 10528 ;; Defined at:
 10529 ;;		line 962 in file "../src/MCU_B1.c"
 10530 ;; Parameters:    Size  Location     Type
 10531 ;;		None
 10532 ;; Auto vars:     Size  Location     Type
 10533 ;;		None
 10534 ;; Return value:  Size  Location     Type
 10535 ;;		None               void
 10536 ;; Registers used:
 10537 ;;		wreg, status,2, status,0, pclath, cstack
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;Total ram usage:        0 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; Hardware stack levels required when called:    6
 10550 ;; This function calls:
 10551 ;;		_Flash_Memory_Unlock
 10552 ;; This function is called by:
 10553 ;;		_Flash_Memory_Modify
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557                           
 10558                           ;psect for function _Flash_Memory_Erasing
 10559  1E6D                     _Flash_Memory_Erasing:	
 10560                           
 10561                           ;MCU_B1.c: 963: CFGS = 0;
 10562                           
 10563                           ;incstack = 0
 10564                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10565  1E6D  0023               	movlb	3	; select bank3
 10566  1E6E  1315               	bcf	21,6	;volatile
 10567                           
 10568                           ;MCU_B1.c: 964: PMADRH = 0x30;
 10569  1E6F  3030               	movlw	48
 10570  1E70  0092               	movwf	18	;volatile
 10571                           
 10572                           ;MCU_B1.c: 965: PMADRL = 0x00;
 10573  1E71  0191               	clrf	17	;volatile
 10574                           
 10575                           ;MCU_B1.c: 966: FREE = 1;
 10576  1E72  1615               	bsf	21,4	;volatile
 10577                           
 10578                           ;MCU_B1.c: 967: WREN = 1;
 10579  1E73  1515               	bsf	21,2	;volatile
 10580                           
 10581                           ;MCU_B1.c: 968: Flash_Memory_Unlock();
 10582  1E74  319E  2636         	fcall	_Flash_Memory_Unlock
 10583                           
 10584                           ;MCU_B1.c: 969: WREN = 0;
 10585  1E76  0023               	movlb	3	; select bank3
 10586  1E77  1115               	bcf	21,2	;volatile
 10587  1E78  0008               	return
 10588  1E79                     __end_of_Flash_Memory_Erasing:	
 10589                           
 10590                           	psect	text60
 10591  0546                     __ptext60:	
 10592 ;; *************** function _Flash_Memory_Initialization *****************
 10593 ;; Defined at:
 10594 ;;		line 859 in file "../src/MCU_B1.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;		None
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;  i               1   62[BANK0 ] unsigned char 
 10599 ;; Return value:  Size  Location     Type
 10600 ;;		None               void
 10601 ;; Registers used:
 10602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10603 ;; Tracked objects:
 10604 ;;		On entry : 0/0
 10605 ;;		On exit  : 0/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;Total ram usage:        2 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; Hardware stack levels required when called:    8
 10615 ;; This function calls:
 10616 ;;		_Flash_Memory_Read
 10617 ;;		_Flash_Memory_Write
 10618 ;;		_setMemory_Data
 10619 ;;		_setPercentValue
 10620 ;; This function is called by:
 10621 ;;		_main
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           
 10626                           ;psect for function _Flash_Memory_Initialization
 10627  0546                     _Flash_Memory_Initialization:	
 10628                           
 10629                           ;MCU_B1.c: 860: char i = 0;
 10630                           
 10631                           ;incstack = 0
 10632                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10633  0546  0020               	movlb	0	; select bank0
 10634  0547  01DE               	clrf	Flash_Memory_Initialization@i
 10635                           
 10636                           ;MCU_B1.c: 861: if (Flash_Memory_Read(31) == 0xaa) {
 10637  0548  301F               	movlw	31
 10638  0549  3191  2127  3185   	fcall	_Flash_Memory_Read
 10639  054C  3AAA               	xorlw	170
 10640  054D  1D03               	skipz
 10641  054E  2DB8               	goto	l9436
 10642                           
 10643                           ;MCU_B1.c: 862: product->Data[12] = Flash_Memory_Read(0);
 10644  054F  3000               	movlw	0
 10645  0550  3191  2127  3185   	fcall	_Flash_Memory_Read
 10646  0553  0020               	movlb	0	; select bank0
 10647  0554  00DD               	movwf	??_Flash_Memory_Initialization
 10648  0555  086F               	movf	_product,w
 10649  0556  3E0C               	addlw	12
 10650  0557  0086               	movwf	6
 10651  0558  3002               	movlw	2	; select bank4/5
 10652  0559  0087               	movwf	7
 10653  055A  085D               	movf	??_Flash_Memory_Initialization,w
 10654  055B  0081               	movwf	1
 10655                           
 10656                           ;MCU_B1.c: 863: product->Data[13] = Flash_Memory_Read(1);
 10657  055C  3001               	movlw	1
 10658  055D  3191  2127  3185   	fcall	_Flash_Memory_Read
 10659  0560  0020               	movlb	0	; select bank0
 10660  0561  00DD               	movwf	??_Flash_Memory_Initialization
 10661  0562  086F               	movf	_product,w
 10662  0563  3E0D               	addlw	13
 10663  0564  0086               	movwf	6
 10664  0565  3002               	movlw	2	; select bank4/5
 10665  0566  0087               	movwf	7
 10666  0567  085D               	movf	??_Flash_Memory_Initialization,w
 10667  0568  0081               	movwf	1
 10668                           
 10669                           ;MCU_B1.c: 864: product->Data[14] = Flash_Memory_Read(2);
 10670  0569  3002               	movlw	2
 10671  056A  3191  2127  3185   	fcall	_Flash_Memory_Read
 10672  056D  0020               	movlb	0	; select bank0
 10673  056E  00DD               	movwf	??_Flash_Memory_Initialization
 10674  056F  086F               	movf	_product,w
 10675  0570  3E0E               	addlw	14
 10676  0571  0086               	movwf	6
 10677  0572  3002               	movlw	2	; select bank4/5
 10678  0573  0087               	movwf	7
 10679  0574  085D               	movf	??_Flash_Memory_Initialization,w
 10680  0575  0081               	movwf	1
 10681                           
 10682                           ;MCU_B1.c: 870: i = setPercentValue(((char)((100-60)*0.8)));
 10683  0576  3020               	movlw	32
 10684  0577  3196  2688  3185   	fcall	_setPercentValue
 10685  057A  0020               	movlb	0	; select bank0
 10686  057B  00DD               	movwf	??_Flash_Memory_Initialization
 10687  057C  085D               	movf	??_Flash_Memory_Initialization,w
 10688  057D  00DE               	movwf	Flash_Memory_Initialization@i
 10689                           
 10690                           ;MCU_B1.c: 871: product->Data[21] = i;
 10691  057E  085E               	movf	Flash_Memory_Initialization@i,w
 10692  057F  00DD               	movwf	??_Flash_Memory_Initialization
 10693  0580  086F               	movf	_product,w
 10694  0581  3E15               	addlw	21
 10695  0582  0086               	movwf	6
 10696  0583  3002               	movlw	2	; select bank4/5
 10697  0584  0087               	movwf	7
 10698  0585  085D               	movf	??_Flash_Memory_Initialization,w
 10699  0586  0081               	movwf	1
 10700                           
 10701                           ;MCU_B1.c: 872: product->Data[22] = i;
 10702  0587  085E               	movf	Flash_Memory_Initialization@i,w
 10703  0588  00DD               	movwf	??_Flash_Memory_Initialization
 10704  0589  086F               	movf	_product,w
 10705  058A  3E16               	addlw	22
 10706  058B  0086               	movwf	6
 10707  058C  3002               	movlw	2	; select bank4/5
 10708  058D  0087               	movwf	7
 10709  058E  085D               	movf	??_Flash_Memory_Initialization,w
 10710  058F  0081               	movwf	1
 10711                           
 10712                           ;MCU_B1.c: 873: product->Data[23] = i;
 10713  0590  085E               	movf	Flash_Memory_Initialization@i,w
 10714  0591  00DD               	movwf	??_Flash_Memory_Initialization
 10715  0592  086F               	movf	_product,w
 10716  0593  3E17               	addlw	23
 10717  0594  0086               	movwf	6
 10718  0595  3002               	movlw	2	; select bank4/5
 10719  0596  0087               	movwf	7
 10720  0597  085D               	movf	??_Flash_Memory_Initialization,w
 10721  0598  0081               	movwf	1
 10722                           
 10723                           ;MCU_B1.c: 875: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10724  0599  086F               	movf	_product,w
 10725  059A  3E0C               	addlw	12
 10726  059B  0086               	movwf	6
 10727  059C  3002               	movlw	2	; select bank4/5
 10728  059D  0087               	movwf	7
 10729  059E  0801               	movf	1,w
 10730  059F  3AFF               	xorlw	255
 10731  05A0  1D03               	skipz
 10732  05A1  0008               	return
 10733  05A2  086F               	movf	_product,w
 10734  05A3  3E0D               	addlw	13
 10735  05A4  0086               	movwf	6
 10736  05A5  3002               	movlw	2	; select bank4/5
 10737  05A6  0087               	movwf	7
 10738  05A7  0801               	movf	1,w
 10739  05A8  3AFF               	xorlw	255
 10740  05A9  1D03               	skipz
 10741  05AA  0008               	return
 10742  05AB  086F               	movf	_product,w
 10743  05AC  3E0E               	addlw	14
 10744  05AD  0086               	movwf	6
 10745  05AE  3002               	movlw	2	; select bank4/5
 10746  05AF  0087               	movwf	7
 10747  05B0  0801               	movf	1,w
 10748  05B1  3AFF               	xorlw	255
 10749  05B2  1D03               	skipz
 10750  05B3  0008               	return
 10751                           
 10752                           ;MCU_B1.c: 876: myMain.FirstOpen = 1;
 10753  05B4  0021               	movlb	1	; select bank1
 10754  05B5  15A0               	bsf	_myMain^(0+128),3
 10755                           
 10756                           ;MCU_B1.c: 877: myMain.First = 1;
 10757  05B6  16A0               	bsf	_myMain^(0+128),5
 10758                           
 10759                           ;MCU_B1.c: 878: }
 10760                           ;MCU_B1.c: 879: } else {
 10761  05B7  0008               	return
 10762  05B8                     l9436:	
 10763                           
 10764                           ;MCU_B1.c: 880: i = setPercentValue(((char)((100-60)*0.8)));
 10765  05B8  3020               	movlw	32
 10766  05B9  3196  2688  3185   	fcall	_setPercentValue
 10767  05BC  0020               	movlb	0	; select bank0
 10768  05BD  00DD               	movwf	??_Flash_Memory_Initialization
 10769  05BE  085D               	movf	??_Flash_Memory_Initialization,w
 10770  05BF  00DE               	movwf	Flash_Memory_Initialization@i
 10771                           
 10772                           ;MCU_B1.c: 881: setMemory_Data(0, 0xff);
 10773  05C0  30FF               	movlw	255
 10774  05C1  00DD               	movwf	??_Flash_Memory_Initialization
 10775  05C2  085D               	movf	??_Flash_Memory_Initialization,w
 10776  05C3  00A0               	movwf	setMemory_Data@data
 10777  05C4  3000               	movlw	0
 10778  05C5  319E  2661  3185   	fcall	_setMemory_Data
 10779                           
 10780                           ;MCU_B1.c: 882: setMemory_Data(1, 0xff);
 10781  05C8  30FF               	movlw	255
 10782  05C9  0020               	movlb	0	; select bank0
 10783  05CA  00DD               	movwf	??_Flash_Memory_Initialization
 10784  05CB  085D               	movf	??_Flash_Memory_Initialization,w
 10785  05CC  00A0               	movwf	setMemory_Data@data
 10786  05CD  3001               	movlw	1
 10787  05CE  319E  2661  3185   	fcall	_setMemory_Data
 10788                           
 10789                           ;MCU_B1.c: 883: setMemory_Data(2, 0xff);
 10790  05D1  30FF               	movlw	255
 10791  05D2  0020               	movlb	0	; select bank0
 10792  05D3  00DD               	movwf	??_Flash_Memory_Initialization
 10793  05D4  085D               	movf	??_Flash_Memory_Initialization,w
 10794  05D5  00A0               	movwf	setMemory_Data@data
 10795  05D6  3002               	movlw	2
 10796  05D7  319E  2661  3185   	fcall	_setMemory_Data
 10797                           
 10798                           ;MCU_B1.c: 884: setMemory_Data(3, 0xff);
 10799  05DA  30FF               	movlw	255
 10800  05DB  0020               	movlb	0	; select bank0
 10801  05DC  00DD               	movwf	??_Flash_Memory_Initialization
 10802  05DD  085D               	movf	??_Flash_Memory_Initialization,w
 10803  05DE  00A0               	movwf	setMemory_Data@data
 10804  05DF  3003               	movlw	3
 10805  05E0  319E  2661  3185   	fcall	_setMemory_Data
 10806                           
 10807                           ;MCU_B1.c: 885: setMemory_Data(4, 0xff);
 10808  05E3  30FF               	movlw	255
 10809  05E4  0020               	movlb	0	; select bank0
 10810  05E5  00DD               	movwf	??_Flash_Memory_Initialization
 10811  05E6  085D               	movf	??_Flash_Memory_Initialization,w
 10812  05E7  00A0               	movwf	setMemory_Data@data
 10813  05E8  3004               	movlw	4
 10814  05E9  319E  2661  3185   	fcall	_setMemory_Data
 10815                           
 10816                           ;MCU_B1.c: 886: setMemory_Data(5, 0xff);
 10817  05EC  30FF               	movlw	255
 10818  05ED  0020               	movlb	0	; select bank0
 10819  05EE  00DD               	movwf	??_Flash_Memory_Initialization
 10820  05EF  085D               	movf	??_Flash_Memory_Initialization,w
 10821  05F0  00A0               	movwf	setMemory_Data@data
 10822  05F1  3005               	movlw	5
 10823  05F2  319E  2661  3185   	fcall	_setMemory_Data
 10824                           
 10825                           ;MCU_B1.c: 887: setMemory_Data(31, 0xaa);
 10826  05F5  30AA               	movlw	170
 10827  05F6  0020               	movlb	0	; select bank0
 10828  05F7  00DD               	movwf	??_Flash_Memory_Initialization
 10829  05F8  085D               	movf	??_Flash_Memory_Initialization,w
 10830  05F9  00A0               	movwf	setMemory_Data@data
 10831  05FA  301F               	movlw	31
 10832  05FB  319E  2661  3185   	fcall	_setMemory_Data
 10833                           
 10834                           ;MCU_B1.c: 888: product->Data[21] = i;
 10835  05FE  0020               	movlb	0	; select bank0
 10836  05FF  085E               	movf	Flash_Memory_Initialization@i,w
 10837  0600  00DD               	movwf	??_Flash_Memory_Initialization
 10838  0601  086F               	movf	_product,w
 10839  0602  3E15               	addlw	21
 10840  0603  0086               	movwf	6
 10841  0604  3002               	movlw	2	; select bank4/5
 10842  0605  0087               	movwf	7
 10843  0606  085D               	movf	??_Flash_Memory_Initialization,w
 10844  0607  0081               	movwf	1
 10845                           
 10846                           ;MCU_B1.c: 889: product->Data[22] = i;
 10847  0608  085E               	movf	Flash_Memory_Initialization@i,w
 10848  0609  00DD               	movwf	??_Flash_Memory_Initialization
 10849  060A  086F               	movf	_product,w
 10850  060B  3E16               	addlw	22
 10851  060C  0086               	movwf	6
 10852  060D  3002               	movlw	2	; select bank4/5
 10853  060E  0087               	movwf	7
 10854  060F  085D               	movf	??_Flash_Memory_Initialization,w
 10855  0610  0081               	movwf	1
 10856                           
 10857                           ;MCU_B1.c: 890: product->Data[23] = i;
 10858  0611  085E               	movf	Flash_Memory_Initialization@i,w
 10859  0612  00DD               	movwf	??_Flash_Memory_Initialization
 10860  0613  086F               	movf	_product,w
 10861  0614  3E17               	addlw	23
 10862  0615  0086               	movwf	6
 10863  0616  3002               	movlw	2	; select bank4/5
 10864  0617  0087               	movwf	7
 10865  0618  085D               	movf	??_Flash_Memory_Initialization,w
 10866  0619  0081               	movwf	1
 10867                           
 10868                           ;MCU_B1.c: 891: GIE = 0;
 10869  061A  138B               	bcf	11,7	;volatile
 10870                           
 10871                           ;MCU_B1.c: 892: Flash_Memory_Write();
 10872  061B  3194  2443         	fcall	_Flash_Memory_Write
 10873                           
 10874                           ;MCU_B1.c: 893: GIE = 1;
 10875  061D  178B               	bsf	11,7	;volatile
 10876                           
 10877                           ;MCU_B1.c: 894: myMain.FirstOpen = 1;
 10878  061E  0021               	movlb	1	; select bank1
 10879  061F  15A0               	bsf	_myMain^(0+128),3
 10880                           
 10881                           ;MCU_B1.c: 895: myMain.First = 1;
 10882  0620  16A0               	bsf	_myMain^(0+128),5
 10883  0621  0008               	return
 10884  0622                     __end_of_Flash_Memory_Initialization:	
 10885                           
 10886                           	psect	text61
 10887  1E61                     __ptext61:	
 10888 ;; *************** function _setMemory_Data *****************
 10889 ;; Defined at:
 10890 ;;		line 1010 in file "../src/MCU_B1.c"
 10891 ;; Parameters:    Size  Location     Type
 10892 ;;  address         1    wreg     unsigned char 
 10893 ;;  data            1    0[BANK0 ] unsigned char 
 10894 ;; Auto vars:     Size  Location     Type
 10895 ;;  address         1    2[BANK0 ] unsigned char 
 10896 ;; Return value:  Size  Location     Type
 10897 ;;		None               void
 10898 ;; Registers used:
 10899 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10900 ;; Tracked objects:
 10901 ;;		On entry : 0/0
 10902 ;;		On exit  : 0/0
 10903 ;;		Unchanged: 0/0
 10904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10905 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;Total ram usage:        3 bytes
 10910 ;; Hardware stack levels used:    1
 10911 ;; Hardware stack levels required when called:    5
 10912 ;; This function calls:
 10913 ;;		Nothing
 10914 ;; This function is called by:
 10915 ;;		_Flash_Memory_Initialization
 10916 ;;		_Flash_Memory_Modify
 10917 ;; This function uses a non-reentrant model
 10918 ;;
 10919                           
 10920                           
 10921                           ;psect for function _setMemory_Data
 10922  1E61                     _setMemory_Data:	
 10923                           
 10924                           ;incstack = 0
 10925                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 10926                           ;setMemory_Data@address stored from wreg
 10927  1E61  0020               	movlb	0	; select bank0
 10928  1E62  00A2               	movwf	setMemory_Data@address
 10929                           
 10930                           ;MCU_B1.c: 1011: Memory.Data[address] = data;
 10931  1E63  0820               	movf	setMemory_Data@data,w
 10932  1E64  00A1               	movwf	??_setMemory_Data
 10933  1E65  0822               	movf	setMemory_Data@address,w
 10934  1E66  3EA0               	addlw	_Memory& (0+255)
 10935  1E67  0086               	movwf	6
 10936  1E68  3001               	movlw	1	; select bank3/4
 10937  1E69  0087               	movwf	7
 10938  1E6A  0821               	movf	??_setMemory_Data,w
 10939  1E6B  0081               	movwf	1
 10940  1E6C  0008               	return
 10941  1E6D                     __end_of_setMemory_Data:	
 10942                           
 10943                           	psect	text62
 10944  1443                     __ptext62:	
 10945 ;; *************** function _Flash_Memory_Write *****************
 10946 ;; Defined at:
 10947 ;;		line 943 in file "../src/MCU_B1.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;		None
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;  i               1    1[BANK0 ] unsigned char 
 10952 ;; Return value:  Size  Location     Type
 10953 ;;		None               void
 10954 ;; Registers used:
 10955 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;Total ram usage:        2 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    6
 10968 ;; This function calls:
 10969 ;;		_Flash_Memory_Unlock
 10970 ;; This function is called by:
 10971 ;;		_Flash_Memory_Initialization
 10972 ;;		_Flash_Memory_Modify
 10973 ;; This function uses a non-reentrant model
 10974 ;;
 10975                           
 10976                           
 10977                           ;psect for function _Flash_Memory_Write
 10978  1443                     _Flash_Memory_Write:	
 10979                           
 10980                           ;MCU_B1.c: 944: char i = 0;
 10981                           
 10982                           ;incstack = 0
 10983                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10984  1443  0020               	movlb	0	; select bank0
 10985  1444  01A1               	clrf	Flash_Memory_Write@i
 10986                           
 10987                           ;MCU_B1.c: 945: CFGS = 0;
 10988  1445  0023               	movlb	3	; select bank3
 10989  1446  1315               	bcf	21,6	;volatile
 10990                           
 10991                           ;MCU_B1.c: 946: PMADRH = 0x30;
 10992  1447  3030               	movlw	48
 10993  1448  0092               	movwf	18	;volatile
 10994                           
 10995                           ;MCU_B1.c: 947: PMDATH = 0;
 10996  1449  0194               	clrf	20	;volatile
 10997                           
 10998                           ;MCU_B1.c: 948: FREE = 0;
 10999  144A  1215               	bcf	21,4	;volatile
 11000                           
 11001                           ;MCU_B1.c: 949: LWLO = 1;
 11002  144B  1695               	bsf	21,5	;volatile
 11003                           
 11004                           ;MCU_B1.c: 950: WREN = 1;
 11005  144C  1515               	bsf	21,2	;volatile
 11006                           
 11007                           ;MCU_B1.c: 951: for (i = 0; i < 32; i++) {
 11008  144D  0020               	movlb	0	; select bank0
 11009  144E  01A1               	clrf	Flash_Memory_Write@i
 11010  144F  3020               	movlw	32
 11011  1450  0221               	subwf	Flash_Memory_Write@i,w
 11012  1451  1803               	btfsc	3,0
 11013  1452  2C6B               	goto	l1307
 11014  1453                     l8664:	
 11015                           
 11016                           ;MCU_B1.c: 952: PMADRL = i;
 11017  1453  0821               	movf	Flash_Memory_Write@i,w
 11018  1454  0023               	movlb	3	; select bank3
 11019  1455  0091               	movwf	17	;volatile
 11020                           
 11021                           ;MCU_B1.c: 953: PMDATL = Memory.Data[i];
 11022  1456  0020               	movlb	0	; select bank0
 11023  1457  0821               	movf	Flash_Memory_Write@i,w
 11024  1458  3EA0               	addlw	_Memory& (0+255)
 11025  1459  0086               	movwf	6
 11026  145A  3001               	movlw	1	; select bank3/4
 11027  145B  0087               	movwf	7
 11028  145C  0801               	movf	1,w
 11029  145D  0023               	movlb	3	; select bank3
 11030  145E  0093               	movwf	19	;volatile
 11031                           
 11032                           ;MCU_B1.c: 954: Flash_Memory_Unlock();
 11033  145F  319E  2636  3194   	fcall	_Flash_Memory_Unlock
 11034  1462  3001               	movlw	1
 11035  1463  0020               	movlb	0	; select bank0
 11036  1464  00A0               	movwf	??_Flash_Memory_Write
 11037  1465  0820               	movf	??_Flash_Memory_Write,w
 11038  1466  07A1               	addwf	Flash_Memory_Write@i,f
 11039  1467  3020               	movlw	32
 11040  1468  0221               	subwf	Flash_Memory_Write@i,w
 11041  1469  1C03               	skipc
 11042  146A  2C53               	goto	l8664
 11043  146B                     l1307:	
 11044                           
 11045                           ;MCU_B1.c: 955: }
 11046                           ;MCU_B1.c: 956: LWLO = 0;
 11047  146B  0023               	movlb	3	; select bank3
 11048  146C  1295               	bcf	21,5	;volatile
 11049                           
 11050                           ;MCU_B1.c: 957: Flash_Memory_Unlock();
 11051  146D  319E  2636         	fcall	_Flash_Memory_Unlock
 11052                           
 11053                           ;MCU_B1.c: 958: WREN = 0;
 11054  146F  0023               	movlb	3	; select bank3
 11055  1470  1115               	bcf	21,2	;volatile
 11056  1471  0008               	return
 11057  1472                     __end_of_Flash_Memory_Write:	
 11058                           
 11059                           	psect	text63
 11060  1E36                     __ptext63:	
 11061 ;; *************** function _Flash_Memory_Unlock *****************
 11062 ;; Defined at:
 11063 ;;		line 922 in file "../src/MCU_B1.c"
 11064 ;; Parameters:    Size  Location     Type
 11065 ;;		None
 11066 ;; Auto vars:     Size  Location     Type
 11067 ;;		None
 11068 ;; Return value:  Size  Location     Type
 11069 ;;		None               void
 11070 ;; Registers used:
 11071 ;;		wreg
 11072 ;; Tracked objects:
 11073 ;;		On entry : 0/0
 11074 ;;		On exit  : 0/0
 11075 ;;		Unchanged: 0/0
 11076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11081 ;;Total ram usage:        0 bytes
 11082 ;; Hardware stack levels used:    1
 11083 ;; Hardware stack levels required when called:    5
 11084 ;; This function calls:
 11085 ;;		Nothing
 11086 ;; This function is called by:
 11087 ;;		_Flash_Memory_Write
 11088 ;;		_Flash_Memory_Erasing
 11089 ;; This function uses a non-reentrant model
 11090 ;;
 11091                           
 11092                           
 11093                           ;psect for function _Flash_Memory_Unlock
 11094  1E36                     _Flash_Memory_Unlock:	
 11095                           
 11096                           ;MCU_B1.c: 923: PMCON2 = 0x55;
 11097                           
 11098                           ;incstack = 0
 11099                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11100  1E36  3055               	movlw	85
 11101  1E37  0023               	movlb	3	; select bank3
 11102  1E38  0096               	movwf	22	;volatile
 11103                           
 11104                           ;MCU_B1.c: 924: PMCON2 = 0xaa;
 11105  1E39  30AA               	movlw	170
 11106  1E3A  0096               	movwf	22	;volatile
 11107                           
 11108                           ;MCU_B1.c: 925: WR = 1;
 11109  1E3B  1495               	bsf	21,1	;volatile
 11110                           
 11111                           ;MCU_B1.c: 926: __nop();
 11112  1E3C  0000               	nop
 11113                           
 11114                           ;MCU_B1.c: 927: __nop();
 11115  1E3D  0000               	nop
 11116  1E3E  0008               	return
 11117  1E3F                     __end_of_Flash_Memory_Unlock:	
 11118                           
 11119                           	psect	text64
 11120  1127                     __ptext64:	
 11121 ;; *************** function _Flash_Memory_Read *****************
 11122 ;; Defined at:
 11123 ;;		line 931 in file "../src/MCU_B1.c"
 11124 ;; Parameters:    Size  Location     Type
 11125 ;;  address         1    wreg     unsigned char 
 11126 ;; Auto vars:     Size  Location     Type
 11127 ;;  address         1    2[BANK0 ] unsigned char 
 11128 ;;  ret             1    3[BANK0 ] unsigned char 
 11129 ;;  i               1    1[BANK0 ] unsigned char 
 11130 ;; Return value:  Size  Location     Type
 11131 ;;                  1    wreg      unsigned char 
 11132 ;; Registers used:
 11133 ;;		wreg, status,2
 11134 ;; Tracked objects:
 11135 ;;		On entry : 0/0
 11136 ;;		On exit  : 0/0
 11137 ;;		Unchanged: 0/0
 11138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;Total ram usage:        4 bytes
 11144 ;; Hardware stack levels used:    1
 11145 ;; Hardware stack levels required when called:    5
 11146 ;; This function calls:
 11147 ;;		Nothing
 11148 ;; This function is called by:
 11149 ;;		_Flash_Memory_Initialization
 11150 ;;		_Flash_Memory_Modify
 11151 ;; This function uses a non-reentrant model
 11152 ;;
 11153                           
 11154                           
 11155                           ;psect for function _Flash_Memory_Read
 11156  1127                     _Flash_Memory_Read:	
 11157                           
 11158                           ;incstack = 0
 11159                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11160                           ;Flash_Memory_Read@address stored from wreg
 11161  1127  0020               	movlb	0	; select bank0
 11162  1128  00A2               	movwf	Flash_Memory_Read@address
 11163                           
 11164                           ;MCU_B1.c: 932: char i = 0, ret = 0;
 11165  1129  01A1               	clrf	Flash_Memory_Read@i
 11166  112A  01A3               	clrf	Flash_Memory_Read@ret
 11167                           
 11168                           ;MCU_B1.c: 933: PMADRH = 0x30;
 11169  112B  3030               	movlw	48
 11170  112C  0023               	movlb	3	; select bank3
 11171  112D  0092               	movwf	18	;volatile
 11172                           
 11173                           ;MCU_B1.c: 934: PMADRL = address;
 11174  112E  0020               	movlb	0	; select bank0
 11175  112F  0822               	movf	Flash_Memory_Read@address,w
 11176  1130  0023               	movlb	3	; select bank3
 11177  1131  0091               	movwf	17	;volatile
 11178                           
 11179                           ;MCU_B1.c: 935: CFGS = 0;
 11180  1132  1315               	bcf	21,6	;volatile
 11181                           
 11182                           ;MCU_B1.c: 936: RD = 1;
 11183  1133  1415               	bsf	21,0	;volatile
 11184                           
 11185                           ;MCU_B1.c: 937: i = PMDATH;
 11186  1134  0814               	movf	20,w	;volatile
 11187  1135  0020               	movlb	0	; select bank0
 11188  1136  00A0               	movwf	??_Flash_Memory_Read
 11189  1137  0820               	movf	??_Flash_Memory_Read,w
 11190  1138  00A1               	movwf	Flash_Memory_Read@i
 11191                           
 11192                           ;MCU_B1.c: 938: ret = PMDATL;
 11193  1139  0023               	movlb	3	; select bank3
 11194  113A  0813               	movf	19,w	;volatile
 11195  113B  0020               	movlb	0	; select bank0
 11196  113C  00A0               	movwf	??_Flash_Memory_Read
 11197  113D  0820               	movf	??_Flash_Memory_Read,w
 11198  113E  00A3               	movwf	Flash_Memory_Read@ret
 11199                           
 11200                           ;MCU_B1.c: 939: return ret;
 11201  113F  0823               	movf	Flash_Memory_Read@ret,w
 11202  1140  0008               	return
 11203  1141                     __end_of_Flash_Memory_Read:	
 11204                           
 11205                           	psect	text65
 11206  1E26                     __ptext65:	
 11207 ;; *************** function _DimmerLights_Main *****************
 11208 ;; Defined at:
 11209 ;;		line 416 in file "../src/Dimmer_B1.c"
 11210 ;; Parameters:    Size  Location     Type
 11211 ;;		None
 11212 ;; Auto vars:     Size  Location     Type
 11213 ;;		None
 11214 ;; Return value:  Size  Location     Type
 11215 ;;		None               void
 11216 ;; Registers used:
 11217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11218 ;; Tracked objects:
 11219 ;;		On entry : 0/0
 11220 ;;		On exit  : 0/0
 11221 ;;		Unchanged: 0/0
 11222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;Total ram usage:        0 bytes
 11228 ;; Hardware stack levels used:    1
 11229 ;; Hardware stack levels required when called:   11
 11230 ;; This function calls:
 11231 ;;		_setDimmerLights_Main
 11232 ;; This function is called by:
 11233 ;;		_main
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           
 11238                           ;psect for function _DimmerLights_Main
 11239  1E26                     _DimmerLights_Main:	
 11240                           
 11241                           ;Dimmer_B1.c: 418: setDimmerLights_Main(1);
 11242                           
 11243                           ;incstack = 0
 11244                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11245  1E26  3001               	movlw	1
 11246  1E27  3189  2101  319E   	fcall	_setDimmerLights_Main
 11247                           
 11248                           ;Dimmer_B1.c: 422: setDimmerLights_Main(2);
 11249  1E2A  3002               	movlw	2
 11250  1E2B  3189  2101         	fcall	_setDimmerLights_Main
 11251  1E2D  0008               	return
 11252  1E2E                     __end_of_DimmerLights_Main:	
 11253                           
 11254                           	psect	text66
 11255  0901                     __ptext66:	
 11256 ;; *************** function _setDimmerLights_Main *****************
 11257 ;; Defined at:
 11258 ;;		line 432 in file "../src/Dimmer_B1.c"
 11259 ;; Parameters:    Size  Location     Type
 11260 ;;  lights          1    wreg     unsigned char 
 11261 ;; Auto vars:     Size  Location     Type
 11262 ;;  lights          1   70[BANK0 ] unsigned char 
 11263 ;;  clear           1   69[BANK0 ] unsigned char 
 11264 ;; Return value:  Size  Location     Type
 11265 ;;		None               void
 11266 ;; Registers used:
 11267 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11268 ;; Tracked objects:
 11269 ;;		On entry : 0/0
 11270 ;;		On exit  : 0/0
 11271 ;;		Unchanged: 0/0
 11272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11274 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11276 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11277 ;;Total ram usage:        2 bytes
 11278 ;; Hardware stack levels used:    1
 11279 ;; Hardware stack levels required when called:   10
 11280 ;; This function calls:
 11281 ;;		_DimmerLightsPointSelect
 11282 ;;		_setBuz
 11283 ;;		_setDimmerLights
 11284 ;;		_setDimmerLights_Adj
 11285 ;; This function is called by:
 11286 ;;		_DimmerLights_Main
 11287 ;; This function uses a non-reentrant model
 11288 ;;
 11289                           
 11290                           
 11291                           ;psect for function _setDimmerLights_Main
 11292  0901                     _setDimmerLights_Main:	
 11293                           
 11294                           ;incstack = 0
 11295                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11296                           ;setDimmerLights_Main@lights stored from wreg
 11297  0901  0020               	movlb	0	; select bank0
 11298  0902  00E6               	movwf	setDimmerLights_Main@lights
 11299                           
 11300                           ;Dimmer_B1.c: 433: char clear = 1;
 11301  0903  01E5               	clrf	setDimmerLights_Main@clear
 11302  0904  0AE5               	incf	setDimmerLights_Main@clear,f
 11303                           
 11304                           ;Dimmer_B1.c: 434: DimmerLightsPointSelect(lights);
 11305  0905  0866               	movf	setDimmerLights_Main@lights,w
 11306  0906  319F  2763  3189   	fcall	_DimmerLightsPointSelect
 11307                           
 11308                           ;Dimmer_B1.c: 440: if (DimmerLights->Trigger == 1) {
 11309  0909  0020               	movlb	0	; select bank0
 11310  090A  086D               	movf	_DimmerLights,w
 11311  090B  3E08               	addlw	8
 11312  090C  0086               	movwf	6
 11313  090D  3001               	movlw	1	; select bank2/3
 11314  090E  0087               	movwf	7
 11315  090F  1D01               	btfss	1,2
 11316  0910  292E               	goto	l8906
 11317                           
 11318                           ;Dimmer_B1.c: 441: if (clear == 1) {
 11319  0911  0865               	movf	setDimmerLights_Main@clear,w
 11320  0912  3A01               	xorlw	1
 11321  0913  1D03               	skipz
 11322  0914  0008               	return
 11323                           
 11324                           ;Dimmer_B1.c: 442: DimmerLights->Trigger = 0;
 11325  0915  086D               	movf	_DimmerLights,w
 11326  0916  3E08               	addlw	8
 11327  0917  0086               	movwf	6
 11328  0918  3001               	movlw	1	; select bank2/3
 11329  0919  0087               	movwf	7
 11330  091A  1101               	bcf	1,2
 11331                           
 11332                           ;Dimmer_B1.c: 443: if (DimmerLights->Switch == 1) {
 11333  091B  086D               	movf	_DimmerLights,w
 11334  091C  3E08               	addlw	8
 11335  091D  0086               	movwf	6
 11336  091E  3001               	movlw	1	; select bank2/3
 11337  091F  0087               	movwf	7
 11338  0920  1C81               	btfss	1,1
 11339  0921  2928               	goto	l8904
 11340                           
 11341                           ;Dimmer_B1.c: 444: setDimmerLights(lights, 1);
 11342  0922  01A4               	clrf	setDimmerLights@status
 11343  0923  0AA4               	incf	setDimmerLights@status,f
 11344  0924  0866               	movf	setDimmerLights_Main@lights,w
 11345  0925  318B  239D         	fcall	_setDimmerLights
 11346                           
 11347                           ;Dimmer_B1.c: 445: } else {
 11348  0927  0008               	return
 11349  0928                     l8904:	
 11350                           
 11351                           ;Dimmer_B1.c: 446: setDimmerLights(lights, 0);
 11352  0928  0020               	movlb	0	; select bank0
 11353  0929  01A4               	clrf	setDimmerLights@status
 11354  092A  0866               	movf	setDimmerLights_Main@lights,w
 11355  092B  318B  239D         	fcall	_setDimmerLights
 11356                           
 11357                           ;Dimmer_B1.c: 447: }
 11358                           ;Dimmer_B1.c: 451: }
 11359                           ;Dimmer_B1.c: 452: } else {
 11360  092D  0008               	return
 11361  092E                     l8906:	
 11362                           
 11363                           ;Dimmer_B1.c: 453: if (DimmerLights->TriggerAdj == 1) {
 11364  092E  0020               	movlb	0	; select bank0
 11365  092F  086D               	movf	_DimmerLights,w
 11366  0930  3E08               	addlw	8
 11367  0931  0086               	movwf	6
 11368  0932  3001               	movlw	1	; select bank2/3
 11369  0933  0087               	movwf	7
 11370  0934  1E01               	btfss	1,4
 11371  0935  0008               	return
 11372                           
 11373                           ;Dimmer_B1.c: 454: if (clear == 1) {
 11374  0936  0865               	movf	setDimmerLights_Main@clear,w
 11375  0937  3A01               	xorlw	1
 11376  0938  1D03               	skipz
 11377  0939  0008               	return
 11378                           
 11379                           ;Dimmer_B1.c: 455: DimmerLights->TriggerAdj = 0;
 11380  093A  086D               	movf	_DimmerLights,w
 11381  093B  3E08               	addlw	8
 11382  093C  0086               	movwf	6
 11383  093D  3001               	movlw	1	; select bank2/3
 11384  093E  0087               	movwf	7
 11385  093F  1201               	bcf	1,4
 11386                           
 11387                           ;Dimmer_B1.c: 456: if (DimmerLights->AdjGo == 1) {
 11388  0940  086D               	movf	_DimmerLights,w
 11389  0941  3E08               	addlw	8
 11390  0942  0086               	movwf	6
 11391  0943  3001               	movlw	1	; select bank2/3
 11392  0944  0087               	movwf	7
 11393  0945  1D81               	btfss	1,3
 11394  0946  2956               	goto	l8916
 11395                           
 11396                           ;Dimmer_B1.c: 457: setDimmerLights_Adj(lights, 1);
 11397  0947  01E2               	clrf	setDimmerLights_Adj@status
 11398  0948  0AE2               	incf	setDimmerLights_Adj@status,f
 11399  0949  0866               	movf	setDimmerLights_Main@lights,w
 11400  094A  3195  2584  3189   	fcall	_setDimmerLights_Adj
 11401                           
 11402                           ;Dimmer_B1.c: 458: setBuz(1, 100);
 11403  094D  3064               	movlw	100
 11404  094E  0020               	movlb	0	; select bank0
 11405  094F  00A9               	movwf	setBuz@time
 11406  0950  3000               	movlw	0
 11407  0951  00AA               	movwf	setBuz@time+1
 11408  0952  3001               	movlw	1
 11409  0953  3188  20A8         	fcall	_setBuz
 11410                           
 11411                           ;Dimmer_B1.c: 459: } else {
 11412  0955  0008               	return
 11413  0956                     l8916:	
 11414                           
 11415                           ;Dimmer_B1.c: 460: setDimmerLights_Adj(lights, 0);
 11416  0956  0020               	movlb	0	; select bank0
 11417  0957  01E2               	clrf	setDimmerLights_Adj@status
 11418  0958  0866               	movf	setDimmerLights_Main@lights,w
 11419  0959  3195  2584         	fcall	_setDimmerLights_Adj
 11420  095B  0008               	return
 11421  095C                     __end_of_setDimmerLights_Main:	
 11422                           
 11423                           	psect	text67
 11424  1584                     __ptext67:	
 11425 ;; *************** function _setDimmerLights_Adj *****************
 11426 ;; Defined at:
 11427 ;;		line 687 in file "../src/Dimmer_B1.c"
 11428 ;; Parameters:    Size  Location     Type
 11429 ;;  lights          1    wreg     unsigned char 
 11430 ;;  status          1   66[BANK0 ] unsigned char 
 11431 ;; Auto vars:     Size  Location     Type
 11432 ;;  lights          1   68[BANK0 ] unsigned char 
 11433 ;; Return value:  Size  Location     Type
 11434 ;;		None               void
 11435 ;; Registers used:
 11436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11437 ;; Tracked objects:
 11438 ;;		On entry : 0/0
 11439 ;;		On exit  : 0/0
 11440 ;;		Unchanged: 0/0
 11441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11442 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11445 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11446 ;;Total ram usage:        3 bytes
 11447 ;; Hardware stack levels used:    1
 11448 ;; Hardware stack levels required when called:    9
 11449 ;; This function calls:
 11450 ;;		_DimmerLightsPointSelect
 11451 ;;		_setRF_DimmerLights
 11452 ;;		_setTxData
 11453 ;; This function is called by:
 11454 ;;		_setDimmerLights_Main
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           
 11459                           ;psect for function _setDimmerLights_Adj
 11460  1584                     _setDimmerLights_Adj:	
 11461                           
 11462                           ;incstack = 0
 11463                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11464                           ;setDimmerLights_Adj@lights stored from wreg
 11465  1584  0020               	movlb	0	; select bank0
 11466  1585  00E4               	movwf	setDimmerLights_Adj@lights
 11467                           
 11468                           ;Dimmer_B1.c: 688: DimmerLightsPointSelect(lights);
 11469  1586  0864               	movf	setDimmerLights_Adj@lights,w
 11470  1587  319F  2763  3195   	fcall	_DimmerLightsPointSelect
 11471                           
 11472                           ;Dimmer_B1.c: 689: if (status == 1) {
 11473  158A  0020               	movlb	0	; select bank0
 11474  158B  0862               	movf	setDimmerLights_Adj@status,w
 11475  158C  3A01               	xorlw	1
 11476  158D  1D03               	skipz
 11477  158E  2D9A               	goto	l8564
 11478                           
 11479                           ;Dimmer_B1.c: 690: DimmerLights->AdjFlag = 1;
 11480  158F  086D               	movf	_DimmerLights,w
 11481  1590  0086               	movwf	6
 11482  1591  3001               	movlw	1	; select bank2/3
 11483  1592  0087               	movwf	7
 11484  1593  1581               	bsf	1,3
 11485                           
 11486                           ;Dimmer_B1.c: 691: DimmerLights->Signal = 1;
 11487  1594  086D               	movf	_DimmerLights,w
 11488  1595  0086               	movwf	6
 11489  1596  3001               	movlw	1	; select bank2/3
 11490  1597  0087               	movwf	7
 11491  1598  1481               	bsf	1,1
 11492                           
 11493                           ;Dimmer_B1.c: 692: } else {
 11494  1599  0008               	return
 11495  159A                     l8564:	
 11496                           
 11497                           ;Dimmer_B1.c: 693: if (DimmerLights->AdjFlag == 1) {
 11498  159A  086D               	movf	_DimmerLights,w
 11499  159B  0086               	movwf	6
 11500  159C  3001               	movlw	1	; select bank2/3
 11501  159D  0087               	movwf	7
 11502  159E  1D81               	btfss	1,3
 11503  159F  0008               	return
 11504                           
 11505                           ;Dimmer_B1.c: 695: DimmerLights->Signal = 0;
 11506  15A0  086D               	movf	_DimmerLights,w
 11507  15A1  0086               	movwf	6
 11508  15A2  3001               	movlw	1	; select bank2/3
 11509  15A3  0087               	movwf	7
 11510  15A4  1081               	bcf	1,1
 11511                           
 11512                           ;Dimmer_B1.c: 696: DimmerLights->AdjFlag = 0;
 11513  15A5  086D               	movf	_DimmerLights,w
 11514  15A6  0086               	movwf	6
 11515  15A7  3001               	movlw	1	; select bank2/3
 11516  15A8  0087               	movwf	7
 11517  15A9  1181               	bcf	1,3
 11518                           
 11519                           ;Dimmer_B1.c: 698: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11520  15AA  086D               	movf	_DimmerLights,w
 11521  15AB  3E04               	addlw	4
 11522  15AC  0086               	movwf	6
 11523  15AD  3001               	movlw	1	; select bank2/3
 11524  15AE  0087               	movwf	7
 11525  15AF  0801               	movf	1,w
 11526  15B0  00E3               	movwf	??_setDimmerLights_Adj
 11527  15B1  086D               	movf	_DimmerLights,w
 11528  15B2  3E05               	addlw	5
 11529  15B3  0086               	movwf	6
 11530  15B4  3001               	movlw	1	; select bank2/3
 11531  15B5  0087               	movwf	7
 11532  15B6  0863               	movf	??_setDimmerLights_Adj,w
 11533  15B7  0081               	movwf	1
 11534                           
 11535                           ;Dimmer_B1.c: 706: setRF_DimmerLights(lights, 1);
 11536  15B8  01DD               	clrf	setRF_DimmerLights@on
 11537  15B9  0ADD               	incf	setRF_DimmerLights@on,f
 11538  15BA  0864               	movf	setDimmerLights_Adj@lights,w
 11539  15BB  3187  2793  3195   	fcall	_setRF_DimmerLights
 11540                           
 11541                           ;Dimmer_B1.c: 707: setTxData();
 11542  15BE  3186  2622         	fcall	_setTxData
 11543  15C0  0008               	return
 11544  15C1                     __end_of_setDimmerLights_Adj:	
 11545                           
 11546                           	psect	text68
 11547  0B9D                     __ptext68:	
 11548 ;; *************** function _setDimmerLights *****************
 11549 ;; Defined at:
 11550 ;;		line 634 in file "../src/Dimmer_B1.c"
 11551 ;; Parameters:    Size  Location     Type
 11552 ;;  lights          1    wreg     unsigned char 
 11553 ;;  status          1    4[BANK0 ] unsigned char 
 11554 ;; Auto vars:     Size  Location     Type
 11555 ;;  lights          1    6[BANK0 ] unsigned char 
 11556 ;; Return value:  Size  Location     Type
 11557 ;;		None               void
 11558 ;; Registers used:
 11559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11560 ;; Tracked objects:
 11561 ;;		On entry : 0/0
 11562 ;;		On exit  : 0/0
 11563 ;;		Unchanged: 0/0
 11564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11565 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11567 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;Total ram usage:        3 bytes
 11570 ;; Hardware stack levels used:    1
 11571 ;; Hardware stack levels required when called:    7
 11572 ;; This function calls:
 11573 ;;		_DimmerLightsPointSelect
 11574 ;;		_setLED
 11575 ;; This function is called by:
 11576 ;;		_setDimmerLights_Main
 11577 ;; This function uses a non-reentrant model
 11578 ;;
 11579                           
 11580                           
 11581                           ;psect for function _setDimmerLights
 11582  0B9D                     _setDimmerLights:	
 11583                           
 11584                           ;incstack = 0
 11585                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11586                           ;setDimmerLights@lights stored from wreg
 11587  0B9D  0020               	movlb	0	; select bank0
 11588  0B9E  00A6               	movwf	setDimmerLights@lights
 11589                           
 11590                           ;Dimmer_B1.c: 635: DimmerLightsPointSelect(lights);
 11591  0B9F  0826               	movf	setDimmerLights@lights,w
 11592  0BA0  319F  2763  318B   	fcall	_DimmerLightsPointSelect
 11593                           
 11594                           ;Dimmer_B1.c: 637: if (status == 1) {
 11595  0BA3  0020               	movlb	0	; select bank0
 11596  0BA4  0824               	movf	setDimmerLights@status,w
 11597  0BA5  3A01               	xorlw	1
 11598  0BA6  1D03               	skipz
 11599  0BA7  2BD9               	goto	l8556
 11600                           
 11601                           ;Dimmer_B1.c: 639: setLED(lights, 0);
 11602  0BA8  01A2               	clrf	setLED@command
 11603  0BA9  0826               	movf	setDimmerLights@lights,w
 11604  0BAA  3189  21B7  318B   	fcall	_setLED
 11605                           
 11606                           ;Dimmer_B1.c: 641: ;;
 11607                           ;Dimmer_B1.c: 644: DimmerLights->StatusFlag = 1;
 11608  0BAD  0020               	movlb	0	; select bank0
 11609  0BAE  086D               	movf	_DimmerLights,w
 11610  0BAF  0086               	movwf	6
 11611  0BB0  3001               	movlw	1	; select bank2/3
 11612  0BB1  0087               	movwf	7
 11613  0BB2  1701               	bsf	1,6
 11614                           
 11615                           ;Dimmer_B1.c: 646: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11616  0BB3  086D               	movf	_DimmerLights,w
 11617  0BB4  3E05               	addlw	5
 11618  0BB5  0086               	movwf	6
 11619  0BB6  3001               	movlw	1	; select bank2/3
 11620  0BB7  0087               	movwf	7
 11621  0BB8  0801               	movf	1,w
 11622  0BB9  00A5               	movwf	??_setDimmerLights
 11623  0BBA  086D               	movf	_DimmerLights,w
 11624  0BBB  3E04               	addlw	4
 11625  0BBC  0086               	movwf	6
 11626  0BBD  3001               	movlw	1	; select bank2/3
 11627  0BBE  0087               	movwf	7
 11628  0BBF  0825               	movf	??_setDimmerLights,w
 11629  0BC0  0081               	movwf	1
 11630                           
 11631                           ;Dimmer_B1.c: 650: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 11632  0BC1  3020               	movlw	32
 11633  0BC2  00A5               	movwf	??_setDimmerLights
 11634  0BC3  086D               	movf	_DimmerLights,w
 11635  0BC4  3E04               	addlw	4
 11636  0BC5  0086               	movwf	6
 11637  0BC6  3001               	movlw	1	; select bank2/3
 11638  0BC7  0087               	movwf	7
 11639  0BC8  0825               	movf	??_setDimmerLights,w
 11640  0BC9  0081               	movwf	1
 11641                           
 11642                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 1;
 11643  0BCA  086D               	movf	_DimmerLights,w
 11644  0BCB  0086               	movwf	6
 11645  0BCC  3001               	movlw	1	; select bank2/3
 11646  0BCD  0087               	movwf	7
 11647  0BCE  1481               	bsf	1,1
 11648                           
 11649                           ;Dimmer_B1.c: 655: DimmerLights->DimmingTimeValue = 7;
 11650  0BCF  3007               	movlw	7
 11651  0BD0  00A5               	movwf	??_setDimmerLights
 11652  0BD1  086D               	movf	_DimmerLights,w
 11653  0BD2  3E02               	addlw	2
 11654  0BD3  0086               	movwf	6
 11655  0BD4  3001               	movlw	1	; select bank2/3
 11656  0BD5  0087               	movwf	7
 11657  0BD6  0825               	movf	??_setDimmerLights,w
 11658  0BD7  0081               	movwf	1
 11659                           
 11660                           ;Dimmer_B1.c: 657: } else {
 11661  0BD8  0008               	return
 11662  0BD9                     l8556:	
 11663                           
 11664                           ;Dimmer_B1.c: 660: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11665  0BD9  086D               	movf	_DimmerLights,w
 11666  0BDA  3E06               	addlw	6
 11667  0BDB  0086               	movwf	6
 11668  0BDC  3001               	movlw	1	; select bank2/3
 11669  0BDD  0087               	movwf	7
 11670  0BDE  0801               	movf	1,w
 11671  0BDF  00A5               	movwf	??_setDimmerLights
 11672  0BE0  086D               	movf	_DimmerLights,w
 11673  0BE1  3E04               	addlw	4
 11674  0BE2  0086               	movwf	6
 11675  0BE3  3001               	movlw	1	; select bank2/3
 11676  0BE4  0087               	movwf	7
 11677  0BE5  0825               	movf	??_setDimmerLights,w
 11678  0BE6  0081               	movwf	1
 11679                           
 11680                           ;Dimmer_B1.c: 667: DimmerLights->Signal = 1;
 11681  0BE7  086D               	movf	_DimmerLights,w
 11682  0BE8  0086               	movwf	6
 11683  0BE9  3001               	movlw	1	; select bank2/3
 11684  0BEA  0087               	movwf	7
 11685  0BEB  1481               	bsf	1,1
 11686                           
 11687                           ;Dimmer_B1.c: 668: DimmerLights->AdjFlag = 0;
 11688  0BEC  086D               	movf	_DimmerLights,w
 11689  0BED  0086               	movwf	6
 11690  0BEE  3001               	movlw	1	; select bank2/3
 11691  0BEF  0087               	movwf	7
 11692  0BF0  1181               	bcf	1,3
 11693                           
 11694                           ;Dimmer_B1.c: 669: DimmerLights->AdjStatus = 0;
 11695  0BF1  086D               	movf	_DimmerLights,w
 11696  0BF2  0086               	movwf	6
 11697  0BF3  3001               	movlw	1	; select bank2/3
 11698  0BF4  0087               	movwf	7
 11699  0BF5  1201               	bcf	1,4
 11700                           
 11701                           ;Dimmer_B1.c: 670: DimmerLights->AdjRF = 0;
 11702  0BF6  086D               	movf	_DimmerLights,w
 11703  0BF7  0086               	movwf	6
 11704  0BF8  3001               	movlw	1	; select bank2/3
 11705  0BF9  0087               	movwf	7
 11706  0BFA  1101               	bcf	1,2
 11707                           
 11708                           ;Dimmer_B1.c: 671: DimmerLights->DimmingTimeValue = 7;
 11709  0BFB  3007               	movlw	7
 11710  0BFC  00A5               	movwf	??_setDimmerLights
 11711  0BFD  086D               	movf	_DimmerLights,w
 11712  0BFE  3E02               	addlw	2
 11713  0BFF  0086               	movwf	6
 11714  0C00  3001               	movlw	1	; select bank2/3
 11715  0C01  0087               	movwf	7
 11716  0C02  0825               	movf	??_setDimmerLights,w
 11717  0C03  0081               	movwf	1
 11718  0C04  0008               	return
 11719  0C05                     __end_of_setDimmerLights:	
 11720                           
 11721                           	psect	text69
 11722  09B7                     __ptext69:	
 11723 ;; *************** function _setLED *****************
 11724 ;; Defined at:
 11725 ;;		line 73 in file "../src/LED_B1.c"
 11726 ;; Parameters:    Size  Location     Type
 11727 ;;  led             1    wreg     unsigned char 
 11728 ;;  command         1    2[BANK0 ] unsigned char 
 11729 ;; Auto vars:     Size  Location     Type
 11730 ;;  led             1    3[BANK0 ] unsigned char 
 11731 ;; Return value:  Size  Location     Type
 11732 ;;		None               void
 11733 ;; Registers used:
 11734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11735 ;; Tracked objects:
 11736 ;;		On entry : 0/0
 11737 ;;		On exit  : 0/0
 11738 ;;		Unchanged: 0/0
 11739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11740 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11743 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;Total ram usage:        2 bytes
 11745 ;; Hardware stack levels used:    1
 11746 ;; Hardware stack levels required when called:    6
 11747 ;; This function calls:
 11748 ;;		_LedPointSelect
 11749 ;; This function is called by:
 11750 ;;		_setDimmerLights
 11751 ;;		_setLED_Initialization
 11752 ;;		_setMain_Exception
 11753 ;;		_setSw_Initialization
 11754 ;; This function uses a non-reentrant model
 11755 ;;
 11756                           
 11757                           
 11758                           ;psect for function _setLED
 11759  09B7                     _setLED:	
 11760                           
 11761                           ;incstack = 0
 11762                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11763                           ;setLED@led stored from wreg
 11764  09B7  0020               	movlb	0	; select bank0
 11765  09B8  00A3               	movwf	setLED@led
 11766                           
 11767                           ;LED_B1.c: 74: LedPointSelect(led);
 11768  09B9  0823               	movf	setLED@led,w
 11769  09BA  3191  215D  3189   	fcall	_LedPointSelect
 11770                           
 11771                           ;LED_B1.c: 75: if (command == 0) {
 11772  09BD  0020               	movlb	0	; select bank0
 11773  09BE  08A2               	movf	setLED@command,f
 11774  09BF  1D03               	skipz
 11775  09C0  29D3               	goto	l8302
 11776                           
 11777                           ;LED_B1.c: 77: if (led == 1) {
 11778  09C1  0823               	movf	setLED@led,w
 11779  09C2  3A01               	xorlw	1
 11780  09C3  1D03               	skipz
 11781  09C4  29C7               	goto	l8294
 11782                           
 11783                           ;LED_B1.c: 81: RA3 = 1;
 11784  09C5  158C               	bsf	12,3	;volatile
 11785                           
 11786                           ;LED_B1.c: 83: }
 11787  09C6  0008               	return
 11788  09C7                     l8294:	
 11789                           
 11790                           ;LED_B1.c: 86: else if (led == 2) {
 11791  09C7  0823               	movf	setLED@led,w
 11792  09C8  3A02               	xorlw	2
 11793  09C9  1D03               	skipz
 11794  09CA  29CD               	goto	l8298
 11795                           
 11796                           ;LED_B1.c: 90: RC7 = 1;
 11797  09CB  178E               	bsf	14,7	;volatile
 11798                           
 11799                           ;LED_B1.c: 92: }
 11800  09CC  0008               	return
 11801  09CD                     l8298:	
 11802                           
 11803                           ;LED_B1.c: 104: else if (led == 99) {
 11804  09CD  0823               	movf	setLED@led,w
 11805  09CE  3A63               	xorlw	99
 11806  09CF  1D03               	skipz
 11807  09D0  0008               	return
 11808                           
 11809                           ;LED_B1.c: 108: RB5 = 1;
 11810  09D1  168D               	bsf	13,5	;volatile
 11811                           
 11812                           ;LED_B1.c: 110: }
 11813                           ;LED_B1.c: 112: } else if (command == 1) {
 11814  09D2  0008               	return
 11815  09D3                     l8302:	
 11816  09D3  0822               	movf	setLED@command,w
 11817  09D4  3A01               	xorlw	1
 11818  09D5  1D03               	skipz
 11819  09D6  29E9               	goto	l8316
 11820                           
 11821                           ;LED_B1.c: 114: if (led == 1) {
 11822  09D7  0823               	movf	setLED@led,w
 11823  09D8  3A01               	xorlw	1
 11824  09D9  1D03               	skipz
 11825  09DA  29DD               	goto	l8308
 11826                           
 11827                           ;LED_B1.c: 118: RA3 = 0;
 11828  09DB  118C               	bcf	12,3	;volatile
 11829                           
 11830                           ;LED_B1.c: 120: }
 11831  09DC  0008               	return
 11832  09DD                     l8308:	
 11833                           
 11834                           ;LED_B1.c: 123: else if (led == 2) {
 11835  09DD  0823               	movf	setLED@led,w
 11836  09DE  3A02               	xorlw	2
 11837  09DF  1D03               	skipz
 11838  09E0  29E3               	goto	l8312
 11839                           
 11840                           ;LED_B1.c: 127: RC7 = 0;
 11841  09E1  138E               	bcf	14,7	;volatile
 11842                           
 11843                           ;LED_B1.c: 129: }
 11844  09E2  0008               	return
 11845  09E3                     l8312:	
 11846                           
 11847                           ;LED_B1.c: 141: else if (led == 99) {
 11848  09E3  0823               	movf	setLED@led,w
 11849  09E4  3A63               	xorlw	99
 11850  09E5  1D03               	skipz
 11851  09E6  0008               	return
 11852                           
 11853                           ;LED_B1.c: 145: RB5 = 0;
 11854  09E7  128D               	bcf	13,5	;volatile
 11855                           
 11856                           ;LED_B1.c: 147: }
 11857                           ;LED_B1.c: 149: } else if (command == 10) {
 11858  09E8  0008               	return
 11859  09E9                     l8316:	
 11860  09E9  0822               	movf	setLED@command,w
 11861  09EA  3A0A               	xorlw	10
 11862  09EB  1D03               	skipz
 11863  09EC  2A0B               	goto	l8332
 11864                           
 11865                           ;LED_B1.c: 150: LED->GO = 0;
 11866  09ED  0873               	movf	_LED,w
 11867  09EE  0086               	movwf	6
 11868  09EF  3001               	movlw	1	; select bank2/3
 11869  09F0  0087               	movwf	7
 11870  09F1  1081               	bcf	1,1
 11871                           
 11872                           ;LED_B1.c: 151: LED->Time = 0;
 11873  09F2  0A73               	incf	_LED,w
 11874  09F3  0086               	movwf	6
 11875  09F4  3001               	movlw	1	; select bank2/3
 11876  09F5  0087               	movwf	7
 11877  09F6  3000               	movlw	0
 11878  09F7  3FC0               	movwi [0]fsr1
 11879  09F8  3FC1               	movwi [1]fsr1
 11880                           
 11881                           ;LED_B1.c: 153: if (led == 1) {
 11882  09F9  0823               	movf	setLED@led,w
 11883  09FA  3A01               	xorlw	1
 11884  09FB  1D03               	skipz
 11885  09FC  29FF               	goto	l8324
 11886                           
 11887                           ;LED_B1.c: 157: RA3 = 1;
 11888  09FD  158C               	bsf	12,3	;volatile
 11889                           
 11890                           ;LED_B1.c: 159: }
 11891  09FE  0008               	return
 11892  09FF                     l8324:	
 11893                           
 11894                           ;LED_B1.c: 162: else if (led == 2) {
 11895  09FF  0823               	movf	setLED@led,w
 11896  0A00  3A02               	xorlw	2
 11897  0A01  1D03               	skipz
 11898  0A02  2A05               	goto	l8328
 11899                           
 11900                           ;LED_B1.c: 166: RC7 = 1;
 11901  0A03  178E               	bsf	14,7	;volatile
 11902                           
 11903                           ;LED_B1.c: 168: }
 11904  0A04  0008               	return
 11905  0A05                     l8328:	
 11906                           
 11907                           ;LED_B1.c: 180: else if (led == 99) {
 11908  0A05  0823               	movf	setLED@led,w
 11909  0A06  3A63               	xorlw	99
 11910  0A07  1D03               	skipz
 11911  0A08  0008               	return
 11912                           
 11913                           ;LED_B1.c: 184: RB5 = 1;
 11914  0A09  168D               	bsf	13,5	;volatile
 11915                           
 11916                           ;LED_B1.c: 186: }
 11917                           ;LED_B1.c: 188: } else if (command == 11) {
 11918  0A0A  0008               	return
 11919  0A0B                     l8332:	
 11920  0A0B  0822               	movf	setLED@command,w
 11921  0A0C  3A0B               	xorlw	11
 11922  0A0D  1D03               	skipz
 11923  0A0E  0008               	return
 11924                           
 11925                           ;LED_B1.c: 189: LED->GO = 1;
 11926  0A0F  0873               	movf	_LED,w
 11927  0A10  0086               	movwf	6
 11928  0A11  3001               	movlw	1	; select bank2/3
 11929  0A12  0087               	movwf	7
 11930  0A13  1481               	bsf	1,1
 11931  0A14  0008               	return
 11932  0A15                     __end_of_setLED:	
 11933                           
 11934                           	psect	text70
 11935  115D                     __ptext70:	
 11936 ;; *************** function _LedPointSelect *****************
 11937 ;; Defined at:
 11938 ;;		line 7 in file "../src/LED_B1.c"
 11939 ;; Parameters:    Size  Location     Type
 11940 ;;  led             1    wreg     unsigned char 
 11941 ;; Auto vars:     Size  Location     Type
 11942 ;;  led             1    1[BANK0 ] unsigned char 
 11943 ;; Return value:  Size  Location     Type
 11944 ;;		None               void
 11945 ;; Registers used:
 11946 ;;		wreg
 11947 ;; Tracked objects:
 11948 ;;		On entry : 0/0
 11949 ;;		On exit  : 0/0
 11950 ;;		Unchanged: 0/0
 11951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;Total ram usage:        2 bytes
 11957 ;; Hardware stack levels used:    1
 11958 ;; Hardware stack levels required when called:    5
 11959 ;; This function calls:
 11960 ;;		Nothing
 11961 ;; This function is called by:
 11962 ;;		_setLED_Initialization
 11963 ;;		_setLED
 11964 ;;		_setLED_Main
 11965 ;; This function uses a non-reentrant model
 11966 ;;
 11967                           
 11968                           
 11969                           ;psect for function _LedPointSelect
 11970  115D                     _LedPointSelect:	
 11971                           
 11972                           ;incstack = 0
 11973                           ; Regs used in _LedPointSelect: [wreg]
 11974                           ;LedPointSelect@led stored from wreg
 11975  115D  0020               	movlb	0	; select bank0
 11976  115E  00A1               	movwf	LedPointSelect@led
 11977                           
 11978                           ;LED_B1.c: 9: if (led == 1) {
 11979  115F  0821               	movf	LedPointSelect@led,w
 11980  1160  3A01               	xorlw	1
 11981  1161  1D03               	skipz
 11982  1162  2968               	goto	l8218
 11983                           
 11984                           ;LED_B1.c: 10: LED = &VarLED1;
 11985  1163  3065               	movlw	_VarLED1& (0+255)
 11986  1164  00A0               	movwf	??_LedPointSelect
 11987  1165  0820               	movf	??_LedPointSelect,w
 11988  1166  00F3               	movwf	_LED
 11989                           
 11990                           ;LED_B1.c: 11: }
 11991  1167  0008               	return
 11992  1168                     l8218:	
 11993                           
 11994                           ;LED_B1.c: 14: else if (led == 2) {
 11995  1168  0821               	movf	LedPointSelect@led,w
 11996  1169  3A02               	xorlw	2
 11997  116A  1D03               	skipz
 11998  116B  2971               	goto	l8222
 11999                           
 12000                           ;LED_B1.c: 15: LED = &VarLED2;
 12001  116C  3069               	movlw	_VarLED2& (0+255)
 12002  116D  00A0               	movwf	??_LedPointSelect
 12003  116E  0820               	movf	??_LedPointSelect,w
 12004  116F  00F3               	movwf	_LED
 12005                           
 12006                           ;LED_B1.c: 16: }
 12007  1170  0008               	return
 12008  1171                     l8222:	
 12009                           
 12010                           ;LED_B1.c: 24: else if (led == 99) {
 12011  1171  0821               	movf	LedPointSelect@led,w
 12012  1172  3A63               	xorlw	99
 12013  1173  1D03               	skipz
 12014  1174  0008               	return
 12015                           
 12016                           ;LED_B1.c: 25: LED = &VarErrLED;
 12017  1175  3061               	movlw	_VarErrLED& (0+255)
 12018  1176  00A0               	movwf	??_LedPointSelect
 12019  1177  0820               	movf	??_LedPointSelect,w
 12020  1178  00F3               	movwf	_LED
 12021  1179  0008               	return
 12022  117A                     __end_of_LedPointSelect:	
 12023                           
 12024                           	psect	text71
 12025  10C7                     __ptext71:	
 12026 ;; *************** function _DimmerLights_Initialization *****************
 12027 ;; Defined at:
 12028 ;;		line 343 in file "../src/Dimmer_B1.c"
 12029 ;; Parameters:    Size  Location     Type
 12030 ;;		None
 12031 ;; Auto vars:     Size  Location     Type
 12032 ;;		None
 12033 ;; Return value:  Size  Location     Type
 12034 ;;		None               void
 12035 ;; Registers used:
 12036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12037 ;; Tracked objects:
 12038 ;;		On entry : 0/0
 12039 ;;		On exit  : 0/0
 12040 ;;		Unchanged: 0/0
 12041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;Total ram usage:        1 bytes
 12047 ;; Hardware stack levels used:    1
 12048 ;; Hardware stack levels required when called:    7
 12049 ;; This function calls:
 12050 ;;		_Dimmer_Initialization
 12051 ;;		_setDimmerLights_Initialization
 12052 ;; This function is called by:
 12053 ;;		_main
 12054 ;; This function uses a non-reentrant model
 12055 ;;
 12056                           
 12057                           
 12058                           ;psect for function _DimmerLights_Initialization
 12059  10C7                     _DimmerLights_Initialization:	
 12060                           
 12061                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 12062                           
 12063                           ;incstack = 0
 12064                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12065  10C7  3043               	movlw	_DimmerLights1& (0+255)
 12066  10C8  0020               	movlb	0	; select bank0
 12067  10C9  00A4               	movwf	??_DimmerLights_Initialization
 12068  10CA  0824               	movf	??_DimmerLights_Initialization,w
 12069  10CB  0021               	movlb	1	; select bank1
 12070  10CC  00CE               	movwf	_DimmerLights11^(0+128)
 12071                           
 12072                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 12073  10CD  3001               	movlw	1
 12074  10CE  3193  2326  3190   	fcall	_setDimmerLights_Initialization
 12075                           
 12076                           ;Dimmer_B1.c: 351: DimmerLights22 = &DimmerLights2;
 12077  10D1  3052               	movlw	_DimmerLights2& (0+255)
 12078  10D2  0020               	movlb	0	; select bank0
 12079  10D3  00A4               	movwf	??_DimmerLights_Initialization
 12080  10D4  0824               	movf	??_DimmerLights_Initialization,w
 12081  10D5  0021               	movlb	1	; select bank1
 12082  10D6  00CF               	movwf	_DimmerLights22^(0+128)
 12083                           
 12084                           ;Dimmer_B1.c: 352: setDimmerLights_Initialization(2);
 12085  10D7  3002               	movlw	2
 12086  10D8  3193  2326  3190   	fcall	_setDimmerLights_Initialization
 12087                           
 12088                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 12089  10DB  3188  2001         	fcall	_Dimmer_Initialization
 12090  10DD  0008               	return
 12091  10DE                     __end_of_DimmerLights_Initialization:	
 12092                           
 12093                           	psect	text72
 12094  1326                     __ptext72:	
 12095 ;; *************** function _setDimmerLights_Initialization *****************
 12096 ;; Defined at:
 12097 ;;		line 367 in file "../src/Dimmer_B1.c"
 12098 ;; Parameters:    Size  Location     Type
 12099 ;;  lights          1    wreg     unsigned char 
 12100 ;; Auto vars:     Size  Location     Type
 12101 ;;  lights          1    3[BANK0 ] unsigned char 
 12102 ;; Return value:  Size  Location     Type
 12103 ;;		None               void
 12104 ;; Registers used:
 12105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12106 ;; Tracked objects:
 12107 ;;		On entry : 0/0
 12108 ;;		On exit  : 0/0
 12109 ;;		Unchanged: 0/0
 12110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12112 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12114 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12115 ;;Total ram usage:        2 bytes
 12116 ;; Hardware stack levels used:    1
 12117 ;; Hardware stack levels required when called:    6
 12118 ;; This function calls:
 12119 ;;		_DimmerLightsPointSelect
 12120 ;; This function is called by:
 12121 ;;		_DimmerLights_Initialization
 12122 ;; This function uses a non-reentrant model
 12123 ;;
 12124                           
 12125                           
 12126                           ;psect for function _setDimmerLights_Initialization
 12127  1326                     _setDimmerLights_Initialization:	
 12128                           
 12129                           ;incstack = 0
 12130                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 12131                           ;setDimmerLights_Initialization@lights stored from wreg
 12132  1326  0020               	movlb	0	; select bank0
 12133  1327  00A3               	movwf	setDimmerLights_Initialization@lights
 12134                           
 12135                           ;Dimmer_B1.c: 369: DimmerLightsPointSelect(lights);
 12136  1328  0823               	movf	setDimmerLights_Initialization@lights,w
 12137  1329  319F  2763         	fcall	_DimmerLightsPointSelect
 12138                           
 12139                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 12140  132B  3020               	movlw	32
 12141  132C  0020               	movlb	0	; select bank0
 12142  132D  00A2               	movwf	??_setDimmerLights_Initialization
 12143  132E  086D               	movf	_DimmerLights,w
 12144  132F  3E05               	addlw	5
 12145  1330  0086               	movwf	6
 12146  1331  3001               	movlw	1	; select bank2/3
 12147  1332  0087               	movwf	7
 12148  1333  0822               	movf	??_setDimmerLights_Initialization,w
 12149  1334  0081               	movwf	1
 12150                           
 12151                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 12152  1335  303C               	movlw	60
 12153  1336  00A2               	movwf	??_setDimmerLights_Initialization
 12154  1337  086D               	movf	_DimmerLights,w
 12155  1338  3E06               	addlw	6
 12156  1339  0086               	movwf	6
 12157  133A  3001               	movlw	1	; select bank2/3
 12158  133B  0087               	movwf	7
 12159  133C  0822               	movf	??_setDimmerLights_Initialization,w
 12160  133D  0081               	movwf	1
 12161                           
 12162                           ;Dimmer_B1.c: 386: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12163  133E  086D               	movf	_DimmerLights,w
 12164  133F  3E06               	addlw	6
 12165  1340  0086               	movwf	6
 12166  1341  3001               	movlw	1	; select bank2/3
 12167  1342  0087               	movwf	7
 12168  1343  0801               	movf	1,w
 12169  1344  00A2               	movwf	??_setDimmerLights_Initialization
 12170  1345  086D               	movf	_DimmerLights,w
 12171  1346  3E04               	addlw	4
 12172  1347  0086               	movwf	6
 12173  1348  3001               	movlw	1	; select bank2/3
 12174  1349  0087               	movwf	7
 12175  134A  0822               	movf	??_setDimmerLights_Initialization,w
 12176  134B  0081               	movwf	1
 12177  134C  0008               	return
 12178  134D                     __end_of_setDimmerLights_Initialization:	
 12179                           
 12180                           	psect	text73
 12181  0801                     __ptext73:	
 12182 ;; *************** function _Dimmer_Initialization *****************
 12183 ;; Defined at:
 12184 ;;		line 893 in file "../src/Dimmer_B1.c"
 12185 ;; Parameters:    Size  Location     Type
 12186 ;;		None
 12187 ;; Auto vars:     Size  Location     Type
 12188 ;;		None
 12189 ;; Return value:  Size  Location     Type
 12190 ;;		None               void
 12191 ;; Registers used:
 12192 ;;		None
 12193 ;; Tracked objects:
 12194 ;;		On entry : 0/0
 12195 ;;		On exit  : 0/0
 12196 ;;		Unchanged: 0/0
 12197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;Total ram usage:        0 bytes
 12203 ;; Hardware stack levels used:    1
 12204 ;; Hardware stack levels required when called:    5
 12205 ;; This function calls:
 12206 ;;		Nothing
 12207 ;; This function is called by:
 12208 ;;		_DimmerLights_Initialization
 12209 ;; This function uses a non-reentrant model
 12210 ;;
 12211                           
 12212                           
 12213                           ;psect for function _Dimmer_Initialization
 12214  0801                     _Dimmer_Initialization:	
 12215                           
 12216                           ;incstack = 0
 12217                           ; Regs used in _Dimmer_Initialization: []
 12218  0801  0008               	return
 12219  0802                     __end_of_Dimmer_Initialization:	
 12220                           
 12221                           	psect	text74
 12222  1E1E                     __ptext74:	
 12223 ;; *************** function _DelayOff_Main *****************
 12224 ;; Defined at:
 12225 ;;		line 41 in file "../src/DelayOff_B1.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;		None
 12228 ;; Auto vars:     Size  Location     Type
 12229 ;;		None
 12230 ;; Return value:  Size  Location     Type
 12231 ;;		None               void
 12232 ;; Registers used:
 12233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12234 ;; Tracked objects:
 12235 ;;		On entry : 0/0
 12236 ;;		On exit  : 0/0
 12237 ;;		Unchanged: 0/0
 12238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12243 ;;Total ram usage:        0 bytes
 12244 ;; Hardware stack levels used:    1
 12245 ;; Hardware stack levels required when called:   11
 12246 ;; This function calls:
 12247 ;;		_DlyOff_Main
 12248 ;; This function is called by:
 12249 ;;		_main
 12250 ;; This function uses a non-reentrant model
 12251 ;;
 12252                           
 12253                           
 12254                           ;psect for function _DelayOff_Main
 12255  1E1E                     _DelayOff_Main:	
 12256                           
 12257                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 12258                           
 12259                           ;incstack = 0
 12260                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12261  1E1E  3001               	movlw	1
 12262  1E1F  318A  22D7  319E   	fcall	_DlyOff_Main
 12263                           
 12264                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 12265  1E22  3002               	movlw	2
 12266  1E23  318A  22D7         	fcall	_DlyOff_Main
 12267  1E25  0008               	return
 12268  1E26                     __end_of_DelayOff_Main:	
 12269                           
 12270                           	psect	text75
 12271  0AD7                     __ptext75:	
 12272 ;; *************** function _DlyOff_Main *****************
 12273 ;; Defined at:
 12274 ;;		line 62 in file "../src/DelayOff_B1.c"
 12275 ;; Parameters:    Size  Location     Type
 12276 ;;  sw              1    wreg     unsigned char 
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;  sw              1   72[BANK0 ] unsigned char 
 12279 ;; Return value:  Size  Location     Type
 12280 ;;		None               void
 12281 ;; Registers used:
 12282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12283 ;; Tracked objects:
 12284 ;;		On entry : 0/0
 12285 ;;		On exit  : 0/0
 12286 ;;		Unchanged: 0/0
 12287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;Total ram usage:        3 bytes
 12293 ;; Hardware stack levels used:    1
 12294 ;; Hardware stack levels required when called:   10
 12295 ;; This function calls:
 12296 ;;		_DelayOffPointSelect
 12297 ;;		_getDimmerLights_Status
 12298 ;;		_setDimmerLights_SwOff
 12299 ;;		_setDimmerLights_SwOn
 12300 ;;		_setRF_DimmerLights
 12301 ;; This function is called by:
 12302 ;;		_DelayOff_Main
 12303 ;; This function uses a non-reentrant model
 12304 ;;
 12305                           
 12306                           
 12307                           ;psect for function _DlyOff_Main
 12308  0AD7                     _DlyOff_Main:	
 12309                           
 12310                           ;incstack = 0
 12311                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12312                           ;DlyOff_Main@sw stored from wreg
 12313  0AD7  0020               	movlb	0	; select bank0
 12314  0AD8  00E8               	movwf	DlyOff_Main@sw
 12315                           
 12316                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 12317  0AD9  0868               	movf	DlyOff_Main@sw,w
 12318  0ADA  319F  27C4  318A   	fcall	_DelayOffPointSelect
 12319                           
 12320                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 12321  0ADD  0870               	movf	_DelayOff,w
 12322  0ADE  0086               	movwf	6
 12323  0ADF  0871               	movf	_DelayOff+1,w
 12324  0AE0  0087               	movwf	7
 12325  0AE1  1C81               	btfss	1,1
 12326  0AE2  0008               	return
 12327                           
 12328                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 12329  0AE3  0870               	movf	_DelayOff,w
 12330  0AE4  0086               	movwf	6
 12331  0AE5  0871               	movf	_DelayOff+1,w
 12332  0AE6  0087               	movwf	7
 12333  0AE7  3001               	movlw	1
 12334  0AE8  0781               	addwf	1,f
 12335  0AE9  3141               	addfsr 1,1
 12336  0AEA  1803               	skipnc
 12337  0AEB  0A81               	incf	1,f
 12338                           
 12339                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 12340  0AEC  0870               	movf	_DelayOff,w
 12341  0AED  0086               	movwf	6
 12342  0AEE  0871               	movf	_DelayOff+1,w
 12343  0AEF  0087               	movwf	7
 12344  0AF0  3F40               	moviw [0]fsr1
 12345  0AF1  0020               	movlb	0	; select bank0
 12346  0AF2  00E6               	movwf	??_DlyOff_Main
 12347  0AF3  3F41               	moviw [1]fsr1
 12348  0AF4  00E7               	movwf	??_DlyOff_Main+1
 12349  0AF5  3016               	movlw	22
 12350  0AF6  0267               	subwf	??_DlyOff_Main+1,w
 12351  0AF7  3012               	movlw	18
 12352  0AF8  1903               	skipnz
 12353  0AF9  0266               	subwf	??_DlyOff_Main,w
 12354  0AFA  1C03               	skipc
 12355  0AFB  0008               	return
 12356                           
 12357                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 12358  0AFC  0870               	movf	_DelayOff,w
 12359  0AFD  0086               	movwf	6
 12360  0AFE  0871               	movf	_DelayOff+1,w
 12361  0AFF  0087               	movwf	7
 12362  0B00  3000               	movlw	0
 12363  0B01  3FC0               	movwi [0]fsr1
 12364  0B02  3FC1               	movwi [1]fsr1
 12365                           
 12366                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 12367  0B03  3001               	movlw	1
 12368  0B04  00E6               	movwf	??_DlyOff_Main
 12369  0B05  0870               	movf	_DelayOff,w
 12370  0B06  0086               	movwf	6
 12371  0B07  0871               	movf	_DelayOff+1,w
 12372  0B08  0087               	movwf	7
 12373  0B09  0866               	movf	??_DlyOff_Main,w
 12374  0B0A  0781               	addwf	1,f
 12375                           
 12376                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12377  0B0B  0870               	movf	_DelayOff,w
 12378  0B0C  0086               	movwf	6
 12379  0B0D  0871               	movf	_DelayOff+1,w
 12380  0B0E  0087               	movwf	7
 12381  0B0F  0870               	movf	_DelayOff,w
 12382  0B10  0084               	movwf	4
 12383  0B11  0871               	movf	_DelayOff+1,w
 12384  0B12  0085               	movwf	5
 12385  0B13  0800               	movf	0,w
 12386  0B14  0201               	subwf	1,w
 12387  0B15  1C03               	skipc
 12388  0B16  0008               	return
 12389                           
 12390                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12391  0B17  0870               	movf	_DelayOff,w
 12392  0B18  0086               	movwf	6
 12393  0B19  0871               	movf	_DelayOff+1,w
 12394  0B1A  0087               	movwf	7
 12395  0B1B  0181               	clrf	1
 12396                           
 12397                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12398  0B1C  0870               	movf	_DelayOff,w
 12399  0B1D  0086               	movwf	6
 12400  0B1E  0871               	movf	_DelayOff+1,w
 12401  0B1F  0087               	movwf	7
 12402  0B20  1081               	bcf	1,1
 12403                           
 12404                           ;DelayOff_B1.c: 74: setDimmerLights_SwOn(sw);
 12405  0B21  0868               	movf	DlyOff_Main@sw,w
 12406  0B22  3196  2645  318A   	fcall	_setDimmerLights_SwOn
 12407                           
 12408                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 12409  0B25  0020               	movlb	0	; select bank0
 12410  0B26  0868               	movf	DlyOff_Main@sw,w
 12411  0B27  319E  26C8  318A   	fcall	_getDimmerLights_Status
 12412  0B2A  3A01               	xorlw	1
 12413  0B2B  1D03               	skipz
 12414  0B2C  2B32               	goto	l574
 12415                           
 12416                           ;DelayOff_B1.c: 76: setDimmerLights_SwOff(sw);
 12417  0B2D  0020               	movlb	0	; select bank0
 12418  0B2E  0868               	movf	DlyOff_Main@sw,w
 12419  0B2F  318C  2405  318A   	fcall	_setDimmerLights_SwOff
 12420  0B32                     l574:	
 12421                           
 12422                           ;DelayOff_B1.c: 77: }
 12423                           ;DelayOff_B1.c: 78: setRF_DimmerLights(sw, 0);
 12424  0B32  0020               	movlb	0	; select bank0
 12425  0B33  01DD               	clrf	setRF_DimmerLights@on
 12426  0B34  0868               	movf	DlyOff_Main@sw,w
 12427  0B35  3187  2793         	fcall	_setRF_DimmerLights
 12428  0B37  0008               	return
 12429  0B38                     __end_of_DlyOff_Main:	
 12430                           
 12431                           	psect	text76
 12432  1645                     __ptext76:	
 12433 ;; *************** function _setDimmerLights_SwOn *****************
 12434 ;; Defined at:
 12435 ;;		line 556 in file "../src/Dimmer_B1.c"
 12436 ;; Parameters:    Size  Location     Type
 12437 ;;  sw              1    wreg     unsigned char 
 12438 ;; Auto vars:     Size  Location     Type
 12439 ;;  sw              1   68[BANK0 ] unsigned char 
 12440 ;;  idle            1   67[BANK0 ] unsigned char 
 12441 ;; Return value:  Size  Location     Type
 12442 ;;		None               void
 12443 ;; Registers used:
 12444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12445 ;; Tracked objects:
 12446 ;;		On entry : 0/0
 12447 ;;		On exit  : 0/0
 12448 ;;		Unchanged: 0/0
 12449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;Total ram usage:        3 bytes
 12455 ;; Hardware stack levels used:    1
 12456 ;; Hardware stack levels required when called:    9
 12457 ;; This function calls:
 12458 ;;		_DimmerLightsPointSelect
 12459 ;;		_getAll_DimmerLights_AdjGO
 12460 ;;		_setBuz
 12461 ;;		_setDimmerLights_Trigger
 12462 ;;		_setRF_DimmerLights
 12463 ;;		_setTxData
 12464 ;; This function is called by:
 12465 ;;		_DlyOff_Main
 12466 ;;		_setRFSW_Control
 12467 ;;		_setSw_Main
 12468 ;; This function uses a non-reentrant model
 12469 ;;
 12470                           
 12471                           
 12472                           ;psect for function _setDimmerLights_SwOn
 12473  1645                     _setDimmerLights_SwOn:	
 12474                           
 12475                           ;incstack = 0
 12476                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12477                           ;setDimmerLights_SwOn@sw stored from wreg
 12478  1645  0020               	movlb	0	; select bank0
 12479  1646  00E4               	movwf	setDimmerLights_SwOn@sw
 12480                           
 12481                           ;Dimmer_B1.c: 557: DimmerLightsPointSelect(sw);
 12482  1647  0864               	movf	setDimmerLights_SwOn@sw,w
 12483  1648  319F  2763  3196   	fcall	_DimmerLightsPointSelect
 12484                           
 12485                           ;Dimmer_B1.c: 558: char idle = 0;
 12486  164B  0020               	movlb	0	; select bank0
 12487  164C  01E3               	clrf	setDimmerLights_SwOn@idle
 12488                           
 12489                           ;Dimmer_B1.c: 560: idle = getAll_DimmerLights_AdjGO();
 12490  164D  3190  20B0  3196   	fcall	_getAll_DimmerLights_AdjGO
 12491  1650  0020               	movlb	0	; select bank0
 12492  1651  00E2               	movwf	??_setDimmerLights_SwOn
 12493  1652  0862               	movf	??_setDimmerLights_SwOn,w
 12494  1653  00E3               	movwf	setDimmerLights_SwOn@idle
 12495                           
 12496                           ;Dimmer_B1.c: 562: if (idle == 0) {
 12497  1654  08E3               	movf	setDimmerLights_SwOn@idle,f
 12498  1655  1D03               	skipz
 12499  1656  0008               	return
 12500                           
 12501                           ;Dimmer_B1.c: 563: DimmerLights->SwFlag = 1;
 12502  1657  086D               	movf	_DimmerLights,w
 12503  1658  3E09               	addlw	9
 12504  1659  0086               	movwf	6
 12505  165A  3001               	movlw	1	; select bank2/3
 12506  165B  0087               	movwf	7
 12507  165C  1701               	bsf	1,6
 12508                           
 12509                           ;Dimmer_B1.c: 564: setBuz(1, 100);
 12510  165D  3064               	movlw	100
 12511  165E  00A9               	movwf	setBuz@time
 12512  165F  3000               	movlw	0
 12513  1660  00AA               	movwf	setBuz@time+1
 12514  1661  3001               	movlw	1
 12515  1662  3188  20A8  3196   	fcall	_setBuz
 12516                           
 12517                           ;Dimmer_B1.c: 565: if (DimmerLights->Status == 0) {
 12518  1665  0020               	movlb	0	; select bank0
 12519  1666  086D               	movf	_DimmerLights,w
 12520  1667  0086               	movwf	6
 12521  1668  3001               	movlw	1	; select bank2/3
 12522  1669  0087               	movwf	7
 12523  166A  1A81               	btfsc	1,5
 12524  166B  2E81               	goto	l8120
 12525                           
 12526                           ;Dimmer_B1.c: 566: DimmerLights->Status = 1;
 12527  166C  086D               	movf	_DimmerLights,w
 12528  166D  0086               	movwf	6
 12529  166E  3001               	movlw	1	; select bank2/3
 12530  166F  0087               	movwf	7
 12531  1670  1681               	bsf	1,5
 12532                           
 12533                           ;Dimmer_B1.c: 567: setDimmerLights_Trigger(sw, 1);
 12534  1671  01A2               	clrf	setDimmerLights_Trigger@command
 12535  1672  0AA2               	incf	setDimmerLights_Trigger@command,f
 12536  1673  0864               	movf	setDimmerLights_SwOn@sw,w
 12537  1674  3191  217A  3196   	fcall	_setDimmerLights_Trigger
 12538                           
 12539                           ;Dimmer_B1.c: 568: setRF_DimmerLights(sw, 1);
 12540  1677  0020               	movlb	0	; select bank0
 12541  1678  01DD               	clrf	setRF_DimmerLights@on
 12542  1679  0ADD               	incf	setRF_DimmerLights@on,f
 12543  167A  0864               	movf	setDimmerLights_SwOn@sw,w
 12544  167B  3187  2793  3196   	fcall	_setRF_DimmerLights
 12545                           
 12546                           ;Dimmer_B1.c: 569: setTxData();
 12547  167E  3186  2622         	fcall	_setTxData
 12548                           
 12549                           ;Dimmer_B1.c: 570: } else {
 12550  1680  0008               	return
 12551  1681                     l8120:	
 12552                           
 12553                           ;Dimmer_B1.c: 571: DimmerLights->Status = 0;
 12554  1681  0020               	movlb	0	; select bank0
 12555  1682  086D               	movf	_DimmerLights,w
 12556  1683  0086               	movwf	6
 12557  1684  3001               	movlw	1	; select bank2/3
 12558  1685  0087               	movwf	7
 12559  1686  1281               	bcf	1,5
 12560  1687  0008               	return
 12561  1688                     __end_of_setDimmerLights_SwOn:	
 12562                           
 12563                           	psect	text77
 12564  08A8                     __ptext77:	
 12565 ;; *************** function _setBuz *****************
 12566 ;; Defined at:
 12567 ;;		line 22 in file "../src/Buzzer_B1.c"
 12568 ;; Parameters:    Size  Location     Type
 12569 ;;  count           1    wreg     unsigned char 
 12570 ;;  time            2    9[BANK0 ] int 
 12571 ;; Auto vars:     Size  Location     Type
 12572 ;;  count           1   12[BANK0 ] unsigned char 
 12573 ;; Return value:  Size  Location     Type
 12574 ;;		None               void
 12575 ;; Registers used:
 12576 ;;		wreg, status,2, status,0, pclath, cstack
 12577 ;; Tracked objects:
 12578 ;;		On entry : 0/0
 12579 ;;		On exit  : 0/0
 12580 ;;		Unchanged: 0/0
 12581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12582 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12585 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12586 ;;Total ram usage:        4 bytes
 12587 ;; Hardware stack levels used:    1
 12588 ;; Hardware stack levels required when called:    6
 12589 ;; This function calls:
 12590 ;;		___awdiv
 12591 ;; This function is called by:
 12592 ;;		_setDimmerLights_Main
 12593 ;;		_setDimmerLights_SwOn
 12594 ;;		_my_MainTimer
 12595 ;;		_setMain_Exception
 12596 ;;		_setLog_Code
 12597 ;;		_setControl_Lights_Table
 12598 ;;		_setSw_Main
 12599 ;; This function uses a non-reentrant model
 12600 ;;
 12601                           
 12602                           
 12603                           ;psect for function _setBuz
 12604  08A8                     _setBuz:	
 12605                           
 12606                           ;incstack = 0
 12607                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 12608                           ;setBuz@count stored from wreg
 12609  08A8  0020               	movlb	0	; select bank0
 12610  08A9  00AC               	movwf	setBuz@count
 12611                           
 12612                           ;Buzzer_B1.c: 23: time /= 10;
 12613  08AA  300A               	movlw	10
 12614  08AB  00A0               	movwf	___awdiv@divisor
 12615  08AC  3000               	movlw	0
 12616  08AD  00A1               	movwf	___awdiv@divisor+1
 12617  08AE  082A               	movf	setBuz@time+1,w
 12618  08AF  01A3               	clrf	___awdiv@dividend+1
 12619  08B0  07A3               	addwf	___awdiv@dividend+1,f
 12620  08B1  0829               	movf	setBuz@time,w
 12621  08B2  01A2               	clrf	___awdiv@dividend
 12622  08B3  07A2               	addwf	___awdiv@dividend,f
 12623  08B4  3188  2054  3188   	fcall	___awdiv
 12624  08B7  0020               	movlb	0	; select bank0
 12625  08B8  0821               	movf	?___awdiv+1,w
 12626  08B9  01AA               	clrf	setBuz@time+1
 12627  08BA  07AA               	addwf	setBuz@time+1,f
 12628  08BB  0820               	movf	?___awdiv,w
 12629  08BC  01A9               	clrf	setBuz@time
 12630  08BD  07A9               	addwf	setBuz@time,f
 12631                           
 12632                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 12633  08BE  0021               	movlb	1	; select bank1
 12634  08BF  1C30               	btfss	_Buz1^(0+128),0
 12635  08C0  0008               	return
 12636                           
 12637                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 12638  08C1  18B0               	btfsc	_Buz1^(0+128),1
 12639  08C2  28D9               	goto	l94
 12640                           
 12641                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 12642  08C3  14B0               	bsf	_Buz1^(0+128),1
 12643                           
 12644                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 12645  08C4  01B1               	clrf	(_Buz1^(0+128)+1)
 12646  08C5  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 12647                           
 12648                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 12649  08C6  0020               	movlb	0	; select bank0
 12650  08C7  082C               	movf	setBuz@count,w
 12651  08C8  00AB               	movwf	??_setBuz
 12652  08C9  082B               	movf	??_setBuz,w
 12653  08CA  0021               	movlb	1	; select bank1
 12654  08CB  00B3               	movwf	(_Buz1^(0+128)+3)
 12655                           
 12656                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 12657  08CC  0020               	movlb	0	; select bank0
 12658  08CD  082A               	movf	setBuz@time+1,w
 12659  08CE  0021               	movlb	1	; select bank1
 12660  08CF  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 12661  08D0  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 12662  08D1  0020               	movlb	0	; select bank0
 12663  08D2  0829               	movf	setBuz@time,w
 12664  08D3  0021               	movlb	1	; select bank1
 12665  08D4  01B6               	clrf	(_Buz1^(0+128)+6)
 12666  08D5  07B6               	addwf	(_Buz1^(0+128)+6),f
 12667                           
 12668                           ;Buzzer_B1.c: 30: RB3 = 1;
 12669  08D6  0020               	movlb	0	; select bank0
 12670  08D7  158D               	bsf	13,3	;volatile
 12671                           
 12672                           ;Buzzer_B1.c: 31: } else {
 12673  08D8  0008               	return
 12674  08D9                     l94:	
 12675                           
 12676                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 12677  08D9  19B0               	btfsc	_Buz1^(0+128),3
 12678  08DA  28ED               	goto	l96
 12679                           
 12680                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 12681  08DB  15B0               	bsf	_Buz1^(0+128),3
 12682                           
 12683                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 12684  08DC  0020               	movlb	0	; select bank0
 12685  08DD  082C               	movf	setBuz@count,w
 12686  08DE  00AB               	movwf	??_setBuz
 12687  08DF  082B               	movf	??_setBuz,w
 12688  08E0  0021               	movlb	1	; select bank1
 12689  08E1  00B4               	movwf	(_Buz1^(0+128)+4)
 12690                           
 12691                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 12692  08E2  0020               	movlb	0	; select bank0
 12693  08E3  082A               	movf	setBuz@time+1,w
 12694  08E4  0021               	movlb	1	; select bank1
 12695  08E5  01B9               	clrf	((_Buz1+1)^(0+128)+8)
 12696  08E6  07B9               	addwf	((_Buz1+1)^(0+128)+8),f
 12697  08E7  0020               	movlb	0	; select bank0
 12698  08E8  0829               	movf	setBuz@time,w
 12699  08E9  0021               	movlb	1	; select bank1
 12700  08EA  01B8               	clrf	(_Buz1^(0+128)+8)
 12701  08EB  07B8               	addwf	(_Buz1^(0+128)+8),f
 12702                           
 12703                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 12704  08EC  0008               	return
 12705  08ED                     l96:	
 12706  08ED  1A30               	btfsc	_Buz1^(0+128),4
 12707  08EE  0008               	return
 12708                           
 12709                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 12710  08EF  1630               	bsf	_Buz1^(0+128),4
 12711                           
 12712                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 12713  08F0  0020               	movlb	0	; select bank0
 12714  08F1  082C               	movf	setBuz@count,w
 12715  08F2  00AB               	movwf	??_setBuz
 12716  08F3  082B               	movf	??_setBuz,w
 12717  08F4  0021               	movlb	1	; select bank1
 12718  08F5  00B5               	movwf	(_Buz1^(0+128)+5)
 12719                           
 12720                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 12721  08F6  0020               	movlb	0	; select bank0
 12722  08F7  082A               	movf	setBuz@time+1,w
 12723  08F8  0021               	movlb	1	; select bank1
 12724  08F9  01BB               	clrf	((_Buz1+1)^(0+128)+10)
 12725  08FA  07BB               	addwf	((_Buz1+1)^(0+128)+10),f
 12726  08FB  0020               	movlb	0	; select bank0
 12727  08FC  0829               	movf	setBuz@time,w
 12728  08FD  0021               	movlb	1	; select bank1
 12729  08FE  01BA               	clrf	(_Buz1^(0+128)+10)
 12730  08FF  07BA               	addwf	(_Buz1^(0+128)+10),f
 12731  0900  0008               	return
 12732  0901                     __end_of_setBuz:	
 12733                           
 12734                           	psect	text78
 12735  0854                     __ptext78:	
 12736 ;; *************** function ___awdiv *****************
 12737 ;; Defined at:
 12738 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 12739 ;; Parameters:    Size  Location     Type
 12740 ;;  divisor         2    0[BANK0 ] int 
 12741 ;;  dividend        2    2[BANK0 ] int 
 12742 ;; Auto vars:     Size  Location     Type
 12743 ;;  quotient        2    7[BANK0 ] int 
 12744 ;;  sign            1    6[BANK0 ] unsigned char 
 12745 ;;  counter         1    5[BANK0 ] unsigned char 
 12746 ;; Return value:  Size  Location     Type
 12747 ;;                  2    0[BANK0 ] int 
 12748 ;; Registers used:
 12749 ;;		wreg, status,2, status,0
 12750 ;; Tracked objects:
 12751 ;;		On entry : 0/0
 12752 ;;		On exit  : 0/0
 12753 ;;		Unchanged: 0/0
 12754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12755 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12758 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;Total ram usage:        9 bytes
 12760 ;; Hardware stack levels used:    1
 12761 ;; Hardware stack levels required when called:    5
 12762 ;; This function calls:
 12763 ;;		Nothing
 12764 ;; This function is called by:
 12765 ;;		_setBuz
 12766 ;; This function uses a non-reentrant model
 12767 ;;
 12768                           
 12769                           
 12770                           ;psect for function ___awdiv
 12771  0854                     ___awdiv:	
 12772                           
 12773                           ;incstack = 0
 12774                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12775  0854  0020               	movlb	0	; select bank0
 12776  0855  01A6               	clrf	___awdiv@sign
 12777  0856  1FA1               	btfss	___awdiv@divisor+1,7
 12778  0857  285F               	goto	l7914
 12779  0858  09A0               	comf	___awdiv@divisor,f
 12780  0859  09A1               	comf	___awdiv@divisor+1,f
 12781  085A  0AA0               	incf	___awdiv@divisor,f
 12782  085B  1903               	skipnz
 12783  085C  0AA1               	incf	___awdiv@divisor+1,f
 12784  085D  01A6               	clrf	___awdiv@sign
 12785  085E  0AA6               	incf	___awdiv@sign,f
 12786  085F                     l7914:	
 12787  085F  1FA3               	btfss	___awdiv@dividend+1,7
 12788  0860  286A               	goto	l7920
 12789  0861  09A2               	comf	___awdiv@dividend,f
 12790  0862  09A3               	comf	___awdiv@dividend+1,f
 12791  0863  0AA2               	incf	___awdiv@dividend,f
 12792  0864  1903               	skipnz
 12793  0865  0AA3               	incf	___awdiv@dividend+1,f
 12794  0866  3001               	movlw	1
 12795  0867  00A4               	movwf	??___awdiv
 12796  0868  0824               	movf	??___awdiv,w
 12797  0869  06A6               	xorwf	___awdiv@sign,f
 12798  086A                     l7920:	
 12799  086A  01A7               	clrf	___awdiv@quotient
 12800  086B  01A8               	clrf	___awdiv@quotient+1
 12801  086C  0821               	movf	___awdiv@divisor+1,w
 12802  086D  0420               	iorwf	___awdiv@divisor,w
 12803  086E  1903               	skipnz
 12804  086F  2899               	goto	l7942
 12805  0870  01A5               	clrf	___awdiv@counter
 12806  0871  0AA5               	incf	___awdiv@counter,f
 12807  0872                     l7930:	
 12808  0872  1BA1               	btfsc	___awdiv@divisor+1,7
 12809  0873  287E               	goto	l7932
 12810  0874  3001               	movlw	1
 12811  0875                     u8275:	
 12812  0875  35A0               	lslf	___awdiv@divisor,f
 12813  0876  0DA1               	rlf	___awdiv@divisor+1,f
 12814  0877  0B89               	decfsz	9,f
 12815  0878  2875               	goto	u8275
 12816  0879  3001               	movlw	1
 12817  087A  00A4               	movwf	??___awdiv
 12818  087B  0824               	movf	??___awdiv,w
 12819  087C  07A5               	addwf	___awdiv@counter,f
 12820  087D  2872               	goto	l7930
 12821  087E                     l7932:	
 12822  087E  3001               	movlw	1
 12823  087F                     u8295:	
 12824  087F  35A7               	lslf	___awdiv@quotient,f
 12825  0880  0DA8               	rlf	___awdiv@quotient+1,f
 12826  0881  0B89               	decfsz	9,f
 12827  0882  287F               	goto	u8295
 12828  0883  0821               	movf	___awdiv@divisor+1,w
 12829  0884  0223               	subwf	___awdiv@dividend+1,w
 12830  0885  1D03               	skipz
 12831  0886  2889               	goto	u8305
 12832  0887  0820               	movf	___awdiv@divisor,w
 12833  0888  0222               	subwf	___awdiv@dividend,w
 12834  0889                     u8305:	
 12835  0889  1C03               	skipc
 12836  088A  2890               	goto	l7938
 12837  088B  0820               	movf	___awdiv@divisor,w
 12838  088C  02A2               	subwf	___awdiv@dividend,f
 12839  088D  0821               	movf	___awdiv@divisor+1,w
 12840  088E  3BA3               	subwfb	___awdiv@dividend+1,f
 12841  088F  1427               	bsf	___awdiv@quotient,0
 12842  0890                     l7938:	
 12843  0890  3001               	movlw	1
 12844  0891                     u8315:	
 12845  0891  36A1               	lsrf	___awdiv@divisor+1,f
 12846  0892  0CA0               	rrf	___awdiv@divisor,f
 12847  0893  0B89               	decfsz	9,f
 12848  0894  2891               	goto	u8315
 12849  0895  3001               	movlw	1
 12850  0896  02A5               	subwf	___awdiv@counter,f
 12851  0897  1D03               	btfss	3,2
 12852  0898  287E               	goto	l7932
 12853  0899                     l7942:	
 12854  0899  0826               	movf	___awdiv@sign,w
 12855  089A  1903               	btfsc	3,2
 12856  089B  28A1               	goto	l7946
 12857  089C  09A7               	comf	___awdiv@quotient,f
 12858  089D  09A8               	comf	___awdiv@quotient+1,f
 12859  089E  0AA7               	incf	___awdiv@quotient,f
 12860  089F  1903               	skipnz
 12861  08A0  0AA8               	incf	___awdiv@quotient+1,f
 12862  08A1                     l7946:	
 12863  08A1  0828               	movf	___awdiv@quotient+1,w
 12864  08A2  01A1               	clrf	?___awdiv+1
 12865  08A3  07A1               	addwf	?___awdiv+1,f
 12866  08A4  0827               	movf	___awdiv@quotient,w
 12867  08A5  01A0               	clrf	?___awdiv
 12868  08A6  07A0               	addwf	?___awdiv,f
 12869  08A7  0008               	return
 12870  08A8                     __end_of___awdiv:	
 12871                           
 12872                           	psect	text79
 12873  10B0                     __ptext79:	
 12874 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 12875 ;; Defined at:
 12876 ;;		line 541 in file "../src/Dimmer_B1.c"
 12877 ;; Parameters:    Size  Location     Type
 12878 ;;		None
 12879 ;; Auto vars:     Size  Location     Type
 12880 ;;  adjgo           1    2[BANK0 ] unsigned char 
 12881 ;; Return value:  Size  Location     Type
 12882 ;;                  1    wreg      unsigned char 
 12883 ;; Registers used:
 12884 ;;		wreg, status,2
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12894 ;;Total ram usage:        3 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; Hardware stack levels required when called:    5
 12897 ;; This function calls:
 12898 ;;		Nothing
 12899 ;; This function is called by:
 12900 ;;		_setDimmerLights_SwOn
 12901 ;;		_setDimmerLights_AdjControl
 12902 ;; This function uses a non-reentrant model
 12903 ;;
 12904                           
 12905                           
 12906                           ;psect for function _getAll_DimmerLights_AdjGO
 12907  10B0                     _getAll_DimmerLights_AdjGO:	
 12908                           
 12909                           ;Dimmer_B1.c: 542: char adjgo = 0;
 12910                           
 12911                           ;incstack = 0
 12912                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 12913  10B0  0020               	movlb	0	; select bank0
 12914  10B1  01A2               	clrf	getAll_DimmerLights_AdjGO@adjgo
 12915                           
 12916                           ;Dimmer_B1.c: 547: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 12917  10B2  01A1               	clrf	_getAll_DimmerLights_AdjGO$2359
 12918  10B3  0AA1               	incf	_getAll_DimmerLights_AdjGO$2359,f
 12919  10B4  0022               	movlb	2	; select bank2
 12920  10B5  1DCB               	btfss	(_DimmerLights1^(0+256)+8),3
 12921  10B6  19DA               	btfsc	(_DimmerLights2^(0+256)+8),3
 12922  10B7  28BA               	goto	l8032
 12923  10B8  0020               	movlb	0	; select bank0
 12924  10B9  01A1               	clrf	_getAll_DimmerLights_AdjGO$2359
 12925  10BA                     l8032:	
 12926  10BA  0020               	movlb	0	; select bank0
 12927  10BB  0821               	movf	_getAll_DimmerLights_AdjGO$2359,w
 12928  10BC  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 12929  10BD  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 12930  10BE  00A2               	movwf	getAll_DimmerLights_AdjGO@adjgo
 12931                           
 12932                           ;Dimmer_B1.c: 550: adjgo = DimmerLights1.AdjGo == 1;
 12933  10BF  3000               	movlw	0
 12934  10C0  0022               	movlb	2	; select bank2
 12935  10C1  19CB               	btfsc	(_DimmerLights1^(0+256)+8),3
 12936  10C2  3001               	movlw	1
 12937  10C3  0020               	movlb	0	; select bank0
 12938  10C4  00A2               	movwf	getAll_DimmerLights_AdjGO@adjgo
 12939                           
 12940                           ;Dimmer_B1.c: 552: return adjgo;
 12941  10C5  0822               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 12942  10C6  0008               	return
 12943  10C7                     __end_of_getAll_DimmerLights_AdjGO:	
 12944                           
 12945                           	psect	text80
 12946  0C05                     __ptext80:	
 12947 ;; *************** function _setDimmerLights_SwOff *****************
 12948 ;; Defined at:
 12949 ;;		line 577 in file "../src/Dimmer_B1.c"
 12950 ;; Parameters:    Size  Location     Type
 12951 ;;  sw              1    wreg     unsigned char 
 12952 ;; Auto vars:     Size  Location     Type
 12953 ;;  sw              1   69[BANK0 ] unsigned char 
 12954 ;;  command         1   68[BANK0 ] unsigned char 
 12955 ;; Return value:  Size  Location     Type
 12956 ;;		None               void
 12957 ;; Registers used:
 12958 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12959 ;; Tracked objects:
 12960 ;;		On entry : 0/0
 12961 ;;		On exit  : 0/0
 12962 ;;		Unchanged: 0/0
 12963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12968 ;;Total ram usage:        4 bytes
 12969 ;; Hardware stack levels used:    1
 12970 ;; Hardware stack levels required when called:    9
 12971 ;; This function calls:
 12972 ;;		_DimmerLightsPointSelect
 12973 ;;		_setDelayOff_GO
 12974 ;;		_setDimmerLights_Trigger
 12975 ;;		_setDimmerLights_TriggerAdj
 12976 ;;		_setRF_DimmerLights
 12977 ;;		_setTxData
 12978 ;; This function is called by:
 12979 ;;		_DlyOff_Main
 12980 ;;		_setDimmerLights_ErrorClose
 12981 ;;		_setRFSW_Control
 12982 ;;		_setSw_Main
 12983 ;; This function uses a non-reentrant model
 12984 ;;
 12985                           
 12986                           
 12987                           ;psect for function _setDimmerLights_SwOff
 12988  0C05                     _setDimmerLights_SwOff:	
 12989                           
 12990                           ;incstack = 0
 12991                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12992                           ;setDimmerLights_SwOff@sw stored from wreg
 12993  0C05  0020               	movlb	0	; select bank0
 12994  0C06  00E5               	movwf	setDimmerLights_SwOff@sw
 12995                           
 12996                           ;Dimmer_B1.c: 578: DimmerLightsPointSelect(sw);
 12997  0C07  0865               	movf	setDimmerLights_SwOff@sw,w
 12998  0C08  319F  2763  318C   	fcall	_DimmerLightsPointSelect
 12999                           
 13000                           ;Dimmer_B1.c: 579: char command = DimmerLights->Status == 1 ? 1 : 0;
 13001  0C0B  0020               	movlb	0	; select bank0
 13002  0C0C  086D               	movf	_DimmerLights,w
 13003  0C0D  0086               	movwf	6
 13004  0C0E  3001               	movlw	1	; select bank2/3
 13005  0C0F  0087               	movwf	7
 13006  0C10  3000               	movlw	0
 13007  0C11  1A81               	btfsc	1,5
 13008  0C12  3001               	movlw	1
 13009  0C13  00E4               	movwf	setDimmerLights_SwOff@command
 13010                           
 13011                           ;Dimmer_B1.c: 580: if (DimmerLights->SwFlag == 1) {
 13012  0C14  086D               	movf	_DimmerLights,w
 13013  0C15  3E09               	addlw	9
 13014  0C16  0086               	movwf	6
 13015  0C17  3001               	movlw	1	; select bank2/3
 13016  0C18  0087               	movwf	7
 13017  0C19  1F01               	btfss	1,6
 13018  0C1A  0008               	return
 13019                           
 13020                           ;Dimmer_B1.c: 581: DimmerLights->SwFlag = 0;
 13021  0C1B  086D               	movf	_DimmerLights,w
 13022  0C1C  3E09               	addlw	9
 13023  0C1D  0086               	movwf	6
 13024  0C1E  3001               	movlw	1	; select bank2/3
 13025  0C1F  0087               	movwf	7
 13026  0C20  1301               	bcf	1,6
 13027                           
 13028                           ;Dimmer_B1.c: 582: if (DimmerLights->Status == 1) {
 13029  0C21  086D               	movf	_DimmerLights,w
 13030  0C22  0086               	movwf	6
 13031  0C23  3001               	movlw	1	; select bank2/3
 13032  0C24  0087               	movwf	7
 13033  0C25  1E81               	btfss	1,5
 13034  0C26  2C56               	goto	l8150
 13035                           
 13036                           ;Dimmer_B1.c: 583: if (DimmerLights->SwAdj == 1) {
 13037  0C27  086D               	movf	_DimmerLights,w
 13038  0C28  3E09               	addlw	9
 13039  0C29  0086               	movwf	6
 13040  0C2A  3001               	movlw	1	; select bank2/3
 13041  0C2B  0087               	movwf	7
 13042  0C2C  1F81               	btfss	1,7
 13043  0C2D  0008               	return
 13044                           
 13045                           ;Dimmer_B1.c: 584: DimmerLights->SwAdj = 0;
 13046  0C2E  086D               	movf	_DimmerLights,w
 13047  0C2F  3E09               	addlw	9
 13048  0C30  0086               	movwf	6
 13049  0C31  3001               	movlw	1	; select bank2/3
 13050  0C32  0087               	movwf	7
 13051  0C33  1381               	bcf	1,7
 13052                           
 13053                           ;Dimmer_B1.c: 585: setDimmerLights_TriggerAdj(sw, 0);
 13054  0C34  01A2               	clrf	setDimmerLights_TriggerAdj@command
 13055  0C35  0865               	movf	setDimmerLights_SwOff@sw,w
 13056  0C36  3191  21D6  318C   	fcall	_setDimmerLights_TriggerAdj
 13057                           
 13058                           ;Dimmer_B1.c: 586: product->Data[17]=product->Data[26 + sw];
 13059  0C39  0020               	movlb	0	; select bank0
 13060  0C3A  0865               	movf	setDimmerLights_SwOff@sw,w
 13061  0C3B  3E1A               	addlw	26
 13062  0C3C  076F               	addwf	_product,w
 13063  0C3D  00E2               	movwf	??_setDimmerLights_SwOff
 13064  0C3E  0862               	movf	??_setDimmerLights_SwOff,w
 13065  0C3F  0086               	movwf	6
 13066  0C40  3002               	movlw	2	; select bank4/5
 13067  0C41  0087               	movwf	7
 13068  0C42  0801               	movf	1,w
 13069  0C43  00E3               	movwf	??_setDimmerLights_SwOff+1
 13070  0C44  086F               	movf	_product,w
 13071  0C45  3E11               	addlw	17
 13072  0C46  0086               	movwf	6
 13073  0C47  3002               	movlw	2	; select bank4/5
 13074  0C48  0087               	movwf	7
 13075  0C49  0863               	movf	??_setDimmerLights_SwOff+1,w
 13076  0C4A  0081               	movwf	1
 13077                           
 13078                           ;Dimmer_B1.c: 587: setRF_DimmerLights(sw, command);
 13079  0C4B  0864               	movf	setDimmerLights_SwOff@command,w
 13080  0C4C  00E2               	movwf	??_setDimmerLights_SwOff
 13081  0C4D  0862               	movf	??_setDimmerLights_SwOff,w
 13082  0C4E  00DD               	movwf	setRF_DimmerLights@on
 13083  0C4F  0865               	movf	setDimmerLights_SwOff@sw,w
 13084  0C50  3187  2793  318C   	fcall	_setRF_DimmerLights
 13085                           
 13086                           ;Dimmer_B1.c: 588: setTxData();
 13087  0C53  3186  2622         	fcall	_setTxData
 13088                           
 13089                           ;Dimmer_B1.c: 589: }
 13090                           ;Dimmer_B1.c: 590: } else {
 13091  0C55  0008               	return
 13092  0C56                     l8150:	
 13093                           
 13094                           ;Dimmer_B1.c: 591: setDimmerLights_Trigger(sw, 0);
 13095  0C56  0020               	movlb	0	; select bank0
 13096  0C57  01A2               	clrf	setDimmerLights_Trigger@command
 13097  0C58  0865               	movf	setDimmerLights_SwOff@sw,w
 13098  0C59  3191  217A  318C   	fcall	_setDimmerLights_Trigger
 13099                           
 13100                           ;Dimmer_B1.c: 592: setDelayOff_GO(sw, 0, 0);
 13101  0C5C  0020               	movlb	0	; select bank0
 13102  0C5D  01AA               	clrf	setDelayOff_GO@command
 13103  0C5E  01AB               	clrf	setDelayOff_GO@value
 13104  0C5F  0865               	movf	setDimmerLights_SwOff@sw,w
 13105  0C60  318A  2215  318C   	fcall	_setDelayOff_GO
 13106                           
 13107                           ;Dimmer_B1.c: 593: setRF_DimmerLights(sw, command);
 13108  0C63  0020               	movlb	0	; select bank0
 13109  0C64  0864               	movf	setDimmerLights_SwOff@command,w
 13110  0C65  00E2               	movwf	??_setDimmerLights_SwOff
 13111  0C66  0862               	movf	??_setDimmerLights_SwOff,w
 13112  0C67  00DD               	movwf	setRF_DimmerLights@on
 13113  0C68  0865               	movf	setDimmerLights_SwOff@sw,w
 13114  0C69  3187  2793  318C   	fcall	_setRF_DimmerLights
 13115                           
 13116                           ;Dimmer_B1.c: 594: setTxData();
 13117  0C6C  3186  2622         	fcall	_setTxData
 13118  0C6E  0008               	return
 13119  0C6F                     __end_of_setDimmerLights_SwOff:	
 13120                           
 13121                           	psect	text81
 13122  0622                     __ptext81:	
 13123 ;; *************** function _setTxData *****************
 13124 ;; Defined at:
 13125 ;;		line 207 in file "../src/RF_Control_B1.c"
 13126 ;; Parameters:    Size  Location     Type
 13127 ;;		None
 13128 ;; Auto vars:     Size  Location     Type
 13129 ;;  i               1    0        unsigned char 
 13130 ;; Return value:  Size  Location     Type
 13131 ;;		None               void
 13132 ;; Registers used:
 13133 ;;		wreg, fsr1l, fsr1h
 13134 ;; Tracked objects:
 13135 ;;		On entry : 0/0
 13136 ;;		On exit  : 0/0
 13137 ;;		Unchanged: 0/0
 13138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13141 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13142 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13143 ;;Total ram usage:        1 bytes
 13144 ;; Hardware stack levels used:    1
 13145 ;; Hardware stack levels required when called:    5
 13146 ;; This function calls:
 13147 ;;		Nothing
 13148 ;; This function is called by:
 13149 ;;		_setDimmerLights_SwOn
 13150 ;;		_setDimmerLights_SwOff
 13151 ;;		_setDimmerLights_Adj
 13152 ;;		_setControl_Lights_Table
 13153 ;;		_setRFSW_AdjControl
 13154 ;; This function uses a non-reentrant model
 13155 ;;
 13156                           
 13157                           
 13158                           ;psect for function _setTxData
 13159  0622                     _setTxData:	
 13160                           
 13161                           ;RF_Control_B1.c: 208: char i;
 13162                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
 13163                           
 13164                           ;incstack = 0
 13165                           ; Regs used in _setTxData: [wregfsr1]
 13166  0622  0021               	movlb	1	; select bank1
 13167  0623  1C3C               	btfss	_RF1^(0+128),0
 13168  0624  0008               	return
 13169                           
 13170                           ;RF_Control_B1.c: 211: RF1.TransceiveGO = 1;
 13171  0625  153C               	bsf	_RF1^(0+128),2
 13172                           
 13173                           ;RF_Control_B1.c: 212: RF1.RunTime = 20;
 13174  0626  3014               	movlw	20
 13175  0627  00C3               	movwf	(_RF1^(0+128)+7)
 13176  0628  3000               	movlw	0
 13177  0629  00C4               	movwf	(_RF1^(0+128)+8)
 13178                           
 13179                           ;RF_Control_B1.c: 222: RF_Data[0] = 0x63;
 13180  062A  3063               	movlw	99
 13181  062B  0020               	movlb	0	; select bank0
 13182  062C  00A0               	movwf	??_setTxData
 13183  062D  0820               	movf	??_setTxData,w
 13184  062E  0022               	movlb	2	; select bank2
 13185  062F  00A0               	movwf	_RF_Data^(0+256)
 13186                           
 13187                           ;RF_Control_B1.c: 223: RF_Data[1] = 0x02;
 13188  0630  3002               	movlw	2
 13189  0631  0020               	movlb	0	; select bank0
 13190  0632  00A0               	movwf	??_setTxData
 13191  0633  0820               	movf	??_setTxData,w
 13192  0634  0022               	movlb	2	; select bank2
 13193  0635  00A1               	movwf	(_RF_Data^(0+256)+1)
 13194                           
 13195                           ;RF_Control_B1.c: 224: RF_Data[2] = product->Data[2];
 13196  0636  0020               	movlb	0	; select bank0
 13197  0637  086F               	movf	_product,w
 13198  0638  0086               	movwf	6
 13199  0639  3002               	movlw	2	; select bank4/5
 13200  063A  0087               	movwf	7
 13201  063B  3002               	movlw	2	; select bank4/5
 13202  063C  3F42               	moviw [2]fsr1
 13203  063D  0022               	movlb	2	; select bank2
 13204  063E  00A2               	movwf	(_RF_Data^(0+256)+2)
 13205                           
 13206                           ;RF_Control_B1.c: 225: RF_Data[3] = product->Data[3];
 13207  063F  0020               	movlb	0	; select bank0
 13208  0640  086F               	movf	_product,w
 13209  0641  0086               	movwf	6
 13210  0642  3002               	movlw	2	; select bank4/5
 13211  0643  0087               	movwf	7
 13212  0644  3002               	movlw	2	; select bank4/5
 13213  0645  3F43               	moviw [3]fsr1
 13214  0646  0022               	movlb	2	; select bank2
 13215  0647  00A3               	movwf	(_RF_Data^(0+256)+3)
 13216                           
 13217                           ;RF_Control_B1.c: 226: RF_Data[4] = product->Data[4];
 13218  0648  0020               	movlb	0	; select bank0
 13219  0649  086F               	movf	_product,w
 13220  064A  0086               	movwf	6
 13221  064B  3002               	movlw	2	; select bank4/5
 13222  064C  0087               	movwf	7
 13223  064D  3002               	movlw	2	; select bank4/5
 13224  064E  3F44               	moviw [4]fsr1
 13225  064F  0022               	movlb	2	; select bank2
 13226  0650  00A4               	movwf	(_RF_Data^(0+256)+4)
 13227                           
 13228                           ;RF_Control_B1.c: 227: RF_Data[5] = product->Data[5];
 13229  0651  0020               	movlb	0	; select bank0
 13230  0652  086F               	movf	_product,w
 13231  0653  0086               	movwf	6
 13232  0654  3002               	movlw	2	; select bank4/5
 13233  0655  0087               	movwf	7
 13234  0656  3002               	movlw	2	; select bank4/5
 13235  0657  3F45               	moviw [5]fsr1
 13236  0658  0022               	movlb	2	; select bank2
 13237  0659  00A5               	movwf	(_RF_Data^(0+256)+5)
 13238                           
 13239                           ;RF_Control_B1.c: 228: RF_Data[6] = product->Data[6];
 13240  065A  0020               	movlb	0	; select bank0
 13241  065B  086F               	movf	_product,w
 13242  065C  0086               	movwf	6
 13243  065D  3002               	movlw	2	; select bank4/5
 13244  065E  0087               	movwf	7
 13245  065F  3002               	movlw	2	; select bank4/5
 13246  0660  3F46               	moviw [6]fsr1
 13247  0661  0022               	movlb	2	; select bank2
 13248  0662  00A6               	movwf	(_RF_Data^(0+256)+6)
 13249                           
 13250                           ;RF_Control_B1.c: 229: RF_Data[7] = product->Data[7];
 13251  0663  0020               	movlb	0	; select bank0
 13252  0664  086F               	movf	_product,w
 13253  0665  0086               	movwf	6
 13254  0666  3002               	movlw	2	; select bank4/5
 13255  0667  0087               	movwf	7
 13256  0668  3002               	movlw	2	; select bank4/5
 13257  0669  3F47               	moviw [7]fsr1
 13258  066A  0022               	movlb	2	; select bank2
 13259  066B  00A7               	movwf	(_RF_Data^(0+256)+7)
 13260                           
 13261                           ;RF_Control_B1.c: 230: RF_Data[8] = product->Data[8];
 13262  066C  0020               	movlb	0	; select bank0
 13263  066D  086F               	movf	_product,w
 13264  066E  0086               	movwf	6
 13265  066F  3002               	movlw	2	; select bank4/5
 13266  0670  0087               	movwf	7
 13267  0671  3002               	movlw	2	; select bank4/5
 13268  0672  3F48               	moviw [8]fsr1
 13269  0673  0022               	movlb	2	; select bank2
 13270  0674  00A8               	movwf	(_RF_Data^(0+256)+8)
 13271                           
 13272                           ;RF_Control_B1.c: 231: RF_Data[9] = product->Data[9];
 13273  0675  0020               	movlb	0	; select bank0
 13274  0676  086F               	movf	_product,w
 13275  0677  0086               	movwf	6
 13276  0678  3002               	movlw	2	; select bank4/5
 13277  0679  0087               	movwf	7
 13278  067A  3002               	movlw	2	; select bank4/5
 13279  067B  3F49               	moviw [9]fsr1
 13280  067C  0022               	movlb	2	; select bank2
 13281  067D  00A9               	movwf	(_RF_Data^(0+256)+9)
 13282                           
 13283                           ;RF_Control_B1.c: 232: RF_Data[10] = product->Data[10];
 13284  067E  0020               	movlb	0	; select bank0
 13285  067F  086F               	movf	_product,w
 13286  0680  0086               	movwf	6
 13287  0681  3002               	movlw	2	; select bank4/5
 13288  0682  0087               	movwf	7
 13289  0683  3002               	movlw	2	; select bank4/5
 13290  0684  3F4A               	moviw [10]fsr1
 13291  0685  0022               	movlb	2	; select bank2
 13292  0686  00AA               	movwf	(_RF_Data^(0+256)+10)
 13293                           
 13294                           ;RF_Control_B1.c: 233: RF_Data[11] = product->Data[11];
 13295  0687  0020               	movlb	0	; select bank0
 13296  0688  086F               	movf	_product,w
 13297  0689  0086               	movwf	6
 13298  068A  3002               	movlw	2	; select bank4/5
 13299  068B  0087               	movwf	7
 13300  068C  3002               	movlw	2	; select bank4/5
 13301  068D  3F4B               	moviw [11]fsr1
 13302  068E  0022               	movlb	2	; select bank2
 13303  068F  00AB               	movwf	(_RF_Data^(0+256)+11)
 13304                           
 13305                           ;RF_Control_B1.c: 234: RF_Data[12] = product->Data[12];
 13306  0690  0020               	movlb	0	; select bank0
 13307  0691  086F               	movf	_product,w
 13308  0692  0086               	movwf	6
 13309  0693  3002               	movlw	2	; select bank4/5
 13310  0694  0087               	movwf	7
 13311  0695  3002               	movlw	2	; select bank4/5
 13312  0696  3F4C               	moviw [12]fsr1
 13313  0697  0022               	movlb	2	; select bank2
 13314  0698  00AC               	movwf	(_RF_Data^(0+256)+12)
 13315                           
 13316                           ;RF_Control_B1.c: 235: RF_Data[13] = product->Data[13];
 13317  0699  0020               	movlb	0	; select bank0
 13318  069A  086F               	movf	_product,w
 13319  069B  0086               	movwf	6
 13320  069C  3002               	movlw	2	; select bank4/5
 13321  069D  0087               	movwf	7
 13322  069E  3002               	movlw	2	; select bank4/5
 13323  069F  3F4D               	moviw [13]fsr1
 13324  06A0  0022               	movlb	2	; select bank2
 13325  06A1  00AD               	movwf	(_RF_Data^(0+256)+13)
 13326                           
 13327                           ;RF_Control_B1.c: 236: RF_Data[14] = product->Data[14];
 13328  06A2  0020               	movlb	0	; select bank0
 13329  06A3  086F               	movf	_product,w
 13330  06A4  0086               	movwf	6
 13331  06A5  3002               	movlw	2	; select bank4/5
 13332  06A6  0087               	movwf	7
 13333  06A7  3002               	movlw	2	; select bank4/5
 13334  06A8  3F4E               	moviw [14]fsr1
 13335  06A9  0022               	movlb	2	; select bank2
 13336  06AA  00AE               	movwf	(_RF_Data^(0+256)+14)
 13337                           
 13338                           ;RF_Control_B1.c: 237: RF_Data[15] = product->Data[15];
 13339  06AB  0020               	movlb	0	; select bank0
 13340  06AC  086F               	movf	_product,w
 13341  06AD  0086               	movwf	6
 13342  06AE  3002               	movlw	2	; select bank4/5
 13343  06AF  0087               	movwf	7
 13344  06B0  3002               	movlw	2	; select bank4/5
 13345  06B1  3F4F               	moviw [15]fsr1
 13346  06B2  0022               	movlb	2	; select bank2
 13347  06B3  00AF               	movwf	(_RF_Data^(0+256)+15)
 13348                           
 13349                           ;RF_Control_B1.c: 238: RF_Data[16] = product->Data[16];
 13350  06B4  0020               	movlb	0	; select bank0
 13351  06B5  086F               	movf	_product,w
 13352  06B6  0086               	movwf	6
 13353  06B7  3002               	movlw	2	; select bank4/5
 13354  06B8  0087               	movwf	7
 13355  06B9  3002               	movlw	2	; select bank4/5
 13356  06BA  3F50               	moviw [16]fsr1
 13357  06BB  0022               	movlb	2	; select bank2
 13358  06BC  00B0               	movwf	(_RF_Data^(0+256)+16)
 13359                           
 13360                           ;RF_Control_B1.c: 239: RF_Data[17] = product->Data[17];
 13361  06BD  0020               	movlb	0	; select bank0
 13362  06BE  086F               	movf	_product,w
 13363  06BF  0086               	movwf	6
 13364  06C0  3002               	movlw	2	; select bank4/5
 13365  06C1  0087               	movwf	7
 13366  06C2  3002               	movlw	2	; select bank4/5
 13367  06C3  3F51               	moviw [17]fsr1
 13368  06C4  0022               	movlb	2	; select bank2
 13369  06C5  00B1               	movwf	(_RF_Data^(0+256)+17)
 13370                           
 13371                           ;RF_Control_B1.c: 240: RF_Data[18] = product->Data[18];
 13372  06C6  0020               	movlb	0	; select bank0
 13373  06C7  086F               	movf	_product,w
 13374  06C8  0086               	movwf	6
 13375  06C9  3002               	movlw	2	; select bank4/5
 13376  06CA  0087               	movwf	7
 13377  06CB  3002               	movlw	2	; select bank4/5
 13378  06CC  3F52               	moviw [18]fsr1
 13379  06CD  0022               	movlb	2	; select bank2
 13380  06CE  00B2               	movwf	(_RF_Data^(0+256)+18)
 13381                           
 13382                           ;RF_Control_B1.c: 241: RF_Data[19] = product->Data[19];
 13383  06CF  0020               	movlb	0	; select bank0
 13384  06D0  086F               	movf	_product,w
 13385  06D1  0086               	movwf	6
 13386  06D2  3002               	movlw	2	; select bank4/5
 13387  06D3  0087               	movwf	7
 13388  06D4  3002               	movlw	2	; select bank4/5
 13389  06D5  3F53               	moviw [19]fsr1
 13390  06D6  0022               	movlb	2	; select bank2
 13391  06D7  00B3               	movwf	(_RF_Data^(0+256)+19)
 13392                           
 13393                           ;RF_Control_B1.c: 242: RF_Data[20] = 210;
 13394  06D8  30D2               	movlw	210
 13395  06D9  0020               	movlb	0	; select bank0
 13396  06DA  00A0               	movwf	??_setTxData
 13397  06DB  0820               	movf	??_setTxData,w
 13398  06DC  0022               	movlb	2	; select bank2
 13399  06DD  00B4               	movwf	(_RF_Data^(0+256)+20)
 13400  06DE  0008               	return
 13401  06DF                     __end_of_setTxData:	
 13402                           
 13403                           	psect	text82
 13404  0793                     __ptext82:	
 13405 ;; *************** function _setRF_DimmerLights *****************
 13406 ;; Defined at:
 13407 ;;		line 531 in file "../src/RF_Control_B1.c"
 13408 ;; Parameters:    Size  Location     Type
 13409 ;;  lights          1    wreg     unsigned char 
 13410 ;;  on              1   61[BANK0 ] unsigned char 
 13411 ;; Auto vars:     Size  Location     Type
 13412 ;;  lights          1   65[BANK0 ] unsigned char 
 13413 ;;  status          1   64[BANK0 ] unsigned char 
 13414 ;; Return value:  Size  Location     Type
 13415 ;;		None               void
 13416 ;; Registers used:
 13417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13418 ;; Tracked objects:
 13419 ;;		On entry : 0/0
 13420 ;;		On exit  : 0/0
 13421 ;;		Unchanged: 0/0
 13422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13423 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13426 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13427 ;;Total ram usage:        5 bytes
 13428 ;; Hardware stack levels used:    1
 13429 ;; Hardware stack levels required when called:    8
 13430 ;; This function calls:
 13431 ;;		_setPercentValue
 13432 ;; This function is called by:
 13433 ;;		_DlyOff_Main
 13434 ;;		_setDimmerLights_SwOn
 13435 ;;		_setDimmerLights_SwOff
 13436 ;;		_setDimmerLights_Adj
 13437 ;;		_setRFSW_Control
 13438 ;; This function uses a non-reentrant model
 13439 ;;
 13440                           
 13441                           
 13442                           ;psect for function _setRF_DimmerLights
 13443  0793                     _setRF_DimmerLights:	
 13444                           
 13445                           ;incstack = 0
 13446                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13447                           ;setRF_DimmerLights@lights stored from wreg
 13448  0793  0020               	movlb	0	; select bank0
 13449  0794  00E1               	movwf	setRF_DimmerLights@lights
 13450                           
 13451                           ;RF_Control_B1.c: 532: char status = 1;
 13452  0795  01E0               	clrf	setRF_DimmerLights@status
 13453  0796  0AE0               	incf	setRF_DimmerLights@status,f
 13454                           
 13455                           ;RF_Control_B1.c: 533: status <<= (lights - 1);
 13456  0797  0861               	movf	setRF_DimmerLights@lights,w
 13457  0798  3EFF               	addlw	-1
 13458  0799  0A89               	incf	9,f
 13459  079A  2F9D               	goto	u8380
 13460  079B                     u8385:	
 13461  079B  1003               	clrc
 13462  079C  0DE0               	rlf	setRF_DimmerLights@status,f
 13463  079D                     u8380:	
 13464  079D  3EFF               	addlw	-1
 13465  079E  1D03               	skipz
 13466  079F  2F9B               	goto	u8385
 13467                           
 13468                           ;RF_Control_B1.c: 534: product->Data[11]=lights;
 13469  07A0  0861               	movf	setRF_DimmerLights@lights,w
 13470  07A1  00DE               	movwf	??_setRF_DimmerLights
 13471  07A2  086F               	movf	_product,w
 13472  07A3  3E0B               	addlw	11
 13473  07A4  0086               	movwf	6
 13474  07A5  3002               	movlw	2	; select bank4/5
 13475  07A6  0087               	movwf	7
 13476  07A7  085E               	movf	??_setRF_DimmerLights,w
 13477  07A8  0081               	movwf	1
 13478                           
 13479                           ;RF_Control_B1.c: 537: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 13480  07A9  3020               	movlw	32
 13481  07AA  3196  2688  3187   	fcall	_setPercentValue
 13482  07AD  0020               	movlb	0	; select bank0
 13483  07AE  00DE               	movwf	??_setRF_DimmerLights
 13484  07AF  0861               	movf	setRF_DimmerLights@lights,w
 13485  07B0  3E14               	addlw	20
 13486  07B1  076F               	addwf	_product,w
 13487  07B2  00DF               	movwf	??_setRF_DimmerLights+1
 13488  07B3  085F               	movf	??_setRF_DimmerLights+1,w
 13489  07B4  0086               	movwf	6
 13490  07B5  3002               	movlw	2	; select bank4/5
 13491  07B6  0087               	movwf	7
 13492  07B7  085E               	movf	??_setRF_DimmerLights,w
 13493  07B8  0081               	movwf	1
 13494                           
 13495                           ;RF_Control_B1.c: 540: product->Data[9]=product->Data[20 + lights];
 13496  07B9  0861               	movf	setRF_DimmerLights@lights,w
 13497  07BA  3E14               	addlw	20
 13498  07BB  076F               	addwf	_product,w
 13499  07BC  00DE               	movwf	??_setRF_DimmerLights
 13500  07BD  085E               	movf	??_setRF_DimmerLights,w
 13501  07BE  0086               	movwf	6
 13502  07BF  3002               	movlw	2	; select bank4/5
 13503  07C0  0087               	movwf	7
 13504  07C1  0801               	movf	1,w
 13505  07C2  00DF               	movwf	??_setRF_DimmerLights+1
 13506  07C3  086F               	movf	_product,w
 13507  07C4  3E09               	addlw	9
 13508  07C5  0086               	movwf	6
 13509  07C6  3002               	movlw	2	; select bank4/5
 13510  07C7  0087               	movwf	7
 13511  07C8  085F               	movf	??_setRF_DimmerLights+1,w
 13512  07C9  0081               	movwf	1
 13513                           
 13514                           ;RF_Control_B1.c: 541: product->Data[17]=product->Data[26 + lights];
 13515  07CA  0861               	movf	setRF_DimmerLights@lights,w
 13516  07CB  3E1A               	addlw	26
 13517  07CC  076F               	addwf	_product,w
 13518  07CD  00DE               	movwf	??_setRF_DimmerLights
 13519  07CE  085E               	movf	??_setRF_DimmerLights,w
 13520  07CF  0086               	movwf	6
 13521  07D0  3002               	movlw	2	; select bank4/5
 13522  07D1  0087               	movwf	7
 13523  07D2  0801               	movf	1,w
 13524  07D3  00DF               	movwf	??_setRF_DimmerLights+1
 13525  07D4  086F               	movf	_product,w
 13526  07D5  3E11               	addlw	17
 13527  07D6  0086               	movwf	6
 13528  07D7  3002               	movlw	2	; select bank4/5
 13529  07D8  0087               	movwf	7
 13530  07D9  085F               	movf	??_setRF_DimmerLights+1,w
 13531  07DA  0081               	movwf	1
 13532                           
 13533                           ;RF_Control_B1.c: 542: if (on == 1) {
 13534  07DB  085D               	movf	setRF_DimmerLights@on,w
 13535  07DC  3A01               	xorlw	1
 13536  07DD  1D03               	skipz
 13537  07DE  2FEF               	goto	l7994
 13538                           
 13539                           ;RF_Control_B1.c: 543: product->Data[15]=(product->Data[15] | status);
 13540  07DF  086F               	movf	_product,w
 13541  07E0  3E0F               	addlw	15
 13542  07E1  0086               	movwf	6
 13543  07E2  3002               	movlw	2	; select bank4/5
 13544  07E3  0087               	movwf	7
 13545  07E4  0801               	movf	1,w
 13546  07E5  0460               	iorwf	setRF_DimmerLights@status,w
 13547  07E6  00DE               	movwf	??_setRF_DimmerLights
 13548  07E7  086F               	movf	_product,w
 13549  07E8  3E0F               	addlw	15
 13550  07E9  0086               	movwf	6
 13551  07EA  3002               	movlw	2	; select bank4/5
 13552  07EB  0087               	movwf	7
 13553  07EC  085E               	movf	??_setRF_DimmerLights,w
 13554  07ED  0081               	movwf	1
 13555                           
 13556                           ;RF_Control_B1.c: 544: } else {
 13557  07EE  0008               	return
 13558  07EF                     l7994:	
 13559                           
 13560                           ;RF_Control_B1.c: 545: product->Data[15]=(product->Data[15]&(~status));
 13561  07EF  086F               	movf	_product,w
 13562  07F0  3E0F               	addlw	15
 13563  07F1  0086               	movwf	6
 13564  07F2  3002               	movlw	2	; select bank4/5
 13565  07F3  0087               	movwf	7
 13566  07F4  0960               	comf	setRF_DimmerLights@status,w
 13567  07F5  0501               	andwf	1,w
 13568  07F6  00DE               	movwf	??_setRF_DimmerLights
 13569  07F7  086F               	movf	_product,w
 13570  07F8  3E0F               	addlw	15
 13571  07F9  0086               	movwf	6
 13572  07FA  3002               	movlw	2	; select bank4/5
 13573  07FB  0087               	movwf	7
 13574  07FC  085E               	movf	??_setRF_DimmerLights,w
 13575  07FD  0081               	movwf	1
 13576  07FE  0008               	return
 13577  07FF                     __end_of_setRF_DimmerLights:	
 13578                           
 13579                           	psect	text83
 13580  1688                     __ptext83:	
 13581 ;; *************** function _setPercentValue *****************
 13582 ;; Defined at:
 13583 ;;		line 875 in file "../src/Dimmer_B1.c"
 13584 ;; Parameters:    Size  Location     Type
 13585 ;;  value           1    wreg     unsigned char 
 13586 ;; Auto vars:     Size  Location     Type
 13587 ;;  value           1   57[BANK0 ] unsigned char 
 13588 ;;  i               3   58[BANK0 ] float 
 13589 ;; Return value:  Size  Location     Type
 13590 ;;                  1    wreg      unsigned char 
 13591 ;; Registers used:
 13592 ;;		wreg, status,2, status,0, pclath, cstack
 13593 ;; Tracked objects:
 13594 ;;		On entry : 0/0
 13595 ;;		On exit  : 0/0
 13596 ;;		Unchanged: 0/0
 13597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;Total ram usage:        4 bytes
 13603 ;; Hardware stack levels used:    1
 13604 ;; Hardware stack levels required when called:    7
 13605 ;; This function calls:
 13606 ;;		___awtoft
 13607 ;;		___ftdiv
 13608 ;;		___fttol
 13609 ;; This function is called by:
 13610 ;;		_Flash_Memory_Initialization
 13611 ;;		_setRF_DimmerLights
 13612 ;; This function uses a non-reentrant model
 13613 ;;
 13614                           
 13615                           
 13616                           ;psect for function _setPercentValue
 13617  1688                     _setPercentValue:	
 13618                           
 13619                           ;incstack = 0
 13620                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13621                           ;setPercentValue@value stored from wreg
 13622  1688  0020               	movlb	0	; select bank0
 13623  1689  00D9               	movwf	setPercentValue@value
 13624                           
 13625                           ;Dimmer_B1.c: 877: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 13626  168A  3000               	movlw	0
 13627  168B  00DA               	movwf	setPercentValue@i
 13628  168C  30E0               	movlw	224
 13629  168D  00DB               	movwf	setPercentValue@i+1
 13630  168E  3041               	movlw	65
 13631  168F  00DC               	movwf	setPercentValue@i+2
 13632                           
 13633                           ;Dimmer_B1.c: 878: i /= 100;
 13634  1690  3000               	movlw	0
 13635  1691  00AE               	movwf	___ftdiv@f2
 13636  1692  30C8               	movlw	200
 13637  1693  00AF               	movwf	___ftdiv@f2+1
 13638  1694  3042               	movlw	66
 13639  1695  00B0               	movwf	___ftdiv@f2+2
 13640  1696  085A               	movf	setPercentValue@i,w
 13641  1697  00B1               	movwf	___ftdiv@f1
 13642  1698  085B               	movf	setPercentValue@i+1,w
 13643  1699  00B2               	movwf	___ftdiv@f1+1
 13644  169A  085C               	movf	setPercentValue@i+2,w
 13645  169B  00B3               	movwf	___ftdiv@f1+2
 13646  169C  318F  2757  3196   	fcall	___ftdiv
 13647  169F  0020               	movlb	0	; select bank0
 13648  16A0  082E               	movf	?___ftdiv,w
 13649  16A1  00DA               	movwf	setPercentValue@i
 13650  16A2  082F               	movf	?___ftdiv+1,w
 13651  16A3  00DB               	movwf	setPercentValue@i+1
 13652  16A4  0830               	movf	?___ftdiv+2,w
 13653  16A5  00DC               	movwf	setPercentValue@i+2
 13654                           
 13655                           ;Dimmer_B1.c: 879: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 13656  16A6  0859               	movf	setPercentValue@value,w
 13657  16A7  3EE0               	addlw	224
 13658  16A8  00A8               	movwf	___awtoft@c
 13659  16A9  30FF               	movlw	255
 13660  16AA  1803               	skipnc
 13661  16AB  3000               	movlw	0
 13662  16AC  00A9               	movwf	___awtoft@c+1
 13663  16AD  3192  2299  3196   	fcall	___awtoft
 13664  16B0  0020               	movlb	0	; select bank0
 13665  16B1  0828               	movf	?___awtoft,w
 13666  16B2  00B1               	movwf	___ftdiv@f1
 13667  16B3  0829               	movf	?___awtoft+1,w
 13668  16B4  00B2               	movwf	___ftdiv@f1+1
 13669  16B5  082A               	movf	?___awtoft+2,w
 13670  16B6  00B3               	movwf	___ftdiv@f1+2
 13671  16B7  085A               	movf	setPercentValue@i,w
 13672  16B8  00AE               	movwf	___ftdiv@f2
 13673  16B9  085B               	movf	setPercentValue@i+1,w
 13674  16BA  00AF               	movwf	___ftdiv@f2+1
 13675  16BB  085C               	movf	setPercentValue@i+2,w
 13676  16BC  00B0               	movwf	___ftdiv@f2+2
 13677  16BD  318F  2757  3196   	fcall	___ftdiv
 13678  16C0  0020               	movlb	0	; select bank0
 13679  16C1  082E               	movf	?___ftdiv,w
 13680  16C2  00CB               	movwf	___fttol@f1
 13681  16C3  082F               	movf	?___ftdiv+1,w
 13682  16C4  00CC               	movwf	___fttol@f1+1
 13683  16C5  0830               	movf	?___ftdiv+2,w
 13684  16C6  00CD               	movwf	___fttol@f1+2
 13685  16C7  318E  2637         	fcall	___fttol
 13686  16C9  0020               	movlb	0	; select bank0
 13687  16CA  034B               	decf	?___fttol,w
 13688  16CB  3AFF               	xorlw	255
 13689  16CC  3E64               	addlw	100
 13690  16CD  0008               	return
 13691  16CE                     __end_of_setPercentValue:	
 13692                           
 13693                           	psect	text84
 13694  0E37                     __ptext84:	
 13695 ;; *************** function ___fttol *****************
 13696 ;; Defined at:
 13697 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13698 ;; Parameters:    Size  Location     Type
 13699 ;;  f1              3   43[BANK0 ] float 
 13700 ;; Auto vars:     Size  Location     Type
 13701 ;;  lval            4   52[BANK0 ] unsigned long 
 13702 ;;  exp1            1   56[BANK0 ] unsigned char 
 13703 ;;  sign1           1   51[BANK0 ] unsigned char 
 13704 ;; Return value:  Size  Location     Type
 13705 ;;                  4   43[BANK0 ] long 
 13706 ;; Registers used:
 13707 ;;		wreg, status,2, status,0
 13708 ;; Tracked objects:
 13709 ;;		On entry : 0/0
 13710 ;;		On exit  : 0/0
 13711 ;;		Unchanged: 0/0
 13712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13713 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13714 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13715 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13716 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13717 ;;Total ram usage:       14 bytes
 13718 ;; Hardware stack levels used:    1
 13719 ;; Hardware stack levels required when called:    5
 13720 ;; This function calls:
 13721 ;;		Nothing
 13722 ;; This function is called by:
 13723 ;;		_getPercentValue
 13724 ;;		_setPercentValue
 13725 ;; This function uses a non-reentrant model
 13726 ;;
 13727                           
 13728                           
 13729                           ;psect for function ___fttol
 13730  0E37                     ___fttol:	
 13731                           
 13732                           ;incstack = 0
 13733                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13734  0E37  0020               	movlb	0	; select bank0
 13735  0E38  084B               	movf	___fttol@f1,w
 13736  0E39  00CF               	movwf	??___fttol
 13737  0E3A  084C               	movf	___fttol@f1+1,w
 13738  0E3B  00D0               	movwf	??___fttol+1
 13739  0E3C  084D               	movf	___fttol@f1+2,w
 13740  0E3D  00D1               	movwf	??___fttol+2
 13741  0E3E  1003               	clrc
 13742  0E3F  0D50               	rlf	??___fttol+1,w
 13743  0E40  0D51               	rlf	??___fttol+2,w
 13744  0E41  00D2               	movwf	??___fttol+3
 13745  0E42  0852               	movf	??___fttol+3,w
 13746  0E43  00D8               	movwf	___fttol@exp1
 13747  0E44  08D8               	movf	___fttol@exp1,f
 13748  0E45  1D03               	skipz
 13749  0E46  2E50               	goto	l7822
 13750  0E47  3000               	movlw	0
 13751  0E48  00CE               	movwf	?___fttol+3
 13752  0E49  3000               	movlw	0
 13753  0E4A  00CD               	movwf	?___fttol+2
 13754  0E4B  3000               	movlw	0
 13755  0E4C  00CC               	movwf	?___fttol+1
 13756  0E4D  3000               	movlw	0
 13757  0E4E  00CB               	movwf	?___fttol
 13758  0E4F  0008               	return
 13759  0E50                     l7822:	
 13760  0E50  084B               	movf	___fttol@f1,w
 13761  0E51  00CF               	movwf	??___fttol
 13762  0E52  084C               	movf	___fttol@f1+1,w
 13763  0E53  00D0               	movwf	??___fttol+1
 13764  0E54  084D               	movf	___fttol@f1+2,w
 13765  0E55  00D1               	movwf	??___fttol+2
 13766  0E56  3017               	movlw	23
 13767  0E57                     u8095:	
 13768  0E57  36D1               	lsrf	??___fttol+2,f
 13769  0E58  0CD0               	rrf	??___fttol+1,f
 13770  0E59  0CCF               	rrf	??___fttol,f
 13771  0E5A  0B89               	decfsz	9,f
 13772  0E5B  2E57               	goto	u8095
 13773  0E5C  084F               	movf	??___fttol,w
 13774  0E5D  00D2               	movwf	??___fttol+3
 13775  0E5E  0852               	movf	??___fttol+3,w
 13776  0E5F  00D3               	movwf	___fttol@sign1
 13777  0E60  17CC               	bsf	___fttol@f1+1,7
 13778  0E61  30FF               	movlw	255
 13779  0E62  05CB               	andwf	___fttol@f1,f
 13780  0E63  30FF               	movlw	255
 13781  0E64  05CC               	andwf	___fttol@f1+1,f
 13782  0E65  3000               	movlw	0
 13783  0E66  05CD               	andwf	___fttol@f1+2,f
 13784  0E67  084B               	movf	___fttol@f1,w
 13785  0E68  00D4               	movwf	___fttol@lval
 13786  0E69  084C               	movf	___fttol@f1+1,w
 13787  0E6A  00D5               	movwf	___fttol@lval+1
 13788  0E6B  084D               	movf	___fttol@f1+2,w
 13789  0E6C  00D6               	movwf	___fttol@lval+2
 13790  0E6D  01D7               	clrf	___fttol@lval+3
 13791  0E6E  308E               	movlw	142
 13792  0E6F  02D8               	subwf	___fttol@exp1,f
 13793  0E70  1FD8               	btfss	___fttol@exp1,7
 13794  0E71  2E8E               	goto	l7842
 13795  0E72  0858               	movf	___fttol@exp1,w
 13796  0E73  3A80               	xorlw	128
 13797  0E74  3E8F               	addlw	143
 13798  0E75  1803               	skipnc
 13799  0E76  2E80               	goto	l7840
 13800  0E77  3000               	movlw	0
 13801  0E78  00CE               	movwf	?___fttol+3
 13802  0E79  3000               	movlw	0
 13803  0E7A  00CD               	movwf	?___fttol+2
 13804  0E7B  3000               	movlw	0
 13805  0E7C  00CC               	movwf	?___fttol+1
 13806  0E7D  3000               	movlw	0
 13807  0E7E  00CB               	movwf	?___fttol
 13808  0E7F  0008               	return
 13809  0E80                     l7840:	
 13810  0E80  3001               	movlw	1
 13811  0E81                     u8125:	
 13812  0E81  36D7               	lsrf	___fttol@lval+3,f
 13813  0E82  0CD6               	rrf	___fttol@lval+2,f
 13814  0E83  0CD5               	rrf	___fttol@lval+1,f
 13815  0E84  0CD4               	rrf	___fttol@lval,f
 13816  0E85  0B89               	decfsz	9,f
 13817  0E86  2E81               	goto	u8125
 13818  0E87  3001               	movlw	1
 13819  0E88  00CF               	movwf	??___fttol
 13820  0E89  084F               	movf	??___fttol,w
 13821  0E8A  07D8               	addwf	___fttol@exp1,f
 13822  0E8B  1903               	btfsc	3,2
 13823  0E8C  2EA7               	goto	l7852
 13824  0E8D  2E80               	goto	l7840
 13825  0E8E                     l7842:	
 13826  0E8E  3018               	movlw	24
 13827  0E8F  0258               	subwf	___fttol@exp1,w
 13828  0E90  1C03               	skipc
 13829  0E91  2EA4               	goto	l7850
 13830  0E92  3000               	movlw	0
 13831  0E93  00CE               	movwf	?___fttol+3
 13832  0E94  3000               	movlw	0
 13833  0E95  00CD               	movwf	?___fttol+2
 13834  0E96  3000               	movlw	0
 13835  0E97  00CC               	movwf	?___fttol+1
 13836  0E98  3000               	movlw	0
 13837  0E99  00CB               	movwf	?___fttol
 13838  0E9A  0008               	return
 13839  0E9B                     l7848:	
 13840  0E9B  3001               	movlw	1
 13841  0E9C                     u8155:	
 13842  0E9C  35D4               	lslf	___fttol@lval,f
 13843  0E9D  0DD5               	rlf	___fttol@lval+1,f
 13844  0E9E  0DD6               	rlf	___fttol@lval+2,f
 13845  0E9F  0DD7               	rlf	___fttol@lval+3,f
 13846  0EA0  0B89               	decfsz	9,f
 13847  0EA1  2E9C               	goto	u8155
 13848  0EA2  3001               	movlw	1
 13849  0EA3  02D8               	subwf	___fttol@exp1,f
 13850  0EA4                     l7850:	
 13851  0EA4  08D8               	movf	___fttol@exp1,f
 13852  0EA5  1D03               	skipz
 13853  0EA6  2E9B               	goto	l7848
 13854  0EA7                     l7852:	
 13855  0EA7  0853               	movf	___fttol@sign1,w
 13856  0EA8  1903               	btfsc	3,2
 13857  0EA9  2EB5               	goto	l7856
 13858  0EAA  09D4               	comf	___fttol@lval,f
 13859  0EAB  09D5               	comf	___fttol@lval+1,f
 13860  0EAC  09D6               	comf	___fttol@lval+2,f
 13861  0EAD  09D7               	comf	___fttol@lval+3,f
 13862  0EAE  0AD4               	incf	___fttol@lval,f
 13863  0EAF  1903               	skipnz
 13864  0EB0  0AD5               	incf	___fttol@lval+1,f
 13865  0EB1  1903               	skipnz
 13866  0EB2  0AD6               	incf	___fttol@lval+2,f
 13867  0EB3  1903               	skipnz
 13868  0EB4  0AD7               	incf	___fttol@lval+3,f
 13869  0EB5                     l7856:	
 13870  0EB5  0857               	movf	___fttol@lval+3,w
 13871  0EB6  00CE               	movwf	?___fttol+3
 13872  0EB7  0856               	movf	___fttol@lval+2,w
 13873  0EB8  00CD               	movwf	?___fttol+2
 13874  0EB9  0855               	movf	___fttol@lval+1,w
 13875  0EBA  00CC               	movwf	?___fttol+1
 13876  0EBB  0854               	movf	___fttol@lval,w
 13877  0EBC  00CB               	movwf	?___fttol
 13878  0EBD  0008               	return
 13879  0EBE                     __end_of___fttol:	
 13880                           
 13881                           	psect	text85
 13882  0F57                     __ptext85:	
 13883 ;; *************** function ___ftdiv *****************
 13884 ;; Defined at:
 13885 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13886 ;; Parameters:    Size  Location     Type
 13887 ;;  f2              3   14[BANK0 ] float 
 13888 ;;  f1              3   17[BANK0 ] float 
 13889 ;; Auto vars:     Size  Location     Type
 13890 ;;  f3              3   25[BANK0 ] float 
 13891 ;;  sign            1   29[BANK0 ] unsigned char 
 13892 ;;  exp             1   28[BANK0 ] unsigned char 
 13893 ;;  cntr            1   24[BANK0 ] unsigned char 
 13894 ;; Return value:  Size  Location     Type
 13895 ;;                  3   14[BANK0 ] float 
 13896 ;; Registers used:
 13897 ;;		wreg, status,2, status,0, pclath, cstack
 13898 ;; Tracked objects:
 13899 ;;		On entry : 0/0
 13900 ;;		On exit  : 0/0
 13901 ;;		Unchanged: 0/0
 13902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13903 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13904 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13905 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13906 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13907 ;;Total ram usage:       16 bytes
 13908 ;; Hardware stack levels used:    1
 13909 ;; Hardware stack levels required when called:    6
 13910 ;; This function calls:
 13911 ;;		___ftpack
 13912 ;; This function is called by:
 13913 ;;		_getPercentValue
 13914 ;;		_setPercentValue
 13915 ;; This function uses a non-reentrant model
 13916 ;;
 13917                           
 13918                           
 13919                           ;psect for function ___ftdiv
 13920  0F57                     ___ftdiv:	
 13921                           
 13922                           ;incstack = 0
 13923                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13924  0F57  0020               	movlb	0	; select bank0
 13925  0F58  0831               	movf	___ftdiv@f1,w
 13926  0F59  00B4               	movwf	??___ftdiv
 13927  0F5A  0832               	movf	___ftdiv@f1+1,w
 13928  0F5B  00B5               	movwf	??___ftdiv+1
 13929  0F5C  0833               	movf	___ftdiv@f1+2,w
 13930  0F5D  00B6               	movwf	??___ftdiv+2
 13931  0F5E  1003               	clrc
 13932  0F5F  0D35               	rlf	??___ftdiv+1,w
 13933  0F60  0D36               	rlf	??___ftdiv+2,w
 13934  0F61  00B7               	movwf	??___ftdiv+3
 13935  0F62  0837               	movf	??___ftdiv+3,w
 13936  0F63  00BC               	movwf	___ftdiv@exp
 13937  0F64  08BC               	movf	___ftdiv@exp,f
 13938  0F65  1D03               	skipz
 13939  0F66  2F6E               	goto	l7730
 13940  0F67  3000               	movlw	0
 13941  0F68  00AE               	movwf	?___ftdiv
 13942  0F69  3000               	movlw	0
 13943  0F6A  00AF               	movwf	?___ftdiv+1
 13944  0F6B  3000               	movlw	0
 13945  0F6C  00B0               	movwf	?___ftdiv+2
 13946  0F6D  0008               	return
 13947  0F6E                     l7730:	
 13948  0F6E  082E               	movf	___ftdiv@f2,w
 13949  0F6F  00B4               	movwf	??___ftdiv
 13950  0F70  082F               	movf	___ftdiv@f2+1,w
 13951  0F71  00B5               	movwf	??___ftdiv+1
 13952  0F72  0830               	movf	___ftdiv@f2+2,w
 13953  0F73  00B6               	movwf	??___ftdiv+2
 13954  0F74  1003               	clrc
 13955  0F75  0D35               	rlf	??___ftdiv+1,w
 13956  0F76  0D36               	rlf	??___ftdiv+2,w
 13957  0F77  00B7               	movwf	??___ftdiv+3
 13958  0F78  0837               	movf	??___ftdiv+3,w
 13959  0F79  00BD               	movwf	___ftdiv@sign
 13960  0F7A  08BD               	movf	___ftdiv@sign,f
 13961  0F7B  1D03               	skipz
 13962  0F7C  2F84               	goto	l7736
 13963  0F7D  3000               	movlw	0
 13964  0F7E  00AE               	movwf	?___ftdiv
 13965  0F7F  3000               	movlw	0
 13966  0F80  00AF               	movwf	?___ftdiv+1
 13967  0F81  3000               	movlw	0
 13968  0F82  00B0               	movwf	?___ftdiv+2
 13969  0F83  0008               	return
 13970  0F84                     l7736:	
 13971  0F84  3000               	movlw	0
 13972  0F85  00B9               	movwf	___ftdiv@f3
 13973  0F86  3000               	movlw	0
 13974  0F87  00BA               	movwf	___ftdiv@f3+1
 13975  0F88  3000               	movlw	0
 13976  0F89  00BB               	movwf	___ftdiv@f3+2
 13977  0F8A  3089               	movlw	137
 13978  0F8B  073D               	addwf	___ftdiv@sign,w
 13979  0F8C  00B4               	movwf	??___ftdiv
 13980  0F8D  0834               	movf	??___ftdiv,w
 13981  0F8E  02BC               	subwf	___ftdiv@exp,f
 13982  0F8F  0831               	movf	___ftdiv@f1,w
 13983  0F90  00B4               	movwf	??___ftdiv
 13984  0F91  0832               	movf	___ftdiv@f1+1,w
 13985  0F92  00B5               	movwf	??___ftdiv+1
 13986  0F93  0833               	movf	___ftdiv@f1+2,w
 13987  0F94  00B6               	movwf	??___ftdiv+2
 13988  0F95  3010               	movlw	16
 13989  0F96                     u7905:	
 13990  0F96  36B6               	lsrf	??___ftdiv+2,f
 13991  0F97  0CB5               	rrf	??___ftdiv+1,f
 13992  0F98  0CB4               	rrf	??___ftdiv,f
 13993  0F99  0B89               	decfsz	9,f
 13994  0F9A  2F96               	goto	u7905
 13995  0F9B  0834               	movf	??___ftdiv,w
 13996  0F9C  00B7               	movwf	??___ftdiv+3
 13997  0F9D  0837               	movf	??___ftdiv+3,w
 13998  0F9E  00BD               	movwf	___ftdiv@sign
 13999  0F9F  082E               	movf	___ftdiv@f2,w
 14000  0FA0  00B4               	movwf	??___ftdiv
 14001  0FA1  082F               	movf	___ftdiv@f2+1,w
 14002  0FA2  00B5               	movwf	??___ftdiv+1
 14003  0FA3  0830               	movf	___ftdiv@f2+2,w
 14004  0FA4  00B6               	movwf	??___ftdiv+2
 14005  0FA5  3010               	movlw	16
 14006  0FA6                     u7915:	
 14007  0FA6  36B6               	lsrf	??___ftdiv+2,f
 14008  0FA7  0CB5               	rrf	??___ftdiv+1,f
 14009  0FA8  0CB4               	rrf	??___ftdiv,f
 14010  0FA9  0B89               	decfsz	9,f
 14011  0FAA  2FA6               	goto	u7915
 14012  0FAB  0834               	movf	??___ftdiv,w
 14013  0FAC  00B7               	movwf	??___ftdiv+3
 14014  0FAD  0837               	movf	??___ftdiv+3,w
 14015  0FAE  06BD               	xorwf	___ftdiv@sign,f
 14016  0FAF  3080               	movlw	128
 14017  0FB0  00B4               	movwf	??___ftdiv
 14018  0FB1  0834               	movf	??___ftdiv,w
 14019  0FB2  05BD               	andwf	___ftdiv@sign,f
 14020  0FB3  17B2               	bsf	___ftdiv@f1+1,7
 14021  0FB4  30FF               	movlw	255
 14022  0FB5  05B1               	andwf	___ftdiv@f1,f
 14023  0FB6  30FF               	movlw	255
 14024  0FB7  05B2               	andwf	___ftdiv@f1+1,f
 14025  0FB8  3000               	movlw	0
 14026  0FB9  05B3               	andwf	___ftdiv@f1+2,f
 14027  0FBA  17AF               	bsf	___ftdiv@f2+1,7
 14028  0FBB  30FF               	movlw	255
 14029  0FBC  05AE               	andwf	___ftdiv@f2,f
 14030  0FBD  30FF               	movlw	255
 14031  0FBE  05AF               	andwf	___ftdiv@f2+1,f
 14032  0FBF  3000               	movlw	0
 14033  0FC0  05B0               	andwf	___ftdiv@f2+2,f
 14034  0FC1  3018               	movlw	24
 14035  0FC2  00B4               	movwf	??___ftdiv
 14036  0FC3  0834               	movf	??___ftdiv,w
 14037  0FC4  00B8               	movwf	___ftdiv@cntr
 14038  0FC5                     l7750:	
 14039  0FC5  3001               	movlw	1
 14040  0FC6                     u7925:	
 14041  0FC6  35B9               	lslf	___ftdiv@f3,f
 14042  0FC7  0DBA               	rlf	___ftdiv@f3+1,f
 14043  0FC8  0DBB               	rlf	___ftdiv@f3+2,f
 14044  0FC9  0B89               	decfsz	9,f
 14045  0FCA  2FC6               	goto	u7925
 14046  0FCB  0830               	movf	___ftdiv@f2+2,w
 14047  0FCC  0233               	subwf	___ftdiv@f1+2,w
 14048  0FCD  1D03               	skipz
 14049  0FCE  2FD5               	goto	u7935
 14050  0FCF  082F               	movf	___ftdiv@f2+1,w
 14051  0FD0  0232               	subwf	___ftdiv@f1+1,w
 14052  0FD1  1D03               	skipz
 14053  0FD2  2FD5               	goto	u7935
 14054  0FD3  082E               	movf	___ftdiv@f2,w
 14055  0FD4  0231               	subwf	___ftdiv@f1,w
 14056  0FD5                     u7935:	
 14057  0FD5  1C03               	skipc
 14058  0FD6  2FDE               	goto	l7758
 14059  0FD7  082E               	movf	___ftdiv@f2,w
 14060  0FD8  02B1               	subwf	___ftdiv@f1,f
 14061  0FD9  082F               	movf	___ftdiv@f2+1,w
 14062  0FDA  3BB2               	subwfb	___ftdiv@f1+1,f
 14063  0FDB  0830               	movf	___ftdiv@f2+2,w
 14064  0FDC  3BB3               	subwfb	___ftdiv@f1+2,f
 14065  0FDD  1439               	bsf	___ftdiv@f3,0
 14066  0FDE                     l7758:	
 14067  0FDE  3001               	movlw	1
 14068  0FDF                     u7945:	
 14069  0FDF  35B1               	lslf	___ftdiv@f1,f
 14070  0FE0  0DB2               	rlf	___ftdiv@f1+1,f
 14071  0FE1  0DB3               	rlf	___ftdiv@f1+2,f
 14072  0FE2  0B89               	decfsz	9,f
 14073  0FE3  2FDF               	goto	u7945
 14074  0FE4  3001               	movlw	1
 14075  0FE5  02B8               	subwf	___ftdiv@cntr,f
 14076  0FE6  1D03               	btfss	3,2
 14077  0FE7  2FC5               	goto	l7750
 14078  0FE8  0839               	movf	___ftdiv@f3,w
 14079  0FE9  00A0               	movwf	___ftpack@arg
 14080  0FEA  083A               	movf	___ftdiv@f3+1,w
 14081  0FEB  00A1               	movwf	___ftpack@arg+1
 14082  0FEC  083B               	movf	___ftdiv@f3+2,w
 14083  0FED  00A2               	movwf	___ftpack@arg+2
 14084  0FEE  083C               	movf	___ftdiv@exp,w
 14085  0FEF  00B4               	movwf	??___ftdiv
 14086  0FF0  0834               	movf	??___ftdiv,w
 14087  0FF1  00A3               	movwf	___ftpack@exp
 14088  0FF2  083D               	movf	___ftdiv@sign,w
 14089  0FF3  00B5               	movwf	??___ftdiv+1
 14090  0FF4  0835               	movf	??___ftdiv+1,w
 14091  0FF5  00A4               	movwf	___ftpack@sign
 14092  0FF6  318A  2276         	fcall	___ftpack
 14093  0FF8  0020               	movlb	0	; select bank0
 14094  0FF9  0820               	movf	?___ftpack,w
 14095  0FFA  00AE               	movwf	?___ftdiv
 14096  0FFB  0821               	movf	?___ftpack+1,w
 14097  0FFC  00AF               	movwf	?___ftdiv+1
 14098  0FFD  0822               	movf	?___ftpack+2,w
 14099  0FFE  00B0               	movwf	?___ftdiv+2
 14100  0FFF  0008               	return
 14101  1000                     __end_of___ftdiv:	
 14102                           
 14103                           	psect	text86
 14104  1299                     __ptext86:	
 14105 ;; *************** function ___awtoft *****************
 14106 ;; Defined at:
 14107 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14108 ;; Parameters:    Size  Location     Type
 14109 ;;  c               2    8[BANK0 ] int 
 14110 ;; Auto vars:     Size  Location     Type
 14111 ;;  sign            1   13[BANK0 ] unsigned char 
 14112 ;; Return value:  Size  Location     Type
 14113 ;;                  3    8[BANK0 ] float 
 14114 ;; Registers used:
 14115 ;;		wreg, status,2, status,0, pclath, cstack
 14116 ;; Tracked objects:
 14117 ;;		On entry : 0/0
 14118 ;;		On exit  : 0/0
 14119 ;;		Unchanged: 0/0
 14120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14121 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14122 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14123 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14124 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14125 ;;Total ram usage:        6 bytes
 14126 ;; Hardware stack levels used:    1
 14127 ;; Hardware stack levels required when called:    6
 14128 ;; This function calls:
 14129 ;;		___ftpack
 14130 ;; This function is called by:
 14131 ;;		_getPercentValue
 14132 ;;		_setPercentValue
 14133 ;; This function uses a non-reentrant model
 14134 ;;
 14135                           
 14136                           
 14137                           ;psect for function ___awtoft
 14138  1299                     ___awtoft:	
 14139                           
 14140                           ;incstack = 0
 14141                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14142  1299  0020               	movlb	0	; select bank0
 14143  129A  01AD               	clrf	___awtoft@sign
 14144  129B  1FA9               	btfss	___awtoft@c+1,7
 14145  129C  2AA4               	goto	l7648
 14146  129D  09A8               	comf	___awtoft@c,f
 14147  129E  09A9               	comf	___awtoft@c+1,f
 14148  129F  0AA8               	incf	___awtoft@c,f
 14149  12A0  1903               	skipnz
 14150  12A1  0AA9               	incf	___awtoft@c+1,f
 14151  12A2  01AD               	clrf	___awtoft@sign
 14152  12A3  0AAD               	incf	___awtoft@sign,f
 14153  12A4                     l7648:	
 14154  12A4  0828               	movf	___awtoft@c,w
 14155  12A5  00A0               	movwf	___ftpack@arg
 14156  12A6  0829               	movf	___awtoft@c+1,w
 14157  12A7  00A1               	movwf	___ftpack@arg+1
 14158  12A8  01A2               	clrf	___ftpack@arg+2
 14159  12A9  308E               	movlw	142
 14160  12AA  00AB               	movwf	??___awtoft
 14161  12AB  082B               	movf	??___awtoft,w
 14162  12AC  00A3               	movwf	___ftpack@exp
 14163  12AD  082D               	movf	___awtoft@sign,w
 14164  12AE  00AC               	movwf	??___awtoft+1
 14165  12AF  082C               	movf	??___awtoft+1,w
 14166  12B0  00A4               	movwf	___ftpack@sign
 14167  12B1  318A  2276         	fcall	___ftpack
 14168  12B3  0020               	movlb	0	; select bank0
 14169  12B4  0820               	movf	?___ftpack,w
 14170  12B5  00A8               	movwf	?___awtoft
 14171  12B6  0821               	movf	?___ftpack+1,w
 14172  12B7  00A9               	movwf	?___awtoft+1
 14173  12B8  0822               	movf	?___ftpack+2,w
 14174  12B9  00AA               	movwf	?___awtoft+2
 14175  12BA  0008               	return
 14176  12BB                     __end_of___awtoft:	
 14177                           
 14178                           	psect	text87
 14179  0A76                     __ptext87:	
 14180 ;; *************** function ___ftpack *****************
 14181 ;; Defined at:
 14182 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14183 ;; Parameters:    Size  Location     Type
 14184 ;;  arg             3    0[BANK0 ] unsigned um
 14185 ;;  exp             1    3[BANK0 ] unsigned char 
 14186 ;;  sign            1    4[BANK0 ] unsigned char 
 14187 ;; Auto vars:     Size  Location     Type
 14188 ;;		None
 14189 ;; Return value:  Size  Location     Type
 14190 ;;                  3    0[BANK0 ] float 
 14191 ;; Registers used:
 14192 ;;		wreg, status,2, status,0
 14193 ;; Tracked objects:
 14194 ;;		On entry : 0/0
 14195 ;;		On exit  : 0/0
 14196 ;;		Unchanged: 0/0
 14197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14198 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;Total ram usage:        8 bytes
 14203 ;; Hardware stack levels used:    1
 14204 ;; Hardware stack levels required when called:    5
 14205 ;; This function calls:
 14206 ;;		Nothing
 14207 ;; This function is called by:
 14208 ;;		___awtoft
 14209 ;;		___ftadd
 14210 ;;		___ftdiv
 14211 ;;		___ftmul
 14212 ;; This function uses a non-reentrant model
 14213 ;;
 14214                           
 14215                           
 14216                           ;psect for function ___ftpack
 14217  0A76                     ___ftpack:	
 14218                           
 14219                           ;incstack = 0
 14220                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14221  0A76  0020               	movlb	0	; select bank0
 14222  0A77  0823               	movf	___ftpack@exp,w
 14223  0A78  1903               	btfsc	3,2
 14224  0A79  2A7F               	goto	l7598
 14225  0A7A  0822               	movf	___ftpack@arg+2,w
 14226  0A7B  0421               	iorwf	___ftpack@arg+1,w
 14227  0A7C  0420               	iorwf	___ftpack@arg,w
 14228  0A7D  1D03               	skipz
 14229  0A7E  2A90               	goto	l7604
 14230  0A7F                     l7598:	
 14231  0A7F  3000               	movlw	0
 14232  0A80  00A0               	movwf	?___ftpack
 14233  0A81  3000               	movlw	0
 14234  0A82  00A1               	movwf	?___ftpack+1
 14235  0A83  3000               	movlw	0
 14236  0A84  00A2               	movwf	?___ftpack+2
 14237  0A85  0008               	return
 14238  0A86                     l7602:	
 14239  0A86  3001               	movlw	1
 14240  0A87  00A5               	movwf	??___ftpack
 14241  0A88  0825               	movf	??___ftpack,w
 14242  0A89  07A3               	addwf	___ftpack@exp,f
 14243  0A8A  3001               	movlw	1
 14244  0A8B                     u7535:	
 14245  0A8B  36A2               	lsrf	___ftpack@arg+2,f
 14246  0A8C  0CA1               	rrf	___ftpack@arg+1,f
 14247  0A8D  0CA0               	rrf	___ftpack@arg,f
 14248  0A8E  0B89               	decfsz	9,f
 14249  0A8F  2A8B               	goto	u7535
 14250  0A90                     l7604:	
 14251  0A90  30FE               	movlw	254
 14252  0A91  0522               	andwf	___ftpack@arg+2,w
 14253  0A92  1903               	btfsc	3,2
 14254  0A93  2AA9               	goto	l2764
 14255  0A94  2A86               	goto	l7602
 14256  0A95                     l7606:	
 14257  0A95  3001               	movlw	1
 14258  0A96  00A5               	movwf	??___ftpack
 14259  0A97  0825               	movf	??___ftpack,w
 14260  0A98  07A3               	addwf	___ftpack@exp,f
 14261  0A99  3001               	movlw	1
 14262  0A9A  07A0               	addwf	___ftpack@arg,f
 14263  0A9B  3000               	movlw	0
 14264  0A9C  1803               	skipnc
 14265  0A9D  3001               	movlw	1
 14266  0A9E  07A1               	addwf	___ftpack@arg+1,f
 14267  0A9F  3000               	movlw	0
 14268  0AA0  1803               	skipnc
 14269  0AA1  3001               	movlw	1
 14270  0AA2  07A2               	addwf	___ftpack@arg+2,f
 14271  0AA3  3001               	movlw	1
 14272  0AA4                     u7555:	
 14273  0AA4  36A2               	lsrf	___ftpack@arg+2,f
 14274  0AA5  0CA1               	rrf	___ftpack@arg+1,f
 14275  0AA6  0CA0               	rrf	___ftpack@arg,f
 14276  0AA7  0B89               	decfsz	9,f
 14277  0AA8  2AA4               	goto	u7555
 14278  0AA9                     l2764:	
 14279  0AA9  30FF               	movlw	255
 14280  0AAA  0522               	andwf	___ftpack@arg+2,w
 14281  0AAB  1903               	btfsc	3,2
 14282  0AAC  2AB6               	goto	l7614
 14283  0AAD  2A95               	goto	l7606
 14284  0AAE                     l7612:	
 14285  0AAE  3001               	movlw	1
 14286  0AAF  02A3               	subwf	___ftpack@exp,f
 14287  0AB0  3001               	movlw	1
 14288  0AB1                     u7575:	
 14289  0AB1  35A0               	lslf	___ftpack@arg,f
 14290  0AB2  0DA1               	rlf	___ftpack@arg+1,f
 14291  0AB3  0DA2               	rlf	___ftpack@arg+2,f
 14292  0AB4  0B89               	decfsz	9,f
 14293  0AB5  2AB1               	goto	u7575
 14294  0AB6                     l7614:	
 14295  0AB6  1FA1               	btfss	___ftpack@arg+1,7
 14296  0AB7  2AAE               	goto	l7612
 14297  0AB8  1823               	btfsc	___ftpack@exp,0
 14298  0AB9  2AC0               	goto	l2770
 14299  0ABA  30FF               	movlw	255
 14300  0ABB  05A0               	andwf	___ftpack@arg,f
 14301  0ABC  307F               	movlw	127
 14302  0ABD  05A1               	andwf	___ftpack@arg+1,f
 14303  0ABE  30FF               	movlw	255
 14304  0ABF  05A2               	andwf	___ftpack@arg+2,f
 14305  0AC0                     l2770:	
 14306  0AC0  1003               	clrc
 14307  0AC1  0CA3               	rrf	___ftpack@exp,f
 14308  0AC2  0823               	movf	___ftpack@exp,w
 14309  0AC3  00A5               	movwf	??___ftpack
 14310  0AC4  01A6               	clrf	??___ftpack+1
 14311  0AC5  01A7               	clrf	??___ftpack+2
 14312  0AC6  3010               	movlw	16
 14313  0AC7                     u7605:	
 14314  0AC7  35A5               	lslf	??___ftpack,f
 14315  0AC8  0DA6               	rlf	??___ftpack+1,f
 14316  0AC9  0DA7               	rlf	??___ftpack+2,f
 14317  0ACA  0B89               	decfsz	9,f
 14318  0ACB  2AC7               	goto	u7605
 14319  0ACC  0825               	movf	??___ftpack,w
 14320  0ACD  04A0               	iorwf	___ftpack@arg,f
 14321  0ACE  0826               	movf	??___ftpack+1,w
 14322  0ACF  04A1               	iorwf	___ftpack@arg+1,f
 14323  0AD0  0827               	movf	??___ftpack+2,w
 14324  0AD1  04A2               	iorwf	___ftpack@arg+2,f
 14325  0AD2  0824               	movf	___ftpack@sign,w
 14326  0AD3  1903               	btfsc	3,2
 14327  0AD4  0008               	return
 14328  0AD5  17A2               	bsf	___ftpack@arg+2,7
 14329  0AD6  0008               	return
 14330  0AD7                     __end_of___ftpack:	
 14331                           
 14332                           	psect	text88
 14333  11D6                     __ptext88:	
 14334 ;; *************** function _setDimmerLights_TriggerAdj *****************
 14335 ;; Defined at:
 14336 ;;		line 740 in file "../src/Dimmer_B1.c"
 14337 ;; Parameters:    Size  Location     Type
 14338 ;;  lights          1    wreg     unsigned char 
 14339 ;;  command         1    2[BANK0 ] unsigned char 
 14340 ;; Auto vars:     Size  Location     Type
 14341 ;;  lights          1    4[BANK0 ] unsigned char 
 14342 ;; Return value:  Size  Location     Type
 14343 ;;		None               void
 14344 ;; Registers used:
 14345 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14346 ;; Tracked objects:
 14347 ;;		On entry : 0/0
 14348 ;;		On exit  : 0/0
 14349 ;;		Unchanged: 0/0
 14350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14351 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14354 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;Total ram usage:        3 bytes
 14356 ;; Hardware stack levels used:    1
 14357 ;; Hardware stack levels required when called:    6
 14358 ;; This function calls:
 14359 ;;		_DimmerLightsPointSelect
 14360 ;; This function is called by:
 14361 ;;		_setDimmerLights_SwOff
 14362 ;;		_setDimmerLights_AdjControl
 14363 ;; This function uses a non-reentrant model
 14364 ;;
 14365                           
 14366                           
 14367                           ;psect for function _setDimmerLights_TriggerAdj
 14368  11D6                     _setDimmerLights_TriggerAdj:	
 14369                           
 14370                           ;incstack = 0
 14371                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14372                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 14373  11D6  0020               	movlb	0	; select bank0
 14374  11D7  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 14375                           
 14376                           ;Dimmer_B1.c: 741: DimmerLightsPointSelect(lights);
 14377  11D8  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 14378  11D9  319F  2763         	fcall	_DimmerLightsPointSelect
 14379                           
 14380                           ;Dimmer_B1.c: 742: DimmerLights->TriggerAdj = 1;
 14381  11DB  0020               	movlb	0	; select bank0
 14382  11DC  086D               	movf	_DimmerLights,w
 14383  11DD  3E08               	addlw	8
 14384  11DE  0086               	movwf	6
 14385  11DF  3001               	movlw	1	; select bank2/3
 14386  11E0  0087               	movwf	7
 14387  11E1  1601               	bsf	1,4
 14388                           
 14389                           ;Dimmer_B1.c: 743: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 14390  11E2  0822               	movf	setDimmerLights_TriggerAdj@command,w
 14391  11E3  3A01               	xorlw	1
 14392  11E4  3000               	movlw	0
 14393  11E5  1903               	skipnz
 14394  11E6  3001               	movlw	1
 14395  11E7  00A3               	movwf	??_setDimmerLights_TriggerAdj
 14396  11E8  086D               	movf	_DimmerLights,w
 14397  11E9  3E08               	addlw	8
 14398  11EA  0086               	movwf	6
 14399  11EB  3001               	movlw	1	; select bank2/3
 14400  11EC  0087               	movwf	7
 14401  11ED  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 14402  11EE  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 14403  11EF  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 14404  11F0  0801               	movf	1,w
 14405  11F1  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 14406  11F2  39F7               	andlw	-9
 14407  11F3  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 14408  11F4  0081               	movwf	1
 14409  11F5  0008               	return
 14410  11F6                     __end_of_setDimmerLights_TriggerAdj:	
 14411                           
 14412                           	psect	text89
 14413  117A                     __ptext89:	
 14414 ;; *************** function _setDimmerLights_Trigger *****************
 14415 ;; Defined at:
 14416 ;;		line 734 in file "../src/Dimmer_B1.c"
 14417 ;; Parameters:    Size  Location     Type
 14418 ;;  lights          1    wreg     unsigned char 
 14419 ;;  command         1    2[BANK0 ] unsigned char 
 14420 ;; Auto vars:     Size  Location     Type
 14421 ;;  lights          1    4[BANK0 ] unsigned char 
 14422 ;; Return value:  Size  Location     Type
 14423 ;;		None               void
 14424 ;; Registers used:
 14425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14426 ;; Tracked objects:
 14427 ;;		On entry : 0/0
 14428 ;;		On exit  : 0/0
 14429 ;;		Unchanged: 0/0
 14430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14431 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14434 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14435 ;;Total ram usage:        3 bytes
 14436 ;; Hardware stack levels used:    1
 14437 ;; Hardware stack levels required when called:    6
 14438 ;; This function calls:
 14439 ;;		_DimmerLightsPointSelect
 14440 ;; This function is called by:
 14441 ;;		_setDimmerLights_SwOn
 14442 ;;		_setDimmerLights_SwOff
 14443 ;; This function uses a non-reentrant model
 14444 ;;
 14445                           
 14446                           
 14447                           ;psect for function _setDimmerLights_Trigger
 14448  117A                     _setDimmerLights_Trigger:	
 14449                           
 14450                           ;incstack = 0
 14451                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14452                           ;setDimmerLights_Trigger@lights stored from wreg
 14453  117A  0020               	movlb	0	; select bank0
 14454  117B  00A4               	movwf	setDimmerLights_Trigger@lights
 14455                           
 14456                           ;Dimmer_B1.c: 735: DimmerLightsPointSelect(lights);
 14457  117C  0824               	movf	setDimmerLights_Trigger@lights,w
 14458  117D  319F  2763         	fcall	_DimmerLightsPointSelect
 14459                           
 14460                           ;Dimmer_B1.c: 736: DimmerLights->Trigger = 1;
 14461  117F  0020               	movlb	0	; select bank0
 14462  1180  086D               	movf	_DimmerLights,w
 14463  1181  3E08               	addlw	8
 14464  1182  0086               	movwf	6
 14465  1183  3001               	movlw	1	; select bank2/3
 14466  1184  0087               	movwf	7
 14467  1185  1501               	bsf	1,2
 14468                           
 14469                           ;Dimmer_B1.c: 737: DimmerLights->Switch = command == 1 ? 1 : 0;
 14470  1186  0822               	movf	setDimmerLights_Trigger@command,w
 14471  1187  3A01               	xorlw	1
 14472  1188  3000               	movlw	0
 14473  1189  1903               	skipnz
 14474  118A  3001               	movlw	1
 14475  118B  00A3               	movwf	??_setDimmerLights_Trigger
 14476  118C  086D               	movf	_DimmerLights,w
 14477  118D  3E08               	addlw	8
 14478  118E  0086               	movwf	6
 14479  118F  3001               	movlw	1	; select bank2/3
 14480  1190  0087               	movwf	7
 14481  1191  0DA3               	rlf	??_setDimmerLights_Trigger,f
 14482  1192  0801               	movf	1,w
 14483  1193  0623               	xorwf	??_setDimmerLights_Trigger,w
 14484  1194  39FD               	andlw	-3
 14485  1195  0623               	xorwf	??_setDimmerLights_Trigger,w
 14486  1196  0081               	movwf	1
 14487  1197  0008               	return
 14488  1198                     __end_of_setDimmerLights_Trigger:	
 14489                           
 14490                           	psect	text90
 14491  0A15                     __ptext90:	
 14492 ;; *************** function _setDelayOff_GO *****************
 14493 ;; Defined at:
 14494 ;;		line 86 in file "../src/DelayOff_B1.c"
 14495 ;; Parameters:    Size  Location     Type
 14496 ;;  sw              1    wreg     unsigned char 
 14497 ;;  command         1   10[BANK0 ] unsigned char 
 14498 ;;  value           1   11[BANK0 ] unsigned char 
 14499 ;; Auto vars:     Size  Location     Type
 14500 ;;  sw              1   14[BANK0 ] unsigned char 
 14501 ;; Return value:  Size  Location     Type
 14502 ;;		None               void
 14503 ;; Registers used:
 14504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14505 ;; Tracked objects:
 14506 ;;		On entry : 0/0
 14507 ;;		On exit  : 0/0
 14508 ;;		Unchanged: 0/0
 14509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14510 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14513 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14514 ;;Total ram usage:        5 bytes
 14515 ;; Hardware stack levels used:    1
 14516 ;; Hardware stack levels required when called:    7
 14517 ;; This function calls:
 14518 ;;		_DelayOffPointSelect
 14519 ;;		_DelayTimejudge
 14520 ;; This function is called by:
 14521 ;;		_setDimmerLights_SwOff
 14522 ;;		_setRFSW_Control
 14523 ;; This function uses a non-reentrant model
 14524 ;;
 14525                           
 14526                           
 14527                           ;psect for function _setDelayOff_GO
 14528  0A15                     _setDelayOff_GO:	
 14529                           
 14530                           ;incstack = 0
 14531                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14532                           ;setDelayOff_GO@sw stored from wreg
 14533  0A15  0020               	movlb	0	; select bank0
 14534  0A16  00AE               	movwf	setDelayOff_GO@sw
 14535                           
 14536                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
 14537  0A17  082E               	movf	setDelayOff_GO@sw,w
 14538  0A18  319F  27C4  318A   	fcall	_DelayOffPointSelect
 14539                           
 14540                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
 14541  0A1B  0870               	movf	_DelayOff,w
 14542  0A1C  0086               	movwf	6
 14543  0A1D  0871               	movf	_DelayOff+1,w
 14544  0A1E  0087               	movwf	7
 14545  0A1F  1C01               	btfss	1,0
 14546  0A20  0008               	return
 14547                           
 14548                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
 14549  0A21  0020               	movlb	0	; select bank0
 14550  0A22  082A               	movf	setDelayOff_GO@command,w
 14551  0A23  3A01               	xorlw	1
 14552  0A24  3000               	movlw	0
 14553  0A25  1903               	skipnz
 14554  0A26  3001               	movlw	1
 14555  0A27  00AC               	movwf	??_setDelayOff_GO
 14556  0A28  0870               	movf	_DelayOff,w
 14557  0A29  0086               	movwf	6
 14558  0A2A  0871               	movf	_DelayOff+1,w
 14559  0A2B  0087               	movwf	7
 14560  0A2C  0DAC               	rlf	??_setDelayOff_GO,f
 14561  0A2D  0801               	movf	1,w
 14562  0A2E  062C               	xorwf	??_setDelayOff_GO,w
 14563  0A2F  39FD               	andlw	-3
 14564  0A30  062C               	xorwf	??_setDelayOff_GO,w
 14565  0A31  0081               	movwf	1
 14566                           
 14567                           ;DelayOff_B1.c: 90: if (command == 1) {
 14568  0A32  082A               	movf	setDelayOff_GO@command,w
 14569  0A33  3A01               	xorlw	1
 14570  0A34  1D03               	skipz
 14571  0A35  2A60               	goto	l8016
 14572                           
 14573                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
 14574  0A36  082B               	movf	setDelayOff_GO@value,w
 14575  0A37  3193  23EF  318A   	fcall	_DelayTimejudge
 14576  0A3A  0020               	movlb	0	; select bank0
 14577  0A3B  00AC               	movwf	??_setDelayOff_GO
 14578  0A3C  0870               	movf	_DelayOff,w
 14579  0A3D  0086               	movwf	6
 14580  0A3E  0871               	movf	_DelayOff+1,w
 14581  0A3F  0087               	movwf	7
 14582  0A40  082C               	movf	??_setDelayOff_GO,w
 14583  0A41  0081               	movwf	1
 14584                           
 14585                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 14586  0A42  300F               	movlw	15
 14587  0A43  052B               	andwf	setDelayOff_GO@value,w
 14588  0A44  00AC               	movwf	??_setDelayOff_GO
 14589  0A45  082C               	movf	??_setDelayOff_GO,w
 14590  0A46  3A05               	xorlw	5
 14591  0A47  1903               	skipnz
 14592  0A48  2A4D               	goto	l8010
 14593  0A49  082B               	movf	setDelayOff_GO@value,w
 14594  0A4A  390F               	andlw	15
 14595  0A4B  1D03               	btfss	3,2
 14596  0A4C  2A53               	goto	l8014
 14597  0A4D                     l8010:	
 14598  0A4D  3026               	movlw	38
 14599  0A4E  022B               	subwf	setDelayOff_GO@value,w
 14600  0A4F  1803               	skipnc
 14601  0A50  2A53               	goto	l8014
 14602                           
 14603                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
 14604  0A51  082B               	movf	setDelayOff_GO@value,w
 14605  0A52  2A54               	goto	L9
 14606  0A53                     l8014:	
 14607                           ;DelayOff_B1.c: 94: } else {
 14608                           
 14609                           
 14610                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
 14611  0A53  3005               	movlw	5
 14612  0A54                     L9:	
 14613  0A54  00AC               	movwf	??_setDelayOff_GO
 14614  0A55  082E               	movf	setDelayOff_GO@sw,w
 14615  0A56  3E1A               	addlw	26
 14616  0A57  076F               	addwf	_product,w
 14617  0A58  00AD               	movwf	??_setDelayOff_GO+1
 14618  0A59  082D               	movf	??_setDelayOff_GO+1,w
 14619  0A5A  0086               	movwf	6
 14620  0A5B  3002               	movlw	2	; select bank4/5
 14621  0A5C  0087               	movwf	7
 14622  0A5D  082C               	movf	??_setDelayOff_GO,w
 14623  0A5E  0081               	movwf	1
 14624                           
 14625                           ;DelayOff_B1.c: 96: }
 14626                           ;DelayOff_B1.c: 97: } else {
 14627  0A5F  2A69               	goto	l8018
 14628  0A60                     l8016:	
 14629                           
 14630                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
 14631  0A60  082E               	movf	setDelayOff_GO@sw,w
 14632  0A61  3E1A               	addlw	26
 14633  0A62  076F               	addwf	_product,w
 14634  0A63  00AC               	movwf	??_setDelayOff_GO
 14635  0A64  082C               	movf	??_setDelayOff_GO,w
 14636  0A65  0086               	movwf	6
 14637  0A66  3002               	movlw	2	; select bank4/5
 14638  0A67  0087               	movwf	7
 14639  0A68  0181               	clrf	1
 14640  0A69                     l8018:	
 14641                           
 14642                           ;DelayOff_B1.c: 99: }
 14643                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
 14644  0A69  0870               	movf	_DelayOff,w
 14645  0A6A  0086               	movwf	6
 14646  0A6B  0871               	movf	_DelayOff+1,w
 14647  0A6C  0087               	movwf	7
 14648  0A6D  3000               	movlw	0
 14649  0A6E  3FC0               	movwi [0]fsr1
 14650  0A6F  3FC1               	movwi [1]fsr1
 14651                           
 14652                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
 14653  0A70  0870               	movf	_DelayOff,w
 14654  0A71  0086               	movwf	6
 14655  0A72  0871               	movf	_DelayOff+1,w
 14656  0A73  0087               	movwf	7
 14657  0A74  0181               	clrf	1
 14658  0A75  0008               	return
 14659  0A76                     __end_of_setDelayOff_GO:	
 14660                           
 14661                           	psect	text91
 14662  13EF                     __ptext91:	
 14663 ;; *************** function _DelayTimejudge *****************
 14664 ;; Defined at:
 14665 ;;		line 106 in file "../src/DelayOff_B1.c"
 14666 ;; Parameters:    Size  Location     Type
 14667 ;;  value           1    wreg     unsigned char 
 14668 ;; Auto vars:     Size  Location     Type
 14669 ;;  value           1    9[BANK0 ] unsigned char 
 14670 ;;  k               1    8[BANK0 ] unsigned char 
 14671 ;;  j               1    7[BANK0 ] unsigned char 
 14672 ;;  i               1    6[BANK0 ] unsigned char 
 14673 ;; Return value:  Size  Location     Type
 14674 ;;                  1    wreg      unsigned char 
 14675 ;; Registers used:
 14676 ;;		wreg, status,2, status,0, pclath, cstack
 14677 ;; Tracked objects:
 14678 ;;		On entry : 0/0
 14679 ;;		On exit  : 0/0
 14680 ;;		Unchanged: 0/0
 14681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14683 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14684 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14685 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14686 ;;Total ram usage:        6 bytes
 14687 ;; Hardware stack levels used:    1
 14688 ;; Hardware stack levels required when called:    6
 14689 ;; This function calls:
 14690 ;;		___bmul
 14691 ;; This function is called by:
 14692 ;;		_setDelayOff_GO
 14693 ;; This function uses a non-reentrant model
 14694 ;;
 14695                           
 14696                           
 14697                           ;psect for function _DelayTimejudge
 14698  13EF                     _DelayTimejudge:	
 14699                           
 14700                           ;incstack = 0
 14701                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 14702                           ;DelayTimejudge@value stored from wreg
 14703  13EF  0020               	movlb	0	; select bank0
 14704  13F0  00A9               	movwf	DelayTimejudge@value
 14705                           
 14706                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
 14707  13F1  3005               	movlw	5
 14708  13F2  00A4               	movwf	??_DelayTimejudge
 14709  13F3  0824               	movf	??_DelayTimejudge,w
 14710  13F4  00A6               	movwf	DelayTimejudge@i
 14711  13F5  01A7               	clrf	DelayTimejudge@j
 14712  13F6  01A8               	clrf	DelayTimejudge@k
 14713                           
 14714                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
 14715  13F7  3031               	movlw	49
 14716  13F8  0229               	subwf	DelayTimejudge@value,w
 14717  13F9  1803               	skipnc
 14718  13FA  2C17               	goto	l7880
 14719                           
 14720                           ;DelayOff_B1.c: 109: j = value & 0x0f;
 14721  13FB  0829               	movf	DelayTimejudge@value,w
 14722  13FC  390F               	andlw	15
 14723  13FD  00A4               	movwf	??_DelayTimejudge
 14724  13FE  0824               	movf	??_DelayTimejudge,w
 14725  13FF  00A7               	movwf	DelayTimejudge@j
 14726                           
 14727                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
 14728  1400  0829               	movf	DelayTimejudge@value,w
 14729  1401  00A4               	movwf	??_DelayTimejudge
 14730  1402  3004               	movlw	4
 14731  1403                     u8215:	
 14732  1403  36A4               	lsrf	??_DelayTimejudge,f
 14733  1404  0B89               	decfsz	9,f
 14734  1405  2C03               	goto	u8215
 14735  1406  0824               	movf	??_DelayTimejudge,w
 14736  1407  390F               	andlw	15
 14737  1408  00A5               	movwf	??_DelayTimejudge+1
 14738  1409  0825               	movf	??_DelayTimejudge+1,w
 14739  140A  00A8               	movwf	DelayTimejudge@k
 14740                           
 14741                           ;DelayOff_B1.c: 111: i = j + (k * 10);
 14742  140B  300A               	movlw	10
 14743  140C  00A4               	movwf	??_DelayTimejudge
 14744  140D  0824               	movf	??_DelayTimejudge,w
 14745  140E  00A0               	movwf	___bmul@multiplicand
 14746  140F  0828               	movf	DelayTimejudge@k,w
 14747  1410  319F  272D         	fcall	___bmul
 14748  1412  0020               	movlb	0	; select bank0
 14749  1413  0727               	addwf	DelayTimejudge@j,w
 14750  1414  00A5               	movwf	??_DelayTimejudge+1
 14751  1415  0825               	movf	??_DelayTimejudge+1,w
 14752  1416  00A6               	movwf	DelayTimejudge@i
 14753  1417                     l7880:	
 14754                           
 14755                           ;DelayOff_B1.c: 112: }
 14756                           ;DelayOff_B1.c: 133: return i;
 14757  1417  0826               	movf	DelayTimejudge@i,w
 14758  1418  0008               	return
 14759  1419                     __end_of_DelayTimejudge:	
 14760                           
 14761                           	psect	text92
 14762  1F2D                     __ptext92:	
 14763 ;; *************** function ___bmul *****************
 14764 ;; Defined at:
 14765 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14766 ;; Parameters:    Size  Location     Type
 14767 ;;  multiplier      1    wreg     unsigned char 
 14768 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14769 ;; Auto vars:     Size  Location     Type
 14770 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14771 ;;  product         1    2[BANK0 ] unsigned char 
 14772 ;; Return value:  Size  Location     Type
 14773 ;;                  1    wreg      unsigned char 
 14774 ;; Registers used:
 14775 ;;		wreg, status,2, status,0
 14776 ;; Tracked objects:
 14777 ;;		On entry : 0/0
 14778 ;;		On exit  : 0/0
 14779 ;;		Unchanged: 0/0
 14780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14781 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14782 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;Total ram usage:        4 bytes
 14786 ;; Hardware stack levels used:    1
 14787 ;; Hardware stack levels required when called:    5
 14788 ;; This function calls:
 14789 ;;		Nothing
 14790 ;; This function is called by:
 14791 ;;		_DelayTimejudge
 14792 ;; This function uses a non-reentrant model
 14793 ;;
 14794                           
 14795                           
 14796                           ;psect for function ___bmul
 14797  1F2D                     ___bmul:	
 14798                           
 14799                           ;incstack = 0
 14800                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14801                           ;___bmul@multiplier stored from wreg
 14802  1F2D  0020               	movlb	0	; select bank0
 14803  1F2E  00A3               	movwf	___bmul@multiplier
 14804  1F2F  01A2               	clrf	___bmul@product
 14805  1F30                     l7626:	
 14806  1F30  1C23               	btfss	___bmul@multiplier,0
 14807  1F31  2F36               	goto	l7630
 14808  1F32  0820               	movf	___bmul@multiplicand,w
 14809  1F33  00A1               	movwf	??___bmul
 14810  1F34  0821               	movf	??___bmul,w
 14811  1F35  07A2               	addwf	___bmul@product,f
 14812  1F36                     l7630:	
 14813  1F36  1003               	clrc
 14814  1F37  0DA0               	rlf	___bmul@multiplicand,f
 14815  1F38  1003               	clrc
 14816  1F39  0CA3               	rrf	___bmul@multiplier,f
 14817  1F3A  08A3               	movf	___bmul@multiplier,f
 14818  1F3B  1D03               	skipz
 14819  1F3C  2F30               	goto	l7626
 14820  1F3D  0822               	movf	___bmul@product,w
 14821  1F3E  0008               	return
 14822  1F3F                     __end_of___bmul:	
 14823                           
 14824                           	psect	text93
 14825  1EC8                     __ptext93:	
 14826 ;; *************** function _getDimmerLights_Status *****************
 14827 ;; Defined at:
 14828 ;;		line 468 in file "../src/Dimmer_B1.c"
 14829 ;; Parameters:    Size  Location     Type
 14830 ;;  lights          1    wreg     unsigned char 
 14831 ;; Auto vars:     Size  Location     Type
 14832 ;;  lights          1    2[BANK0 ] unsigned char 
 14833 ;;  status          1    3[BANK0 ] unsigned char 
 14834 ;; Return value:  Size  Location     Type
 14835 ;;                  1    wreg      unsigned char 
 14836 ;; Registers used:
 14837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14838 ;; Tracked objects:
 14839 ;;		On entry : 0/0
 14840 ;;		On exit  : 0/0
 14841 ;;		Unchanged: 0/0
 14842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14846 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14847 ;;Total ram usage:        2 bytes
 14848 ;; Hardware stack levels used:    1
 14849 ;; Hardware stack levels required when called:    6
 14850 ;; This function calls:
 14851 ;;		_DimmerLightsPointSelect
 14852 ;; This function is called by:
 14853 ;;		_DlyOff_Main
 14854 ;;		_setMain_Exception
 14855 ;;		_getMain_LightsStatus
 14856 ;;		_setRFSW_Control
 14857 ;;		_setRFSW_AdjControl
 14858 ;; This function uses a non-reentrant model
 14859 ;;
 14860                           
 14861                           
 14862                           ;psect for function _getDimmerLights_Status
 14863  1EC8                     _getDimmerLights_Status:	
 14864                           
 14865                           ;incstack = 0
 14866                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14867                           ;getDimmerLights_Status@lights stored from wreg
 14868  1EC8  0020               	movlb	0	; select bank0
 14869  1EC9  00A2               	movwf	getDimmerLights_Status@lights
 14870                           
 14871                           ;Dimmer_B1.c: 469: DimmerLightsPointSelect(lights);
 14872  1ECA  0822               	movf	getDimmerLights_Status@lights,w
 14873  1ECB  319F  2763         	fcall	_DimmerLightsPointSelect
 14874                           
 14875                           ;Dimmer_B1.c: 470: char status = DimmerLights->Status == 1 ? 1 : 0;
 14876  1ECD  0020               	movlb	0	; select bank0
 14877  1ECE  086D               	movf	_DimmerLights,w
 14878  1ECF  0086               	movwf	6
 14879  1ED0  3001               	movlw	1	; select bank2/3
 14880  1ED1  0087               	movwf	7
 14881  1ED2  3000               	movlw	0
 14882  1ED3  1A81               	btfsc	1,5
 14883  1ED4  3001               	movlw	1
 14884  1ED5  00A3               	movwf	getDimmerLights_Status@status
 14885                           
 14886                           ;Dimmer_B1.c: 471: return status;
 14887  1ED6  0823               	movf	getDimmerLights_Status@status,w
 14888  1ED7  0008               	return
 14889  1ED8                     __end_of_getDimmerLights_Status:	
 14890                           
 14891                           	psect	text94
 14892  1F63                     __ptext94:	
 14893 ;; *************** function _DimmerLightsPointSelect *****************
 14894 ;; Defined at:
 14895 ;;		line 324 in file "../src/Dimmer_B1.c"
 14896 ;; Parameters:    Size  Location     Type
 14897 ;;  lights          1    wreg     unsigned char 
 14898 ;; Auto vars:     Size  Location     Type
 14899 ;;  lights          1    1[BANK0 ] unsigned char 
 14900 ;; Return value:  Size  Location     Type
 14901 ;;		None               void
 14902 ;; Registers used:
 14903 ;;		wreg
 14904 ;; Tracked objects:
 14905 ;;		On entry : 0/0
 14906 ;;		On exit  : 0/0
 14907 ;;		Unchanged: 0/0
 14908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14911 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14912 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14913 ;;Total ram usage:        2 bytes
 14914 ;; Hardware stack levels used:    1
 14915 ;; Hardware stack levels required when called:    5
 14916 ;; This function calls:
 14917 ;;		Nothing
 14918 ;; This function is called by:
 14919 ;;		_setDimmerLights_Initialization
 14920 ;;		_setDimmerLights_Main
 14921 ;;		_getDimmerLights_Status
 14922 ;;		_setDimmerLights_SwOn
 14923 ;;		_setDimmerLights_SwOff
 14924 ;;		_setDimmerLights_AdjControl
 14925 ;;		_setDimmerLights_ErrorClose
 14926 ;;		_setDimmerLights
 14927 ;;		_setDimmerLights_Adj
 14928 ;;		_setDimmerLights_AdjRF
 14929 ;;		_setDimmerLights_Trigger
 14930 ;;		_setDimmerLights_TriggerAdj
 14931 ;;		_setDimmerLights_Status
 14932 ;;		_setDimmerLights_GO
 14933 ;;		_setDimmerLights_MaxmumValue
 14934 ;; This function uses a non-reentrant model
 14935 ;;
 14936                           
 14937                           
 14938                           ;psect for function _DimmerLightsPointSelect
 14939  1F63                     _DimmerLightsPointSelect:	
 14940                           
 14941                           ;incstack = 0
 14942                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 14943                           ;DimmerLightsPointSelect@lights stored from wreg
 14944  1F63  0020               	movlb	0	; select bank0
 14945  1F64  00A1               	movwf	DimmerLightsPointSelect@lights
 14946                           
 14947                           ;Dimmer_B1.c: 326: if (lights == 1) {
 14948  1F65  0821               	movf	DimmerLightsPointSelect@lights,w
 14949  1F66  3A01               	xorlw	1
 14950  1F67  1D03               	skipz
 14951  1F68  2F6D               	goto	l772
 14952                           
 14953                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 14954  1F69  3043               	movlw	_DimmerLights1& (0+255)
 14955  1F6A  00A0               	movwf	??_DimmerLightsPointSelect
 14956  1F6B  0820               	movf	??_DimmerLightsPointSelect,w
 14957  1F6C  00ED               	movwf	_DimmerLights
 14958  1F6D                     l772:	
 14959                           
 14960                           ;Dimmer_B1.c: 328: }
 14961                           ;Dimmer_B1.c: 331: if (lights == 2) {
 14962  1F6D  0821               	movf	DimmerLightsPointSelect@lights,w
 14963  1F6E  3A02               	xorlw	2
 14964  1F6F  1D03               	skipz
 14965  1F70  0008               	return
 14966                           
 14967                           ;Dimmer_B1.c: 332: DimmerLights = &DimmerLights2;
 14968  1F71  3052               	movlw	_DimmerLights2& (0+255)
 14969  1F72  00A0               	movwf	??_DimmerLightsPointSelect
 14970  1F73  0820               	movf	??_DimmerLightsPointSelect,w
 14971  1F74  00ED               	movwf	_DimmerLights
 14972  1F75  0008               	return
 14973  1F76                     __end_of_DimmerLightsPointSelect:	
 14974                           
 14975                           	psect	text95
 14976  1E16                     __ptext95:	
 14977 ;; *************** function _DelayOff_Initialization *****************
 14978 ;; Defined at:
 14979 ;;		line 26 in file "../src/DelayOff_B1.c"
 14980 ;; Parameters:    Size  Location     Type
 14981 ;;		None
 14982 ;; Auto vars:     Size  Location     Type
 14983 ;;		None
 14984 ;; Return value:  Size  Location     Type
 14985 ;;		None               void
 14986 ;; Registers used:
 14987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14988 ;; Tracked objects:
 14989 ;;		On entry : 0/0
 14990 ;;		On exit  : 0/0
 14991 ;;		Unchanged: 0/0
 14992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14997 ;;Total ram usage:        0 bytes
 14998 ;; Hardware stack levels used:    1
 14999 ;; Hardware stack levels required when called:    7
 15000 ;; This function calls:
 15001 ;;		_DlyOff_Initialization
 15002 ;; This function is called by:
 15003 ;;		_main
 15004 ;; This function uses a non-reentrant model
 15005 ;;
 15006                           
 15007                           
 15008                           ;psect for function _DelayOff_Initialization
 15009  1E16                     _DelayOff_Initialization:	
 15010                           
 15011                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15012                           
 15013                           ;incstack = 0
 15014                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15015  1E16  3001               	movlw	1
 15016  1E17  319E  263F  319E   	fcall	_DlyOff_Initialization
 15017                           
 15018                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 15019  1E1A  3002               	movlw	2
 15020  1E1B  319E  263F         	fcall	_DlyOff_Initialization
 15021  1E1D  0008               	return
 15022  1E1E                     __end_of_DelayOff_Initialization:	
 15023                           
 15024                           	psect	text96
 15025  1E3F                     __ptext96:	
 15026 ;; *************** function _DlyOff_Initialization *****************
 15027 ;; Defined at:
 15028 ;;		line 56 in file "../src/DelayOff_B1.c"
 15029 ;; Parameters:    Size  Location     Type
 15030 ;;  sw              1    wreg     unsigned char 
 15031 ;; Auto vars:     Size  Location     Type
 15032 ;;  sw              1    1[BANK0 ] unsigned char 
 15033 ;; Return value:  Size  Location     Type
 15034 ;;		None               void
 15035 ;; Registers used:
 15036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15037 ;; Tracked objects:
 15038 ;;		On entry : 0/0
 15039 ;;		On exit  : 0/0
 15040 ;;		Unchanged: 0/0
 15041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;Total ram usage:        1 bytes
 15047 ;; Hardware stack levels used:    1
 15048 ;; Hardware stack levels required when called:    6
 15049 ;; This function calls:
 15050 ;;		_DelayOffPointSelect
 15051 ;; This function is called by:
 15052 ;;		_DelayOff_Initialization
 15053 ;; This function uses a non-reentrant model
 15054 ;;
 15055                           
 15056                           
 15057                           ;psect for function _DlyOff_Initialization
 15058  1E3F                     _DlyOff_Initialization:	
 15059                           
 15060                           ;incstack = 0
 15061                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15062                           ;DlyOff_Initialization@sw stored from wreg
 15063  1E3F  0020               	movlb	0	; select bank0
 15064  1E40  00A1               	movwf	DlyOff_Initialization@sw
 15065                           
 15066                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15067  1E41  0821               	movf	DlyOff_Initialization@sw,w
 15068  1E42  319F  27C4         	fcall	_DelayOffPointSelect
 15069                           
 15070                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15071  1E44  0870               	movf	_DelayOff,w
 15072  1E45  0086               	movwf	6
 15073  1E46  0871               	movf	_DelayOff+1,w
 15074  1E47  0087               	movwf	7
 15075  1E48  1401               	bsf	1,0
 15076  1E49  0008               	return
 15077  1E4A                     __end_of_DlyOff_Initialization:	
 15078                           
 15079                           	psect	text97
 15080  1FC4                     __ptext97:	
 15081 ;; *************** function _DelayOffPointSelect *****************
 15082 ;; Defined at:
 15083 ;;		line 7 in file "../src/DelayOff_B1.c"
 15084 ;; Parameters:    Size  Location     Type
 15085 ;;  sw              1    wreg     unsigned char 
 15086 ;; Auto vars:     Size  Location     Type
 15087 ;;  sw              1    0[BANK0 ] unsigned char 
 15088 ;; Return value:  Size  Location     Type
 15089 ;;		None               void
 15090 ;; Registers used:
 15091 ;;		wreg, status,2, status,0
 15092 ;; Tracked objects:
 15093 ;;		On entry : 0/0
 15094 ;;		On exit  : 0/0
 15095 ;;		Unchanged: 0/0
 15096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15100 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15101 ;;Total ram usage:        1 bytes
 15102 ;; Hardware stack levels used:    1
 15103 ;; Hardware stack levels required when called:    5
 15104 ;; This function calls:
 15105 ;;		Nothing
 15106 ;; This function is called by:
 15107 ;;		_DlyOff_Initialization
 15108 ;;		_DlyOff_Main
 15109 ;;		_setDelayOff_GO
 15110 ;; This function uses a non-reentrant model
 15111 ;;
 15112                           
 15113                           
 15114                           ;psect for function _DelayOffPointSelect
 15115  1FC4                     _DelayOffPointSelect:	
 15116                           
 15117                           ;incstack = 0
 15118                           ; Regs used in _DelayOffPointSelect: [wreg+status,2+status,0]
 15119                           ;DelayOffPointSelect@sw stored from wreg
 15120  1FC4  0020               	movlb	0	; select bank0
 15121  1FC5  00A0               	movwf	DelayOffPointSelect@sw
 15122                           
 15123                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15124  1FC6  0820               	movf	DelayOffPointSelect@sw,w
 15125  1FC7  3A01               	xorlw	1
 15126  1FC8  1D03               	skipz
 15127  1FC9  2FCF               	goto	l7864
 15128                           
 15129                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15130  1FCA  30E9               	movlw	low _DlySw1
 15131  1FCB  00F0               	movwf	_DelayOff
 15132  1FCC  3000               	movlw	high _DlySw1
 15133  1FCD  00F1               	movwf	_DelayOff+1
 15134                           
 15135                           ;DelayOff_B1.c: 11: }
 15136  1FCE  0008               	return
 15137  1FCF                     l7864:	
 15138                           
 15139                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 15140  1FCF  0820               	movf	DelayOffPointSelect@sw,w
 15141  1FD0  3A02               	xorlw	2
 15142  1FD1  1D03               	skipz
 15143  1FD2  0008               	return
 15144                           
 15145                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 15146  1FD3  306D               	movlw	low _DlySw2
 15147  1FD4  00F0               	movwf	_DelayOff
 15148  1FD5  3001               	movlw	high _DlySw2
 15149  1FD6  00F1               	movwf	_DelayOff+1
 15150  1FD7  0008               	return
 15151  1FD8                     __end_of_DelayOffPointSelect:	
 15152                           
 15153                           	psect	text98
 15154  1086                     __ptext98:	
 15155 ;; *************** function _CC2500_PowerOnInitial *****************
 15156 ;; Defined at:
 15157 ;;		line 122 in file "../src/CC2500_B1.c"
 15158 ;; Parameters:    Size  Location     Type
 15159 ;;		None
 15160 ;; Auto vars:     Size  Location     Type
 15161 ;;		None
 15162 ;; Return value:  Size  Location     Type
 15163 ;;		None               void
 15164 ;; Registers used:
 15165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15166 ;; Tracked objects:
 15167 ;;		On entry : 0/0
 15168 ;;		On exit  : 0/0
 15169 ;;		Unchanged: 0/0
 15170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15175 ;;Total ram usage:        0 bytes
 15176 ;; Hardware stack levels used:    1
 15177 ;; Hardware stack levels required when called:    8
 15178 ;; This function calls:
 15179 ;;		_CC2500_ClearRXFIFO
 15180 ;;		_CC2500_ClearTXFIFO
 15181 ;;		_CC2500_FrequencyCabr
 15182 ;;		_CC2500_InitPATable
 15183 ;;		_CC2500_InitSetREG
 15184 ;;		_CC2500_PowerRST
 15185 ;;		_CC2500_SIDLEMode
 15186 ;; This function is called by:
 15187 ;;		_main
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           
 15192                           ;psect for function _CC2500_PowerOnInitial
 15193  1086                     _CC2500_PowerOnInitial:	
 15194                           
 15195                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 15196                           
 15197                           ;incstack = 0
 15198                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15199  1086  3196  2602  3190   	fcall	_CC2500_PowerRST
 15200                           
 15201                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 15202  1089  3193  23C5  3190   	fcall	_CC2500_InitSetREG
 15203                           
 15204                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 15205  108C  3191  2198  3190   	fcall	_CC2500_InitPATable
 15206                           
 15207                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 15208  108F  319D  25EA  3190   	fcall	_CC2500_ClearTXFIFO
 15209                           
 15210                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 15211  1092  319D  25E6  3190   	fcall	_CC2500_ClearRXFIFO
 15212                           
 15213                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 15214  1095  319E  2655  3190   	fcall	_CC2500_FrequencyCabr
 15215                           
 15216                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 15217  1098  319D  25EE         	fcall	_CC2500_SIDLEMode
 15218  109A  0008               	return
 15219  109B                     __end_of_CC2500_PowerOnInitial:	
 15220                           
 15221                           	psect	text99
 15222  1DEE                     __ptext99:	
 15223 ;; *************** function _CC2500_SIDLEMode *****************
 15224 ;; Defined at:
 15225 ;;		line 212 in file "../src/CC2500_B1.c"
 15226 ;; Parameters:    Size  Location     Type
 15227 ;;		None
 15228 ;; Auto vars:     Size  Location     Type
 15229 ;;		None
 15230 ;; Return value:  Size  Location     Type
 15231 ;;		None               void
 15232 ;; Registers used:
 15233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15234 ;; Tracked objects:
 15235 ;;		On entry : 0/0
 15236 ;;		On exit  : 0/0
 15237 ;;		Unchanged: 0/0
 15238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15243 ;;Total ram usage:        0 bytes
 15244 ;; Hardware stack levels used:    1
 15245 ;; Hardware stack levels required when called:    7
 15246 ;; This function calls:
 15247 ;;		_CC2500_WriteCommand
 15248 ;; This function is called by:
 15249 ;;		_CC2500_PowerOnInitial
 15250 ;; This function uses a non-reentrant model
 15251 ;;
 15252                           
 15253                           
 15254                           ;psect for function _CC2500_SIDLEMode
 15255  1DEE                     _CC2500_SIDLEMode:	
 15256                           
 15257                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 15258                           
 15259                           ;incstack = 0
 15260                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15261  1DEE  3036               	movlw	54
 15262  1DEF  3190  20F5         	fcall	_CC2500_WriteCommand
 15263  1DF1  0008               	return
 15264  1DF2                     __end_of_CC2500_SIDLEMode:	
 15265                           
 15266                           	psect	text100
 15267  1602                     __ptext100:	
 15268 ;; *************** function _CC2500_PowerRST *****************
 15269 ;; Defined at:
 15270 ;;		line 135 in file "../src/CC2500_B1.c"
 15271 ;; Parameters:    Size  Location     Type
 15272 ;;		None
 15273 ;; Auto vars:     Size  Location     Type
 15274 ;;		None
 15275 ;; Return value:  Size  Location     Type
 15276 ;;		None               void
 15277 ;; Registers used:
 15278 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15279 ;; Tracked objects:
 15280 ;;		On entry : 0/0
 15281 ;;		On exit  : 0/0
 15282 ;;		Unchanged: 0/0
 15283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15287 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15288 ;;Total ram usage:        1 bytes
 15289 ;; Hardware stack levels used:    1
 15290 ;; Hardware stack levels required when called:    6
 15291 ;; This function calls:
 15292 ;;		_CC2500_WriteByte
 15293 ;;		_DelayTime_1us
 15294 ;;		_Timeout_Counter
 15295 ;;		_set_TimeoutCleared
 15296 ;; This function is called by:
 15297 ;;		_CC2500_PowerOnInitial
 15298 ;; This function uses a non-reentrant model
 15299 ;;
 15300                           
 15301                           
 15302                           ;psect for function _CC2500_PowerRST
 15303  1602                     _CC2500_PowerRST:	
 15304                           
 15305                           ;CC2500_B1.c: 136: RC1 = 0;
 15306                           
 15307                           ;incstack = 0
 15308                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15309  1602  0020               	movlb	0	; select bank0
 15310  1603  108E               	bcf	14,1	;volatile
 15311                           
 15312                           ;CC2500_B1.c: 137: RC0 = 0;
 15313  1604  100E               	bcf	14,0	;volatile
 15314                           
 15315                           ;CC2500_B1.c: 138: RC4 = 1;
 15316  1605  160E               	bsf	14,4	;volatile
 15317                           
 15318                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 15319  1606  300A               	movlw	10
 15320  1607  00A0               	movwf	DelayTime_1us@count
 15321  1608  3000               	movlw	0
 15322  1609  00A1               	movwf	DelayTime_1us@count+1
 15323  160A  3193  2300  3196   	fcall	_DelayTime_1us
 15324                           
 15325                           ;CC2500_B1.c: 140: RC4 = 0;
 15326  160D  0020               	movlb	0	; select bank0
 15327  160E  120E               	bcf	14,4	;volatile
 15328                           
 15329                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 15330  160F  300A               	movlw	10
 15331  1610  00A0               	movwf	DelayTime_1us@count
 15332  1611  3000               	movlw	0
 15333  1612  00A1               	movwf	DelayTime_1us@count+1
 15334  1613  3193  2300  3196   	fcall	_DelayTime_1us
 15335                           
 15336                           ;CC2500_B1.c: 142: RC4 = 1;
 15337  1616  0020               	movlb	0	; select bank0
 15338  1617  160E               	bsf	14,4	;volatile
 15339                           
 15340                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 15341  1618  3028               	movlw	40
 15342  1619  00A0               	movwf	DelayTime_1us@count
 15343  161A  3000               	movlw	0
 15344  161B  00A1               	movwf	DelayTime_1us@count+1
 15345  161C  3193  2300  3196   	fcall	_DelayTime_1us
 15346                           
 15347                           ;CC2500_B1.c: 144: RC4 = 0;
 15348  161F  0020               	movlb	0	; select bank0
 15349  1620  120E               	bcf	14,4	;volatile
 15350                           
 15351                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 15352  1621  3030               	movlw	48
 15353  1622  00A6               	movwf	??_CC2500_PowerRST
 15354  1623  0826               	movf	??_CC2500_PowerRST,w
 15355  1624  00F4               	movwf	_SPI0Buffer
 15356                           
 15357                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 15358  1625  2E29               	goto	l8798
 15359  1626                     l8796:	
 15360                           
 15361                           ;CC2500_B1.c: 147: Timeout_Counter();
 15362  1626  3190  2071  3196   	fcall	_Timeout_Counter
 15363  1629                     l8798:	
 15364  1629  0020               	movlb	0	; select bank0
 15365  162A  1D0E               	btfss	14,2	;volatile
 15366  162B  2E2F               	goto	l8802
 15367  162C  0021               	movlb	1	; select bank1
 15368  162D  1D2D               	btfss	(_myMain^(0+128)+13),2
 15369  162E  2E26               	goto	l8796
 15370  162F                     l8802:	
 15371                           
 15372                           ;CC2500_B1.c: 148: };
 15373                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 15374  162F  319D  25F6  3196   	fcall	_set_TimeoutCleared
 15375                           
 15376                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 15377  1632  319F  27B0  3196   	fcall	_CC2500_WriteByte
 15378                           
 15379                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 15380  1635  2E39               	goto	l8808
 15381  1636                     l8806:	
 15382                           
 15383                           ;CC2500_B1.c: 152: Timeout_Counter();
 15384  1636  3190  2071  3196   	fcall	_Timeout_Counter
 15385  1639                     l8808:	
 15386  1639  0020               	movlb	0	; select bank0
 15387  163A  1D0E               	btfss	14,2	;volatile
 15388  163B  2E3F               	goto	l8812
 15389  163C  0021               	movlb	1	; select bank1
 15390  163D  1D2D               	btfss	(_myMain^(0+128)+13),2
 15391  163E  2E36               	goto	l8806
 15392  163F                     l8812:	
 15393                           
 15394                           ;CC2500_B1.c: 153: };
 15395                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 15396  163F  319D  25F6         	fcall	_set_TimeoutCleared
 15397                           
 15398                           ;CC2500_B1.c: 155: RC0 = 0;
 15399  1641  0020               	movlb	0	; select bank0
 15400  1642  100E               	bcf	14,0	;volatile
 15401                           
 15402                           ;CC2500_B1.c: 156: RC4 = 1;
 15403  1643  160E               	bsf	14,4	;volatile
 15404  1644  0008               	return
 15405  1645                     __end_of_CC2500_PowerRST:	
 15406                           
 15407                           	psect	text101
 15408  13C5                     __ptext101:	
 15409 ;; *************** function _CC2500_InitSetREG *****************
 15410 ;; Defined at:
 15411 ;;		line 162 in file "../src/CC2500_B1.c"
 15412 ;; Parameters:    Size  Location     Type
 15413 ;;		None
 15414 ;; Auto vars:     Size  Location     Type
 15415 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15416 ;;  temp2           1    7[BANK0 ] unsigned char 
 15417 ;;  temp1           1    6[BANK0 ] unsigned char 
 15418 ;; Return value:  Size  Location     Type
 15419 ;;		None               void
 15420 ;; Registers used:
 15421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15422 ;; Tracked objects:
 15423 ;;		On entry : 0/0
 15424 ;;		On exit  : 0/0
 15425 ;;		Unchanged: 0/0
 15426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15428 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15430 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15431 ;;Total ram usage:        4 bytes
 15432 ;; Hardware stack levels used:    1
 15433 ;; Hardware stack levels required when called:    7
 15434 ;; This function calls:
 15435 ;;		_CC2500_WriteREG
 15436 ;; This function is called by:
 15437 ;;		_CC2500_PowerOnInitial
 15438 ;; This function uses a non-reentrant model
 15439 ;;
 15440                           
 15441                           
 15442                           ;psect for function _CC2500_InitSetREG
 15443  13C5                     _CC2500_InitSetREG:	
 15444                           
 15445                           ;CC2500_B1.c: 163: unsigned char loop_c;
 15446                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 15447                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 15448                           
 15449                           ;incstack = 0
 15450                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15451  13C5  0020               	movlb	0	; select bank0
 15452  13C6  01A8               	clrf	CC2500_InitSetREG@loop_c
 15453  13C7                     L10:	
 15454  13C7  302F               	movlw	47
 15455  13C8  0228               	subwf	CC2500_InitSetREG@loop_c,w
 15456  13C9  1803               	btfsc	3,0
 15457  13CA  0008               	return
 15458                           
 15459                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 15460  13CB  0828               	movf	CC2500_InitSetREG@loop_c,w
 15461  13CC  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 15462  13CD  0084               	movwf	4
 15463  13CE  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 15464  13CF  1803               	skipnc
 15465  13D0  3E01               	addlw	1
 15466  13D1  0085               	movwf	5
 15467  13D2  0800               	movf	0,w	;code access
 15468  13D3  00A5               	movwf	??_CC2500_InitSetREG
 15469  13D4  0825               	movf	??_CC2500_InitSetREG,w
 15470  13D5  00A6               	movwf	CC2500_InitSetREG@temp1
 15471                           
 15472                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 15473  13D6  0828               	movf	CC2500_InitSetREG@loop_c,w
 15474  13D7  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 15475  13D8  0084               	movwf	4
 15476  13D9  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 15477  13DA  1803               	skipnc
 15478  13DB  3E01               	addlw	1
 15479  13DC  0085               	movwf	5
 15480  13DD  0800               	movf	0,w	;code access
 15481  13DE  00A5               	movwf	??_CC2500_InitSetREG
 15482  13DF  0825               	movf	??_CC2500_InitSetREG,w
 15483  13E0  00A7               	movwf	CC2500_InitSetREG@temp2
 15484                           
 15485                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 15486  13E1  0827               	movf	CC2500_InitSetREG@temp2,w
 15487  13E2  00A5               	movwf	??_CC2500_InitSetREG
 15488  13E3  0825               	movf	??_CC2500_InitSetREG,w
 15489  13E4  00A2               	movwf	CC2500_WriteREG@value
 15490  13E5  0826               	movf	CC2500_InitSetREG@temp1,w
 15491  13E6  3192  2236  3193   	fcall	_CC2500_WriteREG
 15492  13E9  3001               	movlw	1
 15493  13EA  0020               	movlb	0	; select bank0
 15494  13EB  00A5               	movwf	??_CC2500_InitSetREG
 15495  13EC  0825               	movf	??_CC2500_InitSetREG,w
 15496  13ED  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 15497  13EE  2BC7               	goto	L10
 15498  13EF                     __end_of_CC2500_InitSetREG:	
 15499                           
 15500                           	psect	text102
 15501  1198                     __ptext102:	
 15502 ;; *************** function _CC2500_InitPATable *****************
 15503 ;; Defined at:
 15504 ;;		line 177 in file "../src/CC2500_B1.c"
 15505 ;; Parameters:    Size  Location     Type
 15506 ;;		None
 15507 ;; Auto vars:     Size  Location     Type
 15508 ;;  loop_d          1    7[BANK0 ] unsigned char 
 15509 ;;  temp            1    6[BANK0 ] unsigned char 
 15510 ;; Return value:  Size  Location     Type
 15511 ;;		None               void
 15512 ;; Registers used:
 15513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15514 ;; Tracked objects:
 15515 ;;		On entry : 0/0
 15516 ;;		On exit  : 0/0
 15517 ;;		Unchanged: 0/0
 15518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15522 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15523 ;;Total ram usage:        3 bytes
 15524 ;; Hardware stack levels used:    1
 15525 ;; Hardware stack levels required when called:    7
 15526 ;; This function calls:
 15527 ;;		_CC2500_WriteREG
 15528 ;; This function is called by:
 15529 ;;		_CC2500_PowerOnInitial
 15530 ;; This function uses a non-reentrant model
 15531 ;;
 15532                           
 15533                           
 15534                           ;psect for function _CC2500_InitPATable
 15535  1198                     _CC2500_InitPATable:	
 15536                           
 15537                           ;CC2500_B1.c: 178: unsigned char loop_d;
 15538                           ;CC2500_B1.c: 179: unsigned char temp;
 15539                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 15540                           
 15541                           ;incstack = 0
 15542                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15543  1198  0020               	movlb	0	; select bank0
 15544  1199  01A7               	clrf	CC2500_InitPATable@loop_d
 15545  119A                     L11:	
 15546  119A  3008               	movlw	8
 15547  119B  0227               	subwf	CC2500_InitPATable@loop_d,w
 15548  119C  1803               	btfsc	3,0
 15549  119D  0008               	return
 15550                           
 15551                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 15552  119E  0827               	movf	CC2500_InitPATable@loop_d,w
 15553  119F  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15554  11A0  0084               	movwf	4
 15555  11A1  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15556  11A2  1803               	skipnc
 15557  11A3  3E01               	addlw	1
 15558  11A4  0085               	movwf	5
 15559  11A5  0800               	movf	0,w	;code access
 15560  11A6  00A5               	movwf	??_CC2500_InitPATable
 15561  11A7  0825               	movf	??_CC2500_InitPATable,w
 15562  11A8  00A6               	movwf	CC2500_InitPATable@temp
 15563                           
 15564                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 15565  11A9  0826               	movf	CC2500_InitPATable@temp,w
 15566  11AA  00A5               	movwf	??_CC2500_InitPATable
 15567  11AB  0825               	movf	??_CC2500_InitPATable,w
 15568  11AC  00A2               	movwf	CC2500_WriteREG@value
 15569  11AD  303E               	movlw	62
 15570  11AE  3192  2236  3191   	fcall	_CC2500_WriteREG
 15571  11B1  3001               	movlw	1
 15572  11B2  0020               	movlb	0	; select bank0
 15573  11B3  00A5               	movwf	??_CC2500_InitPATable
 15574  11B4  0825               	movf	??_CC2500_InitPATable,w
 15575  11B5  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15576  11B6  299A               	goto	L11
 15577  11B7                     __end_of_CC2500_InitPATable:	
 15578                           
 15579                           	psect	text103
 15580  1236                     __ptext103:	
 15581 ;; *************** function _CC2500_WriteREG *****************
 15582 ;; Defined at:
 15583 ;;		line 254 in file "../src/CC2500_B1.c"
 15584 ;; Parameters:    Size  Location     Type
 15585 ;;  w_addr          1    wreg     unsigned char 
 15586 ;;  value           1    2[BANK0 ] unsigned char 
 15587 ;; Auto vars:     Size  Location     Type
 15588 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15589 ;; Return value:  Size  Location     Type
 15590 ;;		None               void
 15591 ;; Registers used:
 15592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15593 ;; Tracked objects:
 15594 ;;		On entry : 0/0
 15595 ;;		On exit  : 0/0
 15596 ;;		Unchanged: 0/0
 15597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15598 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;Total ram usage:        3 bytes
 15603 ;; Hardware stack levels used:    1
 15604 ;; Hardware stack levels required when called:    6
 15605 ;; This function calls:
 15606 ;;		_CC2500_WriteByte
 15607 ;;		_Timeout_Counter
 15608 ;;		_set_TimeoutCleared
 15609 ;; This function is called by:
 15610 ;;		_CC2500_InitSetREG
 15611 ;;		_CC2500_InitPATable
 15612 ;; This function uses a non-reentrant model
 15613 ;;
 15614                           
 15615                           
 15616                           ;psect for function _CC2500_WriteREG
 15617  1236                     _CC2500_WriteREG:	
 15618                           
 15619                           ;incstack = 0
 15620                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15621                           ;CC2500_WriteREG@w_addr stored from wreg
 15622  1236  0020               	movlb	0	; select bank0
 15623  1237  00A4               	movwf	CC2500_WriteREG@w_addr
 15624                           
 15625                           ;CC2500_B1.c: 255: RC4 = 0;
 15626  1238  120E               	bcf	14,4	;volatile
 15627                           
 15628                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 15629  1239  0824               	movf	CC2500_WriteREG@w_addr,w
 15630  123A  00A3               	movwf	??_CC2500_WriteREG
 15631  123B  0823               	movf	??_CC2500_WriteREG,w
 15632  123C  00F4               	movwf	_SPI0Buffer
 15633                           
 15634                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 15635  123D  2A41               	goto	l8528
 15636  123E                     l8526:	
 15637                           
 15638                           ;CC2500_B1.c: 258: Timeout_Counter();
 15639  123E  3190  2071  3192   	fcall	_Timeout_Counter
 15640  1241                     l8528:	
 15641  1241  0020               	movlb	0	; select bank0
 15642  1242  1D0E               	btfss	14,2	;volatile
 15643  1243  2A47               	goto	l8532
 15644  1244  0021               	movlb	1	; select bank1
 15645  1245  1D2D               	btfss	(_myMain^(0+128)+13),2
 15646  1246  2A3E               	goto	l8526
 15647  1247                     l8532:	
 15648                           
 15649                           ;CC2500_B1.c: 259: };
 15650                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 15651  1247  319D  25F6  3192   	fcall	_set_TimeoutCleared
 15652                           
 15653                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 15654  124A  319F  27B0  3192   	fcall	_CC2500_WriteByte
 15655                           
 15656                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 15657  124D  0020               	movlb	0	; select bank0
 15658  124E  0822               	movf	CC2500_WriteREG@value,w
 15659  124F  00A3               	movwf	??_CC2500_WriteREG
 15660  1250  0823               	movf	??_CC2500_WriteREG,w
 15661  1251  00F4               	movwf	_SPI0Buffer
 15662                           
 15663                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 15664  1252  319F  27B0         	fcall	_CC2500_WriteByte
 15665                           
 15666                           ;CC2500_B1.c: 265: RC4 = 1;
 15667  1254  0020               	movlb	0	; select bank0
 15668  1255  160E               	bsf	14,4	;volatile
 15669  1256  0008               	return
 15670  1257                     __end_of_CC2500_WriteREG:	
 15671                           
 15672                           	psect	text104
 15673  1E55                     __ptext104:	
 15674 ;; *************** function _CC2500_FrequencyCabr *****************
 15675 ;; Defined at:
 15676 ;;		line 204 in file "../src/CC2500_B1.c"
 15677 ;; Parameters:    Size  Location     Type
 15678 ;;		None
 15679 ;; Auto vars:     Size  Location     Type
 15680 ;;		None
 15681 ;; Return value:  Size  Location     Type
 15682 ;;		None               void
 15683 ;; Registers used:
 15684 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15685 ;; Tracked objects:
 15686 ;;		On entry : 0/0
 15687 ;;		On exit  : 0/0
 15688 ;;		Unchanged: 0/0
 15689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15694 ;;Total ram usage:        0 bytes
 15695 ;; Hardware stack levels used:    1
 15696 ;; Hardware stack levels required when called:    7
 15697 ;; This function calls:
 15698 ;;		_CC2500_WriteCommand
 15699 ;;		_DelayTime_1us
 15700 ;; This function is called by:
 15701 ;;		_CC2500_PowerOnInitial
 15702 ;; This function uses a non-reentrant model
 15703 ;;
 15704                           
 15705                           
 15706                           ;psect for function _CC2500_FrequencyCabr
 15707  1E55                     _CC2500_FrequencyCabr:	
 15708                           
 15709                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 15710                           
 15711                           ;incstack = 0
 15712                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15713  1E55  3033               	movlw	51
 15714  1E56  3190  20F5  319E   	fcall	_CC2500_WriteCommand
 15715                           
 15716                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 15717  1E59  30E8               	movlw	232
 15718  1E5A  0020               	movlb	0	; select bank0
 15719  1E5B  00A0               	movwf	DelayTime_1us@count
 15720  1E5C  3003               	movlw	3
 15721  1E5D  00A1               	movwf	DelayTime_1us@count+1
 15722  1E5E  3193  2300         	fcall	_DelayTime_1us
 15723  1E60  0008               	return
 15724  1E61                     __end_of_CC2500_FrequencyCabr:	
 15725                           
 15726                           	psect	text105
 15727  1300                     __ptext105:	
 15728 ;; *************** function _DelayTime_1us *****************
 15729 ;; Defined at:
 15730 ;;		line 323 in file "../src/CC2500_B1.c"
 15731 ;; Parameters:    Size  Location     Type
 15732 ;;  count           2    0[BANK0 ] int 
 15733 ;; Auto vars:     Size  Location     Type
 15734 ;;  j               2    4[BANK0 ] unsigned int 
 15735 ;;  i               2    2[BANK0 ] unsigned int 
 15736 ;; Return value:  Size  Location     Type
 15737 ;;		None               void
 15738 ;; Registers used:
 15739 ;;		wreg, status,2
 15740 ;; Tracked objects:
 15741 ;;		On entry : 0/0
 15742 ;;		On exit  : 0/0
 15743 ;;		Unchanged: 0/0
 15744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15745 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15746 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15748 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15749 ;;Total ram usage:        6 bytes
 15750 ;; Hardware stack levels used:    1
 15751 ;; Hardware stack levels required when called:    5
 15752 ;; This function calls:
 15753 ;;		Nothing
 15754 ;; This function is called by:
 15755 ;;		_CC2500_PowerRST
 15756 ;;		_CC2500_FrequencyCabr
 15757 ;; This function uses a non-reentrant model
 15758 ;;
 15759                           
 15760                           
 15761                           ;psect for function _DelayTime_1us
 15762  1300                     _DelayTime_1us:	
 15763                           
 15764                           ;CC2500_B1.c: 324: unsigned int i, j;
 15765                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 15766                           
 15767                           ;incstack = 0
 15768                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 15769  1300  3001               	movlw	1
 15770  1301  0020               	movlb	0	; select bank0
 15771  1302  00A2               	movwf	DelayTime_1us@i
 15772  1303  3000               	movlw	0
 15773  1304  00A3               	movwf	DelayTime_1us@i+1
 15774  1305                     l370:	
 15775  1305  0821               	movf	DelayTime_1us@count+1,w
 15776  1306  0223               	subwf	DelayTime_1us@i+1,w
 15777  1307  1D03               	skipz
 15778  1308  2B0B               	goto	u9075
 15779  1309  0820               	movf	DelayTime_1us@count,w
 15780  130A  0222               	subwf	DelayTime_1us@i,w
 15781  130B                     u9075:	
 15782  130B  1803               	btfsc	3,0
 15783  130C  0008               	return
 15784                           
 15785                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 15786  130D  01A4               	clrf	DelayTime_1us@j
 15787  130E  01A5               	clrf	DelayTime_1us@j+1
 15788  130F  3000               	movlw	0
 15789  1310  0225               	subwf	DelayTime_1us@j+1,w
 15790  1311  3002               	movlw	2
 15791  1312  1903               	skipnz
 15792  1313  0224               	subwf	DelayTime_1us@j,w
 15793  1314  1803               	btfsc	3,0
 15794  1315  2B21               	goto	l8520
 15795  1316                     l8518:	
 15796  1316  3001               	movlw	1
 15797  1317  07A4               	addwf	DelayTime_1us@j,f
 15798  1318  3000               	movlw	0
 15799  1319  3DA5               	addwfc	DelayTime_1us@j+1,f
 15800  131A  3000               	movlw	0
 15801  131B  0225               	subwf	DelayTime_1us@j+1,w
 15802  131C  3002               	movlw	2
 15803  131D  1903               	skipnz
 15804  131E  0224               	subwf	DelayTime_1us@j,w
 15805  131F  1C03               	skipc
 15806  1320  2B16               	goto	l8518
 15807  1321                     l8520:	
 15808  1321  3001               	movlw	1
 15809  1322  07A2               	addwf	DelayTime_1us@i,f
 15810  1323  3000               	movlw	0
 15811  1324  3DA3               	addwfc	DelayTime_1us@i+1,f
 15812  1325  2B05               	goto	l370
 15813  1326                     __end_of_DelayTime_1us:	
 15814                           
 15815                           	psect	text106
 15816  1DEA                     __ptext106:	
 15817 ;; *************** function _CC2500_ClearTXFIFO *****************
 15818 ;; Defined at:
 15819 ;;		line 190 in file "../src/CC2500_B1.c"
 15820 ;; Parameters:    Size  Location     Type
 15821 ;;		None
 15822 ;; Auto vars:     Size  Location     Type
 15823 ;;		None
 15824 ;; Return value:  Size  Location     Type
 15825 ;;		None               void
 15826 ;; Registers used:
 15827 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15828 ;; Tracked objects:
 15829 ;;		On entry : 0/0
 15830 ;;		On exit  : 0/0
 15831 ;;		Unchanged: 0/0
 15832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15837 ;;Total ram usage:        0 bytes
 15838 ;; Hardware stack levels used:    1
 15839 ;; Hardware stack levels required when called:    7
 15840 ;; This function calls:
 15841 ;;		_CC2500_WriteCommand
 15842 ;; This function is called by:
 15843 ;;		_CC2500_PowerOnInitial
 15844 ;; This function uses a non-reentrant model
 15845 ;;
 15846                           
 15847                           
 15848                           ;psect for function _CC2500_ClearTXFIFO
 15849  1DEA                     _CC2500_ClearTXFIFO:	
 15850                           
 15851                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 15852                           
 15853                           ;incstack = 0
 15854                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15855  1DEA  303B               	movlw	59
 15856  1DEB  3190  20F5         	fcall	_CC2500_WriteCommand
 15857  1DED  0008               	return
 15858  1DEE                     __end_of_CC2500_ClearTXFIFO:	
 15859                           
 15860                           	psect	text107
 15861  1DE6                     __ptext107:	
 15862 ;; *************** function _CC2500_ClearRXFIFO *****************
 15863 ;; Defined at:
 15864 ;;		line 197 in file "../src/CC2500_B1.c"
 15865 ;; Parameters:    Size  Location     Type
 15866 ;;		None
 15867 ;; Auto vars:     Size  Location     Type
 15868 ;;		None
 15869 ;; Return value:  Size  Location     Type
 15870 ;;		None               void
 15871 ;; Registers used:
 15872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15873 ;; Tracked objects:
 15874 ;;		On entry : 0/0
 15875 ;;		On exit  : 0/0
 15876 ;;		Unchanged: 0/0
 15877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;Total ram usage:        0 bytes
 15883 ;; Hardware stack levels used:    1
 15884 ;; Hardware stack levels required when called:    7
 15885 ;; This function calls:
 15886 ;;		_CC2500_WriteCommand
 15887 ;; This function is called by:
 15888 ;;		_CC2500_PowerOnInitial
 15889 ;; This function uses a non-reentrant model
 15890 ;;
 15891                           
 15892                           
 15893                           ;psect for function _CC2500_ClearRXFIFO
 15894  1DE6                     _CC2500_ClearRXFIFO:	
 15895                           
 15896                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 15897                           
 15898                           ;incstack = 0
 15899                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15900  1DE6  303A               	movlw	58
 15901  1DE7  3190  20F5         	fcall	_CC2500_WriteCommand
 15902  1DE9  0008               	return
 15903  1DEA                     __end_of_CC2500_ClearRXFIFO:	
 15904                           
 15905                           	psect	text108
 15906  10F5                     __ptext108:	
 15907 ;; *************** function _CC2500_WriteCommand *****************
 15908 ;; Defined at:
 15909 ;;		line 288 in file "../src/CC2500_B1.c"
 15910 ;; Parameters:    Size  Location     Type
 15911 ;;  command         1    wreg     unsigned char 
 15912 ;; Auto vars:     Size  Location     Type
 15913 ;;  command         1    3[BANK0 ] unsigned char 
 15914 ;; Return value:  Size  Location     Type
 15915 ;;		None               void
 15916 ;; Registers used:
 15917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15918 ;; Tracked objects:
 15919 ;;		On entry : 0/0
 15920 ;;		On exit  : 0/0
 15921 ;;		Unchanged: 0/0
 15922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15925 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15926 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15927 ;;Total ram usage:        2 bytes
 15928 ;; Hardware stack levels used:    1
 15929 ;; Hardware stack levels required when called:    6
 15930 ;; This function calls:
 15931 ;;		_CC2500_WriteByte
 15932 ;;		_Timeout_Counter
 15933 ;;		_set_TimeoutCleared
 15934 ;; This function is called by:
 15935 ;;		_CC2500_TxData
 15936 ;;		_CC2500_ClearTXFIFO
 15937 ;;		_CC2500_ClearRXFIFO
 15938 ;;		_CC2500_FrequencyCabr
 15939 ;;		_CC2500_SIDLEMode
 15940 ;;		_setRF_Main
 15941 ;;		_RF_RxDisable
 15942 ;; This function uses a non-reentrant model
 15943 ;;
 15944                           
 15945                           
 15946                           ;psect for function _CC2500_WriteCommand
 15947  10F5                     _CC2500_WriteCommand:	
 15948                           
 15949                           ;incstack = 0
 15950                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15951                           ;CC2500_WriteCommand@command stored from wreg
 15952  10F5  0020               	movlb	0	; select bank0
 15953  10F6  00A3               	movwf	CC2500_WriteCommand@command
 15954                           
 15955                           ;CC2500_B1.c: 289: RC4 = 0;
 15956  10F7  120E               	bcf	14,4	;volatile
 15957                           
 15958                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 15959  10F8  0823               	movf	CC2500_WriteCommand@command,w
 15960  10F9  00A2               	movwf	??_CC2500_WriteCommand
 15961  10FA  0822               	movf	??_CC2500_WriteCommand,w
 15962  10FB  00F4               	movwf	_SPI0Buffer
 15963                           
 15964                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 15965  10FC  2900               	goto	l8256
 15966  10FD                     l8254:	
 15967                           
 15968                           ;CC2500_B1.c: 293: Timeout_Counter();
 15969  10FD  3190  2071  3190   	fcall	_Timeout_Counter
 15970  1100                     l8256:	
 15971  1100  0020               	movlb	0	; select bank0
 15972  1101  1D0E               	btfss	14,2	;volatile
 15973  1102  2906               	goto	l8260
 15974  1103  0021               	movlb	1	; select bank1
 15975  1104  1D2D               	btfss	(_myMain^(0+128)+13),2
 15976  1105  28FD               	goto	l8254
 15977  1106                     l8260:	
 15978                           
 15979                           ;CC2500_B1.c: 294: };
 15980                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 15981  1106  319D  25F6  3190   	fcall	_set_TimeoutCleared
 15982                           
 15983                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 15984  1109  319F  27B0         	fcall	_CC2500_WriteByte
 15985                           
 15986                           ;CC2500_B1.c: 298: RC4 = 1;
 15987  110B  0020               	movlb	0	; select bank0
 15988  110C  160E               	bsf	14,4	;volatile
 15989  110D  0008               	return
 15990  110E                     __end_of_CC2500_WriteCommand:	
 15991                           
 15992                           	psect	text109
 15993  1DF6                     __ptext109:	
 15994 ;; *************** function _set_TimeoutCleared *****************
 15995 ;; Defined at:
 15996 ;;		line 270 in file "../src/Main_B1.c"
 15997 ;; Parameters:    Size  Location     Type
 15998 ;;		None
 15999 ;; Auto vars:     Size  Location     Type
 16000 ;;		None
 16001 ;; Return value:  Size  Location     Type
 16002 ;;		None               void
 16003 ;; Registers used:
 16004 ;;		status,2
 16005 ;; Tracked objects:
 16006 ;;		On entry : 0/0
 16007 ;;		On exit  : 0/0
 16008 ;;		Unchanged: 0/0
 16009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16014 ;;Total ram usage:        0 bytes
 16015 ;; Hardware stack levels used:    1
 16016 ;; Hardware stack levels required when called:    5
 16017 ;; This function calls:
 16018 ;;		Nothing
 16019 ;; This function is called by:
 16020 ;;		_CC2500_TxData
 16021 ;;		_CC2500_RxData
 16022 ;;		_CC2500_PowerRST
 16023 ;;		_CC2500_WriteREG
 16024 ;;		_CC2500_WriteCommand
 16025 ;;		_CC2500_ReadStatus
 16026 ;;		_getAD
 16027 ;;		_TouchPower
 16028 ;;		_CC2500_ReadREG
 16029 ;; This function uses a non-reentrant model
 16030 ;;
 16031                           
 16032                           
 16033                           ;psect for function _set_TimeoutCleared
 16034  1DF6                     _set_TimeoutCleared:	
 16035                           
 16036                           ;Main_B1.c: 271: myMain.Timeout = 0;
 16037                           
 16038                           ;incstack = 0
 16039                           ; Regs used in _set_TimeoutCleared: [status,2]
 16040  1DF6  0021               	movlb	1	; select bank1
 16041  1DF7  112D               	bcf	(_myMain^(0+128)+13),2
 16042                           
 16043                           ;Main_B1.c: 272: myMain.Timeout_Counter = 0;
 16044  1DF8  01AE               	clrf	(_myMain^(0+128)+14)
 16045  1DF9  01AF               	clrf	((_myMain+1)^(0+128)+14)
 16046  1DFA  0008               	return
 16047  1DFB                     __end_of_set_TimeoutCleared:	
 16048                           
 16049                           	psect	text110
 16050  1071                     __ptext110:	
 16051 ;; *************** function _Timeout_Counter *****************
 16052 ;; Defined at:
 16053 ;;		line 261 in file "../src/Main_B1.c"
 16054 ;; Parameters:    Size  Location     Type
 16055 ;;		None
 16056 ;; Auto vars:     Size  Location     Type
 16057 ;;		None
 16058 ;; Return value:  Size  Location     Type
 16059 ;;		None               void
 16060 ;; Registers used:
 16061 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16062 ;; Tracked objects:
 16063 ;;		On entry : 0/0
 16064 ;;		On exit  : 0/0
 16065 ;;		Unchanged: 0/0
 16066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16071 ;;Total ram usage:        0 bytes
 16072 ;; Hardware stack levels used:    1
 16073 ;; Hardware stack levels required when called:    5
 16074 ;; This function calls:
 16075 ;;		Nothing
 16076 ;; This function is called by:
 16077 ;;		_CC2500_TxData
 16078 ;;		_CC2500_RxData
 16079 ;;		_CC2500_PowerRST
 16080 ;;		_CC2500_WriteREG
 16081 ;;		_CC2500_WriteCommand
 16082 ;;		_CC2500_ReadStatus
 16083 ;;		_getAD
 16084 ;;		_TouchPower
 16085 ;;		_CC2500_ReadREG
 16086 ;; This function uses a non-reentrant model
 16087 ;;
 16088                           
 16089                           
 16090                           ;psect for function _Timeout_Counter
 16091  1071                     _Timeout_Counter:	
 16092                           
 16093                           ;Main_B1.c: 262: myMain.Timeout_Counter++;
 16094                           
 16095                           ;incstack = 0
 16096                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16097  1071  3001               	movlw	1
 16098  1072  0021               	movlb	1	; select bank1
 16099  1073  07AE               	addwf	(_myMain^(0+128)+14),f
 16100  1074  3000               	movlw	0
 16101  1075  3DAF               	addwfc	((_myMain+1)^(0+128)+14),f
 16102                           
 16103                           ;Main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
 16104  1076  300E               	movlw	14
 16105  1077  3EA0               	addlw	_myMain& (0+255)
 16106  1078  0086               	movwf	6
 16107  1079  0187               	clrf	7
 16108  107A  3F40               	moviw [0]fsr1
 16109  107B  3A10               	xorlw	16
 16110  107C  1D03               	skipz
 16111  107D  2880               	goto	u8545
 16112  107E  3F41               	moviw [1]fsr1
 16113  107F  3A27               	xorlw	39
 16114  1080                     u8545:	
 16115  1080  1D03               	skipz
 16116  1081  0008               	return
 16117                           
 16118                           ;Main_B1.c: 264: myMain.Timeout_Counter = 0;
 16119  1082  01AE               	clrf	(_myMain^(0+128)+14)
 16120  1083  01AF               	clrf	((_myMain+1)^(0+128)+14)
 16121                           
 16122                           ;Main_B1.c: 265: myMain.Timeout = 1;
 16123  1084  152D               	bsf	(_myMain^(0+128)+13),2
 16124  1085  0008               	return
 16125  1086                     __end_of_Timeout_Counter:	
 16126                           
 16127                           	psect	text111
 16128  1FB0                     __ptext111:	
 16129 ;; *************** function _CC2500_WriteByte *****************
 16130 ;; Defined at:
 16131 ;;		line 222 in file "../src/CC2500_B1.c"
 16132 ;; Parameters:    Size  Location     Type
 16133 ;;		None
 16134 ;; Auto vars:     Size  Location     Type
 16135 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16136 ;; Return value:  Size  Location     Type
 16137 ;;		None               void
 16138 ;; Registers used:
 16139 ;;		wreg, status,2, status,0
 16140 ;; Tracked objects:
 16141 ;;		On entry : 0/0
 16142 ;;		On exit  : 0/0
 16143 ;;		Unchanged: 0/0
 16144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16148 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16149 ;;Total ram usage:        2 bytes
 16150 ;; Hardware stack levels used:    1
 16151 ;; Hardware stack levels required when called:    5
 16152 ;; This function calls:
 16153 ;;		Nothing
 16154 ;; This function is called by:
 16155 ;;		_CC2500_TxData
 16156 ;;		_CC2500_RxData
 16157 ;;		_CC2500_PowerRST
 16158 ;;		_CC2500_WriteREG
 16159 ;;		_CC2500_WriteCommand
 16160 ;;		_CC2500_ReadStatus
 16161 ;;		_CC2500_ReadREG
 16162 ;; This function uses a non-reentrant model
 16163 ;;
 16164                           
 16165                           
 16166                           ;psect for function _CC2500_WriteByte
 16167  1FB0                     _CC2500_WriteByte:	
 16168                           
 16169                           ;CC2500_B1.c: 223: unsigned char loop_a;
 16170                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 16171                           
 16172                           ;incstack = 0
 16173                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16174  1FB0  0020               	movlb	0	; select bank0
 16175  1FB1  01A1               	clrf	CC2500_WriteByte@loop_a
 16176  1FB2                     L12:	
 16177  1FB2  3008               	movlw	8
 16178  1FB3  0221               	subwf	CC2500_WriteByte@loop_a,w
 16179  1FB4  1803               	btfsc	3,0
 16180  1FB5  0008               	return
 16181                           
 16182                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 16183  1FB6  1FF4               	btfss	_SPI0Buffer,7
 16184  1FB7  2FBA               	goto	l326
 16185                           
 16186                           ;CC2500_B1.c: 226: RC0 = 1;
 16187  1FB8  140E               	bsf	14,0	;volatile
 16188  1FB9  2FBB               	goto	l327
 16189  1FBA                     l326:	
 16190                           
 16191                           ;CC2500_B1.c: 227: else
 16192                           ;CC2500_B1.c: 228: RC0 = 0;
 16193  1FBA  100E               	bcf	14,0	;volatile
 16194  1FBB                     l327:	
 16195                           
 16196                           ;CC2500_B1.c: 229: RC1 = 1;
 16197  1FBB  148E               	bsf	14,1	;volatile
 16198                           
 16199                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 16200  1FBC  1003               	clrc
 16201  1FBD  0DF4               	rlf	_SPI0Buffer,f
 16202                           
 16203                           ;CC2500_B1.c: 231: RC1 = 0;
 16204  1FBE  108E               	bcf	14,1	;volatile
 16205  1FBF  3001               	movlw	1
 16206  1FC0  00A0               	movwf	??_CC2500_WriteByte
 16207  1FC1  0820               	movf	??_CC2500_WriteByte,w
 16208  1FC2  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16209  1FC3  2FB2               	goto	L12
 16210  1FC4                     __end_of_CC2500_WriteByte:	
 16211                           
 16212                           	psect	text112
 16213  16CE                     __ptext112:	
 16214 ;; *************** function _Buzzer_Main *****************
 16215 ;; Defined at:
 16216 ;;		line 46 in file "../src/Buzzer_B1.c"
 16217 ;; Parameters:    Size  Location     Type
 16218 ;;		None
 16219 ;; Auto vars:     Size  Location     Type
 16220 ;;		None
 16221 ;; Return value:  Size  Location     Type
 16222 ;;		None               void
 16223 ;; Registers used:
 16224 ;;		wreg, status,2, status,0
 16225 ;; Tracked objects:
 16226 ;;		On entry : 0/0
 16227 ;;		On exit  : 0/0
 16228 ;;		Unchanged: 0/0
 16229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;Total ram usage:        1 bytes
 16235 ;; Hardware stack levels used:    1
 16236 ;; Hardware stack levels required when called:    5
 16237 ;; This function calls:
 16238 ;;		Nothing
 16239 ;; This function is called by:
 16240 ;;		_main
 16241 ;; This function uses a non-reentrant model
 16242 ;;
 16243                           
 16244                           
 16245                           ;psect for function _Buzzer_Main
 16246  16CE                     _Buzzer_Main:	
 16247                           
 16248                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16249                           
 16250                           ;incstack = 0
 16251                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16252  16CE  0021               	movlb	1	; select bank1
 16253  16CF  1CB0               	btfss	_Buz1^(0+128),1
 16254  16D0  0008               	return
 16255                           
 16256                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16257  16D1  3001               	movlw	1
 16258  16D2  07B1               	addwf	(_Buz1^(0+128)+1),f
 16259  16D3  3000               	movlw	0
 16260  16D4  3DB2               	addwfc	((_Buz1+1)^(0+128)+1),f
 16261                           
 16262                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16263  16D5  0837               	movf	((_Buz1+1)^(0+128)+6),w
 16264  16D6  0232               	subwf	((_Buz1+1)^(0+128)+1),w
 16265  16D7  1D03               	skipz
 16266  16D8  2EDB               	goto	u10465
 16267  16D9  0836               	movf	(_Buz1^(0+128)+6),w
 16268  16DA  0231               	subwf	(_Buz1^(0+128)+1),w
 16269  16DB                     u10465:	
 16270  16DB  1C03               	skipc
 16271  16DC  0008               	return
 16272                           
 16273                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16274  16DD  01B1               	clrf	(_Buz1^(0+128)+1)
 16275  16DE  01B2               	clrf	((_Buz1+1)^(0+128)+1)
 16276                           
 16277                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16278  16DF  12B0               	bcf	_Buz1^(0+128),5
 16279  16E0  0020               	movlb	0	; select bank0
 16280  16E1  1D8D               	btfss	13,3	;volatile
 16281  16E2  2EE5               	goto	l9368
 16282  16E3  0021               	movlb	1	; select bank1
 16283  16E4  16B0               	bsf	_Buz1^(0+128),5
 16284  16E5                     l9368:	
 16285                           
 16286                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16287  16E5  0021               	movlb	1	; select bank1
 16288  16E6  1AB0               	btfsc	_Buz1^(0+128),5
 16289  16E7  2F11               	goto	l104
 16290                           
 16291                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16292  16E8  08B3               	movf	(_Buz1^(0+128)+3),f
 16293  16E9  1D03               	skipz
 16294  16EA  2F0D               	goto	l105
 16295                           
 16296                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16297  16EB  1DB0               	btfss	_Buz1^(0+128),3
 16298  16EC  2EFB               	goto	l106
 16299                           
 16300                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16301  16ED  11B0               	bcf	_Buz1^(0+128),3
 16302                           
 16303                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16304  16EE  0834               	movf	(_Buz1^(0+128)+4),w
 16305  16EF  0020               	movlb	0	; select bank0
 16306  16F0  00A0               	movwf	??_Buzzer_Main
 16307  16F1  0820               	movf	??_Buzzer_Main,w
 16308  16F2  0021               	movlb	1	; select bank1
 16309  16F3  00B3               	movwf	(_Buz1^(0+128)+3)
 16310                           
 16311                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16312  16F4  0839               	movf	((_Buz1+1)^(0+128)+8),w
 16313  16F5  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 16314  16F6  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 16315  16F7  0838               	movf	(_Buz1^(0+128)+8),w
 16316  16F8  01B6               	clrf	(_Buz1^(0+128)+6)
 16317  16F9  07B6               	addwf	(_Buz1^(0+128)+6),f
 16318                           
 16319                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16320  16FA  0008               	return
 16321  16FB                     l106:	
 16322  16FB  1E30               	btfss	_Buz1^(0+128),4
 16323  16FC  2F0B               	goto	l108
 16324                           
 16325                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 16326  16FD  1230               	bcf	_Buz1^(0+128),4
 16327                           
 16328                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 16329  16FE  0835               	movf	(_Buz1^(0+128)+5),w
 16330  16FF  0020               	movlb	0	; select bank0
 16331  1700  00A0               	movwf	??_Buzzer_Main
 16332  1701  0820               	movf	??_Buzzer_Main,w
 16333  1702  0021               	movlb	1	; select bank1
 16334  1703  00B3               	movwf	(_Buz1^(0+128)+3)
 16335                           
 16336                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 16337  1704  083B               	movf	((_Buz1+1)^(0+128)+10),w
 16338  1705  01B7               	clrf	((_Buz1+1)^(0+128)+6)
 16339  1706  07B7               	addwf	((_Buz1+1)^(0+128)+6),f
 16340  1707  083A               	movf	(_Buz1^(0+128)+10),w
 16341  1708  01B6               	clrf	(_Buz1^(0+128)+6)
 16342  1709  07B6               	addwf	(_Buz1^(0+128)+6),f
 16343                           
 16344                           ;Buzzer_B1.c: 62: } else {
 16345  170A  0008               	return
 16346  170B                     l108:	
 16347                           
 16348                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 16349  170B  10B0               	bcf	_Buz1^(0+128),1
 16350                           
 16351                           ;Buzzer_B1.c: 64: }
 16352                           ;Buzzer_B1.c: 65: } else {
 16353  170C  0008               	return
 16354  170D                     l105:	
 16355                           
 16356                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 16357  170D  16B0               	bsf	_Buz1^(0+128),5
 16358                           
 16359                           ;Buzzer_B1.c: 68: RB3 = 1;
 16360  170E  0020               	movlb	0	; select bank0
 16361  170F  158D               	bsf	13,3	;volatile
 16362                           
 16363                           ;Buzzer_B1.c: 69: }
 16364                           ;Buzzer_B1.c: 70: } else {
 16365  1710  0008               	return
 16366  1711                     l104:	
 16367                           
 16368                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 16369  1711  12B0               	bcf	_Buz1^(0+128),5
 16370                           
 16371                           ;Buzzer_B1.c: 73: RB3 = 0;
 16372  1712  0020               	movlb	0	; select bank0
 16373  1713  118D               	bcf	13,3	;volatile
 16374                           
 16375                           ;Buzzer_B1.c: 75: Buz1.Count--;
 16376  1714  3001               	movlw	1
 16377  1715  0021               	movlb	1	; select bank1
 16378  1716  02B3               	subwf	(_Buz1^(0+128)+3),f
 16379  1717  0008               	return
 16380  1718                     __end_of_Buzzer_Main:	
 16381                           
 16382                           	psect	text113
 16383  1DD7                     __ptext113:	
 16384 ;; *************** function _Buzzer_Initialization *****************
 16385 ;; Defined at:
 16386 ;;		line 11 in file "../src/Buzzer_B1.c"
 16387 ;; Parameters:    Size  Location     Type
 16388 ;;		None
 16389 ;; Auto vars:     Size  Location     Type
 16390 ;;		None
 16391 ;; Return value:  Size  Location     Type
 16392 ;;		None               void
 16393 ;; Registers used:
 16394 ;;		None
 16395 ;; Tracked objects:
 16396 ;;		On entry : 0/0
 16397 ;;		On exit  : 0/0
 16398 ;;		Unchanged: 0/0
 16399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;Total ram usage:        0 bytes
 16405 ;; Hardware stack levels used:    1
 16406 ;; Hardware stack levels required when called:    5
 16407 ;; This function calls:
 16408 ;;		Nothing
 16409 ;; This function is called by:
 16410 ;;		_main
 16411 ;; This function uses a non-reentrant model
 16412 ;;
 16413                           
 16414                           
 16415                           ;psect for function _Buzzer_Initialization
 16416  1DD7                     _Buzzer_Initialization:	
 16417                           
 16418                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 16419                           
 16420                           ;incstack = 0
 16421                           ; Regs used in _Buzzer_Initialization: []
 16422  1DD7  0021               	movlb	1	; select bank1
 16423  1DD8  1430               	bsf	_Buz1^(0+128),0
 16424  1DD9  0008               	return
 16425  1DDA                     __end_of_Buzzer_Initialization:	
 16426                           
 16427                           	psect	intentry
 16428  0004                     __pintentry:	
 16429 ;; *************** function _ISR *****************
 16430 ;; Defined at:
 16431 ;;		line 107 in file "../src/MCU_B1.c"
 16432 ;; Parameters:    Size  Location     Type
 16433 ;;		None
 16434 ;; Auto vars:     Size  Location     Type
 16435 ;;		None
 16436 ;; Return value:  Size  Location     Type
 16437 ;;		None               void
 16438 ;; Registers used:
 16439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16440 ;; Tracked objects:
 16441 ;;		On entry : 0/0
 16442 ;;		On exit  : 0/0
 16443 ;;		Unchanged: 0/0
 16444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16447 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16448 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16449 ;;Total ram usage:        1 bytes
 16450 ;; Hardware stack levels used:    1
 16451 ;; Hardware stack levels required when called:    4
 16452 ;; This function calls:
 16453 ;;		_IOC_ISR
 16454 ;;		_TMR1_ISR
 16455 ;; This function is called by:
 16456 ;;		Interrupt level 1
 16457 ;; This function uses a non-reentrant model
 16458 ;;
 16459                           
 16460  0004                     _ISR:	
 16461                           
 16462                           ;incstack = 0
 16463                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16464  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16465  0005  3180               	pagesel	$
 16466  0006  0020               	movlb	0	; select bank0
 16467  0007  087F               	movf	127,w
 16468  0008  00FB               	movwf	??_ISR
 16469                           
 16470                           ;MCU_B1.c: 109: IOC_ISR();
 16471  0009  319E  26AA  3180   	fcall	_IOC_ISR
 16472                           
 16473                           ;MCU_B1.c: 111: ;;
 16474                           ;MCU_B1.c: 113: TMR1_ISR();
 16475  000C  3193  2375         	fcall	_TMR1_ISR
 16476  000E  087B               	movf	??_ISR,w
 16477  000F  0020               	movlb	0	; select bank0
 16478  0010  00FF               	movwf	127
 16479  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 16480  0012  0009               	retfie
 16481  0013                     __end_of_ISR:	
 16482                           
 16483                           	psect	text115
 16484  1375                     __ptext115:	
 16485 ;; *************** function _TMR1_ISR *****************
 16486 ;; Defined at:
 16487 ;;		line 209 in file "../src/MCU_B1.c"
 16488 ;; Parameters:    Size  Location     Type
 16489 ;;		None
 16490 ;; Auto vars:     Size  Location     Type
 16491 ;;		None
 16492 ;; Return value:  Size  Location     Type
 16493 ;;		None               void
 16494 ;; Registers used:
 16495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16496 ;; Tracked objects:
 16497 ;;		On entry : 0/0
 16498 ;;		On exit  : 0/0
 16499 ;;		Unchanged: 0/0
 16500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16505 ;;Total ram usage:        0 bytes
 16506 ;; Hardware stack levels used:    1
 16507 ;; Hardware stack levels required when called:    2
 16508 ;; This function calls:
 16509 ;;		_setDimmerLights_IntrControl
 16510 ;; This function is called by:
 16511 ;;		_ISR
 16512 ;; This function uses a non-reentrant model
 16513 ;;
 16514                           
 16515                           
 16516                           ;psect for function _TMR1_ISR
 16517  1375                     _TMR1_ISR:	
 16518                           
 16519                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 16520                           
 16521                           ;incstack = 0
 16522                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16523  1375  0021               	movlb	1	; select bank1
 16524  1376  1C11               	btfss	17,0	;volatile
 16525  1377  0008               	return
 16526  1378  0020               	movlb	0	; select bank0
 16527  1379  1C11               	btfss	17,0	;volatile
 16528  137A  0008               	return
 16529                           
 16530                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 16531  137B  30FA               	movlw	250
 16532  137C  0097               	movwf	23	;volatile
 16533                           
 16534                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 16535  137D  3038               	movlw	56
 16536  137E  0096               	movwf	22	;volatile
 16537                           
 16538                           ;MCU_B1.c: 214: TMR1IF = 0;
 16539  137F  1011               	bcf	17,0	;volatile
 16540                           
 16541                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 16542  1380  3001               	movlw	1
 16543  1381  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 16544                           
 16545                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 16546  1384  3002               	movlw	2
 16547  1385  3180  2045  3193   	fcall	_setDimmerLights_IntrControl
 16548                           
 16549                           ;MCU_B1.c: 234: Timer1.Count++;
 16550  1388  3001               	movlw	1
 16551  1389  0021               	movlb	1	; select bank1
 16552  138A  07C9               	addwf	(_Timer1^(0+128)+1),f
 16553  138B  3000               	movlw	0
 16554  138C  3DCA               	addwfc	((_Timer1+1)^(0+128)+1),f
 16555                           
 16556                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 16557  138D  3001               	movlw	1
 16558  138E  3EC8               	addlw	_Timer1& (0+255)
 16559  138F  0086               	movwf	6
 16560  1390  0187               	clrf	7
 16561  1391  3F40               	moviw [0]fsr1
 16562  1392  3A64               	xorlw	100
 16563  1393  1D03               	skipz
 16564  1394  2B97               	goto	u717_25
 16565  1395  3F41               	moviw [1]fsr1
 16566  1396  3A00               	xorlw	0
 16567  1397                     u717_25:	
 16568  1397  1D03               	skipz
 16569  1398  0008               	return
 16570                           
 16571                           ;MCU_B1.c: 236: {
 16572                           ;MCU_B1.c: 237: Timer1.Count = 0;
 16573  1399  01C9               	clrf	(_Timer1^(0+128)+1)
 16574  139A  01CA               	clrf	((_Timer1+1)^(0+128)+1)
 16575                           
 16576                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 16577  139B  1448               	bsf	_Timer1^(0+128),0
 16578  139C  0008               	return
 16579  139D                     __end_of_TMR1_ISR:	
 16580                           
 16581                           	psect	text116
 16582  0045                     __ptext116:	
 16583 ;; *************** function _setDimmerLights_IntrControl *****************
 16584 ;; Defined at:
 16585 ;;		line 94 in file "../src/Dimmer_B1.c"
 16586 ;; Parameters:    Size  Location     Type
 16587 ;;  lights          1    wreg     unsigned char 
 16588 ;; Auto vars:     Size  Location     Type
 16589 ;;  lights          1    4[COMMON] unsigned char 
 16590 ;; Return value:  Size  Location     Type
 16591 ;;		None               void
 16592 ;; Registers used:
 16593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16594 ;; Tracked objects:
 16595 ;;		On entry : 0/0
 16596 ;;		On exit  : 0/0
 16597 ;;		Unchanged: 0/0
 16598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16600 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16601 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16602 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16603 ;;Total ram usage:        3 bytes
 16604 ;; Hardware stack levels used:    1
 16605 ;; Hardware stack levels required when called:    1
 16606 ;; This function calls:
 16607 ;;		_DimmerIntrPointSelect
 16608 ;; This function is called by:
 16609 ;;		_TMR1_ISR
 16610 ;; This function uses a non-reentrant model
 16611 ;;
 16612                           
 16613                           
 16614                           ;psect for function _setDimmerLights_IntrControl
 16615  0045                     _setDimmerLights_IntrControl:	
 16616                           
 16617                           ;incstack = 0
 16618                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16619                           ;setDimmerLights_IntrControl@lights stored from wreg
 16620  0045  00FA               	movwf	setDimmerLights_IntrControl@lights
 16621                           
 16622                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 16623  0046  087A               	movf	setDimmerLights_IntrControl@lights,w
 16624  0047  319F  271B  3180   	fcall	_DimmerIntrPointSelect
 16625                           
 16626                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 16627  004A  0872               	movf	_DimmerLightsIntr,w
 16628  004B  0086               	movwf	6
 16629  004C  3001               	movlw	1	; select bank2/3
 16630  004D  0087               	movwf	7
 16631  004E  1C01               	btfss	1,0
 16632  004F  289C               	goto	i1l6636
 16633                           
 16634                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 16635  0050  3001               	movlw	1
 16636  0051  00F8               	movwf	??_setDimmerLights_IntrControl
 16637  0052  0872               	movf	_DimmerLightsIntr,w
 16638  0053  3E03               	addlw	3
 16639  0054  0086               	movwf	6
 16640  0055  3001               	movlw	1	; select bank2/3
 16641  0056  0087               	movwf	7
 16642  0057  0878               	movf	??_setDimmerLights_IntrControl,w
 16643  0058  0781               	addwf	1,f
 16644                           
 16645                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r.Correction)) {
 16646  0059  0872               	movf	_DimmerLightsIntr,w
 16647  005A  3E04               	addlw	4
 16648  005B  0086               	movwf	6
 16649  005C  3001               	movlw	1	; select bank2/3
 16650  005D  0087               	movwf	7
 16651  005E  0801               	movf	1,w
 16652  005F  0022               	movlb	2	; select bank2
 16653  0060  0740               	addwf	(_Dimmer^(0+256)+2),w
 16654  0061  00F8               	movwf	??_setDimmerLights_IntrControl
 16655  0062  01F9               	clrf	??_setDimmerLights_IntrControl+1
 16656  0063  0DF9               	rlf	??_setDimmerLights_IntrControl+1,f
 16657  0064  0872               	movf	_DimmerLightsIntr,w
 16658  0065  3E03               	addlw	3
 16659  0066  0086               	movwf	6
 16660  0067  3001               	movlw	1	; select bank2/3
 16661  0068  0087               	movwf	7
 16662  0069  0879               	movf	??_setDimmerLights_IntrControl+1,w
 16663  006A  3A80               	xorlw	128
 16664  006B  3C80               	sublw	128
 16665  006C  1D03               	skipz
 16666  006D  2870               	goto	u593_25
 16667  006E  0878               	movf	??_setDimmerLights_IntrControl,w
 16668  006F  0201               	subwf	1,w
 16669  0070                     u593_25:	
 16670  0070  1C03               	skipc
 16671  0071  299A               	goto	i1l6698
 16672                           
 16673                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 16674  0072  0872               	movf	_DimmerLightsIntr,w
 16675  0073  3E03               	addlw	3
 16676  0074  0086               	movwf	6
 16677  0075  3001               	movlw	1	; select bank2/3
 16678  0076  0087               	movwf	7
 16679  0077  0181               	clrf	1
 16680                           
 16681                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 16682  0078  0872               	movf	_DimmerLightsIntr,w
 16683  0079  0086               	movwf	6
 16684  007A  3001               	movlw	1	; select bank2/3
 16685  007B  0087               	movwf	7
 16686  007C  1001               	bcf	1,0
 16687                           
 16688                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 16689  007D  0872               	movf	_DimmerLightsIntr,w
 16690  007E  0086               	movwf	6
 16691  007F  3001               	movlw	1	; select bank2/3
 16692  0080  0087               	movwf	7
 16693  0081  1F01               	btfss	1,6
 16694  0082  299A               	goto	i1l6698
 16695                           
 16696                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 16697  0083  0872               	movf	_DimmerLightsIntr,w
 16698  0084  3E08               	addlw	8
 16699  0085  0086               	movwf	6
 16700  0086  3001               	movlw	1	; select bank2/3
 16701  0087  0087               	movwf	7
 16702  0088  1401               	bsf	1,0
 16703                           
 16704                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 16705  0089  0872               	movf	_DimmerLightsIntr,w
 16706  008A  3E08               	addlw	8
 16707  008B  0086               	movwf	6
 16708  008C  3001               	movlw	1	; select bank2/3
 16709  008D  0087               	movwf	7
 16710  008E  1681               	bsf	1,5
 16711                           
 16712                           ;Dimmer_B1.c: 107: if (lights == 1) {
 16713  008F  087A               	movf	setDimmerLights_IntrControl@lights,w
 16714  0090  3A01               	xorlw	1
 16715  0091  1D03               	skipz
 16716  0092  2895               	goto	i1l6632
 16717                           
 16718                           ;Dimmer_B1.c: 108: RA7 = 1;
 16719  0093  0020               	movlb	0	; select bank0
 16720  0094  178C               	bsf	12,7	;volatile
 16721  0095                     i1l6632:	
 16722                           ;Dimmer_B1.c: 109: ;;
 16723                           
 16724                           
 16725                           ;Dimmer_B1.c: 110: }
 16726                           ;Dimmer_B1.c: 113: if (lights == 2) {
 16727  0095  087A               	movf	setDimmerLights_IntrControl@lights,w
 16728  0096  3A02               	xorlw	2
 16729  0097  1D03               	skipz
 16730  0098  299A               	goto	i1l6698
 16731                           
 16732                           ;Dimmer_B1.c: 114: RB4 = 1;
 16733  0099  0020               	movlb	0	; select bank0
 16734  009A  160D               	bsf	13,4	;volatile
 16735                           
 16736                           ;Dimmer_B1.c: 115: }
 16737                           ;Dimmer_B1.c: 122: }
 16738                           ;Dimmer_B1.c: 123: }
 16739                           ;Dimmer_B1.c: 124: } else {
 16740  009B  299A               	goto	i1l6698
 16741  009C                     i1l6636:	
 16742                           
 16743                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 16744  009C  0872               	movf	_DimmerLightsIntr,w
 16745  009D  3E08               	addlw	8
 16746  009E  0086               	movwf	6
 16747  009F  3001               	movlw	1	; select bank2/3
 16748  00A0  0087               	movwf	7
 16749  00A1  1C01               	btfss	1,0
 16750  00A2  299A               	goto	i1l6698
 16751                           
 16752                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 16753  00A3  0872               	movf	_DimmerLightsIntr,w
 16754  00A4  3E08               	addlw	8
 16755  00A5  0086               	movwf	6
 16756  00A6  3001               	movlw	1	; select bank2/3
 16757  00A7  0087               	movwf	7
 16758  00A8  1001               	bcf	1,0
 16759                           
 16760                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 16761  00A9  0872               	movf	_DimmerLightsIntr,w
 16762  00AA  0086               	movwf	6
 16763  00AB  3001               	movlw	1	; select bank2/3
 16764  00AC  0087               	movwf	7
 16765  00AD  1C81               	btfss	1,1
 16766  00AE  299A               	goto	i1l6698
 16767                           
 16768                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 16769  00AF  3001               	movlw	1
 16770  00B0  00F8               	movwf	??_setDimmerLights_IntrControl
 16771  00B1  0A72               	incf	_DimmerLightsIntr,w
 16772  00B2  0086               	movwf	6
 16773  00B3  3001               	movlw	1	; select bank2/3
 16774  00B4  0087               	movwf	7
 16775  00B5  0878               	movf	??_setDimmerLights_IntrControl,w
 16776  00B6  0781               	addwf	1,f
 16777                           
 16778                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 16779  00B7  0A72               	incf	_DimmerLightsIntr,w
 16780  00B8  0086               	movwf	6
 16781  00B9  3001               	movlw	1	; select bank2/3
 16782  00BA  0087               	movwf	7
 16783  00BB  0872               	movf	_DimmerLightsIntr,w
 16784  00BC  3E02               	addlw	2
 16785  00BD  0084               	movwf	4
 16786  00BE  3001               	movlw	1	; select bank2/3
 16787  00BF  0085               	movwf	5
 16788  00C0  0800               	movf	0,w
 16789  00C1  0201               	subwf	1,w
 16790  00C2  1C03               	skipc
 16791  00C3  299A               	goto	i1l6698
 16792                           
 16793                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 16794  00C4  0A72               	incf	_DimmerLightsIntr,w
 16795  00C5  0086               	movwf	6
 16796  00C6  3001               	movlw	1	; select bank2/3
 16797  00C7  0087               	movwf	7
 16798  00C8  0181               	clrf	1
 16799                           
 16800                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 16801  00C9  0872               	movf	_DimmerLightsIntr,w
 16802  00CA  0086               	movwf	6
 16803  00CB  3001               	movlw	1	; select bank2/3
 16804  00CC  0087               	movwf	7
 16805  00CD  1D81               	btfss	1,3
 16806  00CE  2905               	goto	i1l6662
 16807                           
 16808                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 16809  00CF  0872               	movf	_DimmerLightsIntr,w
 16810  00D0  0086               	movwf	6
 16811  00D1  3001               	movlw	1	; select bank2/3
 16812  00D2  0087               	movwf	7
 16813  00D3  1A01               	btfsc	1,4
 16814  00D4  28EC               	goto	i1l6656
 16815                           
 16816                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 16817  00D5  0872               	movf	_DimmerLightsIntr,w
 16818  00D6  3E04               	addlw	4
 16819  00D7  0086               	movwf	6
 16820  00D8  3001               	movlw	1	; select bank2/3
 16821  00D9  0087               	movwf	7
 16822  00DA  3021               	movlw	33
 16823  00DB  0201               	subwf	1,w
 16824  00DC  1C03               	skipc
 16825  00DD  28E6               	goto	i1l6654
 16826                           
 16827                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 16828  00DE  0872               	movf	_DimmerLightsIntr,w
 16829  00DF  3E04               	addlw	4
 16830  00E0  0086               	movwf	6
 16831  00E1  3001               	movlw	1	; select bank2/3
 16832  00E2  0087               	movwf	7
 16833  00E3  3001               	movlw	1
 16834  00E4  0281               	subwf	1,f
 16835                           
 16836                           ;Dimmer_B1.c: 135: } else {
 16837  00E5  299A               	goto	i1l6698
 16838  00E6                     i1l6654:	
 16839                           
 16840                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 16841  00E6  0872               	movf	_DimmerLightsIntr,w
 16842  00E7  0086               	movwf	6
 16843  00E8  3001               	movlw	1	; select bank2/3
 16844  00E9  0087               	movwf	7
 16845  00EA  1601               	bsf	1,4
 16846                           
 16847                           ;Dimmer_B1.c: 137: }
 16848                           ;Dimmer_B1.c: 138: } else {
 16849  00EB  299A               	goto	i1l6698
 16850  00EC                     i1l6656:	
 16851                           
 16852                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 16853  00EC  0872               	movf	_DimmerLightsIntr,w
 16854  00ED  3E04               	addlw	4
 16855  00EE  0086               	movwf	6
 16856  00EF  3001               	movlw	1	; select bank2/3
 16857  00F0  0087               	movwf	7
 16858  00F1  303C               	movlw	60
 16859  00F2  0201               	subwf	1,w
 16860  00F3  1803               	skipnc
 16861  00F4  28FF               	goto	i1l6660
 16862                           
 16863                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 16864  00F5  3001               	movlw	1
 16865  00F6  00F8               	movwf	??_setDimmerLights_IntrControl
 16866  00F7  0872               	movf	_DimmerLightsIntr,w
 16867  00F8  3E04               	addlw	4
 16868  00F9  0086               	movwf	6
 16869  00FA  3001               	movlw	1	; select bank2/3
 16870  00FB  0087               	movwf	7
 16871  00FC  0878               	movf	??_setDimmerLights_IntrControl,w
 16872  00FD  0781               	addwf	1,f
 16873                           
 16874                           ;Dimmer_B1.c: 141: } else {
 16875  00FE  299A               	goto	i1l6698
 16876  00FF                     i1l6660:	
 16877                           
 16878                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 16879  00FF  0872               	movf	_DimmerLightsIntr,w
 16880  0100  0086               	movwf	6
 16881  0101  3001               	movlw	1	; select bank2/3
 16882  0102  0087               	movwf	7
 16883  0103  1201               	bcf	1,4
 16884                           
 16885                           ;Dimmer_B1.c: 143: }
 16886                           ;Dimmer_B1.c: 144: }
 16887                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 16888  0104  299A               	goto	i1l6698
 16889  0105                     i1l6662:	
 16890  0105  0872               	movf	_DimmerLightsIntr,w
 16891  0106  0086               	movwf	6
 16892  0107  3001               	movlw	1	; select bank2/3
 16893  0108  0087               	movwf	7
 16894  0109  1D01               	btfss	1,2
 16895  010A  294C               	goto	i1l6676
 16896                           
 16897                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 16898  010B  0872               	movf	_DimmerLightsIntr,w
 16899  010C  3E05               	addlw	5
 16900  010D  0086               	movwf	6
 16901  010E  3001               	movlw	1	; select bank2/3
 16902  010F  0087               	movwf	7
 16903  0110  0872               	movf	_DimmerLightsIntr,w
 16904  0111  3E04               	addlw	4
 16905  0112  0084               	movwf	4
 16906  0113  3001               	movlw	1	; select bank2/3
 16907  0114  0085               	movwf	5
 16908  0115  0800               	movf	0,w
 16909  0116  0201               	subwf	1,w
 16910  0117  1803               	skipnc
 16911  0118  2921               	goto	i1l6668
 16912                           
 16913                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 16914  0119  0872               	movf	_DimmerLightsIntr,w
 16915  011A  3E04               	addlw	4
 16916  011B  0086               	movwf	6
 16917  011C  3001               	movlw	1	; select bank2/3
 16918  011D  0087               	movwf	7
 16919  011E  3001               	movlw	1
 16920  011F  0281               	subwf	1,f
 16921                           
 16922                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 16923  0120  2938               	goto	i1l6672
 16924  0121                     i1l6668:	
 16925  0121  0872               	movf	_DimmerLightsIntr,w
 16926  0122  3E04               	addlw	4
 16927  0123  0086               	movwf	6
 16928  0124  3001               	movlw	1	; select bank2/3
 16929  0125  0087               	movwf	7
 16930  0126  0872               	movf	_DimmerLightsIntr,w
 16931  0127  3E05               	addlw	5
 16932  0128  0084               	movwf	4
 16933  0129  3001               	movlw	1	; select bank2/3
 16934  012A  0085               	movwf	5
 16935  012B  0800               	movf	0,w
 16936  012C  0201               	subwf	1,w
 16937  012D  1803               	skipnc
 16938  012E  2938               	goto	i1l6672
 16939                           
 16940                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 16941  012F  3001               	movlw	1
 16942  0130  00F8               	movwf	??_setDimmerLights_IntrControl
 16943  0131  0872               	movf	_DimmerLightsIntr,w
 16944  0132  3E04               	addlw	4
 16945  0133  0086               	movwf	6
 16946  0134  3001               	movlw	1	; select bank2/3
 16947  0135  0087               	movwf	7
 16948  0136  0878               	movf	??_setDimmerLights_IntrControl,w
 16949  0137  0781               	addwf	1,f
 16950  0138                     i1l6672:	
 16951                           
 16952                           ;Dimmer_B1.c: 150: }
 16953                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 16954  0138  0872               	movf	_DimmerLightsIntr,w
 16955  0139  3E05               	addlw	5
 16956  013A  0086               	movwf	6
 16957  013B  3001               	movlw	1	; select bank2/3
 16958  013C  0087               	movwf	7
 16959  013D  0872               	movf	_DimmerLightsIntr,w
 16960  013E  3E04               	addlw	4
 16961  013F  0084               	movwf	4
 16962  0140  3001               	movlw	1	; select bank2/3
 16963  0141  0085               	movwf	5
 16964  0142  0800               	movf	0,w
 16965  0143  0601               	xorwf	1,w
 16966  0144  1D03               	skipz
 16967  0145  299A               	goto	i1l6698
 16968                           
 16969                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 16970  0146  0872               	movf	_DimmerLightsIntr,w
 16971  0147  0086               	movwf	6
 16972  0148  3001               	movlw	1	; select bank2/3
 16973  0149  0087               	movwf	7
 16974  014A  1101               	bcf	1,2
 16975  014B  2967               	goto	i1l6682
 16976  014C                     i1l6676:	
 16977                           ;Dimmer_B1.c: 154: }
 16978                           ;Dimmer_B1.c: 155: } else {
 16979                           
 16980                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 16981                           
 16982                           
 16983                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 16984  014C  0872               	movf	_DimmerLightsIntr,w
 16985  014D  0086               	movwf	6
 16986  014E  3001               	movlw	1	; select bank2/3
 16987  014F  0087               	movwf	7
 16988  0150  1E81               	btfss	1,5
 16989  0151  296D               	goto	i1l6684
 16990                           
 16991                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 16992  0152  0872               	movf	_DimmerLightsIntr,w
 16993  0153  3E04               	addlw	4
 16994  0154  0086               	movwf	6
 16995  0155  3001               	movlw	1	; select bank2/3
 16996  0156  0087               	movwf	7
 16997  0157  3001               	movlw	1
 16998  0158  0281               	subwf	1,f
 16999                           
 17000                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17001  0159  0872               	movf	_DimmerLightsIntr,w
 17002  015A  3E05               	addlw	5
 17003  015B  0086               	movwf	6
 17004  015C  3001               	movlw	1	; select bank2/3
 17005  015D  0087               	movwf	7
 17006  015E  0872               	movf	_DimmerLightsIntr,w
 17007  015F  3E04               	addlw	4
 17008  0160  0084               	movwf	4
 17009  0161  3001               	movlw	1	; select bank2/3
 17010  0162  0085               	movwf	5
 17011  0163  0800               	movf	0,w
 17012  0164  0201               	subwf	1,w
 17013  0165  1C03               	skipc
 17014  0166  299A               	goto	i1l6698
 17015  0167                     i1l6682:	
 17016                           
 17017                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 17018  0167  0872               	movf	_DimmerLightsIntr,w
 17019  0168  0086               	movwf	6
 17020  0169  3001               	movlw	1	; select bank2/3
 17021  016A  0087               	movwf	7
 17022  016B  1081               	bcf	1,1
 17023                           
 17024                           ;Dimmer_B1.c: 160: }
 17025                           ;Dimmer_B1.c: 161: } else {
 17026  016C  299A               	goto	i1l6698
 17027  016D                     i1l6684:	
 17028                           
 17029                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 17030  016D  3001               	movlw	1
 17031  016E  00F8               	movwf	??_setDimmerLights_IntrControl
 17032  016F  0872               	movf	_DimmerLightsIntr,w
 17033  0170  3E04               	addlw	4
 17034  0171  0086               	movwf	6
 17035  0172  3001               	movlw	1	; select bank2/3
 17036  0173  0087               	movwf	7
 17037  0174  0878               	movf	??_setDimmerLights_IntrControl,w
 17038  0175  0781               	addwf	1,f
 17039                           
 17040                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17041  0176  0872               	movf	_DimmerLightsIntr,w
 17042  0177  3E04               	addlw	4
 17043  0178  0086               	movwf	6
 17044  0179  3001               	movlw	1	; select bank2/3
 17045  017A  0087               	movwf	7
 17046  017B  0872               	movf	_DimmerLightsIntr,w
 17047  017C  3E06               	addlw	6
 17048  017D  0084               	movwf	4
 17049  017E  3001               	movlw	1	; select bank2/3
 17050  017F  0085               	movwf	5
 17051  0180  0800               	movf	0,w
 17052  0181  0201               	subwf	1,w
 17053  0182  1C03               	skipc
 17054  0183  299A               	goto	i1l6698
 17055                           
 17056                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 17057  0184  0872               	movf	_DimmerLightsIntr,w
 17058  0185  0086               	movwf	6
 17059  0186  3001               	movlw	1	; select bank2/3
 17060  0187  0087               	movwf	7
 17061  0188  1081               	bcf	1,1
 17062                           
 17063                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 17064  0189  0872               	movf	_DimmerLightsIntr,w
 17065  018A  0086               	movwf	6
 17066  018B  3001               	movlw	1	; select bank2/3
 17067  018C  0087               	movwf	7
 17068  018D  1301               	bcf	1,6
 17069                           
 17070                           ;Dimmer_B1.c: 167: if (lights == 1) {
 17071  018E  087A               	movf	setDimmerLights_IntrControl@lights,w
 17072  018F  3A01               	xorlw	1
 17073  0190  1D03               	skipz
 17074  0191  2994               	goto	i1l6694
 17075                           
 17076                           ;Dimmer_B1.c: 168: RA3 = 0;
 17077  0192  0020               	movlb	0	; select bank0
 17078  0193  118C               	bcf	12,3	;volatile
 17079  0194                     i1l6694:	
 17080                           
 17081                           ;Dimmer_B1.c: 170: }
 17082                           ;Dimmer_B1.c: 173: if (lights == 2) {
 17083  0194  087A               	movf	setDimmerLights_IntrControl@lights,w
 17084  0195  3A02               	xorlw	2
 17085  0196  1D03               	skipz
 17086  0197  299A               	goto	i1l6698
 17087                           
 17088                           ;Dimmer_B1.c: 174: RC7 = 0;
 17089  0198  0020               	movlb	0	; select bank0
 17090  0199  138E               	bcf	14,7	;volatile
 17091  019A                     i1l6698:	
 17092                           ;Dimmer_B1.c: 175: }
 17093                           ;Dimmer_B1.c: 182: ;;
 17094                           
 17095                           
 17096                           ;Dimmer_B1.c: 183: }
 17097                           ;Dimmer_B1.c: 184: }
 17098                           ;Dimmer_B1.c: 185: }
 17099                           ;Dimmer_B1.c: 186: }
 17100                           ;Dimmer_B1.c: 187: }
 17101                           ;Dimmer_B1.c: 188: }
 17102                           ;Dimmer_B1.c: 189: }
 17103                           ;Dimmer_B1.c: 190: if (DimmerLightsIntr->Triac == 1) {
 17104  019A  0872               	movf	_DimmerLightsIntr,w
 17105  019B  3E08               	addlw	8
 17106  019C  0086               	movwf	6
 17107  019D  3001               	movlw	1	; select bank2/3
 17108  019E  0087               	movwf	7
 17109  019F  1E81               	btfss	1,5
 17110  01A0  29CB               	goto	i1l6716
 17111                           
 17112                           ;Dimmer_B1.c: 191: DimmerLightsIntr->TriacTime++;
 17113  01A1  3001               	movlw	1
 17114  01A2  00F8               	movwf	??_setDimmerLights_IntrControl
 17115  01A3  0872               	movf	_DimmerLightsIntr,w
 17116  01A4  3E07               	addlw	7
 17117  01A5  0086               	movwf	6
 17118  01A6  3001               	movlw	1	; select bank2/3
 17119  01A7  0087               	movwf	7
 17120  01A8  0878               	movf	??_setDimmerLights_IntrControl,w
 17121  01A9  0781               	addwf	1,f
 17122                           
 17123                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->TriacTime >= 5) {
 17124  01AA  0872               	movf	_DimmerLightsIntr,w
 17125  01AB  3E07               	addlw	7
 17126  01AC  0086               	movwf	6
 17127  01AD  3001               	movlw	1	; select bank2/3
 17128  01AE  0087               	movwf	7
 17129  01AF  3005               	movlw	5
 17130  01B0  0201               	subwf	1,w
 17131  01B1  1C03               	skipc
 17132  01B2  29CB               	goto	i1l6716
 17133                           
 17134                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime = 0;
 17135  01B3  0872               	movf	_DimmerLightsIntr,w
 17136  01B4  3E07               	addlw	7
 17137  01B5  0086               	movwf	6
 17138  01B6  3001               	movlw	1	; select bank2/3
 17139  01B7  0087               	movwf	7
 17140  01B8  0181               	clrf	1
 17141                           
 17142                           ;Dimmer_B1.c: 194: DimmerLightsIntr->Triac = 0;
 17143  01B9  0872               	movf	_DimmerLightsIntr,w
 17144  01BA  3E08               	addlw	8
 17145  01BB  0086               	movwf	6
 17146  01BC  3001               	movlw	1	; select bank2/3
 17147  01BD  0087               	movwf	7
 17148  01BE  1281               	bcf	1,5
 17149                           
 17150                           ;Dimmer_B1.c: 197: if (lights == 1) {
 17151  01BF  087A               	movf	setDimmerLights_IntrControl@lights,w
 17152  01C0  3A01               	xorlw	1
 17153  01C1  1D03               	skipz
 17154  01C2  29C5               	goto	i1l6712
 17155                           
 17156                           ;Dimmer_B1.c: 198: RA7 = 0;
 17157  01C3  0020               	movlb	0	; select bank0
 17158  01C4  138C               	bcf	12,7	;volatile
 17159  01C5                     i1l6712:	
 17160                           ;Dimmer_B1.c: 199: ;;
 17161                           
 17162                           
 17163                           ;Dimmer_B1.c: 200: }
 17164                           ;Dimmer_B1.c: 203: if (lights == 2) {
 17165  01C5  087A               	movf	setDimmerLights_IntrControl@lights,w
 17166  01C6  3A02               	xorlw	2
 17167  01C7  1D03               	skipz
 17168  01C8  29CB               	goto	i1l6716
 17169                           
 17170                           ;Dimmer_B1.c: 204: RB4 = 0;
 17171  01C9  0020               	movlb	0	; select bank0
 17172  01CA  120D               	bcf	13,4	;volatile
 17173  01CB                     i1l6716:	
 17174                           
 17175                           ;Dimmer_B1.c: 205: }
 17176                           ;Dimmer_B1.c: 212: }
 17177                           ;Dimmer_B1.c: 213: }
 17178                           ;Dimmer_B1.c: 214: if (DimmerLightsIntr->TriacFlag == 1) {
 17179  01CB  0872               	movf	_DimmerLightsIntr,w
 17180  01CC  3E09               	addlw	9
 17181  01CD  0086               	movwf	6
 17182  01CE  3001               	movlw	1	; select bank2/3
 17183  01CF  0087               	movwf	7
 17184  01D0  1E81               	btfss	1,5
 17185  01D1  0008               	return
 17186                           
 17187                           ;Dimmer_B1.c: 215: DimmerLightsIntr->TriacCount++;
 17188  01D2  3001               	movlw	1
 17189  01D3  00F8               	movwf	??_setDimmerLights_IntrControl
 17190  01D4  0872               	movf	_DimmerLightsIntr,w
 17191  01D5  3E0A               	addlw	10
 17192  01D6  0086               	movwf	6
 17193  01D7  3001               	movlw	1	; select bank2/3
 17194  01D8  0087               	movwf	7
 17195  01D9  0878               	movf	??_setDimmerLights_IntrControl,w
 17196  01DA  0781               	addwf	1,f
 17197                           
 17198                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacCount == 70) {
 17199  01DB  0872               	movf	_DimmerLightsIntr,w
 17200  01DC  3E0A               	addlw	10
 17201  01DD  0086               	movwf	6
 17202  01DE  3001               	movlw	1	; select bank2/3
 17203  01DF  0087               	movwf	7
 17204  01E0  0801               	movf	1,w
 17205  01E1  3A46               	xorlw	70
 17206  01E2  1D03               	skipz
 17207  01E3  0008               	return
 17208                           
 17209                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount = 0;
 17210  01E4  0872               	movf	_DimmerLightsIntr,w
 17211  01E5  3E0A               	addlw	10
 17212  01E6  0086               	movwf	6
 17213  01E7  3001               	movlw	1	; select bank2/3
 17214  01E8  0087               	movwf	7
 17215  01E9  0181               	clrf	1
 17216                           
 17217                           ;Dimmer_B1.c: 218: DimmerLightsIntr->TriacFlag = 0;
 17218  01EA  0872               	movf	_DimmerLightsIntr,w
 17219  01EB  3E09               	addlw	9
 17220  01EC  0086               	movwf	6
 17221  01ED  3001               	movlw	1	; select bank2/3
 17222  01EE  0087               	movwf	7
 17223  01EF  1281               	bcf	1,5
 17224  01F0  0008               	return
 17225  01F1                     __end_of_setDimmerLights_IntrControl:	
 17226                           
 17227                           	psect	text117
 17228  1F1B                     __ptext117:	
 17229 ;; *************** function _DimmerIntrPointSelect *****************
 17230 ;; Defined at:
 17231 ;;		line 72 in file "../src/Dimmer_B1.c"
 17232 ;; Parameters:    Size  Location     Type
 17233 ;;  lights          1    wreg     unsigned char 
 17234 ;; Auto vars:     Size  Location     Type
 17235 ;;  lights          1    1[COMMON] unsigned char 
 17236 ;; Return value:  Size  Location     Type
 17237 ;;		None               void
 17238 ;; Registers used:
 17239 ;;		wreg
 17240 ;; Tracked objects:
 17241 ;;		On entry : 0/0
 17242 ;;		On exit  : 0/0
 17243 ;;		Unchanged: 0/0
 17244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17246 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17247 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17248 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17249 ;;Total ram usage:        2 bytes
 17250 ;; Hardware stack levels used:    1
 17251 ;; This function calls:
 17252 ;;		Nothing
 17253 ;; This function is called by:
 17254 ;;		_setDimmerLights_IntrControl
 17255 ;; This function uses a non-reentrant model
 17256 ;;
 17257                           
 17258                           
 17259                           ;psect for function _DimmerIntrPointSelect
 17260  1F1B                     _DimmerIntrPointSelect:	
 17261                           
 17262                           ;incstack = 0
 17263                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17264                           ;DimmerIntrPointSelect@lights stored from wreg
 17265  1F1B  00F7               	movwf	DimmerIntrPointSelect@lights
 17266                           
 17267                           ;Dimmer_B1.c: 74: if (lights == 1) {
 17268  1F1C  0877               	movf	DimmerIntrPointSelect@lights,w
 17269  1F1D  3A01               	xorlw	1
 17270  1F1E  1D03               	skipz
 17271  1F1F  2F24               	goto	i1l729
 17272                           
 17273                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 17274  1F20  3043               	movlw	_DimmerLights1& (0+255)
 17275  1F21  00F6               	movwf	??_DimmerIntrPointSelect
 17276  1F22  0876               	movf	??_DimmerIntrPointSelect,w
 17277  1F23  00F2               	movwf	_DimmerLightsIntr
 17278  1F24                     i1l729:	
 17279                           
 17280                           ;Dimmer_B1.c: 76: }
 17281                           ;Dimmer_B1.c: 79: if (lights == 2) {
 17282  1F24  0877               	movf	DimmerIntrPointSelect@lights,w
 17283  1F25  3A02               	xorlw	2
 17284  1F26  1D03               	skipz
 17285  1F27  0008               	return
 17286                           
 17287                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 17288  1F28  3052               	movlw	_DimmerLights2& (0+255)
 17289  1F29  00F6               	movwf	??_DimmerIntrPointSelect
 17290  1F2A  0876               	movf	??_DimmerIntrPointSelect,w
 17291  1F2B  00F2               	movwf	_DimmerLightsIntr
 17292  1F2C  0008               	return
 17293  1F2D                     __end_of_DimmerIntrPointSelect:	
 17294                           
 17295                           	psect	text118
 17296  1EAA                     __ptext118:	
 17297 ;; *************** function _IOC_ISR *****************
 17298 ;; Defined at:
 17299 ;;		line 401 in file "../src/MCU_B1.c"
 17300 ;; Parameters:    Size  Location     Type
 17301 ;;		None
 17302 ;; Auto vars:     Size  Location     Type
 17303 ;;		None
 17304 ;; Return value:  Size  Location     Type
 17305 ;;		None               void
 17306 ;; Registers used:
 17307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17308 ;; Tracked objects:
 17309 ;;		On entry : 0/0
 17310 ;;		On exit  : 0/0
 17311 ;;		Unchanged: 0/0
 17312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17317 ;;Total ram usage:        0 bytes
 17318 ;; Hardware stack levels used:    1
 17319 ;; Hardware stack levels required when called:    3
 17320 ;; This function calls:
 17321 ;;		_setDimmerReClock
 17322 ;; This function is called by:
 17323 ;;		_ISR
 17324 ;; This function uses a non-reentrant model
 17325 ;;
 17326                           
 17327                           
 17328                           ;psect for function _IOC_ISR
 17329  1EAA                     _IOC_ISR:	
 17330                           
 17331                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 17332                           
 17333                           ;incstack = 0
 17334                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17335  1EAA  1D8B               	btfss	11,3	;volatile
 17336  1EAB  0008               	return
 17337  1EAC  1C0B               	btfss	11,0	;volatile
 17338  1EAD  0008               	return
 17339  1EAE  0027               	movlb	7	; select bank7
 17340  1EAF  1D16               	btfss	22,2	;volatile
 17341  1EB0  0008               	return
 17342                           
 17343                           ;MCU_B1.c: 403: IOCBF2 = 0;
 17344  1EB1  1116               	bcf	22,2	;volatile
 17345                           
 17346                           ;MCU_B1.c: 404: IOCIF = 0;
 17347  1EB2  100B               	bcf	11,0	;volatile
 17348                           
 17349                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 17350  1EB3  0021               	movlb	1	; select bank1
 17351  1EB4  1C20               	btfss	_myMain^(0+128),0
 17352  1EB5  0008               	return
 17353                           
 17354                           ;MCU_B1.c: 407: setDimmerReClock();
 17355  1EB6  319E  260E         	fcall	_setDimmerReClock
 17356  1EB8  0008               	return
 17357  1EB9                     __end_of_IOC_ISR:	
 17358                           
 17359                           	psect	text119
 17360  1E0E                     __ptext119:	
 17361 ;; *************** function _setDimmerReClock *****************
 17362 ;; Defined at:
 17363 ;;		line 244 in file "../src/MCU_B1.c"
 17364 ;; Parameters:    Size  Location     Type
 17365 ;;		None
 17366 ;; Auto vars:     Size  Location     Type
 17367 ;;		None
 17368 ;; Return value:  Size  Location     Type
 17369 ;;		None               void
 17370 ;; Registers used:
 17371 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17372 ;; Tracked objects:
 17373 ;;		On entry : 0/0
 17374 ;;		On exit  : 0/0
 17375 ;;		Unchanged: 0/0
 17376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17381 ;;Total ram usage:        0 bytes
 17382 ;; Hardware stack levels used:    1
 17383 ;; Hardware stack levels required when called:    2
 17384 ;; This function calls:
 17385 ;;		_setDimmerLights_IntrIOC_GO
 17386 ;; This function is called by:
 17387 ;;		_IOC_ISR
 17388 ;; This function uses a non-reentrant model
 17389 ;;
 17390                           
 17391                           
 17392                           ;psect for function _setDimmerReClock
 17393  1E0E                     _setDimmerReClock:	
 17394                           
 17395                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 17396                           
 17397                           ;incstack = 0
 17398                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17399  1E0E  3001               	movlw	1
 17400  1E0F  3193  234D  319E   	fcall	_setDimmerLights_IntrIOC_GO
 17401                           
 17402                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 17403  1E12  3002               	movlw	2
 17404  1E13  3193  234D         	fcall	_setDimmerLights_IntrIOC_GO
 17405  1E15  0008               	return
 17406  1E16                     __end_of_setDimmerReClock:	
 17407                           
 17408                           	psect	text120
 17409  134D                     __ptext120:	
 17410 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 17411 ;; Defined at:
 17412 ;;		line 28 in file "../src/Dimmer_B1.c"
 17413 ;; Parameters:    Size  Location     Type
 17414 ;;  lights          1    wreg     unsigned char 
 17415 ;; Auto vars:     Size  Location     Type
 17416 ;;  lights          1    2[COMMON] unsigned char 
 17417 ;; Return value:  Size  Location     Type
 17418 ;;		None               void
 17419 ;; Registers used:
 17420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17421 ;; Tracked objects:
 17422 ;;		On entry : 0/0
 17423 ;;		On exit  : 0/0
 17424 ;;		Unchanged: 0/0
 17425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17427 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17429 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17430 ;;Total ram usage:        1 bytes
 17431 ;; Hardware stack levels used:    1
 17432 ;; Hardware stack levels required when called:    1
 17433 ;; This function calls:
 17434 ;;		_DimmerIntrIOCPointSelect
 17435 ;; This function is called by:
 17436 ;;		_setDimmerReClock
 17437 ;; This function uses a non-reentrant model
 17438 ;;
 17439                           
 17440                           
 17441                           ;psect for function _setDimmerLights_IntrIOC_GO
 17442  134D                     _setDimmerLights_IntrIOC_GO:	
 17443                           
 17444                           ;incstack = 0
 17445                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17446                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 17447  134D  00F8               	movwf	setDimmerLights_IntrIOC_GO@lights
 17448                           
 17449                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 17450  134E  0878               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17451  134F  319F  279C  3193   	fcall	_DimmerIntrIOCPointSelect
 17452                           
 17453                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 17454  1352  0021               	movlb	1	; select bank1
 17455  1353  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 17456  1354  0086               	movwf	6
 17457  1355  3001               	movlw	1	; select bank2/3
 17458  1356  0087               	movwf	7
 17459  1357  1801               	btfsc	1,0
 17460  1358  0008               	return
 17461  1359  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 17462  135A  3E09               	addlw	9
 17463  135B  0086               	movwf	6
 17464  135C  3001               	movlw	1	; select bank2/3
 17465  135D  0087               	movwf	7
 17466  135E  1A81               	btfsc	1,5
 17467  135F  0008               	return
 17468                           
 17469                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 17470  1360  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 17471  1361  0086               	movwf	6
 17472  1362  3001               	movlw	1	; select bank2/3
 17473  1363  0087               	movwf	7
 17474  1364  1401               	bsf	1,0
 17475                           
 17476                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 17477  1365  0850               	movf	_DimmerLightsIntrIOC^(0+128),w
 17478  1366  3E09               	addlw	9
 17479  1367  0086               	movwf	6
 17480  1368  3001               	movlw	1	; select bank2/3
 17481  1369  0087               	movwf	7
 17482  136A  1681               	bsf	1,5
 17483                           
 17484                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 17485  136B  0020               	movlb	0	; select bank0
 17486  136C  1D0D               	btfss	13,2	;volatile
 17487  136D  2B72               	goto	i1l6260
 17488                           
 17489                           ;Dimmer_B1.c: 36: Dimmer.Correction = 1;
 17490  136E  0022               	movlb	2	; select bank2
 17491  136F  01C0               	clrf	(_Dimmer^(0+256)+2)
 17492  1370  0AC0               	incf	(_Dimmer^(0+256)+2),f
 17493                           
 17494                           ;Dimmer_B1.c: 37: } else {
 17495  1371  0008               	return
 17496  1372                     i1l6260:	
 17497                           
 17498                           ;Dimmer_B1.c: 38: Dimmer.Correction = 0;
 17499  1372  0022               	movlb	2	; select bank2
 17500  1373  01C0               	clrf	(_Dimmer^(0+256)+2)
 17501  1374  0008               	return
 17502  1375                     __end_of_setDimmerLights_IntrIOC_GO:	
 17503                           
 17504                           	psect	text121
 17505  1F9C                     __ptext121:	
 17506 ;; *************** function _DimmerIntrIOCPointSelect *****************
 17507 ;; Defined at:
 17508 ;;		line 8 in file "../src/Dimmer_B1.c"
 17509 ;; Parameters:    Size  Location     Type
 17510 ;;  lights          1    wreg     unsigned char 
 17511 ;; Auto vars:     Size  Location     Type
 17512 ;;  lights          1    1[COMMON] unsigned char 
 17513 ;; Return value:  Size  Location     Type
 17514 ;;		None               void
 17515 ;; Registers used:
 17516 ;;		wreg
 17517 ;; Tracked objects:
 17518 ;;		On entry : 0/0
 17519 ;;		On exit  : 0/0
 17520 ;;		Unchanged: 0/0
 17521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17523 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17524 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17525 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17526 ;;Total ram usage:        2 bytes
 17527 ;; Hardware stack levels used:    1
 17528 ;; This function calls:
 17529 ;;		Nothing
 17530 ;; This function is called by:
 17531 ;;		_setDimmerLights_IntrIOC_GO
 17532 ;; This function uses a non-reentrant model
 17533 ;;
 17534                           
 17535                           
 17536                           ;psect for function _DimmerIntrIOCPointSelect
 17537  1F9C                     _DimmerIntrIOCPointSelect:	
 17538                           
 17539                           ;incstack = 0
 17540                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17541                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17542  1F9C  00F7               	movwf	DimmerIntrIOCPointSelect@lights
 17543                           
 17544                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17545  1F9D  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 17546  1F9E  3A01               	xorlw	1
 17547  1F9F  1D03               	skipz
 17548  1FA0  2FA6               	goto	i1l718
 17549                           
 17550                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17551  1FA1  3043               	movlw	_DimmerLights1& (0+255)
 17552  1FA2  00F6               	movwf	??_DimmerIntrIOCPointSelect
 17553  1FA3  0876               	movf	??_DimmerIntrIOCPointSelect,w
 17554  1FA4  0021               	movlb	1	; select bank1
 17555  1FA5  00D0               	movwf	_DimmerLightsIntrIOC^(0+128)
 17556  1FA6                     i1l718:	
 17557                           
 17558                           ;Dimmer_B1.c: 12: }
 17559                           ;Dimmer_B1.c: 15: if (lights == 2) {
 17560  1FA6  0877               	movf	DimmerIntrIOCPointSelect@lights,w
 17561  1FA7  3A02               	xorlw	2
 17562  1FA8  1D03               	skipz
 17563  1FA9  0008               	return
 17564                           
 17565                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 17566  1FAA  3052               	movlw	_DimmerLights2& (0+255)
 17567  1FAB  00F6               	movwf	??_DimmerIntrIOCPointSelect
 17568  1FAC  0876               	movf	??_DimmerIntrIOCPointSelect,w
 17569  1FAD  0021               	movlb	1	; select bank1
 17570  1FAE  00D0               	movwf	_DimmerLightsIntrIOC^(0+128)
 17571  1FAF  0008               	return
 17572  1FB0                     __end_of_DimmerIntrIOCPointSelect:	
 17573  007E                     btemp	set	126	;btemp
 17574  007E                     pic14e$flags	set	126
 17575  007E                     wtemp	set	126
 17576  007E                     wtemp0	set	126
 17577  0080                     wtemp1	set	128
 17578  0082                     wtemp2	set	130
 17579  0084                     wtemp3	set	132
 17580  0086                     wtemp4	set	134
 17581  0088                     wtemp5	set	136
 17582  007F                     wtemp6	set	127
 17583  007E                     ttemp	set	126
 17584  007E                     ttemp0	set	126
 17585  0081                     ttemp1	set	129
 17586  0084                     ttemp2	set	132
 17587  0087                     ttemp3	set	135
 17588  007F                     ttemp4	set	127
 17589  007E                     ltemp	set	126
 17590  007E                     ltemp0	set	126
 17591  0082                     ltemp1	set	130
 17592  0086                     ltemp2	set	134
 17593  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         217
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80     77      80
    BANK1            80      3      78
    BANK2            80      0      79
    BANK3            80      4      59
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(2) Largest target is 2
		 -> NULL(NULL[0]), DlySw2(BANK2[2]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_getMain_All_Error_Status
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Main->_getMain_LightsStatus
    _getMain_LightsStatus->_getDimmerLights_Status
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setRF_DimmerLights
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setRF_DimmerLights
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  170417
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0    1705
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     197
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     166
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0     136
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0     136
                                              5 BANK0      2     2      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0   43590
                                              0 BANK1      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   27286
                                             70 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           3     3      0     570
                                              5 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    6     6      0   16072
                                             71 BANK0      6     6      0
             _getDimmerLights_Status
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           1     1      0   12639
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1078
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1078
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   59360
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   59360
                                             74 BANK0      1     1      0
                                              0 BANK1      3     3      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   58235
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1767
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   56298
                             _setBuz
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   36469
                                             70 BANK0      2     2      0
             _getDimmerLights_Status
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   18124
                                             68 BANK0      3     3      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   17842
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   17749
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   17656
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4925
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             5     5      0     136
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1202
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1202
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1671
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 2     2      0     229
                                              4 BANK0      2     2      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1442
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   10215
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1102
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   13557
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   13557
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   10160
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1    1410
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1047
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   34728
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   34728
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0   12103
                                             66 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1705
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      77
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                4     4      0   12484
                                             66 BANK0      4     4      0
            _DimmerLightsPointSelect
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    9797
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    8711
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     579
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     332
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1679
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              1 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     264
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     198
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     198
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setRF_DimmerLights
                 _setPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _setTxData
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Status
         _DimmerLightsPointSelect
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
           _setRF_DimmerLights
             _setPercentValue
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _setTxData
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
   _WDT_Main
     _WDT_Clearing
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      3      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      3B      11       73.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     155      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     155      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Nov 07 17:31:14 2014

                   __size_of_Switch_Main 0021                    ?_Flash_Memory_Erasing 0076  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       l94 08D9  
                                     l96 08ED                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1257                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006E  
                 __end_of_setDelayOff_GO 0A76                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 0901  
                           ___ftadd@sign 0048                                      l104 1711  
                                    l105 170D                                      l106 16FB  
                                    l108 170B                                      l251 0B71  
                   _setDimmerLights_SwOn 1645                                      l326 1FBA  
                                    l327 1FBB                                      l370 1305  
                                    l276 0D06                                      l277 0D49  
                                    l574 0B32                                      l772 1F6D  
                                    _GIE 005F                                      _CRC 00CD  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 0073                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BC  
                                    _ISR 0004                                      _WDT 00CB  
           getDimmerLights_Status@lights 0022                                      _Sw1 01C5  
                                    _Sw2 01CE                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1FC4                    _Buzzer_Initialization 1DD7  
                        __end_of_ADC_Set 1E0E                          ?_DelayTimejudge 0076  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0B9D  
                 _setMain_Exception$3588 0069                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 12DD                                     ?_ISR 0076  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1EB9  
                           ___ftdiv@sign 003D                                     l1307 146B  
                                   l1316 17AA                                     l2150 150F  
                                   l2134 0D6A                                     l2144 0DC0  
               ?_DimmerLightsPointSelect 0076                                     l2083 0542  
                                   l2164 0CDD                                     l2092 04BE  
                                   l1293 14D7                                     l1541 1157  
                                   l2093 04BA                                     l2085 047C  
                                   l2086 047E                                     l2095 04FA  
                                   l2087 0486                                     l2176 156F  
                                   l2168 0822                                     l1537 115B  
                                   l1492 1750                          __end_of_IOC_Set 1EE8  
                                   l1736 0F53                                     l2468 10A2  
                                   l2484 1287                                     l2494 0353  
                                   l2496 022F                                     l2770 0AC0  
                                   l2764 0AA9                                     l2793 03FC  
                                   l8010 0A4D                                     l8014 0A53  
                                   l8016 0A60                                     l8032 10BA  
                                   l8120 1681                                     l9000 1201  
                                   l8018 0A69                                     l8210 10EF  
                                   l9002 1204                    _setDimmerLights_SwOff 0C05  
                                   l8150 0C56                                     l8222 1171  
                                   l8302 09D3                                     l9006 1209  
                                   l8312 09E3                                     l9024 1780  
                                   l8208 10EB                                     l8160 147F  
                                   l7602 0A86                                     l8218 1168  
                                   l9018 176B                                     l8410 0B42  
                                   l8234 0829                                     l9210 04DF  
                                   l9050 0DDA                                     l8260 1106  
                                   l7612 0AAE                                     l7604 0A90  
                                   l8324 09FF                                     l8332 0A0B  
                                   l8308 09DD                                     l8316 09E9  
                                   l7700 03EE                                     l9212 04E1  
                                   l9060 0DF5                                     l9044 0DCD  
                                   l9124 0F22                                     l8254 10FD  
                                   l7630 1F36                                     l7614 0AB6  
                                   l7606 0A95                                     l8270 12C4  
                                   l8414 0B48                                     l7710 0420  
                                   l7702 03F8                                     l8246 155D  
                                   l8238 0842                                     l9062 0DFE  
                                   l9134 0F37                                     l8256 1100  
                                   l8520 1321                                     l8328 0A05  
                                   l8272 12C7                                     l8440 0B84  
                                   l8432 0B77                                     l8408 0B3F  
                                   l7720 043B                                     l9240 0530  
                                   l9080 0E29                                     l9072 0E15  
                                   l9056 0DE8                                     l9064 0E00  
                                   l9304 028E                                     l9136 0F38  
                                   l7626 1F30                                     l7730 0F6E  
                                   l8442 0B87                                     l8434 0B7A  
                                   l8354 1152                                     l7706 040E  
                                   l7802 0763                                     l8370 0C70  
                                   l9082 0E32                                     l9066 0E09  
                                   l8532 1247                                     l8276 12CD  
                                   l8508 0D4B                                     l8460 0CE2  
                                   l8428 0B59                                     l7660 0385  
                                   l9228 050F                                     l9260 10A7  
                                   l9076 0E20                                     l8518 1316  
                                   l8526 123E                                     l7750 0FC5  
                                   l7822 0E50                                     l8294 09C7  
                                   l8462 0CE5                                     l8446 0B8D  
                                   l8438 0B80                                     l7670 039B  
                                   l7806 076B                                     l8390 0CB6  
                                   l9174 049D                                     l9318 02CC  
                                   l9094 0ED2                                     l8528 1241  
                                   l7648 12A4                                     l7736 0F84  
                                   l7840 0E80                                     l7920 086A  
                                   l8480 0CFD                                     l7664 038C  
                                   l8392 0CBA                                     l8384 0C9C  
                                   l9264 10AD                                     l9328 02FE  
                                   l8802 162F                                     l7850 0EA4  
                                   l7842 0E8E                                     l7930 0872  
                                   l7914 085F                                     l8298 09CD  
                                   l8466 0CEB                                     l8722 1F15  
                                   l7690 03D2                                     l7682 03B5  
                                   l8394 0CBE                                     l8618 13B5  
                                   l9354 034F                                     l9522 153B  
                                   l8812 163F                                     l7852 0EA7  
                                   l7932 087E                                     l8556 0BD9  
                                   l8564 159A                                     l9436 05B8  
                                   l8468 0CEE                                     l7692 03D7  
                                   l7772 06F6                                     l8388 0CB2  
                                   l9540 173A                    _myMain_Initialization 1EB9  
                                   l8806 1636                                     l7598 0A7F  
                                   l7758 0FDE                                     l7942 0899  
                                   l8494 0D17                                     l8478 0D03  
                                   l7694 03DB                                     l7790 0747  
                                   l8398 0CC2                                     l8742 0D6D  
                                   l8582 11C4                                     l9294 025C  
                                   l9278 021A                                     l9550 1751  
                                   l9368 16E5                                     l8808 1639  
                                   l7864 1FCF                                     l7880 1417  
                                   l7856 0EB5                                     l7848 0E9B  
                                   l8904 0928                                     l8664 1453  
                                   l8496 0D2F                                     l7688 03C8  
                                   l8592 11D0                                     l8584 11C6  
                                   l9632 17D3                                     l7946 08A1  
                                   l7938 0890                                     l8906 092E  
                                   l7794 074F                                     l7778 070C  
                                   l8770 0DB6                                     l8754 0D85  
                                   l8594 11D4                                     l8916 0956  
                                   l8684 1268                                     l8764 0DAB  
                                   l8780 1FE3                                     l9572 128E  
                                   l9636 17DA                                     l8942 15FB  
                                   l8688 1276                                     _CFGS 0CAE  
                                   l7994 07EF                                     l8938 15F4  
                                   l8796 1626                                     l8798 1629  
                           __CFG_WDTE$ON 0000                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     _PEIE 005E  
                                   u8015 0750                                     u8025 0756  
                                   u8125 0E81                                     u8215 1403  
                                   u8055 076C                                     u8305 0889  
                                   u8065 0772                                     u8155 0E9C  
                                   u8315 0891                                     u7605 0AC7  
                                   u7535 0A8B                                     u8095 0E57  
                                   u9075 130B                                     u7555 0AA4  
                                   u8275 0875                                     u8380 079D  
                                   u7805 03DC                                     u7575 0AB1  
                                   u8295 087F                                     u8545 1080  
                                   u7905 0F96                                     u8385 079B  
                                   u7745 03B6                                     u7915 0FA6  
                                   u7835 03EF                                     u7925 0FC6  
                                   u7935 0FD5                                     u7775 03C9  
                                   u7945 0FDF                                     u7985 0718  
                                   u7995 0728                                     _LWLO 0CAD  
                                   u9945 0F13                                     u9965 0F28  
                                   _RSSI 00D1                                     _WREN 0CAA  
                                   _Buz1 00B0                                     _Temp 00D7  
                                   _main 17B2                             ___ftpack@arg 0020  
                    __end_of_DlyOff_Main 0B38                          __end_of_RF_Main 1DE0  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0020  
                                   btemp 007E                          __end_of_WDT_Set 1E55  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1E0E                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1584  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                                  ??_ISR 007B                             ___fttol@exp1 0058  
                           ___fttol@lval 0054                   _getDimmerLights_Status 1EC8  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1E91  
       setDimmerLights_ErrorClose@lights 0066            __end_of_DimmerIntrPointSelect 1F2D  
                  ?_setDimmerLights_Main 0076                          ?_setDelayOff_GO 002A  
                  ?_setDimmerLights_SwOn 0076                                    ?_main 01D7  
                        __end_of___awdiv 08A8                          __end_of___ftadd 0453  
                        __end_of___ftdiv 1000                                    u10065 0497  
                        __end_of___ftmul 0793                                    u10195 0520  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                                  u10465 16DB                                    u10635 1532  
                        __end_of___fttol 0EBE                                    u10645 1541  
                                  u10585 14CE                                    u10665 1729  
                                  u10675 1748                                    u10695 175F  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l718 1FA6  
                                  i1l729 1F24                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0076                       setRF_Learn@command 0021  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                     setMain_Exception@buz 0068  
                __end_of_Timeout_Counter 1086                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 1375               _setDimmerLights_IntrIOC_GO 134D  
                       __end_of_TMR1_ISR 139D             __size_of_CC2500_WriteCommand 0019  
     __end_of_setDimmerLights_ErrorClose 13C5               _setDimmerLights_ErrorClose 139D  
                       __end_of_TMR1_Set 1E9D                                    _getAD 11F6  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0077  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1F63  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0076  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 1278  
          __end_of_setLED_Initialization 1EF9                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0076                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0793  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0076  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
              setDimmerLights_Main@clear 0065                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 095C                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0076  
                      ?_setMemory_Modify 0076                        ??_setPercentValue 0059  
                           __end_of_main 1800                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1DF6                       ??_setMemory_Modify 0020  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0C05                     _setSw_Initialization 1E2E  
                                 ??_main 006D                            ___fttol@sign1 0053  
                           ?_setLog_Code 0076                  _setControl_Lights_Table 0C6F  
                         _setMemory_Data 1E61                   ?_Buzzer_Initialization 0076  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0021  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0076  
                              ??_IOC_ISR 0079                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1F76                   ?_setDimmerLights_AdjRF 0076  
               __size_of_setRFSW_Control 0052                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
           setDimmerLights_AdjControl@sw 0027                        ??_getRF_KeyStatus 0020  
                 ?_setDimmerLights_SwOff 0076                              _DlyOff_Main 0AD7  
                 ?_myMain_Initialization 0076                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006B  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 12BB                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0AD7                 _getMain_All_Error_Status 1141  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 117A  
                                 i1l6260 1372                                   i1l6712 01C5  
                                 i1l6632 0095                                   i1l6716 01CB  
                                 i1l6660 00FF                                   i1l6636 009C  
                                 i1l6654 00E6                                   i1l6662 0105  
                                 i1l6672 0138                                   i1l6656 00EC  
                                 i1l6682 0167                                   i1l6684 016D  
                                 i1l6668 0121                                   i1l6676 014C  
                                 i1l6694 0194                                   i1l6698 019A  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u717_25 1397  
                                 u593_25 0070                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 110E  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 0801           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 109B                                   _Dimmer 013E  
                                 _DlySw1 00E9                                   _DlySw2 016D  
             __end_of_Mcu_Initialization 1F51                      __end_of_Buzzer_Main 1718  
                                 _Memory 01A0                                   _Timer1 00C8  
     __end_of_setDimmerLights_TriggerAdj 11F6               _setDimmerLights_TriggerAdj 11D6  
                                 ___bmul 1F2D                                ??___awdiv 0024  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 0014  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0076              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00D5  
                                 _s_data 00D6                   ??_setDimmerLights_SwOn 0062  
                                 _setLED 09B7                                   _myMain 00A0  
                 __end_of_setMemory_Data 1E6D                         _DimmerLightsIntr 0072  
                  ?_setSw_Initialization 0076                    setDimmerLights@status 0024  
                       ___awdiv@quotient 0027                                   _setBuz 08A8  
                     __size_of_Temp_Main 0003         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0076                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0076      __end_of_setDimmerLights_IntrControl 01F1  
            _setDimmerLights_IntrControl 0045                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0076               __end_of_setMemory_LoopSave 1F9C  
                  __end_of_SwPointSelect 1FEC             __size_of_Flash_Memory_Modify 004E  
      setDimmerLights_IntrControl@lights 007A                  __size_of_LedPointSelect 001D  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0025                               _TouchPower 109B  
             ?_getAll_DimmerLights_AdjGO 0076              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 09B7  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0041  
                              ?_LED_Main 0076                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                     _getRF_KeyStatus$5163 0022  
                          ?_my_MainTimer 0076                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0076                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0076           DimmerIntrIOCPointSelect@lights 0077  
                           __pidataBANK4 1216                            __end_of_getAD 1216  
                              ?_TMR1_ISR 0076                                ?_TMR1_Set 0076  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1E79                          _getSw_KeyStatus 11B7  
              ??_setControl_Lights_Table 0068                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0076                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 1257               __end_of_set_TimeoutCleared 1DFB  
               __end_of_setDimmerReClock 1E16                       __size_of_getRxData 0074  
                    ?_LED_Initialization 0076                        ?_CC2500_WriteByte 0076  
                         _DimmerLights11 00CE                           _DimmerLights22 00CF  
                   __size_of_setLED_Main 0041                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1DE0  
                     ??_CC2500_WriteByte 0020                               __pbssBANK0 006D  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0076  
                            _Buzzer_Main 16CE                        ??_setRFSW_Control 0066  
                      __end_of_Temp_Main 1DE6                   ?_Dimmer_Initialization 0076  
                                ?_IO_Set 0076                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1E16                            ??_Switch_Main 00EB  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006D  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0076                               __pmaintext 17B2  
                    _CC2500_WriteCommand 10F5                     ?_Temp_Initialization 0076  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 007B                            ?_setTemp_Main 0076  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                       __size_of_setTxData 00BD  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1E07                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1513                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0076             __end_of_setRF_Initialization 1071  
                     _setRFSW_AdjControl 154A                                  _IOC_ISR 1EAA  
                                _IOC_Set 1ED8                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0076                        _Flash_Memory_Main 14A7  
                      _Flash_Memory_Read 1127              ?_setDimmerLights_IntrIOC_GO 0076  
                 __size_of_CC2500_RxData 0071                   __size_of_CC2500_TxData 0065  
            ?_setDimmerLights_ErrorClose 0076                      ?_setRFSW_AdjControl 0076  
                                _RF_Data 0120                                  _RF_Main 1DDD  
                     ?_Flash_Memory_Main 0076                       ?_Flash_Memory_Read 0076  
                                _WDT_Set 1E4A          __end_of_setControl_Lights_Table 0CDE  
                        setRF_Main@error 00ED                               ??_Fosc_Set 0020  
                            ?_TouchPower 0076                          _setPercentValue 1688  
                       ?_getPercentValue 0076             __end_of_CC2500_FrequencyCabr 1E61  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1F0A  
                    ??_Flash_Memory_Main 0026                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0165                                  _VarLED2 0169  
         __end_of_getDimmerLights_Status 1ED8                        __end_of_getRxData 0DC3  
                __end_of_getSw_KeyStatus 11D6                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1FB0                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1198                     ??_setRFSW_AdjControl 0064  
                         ??_setTemp_Main 0025                          __size_of___bmul 0012  
                                ___awdiv 0854                                  ___ftadd 035D  
                                ___ftdiv 0F57                                  ___ftmul 06DF  
                                ___fttol 0E37                      __end_of_Switch_Main 1299  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1F0A  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                        __size_of_setBuz 0059                                  __ptext1 1718  
                                __ptext2 1EB9                                  __ptext3 1513  
                                __ptext4 11F6                                  __ptext5 1F51  
                                __ptext6 0002                                  __ptext7 1DE3  
                                __ptext8 0EBE                                  __ptext9 1DE0  
                ??_setDimmerLights_AdjRF 005F                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1F1B                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 14DD  
              __end_of_Flash_Memory_Read 1141                  ??_setDimmerLights_SwOff 0062  
                             _setRF_Main 0453                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1E1E                        _DimmerLights_Main 1E26  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1E4A  
             __end_of_CC2500_ClearRXFIFO 1DEA                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1DEE            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0076                       ?_DimmerLights_Main 0076  
                                _product 006F                           _LedPointSelect 115D  
                    _DelayOffPointSelect 1FC4                                  clrloop0 1E02  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1EAA  
                   end_of_initialization 0041                ??_DelayOff_Initialization 0022  
                      _CC2500_InitSetREG 13C5                            _DelayTime_1us 1300  
                      __end_of_setTxData 06DF               __end_of_Flash_Memory_Write 1472  
                                init_ram 1DFB                       ?_CC2500_InitSetREG 0076  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1DFC                               _setSw_Main 01F1  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 0064  
                      _CC2500_ReadStatus 12BB                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1EE8                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0076                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0CDE                            _CC2500_TxData 0B38  
                    ??_CC2500_InitSetREG 0025              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0076  
                    _Flash_Memory_Modify 1764                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1E36                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0076                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1E2E                       _Mcu_Initialization 1F3F  
               __size_of_CC2500_PowerRST 0043                     __end_of_my_MainTimer 1764  
                         ?_DelayOff_Main 0076                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 117A                  __end_of_setPercentValue 16CE  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 13EF  
                    ?_Mcu_Initialization 0076                     ?_Flash_Memory_Modify 0076  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1584                     ?_Flash_Memory_Unlock 0076  
              __end_of_CC2500_ReadStatus 12DD              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0021                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1127                     _setRF_Initialization 1066  
                     _setMemory_LoopSave 1F89                              _Switch_Main 1278  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0076  
                         ?_CC2500_RxData 0076                           ?_CC2500_TxData 0076  
                _DimmerLightsPointSelect 1F63                  __end_of_getRF_KeyStatus 1F1B  
                      _setMain_Exception 0DC3                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1086  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0076                       ?_setMain_Exception 0076  
                    ?_setMemory_LoopSave 0076                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1F3F                 setMain_Exception@command 006C  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1F9C  
                      getSw_KeyStatus@sw 0024                        __size_of_TMR1_ISR 0028  
                 ?_DimmerIntrPointSelect 0076                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 005B                           __end_of_setLED 0A15  
          __size_of_setDimmerLights_SwOn 0043                           __end_of_setBuz 0901  
                    ??_setMain_Exception 0067                     _CC2500_FrequencyCabr 1E55  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0076                          _setRFSW_Control 0802  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0076  
                    start_initialization 0015                        _setRF_DimmerValue 1472  
                        ?_LedPointSelect 0076                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0079  
                     ?_setRF_DimmerValue 0076               __end_of_CC2500_InitPATable 11B7  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0F57                             ?_Buzzer_Main 0076  
                     _set_TimeoutCleared 1DF6                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 0161  
                            ?_setSw_Main 0076                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0037                   ?_setLED_Initialization 0076  
                  ?_setRF_Initialization 0076                        __size_of_Fosc_Set 0004  
              __end_of_setMain_Exception 0E37                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1DE3                      ?_set_TimeoutCleared 0076  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D2  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D3                              __pdataBANK4 0220  
              _getAll_DimmerLights_AdjGO 10B0                                 ??_setLED 0023  
                               ?_ADC_Set 0076                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0069                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 115D                         _CC2500_SIDLEMode 1DEE  
             __size_of_DimmerLights_Main 0008                __end_of_setRF_DimmerValue 14A7  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0076  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0076  
         _getAll_DimmerLights_AdjGO$2359 0021                              __pbssCOMMON 0070  
                               ?_IOC_Set 0076                                ___latbits 0003  
                       _setMemory_Modify 1F76                            __pcstackBANK0 0020  
                          __pcstackBANK1 00EB                            __pcstackBANK3 01D7  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0076  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0068                            DlyOff_Main@sw 0068  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0076  
                               ?_WDT_Set 0076                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 0061               __size_of_CC2500_ReadStatus 0022  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 0143                            _DimmerLights2 0152  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006F  
                         getRxData@error 0069              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0076                               ?_Temp_Main 0076  
                    __size_of_setRF_Main 00F3                    DelayOffPointSelect@sw 0020  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0076                         ?_getRF_KeyStatus 0076  
                 _setTemp_Initialization 07FF                                _getBuz_GO 1EF9  
    __end_of_Flash_Memory_Initialization 0622              _Flash_Memory_Initialization 0546  
                               ?___awdiv 0020                                __ptext100 1602  
                              __ptext101 13C5                                __ptext110 1071  
                              __ptext102 1198                                __ptext111 1FB0  
                              __ptext103 1236                                __ptext120 134D  
                              __ptext112 16CE                                __ptext104 1E55  
                              __ptext121 1F9C                                __ptext113 1DD7  
                              __ptext105 1300                                __ptext106 1DEA  
                              __ptext115 1375                                __ptext107 1DE6  
                              __ptext116 0045                                __ptext108 10F5  
                              __ptext117 1F1B                                __ptext109 1DF6  
                               ?___ftadd 003E                                __ptext118 1EAA  
                              __ptext119 1E0E                                _getRxData 0D4F  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                    __size_of_my_MainTimer 004C  
                __end_of_setRFSW_Control 0854            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1DDA  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 10B0  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 016C             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023            __end_of_setDimmerLights_AdjRF 1300  
                 CC2500_WriteByte@loop_a 0021                                _r_address 00D4  
         __size_of_setDimmerLights_SwOff 006A           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 0C6F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1EC8                           __size_of_getAD 0020  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1FD8  
                    __end_of_setLED_Main 1602                      _DimmerLightsIntrIOC 00D0  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1DE3  
           setDimmerLights_SwOff@command 0064                        _CC2500_rfSettings 102F  
                               _LED_Main 1E85                          SwPointSelect@sw 0021  
                              clear_ram0 1E01                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 0074                             _my_MainTimer 1718  
                              _setTxData 0622      __end_of_DimmerLights_Initialization 10DE  
            _DimmerLights_Initialization 10C7                       _CC2500_ClearRXFIFO 1DE6  
                     _CC2500_ClearTXFIFO 1DEA           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 2000                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003A  
                     _Flash_Memory_Write 1443                               ?_getRxData 0076  
                               _TMR1_ISR 1375                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR1_Set 1E91  
                    ?_CC2500_ClearRXFIFO 0076                      ?_CC2500_ClearTXFIFO 0076  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0141  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 110E  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1F51  
                DlyOff_Initialization@sw 0021                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0076                         setRF_Main@loop_f 00EB  
                  __size_of_setTemp_Main 0099                  __size_of_setDelayOff_GO 0061  
           ??_setDimmerLights_AdjControl 0025                                 _DelayOff 0070  
                           setSw_Main@sw 0068         setDimmerLights_IntrIOC_GO@lights 0078  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0076  
         getMain_All_Error_Status@status 0024                         __size_of_IOC_Set 0010  
           __end_of_Flash_Memory_Erasing 1E79                           ?_SwPointSelect 0076  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 1513                    _DlyOff_Initialization 1E3F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1DF2                         __size_of_WDT_Set 000B  
                setMain_Exception@status 006B                    _Switch_Initialization 1E9D  
      __size_of_getMain_All_Error_Status 001C                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                ?_getMain_All_Error_Status 0076  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 154A  
                             ?_setTxData 0076                             ?_Switch_Main 0076  
             ??_DimmerIntrIOCPointSelect 0076                         _CC2500_WriteByte 1FB0  
           Flash_Memory_Initialization@i 005E                                 _SwDetect 0075  
                            ??_Temp_Main 0027                        setRFSW_Control@sw 0067  
          _getMain_All_Error_Status$3603 0022                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0076      __size_of_setDimmerLights_AdjControl 002A  
                           _setTemp_Main 0EBE                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0076  
                       __size_of___ftdiv 00A9                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 setDimmerLights_SwOn@idle 0063  
                               ___awtoft 1299                         ??_LedPointSelect 0020  
                               ___ftpack 0A76            __size_of_getMain_LightsStatus 0021  
                      getTemp_AD@channel 0025                             ??_setRF_Main 006A  
                   CC2500_WriteREG@value 0022                              _setLED_Main 15C1  
             __end_of_setRF_DimmerLights 07FF                 ?_DelayOff_Initialization 0076  
                       setDelayOff_GO@sw 002E       __size_of_getAll_DimmerLights_AdjGO 0017  
                               __ptext10 07FF                                 __ptext11 1278  
                               __ptext20 1E2E                                 __ptext12 01F1  
                               __ptext21 109B                                 __ptext13 1FEC  
                               __ptext30 1472                                 __ptext22 1DDD  
                               __ptext14 1419                                 __ptext31 12DD  
                               __ptext23 0453                                 __ptext15 11B7  
                               __ptext40 0CDE                                 __ptext32 095C  
                               __ptext24 0D4F                                 __ptext16 1FD8  
                               __ptext41 12BB                                 __ptext33 06DF  
                               __ptext25 14DD                                 __ptext17 0DC3  
                               __ptext50 1DF2                                 __ptext42 10DE  
                               __ptext34 035D                                 __ptext26 1F89  
                               __ptext18 139D                                 __ptext51 1E07  
                               __ptext43 1DDA                                 __ptext35 1F76  
                               __ptext27 0C6F                                 __ptext19 1E9D  
                               __ptext60 0546                                 __ptext52 1E85  
                               __ptext44 1066                                 __ptext36 1141  
                               __ptext28 0802                                 __ptext61 1E61  
                               __ptext53 15C1                                 __ptext45 1F3F  
                               __ptext37 1F0A                                 __ptext29 154A  
                               __ptext70 115D                                 __ptext62 1443  
                               __ptext54 1E79                                 __ptext46 1E4A  
                               __ptext38 1EF9                                 __ptext71 10C7  
                               __ptext63 1E36                                 __ptext55 1EE8  
                               __ptext47 1E91                                 __ptext39 0B38  
                               __ptext80 0C05                                 __ptext72 1326  
                               __ptext64 1127                                 __ptext56 14A7  
                               __ptext48 110E                                 __ptext81 0622  
                               __ptext73 0801                                 __ptext65 1E26  
                               __ptext57 1257                                 __ptext49 1ED8  
                               __ptext90 0A15                                 __ptext82 0793  
                               __ptext74 1E1E                                 __ptext66 0901  
                               __ptext58 1764                                 __ptext91 13EF  
                               __ptext83 1688                                 __ptext75 0AD7  
                               __ptext67 1584                                 __ptext59 1E6D  
                               __ptext92 1F2D                                 __ptext84 0E37  
                               __ptext76 1645                                 __ptext68 0B9D  
                               __ptext93 1EC8                                 __ptext85 0F57  
                               __ptext77 08A8                                 __ptext69 09B7  
                               __ptext94 1F63                                 __ptext86 1299  
                               __ptext78 0854                                 __ptext95 1E16  
                               __ptext87 0A76                                 __ptext79 10B0  
                               __ptext96 1E3F                                 __ptext88 11D6  
                               __ptext97 1FC4                                 __ptext89 117A  
                               __ptext98 1086                                 __ptext99 1DEE  
                               __product 0220            ??_setDimmerLights_IntrControl 0078  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001            __end_of_Dimmer_Initialization 0802  
           __end_of_setDimmerLights_Main 095C                         Switch_Main@error 00EC  
           __end_of_setDimmerLights_SwOn 1688                             ??_setSw_Main 0066  
                          setLED@command 0022                            __size_of_main 004E  
                            _setRF_Learn 1FEC                 __end_of_CC2500_SIDLEMode 1DF2  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1FD8  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 00EC  
              __size_of_setDimmerReClock 0008           setDimmerLights_AdjControl@idle 0026  
                        _CC2500_ReadByte 10DE                       _CC2500_InitPATable 1198  
               __end_of_setMemory_Modify 1F89            setDimmerLights_Trigger@lights 0024  
                     __end_of_setRF_Main 0546                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068         setDimmerLights_TriggerAdj@lights 0024  
                               main@argc 01D7                     _getSw_KeyStatus$2355 0021  
                   _getSw_KeyStatus$2356 0022                                 main@argv 01D9  
                    ?_CC2500_InitPATable 0076                          _CC2500_PowerRST 1602  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 17B2  
                      ??_getPercentValue 0059                              _setLog_Code 14DD  
            __end_of_Flash_Memory_Unlock 1E3F                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1236                       __end_of_setSw_Main 035D  
                          _Transceive_OK 03E1                   ?_DlyOff_Initialization 0076  
                         _DelayTimejudge 13EF                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0078             ??_setDimmerLights_ErrorClose 0066  
                setDimmerLights_SwOff@sw 0065        __end_of_getAll_DimmerLights_AdjGO 10C7  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0076  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 134D  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 1326  
            __end_of_setDimmerLights_Adj 15C1                  ?_setTemp_Initialization 0076  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                      _RF_Initialization 1DDA     __size_of_setDimmerLights_IntrControl 01AC  
                   _Flash_Memory_Erasing 1E6D                       ?_RF_Initialization 0076  
                             _SPI0Buffer 0074          __end_of_DelayOff_Initialization 1E1E  
    __size_of_setDimmerLights_IntrIOC_GO 0028      __size_of_setDimmerLights_ErrorClose 0028  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1E26  
     __end_of_setDimmerLights_AdjControl 1443               _setDimmerLights_AdjControl 1419  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 0A15         __size_of_setControl_Lights_Table 006F  
                 __end_of_DelayTimejudge 1419     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0066  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 1326  
                __end_of_CC2500_ReadByte 10F5             __end_of_setSw_Initialization 1E36  
                        _Timeout_Counter 1071          __size_of_getDimmerLights_Status 0010  
                   getPercentValue@value 005B               __end_of_LED_Initialization 1E85  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 0800  
               __size_of_setPercentValue 0046                  setMemory_Modify@command 0021  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1DDD  
                  __end_of_CC2500_RxData 0D4F                    __end_of_CC2500_TxData 0B9D  
                __end_of_CC2500_PowerRST 1645           getAll_DimmerLights_AdjGO@adjgo 0022  
