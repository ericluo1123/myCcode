

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Jan 06 16:49:05 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text63,local,class=CODE,merge=1,delta=2
    76                           	psect	intentry,global,class=CODE,delta=2
    77                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    78                           	dabs	1,0x7E,2
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  001D                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  0087                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0094                     	;# 
   128  0095                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0096                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009F                     	;# 
   137  0108                     	;# 
   138  0109                     	;# 
   139  010C                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010D                     	;# 
   143  010E                     	;# 
   144  010F                     	;# 
   145  0185                     	;# 
   146  0186                     	;# 
   147  018C                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  0081                     	;# 
   183  0085                     	;# 
   184  0086                     	;# 
   185  0087                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0095                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0096                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009F                     	;# 
   206  0108                     	;# 
   207  0109                     	;# 
   208  010C                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  0185                     	;# 
   215  0186                     	;# 
   216  018C                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0009                     	;# 
   226  000A                     	;# 
   227  000B                     	;# 
   228  000C                     	;# 
   229  000D                     	;# 
   230  000E                     	;# 
   231  000E                     	;# 
   232  000F                     	;# 
   233  0010                     	;# 
   234  0011                     	;# 
   235  0012                     	;# 
   236  0013                     	;# 
   237  0014                     	;# 
   238  0015                     	;# 
   239  0015                     	;# 
   240  0016                     	;# 
   241  0017                     	;# 
   242  0018                     	;# 
   243  0019                     	;# 
   244  001A                     	;# 
   245  001B                     	;# 
   246  001B                     	;# 
   247  001C                     	;# 
   248  001D                     	;# 
   249  001E                     	;# 
   250  001F                     	;# 
   251  0081                     	;# 
   252  0085                     	;# 
   253  0086                     	;# 
   254  0087                     	;# 
   255  0089                     	;# 
   256  008C                     	;# 
   257  008D                     	;# 
   258  008E                     	;# 
   259  008F                     	;# 
   260  0090                     	;# 
   261  0091                     	;# 
   262  0092                     	;# 
   263  0093                     	;# 
   264  0093                     	;# 
   265  0094                     	;# 
   266  0095                     	;# 
   267  0095                     	;# 
   268  0096                     	;# 
   269  0096                     	;# 
   270  0098                     	;# 
   271  0099                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009F                     	;# 
   275  0108                     	;# 
   276  0109                     	;# 
   277  010C                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0186                     	;# 
   285  018C                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0009                     	;# 
   295  000A                     	;# 
   296  000B                     	;# 
   297  000C                     	;# 
   298  000D                     	;# 
   299  000E                     	;# 
   300  000E                     	;# 
   301  000F                     	;# 
   302  0010                     	;# 
   303  0011                     	;# 
   304  0012                     	;# 
   305  0013                     	;# 
   306  0014                     	;# 
   307  0015                     	;# 
   308  0015                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001B                     	;# 
   316  001C                     	;# 
   317  001D                     	;# 
   318  001E                     	;# 
   319  001F                     	;# 
   320  0081                     	;# 
   321  0085                     	;# 
   322  0086                     	;# 
   323  0087                     	;# 
   324  0089                     	;# 
   325  008C                     	;# 
   326  008D                     	;# 
   327  008E                     	;# 
   328  008F                     	;# 
   329  0090                     	;# 
   330  0091                     	;# 
   331  0092                     	;# 
   332  0093                     	;# 
   333  0093                     	;# 
   334  0094                     	;# 
   335  0095                     	;# 
   336  0095                     	;# 
   337  0096                     	;# 
   338  0096                     	;# 
   339  0098                     	;# 
   340  0099                     	;# 
   341  009C                     	;# 
   342  009D                     	;# 
   343  009F                     	;# 
   344  0108                     	;# 
   345  0109                     	;# 
   346  010C                     	;# 
   347  010C                     	;# 
   348  010D                     	;# 
   349  010D                     	;# 
   350  010E                     	;# 
   351  010F                     	;# 
   352  0185                     	;# 
   353  0186                     	;# 
   354  018C                     	;# 
   355  0000                     	;# 
   356  0001                     	;# 
   357  0002                     	;# 
   358  0003                     	;# 
   359  0004                     	;# 
   360  0005                     	;# 
   361  0006                     	;# 
   362  0007                     	;# 
   363  0009                     	;# 
   364  000A                     	;# 
   365  000B                     	;# 
   366  000C                     	;# 
   367  000D                     	;# 
   368  000E                     	;# 
   369  000E                     	;# 
   370  000F                     	;# 
   371  0010                     	;# 
   372  0011                     	;# 
   373  0012                     	;# 
   374  0013                     	;# 
   375  0014                     	;# 
   376  0015                     	;# 
   377  0015                     	;# 
   378  0016                     	;# 
   379  0017                     	;# 
   380  0018                     	;# 
   381  0019                     	;# 
   382  001A                     	;# 
   383  001B                     	;# 
   384  001B                     	;# 
   385  001C                     	;# 
   386  001D                     	;# 
   387  001E                     	;# 
   388  001F                     	;# 
   389  0081                     	;# 
   390  0085                     	;# 
   391  0086                     	;# 
   392  0087                     	;# 
   393  0089                     	;# 
   394  008C                     	;# 
   395  008D                     	;# 
   396  008E                     	;# 
   397  008F                     	;# 
   398  0090                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0093                     	;# 
   402  0093                     	;# 
   403  0094                     	;# 
   404  0095                     	;# 
   405  0095                     	;# 
   406  0096                     	;# 
   407  0096                     	;# 
   408  0098                     	;# 
   409  0099                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009F                     	;# 
   413  0108                     	;# 
   414  0109                     	;# 
   415  010C                     	;# 
   416  010C                     	;# 
   417  010D                     	;# 
   418  010D                     	;# 
   419  010E                     	;# 
   420  010F                     	;# 
   421  0185                     	;# 
   422  0186                     	;# 
   423  018C                     	;# 
   424  0000                     	;# 
   425  0001                     	;# 
   426  0002                     	;# 
   427  0003                     	;# 
   428  0004                     	;# 
   429  0005                     	;# 
   430  0006                     	;# 
   431  0007                     	;# 
   432  0009                     	;# 
   433  000A                     	;# 
   434  000B                     	;# 
   435  000C                     	;# 
   436  000D                     	;# 
   437  000E                     	;# 
   438  000E                     	;# 
   439  000F                     	;# 
   440  0010                     	;# 
   441  0011                     	;# 
   442  0012                     	;# 
   443  0013                     	;# 
   444  0014                     	;# 
   445  0015                     	;# 
   446  0015                     	;# 
   447  0016                     	;# 
   448  0017                     	;# 
   449  0018                     	;# 
   450  0019                     	;# 
   451  001A                     	;# 
   452  001B                     	;# 
   453  001B                     	;# 
   454  001C                     	;# 
   455  001D                     	;# 
   456  001E                     	;# 
   457  001F                     	;# 
   458  0081                     	;# 
   459  0085                     	;# 
   460  0086                     	;# 
   461  0087                     	;# 
   462  0089                     	;# 
   463  008C                     	;# 
   464  008D                     	;# 
   465  008E                     	;# 
   466  008F                     	;# 
   467  0090                     	;# 
   468  0091                     	;# 
   469  0092                     	;# 
   470  0093                     	;# 
   471  0093                     	;# 
   472  0094                     	;# 
   473  0095                     	;# 
   474  0095                     	;# 
   475  0096                     	;# 
   476  0096                     	;# 
   477  0098                     	;# 
   478  0099                     	;# 
   479  009C                     	;# 
   480  009D                     	;# 
   481  009F                     	;# 
   482  0108                     	;# 
   483  0109                     	;# 
   484  010C                     	;# 
   485  010C                     	;# 
   486  010D                     	;# 
   487  010D                     	;# 
   488  010E                     	;# 
   489  010F                     	;# 
   490  0185                     	;# 
   491  0186                     	;# 
   492  018C                     	;# 
   493  0000                     	;# 
   494  0001                     	;# 
   495  0002                     	;# 
   496  0003                     	;# 
   497  0004                     	;# 
   498  0005                     	;# 
   499  0006                     	;# 
   500  0007                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  000E                     	;# 
   508  000F                     	;# 
   509  0010                     	;# 
   510  0011                     	;# 
   511  0012                     	;# 
   512  0013                     	;# 
   513  0014                     	;# 
   514  0015                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0017                     	;# 
   518  0018                     	;# 
   519  0019                     	;# 
   520  001A                     	;# 
   521  001B                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  001D                     	;# 
   525  001E                     	;# 
   526  001F                     	;# 
   527  0081                     	;# 
   528  0085                     	;# 
   529  0086                     	;# 
   530  0087                     	;# 
   531  0089                     	;# 
   532  008C                     	;# 
   533  008D                     	;# 
   534  008E                     	;# 
   535  008F                     	;# 
   536  0090                     	;# 
   537  0091                     	;# 
   538  0092                     	;# 
   539  0093                     	;# 
   540  0093                     	;# 
   541  0094                     	;# 
   542  0095                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0096                     	;# 
   546  0098                     	;# 
   547  0099                     	;# 
   548  009C                     	;# 
   549  009D                     	;# 
   550  009F                     	;# 
   551  0108                     	;# 
   552  0109                     	;# 
   553  010C                     	;# 
   554  010C                     	;# 
   555  010D                     	;# 
   556  010D                     	;# 
   557  010E                     	;# 
   558  010F                     	;# 
   559  0185                     	;# 
   560  0186                     	;# 
   561  018C                     	;# 
   562  0000                     	;# 
   563  0001                     	;# 
   564  0002                     	;# 
   565  0003                     	;# 
   566  0004                     	;# 
   567  0005                     	;# 
   568  0006                     	;# 
   569  0007                     	;# 
   570  0009                     	;# 
   571  000A                     	;# 
   572  000B                     	;# 
   573  000C                     	;# 
   574  000D                     	;# 
   575  000E                     	;# 
   576  000E                     	;# 
   577  000F                     	;# 
   578  0010                     	;# 
   579  0011                     	;# 
   580  0012                     	;# 
   581  0013                     	;# 
   582  0014                     	;# 
   583  0015                     	;# 
   584  0015                     	;# 
   585  0016                     	;# 
   586  0017                     	;# 
   587  0018                     	;# 
   588  0019                     	;# 
   589  001A                     	;# 
   590  001B                     	;# 
   591  001B                     	;# 
   592  001C                     	;# 
   593  001D                     	;# 
   594  001E                     	;# 
   595  001F                     	;# 
   596  0081                     	;# 
   597  0085                     	;# 
   598  0086                     	;# 
   599  0087                     	;# 
   600  0089                     	;# 
   601  008C                     	;# 
   602  008D                     	;# 
   603  008E                     	;# 
   604  008F                     	;# 
   605  0090                     	;# 
   606  0091                     	;# 
   607  0092                     	;# 
   608  0093                     	;# 
   609  0093                     	;# 
   610  0094                     	;# 
   611  0095                     	;# 
   612  0095                     	;# 
   613  0096                     	;# 
   614  0096                     	;# 
   615  0098                     	;# 
   616  0099                     	;# 
   617  009C                     	;# 
   618  009D                     	;# 
   619  009F                     	;# 
   620  0108                     	;# 
   621  0109                     	;# 
   622  010C                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010F                     	;# 
   628  0185                     	;# 
   629  0186                     	;# 
   630  018C                     	;# 
   631  0000                     	;# 
   632  0001                     	;# 
   633  0002                     	;# 
   634  0003                     	;# 
   635  0004                     	;# 
   636  0005                     	;# 
   637  0006                     	;# 
   638  0007                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  000E                     	;# 
   646  000F                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0013                     	;# 
   651  0014                     	;# 
   652  0015                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0017                     	;# 
   656  0018                     	;# 
   657  0019                     	;# 
   658  001A                     	;# 
   659  001B                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  001D                     	;# 
   663  001E                     	;# 
   664  001F                     	;# 
   665  0081                     	;# 
   666  0085                     	;# 
   667  0086                     	;# 
   668  0087                     	;# 
   669  0089                     	;# 
   670  008C                     	;# 
   671  008D                     	;# 
   672  008E                     	;# 
   673  008F                     	;# 
   674  0090                     	;# 
   675  0091                     	;# 
   676  0092                     	;# 
   677  0093                     	;# 
   678  0093                     	;# 
   679  0094                     	;# 
   680  0095                     	;# 
   681  0095                     	;# 
   682  0096                     	;# 
   683  0096                     	;# 
   684  0098                     	;# 
   685  0099                     	;# 
   686  009C                     	;# 
   687  009D                     	;# 
   688  009F                     	;# 
   689  0108                     	;# 
   690  0109                     	;# 
   691  010C                     	;# 
   692  010C                     	;# 
   693  010D                     	;# 
   694  010D                     	;# 
   695  010E                     	;# 
   696  010F                     	;# 
   697  0185                     	;# 
   698  0186                     	;# 
   699  018C                     	;# 
   700  0000                     	;# 
   701  0001                     	;# 
   702  0002                     	;# 
   703  0003                     	;# 
   704  0004                     	;# 
   705  0005                     	;# 
   706  0006                     	;# 
   707  0007                     	;# 
   708  0009                     	;# 
   709  000A                     	;# 
   710  000B                     	;# 
   711  000C                     	;# 
   712  000D                     	;# 
   713  000E                     	;# 
   714  000E                     	;# 
   715  000F                     	;# 
   716  0010                     	;# 
   717  0011                     	;# 
   718  0012                     	;# 
   719  0013                     	;# 
   720  0014                     	;# 
   721  0015                     	;# 
   722  0015                     	;# 
   723  0016                     	;# 
   724  0017                     	;# 
   725  0018                     	;# 
   726  0019                     	;# 
   727  001A                     	;# 
   728  001B                     	;# 
   729  001B                     	;# 
   730  001C                     	;# 
   731  001D                     	;# 
   732  001E                     	;# 
   733  001F                     	;# 
   734  0081                     	;# 
   735  0085                     	;# 
   736  0086                     	;# 
   737  0087                     	;# 
   738  0089                     	;# 
   739  008C                     	;# 
   740  008D                     	;# 
   741  008E                     	;# 
   742  008F                     	;# 
   743  0090                     	;# 
   744  0091                     	;# 
   745  0092                     	;# 
   746  0093                     	;# 
   747  0093                     	;# 
   748  0094                     	;# 
   749  0095                     	;# 
   750  0095                     	;# 
   751  0096                     	;# 
   752  0096                     	;# 
   753  0098                     	;# 
   754  0099                     	;# 
   755  009C                     	;# 
   756  009D                     	;# 
   757  009F                     	;# 
   758  0108                     	;# 
   759  0109                     	;# 
   760  010C                     	;# 
   761  010C                     	;# 
   762  010D                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  010F                     	;# 
   766  0185                     	;# 
   767  0186                     	;# 
   768  018C                     	;# 
   769  0000                     	;# 
   770  0001                     	;# 
   771  0002                     	;# 
   772  0003                     	;# 
   773  0004                     	;# 
   774  0005                     	;# 
   775  0006                     	;# 
   776  0007                     	;# 
   777  0009                     	;# 
   778  000A                     	;# 
   779  000B                     	;# 
   780  000C                     	;# 
   781  000D                     	;# 
   782  000E                     	;# 
   783  000E                     	;# 
   784  000F                     	;# 
   785  0010                     	;# 
   786  0011                     	;# 
   787  0012                     	;# 
   788  0013                     	;# 
   789  0014                     	;# 
   790  0015                     	;# 
   791  0015                     	;# 
   792  0016                     	;# 
   793  0017                     	;# 
   794  0018                     	;# 
   795  0019                     	;# 
   796  001A                     	;# 
   797  001B                     	;# 
   798  001B                     	;# 
   799  001C                     	;# 
   800  001D                     	;# 
   801  001E                     	;# 
   802  001F                     	;# 
   803  0081                     	;# 
   804  0085                     	;# 
   805  0086                     	;# 
   806  0087                     	;# 
   807  0089                     	;# 
   808  008C                     	;# 
   809  008D                     	;# 
   810  008E                     	;# 
   811  008F                     	;# 
   812  0090                     	;# 
   813  0091                     	;# 
   814  0092                     	;# 
   815  0093                     	;# 
   816  0093                     	;# 
   817  0094                     	;# 
   818  0095                     	;# 
   819  0095                     	;# 
   820  0096                     	;# 
   821  0096                     	;# 
   822  0098                     	;# 
   823  0099                     	;# 
   824  009C                     	;# 
   825  009D                     	;# 
   826  009F                     	;# 
   827  0108                     	;# 
   828  0109                     	;# 
   829  010C                     	;# 
   830  010C                     	;# 
   831  010D                     	;# 
   832  010D                     	;# 
   833  010E                     	;# 
   834  010F                     	;# 
   835  0185                     	;# 
   836  0186                     	;# 
   837  018C                     	;# 
   838  0000                     	;# 
   839  0001                     	;# 
   840  0002                     	;# 
   841  0003                     	;# 
   842  0004                     	;# 
   843  0005                     	;# 
   844  0006                     	;# 
   845  0007                     	;# 
   846  0009                     	;# 
   847  000A                     	;# 
   848  000B                     	;# 
   849  000C                     	;# 
   850  000D                     	;# 
   851  000E                     	;# 
   852  000E                     	;# 
   853  000F                     	;# 
   854  0010                     	;# 
   855  0011                     	;# 
   856  0012                     	;# 
   857  0013                     	;# 
   858  0014                     	;# 
   859  0015                     	;# 
   860  0015                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001B                     	;# 
   868  001C                     	;# 
   869  001D                     	;# 
   870  001E                     	;# 
   871  001F                     	;# 
   872  0081                     	;# 
   873  0085                     	;# 
   874  0086                     	;# 
   875  0087                     	;# 
   876  0089                     	;# 
   877  008C                     	;# 
   878  008D                     	;# 
   879  008E                     	;# 
   880  008F                     	;# 
   881  0090                     	;# 
   882  0091                     	;# 
   883  0092                     	;# 
   884  0093                     	;# 
   885  0093                     	;# 
   886  0094                     	;# 
   887  0095                     	;# 
   888  0095                     	;# 
   889  0096                     	;# 
   890  0096                     	;# 
   891  0098                     	;# 
   892  0099                     	;# 
   893  009C                     	;# 
   894  009D                     	;# 
   895  009F                     	;# 
   896  0108                     	;# 
   897  0109                     	;# 
   898  010C                     	;# 
   899  010C                     	;# 
   900  010D                     	;# 
   901  010D                     	;# 
   902  010E                     	;# 
   903  010F                     	;# 
   904  0185                     	;# 
   905  0186                     	;# 
   906  018C                     	;# 
   907  0000                     	;# 
   908  0001                     	;# 
   909  0002                     	;# 
   910  0003                     	;# 
   911  0004                     	;# 
   912  0005                     	;# 
   913  0006                     	;# 
   914  0007                     	;# 
   915  0009                     	;# 
   916  000A                     	;# 
   917  000B                     	;# 
   918  000C                     	;# 
   919  000D                     	;# 
   920  000E                     	;# 
   921  000E                     	;# 
   922  000F                     	;# 
   923  0010                     	;# 
   924  0011                     	;# 
   925  0012                     	;# 
   926  0013                     	;# 
   927  0014                     	;# 
   928  0015                     	;# 
   929  0015                     	;# 
   930  0016                     	;# 
   931  0017                     	;# 
   932  0018                     	;# 
   933  0019                     	;# 
   934  001A                     	;# 
   935  001B                     	;# 
   936  001B                     	;# 
   937  001C                     	;# 
   938  001D                     	;# 
   939  001E                     	;# 
   940  001F                     	;# 
   941  0081                     	;# 
   942  0085                     	;# 
   943  0086                     	;# 
   944  0087                     	;# 
   945  0089                     	;# 
   946  008C                     	;# 
   947  008D                     	;# 
   948  008E                     	;# 
   949  008F                     	;# 
   950  0090                     	;# 
   951  0091                     	;# 
   952  0092                     	;# 
   953  0093                     	;# 
   954  0093                     	;# 
   955  0094                     	;# 
   956  0095                     	;# 
   957  0095                     	;# 
   958  0096                     	;# 
   959  0096                     	;# 
   960  0098                     	;# 
   961  0099                     	;# 
   962  009C                     	;# 
   963  009D                     	;# 
   964  009F                     	;# 
   965  0108                     	;# 
   966  0109                     	;# 
   967  010C                     	;# 
   968  010C                     	;# 
   969  010D                     	;# 
   970  010D                     	;# 
   971  010E                     	;# 
   972  010F                     	;# 
   973  0185                     	;# 
   974  0186                     	;# 
   975  018C                     	;# 
   976  0000                     	;# 
   977  0001                     	;# 
   978  0002                     	;# 
   979  0003                     	;# 
   980  0004                     	;# 
   981  0005                     	;# 
   982  0006                     	;# 
   983  0007                     	;# 
   984  0009                     	;# 
   985  000A                     	;# 
   986  000B                     	;# 
   987  000C                     	;# 
   988  000D                     	;# 
   989  000E                     	;# 
   990  000E                     	;# 
   991  000F                     	;# 
   992  0010                     	;# 
   993  0011                     	;# 
   994  0012                     	;# 
   995  0013                     	;# 
   996  0014                     	;# 
   997  0015                     	;# 
   998  0015                     	;# 
   999  0016                     	;# 
  1000  0017                     	;# 
  1001  0018                     	;# 
  1002  0019                     	;# 
  1003  001A                     	;# 
  1004  001B                     	;# 
  1005  001B                     	;# 
  1006  001C                     	;# 
  1007  001D                     	;# 
  1008  001E                     	;# 
  1009  001F                     	;# 
  1010  0081                     	;# 
  1011  0085                     	;# 
  1012  0086                     	;# 
  1013  0087                     	;# 
  1014  0089                     	;# 
  1015  008C                     	;# 
  1016  008D                     	;# 
  1017  008E                     	;# 
  1018  008F                     	;# 
  1019  0090                     	;# 
  1020  0091                     	;# 
  1021  0092                     	;# 
  1022  0093                     	;# 
  1023  0093                     	;# 
  1024  0094                     	;# 
  1025  0095                     	;# 
  1026  0095                     	;# 
  1027  0096                     	;# 
  1028  0096                     	;# 
  1029  0098                     	;# 
  1030  0099                     	;# 
  1031  009C                     	;# 
  1032  009D                     	;# 
  1033  009F                     	;# 
  1034  0108                     	;# 
  1035  0109                     	;# 
  1036  010C                     	;# 
  1037  010C                     	;# 
  1038  010D                     	;# 
  1039  010D                     	;# 
  1040  010E                     	;# 
  1041  010F                     	;# 
  1042  0185                     	;# 
  1043  0186                     	;# 
  1044  018C                     	;# 
  1045  0000                     	;# 
  1046  0001                     	;# 
  1047  0002                     	;# 
  1048  0003                     	;# 
  1049  0004                     	;# 
  1050  0005                     	;# 
  1051  0006                     	;# 
  1052  0007                     	;# 
  1053  0009                     	;# 
  1054  000A                     	;# 
  1055  000B                     	;# 
  1056  000C                     	;# 
  1057  000D                     	;# 
  1058  000E                     	;# 
  1059  000E                     	;# 
  1060  000F                     	;# 
  1061  0010                     	;# 
  1062  0011                     	;# 
  1063  0012                     	;# 
  1064  0013                     	;# 
  1065  0014                     	;# 
  1066  0015                     	;# 
  1067  0015                     	;# 
  1068  0016                     	;# 
  1069  0017                     	;# 
  1070  0018                     	;# 
  1071  0019                     	;# 
  1072  001A                     	;# 
  1073  001B                     	;# 
  1074  001B                     	;# 
  1075  001C                     	;# 
  1076  001D                     	;# 
  1077  001E                     	;# 
  1078  001F                     	;# 
  1079  0081                     	;# 
  1080  0085                     	;# 
  1081  0086                     	;# 
  1082  0087                     	;# 
  1083  0089                     	;# 
  1084  008C                     	;# 
  1085  008D                     	;# 
  1086  008E                     	;# 
  1087  008F                     	;# 
  1088  0090                     	;# 
  1089  0091                     	;# 
  1090  0092                     	;# 
  1091  0093                     	;# 
  1092  0093                     	;# 
  1093  0094                     	;# 
  1094  0095                     	;# 
  1095  0095                     	;# 
  1096  0096                     	;# 
  1097  0096                     	;# 
  1098  0098                     	;# 
  1099  0099                     	;# 
  1100  009C                     	;# 
  1101  009D                     	;# 
  1102  009F                     	;# 
  1103  0108                     	;# 
  1104  0109                     	;# 
  1105  010C                     	;# 
  1106  010C                     	;# 
  1107  010D                     	;# 
  1108  010D                     	;# 
  1109  010E                     	;# 
  1110  010F                     	;# 
  1111  0185                     	;# 
  1112  0186                     	;# 
  1113  018C                     	;# 
  1114  0000                     	;# 
  1115  0001                     	;# 
  1116  0002                     	;# 
  1117  0003                     	;# 
  1118  0004                     	;# 
  1119  0005                     	;# 
  1120  0006                     	;# 
  1121  0007                     	;# 
  1122  0009                     	;# 
  1123  000A                     	;# 
  1124  000B                     	;# 
  1125  000C                     	;# 
  1126  000D                     	;# 
  1127  000E                     	;# 
  1128  000E                     	;# 
  1129  000F                     	;# 
  1130  0010                     	;# 
  1131  0011                     	;# 
  1132  0012                     	;# 
  1133  0013                     	;# 
  1134  0014                     	;# 
  1135  0015                     	;# 
  1136  0015                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001B                     	;# 
  1144  001C                     	;# 
  1145  001D                     	;# 
  1146  001E                     	;# 
  1147  001F                     	;# 
  1148  0081                     	;# 
  1149  0085                     	;# 
  1150  0086                     	;# 
  1151  0087                     	;# 
  1152  0089                     	;# 
  1153  008C                     	;# 
  1154  008D                     	;# 
  1155  008E                     	;# 
  1156  008F                     	;# 
  1157  0090                     	;# 
  1158  0091                     	;# 
  1159  0092                     	;# 
  1160  0093                     	;# 
  1161  0093                     	;# 
  1162  0094                     	;# 
  1163  0095                     	;# 
  1164  0095                     	;# 
  1165  0096                     	;# 
  1166  0096                     	;# 
  1167  0098                     	;# 
  1168  0099                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009F                     	;# 
  1172  0108                     	;# 
  1173  0109                     	;# 
  1174  010C                     	;# 
  1175  010C                     	;# 
  1176  010D                     	;# 
  1177  010D                     	;# 
  1178  010E                     	;# 
  1179  010F                     	;# 
  1180  0185                     	;# 
  1181  0186                     	;# 
  1182  018C                     	;# 
  1183  0000                     	;# 
  1184  0001                     	;# 
  1185  0002                     	;# 
  1186  0003                     	;# 
  1187  0004                     	;# 
  1188  0005                     	;# 
  1189  0006                     	;# 
  1190  0007                     	;# 
  1191  0009                     	;# 
  1192  000A                     	;# 
  1193  000B                     	;# 
  1194  000C                     	;# 
  1195  000D                     	;# 
  1196  000E                     	;# 
  1197  000E                     	;# 
  1198  000F                     	;# 
  1199  0010                     	;# 
  1200  0011                     	;# 
  1201  0012                     	;# 
  1202  0013                     	;# 
  1203  0014                     	;# 
  1204  0015                     	;# 
  1205  0015                     	;# 
  1206  0016                     	;# 
  1207  0017                     	;# 
  1208  0018                     	;# 
  1209  0019                     	;# 
  1210  001A                     	;# 
  1211  001B                     	;# 
  1212  001B                     	;# 
  1213  001C                     	;# 
  1214  001D                     	;# 
  1215  001E                     	;# 
  1216  001F                     	;# 
  1217  0081                     	;# 
  1218  0085                     	;# 
  1219  0086                     	;# 
  1220  0087                     	;# 
  1221  0089                     	;# 
  1222  008C                     	;# 
  1223  008D                     	;# 
  1224  008E                     	;# 
  1225  008F                     	;# 
  1226  0090                     	;# 
  1227  0091                     	;# 
  1228  0092                     	;# 
  1229  0093                     	;# 
  1230  0093                     	;# 
  1231  0094                     	;# 
  1232  0095                     	;# 
  1233  0095                     	;# 
  1234  0096                     	;# 
  1235  0096                     	;# 
  1236  0098                     	;# 
  1237  0099                     	;# 
  1238  009C                     	;# 
  1239  009D                     	;# 
  1240  009F                     	;# 
  1241  0108                     	;# 
  1242  0109                     	;# 
  1243  010C                     	;# 
  1244  010C                     	;# 
  1245  010D                     	;# 
  1246  010D                     	;# 
  1247  010E                     	;# 
  1248  010F                     	;# 
  1249  0185                     	;# 
  1250  0186                     	;# 
  1251  018C                     	;# 
  1252  0000                     	;# 
  1253  0001                     	;# 
  1254  0002                     	;# 
  1255  0003                     	;# 
  1256  0004                     	;# 
  1257  0005                     	;# 
  1258  0006                     	;# 
  1259  0007                     	;# 
  1260  0009                     	;# 
  1261  000A                     	;# 
  1262  000B                     	;# 
  1263  000C                     	;# 
  1264  000D                     	;# 
  1265  000E                     	;# 
  1266  000E                     	;# 
  1267  000F                     	;# 
  1268  0010                     	;# 
  1269  0011                     	;# 
  1270  0012                     	;# 
  1271  0013                     	;# 
  1272  0014                     	;# 
  1273  0015                     	;# 
  1274  0015                     	;# 
  1275  0016                     	;# 
  1276  0017                     	;# 
  1277  0018                     	;# 
  1278  0019                     	;# 
  1279  001A                     	;# 
  1280  001B                     	;# 
  1281  001B                     	;# 
  1282  001C                     	;# 
  1283  001D                     	;# 
  1284  001E                     	;# 
  1285  001F                     	;# 
  1286  0081                     	;# 
  1287  0085                     	;# 
  1288  0086                     	;# 
  1289  0087                     	;# 
  1290  0089                     	;# 
  1291  008C                     	;# 
  1292  008D                     	;# 
  1293  008E                     	;# 
  1294  008F                     	;# 
  1295  0090                     	;# 
  1296  0091                     	;# 
  1297  0092                     	;# 
  1298  0093                     	;# 
  1299  0093                     	;# 
  1300  0094                     	;# 
  1301  0095                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0096                     	;# 
  1305  0098                     	;# 
  1306  0099                     	;# 
  1307  009C                     	;# 
  1308  009D                     	;# 
  1309  009F                     	;# 
  1310  0108                     	;# 
  1311  0109                     	;# 
  1312  010C                     	;# 
  1313  010C                     	;# 
  1314  010D                     	;# 
  1315  010D                     	;# 
  1316  010E                     	;# 
  1317  010F                     	;# 
  1318  0185                     	;# 
  1319  0186                     	;# 
  1320  018C                     	;# 
  1321  001F                     _ADCON0	set	31
  1322  001E                     _ADRES	set	30
  1323  0005                     _PORTA	set	5
  1324  0006                     _PORTB	set	6
  1325  0007                     _PORTC	set	7
  1326  0010                     _T1CON	set	16
  1327  000F                     _TMR1H	set	15
  1328  000E                     _TMR1L	set	14
  1329  005F                     _GIE	set	95
  1330  00F9                     _GO_nDONE	set	249
  1331  005E                     _PEIE	set	94
  1332  002C                     _RA4	set	44
  1333  002D                     _RA5	set	45
  1334  0032                     _RB2	set	50
  1335  0033                     _RB3	set	51
  1336  0034                     _RB4	set	52
  1337  0035                     _RB5	set	53
  1338  0060                     _TMR1IF	set	96
  1339  009F                     _ADCON1	set	159
  1340  009D                     _FVRCON	set	157
  1341  0090                     _OSCCON	set	144
  1342  0085                     _TRISA	set	133
  1343  0086                     _TRISB	set	134
  1344  0087                     _TRISC	set	135
  1345  0408                     _PS0	set	1032
  1346  0409                     _PS1	set	1033
  1347  040A                     _PS2	set	1034
  1348  040B                     _PSA	set	1035
  1349  0460                     _TMR1IE	set	1120
  1350  0185                     _ANSELA	set	389
  1351  0186                     _ANSELB	set	390
  1352                           
  1353                           	psect	text0
  1354  0000                     __ptext0:	
  1355                           ; #config settings
  1356                           
  1357                           
  1358                           ;psect for function _TMR1_ISR
  1359  0000                     
  1360                           	psect	cinit
  1361  0013                     start_initialization:	
  1362  0013                     __initialization:	
  1363                           
  1364                           ; Clear objects allocated to COMMON
  1365  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1366  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1367  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1368  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1369                           
  1370                           ; Clear objects allocated to BANK0
  1371  0017  1383               	bcf	3,7	;select IRP bank0
  1372  0018  3020               	movlw	low __pbssBANK0
  1373  0019  0084               	movwf	4
  1374  001A  305A               	movlw	low (__pbssBANK0+58)
  1375  001B  158A  236E  118A   	fcall	clear_ram0
  1376                           
  1377                           ; Clear objects allocated to BANK1
  1378  001E  30A0               	movlw	low __pbssBANK1
  1379  001F  0084               	movwf	4
  1380  0020  30EF               	movlw	low (__pbssBANK1+79)
  1381  0021  158A  236E         	fcall	clear_ram0
  1382  0023                     end_of_initialization:	
  1383                           ;End of C runtime variable initialization code
  1384                           
  1385  0023                     __end_of__initialization:	
  1386  0023  0183               	clrf	3
  1387  0024  158A  2F29         	ljmp	_main	;jump to C main() function
  1388                           
  1389                           	psect	bssCOMMON
  1390  0076                     __pbssCOMMON:	
  1391  0076                     _LED:	
  1392  0076                     	ds	1
  1393  0077                     _Light:	
  1394  0077                     	ds	1
  1395  0078                     _Lights:	
  1396  0078                     	ds	1
  1397  0079                     _LightsControl:	
  1398  0079                     	ds	1
  1399                           
  1400                           	psect	bssBANK0
  1401  0020                     __pbssBANK0:	
  1402  0020                     _myMain:	
  1403  0020                     	ds	6
  1404  0026                     _SYSC:	
  1405  0026                     	ds	5
  1406  002B                     __CDS:	
  1407  002B                     	ds	5
  1408  0030                     _PIRLED:	
  1409  0030                     	ds	4
  1410  0034                     _Timer1:	
  1411  0034                     	ds	3
  1412  0037                     _WDT:	
  1413  0037                     	ds	2
  1414  0039                     _Cmd:	
  1415  0039                     	ds	1
  1416  003A                     _SwDetect:	
  1417  003A                     	ds	1
  1418  003B                     _Temp:	
  1419  003B                     	ds	12
  1420  0047                     _Lights1:	
  1421  0047                     	ds	7
  1422  004E                     _VarErrLED:	
  1423  004E                     	ds	4
  1424  0052                     _VarLED1:	
  1425  0052                     	ds	4
  1426  0056                     _VarLED2:	
  1427  0056                     	ds	4
  1428                           
  1429                           	psect	bssBANK1
  1430  00A0                     __pbssBANK1:	
  1431  00A0                     __PIR:	
  1432  00A0                     	ds	46
  1433  00CE                     _Load:	
  1434  00CE                     	ds	33
  1435                           
  1436                           	psect	clrtext
  1437  0B6E                     clear_ram0:	
  1438                           ;	Called with FSR containing the base address, and
  1439                           ;	W with the last address+1
  1440                           
  1441  0B6E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1442  0B6F                     clrloop0:	
  1443  0B6F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1444  0B70  0A84               	incf	4,f	;increment pointer
  1445  0B71  0604               	xorwf	4,w	;XOR with final address
  1446  0B72  1903               	btfsc	3,2	;have we reached the end yet?
  1447  0B73  3400               	retlw	0	;all done for this memory range, return
  1448  0B74  0604               	xorwf	4,w	;XOR again to restore value
  1449  0B75  2B6F               	goto	clrloop0	;do the next byte
  1450                           
  1451                           	psect	cstackCOMMON
  1452  0070                     __pcstackCOMMON:	
  1453  0070                     ?_setLED_Initialization:	
  1454  0070                     ?_setPIRLED_Main:	
  1455                           ; 0 bytes @ 0x0
  1456                           
  1457  0070                     ?_Fosc_Set:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_IO_Set:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_TMR1_Set:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_ADC_Set:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ?_WDT_Set:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_TMR1_ISR:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ??_TMR1_ISR:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ?_Timeout_Counter:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_set_TimeoutCleared:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_WDT_Clearing:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_myMain_Initialization:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_SYSC_Initialization:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_Temp_Initialization:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_Load_Initialization:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_Lights_Initialization:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_PIR_Initialization:	
  1503                           ; 0 bytes @ 0x0
  1504                           
  1505  0070                     ?_DetectSYSC_Signal:	
  1506                           ; 0 bytes @ 0x0
  1507                           
  1508  0070                     ?_getLoad_AD:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0070                     ?_getTemp_AD:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0070                     ?_my_MainTimer:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0070                     ?_SYSC_Main:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0070                     ?_Temp_Main:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0070                     ?_Load_Main:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0070                     ?_Lights_Main:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0070                     ?_PIR_Main:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0070                     ?_Exception_Main:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0070                     ?_setLoad_AH_AL_Restore:	
  1536                           ; 0 bytes @ 0x0
  1537                           
  1538  0070                     ?_setTemp_Initialization:	
  1539                           ; 0 bytes @ 0x0
  1540                           
  1541  0070                     ?_setTemp_Main:	
  1542                           ; 0 bytes @ 0x0
  1543                           
  1544  0070                     ?_setSYSC_Initialization:	
  1545                           ; 0 bytes @ 0x0
  1546                           
  1547  0070                     ?_setSYSC_Main:	
  1548                           ; 0 bytes @ 0x0
  1549                           
  1550  0070                     ?_setLights_Initialization:	
  1551                           ; 0 bytes @ 0x0
  1552                           
  1553  0070                     ?_setLights_Main:	
  1554                           ; 0 bytes @ 0x0
  1555                           
  1556  0070                     ?_Lights_Control:	
  1557                           ; 0 bytes @ 0x0
  1558                           
  1559  0070                     ?_Lights_Close:	
  1560                           ; 0 bytes @ 0x0
  1561                           
  1562  0070                     ?_setLights_Line:	
  1563                           ; 0 bytes @ 0x0
  1564                           
  1565  0070                     ?_CDS_Initialization:	
  1566                           ; 0 bytes @ 0x0
  1567                           
  1568  0070                     ?_CDS_Main:	
  1569                           ; 0 bytes @ 0x0
  1570                           
  1571  0070                     ?_LedPointSelect:	
  1572                           ; 0 bytes @ 0x0
  1573                           
  1574  0070                     ?_LED_Initialization:	
  1575                           ; 0 bytes @ 0x0
  1576                           
  1577  0070                     ?_LED_Main:	
  1578                           ; 0 bytes @ 0x0
  1579                           
  1580  0070                     ?_Mcu_Initialization:	
  1581                           ; 0 bytes @ 0x0
  1582                           
  1583  0070                     ?_ISR:	
  1584                           ; 0 bytes @ 0x0
  1585                           
  1586  0070                     ??_ISR:	
  1587                           ; 0 bytes @ 0x0
  1588                           
  1589  0070                     ?_WDT_Main:	
  1590                           ; 0 bytes @ 0x0
  1591                           
  1592  0070                     ?_LightsPointSelect:	
  1593                           ; 0 bytes @ 0x0
  1594                           
  1595  0070                     ?_getAll_Lights_Line:	
  1596                           ; 0 bytes @ 0x0
  1597                           
  1598  0070                     ?_getLights_Status:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ?_getLight_LoadGO:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_getLight_Load_Status:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_getLights_Allow_Condition:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_getCDS_Status:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_getMain_All_LightsStatus:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_getMain_All_Error_Status:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_getMain_Lights_Count:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_getLoad_OK:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     getLights_Allow_Condition@lights:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628                           
  1629                           ; 1 bytes @ 0x0
  1630  0070                     	ds	4
  1631  0074                     ??_Fosc_Set:	
  1632  0074                     ??_IO_Set:	
  1633                           ; 0 bytes @ 0x4
  1634                           
  1635  0074                     ??_TMR1_Set:	
  1636                           ; 0 bytes @ 0x4
  1637                           
  1638  0074                     ??_ADC_Set:	
  1639                           ; 0 bytes @ 0x4
  1640                           
  1641  0074                     ??_WDT_Set:	
  1642                           ; 0 bytes @ 0x4
  1643                           
  1644  0074                     ??_Timeout_Counter:	
  1645                           ; 0 bytes @ 0x4
  1646                           
  1647  0074                     ??_set_TimeoutCleared:	
  1648                           ; 0 bytes @ 0x4
  1649                           
  1650  0074                     ??_WDT_Clearing:	
  1651                           ; 0 bytes @ 0x4
  1652                           
  1653  0074                     ??_myMain_Initialization:	
  1654                           ; 0 bytes @ 0x4
  1655                           
  1656  0074                     ??_SYSC_Initialization:	
  1657                           ; 0 bytes @ 0x4
  1658                           
  1659  0074                     ??_Temp_Initialization:	
  1660                           ; 0 bytes @ 0x4
  1661                           
  1662  0074                     ??_PIR_Initialization:	
  1663                           ; 0 bytes @ 0x4
  1664                           
  1665  0074                     ??_DetectSYSC_Signal:	
  1666                           ; 0 bytes @ 0x4
  1667                           
  1668  0074                     ??_my_MainTimer:	
  1669                           ; 0 bytes @ 0x4
  1670                           
  1671  0074                     ??_setLoad_AH_AL_Restore:	
  1672                           ; 0 bytes @ 0x4
  1673                           
  1674  0074                     ??_getLight_LoadGO:	
  1675                           ; 0 bytes @ 0x4
  1676                           
  1677  0074                     ??_getLight_Load_Status:	
  1678                           ; 0 bytes @ 0x4
  1679                           
  1680  0074                     ??_setTemp_Initialization:	
  1681                           ; 0 bytes @ 0x4
  1682                           
  1683  0074                     ??_setSYSC_Initialization:	
  1684                           ; 0 bytes @ 0x4
  1685                           
  1686  0074                     ??_setLights_Line:	
  1687                           ; 0 bytes @ 0x4
  1688                           
  1689  0074                     ??_CDS_Initialization:	
  1690                           ; 0 bytes @ 0x4
  1691                           
  1692  0074                     ??_getCDS_Status:	
  1693                           ; 0 bytes @ 0x4
  1694                           
  1695  0074                     ??_LedPointSelect:	
  1696                           ; 0 bytes @ 0x4
  1697                           
  1698  0074                     ??_WDT_Main:	
  1699                           ; 0 bytes @ 0x4
  1700                           
  1701  0074                     ??_getMain_All_LightsStatus:	
  1702                           ; 0 bytes @ 0x4
  1703                           
  1704  0074                     ??_getMain_All_Error_Status:	
  1705                           ; 0 bytes @ 0x4
  1706                           
  1707  0074                     ??_getMain_Lights_Count:	
  1708                           ; 0 bytes @ 0x4
  1709                           
  1710  0074                     ??_getLoad_OK:	
  1711                           ; 0 bytes @ 0x4
  1712                           
  1713  0074                     ??_LightsPointSelect:	
  1714                           ; 0 bytes @ 0x4
  1715                           
  1716  0074                     ??___awdiv:	
  1717                           ; 0 bytes @ 0x4
  1718                           
  1719  0074                     ??___lwdiv:	
  1720                           ; 0 bytes @ 0x4
  1721                           
  1722  0074                     ?_getAD:	
  1723                           ; 0 bytes @ 0x4
  1724                           
  1725  0074                     getCDS_Status@status:	
  1726                           ; 1 bytes @ 0x4
  1727                           
  1728  0074                     getAD@adcon1:	
  1729                           ; 1 bytes @ 0x4
  1730                           
  1731  0074                     getMain_All_LightsStatus@status:	
  1732                           ; 1 bytes @ 0x4
  1733                           
  1734  0074                     getMain_Lights_Count@count:	
  1735                           ; 1 bytes @ 0x4
  1736                           
  1737  0074                     getLoad_OK@ok:	
  1738                           ; 1 bytes @ 0x4
  1739                           
  1740  0074                     setLights_Line@lights:	
  1741                           ; 1 bytes @ 0x4
  1742                           
  1743  0074                     getLight_LoadGO@loadgo:	
  1744                           ; 1 bytes @ 0x4
  1745                           
  1746  0074                     getLight_Load_Status@loadstatus:	
  1747                           ; 1 bytes @ 0x4
  1748                           
  1749                           
  1750                           ; 1 bytes @ 0x4
  1751  0074                     	ds	1
  1752  0075                     ??_getAD:	
  1753  0075                     ??_SYSC_Main:	
  1754                           ; 0 bytes @ 0x5
  1755                           
  1756  0075                     ??_setTemp_Main:	
  1757                           ; 0 bytes @ 0x5
  1758                           
  1759  0075                     ??_setSYSC_Main:	
  1760                           ; 0 bytes @ 0x5
  1761                           
  1762  0075                     ??_Lights_Close:	
  1763                           ; 0 bytes @ 0x5
  1764                           
  1765  0075                     ??_getLights_Allow_Condition:	
  1766                           ; 0 bytes @ 0x5
  1767                           
  1768  0075                     ??_Mcu_Initialization:	
  1769                           ; 0 bytes @ 0x5
  1770                           
  1771  0075                     LedPointSelect@led:	
  1772                           ; 0 bytes @ 0x5
  1773                           
  1774  0075                     getAD@adcon0:	
  1775                           ; 1 bytes @ 0x5
  1776                           
  1777  0075                     getMain_Lights_Count@status1:	
  1778                           ; 1 bytes @ 0x5
  1779                           
  1780  0075                     setLoad_AH_AL_Restore@i:	
  1781                           ; 1 bytes @ 0x5
  1782                           
  1783  0075                     LightsPointSelect@lights:	
  1784                           ; 1 bytes @ 0x5
  1785                           
  1786                           
  1787                           ; 1 bytes @ 0x5
  1788  0075                     	ds	1
  1789  0076                     ??_setLED_Initialization:	
  1790  0076                     ??_setLED:	
  1791                           ; 0 bytes @ 0x6
  1792                           
  1793  0076                     ??_Load_Initialization:	
  1794                           ; 0 bytes @ 0x6
  1795                           
  1796  0076                     ??_Lights_Initialization:	
  1797                           ; 0 bytes @ 0x6
  1798                           
  1799  0076                     ??_Temp_Main:	
  1800                           ; 0 bytes @ 0x6
  1801                           
  1802  0076                     ??_Lights_Main:	
  1803                           ; 0 bytes @ 0x6
  1804                           
  1805  0076                     ??_getAll_Lights_Line:	
  1806                           ; 0 bytes @ 0x6
  1807                           
  1808  0076                     ??_getLights_Status:	
  1809                           ; 0 bytes @ 0x6
  1810                           
  1811  0076                     ??_setLights_Initialization:	
  1812                           ; 0 bytes @ 0x6
  1813                           
  1814  0076                     ??_setLights_Main:	
  1815                           ; 0 bytes @ 0x6
  1816                           
  1817  0076                     ??_LED_Initialization:	
  1818                           ; 0 bytes @ 0x6
  1819                           
  1820  0076                     ??_LED_Main:	
  1821                           ; 0 bytes @ 0x6
  1822                           
  1823                           
  1824                           	psect	cstackBANK0
  1825  005A                     __pcstackBANK0:	
  1826                           ; 0 bytes @ 0x6
  1827                           
  1828  005A                     ?_setLED:	
  1829  005A                     ??_getLoad_AD:	
  1830                           ; 0 bytes @ 0x0
  1831                           
  1832  005A                     ??_getTemp_AD:	
  1833                           ; 0 bytes @ 0x0
  1834                           
  1835  005A                     ?_setLights_Trigger:	
  1836                           ; 0 bytes @ 0x0
  1837                           
  1838  005A                     ?_setLights:	
  1839                           ; 0 bytes @ 0x0
  1840                           
  1841  005A                     ??_CDS_Main:	
  1842                           ; 0 bytes @ 0x0
  1843                           
  1844  005A                     ?_getCDS_AD:	
  1845                           ; 0 bytes @ 0x0
  1846                           
  1847  005A                     ?___awdiv:	
  1848                           ; 0 bytes @ 0x0
  1849                           
  1850  005A                     ?___lwdiv:	
  1851                           ; 2 bytes @ 0x0
  1852                           
  1853  005A                     getCDS_AD@channel2:	
  1854                           ; 2 bytes @ 0x0
  1855                           
  1856  005A                     setLED@command:	
  1857                           ; 1 bytes @ 0x0
  1858                           
  1859  005A                     setLights_Initialization@lights:	
  1860                           ; 1 bytes @ 0x0
  1861                           
  1862  005A                     setLights@status:	
  1863                           ; 1 bytes @ 0x0
  1864                           
  1865  005A                     getLights_Status@lights:	
  1866                           ; 1 bytes @ 0x0
  1867                           
  1868  005A                     setLights_Trigger@command:	
  1869                           ; 1 bytes @ 0x0
  1870                           
  1871  005A                     getAll_Lights_Line@line:	
  1872                           ; 1 bytes @ 0x0
  1873                           
  1874  005A                     getLights_Allow_Condition@allow:	
  1875                           ; 1 bytes @ 0x0
  1876                           
  1877  005A                     _getMain_All_Error_Status$2341:	
  1878                           ; 1 bytes @ 0x0
  1879                           
  1880  005A                     ___awdiv@divisor:	
  1881                           ; 2 bytes @ 0x0
  1882                           
  1883  005A                     ___lwdiv@divisor:	
  1884                           ; 2 bytes @ 0x0
  1885                           
  1886                           
  1887                           ; 2 bytes @ 0x0
  1888  005A                     	ds	1
  1889  005B                     ??_setLights_Trigger:	
  1890  005B                     ??_setLights:	
  1891                           ; 0 bytes @ 0x1
  1892                           
  1893  005B                     ??_getCDS_AD:	
  1894                           ; 0 bytes @ 0x1
  1895                           
  1896  005B                     setLED@led:	
  1897                           ; 0 bytes @ 0x1
  1898                           
  1899  005B                     getLights_Status@status:	
  1900                           ; 1 bytes @ 0x1
  1901                           
  1902  005B                     _getLights_Allow_Condition$4633:	
  1903                           ; 1 bytes @ 0x1
  1904                           
  1905                           
  1906                           ; 1 bytes @ 0x1
  1907  005B                     	ds	1
  1908  005C                     ??_setPIRLED_Main:	
  1909  005C                     setLED_Initialization@led:	
  1910                           ; 0 bytes @ 0x2
  1911                           
  1912  005C                     getLoad_AD@channel:	
  1913                           ; 1 bytes @ 0x2
  1914                           
  1915  005C                     getTemp_AD@channel:	
  1916                           ; 1 bytes @ 0x2
  1917                           
  1918  005C                     setLights@lights:	
  1919                           ; 1 bytes @ 0x2
  1920                           
  1921  005C                     setLights_Trigger@lights:	
  1922                           ; 1 bytes @ 0x2
  1923                           
  1924  005C                     _getMain_All_Error_Status$2342:	
  1925                           ; 1 bytes @ 0x2
  1926                           
  1927  005C                     ___awdiv@dividend:	
  1928                           ; 2 bytes @ 0x2
  1929                           
  1930  005C                     ___lwdiv@dividend:	
  1931                           ; 2 bytes @ 0x2
  1932                           
  1933                           
  1934                           ; 2 bytes @ 0x2
  1935  005C                     	ds	1
  1936  005D                     getCDS_AD@i:	
  1937  005D                     setPIRLED_Main@count:	
  1938                           ; 1 bytes @ 0x3
  1939                           
  1940  005D                     getLoad_AD@k:	
  1941                           ; 1 bytes @ 0x3
  1942                           
  1943  005D                     setLights_Main@lights:	
  1944                           ; 1 bytes @ 0x3
  1945                           
  1946                           
  1947                           ; 1 bytes @ 0x3
  1948  005D                     	ds	1
  1949  005E                     getCDS_AD@j:	
  1950  005E                     getMain_All_Error_Status@command:	
  1951                           ; 1 bytes @ 0x4
  1952                           
  1953  005E                     getLoad_AD@j:	
  1954                           ; 1 bytes @ 0x4
  1955                           
  1956  005E                     ___awdiv@counter:	
  1957                           ; 1 bytes @ 0x4
  1958                           
  1959  005E                     ___lwdiv@counter:	
  1960                           ; 1 bytes @ 0x4
  1961                           
  1962                           
  1963                           ; 1 bytes @ 0x4
  1964  005E                     	ds	1
  1965  005F                     getCDS_AD@channel1:	
  1966  005F                     getMain_All_Error_Status@status:	
  1967                           ; 1 bytes @ 0x5
  1968                           
  1969  005F                     getLoad_AD@i:	
  1970                           ; 1 bytes @ 0x5
  1971                           
  1972  005F                     ___awdiv@sign:	
  1973                           ; 1 bytes @ 0x5
  1974                           
  1975  005F                     ___lwdiv@quotient:	
  1976                           ; 1 bytes @ 0x5
  1977                           
  1978                           
  1979                           ; 2 bytes @ 0x5
  1980  005F                     	ds	1
  1981  0060                     ??_PIR_Main:	
  1982  0060                     ??_Exception_Main:	
  1983                           ; 0 bytes @ 0x6
  1984                           
  1985  0060                     ___awdiv@quotient:	
  1986                           ; 0 bytes @ 0x6
  1987                           
  1988                           
  1989                           ; 2 bytes @ 0x6
  1990  0060                     	ds	1
  1991  0061                     ??_Load_Main:	
  1992  0061                     Exception_Main@lights:	
  1993                           ; 0 bytes @ 0x7
  1994                           
  1995                           
  1996                           ; 1 bytes @ 0x7
  1997  0061                     	ds	1
  1998  0062                     ?_getPIR_AD:	
  1999  0062                     ??_Lights_Control:	
  2000                           ; 0 bytes @ 0x8
  2001                           
  2002  0062                     Exception_Main@count:	
  2003                           ; 0 bytes @ 0x8
  2004                           
  2005  0062                     setTemp_Main@error:	
  2006                           ; 1 bytes @ 0x8
  2007                           
  2008  0062                     getPIR_AD@channel2:	
  2009                           ; 1 bytes @ 0x8
  2010                           
  2011                           
  2012                           ; 1 bytes @ 0x8
  2013  0062                     	ds	1
  2014  0063                     ??_getPIR_AD:	
  2015  0063                     Exception_Main@status:	
  2016                           ; 0 bytes @ 0x9
  2017                           
  2018  0063                     Load_Main@error:	
  2019                           ; 1 bytes @ 0x9
  2020                           
  2021                           
  2022                           ; 1 bytes @ 0x9
  2023  0063                     	ds	1
  2024  0064                     Load_Main@Load_Status:	
  2025  0064                     Exception_Main@i:	
  2026                           ; 1 bytes @ 0xA
  2027                           
  2028  0064                     _Lights_Control$4611:	
  2029                           ; 2 bytes @ 0xA
  2030                           
  2031                           
  2032                           ; 2 bytes @ 0xA
  2033  0064                     	ds	1
  2034  0065                     PIR_Main@error:	
  2035  0065                     Load_Main@i:	
  2036                           ; 1 bytes @ 0xB
  2037                           
  2038                           
  2039                           ; 2 bytes @ 0xB
  2040  0065                     	ds	1
  2041  0066                     Exception_Main@error:	
  2042  0066                     getPIR_AD@j:	
  2043                           ; 1 bytes @ 0xC
  2044                           
  2045  0066                     Lights_Control@lights:	
  2046                           ; 1 bytes @ 0xC
  2047                           
  2048  0066                     _PIR_Main$3125:	
  2049                           ; 1 bytes @ 0xC
  2050                           
  2051                           
  2052                           ; 2 bytes @ 0xC
  2053  0066                     	ds	1
  2054  0067                     getPIR_AD@channel1:	
  2055                           
  2056                           ; 1 bytes @ 0xD
  2057  0067                     	ds	1
  2058  0068                     PIR_Main@cds:	
  2059  0068                     getPIR_AD@i:	
  2060                           ; 1 bytes @ 0xE
  2061                           
  2062                           
  2063                           ; 1 bytes @ 0xE
  2064  0068                     	ds	1
  2065  0069                     ?_main:	
  2066  0069                     main@argc:	
  2067                           ; 2 bytes @ 0xF
  2068                           
  2069                           
  2070                           ; 2 bytes @ 0xF
  2071  0069                     	ds	2
  2072  006B                     main@argv:	
  2073                           
  2074                           ; 2 bytes @ 0x11
  2075  006B                     	ds	2
  2076  006D                     ??_main:	
  2077                           
  2078                           ; 0 bytes @ 0x13
  2079  006D                     	ds	1
  2080                           
  2081                           	psect	maintext
  2082  0F29                     __pmaintext:	
  2083 ;;
  2084 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2085 ;;
  2086 ;; *************** function _main *****************
  2087 ;; Defined at:
  2088 ;;		line 7 in file "../src/Main_B1.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;  argc            2   15[BANK0 ] int 
  2091 ;;  argv            2   17[BANK0 ] PTR PTR unsigned char 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;		None
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  2   15[BANK0 ] int 
  2096 ;; Registers used:
  2097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 17F/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2103 ;;      Params:         0       4       0       0
  2104 ;;      Locals:         0       0       0       0
  2105 ;;      Temps:          0       1       0       0
  2106 ;;      Totals:         0       5       0       0
  2107 ;;Total ram usage:        5 bytes
  2108 ;; Hardware stack levels required when called:    6
  2109 ;; This function calls:
  2110 ;;		_CDS_Initialization
  2111 ;;		_CDS_Main
  2112 ;;		_DetectSYSC_Signal
  2113 ;;		_Exception_Main
  2114 ;;		_LED_Initialization
  2115 ;;		_LED_Main
  2116 ;;		_Lights_Initialization
  2117 ;;		_Lights_Main
  2118 ;;		_Load_Initialization
  2119 ;;		_Load_Main
  2120 ;;		_Mcu_Initialization
  2121 ;;		_PIR_Initialization
  2122 ;;		_PIR_Main
  2123 ;;		_SYSC_Initialization
  2124 ;;		_SYSC_Main
  2125 ;;		_Temp_Initialization
  2126 ;;		_Temp_Main
  2127 ;;		_WDT_Main
  2128 ;;		_getCDS_AD
  2129 ;;		_getLoad_AD
  2130 ;;		_getPIR_AD
  2131 ;;		_getTemp_AD
  2132 ;;		_myMain_Initialization
  2133 ;;		_my_MainTimer
  2134 ;; This function is called by:
  2135 ;;		Startup code after reset
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           
  2140                           ;psect for function _main
  2141  0F29                     _main:	
  2142                           
  2143                           ;Main_B1.c: 8: myMain_Initialization();
  2144                           
  2145                           ;incstack = 0
  2146                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2147  0F29  158A  231A  158A   	fcall	_myMain_Initialization
  2148                           
  2149                           ;Main_B1.c: 9: Mcu_Initialization();
  2150  0F2C  158A  23E2  158A   	fcall	_Mcu_Initialization
  2151                           
  2152                           ;Main_B1.c: 10: ;;
  2153                           ;Main_B1.c: 11: LED_Initialization();
  2154  0F2F  158A  239E  158A   	fcall	_LED_Initialization
  2155                           
  2156                           ;Main_B1.c: 12: ;;
  2157                           ;Main_B1.c: 14: SYSC_Initialization();
  2158  0F32  158A  2321  158A   	fcall	_SYSC_Initialization
  2159                           
  2160                           ;Main_B1.c: 15: Temp_Initialization();
  2161  0F35  158A  2327  158A   	fcall	_Temp_Initialization
  2162                           
  2163                           ;Main_B1.c: 16: Load_Initialization();
  2164  0F38  158A  231E  158A   	fcall	_Load_Initialization
  2165                           
  2166                           ;Main_B1.c: 17: ;;
  2167                           ;Main_B1.c: 18: ;;
  2168                           ;Main_B1.c: 20: ;;
  2169                           ;Main_B1.c: 21: Lights_Initialization();
  2170  0F3B  158A  2331  158A   	fcall	_Lights_Initialization
  2171                           
  2172                           ;Main_B1.c: 22: CDS_Initialization();
  2173  0F3E  158A  232D  158A   	fcall	_CDS_Initialization
  2174                           
  2175                           ;Main_B1.c: 23: PIR_Initialization();
  2176  0F41  158A  2393  158A   	fcall	_PIR_Initialization
  2177  0F44                     l5376:	
  2178                           ;Main_B1.c: 24: ;;
  2179                           ;Main_B1.c: 25: ;;
  2180                           ;Main_B1.c: 26: ;;
  2181                           ;Main_B1.c: 27: ;;
  2182                           ;Main_B1.c: 28: ;;
  2183                           ;Main_B1.c: 30: while (1) {
  2184                           
  2185                           
  2186                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2187  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  2188  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  2189  0F46  1C20               	btfss	_myMain,0
  2190  0F47  2F67               	goto	l5388
  2191                           
  2192                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2193  0F48  158A  23AA  158A   	fcall	_DetectSYSC_Signal
  2194                           
  2195                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2196  0F4B  3001               	movlw	1
  2197  0F4C  118A  26CA  158A   	fcall	_getLoad_AD
  2198                           
  2199                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2200  0F4F  3011               	movlw	17
  2201  0F50  158A  2557  158A   	fcall	_getTemp_AD
  2202                           
  2203                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x31);
  2204  0F53  3031               	movlw	49
  2205  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  2206  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  2207  0F56  00ED               	movwf	??_main
  2208  0F57  086D               	movf	??_main,w
  2209  0F58  00DA               	movwf	getCDS_AD@channel2
  2210  0F59  3009               	movlw	9
  2211  0F5A  158A  257E  158A   	fcall	_getCDS_AD
  2212                           
  2213                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2214  0F5D  300D               	movlw	13
  2215  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  2216  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  2217  0F60  00ED               	movwf	??_main
  2218  0F61  086D               	movf	??_main,w
  2219  0F62  00E2               	movwf	getPIR_AD@channel2
  2220  0F63  3005               	movlw	5
  2221  0F64  118A  23FB  158A   	fcall	_getPIR_AD
  2222  0F67                     l5388:	
  2223                           
  2224                           ;Main_B1.c: 57: }
  2225                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2226  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  2227  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  2228  0F69  1C34               	btfss	_Timer1,0
  2229  0F6A  2F44               	goto	l5376
  2230                           
  2231                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2232  0F6B  1034               	bcf	_Timer1,0
  2233                           
  2234                           ;Main_B1.c: 96: my_MainTimer();
  2235  0F6C  158A  24E5  158A   	fcall	_my_MainTimer
  2236                           
  2237                           ;Main_B1.c: 97: WDT_Main();
  2238  0F6F  158A  2424  158A   	fcall	_WDT_Main
  2239                           
  2240                           ;Main_B1.c: 98: ;;
  2241                           ;Main_B1.c: 99: ;;
  2242                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2243  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  2244  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  2245  0F74  1C20               	btfss	_myMain,0
  2246  0F75  2F44               	goto	l5376
  2247                           
  2248                           ;Main_B1.c: 101: ;;
  2249                           ;Main_B1.c: 103: LED_Main();
  2250  0F76  158A  231B  158A   	fcall	_LED_Main
  2251                           
  2252                           ;Main_B1.c: 104: ;;
  2253                           ;Main_B1.c: 106: SYSC_Main();
  2254  0F79  158A  2324  158A   	fcall	_SYSC_Main
  2255                           
  2256                           ;Main_B1.c: 107: Temp_Main();
  2257  0F7C  158A  232A  158A   	fcall	_Temp_Main
  2258                           
  2259                           ;Main_B1.c: 108: Load_Main();
  2260  0F7F  118A  2222  158A   	fcall	_Load_Main
  2261                           
  2262                           ;Main_B1.c: 109: ;;
  2263                           ;Main_B1.c: 111: Lights_Main();
  2264  0F82  158A  2536  158A   	fcall	_Lights_Main
  2265                           
  2266                           ;Main_B1.c: 112: ;;
  2267                           ;Main_B1.c: 113: ;;
  2268                           ;Main_B1.c: 114: CDS_Main();
  2269  0F85  158A  25D8  158A   	fcall	_CDS_Main
  2270                           
  2271                           ;Main_B1.c: 115: PIR_Main();
  2272  0F88  118A  2026  158A   	fcall	_PIR_Main
  2273                           
  2274                           ;Main_B1.c: 117: ;;
  2275                           ;Main_B1.c: 118: ;;
  2276                           ;Main_B1.c: 119: ;;
  2277                           ;Main_B1.c: 120: ;;
  2278                           ;Main_B1.c: 121: Exception_Main();
  2279  0F8B  118A  2654  158A   	fcall	_Exception_Main
  2280  0F8E  2F44               	goto	l5376
  2281  0F8F                     __end_of_main:	
  2282                           ;Main_B1.c: 128: }
  2283                           ;Main_B1.c: 129: }
  2284                           ;Main_B1.c: 163: }
  2285                           ;Main_B1.c: 164: return (0);
  2286                           ;	Return value of _main is never used
  2287                           
  2288                           
  2289                           	psect	text1
  2290  0CE5                     __ptext1:	
  2291 ;; *************** function _my_MainTimer *****************
  2292 ;; Defined at:
  2293 ;;		line 185 in file "../src/Main_B1.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;		None
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;		None
  2298 ;; Return value:  Size  Location     Type
  2299 ;;		None               void
  2300 ;; Registers used:
  2301 ;;		wreg, status,2, status,0
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2307 ;;      Params:         0       0       0       0
  2308 ;;      Locals:         0       0       0       0
  2309 ;;      Temps:          1       0       0       0
  2310 ;;      Totals:         1       0       0       0
  2311 ;;Total ram usage:        1 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    2
  2314 ;; This function calls:
  2315 ;;		Nothing
  2316 ;; This function is called by:
  2317 ;;		_main
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           
  2322                           ;psect for function _my_MainTimer
  2323  0CE5                     _my_MainTimer:	
  2324                           
  2325                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  2326                           
  2327                           ;incstack = 0
  2328                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2329  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  2330  0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  2331  0CE7  1820               	btfsc	_myMain,0
  2332  0CE8  2CF5               	goto	l3888
  2333                           
  2334                           ;Main_B1.c: 189: myMain.PowerCount++;
  2335  0CE9  3001               	movlw	1
  2336  0CEA  00F4               	movwf	??_my_MainTimer
  2337  0CEB  0874               	movf	??_my_MainTimer,w
  2338  0CEC  07A1               	addwf	_myMain+1,f
  2339                           
  2340                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  2341  0CED  0821               	movf	_myMain+1,w
  2342  0CEE  3A4B               	xorlw	75
  2343  0CEF  1D03               	skipz
  2344  0CF0  0008               	return
  2345                           
  2346                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  2347  0CF1  01A1               	clrf	_myMain+1
  2348                           
  2349                           ;Main_B1.c: 192: myMain.PowerON = 1;
  2350  0CF2  1420               	bsf	_myMain,0
  2351                           
  2352                           ;Main_B1.c: 197: ;;
  2353                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  2354  0CF3  1620               	bsf	_myMain,4
  2355                           
  2356                           ;Main_B1.c: 207: }
  2357                           ;Main_B1.c: 208: } else {
  2358  0CF4  0008               	return
  2359  0CF5                     l3888:	
  2360                           
  2361                           ;Main_B1.c: 209: myMain.PowerCount++;
  2362  0CF5  3001               	movlw	1
  2363  0CF6  00F4               	movwf	??_my_MainTimer
  2364  0CF7  0874               	movf	??_my_MainTimer,w
  2365  0CF8  07A1               	addwf	_myMain+1,f
  2366                           
  2367                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  2368  0CF9  0821               	movf	_myMain+1,w
  2369  0CFA  3A32               	xorlw	50
  2370  0CFB  1D03               	skipz
  2371  0CFC  0008               	return
  2372                           
  2373                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  2374  0CFD  01A1               	clrf	_myMain+1
  2375  0CFE  0008               	return
  2376  0CFF                     __end_of_my_MainTimer:	
  2377                           
  2378                           	psect	text2
  2379  0B1A                     __ptext2:	
  2380 ;; *************** function _myMain_Initialization *****************
  2381 ;; Defined at:
  2382 ;;		line 170 in file "../src/Main_B1.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;		None
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;		None
  2387 ;; Return value:  Size  Location     Type
  2388 ;;		None               void
  2389 ;; Registers used:
  2390 ;;		None
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2396 ;;      Params:         0       0       0       0
  2397 ;;      Locals:         0       0       0       0
  2398 ;;      Temps:          0       0       0       0
  2399 ;;      Totals:         0       0       0       0
  2400 ;;Total ram usage:        0 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    2
  2403 ;; This function calls:
  2404 ;;		Nothing
  2405 ;; This function is called by:
  2406 ;;		_main
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           
  2411                           ;psect for function _myMain_Initialization
  2412  0B1A                     _myMain_Initialization:	
  2413                           
  2414                           ;incstack = 0
  2415                           ; Regs used in _myMain_Initialization: []
  2416  0B1A  0008               	return
  2417  0B1B                     __end_of_myMain_Initialization:	
  2418                           
  2419                           	psect	text3
  2420  0D57                     __ptext3:	
  2421 ;; *************** function _getTemp_AD *****************
  2422 ;; Defined at:
  2423 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;  channel         1    wreg     unsigned char 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  channel         1    2[BANK0 ] unsigned char 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;		None               void
  2430 ;; Registers used:
  2431 ;;		wreg, status,2, status,0, pclath, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2437 ;;      Params:         0       0       0       0
  2438 ;;      Locals:         0       1       0       0
  2439 ;;      Temps:          0       2       0       0
  2440 ;;      Totals:         0       3       0       0
  2441 ;;Total ram usage:        3 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    4
  2444 ;; This function calls:
  2445 ;;		_getAD
  2446 ;; This function is called by:
  2447 ;;		_main
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           
  2452                           ;psect for function _getTemp_AD
  2453  0D57                     _getTemp_AD:	
  2454                           
  2455                           ;incstack = 0
  2456                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2457                           ;getTemp_AD@channel stored from wreg
  2458  0D57  1283               	bcf	3,5	;RP0=0, select bank0
  2459  0D58  1303               	bcf	3,6	;RP1=0, select bank0
  2460  0D59  00DC               	movwf	getTemp_AD@channel
  2461                           
  2462                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  2463  0D5A  1D3B               	btfss	_Temp,2
  2464  0D5B  0008               	return
  2465                           
  2466                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0x70);
  2467  0D5C  3070               	movlw	112
  2468  0D5D  00DA               	movwf	??_getTemp_AD
  2469  0D5E  085A               	movf	??_getTemp_AD,w
  2470  0D5F  00F4               	movwf	getAD@adcon1
  2471  0D60  085C               	movf	getTemp_AD@channel,w
  2472  0D61  158A  251A  158A   	fcall	_getAD
  2473  0D64  1283               	bcf	3,5	;RP0=0, select bank0
  2474  0D65  1303               	bcf	3,6	;RP1=0, select bank0
  2475  0D66  00DB               	movwf	??_getTemp_AD+1
  2476  0D67  085B               	movf	??_getTemp_AD+1,w
  2477  0D68  00C4               	movwf	_Temp+9
  2478                           
  2479                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  2480  0D69  0844               	movf	_Temp+9,w
  2481  0D6A  1903               	btfsc	3,2
  2482  0D6B  0008               	return
  2483                           
  2484                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  2485  0D6C  0844               	movf	_Temp+9,w
  2486  0D6D  0242               	subwf	_Temp+7,w
  2487  0D6E  1803               	skipnc
  2488  0D6F  2D75               	goto	l4914
  2489                           
  2490                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  2491  0D70  0844               	movf	_Temp+9,w
  2492  0D71  00DA               	movwf	??_getTemp_AD
  2493  0D72  085A               	movf	??_getTemp_AD,w
  2494  0D73  00C2               	movwf	_Temp+7
  2495                           
  2496                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  2497  0D74  0008               	return
  2498  0D75                     l4914:	
  2499  0D75  0844               	movf	_Temp+9,w
  2500  0D76  0243               	subwf	_Temp+8,w
  2501  0D77  1803               	skipnc
  2502  0D78  0008               	return
  2503                           
  2504                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  2505  0D79  0844               	movf	_Temp+9,w
  2506  0D7A  00DA               	movwf	??_getTemp_AD
  2507  0D7B  085A               	movf	??_getTemp_AD,w
  2508  0D7C  00C3               	movwf	_Temp+8
  2509  0D7D  0008               	return
  2510  0D7E                     __end_of_getTemp_AD:	
  2511                           
  2512                           	psect	text4
  2513  03FB                     __ptext4:	
  2514 ;; *************** function _getPIR_AD *****************
  2515 ;; Defined at:
  2516 ;;		line 222 in file "../src/PIR_B1.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  channel1        1    wreg     unsigned char 
  2519 ;;  channel2        1    8[BANK0 ] unsigned char 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  channel1        1   13[BANK0 ] unsigned char 
  2522 ;;  i               1   14[BANK0 ] unsigned char 
  2523 ;;  j               1   12[BANK0 ] unsigned char 
  2524 ;; Return value:  Size  Location     Type
  2525 ;;		None               void
  2526 ;; Registers used:
  2527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2533 ;;      Params:         0       1       0       0
  2534 ;;      Locals:         0       3       0       0
  2535 ;;      Temps:          0       3       0       0
  2536 ;;      Totals:         0       7       0       0
  2537 ;;Total ram usage:        7 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    4
  2540 ;; This function calls:
  2541 ;;		___awdiv
  2542 ;;		___lwdiv
  2543 ;;		_getAD
  2544 ;; This function is called by:
  2545 ;;		_main
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           
  2550                           ;psect for function _getPIR_AD
  2551  03FB                     _getPIR_AD:	
  2552                           
  2553                           ;incstack = 0
  2554                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2555                           ;getPIR_AD@channel1 stored from wreg
  2556  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  2557  03FC  1303               	bcf	3,6	;RP1=0, select bank0
  2558  03FD  00E7               	movwf	getPIR_AD@channel1
  2559                           
  2560                           ;PIR_B1.c: 223: char i = 0, j = 0;
  2561  03FE  01E8               	clrf	getPIR_AD@i
  2562  03FF  01E6               	clrf	getPIR_AD@j
  2563                           
  2564                           ;PIR_B1.c: 225: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2565  0400  1683               	bsf	3,5	;RP0=1, select bank1
  2566  0401  1303               	bcf	3,6	;RP1=0, select bank1
  2567  0402  1CA0               	btfss	__PIR^(0+128),1
  2568  0403  0008               	return
  2569  0404  1920               	btfsc	__PIR^(0+128),2
  2570  0405  0008               	return
  2571                           
  2572                           ;PIR_B1.c: 226: _PIR.GO = 1;
  2573  0406  1520               	bsf	__PIR^(0+128),2
  2574                           
  2575                           ;PIR_B1.c: 227: _PIR.ADRES = getAD(channel1, 0x70);
  2576  0407  3070               	movlw	112
  2577  0408  1283               	bcf	3,5	;RP0=0, select bank0
  2578  0409  1303               	bcf	3,6	;RP1=0, select bank0
  2579  040A  00E3               	movwf	??_getPIR_AD
  2580  040B  0863               	movf	??_getPIR_AD,w
  2581  040C  00F4               	movwf	getAD@adcon1
  2582  040D  0867               	movf	getPIR_AD@channel1,w
  2583  040E  158A  251A  118A   	fcall	_getAD
  2584  0411  1283               	bcf	3,5	;RP0=0, select bank0
  2585  0412  1303               	bcf	3,6	;RP1=0, select bank0
  2586  0413  00E4               	movwf	??_getPIR_AD+1
  2587  0414  0864               	movf	??_getPIR_AD+1,w
  2588  0415  1683               	bsf	3,5	;RP0=1, select bank1
  2589  0416  1303               	bcf	3,6	;RP1=0, select bank1
  2590  0417  00A2               	movwf	(__PIR^(0+128)+2)
  2591                           
  2592                           ;PIR_B1.c: 228: _PIR.VRAD = _PIR.ADRES / 25;
  2593  0418  3019               	movlw	25
  2594  0419  1283               	bcf	3,5	;RP0=0, select bank0
  2595  041A  1303               	bcf	3,6	;RP1=0, select bank0
  2596  041B  00DA               	movwf	___awdiv@divisor
  2597  041C  3000               	movlw	0
  2598  041D  00DB               	movwf	___awdiv@divisor+1
  2599  041E  1683               	bsf	3,5	;RP0=1, select bank1
  2600  041F  1303               	bcf	3,6	;RP1=0, select bank1
  2601  0420  0822               	movf	(__PIR^(0+128)+2),w
  2602  0421  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0422  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0423  00E3               	movwf	??_getPIR_AD
  2605  0424  01E4               	clrf	??_getPIR_AD+1
  2606  0425  0863               	movf	??_getPIR_AD,w
  2607  0426  00DC               	movwf	___awdiv@dividend
  2608  0427  0864               	movf	??_getPIR_AD+1,w
  2609  0428  00DD               	movwf	___awdiv@dividend+1
  2610  0429  158A  26CC  118A   	fcall	___awdiv
  2611  042C  1283               	bcf	3,5	;RP0=0, select bank0
  2612  042D  1303               	bcf	3,6	;RP1=0, select bank0
  2613  042E  085A               	movf	?___awdiv,w
  2614  042F  00E5               	movwf	??_getPIR_AD+2
  2615  0430  0865               	movf	??_getPIR_AD+2,w
  2616  0431  1683               	bsf	3,5	;RP0=1, select bank1
  2617  0432  1303               	bcf	3,6	;RP1=0, select bank1
  2618  0433  00A3               	movwf	(__PIR^(0+128)+3)
  2619                           
  2620                           ;PIR_B1.c: 229: _PIR.VRAD1 = _PIR.ADRES;
  2621  0434  0822               	movf	(__PIR^(0+128)+2),w
  2622  0435  1283               	bcf	3,5	;RP0=0, select bank0
  2623  0436  1303               	bcf	3,6	;RP1=0, select bank0
  2624  0437  00E3               	movwf	??_getPIR_AD
  2625  0438  0863               	movf	??_getPIR_AD,w
  2626  0439  1683               	bsf	3,5	;RP0=1, select bank1
  2627  043A  1303               	bcf	3,6	;RP1=0, select bank1
  2628  043B  00A4               	movwf	(__PIR^(0+128)+4)
  2629                           
  2630                           ;PIR_B1.c: 230: _PIR.ADRES = getAD(channel2, 0x70);
  2631  043C  3070               	movlw	112
  2632  043D  1283               	bcf	3,5	;RP0=0, select bank0
  2633  043E  1303               	bcf	3,6	;RP1=0, select bank0
  2634  043F  00E3               	movwf	??_getPIR_AD
  2635  0440  0863               	movf	??_getPIR_AD,w
  2636  0441  00F4               	movwf	getAD@adcon1
  2637  0442  0862               	movf	getPIR_AD@channel2,w
  2638  0443  158A  251A  118A   	fcall	_getAD
  2639  0446  1283               	bcf	3,5	;RP0=0, select bank0
  2640  0447  1303               	bcf	3,6	;RP1=0, select bank0
  2641  0448  00E4               	movwf	??_getPIR_AD+1
  2642  0449  0864               	movf	??_getPIR_AD+1,w
  2643  044A  1683               	bsf	3,5	;RP0=1, select bank1
  2644  044B  1303               	bcf	3,6	;RP1=0, select bank1
  2645  044C  00A2               	movwf	(__PIR^(0+128)+2)
  2646                           
  2647                           ;PIR_B1.c: 231: _PIR.SignalAD = _PIR.ADRES;
  2648  044D  0822               	movf	(__PIR^(0+128)+2),w
  2649  044E  1283               	bcf	3,5	;RP0=0, select bank0
  2650  044F  1303               	bcf	3,6	;RP1=0, select bank0
  2651  0450  00E3               	movwf	??_getPIR_AD
  2652  0451  0863               	movf	??_getPIR_AD,w
  2653  0452  1683               	bsf	3,5	;RP0=1, select bank1
  2654  0453  1303               	bcf	3,6	;RP1=0, select bank1
  2655  0454  00A1               	movwf	(__PIR^(0+128)+1)
  2656                           
  2657                           ;PIR_B1.c: 233: if (_PIR.VRAD < 1) {
  2658  0455  08A3               	movf	(__PIR^(0+128)+3),f
  2659  0456  1D03               	skipz
  2660  0457  2C5A               	goto	l4936
  2661                           
  2662                           ;PIR_B1.c: 234: _PIR.CloseTimeValue = 5;
  2663  0458  3005               	movlw	5
  2664  0459  2C5F               	goto	L1
  2665  045A                     l4936:	
  2666                           ;PIR_B1.c: 235: } else if (_PIR.VRAD < 3) {
  2667                           
  2668  045A  3003               	movlw	3
  2669  045B  0223               	subwf	(__PIR^(0+128)+3),w
  2670  045C  1803               	skipnc
  2671  045D  2C62               	goto	l4940
  2672                           
  2673                           ;PIR_B1.c: 236: _PIR.CloseTimeValue = 60;
  2674  045E  303C               	movlw	60
  2675  045F                     L1:	
  2676  045F  00C7               	movwf	(__PIR^(0+128)+39)
  2677  0460  3000               	movlw	0
  2678  0461  2C7D               	goto	L5
  2679  0462                     l4940:	
  2680                           ;PIR_B1.c: 237: } else if (_PIR.VRAD < 5) {
  2681                           
  2682  0462  3005               	movlw	5
  2683  0463  0223               	subwf	(__PIR^(0+128)+3),w
  2684  0464  1803               	skipnc
  2685  0465  2C6A               	goto	l4944
  2686                           
  2687                           ;PIR_B1.c: 238: _PIR.CloseTimeValue = 300;
  2688  0466  302C               	movlw	44
  2689  0467  00C7               	movwf	(__PIR^(0+128)+39)
  2690  0468  3001               	movlw	1
  2691  0469  2C7D               	goto	L5
  2692  046A                     l4944:	
  2693                           ;PIR_B1.c: 239: } else if (_PIR.VRAD < 7) {
  2694                           
  2695  046A  3007               	movlw	7
  2696  046B  0223               	subwf	(__PIR^(0+128)+3),w
  2697  046C  1803               	skipnc
  2698  046D  2C72               	goto	l4948
  2699                           
  2700                           ;PIR_B1.c: 240: _PIR.CloseTimeValue = 600;
  2701  046E  3058               	movlw	88
  2702  046F  00C7               	movwf	(__PIR^(0+128)+39)
  2703  0470  3002               	movlw	2
  2704  0471  2C7D               	goto	L5
  2705  0472                     l4948:	
  2706                           ;PIR_B1.c: 241: } else if (_PIR.VRAD < 9) {
  2707                           
  2708  0472  3009               	movlw	9
  2709  0473  0223               	subwf	(__PIR^(0+128)+3),w
  2710  0474  1803               	skipnc
  2711  0475  2C7A               	goto	l4952
  2712                           
  2713                           ;PIR_B1.c: 242: _PIR.CloseTimeValue = 900;
  2714  0476  3084               	movlw	132
  2715  0477  00C7               	movwf	(__PIR^(0+128)+39)
  2716  0478  3003               	movlw	3
  2717  0479  2C7D               	goto	L5
  2718  047A                     l4952:	
  2719                           ;PIR_B1.c: 243: } else {
  2720                           
  2721                           
  2722                           ;PIR_B1.c: 244: _PIR.CloseTimeValue = 1200;
  2723  047A  30B0               	movlw	176
  2724  047B  00C7               	movwf	(__PIR^(0+128)+39)
  2725  047C  3004               	movlw	4
  2726  047D                     L5:	
  2727  047D  00C8               	movwf	(__PIR^(0+128)+40)
  2728                           
  2729                           ;PIR_B1.c: 245: }
  2730                           ;PIR_B1.c: 254: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2731  047E  0821               	movf	(__PIR^(0+128)+1),w
  2732  047F  1283               	bcf	3,5	;RP0=0, select bank0
  2733  0480  1303               	bcf	3,6	;RP1=0, select bank0
  2734  0481  00E3               	movwf	??_getPIR_AD
  2735  0482  1683               	bsf	3,5	;RP0=1, select bank1
  2736  0483  1303               	bcf	3,6	;RP1=0, select bank1
  2737  0484  0827               	movf	(__PIR^(0+128)+7),w
  2738  0485  3EA8               	addlw	(__PIR+8)& (0+255)
  2739  0486  0084               	movwf	4
  2740  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2741  0488  1303               	bcf	3,6	;RP1=0, select bank0
  2742  0489  0863               	movf	??_getPIR_AD,w
  2743  048A  1383               	bcf	3,7	;select IRP bank1
  2744  048B  0080               	movwf	0
  2745                           
  2746                           ;PIR_B1.c: 255: for (i = 0; i < 10; i++) {
  2747  048C  01E8               	clrf	getPIR_AD@i
  2748  048D  300A               	movlw	10
  2749  048E  0268               	subwf	getPIR_AD@i,w
  2750  048F  1803               	btfsc	3,0
  2751  0490  2CAD               	goto	l4968
  2752  0491                     l4962:	
  2753                           
  2754                           ;PIR_B1.c: 256: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2755  0491  0868               	movf	getPIR_AD@i,w
  2756  0492  3EA8               	addlw	(__PIR+8)& (0+255)
  2757  0493  0084               	movwf	4
  2758  0494  0800               	movf	0,w
  2759  0495  00E3               	movwf	??_getPIR_AD
  2760  0496  01E4               	clrf	??_getPIR_AD+1
  2761  0497  0863               	movf	??_getPIR_AD,w
  2762  0498  1683               	bsf	3,5	;RP0=1, select bank1
  2763  0499  1303               	bcf	3,6	;RP1=0, select bank1
  2764  049A  07B2               	addwf	(__PIR^(0+128)+18),f
  2765  049B  1803               	skipnc
  2766  049C  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2767  049D  1283               	bcf	3,5	;RP0=0, select bank0
  2768  049E  1303               	bcf	3,6	;RP1=0, select bank0
  2769  049F  0864               	movf	??_getPIR_AD+1,w
  2770  04A0  1683               	bsf	3,5	;RP0=1, select bank1
  2771  04A1  1303               	bcf	3,6	;RP1=0, select bank1
  2772  04A2  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2773  04A3  3001               	movlw	1
  2774  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  2775  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  2776  04A6  00E3               	movwf	??_getPIR_AD
  2777  04A7  0863               	movf	??_getPIR_AD,w
  2778  04A8  07E8               	addwf	getPIR_AD@i,f
  2779  04A9  300A               	movlw	10
  2780  04AA  0268               	subwf	getPIR_AD@i,w
  2781  04AB  1C03               	skipc
  2782  04AC  2C91               	goto	l4962
  2783  04AD                     l4968:	
  2784                           
  2785                           ;PIR_B1.c: 257: }
  2786                           ;PIR_B1.c: 258: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2787  04AD  300A               	movlw	10
  2788  04AE  00DA               	movwf	___lwdiv@divisor
  2789  04AF  3000               	movlw	0
  2790  04B0  00DB               	movwf	___lwdiv@divisor+1
  2791  04B1  1683               	bsf	3,5	;RP0=1, select bank1
  2792  04B2  1303               	bcf	3,6	;RP1=0, select bank1
  2793  04B3  0833               	movf	((__PIR+1)^(0+128)+18),w
  2794  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  2795  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  2796  04B6  01DD               	clrf	___lwdiv@dividend+1
  2797  04B7  07DD               	addwf	___lwdiv@dividend+1,f
  2798  04B8  1683               	bsf	3,5	;RP0=1, select bank1
  2799  04B9  1303               	bcf	3,6	;RP1=0, select bank1
  2800  04BA  0832               	movf	(__PIR^(0+128)+18),w
  2801  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  2802  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  2803  04BD  01DC               	clrf	___lwdiv@dividend
  2804  04BE  07DC               	addwf	___lwdiv@dividend,f
  2805  04BF  158A  264A  118A   	fcall	___lwdiv
  2806  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  2807  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  2808  04C4  085A               	movf	?___lwdiv,w
  2809  04C5  00E3               	movwf	??_getPIR_AD
  2810  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  2811  04C7  1303               	bcf	3,6	;RP1=0, select bank1
  2812  04C8  0834               	movf	(__PIR^(0+128)+20),w
  2813  04C9  3EB5               	addlw	(__PIR+21)& (0+255)
  2814  04CA  0084               	movwf	4
  2815  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2816  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  2817  04CD  0863               	movf	??_getPIR_AD,w
  2818  04CE  1383               	bcf	3,7	;select IRP bank1
  2819  04CF  0080               	movwf	0
  2820                           
  2821                           ;PIR_B1.c: 259: _PIR.TenAverageValue = 0;
  2822  04D0  1683               	bsf	3,5	;RP0=1, select bank1
  2823  04D1  1303               	bcf	3,6	;RP1=0, select bank1
  2824  04D2  01B2               	clrf	(__PIR^(0+128)+18)
  2825  04D3  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2826                           
  2827                           ;PIR_B1.c: 261: for (i = 0; i <= 9; i++) {
  2828  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  2829  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  2830  04D6  01E8               	clrf	getPIR_AD@i
  2831  04D7  300A               	movlw	10
  2832  04D8  0268               	subwf	getPIR_AD@i,w
  2833  04D9  1803               	btfsc	3,0
  2834  04DA  2CF7               	goto	l4984
  2835  04DB                     l4978:	
  2836                           
  2837                           ;PIR_B1.c: 262: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2838  04DB  0868               	movf	getPIR_AD@i,w
  2839  04DC  3EB5               	addlw	(__PIR+21)& (0+255)
  2840  04DD  0084               	movwf	4
  2841  04DE  0800               	movf	0,w
  2842  04DF  00E3               	movwf	??_getPIR_AD
  2843  04E0  01E4               	clrf	??_getPIR_AD+1
  2844  04E1  0863               	movf	??_getPIR_AD,w
  2845  04E2  1683               	bsf	3,5	;RP0=1, select bank1
  2846  04E3  1303               	bcf	3,6	;RP1=0, select bank1
  2847  04E4  07BF               	addwf	(__PIR^(0+128)+31),f
  2848  04E5  1803               	skipnc
  2849  04E6  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2850  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  2851  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  2852  04E9  0864               	movf	??_getPIR_AD+1,w
  2853  04EA  1683               	bsf	3,5	;RP0=1, select bank1
  2854  04EB  1303               	bcf	3,6	;RP1=0, select bank1
  2855  04EC  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2856  04ED  3001               	movlw	1
  2857  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  2858  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  2859  04F0  00E3               	movwf	??_getPIR_AD
  2860  04F1  0863               	movf	??_getPIR_AD,w
  2861  04F2  07E8               	addwf	getPIR_AD@i,f
  2862  04F3  300A               	movlw	10
  2863  04F4  0268               	subwf	getPIR_AD@i,w
  2864  04F5  1C03               	skipc
  2865  04F6  2CDB               	goto	l4978
  2866  04F7                     l4984:	
  2867                           
  2868                           ;PIR_B1.c: 263: }
  2869                           ;PIR_B1.c: 264: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2870  04F7  300A               	movlw	10
  2871  04F8  00DA               	movwf	___lwdiv@divisor
  2872  04F9  3000               	movlw	0
  2873  04FA  00DB               	movwf	___lwdiv@divisor+1
  2874  04FB  1683               	bsf	3,5	;RP0=1, select bank1
  2875  04FC  1303               	bcf	3,6	;RP1=0, select bank1
  2876  04FD  0840               	movf	((__PIR+1)^(0+128)+31),w
  2877  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  2878  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  2879  0500  01DD               	clrf	___lwdiv@dividend+1
  2880  0501  07DD               	addwf	___lwdiv@dividend+1,f
  2881  0502  1683               	bsf	3,5	;RP0=1, select bank1
  2882  0503  1303               	bcf	3,6	;RP1=0, select bank1
  2883  0504  083F               	movf	(__PIR^(0+128)+31),w
  2884  0505  1283               	bcf	3,5	;RP0=0, select bank0
  2885  0506  1303               	bcf	3,6	;RP1=0, select bank0
  2886  0507  01DC               	clrf	___lwdiv@dividend
  2887  0508  07DC               	addwf	___lwdiv@dividend,f
  2888  0509  158A  264A  118A   	fcall	___lwdiv
  2889  050C  1283               	bcf	3,5	;RP0=0, select bank0
  2890  050D  1303               	bcf	3,6	;RP1=0, select bank0
  2891  050E  085A               	movf	?___lwdiv,w
  2892  050F  00E3               	movwf	??_getPIR_AD
  2893  0510  0863               	movf	??_getPIR_AD,w
  2894  0511  1683               	bsf	3,5	;RP0=1, select bank1
  2895  0512  1303               	bcf	3,6	;RP1=0, select bank1
  2896  0513  00A6               	movwf	(__PIR^(0+128)+6)
  2897                           
  2898                           ;PIR_B1.c: 265: _PIR.HundredAverageValue = 0;
  2899  0514  01BF               	clrf	(__PIR^(0+128)+31)
  2900  0515  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2901                           
  2902                           ;PIR_B1.c: 267: if (_PIR.TenCount < 10) {
  2903  0516  300A               	movlw	10
  2904  0517  0227               	subwf	(__PIR^(0+128)+7),w
  2905  0518  1803               	skipnc
  2906  0519  2D23               	goto	l4992
  2907                           
  2908                           ;PIR_B1.c: 268: _PIR.TenCount++;
  2909  051A  3001               	movlw	1
  2910  051B  1283               	bcf	3,5	;RP0=0, select bank0
  2911  051C  1303               	bcf	3,6	;RP1=0, select bank0
  2912  051D  00E3               	movwf	??_getPIR_AD
  2913  051E  0863               	movf	??_getPIR_AD,w
  2914  051F  1683               	bsf	3,5	;RP0=1, select bank1
  2915  0520  1303               	bcf	3,6	;RP1=0, select bank1
  2916  0521  07A7               	addwf	(__PIR^(0+128)+7),f
  2917                           
  2918                           ;PIR_B1.c: 269: } else {
  2919  0522  0008               	return
  2920  0523                     l4992:	
  2921                           
  2922                           ;PIR_B1.c: 270: _PIR.TenCount = 0;
  2923  0523  01A7               	clrf	(__PIR^(0+128)+7)
  2924                           
  2925                           ;PIR_B1.c: 271: if (_PIR.HundreCount < 10)
  2926  0524  300A               	movlw	10
  2927  0525  0234               	subwf	(__PIR^(0+128)+20),w
  2928  0526  1803               	skipnc
  2929  0527  2D31               	goto	l4998
  2930                           
  2931                           ;PIR_B1.c: 272: _PIR.HundreCount++;
  2932  0528  3001               	movlw	1
  2933  0529  1283               	bcf	3,5	;RP0=0, select bank0
  2934  052A  1303               	bcf	3,6	;RP1=0, select bank0
  2935  052B  00E3               	movwf	??_getPIR_AD
  2936  052C  0863               	movf	??_getPIR_AD,w
  2937  052D  1683               	bsf	3,5	;RP0=1, select bank1
  2938  052E  1303               	bcf	3,6	;RP1=0, select bank1
  2939  052F  07B4               	addwf	(__PIR^(0+128)+20),f
  2940  0530  0008               	return
  2941  0531                     l4998:	
  2942                           
  2943                           ;PIR_B1.c: 273: else
  2944                           ;PIR_B1.c: 274: _PIR.HundreCount = 0;
  2945  0531  01B4               	clrf	(__PIR^(0+128)+20)
  2946  0532  0008               	return
  2947  0533                     __end_of_getPIR_AD:	
  2948                           
  2949                           	psect	text5
  2950  06CA                     __ptext5:	
  2951 ;; *************** function _getLoad_AD *****************
  2952 ;; Defined at:
  2953 ;;		line 15 in file "../src/OverLoad_B1.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;  channel         1    wreg     unsigned char 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  channel         1    2[BANK0 ] unsigned char 
  2958 ;;  i               1    5[BANK0 ] unsigned char 
  2959 ;;  j               1    4[BANK0 ] unsigned char 
  2960 ;;  k               1    3[BANK0 ] unsigned char 
  2961 ;; Return value:  Size  Location     Type
  2962 ;;		None               void
  2963 ;; Registers used:
  2964 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2970 ;;      Params:         0       0       0       0
  2971 ;;      Locals:         0       4       0       0
  2972 ;;      Temps:          0       2       0       0
  2973 ;;      Totals:         0       6       0       0
  2974 ;;Total ram usage:        6 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:    4
  2977 ;; This function calls:
  2978 ;;		_getAD
  2979 ;; This function is called by:
  2980 ;;		_main
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           
  2985                           ;psect for function _getLoad_AD
  2986  06CA                     _getLoad_AD:	
  2987                           
  2988                           ;incstack = 0
  2989                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2990                           ;getLoad_AD@channel stored from wreg
  2991  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  2992  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  2993  06CC  00DC               	movwf	getLoad_AD@channel
  2994                           
  2995                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  2996  06CD  01DF               	clrf	getLoad_AD@i
  2997  06CE  01DE               	clrf	getLoad_AD@j
  2998  06CF  01DD               	clrf	getLoad_AD@k
  2999                           
  3000                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3001  06D0  1683               	bsf	3,5	;RP0=1, select bank1
  3002  06D1  1303               	bcf	3,6	;RP1=0, select bank1
  3003  06D2  1E4E               	btfss	_Load^(0+128),4
  3004  06D3  0008               	return
  3005                           
  3006                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0x73);
  3007  06D4  3073               	movlw	115
  3008  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  3009  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  3010  06D7  00DA               	movwf	??_getLoad_AD
  3011  06D8  085A               	movf	??_getLoad_AD,w
  3012  06D9  00F4               	movwf	getAD@adcon1
  3013  06DA  085C               	movf	getLoad_AD@channel,w
  3014  06DB  158A  251A  118A   	fcall	_getAD
  3015  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  3016  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  3017  06E0  00DB               	movwf	??_getLoad_AD+1
  3018  06E1  085B               	movf	??_getLoad_AD+1,w
  3019  06E2  1683               	bsf	3,5	;RP0=1, select bank1
  3020  06E3  1303               	bcf	3,6	;RP1=0, select bank1
  3021  06E4  00E3               	movwf	(_Load^(0+128)+21)
  3022                           
  3023                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3024  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  3025  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  3026  06E7  01DF               	clrf	getLoad_AD@i
  3027  06E8  3004               	movlw	4
  3028  06E9  025F               	subwf	getLoad_AD@i,w
  3029  06EA  1803               	btfsc	3,0
  3030  06EB  2F11               	goto	l4884
  3031  06EC                     l4872:	
  3032                           
  3033                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  3034  06EC  085F               	movf	getLoad_AD@i,w
  3035  06ED  3ED8               	addlw	(_Load+10)& (0+255)
  3036  06EE  0084               	movwf	4
  3037  06EF  1683               	bsf	3,5	;RP0=1, select bank1
  3038  06F0  1303               	bcf	3,6	;RP1=0, select bank1
  3039  06F1  0863               	movf	(_Load^(0+128)+21),w
  3040  06F2  1383               	bcf	3,7	;select IRP bank1
  3041  06F3  0200               	subwf	0,w
  3042  06F4  1803               	skipnc
  3043  06F5  2F08               	goto	l4880
  3044  06F6  1283               	bcf	3,5	;RP0=0, select bank0
  3045  06F7  1303               	bcf	3,6	;RP1=0, select bank0
  3046  06F8  08DE               	movf	getLoad_AD@j,f
  3047  06F9  1D03               	skipz
  3048  06FA  2F08               	goto	l4880
  3049                           
  3050                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  3051  06FB  1683               	bsf	3,5	;RP0=1, select bank1
  3052  06FC  1303               	bcf	3,6	;RP1=0, select bank1
  3053  06FD  0863               	movf	(_Load^(0+128)+21),w
  3054  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  3055  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  3056  0700  00DA               	movwf	??_getLoad_AD
  3057  0701  085F               	movf	getLoad_AD@i,w
  3058  0702  3ED8               	addlw	(_Load+10)& (0+255)
  3059  0703  0084               	movwf	4
  3060  0704  085A               	movf	??_getLoad_AD,w
  3061  0705  0080               	movwf	0
  3062                           
  3063                           ;OverLoad_B1.c: 24: j = 1;
  3064  0706  01DE               	clrf	getLoad_AD@j
  3065  0707  0ADE               	incf	getLoad_AD@j,f
  3066  0708                     l4880:	
  3067  0708  3001               	movlw	1
  3068  0709  1283               	bcf	3,5	;RP0=0, select bank0
  3069  070A  00DA               	movwf	??_getLoad_AD
  3070  070B  085A               	movf	??_getLoad_AD,w
  3071  070C  07DF               	addwf	getLoad_AD@i,f
  3072  070D  3004               	movlw	4
  3073  070E  025F               	subwf	getLoad_AD@i,w
  3074  070F  1C03               	skipc
  3075  0710  2EEC               	goto	l4872
  3076  0711                     l4884:	
  3077                           
  3078                           ;OverLoad_B1.c: 25: }
  3079                           ;OverLoad_B1.c: 26: }
  3080                           ;OverLoad_B1.c: 27: if (j == 0) {
  3081  0711  08DE               	movf	getLoad_AD@j,f
  3082  0712  1D03               	skipz
  3083  0713  0008               	return
  3084                           
  3085                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3086  0714  01DF               	clrf	getLoad_AD@i
  3087  0715                     L6:	
  3088  0715  3004               	movlw	4
  3089  0716  025F               	subwf	getLoad_AD@i,w
  3090  0717  1803               	btfsc	3,0
  3091  0718  0008               	return
  3092                           
  3093                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  3094  0719  085F               	movf	getLoad_AD@i,w
  3095  071A  3EDD               	addlw	(_Load+15)& (0+255)
  3096  071B  0084               	movwf	4
  3097  071C  1383               	bcf	3,7	;select IRP bank1
  3098  071D  0800               	movf	0,w
  3099  071E  1683               	bsf	3,5	;RP0=1, select bank1
  3100  071F  1303               	bcf	3,6	;RP1=0, select bank1
  3101  0720  0263               	subwf	(_Load^(0+128)+21),w
  3102  0721  1803               	skipnc
  3103  0722  2F35               	goto	l4900
  3104  0723  1283               	bcf	3,5	;RP0=0, select bank0
  3105  0724  1303               	bcf	3,6	;RP1=0, select bank0
  3106  0725  08DD               	movf	getLoad_AD@k,f
  3107  0726  1D03               	skipz
  3108  0727  2F35               	goto	l4900
  3109                           
  3110                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  3111  0728  1683               	bsf	3,5	;RP0=1, select bank1
  3112  0729  1303               	bcf	3,6	;RP1=0, select bank1
  3113  072A  0863               	movf	(_Load^(0+128)+21),w
  3114  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3115  072C  1303               	bcf	3,6	;RP1=0, select bank0
  3116  072D  00DA               	movwf	??_getLoad_AD
  3117  072E  085F               	movf	getLoad_AD@i,w
  3118  072F  3EDD               	addlw	(_Load+15)& (0+255)
  3119  0730  0084               	movwf	4
  3120  0731  085A               	movf	??_getLoad_AD,w
  3121  0732  0080               	movwf	0
  3122                           
  3123                           ;OverLoad_B1.c: 31: k = 1;
  3124  0733  01DD               	clrf	getLoad_AD@k
  3125  0734  0ADD               	incf	getLoad_AD@k,f
  3126  0735                     l4900:	
  3127  0735  3001               	movlw	1
  3128  0736  1283               	bcf	3,5	;RP0=0, select bank0
  3129  0737  00DA               	movwf	??_getLoad_AD
  3130  0738  085A               	movf	??_getLoad_AD,w
  3131  0739  07DF               	addwf	getLoad_AD@i,f
  3132  073A  2F15               	goto	L6
  3133  073B                     __end_of_getLoad_AD:	
  3134                           
  3135                           	psect	text6
  3136  0D7E                     __ptext6:	
  3137 ;; *************** function _getCDS_AD *****************
  3138 ;; Defined at:
  3139 ;;		line 48 in file "../src/CDS_B1.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;  channel1        1    wreg     unsigned char 
  3142 ;;  channel2        1    0[BANK0 ] unsigned char 
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;  channel1        1    5[BANK0 ] unsigned char 
  3145 ;;  j               1    4[BANK0 ] unsigned char 
  3146 ;;  i               1    3[BANK0 ] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;		None               void
  3149 ;; Registers used:
  3150 ;;		wreg, status,2, status,0, pclath, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3156 ;;      Params:         0       1       0       0
  3157 ;;      Locals:         0       3       0       0
  3158 ;;      Temps:          0       2       0       0
  3159 ;;      Totals:         0       6       0       0
  3160 ;;Total ram usage:        6 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    4
  3163 ;; This function calls:
  3164 ;;		_getAD
  3165 ;; This function is called by:
  3166 ;;		_main
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           
  3171                           ;psect for function _getCDS_AD
  3172  0D7E                     _getCDS_AD:	
  3173                           
  3174                           ;incstack = 0
  3175                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3176                           ;getCDS_AD@channel1 stored from wreg
  3177  0D7E  1283               	bcf	3,5	;RP0=0, select bank0
  3178  0D7F  1303               	bcf	3,6	;RP1=0, select bank0
  3179  0D80  00DF               	movwf	getCDS_AD@channel1
  3180                           
  3181                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3182  0D81  01DD               	clrf	getCDS_AD@i
  3183  0D82  01DE               	clrf	getCDS_AD@j
  3184                           
  3185                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3186  0D83  1DAB               	btfss	__CDS,3
  3187  0D84  0008               	return
  3188                           
  3189                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3190  0D85  14AB               	bsf	__CDS,1
  3191                           
  3192                           ;CDS_B1.c: 52: _CDS.ADRES = getAD(channel1, 0x70);
  3193  0D86  3070               	movlw	112
  3194  0D87  00DB               	movwf	??_getCDS_AD
  3195  0D88  085B               	movf	??_getCDS_AD,w
  3196  0D89  00F4               	movwf	getAD@adcon1
  3197  0D8A  085F               	movf	getCDS_AD@channel1,w
  3198  0D8B  158A  251A  158A   	fcall	_getAD
  3199  0D8E  1283               	bcf	3,5	;RP0=0, select bank0
  3200  0D8F  1303               	bcf	3,6	;RP1=0, select bank0
  3201  0D90  00DC               	movwf	??_getCDS_AD+1
  3202  0D91  085C               	movf	??_getCDS_AD+1,w
  3203  0D92  00AF               	movwf	__CDS+4
  3204                           
  3205                           ;CDS_B1.c: 53: _CDS.VRAD = _CDS.ADRES;
  3206  0D93  082F               	movf	__CDS+4,w
  3207  0D94  00DB               	movwf	??_getCDS_AD
  3208  0D95  085B               	movf	??_getCDS_AD,w
  3209  0D96  00AD               	movwf	__CDS+2
  3210                           
  3211                           ;CDS_B1.c: 54: _CDS.ADRES = getAD(channel2, 0x70);
  3212  0D97  3070               	movlw	112
  3213  0D98  00DB               	movwf	??_getCDS_AD
  3214  0D99  085B               	movf	??_getCDS_AD,w
  3215  0D9A  00F4               	movwf	getAD@adcon1
  3216  0D9B  085A               	movf	getCDS_AD@channel2,w
  3217  0D9C  158A  251A         	fcall	_getAD
  3218  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  3219  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  3220  0DA0  00DC               	movwf	??_getCDS_AD+1
  3221  0DA1  085C               	movf	??_getCDS_AD+1,w
  3222  0DA2  00AF               	movwf	__CDS+4
  3223                           
  3224                           ;CDS_B1.c: 55: _CDS.SignalAD = _CDS.ADRES;
  3225  0DA3  082F               	movf	__CDS+4,w
  3226  0DA4  00DB               	movwf	??_getCDS_AD
  3227  0DA5  085B               	movf	??_getCDS_AD,w
  3228  0DA6  00AE               	movwf	__CDS+3
  3229  0DA7  0008               	return
  3230  0DA8                     __end_of_getCDS_AD:	
  3231                           
  3232                           	psect	text7
  3233  0D1A                     __ptext7:	
  3234 ;; *************** function _getAD *****************
  3235 ;; Defined at:
  3236 ;;		line 416 in file "../src/MCU_B1.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  adcon0          1    wreg     unsigned char 
  3239 ;;  adcon1          1    4[COMMON] unsigned char 
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;  adcon0          1    5[COMMON] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      unsigned char 
  3244 ;; Registers used:
  3245 ;;		wreg, status,2, status,0, pclath, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3251 ;;      Params:         1       0       0       0
  3252 ;;      Locals:         1       0       0       0
  3253 ;;      Temps:          0       0       0       0
  3254 ;;      Totals:         2       0       0       0
  3255 ;;Total ram usage:        2 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    3
  3258 ;; This function calls:
  3259 ;;		_Timeout_Counter
  3260 ;;		_set_TimeoutCleared
  3261 ;; This function is called by:
  3262 ;;		_getCDS_AD
  3263 ;;		_getLoad_AD
  3264 ;;		_getTemp_AD
  3265 ;;		_getPIR_AD
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           
  3270                           ;psect for function _getAD
  3271  0D1A                     _getAD:	
  3272                           
  3273                           ;incstack = 0
  3274                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3275                           ;getAD@adcon0 stored from wreg
  3276  0D1A  00F5               	movwf	getAD@adcon0
  3277                           
  3278                           ;MCU_B1.c: 417: ADCON0 = adcon0;
  3279  0D1B  0875               	movf	getAD@adcon0,w
  3280  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
  3281  0D1D  1303               	bcf	3,6	;RP1=0, select bank0
  3282  0D1E  009F               	movwf	31	;volatile
  3283                           
  3284                           ;MCU_B1.c: 418: ADCON1 = adcon1;
  3285  0D1F  0874               	movf	getAD@adcon1,w
  3286  0D20  1683               	bsf	3,5	;RP0=1, select bank1
  3287  0D21  1303               	bcf	3,6	;RP1=0, select bank1
  3288  0D22  009F               	movwf	31	;volatile
  3289                           
  3290                           ;MCU_B1.c: 419: GO_nDONE = 1;
  3291  0D23  1283               	bcf	3,5	;RP0=0, select bank0
  3292  0D24  1303               	bcf	3,6	;RP1=0, select bank0
  3293  0D25  149F               	bsf	31,1	;volatile
  3294                           
  3295                           ;MCU_B1.c: 420: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3296  0D26  2D2A               	goto	l4606
  3297  0D27                     l4604:	
  3298                           
  3299                           ;MCU_B1.c: 421: Timeout_Counter();
  3300  0D27  158A  2447  158A   	fcall	_Timeout_Counter
  3301  0D2A                     l4606:	
  3302  0D2A  1283               	bcf	3,5	;RP0=0, select bank0
  3303  0D2B  1303               	bcf	3,6	;RP1=0, select bank0
  3304  0D2C  1C9F               	btfss	31,1	;volatile
  3305  0D2D  2D30               	goto	l4610
  3306  0D2E  1D23               	btfss	_myMain+3,2
  3307  0D2F  2D27               	goto	l4604
  3308  0D30                     l4610:	
  3309                           
  3310                           ;MCU_B1.c: 422: };
  3311                           ;MCU_B1.c: 423: set_TimeoutCleared();
  3312  0D30  158A  234A         	fcall	_set_TimeoutCleared
  3313                           
  3314                           ;MCU_B1.c: 424: return ADRES;
  3315  0D32  1283               	bcf	3,5	;RP0=0, select bank0
  3316  0D33  1303               	bcf	3,6	;RP1=0, select bank0
  3317  0D34  081E               	movf	30,w	;volatile
  3318  0D35  0008               	return
  3319  0D36                     __end_of_getAD:	
  3320                           
  3321                           	psect	text8
  3322  0B4A                     __ptext8:	
  3323 ;; *************** function _set_TimeoutCleared *****************
  3324 ;; Defined at:
  3325 ;;		line 282 in file "../src/Main_B1.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;		None
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;		None
  3330 ;; Return value:  Size  Location     Type
  3331 ;;		None               void
  3332 ;; Registers used:
  3333 ;;		status,2
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3339 ;;      Params:         0       0       0       0
  3340 ;;      Locals:         0       0       0       0
  3341 ;;      Temps:          0       0       0       0
  3342 ;;      Totals:         0       0       0       0
  3343 ;;Total ram usage:        0 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; Hardware stack levels required when called:    2
  3346 ;; This function calls:
  3347 ;;		Nothing
  3348 ;; This function is called by:
  3349 ;;		_getAD
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           
  3354                           ;psect for function _set_TimeoutCleared
  3355  0B4A                     _set_TimeoutCleared:	
  3356                           
  3357                           ;Main_B1.c: 283: myMain.Timeout = 0;
  3358                           
  3359                           ;incstack = 0
  3360                           ; Regs used in _set_TimeoutCleared: [status,2]
  3361  0B4A  1283               	bcf	3,5	;RP0=0, select bank0
  3362  0B4B  1303               	bcf	3,6	;RP1=0, select bank0
  3363  0B4C  1123               	bcf	_myMain+3,2
  3364                           
  3365                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  3366  0B4D  01A4               	clrf	_myMain+4
  3367  0B4E  01A5               	clrf	_myMain+5
  3368  0B4F  0008               	return
  3369  0B50                     __end_of_set_TimeoutCleared:	
  3370                           
  3371                           	psect	text9
  3372  0C47                     __ptext9:	
  3373 ;; *************** function _Timeout_Counter *****************
  3374 ;; Defined at:
  3375 ;;		line 273 in file "../src/Main_B1.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;		None
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;		None
  3380 ;; Return value:  Size  Location     Type
  3381 ;;		None               void
  3382 ;; Registers used:
  3383 ;;		wreg, status,2
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3389 ;;      Params:         0       0       0       0
  3390 ;;      Locals:         0       0       0       0
  3391 ;;      Temps:          0       0       0       0
  3392 ;;      Totals:         0       0       0       0
  3393 ;;Total ram usage:        0 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    2
  3396 ;; This function calls:
  3397 ;;		Nothing
  3398 ;; This function is called by:
  3399 ;;		_getAD
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           
  3404                           ;psect for function _Timeout_Counter
  3405  0C47                     _Timeout_Counter:	
  3406                           
  3407                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  3408                           
  3409                           ;incstack = 0
  3410                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3411  0C47  3001               	movlw	1
  3412  0C48  1283               	bcf	3,5	;RP0=0, select bank0
  3413  0C49  1303               	bcf	3,6	;RP1=0, select bank0
  3414  0C4A  07A4               	addwf	_myMain+4,f
  3415  0C4B  1803               	skipnc
  3416  0C4C  0AA5               	incf	_myMain+5,f
  3417  0C4D  3000               	movlw	0
  3418  0C4E  07A5               	addwf	_myMain+5,f
  3419                           
  3420                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  3421  0C4F  3061               	movlw	97
  3422  0C50  0625               	xorwf	_myMain+5,w
  3423  0C51  1D03               	skipz
  3424  0C52  2C55               	goto	u5195
  3425  0C53  30A8               	movlw	168
  3426  0C54  0624               	xorwf	_myMain+4,w
  3427  0C55                     u5195:	
  3428  0C55  1D03               	skipz
  3429  0C56  0008               	return
  3430                           
  3431                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  3432  0C57  01A4               	clrf	_myMain+4
  3433  0C58  01A5               	clrf	_myMain+5
  3434                           
  3435                           ;Main_B1.c: 277: myMain.Timeout = 1;
  3436  0C59  1523               	bsf	_myMain+3,2
  3437  0C5A  0008               	return
  3438  0C5B                     __end_of_Timeout_Counter:	
  3439                           
  3440                           	psect	text10
  3441  0C24                     __ptext10:	
  3442 ;; *************** function _WDT_Main *****************
  3443 ;; Defined at:
  3444 ;;		line 1087 in file "../src/MCU_B1.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;		None
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;		None
  3449 ;; Return value:  Size  Location     Type
  3450 ;;		None               void
  3451 ;; Registers used:
  3452 ;;		wreg, status,2, status,0, pclath, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3458 ;;      Params:         0       0       0       0
  3459 ;;      Locals:         0       0       0       0
  3460 ;;      Temps:          1       0       0       0
  3461 ;;      Totals:         1       0       0       0
  3462 ;;Total ram usage:        1 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    3
  3465 ;; This function calls:
  3466 ;;		_WDT_Clearing
  3467 ;; This function is called by:
  3468 ;;		_main
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472                           
  3473                           ;psect for function _WDT_Main
  3474  0C24                     _WDT_Main:	
  3475                           
  3476                           ;MCU_B1.c: 1088: if (WDT.Enable == 1) {
  3477                           
  3478                           ;incstack = 0
  3479                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3480  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  3481  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  3482  0C26  1C37               	btfss	_WDT,0
  3483  0C27  0008               	return
  3484                           
  3485                           ;MCU_B1.c: 1089: if (WDT.Timer-- > 0) {
  3486  0C28  3001               	movlw	1
  3487  0C29  02B8               	subwf	_WDT+1,f
  3488  0C2A  0838               	movf	_WDT+1,w
  3489  0C2B  3AFF               	xorlw	255
  3490  0C2C  1903               	skipnz
  3491  0C2D  0008               	return
  3492                           
  3493                           ;MCU_B1.c: 1090: WDT.Timer = 100;
  3494  0C2E  3064               	movlw	100
  3495  0C2F  00F4               	movwf	??_WDT_Main
  3496  0C30  0874               	movf	??_WDT_Main,w
  3497  0C31  00B8               	movwf	_WDT+1
  3498                           
  3499                           ;MCU_B1.c: 1091: WDT_Clearing();
  3500  0C32  118A  2002         	fcall	_WDT_Clearing
  3501  0C34  0008               	return
  3502  0C35                     __end_of_WDT_Main:	
  3503                           
  3504                           	psect	text11
  3505  0002                     __ptext11:	
  3506 ;; *************** function _WDT_Clearing *****************
  3507 ;; Defined at:
  3508 ;;		line 1097 in file "../src/MCU_B1.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;		None
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;		None
  3513 ;; Return value:  Size  Location     Type
  3514 ;;		None               void
  3515 ;; Registers used:
  3516 ;;		None
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3522 ;;      Params:         0       0       0       0
  3523 ;;      Locals:         0       0       0       0
  3524 ;;      Temps:          0       0       0       0
  3525 ;;      Totals:         0       0       0       0
  3526 ;;Total ram usage:        0 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    2
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_WDT_Main
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           
  3537                           ;psect for function _WDT_Clearing
  3538  0002                     _WDT_Clearing:	
  3539                           
  3540                           ;incstack = 0
  3541                           ; Regs used in _WDT_Clearing: []
  3542  0002  0064               	clrwdt	;# 
  3543  0003  0008               	return
  3544  0004                     __end_of_WDT_Clearing:	
  3545                           
  3546                           	psect	text12
  3547  0B2A                     __ptext12:	
  3548 ;; *************** function _Temp_Main *****************
  3549 ;; Defined at:
  3550 ;;		line 49 in file "../src/OverTemperature_B1.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;		None
  3555 ;; Return value:  Size  Location     Type
  3556 ;;		None               void
  3557 ;; Registers used:
  3558 ;;		wreg, status,2, status,0, pclath, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3564 ;;      Params:         0       0       0       0
  3565 ;;      Locals:         0       0       0       0
  3566 ;;      Temps:          0       0       0       0
  3567 ;;      Totals:         0       0       0       0
  3568 ;;Total ram usage:        0 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    4
  3571 ;; This function calls:
  3572 ;;		_setTemp_Main
  3573 ;; This function is called by:
  3574 ;;		_main
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           
  3579                           ;psect for function _Temp_Main
  3580  0B2A                     _Temp_Main:	
  3581                           
  3582                           ;OverTemperature_B1.c: 51: setTemp_Main();
  3583                           
  3584                           ;incstack = 0
  3585                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3586  0B2A  118A  25CE         	fcall	_setTemp_Main
  3587  0B2C  0008               	return
  3588  0B2D                     __end_of_Temp_Main:	
  3589                           
  3590                           	psect	text13
  3591  05CE                     __ptext13:	
  3592 ;; *************** function _setTemp_Main *****************
  3593 ;; Defined at:
  3594 ;;		line 56 in file "../src/OverTemperature_B1.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;		None
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;  error           1    8[BANK0 ] unsigned char 
  3599 ;; Return value:  Size  Location     Type
  3600 ;;		None               void
  3601 ;; Registers used:
  3602 ;;		wreg, status,2, status,0, pclath, cstack
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3608 ;;      Params:         0       0       0       0
  3609 ;;      Locals:         0       1       0       0
  3610 ;;      Temps:          1       0       0       0
  3611 ;;      Totals:         1       1       0       0
  3612 ;;Total ram usage:        2 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    3
  3615 ;; This function calls:
  3616 ;;		___awdiv
  3617 ;;		_getMain_All_Error_Status
  3618 ;;		_getMain_All_LightsStatus
  3619 ;; This function is called by:
  3620 ;;		_Temp_Main
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           
  3625                           ;psect for function _setTemp_Main
  3626  05CE                     _setTemp_Main:	
  3627                           
  3628                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  3629                           
  3630                           ;incstack = 0
  3631                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3632  05CE  3000               	movlw	0
  3633  05CF  158A  260C  118A   	fcall	_getMain_All_Error_Status
  3634  05D2  00F5               	movwf	??_setTemp_Main
  3635  05D3  0875               	movf	??_setTemp_Main,w
  3636  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  3637  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  3638  05D6  00E2               	movwf	setTemp_Main@error
  3639                           
  3640                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  3641  05D7  1C3B               	btfss	_Temp,0
  3642  05D8  2E50               	goto	l849
  3643                           
  3644                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  3645  05D9  193B               	btfsc	_Temp,2
  3646  05DA  2DEC               	goto	l4698
  3647                           
  3648                           ;OverTemperature_B1.c: 66: Temp.Time++;
  3649  05DB  3001               	movlw	1
  3650  05DC  07BC               	addwf	_Temp+1,f
  3651  05DD  1803               	skipnc
  3652  05DE  0ABD               	incf	_Temp+2,f
  3653  05DF  3000               	movlw	0
  3654  05E0  07BD               	addwf	_Temp+2,f
  3655                           
  3656                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  3657  05E1  3000               	movlw	0
  3658  05E2  023D               	subwf	_Temp+2,w
  3659  05E3  30FA               	movlw	250
  3660  05E4  1903               	skipnz
  3661  05E5  023C               	subwf	_Temp+1,w
  3662  05E6  1C03               	skipc
  3663  05E7  0008               	return
  3664                           
  3665                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  3666  05E8  01BC               	clrf	_Temp+1
  3667  05E9  01BD               	clrf	_Temp+2
  3668                           
  3669                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  3670  05EA  153B               	bsf	_Temp,2
  3671                           
  3672                           ;OverTemperature_B1.c: 70: }
  3673                           ;OverTemperature_B1.c: 71: } else {
  3674  05EB  0008               	return
  3675  05EC                     l4698:	
  3676                           
  3677                           ;OverTemperature_B1.c: 72: Temp.Time++;
  3678  05EC  3001               	movlw	1
  3679  05ED  07BC               	addwf	_Temp+1,f
  3680  05EE  1803               	skipnc
  3681  05EF  0ABD               	incf	_Temp+2,f
  3682  05F0  3000               	movlw	0
  3683  05F1  07BD               	addwf	_Temp+2,f
  3684                           
  3685                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  3686  05F2  3000               	movlw	0
  3687  05F3  023D               	subwf	_Temp+2,w
  3688  05F4  3002               	movlw	2
  3689  05F5  1903               	skipnz
  3690  05F6  023C               	subwf	_Temp+1,w
  3691  05F7  1C03               	skipc
  3692  05F8  0008               	return
  3693                           
  3694                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  3695  05F9  01BC               	clrf	_Temp+1
  3696  05FA  01BD               	clrf	_Temp+2
  3697                           
  3698                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  3699  05FB  0842               	movf	_Temp+7,w
  3700  05FC  1903               	btfsc	3,2
  3701  05FD  2E4D               	goto	l854
  3702  05FE  0843               	movf	_Temp+8,w
  3703  05FF  1903               	btfsc	3,2
  3704  0600  2E4D               	goto	l854
  3705                           
  3706                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  3707  0601  113B               	bcf	_Temp,2
  3708                           
  3709                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3710  0602  3002               	movlw	2
  3711  0603  00DA               	movwf	___awdiv@divisor
  3712  0604  3000               	movlw	0
  3713  0605  00DB               	movwf	___awdiv@divisor+1
  3714  0606  0842               	movf	_Temp+7,w
  3715  0607  0743               	addwf	_Temp+8,w
  3716  0608  00DC               	movwf	___awdiv@dividend
  3717  0609  01DD               	clrf	___awdiv@dividend+1
  3718  060A  0DDD               	rlf	___awdiv@dividend+1,f
  3719  060B  158A  26CC  118A   	fcall	___awdiv
  3720  060E  1283               	bcf	3,5	;RP0=0, select bank0
  3721  060F  1303               	bcf	3,6	;RP1=0, select bank0
  3722  0610  085A               	movf	?___awdiv,w
  3723  0611  00F5               	movwf	??_setTemp_Main
  3724  0612  0875               	movf	??_setTemp_Main,w
  3725  0613  00C1               	movwf	_Temp+6
  3726                           
  3727                           ;OverTemperature_B1.c: 81: if (getMain_All_LightsStatus() == 1) {
  3728  0614  158A  2376  118A   	fcall	_getMain_All_LightsStatus
  3729  0617  3A01               	xorlw	1
  3730  0618  1D03               	skipz
  3731  0619  2E22               	goto	l4714
  3732                           
  3733                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 0x85;
  3734  061A  3085               	movlw	133
  3735  061B  00F5               	movwf	??_setTemp_Main
  3736  061C  0875               	movf	??_setTemp_Main,w
  3737  061D  1283               	bcf	3,5	;RP0=0, select bank0
  3738  061E  1303               	bcf	3,6	;RP1=0, select bank0
  3739  061F  00C5               	movwf	_Temp+10
  3740                           
  3741                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 0x70;
  3742  0620  3070               	movlw	112
  3743  0621  2E29               	goto	L7
  3744  0622                     l4714:	
  3745                           ;OverTemperature_B1.c: 84: } else {
  3746                           
  3747                           
  3748                           ;OverTemperature_B1.c: 85: Temp.SafeValue = 0x4f;
  3749  0622  304F               	movlw	79
  3750  0623  00F5               	movwf	??_setTemp_Main
  3751  0624  0875               	movf	??_setTemp_Main,w
  3752  0625  1283               	bcf	3,5	;RP0=0, select bank0
  3753  0626  1303               	bcf	3,6	;RP1=0, select bank0
  3754  0627  00C5               	movwf	_Temp+10
  3755                           
  3756                           ;OverTemperature_B1.c: 86: Temp.DangerValue = 0x40;
  3757  0628  3040               	movlw	64
  3758  0629                     L7:	
  3759  0629  00F5               	movwf	??_setTemp_Main
  3760  062A  0875               	movf	??_setTemp_Main,w
  3761  062B  00C6               	movwf	_Temp+11
  3762                           
  3763                           ;OverTemperature_B1.c: 87: }
  3764                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  3765  062C  1CBB               	btfss	_Temp,1
  3766  062D  2E3D               	goto	l4730
  3767                           
  3768                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  3769  062E  0845               	movf	_Temp+10,w
  3770  062F  0241               	subwf	_Temp+6,w
  3771  0630  1C03               	skipc
  3772  0631  2E4C               	goto	l4740
  3773                           
  3774                           ;OverTemperature_B1.c: 98: Temp.Count++;
  3775  0632  3001               	movlw	1
  3776  0633  00F5               	movwf	??_setTemp_Main
  3777  0634  0875               	movf	??_setTemp_Main,w
  3778  0635  07BE               	addwf	_Temp+3,f
  3779                           
  3780                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  3781  0636  3003               	movlw	3
  3782  0637  023E               	subwf	_Temp+3,w
  3783  0638  1C03               	skipc
  3784  0639  2E4D               	goto	l854
  3785                           
  3786                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  3787  063A  01BE               	clrf	_Temp+3
  3788                           
  3789                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  3790  063B  10BB               	bcf	_Temp,1
  3791                           
  3792                           ;OverTemperature_B1.c: 103: }
  3793                           ;OverTemperature_B1.c: 104: } else {
  3794                           
  3795                           ;OverTemperature_B1.c: 102: ;;
  3796  063C  2E4D               	goto	l854
  3797  063D                     l4730:	
  3798                           ;OverTemperature_B1.c: 106: }
  3799                           ;OverTemperature_B1.c: 107: } else {
  3800                           
  3801                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  3802                           
  3803                           
  3804                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  3805  063D  0841               	movf	_Temp+6,w
  3806  063E  0246               	subwf	_Temp+11,w
  3807  063F  1C03               	skipc
  3808  0640  2E4C               	goto	l4740
  3809                           
  3810                           ;OverTemperature_B1.c: 109: Temp.Count++;
  3811  0641  3001               	movlw	1
  3812  0642  00F5               	movwf	??_setTemp_Main
  3813  0643  0875               	movf	??_setTemp_Main,w
  3814  0644  07BE               	addwf	_Temp+3,f
  3815                           
  3816                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  3817  0645  3003               	movlw	3
  3818  0646  023E               	subwf	_Temp+3,w
  3819  0647  1C03               	skipc
  3820  0648  2E4D               	goto	l854
  3821                           
  3822                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  3823  0649  01BE               	clrf	_Temp+3
  3824                           
  3825                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  3826  064A  14BB               	bsf	_Temp,1
  3827                           
  3828                           ;OverTemperature_B1.c: 113: }
  3829                           ;OverTemperature_B1.c: 114: } else {
  3830  064B  2E4D               	goto	l854
  3831  064C                     l4740:	
  3832                           
  3833                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  3834  064C  01BE               	clrf	_Temp+3
  3835  064D                     l854:	
  3836                           ;OverTemperature_B1.c: 116: }
  3837                           ;OverTemperature_B1.c: 117: }
  3838                           ;OverTemperature_B1.c: 118: ;;
  3839                           ;OverTemperature_B1.c: 119: ;;
  3840                           
  3841                           
  3842                           ;OverTemperature_B1.c: 135: }
  3843                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  3844  064D  01C2               	clrf	_Temp+7
  3845                           
  3846                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  3847  064E  01C3               	clrf	_Temp+8
  3848                           
  3849                           ;OverTemperature_B1.c: 138: }
  3850                           ;OverTemperature_B1.c: 139: }
  3851                           ;OverTemperature_B1.c: 141: } else {
  3852  064F  0008               	return
  3853  0650                     l849:	
  3854                           
  3855                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  3856  0650  1C20               	btfss	_myMain,0
  3857  0651  0008               	return
  3858                           
  3859                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  3860  0652  143B               	bsf	_Temp,0
  3861  0653  0008               	return
  3862  0654                     __end_of_setTemp_Main:	
  3863                           
  3864                           	psect	text14
  3865  0B27                     __ptext14:	
  3866 ;; *************** function _Temp_Initialization *****************
  3867 ;; Defined at:
  3868 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;		None
  3873 ;; Return value:  Size  Location     Type
  3874 ;;		None               void
  3875 ;; Registers used:
  3876 ;;		status,2, status,0, pclath, cstack
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3882 ;;      Params:         0       0       0       0
  3883 ;;      Locals:         0       0       0       0
  3884 ;;      Temps:          0       0       0       0
  3885 ;;      Totals:         0       0       0       0
  3886 ;;Total ram usage:        0 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    3
  3889 ;; This function calls:
  3890 ;;		_setTemp_Initialization
  3891 ;; This function is called by:
  3892 ;;		_main
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           
  3897                           ;psect for function _Temp_Initialization
  3898  0B27                     _Temp_Initialization:	
  3899                           
  3900                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3901                           
  3902                           ;incstack = 0
  3903                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3904  0B27  158A  2319         	fcall	_setTemp_Initialization
  3905  0B29  0008               	return
  3906  0B2A                     __end_of_Temp_Initialization:	
  3907                           
  3908                           	psect	text15
  3909  0B19                     __ptext15:	
  3910 ;; *************** function _setTemp_Initialization *****************
  3911 ;; Defined at:
  3912 ;;		line 44 in file "../src/OverTemperature_B1.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;		None
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;		None
  3917 ;; Return value:  Size  Location     Type
  3918 ;;		None               void
  3919 ;; Registers used:
  3920 ;;		None
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3926 ;;      Params:         0       0       0       0
  3927 ;;      Locals:         0       0       0       0
  3928 ;;      Temps:          0       0       0       0
  3929 ;;      Totals:         0       0       0       0
  3930 ;;Total ram usage:        0 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    2
  3933 ;; This function calls:
  3934 ;;		Nothing
  3935 ;; This function is called by:
  3936 ;;		_Temp_Initialization
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           
  3941                           ;psect for function _setTemp_Initialization
  3942  0B19                     _setTemp_Initialization:	
  3943                           
  3944                           ;incstack = 0
  3945                           ; Regs used in _setTemp_Initialization: []
  3946  0B19  0008               	return
  3947  0B1A                     __end_of_setTemp_Initialization:	
  3948                           
  3949                           	psect	text16
  3950  0B24                     __ptext16:	
  3951 ;; *************** function _SYSC_Main *****************
  3952 ;; Defined at:
  3953 ;;		line 17 in file "../src/SYSC_B1.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;		None
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;		None
  3958 ;; Return value:  Size  Location     Type
  3959 ;;		None               void
  3960 ;; Registers used:
  3961 ;;		wreg, status,2, status,0, pclath, cstack
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3967 ;;      Params:         0       0       0       0
  3968 ;;      Locals:         0       0       0       0
  3969 ;;      Temps:          0       0       0       0
  3970 ;;      Totals:         0       0       0       0
  3971 ;;Total ram usage:        0 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; Hardware stack levels required when called:    4
  3974 ;; This function calls:
  3975 ;;		_setSYSC_Main
  3976 ;; This function is called by:
  3977 ;;		_main
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           
  3982                           ;psect for function _SYSC_Main
  3983  0B24                     _SYSC_Main:	
  3984                           
  3985                           ;SYSC_B1.c: 19: setSYSC_Main();
  3986                           
  3987                           ;incstack = 0
  3988                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  3989  0B24  158A  268A         	fcall	_setSYSC_Main
  3990  0B26  0008               	return
  3991  0B27                     __end_of_SYSC_Main:	
  3992                           
  3993                           	psect	text17
  3994  0E8A                     __ptext17:	
  3995 ;; *************** function _setSYSC_Main *****************
  3996 ;; Defined at:
  3997 ;;		line 23 in file "../src/SYSC_B1.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;		None
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;		None
  4002 ;; Return value:  Size  Location     Type
  4003 ;;		None               void
  4004 ;; Registers used:
  4005 ;;		wreg, status,2, status,0, pclath, cstack
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4011 ;;      Params:         0       0       0       0
  4012 ;;      Locals:         0       0       0       0
  4013 ;;      Temps:          0       0       0       0
  4014 ;;      Totals:         0       0       0       0
  4015 ;;Total ram usage:        0 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:    3
  4018 ;; This function calls:
  4019 ;;		_getMain_All_Error_Status
  4020 ;; This function is called by:
  4021 ;;		_SYSC_Main
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025                           
  4026                           ;psect for function _setSYSC_Main
  4027  0E8A                     _setSYSC_Main:	
  4028                           
  4029                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4030                           
  4031                           ;incstack = 0
  4032                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4033  0E8A  1283               	bcf	3,5	;RP0=0, select bank0
  4034  0E8B  1303               	bcf	3,6	;RP1=0, select bank0
  4035  0E8C  1C26               	btfss	_SYSC,0
  4036  0E8D  0008               	return
  4037                           
  4038                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4039  0E8E  18A6               	btfsc	_SYSC,1
  4040  0E8F  2EA1               	goto	l3564
  4041                           
  4042                           ;SYSC_B1.c: 27: SYSC.Timer++;
  4043  0E90  3001               	movlw	1
  4044  0E91  07A7               	addwf	_SYSC+1,f
  4045  0E92  1803               	skipnc
  4046  0E93  0AA8               	incf	_SYSC+2,f
  4047  0E94  3000               	movlw	0
  4048  0E95  07A8               	addwf	_SYSC+2,f
  4049                           
  4050                           ;SYSC_B1.c: 28: if (SYSC.Timer >= (160 / 20)) {
  4051  0E96  3000               	movlw	0
  4052  0E97  0228               	subwf	_SYSC+2,w
  4053  0E98  3008               	movlw	8
  4054  0E99  1903               	skipnz
  4055  0E9A  0227               	subwf	_SYSC+1,w
  4056  0E9B  1C03               	skipc
  4057  0E9C  0008               	return
  4058                           
  4059                           ;SYSC_B1.c: 29: SYSC.Timer = 0;
  4060  0E9D  01A7               	clrf	_SYSC+1
  4061  0E9E  01A8               	clrf	_SYSC+2
  4062                           
  4063                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4064  0E9F  14A6               	bsf	_SYSC,1
  4065                           
  4066                           ;SYSC_B1.c: 31: }
  4067                           ;SYSC_B1.c: 32: } else {
  4068  0EA0  0008               	return
  4069  0EA1                     l3564:	
  4070                           
  4071                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4072  0EA1  3001               	movlw	1
  4073  0EA2  158A  260C  158A   	fcall	_getMain_All_Error_Status
  4074  0EA5  3800               	iorlw	0
  4075  0EA6  1D03               	skipz
  4076  0EA7  0008               	return
  4077                           
  4078                           ;SYSC_B1.c: 34: SYSC.Timer++;
  4079  0EA8  3001               	movlw	1
  4080  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  4081  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  4082  0EAB  07A7               	addwf	_SYSC+1,f
  4083  0EAC  1803               	skipnc
  4084  0EAD  0AA8               	incf	_SYSC+2,f
  4085  0EAE  3000               	movlw	0
  4086  0EAF  07A8               	addwf	_SYSC+2,f
  4087                           
  4088                           ;SYSC_B1.c: 35: if (SYSC.Timer == (500 / 20)) {
  4089  0EB0  3019               	movlw	25
  4090  0EB1  0627               	xorwf	_SYSC+1,w
  4091  0EB2  0428               	iorwf	_SYSC+2,w
  4092  0EB3  1D03               	skipz
  4093  0EB4  2EBA               	goto	l3570
  4094                           
  4095                           ;SYSC_B1.c: 36: SYSC.Timer = 0;
  4096  0EB5  01A7               	clrf	_SYSC+1
  4097  0EB6  01A8               	clrf	_SYSC+2
  4098                           
  4099                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4100  0EB7  01A9               	clrf	_SYSC+3
  4101  0EB8  01AA               	clrf	_SYSC+4
  4102                           
  4103                           ;SYSC_B1.c: 38: } else {
  4104  0EB9  0008               	return
  4105  0EBA                     l3570:	
  4106                           
  4107                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4108  0EBA  3001               	movlw	1
  4109  0EBB  07A9               	addwf	_SYSC+3,f
  4110  0EBC  1803               	skipnc
  4111  0EBD  0AAA               	incf	_SYSC+4,f
  4112  0EBE  3000               	movlw	0
  4113  0EBF  07AA               	addwf	_SYSC+4,f
  4114                           
  4115                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4116  0EC0  3001               	movlw	1
  4117  0EC1  062A               	xorwf	_SYSC+4,w
  4118  0EC2  1D03               	skipz
  4119  0EC3  2EC6               	goto	u3315
  4120  0EC4  30F4               	movlw	244
  4121  0EC5  0629               	xorwf	_SYSC+3,w
  4122  0EC6                     u3315:	
  4123  0EC6  1D03               	skipz
  4124  0EC7  0008               	return
  4125                           
  4126                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4127  0EC8  01A9               	clrf	_SYSC+3
  4128  0EC9  01AA               	clrf	_SYSC+4
  4129                           
  4130                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4131  0ECA  10A6               	bcf	_SYSC,1
  4132  0ECB  0008               	return
  4133  0ECC                     __end_of_setSYSC_Main:	
  4134                           
  4135                           	psect	text18
  4136  0B21                     __ptext18:	
  4137 ;; *************** function _SYSC_Initialization *****************
  4138 ;; Defined at:
  4139 ;;		line 7 in file "../src/SYSC_B1.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;		None
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;		None
  4144 ;; Return value:  Size  Location     Type
  4145 ;;		None               void
  4146 ;; Registers used:
  4147 ;;		status,2, status,0, pclath, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4153 ;;      Params:         0       0       0       0
  4154 ;;      Locals:         0       0       0       0
  4155 ;;      Temps:          0       0       0       0
  4156 ;;      Totals:         0       0       0       0
  4157 ;;Total ram usage:        0 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    3
  4160 ;; This function calls:
  4161 ;;		_setSYSC_Initialization
  4162 ;; This function is called by:
  4163 ;;		_main
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           
  4168                           ;psect for function _SYSC_Initialization
  4169  0B21                     _SYSC_Initialization:	
  4170                           
  4171                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4172                           
  4173                           ;incstack = 0
  4174                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4175  0B21  158A  2335         	fcall	_setSYSC_Initialization
  4176  0B23  0008               	return
  4177  0B24                     __end_of_SYSC_Initialization:	
  4178                           
  4179                           	psect	text19
  4180  0B35                     __ptext19:	
  4181 ;; *************** function _setSYSC_Initialization *****************
  4182 ;; Defined at:
  4183 ;;		line 13 in file "../src/SYSC_B1.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;		None
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;		None
  4188 ;; Return value:  Size  Location     Type
  4189 ;;		None               void
  4190 ;; Registers used:
  4191 ;;		None
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4197 ;;      Params:         0       0       0       0
  4198 ;;      Locals:         0       0       0       0
  4199 ;;      Temps:          0       0       0       0
  4200 ;;      Totals:         0       0       0       0
  4201 ;;Total ram usage:        0 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:    2
  4204 ;; This function calls:
  4205 ;;		Nothing
  4206 ;; This function is called by:
  4207 ;;		_SYSC_Initialization
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           
  4212                           ;psect for function _setSYSC_Initialization
  4213  0B35                     _setSYSC_Initialization:	
  4214                           
  4215                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4216                           
  4217                           ;incstack = 0
  4218                           ; Regs used in _setSYSC_Initialization: []
  4219  0B35  1283               	bcf	3,5	;RP0=0, select bank0
  4220  0B36  1303               	bcf	3,6	;RP1=0, select bank0
  4221  0B37  1426               	bsf	_SYSC,0
  4222  0B38  0008               	return
  4223  0B39                     __end_of_setSYSC_Initialization:	
  4224                           
  4225                           	psect	text20
  4226  0026                     __ptext20:	
  4227 ;; *************** function _PIR_Main *****************
  4228 ;; Defined at:
  4229 ;;		line 13 in file "../src/PIR_B1.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;		None
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  cds             1   14[BANK0 ] unsigned char 
  4234 ;;  error           1   11[BANK0 ] unsigned char 
  4235 ;; Return value:  Size  Location     Type
  4236 ;;		None               void
  4237 ;; Registers used:
  4238 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4244 ;;      Params:         0       0       0       0
  4245 ;;      Locals:         0       4       0       0
  4246 ;;      Temps:          0       5       0       0
  4247 ;;      Totals:         0       9       0       0
  4248 ;;Total ram usage:        9 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    4
  4251 ;; This function calls:
  4252 ;;		_getCDS_Status
  4253 ;;		_getLights_Status
  4254 ;;		_getMain_All_Error_Status
  4255 ;;		_setLED
  4256 ;;		_setLights_Trigger
  4257 ;; This function is called by:
  4258 ;;		_main
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           
  4263                           ;psect for function _PIR_Main
  4264  0026                     _PIR_Main:	
  4265                           
  4266                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4267                           
  4268                           ;incstack = 0
  4269                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4270  0026  3000               	movlw	0
  4271  0027  158A  260C  118A   	fcall	_getMain_All_Error_Status
  4272  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4273  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4274  002C  00E0               	movwf	??_PIR_Main
  4275  002D  0860               	movf	??_PIR_Main,w
  4276  002E  00E5               	movwf	PIR_Main@error
  4277                           
  4278                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4279  002F  158A  2366  118A   	fcall	_getCDS_Status
  4280  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4281  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4282  0034  00E0               	movwf	??_PIR_Main
  4283  0035  0860               	movf	??_PIR_Main,w
  4284  0036  00E8               	movwf	PIR_Main@cds
  4285                           
  4286                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  4287  0037  1683               	bsf	3,5	;RP0=1, select bank1
  4288  0038  1303               	bcf	3,6	;RP1=0, select bank1
  4289  0039  1C20               	btfss	__PIR^(0+128),0
  4290  003A  2A04               	goto	l923
  4291                           
  4292                           ;PIR_B1.c: 17: if (error == 0) {
  4293  003B  1283               	bcf	3,5	;RP0=0, select bank0
  4294  003C  1303               	bcf	3,6	;RP1=0, select bank0
  4295  003D  08E5               	movf	PIR_Main@error,f
  4296  003E  1D03               	skipz
  4297  003F  2879               	goto	l924
  4298                           
  4299                           ;PIR_B1.c: 19: if (cds == 1) {
  4300  0040  0868               	movf	PIR_Main@cds,w
  4301  0041  3A01               	xorlw	1
  4302  0042  1D03               	skipz
  4303  0043  2848               	goto	l925
  4304                           
  4305                           ;PIR_B1.c: 20: _PIR.Available = 1;
  4306  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4307  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4308  0046  17A0               	bsf	__PIR^(0+128),7
  4309                           
  4310                           ;PIR_B1.c: 21: } else {
  4311  0047  2869               	goto	l5174
  4312  0048                     l925:	
  4313                           
  4314                           ;PIR_B1.c: 22: _PIR.Available = 0;
  4315  0048  1683               	bsf	3,5	;RP0=1, select bank1
  4316  0049  1303               	bcf	3,6	;RP1=0, select bank1
  4317  004A  13A0               	bcf	__PIR^(0+128),7
  4318                           
  4319                           ;PIR_B1.c: 23: if (_PIR.OK == 1) {
  4320  004B  1DA0               	btfss	__PIR^(0+128),3
  4321  004C  2869               	goto	l5174
  4322                           
  4323                           ;PIR_B1.c: 24: if (getLights_Status(1) == 1) {
  4324  004D  3001               	movlw	1
  4325  004E  158A  2402  118A   	fcall	_getLights_Status
  4326  0051  3A01               	xorlw	1
  4327  0052  1D03               	skipz
  4328  0053  285B               	goto	l928
  4329                           
  4330                           ;PIR_B1.c: 25: setLights_Trigger(1, 0);
  4331  0054  1283               	bcf	3,5	;RP0=0, select bank0
  4332  0055  1303               	bcf	3,6	;RP1=0, select bank0
  4333  0056  01DA               	clrf	setLights_Trigger@command
  4334  0057  3001               	movlw	1
  4335  0058  158A  24FF  118A   	fcall	_setLights_Trigger
  4336  005B                     l928:	
  4337                           
  4338                           ;PIR_B1.c: 26: }
  4339                           ;PIR_B1.c: 27: setLED(1, 0);
  4340  005B  1283               	bcf	3,5	;RP0=0, select bank0
  4341  005C  1303               	bcf	3,6	;RP1=0, select bank0
  4342  005D  01DA               	clrf	setLED@command
  4343  005E  3001               	movlw	1
  4344  005F  158A  278F  118A   	fcall	_setLED
  4345                           
  4346                           ;PIR_B1.c: 28: setLED(2, 0);
  4347  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4348  0063  1303               	bcf	3,6	;RP1=0, select bank0
  4349  0064  01DA               	clrf	setLED@command
  4350  0065  3002               	movlw	2
  4351  0066  158A  278F  118A   	fcall	_setLED
  4352  0069                     l5174:	
  4353                           
  4354                           ;PIR_B1.c: 29: }
  4355                           ;PIR_B1.c: 30: }
  4356                           ;PIR_B1.c: 34: if (_PIR.Detect == 0) {
  4357  0069  1683               	bsf	3,5	;RP0=1, select bank1
  4358  006A  1303               	bcf	3,6	;RP1=0, select bank1
  4359  006B  1A20               	btfsc	__PIR^(0+128),4
  4360  006C  287F               	goto	l931
  4361                           
  4362                           ;PIR_B1.c: 35: _PIR.Detect = 1;
  4363  006D  1620               	bsf	__PIR^(0+128),4
  4364                           
  4365                           ;PIR_B1.c: 36: if (_PIR.OK == 0) {
  4366  006E  19A0               	btfsc	__PIR^(0+128),3
  4367  006F  287F               	goto	l931
  4368                           
  4369                           ;PIR_B1.c: 37: setLED(1, 1);
  4370  0070  1283               	bcf	3,5	;RP0=0, select bank0
  4371  0071  1303               	bcf	3,6	;RP1=0, select bank0
  4372  0072  01DA               	clrf	setLED@command
  4373  0073  0ADA               	incf	setLED@command,f
  4374  0074  3001               	movlw	1
  4375  0075  158A  278F  118A   	fcall	_setLED
  4376                           
  4377                           ;PIR_B1.c: 38: }
  4378                           ;PIR_B1.c: 39: }
  4379                           ;PIR_B1.c: 40: } else {
  4380  0078  287F               	goto	l931
  4381  0079                     l924:	
  4382                           
  4383                           ;PIR_B1.c: 41: if (_PIR.Detect == 1) {
  4384  0079  1683               	bsf	3,5	;RP0=1, select bank1
  4385  007A  1303               	bcf	3,6	;RP1=0, select bank1
  4386  007B  1E20               	btfss	__PIR^(0+128),4
  4387  007C  287F               	goto	l931
  4388                           
  4389                           ;PIR_B1.c: 42: _PIR.Detect = 0;
  4390  007D  1220               	bcf	__PIR^(0+128),4
  4391                           
  4392                           ;PIR_B1.c: 43: _PIR.Available = 0;
  4393  007E  13A0               	bcf	__PIR^(0+128),7
  4394  007F                     l931:	
  4395                           
  4396                           ;PIR_B1.c: 61: }
  4397                           ;PIR_B1.c: 62: }
  4398                           ;PIR_B1.c: 64: if (_PIR.ADtoGO == 0) {
  4399  007F  1683               	bsf	3,5	;RP0=1, select bank1
  4400  0080  1303               	bcf	3,6	;RP1=0, select bank1
  4401  0081  18A0               	btfsc	__PIR^(0+128),1
  4402  0082  2892               	goto	l933
  4403                           
  4404                           ;PIR_B1.c: 65: _PIR.Time++;
  4405  0083  3001               	movlw	1
  4406  0084  1283               	bcf	3,5	;RP0=0, select bank0
  4407  0085  1303               	bcf	3,6	;RP1=0, select bank0
  4408  0086  00E0               	movwf	??_PIR_Main
  4409  0087  0860               	movf	??_PIR_Main,w
  4410  0088  1683               	bsf	3,5	;RP0=1, select bank1
  4411  0089  1303               	bcf	3,6	;RP1=0, select bank1
  4412  008A  07A5               	addwf	(__PIR^(0+128)+5),f
  4413                           
  4414                           ;PIR_B1.c: 66: if (_PIR.Time == (100 / 20)) {
  4415  008B  0825               	movf	(__PIR^(0+128)+5),w
  4416  008C  3A05               	xorlw	5
  4417  008D  1D03               	skipz
  4418  008E  29A5               	goto	l5264
  4419                           
  4420                           ;PIR_B1.c: 67: _PIR.Time = 0;
  4421  008F  01A5               	clrf	(__PIR^(0+128)+5)
  4422                           
  4423                           ;PIR_B1.c: 68: _PIR.ADtoGO = 1;
  4424  0090  14A0               	bsf	__PIR^(0+128),1
  4425                           
  4426                           ;PIR_B1.c: 69: }
  4427                           ;PIR_B1.c: 70: } else {
  4428  0091  29A5               	goto	l5264
  4429  0092                     l933:	
  4430                           
  4431                           ;PIR_B1.c: 71: if (_PIR.GO == 1) {
  4432  0092  1D20               	btfss	__PIR^(0+128),2
  4433  0093  29A5               	goto	l5264
  4434                           
  4435                           ;PIR_B1.c: 72: _PIR.GO = 0;
  4436  0094  1120               	bcf	__PIR^(0+128),2
  4437                           
  4438                           ;PIR_B1.c: 73: _PIR.ADtoGO = 0;
  4439  0095  10A0               	bcf	__PIR^(0+128),1
  4440                           
  4441                           ;PIR_B1.c: 74: if (_PIR.Available == 1) {
  4442  0096  1BA0               	btfsc	__PIR^(0+128),7
  4443                           
  4444                           ;PIR_B1.c: 75: if (_PIR.OK == 1) {
  4445  0097  1DA0               	btfss	__PIR^(0+128),3
  4446  0098  29A5               	goto	l5264
  4447                           
  4448                           ;PIR_B1.c: 77: _PIR.Time++;
  4449  0099  3001               	movlw	1
  4450  009A  1283               	bcf	3,5	;RP0=0, select bank0
  4451  009B  1303               	bcf	3,6	;RP1=0, select bank0
  4452  009C  00E0               	movwf	??_PIR_Main
  4453  009D  0860               	movf	??_PIR_Main,w
  4454  009E  1683               	bsf	3,5	;RP0=1, select bank1
  4455  009F  1303               	bcf	3,6	;RP1=0, select bank1
  4456  00A0  07A5               	addwf	(__PIR^(0+128)+5),f
  4457                           
  4458                           ;PIR_B1.c: 78: if (_PIR.Time == 60) {
  4459  00A1  0825               	movf	(__PIR^(0+128)+5),w
  4460  00A2  3A3C               	xorlw	60
  4461  00A3  1D03               	skipz
  4462  00A4  28D9               	goto	l5230
  4463                           
  4464                           ;PIR_B1.c: 79: _PIR.Time = 0;
  4465  00A5  01A5               	clrf	(__PIR^(0+128)+5)
  4466                           
  4467                           ;PIR_B1.c: 80: if (_PIR.RangeCount >= 90) {
  4468  00A6  305A               	movlw	90
  4469  00A7  024B               	subwf	(__PIR^(0+128)+43),w
  4470  00A8  1C03               	skipc
  4471  00A9  28B5               	goto	l5212
  4472                           
  4473                           ;PIR_B1.c: 81: _PIR.RangeTime1 = 0;
  4474  00AA  01CA               	clrf	(__PIR^(0+128)+42)
  4475                           
  4476                           ;PIR_B1.c: 83: if (_PIR.RangeValue == 25) {
  4477  00AB  084C               	movf	(__PIR^(0+128)+44),w
  4478  00AC  3A19               	xorlw	25
  4479  00AD  1903               	btfsc	3,2
  4480  00AE  28CA               	goto	L14
  4481                           
  4482                           ;PIR_B1.c: 85: } else if (_PIR.RangeValue == (25+10)) {
  4483                           
  4484                           ;PIR_B1.c: 84: _PIR.RangeValue = (25+10);
  4485  00AF  084C               	movf	(__PIR^(0+128)+44),w
  4486  00B0  3A23               	xorlw	35
  4487  00B1  1D03               	skipz
  4488  00B2  28D8               	goto	l5228
  4489                           
  4490                           ;PIR_B1.c: 86: _PIR.RangeValue = (25+20);
  4491  00B3  302D               	movlw	45
  4492  00B4  28D1               	goto	L10
  4493  00B5                     l5212:	
  4494                           ;PIR_B1.c: 87: }
  4495                           ;PIR_B1.c: 88: } else if (_PIR.RangeCount <= 10) {
  4496                           
  4497  00B5  300B               	movlw	11
  4498  00B6  024B               	subwf	(__PIR^(0+128)+43),w
  4499  00B7  1803               	skipnc
  4500  00B8  28D8               	goto	l5228
  4501                           
  4502                           ;PIR_B1.c: 89: _PIR.RangeTime1++;
  4503  00B9  3001               	movlw	1
  4504  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  4505  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  4506  00BC  00E0               	movwf	??_PIR_Main
  4507  00BD  0860               	movf	??_PIR_Main,w
  4508  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  4509  00BF  1303               	bcf	3,6	;RP1=0, select bank1
  4510  00C0  07CA               	addwf	(__PIR^(0+128)+42),f
  4511                           
  4512                           ;PIR_B1.c: 90: if (_PIR.RangeTime1 == 2) {
  4513  00C1  084A               	movf	(__PIR^(0+128)+42),w
  4514  00C2  3A02               	xorlw	2
  4515  00C3  1D03               	skipz
  4516  00C4  28D8               	goto	l5228
  4517                           
  4518                           ;PIR_B1.c: 91: _PIR.RangeTime1 = 0;
  4519  00C5  01CA               	clrf	(__PIR^(0+128)+42)
  4520                           
  4521                           ;PIR_B1.c: 93: if (_PIR.RangeValue == (25+20)) {
  4522  00C6  084C               	movf	(__PIR^(0+128)+44),w
  4523  00C7  3A2D               	xorlw	45
  4524  00C8  1D03               	skipz
  4525  00C9  28CC               	goto	l5224
  4526  00CA                     L14:	
  4527                           
  4528                           ;PIR_B1.c: 94: _PIR.RangeValue = (25+10);
  4529  00CA  3023               	movlw	35
  4530  00CB  28D1               	goto	L10
  4531  00CC                     l5224:	
  4532                           ;PIR_B1.c: 95: } else if (_PIR.RangeValue == (25+10)) {
  4533                           
  4534  00CC  084C               	movf	(__PIR^(0+128)+44),w
  4535  00CD  3A23               	xorlw	35
  4536  00CE  1D03               	skipz
  4537  00CF  28D8               	goto	l5228
  4538                           
  4539                           ;PIR_B1.c: 96: _PIR.RangeValue = 25;
  4540  00D0  3019               	movlw	25
  4541  00D1                     L10:	
  4542  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  4543  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  4544  00D3  00E0               	movwf	??_PIR_Main
  4545  00D4  0860               	movf	??_PIR_Main,w
  4546  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  4547  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  4548  00D7  00CC               	movwf	(__PIR^(0+128)+44)
  4549  00D8                     l5228:	
  4550                           
  4551                           ;PIR_B1.c: 97: }
  4552                           ;PIR_B1.c: 98: }
  4553                           ;PIR_B1.c: 99: }
  4554                           ;PIR_B1.c: 100: _PIR.RangeCount = 0;
  4555  00D8  01CB               	clrf	(__PIR^(0+128)+43)
  4556  00D9                     l5230:	
  4557                           
  4558                           ;PIR_B1.c: 101: }
  4559                           ;PIR_B1.c: 104: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  4560                           ;PIR_B1.c: 105: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  4561  00D9  084C               	movf	(__PIR^(0+128)+44),w
  4562  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  4563  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  4564  00DC  00E0               	movwf	??_PIR_Main
  4565  00DD  01E1               	clrf	??_PIR_Main+1
  4566  00DE  09E0               	comf	??_PIR_Main,f
  4567  00DF  09E1               	comf	??_PIR_Main+1,f
  4568  00E0  0AE0               	incf	??_PIR_Main,f
  4569  00E1  1903               	skipnz
  4570  00E2  0AE1               	incf	??_PIR_Main+1,f
  4571  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  4572  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  4573  00E5  0826               	movf	(__PIR^(0+128)+6),w
  4574  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  4575  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  4576  00E8  0760               	addwf	??_PIR_Main,w
  4577  00E9  00E2               	movwf	??_PIR_Main+2
  4578  00EA  0861               	movf	??_PIR_Main+1,w
  4579  00EB  1803               	skipnc
  4580  00EC  0A61               	incf	??_PIR_Main+1,w
  4581  00ED  00E3               	movwf	??_PIR_Main+3
  4582  00EE  0863               	movf	??_PIR_Main+3,w
  4583  00EF  3A80               	xorlw	128
  4584  00F0  3C80               	sublw	128
  4585  00F1  1D03               	skipz
  4586  00F2  28F7               	goto	u6735
  4587  00F3  0862               	movf	??_PIR_Main+2,w
  4588  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  4589  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  4590  00F6  0221               	subwf	(__PIR^(0+128)+1),w
  4591  00F7                     u6735:	
  4592  00F7  1C03               	skipc
  4593  00F8  2919               	goto	l5240
  4594  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  4595  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  4596  00FB  0826               	movf	(__PIR^(0+128)+6),w
  4597  00FC  074C               	addwf	(__PIR^(0+128)+44),w
  4598  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  4599  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  4600  00FF  00E0               	movwf	??_PIR_Main
  4601  0100  01E1               	clrf	??_PIR_Main+1
  4602  0101  0DE1               	rlf	??_PIR_Main+1,f
  4603  0102  0861               	movf	??_PIR_Main+1,w
  4604  0103  3A80               	xorlw	128
  4605  0104  00E2               	movwf	??_PIR_Main+2
  4606  0105  3080               	movlw	128
  4607  0106  0262               	subwf	??_PIR_Main+2,w
  4608  0107  1D03               	skipz
  4609  0108  290F               	goto	u6745
  4610  0109  1683               	bsf	3,5	;RP0=1, select bank1
  4611  010A  1303               	bcf	3,6	;RP1=0, select bank1
  4612  010B  0821               	movf	(__PIR^(0+128)+1),w
  4613  010C  1283               	bcf	3,5	;RP0=0, select bank0
  4614  010D  1303               	bcf	3,6	;RP1=0, select bank0
  4615  010E  0260               	subwf	??_PIR_Main,w
  4616  010F                     u6745:	
  4617  010F  1C03               	skipc
  4618  0110  2919               	goto	l5240
  4619                           
  4620                           ;PIR_B1.c: 107: _PIR.Count = 0;
  4621  0111  1683               	bsf	3,5	;RP0=1, select bank1
  4622  0112  1303               	bcf	3,6	;RP1=0, select bank1
  4623  0113  01C1               	clrf	(__PIR^(0+128)+33)
  4624  0114  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4625                           
  4626                           ;PIR_B1.c: 113: setLED(1, 0);
  4627  0115  1283               	bcf	3,5	;RP0=0, select bank0
  4628  0116  1303               	bcf	3,6	;RP1=0, select bank0
  4629  0117  01DA               	clrf	setLED@command
  4630  0118  298E               	goto	L15
  4631  0119                     l5240:	
  4632                           ;PIR_B1.c: 115: } else {
  4633                           
  4634                           ;PIR_B1.c: 114: setLED(2, 0);
  4635                           
  4636                           
  4637                           ;PIR_B1.c: 117: _PIR.RangeCount++;
  4638  0119  3001               	movlw	1
  4639  011A  1283               	bcf	3,5	;RP0=0, select bank0
  4640  011B  1303               	bcf	3,6	;RP1=0, select bank0
  4641  011C  00E0               	movwf	??_PIR_Main
  4642  011D  0860               	movf	??_PIR_Main,w
  4643  011E  1683               	bsf	3,5	;RP0=1, select bank1
  4644  011F  1303               	bcf	3,6	;RP1=0, select bank1
  4645  0120  07CB               	addwf	(__PIR^(0+128)+43),f
  4646                           
  4647                           ;PIR_B1.c: 118: _PIR.Count++;
  4648  0121  3001               	movlw	1
  4649  0122  07C1               	addwf	(__PIR^(0+128)+33),f
  4650  0123  1803               	skipnc
  4651  0124  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4652  0125  3000               	movlw	0
  4653  0126  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4654                           
  4655                           ;PIR_B1.c: 120: _PIR.TriggerValue = _PIR.Status == 1 ? 3 : 3;
  4656  0127  1B20               	btfsc	__PIR^(0+128),6
  4657  0128  292D               	goto	l5248
  4658  0129  3003               	movlw	3
  4659  012A  1283               	bcf	3,5	;RP0=0, select bank0
  4660  012B  1303               	bcf	3,6	;RP1=0, select bank0
  4661  012C  292F               	goto	L11
  4662  012D                     l5248:	
  4663  012D  3003               	movlw	3
  4664  012E  1283               	bcf	3,5	;RP0=0, select bank0
  4665  012F                     L11:	
  4666  012F  00E6               	movwf	_PIR_Main$3125
  4667  0130  3000               	movlw	0
  4668  0131  00E7               	movwf	_PIR_Main$3125+1
  4669  0132  0866               	movf	_PIR_Main$3125,w
  4670  0133  00E0               	movwf	??_PIR_Main
  4671  0134  0860               	movf	??_PIR_Main,w
  4672  0135  1683               	bsf	3,5	;RP0=1, select bank1
  4673  0136  1303               	bcf	3,6	;RP1=0, select bank1
  4674  0137  00C3               	movwf	(__PIR^(0+128)+35)
  4675                           
  4676                           ;PIR_B1.c: 122: if (_PIR.Count == _PIR.TriggerValue) {
  4677  0138  0843               	movf	(__PIR^(0+128)+35),w
  4678  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4679  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4680  013B  00E0               	movwf	??_PIR_Main
  4681  013C  01E1               	clrf	??_PIR_Main+1
  4682  013D  1683               	bsf	3,5	;RP0=1, select bank1
  4683  013E  1303               	bcf	3,6	;RP1=0, select bank1
  4684  013F  0842               	movf	((__PIR+1)^(0+128)+33),w
  4685  0140  1283               	bcf	3,5	;RP0=0, select bank0
  4686  0141  1303               	bcf	3,6	;RP1=0, select bank0
  4687  0142  0661               	xorwf	??_PIR_Main+1,w
  4688  0143  1D03               	skipz
  4689  0144  294B               	goto	u6765
  4690  0145  1683               	bsf	3,5	;RP0=1, select bank1
  4691  0146  1303               	bcf	3,6	;RP1=0, select bank1
  4692  0147  0841               	movf	(__PIR^(0+128)+33),w
  4693  0148  1283               	bcf	3,5	;RP0=0, select bank0
  4694  0149  1303               	bcf	3,6	;RP1=0, select bank0
  4695  014A  0660               	xorwf	??_PIR_Main,w
  4696  014B                     u6765:	
  4697  014B  1D03               	skipz
  4698  014C  29A5               	goto	l5264
  4699                           
  4700                           ;PIR_B1.c: 123: _PIR.Count = 0;
  4701  014D  1683               	bsf	3,5	;RP0=1, select bank1
  4702  014E  1303               	bcf	3,6	;RP1=0, select bank1
  4703  014F  01C1               	clrf	(__PIR^(0+128)+33)
  4704  0150  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4705                           
  4706                           ;PIR_B1.c: 125: _PIR.CloseTimeSeconds = 0;
  4707  0151  01C6               	clrf	(__PIR^(0+128)+38)
  4708                           
  4709                           ;PIR_B1.c: 126: _PIR.CloseTimeMinutes = 0;
  4710  0152  01C4               	clrf	(__PIR^(0+128)+36)
  4711  0153  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4712                           
  4713                           ;PIR_B1.c: 127: _PIR.Status = 1;
  4714  0154  1720               	bsf	__PIR^(0+128),6
  4715                           
  4716                           ;PIR_B1.c: 131: if (getLights_Status(1) == 0) {
  4717  0155  3001               	movlw	1
  4718  0156  158A  2402  118A   	fcall	_getLights_Status
  4719  0159  3800               	iorlw	0
  4720  015A  1D03               	skipz
  4721  015B  2964               	goto	l5258
  4722                           
  4723                           ;PIR_B1.c: 132: setLights_Trigger(1, 1);
  4724  015C  1283               	bcf	3,5	;RP0=0, select bank0
  4725  015D  1303               	bcf	3,6	;RP1=0, select bank0
  4726  015E  01DA               	clrf	setLights_Trigger@command
  4727  015F  0ADA               	incf	setLights_Trigger@command,f
  4728  0160  3001               	movlw	1
  4729  0161  158A  24FF  118A   	fcall	_setLights_Trigger
  4730  0164                     l5258:	
  4731                           
  4732                           ;PIR_B1.c: 133: }
  4733                           ;PIR_B1.c: 137: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - _PIR.RangeValue))) {
  4734  0164  1683               	bsf	3,5	;RP0=1, select bank1
  4735  0165  1303               	bcf	3,6	;RP1=0, select bank1
  4736  0166  084C               	movf	(__PIR^(0+128)+44),w
  4737  0167  1283               	bcf	3,5	;RP0=0, select bank0
  4738  0168  1303               	bcf	3,6	;RP1=0, select bank0
  4739  0169  00E0               	movwf	??_PIR_Main
  4740  016A  01E1               	clrf	??_PIR_Main+1
  4741  016B  09E0               	comf	??_PIR_Main,f
  4742  016C  09E1               	comf	??_PIR_Main+1,f
  4743  016D  0AE0               	incf	??_PIR_Main,f
  4744  016E  1903               	skipnz
  4745  016F  0AE1               	incf	??_PIR_Main+1,f
  4746  0170  1683               	bsf	3,5	;RP0=1, select bank1
  4747  0171  1303               	bcf	3,6	;RP1=0, select bank1
  4748  0172  0826               	movf	(__PIR^(0+128)+6),w
  4749  0173  1283               	bcf	3,5	;RP0=0, select bank0
  4750  0174  1303               	bcf	3,6	;RP1=0, select bank0
  4751  0175  0760               	addwf	??_PIR_Main,w
  4752  0176  00E2               	movwf	??_PIR_Main+2
  4753  0177  0861               	movf	??_PIR_Main+1,w
  4754  0178  1803               	skipnc
  4755  0179  0A61               	incf	??_PIR_Main+1,w
  4756  017A  00E3               	movwf	??_PIR_Main+3
  4757  017B  0863               	movf	??_PIR_Main+3,w
  4758  017C  3A80               	xorlw	128
  4759  017D  00E4               	movwf	??_PIR_Main+4
  4760  017E  3080               	movlw	128
  4761  017F  0264               	subwf	??_PIR_Main+4,w
  4762  0180  1D03               	skipz
  4763  0181  2988               	goto	u6785
  4764  0182  1683               	bsf	3,5	;RP0=1, select bank1
  4765  0183  1303               	bcf	3,6	;RP1=0, select bank1
  4766  0184  0821               	movf	(__PIR^(0+128)+1),w
  4767  0185  1283               	bcf	3,5	;RP0=0, select bank0
  4768  0186  1303               	bcf	3,6	;RP1=0, select bank0
  4769  0187  0262               	subwf	??_PIR_Main+2,w
  4770  0188                     u6785:	
  4771  0188  1C03               	skipc
  4772  0189  2996               	goto	l5262
  4773                           
  4774                           ;PIR_B1.c: 138: setLED(1, 1);
  4775  018A  1283               	bcf	3,5	;RP0=0, select bank0
  4776  018B  1303               	bcf	3,6	;RP1=0, select bank0
  4777  018C  01DA               	clrf	setLED@command
  4778  018D  0ADA               	incf	setLED@command,f
  4779  018E                     L15:	
  4780  018E  3001               	movlw	1
  4781  018F  158A  278F  118A   	fcall	_setLED
  4782                           
  4783                           ;PIR_B1.c: 139: setLED(2, 0);
  4784  0192  1283               	bcf	3,5	;RP0=0, select bank0
  4785  0193  1303               	bcf	3,6	;RP1=0, select bank0
  4786  0194  01DA               	clrf	setLED@command
  4787  0195  29A1               	goto	L12
  4788  0196                     l5262:	
  4789                           ;PIR_B1.c: 140: } else {
  4790                           
  4791                           
  4792                           ;PIR_B1.c: 141: setLED(1, 0);
  4793  0196  1283               	bcf	3,5	;RP0=0, select bank0
  4794  0197  1303               	bcf	3,6	;RP1=0, select bank0
  4795  0198  01DA               	clrf	setLED@command
  4796  0199  3001               	movlw	1
  4797  019A  158A  278F  118A   	fcall	_setLED
  4798                           
  4799                           ;PIR_B1.c: 142: setLED(2, 1);
  4800  019D  1283               	bcf	3,5	;RP0=0, select bank0
  4801  019E  1303               	bcf	3,6	;RP1=0, select bank0
  4802  019F  01DA               	clrf	setLED@command
  4803  01A0  0ADA               	incf	setLED@command,f
  4804  01A1                     L12:	
  4805  01A1  3002               	movlw	2
  4806  01A2  158A  278F  118A   	fcall	_setLED
  4807  01A5                     l5264:	
  4808                           
  4809                           ;PIR_B1.c: 143: }
  4810                           ;PIR_B1.c: 167: }
  4811                           ;PIR_B1.c: 168: }
  4812                           ;PIR_B1.c: 169: }
  4813                           ;PIR_B1.c: 170: }
  4814                           ;PIR_B1.c: 171: }
  4815                           ;PIR_B1.c: 172: }
  4816                           ;PIR_B1.c: 173: if (_PIR.OK == 0) {
  4817  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  4818  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  4819  01A7  19A0               	btfsc	__PIR^(0+128),3
  4820  01A8  29D4               	goto	l5280
  4821                           
  4822                           ;PIR_B1.c: 174: _PIR.Count++;
  4823  01A9  3001               	movlw	1
  4824  01AA  07C1               	addwf	(__PIR^(0+128)+33),f
  4825  01AB  1803               	skipnc
  4826  01AC  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4827  01AD  3000               	movlw	0
  4828  01AE  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4829                           
  4830                           ;PIR_B1.c: 175: if (_PIR.Count == (30000 / 20)) {
  4831  01AF  3005               	movlw	5
  4832  01B0  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  4833  01B1  1D03               	skipz
  4834  01B2  29B5               	goto	u6805
  4835  01B3  30DC               	movlw	220
  4836  01B4  0641               	xorwf	(__PIR^(0+128)+33),w
  4837  01B5                     u6805:	
  4838  01B5  1D03               	skipz
  4839  01B6  29D4               	goto	l5280
  4840                           
  4841                           ;PIR_B1.c: 176: _PIR.Count = 0;
  4842  01B7  01C1               	clrf	(__PIR^(0+128)+33)
  4843  01B8  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4844                           
  4845                           ;PIR_B1.c: 177: _PIR.OK = 1;
  4846  01B9  15A0               	bsf	__PIR^(0+128),3
  4847                           
  4848                           ;PIR_B1.c: 178: setLED(1, 0);
  4849  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  4850  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  4851  01BC  01DA               	clrf	setLED@command
  4852  01BD  3001               	movlw	1
  4853  01BE  158A  278F  118A   	fcall	_setLED
  4854                           
  4855                           ;PIR_B1.c: 179: if (cds == 0) {
  4856  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  4857  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  4858  01C3  08E8               	movf	PIR_Main@cds,f
  4859  01C4  1D03               	skipz
  4860  01C5  29D4               	goto	l5280
  4861                           
  4862                           ;PIR_B1.c: 180: if (getLights_Status(1) == 1) {
  4863  01C6  3001               	movlw	1
  4864  01C7  158A  2402  118A   	fcall	_getLights_Status
  4865  01CA  3A01               	xorlw	1
  4866  01CB  1D03               	skipz
  4867  01CC  29D4               	goto	l5280
  4868                           
  4869                           ;PIR_B1.c: 181: setLights_Trigger(1, 0);
  4870  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  4871  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  4872  01CF  01DA               	clrf	setLights_Trigger@command
  4873  01D0  3001               	movlw	1
  4874  01D1  158A  24FF  118A   	fcall	_setLights_Trigger
  4875  01D4                     l5280:	
  4876                           
  4877                           ;PIR_B1.c: 182: }
  4878                           ;PIR_B1.c: 183: }
  4879                           ;PIR_B1.c: 184: }
  4880                           ;PIR_B1.c: 185: }
  4881                           ;PIR_B1.c: 186: if (_PIR.Status == 1) {
  4882  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  4883  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  4884  01D6  1F20               	btfss	__PIR^(0+128),6
  4885  01D7  0008               	return
  4886                           
  4887                           ;PIR_B1.c: 187: _PIR.CloseTimeSeconds++;
  4888  01D8  3001               	movlw	1
  4889  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  4890  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  4891  01DB  00E0               	movwf	??_PIR_Main
  4892  01DC  0860               	movf	??_PIR_Main,w
  4893  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  4894  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  4895  01DF  07C6               	addwf	(__PIR^(0+128)+38),f
  4896                           
  4897                           ;PIR_B1.c: 188: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  4898  01E0  0846               	movf	(__PIR^(0+128)+38),w
  4899  01E1  3A32               	xorlw	50
  4900  01E2  1D03               	skipz
  4901  01E3  0008               	return
  4902                           
  4903                           ;PIR_B1.c: 189: _PIR.CloseTimeSeconds = 0;
  4904  01E4  01C6               	clrf	(__PIR^(0+128)+38)
  4905                           
  4906                           ;PIR_B1.c: 190: _PIR.CloseTimeMinutes++;
  4907  01E5  3001               	movlw	1
  4908  01E6  07C4               	addwf	(__PIR^(0+128)+36),f
  4909  01E7  1803               	skipnc
  4910  01E8  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  4911  01E9  3000               	movlw	0
  4912  01EA  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  4913                           
  4914                           ;PIR_B1.c: 191: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4915  01EB  0848               	movf	((__PIR+1)^(0+128)+39),w
  4916  01EC  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  4917  01ED  1D03               	skipz
  4918  01EE  29F1               	goto	u6855
  4919  01EF  0847               	movf	(__PIR^(0+128)+39),w
  4920  01F0  0644               	xorwf	(__PIR^(0+128)+36),w
  4921  01F1                     u6855:	
  4922  01F1  1D03               	skipz
  4923  01F2  0008               	return
  4924                           
  4925                           ;PIR_B1.c: 192: _PIR.CloseTimeMinutes = 0;
  4926  01F3  01C4               	clrf	(__PIR^(0+128)+36)
  4927  01F4  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4928                           
  4929                           ;PIR_B1.c: 193: _PIR.Status = 0;
  4930  01F5  1320               	bcf	__PIR^(0+128),6
  4931                           
  4932                           ;PIR_B1.c: 197: if (getLights_Status(1) == 1) {
  4933  01F6  3001               	movlw	1
  4934  01F7  158A  2402  118A   	fcall	_getLights_Status
  4935  01FA  3A01               	xorlw	1
  4936  01FB  1D03               	skipz
  4937  01FC  0008               	return
  4938                           
  4939                           ;PIR_B1.c: 198: setLights_Trigger(1, 0);
  4940  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  4941  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  4942  01FF  01DA               	clrf	setLights_Trigger@command
  4943  0200  3001               	movlw	1
  4944  0201  158A  24FF         	fcall	_setLights_Trigger
  4945                           
  4946                           ;PIR_B1.c: 199: }
  4947                           ;PIR_B1.c: 203: }
  4948                           ;PIR_B1.c: 204: }
  4949                           ;PIR_B1.c: 205: }
  4950                           ;PIR_B1.c: 206: } else {
  4951  0203  0008               	return
  4952  0204                     l923:	
  4953                           
  4954                           ;PIR_B1.c: 207: if (myMain.PowerON == 1) {
  4955  0204  1283               	bcf	3,5	;RP0=0, select bank0
  4956  0205  1303               	bcf	3,6	;RP1=0, select bank0
  4957  0206  1C20               	btfss	_myMain,0
  4958  0207  0008               	return
  4959                           
  4960                           ;PIR_B1.c: 208: _PIR.Enable = 1;
  4961  0208  1683               	bsf	3,5	;RP0=1, select bank1
  4962  0209  1303               	bcf	3,6	;RP1=0, select bank1
  4963  020A  1420               	bsf	__PIR^(0+128),0
  4964                           
  4965                           ;PIR_B1.c: 209: setLED(1, 1);
  4966  020B  1283               	bcf	3,5	;RP0=0, select bank0
  4967  020C  1303               	bcf	3,6	;RP1=0, select bank0
  4968  020D  01DA               	clrf	setLED@command
  4969  020E  0ADA               	incf	setLED@command,f
  4970  020F  3001               	movlw	1
  4971  0210  158A  278F  118A   	fcall	_setLED
  4972                           
  4973                           ;PIR_B1.c: 212: if (getLights_Status(1) == 0) {
  4974  0213  3001               	movlw	1
  4975  0214  158A  2402  118A   	fcall	_getLights_Status
  4976  0217  3800               	iorlw	0
  4977  0218  1D03               	skipz
  4978  0219  0008               	return
  4979                           
  4980                           ;PIR_B1.c: 213: setLights_Trigger(1, 1);
  4981  021A  1283               	bcf	3,5	;RP0=0, select bank0
  4982  021B  1303               	bcf	3,6	;RP1=0, select bank0
  4983  021C  01DA               	clrf	setLights_Trigger@command
  4984  021D  0ADA               	incf	setLights_Trigger@command,f
  4985  021E  3001               	movlw	1
  4986  021F  158A  24FF         	fcall	_setLights_Trigger
  4987  0221  0008               	return
  4988  0222                     __end_of_PIR_Main:	
  4989                           
  4990                           	psect	text21
  4991  0B66                     __ptext21:	
  4992 ;; *************** function _getCDS_Status *****************
  4993 ;; Defined at:
  4994 ;;		line 42 in file "../src/CDS_B1.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;		None
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;  status          1    4[COMMON] unsigned char 
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  1    wreg      unsigned char 
  5001 ;; Registers used:
  5002 ;;		wreg, status,2
  5003 ;; Tracked objects:
  5004 ;;		On entry : 0/0
  5005 ;;		On exit  : 0/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5008 ;;      Params:         0       0       0       0
  5009 ;;      Locals:         1       0       0       0
  5010 ;;      Temps:          0       0       0       0
  5011 ;;      Totals:         1       0       0       0
  5012 ;;Total ram usage:        1 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    2
  5015 ;; This function calls:
  5016 ;;		Nothing
  5017 ;; This function is called by:
  5018 ;;		_PIR_Main
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           
  5023                           ;psect for function _getCDS_Status
  5024  0B66                     _getCDS_Status:	
  5025                           
  5026                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5027                           
  5028                           ;incstack = 0
  5029                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5030  0B66  3000               	movlw	0
  5031  0B67  1283               	bcf	3,5	;RP0=0, select bank0
  5032  0B68  1303               	bcf	3,6	;RP1=0, select bank0
  5033  0B69  1A2B               	btfsc	__CDS,4
  5034  0B6A  3001               	movlw	1
  5035  0B6B  00F4               	movwf	getCDS_Status@status
  5036                           
  5037                           ;CDS_B1.c: 44: return status;
  5038  0B6C  0874               	movf	getCDS_Status@status,w
  5039  0B6D  0008               	return
  5040  0B6E                     __end_of_getCDS_Status:	
  5041                           
  5042                           	psect	text22
  5043  0B93                     __ptext22:	
  5044 ;; *************** function _PIR_Initialization *****************
  5045 ;; Defined at:
  5046 ;;		line 7 in file "../src/PIR_B1.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;		None
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;		None
  5051 ;; Return value:  Size  Location     Type
  5052 ;;		None               void
  5053 ;; Registers used:
  5054 ;;		wreg
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5060 ;;      Params:         0       0       0       0
  5061 ;;      Locals:         0       0       0       0
  5062 ;;      Temps:          1       0       0       0
  5063 ;;      Totals:         1       0       0       0
  5064 ;;Total ram usage:        1 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    2
  5067 ;; This function calls:
  5068 ;;		Nothing
  5069 ;; This function is called by:
  5070 ;;		_main
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           
  5075                           ;psect for function _PIR_Initialization
  5076  0B93                     _PIR_Initialization:	
  5077                           
  5078                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _PIR_Initialization: [wreg]
  5082  0B93  3019               	movlw	25
  5083  0B94  00F4               	movwf	??_PIR_Initialization
  5084  0B95  0874               	movf	??_PIR_Initialization,w
  5085  0B96  1683               	bsf	3,5	;RP0=1, select bank1
  5086  0B97  1303               	bcf	3,6	;RP1=0, select bank1
  5087  0B98  00CC               	movwf	(__PIR^(0+128)+44)
  5088                           
  5089                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5090  0B99  3005               	movlw	5
  5091  0B9A  00C7               	movwf	(__PIR^(0+128)+39)
  5092  0B9B  3000               	movlw	0
  5093  0B9C  00C8               	movwf	(__PIR^(0+128)+40)
  5094  0B9D  0008               	return
  5095  0B9E                     __end_of_PIR_Initialization:	
  5096                           
  5097                           	psect	text23
  5098  0BE2                     __ptext23:	
  5099 ;; *************** function _Mcu_Initialization *****************
  5100 ;; Defined at:
  5101 ;;		line 30 in file "../src/MCU_B1.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;		None
  5104 ;; Auto vars:     Size  Location     Type
  5105 ;;		None
  5106 ;; Return value:  Size  Location     Type
  5107 ;;		None               void
  5108 ;; Registers used:
  5109 ;;		wreg, status,2, status,0, pclath, cstack
  5110 ;; Tracked objects:
  5111 ;;		On entry : 0/0
  5112 ;;		On exit  : 0/0
  5113 ;;		Unchanged: 0/0
  5114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5115 ;;      Params:         0       0       0       0
  5116 ;;      Locals:         0       0       0       0
  5117 ;;      Temps:          0       0       0       0
  5118 ;;      Totals:         0       0       0       0
  5119 ;;Total ram usage:        0 bytes
  5120 ;; Hardware stack levels used:    1
  5121 ;; Hardware stack levels required when called:    3
  5122 ;; This function calls:
  5123 ;;		_ADC_Set
  5124 ;;		_Fosc_Set
  5125 ;;		_IO_Set
  5126 ;;		_TMR1_Set
  5127 ;;		_WDT_Set
  5128 ;; This function is called by:
  5129 ;;		_main
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           
  5134                           ;psect for function _Mcu_Initialization
  5135  0BE2                     _Mcu_Initialization:	
  5136                           
  5137                           ;MCU_B1.c: 32: Fosc_Set();
  5138                           
  5139                           ;incstack = 0
  5140                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5141  0BE2  158A  2339  158A   	fcall	_Fosc_Set
  5142                           
  5143                           ;MCU_B1.c: 34: IO_Set();
  5144  0BE5  158A  245B  158A   	fcall	_IO_Set
  5145                           
  5146                           ;MCU_B1.c: 36: ;;
  5147                           ;MCU_B1.c: 38: TMR1_Set();
  5148  0BE8  158A  23C6  158A   	fcall	_TMR1_Set
  5149                           
  5150                           ;MCU_B1.c: 40: ADC_Set();
  5151  0BEB  158A  2357  158A   	fcall	_ADC_Set
  5152                           
  5153                           ;MCU_B1.c: 42: ;;
  5154                           ;MCU_B1.c: 44: ;;
  5155                           ;MCU_B1.c: 46: ;;
  5156                           ;MCU_B1.c: 48: ;;
  5157                           ;MCU_B1.c: 50: ;;
  5158                           ;MCU_B1.c: 52: WDT_Set();
  5159  0BEE  158A  23D4         	fcall	_WDT_Set
  5160  0BF0  0008               	return
  5161  0BF1                     __end_of_Mcu_Initialization:	
  5162                           
  5163                           	psect	text24
  5164  0BD4                     __ptext24:	
  5165 ;; *************** function _WDT_Set *****************
  5166 ;; Defined at:
  5167 ;;		line 1073 in file "../src/MCU_B1.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;		None
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;		None
  5172 ;; Return value:  Size  Location     Type
  5173 ;;		None               void
  5174 ;; Registers used:
  5175 ;;		wreg
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5181 ;;      Params:         0       0       0       0
  5182 ;;      Locals:         0       0       0       0
  5183 ;;      Temps:          1       0       0       0
  5184 ;;      Totals:         1       0       0       0
  5185 ;;Total ram usage:        1 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    2
  5188 ;; This function calls:
  5189 ;;		Nothing
  5190 ;; This function is called by:
  5191 ;;		_Mcu_Initialization
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           
  5196                           ;psect for function _WDT_Set
  5197  0BD4                     _WDT_Set:	
  5198                           
  5199                           ;MCU_B1.c: 1075: PSA = 1;
  5200                           
  5201                           ;incstack = 0
  5202                           ; Regs used in _WDT_Set: [wreg]
  5203  0BD4  1683               	bsf	3,5	;RP0=1, select bank1
  5204  0BD5  1303               	bcf	3,6	;RP1=0, select bank1
  5205  0BD6  1581               	bsf	1,3	;volatile
  5206                           
  5207                           ;MCU_B1.c: 1076: PS0 = 1;
  5208  0BD7  1401               	bsf	1,0	;volatile
  5209                           
  5210                           ;MCU_B1.c: 1077: PS1 = 1;
  5211  0BD8  1481               	bsf	1,1	;volatile
  5212                           
  5213                           ;MCU_B1.c: 1078: PS2 = 1;
  5214  0BD9  1501               	bsf	1,2	;volatile
  5215                           
  5216                           ;MCU_B1.c: 1082: WDT.Enable = 1;
  5217  0BDA  1283               	bcf	3,5	;RP0=0, select bank0
  5218  0BDB  1303               	bcf	3,6	;RP1=0, select bank0
  5219  0BDC  1437               	bsf	_WDT,0
  5220                           
  5221                           ;MCU_B1.c: 1083: WDT.Timer = 10;
  5222  0BDD  300A               	movlw	10
  5223  0BDE  00F4               	movwf	??_WDT_Set
  5224  0BDF  0874               	movf	??_WDT_Set,w
  5225  0BE0  00B8               	movwf	_WDT+1
  5226  0BE1  0008               	return
  5227  0BE2                     __end_of_WDT_Set:	
  5228                           
  5229                           	psect	text25
  5230  0BC6                     __ptext25:	
  5231 ;; *************** function _TMR1_Set *****************
  5232 ;; Defined at:
  5233 ;;		line 222 in file "../src/MCU_B1.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;		None
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;		None
  5238 ;; Return value:  Size  Location     Type
  5239 ;;		None               void
  5240 ;; Registers used:
  5241 ;;		wreg
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5247 ;;      Params:         0       0       0       0
  5248 ;;      Locals:         0       0       0       0
  5249 ;;      Temps:          0       0       0       0
  5250 ;;      Totals:         0       0       0       0
  5251 ;;Total ram usage:        0 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    2
  5254 ;; This function calls:
  5255 ;;		Nothing
  5256 ;; This function is called by:
  5257 ;;		_Mcu_Initialization
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           
  5262                           ;psect for function _TMR1_Set
  5263  0BC6                     _TMR1_Set:	
  5264                           
  5265                           ;MCU_B1.c: 223: T1CON = (0x40 | 0x00 | 0x01);
  5266                           
  5267                           ;incstack = 0
  5268                           ; Regs used in _TMR1_Set: [wreg]
  5269  0BC6  3041               	movlw	65
  5270  0BC7  1283               	bcf	3,5	;RP0=0, select bank0
  5271  0BC8  1303               	bcf	3,6	;RP1=0, select bank0
  5272  0BC9  0090               	movwf	16	;volatile
  5273                           
  5274                           ;MCU_B1.c: 224: TMR1H = (int)((65536-1480)/256);
  5275  0BCA  30FA               	movlw	250
  5276  0BCB  008F               	movwf	15	;volatile
  5277                           
  5278                           ;MCU_B1.c: 225: TMR1L = (int)((65536-1480)%256);
  5279  0BCC  3038               	movlw	56
  5280  0BCD  008E               	movwf	14	;volatile
  5281                           
  5282                           ;MCU_B1.c: 226: TMR1IE = 1;
  5283  0BCE  1683               	bsf	3,5	;RP0=1, select bank1
  5284  0BCF  1303               	bcf	3,6	;RP1=0, select bank1
  5285  0BD0  140C               	bsf	12,0	;volatile
  5286                           
  5287                           ;MCU_B1.c: 227: PEIE = 1;
  5288  0BD1  170B               	bsf	11,6	;volatile
  5289                           
  5290                           ;MCU_B1.c: 228: GIE = 1;
  5291  0BD2  178B               	bsf	11,7	;volatile
  5292  0BD3  0008               	return
  5293  0BD4                     __end_of_TMR1_Set:	
  5294                           
  5295                           	psect	text26
  5296  0C5B                     __ptext26:	
  5297 ;; *************** function _IO_Set *****************
  5298 ;; Defined at:
  5299 ;;		line 60 in file "../src/MCU_B1.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;		None
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;		None
  5304 ;; Return value:  Size  Location     Type
  5305 ;;		None               void
  5306 ;; Registers used:
  5307 ;;		wreg, status,2
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5313 ;;      Params:         0       0       0       0
  5314 ;;      Locals:         0       0       0       0
  5315 ;;      Temps:          0       0       0       0
  5316 ;;      Totals:         0       0       0       0
  5317 ;;Total ram usage:        0 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:    2
  5320 ;; This function calls:
  5321 ;;		Nothing
  5322 ;; This function is called by:
  5323 ;;		_Mcu_Initialization
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           
  5328                           ;psect for function _IO_Set
  5329  0C5B                     _IO_Set:	
  5330                           
  5331                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5332                           
  5333                           ;incstack = 0
  5334                           ; Regs used in _IO_Set: [wreg+status,2]
  5335  0C5B  302F               	movlw	47
  5336  0C5C  1683               	bsf	3,5	;RP0=1, select bank1
  5337  0C5D  1303               	bcf	3,6	;RP1=0, select bank1
  5338  0C5E  0085               	movwf	5	;volatile
  5339                           
  5340                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5341  0C5F  3001               	movlw	1
  5342  0C60  0086               	movwf	6	;volatile
  5343                           
  5344                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5345  0C61  0187               	clrf	7	;volatile
  5346                           
  5347                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5348  0C62  3007               	movlw	7
  5349  0C63  1683               	bsf	3,5	;RP0=1, select bank3
  5350  0C64  1703               	bsf	3,6	;RP1=1, select bank3
  5351  0C65  0085               	movwf	5	;volatile
  5352                           
  5353                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5354  0C66  3001               	movlw	1
  5355  0C67  0086               	movwf	6	;volatile
  5356                           
  5357                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5358  0C68  30AF               	movlw	175
  5359  0C69  1283               	bcf	3,5	;RP0=0, select bank0
  5360  0C6A  1303               	bcf	3,6	;RP1=0, select bank0
  5361  0C6B  0085               	movwf	5	;volatile
  5362                           
  5363                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5364  0C6C  3001               	movlw	1
  5365  0C6D  0086               	movwf	6	;volatile
  5366                           
  5367                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5368  0C6E  0187               	clrf	7	;volatile
  5369  0C6F  0008               	return
  5370  0C70                     __end_of_IO_Set:	
  5371                           
  5372                           	psect	text27
  5373  0B39                     __ptext27:	
  5374 ;; *************** function _Fosc_Set *****************
  5375 ;; Defined at:
  5376 ;;		line 56 in file "../src/MCU_B1.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;		None
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;		None
  5381 ;; Return value:  Size  Location     Type
  5382 ;;		None               void
  5383 ;; Registers used:
  5384 ;;		wreg
  5385 ;; Tracked objects:
  5386 ;;		On entry : 0/0
  5387 ;;		On exit  : 0/0
  5388 ;;		Unchanged: 0/0
  5389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5390 ;;      Params:         0       0       0       0
  5391 ;;      Locals:         0       0       0       0
  5392 ;;      Temps:          0       0       0       0
  5393 ;;      Totals:         0       0       0       0
  5394 ;;Total ram usage:        0 bytes
  5395 ;; Hardware stack levels used:    1
  5396 ;; Hardware stack levels required when called:    2
  5397 ;; This function calls:
  5398 ;;		Nothing
  5399 ;; This function is called by:
  5400 ;;		_Mcu_Initialization
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           
  5405                           ;psect for function _Fosc_Set
  5406  0B39                     _Fosc_Set:	
  5407                           
  5408                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5409                           
  5410                           ;incstack = 0
  5411                           ; Regs used in _Fosc_Set: [wreg]
  5412  0B39  303C               	movlw	60
  5413  0B3A  1683               	bsf	3,5	;RP0=1, select bank1
  5414  0B3B  1303               	bcf	3,6	;RP1=0, select bank1
  5415  0B3C  0090               	movwf	16	;volatile
  5416  0B3D  0008               	return
  5417  0B3E                     __end_of_Fosc_Set:	
  5418                           
  5419                           	psect	text28
  5420  0B57                     __ptext28:	
  5421 ;; *************** function _ADC_Set *****************
  5422 ;; Defined at:
  5423 ;;		line 409 in file "../src/MCU_B1.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;		None               void
  5430 ;; Registers used:
  5431 ;;		wreg
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5437 ;;      Params:         0       0       0       0
  5438 ;;      Locals:         0       0       0       0
  5439 ;;      Temps:          0       0       0       0
  5440 ;;      Totals:         0       0       0       0
  5441 ;;Total ram usage:        0 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    2
  5444 ;; This function calls:
  5445 ;;		Nothing
  5446 ;; This function is called by:
  5447 ;;		_Mcu_Initialization
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           
  5452                           ;psect for function _ADC_Set
  5453  0B57                     _ADC_Set:	
  5454                           
  5455                           ;MCU_B1.c: 410: ADCON1 = 0x73;
  5456                           
  5457                           ;incstack = 0
  5458                           ; Regs used in _ADC_Set: [wreg]
  5459  0B57  3073               	movlw	115
  5460  0B58  1683               	bsf	3,5	;RP0=1, select bank1
  5461  0B59  1303               	bcf	3,6	;RP1=0, select bank1
  5462  0B5A  009F               	movwf	31	;volatile
  5463                           
  5464                           ;MCU_B1.c: 411: FVRCON = 0xc1;
  5465  0B5B  30C1               	movlw	193
  5466  0B5C  009D               	movwf	29	;volatile
  5467  0B5D  0008               	return
  5468  0B5E                     __end_of_ADC_Set:	
  5469                           
  5470                           	psect	text29
  5471  0222                     __ptext29:	
  5472 ;; *************** function _Load_Main *****************
  5473 ;; Defined at:
  5474 ;;		line 39 in file "../src/OverLoad_B1.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;		None
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;  i               2   11[BANK0 ] int 
  5479 ;;  Load_Status     1   10[BANK0 ] unsigned char 
  5480 ;;  error           1    9[BANK0 ] unsigned char 
  5481 ;; Return value:  Size  Location     Type
  5482 ;;		None               void
  5483 ;; Registers used:
  5484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5490 ;;      Params:         0       0       0       0
  5491 ;;      Locals:         0       4       0       0
  5492 ;;      Temps:          0       2       0       0
  5493 ;;      Totals:         0       6       0       0
  5494 ;;Total ram usage:        6 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:    3
  5497 ;; This function calls:
  5498 ;;		___lwdiv
  5499 ;;		_getLight_LoadGO
  5500 ;;		_getLight_Load_Status
  5501 ;;		_getMain_All_Error_Status
  5502 ;;		_getMain_All_LightsStatus
  5503 ;;		_getMain_Lights_Count
  5504 ;;		_setLoad_AH_AL_Restore
  5505 ;; This function is called by:
  5506 ;;		_main
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           
  5511                           ;psect for function _Load_Main
  5512  0222                     _Load_Main:	
  5513                           
  5514                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  5515                           
  5516                           ;incstack = 0
  5517                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5518  0222  3000               	movlw	0
  5519  0223  158A  260C  118A   	fcall	_getMain_All_Error_Status
  5520  0226  1283               	bcf	3,5	;RP0=0, select bank0
  5521  0227  1303               	bcf	3,6	;RP1=0, select bank0
  5522  0228  00E1               	movwf	??_Load_Main
  5523  0229  0861               	movf	??_Load_Main,w
  5524  022A  00E3               	movwf	Load_Main@error
  5525                           
  5526                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  5527  022B  01E4               	clrf	Load_Main@Load_Status
  5528                           
  5529                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  5530  022C  1683               	bsf	3,5	;RP0=1, select bank1
  5531  022D  1303               	bcf	3,6	;RP1=0, select bank1
  5532  022E  1C4E               	btfss	_Load^(0+128),0
  5533  022F  2BF3               	goto	l729
  5534                           
  5535                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
  5536  0230  158A  2376  118A   	fcall	_getMain_All_LightsStatus
  5537  0233  3800               	iorlw	0
  5538  0234  1D03               	skipz
  5539  0235  2A39               	goto	l5012
  5540                           
  5541                           ;OverLoad_B1.c: 46: Load.GO = 0;
  5542  0236  1683               	bsf	3,5	;RP0=1, select bank1
  5543  0237  1303               	bcf	3,6	;RP1=0, select bank1
  5544  0238  2A58               	goto	l5028
  5545  0239                     l5012:	
  5546                           ;OverLoad_B1.c: 47: } else {
  5547                           
  5548                           
  5549                           ;OverLoad_B1.c: 70: if (error == 0) {
  5550  0239  1283               	bcf	3,5	;RP0=0, select bank0
  5551  023A  1303               	bcf	3,6	;RP1=0, select bank0
  5552  023B  08E3               	movf	Load_Main@error,f
  5553  023C  1D03               	skipz
  5554  023D  2A55               	goto	l732
  5555                           
  5556                           ;OverLoad_B1.c: 71: Load.GO = 1;
  5557  023E  1683               	bsf	3,5	;RP0=1, select bank1
  5558  023F  1303               	bcf	3,6	;RP1=0, select bank1
  5559  0240  14CE               	bsf	_Load^(0+128),1
  5560                           
  5561                           ;OverLoad_B1.c: 73: if (getLight_LoadGO() == 1) {
  5562  0241  158A  233E  118A   	fcall	_getLight_LoadGO
  5563  0244  3A01               	xorlw	1
  5564  0245  1D03               	skipz
  5565  0246  2A4F               	goto	l733
  5566                           
  5567                           ;OverLoad_B1.c: 74: if (Load.Run == 0 && Load.OK == 0) {
  5568  0247  1683               	bsf	3,5	;RP0=1, select bank1
  5569  0248  1303               	bcf	3,6	;RP1=0, select bank1
  5570  0249  1DCE               	btfss	_Load^(0+128),3
  5571  024A  1BCE               	btfsc	_Load^(0+128),7
  5572  024B  2A59               	goto	l731
  5573                           
  5574                           ;OverLoad_B1.c: 75: Load.Run = 1;
  5575  024C  15CE               	bsf	_Load^(0+128),3
  5576                           
  5577                           ;OverLoad_B1.c: 76: Load.Count = 0;
  5578  024D  01EA               	clrf	(_Load^(0+128)+28)
  5579                           
  5580                           ;OverLoad_B1.c: 77: }
  5581                           ;OverLoad_B1.c: 78: } else {
  5582  024E  2A59               	goto	l731
  5583  024F                     l733:	
  5584                           
  5585                           ;OverLoad_B1.c: 79: if (Load.OK == 1) {
  5586  024F  1683               	bsf	3,5	;RP0=1, select bank1
  5587  0250  1303               	bcf	3,6	;RP1=0, select bank1
  5588  0251  1FCE               	btfss	_Load^(0+128),7
  5589  0252  2A59               	goto	l731
  5590                           
  5591                           ;OverLoad_B1.c: 80: Load.OK = 0;
  5592  0253  13CE               	bcf	_Load^(0+128),7
  5593                           
  5594                           ;OverLoad_B1.c: 81: }
  5595                           ;OverLoad_B1.c: 82: }
  5596                           ;OverLoad_B1.c: 83: } else {
  5597  0254  2A59               	goto	l731
  5598  0255                     l732:	
  5599                           
  5600                           ;OverLoad_B1.c: 84: if (Load.GO == 1) {
  5601  0255  1683               	bsf	3,5	;RP0=1, select bank1
  5602  0256  1303               	bcf	3,6	;RP1=0, select bank1
  5603  0257  18CE               	btfsc	_Load^(0+128),1
  5604  0258                     l5028:	
  5605                           
  5606                           ;OverLoad_B1.c: 85: Load.GO = 0;
  5607  0258  10CE               	bcf	_Load^(0+128),1
  5608  0259                     l731:	
  5609                           
  5610                           ;OverLoad_B1.c: 86: }
  5611                           ;OverLoad_B1.c: 87: }
  5612                           ;OverLoad_B1.c: 89: }
  5613                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
  5614  0259  1CCE               	btfss	_Load^(0+128),1
  5615  025A  2BCC               	goto	l739
  5616                           
  5617                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
  5618  025B  154E               	bsf	_Load^(0+128),2
  5619                           
  5620                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
  5621  025C  1E4E               	btfss	_Load^(0+128),4
  5622  025D  2BCA               	goto	l740
  5623                           
  5624                           ;OverLoad_B1.c: 96: Load.Time++;
  5625  025E  3001               	movlw	1
  5626  025F  07CF               	addwf	(_Load^(0+128)+1),f
  5627  0260  1803               	skipnc
  5628  0261  0AD0               	incf	((_Load+1)^(0+128)+1),f
  5629  0262  3000               	movlw	0
  5630  0263  07D0               	addwf	((_Load+1)^(0+128)+1),f
  5631                           
  5632                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
  5633  0264  3000               	movlw	0
  5634  0265  0250               	subwf	((_Load+1)^(0+128)+1),w
  5635  0266  3002               	movlw	2
  5636  0267  1903               	skipnz
  5637  0268  024F               	subwf	(_Load^(0+128)+1),w
  5638  0269  1C03               	skipc
  5639  026A  0008               	return
  5640                           
  5641                           ;OverLoad_B1.c: 98: Load.Time = 0;
  5642  026B  01CF               	clrf	(_Load^(0+128)+1)
  5643  026C  01D0               	clrf	((_Load+1)^(0+128)+1)
  5644                           
  5645                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
  5646  026D  124E               	bcf	_Load^(0+128),4
  5647                           
  5648                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
  5649  026E  3001               	movlw	1
  5650  026F  1283               	bcf	3,5	;RP0=0, select bank0
  5651  0270  1303               	bcf	3,6	;RP1=0, select bank0
  5652  0271  00E5               	movwf	Load_Main@i
  5653  0272  3000               	movlw	0
  5654  0273  00E6               	movwf	Load_Main@i+1
  5655  0274  0866               	movf	Load_Main@i+1,w
  5656  0275  3A80               	xorlw	128
  5657  0276  00FF               	movwf	127
  5658  0277  3080               	movlw	128
  5659  0278  027F               	subwf	127,w
  5660  0279  1D03               	skipz
  5661  027A  2A7D               	goto	u6305
  5662  027B  3004               	movlw	4
  5663  027C  0265               	subwf	Load_Main@i,w
  5664  027D                     u6305:	
  5665  027D  1803               	btfsc	3,0
  5666  027E  2ABB               	goto	l5050
  5667  027F                     l5044:	
  5668                           
  5669                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
  5670  027F  1283               	bcf	3,5	;RP0=0, select bank0
  5671  0280  1303               	bcf	3,6	;RP1=0, select bank0
  5672  0281  0865               	movf	Load_Main@i,w
  5673  0282  3ED8               	addlw	(_Load+10)& (0+255)
  5674  0283  0084               	movwf	4
  5675  0284  1383               	bcf	3,7	;select IRP bank1
  5676  0285  0800               	movf	0,w
  5677  0286  00E1               	movwf	??_Load_Main
  5678  0287  01E2               	clrf	??_Load_Main+1
  5679  0288  0861               	movf	??_Load_Main,w
  5680  0289  1683               	bsf	3,5	;RP0=1, select bank1
  5681  028A  1303               	bcf	3,6	;RP1=0, select bank1
  5682  028B  07D3               	addwf	(_Load^(0+128)+5),f
  5683  028C  1803               	skipnc
  5684  028D  0AD4               	incf	((_Load+1)^(0+128)+5),f
  5685  028E  1283               	bcf	3,5	;RP0=0, select bank0
  5686  028F  1303               	bcf	3,6	;RP1=0, select bank0
  5687  0290  0862               	movf	??_Load_Main+1,w
  5688  0291  1683               	bsf	3,5	;RP0=1, select bank1
  5689  0292  1303               	bcf	3,6	;RP1=0, select bank1
  5690  0293  07D4               	addwf	((_Load+1)^(0+128)+5),f
  5691                           
  5692                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
  5693  0294  1283               	bcf	3,5	;RP0=0, select bank0
  5694  0295  1303               	bcf	3,6	;RP1=0, select bank0
  5695  0296  0865               	movf	Load_Main@i,w
  5696  0297  3EDD               	addlw	(_Load+15)& (0+255)
  5697  0298  0084               	movwf	4
  5698  0299  0800               	movf	0,w
  5699  029A  00E1               	movwf	??_Load_Main
  5700  029B  01E2               	clrf	??_Load_Main+1
  5701  029C  0861               	movf	??_Load_Main,w
  5702  029D  1683               	bsf	3,5	;RP0=1, select bank1
  5703  029E  1303               	bcf	3,6	;RP1=0, select bank1
  5704  029F  07D5               	addwf	(_Load^(0+128)+7),f
  5705  02A0  1803               	skipnc
  5706  02A1  0AD6               	incf	((_Load+1)^(0+128)+7),f
  5707  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  5708  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  5709  02A4  0862               	movf	??_Load_Main+1,w
  5710  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  5711  02A6  1303               	bcf	3,6	;RP1=0, select bank1
  5712  02A7  07D6               	addwf	((_Load+1)^(0+128)+7),f
  5713  02A8  3001               	movlw	1
  5714  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  5715  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  5716  02AB  07E5               	addwf	Load_Main@i,f
  5717  02AC  1803               	skipnc
  5718  02AD  0AE6               	incf	Load_Main@i+1,f
  5719  02AE  3000               	movlw	0
  5720  02AF  07E6               	addwf	Load_Main@i+1,f
  5721  02B0  0866               	movf	Load_Main@i+1,w
  5722  02B1  3A80               	xorlw	128
  5723  02B2  00FF               	movwf	127
  5724  02B3  3080               	movlw	128
  5725  02B4  027F               	subwf	127,w
  5726  02B5  1D03               	skipz
  5727  02B6  2AB9               	goto	u6315
  5728  02B7  3004               	movlw	4
  5729  02B8  0265               	subwf	Load_Main@i,w
  5730  02B9                     u6315:	
  5731  02B9  1C03               	skipc
  5732  02BA  2A7F               	goto	l5044
  5733  02BB                     l5050:	
  5734                           
  5735                           ;OverLoad_B1.c: 104: }
  5736                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
  5737  02BB  3003               	movlw	3
  5738  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  5739  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  5740  02BE  00DA               	movwf	___lwdiv@divisor
  5741  02BF  3000               	movlw	0
  5742  02C0  00DB               	movwf	___lwdiv@divisor+1
  5743  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  5744  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  5745  02C3  0854               	movf	((_Load+1)^(0+128)+5),w
  5746  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  5747  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  5748  02C6  01DD               	clrf	___lwdiv@dividend+1
  5749  02C7  07DD               	addwf	___lwdiv@dividend+1,f
  5750  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  5751  02C9  1303               	bcf	3,6	;RP1=0, select bank1
  5752  02CA  0853               	movf	(_Load^(0+128)+5),w
  5753  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  5754  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  5755  02CD  01DC               	clrf	___lwdiv@dividend
  5756  02CE  07DC               	addwf	___lwdiv@dividend,f
  5757  02CF  158A  264A  118A   	fcall	___lwdiv
  5758  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  5759  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  5760  02D4  085B               	movf	?___lwdiv+1,w
  5761  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  5762  02D6  1303               	bcf	3,6	;RP1=0, select bank1
  5763  02D7  01D4               	clrf	((_Load+1)^(0+128)+5)
  5764  02D8  07D4               	addwf	((_Load+1)^(0+128)+5),f
  5765  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  5766  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  5767  02DB  085A               	movf	?___lwdiv,w
  5768  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  5769  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  5770  02DE  01D3               	clrf	(_Load^(0+128)+5)
  5771  02DF  07D3               	addwf	(_Load^(0+128)+5),f
  5772                           
  5773                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
  5774  02E0  3003               	movlw	3
  5775  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  5776  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  5777  02E3  00DA               	movwf	___lwdiv@divisor
  5778  02E4  3000               	movlw	0
  5779  02E5  00DB               	movwf	___lwdiv@divisor+1
  5780  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  5781  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  5782  02E8  0856               	movf	((_Load+1)^(0+128)+7),w
  5783  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  5784  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  5785  02EB  01DD               	clrf	___lwdiv@dividend+1
  5786  02EC  07DD               	addwf	___lwdiv@dividend+1,f
  5787  02ED  1683               	bsf	3,5	;RP0=1, select bank1
  5788  02EE  1303               	bcf	3,6	;RP1=0, select bank1
  5789  02EF  0855               	movf	(_Load^(0+128)+7),w
  5790  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  5791  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  5792  02F2  01DC               	clrf	___lwdiv@dividend
  5793  02F3  07DC               	addwf	___lwdiv@dividend,f
  5794  02F4  158A  264A  118A   	fcall	___lwdiv
  5795  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  5796  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  5797  02F9  085B               	movf	?___lwdiv+1,w
  5798  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  5799  02FB  1303               	bcf	3,6	;RP1=0, select bank1
  5800  02FC  01D6               	clrf	((_Load+1)^(0+128)+7)
  5801  02FD  07D6               	addwf	((_Load+1)^(0+128)+7),f
  5802  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  5803  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  5804  0300  085A               	movf	?___lwdiv,w
  5805  0301  1683               	bsf	3,5	;RP0=1, select bank1
  5806  0302  1303               	bcf	3,6	;RP1=0, select bank1
  5807  0303  01D5               	clrf	(_Load^(0+128)+7)
  5808  0304  07D5               	addwf	(_Load^(0+128)+7),f
  5809                           
  5810                           ;OverLoad_B1.c: 107: setLoad_AH_AL_Restore();
  5811  0305  158A  2486  118A   	fcall	_setLoad_AH_AL_Restore
  5812                           
  5813                           ;OverLoad_B1.c: 109: if (Load.ADH >= Load.ADL) {
  5814  0308  1683               	bsf	3,5	;RP0=1, select bank1
  5815  0309  1303               	bcf	3,6	;RP1=0, select bank1
  5816  030A  0856               	movf	((_Load+1)^(0+128)+7),w
  5817  030B  0254               	subwf	((_Load+1)^(0+128)+5),w
  5818  030C  1D03               	skipz
  5819  030D  2B10               	goto	u6325
  5820  030E  0855               	movf	(_Load^(0+128)+7),w
  5821  030F  0253               	subwf	(_Load^(0+128)+5),w
  5822  0310                     u6325:	
  5823  0310  1C03               	skipc
  5824  0311  0008               	return
  5825                           
  5826                           ;OverLoad_B1.c: 110: Load.AD = Load.ADH - Load.ADL;
  5827  0312  0355               	decf	(_Load^(0+128)+7),w
  5828  0313  3AFF               	xorlw	255
  5829  0314  0753               	addwf	(_Load^(0+128)+5),w
  5830  0315  1283               	bcf	3,5	;RP0=0, select bank0
  5831  0316  1303               	bcf	3,6	;RP1=0, select bank0
  5832  0317  00E1               	movwf	??_Load_Main
  5833  0318  0861               	movf	??_Load_Main,w
  5834  0319  1683               	bsf	3,5	;RP0=1, select bank1
  5835  031A  1303               	bcf	3,6	;RP1=0, select bank1
  5836  031B  00E2               	movwf	(_Load^(0+128)+20)
  5837                           
  5838                           ;OverLoad_B1.c: 111: Load.ADH = 0;
  5839  031C  01D3               	clrf	(_Load^(0+128)+5)
  5840  031D  01D4               	clrf	((_Load+1)^(0+128)+5)
  5841                           
  5842                           ;OverLoad_B1.c: 112: Load.ADL = 0;
  5843  031E  01D5               	clrf	(_Load^(0+128)+7)
  5844  031F  01D6               	clrf	((_Load+1)^(0+128)+7)
  5845                           
  5846                           ;OverLoad_B1.c: 114: if (Load.Run == 1) {
  5847  0320  1DCE               	btfss	_Load^(0+128),3
  5848  0321  2B80               	goto	l745
  5849                           
  5850                           ;OverLoad_B1.c: 115: if (Load.Count < 2) {
  5851  0322  3002               	movlw	2
  5852  0323  026A               	subwf	(_Load^(0+128)+28),w
  5853  0324  1803               	skipnc
  5854  0325  2B80               	goto	l745
  5855                           
  5856                           ;OverLoad_B1.c: 116: Load.Count++;
  5857  0326  3001               	movlw	1
  5858  0327  1283               	bcf	3,5	;RP0=0, select bank0
  5859  0328  1303               	bcf	3,6	;RP1=0, select bank0
  5860  0329  00E1               	movwf	??_Load_Main
  5861  032A  0861               	movf	??_Load_Main,w
  5862  032B  1683               	bsf	3,5	;RP0=1, select bank1
  5863  032C  1303               	bcf	3,6	;RP1=0, select bank1
  5864  032D  07EA               	addwf	(_Load^(0+128)+28),f
  5865                           
  5866                           ;OverLoad_B1.c: 121: Load_Status = getLight_Load_Status();
  5867  032E  158A  2344  118A   	fcall	_getLight_Load_Status
  5868  0331  1283               	bcf	3,5	;RP0=0, select bank0
  5869  0332  1303               	bcf	3,6	;RP1=0, select bank0
  5870  0333  00E1               	movwf	??_Load_Main
  5871  0334  0861               	movf	??_Load_Main,w
  5872  0335  00E4               	movwf	Load_Main@Load_Status
  5873                           
  5874                           ;OverLoad_B1.c: 123: Load.LightsCount = getMain_Lights_Count();
  5875  0336  158A  2389  118A   	fcall	_getMain_Lights_Count
  5876  0339  1283               	bcf	3,5	;RP0=0, select bank0
  5877  033A  1303               	bcf	3,6	;RP1=0, select bank0
  5878  033B  00E1               	movwf	??_Load_Main
  5879  033C  0861               	movf	??_Load_Main,w
  5880  033D  1683               	bsf	3,5	;RP0=1, select bank1
  5881  033E  1303               	bcf	3,6	;RP1=0, select bank1
  5882  033F  00ED               	movwf	(_Load^(0+128)+31)
  5883                           
  5884                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  5885  0340  086A               	movf	(_Load^(0+128)+28),w
  5886  0341  3A01               	xorlw	1
  5887  0342  1D03               	skipz
  5888  0343  2B4E               	goto	l5076
  5889                           
  5890                           ;OverLoad_B1.c: 125: Load.ErrorCountValue = 2;
  5891  0344  3002               	movlw	2
  5892  0345  1283               	bcf	3,5	;RP0=0, select bank0
  5893  0346  1303               	bcf	3,6	;RP1=0, select bank0
  5894  0347  00E1               	movwf	??_Load_Main
  5895  0348  0861               	movf	??_Load_Main,w
  5896  0349  1683               	bsf	3,5	;RP0=1, select bank1
  5897  034A  1303               	bcf	3,6	;RP1=0, select bank1
  5898  034B  00EC               	movwf	(_Load^(0+128)+30)
  5899                           
  5900                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*2);
  5901  034C  3028               	movlw	40
  5902  034D  2B57               	goto	L16
  5903  034E                     l5076:	
  5904                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  5905                           
  5906  034E  086A               	movf	(_Load^(0+128)+28),w
  5907  034F  3A02               	xorlw	2
  5908  0350  1D03               	skipz
  5909  0351  2B80               	goto	l745
  5910                           
  5911                           ;OverLoad_B1.c: 128: if (Load.LightsCount == 1) {
  5912  0352  086D               	movf	(_Load^(0+128)+31),w
  5913  0353  3A01               	xorlw	1
  5914  0354  1D03               	skipz
  5915  0355  2B5A               	goto	l5082
  5916                           
  5917                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1*2);
  5918  0356  3002               	movlw	2
  5919  0357                     L16:	
  5920  0357  00E6               	movwf	(_Load^(0+128)+24)
  5921  0358  3000               	movlw	0
  5922  0359  2B7F               	goto	L17
  5923  035A                     l5082:	
  5924                           ;OverLoad_B1.c: 130: } else {
  5925                           
  5926                           
  5927                           ;OverLoad_B1.c: 131: if (Load_Status == 0) {
  5928  035A  1283               	bcf	3,5	;RP0=0, select bank0
  5929  035B  1303               	bcf	3,6	;RP1=0, select bank0
  5930  035C  08E4               	movf	Load_Main@Load_Status,f
  5931  035D  1D03               	skipz
  5932  035E  2B72               	goto	l5086
  5933                           
  5934                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1*2) * Load.LightsCount;
  5935  035F  1683               	bsf	3,5	;RP0=1, select bank1
  5936  0360  1303               	bcf	3,6	;RP1=0, select bank1
  5937  0361  086D               	movf	(_Load^(0+128)+31),w
  5938  0362  1283               	bcf	3,5	;RP0=0, select bank0
  5939  0363  1303               	bcf	3,6	;RP1=0, select bank0
  5940  0364  00E1               	movwf	??_Load_Main
  5941  0365  01E2               	clrf	??_Load_Main+1
  5942  0366  1003               	clrc
  5943  0367  0D61               	rlf	??_Load_Main,w
  5944  0368  1683               	bsf	3,5	;RP0=1, select bank1
  5945  0369  1303               	bcf	3,6	;RP1=0, select bank1
  5946  036A  00E6               	movwf	(_Load^(0+128)+24)
  5947  036B  1283               	bcf	3,5	;RP0=0, select bank0
  5948  036C  1303               	bcf	3,6	;RP1=0, select bank0
  5949  036D  0D62               	rlf	??_Load_Main+1,w
  5950  036E  1683               	bsf	3,5	;RP0=1, select bank1
  5951  036F  1303               	bcf	3,6	;RP1=0, select bank1
  5952  0370  00E7               	movwf	((_Load+1)^(0+128)+24)
  5953                           
  5954                           ;OverLoad_B1.c: 133: } else if (Load_Status == 1) {
  5955  0371  2B80               	goto	l745
  5956  0372                     l5086:	
  5957  0372  1283               	bcf	3,5	;RP0=0, select bank0
  5958  0373  0864               	movf	Load_Main@Load_Status,w
  5959  0374  3A01               	xorlw	1
  5960  0375  1D03               	skipz
  5961  0376  2B80               	goto	l745
  5962                           
  5963                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1*2) + Load.TotalLoad;
  5964  0377  1683               	bsf	3,5	;RP0=1, select bank1
  5965  0378  1303               	bcf	3,6	;RP1=0, select bank1
  5966  0379  0857               	movf	(_Load^(0+128)+9),w
  5967  037A  3E02               	addlw	2
  5968  037B  00E6               	movwf	(_Load^(0+128)+24)
  5969  037C  3000               	movlw	0
  5970  037D  1803               	skipnc
  5971  037E  3001               	movlw	1
  5972  037F                     L17:	
  5973  037F  00E7               	movwf	(_Load^(0+128)+25)
  5974  0380                     l745:	
  5975                           
  5976                           ;OverLoad_B1.c: 135: }
  5977                           ;OverLoad_B1.c: 136: }
  5978                           ;OverLoad_B1.c: 137: }
  5979                           ;OverLoad_B1.c: 138: }
  5980                           ;OverLoad_B1.c: 139: }
  5981                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  5982  0380  1683               	bsf	3,5	;RP0=1, select bank1
  5983  0381  1303               	bcf	3,6	;RP1=0, select bank1
  5984  0382  0862               	movf	(_Load^(0+128)+20),w
  5985  0383  1283               	bcf	3,5	;RP0=0, select bank0
  5986  0384  1303               	bcf	3,6	;RP1=0, select bank0
  5987  0385  00E1               	movwf	??_Load_Main
  5988  0386  01E2               	clrf	??_Load_Main+1
  5989  0387  1683               	bsf	3,5	;RP0=1, select bank1
  5990  0388  1303               	bcf	3,6	;RP1=0, select bank1
  5991  0389  0867               	movf	((_Load+1)^(0+128)+24),w
  5992  038A  1283               	bcf	3,5	;RP0=0, select bank0
  5993  038B  1303               	bcf	3,6	;RP1=0, select bank0
  5994  038C  0262               	subwf	??_Load_Main+1,w
  5995  038D  1D03               	skipz
  5996  038E  2B95               	goto	u6405
  5997  038F  1683               	bsf	3,5	;RP0=1, select bank1
  5998  0390  1303               	bcf	3,6	;RP1=0, select bank1
  5999  0391  0866               	movf	(_Load^(0+128)+24),w
  6000  0392  1283               	bcf	3,5	;RP0=0, select bank0
  6001  0393  1303               	bcf	3,6	;RP1=0, select bank0
  6002  0394  0261               	subwf	??_Load_Main,w
  6003  0395                     u6405:	
  6004  0395  1C03               	skipc
  6005  0396  2BA4               	goto	l5098
  6006                           
  6007                           ;OverLoad_B1.c: 142: Load.ErrorCount++;
  6008  0397  3001               	movlw	1
  6009  0398  00E1               	movwf	??_Load_Main
  6010  0399  0861               	movf	??_Load_Main,w
  6011  039A  1683               	bsf	3,5	;RP0=1, select bank1
  6012  039B  1303               	bcf	3,6	;RP1=0, select bank1
  6013  039C  07EB               	addwf	(_Load^(0+128)+29),f
  6014                           
  6015                           ;OverLoad_B1.c: 143: if (Load.ErrorCount > Load.ErrorCountValue) {
  6016  039D  086B               	movf	(_Load^(0+128)+29),w
  6017  039E  026C               	subwf	(_Load^(0+128)+30),w
  6018  039F  1803               	skipnc
  6019  03A0  0008               	return
  6020                           
  6021                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
  6022  03A1  01EB               	clrf	(_Load^(0+128)+29)
  6023                           
  6024                           ;OverLoad_B1.c: 145: Load.ERROR = 1;
  6025  03A2  16CE               	bsf	_Load^(0+128),5
  6026                           
  6027                           ;OverLoad_B1.c: 167: }
  6028                           ;OverLoad_B1.c: 168: } else {
  6029  03A3  0008               	return
  6030  03A4                     l5098:	
  6031                           
  6032                           ;OverLoad_B1.c: 169: Load.ErrorCount = 0;
  6033  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  6034  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  6035  03A6  01EB               	clrf	(_Load^(0+128)+29)
  6036                           
  6037                           ;OverLoad_B1.c: 170: if (Load.Run == 1) {
  6038  03A7  1DCE               	btfss	_Load^(0+128),3
  6039  03A8  0008               	return
  6040                           
  6041                           ;OverLoad_B1.c: 171: Load.SafeCount++;
  6042  03A9  3001               	movlw	1
  6043  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  6044  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  6045  03AC  00E1               	movwf	??_Load_Main
  6046  03AD  0861               	movf	??_Load_Main,w
  6047  03AE  1683               	bsf	3,5	;RP0=1, select bank1
  6048  03AF  1303               	bcf	3,6	;RP1=0, select bank1
  6049  03B0  07EE               	addwf	(_Load^(0+128)+32),f
  6050                           
  6051                           ;OverLoad_B1.c: 172: if (Load.SafeCount >= 3) {
  6052  03B1  3003               	movlw	3
  6053  03B2  026E               	subwf	(_Load^(0+128)+32),w
  6054  03B3  1C03               	skipc
  6055  03B4  0008               	return
  6056                           
  6057                           ;OverLoad_B1.c: 173: Load.SafeCount = 0;
  6058  03B5  01EE               	clrf	(_Load^(0+128)+32)
  6059                           
  6060                           ;OverLoad_B1.c: 174: Load.OK = 1;
  6061  03B6  17CE               	bsf	_Load^(0+128),7
  6062                           
  6063                           ;OverLoad_B1.c: 175: Load.Run = 0;
  6064  03B7  11CE               	bcf	_Load^(0+128),3
  6065                           
  6066                           ;OverLoad_B1.c: 176: Load.Count = 0;
  6067  03B8  01EA               	clrf	(_Load^(0+128)+28)
  6068                           
  6069                           ;OverLoad_B1.c: 177: Load.TotalLoad = Load.AD;
  6070  03B9  0862               	movf	(_Load^(0+128)+20),w
  6071  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  6072  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  6073  03BC  00E1               	movwf	??_Load_Main
  6074  03BD  0861               	movf	??_Load_Main,w
  6075  03BE  1683               	bsf	3,5	;RP0=1, select bank1
  6076  03BF  1303               	bcf	3,6	;RP1=0, select bank1
  6077  03C0  00D7               	movwf	(_Load^(0+128)+9)
  6078                           
  6079                           ;OverLoad_B1.c: 178: Load.ErrorCountValue = 3;
  6080  03C1  3003               	movlw	3
  6081  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  6082  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  6083  03C4  00E1               	movwf	??_Load_Main
  6084  03C5  0861               	movf	??_Load_Main,w
  6085  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  6086  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  6087  03C8  00EC               	movwf	(_Load^(0+128)+30)
  6088                           
  6089                           ;OverLoad_B1.c: 181: }
  6090                           ;OverLoad_B1.c: 182: }
  6091                           ;OverLoad_B1.c: 205: }
  6092                           ;OverLoad_B1.c: 206: }
  6093                           ;OverLoad_B1.c: 207: }
  6094                           ;OverLoad_B1.c: 208: } else {
  6095  03C9  0008               	return
  6096  03CA                     l740:	
  6097                           
  6098                           ;OverLoad_B1.c: 209: Load.ADtoGO = 1;
  6099  03CA  164E               	bsf	_Load^(0+128),4
  6100                           
  6101                           ;OverLoad_B1.c: 210: }
  6102                           ;OverLoad_B1.c: 211: } else {
  6103  03CB  0008               	return
  6104  03CC                     l739:	
  6105                           
  6106                           ;OverLoad_B1.c: 213: if (Load.LightsON == 1) {
  6107  03CC  1D4E               	btfss	_Load^(0+128),2
  6108  03CD  2BE0               	goto	l5136
  6109                           
  6110                           ;OverLoad_B1.c: 214: Load.LightsON = 0;
  6111  03CE  114E               	bcf	_Load^(0+128),2
  6112                           
  6113                           ;OverLoad_B1.c: 216: Load.ADtoGO = 0;
  6114  03CF  124E               	bcf	_Load^(0+128),4
  6115                           
  6116                           ;OverLoad_B1.c: 217: Load.Time = 0;
  6117  03D0  01CF               	clrf	(_Load^(0+128)+1)
  6118  03D1  01D0               	clrf	((_Load+1)^(0+128)+1)
  6119                           
  6120                           ;OverLoad_B1.c: 218: setLoad_AH_AL_Restore();
  6121  03D2  158A  2486  118A   	fcall	_setLoad_AH_AL_Restore
  6122                           
  6123                           ;OverLoad_B1.c: 220: Load.ErrorCount = 0;
  6124  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  6125  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  6126  03D7  01EB               	clrf	(_Load^(0+128)+29)
  6127                           
  6128                           ;OverLoad_B1.c: 221: Load.SafeCount = 0;
  6129  03D8  01EE               	clrf	(_Load^(0+128)+32)
  6130                           
  6131                           ;OverLoad_B1.c: 223: Load.ADH = 0;
  6132  03D9  01D3               	clrf	(_Load^(0+128)+5)
  6133  03DA  01D4               	clrf	((_Load+1)^(0+128)+5)
  6134                           
  6135                           ;OverLoad_B1.c: 224: Load.ADL = 0;
  6136  03DB  01D5               	clrf	(_Load^(0+128)+7)
  6137  03DC  01D6               	clrf	((_Load+1)^(0+128)+7)
  6138                           
  6139                           ;OverLoad_B1.c: 230: Load.Run = 0;
  6140  03DD  11CE               	bcf	_Load^(0+128),3
  6141                           
  6142                           ;OverLoad_B1.c: 231: Load.Count = 0;
  6143  03DE  01EA               	clrf	(_Load^(0+128)+28)
  6144                           
  6145                           ;OverLoad_B1.c: 232: Load.OK = 0;
  6146  03DF  13CE               	bcf	_Load^(0+128),7
  6147  03E0                     l5136:	
  6148                           
  6149                           ;OverLoad_B1.c: 254: }
  6150                           ;OverLoad_B1.c: 255: if (Load.ERROR == 1) {
  6151  03E0  1ECE               	btfss	_Load^(0+128),5
  6152  03E1  0008               	return
  6153                           
  6154                           ;OverLoad_B1.c: 256: Load.ErrorTime++;
  6155  03E2  3001               	movlw	1
  6156  03E3  07D1               	addwf	(_Load^(0+128)+3),f
  6157  03E4  1803               	skipnc
  6158  03E5  0AD2               	incf	((_Load+1)^(0+128)+3),f
  6159  03E6  3000               	movlw	0
  6160  03E7  07D2               	addwf	((_Load+1)^(0+128)+3),f
  6161                           
  6162                           ;OverLoad_B1.c: 257: if (Load.ErrorTime >= (10000 / 20)) {
  6163  03E8  3001               	movlw	1
  6164  03E9  0252               	subwf	((_Load+1)^(0+128)+3),w
  6165  03EA  30F4               	movlw	244
  6166  03EB  1903               	skipnz
  6167  03EC  0251               	subwf	(_Load^(0+128)+3),w
  6168  03ED  1C03               	skipc
  6169  03EE  0008               	return
  6170                           
  6171                           ;OverLoad_B1.c: 258: Load.ErrorTime = 0;
  6172  03EF  01D1               	clrf	(_Load^(0+128)+3)
  6173  03F0  01D2               	clrf	((_Load+1)^(0+128)+3)
  6174                           
  6175                           ;OverLoad_B1.c: 259: Load.ERROR = 0;
  6176  03F1  12CE               	bcf	_Load^(0+128),5
  6177                           
  6178                           ;OverLoad_B1.c: 260: }
  6179                           ;OverLoad_B1.c: 261: }
  6180                           ;OverLoad_B1.c: 262: }
  6181                           ;OverLoad_B1.c: 263: } else {
  6182  03F2  0008               	return
  6183  03F3                     l729:	
  6184                           
  6185                           ;OverLoad_B1.c: 264: if (myMain.PowerON == 1) {
  6186  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  6187  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  6188  03F5  1C20               	btfss	_myMain,0
  6189  03F6  0008               	return
  6190                           
  6191                           ;OverLoad_B1.c: 265: Load.Enable = 1;
  6192  03F7  1683               	bsf	3,5	;RP0=1, select bank1
  6193  03F8  1303               	bcf	3,6	;RP1=0, select bank1
  6194  03F9  144E               	bsf	_Load^(0+128),0
  6195  03FA  0008               	return
  6196  03FB                     __end_of_Load_Main:	
  6197                           
  6198                           	psect	text30
  6199  0B89                     __ptext30:	
  6200 ;; *************** function _getMain_Lights_Count *****************
  6201 ;; Defined at:
  6202 ;;		line 466 in file "../src/Main_B1.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;		None
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  status1         1    5[COMMON] unsigned char 
  6207 ;;  count           1    4[COMMON] unsigned char 
  6208 ;; Return value:  Size  Location     Type
  6209 ;;                  1    wreg      unsigned char 
  6210 ;; Registers used:
  6211 ;;		wreg, status,2
  6212 ;; Tracked objects:
  6213 ;;		On entry : 0/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6217 ;;      Params:         0       0       0       0
  6218 ;;      Locals:         2       0       0       0
  6219 ;;      Temps:          0       0       0       0
  6220 ;;      Totals:         2       0       0       0
  6221 ;;Total ram usage:        2 bytes
  6222 ;; Hardware stack levels used:    1
  6223 ;; Hardware stack levels required when called:    2
  6224 ;; This function calls:
  6225 ;;		Nothing
  6226 ;; This function is called by:
  6227 ;;		_Load_Main
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           
  6232                           ;psect for function _getMain_Lights_Count
  6233  0B89                     _getMain_Lights_Count:	
  6234                           
  6235                           ;Main_B1.c: 467: char count = 0;
  6236                           
  6237                           ;incstack = 0
  6238                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
  6239  0B89  01F4               	clrf	getMain_Lights_Count@count
  6240                           
  6241                           ;Main_B1.c: 483: char status1 = Lights1.Loop == 1 ? 1 : 0;
  6242  0B8A  3000               	movlw	0
  6243  0B8B  1283               	bcf	3,5	;RP0=0, select bank0
  6244  0B8C  1303               	bcf	3,6	;RP1=0, select bank0
  6245  0B8D  18C8               	btfsc	_Lights1+1,1
  6246  0B8E  3001               	movlw	1
  6247  0B8F  00F5               	movwf	getMain_Lights_Count@status1
  6248                           
  6249                           ;Main_B1.c: 494: return count = status1;
  6250  0B90  0875               	movf	getMain_Lights_Count@status1,w
  6251  0B91  00F4               	movwf	getMain_Lights_Count@count
  6252  0B92  0008               	return
  6253  0B93                     __end_of_getMain_Lights_Count:	
  6254                           
  6255                           	psect	text31
  6256  0B44                     __ptext31:	
  6257 ;; *************** function _getLight_Load_Status *****************
  6258 ;; Defined at:
  6259 ;;		line 358 in file "../src/TriacRelay_B1.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;		None
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  loadstatus      1    4[COMMON] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      unsigned char 
  6266 ;; Registers used:
  6267 ;;		wreg, status,2
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6273 ;;      Params:         0       0       0       0
  6274 ;;      Locals:         1       0       0       0
  6275 ;;      Temps:          0       0       0       0
  6276 ;;      Totals:         1       0       0       0
  6277 ;;Total ram usage:        1 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:    2
  6280 ;; This function calls:
  6281 ;;		Nothing
  6282 ;; This function is called by:
  6283 ;;		_Load_Main
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           
  6288                           ;psect for function _getLight_Load_Status
  6289  0B44                     _getLight_Load_Status:	
  6290                           
  6291                           ;TriacRelay_B1.c: 359: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  6292                           
  6293                           ;incstack = 0
  6294                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  6295  0B44  3000               	movlw	0
  6296  0B45  18F7               	btfsc	_Light,1
  6297  0B46  3001               	movlw	1
  6298  0B47  00F4               	movwf	getLight_Load_Status@loadstatus
  6299                           
  6300                           ;TriacRelay_B1.c: 360: return loadstatus;
  6301  0B48  0874               	movf	getLight_Load_Status@loadstatus,w
  6302  0B49  0008               	return
  6303  0B4A                     __end_of_getLight_Load_Status:	
  6304                           
  6305                           	psect	text32
  6306  0B3E                     __ptext32:	
  6307 ;; *************** function _getLight_LoadGO *****************
  6308 ;; Defined at:
  6309 ;;		line 353 in file "../src/TriacRelay_B1.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;		None
  6312 ;; Auto vars:     Size  Location     Type
  6313 ;;  loadgo          1    4[COMMON] unsigned char 
  6314 ;; Return value:  Size  Location     Type
  6315 ;;                  1    wreg      unsigned char 
  6316 ;; Registers used:
  6317 ;;		wreg, status,2
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6323 ;;      Params:         0       0       0       0
  6324 ;;      Locals:         1       0       0       0
  6325 ;;      Temps:          0       0       0       0
  6326 ;;      Totals:         1       0       0       0
  6327 ;;Total ram usage:        1 bytes
  6328 ;; Hardware stack levels used:    1
  6329 ;; Hardware stack levels required when called:    2
  6330 ;; This function calls:
  6331 ;;		Nothing
  6332 ;; This function is called by:
  6333 ;;		_Load_Main
  6334 ;; This function uses a non-reentrant model
  6335 ;;
  6336                           
  6337                           
  6338                           ;psect for function _getLight_LoadGO
  6339  0B3E                     _getLight_LoadGO:	
  6340                           
  6341                           ;TriacRelay_B1.c: 354: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  6342                           
  6343                           ;incstack = 0
  6344                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  6345  0B3E  3000               	movlw	0
  6346  0B3F  1877               	btfsc	_Light,0
  6347  0B40  3001               	movlw	1
  6348  0B41  00F4               	movwf	getLight_LoadGO@loadgo
  6349                           
  6350                           ;TriacRelay_B1.c: 355: return loadgo;
  6351  0B42  0874               	movf	getLight_LoadGO@loadgo,w
  6352  0B43  0008               	return
  6353  0B44                     __end_of_getLight_LoadGO:	
  6354                           
  6355                           	psect	text33
  6356  0E4A                     __ptext33:	
  6357 ;; *************** function ___lwdiv *****************
  6358 ;; Defined at:
  6359 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6360 ;; Parameters:    Size  Location     Type
  6361 ;;  divisor         2    0[BANK0 ] unsigned int 
  6362 ;;  dividend        2    2[BANK0 ] unsigned int 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  quotient        2    5[BANK0 ] unsigned int 
  6365 ;;  counter         1    4[BANK0 ] unsigned char 
  6366 ;; Return value:  Size  Location     Type
  6367 ;;                  2    0[BANK0 ] unsigned int 
  6368 ;; Registers used:
  6369 ;;		wreg, status,2, status,0
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6375 ;;      Params:         0       4       0       0
  6376 ;;      Locals:         0       3       0       0
  6377 ;;      Temps:          1       0       0       0
  6378 ;;      Totals:         1       7       0       0
  6379 ;;Total ram usage:        8 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:    2
  6382 ;; This function calls:
  6383 ;;		Nothing
  6384 ;; This function is called by:
  6385 ;;		_Load_Main
  6386 ;;		_getPIR_AD
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           
  6391                           ;psect for function ___lwdiv
  6392  0E4A                     ___lwdiv:	
  6393                           
  6394                           ;incstack = 0
  6395                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6396  0E4A  1283               	bcf	3,5	;RP0=0, select bank0
  6397  0E4B  1303               	bcf	3,6	;RP1=0, select bank0
  6398  0E4C  01DF               	clrf	___lwdiv@quotient
  6399  0E4D  01E0               	clrf	___lwdiv@quotient+1
  6400  0E4E  085B               	movf	___lwdiv@divisor+1,w
  6401  0E4F  045A               	iorwf	___lwdiv@divisor,w
  6402  0E50  1903               	skipnz
  6403  0E51  2E83               	goto	l4814
  6404  0E52  01DE               	clrf	___lwdiv@counter
  6405  0E53  0ADE               	incf	___lwdiv@counter,f
  6406  0E54                     l4802:	
  6407  0E54  1BDB               	btfsc	___lwdiv@divisor+1,7
  6408  0E55  2E62               	goto	l4804
  6409  0E56  3001               	movlw	1
  6410  0E57                     u5775:	
  6411  0E57  1003               	clrc
  6412  0E58  0DDA               	rlf	___lwdiv@divisor,f
  6413  0E59  0DDB               	rlf	___lwdiv@divisor+1,f
  6414  0E5A  3EFF               	addlw	-1
  6415  0E5B  1D03               	skipz
  6416  0E5C  2E57               	goto	u5775
  6417  0E5D  3001               	movlw	1
  6418  0E5E  00F4               	movwf	??___lwdiv
  6419  0E5F  0874               	movf	??___lwdiv,w
  6420  0E60  07DE               	addwf	___lwdiv@counter,f
  6421  0E61  2E54               	goto	l4802
  6422  0E62                     l4804:	
  6423  0E62  3001               	movlw	1
  6424  0E63                     u5795:	
  6425  0E63  1003               	clrc
  6426  0E64  0DDF               	rlf	___lwdiv@quotient,f
  6427  0E65  0DE0               	rlf	___lwdiv@quotient+1,f
  6428  0E66  3EFF               	addlw	-1
  6429  0E67  1D03               	skipz
  6430  0E68  2E63               	goto	u5795
  6431  0E69  085B               	movf	___lwdiv@divisor+1,w
  6432  0E6A  025D               	subwf	___lwdiv@dividend+1,w
  6433  0E6B  1D03               	skipz
  6434  0E6C  2E6F               	goto	u5805
  6435  0E6D  085A               	movf	___lwdiv@divisor,w
  6436  0E6E  025C               	subwf	___lwdiv@dividend,w
  6437  0E6F                     u5805:	
  6438  0E6F  1C03               	skipc
  6439  0E70  2E78               	goto	l4810
  6440  0E71  085A               	movf	___lwdiv@divisor,w
  6441  0E72  02DC               	subwf	___lwdiv@dividend,f
  6442  0E73  085B               	movf	___lwdiv@divisor+1,w
  6443  0E74  1C03               	skipc
  6444  0E75  03DD               	decf	___lwdiv@dividend+1,f
  6445  0E76  02DD               	subwf	___lwdiv@dividend+1,f
  6446  0E77  145F               	bsf	___lwdiv@quotient,0
  6447  0E78                     l4810:	
  6448  0E78  3001               	movlw	1
  6449  0E79                     u5815:	
  6450  0E79  1003               	clrc
  6451  0E7A  0CDB               	rrf	___lwdiv@divisor+1,f
  6452  0E7B  0CDA               	rrf	___lwdiv@divisor,f
  6453  0E7C  3EFF               	addlw	-1
  6454  0E7D  1D03               	skipz
  6455  0E7E  2E79               	goto	u5815
  6456  0E7F  3001               	movlw	1
  6457  0E80  02DE               	subwf	___lwdiv@counter,f
  6458  0E81  1D03               	btfss	3,2
  6459  0E82  2E62               	goto	l4804
  6460  0E83                     l4814:	
  6461  0E83  0860               	movf	___lwdiv@quotient+1,w
  6462  0E84  01DB               	clrf	?___lwdiv+1
  6463  0E85  07DB               	addwf	?___lwdiv+1,f
  6464  0E86  085F               	movf	___lwdiv@quotient,w
  6465  0E87  01DA               	clrf	?___lwdiv
  6466  0E88  07DA               	addwf	?___lwdiv,f
  6467  0E89  0008               	return
  6468  0E8A                     __end_of___lwdiv:	
  6469                           
  6470                           	psect	text34
  6471  0B1E                     __ptext34:	
  6472 ;; *************** function _Load_Initialization *****************
  6473 ;; Defined at:
  6474 ;;		line 9 in file "../src/OverLoad_B1.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;		None
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;		None
  6479 ;; Return value:  Size  Location     Type
  6480 ;;		None               void
  6481 ;; Registers used:
  6482 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6488 ;;      Params:         0       0       0       0
  6489 ;;      Locals:         0       0       0       0
  6490 ;;      Temps:          0       0       0       0
  6491 ;;      Totals:         0       0       0       0
  6492 ;;Total ram usage:        0 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:    3
  6495 ;; This function calls:
  6496 ;;		_setLoad_AH_AL_Restore
  6497 ;; This function is called by:
  6498 ;;		_main
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501                           
  6502                           
  6503                           ;psect for function _Load_Initialization
  6504  0B1E                     _Load_Initialization:	
  6505                           
  6506                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6507                           
  6508                           ;incstack = 0
  6509                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6510  0B1E  158A  2486         	fcall	_setLoad_AH_AL_Restore
  6511  0B20  0008               	return
  6512  0B21                     __end_of_Load_Initialization:	
  6513                           
  6514                           	psect	text35
  6515  0C86                     __ptext35:	
  6516 ;; *************** function _setLoad_AH_AL_Restore *****************
  6517 ;; Defined at:
  6518 ;;		line 291 in file "../src/OverLoad_B1.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;		None
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;  i               1    5[COMMON] unsigned char 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;		None               void
  6525 ;; Registers used:
  6526 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6532 ;;      Params:         0       0       0       0
  6533 ;;      Locals:         1       0       0       0
  6534 ;;      Temps:          1       0       0       0
  6535 ;;      Totals:         2       0       0       0
  6536 ;;Total ram usage:        2 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:    2
  6539 ;; This function calls:
  6540 ;;		Nothing
  6541 ;; This function is called by:
  6542 ;;		_Load_Initialization
  6543 ;;		_Load_Main
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           
  6548                           ;psect for function _setLoad_AH_AL_Restore
  6549  0C86                     _setLoad_AH_AL_Restore:	
  6550                           
  6551                           ;OverLoad_B1.c: 292: char i;
  6552                           ;OverLoad_B1.c: 293: for (i = 0; i < 5; i++) {
  6553                           
  6554                           ;incstack = 0
  6555                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6556  0C86  01F5               	clrf	setLoad_AH_AL_Restore@i
  6557  0C87                     L18:	
  6558  0C87  3005               	movlw	5
  6559  0C88  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6560  0C89  1803               	btfsc	3,0
  6561  0C8A  0008               	return
  6562                           
  6563                           ;OverLoad_B1.c: 294: Load.AH[i] = 0;
  6564  0C8B  0875               	movf	setLoad_AH_AL_Restore@i,w
  6565  0C8C  3ED8               	addlw	(_Load+10)& (0+255)
  6566  0C8D  0084               	movwf	4
  6567  0C8E  1383               	bcf	3,7	;select IRP bank1
  6568  0C8F  0180               	clrf	0
  6569                           
  6570                           ;OverLoad_B1.c: 295: Load.AL[i] = 0xff;
  6571  0C90  30FF               	movlw	255
  6572  0C91  00F4               	movwf	??_setLoad_AH_AL_Restore
  6573  0C92  0875               	movf	setLoad_AH_AL_Restore@i,w
  6574  0C93  3EDD               	addlw	(_Load+15)& (0+255)
  6575  0C94  0084               	movwf	4
  6576  0C95  0874               	movf	??_setLoad_AH_AL_Restore,w
  6577  0C96  0080               	movwf	0
  6578  0C97  3001               	movlw	1
  6579  0C98  00F4               	movwf	??_setLoad_AH_AL_Restore
  6580  0C99  0874               	movf	??_setLoad_AH_AL_Restore,w
  6581  0C9A  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6582  0C9B  2C87               	goto	L18
  6583  0C9C                     __end_of_setLoad_AH_AL_Restore:	
  6584                           
  6585                           	psect	text36
  6586  0D36                     __ptext36:	
  6587 ;; *************** function _Lights_Main *****************
  6588 ;; Defined at:
  6589 ;;		line 54 in file "../src/TriacRelay_B1.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;		None
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;		None
  6594 ;; Return value:  Size  Location     Type
  6595 ;;		None               void
  6596 ;; Registers used:
  6597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6603 ;;      Params:         0       0       0       0
  6604 ;;      Locals:         0       0       0       0
  6605 ;;      Temps:          0       0       0       0
  6606 ;;      Totals:         0       0       0       0
  6607 ;;Total ram usage:        0 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    5
  6610 ;; This function calls:
  6611 ;;		_Lights_Close
  6612 ;;		_Lights_Control
  6613 ;;		_getLoad_OK
  6614 ;;		_getMain_All_Error_Status
  6615 ;;		_getMain_All_LightsStatus
  6616 ;;		_setLights_Main
  6617 ;; This function is called by:
  6618 ;;		_main
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           
  6623                           ;psect for function _Lights_Main
  6624  0D36                     _Lights_Main:	
  6625                           
  6626                           ;TriacRelay_B1.c: 67: if (Light.LoadGO == 1) {
  6627                           
  6628                           ;incstack = 0
  6629                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6630  0D36  1C77               	btfss	_Light,0
  6631  0D37  2D4C               	goto	l5154
  6632                           
  6633                           ;TriacRelay_B1.c: 68: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  6634  0D38  158A  235E  158A   	fcall	_getLoad_OK
  6635  0D3B  3A01               	xorlw	1
  6636  0D3C  1903               	skipnz
  6637  0D3D  2D4B               	goto	l1299
  6638  0D3E  3000               	movlw	0
  6639  0D3F  158A  260C  158A   	fcall	_getMain_All_Error_Status
  6640  0D42  3800               	iorlw	0
  6641  0D43  1D03               	skipz
  6642  0D44  2D4B               	goto	l1299
  6643  0D45  158A  2376  158A   	fcall	_getMain_All_LightsStatus
  6644  0D48  3800               	iorlw	0
  6645  0D49  1D03               	skipz
  6646  0D4A  2D4C               	goto	l5154
  6647  0D4B                     l1299:	
  6648                           
  6649                           ;TriacRelay_B1.c: 69: Light.LoadGO = 0;
  6650  0D4B  1077               	bcf	_Light,0
  6651  0D4C                     l5154:	
  6652                           
  6653                           ;TriacRelay_B1.c: 70: }
  6654                           ;TriacRelay_B1.c: 71: }
  6655                           ;TriacRelay_B1.c: 75: setLights_Main(1);
  6656  0D4C  3001               	movlw	1
  6657  0D4D  158A  25A8  158A   	fcall	_setLights_Main
  6658                           
  6659                           ;TriacRelay_B1.c: 76: Lights_Control(1);
  6660  0D50  3001               	movlw	1
  6661  0D51  118A  2533  158A   	fcall	_Lights_Control
  6662                           
  6663                           ;TriacRelay_B1.c: 89: Lights_Close();
  6664  0D54  158A  2413         	fcall	_Lights_Close
  6665  0D56  0008               	return
  6666  0D57                     __end_of_Lights_Main:	
  6667                           
  6668                           	psect	text37
  6669  0DA8                     __ptext37:	
  6670 ;; *************** function _setLights_Main *****************
  6671 ;; Defined at:
  6672 ;;		line 101 in file "../src/TriacRelay_B1.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  lights          1    wreg     unsigned char 
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  lights          1    3[BANK0 ] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;		None               void
  6679 ;; Registers used:
  6680 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6686 ;;      Params:         0       0       0       0
  6687 ;;      Locals:         0       1       0       0
  6688 ;;      Temps:          0       0       0       0
  6689 ;;      Totals:         0       1       0       0
  6690 ;;Total ram usage:        1 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    4
  6693 ;; This function calls:
  6694 ;;		_LightsPointSelect
  6695 ;;		_getLights_Allow_Condition
  6696 ;;		_setLights
  6697 ;; This function is called by:
  6698 ;;		_Lights_Main
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           
  6703                           ;psect for function _setLights_Main
  6704  0DA8                     _setLights_Main:	
  6705                           
  6706                           ;incstack = 0
  6707                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6708                           ;setLights_Main@lights stored from wreg
  6709  0DA8  1283               	bcf	3,5	;RP0=0, select bank0
  6710  0DA9  1303               	bcf	3,6	;RP1=0, select bank0
  6711  0DAA  00DD               	movwf	setLights_Main@lights
  6712                           
  6713                           ;TriacRelay_B1.c: 102: LightsPointSelect(lights);
  6714  0DAB  085D               	movf	setLights_Main@lights,w
  6715  0DAC  158A  237F  158A   	fcall	_LightsPointSelect
  6716                           
  6717                           ;TriacRelay_B1.c: 103: if (Lights->GO == 0) {
  6718  0DAF  0878               	movf	_Lights,w
  6719  0DB0  0084               	movwf	4
  6720  0DB1  1383               	bcf	3,7	;select IRP bank0
  6721  0DB2  1880               	btfsc	0,1
  6722  0DB3  0008               	return
  6723                           
  6724                           ;TriacRelay_B1.c: 104: if (Lights->Trigger == 1) {
  6725  0DB4  0878               	movf	_Lights,w
  6726  0DB5  0084               	movwf	4
  6727  0DB6  1D80               	btfss	0,3
  6728  0DB7  0008               	return
  6729                           
  6730                           ;TriacRelay_B1.c: 105: if (getLights_Allow_Condition(lights) == 0) {
  6731  0DB8  1283               	bcf	3,5	;RP0=0, select bank0
  6732  0DB9  1303               	bcf	3,6	;RP1=0, select bank0
  6733  0DBA  085D               	movf	setLights_Main@lights,w
  6734  0DBB  158A  249C  158A   	fcall	_getLights_Allow_Condition
  6735  0DBE  3800               	iorlw	0
  6736  0DBF  1D03               	skipz
  6737  0DC0  0008               	return
  6738                           
  6739                           ;TriacRelay_B1.c: 106: Lights->Trigger = 0;
  6740  0DC1  0878               	movf	_Lights,w
  6741  0DC2  0084               	movwf	4
  6742  0DC3  1383               	bcf	3,7	;select IRP bank0
  6743  0DC4  1180               	bcf	0,3
  6744                           
  6745                           ;TriacRelay_B1.c: 108: if (Lights->Switch == 1) {
  6746  0DC5  0878               	movf	_Lights,w
  6747  0DC6  0084               	movwf	4
  6748  0DC7  1E00               	btfss	0,4
  6749  0DC8  2DD1               	goto	l4758
  6750                           
  6751                           ;TriacRelay_B1.c: 109: setLights(lights, 1);
  6752  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
  6753  0DCA  1303               	bcf	3,6	;RP1=0, select bank0
  6754  0DCB  01DA               	clrf	setLights@status
  6755  0DCC  0ADA               	incf	setLights@status,f
  6756  0DCD  085D               	movf	setLights_Main@lights,w
  6757  0DCE  118A  27AC         	fcall	_setLights
  6758                           
  6759                           ;TriacRelay_B1.c: 110: } else {
  6760  0DD0  0008               	return
  6761  0DD1                     l4758:	
  6762                           
  6763                           ;TriacRelay_B1.c: 111: setLights(lights, 0);
  6764  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  6765  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  6766  0DD3  01DA               	clrf	setLights@status
  6767  0DD4  085D               	movf	setLights_Main@lights,w
  6768  0DD5  118A  27AC         	fcall	_setLights
  6769  0DD7  0008               	return
  6770  0DD8                     __end_of_setLights_Main:	
  6771                           
  6772                           	psect	text38
  6773  07AC                     __ptext38:	
  6774 ;; *************** function _setLights *****************
  6775 ;; Defined at:
  6776 ;;		line 119 in file "../src/TriacRelay_B1.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;  lights          1    wreg     unsigned char 
  6779 ;;  status          1    0[BANK0 ] unsigned char 
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;  lights          1    2[BANK0 ] unsigned char 
  6782 ;; Return value:  Size  Location     Type
  6783 ;;		None               void
  6784 ;; Registers used:
  6785 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6791 ;;      Params:         0       1       0       0
  6792 ;;      Locals:         0       1       0       0
  6793 ;;      Temps:          0       1       0       0
  6794 ;;      Totals:         0       3       0       0
  6795 ;;Total ram usage:        3 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    3
  6798 ;; This function calls:
  6799 ;;		_LightsPointSelect
  6800 ;;		_setLights_Line
  6801 ;; This function is called by:
  6802 ;;		_setLights_Main
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           
  6807                           ;psect for function _setLights
  6808  07AC                     _setLights:	
  6809                           
  6810                           ;incstack = 0
  6811                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6812                           ;setLights@lights stored from wreg
  6813  07AC  1283               	bcf	3,5	;RP0=0, select bank0
  6814  07AD  1303               	bcf	3,6	;RP1=0, select bank0
  6815  07AE  00DC               	movwf	setLights@lights
  6816                           
  6817                           ;TriacRelay_B1.c: 121: LightsPointSelect(lights);
  6818  07AF  085C               	movf	setLights@lights,w
  6819  07B0  158A  237F  118A   	fcall	_LightsPointSelect
  6820                           
  6821                           ;TriacRelay_B1.c: 128: Lights->GO = 1;
  6822  07B3  0878               	movf	_Lights,w
  6823  07B4  0084               	movwf	4
  6824  07B5  1383               	bcf	3,7	;select IRP bank0
  6825  07B6  1480               	bsf	0,1
  6826                           
  6827                           ;TriacRelay_B1.c: 129: if (status == 1) {
  6828  07B7  1283               	bcf	3,5	;RP0=0, select bank0
  6829  07B8  1303               	bcf	3,6	;RP1=0, select bank0
  6830  07B9  085A               	movf	setLights@status,w
  6831  07BA  3A01               	xorlw	1
  6832  07BB  1D03               	skipz
  6833  07BC  2FD8               	goto	l4544
  6834                           
  6835                           ;TriacRelay_B1.c: 135: if (Lights->Status == 0) {
  6836  07BD  0878               	movf	_Lights,w
  6837  07BE  0084               	movwf	4
  6838  07BF  1900               	btfsc	0,2
  6839  07C0  2FF8               	goto	l4552
  6840                           
  6841                           ;TriacRelay_B1.c: 136: Lights->Status = 1;
  6842  07C1  0878               	movf	_Lights,w
  6843  07C2  0084               	movwf	4
  6844  07C3  1500               	bsf	0,2
  6845                           
  6846                           ;TriacRelay_B1.c: 137: Lights->Loop = 1;
  6847  07C4  0A78               	incf	_Lights,w
  6848  07C5  0084               	movwf	4
  6849  07C6  1480               	bsf	0,1
  6850                           
  6851                           ;TriacRelay_B1.c: 138: Lights->RelayValue = 100;
  6852  07C7  3064               	movlw	100
  6853  07C8  00DB               	movwf	??_setLights
  6854  07C9  0878               	movf	_Lights,w
  6855  07CA  3E06               	addlw	6
  6856  07CB  0084               	movwf	4
  6857  07CC  085B               	movf	??_setLights,w
  6858  07CD  0080               	movwf	0
  6859                           
  6860                           ;TriacRelay_B1.c: 139: Lights->TriacValue = 130;
  6861  07CE  3082               	movlw	130
  6862  07CF  00DB               	movwf	??_setLights
  6863  07D0  0878               	movf	_Lights,w
  6864  07D1  3E04               	addlw	4
  6865  07D2  0084               	movwf	4
  6866  07D3  085B               	movf	??_setLights,w
  6867  07D4  0080               	movwf	0
  6868                           
  6869                           ;TriacRelay_B1.c: 141: Light.Load_Status = 1;
  6870  07D5  14F7               	bsf	_Light,1
  6871                           
  6872                           ;TriacRelay_B1.c: 142: setLights_Line(lights);
  6873  07D6  085C               	movf	setLights@lights,w
  6874  07D7  2FF5               	goto	L19
  6875  07D8                     l4544:	
  6876                           ;TriacRelay_B1.c: 144: }
  6877                           ;TriacRelay_B1.c: 145: } else {
  6878                           
  6879                           
  6880                           ;TriacRelay_B1.c: 146: if (Lights->Status == 1) {
  6881  07D8  0878               	movf	_Lights,w
  6882  07D9  0084               	movwf	4
  6883  07DA  1383               	bcf	3,7	;select IRP bank0
  6884  07DB  1D00               	btfss	0,2
  6885  07DC  2FF8               	goto	l4552
  6886                           
  6887                           ;TriacRelay_B1.c: 147: Lights->Status = 0;
  6888  07DD  0878               	movf	_Lights,w
  6889  07DE  0084               	movwf	4
  6890  07DF  1100               	bcf	0,2
  6891                           
  6892                           ;TriacRelay_B1.c: 148: Lights->Loop = 0;
  6893  07E0  0A78               	incf	_Lights,w
  6894  07E1  0084               	movwf	4
  6895  07E2  1080               	bcf	0,1
  6896                           
  6897                           ;TriacRelay_B1.c: 149: Lights->RelayValue = 40;
  6898  07E3  3028               	movlw	40
  6899  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  6900  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  6901  07E6  00DB               	movwf	??_setLights
  6902  07E7  0878               	movf	_Lights,w
  6903  07E8  3E06               	addlw	6
  6904  07E9  0084               	movwf	4
  6905  07EA  085B               	movf	??_setLights,w
  6906  07EB  0080               	movwf	0
  6907                           
  6908                           ;TriacRelay_B1.c: 150: Lights->TriacValue = 70;
  6909  07EC  3046               	movlw	70
  6910  07ED  00DB               	movwf	??_setLights
  6911  07EE  0878               	movf	_Lights,w
  6912  07EF  3E04               	addlw	4
  6913  07F0  0084               	movwf	4
  6914  07F1  085B               	movf	??_setLights,w
  6915  07F2  0080               	movwf	0
  6916                           
  6917                           ;TriacRelay_B1.c: 152: Light.Load_Status = 0;
  6918  07F3  10F7               	bcf	_Light,1
  6919                           
  6920                           ;TriacRelay_B1.c: 153: setLights_Line(0);
  6921  07F4  3000               	movlw	0
  6922  07F5                     L19:	
  6923  07F5  158A  23B8  118A   	fcall	_setLights_Line
  6924  07F8                     l4552:	
  6925                           
  6926                           ;TriacRelay_B1.c: 155: }
  6927                           ;TriacRelay_B1.c: 156: }
  6928                           ;TriacRelay_B1.c: 158: if (lights == 1) {
  6929  07F8  1283               	bcf	3,5	;RP0=0, select bank0
  6930  07F9  1303               	bcf	3,6	;RP1=0, select bank0
  6931  07FA  085C               	movf	setLights@lights,w
  6932  07FB  3A01               	xorlw	1
  6933  07FC  1D03               	skipz
  6934  07FD  0008               	return
  6935                           
  6936                           ;TriacRelay_B1.c: 159: RB2 = 1;
  6937  07FE  1506               	bsf	6,2	;volatile
  6938  07FF  0008               	return
  6939  0800                     __end_of_setLights:	
  6940                           
  6941                           	psect	text39
  6942  0BB8                     __ptext39:	
  6943 ;; *************** function _setLights_Line *****************
  6944 ;; Defined at:
  6945 ;;		line 241 in file "../src/TriacRelay_B1.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;  lights          1    wreg     unsigned char 
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;  lights          1    4[COMMON] unsigned char 
  6950 ;; Return value:  Size  Location     Type
  6951 ;;		None               void
  6952 ;; Registers used:
  6953 ;;		wreg
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6959 ;;      Params:         0       0       0       0
  6960 ;;      Locals:         1       0       0       0
  6961 ;;      Temps:          0       0       0       0
  6962 ;;      Totals:         1       0       0       0
  6963 ;;Total ram usage:        1 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    2
  6966 ;; This function calls:
  6967 ;;		Nothing
  6968 ;; This function is called by:
  6969 ;;		_setLights
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           
  6973                           
  6974                           ;psect for function _setLights_Line
  6975  0BB8                     _setLights_Line:	
  6976                           
  6977                           ;incstack = 0
  6978                           ; Regs used in _setLights_Line: [wreg]
  6979                           ;setLights_Line@lights stored from wreg
  6980  0BB8  00F4               	movwf	setLights_Line@lights
  6981                           
  6982                           ;TriacRelay_B1.c: 242: Light.LoadGO = 1;
  6983  0BB9  1477               	bsf	_Light,0
  6984                           
  6985                           ;TriacRelay_B1.c: 244: Lights1.Line = 0;
  6986  0BBA  1283               	bcf	3,5	;RP0=0, select bank0
  6987  0BBB  1303               	bcf	3,6	;RP1=0, select bank0
  6988  0BBC  1048               	bcf	_Lights1+1,0
  6989                           
  6990                           ;TriacRelay_B1.c: 245: if (lights == 1 && lights != 0) {
  6991  0BBD  0874               	movf	setLights_Line@lights,w
  6992  0BBE  3A01               	xorlw	1
  6993  0BBF  1D03               	skipz
  6994  0BC0  0008               	return
  6995  0BC1  0874               	movf	setLights_Line@lights,w
  6996  0BC2  1903               	btfsc	3,2
  6997  0BC3  0008               	return
  6998                           
  6999                           ;TriacRelay_B1.c: 246: Lights1.Line = 1;
  7000  0BC4  1448               	bsf	_Lights1+1,0
  7001  0BC5  0008               	return
  7002  0BC6                     __end_of_setLights_Line:	
  7003                           
  7004                           	psect	text40
  7005  0C9C                     __ptext40:	
  7006 ;; *************** function _getLights_Allow_Condition *****************
  7007 ;; Defined at:
  7008 ;;		line 320 in file "../src/TriacRelay_B1.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;  lights          1    wreg     unsigned char 
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  lights          1    0[COMMON] unsigned char 
  7013 ;;  allow           1    0[BANK0 ] unsigned char 
  7014 ;; Return value:  Size  Location     Type
  7015 ;;                  1    wreg      unsigned char 
  7016 ;; Registers used:
  7017 ;;		wreg, status,2, pclath, cstack
  7018 ;; Tracked objects:
  7019 ;;		On entry : 0/0
  7020 ;;		On exit  : 0/0
  7021 ;;		Unchanged: 0/0
  7022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7023 ;;      Params:         0       0       0       0
  7024 ;;      Locals:         0       2       0       0
  7025 ;;      Temps:          1       0       0       0
  7026 ;;      Totals:         1       2       0       0
  7027 ;;Total ram usage:        3 bytes
  7028 ;; Hardware stack levels used:    1
  7029 ;; Hardware stack levels required when called:    3
  7030 ;; This function calls:
  7031 ;;		_getLoad_OK
  7032 ;; This function is called by:
  7033 ;;		_setLights_Main
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           
  7038                           ;psect for function _getLights_Allow_Condition
  7039  0C9C                     _getLights_Allow_Condition:	
  7040                           
  7041                           ;TriacRelay_B1.c: 321: char allow = 0;
  7042                           
  7043                           ;incstack = 0
  7044                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7045  0C9C  1283               	bcf	3,5	;RP0=0, select bank0
  7046  0C9D  1303               	bcf	3,6	;RP1=0, select bank0
  7047  0C9E  01DA               	clrf	getLights_Allow_Condition@allow
  7048                           
  7049                           ;TriacRelay_B1.c: 324: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7050  0C9F  01DB               	clrf	_getLights_Allow_Condition$4633
  7051  0CA0  0ADB               	incf	_getLights_Allow_Condition$4633,f
  7052  0CA1  158A  235E  158A   	fcall	_getLoad_OK
  7053  0CA4  3800               	iorlw	0
  7054  0CA5  1903               	btfsc	3,2
  7055  0CA6  1877               	btfsc	_Light,0
  7056  0CA7  2CAB               	goto	l4524
  7057  0CA8  1283               	bcf	3,5	;RP0=0, select bank0
  7058  0CA9  1303               	bcf	3,6	;RP1=0, select bank0
  7059  0CAA  01DB               	clrf	_getLights_Allow_Condition$4633
  7060  0CAB                     l4524:	
  7061  0CAB  1283               	bcf	3,5	;RP0=0, select bank0
  7062  0CAC  1303               	bcf	3,6	;RP1=0, select bank0
  7063  0CAD  085B               	movf	_getLights_Allow_Condition$4633,w
  7064  0CAE  00F5               	movwf	??_getLights_Allow_Condition
  7065  0CAF  0875               	movf	??_getLights_Allow_Condition,w
  7066  0CB0  00DA               	movwf	getLights_Allow_Condition@allow
  7067                           
  7068                           ;TriacRelay_B1.c: 349: return allow;
  7069  0CB1  085A               	movf	getLights_Allow_Condition@allow,w
  7070  0CB2  0008               	return
  7071  0CB3                     __end_of_getLights_Allow_Condition:	
  7072                           
  7073                           	psect	text41
  7074  0B5E                     __ptext41:	
  7075 ;; *************** function _getLoad_OK *****************
  7076 ;; Defined at:
  7077 ;;		line 271 in file "../src/OverLoad_B1.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;		None
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;  ok              1    4[COMMON] unsigned char 
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  1    wreg      unsigned char 
  7084 ;; Registers used:
  7085 ;;		wreg, status,2
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7091 ;;      Params:         0       0       0       0
  7092 ;;      Locals:         1       0       0       0
  7093 ;;      Temps:          0       0       0       0
  7094 ;;      Totals:         1       0       0       0
  7095 ;;Total ram usage:        1 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    2
  7098 ;; This function calls:
  7099 ;;		Nothing
  7100 ;; This function is called by:
  7101 ;;		_Lights_Main
  7102 ;;		_getLights_Allow_Condition
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106                           
  7107                           ;psect for function _getLoad_OK
  7108  0B5E                     _getLoad_OK:	
  7109                           
  7110                           ;OverLoad_B1.c: 272: char ok = Load.OK == 1 ? 1 : 0;
  7111                           
  7112                           ;incstack = 0
  7113                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7114  0B5E  3000               	movlw	0
  7115  0B5F  1683               	bsf	3,5	;RP0=1, select bank1
  7116  0B60  1303               	bcf	3,6	;RP1=0, select bank1
  7117  0B61  1BCE               	btfsc	_Load^(0+128),7
  7118  0B62  3001               	movlw	1
  7119  0B63  00F4               	movwf	getLoad_OK@ok
  7120                           
  7121                           ;OverLoad_B1.c: 273: return ok;
  7122  0B64  0874               	movf	getLoad_OK@ok,w
  7123  0B65  0008               	return
  7124  0B66                     __end_of_getLoad_OK:	
  7125                           
  7126                           	psect	text42
  7127  0533                     __ptext42:	
  7128 ;; *************** function _Lights_Control *****************
  7129 ;; Defined at:
  7130 ;;		line 175 in file "../src/TriacRelay_B1.c"
  7131 ;; Parameters:    Size  Location     Type
  7132 ;;  lights          1    wreg     unsigned char 
  7133 ;; Auto vars:     Size  Location     Type
  7134 ;;  lights          1   12[BANK0 ] unsigned char 
  7135 ;; Return value:  Size  Location     Type
  7136 ;;		None               void
  7137 ;; Registers used:
  7138 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7139 ;; Tracked objects:
  7140 ;;		On entry : 0/0
  7141 ;;		On exit  : 0/0
  7142 ;;		Unchanged: 0/0
  7143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7144 ;;      Params:         0       0       0       0
  7145 ;;      Locals:         0       3       0       0
  7146 ;;      Temps:          0       2       0       0
  7147 ;;      Totals:         0       5       0       0
  7148 ;;Total ram usage:        5 bytes
  7149 ;; Hardware stack levels used:    1
  7150 ;; Hardware stack levels required when called:    3
  7151 ;; This function calls:
  7152 ;;		_LightsPointSelect
  7153 ;;		___awdiv
  7154 ;; This function is called by:
  7155 ;;		_Lights_Main
  7156 ;; This function uses a non-reentrant model
  7157 ;;
  7158                           
  7159                           
  7160                           ;psect for function _Lights_Control
  7161  0533                     _Lights_Control:	
  7162                           
  7163                           ;incstack = 0
  7164                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7165                           ;Lights_Control@lights stored from wreg
  7166  0533  1283               	bcf	3,5	;RP0=0, select bank0
  7167  0534  1303               	bcf	3,6	;RP1=0, select bank0
  7168  0535  00E6               	movwf	Lights_Control@lights
  7169                           
  7170                           ;TriacRelay_B1.c: 176: LightsPointSelect(lights);
  7171  0536  0866               	movf	Lights_Control@lights,w
  7172  0537  158A  237F  118A   	fcall	_LightsPointSelect
  7173                           
  7174                           ;TriacRelay_B1.c: 177: if (Lights->GO == 1) {
  7175  053A  0878               	movf	_Lights,w
  7176  053B  0084               	movwf	4
  7177  053C  1383               	bcf	3,7	;select IRP bank0
  7178  053D  1C80               	btfss	0,1
  7179  053E  0008               	return
  7180                           
  7181                           ;TriacRelay_B1.c: 178: Lights->Time++;
  7182  053F  3001               	movlw	1
  7183  0540  1283               	bcf	3,5	;RP0=0, select bank0
  7184  0541  1303               	bcf	3,6	;RP1=0, select bank0
  7185  0542  00E2               	movwf	??_Lights_Control
  7186  0543  0878               	movf	_Lights,w
  7187  0544  3E02               	addlw	2
  7188  0545  0084               	movwf	4
  7189  0546  0862               	movf	??_Lights_Control,w
  7190  0547  0780               	addwf	0,f
  7191                           
  7192                           ;TriacRelay_B1.c: 179: if (Lights->Time >= (Lights->RelayValue / 20) && Lights->RelaySet
      +                           == 0) {
  7193  0548  3014               	movlw	20
  7194  0549  00DA               	movwf	___awdiv@divisor
  7195  054A  3000               	movlw	0
  7196  054B  00DB               	movwf	___awdiv@divisor+1
  7197  054C  0878               	movf	_Lights,w
  7198  054D  3E06               	addlw	6
  7199  054E  0084               	movwf	4
  7200  054F  0800               	movf	0,w
  7201  0550  00E2               	movwf	??_Lights_Control
  7202  0551  01E3               	clrf	??_Lights_Control+1
  7203  0552  0862               	movf	??_Lights_Control,w
  7204  0553  00DC               	movwf	___awdiv@dividend
  7205  0554  0863               	movf	??_Lights_Control+1,w
  7206  0555  00DD               	movwf	___awdiv@dividend+1
  7207  0556  158A  26CC  118A   	fcall	___awdiv
  7208  0559  0878               	movf	_Lights,w
  7209  055A  3E02               	addlw	2
  7210  055B  0084               	movwf	4
  7211  055C  1283               	bcf	3,5	;RP0=0, select bank0
  7212  055D  1303               	bcf	3,6	;RP1=0, select bank0
  7213  055E  085B               	movf	?___awdiv+1,w
  7214  055F  3A80               	xorlw	128
  7215  0560  3C80               	sublw	128
  7216  0561  1D03               	skipz
  7217  0562  2D66               	goto	u5685
  7218  0563  085A               	movf	?___awdiv,w
  7219  0564  1383               	bcf	3,7	;select IRP bank0
  7220  0565  0200               	subwf	0,w
  7221  0566                     u5685:	
  7222  0566  1C03               	skipc
  7223  0567  2D82               	goto	l4776
  7224  0568  0878               	movf	_Lights,w
  7225  0569  0084               	movwf	4
  7226  056A  1383               	bcf	3,7	;select IRP bank0
  7227  056B  1B80               	btfsc	0,7
  7228  056C  2D82               	goto	l4776
  7229                           
  7230                           ;TriacRelay_B1.c: 180: Lights->RelaySet = 1;
  7231  056D  0878               	movf	_Lights,w
  7232  056E  0084               	movwf	4
  7233  056F  1780               	bsf	0,7
  7234                           
  7235                           ;TriacRelay_B1.c: 182: if (lights == 1) {
  7236  0570  1283               	bcf	3,5	;RP0=0, select bank0
  7237  0571  1303               	bcf	3,6	;RP1=0, select bank0
  7238  0572  0866               	movf	Lights_Control@lights,w
  7239  0573  3A01               	xorlw	1
  7240  0574  1D03               	skipz
  7241  0575  0008               	return
  7242                           
  7243                           ;TriacRelay_B1.c: 183: RA4 = Lights->Status == 1 ? 1 : 0;
  7244  0576  0878               	movf	_Lights,w
  7245  0577  0084               	movwf	4
  7246  0578  1D00               	btfss	0,2
  7247  0579  2D7E               	goto	u5710
  7248  057A  1283               	bcf	3,5	;RP0=0, select bank0
  7249  057B  1303               	bcf	3,6	;RP1=0, select bank0
  7250  057C  1605               	bsf	5,4	;volatile
  7251  057D  0008               	return
  7252  057E                     u5710:	
  7253  057E  1283               	bcf	3,5	;RP0=0, select bank0
  7254  057F  1303               	bcf	3,6	;RP1=0, select bank0
  7255  0580  1205               	bcf	5,4	;volatile
  7256                           
  7257                           ;TriacRelay_B1.c: 184: }
  7258                           ;TriacRelay_B1.c: 197: } else if (Lights->Time >= (Lights->TriacValue / 20)) {
  7259  0581  0008               	return
  7260  0582                     l4776:	
  7261  0582  3014               	movlw	20
  7262  0583  1283               	bcf	3,5	;RP0=0, select bank0
  7263  0584  1303               	bcf	3,6	;RP1=0, select bank0
  7264  0585  00DA               	movwf	___awdiv@divisor
  7265  0586  3000               	movlw	0
  7266  0587  00DB               	movwf	___awdiv@divisor+1
  7267  0588  0878               	movf	_Lights,w
  7268  0589  3E04               	addlw	4
  7269  058A  0084               	movwf	4
  7270  058B  1383               	bcf	3,7	;select IRP bank0
  7271  058C  0800               	movf	0,w
  7272  058D  00E2               	movwf	??_Lights_Control
  7273  058E  01E3               	clrf	??_Lights_Control+1
  7274  058F  0862               	movf	??_Lights_Control,w
  7275  0590  00DC               	movwf	___awdiv@dividend
  7276  0591  0863               	movf	??_Lights_Control+1,w
  7277  0592  00DD               	movwf	___awdiv@dividend+1
  7278  0593  158A  26CC  118A   	fcall	___awdiv
  7279  0596  0878               	movf	_Lights,w
  7280  0597  3E02               	addlw	2
  7281  0598  0084               	movwf	4
  7282  0599  1283               	bcf	3,5	;RP0=0, select bank0
  7283  059A  1303               	bcf	3,6	;RP1=0, select bank0
  7284  059B  085B               	movf	?___awdiv+1,w
  7285  059C  3A80               	xorlw	128
  7286  059D  3C80               	sublw	128
  7287  059E  1D03               	skipz
  7288  059F  2DA3               	goto	u5735
  7289  05A0  085A               	movf	?___awdiv,w
  7290  05A1  1383               	bcf	3,7	;select IRP bank0
  7291  05A2  0200               	subwf	0,w
  7292  05A3                     u5735:	
  7293  05A3  1C03               	skipc
  7294  05A4  0008               	return
  7295                           
  7296                           ;TriacRelay_B1.c: 198: Lights->Time = 0;
  7297  05A5  0878               	movf	_Lights,w
  7298  05A6  3E02               	addlw	2
  7299  05A7  0084               	movwf	4
  7300  05A8  1383               	bcf	3,7	;select IRP bank0
  7301  05A9  0180               	clrf	0
  7302                           
  7303                           ;TriacRelay_B1.c: 199: Lights->GO = 0;
  7304  05AA  0878               	movf	_Lights,w
  7305  05AB  0084               	movwf	4
  7306  05AC  1080               	bcf	0,1
  7307                           
  7308                           ;TriacRelay_B1.c: 200: Lights->RelaySet = 0;
  7309  05AD  0878               	movf	_Lights,w
  7310  05AE  0084               	movwf	4
  7311  05AF  1380               	bcf	0,7
  7312                           
  7313                           ;TriacRelay_B1.c: 203: LightsControl.Detect = Lights->Status == 0 ? 1 : LightsControl.De
      +                          tect;
  7314  05B0  0878               	movf	_Lights,w
  7315  05B1  0084               	movwf	4
  7316  05B2  1D00               	btfss	0,2
  7317  05B3  2DBE               	goto	l4788
  7318  05B4  0879               	movf	_LightsControl,w
  7319  05B5  3901               	andlw	1
  7320  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  7321  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  7322  05B8  00E2               	movwf	??_Lights_Control
  7323  05B9  01E3               	clrf	??_Lights_Control+1
  7324  05BA  0862               	movf	??_Lights_Control,w
  7325  05BB  00E4               	movwf	_Lights_Control$4611
  7326  05BC  0863               	movf	??_Lights_Control+1,w
  7327  05BD  2DC3               	goto	L20
  7328  05BE                     l4788:	
  7329  05BE  3001               	movlw	1
  7330  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  7331  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  7332  05C1  00E4               	movwf	_Lights_Control$4611
  7333  05C2  3000               	movlw	0
  7334  05C3                     L20:	
  7335  05C3  00E5               	movwf	_Lights_Control$4611+1
  7336  05C4  0864               	movf	_Lights_Control$4611,w
  7337  05C5  1079               	bcf	_LightsControl,0
  7338  05C6  1D03               	skipz
  7339  05C7  1479               	bsf	_LightsControl,0
  7340                           
  7341                           ;TriacRelay_B1.c: 207: if (lights == 1) {
  7342  05C8  0866               	movf	Lights_Control@lights,w
  7343  05C9  3A01               	xorlw	1
  7344  05CA  1D03               	skipz
  7345  05CB  0008               	return
  7346                           
  7347                           ;TriacRelay_B1.c: 208: RB2 = 0;
  7348  05CC  1106               	bcf	6,2	;volatile
  7349  05CD  0008               	return
  7350  05CE                     __end_of_Lights_Control:	
  7351                           
  7352                           	psect	text43
  7353  0ECC                     __ptext43:	
  7354 ;; *************** function ___awdiv *****************
  7355 ;; Defined at:
  7356 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;  divisor         2    0[BANK0 ] int 
  7359 ;;  dividend        2    2[BANK0 ] int 
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;  quotient        2    6[BANK0 ] int 
  7362 ;;  sign            1    5[BANK0 ] unsigned char 
  7363 ;;  counter         1    4[BANK0 ] unsigned char 
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  2    0[BANK0 ] int 
  7366 ;; Registers used:
  7367 ;;		wreg, status,2, status,0
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7373 ;;      Params:         0       4       0       0
  7374 ;;      Locals:         0       4       0       0
  7375 ;;      Temps:          1       0       0       0
  7376 ;;      Totals:         1       8       0       0
  7377 ;;Total ram usage:        9 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    2
  7380 ;; This function calls:
  7381 ;;		Nothing
  7382 ;; This function is called by:
  7383 ;;		_setTemp_Main
  7384 ;;		_getPIR_AD
  7385 ;;		_Lights_Control
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function ___awdiv
  7391  0ECC                     ___awdiv:	
  7392                           
  7393                           ;incstack = 0
  7394                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7395  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  7396  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  7397  0ECE  01DF               	clrf	___awdiv@sign
  7398  0ECF  1FDB               	btfss	___awdiv@divisor+1,7
  7399  0ED0  2ED8               	goto	l4564
  7400  0ED1  09DA               	comf	___awdiv@divisor,f
  7401  0ED2  09DB               	comf	___awdiv@divisor+1,f
  7402  0ED3  0ADA               	incf	___awdiv@divisor,f
  7403  0ED4  1903               	skipnz
  7404  0ED5  0ADB               	incf	___awdiv@divisor+1,f
  7405  0ED6  01DF               	clrf	___awdiv@sign
  7406  0ED7  0ADF               	incf	___awdiv@sign,f
  7407  0ED8                     l4564:	
  7408  0ED8  1FDD               	btfss	___awdiv@dividend+1,7
  7409  0ED9  2EE3               	goto	l4570
  7410  0EDA  09DC               	comf	___awdiv@dividend,f
  7411  0EDB  09DD               	comf	___awdiv@dividend+1,f
  7412  0EDC  0ADC               	incf	___awdiv@dividend,f
  7413  0EDD  1903               	skipnz
  7414  0EDE  0ADD               	incf	___awdiv@dividend+1,f
  7415  0EDF  3001               	movlw	1
  7416  0EE0  00F4               	movwf	??___awdiv
  7417  0EE1  0874               	movf	??___awdiv,w
  7418  0EE2  06DF               	xorwf	___awdiv@sign,f
  7419  0EE3                     l4570:	
  7420  0EE3  01E0               	clrf	___awdiv@quotient
  7421  0EE4  01E1               	clrf	___awdiv@quotient+1
  7422  0EE5  085B               	movf	___awdiv@divisor+1,w
  7423  0EE6  045A               	iorwf	___awdiv@divisor,w
  7424  0EE7  1903               	skipnz
  7425  0EE8  2F1A               	goto	l4592
  7426  0EE9  01DE               	clrf	___awdiv@counter
  7427  0EEA  0ADE               	incf	___awdiv@counter,f
  7428  0EEB                     l4580:	
  7429  0EEB  1BDB               	btfsc	___awdiv@divisor+1,7
  7430  0EEC  2EF9               	goto	l4582
  7431  0EED  3001               	movlw	1
  7432  0EEE                     u5295:	
  7433  0EEE  1003               	clrc
  7434  0EEF  0DDA               	rlf	___awdiv@divisor,f
  7435  0EF0  0DDB               	rlf	___awdiv@divisor+1,f
  7436  0EF1  3EFF               	addlw	-1
  7437  0EF2  1D03               	skipz
  7438  0EF3  2EEE               	goto	u5295
  7439  0EF4  3001               	movlw	1
  7440  0EF5  00F4               	movwf	??___awdiv
  7441  0EF6  0874               	movf	??___awdiv,w
  7442  0EF7  07DE               	addwf	___awdiv@counter,f
  7443  0EF8  2EEB               	goto	l4580
  7444  0EF9                     l4582:	
  7445  0EF9  3001               	movlw	1
  7446  0EFA                     u5315:	
  7447  0EFA  1003               	clrc
  7448  0EFB  0DE0               	rlf	___awdiv@quotient,f
  7449  0EFC  0DE1               	rlf	___awdiv@quotient+1,f
  7450  0EFD  3EFF               	addlw	-1
  7451  0EFE  1D03               	skipz
  7452  0EFF  2EFA               	goto	u5315
  7453  0F00  085B               	movf	___awdiv@divisor+1,w
  7454  0F01  025D               	subwf	___awdiv@dividend+1,w
  7455  0F02  1D03               	skipz
  7456  0F03  2F06               	goto	u5325
  7457  0F04  085A               	movf	___awdiv@divisor,w
  7458  0F05  025C               	subwf	___awdiv@dividend,w
  7459  0F06                     u5325:	
  7460  0F06  1C03               	skipc
  7461  0F07  2F0F               	goto	l4588
  7462  0F08  085A               	movf	___awdiv@divisor,w
  7463  0F09  02DC               	subwf	___awdiv@dividend,f
  7464  0F0A  085B               	movf	___awdiv@divisor+1,w
  7465  0F0B  1C03               	skipc
  7466  0F0C  03DD               	decf	___awdiv@dividend+1,f
  7467  0F0D  02DD               	subwf	___awdiv@dividend+1,f
  7468  0F0E  1460               	bsf	___awdiv@quotient,0
  7469  0F0F                     l4588:	
  7470  0F0F  3001               	movlw	1
  7471  0F10                     u5335:	
  7472  0F10  1003               	clrc
  7473  0F11  0CDB               	rrf	___awdiv@divisor+1,f
  7474  0F12  0CDA               	rrf	___awdiv@divisor,f
  7475  0F13  3EFF               	addlw	-1
  7476  0F14  1D03               	skipz
  7477  0F15  2F10               	goto	u5335
  7478  0F16  3001               	movlw	1
  7479  0F17  02DE               	subwf	___awdiv@counter,f
  7480  0F18  1D03               	btfss	3,2
  7481  0F19  2EF9               	goto	l4582
  7482  0F1A                     l4592:	
  7483  0F1A  085F               	movf	___awdiv@sign,w
  7484  0F1B  1903               	btfsc	3,2
  7485  0F1C  2F22               	goto	l4596
  7486  0F1D  09E0               	comf	___awdiv@quotient,f
  7487  0F1E  09E1               	comf	___awdiv@quotient+1,f
  7488  0F1F  0AE0               	incf	___awdiv@quotient,f
  7489  0F20  1903               	skipnz
  7490  0F21  0AE1               	incf	___awdiv@quotient+1,f
  7491  0F22                     l4596:	
  7492  0F22  0861               	movf	___awdiv@quotient+1,w
  7493  0F23  01DB               	clrf	?___awdiv+1
  7494  0F24  07DB               	addwf	?___awdiv+1,f
  7495  0F25  0860               	movf	___awdiv@quotient,w
  7496  0F26  01DA               	clrf	?___awdiv
  7497  0F27  07DA               	addwf	?___awdiv,f
  7498  0F28  0008               	return
  7499  0F29                     __end_of___awdiv:	
  7500                           
  7501                           	psect	text44
  7502  0C13                     __ptext44:	
  7503 ;; *************** function _Lights_Close *****************
  7504 ;; Defined at:
  7505 ;;		line 93 in file "../src/TriacRelay_B1.c"
  7506 ;; Parameters:    Size  Location     Type
  7507 ;;		None
  7508 ;; Auto vars:     Size  Location     Type
  7509 ;;		None
  7510 ;; Return value:  Size  Location     Type
  7511 ;;		None               void
  7512 ;; Registers used:
  7513 ;;		wreg, status,2, status,0, pclath, cstack
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7519 ;;      Params:         0       0       0       0
  7520 ;;      Locals:         0       0       0       0
  7521 ;;      Temps:          1       0       0       0
  7522 ;;      Totals:         1       0       0       0
  7523 ;;Total ram usage:        1 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:    3
  7526 ;; This function calls:
  7527 ;;		_getMain_All_LightsStatus
  7528 ;; This function is called by:
  7529 ;;		_Lights_Main
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           
  7534                           ;psect for function _Lights_Close
  7535  0C13                     _Lights_Close:	
  7536                           
  7537                           ;TriacRelay_B1.c: 94: if (LightsControl.Detect == 1) {
  7538                           
  7539                           ;incstack = 0
  7540                           ; Regs used in _Lights_Close: [wreg+status,2+status,0+pclath+cstack]
  7541  0C13  1C79               	btfss	_LightsControl,0
  7542  0C14  0008               	return
  7543                           
  7544                           ;TriacRelay_B1.c: 95: LightsControl.Detect = 0;
  7545  0C15  1079               	bcf	_LightsControl,0
  7546                           
  7547                           ;TriacRelay_B1.c: 96: LightsControl.LoadGO = getMain_All_LightsStatus() == 0 ? 0 : 1;
  7548  0C16  158A  2376         	fcall	_getMain_All_LightsStatus
  7549  0C18  3800               	iorlw	0
  7550  0C19  3000               	movlw	0
  7551  0C1A  1D03               	skipz
  7552  0C1B  3001               	movlw	1
  7553  0C1C  00F5               	movwf	??_Lights_Close
  7554  0C1D  0DF5               	rlf	??_Lights_Close,f
  7555  0C1E  0879               	movf	_LightsControl,w
  7556  0C1F  0675               	xorwf	??_Lights_Close,w
  7557  0C20  39FD               	andlw	-3
  7558  0C21  0675               	xorwf	??_Lights_Close,w
  7559  0C22  00F9               	movwf	_LightsControl
  7560  0C23  0008               	return
  7561  0C24                     __end_of_Lights_Close:	
  7562                           
  7563                           	psect	text45
  7564  0B76                     __ptext45:	
  7565 ;; *************** function _getMain_All_LightsStatus *****************
  7566 ;; Defined at:
  7567 ;;		line 374 in file "../src/Main_B1.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;		None
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  status          1    4[COMMON] unsigned char 
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  1    wreg      unsigned char 
  7574 ;; Registers used:
  7575 ;;		wreg, status,2
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7581 ;;      Params:         0       0       0       0
  7582 ;;      Locals:         1       0       0       0
  7583 ;;      Temps:          0       0       0       0
  7584 ;;      Totals:         1       0       0       0
  7585 ;;Total ram usage:        1 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    2
  7588 ;; This function calls:
  7589 ;;		Nothing
  7590 ;; This function is called by:
  7591 ;;		_Load_Main
  7592 ;;		_setTemp_Main
  7593 ;;		_Lights_Main
  7594 ;;		_Lights_Close
  7595 ;; This function uses a non-reentrant model
  7596 ;;
  7597                           
  7598                           
  7599                           ;psect for function _getMain_All_LightsStatus
  7600  0B76                     _getMain_All_LightsStatus:	
  7601                           
  7602                           ;Main_B1.c: 375: char status = 0;
  7603                           
  7604                           ;incstack = 0
  7605                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
  7606  0B76  01F4               	clrf	getMain_All_LightsStatus@status
  7607                           
  7608                           ;Main_B1.c: 379: status = Lights1.Status == 1 ? 1 : 0;
  7609  0B77  3000               	movlw	0
  7610  0B78  1283               	bcf	3,5	;RP0=0, select bank0
  7611  0B79  1303               	bcf	3,6	;RP1=0, select bank0
  7612  0B7A  1947               	btfsc	_Lights1,2
  7613  0B7B  3001               	movlw	1
  7614  0B7C  00F4               	movwf	getMain_All_LightsStatus@status
  7615                           
  7616                           ;Main_B1.c: 421: return status;
  7617  0B7D  0874               	movf	getMain_All_LightsStatus@status,w
  7618  0B7E  0008               	return
  7619  0B7F                     __end_of_getMain_All_LightsStatus:	
  7620                           
  7621                           	psect	text46
  7622  0B31                     __ptext46:	
  7623 ;; *************** function _Lights_Initialization *****************
  7624 ;; Defined at:
  7625 ;;		line 34 in file "../src/TriacRelay_B1.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;		None
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;		None
  7630 ;; Return value:  Size  Location     Type
  7631 ;;		None               void
  7632 ;; Registers used:
  7633 ;;		wreg, status,2, status,0, pclath, cstack
  7634 ;; Tracked objects:
  7635 ;;		On entry : 0/0
  7636 ;;		On exit  : 0/0
  7637 ;;		Unchanged: 0/0
  7638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7639 ;;      Params:         0       0       0       0
  7640 ;;      Locals:         0       0       0       0
  7641 ;;      Temps:          0       0       0       0
  7642 ;;      Totals:         0       0       0       0
  7643 ;;Total ram usage:        0 bytes
  7644 ;; Hardware stack levels used:    1
  7645 ;; Hardware stack levels required when called:    4
  7646 ;; This function calls:
  7647 ;;		_setLights_Initialization
  7648 ;; This function is called by:
  7649 ;;		_main
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           
  7654                           ;psect for function _Lights_Initialization
  7655  0B31                     _Lights_Initialization:	
  7656                           
  7657                           ;TriacRelay_B1.c: 36: setLights_Initialization(1);
  7658                           
  7659                           ;incstack = 0
  7660                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7661  0B31  3001               	movlw	1
  7662  0B32  158A  2350         	fcall	_setLights_Initialization
  7663  0B34  0008               	return
  7664  0B35                     __end_of_Lights_Initialization:	
  7665                           
  7666                           	psect	text47
  7667  0B50                     __ptext47:	
  7668 ;; *************** function _setLights_Initialization *****************
  7669 ;; Defined at:
  7670 ;;		line 49 in file "../src/TriacRelay_B1.c"
  7671 ;; Parameters:    Size  Location     Type
  7672 ;;  lights          1    wreg     unsigned char 
  7673 ;; Auto vars:     Size  Location     Type
  7674 ;;  lights          1    0[BANK0 ] unsigned char 
  7675 ;; Return value:  Size  Location     Type
  7676 ;;		None               void
  7677 ;; Registers used:
  7678 ;;		wreg, status,2, status,0, pclath, cstack
  7679 ;; Tracked objects:
  7680 ;;		On entry : 0/0
  7681 ;;		On exit  : 0/0
  7682 ;;		Unchanged: 0/0
  7683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7684 ;;      Params:         0       0       0       0
  7685 ;;      Locals:         0       1       0       0
  7686 ;;      Temps:          0       0       0       0
  7687 ;;      Totals:         0       1       0       0
  7688 ;;Total ram usage:        1 bytes
  7689 ;; Hardware stack levels used:    1
  7690 ;; Hardware stack levels required when called:    3
  7691 ;; This function calls:
  7692 ;;		_LightsPointSelect
  7693 ;; This function is called by:
  7694 ;;		_Lights_Initialization
  7695 ;; This function uses a non-reentrant model
  7696 ;;
  7697                           
  7698                           
  7699                           ;psect for function _setLights_Initialization
  7700  0B50                     _setLights_Initialization:	
  7701                           
  7702                           ;incstack = 0
  7703                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7704                           ;setLights_Initialization@lights stored from wreg
  7705  0B50  1283               	bcf	3,5	;RP0=0, select bank0
  7706  0B51  1303               	bcf	3,6	;RP1=0, select bank0
  7707  0B52  00DA               	movwf	setLights_Initialization@lights
  7708                           
  7709                           ;TriacRelay_B1.c: 50: LightsPointSelect(lights);
  7710  0B53  085A               	movf	setLights_Initialization@lights,w
  7711  0B54  158A  237F         	fcall	_LightsPointSelect
  7712  0B56  0008               	return
  7713  0B57                     __end_of_setLights_Initialization:	
  7714                           
  7715                           	psect	text48
  7716  0B1B                     __ptext48:	
  7717 ;; *************** function _LED_Main *****************
  7718 ;; Defined at:
  7719 ;;		line 47 in file "../src/LED_B1.c"
  7720 ;; Parameters:    Size  Location     Type
  7721 ;;		None
  7722 ;; Auto vars:     Size  Location     Type
  7723 ;;		None
  7724 ;; Return value:  Size  Location     Type
  7725 ;;		None               void
  7726 ;; Registers used:
  7727 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7728 ;; Tracked objects:
  7729 ;;		On entry : 0/0
  7730 ;;		On exit  : 0/0
  7731 ;;		Unchanged: 0/0
  7732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7733 ;;      Params:         0       0       0       0
  7734 ;;      Locals:         0       0       0       0
  7735 ;;      Temps:          0       0       0       0
  7736 ;;      Totals:         0       0       0       0
  7737 ;;Total ram usage:        0 bytes
  7738 ;; Hardware stack levels used:    1
  7739 ;; Hardware stack levels required when called:    5
  7740 ;; This function calls:
  7741 ;;		_setPIRLED_Main
  7742 ;; This function is called by:
  7743 ;;		_main
  7744 ;; This function uses a non-reentrant model
  7745 ;;
  7746                           
  7747                           
  7748                           ;psect for function _LED_Main
  7749  0B1B                     _LED_Main:	
  7750                           
  7751                           ;LED_B1.c: 50: setPIRLED_Main();
  7752                           
  7753                           ;incstack = 0
  7754                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7755  0B1B  118A  273B         	fcall	_setPIRLED_Main
  7756  0B1D  0008               	return
  7757  0B1E                     __end_of_LED_Main:	
  7758                           
  7759                           	psect	text49
  7760  073B                     __ptext49:	
  7761 ;; *************** function _setPIRLED_Main *****************
  7762 ;; Defined at:
  7763 ;;		line 253 in file "../src/LED_B1.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;		None
  7766 ;; Auto vars:     Size  Location     Type
  7767 ;;  count           1    3[BANK0 ] unsigned char 
  7768 ;; Return value:  Size  Location     Type
  7769 ;;		None               void
  7770 ;; Registers used:
  7771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7772 ;; Tracked objects:
  7773 ;;		On entry : 0/0
  7774 ;;		On exit  : 0/0
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7777 ;;      Params:         0       0       0       0
  7778 ;;      Locals:         0       1       0       0
  7779 ;;      Temps:          0       1       0       0
  7780 ;;      Totals:         0       2       0       0
  7781 ;;Total ram usage:        2 bytes
  7782 ;; Hardware stack levels used:    1
  7783 ;; Hardware stack levels required when called:    4
  7784 ;; This function calls:
  7785 ;;		_setLED
  7786 ;; This function is called by:
  7787 ;;		_LED_Main
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           
  7792                           ;psect for function _setPIRLED_Main
  7793  073B                     _setPIRLED_Main:	
  7794                           
  7795                           ;LED_B1.c: 254: char count;
  7796                           ;LED_B1.c: 255: if (PIRLED.GO == 1) {
  7797                           
  7798                           ;incstack = 0
  7799                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7800  073B  1283               	bcf	3,5	;RP0=0, select bank0
  7801  073C  1303               	bcf	3,6	;RP1=0, select bank0
  7802  073D  1C30               	btfss	_PIRLED,0
  7803  073E  0008               	return
  7804                           
  7805                           ;LED_B1.c: 256: PIRLED.Time++;
  7806  073F  3001               	movlw	1
  7807  0740  07B2               	addwf	_PIRLED+2,f
  7808  0741  1803               	skipnc
  7809  0742  0AB3               	incf	_PIRLED+3,f
  7810  0743  3000               	movlw	0
  7811  0744  07B3               	addwf	_PIRLED+3,f
  7812                           
  7813                           ;LED_B1.c: 257: if (PIRLED.Time >= 500 / 20) {
  7814  0745  3000               	movlw	0
  7815  0746  0233               	subwf	_PIRLED+3,w
  7816  0747  3019               	movlw	25
  7817  0748  1903               	skipnz
  7818  0749  0232               	subwf	_PIRLED+2,w
  7819  074A  1C03               	skipc
  7820  074B  0008               	return
  7821                           
  7822                           ;LED_B1.c: 258: PIRLED.Time = 0;
  7823  074C  01B2               	clrf	_PIRLED+2
  7824  074D  01B3               	clrf	_PIRLED+3
  7825                           
  7826                           ;LED_B1.c: 259: setLED(1, 0);
  7827  074E  01DA               	clrf	setLED@command
  7828  074F  3001               	movlw	1
  7829  0750  158A  278F  118A   	fcall	_setLED
  7830                           
  7831                           ;LED_B1.c: 260: setLED(2, 0);
  7832  0753  1283               	bcf	3,5	;RP0=0, select bank0
  7833  0754  1303               	bcf	3,6	;RP1=0, select bank0
  7834  0755  01DA               	clrf	setLED@command
  7835  0756  3002               	movlw	2
  7836  0757  158A  278F  118A   	fcall	_setLED
  7837                           
  7838                           ;LED_B1.c: 261: if (PIRLED.GO1 == 1) {
  7839  075A  1283               	bcf	3,5	;RP0=0, select bank0
  7840  075B  1303               	bcf	3,6	;RP1=0, select bank0
  7841  075C  1CB0               	btfss	_PIRLED,1
  7842  075D  2F62               	goto	l4636
  7843                           
  7844                           ;LED_B1.c: 262: count = 4;
  7845  075E  3004               	movlw	4
  7846  075F  00DC               	movwf	??_setPIRLED_Main
  7847  0760  085C               	movf	??_setPIRLED_Main,w
  7848  0761  00DD               	movwf	setPIRLED_Main@count
  7849  0762                     l4636:	
  7850                           
  7851                           ;LED_B1.c: 263: }
  7852                           ;LED_B1.c: 264: if (PIRLED.GO2 == 1) {
  7853  0762  1D30               	btfss	_PIRLED,2
  7854  0763  2F68               	goto	l4640
  7855                           
  7856                           ;LED_B1.c: 265: count = 6;
  7857  0764  3006               	movlw	6
  7858  0765  00DC               	movwf	??_setPIRLED_Main
  7859  0766  085C               	movf	??_setPIRLED_Main,w
  7860  0767  00DD               	movwf	setPIRLED_Main@count
  7861  0768                     l4640:	
  7862                           
  7863                           ;LED_B1.c: 266: }
  7864                           ;LED_B1.c: 267: if (PIRLED.GO3 == 1) {
  7865  0768  1DB0               	btfss	_PIRLED,3
  7866  0769  2F6E               	goto	l4644
  7867                           
  7868                           ;LED_B1.c: 268: count = 8;
  7869  076A  3008               	movlw	8
  7870  076B  00DC               	movwf	??_setPIRLED_Main
  7871  076C  085C               	movf	??_setPIRLED_Main,w
  7872  076D  00DD               	movwf	setPIRLED_Main@count
  7873  076E                     l4644:	
  7874                           
  7875                           ;LED_B1.c: 269: }
  7876                           ;LED_B1.c: 270: PIRLED.Count++;
  7877  076E  3001               	movlw	1
  7878  076F  00DC               	movwf	??_setPIRLED_Main
  7879  0770  085C               	movf	??_setPIRLED_Main,w
  7880  0771  07B1               	addwf	_PIRLED+1,f
  7881                           
  7882                           ;LED_B1.c: 271: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7883  0772  0831               	movf	_PIRLED+1,w
  7884  0773  3A01               	xorlw	1
  7885  0774  1903               	skipnz
  7886  0775  2F7A               	goto	l4650
  7887  0776  0831               	movf	_PIRLED+1,w
  7888  0777  3A02               	xorlw	2
  7889  0778  1D03               	skipz
  7890  0779  2F8E               	goto	l4654
  7891  077A                     l4650:	
  7892                           
  7893                           ;LED_B1.c: 272: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7894  077A  1003               	clrc
  7895  077B  1E30               	btfss	_PIRLED,4
  7896  077C  1403               	setc
  7897  077D  1C03               	btfss	3,0
  7898  077E  2F83               	goto	u5450
  7899  077F  1283               	bcf	3,5	;RP0=0, select bank0
  7900  0780  1303               	bcf	3,6	;RP1=0, select bank0
  7901  0781  1630               	bsf	_PIRLED,4
  7902  0782  2F86               	goto	l4652
  7903  0783                     u5450:	
  7904  0783  1283               	bcf	3,5	;RP0=0, select bank0
  7905  0784  1303               	bcf	3,6	;RP1=0, select bank0
  7906  0785  1230               	bcf	_PIRLED,4
  7907  0786                     l4652:	
  7908                           
  7909                           ;LED_B1.c: 273: setLED(2, PIRLED.status);
  7910  0786  3000               	movlw	0
  7911  0787  1A30               	btfsc	_PIRLED,4
  7912  0788  3001               	movlw	1
  7913  0789  00DA               	movwf	setLED@command
  7914  078A  3002               	movlw	2
  7915  078B  158A  278F         	fcall	_setLED
  7916                           
  7917                           ;LED_B1.c: 274: } else {
  7918  078D  0008               	return
  7919  078E                     l4654:	
  7920                           
  7921                           ;LED_B1.c: 275: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7922  078E  1003               	clrc
  7923  078F  1283               	bcf	3,5	;RP0=0, select bank0
  7924  0790  1303               	bcf	3,6	;RP1=0, select bank0
  7925  0791  1E30               	btfss	_PIRLED,4
  7926  0792  1403               	setc
  7927  0793  1C03               	btfss	3,0
  7928  0794  2F99               	goto	u5470
  7929  0795  1283               	bcf	3,5	;RP0=0, select bank0
  7930  0796  1303               	bcf	3,6	;RP1=0, select bank0
  7931  0797  1630               	bsf	_PIRLED,4
  7932  0798  2F9C               	goto	l4656
  7933  0799                     u5470:	
  7934  0799  1283               	bcf	3,5	;RP0=0, select bank0
  7935  079A  1303               	bcf	3,6	;RP1=0, select bank0
  7936  079B  1230               	bcf	_PIRLED,4
  7937  079C                     l4656:	
  7938                           
  7939                           ;LED_B1.c: 276: setLED(1, PIRLED.status);
  7940  079C  3000               	movlw	0
  7941  079D  1A30               	btfsc	_PIRLED,4
  7942  079E  3001               	movlw	1
  7943  079F  00DA               	movwf	setLED@command
  7944  07A0  3001               	movlw	1
  7945  07A1  158A  278F  118A   	fcall	_setLED
  7946                           
  7947                           ;LED_B1.c: 277: if (PIRLED.Count == count) {
  7948  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  7949  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  7950  07A6  0831               	movf	_PIRLED+1,w
  7951  07A7  065D               	xorwf	setPIRLED_Main@count,w
  7952  07A8  1D03               	skipz
  7953  07A9  0008               	return
  7954                           
  7955                           ;LED_B1.c: 278: PIRLED.Count = 0;
  7956  07AA  01B1               	clrf	_PIRLED+1
  7957  07AB  0008               	return
  7958  07AC                     __end_of_setPIRLED_Main:	
  7959                           
  7960                           	psect	text50
  7961  0B9E                     __ptext50:	
  7962 ;; *************** function _LED_Initialization *****************
  7963 ;; Defined at:
  7964 ;;		line 31 in file "../src/LED_B1.c"
  7965 ;; Parameters:    Size  Location     Type
  7966 ;;		None
  7967 ;; Auto vars:     Size  Location     Type
  7968 ;;		None
  7969 ;; Return value:  Size  Location     Type
  7970 ;;		None               void
  7971 ;; Registers used:
  7972 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7973 ;; Tracked objects:
  7974 ;;		On entry : 0/0
  7975 ;;		On exit  : 0/0
  7976 ;;		Unchanged: 0/0
  7977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7978 ;;      Params:         0       0       0       0
  7979 ;;      Locals:         0       0       0       0
  7980 ;;      Temps:          0       0       0       0
  7981 ;;      Totals:         0       0       0       0
  7982 ;;Total ram usage:        0 bytes
  7983 ;; Hardware stack levels used:    1
  7984 ;; Hardware stack levels required when called:    5
  7985 ;; This function calls:
  7986 ;;		_setLED_Initialization
  7987 ;; This function is called by:
  7988 ;;		_main
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           
  7993                           ;psect for function _LED_Initialization
  7994  0B9E                     _LED_Initialization:	
  7995                           
  7996                           ;LED_B1.c: 33: setLED_Initialization(1);
  7997                           
  7998                           ;incstack = 0
  7999                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8000  0B9E  3001               	movlw	1
  8001  0B9F  158A  2435  158A   	fcall	_setLED_Initialization
  8002                           
  8003                           ;LED_B1.c: 36: setLED_Initialization(2);
  8004  0BA2  3002               	movlw	2
  8005  0BA3  158A  2435  158A   	fcall	_setLED_Initialization
  8006                           
  8007                           ;LED_B1.c: 42: setLED_Initialization(99);
  8008  0BA6  3063               	movlw	99
  8009  0BA7  158A  2435         	fcall	_setLED_Initialization
  8010  0BA9  0008               	return
  8011  0BAA                     __end_of_LED_Initialization:	
  8012                           
  8013                           	psect	text51
  8014  0C35                     __ptext51:	
  8015 ;; *************** function _setLED_Initialization *****************
  8016 ;; Defined at:
  8017 ;;		line 69 in file "../src/LED_B1.c"
  8018 ;; Parameters:    Size  Location     Type
  8019 ;;  led             1    wreg     unsigned char 
  8020 ;; Auto vars:     Size  Location     Type
  8021 ;;  led             1    2[BANK0 ] unsigned char 
  8022 ;; Return value:  Size  Location     Type
  8023 ;;		None               void
  8024 ;; Registers used:
  8025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8026 ;; Tracked objects:
  8027 ;;		On entry : 0/0
  8028 ;;		On exit  : 0/0
  8029 ;;		Unchanged: 0/0
  8030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8031 ;;      Params:         0       0       0       0
  8032 ;;      Locals:         0       1       0       0
  8033 ;;      Temps:          0       0       0       0
  8034 ;;      Totals:         0       1       0       0
  8035 ;;Total ram usage:        1 bytes
  8036 ;; Hardware stack levels used:    1
  8037 ;; Hardware stack levels required when called:    4
  8038 ;; This function calls:
  8039 ;;		_LedPointSelect
  8040 ;;		_setLED
  8041 ;; This function is called by:
  8042 ;;		_LED_Initialization
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           
  8047                           ;psect for function _setLED_Initialization
  8048  0C35                     _setLED_Initialization:	
  8049                           
  8050                           ;incstack = 0
  8051                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8052                           ;setLED_Initialization@led stored from wreg
  8053  0C35  1283               	bcf	3,5	;RP0=0, select bank0
  8054  0C36  1303               	bcf	3,6	;RP1=0, select bank0
  8055  0C37  00DC               	movwf	setLED_Initialization@led
  8056                           
  8057                           ;LED_B1.c: 70: LedPointSelect(led);
  8058  0C38  085C               	movf	setLED_Initialization@led,w
  8059  0C39  158A  24CB  158A   	fcall	_LedPointSelect
  8060                           
  8061                           ;LED_B1.c: 71: LED->Enable = 1;
  8062  0C3C  0876               	movf	_LED,w
  8063  0C3D  0084               	movwf	4
  8064  0C3E  1383               	bcf	3,7	;select IRP bank0
  8065  0C3F  1400               	bsf	0,0
  8066                           
  8067                           ;LED_B1.c: 72: setLED(led, 0);
  8068  0C40  1283               	bcf	3,5	;RP0=0, select bank0
  8069  0C41  1303               	bcf	3,6	;RP1=0, select bank0
  8070  0C42  01DA               	clrf	setLED@command
  8071  0C43  085C               	movf	setLED_Initialization@led,w
  8072  0C44  158A  278F         	fcall	_setLED
  8073  0C46  0008               	return
  8074  0C47                     __end_of_setLED_Initialization:	
  8075                           
  8076                           	psect	text52
  8077  0654                     __ptext52:	
  8078 ;; *************** function _Exception_Main *****************
  8079 ;; Defined at:
  8080 ;;		line 506 in file "../src/Main_B1.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;		None
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  i               2   10[BANK0 ] int 
  8085 ;;  status          1    9[BANK0 ] unsigned char 
  8086 ;;  error           1   12[BANK0 ] unsigned char 
  8087 ;;  count           1    8[BANK0 ] unsigned char 
  8088 ;;  lights          1    7[BANK0 ] unsigned char 
  8089 ;; Return value:  Size  Location     Type
  8090 ;;		None               void
  8091 ;; Registers used:
  8092 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8093 ;; Tracked objects:
  8094 ;;		On entry : 0/0
  8095 ;;		On exit  : 0/0
  8096 ;;		Unchanged: 0/0
  8097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8098 ;;      Params:         0       0       0       0
  8099 ;;      Locals:         0       6       0       0
  8100 ;;      Temps:          0       1       0       0
  8101 ;;      Totals:         0       7       0       0
  8102 ;;Total ram usage:        7 bytes
  8103 ;; Hardware stack levels used:    1
  8104 ;; Hardware stack levels required when called:    4
  8105 ;; This function calls:
  8106 ;;		_getAll_Lights_Line
  8107 ;;		_getLights_Status
  8108 ;;		_getMain_All_Error_Status
  8109 ;;		_setLED
  8110 ;;		_setLights_Trigger
  8111 ;; This function is called by:
  8112 ;;		_main
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           
  8117                           ;psect for function _Exception_Main
  8118  0654                     _Exception_Main:	
  8119                           
  8120                           ;Main_B1.c: 507: char error = getMain_All_Error_Status(0);
  8121                           
  8122                           ;incstack = 0
  8123                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8124  0654  3000               	movlw	0
  8125  0655  158A  260C  118A   	fcall	_getMain_All_Error_Status
  8126  0658  1283               	bcf	3,5	;RP0=0, select bank0
  8127  0659  1303               	bcf	3,6	;RP1=0, select bank0
  8128  065A  00E0               	movwf	??_Exception_Main
  8129  065B  0860               	movf	??_Exception_Main,w
  8130  065C  00E6               	movwf	Exception_Main@error
  8131                           
  8132                           ;Main_B1.c: 508: char lights = 0, count = 1;
  8133  065D  01E1               	clrf	Exception_Main@lights
  8134  065E  01E2               	clrf	Exception_Main@count
  8135  065F  0AE2               	incf	Exception_Main@count,f
  8136                           
  8137                           ;Main_B1.c: 509: if (myMain.Error_Run == 1) {
  8138  0660  1DA3               	btfss	_myMain+3,3
  8139  0661  2E6E               	goto	l5320
  8140                           
  8141                           ;Main_B1.c: 510: if (error == 0) {
  8142  0662  08E6               	movf	Exception_Main@error,f
  8143  0663  1D03               	skipz
  8144  0664  0008               	return
  8145                           
  8146                           ;Main_B1.c: 511: myMain.Error_Run = 0;
  8147  0665  11A3               	bcf	_myMain+3,3
  8148                           
  8149                           ;Main_B1.c: 513: setLED(error, 110);
  8150  0666  306E               	movlw	110
  8151  0667  00E0               	movwf	??_Exception_Main
  8152  0668  0860               	movf	??_Exception_Main,w
  8153  0669  00DA               	movwf	setLED@command
  8154  066A  0866               	movf	Exception_Main@error,w
  8155  066B  158A  278F         	fcall	_setLED
  8156                           
  8157                           ;Main_B1.c: 518: }
  8158                           ;Main_B1.c: 519: } else {
  8159  066D  0008               	return
  8160  066E                     l5320:	
  8161                           
  8162                           ;Main_B1.c: 520: if (error != 0) {
  8163  066E  1283               	bcf	3,5	;RP0=0, select bank0
  8164  066F  1303               	bcf	3,6	;RP1=0, select bank0
  8165  0670  0866               	movf	Exception_Main@error,w
  8166  0671  1903               	btfsc	3,2
  8167  0672  0008               	return
  8168                           
  8169                           ;Main_B1.c: 521: myMain.Error_Run = 1;
  8170  0673  15A3               	bsf	_myMain+3,3
  8171                           
  8172                           ;Main_B1.c: 569: setLED(error, 111);
  8173  0674  306F               	movlw	111
  8174  0675  00E0               	movwf	??_Exception_Main
  8175  0676  0860               	movf	??_Exception_Main,w
  8176  0677  00DA               	movwf	setLED@command
  8177  0678  0866               	movf	Exception_Main@error,w
  8178  0679  158A  278F  118A   	fcall	_setLED
  8179                           
  8180                           ;Main_B1.c: 570: if (error == 3) {
  8181  067C  1283               	bcf	3,5	;RP0=0, select bank0
  8182  067D  1303               	bcf	3,6	;RP1=0, select bank0
  8183  067E  0866               	movf	Exception_Main@error,w
  8184  067F  3A03               	xorlw	3
  8185  0680  1D03               	skipz
  8186  0681  2E9D               	goto	l5332
  8187                           
  8188                           ;Main_B1.c: 571: char status = getAll_Lights_Line();
  8189  0682  158A  23F1  118A   	fcall	_getAll_Lights_Line
  8190  0685  1283               	bcf	3,5	;RP0=0, select bank0
  8191  0686  1303               	bcf	3,6	;RP1=0, select bank0
  8192  0687  00E0               	movwf	??_Exception_Main
  8193  0688  0860               	movf	??_Exception_Main,w
  8194  0689  00E3               	movwf	Exception_Main@status
  8195                           
  8196                           ;Main_B1.c: 572: if (getLights_Status(status) == 1) {
  8197  068A  0863               	movf	Exception_Main@status,w
  8198  068B  158A  2402  118A   	fcall	_getLights_Status
  8199  068E  3A01               	xorlw	1
  8200  068F  1903               	btfsc	3,2
  8201  0690  2E94               	goto	l5330
  8202  0691  1283               	bcf	3,5	;RP0=0, select bank0
  8203  0692  1303               	bcf	3,6	;RP1=0, select bank0
  8204  0693  0008               	return
  8205  0694                     l5330:	
  8206                           
  8207                           ;Main_B1.c: 573: setLights_Trigger(status, 0);
  8208  0694  1283               	bcf	3,5	;RP0=0, select bank0
  8209  0695  1303               	bcf	3,6	;RP1=0, select bank0
  8210  0696  01DA               	clrf	setLights_Trigger@command
  8211  0697  0863               	movf	Exception_Main@status,w
  8212  0698  158A  24FF         	fcall	_setLights_Trigger
  8213  069A  1283               	bcf	3,5	;RP0=0, select bank0
  8214  069B  1303               	bcf	3,6	;RP1=0, select bank0
  8215  069C  0008               	return
  8216  069D                     l5332:	
  8217                           ;Main_B1.c: 574: }
  8218                           ;Main_B1.c: 575: } else {
  8219                           
  8220                           
  8221                           ;Main_B1.c: 577: for (int i = 0; i < count; i++) {
  8222  069D  1283               	bcf	3,5	;RP0=0, select bank0
  8223  069E  1303               	bcf	3,6	;RP1=0, select bank0
  8224  069F  01E4               	clrf	Exception_Main@i
  8225  06A0  01E5               	clrf	Exception_Main@i+1
  8226  06A1                     l5340:	
  8227  06A1  0865               	movf	Exception_Main@i+1,w
  8228  06A2  3A80               	xorlw	128
  8229  06A3  00E0               	movwf	??_Exception_Main
  8230  06A4  3080               	movlw	128
  8231  06A5  0260               	subwf	??_Exception_Main,w
  8232  06A6  1D03               	skipz
  8233  06A7  2EAA               	goto	u6955
  8234  06A8  0862               	movf	Exception_Main@count,w
  8235  06A9  0264               	subwf	Exception_Main@i,w
  8236  06AA                     u6955:	
  8237  06AA  1803               	btfsc	3,0
  8238  06AB  2EC7               	goto	u6950
  8239                           
  8240                           ;Main_B1.c: 578: if (getLights_Status(i + 1) == 1) {
  8241  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  8242  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  8243  06AE  0864               	movf	Exception_Main@i,w
  8244  06AF  3E01               	addlw	1
  8245  06B0  158A  2402  118A   	fcall	_getLights_Status
  8246  06B3  3A01               	xorlw	1
  8247  06B4  1D03               	skipz
  8248  06B5  2EBE               	goto	l5338
  8249                           
  8250                           ;Main_B1.c: 579: setLights_Trigger(i + 1, 0);
  8251  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  8252  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  8253  06B8  01DA               	clrf	setLights_Trigger@command
  8254  06B9  0864               	movf	Exception_Main@i,w
  8255  06BA  3E01               	addlw	1
  8256  06BB  158A  24FF  118A   	fcall	_setLights_Trigger
  8257  06BE                     l5338:	
  8258  06BE  3001               	movlw	1
  8259  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  8260  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  8261  06C1  07E4               	addwf	Exception_Main@i,f
  8262  06C2  1803               	skipnc
  8263  06C3  0AE5               	incf	Exception_Main@i+1,f
  8264  06C4  3000               	movlw	0
  8265  06C5  07E5               	addwf	Exception_Main@i+1,f
  8266  06C6  2EA1               	goto	l5340
  8267  06C7                     u6950:	
  8268  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  8269  06C8  1303               	bcf	3,6	;RP1=0, select bank0
  8270  06C9  0008               	return
  8271  06CA                     __end_of_Exception_Main:	
  8272                           
  8273                           	psect	text53
  8274  0CFF                     __ptext53:	
  8275 ;; *************** function _setLights_Trigger *****************
  8276 ;; Defined at:
  8277 ;;		line 234 in file "../src/TriacRelay_B1.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;  lights          1    wreg     unsigned char 
  8280 ;;  command         1    0[BANK0 ] unsigned char 
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;  lights          1    2[BANK0 ] unsigned char 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;		None               void
  8285 ;; Registers used:
  8286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8292 ;;      Params:         0       1       0       0
  8293 ;;      Locals:         0       1       0       0
  8294 ;;      Temps:          0       1       0       0
  8295 ;;      Totals:         0       3       0       0
  8296 ;;Total ram usage:        3 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    3
  8299 ;; This function calls:
  8300 ;;		_LightsPointSelect
  8301 ;; This function is called by:
  8302 ;;		_Exception_Main
  8303 ;;		_PIR_Main
  8304 ;;		_setMain_Exception
  8305 ;;		_setLights_ErrorClose
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           
  8310                           ;psect for function _setLights_Trigger
  8311  0CFF                     _setLights_Trigger:	
  8312                           
  8313                           ;incstack = 0
  8314                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8315                           ;setLights_Trigger@lights stored from wreg
  8316  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  8317  0D00  1303               	bcf	3,6	;RP1=0, select bank0
  8318  0D01  00DC               	movwf	setLights_Trigger@lights
  8319                           
  8320                           ;TriacRelay_B1.c: 235: LightsPointSelect(lights);
  8321  0D02  085C               	movf	setLights_Trigger@lights,w
  8322  0D03  158A  237F         	fcall	_LightsPointSelect
  8323                           
  8324                           ;TriacRelay_B1.c: 236: Lights->Trigger = 1;
  8325  0D05  0878               	movf	_Lights,w
  8326  0D06  0084               	movwf	4
  8327  0D07  1383               	bcf	3,7	;select IRP bank0
  8328  0D08  1580               	bsf	0,3
  8329                           
  8330                           ;TriacRelay_B1.c: 237: Lights->Switch = command == 1 ? 1 : 0;
  8331  0D09  1283               	bcf	3,5	;RP0=0, select bank0
  8332  0D0A  1303               	bcf	3,6	;RP1=0, select bank0
  8333  0D0B  085A               	movf	setLights_Trigger@command,w
  8334  0D0C  3A01               	xorlw	1
  8335  0D0D  3000               	movlw	0
  8336  0D0E  1903               	skipnz
  8337  0D0F  3001               	movlw	1
  8338  0D10  00DB               	movwf	??_setLights_Trigger
  8339  0D11  0878               	movf	_Lights,w
  8340  0D12  0084               	movwf	4
  8341  0D13  0EDB               	swapf	??_setLights_Trigger,f
  8342  0D14  0800               	movf	0,w
  8343  0D15  065B               	xorwf	??_setLights_Trigger,w
  8344  0D16  39EF               	andlw	-17
  8345  0D17  065B               	xorwf	??_setLights_Trigger,w
  8346  0D18  0080               	movwf	0
  8347  0D19  0008               	return
  8348  0D1A                     __end_of_setLights_Trigger:	
  8349                           
  8350                           	psect	text54
  8351  0F8F                     __ptext54:	
  8352 ;; *************** function _setLED *****************
  8353 ;; Defined at:
  8354 ;;		line 76 in file "../src/LED_B1.c"
  8355 ;; Parameters:    Size  Location     Type
  8356 ;;  led             1    wreg     unsigned char 
  8357 ;;  command         1    0[BANK0 ] unsigned char 
  8358 ;; Auto vars:     Size  Location     Type
  8359 ;;  led             1    1[BANK0 ] unsigned char 
  8360 ;; Return value:  Size  Location     Type
  8361 ;;		None               void
  8362 ;; Registers used:
  8363 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8364 ;; Tracked objects:
  8365 ;;		On entry : 0/0
  8366 ;;		On exit  : 0/0
  8367 ;;		Unchanged: 0/0
  8368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8369 ;;      Params:         0       1       0       0
  8370 ;;      Locals:         0       1       0       0
  8371 ;;      Temps:          0       0       0       0
  8372 ;;      Totals:         0       2       0       0
  8373 ;;Total ram usage:        2 bytes
  8374 ;; Hardware stack levels used:    1
  8375 ;; Hardware stack levels required when called:    3
  8376 ;; This function calls:
  8377 ;;		_LedPointSelect
  8378 ;; This function is called by:
  8379 ;;		_setLED_Initialization
  8380 ;;		_setPIRLED_Main
  8381 ;;		_Exception_Main
  8382 ;;		_PIR_Main
  8383 ;;		_setMain_Exception
  8384 ;; This function uses a non-reentrant model
  8385 ;;
  8386                           
  8387                           
  8388                           ;psect for function _setLED
  8389  0F8F                     _setLED:	
  8390                           
  8391                           ;incstack = 0
  8392                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8393                           ;setLED@led stored from wreg
  8394  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  8395  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  8396  0F91  00DB               	movwf	setLED@led
  8397                           
  8398                           ;LED_B1.c: 77: LedPointSelect(led);
  8399  0F92  085B               	movf	setLED@led,w
  8400  0F93  158A  24CB  158A   	fcall	_LedPointSelect
  8401                           
  8402                           ;LED_B1.c: 78: if (command == 0) {
  8403  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  8404  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  8405  0F98  08DA               	movf	setLED@command,f
  8406  0F99  1D03               	skipz
  8407  0F9A  2FA8               	goto	l4438
  8408                           
  8409                           ;LED_B1.c: 80: if (led == 1) {
  8410  0F9B  085B               	movf	setLED@led,w
  8411  0F9C  3A01               	xorlw	1
  8412  0F9D  1D03               	skipz
  8413  0F9E  2FA0               	goto	l4430
  8414                           
  8415                           ;LED_B1.c: 84: RB4 = 1;
  8416  0F9F  1606               	bsf	6,4	;volatile
  8417  0FA0                     l4430:	
  8418                           
  8419                           ;LED_B1.c: 86: }
  8420                           ;LED_B1.c: 89: if (led == 2) {
  8421  0FA0  085B               	movf	setLED@led,w
  8422  0FA1  3A02               	xorlw	2
  8423  0FA2  1903               	btfsc	3,2
  8424                           
  8425                           ;LED_B1.c: 93: RB5 = 1;
  8426  0FA3  1686               	bsf	6,5	;volatile
  8427                           
  8428                           ;LED_B1.c: 95: }
  8429                           ;LED_B1.c: 107: if (led == 99) {
  8430  0FA4  085B               	movf	setLED@led,w
  8431  0FA5  3A63               	xorlw	99
  8432  0FA6  1903               	btfsc	3,2
  8433                           
  8434                           ;LED_B1.c: 111: RB3 = 1;
  8435  0FA7  1586               	bsf	6,3	;volatile
  8436  0FA8                     l4438:	
  8437                           
  8438                           ;LED_B1.c: 113: }
  8439                           ;LED_B1.c: 115: }
  8440                           ;LED_B1.c: 116: if (command == 1) {
  8441  0FA8  085A               	movf	setLED@command,w
  8442  0FA9  3A01               	xorlw	1
  8443  0FAA  1D03               	skipz
  8444  0FAB  2FB9               	goto	l4452
  8445                           
  8446                           ;LED_B1.c: 118: if (led == 1) {
  8447  0FAC  085B               	movf	setLED@led,w
  8448  0FAD  3A01               	xorlw	1
  8449  0FAE  1D03               	skipz
  8450  0FAF  2FB1               	goto	l4444
  8451                           
  8452                           ;LED_B1.c: 122: RB4 = 0;
  8453  0FB0  1206               	bcf	6,4	;volatile
  8454  0FB1                     l4444:	
  8455                           
  8456                           ;LED_B1.c: 124: }
  8457                           ;LED_B1.c: 127: if (led == 2) {
  8458  0FB1  085B               	movf	setLED@led,w
  8459  0FB2  3A02               	xorlw	2
  8460  0FB3  1903               	btfsc	3,2
  8461                           
  8462                           ;LED_B1.c: 131: RB5 = 0;
  8463  0FB4  1286               	bcf	6,5	;volatile
  8464                           
  8465                           ;LED_B1.c: 133: }
  8466                           ;LED_B1.c: 145: if (led == 99) {
  8467  0FB5  085B               	movf	setLED@led,w
  8468  0FB6  3A63               	xorlw	99
  8469  0FB7  1903               	btfsc	3,2
  8470                           
  8471                           ;LED_B1.c: 149: RB3 = 0;
  8472  0FB8  1186               	bcf	6,3	;volatile
  8473  0FB9                     l4452:	
  8474                           
  8475                           ;LED_B1.c: 151: }
  8476                           ;LED_B1.c: 153: }
  8477                           ;LED_B1.c: 154: if (command == 10) {
  8478  0FB9  085A               	movf	setLED@command,w
  8479  0FBA  3A0A               	xorlw	10
  8480  0FBB  1D03               	skipz
  8481  0FBC  2FD4               	goto	l4470
  8482                           
  8483                           ;LED_B1.c: 155: LED->GO = 0;
  8484  0FBD  0876               	movf	_LED,w
  8485  0FBE  0084               	movwf	4
  8486  0FBF  1383               	bcf	3,7	;select IRP bank0
  8487  0FC0  1080               	bcf	0,1
  8488                           
  8489                           ;LED_B1.c: 156: LED->Time = 0;
  8490  0FC1  0A76               	incf	_LED,w
  8491  0FC2  0084               	movwf	4
  8492  0FC3  0180               	clrf	0
  8493  0FC4  0A84               	incf	4,f
  8494  0FC5  0180               	clrf	0
  8495                           
  8496                           ;LED_B1.c: 158: if (led == 1) {
  8497  0FC6  085B               	movf	setLED@led,w
  8498  0FC7  3A01               	xorlw	1
  8499  0FC8  1D03               	skipz
  8500  0FC9  2FCC               	goto	l4462
  8501                           
  8502                           ;LED_B1.c: 162: RB4 = 1;
  8503  0FCA  1606               	bsf	6,4	;volatile
  8504                           
  8505                           ;LED_B1.c: 164: }
  8506  0FCB  2FD0               	goto	l4466
  8507  0FCC                     l4462:	
  8508                           
  8509                           ;LED_B1.c: 167: else if (led == 2) {
  8510  0FCC  085B               	movf	setLED@led,w
  8511  0FCD  3A02               	xorlw	2
  8512  0FCE  1903               	btfsc	3,2
  8513                           
  8514                           ;LED_B1.c: 171: RB5 = 1;
  8515  0FCF  1686               	bsf	6,5	;volatile
  8516  0FD0                     l4466:	
  8517                           
  8518                           ;LED_B1.c: 173: }
  8519                           ;LED_B1.c: 185: if (led == 99) {
  8520  0FD0  085B               	movf	setLED@led,w
  8521  0FD1  3A63               	xorlw	99
  8522  0FD2  1903               	btfsc	3,2
  8523                           
  8524                           ;LED_B1.c: 189: RB3 = 1;
  8525  0FD3  1586               	bsf	6,3	;volatile
  8526  0FD4                     l4470:	
  8527                           
  8528                           ;LED_B1.c: 191: }
  8529                           ;LED_B1.c: 193: }
  8530                           ;LED_B1.c: 194: if (command == 11) {
  8531  0FD4  085A               	movf	setLED@command,w
  8532  0FD5  3A0B               	xorlw	11
  8533  0FD6  1D03               	skipz
  8534  0FD7  2FDC               	goto	l4474
  8535                           
  8536                           ;LED_B1.c: 195: LED->GO = 1;
  8537  0FD8  0876               	movf	_LED,w
  8538  0FD9  0084               	movwf	4
  8539  0FDA  1383               	bcf	3,7	;select IRP bank0
  8540  0FDB  1480               	bsf	0,1
  8541  0FDC                     l4474:	
  8542                           
  8543                           ;LED_B1.c: 196: }
  8544                           ;LED_B1.c: 198: if (command == 111) {
  8545  0FDC  085A               	movf	setLED@command,w
  8546  0FDD  3A6F               	xorlw	111
  8547  0FDE  1D03               	skipz
  8548  0FDF  2FFA               	goto	l4500
  8549                           
  8550                           ;LED_B1.c: 199: PIRLED.Count = 0;
  8551  0FE0  01B1               	clrf	_PIRLED+1
  8552                           
  8553                           ;LED_B1.c: 200: PIRLED.Time = 0;
  8554  0FE1  01B2               	clrf	_PIRLED+2
  8555  0FE2  01B3               	clrf	_PIRLED+3
  8556                           
  8557                           ;LED_B1.c: 201: PIRLED.status = 0;
  8558  0FE3  1230               	bcf	_PIRLED,4
  8559                           
  8560                           ;LED_B1.c: 202: PIRLED.GO = 1;
  8561  0FE4  1430               	bsf	_PIRLED,0
  8562                           
  8563                           ;LED_B1.c: 203: PIRLED.GO1 = 0;
  8564  0FE5  10B0               	bcf	_PIRLED,1
  8565                           
  8566                           ;LED_B1.c: 204: PIRLED.GO2 = 0;
  8567  0FE6  1130               	bcf	_PIRLED,2
  8568                           
  8569                           ;LED_B1.c: 205: PIRLED.GO3 = 0;
  8570  0FE7  11B0               	bcf	_PIRLED,3
  8571                           
  8572                           ;LED_B1.c: 206: if (led == 1) {
  8573  0FE8  085B               	movf	setLED@led,w
  8574  0FE9  3A01               	xorlw	1
  8575  0FEA  1D03               	skipz
  8576  0FEB  2FEE               	goto	l4492
  8577                           
  8578                           ;LED_B1.c: 207: PIRLED.GO1 = 1;
  8579  0FEC  14B0               	bsf	_PIRLED,1
  8580                           
  8581                           ;LED_B1.c: 208: } else if (led == 2) {
  8582  0FED  0008               	return
  8583  0FEE                     l4492:	
  8584  0FEE  085B               	movf	setLED@led,w
  8585  0FEF  3A02               	xorlw	2
  8586  0FF0  1D03               	skipz
  8587  0FF1  2FF4               	goto	l4496
  8588                           
  8589                           ;LED_B1.c: 209: PIRLED.GO2 = 1;
  8590  0FF2  1530               	bsf	_PIRLED,2
  8591                           
  8592                           ;LED_B1.c: 210: } else if (led == 3) {
  8593  0FF3  0008               	return
  8594  0FF4                     l4496:	
  8595  0FF4  085B               	movf	setLED@led,w
  8596  0FF5  3A03               	xorlw	3
  8597  0FF6  1D03               	skipz
  8598  0FF7  0008               	return
  8599                           
  8600                           ;LED_B1.c: 211: PIRLED.GO3 = 1;
  8601  0FF8  15B0               	bsf	_PIRLED,3
  8602                           
  8603                           ;LED_B1.c: 212: }
  8604                           ;LED_B1.c: 213: } else if (command == 110) {
  8605  0FF9  0008               	return
  8606  0FFA                     l4500:	
  8607  0FFA  085A               	movf	setLED@command,w
  8608  0FFB  3A6E               	xorlw	110
  8609  0FFC  1D03               	skipz
  8610  0FFD  0008               	return
  8611                           
  8612                           ;LED_B1.c: 214: PIRLED.GO = 0;
  8613  0FFE  1030               	bcf	_PIRLED,0
  8614  0FFF  0008               	return
  8615  1000                     __end_of_setLED:	
  8616                           
  8617                           	psect	text55
  8618  0CCB                     __ptext55:	
  8619 ;; *************** function _LedPointSelect *****************
  8620 ;; Defined at:
  8621 ;;		line 7 in file "../src/LED_B1.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;  led             1    wreg     unsigned char 
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;  led             1    5[COMMON] unsigned char 
  8626 ;; Return value:  Size  Location     Type
  8627 ;;		None               void
  8628 ;; Registers used:
  8629 ;;		wreg
  8630 ;; Tracked objects:
  8631 ;;		On entry : 0/0
  8632 ;;		On exit  : 0/0
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8635 ;;      Params:         0       0       0       0
  8636 ;;      Locals:         1       0       0       0
  8637 ;;      Temps:          1       0       0       0
  8638 ;;      Totals:         2       0       0       0
  8639 ;;Total ram usage:        2 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; Hardware stack levels required when called:    2
  8642 ;; This function calls:
  8643 ;;		Nothing
  8644 ;; This function is called by:
  8645 ;;		_setLED_Initialization
  8646 ;;		_setLED
  8647 ;;		_setLED_Main
  8648 ;; This function uses a non-reentrant model
  8649 ;;
  8650                           
  8651                           
  8652                           ;psect for function _LedPointSelect
  8653  0CCB                     _LedPointSelect:	
  8654                           
  8655                           ;incstack = 0
  8656                           ; Regs used in _LedPointSelect: [wreg]
  8657                           ;LedPointSelect@led stored from wreg
  8658  0CCB  00F5               	movwf	LedPointSelect@led
  8659                           
  8660                           ;LED_B1.c: 9: if (led == 1) {
  8661  0CCC  0875               	movf	LedPointSelect@led,w
  8662  0CCD  3A01               	xorlw	1
  8663  0CCE  1D03               	skipz
  8664  0CCF  2CD4               	goto	l268
  8665                           
  8666                           ;LED_B1.c: 10: LED = &VarLED1;
  8667  0CD0  3052               	movlw	_VarLED1& (0+255)
  8668  0CD1  00F4               	movwf	??_LedPointSelect
  8669  0CD2  0874               	movf	??_LedPointSelect,w
  8670  0CD3  00F6               	movwf	_LED
  8671  0CD4                     l268:	
  8672                           
  8673                           ;LED_B1.c: 11: }
  8674                           ;LED_B1.c: 14: if (led == 2) {
  8675  0CD4  0875               	movf	LedPointSelect@led,w
  8676  0CD5  3A02               	xorlw	2
  8677  0CD6  1D03               	skipz
  8678  0CD7  2CDC               	goto	l269
  8679                           
  8680                           ;LED_B1.c: 15: LED = &VarLED2;
  8681  0CD8  3056               	movlw	_VarLED2& (0+255)
  8682  0CD9  00F4               	movwf	??_LedPointSelect
  8683  0CDA  0874               	movf	??_LedPointSelect,w
  8684  0CDB  00F6               	movwf	_LED
  8685  0CDC                     l269:	
  8686                           
  8687                           ;LED_B1.c: 16: }
  8688                           ;LED_B1.c: 24: if (led == 99) {
  8689  0CDC  0875               	movf	LedPointSelect@led,w
  8690  0CDD  3A63               	xorlw	99
  8691  0CDE  1D03               	skipz
  8692  0CDF  0008               	return
  8693                           
  8694                           ;LED_B1.c: 25: LED = &VarErrLED;
  8695  0CE0  304E               	movlw	_VarErrLED& (0+255)
  8696  0CE1  00F4               	movwf	??_LedPointSelect
  8697  0CE2  0874               	movf	??_LedPointSelect,w
  8698  0CE3  00F6               	movwf	_LED
  8699  0CE4  0008               	return
  8700  0CE5                     __end_of_LedPointSelect:	
  8701                           
  8702                           	psect	text56
  8703  0E0C                     __ptext56:	
  8704 ;; *************** function _getMain_All_Error_Status *****************
  8705 ;; Defined at:
  8706 ;;		line 425 in file "../src/Main_B1.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;  command         1    wreg     unsigned char 
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;  command         1    4[BANK0 ] unsigned char 
  8711 ;;  status          1    5[BANK0 ] unsigned char 
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  1    wreg      unsigned char 
  8714 ;; Registers used:
  8715 ;;		wreg, status,2, status,0
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8721 ;;      Params:         0       0       0       0
  8722 ;;      Locals:         0       6       0       0
  8723 ;;      Temps:          1       0       0       0
  8724 ;;      Totals:         1       6       0       0
  8725 ;;Total ram usage:        7 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; Hardware stack levels required when called:    2
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_Exception_Main
  8732 ;;		_Load_Main
  8733 ;;		_setTemp_Main
  8734 ;;		_PIR_Main
  8735 ;;		_setSYSC_Main
  8736 ;;		_Lights_Main
  8737 ;; This function uses a non-reentrant model
  8738 ;;
  8739                           
  8740                           
  8741                           ;psect for function _getMain_All_Error_Status
  8742  0E0C                     _getMain_All_Error_Status:	
  8743                           
  8744                           ;incstack = 0
  8745                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  8746                           ;getMain_All_Error_Status@command stored from wreg
  8747  0E0C  1283               	bcf	3,5	;RP0=0, select bank0
  8748  0E0D  1303               	bcf	3,6	;RP1=0, select bank0
  8749  0E0E  00DE               	movwf	getMain_All_Error_Status@command
  8750                           
  8751                           ;Main_B1.c: 426: char status = 0;
  8752  0E0F  01DF               	clrf	getMain_All_Error_Status@status
  8753                           
  8754                           ;Main_B1.c: 429: if (status == 0 && command != 1) {
  8755  0E10  08DF               	movf	getMain_All_Error_Status@status,f
  8756  0E11  1D03               	skipz
  8757  0E12  2E1B               	goto	l3232
  8758  0E13  085E               	movf	getMain_All_Error_Status@command,w
  8759  0E14  3A01               	xorlw	1
  8760  0E15  1903               	skipnz
  8761  0E16  2E1B               	goto	l3232
  8762                           
  8763                           ;Main_B1.c: 430: status = SYSC.ERROR == 1 ? 1 : 0;
  8764  0E17  3000               	movlw	0
  8765  0E18  18A6               	btfsc	_SYSC,1
  8766  0E19  3001               	movlw	1
  8767  0E1A  00DF               	movwf	getMain_All_Error_Status@status
  8768  0E1B                     l3232:	
  8769                           
  8770                           ;Main_B1.c: 431: }
  8771                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
  8772  0E1B  08DF               	movf	getMain_All_Error_Status@status,f
  8773  0E1C  1D03               	skipz
  8774  0E1D  2E2F               	goto	l3242
  8775  0E1E  085E               	movf	getMain_All_Error_Status@command,w
  8776  0E1F  3A02               	xorlw	2
  8777  0E20  1903               	skipnz
  8778  0E21  2E2F               	goto	l3242
  8779                           
  8780                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
  8781  0E22  18BB               	btfsc	_Temp,1
  8782  0E23  2E27               	goto	l3240
  8783  0E24  01DA               	clrf	_getMain_All_Error_Status$2341
  8784  0E25  01DB               	clrf	_getMain_All_Error_Status$2341+1
  8785  0E26  2E2B               	goto	l625
  8786  0E27                     l3240:	
  8787  0E27  3002               	movlw	2
  8788  0E28  00DA               	movwf	_getMain_All_Error_Status$2341
  8789  0E29  3000               	movlw	0
  8790  0E2A  00DB               	movwf	_getMain_All_Error_Status$2341+1
  8791  0E2B                     l625:	
  8792  0E2B  085A               	movf	_getMain_All_Error_Status$2341,w
  8793  0E2C  00F4               	movwf	??_getMain_All_Error_Status
  8794  0E2D  0874               	movf	??_getMain_All_Error_Status,w
  8795  0E2E  00DF               	movwf	getMain_All_Error_Status@status
  8796  0E2F                     l3242:	
  8797                           
  8798                           ;Main_B1.c: 439: }
  8799                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
  8800  0E2F  08DF               	movf	getMain_All_Error_Status@status,f
  8801  0E30  1D03               	skipz
  8802  0E31  2E48               	goto	l626
  8803  0E32  085E               	movf	getMain_All_Error_Status@command,w
  8804  0E33  3A03               	xorlw	3
  8805  0E34  1903               	skipnz
  8806  0E35  2E48               	goto	l626
  8807                           
  8808                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
  8809  0E36  1683               	bsf	3,5	;RP0=1, select bank1
  8810  0E37  1303               	bcf	3,6	;RP1=0, select bank1
  8811  0E38  1ACE               	btfsc	_Load^(0+128),5
  8812  0E39  2E3F               	goto	l3250
  8813  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  8814  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  8815  0E3C  01DC               	clrf	_getMain_All_Error_Status$2342
  8816  0E3D  01DD               	clrf	_getMain_All_Error_Status$2342+1
  8817  0E3E  2E44               	goto	l630
  8818  0E3F                     l3250:	
  8819  0E3F  3003               	movlw	3
  8820  0E40  1283               	bcf	3,5	;RP0=0, select bank0
  8821  0E41  00DC               	movwf	_getMain_All_Error_Status$2342
  8822  0E42  3000               	movlw	0
  8823  0E43  00DD               	movwf	_getMain_All_Error_Status$2342+1
  8824  0E44                     l630:	
  8825  0E44  085C               	movf	_getMain_All_Error_Status$2342,w
  8826  0E45  00F4               	movwf	??_getMain_All_Error_Status
  8827  0E46  0874               	movf	??_getMain_All_Error_Status,w
  8828  0E47  00DF               	movwf	getMain_All_Error_Status@status
  8829  0E48                     l626:	
  8830                           
  8831                           ;Main_B1.c: 446: }
  8832                           ;Main_B1.c: 462: return status;
  8833  0E48  085F               	movf	getMain_All_Error_Status@status,w
  8834  0E49  0008               	return
  8835  0E4A                     __end_of_getMain_All_Error_Status:	
  8836                           
  8837                           	psect	text57
  8838  0C02                     __ptext57:	
  8839 ;; *************** function _getLights_Status *****************
  8840 ;; Defined at:
  8841 ;;		line 227 in file "../src/TriacRelay_B1.c"
  8842 ;; Parameters:    Size  Location     Type
  8843 ;;  lights          1    wreg     unsigned char 
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;  lights          1    0[BANK0 ] unsigned char 
  8846 ;;  status          1    1[BANK0 ] unsigned char 
  8847 ;; Return value:  Size  Location     Type
  8848 ;;                  1    wreg      unsigned char 
  8849 ;; Registers used:
  8850 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8851 ;; Tracked objects:
  8852 ;;		On entry : 0/0
  8853 ;;		On exit  : 0/0
  8854 ;;		Unchanged: 0/0
  8855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8856 ;;      Params:         0       0       0       0
  8857 ;;      Locals:         0       2       0       0
  8858 ;;      Temps:          0       0       0       0
  8859 ;;      Totals:         0       2       0       0
  8860 ;;Total ram usage:        2 bytes
  8861 ;; Hardware stack levels used:    1
  8862 ;; Hardware stack levels required when called:    3
  8863 ;; This function calls:
  8864 ;;		_LightsPointSelect
  8865 ;; This function is called by:
  8866 ;;		_Exception_Main
  8867 ;;		_PIR_Main
  8868 ;;		_setMain_Exception
  8869 ;;		_setLights_ErrorClose
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           
  8874                           ;psect for function _getLights_Status
  8875  0C02                     _getLights_Status:	
  8876                           
  8877                           ;incstack = 0
  8878                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8879                           ;getLights_Status@lights stored from wreg
  8880  0C02  1283               	bcf	3,5	;RP0=0, select bank0
  8881  0C03  1303               	bcf	3,6	;RP1=0, select bank0
  8882  0C04  00DA               	movwf	getLights_Status@lights
  8883                           
  8884                           ;TriacRelay_B1.c: 228: LightsPointSelect(lights);
  8885  0C05  085A               	movf	getLights_Status@lights,w
  8886  0C06  158A  237F         	fcall	_LightsPointSelect
  8887                           
  8888                           ;TriacRelay_B1.c: 229: char status = Lights->Status == 1 ? 1 : 0;
  8889  0C08  0878               	movf	_Lights,w
  8890  0C09  0084               	movwf	4
  8891  0C0A  3000               	movlw	0
  8892  0C0B  1383               	bcf	3,7	;select IRP bank0
  8893  0C0C  1900               	btfsc	0,2
  8894  0C0D  3001               	movlw	1
  8895  0C0E  1283               	bcf	3,5	;RP0=0, select bank0
  8896  0C0F  1303               	bcf	3,6	;RP1=0, select bank0
  8897  0C10  00DB               	movwf	getLights_Status@status
  8898                           
  8899                           ;TriacRelay_B1.c: 230: return status;
  8900  0C11  085B               	movf	getLights_Status@status,w
  8901  0C12  0008               	return
  8902  0C13                     __end_of_getLights_Status:	
  8903                           
  8904                           	psect	text58
  8905  0BF1                     __ptext58:	
  8906 ;; *************** function _getAll_Lights_Line *****************
  8907 ;; Defined at:
  8908 ;;		line 266 in file "../src/TriacRelay_B1.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;		None
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;  line            1    0[BANK0 ] unsigned char 
  8913 ;; Return value:  Size  Location     Type
  8914 ;;                  1    wreg      unsigned char 
  8915 ;; Registers used:
  8916 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8917 ;; Tracked objects:
  8918 ;;		On entry : 0/0
  8919 ;;		On exit  : 0/0
  8920 ;;		Unchanged: 0/0
  8921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8922 ;;      Params:         0       0       0       0
  8923 ;;      Locals:         0       1       0       0
  8924 ;;      Temps:          0       0       0       0
  8925 ;;      Totals:         0       1       0       0
  8926 ;;Total ram usage:        1 bytes
  8927 ;; Hardware stack levels used:    1
  8928 ;; Hardware stack levels required when called:    3
  8929 ;; This function calls:
  8930 ;;		_LightsPointSelect
  8931 ;; This function is called by:
  8932 ;;		_Exception_Main
  8933 ;;		_setMain_Exception
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           
  8938                           ;psect for function _getAll_Lights_Line
  8939  0BF1                     _getAll_Lights_Line:	
  8940                           
  8941                           ;TriacRelay_B1.c: 267: char line = 0;
  8942                           
  8943                           ;incstack = 0
  8944                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8945  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  8946  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  8947  0BF3  01DA               	clrf	getAll_Lights_Line@line
  8948                           
  8949                           ;TriacRelay_B1.c: 269: LightsPointSelect(1);
  8950  0BF4  3001               	movlw	1
  8951  0BF5  158A  237F         	fcall	_LightsPointSelect
  8952                           
  8953                           ;TriacRelay_B1.c: 270: line = Lights->Line == 1 ? 1 : 0;
  8954  0BF7  0A78               	incf	_Lights,w
  8955  0BF8  0084               	movwf	4
  8956  0BF9  3000               	movlw	0
  8957  0BFA  1383               	bcf	3,7	;select IRP bank0
  8958  0BFB  1800               	btfsc	0,0
  8959  0BFC  3001               	movlw	1
  8960  0BFD  1283               	bcf	3,5	;RP0=0, select bank0
  8961  0BFE  1303               	bcf	3,6	;RP1=0, select bank0
  8962  0BFF  00DA               	movwf	getAll_Lights_Line@line
  8963                           
  8964                           ;TriacRelay_B1.c: 280: return line;
  8965  0C00  085A               	movf	getAll_Lights_Line@line,w
  8966  0C01  0008               	return
  8967  0C02                     __end_of_getAll_Lights_Line:	
  8968                           
  8969                           	psect	text59
  8970  0B7F                     __ptext59:	
  8971 ;; *************** function _LightsPointSelect *****************
  8972 ;; Defined at:
  8973 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;  lights          1    wreg     unsigned char 
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;  lights          1    5[COMMON] unsigned char 
  8978 ;; Return value:  Size  Location     Type
  8979 ;;		None               void
  8980 ;; Registers used:
  8981 ;;		wreg
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8987 ;;      Params:         0       0       0       0
  8988 ;;      Locals:         1       0       0       0
  8989 ;;      Temps:          1       0       0       0
  8990 ;;      Totals:         2       0       0       0
  8991 ;;Total ram usage:        2 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    2
  8994 ;; This function calls:
  8995 ;;		Nothing
  8996 ;; This function is called by:
  8997 ;;		_setLights_Initialization
  8998 ;;		_setLights_Main
  8999 ;;		_setLights
  9000 ;;		_Lights_Control
  9001 ;;		_getLights_Status
  9002 ;;		_setLights_Trigger
  9003 ;;		_getAll_Lights_Line
  9004 ;; This function uses a non-reentrant model
  9005 ;;
  9006                           
  9007                           
  9008                           ;psect for function _LightsPointSelect
  9009  0B7F                     _LightsPointSelect:	
  9010                           
  9011                           ;incstack = 0
  9012                           ; Regs used in _LightsPointSelect: [wreg]
  9013                           ;LightsPointSelect@lights stored from wreg
  9014  0B7F  00F5               	movwf	LightsPointSelect@lights
  9015                           
  9016                           ;TriacRelay_B1.c: 14: if (lights == 1) {
  9017  0B80  0875               	movf	LightsPointSelect@lights,w
  9018  0B81  3A01               	xorlw	1
  9019  0B82  1D03               	skipz
  9020  0B83  0008               	return
  9021                           
  9022                           ;TriacRelay_B1.c: 15: Lights = &Lights1;
  9023  0B84  3047               	movlw	_Lights1& (0+255)
  9024  0B85  00F4               	movwf	??_LightsPointSelect
  9025  0B86  0874               	movf	??_LightsPointSelect,w
  9026  0B87  00F8               	movwf	_Lights
  9027  0B88  0008               	return
  9028  0B89                     __end_of_LightsPointSelect:	
  9029                           
  9030                           	psect	text60
  9031  0BAA                     __ptext60:	
  9032 ;; *************** function _DetectSYSC_Signal *****************
  9033 ;; Defined at:
  9034 ;;		line 50 in file "../src/SYSC_B1.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;		None
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;		None
  9039 ;; Return value:  Size  Location     Type
  9040 ;;		None               void
  9041 ;; Registers used:
  9042 ;;		status,2
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9048 ;;      Params:         0       0       0       0
  9049 ;;      Locals:         0       0       0       0
  9050 ;;      Temps:          0       0       0       0
  9051 ;;      Totals:         0       0       0       0
  9052 ;;Total ram usage:        0 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    2
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		_main
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           
  9063                           ;psect for function _DetectSYSC_Signal
  9064  0BAA                     _DetectSYSC_Signal:	
  9065                           
  9066                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
  9067                           
  9068                           ;incstack = 0
  9069                           ; Regs used in _DetectSYSC_Signal: [status,2]
  9070  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  9071  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  9072  0BAC  19A6               	btfsc	_SYSC,3
  9073  0BAD  2BB4               	goto	l1141
  9074                           
  9075                           ;SYSC_B1.c: 52: if (RA5 == 1) {
  9076  0BAE  1E85               	btfss	5,5	;volatile
  9077  0BAF  0008               	return
  9078                           
  9079                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
  9080  0BB0  15A6               	bsf	_SYSC,3
  9081                           
  9082                           ;SYSC_B1.c: 54: SYSC.Timer = 0;
  9083  0BB1  01A7               	clrf	_SYSC+1
  9084  0BB2  01A8               	clrf	_SYSC+2
  9085                           
  9086                           ;SYSC_B1.c: 55: }
  9087                           ;SYSC_B1.c: 56: } else {
  9088  0BB3  0008               	return
  9089  0BB4                     l1141:	
  9090                           
  9091                           ;SYSC_B1.c: 57: if (RA5 == 0) {
  9092  0BB4  1A85               	btfsc	5,5	;volatile
  9093  0BB5  0008               	return
  9094                           
  9095                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
  9096  0BB6  11A6               	bcf	_SYSC,3
  9097  0BB7  0008               	return
  9098  0BB8                     __end_of_DetectSYSC_Signal:	
  9099                           
  9100                           	psect	text61
  9101  0DD8                     __ptext61:	
  9102 ;; *************** function _CDS_Main *****************
  9103 ;; Defined at:
  9104 ;;		line 11 in file "../src/CDS_B1.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;		None
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;		None
  9109 ;; Return value:  Size  Location     Type
  9110 ;;		None               void
  9111 ;; Registers used:
  9112 ;;		wreg, status,2, status,0
  9113 ;; Tracked objects:
  9114 ;;		On entry : 0/0
  9115 ;;		On exit  : 0/0
  9116 ;;		Unchanged: 0/0
  9117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9118 ;;      Params:         0       0       0       0
  9119 ;;      Locals:         0       0       0       0
  9120 ;;      Temps:          0       3       0       0
  9121 ;;      Totals:         0       3       0       0
  9122 ;;Total ram usage:        3 bytes
  9123 ;; Hardware stack levels used:    1
  9124 ;; Hardware stack levels required when called:    2
  9125 ;; This function calls:
  9126 ;;		Nothing
  9127 ;; This function is called by:
  9128 ;;		_main
  9129 ;; This function uses a non-reentrant model
  9130 ;;
  9131                           
  9132                           
  9133                           ;psect for function _CDS_Main
  9134  0DD8                     _CDS_Main:	
  9135                           
  9136                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9137                           
  9138                           ;incstack = 0
  9139                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9140  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  9141  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  9142  0DDA  1C2B               	btfss	__CDS,0
  9143  0DDB  0008               	return
  9144                           
  9145                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9146  0DDC  18AB               	btfsc	__CDS,1
  9147  0DDD  2DEB               	goto	l123
  9148                           
  9149                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9150  0DDE  19AB               	btfsc	__CDS,3
  9151  0DDF  0008               	return
  9152                           
  9153                           ;CDS_B1.c: 16: _CDS.Time++;
  9154  0DE0  3001               	movlw	1
  9155  0DE1  00DA               	movwf	??_CDS_Main
  9156  0DE2  085A               	movf	??_CDS_Main,w
  9157  0DE3  07AC               	addwf	__CDS+1,f
  9158                           
  9159                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
  9160  0DE4  3005               	movlw	5
  9161  0DE5  022C               	subwf	__CDS+1,w
  9162  0DE6  1C03               	skipc
  9163  0DE7  0008               	return
  9164                           
  9165                           ;CDS_B1.c: 18: {
  9166                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9167  0DE8  01AC               	clrf	__CDS+1
  9168                           
  9169                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9170  0DE9  15AB               	bsf	__CDS,3
  9171                           
  9172                           ;CDS_B1.c: 21: }
  9173                           ;CDS_B1.c: 22: }
  9174                           ;CDS_B1.c: 23: } else {
  9175  0DEA  0008               	return
  9176  0DEB                     l123:	
  9177                           
  9178                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9179  0DEB  1CAB               	btfss	__CDS,1
  9180  0DEC  0008               	return
  9181                           
  9182                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9183  0DED  10AB               	bcf	__CDS,1
  9184                           
  9185                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9186  0DEE  1A2B               	btfsc	__CDS,4
  9187  0DEF  2DF6               	goto	l4838
  9188                           
  9189                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9190  0DF0  082D               	movf	__CDS+2,w
  9191  0DF1  022E               	subwf	__CDS+3,w
  9192  0DF2  1C03               	skipc
  9193  0DF3  0008               	return
  9194                           
  9195                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9196  0DF4  162B               	bsf	__CDS,4
  9197                           
  9198                           ;CDS_B1.c: 29: }
  9199                           ;CDS_B1.c: 30: } else {
  9200  0DF5  0008               	return
  9201  0DF6                     l4838:	
  9202                           
  9203                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9204  0DF6  082D               	movf	__CDS+2,w
  9205  0DF7  3E9C               	addlw	156
  9206  0DF8  00DA               	movwf	??_CDS_Main
  9207  0DF9  30FF               	movlw	255
  9208  0DFA  1803               	skipnc
  9209  0DFB  3000               	movlw	0
  9210  0DFC  00DB               	movwf	??_CDS_Main+1
  9211  0DFD  085B               	movf	??_CDS_Main+1,w
  9212  0DFE  3A80               	xorlw	128
  9213  0DFF  00DC               	movwf	??_CDS_Main+2
  9214  0E00  3080               	movlw	128
  9215  0E01  025C               	subwf	??_CDS_Main+2,w
  9216  0E02  1D03               	skipz
  9217  0E03  2E06               	goto	u5905
  9218  0E04  082E               	movf	__CDS+3,w
  9219  0E05  025A               	subwf	??_CDS_Main,w
  9220  0E06                     u5905:	
  9221  0E06  1C03               	skipc
  9222  0E07  0008               	return
  9223                           
  9224                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9225  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  9226  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  9227  0E0A  122B               	bcf	__CDS,4
  9228  0E0B  0008               	return
  9229  0E0C                     __end_of_CDS_Main:	
  9230                           
  9231                           	psect	text62
  9232  0B2D                     __ptext62:	
  9233 ;; *************** function _CDS_Initialization *****************
  9234 ;; Defined at:
  9235 ;;		line 7 in file "../src/CDS_B1.c"
  9236 ;; Parameters:    Size  Location     Type
  9237 ;;		None
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;		None
  9240 ;; Return value:  Size  Location     Type
  9241 ;;		None               void
  9242 ;; Registers used:
  9243 ;;		None
  9244 ;; Tracked objects:
  9245 ;;		On entry : 0/0
  9246 ;;		On exit  : 0/0
  9247 ;;		Unchanged: 0/0
  9248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9249 ;;      Params:         0       0       0       0
  9250 ;;      Locals:         0       0       0       0
  9251 ;;      Temps:          0       0       0       0
  9252 ;;      Totals:         0       0       0       0
  9253 ;;Total ram usage:        0 bytes
  9254 ;; Hardware stack levels used:    1
  9255 ;; Hardware stack levels required when called:    2
  9256 ;; This function calls:
  9257 ;;		Nothing
  9258 ;; This function is called by:
  9259 ;;		_main
  9260 ;; This function uses a non-reentrant model
  9261 ;;
  9262                           
  9263                           
  9264                           ;psect for function _CDS_Initialization
  9265  0B2D                     _CDS_Initialization:	
  9266                           
  9267                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9268                           
  9269                           ;incstack = 0
  9270                           ; Regs used in _CDS_Initialization: []
  9271  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  9272  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  9273  0B2F  142B               	bsf	__CDS,0
  9274  0B30  0008               	return
  9275  0B31                     __end_of_CDS_Initialization:	
  9276                           
  9277                           	psect	text63
  9278  0CB3                     __ptext63:	
  9279 ;; *************** function _ISR *****************
  9280 ;; Defined at:
  9281 ;;		line 112 in file "../src/MCU_B1.c"
  9282 ;; Parameters:    Size  Location     Type
  9283 ;;		None
  9284 ;; Auto vars:     Size  Location     Type
  9285 ;;		None
  9286 ;; Return value:  Size  Location     Type
  9287 ;;		None               void
  9288 ;; Registers used:
  9289 ;;		wreg, status,2, status,0, pclath, cstack
  9290 ;; Tracked objects:
  9291 ;;		On entry : 0/0
  9292 ;;		On exit  : 0/0
  9293 ;;		Unchanged: 0/0
  9294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9295 ;;      Params:         0       0       0       0
  9296 ;;      Locals:         0       0       0       0
  9297 ;;      Temps:          4       0       0       0
  9298 ;;      Totals:         4       0       0       0
  9299 ;;Total ram usage:        4 bytes
  9300 ;; Hardware stack levels used:    1
  9301 ;; Hardware stack levels required when called:    1
  9302 ;; This function calls:
  9303 ;;		_TMR1_ISR
  9304 ;; This function is called by:
  9305 ;;		Interrupt level 1
  9306 ;; This function uses a non-reentrant model
  9307 ;;
  9308                           
  9309                           
  9310                           ;psect for function _ISR
  9311  0CB3                     _ISR:	
  9312                           
  9313                           ;MCU_B1.c: 121: if (TMR1IE == 1 && TMR1IF == 1) {
  9314  0CB3  1683               	bsf	3,5	;RP0=1, select bank1
  9315  0CB4  1303               	bcf	3,6	;RP1=0, select bank1
  9316  0CB5  1C0C               	btfss	12,0	;volatile
  9317  0CB6  2CBE               	goto	i1l445
  9318  0CB7  1283               	bcf	3,5	;RP0=0, select bank0
  9319  0CB8  1303               	bcf	3,6	;RP1=0, select bank0
  9320  0CB9  1C0C               	btfss	12,0	;volatile
  9321  0CBA  2CBE               	goto	i1l445
  9322                           
  9323                           ;MCU_B1.c: 122: TMR1_ISR();
  9324  0CBB  158A  2470  158A   	fcall	_TMR1_ISR
  9325  0CBE                     i1l445:	
  9326                           ;MCU_B1.c: 123: }
  9327                           ;MCU_B1.c: 144: return;
  9328                           
  9329  0CBE  0873               	movf	??_ISR+3,w
  9330  0CBF  1283               	bcf	3,5	;RP0=0, select bank0
  9331  0CC0  1303               	bcf	3,6	;RP1=0, select bank0
  9332  0CC1  00FF               	movwf	127
  9333  0CC2  0872               	movf	??_ISR+2,w
  9334  0CC3  008A               	movwf	10
  9335  0CC4  0871               	movf	??_ISR+1,w
  9336  0CC5  0084               	movwf	4
  9337  0CC6  0E70               	swapf	??_ISR^(0+-128),w
  9338  0CC7  0083               	movwf	3
  9339  0CC8  0EFE               	swapf	126,f
  9340  0CC9  0E7E               	swapf	126,w
  9341  0CCA  0009               	retfie
  9342  0CCB                     __end_of_ISR:	
  9343                           
  9344                           	psect	intentry
  9345  0004                     __pintentry:	
  9346                           ;incstack = 0
  9347                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9348                           
  9349  0004                     interrupt_function:	
  9350  007E                     saved_w	set	btemp
  9351  0004  00FE               	movwf	btemp
  9352  0005  0E03               	swapf	3,w
  9353  0006  00F0               	movwf	??_ISR
  9354  0007  0804               	movf	4,w
  9355  0008  00F1               	movwf	??_ISR+1
  9356  0009  080A               	movf	10,w
  9357  000A  00F2               	movwf	??_ISR+2
  9358  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9359  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9360  000D  087F               	movf	btemp+1,w
  9361  000E  00F3               	movwf	??_ISR+3
  9362  000F  158A  2CB3         	ljmp	_ISR
  9363                           
  9364                           	psect	text64
  9365  0C70                     __ptext64:	
  9366 ;; *************** function _TMR1_ISR *****************
  9367 ;; Defined at:
  9368 ;;		line 232 in file "../src/MCU_B1.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;		None
  9371 ;; Auto vars:     Size  Location     Type
  9372 ;;		None
  9373 ;; Return value:  Size  Location     Type
  9374 ;;		None               void
  9375 ;; Registers used:
  9376 ;;		wreg, status,2
  9377 ;; Tracked objects:
  9378 ;;		On entry : 0/0
  9379 ;;		On exit  : 0/0
  9380 ;;		Unchanged: 0/0
  9381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9382 ;;      Params:         0       0       0       0
  9383 ;;      Locals:         0       0       0       0
  9384 ;;      Temps:          0       0       0       0
  9385 ;;      Totals:         0       0       0       0
  9386 ;;Total ram usage:        0 bytes
  9387 ;; Hardware stack levels used:    1
  9388 ;; This function calls:
  9389 ;;		Nothing
  9390 ;; This function is called by:
  9391 ;;		_ISR
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           
  9396                           ;psect for function _TMR1_ISR
  9397  0C70                     _TMR1_ISR:	
  9398                           
  9399                           ;MCU_B1.c: 234: TMR1H = (int)((65536-1480)/256);
  9400                           
  9401                           ;incstack = 0
  9402                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9403  0C70  30FA               	movlw	250
  9404  0C71  1283               	bcf	3,5	;RP0=0, select bank0
  9405  0C72  1303               	bcf	3,6	;RP1=0, select bank0
  9406  0C73  008F               	movwf	15	;volatile
  9407                           
  9408                           ;MCU_B1.c: 235: TMR1L = (int)((65536-1480)%256);
  9409  0C74  3038               	movlw	56
  9410  0C75  008E               	movwf	14	;volatile
  9411                           
  9412                           ;MCU_B1.c: 236: TMR1IF = 0;
  9413  0C76  100C               	bcf	12,0	;volatile
  9414                           
  9415                           ;MCU_B1.c: 255: Timer1.Count++;
  9416  0C77  3001               	movlw	1
  9417  0C78  07B5               	addwf	_Timer1+1,f
  9418  0C79  1803               	skipnc
  9419  0C7A  0AB6               	incf	_Timer1+2,f
  9420  0C7B  3000               	movlw	0
  9421  0C7C  07B6               	addwf	_Timer1+2,f
  9422                           
  9423                           ;MCU_B1.c: 256: if (Timer1.Count == (int)(20*10)) {
  9424  0C7D  30C8               	movlw	200
  9425  0C7E  0635               	xorwf	_Timer1+1,w
  9426  0C7F  0436               	iorwf	_Timer1+2,w
  9427  0C80  1D03               	skipz
  9428  0C81  0008               	return
  9429                           
  9430                           ;MCU_B1.c: 257: Timer1.Count = 0;
  9431  0C82  01B5               	clrf	_Timer1+1
  9432  0C83  01B6               	clrf	_Timer1+2
  9433                           
  9434                           ;MCU_B1.c: 258: Timer1.Timeout = 1;
  9435  0C84  1434               	bsf	_Timer1,0
  9436  0C85  0008               	return
  9437  0C86                     __end_of_TMR1_ISR:	
  9438  007E                     btemp	set	126	;btemp
  9439  007E                     wtemp	set	126
  9440  007E                     wtemp0	set	126
  9441  0080                     wtemp1	set	128
  9442  0082                     wtemp2	set	130
  9443  0084                     wtemp3	set	132
  9444  0086                     wtemp4	set	134
  9445  0088                     wtemp5	set	136
  9446  007F                     wtemp6	set	127
  9447  007E                     ttemp	set	126
  9448  007E                     ttemp0	set	126
  9449  0081                     ttemp1	set	129
  9450  0084                     ttemp2	set	132
  9451  0087                     ttemp3	set	135
  9452  007F                     ttemp4	set	127
  9453  007E                     ltemp	set	126
  9454  007E                     ltemp0	set	126
  9455  0082                     ltemp1	set	130
  9456  0086                     ltemp2	set	134
  9457  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         141
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     20      78
    BANK1            80      0      79
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK0[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_Lights_Count
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_Lights_Close
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _setLights->_LightsPointSelect
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _Lights_Close->_getMain_All_LightsStatus
    _setLights_Initialization->_LightsPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _getLights_Status->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _main->_getPIR_AD
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   22361
                                             15 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           3     3      0     555
                                              0 BANK0      3     3      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2785
                                              8 BANK0      7     6      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     923
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     669
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     524
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1294
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1294
                                              5 COMMON     1     1      0
                                              8 BANK0      1     1      0
                            ___awdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             9     9      0    3623
                                              6 BANK0      9     9      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1480
                                              7 BANK0      6     6      0
                            ___lwdiv
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    2144
                       _Lights_Close
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0     634
                                              3 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1     371
                                              0 BANK0      3     2      1
                  _LightsPointSelect
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      62
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       5     5      0    1222
                                              8 BANK0      5     5      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lights_Close                                         1     1      0      24
                                              5 COMMON     1     1      0
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2262
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2262
                                              2 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2377
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2377
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       7     7      0    3891
                                              6 BANK0      7     7      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _setLights_Trigger                                    3     2      1     940
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2222
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      68
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
       _LightsPointSelect
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Close
       _getMain_All_LightsStatus
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _LightsPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      4E       5       97.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      A7      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Jan 06 16:49:05 2015

                      _WDT_Clearing 0002           getMain_Lights_Count@count 0074  
                      ___awdiv@sign 005F                                  fsr 0004  
                               l123 0DEB                                 l268 0CD4  
                               l269 0CDC                                 l630 0E44  
                               l625 0E2B                                 l626 0E48  
                               l731 0259                                 l740 03CA  
                               l732 0255                                 l733 024F  
                               l745 0380                                 l729 03F3  
                               l739 03CC                                 l931 007F  
                               l923 0204                                 l924 0079  
                               l933 0092                                 l925 0048  
                               l854 064D                                 l928 005B  
                               l849 0650                                 _GIE 005F  
                               _RB2 0032                                 _RA4 002C  
                               _LED 0076                                 _RB3 0033  
                               _RA5 002D                                 _RB4 0034  
                               _RB5 0035                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0CB3                                 _PSA 040B  
                               _WDT 0037                                 _Cmd 0039  
            getAll_Lights_Line@line 005A                                 fsr0 0004  
                               indf 0000                     __end_of_ADC_Set 0B5E  
         __end_of_LightsPointSelect 0B89                    _getLights_Status 0C02  
           __size_of_Lights_Control 009B                                ?_ISR 0070  
                        Load_Main@i 0065                                l1141 0BB4  
                              l3240 0E27                                l3232 0E1B  
                              l3250 0E3F                                l3242 0E2F  
                              l1299 0D4B                                l5012 0239  
                              l5050 02BB                                l4500 0FFA  
                              l5044 027F                                l5028 0258  
                              l5212 00B5                                l4430 0FA0  
                              l5230 00D9                                l5320 066E  
                              l5136 03E0                                l5240 0119  
                              l5224 00CC                                l5330 0694  
                              l5154 0D4C                                l5082 035A  
                              l3570 0EBA                                l4610 0D30  
                              l4444 0FB1                                l4452 0FB9  
                              l5340 06A1                                l5332 069D  
                              l4524 0CAB                                l5076 034E  
                              l5228 00D8                                l3564 0EA1  
                              l4604 0D27                                l4462 0FCC  
                              l4470 0FD4                                l4438 0FA8  
                              l5086 0372                                l5262 0196  
                              l5174 0069                                l4606 0D2A  
                              l4640 0768                                l4552 07F8  
                              l4544 07D8                                l5280 01D4  
                              l5248 012D                                l5264 01A5  
                              l4474 0FDC                                l4466 0FD0  
                              l5338 06BE                                l4650 077A  
                              l4570 0EE3                                l4810 0E78  
                              l4802 0E54                                l5098 03A4  
                              l5258 0164                                l4730 063D  
                              l4714 0622                                l4492 0FEE  
                              l4652 0786                                l4644 076E  
                              l4636 0762                                l4580 0EEB  
                              l4564 0ED8                                l4804 0E62  
                              l4740 064C                                l4900 0735  
                              l4654 078E                                l4582 0EF9  
                              l4814 0E83                                l4496 0FF4  
                              l4656 079C                                l4592 0F1A  
                              l5376 0F44                                l4914 0D75  
                              l4596 0F22                                l4588 0F0F  
                              l4940 0462                                l5388 0F67  
                              l4838 0DF6                                l4758 0DD1  
                              l4776 0582                                l4880 0708  
                              l4872 06EC                                l4952 047A  
                              l4944 046A                                l4936 045A  
                              l3888 0CF5                                l4698 05EC  
                              l4962 0491                                l4788 05BE  
                              l4884 0711                                l4948 0472  
                              l4992 0523                                l4984 04F7  
                              l4968 04AD                                l4978 04DB  
                              l4998 0531               _myMain_Initialization 0B1A  
                      __CFG_WDTE$ON 0000                                u3315 0EC6  
                              u5315 0EFA                                _PEIE 005E  
                              u5325 0F06                                u5335 0F10  
                              u6305 027D                                u5450 0783  
                              u6315 02B9                                u5195 0C55  
                              u6405 0395                                u6325 0310  
                              u5470 0799                                u5710 057E  
                              u5295 0EEE                                u5805 0E6F  
                              u5735 05A3                                u5815 0E79  
                              u5905 0E06                                u5685 0566  
                              u6805 01B5                                u5775 0E57  
                              u6735 00F7                                u6745 010F  
                              u5795 0E63                                u6765 014B  
                              u6950 06C7                                u6855 01F1  
                              u6785 0188                                u6955 06AA  
                              __CDS 002B             ?_setSYSC_Initialization 0070  
                              _SYSC 0026                                __PIR 00A0  
                              _Load 00CE                                _Temp 003B  
                              _main 0F29                                btemp 007E  
                   __end_of_WDT_Set 0BE2                                ltemp 007E  
                              start 0011                                ttemp 007E  
                              wtemp 007E                    __end_of_CDS_Main 0E0C  
      __size_of_Temp_Initialization 0003                               ??_ISR 0070  
                 _setLights_Trigger 0CFF                       ??_Lights_Main 0076  
                     __CFG_PLLEN$ON 0000                    __end_of_LED_Main 0B1E  
                ?_setLights_Trigger 005A                    ??_setPIRLED_Main 005C  
                             ?_main 0069                     __end_of___awdiv 0F29  
                             _ADRES 001E                     ___awdiv@divisor 005A  
                             _T1CON 0010                     __end_of___lwdiv 0E8A  
                     ?_Lights_Close 0070                               i1l445 0CBE  
                   ___awdiv@counter 005E                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087             __end_of_Timeout_Counter 0C5B  
                             _Light 0077                 ??_setLights_Trigger 005B  
                  __end_of_PIR_Main 0222                    __end_of_TMR1_ISR 0C86  
                  __end_of_TMR1_Set 0BD4                               _getAD 0D1A  
    __end_of_setSYSC_Initialization 0B39      getLights_Allow_Condition@allow 005A  
           __end_of_getLight_LoadGO 0B44                    __end_of_WDT_Main 0C35  
                     _LightsControl 0079                      __CFG_BOREN$OFF 0000  
      __end_of_getMain_Lights_Count 0B93                               pclath 000A  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
    __size_of_setLED_Initialization 0012       __end_of_setLED_Initialization 0C47  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   getPIR_AD@channel1 0067  
                 getPIR_AD@channel2 0062              ?_setLoad_AH_AL_Restore 0070  
                 setTemp_Main@error 0062                      _setLights_Main 0DA8  
                    _setLights_Line 0BB8                     __initialization 0013  
                __size_of_SYSC_Main 0003           __end_of_setLights_Trigger 0D1A  
                      __end_of_main 0F8F                    __end_of_Fosc_Set 0B3E  
    getMain_All_LightsStatus@status 0074                      _Exception_Main 0654  
                         ??_ADC_Set 0074                              ??_main 006D  
                    ??_Lights_Close 0075                 __end_of_Lights_Main 0D57  
        __size_of_LightsPointSelect 000A            _getMain_All_LightsStatus 0B76  
                            ?_getAD 0074              ?_myMain_Initialization 0070  
                            _ADCON0 001F                              _ADCON1 009F  
                  ___awdiv@dividend 005C                           ??_WDT_Set 0074  
                            _ANSELA 0185                              _ANSELB 0186  
          _getMain_All_Error_Status 0E0C                              _FVRCON 009D  
            getLights_Status@lights 005A                              _PIRLED 0030  
                            _OSCCON 0090                  __size_of_Load_Main 01D9  
                            _TMR1IE 0460                              _TMR1IF 0060  
                            _IO_Set 0C5B              getLights_Status@status 005B  
            __end_of_setLights_Main 0DD8              __end_of_setLights_Line 0BC6  
      __size_of_SYSC_Initialization 0003          __end_of_Mcu_Initialization 0BF1  
                            _Lights 0078                              _Timer1 0034  
       __size_of_CDS_Initialization 0004             ??_Lights_Initialization 0076  
            __end_of_Exception_Main 06CA                Load_Main@Load_Status 0064  
              Exception_Main@lights 0061                           ??___awdiv 0074  
                         ??___lwdiv 0074                Exception_Main@status 0063  
                            _setLED 0F8F                              _myMain 0020  
                  ___awdiv@quotient 0060                  __size_of_Temp_Main 0003  
       __end_of_Load_Initialization 0B21     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    ?_Timeout_Counter 0070  
       getMain_Lights_Count@status1 0075                   __end_of_SYSC_Main 0B27  
                    _Lights_Control 0533             __size_of_LedPointSelect 001A  
                         ?_CDS_Main 0070                    ?_getLight_LoadGO 0070  
       __size_of_PIR_Initialization 000B             __end_of__initialization 0023  
                         ?_LED_Main 0070                       ?_my_MainTimer 0070  
                   ?_setLights_Main 0070                     ?_setLights_Line 0070  
                     ?_setSYSC_Main 0070          __size_of_setLights_Trigger 001B  
                    __pcstackCOMMON 0070                  __size_of_getCDS_AD 002A  
                   ?_Exception_Main 0070            __end_of_getLights_Status 0C13  
                     __end_of_getAD 0D36                           ?_PIR_Main 0070  
                         ?_TMR1_ISR 0070       __size_of_getLight_Load_Status 0006  
                         ?_TMR1_Set 0070              setLoad_AH_AL_Restore@i 0075  
                _LED_Initialization 0B9E                  __size_of_getPIR_AD 0138  
                       _Lights_Main 0D36            _setLights_Initialization 0B50  
              _getMain_Lights_Count 0B89                           ?_WDT_Main 0070  
                 __end_of_Load_Main 03FB          __end_of_set_TimeoutCleared 0B50  
               ?_LED_Initialization 0070              __end_of_Lights_Control 05CE  
                           ??_getAD 0075                 _Temp_Initialization 0B27  
                        ??_CDS_Main 005A                          __pbssBANK0 0020  
                        __pbssBANK1 00A0                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0011                   __end_of_Temp_Main 0B2D  
                           ?_IO_Set 0070                     __CFG_VCAPEN$DIS 0000  
                    ??_my_MainTimer 0074                          ??_LED_Main 0076  
              __end_of_Lights_Close 0C24                      ??_setSYSC_Main 0075  
              ??_LED_Initialization 0076                   LedPointSelect@led 0075  
                        __pmaintext 0F29          ?_getLights_Allow_Condition 0070  
              ?_Temp_Initialization 0070                          ??_PIR_Main 0060  
                        ??_TMR1_ISR 0070                       ?_setTemp_Main 0070  
                __size_of_setLights 0054                          _getLoad_AD 06CA  
                        ??_TMR1_Set 0074                          __pintentry 0004  
                        _getLoad_OK 0B5E                             ?_setLED 005A  
           setLights_Trigger@lights 005C               ?_getMain_Lights_Count 0070  
                           _ADC_Set 0B57                          _getTemp_AD 0D57  
                        ??_WDT_Main 0074              __size_of_getCDS_Status 0008  
                   ?_Lights_Control 0070                   __end_of_getCDS_AD 0DA8  
                           _WDT_Set 0BD4                          ??_Fosc_Set 0074  
                 __end_of_getPIR_AD 0533             ??_setLoad_AH_AL_Restore 0074  
    _getLights_Allow_Condition$4633 005B                     __size_of_IO_Set 0015  
                        getCDS_AD@i 005D                          getCDS_AD@j 005E  
                           _Lights1 0047                             _VarLED1 0052  
                           _VarLED2 0056               ??_Temp_Initialization 0074  
                    ??_setTemp_Main 0075                             ___awdiv 0ECC  
                           ___lwdiv 0E4A          ??_getMain_All_LightsStatus 0074  
                       PIR_Main@cds 0068                     __size_of_setLED 0071  
                           __ptext0 0000                             __ptext1 0CE5  
                           __ptext2 0B1A                             __ptext3 0D57  
                           __ptext4 03FB                             __ptext5 06CA  
                           __ptext6 0D7E                             __ptext7 0D1A  
                           __ptext8 0B4A                             __ptext9 0C47  
                        getPIR_AD@i 0068                          getPIR_AD@j 0066  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 0B21             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0CCB  
                           clrloop0 0B6F                   __end_of_setLights 0800  
              end_of_initialization 0023                       _getCDS_Status 0B66  
              ?_SYSC_Initialization 0070               _setLED_Initialization 0C35  
                       ?_getLoad_AD 0070      __size_of_Lights_Initialization 0004  
                       ?_getLoad_OK 0070              ??_getMain_Lights_Count 0074  
     __end_of_Lights_Initialization 0B35                         ?_getTemp_AD 0070  
          setLED_Initialization@led 005C                  _Mcu_Initialization 0BE2  
              __end_of_my_MainTimer 0CFF                __end_of_setSYSC_Main 0ECC  
            __end_of_LedPointSelect 0CE5                 setPIRLED_Main@count 005D  
               ?_Mcu_Initialization 0070               __size_of_Lights_Close 0011  
           __size_of_setPIRLED_Main 0071                    ??_setLights_Main 0076  
                  ??_setLights_Line 0074                setLights_Main@lights 005D  
                         _SYSC_Main 0B24     getMain_All_Error_Status@command 005E  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0070  
             ??_SYSC_Initialization 0074                    ??_Exception_Main 0060  
                    __end_of_IO_Set 0C70          __end_of_CDS_Initialization 0B31  
        ??_setLights_Initialization 0076                   __size_of_LED_Main 0003  
              ??_Mcu_Initialization 0075                       ?_WDT_Clearing 0070  
                 ?_getLights_Status 0070                        ?_Lights_Main 0070  
                 __size_of_PIR_Main 01FC                   __size_of_TMR1_ISR 0016  
                ??_getLights_Status 0076                   __size_of_TMR1_Set 000E  
                    __end_of_setLED 1000            ??_setSYSC_Initialization 0074  
                      _Lights_Close 0C13                   __size_of_WDT_Main 0011  
               _Lights_Control$4611 0064                 start_initialization 0013  
                   ?_LedPointSelect 0070                setLights_Line@lights 0074  
                         _Load_Main 0222                         __end_of_ISR 0CCB  
        __end_of_PIR_Initialization 0B9E        __size_of_Load_Initialization 0003  
      __end_of_getLight_Load_Status 0B4A     __size_of_setTemp_Initialization 0001  
               getCDS_Status@status 0074                __end_of_setTemp_Main 0654  
               __size_of_getLoad_AD 0071                 __size_of_getLoad_OK 0008  
                        ?_SYSC_Main 0070                  _set_TimeoutCleared 0B4A  
                          ??_IO_Set 0074            __size_of_Timeout_Counter 0014  
                         _VarErrLED 004E                 __size_of_getTemp_AD 0027  
            ?_setLED_Initialization 0070                   __size_of_Fosc_Set 0005  
          __size_of_getLight_LoadGO 0006                           _Temp_Main 0B2A  
                   setLights@lights 005C                 ?_set_TimeoutCleared 0070  
                    ??_WDT_Clearing 0074         ??_getLights_Allow_Condition 0075  
               Exception_Main@count 0062                     setLights@status 005A  
               Exception_Main@error 0066    __end_of_getMain_All_LightsStatus 0B7F  
                          ??_setLED 0076                            ?_ADC_Set 0070  
                  ??_Lights_Control 0062    __end_of_getMain_All_Error_Status 0E4A  
                       __pbssCOMMON 0076                           ___latbits 0001  
                        ?_Load_Main 0070                       __pcstackBANK0 005A  
              ??_set_TimeoutCleared 0074          __end_of_getAll_Lights_Line 0C02  
                          ?_WDT_Set 0070                     ??_getCDS_Status 0074  
                     PIR_Main@error 0065                           _getCDS_AD 0D7E  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0C9C  
                         _getPIR_AD 03FB         __size_of_LED_Initialization 000C  
                   Exception_Main@i 0064                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 005C                      Load_Main@error 0063  
            _setTemp_Initialization 0B19                       _PIR_Main$3125 0066  
                          ?___awdiv 005A               __size_of_my_MainTimer 001A  
                          ?___lwdiv 005A               __size_of_setSYSC_Main 0042  
          setLights_Trigger@command 005A     __size_of_setSYSC_Initialization 0004  
         _getLights_Allow_Condition 0C9C      __size_of_myMain_Initialization 0001  
     __end_of_myMain_Initialization 0B1B                      __size_of_getAD 001C  
                  ___lwdiv@quotient 005F                      _setPIRLED_Main 073B  
                          _CDS_Main 0DD8                         ??_SYSC_Main 0075  
       __end_of_Temp_Initialization 0B2A                   interrupt_function 0004  
                        ?_getCDS_AD 005A                            _LED_Main 0B1B  
                         _setLights 07AC                           clear_ram0 0B6E  
  __end_of_setLights_Initialization 0B57                        _my_MainTimer 0CE5  
                        ?_getPIR_AD 0062                        _setSYSC_Main 0E8A  
                          _GO_nDONE 00F9                   ??_Timeout_Counter 0074  
                          _PIR_Main 0026                        ??_getLoad_AD 005A  
                          _TMR1_ISR 0C70                        ??_getLoad_OK 0074  
              _getLight_Load_Status 0B44                            _TMR1_Set 0BC6  
                 ??_getLight_LoadGO 0074                        ??_getTemp_AD 005A  
                          _WDT_Main 0C24                    __size_of_ADC_Set 0007  
              __size_of_Lights_Main 0021               __size_of_setTemp_Main 0086  
                       ??_Load_Main 0061              __end_of_setPIRLED_Main 07AC  
    getMain_All_Error_Status@status 005F                         getAD@adcon0 0075  
                       getAD@adcon1 0074                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0009           ?_getMain_All_LightsStatus 0070  
                          _Fosc_Set 0B39                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 073B                  __end_of_getLoad_OK 0B66  
 __size_of_getMain_All_Error_Status 003E           ?_getMain_All_Error_Status 0070  
                        ?_setLights 005A                  __end_of_getTemp_AD 0D7E  
            _setSYSC_Initialization 0B35                   getLoad_AD@channel 005C  
                 _DetectSYSC_Signal 0BAA                            _SwDetect 003A  
                       ??_Temp_Main 0076       _getMain_All_Error_Status$2341 005A  
     _getMain_All_Error_Status$2342 005C                 _Load_Initialization 0B1E  
                ?_DetectSYSC_Signal 0070                           setLED@led 005B  
             ?_getLight_Load_Status 0070                        _setTemp_Main 05CE  
                  __size_of___awdiv 005D      getLight_Load_Status@loadstatus 0074  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0074  
     __size_of_getMain_Lights_Count 000A                 ??_DetectSYSC_Signal 0074  
                _CDS_Initialization 0B2D               _Lights_Initialization 0B31  
                 getTemp_AD@channel 005C                     ?_setPIRLED_Main 0070  
                   ___lwdiv@divisor 005A                ?_Load_Initialization 0070  
               ?_CDS_Initialization 0070                     ___lwdiv@counter 005E  
                          __ptext10 0C24                            __ptext11 0002  
                          __ptext20 0026                            __ptext12 0B2A  
                          __ptext21 0B66                            __ptext13 05CE  
                          __ptext30 0B89                            __ptext22 0B93  
                          __ptext14 0B27                            __ptext31 0B44  
                          __ptext23 0BE2                            __ptext15 0B19  
                          __ptext40 0C9C                            __ptext32 0B3E  
                          __ptext24 0BD4                            __ptext16 0B24  
                          __ptext41 0B5E                            __ptext33 0E4A  
                          __ptext25 0BC6                            __ptext17 0E8A  
                          __ptext50 0B9E                            __ptext42 0533  
                          __ptext34 0B1E                            __ptext26 0C5B  
                          __ptext18 0B21                            __ptext51 0C35  
                          __ptext43 0ECC                            __ptext35 0C86  
                          __ptext27 0B39                            __ptext19 0B35  
                          __ptext60 0BAA                            __ptext52 0654  
                          __ptext44 0C13                            __ptext36 0D36  
                          __ptext28 0B57                            __ptext61 0DD8  
                          __ptext53 0CFF                            __ptext45 0B76  
                          __ptext37 0DA8                            __ptext29 0222  
                          __ptext62 0B2D                            __ptext54 0F8F  
                          __ptext46 0B31                            __ptext38 07AC  
                          __ptext63 0CB3                            __ptext55 0CCB  
                          __ptext47 0B50                            __ptext39 0BB8  
                          __ptext64 0C70                            __ptext56 0E0C  
                          __ptext48 0B1B                            __ptext57 0C02  
                          __ptext49 073B                            __ptext58 0BF1  
                          __ptext59 0B7F           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 0B24             ??_setLED_Initialization 0076  
                       ??_getCDS_AD 005B                       setLED@command 005A  
         __end_of_DetectSYSC_Signal 0BB8                       __size_of_main 0066  
                       ??_getPIR_AD 0063                  _PIR_Initialization 0B93  
              ??_CDS_Initialization 0074         __size_of_Mcu_Initialization 000F  
                      getLoad_OK@ok 0074                 ?_PIR_Initialization 0070  
                          main@argc 0069                            main@argv 006B  
 __size_of_setLights_Initialization 0007           ?_setLights_Initialization 0070  
             ??_Load_Initialization 0076                Lights_Control@lights 0066  
              ??_PIR_Initialization 0074                            intlevel1 0000  
__size_of_getLights_Allow_Condition 0017                         ??_setLights 005B  
           ?_setTemp_Initialization 0070             LightsPointSelect@lights 0075  
                _getAll_Lights_Line 0BF1              ??_getLight_Load_Status 0074  
                       getLoad_AD@i 005F                         getLoad_AD@j 005E  
                       getLoad_AD@k 005D             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 000E                 ?_getAll_Lights_Line 0070  
             getLight_LoadGO@loadgo 0074              ?_Lights_Initialization 0070  
           __size_of_Exception_Main 0076               __size_of_WDT_Clearing 0002  
    setLights_Initialization@lights 005A         __size_of_set_TimeoutCleared 0006  
                 _LightsPointSelect 0B7F                ??_getAll_Lights_Line 0076  
                __CFG_FOSC$INTOSCIO 0000                  ?_LightsPointSelect 0070  
                   _Timeout_Counter 0C47          __end_of_LED_Initialization 0BAA  
             __end_of_getCDS_Status 0B6E      __end_of_setTemp_Initialization 0B1A  
        __size_of_DetectSYSC_Signal 000E                     _getLight_LoadGO 0B3E  
                 getCDS_AD@channel1 005F                   getCDS_AD@channel2 005A  
 __end_of_getLights_Allow_Condition 0CB3                 ??_LightsPointSelect 0074  
             _setLoad_AH_AL_Restore 0C86  
