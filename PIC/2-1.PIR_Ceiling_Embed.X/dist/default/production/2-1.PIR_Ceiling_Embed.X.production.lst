

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Nov 05 17:53:02 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,delta=2
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    77                           	dabs	1,0x7E,2
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0014                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001D                     	;# 
   110  001E                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  0087                     	;# 
   116  0089                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  008F                     	;# 
   121  0090                     	;# 
   122  0091                     	;# 
   123  0092                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0095                     	;# 
   128  0095                     	;# 
   129  0096                     	;# 
   130  0096                     	;# 
   131  0098                     	;# 
   132  0099                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009F                     	;# 
   136  0108                     	;# 
   137  0109                     	;# 
   138  010C                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  0185                     	;# 
   145  0186                     	;# 
   146  018C                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0089                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0095                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0096                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009F                     	;# 
   205  0108                     	;# 
   206  0109                     	;# 
   207  010C                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  0185                     	;# 
   214  0186                     	;# 
   215  018C                     	;# 
   216  0000                     	;# 
   217  0001                     	;# 
   218  0002                     	;# 
   219  0003                     	;# 
   220  0004                     	;# 
   221  0005                     	;# 
   222  0006                     	;# 
   223  0007                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  000E                     	;# 
   231  000F                     	;# 
   232  0010                     	;# 
   233  0011                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0015                     	;# 
   238  0015                     	;# 
   239  0016                     	;# 
   240  0017                     	;# 
   241  0018                     	;# 
   242  0019                     	;# 
   243  001A                     	;# 
   244  001B                     	;# 
   245  001B                     	;# 
   246  001C                     	;# 
   247  001D                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  0081                     	;# 
   251  0085                     	;# 
   252  0086                     	;# 
   253  0087                     	;# 
   254  0089                     	;# 
   255  008C                     	;# 
   256  008D                     	;# 
   257  008E                     	;# 
   258  008F                     	;# 
   259  0090                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0094                     	;# 
   265  0095                     	;# 
   266  0095                     	;# 
   267  0096                     	;# 
   268  0096                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009C                     	;# 
   272  009D                     	;# 
   273  009F                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  010F                     	;# 
   282  0185                     	;# 
   283  0186                     	;# 
   284  018C                     	;# 
   285  0000                     	;# 
   286  0001                     	;# 
   287  0002                     	;# 
   288  0003                     	;# 
   289  0004                     	;# 
   290  0005                     	;# 
   291  0006                     	;# 
   292  0007                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  000E                     	;# 
   300  000F                     	;# 
   301  0010                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0013                     	;# 
   305  0014                     	;# 
   306  0015                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001D                     	;# 
   317  001E                     	;# 
   318  001F                     	;# 
   319  0081                     	;# 
   320  0085                     	;# 
   321  0086                     	;# 
   322  0087                     	;# 
   323  0089                     	;# 
   324  008C                     	;# 
   325  008D                     	;# 
   326  008E                     	;# 
   327  008F                     	;# 
   328  0090                     	;# 
   329  0091                     	;# 
   330  0092                     	;# 
   331  0093                     	;# 
   332  0093                     	;# 
   333  0094                     	;# 
   334  0095                     	;# 
   335  0095                     	;# 
   336  0096                     	;# 
   337  0096                     	;# 
   338  0098                     	;# 
   339  0099                     	;# 
   340  009C                     	;# 
   341  009D                     	;# 
   342  009F                     	;# 
   343  0108                     	;# 
   344  0109                     	;# 
   345  010C                     	;# 
   346  010C                     	;# 
   347  010D                     	;# 
   348  010D                     	;# 
   349  010E                     	;# 
   350  010F                     	;# 
   351  0185                     	;# 
   352  0186                     	;# 
   353  018C                     	;# 
   354  0000                     	;# 
   355  0001                     	;# 
   356  0002                     	;# 
   357  0003                     	;# 
   358  0004                     	;# 
   359  0005                     	;# 
   360  0006                     	;# 
   361  0007                     	;# 
   362  0009                     	;# 
   363  000A                     	;# 
   364  000B                     	;# 
   365  000C                     	;# 
   366  000D                     	;# 
   367  000E                     	;# 
   368  000E                     	;# 
   369  000F                     	;# 
   370  0010                     	;# 
   371  0011                     	;# 
   372  0012                     	;# 
   373  0013                     	;# 
   374  0014                     	;# 
   375  0015                     	;# 
   376  0015                     	;# 
   377  0016                     	;# 
   378  0017                     	;# 
   379  0018                     	;# 
   380  0019                     	;# 
   381  001A                     	;# 
   382  001B                     	;# 
   383  001B                     	;# 
   384  001C                     	;# 
   385  001D                     	;# 
   386  001E                     	;# 
   387  001F                     	;# 
   388  0081                     	;# 
   389  0085                     	;# 
   390  0086                     	;# 
   391  0087                     	;# 
   392  0089                     	;# 
   393  008C                     	;# 
   394  008D                     	;# 
   395  008E                     	;# 
   396  008F                     	;# 
   397  0090                     	;# 
   398  0091                     	;# 
   399  0092                     	;# 
   400  0093                     	;# 
   401  0093                     	;# 
   402  0094                     	;# 
   403  0095                     	;# 
   404  0095                     	;# 
   405  0096                     	;# 
   406  0096                     	;# 
   407  0098                     	;# 
   408  0099                     	;# 
   409  009C                     	;# 
   410  009D                     	;# 
   411  009F                     	;# 
   412  0108                     	;# 
   413  0109                     	;# 
   414  010C                     	;# 
   415  010C                     	;# 
   416  010D                     	;# 
   417  010D                     	;# 
   418  010E                     	;# 
   419  010F                     	;# 
   420  0185                     	;# 
   421  0186                     	;# 
   422  018C                     	;# 
   423  0000                     	;# 
   424  0001                     	;# 
   425  0002                     	;# 
   426  0003                     	;# 
   427  0004                     	;# 
   428  0005                     	;# 
   429  0006                     	;# 
   430  0007                     	;# 
   431  0009                     	;# 
   432  000A                     	;# 
   433  000B                     	;# 
   434  000C                     	;# 
   435  000D                     	;# 
   436  000E                     	;# 
   437  000E                     	;# 
   438  000F                     	;# 
   439  0010                     	;# 
   440  0011                     	;# 
   441  0012                     	;# 
   442  0013                     	;# 
   443  0014                     	;# 
   444  0015                     	;# 
   445  0015                     	;# 
   446  0016                     	;# 
   447  0017                     	;# 
   448  0018                     	;# 
   449  0019                     	;# 
   450  001A                     	;# 
   451  001B                     	;# 
   452  001B                     	;# 
   453  001C                     	;# 
   454  001D                     	;# 
   455  001E                     	;# 
   456  001F                     	;# 
   457  0081                     	;# 
   458  0085                     	;# 
   459  0086                     	;# 
   460  0087                     	;# 
   461  0089                     	;# 
   462  008C                     	;# 
   463  008D                     	;# 
   464  008E                     	;# 
   465  008F                     	;# 
   466  0090                     	;# 
   467  0091                     	;# 
   468  0092                     	;# 
   469  0093                     	;# 
   470  0093                     	;# 
   471  0094                     	;# 
   472  0095                     	;# 
   473  0095                     	;# 
   474  0096                     	;# 
   475  0096                     	;# 
   476  0098                     	;# 
   477  0099                     	;# 
   478  009C                     	;# 
   479  009D                     	;# 
   480  009F                     	;# 
   481  0108                     	;# 
   482  0109                     	;# 
   483  010C                     	;# 
   484  010C                     	;# 
   485  010D                     	;# 
   486  010D                     	;# 
   487  010E                     	;# 
   488  010F                     	;# 
   489  0185                     	;# 
   490  0186                     	;# 
   491  018C                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0009                     	;# 
   501  000A                     	;# 
   502  000B                     	;# 
   503  000C                     	;# 
   504  000D                     	;# 
   505  000E                     	;# 
   506  000E                     	;# 
   507  000F                     	;# 
   508  0010                     	;# 
   509  0011                     	;# 
   510  0012                     	;# 
   511  0013                     	;# 
   512  0014                     	;# 
   513  0015                     	;# 
   514  0015                     	;# 
   515  0016                     	;# 
   516  0017                     	;# 
   517  0018                     	;# 
   518  0019                     	;# 
   519  001A                     	;# 
   520  001B                     	;# 
   521  001B                     	;# 
   522  001C                     	;# 
   523  001D                     	;# 
   524  001E                     	;# 
   525  001F                     	;# 
   526  0081                     	;# 
   527  0085                     	;# 
   528  0086                     	;# 
   529  0087                     	;# 
   530  0089                     	;# 
   531  008C                     	;# 
   532  008D                     	;# 
   533  008E                     	;# 
   534  008F                     	;# 
   535  0090                     	;# 
   536  0091                     	;# 
   537  0092                     	;# 
   538  0093                     	;# 
   539  0093                     	;# 
   540  0094                     	;# 
   541  0095                     	;# 
   542  0095                     	;# 
   543  0096                     	;# 
   544  0096                     	;# 
   545  0098                     	;# 
   546  0099                     	;# 
   547  009C                     	;# 
   548  009D                     	;# 
   549  009F                     	;# 
   550  0108                     	;# 
   551  0109                     	;# 
   552  010C                     	;# 
   553  010C                     	;# 
   554  010D                     	;# 
   555  010D                     	;# 
   556  010E                     	;# 
   557  010F                     	;# 
   558  0185                     	;# 
   559  0186                     	;# 
   560  018C                     	;# 
   561  0000                     	;# 
   562  0001                     	;# 
   563  0002                     	;# 
   564  0003                     	;# 
   565  0004                     	;# 
   566  0005                     	;# 
   567  0006                     	;# 
   568  0007                     	;# 
   569  0009                     	;# 
   570  000A                     	;# 
   571  000B                     	;# 
   572  000C                     	;# 
   573  000D                     	;# 
   574  000E                     	;# 
   575  000E                     	;# 
   576  000F                     	;# 
   577  0010                     	;# 
   578  0011                     	;# 
   579  0012                     	;# 
   580  0013                     	;# 
   581  0014                     	;# 
   582  0015                     	;# 
   583  0015                     	;# 
   584  0016                     	;# 
   585  0017                     	;# 
   586  0018                     	;# 
   587  0019                     	;# 
   588  001A                     	;# 
   589  001B                     	;# 
   590  001B                     	;# 
   591  001C                     	;# 
   592  001D                     	;# 
   593  001E                     	;# 
   594  001F                     	;# 
   595  0081                     	;# 
   596  0085                     	;# 
   597  0086                     	;# 
   598  0087                     	;# 
   599  0089                     	;# 
   600  008C                     	;# 
   601  008D                     	;# 
   602  008E                     	;# 
   603  008F                     	;# 
   604  0090                     	;# 
   605  0091                     	;# 
   606  0092                     	;# 
   607  0093                     	;# 
   608  0093                     	;# 
   609  0094                     	;# 
   610  0095                     	;# 
   611  0095                     	;# 
   612  0096                     	;# 
   613  0096                     	;# 
   614  0098                     	;# 
   615  0099                     	;# 
   616  009C                     	;# 
   617  009D                     	;# 
   618  009F                     	;# 
   619  0108                     	;# 
   620  0109                     	;# 
   621  010C                     	;# 
   622  010C                     	;# 
   623  010D                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  010F                     	;# 
   627  0185                     	;# 
   628  0186                     	;# 
   629  018C                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0009                     	;# 
   639  000A                     	;# 
   640  000B                     	;# 
   641  000C                     	;# 
   642  000D                     	;# 
   643  000E                     	;# 
   644  000E                     	;# 
   645  000F                     	;# 
   646  0010                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0014                     	;# 
   651  0015                     	;# 
   652  0015                     	;# 
   653  0016                     	;# 
   654  0017                     	;# 
   655  0018                     	;# 
   656  0019                     	;# 
   657  001A                     	;# 
   658  001B                     	;# 
   659  001B                     	;# 
   660  001C                     	;# 
   661  001D                     	;# 
   662  001E                     	;# 
   663  001F                     	;# 
   664  0081                     	;# 
   665  0085                     	;# 
   666  0086                     	;# 
   667  0087                     	;# 
   668  0089                     	;# 
   669  008C                     	;# 
   670  008D                     	;# 
   671  008E                     	;# 
   672  008F                     	;# 
   673  0090                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0093                     	;# 
   678  0094                     	;# 
   679  0095                     	;# 
   680  0095                     	;# 
   681  0096                     	;# 
   682  0096                     	;# 
   683  0098                     	;# 
   684  0099                     	;# 
   685  009C                     	;# 
   686  009D                     	;# 
   687  009F                     	;# 
   688  0108                     	;# 
   689  0109                     	;# 
   690  010C                     	;# 
   691  010C                     	;# 
   692  010D                     	;# 
   693  010D                     	;# 
   694  010E                     	;# 
   695  010F                     	;# 
   696  0185                     	;# 
   697  0186                     	;# 
   698  018C                     	;# 
   699  0000                     	;# 
   700  0001                     	;# 
   701  0002                     	;# 
   702  0003                     	;# 
   703  0004                     	;# 
   704  0005                     	;# 
   705  0006                     	;# 
   706  0007                     	;# 
   707  0009                     	;# 
   708  000A                     	;# 
   709  000B                     	;# 
   710  000C                     	;# 
   711  000D                     	;# 
   712  000E                     	;# 
   713  000E                     	;# 
   714  000F                     	;# 
   715  0010                     	;# 
   716  0011                     	;# 
   717  0012                     	;# 
   718  0013                     	;# 
   719  0014                     	;# 
   720  0015                     	;# 
   721  0015                     	;# 
   722  0016                     	;# 
   723  0017                     	;# 
   724  0018                     	;# 
   725  0019                     	;# 
   726  001A                     	;# 
   727  001B                     	;# 
   728  001B                     	;# 
   729  001C                     	;# 
   730  001D                     	;# 
   731  001E                     	;# 
   732  001F                     	;# 
   733  0081                     	;# 
   734  0085                     	;# 
   735  0086                     	;# 
   736  0087                     	;# 
   737  0089                     	;# 
   738  008C                     	;# 
   739  008D                     	;# 
   740  008E                     	;# 
   741  008F                     	;# 
   742  0090                     	;# 
   743  0091                     	;# 
   744  0092                     	;# 
   745  0093                     	;# 
   746  0093                     	;# 
   747  0094                     	;# 
   748  0095                     	;# 
   749  0095                     	;# 
   750  0096                     	;# 
   751  0096                     	;# 
   752  0098                     	;# 
   753  0099                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009F                     	;# 
   757  0108                     	;# 
   758  0109                     	;# 
   759  010C                     	;# 
   760  010C                     	;# 
   761  010D                     	;# 
   762  010D                     	;# 
   763  010E                     	;# 
   764  010F                     	;# 
   765  0185                     	;# 
   766  0186                     	;# 
   767  018C                     	;# 
   768  0000                     	;# 
   769  0001                     	;# 
   770  0002                     	;# 
   771  0003                     	;# 
   772  0004                     	;# 
   773  0005                     	;# 
   774  0006                     	;# 
   775  0007                     	;# 
   776  0009                     	;# 
   777  000A                     	;# 
   778  000B                     	;# 
   779  000C                     	;# 
   780  000D                     	;# 
   781  000E                     	;# 
   782  000E                     	;# 
   783  000F                     	;# 
   784  0010                     	;# 
   785  0011                     	;# 
   786  0012                     	;# 
   787  0013                     	;# 
   788  0014                     	;# 
   789  0015                     	;# 
   790  0015                     	;# 
   791  0016                     	;# 
   792  0017                     	;# 
   793  0018                     	;# 
   794  0019                     	;# 
   795  001A                     	;# 
   796  001B                     	;# 
   797  001B                     	;# 
   798  001C                     	;# 
   799  001D                     	;# 
   800  001E                     	;# 
   801  001F                     	;# 
   802  0081                     	;# 
   803  0085                     	;# 
   804  0086                     	;# 
   805  0087                     	;# 
   806  0089                     	;# 
   807  008C                     	;# 
   808  008D                     	;# 
   809  008E                     	;# 
   810  008F                     	;# 
   811  0090                     	;# 
   812  0091                     	;# 
   813  0092                     	;# 
   814  0093                     	;# 
   815  0093                     	;# 
   816  0094                     	;# 
   817  0095                     	;# 
   818  0095                     	;# 
   819  0096                     	;# 
   820  0096                     	;# 
   821  0098                     	;# 
   822  0099                     	;# 
   823  009C                     	;# 
   824  009D                     	;# 
   825  009F                     	;# 
   826  0108                     	;# 
   827  0109                     	;# 
   828  010C                     	;# 
   829  010C                     	;# 
   830  010D                     	;# 
   831  010D                     	;# 
   832  010E                     	;# 
   833  010F                     	;# 
   834  0185                     	;# 
   835  0186                     	;# 
   836  018C                     	;# 
   837  0000                     	;# 
   838  0001                     	;# 
   839  0002                     	;# 
   840  0003                     	;# 
   841  0004                     	;# 
   842  0005                     	;# 
   843  0006                     	;# 
   844  0007                     	;# 
   845  0009                     	;# 
   846  000A                     	;# 
   847  000B                     	;# 
   848  000C                     	;# 
   849  000D                     	;# 
   850  000E                     	;# 
   851  000E                     	;# 
   852  000F                     	;# 
   853  0010                     	;# 
   854  0011                     	;# 
   855  0012                     	;# 
   856  0013                     	;# 
   857  0014                     	;# 
   858  0015                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0017                     	;# 
   862  0018                     	;# 
   863  0019                     	;# 
   864  001A                     	;# 
   865  001B                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  001D                     	;# 
   869  001E                     	;# 
   870  001F                     	;# 
   871  0081                     	;# 
   872  0085                     	;# 
   873  0086                     	;# 
   874  0087                     	;# 
   875  0089                     	;# 
   876  008C                     	;# 
   877  008D                     	;# 
   878  008E                     	;# 
   879  008F                     	;# 
   880  0090                     	;# 
   881  0091                     	;# 
   882  0092                     	;# 
   883  0093                     	;# 
   884  0093                     	;# 
   885  0094                     	;# 
   886  0095                     	;# 
   887  0095                     	;# 
   888  0096                     	;# 
   889  0096                     	;# 
   890  0098                     	;# 
   891  0099                     	;# 
   892  009C                     	;# 
   893  009D                     	;# 
   894  009F                     	;# 
   895  0108                     	;# 
   896  0109                     	;# 
   897  010C                     	;# 
   898  010C                     	;# 
   899  010D                     	;# 
   900  010D                     	;# 
   901  010E                     	;# 
   902  010F                     	;# 
   903  0185                     	;# 
   904  0186                     	;# 
   905  018C                     	;# 
   906  0000                     	;# 
   907  0001                     	;# 
   908  0002                     	;# 
   909  0003                     	;# 
   910  0004                     	;# 
   911  0005                     	;# 
   912  0006                     	;# 
   913  0007                     	;# 
   914  0009                     	;# 
   915  000A                     	;# 
   916  000B                     	;# 
   917  000C                     	;# 
   918  000D                     	;# 
   919  000E                     	;# 
   920  000E                     	;# 
   921  000F                     	;# 
   922  0010                     	;# 
   923  0011                     	;# 
   924  0012                     	;# 
   925  0013                     	;# 
   926  0014                     	;# 
   927  0015                     	;# 
   928  0015                     	;# 
   929  0016                     	;# 
   930  0017                     	;# 
   931  0018                     	;# 
   932  0019                     	;# 
   933  001A                     	;# 
   934  001B                     	;# 
   935  001B                     	;# 
   936  001C                     	;# 
   937  001D                     	;# 
   938  001E                     	;# 
   939  001F                     	;# 
   940  0081                     	;# 
   941  0085                     	;# 
   942  0086                     	;# 
   943  0087                     	;# 
   944  0089                     	;# 
   945  008C                     	;# 
   946  008D                     	;# 
   947  008E                     	;# 
   948  008F                     	;# 
   949  0090                     	;# 
   950  0091                     	;# 
   951  0092                     	;# 
   952  0093                     	;# 
   953  0093                     	;# 
   954  0094                     	;# 
   955  0095                     	;# 
   956  0095                     	;# 
   957  0096                     	;# 
   958  0096                     	;# 
   959  0098                     	;# 
   960  0099                     	;# 
   961  009C                     	;# 
   962  009D                     	;# 
   963  009F                     	;# 
   964  0108                     	;# 
   965  0109                     	;# 
   966  010C                     	;# 
   967  010C                     	;# 
   968  010D                     	;# 
   969  010D                     	;# 
   970  010E                     	;# 
   971  010F                     	;# 
   972  0185                     	;# 
   973  0186                     	;# 
   974  018C                     	;# 
   975  0000                     	;# 
   976  0001                     	;# 
   977  0002                     	;# 
   978  0003                     	;# 
   979  0004                     	;# 
   980  0005                     	;# 
   981  0006                     	;# 
   982  0007                     	;# 
   983  0009                     	;# 
   984  000A                     	;# 
   985  000B                     	;# 
   986  000C                     	;# 
   987  000D                     	;# 
   988  000E                     	;# 
   989  000E                     	;# 
   990  000F                     	;# 
   991  0010                     	;# 
   992  0011                     	;# 
   993  0012                     	;# 
   994  0013                     	;# 
   995  0014                     	;# 
   996  0015                     	;# 
   997  0015                     	;# 
   998  0016                     	;# 
   999  0017                     	;# 
  1000  0018                     	;# 
  1001  0019                     	;# 
  1002  001A                     	;# 
  1003  001B                     	;# 
  1004  001B                     	;# 
  1005  001C                     	;# 
  1006  001D                     	;# 
  1007  001E                     	;# 
  1008  001F                     	;# 
  1009  0081                     	;# 
  1010  0085                     	;# 
  1011  0086                     	;# 
  1012  0087                     	;# 
  1013  0089                     	;# 
  1014  008C                     	;# 
  1015  008D                     	;# 
  1016  008E                     	;# 
  1017  008F                     	;# 
  1018  0090                     	;# 
  1019  0091                     	;# 
  1020  0092                     	;# 
  1021  0093                     	;# 
  1022  0093                     	;# 
  1023  0094                     	;# 
  1024  0095                     	;# 
  1025  0095                     	;# 
  1026  0096                     	;# 
  1027  0096                     	;# 
  1028  0098                     	;# 
  1029  0099                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009F                     	;# 
  1033  0108                     	;# 
  1034  0109                     	;# 
  1035  010C                     	;# 
  1036  010C                     	;# 
  1037  010D                     	;# 
  1038  010D                     	;# 
  1039  010E                     	;# 
  1040  010F                     	;# 
  1041  0185                     	;# 
  1042  0186                     	;# 
  1043  018C                     	;# 
  1044  0000                     	;# 
  1045  0001                     	;# 
  1046  0002                     	;# 
  1047  0003                     	;# 
  1048  0004                     	;# 
  1049  0005                     	;# 
  1050  0006                     	;# 
  1051  0007                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  000E                     	;# 
  1059  000F                     	;# 
  1060  0010                     	;# 
  1061  0011                     	;# 
  1062  0012                     	;# 
  1063  0013                     	;# 
  1064  0014                     	;# 
  1065  0015                     	;# 
  1066  0015                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001B                     	;# 
  1074  001C                     	;# 
  1075  001D                     	;# 
  1076  001E                     	;# 
  1077  001F                     	;# 
  1078  0081                     	;# 
  1079  0085                     	;# 
  1080  0086                     	;# 
  1081  0087                     	;# 
  1082  0089                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  008F                     	;# 
  1087  0090                     	;# 
  1088  0091                     	;# 
  1089  0092                     	;# 
  1090  0093                     	;# 
  1091  0093                     	;# 
  1092  0094                     	;# 
  1093  0095                     	;# 
  1094  0095                     	;# 
  1095  0096                     	;# 
  1096  0096                     	;# 
  1097  0098                     	;# 
  1098  0099                     	;# 
  1099  009C                     	;# 
  1100  009D                     	;# 
  1101  009F                     	;# 
  1102  0108                     	;# 
  1103  0109                     	;# 
  1104  010C                     	;# 
  1105  010C                     	;# 
  1106  010D                     	;# 
  1107  010D                     	;# 
  1108  010E                     	;# 
  1109  010F                     	;# 
  1110  0185                     	;# 
  1111  0186                     	;# 
  1112  018C                     	;# 
  1113  0000                     	;# 
  1114  0001                     	;# 
  1115  0002                     	;# 
  1116  0003                     	;# 
  1117  0004                     	;# 
  1118  0005                     	;# 
  1119  0006                     	;# 
  1120  0007                     	;# 
  1121  0009                     	;# 
  1122  000A                     	;# 
  1123  000B                     	;# 
  1124  000C                     	;# 
  1125  000D                     	;# 
  1126  000E                     	;# 
  1127  000E                     	;# 
  1128  000F                     	;# 
  1129  0010                     	;# 
  1130  0011                     	;# 
  1131  0012                     	;# 
  1132  0013                     	;# 
  1133  0014                     	;# 
  1134  0015                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0017                     	;# 
  1138  0018                     	;# 
  1139  0019                     	;# 
  1140  001A                     	;# 
  1141  001B                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  001D                     	;# 
  1145  001E                     	;# 
  1146  001F                     	;# 
  1147  0081                     	;# 
  1148  0085                     	;# 
  1149  0086                     	;# 
  1150  0087                     	;# 
  1151  0089                     	;# 
  1152  008C                     	;# 
  1153  008D                     	;# 
  1154  008E                     	;# 
  1155  008F                     	;# 
  1156  0090                     	;# 
  1157  0091                     	;# 
  1158  0092                     	;# 
  1159  0093                     	;# 
  1160  0093                     	;# 
  1161  0094                     	;# 
  1162  0095                     	;# 
  1163  0095                     	;# 
  1164  0096                     	;# 
  1165  0096                     	;# 
  1166  0098                     	;# 
  1167  0099                     	;# 
  1168  009C                     	;# 
  1169  009D                     	;# 
  1170  009F                     	;# 
  1171  0108                     	;# 
  1172  0109                     	;# 
  1173  010C                     	;# 
  1174  010C                     	;# 
  1175  010D                     	;# 
  1176  010D                     	;# 
  1177  010E                     	;# 
  1178  010F                     	;# 
  1179  0185                     	;# 
  1180  0186                     	;# 
  1181  018C                     	;# 
  1182  0000                     	;# 
  1183  0001                     	;# 
  1184  0002                     	;# 
  1185  0003                     	;# 
  1186  0004                     	;# 
  1187  0005                     	;# 
  1188  0006                     	;# 
  1189  0007                     	;# 
  1190  0009                     	;# 
  1191  000A                     	;# 
  1192  000B                     	;# 
  1193  000C                     	;# 
  1194  000D                     	;# 
  1195  000E                     	;# 
  1196  000E                     	;# 
  1197  000F                     	;# 
  1198  0010                     	;# 
  1199  0011                     	;# 
  1200  0012                     	;# 
  1201  0013                     	;# 
  1202  0014                     	;# 
  1203  0015                     	;# 
  1204  0015                     	;# 
  1205  0016                     	;# 
  1206  0017                     	;# 
  1207  0018                     	;# 
  1208  0019                     	;# 
  1209  001A                     	;# 
  1210  001B                     	;# 
  1211  001B                     	;# 
  1212  001C                     	;# 
  1213  001D                     	;# 
  1214  001E                     	;# 
  1215  001F                     	;# 
  1216  0081                     	;# 
  1217  0085                     	;# 
  1218  0086                     	;# 
  1219  0087                     	;# 
  1220  0089                     	;# 
  1221  008C                     	;# 
  1222  008D                     	;# 
  1223  008E                     	;# 
  1224  008F                     	;# 
  1225  0090                     	;# 
  1226  0091                     	;# 
  1227  0092                     	;# 
  1228  0093                     	;# 
  1229  0093                     	;# 
  1230  0094                     	;# 
  1231  0095                     	;# 
  1232  0095                     	;# 
  1233  0096                     	;# 
  1234  0096                     	;# 
  1235  0098                     	;# 
  1236  0099                     	;# 
  1237  009C                     	;# 
  1238  009D                     	;# 
  1239  009F                     	;# 
  1240  0108                     	;# 
  1241  0109                     	;# 
  1242  010C                     	;# 
  1243  010C                     	;# 
  1244  010D                     	;# 
  1245  010D                     	;# 
  1246  010E                     	;# 
  1247  010F                     	;# 
  1248  0185                     	;# 
  1249  0186                     	;# 
  1250  018C                     	;# 
  1251  001F                     _ADCON0	set	31
  1252  001E                     _ADRES	set	30
  1253  0005                     _PORTA	set	5
  1254  0006                     _PORTB	set	6
  1255  0007                     _PORTC	set	7
  1256  0010                     _T1CON	set	16
  1257  000F                     _TMR1H	set	15
  1258  000E                     _TMR1L	set	14
  1259  005F                     _GIE	set	95
  1260  00F9                     _GO_nDONE	set	249
  1261  005E                     _PEIE	set	94
  1262  002C                     _RA4	set	44
  1263  002D                     _RA5	set	45
  1264  0032                     _RB2	set	50
  1265  0033                     _RB3	set	51
  1266  0034                     _RB4	set	52
  1267  0035                     _RB5	set	53
  1268  0060                     _TMR1IF	set	96
  1269  009F                     _ADCON1	set	159
  1270  009D                     _FVRCON	set	157
  1271  0090                     _OSCCON	set	144
  1272  0085                     _TRISA	set	133
  1273  0086                     _TRISB	set	134
  1274  0087                     _TRISC	set	135
  1275  0408                     _PS0	set	1032
  1276  0409                     _PS1	set	1033
  1277  040A                     _PS2	set	1034
  1278  040B                     _PSA	set	1035
  1279  0460                     _TMR1IE	set	1120
  1280  0185                     _ANSELA	set	389
  1281  0186                     _ANSELB	set	390
  1282                           
  1283                           	psect	text0
  1284  0000                     __ptext0:	
  1285                           ; #config settings
  1286                           
  1287                           
  1288                           ;psect for function _TMR1_ISR
  1289  0000                     
  1290                           	psect	cinit
  1291  0013                     start_initialization:	
  1292  0013                     __initialization:	
  1293                           
  1294                           ; Clear objects allocated to COMMON
  1295  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1296  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1297  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1298  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1299                           
  1300                           ; Clear objects allocated to BANK0
  1301  0017  1383               	bcf	3,7	;select IRP bank0
  1302  0018  3020               	movlw	low __pbssBANK0
  1303  0019  0084               	movwf	4
  1304  001A  3055               	movlw	low (__pbssBANK0+53)
  1305  001B  158A  2463  118A   	fcall	clear_ram0
  1306                           
  1307                           ; Clear objects allocated to BANK1
  1308  001E  30A0               	movlw	low __pbssBANK1
  1309  001F  0084               	movwf	4
  1310  0020  30EF               	movlw	low (__pbssBANK1+79)
  1311  0021  158A  2463         	fcall	clear_ram0
  1312  0023                     end_of_initialization:	
  1313                           ;End of C runtime variable initialization code
  1314                           
  1315  0023                     __end_of__initialization:	
  1316  0023  0183               	clrf	3
  1317  0024  118A  2E95         	ljmp	_main	;jump to C main() function
  1318                           
  1319                           	psect	bssCOMMON
  1320  0076                     __pbssCOMMON:	
  1321  0076                     _WDT:	
  1322  0076                     	ds	2
  1323  0078                     _LED:	
  1324  0078                     	ds	1
  1325  0079                     _LightsControl:	
  1326  0079                     	ds	1
  1327                           
  1328                           	psect	bssBANK0
  1329  0020                     __pbssBANK0:	
  1330  0020                     _myMain:	
  1331  0020                     	ds	8
  1332  0028                     _SYSC:	
  1333  0028                     	ds	5
  1334  002D                     __CDS:	
  1335  002D                     	ds	5
  1336  0032                     _Timer1:	
  1337  0032                     	ds	3
  1338  0035                     _Lights:	
  1339  0035                     	ds	1
  1340  0036                     _Temp:	
  1341  0036                     	ds	12
  1342  0042                     _Lights1:	
  1343  0042                     	ds	7
  1344  0049                     _VarErrLED:	
  1345  0049                     	ds	4
  1346  004D                     _VarLED1:	
  1347  004D                     	ds	4
  1348  0051                     _VarLED2:	
  1349  0051                     	ds	4
  1350                           
  1351                           	psect	bssBANK1
  1352  00A0                     __pbssBANK1:	
  1353  00A0                     __PIR:	
  1354  00A0                     	ds	47
  1355  00CF                     _Load:	
  1356  00CF                     	ds	32
  1357                           
  1358                           	psect	clrtext
  1359  0C63                     clear_ram0:	
  1360                           ;	Called with FSR containing the base address, and
  1361                           ;	W with the last address+1
  1362                           
  1363  0C63  0064               	clrwdt	;clear the watchdog before getting into this loop
  1364  0C64                     clrloop0:	
  1365  0C64  0180               	clrf	0	;clear RAM location pointed to by FSR
  1366  0C65  0A84               	incf	4,f	;increment pointer
  1367  0C66  0604               	xorwf	4,w	;XOR with final address
  1368  0C67  1903               	btfsc	3,2	;have we reached the end yet?
  1369  0C68  3400               	retlw	0	;all done for this memory range, return
  1370  0C69  0604               	xorwf	4,w	;XOR again to restore value
  1371  0C6A  2C64               	goto	clrloop0	;do the next byte
  1372                           
  1373                           	psect	cstackCOMMON
  1374  0070                     __pcstackCOMMON:	
  1375  0070                     ?_setLED_Initialization:	
  1376  0070                     ?_setLED_Main:	
  1377                           ; 0 bytes @ 0x0
  1378                           
  1379  0070                     ?_Fosc_Set:	
  1380                           ; 0 bytes @ 0x0
  1381                           
  1382  0070                     ?_IO_Set:	
  1383                           ; 0 bytes @ 0x0
  1384                           
  1385  0070                     ?_TMR1_Set:	
  1386                           ; 0 bytes @ 0x0
  1387                           
  1388  0070                     ?_ADC_Set:	
  1389                           ; 0 bytes @ 0x0
  1390                           
  1391  0070                     ?_WDT_Set:	
  1392                           ; 0 bytes @ 0x0
  1393                           
  1394  0070                     ?_TMR1_ISR:	
  1395                           ; 0 bytes @ 0x0
  1396                           
  1397  0070                     ??_TMR1_ISR:	
  1398                           ; 0 bytes @ 0x0
  1399                           
  1400  0070                     ?_Timeout_Counter:	
  1401                           ; 0 bytes @ 0x0
  1402                           
  1403  0070                     ?_set_TimeoutCleared:	
  1404                           ; 0 bytes @ 0x0
  1405                           
  1406  0070                     ?_WDT_Clearing:	
  1407                           ; 0 bytes @ 0x0
  1408                           
  1409  0070                     ?_myMain_Initialization:	
  1410                           ; 0 bytes @ 0x0
  1411                           
  1412  0070                     ?_SYSC_Initialization:	
  1413                           ; 0 bytes @ 0x0
  1414                           
  1415  0070                     ?_Temp_Initialization:	
  1416                           ; 0 bytes @ 0x0
  1417                           
  1418  0070                     ?_Load_Initialization:	
  1419                           ; 0 bytes @ 0x0
  1420                           
  1421  0070                     ?_Lights_Initialization:	
  1422                           ; 0 bytes @ 0x0
  1423                           
  1424  0070                     ?_PIR_Initialization:	
  1425                           ; 0 bytes @ 0x0
  1426                           
  1427  0070                     ?_DetectSYSC_Signal:	
  1428                           ; 0 bytes @ 0x0
  1429                           
  1430  0070                     ?_getLoad_AD:	
  1431                           ; 0 bytes @ 0x0
  1432                           
  1433  0070                     ?_getTemp_AD:	
  1434                           ; 0 bytes @ 0x0
  1435                           
  1436  0070                     ?_my_MainTimer:	
  1437                           ; 0 bytes @ 0x0
  1438                           
  1439  0070                     ?_SYSC_Main:	
  1440                           ; 0 bytes @ 0x0
  1441                           
  1442  0070                     ?_Temp_Main:	
  1443                           ; 0 bytes @ 0x0
  1444                           
  1445  0070                     ?_Load_Main:	
  1446                           ; 0 bytes @ 0x0
  1447                           
  1448  0070                     ?_Lights_Main:	
  1449                           ; 0 bytes @ 0x0
  1450                           
  1451  0070                     ?_PIR_Main:	
  1452                           ; 0 bytes @ 0x0
  1453                           
  1454  0070                     ?_setLoad_AH_AL_Restore:	
  1455                           ; 0 bytes @ 0x0
  1456                           
  1457  0070                     ?_setTemp_Initialization:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_setTemp_Main:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_setSYSC_Initialization:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_setSYSC_Main:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ?_setLights_Initialization:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_setLights_Main:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ?_Lights_Control:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ?_Lights_Close:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_setLights_Line:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_CDS_Initialization:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_CDS_Main:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_LedPointSelect:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_LED_Initialization:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_LED_Main:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_Mcu_Initialization:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_ISR:	
  1503                           ; 0 bytes @ 0x0
  1504                           
  1505  0070                     ??_ISR:	
  1506                           ; 0 bytes @ 0x0
  1507                           
  1508  0070                     ?_WDT_Main:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0070                     ?_getMain_Exception:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0070                     ?_LightsPointSelect:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0070                     ?_getAll_Lights_Line:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0070                     ?_getLights_Status:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ?_getLightsControl_GO:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ?_getLightsControl_OK:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ?_getCDS_Status:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_getMain_LightsStatus:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ?_getMain_All_Error_Status:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_getMain_Lights_Count:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_getLoad_OK:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544                           
  1545                           ; 1 bytes @ 0x0
  1546  0070                     	ds	4
  1547  0074                     ??_Fosc_Set:	
  1548  0074                     ??_IO_Set:	
  1549                           ; 0 bytes @ 0x4
  1550                           
  1551  0074                     ??_TMR1_Set:	
  1552                           ; 0 bytes @ 0x4
  1553                           
  1554  0074                     ??_ADC_Set:	
  1555                           ; 0 bytes @ 0x4
  1556                           
  1557  0074                     ??_WDT_Set:	
  1558                           ; 0 bytes @ 0x4
  1559                           
  1560  0074                     ??_Timeout_Counter:	
  1561                           ; 0 bytes @ 0x4
  1562                           
  1563  0074                     ??_set_TimeoutCleared:	
  1564                           ; 0 bytes @ 0x4
  1565                           
  1566  0074                     ??_WDT_Clearing:	
  1567                           ; 0 bytes @ 0x4
  1568                           
  1569  0074                     ??_myMain_Initialization:	
  1570                           ; 0 bytes @ 0x4
  1571                           
  1572  0074                     ??_SYSC_Initialization:	
  1573                           ; 0 bytes @ 0x4
  1574                           
  1575  0074                     ??_Temp_Initialization:	
  1576                           ; 0 bytes @ 0x4
  1577                           
  1578  0074                     ??_PIR_Initialization:	
  1579                           ; 0 bytes @ 0x4
  1580                           
  1581  0074                     ??_DetectSYSC_Signal:	
  1582                           ; 0 bytes @ 0x4
  1583                           
  1584  0074                     ??_my_MainTimer:	
  1585                           ; 0 bytes @ 0x4
  1586                           
  1587  0074                     ??_setLoad_AH_AL_Restore:	
  1588                           ; 0 bytes @ 0x4
  1589                           
  1590  0074                     ??_getLightsControl_GO:	
  1591                           ; 0 bytes @ 0x4
  1592                           
  1593  0074                     ??_getLightsControl_OK:	
  1594                           ; 0 bytes @ 0x4
  1595                           
  1596  0074                     ??_setTemp_Initialization:	
  1597                           ; 0 bytes @ 0x4
  1598                           
  1599  0074                     ??_setSYSC_Initialization:	
  1600                           ; 0 bytes @ 0x4
  1601                           
  1602  0074                     ??_CDS_Initialization:	
  1603                           ; 0 bytes @ 0x4
  1604                           
  1605  0074                     ??_getCDS_Status:	
  1606                           ; 0 bytes @ 0x4
  1607                           
  1608  0074                     ??_LedPointSelect:	
  1609                           ; 0 bytes @ 0x4
  1610                           
  1611  0074                     ??_WDT_Main:	
  1612                           ; 0 bytes @ 0x4
  1613                           
  1614  0074                     ??_getMain_Lights_Count:	
  1615                           ; 0 bytes @ 0x4
  1616                           
  1617  0074                     ??_getLoad_OK:	
  1618                           ; 0 bytes @ 0x4
  1619                           
  1620  0074                     ??_LightsPointSelect:	
  1621                           ; 0 bytes @ 0x4
  1622                           
  1623  0074                     ??___awdiv:	
  1624                           ; 0 bytes @ 0x4
  1625                           
  1626  0074                     ??___lwdiv:	
  1627                           ; 0 bytes @ 0x4
  1628                           
  1629  0074                     ?_getAD:	
  1630                           ; 0 bytes @ 0x4
  1631                           
  1632  0074                     getCDS_Status@status:	
  1633                           ; 1 bytes @ 0x4
  1634                           
  1635  0074                     getAD@adcon1:	
  1636                           ; 1 bytes @ 0x4
  1637                           
  1638  0074                     getLoad_OK@ok:	
  1639                           ; 1 bytes @ 0x4
  1640                           
  1641  0074                     getLightsControl_GO@loadgo:	
  1642                           ; 1 bytes @ 0x4
  1643                           
  1644  0074                     getLightsControl_OK@loadok:	
  1645                           ; 1 bytes @ 0x4
  1646                           
  1647                           
  1648                           ; 1 bytes @ 0x4
  1649  0074                     	ds	1
  1650  0075                     ??_getAD:	
  1651  0075                     ??_Mcu_Initialization:	
  1652                           ; 0 bytes @ 0x5
  1653                           
  1654  0075                     ??_getMain_All_Error_Status:	
  1655                           ; 0 bytes @ 0x5
  1656                           
  1657  0075                     LedPointSelect@led:	
  1658                           ; 0 bytes @ 0x5
  1659                           
  1660  0075                     getAD@adcon0:	
  1661                           ; 1 bytes @ 0x5
  1662                           
  1663  0075                     setLoad_AH_AL_Restore@i:	
  1664                           ; 1 bytes @ 0x5
  1665                           
  1666  0075                     LightsPointSelect@lights:	
  1667                           ; 1 bytes @ 0x5
  1668                           
  1669                           
  1670                           ; 1 bytes @ 0x5
  1671  0075                     	ds	1
  1672  0076                     ??_setLED_Initialization:	
  1673  0076                     ??_setLED:	
  1674                           ; 0 bytes @ 0x6
  1675                           
  1676  0076                     ??_Load_Initialization:	
  1677                           ; 0 bytes @ 0x6
  1678                           
  1679  0076                     ??_Lights_Initialization:	
  1680                           ; 0 bytes @ 0x6
  1681                           
  1682  0076                     ??_SYSC_Main:	
  1683                           ; 0 bytes @ 0x6
  1684                           
  1685  0076                     ??_Temp_Main:	
  1686                           ; 0 bytes @ 0x6
  1687                           
  1688  0076                     ??_Lights_Main:	
  1689                           ; 0 bytes @ 0x6
  1690                           
  1691  0076                     ??_getAll_Lights_Line:	
  1692                           ; 0 bytes @ 0x6
  1693                           
  1694  0076                     ??_getLights_Status:	
  1695                           ; 0 bytes @ 0x6
  1696                           
  1697  0076                     ??_setLights_Initialization:	
  1698                           ; 0 bytes @ 0x6
  1699                           
  1700  0076                     ??_setLights_Line:	
  1701                           ; 0 bytes @ 0x6
  1702                           
  1703  0076                     ??_LED_Initialization:	
  1704                           ; 0 bytes @ 0x6
  1705                           
  1706  0076                     ??_LED_Main:	
  1707                           ; 0 bytes @ 0x6
  1708                           
  1709                           
  1710                           	psect	cstackBANK0
  1711  0055                     __pcstackBANK0:	
  1712                           ; 0 bytes @ 0x6
  1713                           
  1714  0055                     ??_setLED_Main:	
  1715  0055                     ?_setLED:	
  1716                           ; 0 bytes @ 0x0
  1717                           
  1718  0055                     ??_getLoad_AD:	
  1719                           ; 0 bytes @ 0x0
  1720                           
  1721  0055                     ??_getTemp_AD:	
  1722                           ; 0 bytes @ 0x0
  1723                           
  1724  0055                     ?_setLights_Trigger:	
  1725                           ; 0 bytes @ 0x0
  1726                           
  1727  0055                     ??_Lights_Control:	
  1728                           ; 0 bytes @ 0x0
  1729                           
  1730  0055                     ??_CDS_Main:	
  1731                           ; 0 bytes @ 0x0
  1732                           
  1733  0055                     ?_getCDS_AD:	
  1734                           ; 0 bytes @ 0x0
  1735                           
  1736  0055                     ?___awdiv:	
  1737                           ; 0 bytes @ 0x0
  1738                           
  1739  0055                     ?___lwdiv:	
  1740                           ; 2 bytes @ 0x0
  1741                           
  1742  0055                     getCDS_AD@channel2:	
  1743                           ; 2 bytes @ 0x0
  1744                           
  1745  0055                     setLED@command:	
  1746                           ; 1 bytes @ 0x0
  1747                           
  1748  0055                     getMain_Lights_Count@count:	
  1749                           ; 1 bytes @ 0x0
  1750                           
  1751  0055                     setLights_Initialization@lights:	
  1752                           ; 1 bytes @ 0x0
  1753                           
  1754  0055                     getLights_Status@lights:	
  1755                           ; 1 bytes @ 0x0
  1756                           
  1757  0055                     setLights_Trigger@command:	
  1758                           ; 1 bytes @ 0x0
  1759                           
  1760  0055                     setLights_Line@lights:	
  1761                           ; 1 bytes @ 0x0
  1762                           
  1763  0055                     getAll_Lights_Line@line:	
  1764                           ; 1 bytes @ 0x0
  1765                           
  1766  0055                     _getMain_All_Error_Status$2263:	
  1767                           ; 1 bytes @ 0x0
  1768                           
  1769  0055                     ___awdiv@divisor:	
  1770                           ; 2 bytes @ 0x0
  1771                           
  1772  0055                     ___lwdiv@divisor:	
  1773                           ; 2 bytes @ 0x0
  1774                           
  1775                           
  1776                           ; 2 bytes @ 0x0
  1777  0055                     	ds	1
  1778  0056                     ??_setLights_Trigger:	
  1779  0056                     ??_getCDS_AD:	
  1780                           ; 0 bytes @ 0x1
  1781                           
  1782  0056                     setLED@led:	
  1783                           ; 0 bytes @ 0x1
  1784                           
  1785  0056                     getMain_Lights_Count@status2:	
  1786                           ; 1 bytes @ 0x1
  1787                           
  1788  0056                     getLights_Status@status:	
  1789                           ; 1 bytes @ 0x1
  1790                           
  1791                           
  1792                           ; 1 bytes @ 0x1
  1793  0056                     	ds	1
  1794  0057                     ??_getMain_LightsStatus:	
  1795  0057                     setLED_Initialization@led:	
  1796                           ; 0 bytes @ 0x2
  1797                           
  1798  0057                     setLED_Main@led:	
  1799                           ; 1 bytes @ 0x2
  1800                           
  1801  0057                     getMain_Lights_Count@status3:	
  1802                           ; 1 bytes @ 0x2
  1803                           
  1804  0057                     getLoad_AD@channel:	
  1805                           ; 1 bytes @ 0x2
  1806                           
  1807  0057                     getTemp_AD@channel:	
  1808                           ; 1 bytes @ 0x2
  1809                           
  1810  0057                     setLights_Trigger@lights:	
  1811                           ; 1 bytes @ 0x2
  1812                           
  1813  0057                     _getMain_All_Error_Status$2272:	
  1814                           ; 1 bytes @ 0x2
  1815                           
  1816  0057                     _Lights_Control$4460:	
  1817                           ; 2 bytes @ 0x2
  1818                           
  1819  0057                     ___awdiv@dividend:	
  1820                           ; 2 bytes @ 0x2
  1821                           
  1822  0057                     ___lwdiv@dividend:	
  1823                           ; 2 bytes @ 0x2
  1824                           
  1825                           
  1826                           ; 2 bytes @ 0x2
  1827  0057                     	ds	1
  1828  0058                     ??_getMain_Exception:	
  1829  0058                     getCDS_AD@i:	
  1830                           ; 0 bytes @ 0x3
  1831                           
  1832  0058                     getMain_LightsStatus@status:	
  1833                           ; 1 bytes @ 0x3
  1834                           
  1835  0058                     getMain_Lights_Count@status1:	
  1836                           ; 1 bytes @ 0x3
  1837                           
  1838  0058                     getLoad_AD@k:	
  1839                           ; 1 bytes @ 0x3
  1840                           
  1841                           
  1842                           ; 1 bytes @ 0x3
  1843  0058                     	ds	1
  1844  0059                     ??_Lights_Close:	
  1845  0059                     getCDS_AD@j:	
  1846                           ; 0 bytes @ 0x4
  1847                           
  1848  0059                     getMain_Exception@command:	
  1849                           ; 1 bytes @ 0x4
  1850                           
  1851  0059                     getLoad_AD@j:	
  1852                           ; 1 bytes @ 0x4
  1853                           
  1854  0059                     Lights_Control@lights:	
  1855                           ; 1 bytes @ 0x4
  1856                           
  1857  0059                     ___awdiv@counter:	
  1858                           ; 1 bytes @ 0x4
  1859                           
  1860  0059                     ___lwdiv@counter:	
  1861                           ; 1 bytes @ 0x4
  1862                           
  1863  0059                     _getMain_All_Error_Status$2274:	
  1864                           ; 1 bytes @ 0x4
  1865                           
  1866                           
  1867                           ; 2 bytes @ 0x4
  1868  0059                     	ds	1
  1869  005A                     getCDS_AD@channel1:	
  1870  005A                     getMain_Exception@status:	
  1871                           ; 1 bytes @ 0x5
  1872                           
  1873  005A                     getLoad_AD@i:	
  1874                           ; 1 bytes @ 0x5
  1875                           
  1876  005A                     ___awdiv@sign:	
  1877                           ; 1 bytes @ 0x5
  1878                           
  1879  005A                     ___lwdiv@quotient:	
  1880                           ; 1 bytes @ 0x5
  1881                           
  1882                           
  1883                           ; 2 bytes @ 0x5
  1884  005A                     	ds	1
  1885  005B                     getMain_All_Error_Status@command:	
  1886  005B                     ___awdiv@quotient:	
  1887                           ; 1 bytes @ 0x6
  1888                           
  1889                           
  1890                           ; 2 bytes @ 0x6
  1891  005B                     	ds	1
  1892  005C                     getMain_All_Error_Status@status:	
  1893                           
  1894                           ; 1 bytes @ 0x7
  1895  005C                     	ds	1
  1896  005D                     ?_getPIR_AD:	
  1897  005D                     ??_Load_Main:	
  1898                           ; 0 bytes @ 0x8
  1899                           
  1900  005D                     ??_PIR_Main:	
  1901                           ; 0 bytes @ 0x8
  1902                           
  1903  005D                     ??_setTemp_Main:	
  1904                           ; 0 bytes @ 0x8
  1905                           
  1906  005D                     ??_setSYSC_Main:	
  1907                           ; 0 bytes @ 0x8
  1908                           
  1909  005D                     ?_setLights:	
  1910                           ; 0 bytes @ 0x8
  1911                           
  1912  005D                     getPIR_AD@channel2:	
  1913                           ; 0 bytes @ 0x8
  1914                           
  1915  005D                     setLights@status:	
  1916                           ; 1 bytes @ 0x8
  1917                           
  1918                           
  1919                           ; 1 bytes @ 0x8
  1920  005D                     	ds	1
  1921  005E                     ??_getPIR_AD:	
  1922  005E                     ??_setLights:	
  1923                           ; 0 bytes @ 0x9
  1924                           
  1925                           
  1926                           ; 0 bytes @ 0x9
  1927  005E                     	ds	1
  1928  005F                     Load_Main@j:	
  1929                           
  1930                           ; 1 bytes @ 0xA
  1931  005F                     	ds	1
  1932  0060                     Load_Main@error:	
  1933  0060                     _setLights$4457:	
  1934                           ; 1 bytes @ 0xB
  1935                           
  1936                           
  1937                           ; 2 bytes @ 0xB
  1938  0060                     	ds	1
  1939  0061                     _Load_Main$2538:	
  1940  0061                     getPIR_AD@j:	
  1941                           ; 1 bytes @ 0xC
  1942                           
  1943                           
  1944                           ; 1 bytes @ 0xC
  1945  0061                     	ds	1
  1946  0062                     Load_Main@i:	
  1947  0062                     getPIR_AD@channel1:	
  1948                           ; 1 bytes @ 0xD
  1949                           
  1950  0062                     setLights@lights:	
  1951                           ; 1 bytes @ 0xD
  1952                           
  1953  0062                     _PIR_Main$3037:	
  1954                           ; 1 bytes @ 0xD
  1955                           
  1956                           
  1957                           ; 2 bytes @ 0xD
  1958  0062                     	ds	1
  1959  0063                     ??_setLights_Main:	
  1960  0063                     getPIR_AD@i:	
  1961                           ; 0 bytes @ 0xE
  1962                           
  1963                           
  1964                           ; 1 bytes @ 0xE
  1965  0063                     	ds	1
  1966  0064                     PIR_Main@error:	
  1967                           
  1968                           ; 1 bytes @ 0xF
  1969  0064                     	ds	2
  1970  0066                     _setLights_Main$4453:	
  1971                           
  1972                           ; 2 bytes @ 0x11
  1973  0066                     	ds	2
  1974  0068                     setLights_Main@lights:	
  1975                           
  1976                           ; 1 bytes @ 0x13
  1977  0068                     	ds	1
  1978  0069                     ?_main:	
  1979  0069                     main@argc:	
  1980                           ; 2 bytes @ 0x14
  1981                           
  1982                           
  1983                           ; 2 bytes @ 0x14
  1984  0069                     	ds	2
  1985  006B                     main@argv:	
  1986                           
  1987                           ; 2 bytes @ 0x16
  1988  006B                     	ds	2
  1989  006D                     ??_main:	
  1990                           
  1991                           ; 0 bytes @ 0x18
  1992  006D                     	ds	1
  1993                           
  1994                           	psect	maintext
  1995  0695                     __pmaintext:	
  1996 ;;
  1997 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1998 ;;
  1999 ;; *************** function _main *****************
  2000 ;; Defined at:
  2001 ;;		line 7 in file "../src/Main_B1.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;  argc            2   20[BANK0 ] int 
  2004 ;;  argv            2   22[BANK0 ] PTR PTR unsigned char 
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;		None
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  2   20[BANK0 ] int 
  2009 ;; Registers used:
  2010 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2011 ;; Tracked objects:
  2012 ;;		On entry : 17F/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2016 ;;      Params:         0       4       0       0
  2017 ;;      Locals:         0       0       0       0
  2018 ;;      Temps:          0       1       0       0
  2019 ;;      Totals:         0       5       0       0
  2020 ;;Total ram usage:        5 bytes
  2021 ;; Hardware stack levels required when called:    7
  2022 ;; This function calls:
  2023 ;;		_CDS_Initialization
  2024 ;;		_CDS_Main
  2025 ;;		_DetectSYSC_Signal
  2026 ;;		_LED_Initialization
  2027 ;;		_LED_Main
  2028 ;;		_Lights_Initialization
  2029 ;;		_Lights_Main
  2030 ;;		_Load_Initialization
  2031 ;;		_Load_Main
  2032 ;;		_Mcu_Initialization
  2033 ;;		_PIR_Initialization
  2034 ;;		_PIR_Main
  2035 ;;		_SYSC_Initialization
  2036 ;;		_SYSC_Main
  2037 ;;		_Temp_Initialization
  2038 ;;		_Temp_Main
  2039 ;;		_WDT_Main
  2040 ;;		_getCDS_AD
  2041 ;;		_getLoad_AD
  2042 ;;		_getPIR_AD
  2043 ;;		_getTemp_AD
  2044 ;;		_myMain_Initialization
  2045 ;;		_my_MainTimer
  2046 ;; This function is called by:
  2047 ;;		Startup code after reset
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           
  2052                           ;psect for function _main
  2053  0695                     _main:	
  2054                           
  2055                           ;Main_B1.c: 8: myMain_Initialization();
  2056                           
  2057                           ;incstack = 0
  2058                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2059  0695  158A  240B  118A   	fcall	_myMain_Initialization
  2060                           
  2061                           ;Main_B1.c: 9: Mcu_Initialization();
  2062  0698  158A  24CD  118A   	fcall	_Mcu_Initialization
  2063                           
  2064                           ;Main_B1.c: 10: ;;
  2065                           ;Main_B1.c: 11: LED_Initialization();
  2066  069B  158A  2481  118A   	fcall	_LED_Initialization
  2067                           
  2068                           ;Main_B1.c: 12: ;;
  2069                           ;Main_B1.c: 14: SYSC_Initialization();
  2070  069E  158A  240C  118A   	fcall	_SYSC_Initialization
  2071                           
  2072                           ;Main_B1.c: 15: Temp_Initialization();
  2073  06A1  158A  2412  118A   	fcall	_Temp_Initialization
  2074                           
  2075                           ;Main_B1.c: 16: Load_Initialization();
  2076  06A4  158A  242D  118A   	fcall	_Load_Initialization
  2077                           
  2078                           ;Main_B1.c: 17: ;;
  2079                           ;Main_B1.c: 18: ;;
  2080                           ;Main_B1.c: 20: ;;
  2081                           ;Main_B1.c: 21: Lights_Initialization();
  2082  06A7  158A  241C  118A   	fcall	_Lights_Initialization
  2083                           
  2084                           ;Main_B1.c: 22: CDS_Initialization();
  2085  06AA  158A  2418  118A   	fcall	_CDS_Initialization
  2086                           
  2087                           ;Main_B1.c: 23: PIR_Initialization();
  2088  06AD  158A  2476  118A   	fcall	_PIR_Initialization
  2089                           
  2090                           ;Main_B1.c: 24: ;;
  2091                           ;Main_B1.c: 25: ;;
  2092                           ;Main_B1.c: 26: __nop();
  2093  06B0  0000               	nop
  2094  06B1                     l4777:	
  2095                           ;Main_B1.c: 27: ;;
  2096                           ;Main_B1.c: 29: while (1) {
  2097                           
  2098                           
  2099                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  2100  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  2101  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  2102  06B3  1C20               	btfss	_myMain,0
  2103  06B4  2ED4               	goto	l4789
  2104                           
  2105                           ;Main_B1.c: 33: DetectSYSC_Signal();
  2106  06B5  158A  24B1  118A   	fcall	_DetectSYSC_Signal
  2107                           
  2108                           ;Main_B1.c: 37: getLoad_AD(0x01);
  2109  06B8  3001               	movlw	1
  2110  06B9  118A  2548  118A   	fcall	_getLoad_AD
  2111                           
  2112                           ;Main_B1.c: 41: getTemp_AD(0x11);
  2113  06BC  3011               	movlw	17
  2114  06BD  158A  2648  118A   	fcall	_getTemp_AD
  2115                           
  2116                           ;Main_B1.c: 49: getCDS_AD(0x09, 0x31);
  2117  06C0  3031               	movlw	49
  2118  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  2119  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  2120  06C3  00ED               	movwf	??_main
  2121  06C4  086D               	movf	??_main,w
  2122  06C5  00D5               	movwf	getCDS_AD@channel2
  2123  06C6  3009               	movlw	9
  2124  06C7  158A  266E  118A   	fcall	_getCDS_AD
  2125                           
  2126                           ;Main_B1.c: 53: getPIR_AD(0x05, 0x0d);
  2127  06CA  300D               	movlw	13
  2128  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  2129  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  2130  06CD  00ED               	movwf	??_main
  2131  06CE  086D               	movf	??_main,w
  2132  06CF  00DD               	movwf	getPIR_AD@channel2
  2133  06D0  3005               	movlw	5
  2134  06D1  118A  2378  118A   	fcall	_getPIR_AD
  2135  06D4                     l4789:	
  2136                           
  2137                           ;Main_B1.c: 56: }
  2138                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  2139  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  2140  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  2141  06D6  1C32               	btfss	_Timer1,0
  2142  06D7  2EB1               	goto	l4777
  2143                           
  2144                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  2145  06D8  1032               	bcf	_Timer1,0
  2146                           
  2147                           ;Main_B1.c: 94: my_MainTimer();
  2148  06D9  158A  257B  118A   	fcall	_my_MainTimer
  2149                           
  2150                           ;Main_B1.c: 95: WDT_Main();
  2151  06DC  158A  24DC  118A   	fcall	_WDT_Main
  2152                           
  2153                           ;Main_B1.c: 96: ;;
  2154                           ;Main_B1.c: 97: ;;
  2155                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  2156  06DF  1283               	bcf	3,5	;RP0=0, select bank0
  2157  06E0  1303               	bcf	3,6	;RP1=0, select bank0
  2158  06E1  1C20               	btfss	_myMain,0
  2159  06E2  2EB1               	goto	l4777
  2160                           
  2161                           ;Main_B1.c: 99: ;;
  2162                           ;Main_B1.c: 101: LED_Main();
  2163  06E3  158A  248D  118A   	fcall	_LED_Main
  2164                           
  2165                           ;Main_B1.c: 102: ;;
  2166                           ;Main_B1.c: 104: SYSC_Main();
  2167  06E6  158A  240F  118A   	fcall	_SYSC_Main
  2168                           
  2169                           ;Main_B1.c: 105: Temp_Main();
  2170  06E9  158A  2415  118A   	fcall	_Temp_Main
  2171                           
  2172                           ;Main_B1.c: 106: Load_Main();
  2173  06EC  118A  220D  118A   	fcall	_Load_Main
  2174                           
  2175                           ;Main_B1.c: 107: ;;
  2176                           ;Main_B1.c: 109: Lights_Main();
  2177  06EF  158A  246B  118A   	fcall	_Lights_Main
  2178                           
  2179                           ;Main_B1.c: 110: ;;
  2180                           ;Main_B1.c: 111: ;;
  2181                           ;Main_B1.c: 112: CDS_Main();
  2182  06F2  158A  2698  118A   	fcall	_CDS_Main
  2183                           
  2184                           ;Main_B1.c: 113: PIR_Main();
  2185  06F5  118A  2026  118A   	fcall	_PIR_Main
  2186                           
  2187                           ;Main_B1.c: 115: ;;
  2188                           ;Main_B1.c: 116: ;;
  2189                           ;Main_B1.c: 117: ;;
  2190  06F8  2EB1               	goto	l4777
  2191  06F9                     __end_of_main:	
  2192                           ;Main_B1.c: 125: }
  2193                           ;Main_B1.c: 126: }
  2194                           ;Main_B1.c: 160: }
  2195                           ;Main_B1.c: 161: return (0);
  2196                           ;	Return value of _main is never used
  2197                           
  2198                           
  2199                           	psect	text1
  2200  0D7B                     __ptext1:	
  2201 ;; *************** function _my_MainTimer *****************
  2202 ;; Defined at:
  2203 ;;		line 180 in file "../src/Main_B1.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;		None
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;		None
  2208 ;; Return value:  Size  Location     Type
  2209 ;;		None               void
  2210 ;; Registers used:
  2211 ;;		wreg, status,2
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2217 ;;      Params:         0       0       0       0
  2218 ;;      Locals:         0       0       0       0
  2219 ;;      Temps:          0       0       0       0
  2220 ;;      Totals:         0       0       0       0
  2221 ;;Total ram usage:        0 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:    2
  2224 ;; This function calls:
  2225 ;;		Nothing
  2226 ;; This function is called by:
  2227 ;;		_main
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           
  2232                           ;psect for function _my_MainTimer
  2233  0D7B                     _my_MainTimer:	
  2234                           
  2235                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  2236                           
  2237                           ;incstack = 0
  2238                           ; Regs used in _my_MainTimer: [wreg+status,2]
  2239  0D7B  1283               	bcf	3,5	;RP0=0, select bank0
  2240  0D7C  1303               	bcf	3,6	;RP1=0, select bank0
  2241  0D7D  1820               	btfsc	_myMain,0
  2242  0D7E  0008               	return
  2243                           
  2244                           ;Main_B1.c: 183: myMain.PowerCount++;
  2245  0D7F  3001               	movlw	1
  2246  0D80  07A2               	addwf	_myMain+2,f
  2247  0D81  1803               	skipnc
  2248  0D82  0AA3               	incf	_myMain+3,f
  2249  0D83  3000               	movlw	0
  2250  0D84  07A3               	addwf	_myMain+3,f
  2251                           
  2252                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  2253  0D85  3096               	movlw	150
  2254  0D86  0622               	xorwf	_myMain+2,w
  2255  0D87  0423               	iorwf	_myMain+3,w
  2256  0D88  1D03               	skipz
  2257  0D89  0008               	return
  2258                           
  2259                           ;Main_B1.c: 185: {
  2260                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  2261  0D8A  01A2               	clrf	_myMain+2
  2262  0D8B  01A3               	clrf	_myMain+3
  2263                           
  2264                           ;Main_B1.c: 187: myMain.PowerON = 1;
  2265  0D8C  1420               	bsf	_myMain,0
  2266                           
  2267                           ;Main_B1.c: 193: ;;
  2268                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  2269  0D8D  1620               	bsf	_myMain,4
  2270                           
  2271                           ;Main_B1.c: 203: }
  2272                           ;Main_B1.c: 204: } else {
  2273                           
  2274                           ;Main_B1.c: 196: ;;
  2275  0D8E  0008               	return
  2276  0D8F                     __end_of_my_MainTimer:	
  2277                           
  2278                           	psect	text2
  2279  0C0B                     __ptext2:	
  2280 ;; *************** function _myMain_Initialization *****************
  2281 ;; Defined at:
  2282 ;;		line 167 in file "../src/Main_B1.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;		None
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;		None
  2287 ;; Return value:  Size  Location     Type
  2288 ;;		None               void
  2289 ;; Registers used:
  2290 ;;		None
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2296 ;;      Params:         0       0       0       0
  2297 ;;      Locals:         0       0       0       0
  2298 ;;      Temps:          0       0       0       0
  2299 ;;      Totals:         0       0       0       0
  2300 ;;Total ram usage:        0 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    2
  2303 ;; This function calls:
  2304 ;;		Nothing
  2305 ;; This function is called by:
  2306 ;;		_main
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           
  2311                           ;psect for function _myMain_Initialization
  2312  0C0B                     _myMain_Initialization:	
  2313                           
  2314                           ;incstack = 0
  2315                           ; Regs used in _myMain_Initialization: []
  2316  0C0B  0008               	return
  2317  0C0C                     __end_of_myMain_Initialization:	
  2318                           
  2319                           	psect	text3
  2320  0E48                     __ptext3:	
  2321 ;; *************** function _getTemp_AD *****************
  2322 ;; Defined at:
  2323 ;;		line 33 in file "../src/OverTemperature_B1.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;  channel         1    wreg     unsigned char 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  channel         1    2[BANK0 ] unsigned char 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;		None               void
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0, pclath, cstack
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2337 ;;      Params:         0       0       0       0
  2338 ;;      Locals:         0       1       0       0
  2339 ;;      Temps:          0       2       0       0
  2340 ;;      Totals:         0       3       0       0
  2341 ;;Total ram usage:        3 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    4
  2344 ;; This function calls:
  2345 ;;		_getAD
  2346 ;; This function is called by:
  2347 ;;		_main
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           
  2352                           ;psect for function _getTemp_AD
  2353  0E48                     _getTemp_AD:	
  2354                           
  2355                           ;incstack = 0
  2356                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2357                           ;getTemp_AD@channel stored from wreg
  2358  0E48  1283               	bcf	3,5	;RP0=0, select bank0
  2359  0E49  1303               	bcf	3,6	;RP1=0, select bank0
  2360  0E4A  00D7               	movwf	getTemp_AD@channel
  2361                           
  2362                           ;OverTemperature_B1.c: 35: if (RA5 == 1) {
  2363  0E4B  1E85               	btfss	5,5	;volatile
  2364  0E4C  0008               	return
  2365                           
  2366                           ;OverTemperature_B1.c: 36: if (Temp.ADtoGO == 1) {
  2367  0E4D  1D36               	btfss	_Temp,2
  2368  0E4E  0008               	return
  2369                           
  2370                           ;OverTemperature_B1.c: 37: Temp.ADRES = getAD(channel, 0x70);
  2371  0E4F  3070               	movlw	112
  2372  0E50  00D5               	movwf	??_getTemp_AD
  2373  0E51  0855               	movf	??_getTemp_AD,w
  2374  0E52  00F4               	movwf	getAD@adcon1
  2375  0E53  0857               	movf	getTemp_AD@channel,w
  2376  0E54  158A  260D  158A   	fcall	_getAD
  2377  0E57  1283               	bcf	3,5	;RP0=0, select bank0
  2378  0E58  1303               	bcf	3,6	;RP1=0, select bank0
  2379  0E59  00D6               	movwf	??_getTemp_AD+1
  2380  0E5A  0856               	movf	??_getTemp_AD+1,w
  2381  0E5B  00BF               	movwf	_Temp+9
  2382                           
  2383                           ;OverTemperature_B1.c: 38: if (Temp.ADH[0] < Temp.ADRES) {
  2384  0E5C  083F               	movf	_Temp+9,w
  2385  0E5D  023D               	subwf	_Temp+7,w
  2386  0E5E  1803               	skipnc
  2387  0E5F  2E65               	goto	l4379
  2388                           
  2389                           ;OverTemperature_B1.c: 39: Temp.ADH[0] = Temp.ADRES;
  2390  0E60  083F               	movf	_Temp+9,w
  2391  0E61  00D5               	movwf	??_getTemp_AD
  2392  0E62  0855               	movf	??_getTemp_AD,w
  2393  0E63  00BD               	movwf	_Temp+7
  2394                           
  2395                           ;OverTemperature_B1.c: 40: } else if (Temp.ADH[1] < Temp.ADRES) {
  2396  0E64  0008               	return
  2397  0E65                     l4379:	
  2398  0E65  083F               	movf	_Temp+9,w
  2399  0E66  023E               	subwf	_Temp+8,w
  2400  0E67  1803               	skipnc
  2401  0E68  0008               	return
  2402                           
  2403                           ;OverTemperature_B1.c: 41: Temp.ADH[1] = Temp.ADRES;
  2404  0E69  083F               	movf	_Temp+9,w
  2405  0E6A  00D5               	movwf	??_getTemp_AD
  2406  0E6B  0855               	movf	??_getTemp_AD,w
  2407  0E6C  00BE               	movwf	_Temp+8
  2408  0E6D  0008               	return
  2409  0E6E                     __end_of_getTemp_AD:	
  2410                           
  2411                           	psect	text4
  2412  0378                     __ptext4:	
  2413 ;; *************** function _getPIR_AD *****************
  2414 ;; Defined at:
  2415 ;;		line 161 in file "../src/PIR_B1.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  channel1        1    wreg     unsigned char 
  2418 ;;  channel2        1    8[BANK0 ] unsigned char 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;  channel1        1   13[BANK0 ] unsigned char 
  2421 ;;  i               1   14[BANK0 ] unsigned char 
  2422 ;;  j               1   12[BANK0 ] unsigned char 
  2423 ;; Return value:  Size  Location     Type
  2424 ;;		None               void
  2425 ;; Registers used:
  2426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2432 ;;      Params:         0       1       0       0
  2433 ;;      Locals:         0       3       0       0
  2434 ;;      Temps:          0       3       0       0
  2435 ;;      Totals:         0       7       0       0
  2436 ;;Total ram usage:        7 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    4
  2439 ;; This function calls:
  2440 ;;		___awdiv
  2441 ;;		___lwdiv
  2442 ;;		_getAD
  2443 ;; This function is called by:
  2444 ;;		_main
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           
  2449                           ;psect for function _getPIR_AD
  2450  0378                     _getPIR_AD:	
  2451                           
  2452                           ;incstack = 0
  2453                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2454                           ;getPIR_AD@channel1 stored from wreg
  2455  0378  1283               	bcf	3,5	;RP0=0, select bank0
  2456  0379  1303               	bcf	3,6	;RP1=0, select bank0
  2457  037A  00E2               	movwf	getPIR_AD@channel1
  2458                           
  2459                           ;PIR_B1.c: 162: char i = 0, j = 0;
  2460  037B  01E3               	clrf	getPIR_AD@i
  2461  037C  01E1               	clrf	getPIR_AD@j
  2462                           
  2463                           ;PIR_B1.c: 164: if (_PIR.ADtoGO == 1) {
  2464  037D  1683               	bsf	3,5	;RP0=1, select bank1
  2465  037E  1303               	bcf	3,6	;RP1=0, select bank1
  2466  037F  1CA0               	btfss	__PIR^(0+128),1
  2467  0380  0008               	return
  2468                           
  2469                           ;PIR_B1.c: 165: _PIR.GO = 1;
  2470  0381  1520               	bsf	__PIR^(0+128),2
  2471                           
  2472                           ;PIR_B1.c: 166: _PIR.ADRES = getAD(channel1, 0x70);
  2473  0382  3070               	movlw	112
  2474  0383  1283               	bcf	3,5	;RP0=0, select bank0
  2475  0384  1303               	bcf	3,6	;RP1=0, select bank0
  2476  0385  00DE               	movwf	??_getPIR_AD
  2477  0386  085E               	movf	??_getPIR_AD,w
  2478  0387  00F4               	movwf	getAD@adcon1
  2479  0388  0862               	movf	getPIR_AD@channel1,w
  2480  0389  158A  260D  118A   	fcall	_getAD
  2481  038C  1283               	bcf	3,5	;RP0=0, select bank0
  2482  038D  1303               	bcf	3,6	;RP1=0, select bank0
  2483  038E  00DF               	movwf	??_getPIR_AD+1
  2484  038F  085F               	movf	??_getPIR_AD+1,w
  2485  0390  1683               	bsf	3,5	;RP0=1, select bank1
  2486  0391  1303               	bcf	3,6	;RP1=0, select bank1
  2487  0392  00A2               	movwf	(__PIR^(0+128)+2)
  2488                           
  2489                           ;PIR_B1.c: 167: _PIR.VRAD = _PIR.ADRES / 51;
  2490  0393  3033               	movlw	51
  2491  0394  1283               	bcf	3,5	;RP0=0, select bank0
  2492  0395  1303               	bcf	3,6	;RP1=0, select bank0
  2493  0396  00D5               	movwf	___awdiv@divisor
  2494  0397  3000               	movlw	0
  2495  0398  00D6               	movwf	___awdiv@divisor+1
  2496  0399  1683               	bsf	3,5	;RP0=1, select bank1
  2497  039A  1303               	bcf	3,6	;RP1=0, select bank1
  2498  039B  0822               	movf	(__PIR^(0+128)+2),w
  2499  039C  1283               	bcf	3,5	;RP0=0, select bank0
  2500  039D  1303               	bcf	3,6	;RP1=0, select bank0
  2501  039E  00DE               	movwf	??_getPIR_AD
  2502  039F  01DF               	clrf	??_getPIR_AD+1
  2503  03A0  085E               	movf	??_getPIR_AD,w
  2504  03A1  00D7               	movwf	___awdiv@dividend
  2505  03A2  085F               	movf	??_getPIR_AD+1,w
  2506  03A3  00D8               	movwf	___awdiv@dividend+1
  2507  03A4  118A  26F9  118A   	fcall	___awdiv
  2508  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  2509  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  2510  03A9  0855               	movf	?___awdiv,w
  2511  03AA  00E0               	movwf	??_getPIR_AD+2
  2512  03AB  0860               	movf	??_getPIR_AD+2,w
  2513  03AC  1683               	bsf	3,5	;RP0=1, select bank1
  2514  03AD  1303               	bcf	3,6	;RP1=0, select bank1
  2515  03AE  00A3               	movwf	(__PIR^(0+128)+3)
  2516                           
  2517                           ;PIR_B1.c: 168: _PIR.VRAD1 = _PIR.ADRES;
  2518  03AF  0822               	movf	(__PIR^(0+128)+2),w
  2519  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  2520  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  2521  03B2  00DE               	movwf	??_getPIR_AD
  2522  03B3  085E               	movf	??_getPIR_AD,w
  2523  03B4  1683               	bsf	3,5	;RP0=1, select bank1
  2524  03B5  1303               	bcf	3,6	;RP1=0, select bank1
  2525  03B6  00A4               	movwf	(__PIR^(0+128)+4)
  2526                           
  2527                           ;PIR_B1.c: 169: _PIR.ADRES = getAD(channel2, 0x70);
  2528  03B7  3070               	movlw	112
  2529  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  2530  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  2531  03BA  00DE               	movwf	??_getPIR_AD
  2532  03BB  085E               	movf	??_getPIR_AD,w
  2533  03BC  00F4               	movwf	getAD@adcon1
  2534  03BD  085D               	movf	getPIR_AD@channel2,w
  2535  03BE  158A  260D  118A   	fcall	_getAD
  2536  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  2537  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  2538  03C3  00DF               	movwf	??_getPIR_AD+1
  2539  03C4  085F               	movf	??_getPIR_AD+1,w
  2540  03C5  1683               	bsf	3,5	;RP0=1, select bank1
  2541  03C6  1303               	bcf	3,6	;RP1=0, select bank1
  2542  03C7  00A2               	movwf	(__PIR^(0+128)+2)
  2543                           
  2544                           ;PIR_B1.c: 170: _PIR.SignalAD = _PIR.ADRES;
  2545  03C8  0822               	movf	(__PIR^(0+128)+2),w
  2546  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2547  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  2548  03CB  00DE               	movwf	??_getPIR_AD
  2549  03CC  085E               	movf	??_getPIR_AD,w
  2550  03CD  1683               	bsf	3,5	;RP0=1, select bank1
  2551  03CE  1303               	bcf	3,6	;RP1=0, select bank1
  2552  03CF  00A1               	movwf	(__PIR^(0+128)+1)
  2553                           
  2554                           ;PIR_B1.c: 172: switch (_PIR.VRAD) {
  2555  03D0  2BEC               	goto	l4411
  2556  03D1                     l4395:	
  2557                           ;PIR_B1.c: 173: case 0:
  2558                           
  2559                           
  2560                           ;PIR_B1.c: 174: if (_PIR.VRAD1 < 10) {
  2561  03D1  300A               	movlw	10
  2562  03D2  0224               	subwf	(__PIR^(0+128)+4),w
  2563  03D3  1803               	skipnc
  2564  03D4  2BD7               	goto	l4399
  2565                           
  2566                           ;PIR_B1.c: 175: _PIR.CloseTimeValue = 5;
  2567  03D5  3005               	movlw	5
  2568  03D6  2BD8               	goto	L1
  2569  03D7                     l4399:	
  2570                           ;PIR_B1.c: 176: } else {
  2571                           
  2572                           
  2573                           ;PIR_B1.c: 177: _PIR.CloseTimeValue = 60;
  2574  03D7  303C               	movlw	60
  2575  03D8                     L1:	
  2576  03D8  00C7               	movwf	(__PIR^(0+128)+39)
  2577  03D9  3000               	movlw	0
  2578  03DA  2BEA               	goto	L5
  2579  03DB                     l4401:	
  2580                           ;PIR_B1.c: 180: case 1:
  2581                           
  2582                           ;PIR_B1.c: 178: }
  2583                           ;PIR_B1.c: 179: break;
  2584                           
  2585                           
  2586                           ;PIR_B1.c: 181: _PIR.CloseTimeValue = 300;
  2587  03DB  302C               	movlw	44
  2588  03DC  00C7               	movwf	(__PIR^(0+128)+39)
  2589  03DD  3001               	movlw	1
  2590  03DE  2BEA               	goto	L5
  2591  03DF                     l4403:	
  2592                           ;PIR_B1.c: 183: case 2:
  2593                           
  2594                           ;PIR_B1.c: 182: break;
  2595                           
  2596                           
  2597                           ;PIR_B1.c: 184: _PIR.CloseTimeValue = 600;
  2598  03DF  3058               	movlw	88
  2599  03E0  00C7               	movwf	(__PIR^(0+128)+39)
  2600  03E1  3002               	movlw	2
  2601  03E2  2BEA               	goto	L5
  2602  03E3                     l4405:	
  2603                           ;PIR_B1.c: 186: case 3:
  2604                           
  2605                           ;PIR_B1.c: 185: break;
  2606                           
  2607                           
  2608                           ;PIR_B1.c: 187: _PIR.CloseTimeValue = 900;
  2609  03E3  3084               	movlw	132
  2610  03E4  00C7               	movwf	(__PIR^(0+128)+39)
  2611  03E5  3003               	movlw	3
  2612  03E6  2BEA               	goto	L5
  2613  03E7                     l4407:	
  2614                           ;PIR_B1.c: 189: case 4:
  2615                           
  2616                           ;PIR_B1.c: 188: break;
  2617                           
  2618                           
  2619                           ;PIR_B1.c: 190: _PIR.CloseTimeValue = 1200;
  2620  03E7  30B0               	movlw	176
  2621  03E8  00C7               	movwf	(__PIR^(0+128)+39)
  2622  03E9  3004               	movlw	4
  2623  03EA                     L5:	
  2624  03EA  00C8               	movwf	(__PIR^(0+128)+40)
  2625                           
  2626                           ;PIR_B1.c: 192: }
  2627                           
  2628                           ;PIR_B1.c: 191: break;
  2629  03EB  2BFD               	goto	l4413
  2630  03EC                     l4411:	
  2631  03EC  0823               	movf	(__PIR^(0+128)+3),w
  2632                           
  2633                           ; Switch size 1, requested type "space"
  2634                           ; Number of cases is 5, Range of values is 0 to 4
  2635                           ; switch strategies available:
  2636                           ; Name         Instructions Cycles
  2637                           ; simple_byte           16     9 (average)
  2638                           ; direct_byte           17     7 (fixed)
  2639                           ; jumptable            260     6 (fixed)
  2640                           ;	Chosen strategy is simple_byte
  2641  03ED  3A00               	xorlw	0	; case 0
  2642  03EE  1903               	skipnz
  2643  03EF  2BD1               	goto	l4395
  2644  03F0  3A01               	xorlw	1	; case 1
  2645  03F1  1903               	skipnz
  2646  03F2  2BDB               	goto	l4401
  2647  03F3  3A03               	xorlw	3	; case 2
  2648  03F4  1903               	skipnz
  2649  03F5  2BDF               	goto	l4403
  2650  03F6  3A01               	xorlw	1	; case 3
  2651  03F7  1903               	skipnz
  2652  03F8  2BE3               	goto	l4405
  2653  03F9  3A07               	xorlw	7	; case 4
  2654  03FA  1903               	skipnz
  2655  03FB  2BE7               	goto	l4407
  2656  03FC  2BFD               	goto	l4413
  2657  03FD                     l4413:	
  2658                           
  2659                           ;PIR_B1.c: 195: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2660  03FD  0821               	movf	(__PIR^(0+128)+1),w
  2661  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  2662  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  2663  0400  00DE               	movwf	??_getPIR_AD
  2664  0401  1683               	bsf	3,5	;RP0=1, select bank1
  2665  0402  1303               	bcf	3,6	;RP1=0, select bank1
  2666  0403  0827               	movf	(__PIR^(0+128)+7),w
  2667  0404  3EA8               	addlw	(__PIR+8)& (0+255)
  2668  0405  0084               	movwf	4
  2669  0406  1283               	bcf	3,5	;RP0=0, select bank0
  2670  0407  1303               	bcf	3,6	;RP1=0, select bank0
  2671  0408  085E               	movf	??_getPIR_AD,w
  2672  0409  1383               	bcf	3,7	;select IRP bank1
  2673  040A  0080               	movwf	0
  2674                           
  2675                           ;PIR_B1.c: 196: for (i = 0; i < 10; i++) {
  2676  040B  01E3               	clrf	getPIR_AD@i
  2677  040C  300A               	movlw	10
  2678  040D  0263               	subwf	getPIR_AD@i,w
  2679  040E  1803               	btfsc	3,0
  2680  040F  2C2C               	goto	l4427
  2681  0410                     l4421:	
  2682                           
  2683                           ;PIR_B1.c: 197: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2684  0410  0863               	movf	getPIR_AD@i,w
  2685  0411  3EA8               	addlw	(__PIR+8)& (0+255)
  2686  0412  0084               	movwf	4
  2687  0413  0800               	movf	0,w
  2688  0414  00DE               	movwf	??_getPIR_AD
  2689  0415  01DF               	clrf	??_getPIR_AD+1
  2690  0416  085E               	movf	??_getPIR_AD,w
  2691  0417  1683               	bsf	3,5	;RP0=1, select bank1
  2692  0418  1303               	bcf	3,6	;RP1=0, select bank1
  2693  0419  07B2               	addwf	(__PIR^(0+128)+18),f
  2694  041A  1803               	skipnc
  2695  041B  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2696  041C  1283               	bcf	3,5	;RP0=0, select bank0
  2697  041D  1303               	bcf	3,6	;RP1=0, select bank0
  2698  041E  085F               	movf	??_getPIR_AD+1,w
  2699  041F  1683               	bsf	3,5	;RP0=1, select bank1
  2700  0420  1303               	bcf	3,6	;RP1=0, select bank1
  2701  0421  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2702  0422  3001               	movlw	1
  2703  0423  1283               	bcf	3,5	;RP0=0, select bank0
  2704  0424  1303               	bcf	3,6	;RP1=0, select bank0
  2705  0425  00DE               	movwf	??_getPIR_AD
  2706  0426  085E               	movf	??_getPIR_AD,w
  2707  0427  07E3               	addwf	getPIR_AD@i,f
  2708  0428  300A               	movlw	10
  2709  0429  0263               	subwf	getPIR_AD@i,w
  2710  042A  1C03               	skipc
  2711  042B  2C10               	goto	l4421
  2712  042C                     l4427:	
  2713                           
  2714                           ;PIR_B1.c: 198: }
  2715                           ;PIR_B1.c: 199: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2716  042C  300A               	movlw	10
  2717  042D  00D5               	movwf	___lwdiv@divisor
  2718  042E  3000               	movlw	0
  2719  042F  00D6               	movwf	___lwdiv@divisor+1
  2720  0430  1683               	bsf	3,5	;RP0=1, select bank1
  2721  0431  1303               	bcf	3,6	;RP1=0, select bank1
  2722  0432  0833               	movf	((__PIR+1)^(0+128)+18),w
  2723  0433  1283               	bcf	3,5	;RP0=0, select bank0
  2724  0434  1303               	bcf	3,6	;RP1=0, select bank0
  2725  0435  01D8               	clrf	___lwdiv@dividend+1
  2726  0436  07D8               	addwf	___lwdiv@dividend+1,f
  2727  0437  1683               	bsf	3,5	;RP0=1, select bank1
  2728  0438  1303               	bcf	3,6	;RP1=0, select bank1
  2729  0439  0832               	movf	(__PIR^(0+128)+18),w
  2730  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2731  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2732  043C  01D7               	clrf	___lwdiv@dividend
  2733  043D  07D7               	addwf	___lwdiv@dividend,f
  2734  043E  118A  27B2  118A   	fcall	___lwdiv
  2735  0441  1283               	bcf	3,5	;RP0=0, select bank0
  2736  0442  1303               	bcf	3,6	;RP1=0, select bank0
  2737  0443  0855               	movf	?___lwdiv,w
  2738  0444  00DE               	movwf	??_getPIR_AD
  2739  0445  1683               	bsf	3,5	;RP0=1, select bank1
  2740  0446  1303               	bcf	3,6	;RP1=0, select bank1
  2741  0447  0834               	movf	(__PIR^(0+128)+20),w
  2742  0448  3EB5               	addlw	(__PIR+21)& (0+255)
  2743  0449  0084               	movwf	4
  2744  044A  1283               	bcf	3,5	;RP0=0, select bank0
  2745  044B  1303               	bcf	3,6	;RP1=0, select bank0
  2746  044C  085E               	movf	??_getPIR_AD,w
  2747  044D  1383               	bcf	3,7	;select IRP bank1
  2748  044E  0080               	movwf	0
  2749                           
  2750                           ;PIR_B1.c: 200: _PIR.TenAverageValue = 0;
  2751  044F  1683               	bsf	3,5	;RP0=1, select bank1
  2752  0450  1303               	bcf	3,6	;RP1=0, select bank1
  2753  0451  01B2               	clrf	(__PIR^(0+128)+18)
  2754  0452  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2755                           
  2756                           ;PIR_B1.c: 202: for (i = 0; i <= 9; i++) {
  2757  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2758  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2759  0455  01E3               	clrf	getPIR_AD@i
  2760  0456  300A               	movlw	10
  2761  0457  0263               	subwf	getPIR_AD@i,w
  2762  0458  1803               	btfsc	3,0
  2763  0459  2C76               	goto	l4443
  2764  045A                     l4437:	
  2765                           
  2766                           ;PIR_B1.c: 203: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2767  045A  0863               	movf	getPIR_AD@i,w
  2768  045B  3EB5               	addlw	(__PIR+21)& (0+255)
  2769  045C  0084               	movwf	4
  2770  045D  0800               	movf	0,w
  2771  045E  00DE               	movwf	??_getPIR_AD
  2772  045F  01DF               	clrf	??_getPIR_AD+1
  2773  0460  085E               	movf	??_getPIR_AD,w
  2774  0461  1683               	bsf	3,5	;RP0=1, select bank1
  2775  0462  1303               	bcf	3,6	;RP1=0, select bank1
  2776  0463  07BF               	addwf	(__PIR^(0+128)+31),f
  2777  0464  1803               	skipnc
  2778  0465  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2779  0466  1283               	bcf	3,5	;RP0=0, select bank0
  2780  0467  1303               	bcf	3,6	;RP1=0, select bank0
  2781  0468  085F               	movf	??_getPIR_AD+1,w
  2782  0469  1683               	bsf	3,5	;RP0=1, select bank1
  2783  046A  1303               	bcf	3,6	;RP1=0, select bank1
  2784  046B  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2785  046C  3001               	movlw	1
  2786  046D  1283               	bcf	3,5	;RP0=0, select bank0
  2787  046E  1303               	bcf	3,6	;RP1=0, select bank0
  2788  046F  00DE               	movwf	??_getPIR_AD
  2789  0470  085E               	movf	??_getPIR_AD,w
  2790  0471  07E3               	addwf	getPIR_AD@i,f
  2791  0472  300A               	movlw	10
  2792  0473  0263               	subwf	getPIR_AD@i,w
  2793  0474  1C03               	skipc
  2794  0475  2C5A               	goto	l4437
  2795  0476                     l4443:	
  2796                           
  2797                           ;PIR_B1.c: 204: }
  2798                           ;PIR_B1.c: 205: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2799  0476  300A               	movlw	10
  2800  0477  00D5               	movwf	___lwdiv@divisor
  2801  0478  3000               	movlw	0
  2802  0479  00D6               	movwf	___lwdiv@divisor+1
  2803  047A  1683               	bsf	3,5	;RP0=1, select bank1
  2804  047B  1303               	bcf	3,6	;RP1=0, select bank1
  2805  047C  0840               	movf	((__PIR+1)^(0+128)+31),w
  2806  047D  1283               	bcf	3,5	;RP0=0, select bank0
  2807  047E  1303               	bcf	3,6	;RP1=0, select bank0
  2808  047F  01D8               	clrf	___lwdiv@dividend+1
  2809  0480  07D8               	addwf	___lwdiv@dividend+1,f
  2810  0481  1683               	bsf	3,5	;RP0=1, select bank1
  2811  0482  1303               	bcf	3,6	;RP1=0, select bank1
  2812  0483  083F               	movf	(__PIR^(0+128)+31),w
  2813  0484  1283               	bcf	3,5	;RP0=0, select bank0
  2814  0485  1303               	bcf	3,6	;RP1=0, select bank0
  2815  0486  01D7               	clrf	___lwdiv@dividend
  2816  0487  07D7               	addwf	___lwdiv@dividend,f
  2817  0488  118A  27B2  118A   	fcall	___lwdiv
  2818  048B  1283               	bcf	3,5	;RP0=0, select bank0
  2819  048C  1303               	bcf	3,6	;RP1=0, select bank0
  2820  048D  0855               	movf	?___lwdiv,w
  2821  048E  00DE               	movwf	??_getPIR_AD
  2822  048F  085E               	movf	??_getPIR_AD,w
  2823  0490  1683               	bsf	3,5	;RP0=1, select bank1
  2824  0491  1303               	bcf	3,6	;RP1=0, select bank1
  2825  0492  00A6               	movwf	(__PIR^(0+128)+6)
  2826                           
  2827                           ;PIR_B1.c: 206: _PIR.HundredAverageValue = 0;
  2828  0493  01BF               	clrf	(__PIR^(0+128)+31)
  2829  0494  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2830                           
  2831                           ;PIR_B1.c: 208: if (_PIR.TenCount < 10) {
  2832  0495  300A               	movlw	10
  2833  0496  0227               	subwf	(__PIR^(0+128)+7),w
  2834  0497  1803               	skipnc
  2835  0498  2CA2               	goto	l4451
  2836                           
  2837                           ;PIR_B1.c: 209: _PIR.TenCount++;
  2838  0499  3001               	movlw	1
  2839  049A  1283               	bcf	3,5	;RP0=0, select bank0
  2840  049B  1303               	bcf	3,6	;RP1=0, select bank0
  2841  049C  00DE               	movwf	??_getPIR_AD
  2842  049D  085E               	movf	??_getPIR_AD,w
  2843  049E  1683               	bsf	3,5	;RP0=1, select bank1
  2844  049F  1303               	bcf	3,6	;RP1=0, select bank1
  2845  04A0  07A7               	addwf	(__PIR^(0+128)+7),f
  2846                           
  2847                           ;PIR_B1.c: 210: } else {
  2848  04A1  0008               	return
  2849  04A2                     l4451:	
  2850                           
  2851                           ;PIR_B1.c: 211: _PIR.TenCount = 0;
  2852  04A2  01A7               	clrf	(__PIR^(0+128)+7)
  2853                           
  2854                           ;PIR_B1.c: 212: if (_PIR.HundreCount < 10)
  2855  04A3  300A               	movlw	10
  2856  04A4  0234               	subwf	(__PIR^(0+128)+20),w
  2857  04A5  1803               	skipnc
  2858  04A6  2CB0               	goto	l4457
  2859                           
  2860                           ;PIR_B1.c: 213: _PIR.HundreCount++;
  2861  04A7  3001               	movlw	1
  2862  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  2863  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  2864  04AA  00DE               	movwf	??_getPIR_AD
  2865  04AB  085E               	movf	??_getPIR_AD,w
  2866  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  2867  04AD  1303               	bcf	3,6	;RP1=0, select bank1
  2868  04AE  07B4               	addwf	(__PIR^(0+128)+20),f
  2869  04AF  0008               	return
  2870  04B0                     l4457:	
  2871                           
  2872                           ;PIR_B1.c: 214: else
  2873                           ;PIR_B1.c: 215: _PIR.HundreCount = 0;
  2874  04B0  01B4               	clrf	(__PIR^(0+128)+20)
  2875  04B1  0008               	return
  2876  04B2                     __end_of_getPIR_AD:	
  2877                           
  2878                           	psect	text5
  2879  07B2                     __ptext5:	
  2880 ;; *************** function ___lwdiv *****************
  2881 ;; Defined at:
  2882 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  divisor         2    0[BANK0 ] unsigned int 
  2885 ;;  dividend        2    2[BANK0 ] unsigned int 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;  quotient        2    5[BANK0 ] unsigned int 
  2888 ;;  counter         1    4[BANK0 ] unsigned char 
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  2    0[BANK0 ] unsigned int 
  2891 ;; Registers used:
  2892 ;;		wreg, status,2, status,0
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2898 ;;      Params:         0       4       0       0
  2899 ;;      Locals:         0       3       0       0
  2900 ;;      Temps:          1       0       0       0
  2901 ;;      Totals:         1       7       0       0
  2902 ;;Total ram usage:        8 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    2
  2905 ;; This function calls:
  2906 ;;		Nothing
  2907 ;; This function is called by:
  2908 ;;		_getPIR_AD
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           
  2913                           ;psect for function ___lwdiv
  2914  07B2                     ___lwdiv:	
  2915                           
  2916                           ;incstack = 0
  2917                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2918  07B2  1283               	bcf	3,5	;RP0=0, select bank0
  2919  07B3  1303               	bcf	3,6	;RP1=0, select bank0
  2920  07B4  01DA               	clrf	___lwdiv@quotient
  2921  07B5  01DB               	clrf	___lwdiv@quotient+1
  2922  07B6  0856               	movf	___lwdiv@divisor+1,w
  2923  07B7  0455               	iorwf	___lwdiv@divisor,w
  2924  07B8  1903               	skipnz
  2925  07B9  2FEB               	goto	l4279
  2926  07BA  01D9               	clrf	___lwdiv@counter
  2927  07BB  0AD9               	incf	___lwdiv@counter,f
  2928  07BC                     l4267:	
  2929  07BC  1BD6               	btfsc	___lwdiv@divisor+1,7
  2930  07BD  2FCA               	goto	l4269
  2931  07BE  3001               	movlw	1
  2932  07BF                     u4815:	
  2933  07BF  1003               	clrc
  2934  07C0  0DD5               	rlf	___lwdiv@divisor,f
  2935  07C1  0DD6               	rlf	___lwdiv@divisor+1,f
  2936  07C2  3EFF               	addlw	-1
  2937  07C3  1D03               	skipz
  2938  07C4  2FBF               	goto	u4815
  2939  07C5  3001               	movlw	1
  2940  07C6  00F4               	movwf	??___lwdiv
  2941  07C7  0874               	movf	??___lwdiv,w
  2942  07C8  07D9               	addwf	___lwdiv@counter,f
  2943  07C9  2FBC               	goto	l4267
  2944  07CA                     l4269:	
  2945  07CA  3001               	movlw	1
  2946  07CB                     u4835:	
  2947  07CB  1003               	clrc
  2948  07CC  0DDA               	rlf	___lwdiv@quotient,f
  2949  07CD  0DDB               	rlf	___lwdiv@quotient+1,f
  2950  07CE  3EFF               	addlw	-1
  2951  07CF  1D03               	skipz
  2952  07D0  2FCB               	goto	u4835
  2953  07D1  0856               	movf	___lwdiv@divisor+1,w
  2954  07D2  0258               	subwf	___lwdiv@dividend+1,w
  2955  07D3  1D03               	skipz
  2956  07D4  2FD7               	goto	u4845
  2957  07D5  0855               	movf	___lwdiv@divisor,w
  2958  07D6  0257               	subwf	___lwdiv@dividend,w
  2959  07D7                     u4845:	
  2960  07D7  1C03               	skipc
  2961  07D8  2FE0               	goto	l4275
  2962  07D9  0855               	movf	___lwdiv@divisor,w
  2963  07DA  02D7               	subwf	___lwdiv@dividend,f
  2964  07DB  0856               	movf	___lwdiv@divisor+1,w
  2965  07DC  1C03               	skipc
  2966  07DD  03D8               	decf	___lwdiv@dividend+1,f
  2967  07DE  02D8               	subwf	___lwdiv@dividend+1,f
  2968  07DF  145A               	bsf	___lwdiv@quotient,0
  2969  07E0                     l4275:	
  2970  07E0  3001               	movlw	1
  2971  07E1                     u4855:	
  2972  07E1  1003               	clrc
  2973  07E2  0CD6               	rrf	___lwdiv@divisor+1,f
  2974  07E3  0CD5               	rrf	___lwdiv@divisor,f
  2975  07E4  3EFF               	addlw	-1
  2976  07E5  1D03               	skipz
  2977  07E6  2FE1               	goto	u4855
  2978  07E7  3001               	movlw	1
  2979  07E8  02D9               	subwf	___lwdiv@counter,f
  2980  07E9  1D03               	btfss	3,2
  2981  07EA  2FCA               	goto	l4269
  2982  07EB                     l4279:	
  2983  07EB  085B               	movf	___lwdiv@quotient+1,w
  2984  07EC  01D6               	clrf	?___lwdiv+1
  2985  07ED  07D6               	addwf	?___lwdiv+1,f
  2986  07EE  085A               	movf	___lwdiv@quotient,w
  2987  07EF  01D5               	clrf	?___lwdiv
  2988  07F0  07D5               	addwf	?___lwdiv,f
  2989  07F1  0008               	return
  2990  07F2                     __end_of___lwdiv:	
  2991                           
  2992                           	psect	text6
  2993  0548                     __ptext6:	
  2994 ;; *************** function _getLoad_AD *****************
  2995 ;; Defined at:
  2996 ;;		line 15 in file "../src/OverLoad_B1.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;  channel         1    wreg     unsigned char 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  channel         1    2[BANK0 ] unsigned char 
  3001 ;;  i               1    5[BANK0 ] unsigned char 
  3002 ;;  j               1    4[BANK0 ] unsigned char 
  3003 ;;  k               1    3[BANK0 ] unsigned char 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;		None               void
  3006 ;; Registers used:
  3007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3013 ;;      Params:         0       0       0       0
  3014 ;;      Locals:         0       4       0       0
  3015 ;;      Temps:          0       2       0       0
  3016 ;;      Totals:         0       6       0       0
  3017 ;;Total ram usage:        6 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    4
  3020 ;; This function calls:
  3021 ;;		_getAD
  3022 ;; This function is called by:
  3023 ;;		_main
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           
  3028                           ;psect for function _getLoad_AD
  3029  0548                     _getLoad_AD:	
  3030                           
  3031                           ;incstack = 0
  3032                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3033                           ;getLoad_AD@channel stored from wreg
  3034  0548  1283               	bcf	3,5	;RP0=0, select bank0
  3035  0549  1303               	bcf	3,6	;RP1=0, select bank0
  3036  054A  00D7               	movwf	getLoad_AD@channel
  3037                           
  3038                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3039  054B  01DA               	clrf	getLoad_AD@i
  3040  054C  01D9               	clrf	getLoad_AD@j
  3041  054D  01D8               	clrf	getLoad_AD@k
  3042                           
  3043                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3044  054E  1683               	bsf	3,5	;RP0=1, select bank1
  3045  054F  1303               	bcf	3,6	;RP1=0, select bank1
  3046  0550  1E4F               	btfss	_Load^(0+128),4
  3047  0551  0008               	return
  3048                           
  3049                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0x73);
  3050  0552  3073               	movlw	115
  3051  0553  1283               	bcf	3,5	;RP0=0, select bank0
  3052  0554  1303               	bcf	3,6	;RP1=0, select bank0
  3053  0555  00D5               	movwf	??_getLoad_AD
  3054  0556  0855               	movf	??_getLoad_AD,w
  3055  0557  00F4               	movwf	getAD@adcon1
  3056  0558  0857               	movf	getLoad_AD@channel,w
  3057  0559  158A  260D  118A   	fcall	_getAD
  3058  055C  1283               	bcf	3,5	;RP0=0, select bank0
  3059  055D  1303               	bcf	3,6	;RP1=0, select bank0
  3060  055E  00D6               	movwf	??_getLoad_AD+1
  3061  055F  0856               	movf	??_getLoad_AD+1,w
  3062  0560  1683               	bsf	3,5	;RP0=1, select bank1
  3063  0561  1303               	bcf	3,6	;RP1=0, select bank1
  3064  0562  00E4               	movwf	(_Load^(0+128)+21)
  3065                           
  3066                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3067  0563  1283               	bcf	3,5	;RP0=0, select bank0
  3068  0564  1303               	bcf	3,6	;RP1=0, select bank0
  3069  0565  01DA               	clrf	getLoad_AD@i
  3070  0566  3004               	movlw	4
  3071  0567  025A               	subwf	getLoad_AD@i,w
  3072  0568  1803               	btfsc	3,0
  3073  0569  2D8F               	goto	l4349
  3074  056A                     l4337:	
  3075                           
  3076                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  3077  056A  085A               	movf	getLoad_AD@i,w
  3078  056B  3ED9               	addlw	(_Load+10)& (0+255)
  3079  056C  0084               	movwf	4
  3080  056D  1683               	bsf	3,5	;RP0=1, select bank1
  3081  056E  1303               	bcf	3,6	;RP1=0, select bank1
  3082  056F  0864               	movf	(_Load^(0+128)+21),w
  3083  0570  1383               	bcf	3,7	;select IRP bank1
  3084  0571  0200               	subwf	0,w
  3085  0572  1803               	skipnc
  3086  0573  2D86               	goto	l4345
  3087  0574  1283               	bcf	3,5	;RP0=0, select bank0
  3088  0575  1303               	bcf	3,6	;RP1=0, select bank0
  3089  0576  08D9               	movf	getLoad_AD@j,f
  3090  0577  1D03               	skipz
  3091  0578  2D86               	goto	l4345
  3092                           
  3093                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  3094  0579  1683               	bsf	3,5	;RP0=1, select bank1
  3095  057A  1303               	bcf	3,6	;RP1=0, select bank1
  3096  057B  0864               	movf	(_Load^(0+128)+21),w
  3097  057C  1283               	bcf	3,5	;RP0=0, select bank0
  3098  057D  1303               	bcf	3,6	;RP1=0, select bank0
  3099  057E  00D5               	movwf	??_getLoad_AD
  3100  057F  085A               	movf	getLoad_AD@i,w
  3101  0580  3ED9               	addlw	(_Load+10)& (0+255)
  3102  0581  0084               	movwf	4
  3103  0582  0855               	movf	??_getLoad_AD,w
  3104  0583  0080               	movwf	0
  3105                           
  3106                           ;OverLoad_B1.c: 24: j = 1;
  3107  0584  01D9               	clrf	getLoad_AD@j
  3108  0585  0AD9               	incf	getLoad_AD@j,f
  3109  0586                     l4345:	
  3110  0586  3001               	movlw	1
  3111  0587  1283               	bcf	3,5	;RP0=0, select bank0
  3112  0588  00D5               	movwf	??_getLoad_AD
  3113  0589  0855               	movf	??_getLoad_AD,w
  3114  058A  07DA               	addwf	getLoad_AD@i,f
  3115  058B  3004               	movlw	4
  3116  058C  025A               	subwf	getLoad_AD@i,w
  3117  058D  1C03               	skipc
  3118  058E  2D6A               	goto	l4337
  3119  058F                     l4349:	
  3120                           
  3121                           ;OverLoad_B1.c: 25: }
  3122                           ;OverLoad_B1.c: 26: }
  3123                           ;OverLoad_B1.c: 27: if (j == 0) {
  3124  058F  08D9               	movf	getLoad_AD@j,f
  3125  0590  1D03               	skipz
  3126  0591  0008               	return
  3127                           
  3128                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3129  0592  01DA               	clrf	getLoad_AD@i
  3130  0593                     L6:	
  3131  0593  3004               	movlw	4
  3132  0594  025A               	subwf	getLoad_AD@i,w
  3133  0595  1803               	btfsc	3,0
  3134  0596  0008               	return
  3135                           
  3136                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  3137  0597  085A               	movf	getLoad_AD@i,w
  3138  0598  3EDE               	addlw	(_Load+15)& (0+255)
  3139  0599  0084               	movwf	4
  3140  059A  1383               	bcf	3,7	;select IRP bank1
  3141  059B  0800               	movf	0,w
  3142  059C  1683               	bsf	3,5	;RP0=1, select bank1
  3143  059D  1303               	bcf	3,6	;RP1=0, select bank1
  3144  059E  0264               	subwf	(_Load^(0+128)+21),w
  3145  059F  1803               	skipnc
  3146  05A0  2DB3               	goto	l4365
  3147  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  3148  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  3149  05A3  08D8               	movf	getLoad_AD@k,f
  3150  05A4  1D03               	skipz
  3151  05A5  2DB3               	goto	l4365
  3152                           
  3153                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  3154  05A6  1683               	bsf	3,5	;RP0=1, select bank1
  3155  05A7  1303               	bcf	3,6	;RP1=0, select bank1
  3156  05A8  0864               	movf	(_Load^(0+128)+21),w
  3157  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  3158  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  3159  05AB  00D5               	movwf	??_getLoad_AD
  3160  05AC  085A               	movf	getLoad_AD@i,w
  3161  05AD  3EDE               	addlw	(_Load+15)& (0+255)
  3162  05AE  0084               	movwf	4
  3163  05AF  0855               	movf	??_getLoad_AD,w
  3164  05B0  0080               	movwf	0
  3165                           
  3166                           ;OverLoad_B1.c: 31: k = 1;
  3167  05B1  01D8               	clrf	getLoad_AD@k
  3168  05B2  0AD8               	incf	getLoad_AD@k,f
  3169  05B3                     l4365:	
  3170  05B3  3001               	movlw	1
  3171  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  3172  05B5  00D5               	movwf	??_getLoad_AD
  3173  05B6  0855               	movf	??_getLoad_AD,w
  3174  05B7  07DA               	addwf	getLoad_AD@i,f
  3175  05B8  2D93               	goto	L6
  3176  05B9                     __end_of_getLoad_AD:	
  3177                           
  3178                           	psect	text7
  3179  0E6E                     __ptext7:	
  3180 ;; *************** function _getCDS_AD *****************
  3181 ;; Defined at:
  3182 ;;		line 45 in file "../src/CDS_B1.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;  channel1        1    wreg     unsigned char 
  3185 ;;  channel2        1    0[BANK0 ] unsigned char 
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;  channel1        1    5[BANK0 ] unsigned char 
  3188 ;;  j               1    4[BANK0 ] unsigned char 
  3189 ;;  i               1    3[BANK0 ] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;		None               void
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, status,0, pclath, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3199 ;;      Params:         0       1       0       0
  3200 ;;      Locals:         0       3       0       0
  3201 ;;      Temps:          0       2       0       0
  3202 ;;      Totals:         0       6       0       0
  3203 ;;Total ram usage:        6 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    4
  3206 ;; This function calls:
  3207 ;;		_getAD
  3208 ;; This function is called by:
  3209 ;;		_main
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           
  3214                           ;psect for function _getCDS_AD
  3215  0E6E                     _getCDS_AD:	
  3216                           
  3217                           ;incstack = 0
  3218                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3219                           ;getCDS_AD@channel1 stored from wreg
  3220  0E6E  1283               	bcf	3,5	;RP0=0, select bank0
  3221  0E6F  1303               	bcf	3,6	;RP1=0, select bank0
  3222  0E70  00DA               	movwf	getCDS_AD@channel1
  3223                           
  3224                           ;CDS_B1.c: 46: char i = 0, j = 0;
  3225  0E71  01D8               	clrf	getCDS_AD@i
  3226  0E72  01D9               	clrf	getCDS_AD@j
  3227                           
  3228                           ;CDS_B1.c: 47: if (_CDS.ADtoGO == 1) {
  3229  0E73  1DAD               	btfss	__CDS,3
  3230  0E74  0008               	return
  3231                           
  3232                           ;CDS_B1.c: 48: _CDS.GO = 1;
  3233  0E75  14AD               	bsf	__CDS,1
  3234                           
  3235                           ;CDS_B1.c: 49: _CDS.ADRES = getAD(channel1, 0x70);
  3236  0E76  3070               	movlw	112
  3237  0E77  00D6               	movwf	??_getCDS_AD
  3238  0E78  0856               	movf	??_getCDS_AD,w
  3239  0E79  00F4               	movwf	getAD@adcon1
  3240  0E7A  085A               	movf	getCDS_AD@channel1,w
  3241  0E7B  158A  260D  158A   	fcall	_getAD
  3242  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  3243  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
  3244  0E80  00D7               	movwf	??_getCDS_AD+1
  3245  0E81  0857               	movf	??_getCDS_AD+1,w
  3246  0E82  00B1               	movwf	__CDS+4
  3247                           
  3248                           ;CDS_B1.c: 50: _CDS.VRAD = _CDS.ADRES;
  3249  0E83  0831               	movf	__CDS+4,w
  3250  0E84  00D6               	movwf	??_getCDS_AD
  3251  0E85  0856               	movf	??_getCDS_AD,w
  3252  0E86  00AF               	movwf	__CDS+2
  3253                           
  3254                           ;CDS_B1.c: 51: _CDS.ADRES = getAD(channel2, 0x70);
  3255  0E87  3070               	movlw	112
  3256  0E88  00D6               	movwf	??_getCDS_AD
  3257  0E89  0856               	movf	??_getCDS_AD,w
  3258  0E8A  00F4               	movwf	getAD@adcon1
  3259  0E8B  0855               	movf	getCDS_AD@channel2,w
  3260  0E8C  158A  260D         	fcall	_getAD
  3261  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  3262  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  3263  0E90  00D7               	movwf	??_getCDS_AD+1
  3264  0E91  0857               	movf	??_getCDS_AD+1,w
  3265  0E92  00B1               	movwf	__CDS+4
  3266                           
  3267                           ;CDS_B1.c: 52: _CDS.SignalAD = _CDS.ADRES;
  3268  0E93  0831               	movf	__CDS+4,w
  3269  0E94  00D6               	movwf	??_getCDS_AD
  3270  0E95  0856               	movf	??_getCDS_AD,w
  3271  0E96  00B0               	movwf	__CDS+3
  3272  0E97  0008               	return
  3273  0E98                     __end_of_getCDS_AD:	
  3274                           
  3275                           	psect	text8
  3276  0E0D                     __ptext8:	
  3277 ;; *************** function _getAD *****************
  3278 ;; Defined at:
  3279 ;;		line 426 in file "../src/MCU_B1.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;  adcon0          1    wreg     unsigned char 
  3282 ;;  adcon1          1    4[COMMON] unsigned char 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  adcon0          1    5[COMMON] unsigned char 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      unsigned char 
  3287 ;; Registers used:
  3288 ;;		wreg, status,2, status,0, pclath, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3294 ;;      Params:         1       0       0       0
  3295 ;;      Locals:         1       0       0       0
  3296 ;;      Temps:          0       0       0       0
  3297 ;;      Totals:         2       0       0       0
  3298 ;;Total ram usage:        2 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    3
  3301 ;; This function calls:
  3302 ;;		_Timeout_Counter
  3303 ;;		_set_TimeoutCleared
  3304 ;; This function is called by:
  3305 ;;		_getCDS_AD
  3306 ;;		_getLoad_AD
  3307 ;;		_getTemp_AD
  3308 ;;		_getPIR_AD
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           
  3313                           ;psect for function _getAD
  3314  0E0D                     _getAD:	
  3315                           
  3316                           ;incstack = 0
  3317                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3318                           ;getAD@adcon0 stored from wreg
  3319  0E0D  00F5               	movwf	getAD@adcon0
  3320                           
  3321                           ;MCU_B1.c: 427: ADCON0 = adcon0;
  3322  0E0E  0875               	movf	getAD@adcon0,w
  3323  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  3324  0E10  1303               	bcf	3,6	;RP1=0, select bank0
  3325  0E11  009F               	movwf	31	;volatile
  3326                           
  3327                           ;MCU_B1.c: 428: ADCON1 = adcon1;
  3328  0E12  0874               	movf	getAD@adcon1,w
  3329  0E13  1683               	bsf	3,5	;RP0=1, select bank1
  3330  0E14  1303               	bcf	3,6	;RP1=0, select bank1
  3331  0E15  009F               	movwf	31	;volatile
  3332                           
  3333                           ;MCU_B1.c: 429: GO_nDONE = 1;
  3334  0E16  1283               	bcf	3,5	;RP0=0, select bank0
  3335  0E17  1303               	bcf	3,6	;RP1=0, select bank0
  3336  0E18  149F               	bsf	31,1	;volatile
  3337                           
  3338                           ;MCU_B1.c: 430: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3339  0E19  2E1D               	goto	l4051
  3340  0E1A                     l4049:	
  3341                           
  3342                           ;MCU_B1.c: 431: Timeout_Counter();
  3343  0E1A  158A  2567  158A   	fcall	_Timeout_Counter
  3344  0E1D                     l4051:	
  3345  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  3346  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  3347  0E1F  1C9F               	btfss	31,1	;volatile
  3348  0E20  2E23               	goto	l4055
  3349  0E21  1D25               	btfss	_myMain+5,2
  3350  0E22  2E1A               	goto	l4049
  3351  0E23                     l4055:	
  3352                           
  3353                           ;MCU_B1.c: 432: };
  3354                           ;MCU_B1.c: 433: set_TimeoutCleared();
  3355  0E23  158A  243F         	fcall	_set_TimeoutCleared
  3356                           
  3357                           ;MCU_B1.c: 434: return ADRES;
  3358  0E25  1283               	bcf	3,5	;RP0=0, select bank0
  3359  0E26  1303               	bcf	3,6	;RP1=0, select bank0
  3360  0E27  081E               	movf	30,w	;volatile
  3361  0E28  0008               	return
  3362  0E29                     __end_of_getAD:	
  3363                           
  3364                           	psect	text9
  3365  0C3F                     __ptext9:	
  3366 ;; *************** function _set_TimeoutCleared *****************
  3367 ;; Defined at:
  3368 ;;		line 270 in file "../src/Main_B1.c"
  3369 ;; Parameters:    Size  Location     Type
  3370 ;;		None
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;		None
  3373 ;; Return value:  Size  Location     Type
  3374 ;;		None               void
  3375 ;; Registers used:
  3376 ;;		status,2
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3382 ;;      Params:         0       0       0       0
  3383 ;;      Locals:         0       0       0       0
  3384 ;;      Temps:          0       0       0       0
  3385 ;;      Totals:         0       0       0       0
  3386 ;;Total ram usage:        0 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:    2
  3389 ;; This function calls:
  3390 ;;		Nothing
  3391 ;; This function is called by:
  3392 ;;		_getAD
  3393 ;; This function uses a non-reentrant model
  3394 ;;
  3395                           
  3396                           
  3397                           ;psect for function _set_TimeoutCleared
  3398  0C3F                     _set_TimeoutCleared:	
  3399                           
  3400                           ;Main_B1.c: 271: myMain.Timeout = 0;
  3401                           
  3402                           ;incstack = 0
  3403                           ; Regs used in _set_TimeoutCleared: [status,2]
  3404  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  3405  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  3406  0C41  1125               	bcf	_myMain+5,2
  3407                           
  3408                           ;Main_B1.c: 272: myMain.Timeout_Counter = 0;
  3409  0C42  01A6               	clrf	_myMain+6
  3410  0C43  01A7               	clrf	_myMain+7
  3411  0C44  0008               	return
  3412  0C45                     __end_of_set_TimeoutCleared:	
  3413                           
  3414                           	psect	text10
  3415  0D67                     __ptext10:	
  3416 ;; *************** function _Timeout_Counter *****************
  3417 ;; Defined at:
  3418 ;;		line 261 in file "../src/Main_B1.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;		None
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;		None
  3423 ;; Return value:  Size  Location     Type
  3424 ;;		None               void
  3425 ;; Registers used:
  3426 ;;		wreg, status,2
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3432 ;;      Params:         0       0       0       0
  3433 ;;      Locals:         0       0       0       0
  3434 ;;      Temps:          0       0       0       0
  3435 ;;      Totals:         0       0       0       0
  3436 ;;Total ram usage:        0 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    2
  3439 ;; This function calls:
  3440 ;;		Nothing
  3441 ;; This function is called by:
  3442 ;;		_getAD
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           
  3447                           ;psect for function _Timeout_Counter
  3448  0D67                     _Timeout_Counter:	
  3449                           
  3450                           ;Main_B1.c: 262: myMain.Timeout_Counter++;
  3451                           
  3452                           ;incstack = 0
  3453                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3454  0D67  3001               	movlw	1
  3455  0D68  1283               	bcf	3,5	;RP0=0, select bank0
  3456  0D69  1303               	bcf	3,6	;RP1=0, select bank0
  3457  0D6A  07A6               	addwf	_myMain+6,f
  3458  0D6B  1803               	skipnc
  3459  0D6C  0AA7               	incf	_myMain+7,f
  3460  0D6D  3000               	movlw	0
  3461  0D6E  07A7               	addwf	_myMain+7,f
  3462                           
  3463                           ;Main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
  3464  0D6F  3027               	movlw	39
  3465  0D70  0627               	xorwf	_myMain+7,w
  3466  0D71  1D03               	skipz
  3467  0D72  2D75               	goto	u4185
  3468  0D73  3010               	movlw	16
  3469  0D74  0626               	xorwf	_myMain+6,w
  3470  0D75                     u4185:	
  3471  0D75  1D03               	skipz
  3472  0D76  0008               	return
  3473                           
  3474                           ;Main_B1.c: 264: myMain.Timeout_Counter = 0;
  3475  0D77  01A6               	clrf	_myMain+6
  3476  0D78  01A7               	clrf	_myMain+7
  3477                           
  3478                           ;Main_B1.c: 265: myMain.Timeout = 1;
  3479  0D79  1525               	bsf	_myMain+5,2
  3480  0D7A  0008               	return
  3481  0D7B                     __end_of_Timeout_Counter:	
  3482                           
  3483                           	psect	text11
  3484  0CDC                     __ptext11:	
  3485 ;; *************** function _WDT_Main *****************
  3486 ;; Defined at:
  3487 ;;		line 1019 in file "../src/MCU_B1.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;		None
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;		None
  3492 ;; Return value:  Size  Location     Type
  3493 ;;		None               void
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0, pclath, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3501 ;;      Params:         0       0       0       0
  3502 ;;      Locals:         0       0       0       0
  3503 ;;      Temps:          1       0       0       0
  3504 ;;      Totals:         1       0       0       0
  3505 ;;Total ram usage:        1 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    3
  3508 ;; This function calls:
  3509 ;;		_WDT_Clearing
  3510 ;; This function is called by:
  3511 ;;		_main
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           
  3516                           ;psect for function _WDT_Main
  3517  0CDC                     _WDT_Main:	
  3518                           
  3519                           ;MCU_B1.c: 1020: if (WDT.Enable == 1) {
  3520                           
  3521                           ;incstack = 0
  3522                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3523  0CDC  1C76               	btfss	_WDT,0
  3524  0CDD  0008               	return
  3525                           
  3526                           ;MCU_B1.c: 1021: if (WDT.Timer-- > 0) {
  3527  0CDE  3001               	movlw	1
  3528  0CDF  02F7               	subwf	_WDT+1,f
  3529  0CE0  0877               	movf	_WDT+1,w
  3530  0CE1  3AFF               	xorlw	255
  3531  0CE2  1903               	skipnz
  3532  0CE3  0008               	return
  3533                           
  3534                           ;MCU_B1.c: 1022: WDT.Timer = 100;
  3535  0CE4  3064               	movlw	100
  3536  0CE5  00F4               	movwf	??_WDT_Main
  3537  0CE6  0874               	movf	??_WDT_Main,w
  3538  0CE7  00F7               	movwf	_WDT+1
  3539                           
  3540                           ;MCU_B1.c: 1023: WDT_Clearing();
  3541  0CE8  118A  2002         	fcall	_WDT_Clearing
  3542  0CEA  0008               	return
  3543  0CEB                     __end_of_WDT_Main:	
  3544                           
  3545                           	psect	text12
  3546  0002                     __ptext12:	
  3547 ;; *************** function _WDT_Clearing *****************
  3548 ;; Defined at:
  3549 ;;		line 1029 in file "../src/MCU_B1.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;		None
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;		None
  3554 ;; Return value:  Size  Location     Type
  3555 ;;		None               void
  3556 ;; Registers used:
  3557 ;;		None
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3563 ;;      Params:         0       0       0       0
  3564 ;;      Locals:         0       0       0       0
  3565 ;;      Temps:          0       0       0       0
  3566 ;;      Totals:         0       0       0       0
  3567 ;;Total ram usage:        0 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; Hardware stack levels required when called:    2
  3570 ;; This function calls:
  3571 ;;		Nothing
  3572 ;; This function is called by:
  3573 ;;		_WDT_Main
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           
  3578                           ;psect for function _WDT_Clearing
  3579  0002                     _WDT_Clearing:	
  3580                           
  3581                           ;incstack = 0
  3582                           ; Regs used in _WDT_Clearing: []
  3583  0002  0064               	clrwdt	;# 
  3584  0003  0008               	return
  3585  0004                     __end_of_WDT_Clearing:	
  3586                           
  3587                           	psect	text13
  3588  0C15                     __ptext13:	
  3589 ;; *************** function _Temp_Main *****************
  3590 ;; Defined at:
  3591 ;;		line 64 in file "../src/OverTemperature_B1.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;		None
  3594 ;; Auto vars:     Size  Location     Type
  3595 ;;		None
  3596 ;; Return value:  Size  Location     Type
  3597 ;;		None               void
  3598 ;; Registers used:
  3599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3600 ;; Tracked objects:
  3601 ;;		On entry : 0/0
  3602 ;;		On exit  : 0/0
  3603 ;;		Unchanged: 0/0
  3604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3605 ;;      Params:         0       0       0       0
  3606 ;;      Locals:         0       0       0       0
  3607 ;;      Temps:          0       0       0       0
  3608 ;;      Totals:         0       0       0       0
  3609 ;;Total ram usage:        0 bytes
  3610 ;; Hardware stack levels used:    1
  3611 ;; Hardware stack levels required when called:    6
  3612 ;; This function calls:
  3613 ;;		_setTemp_Main
  3614 ;; This function is called by:
  3615 ;;		_main
  3616 ;; This function uses a non-reentrant model
  3617 ;;
  3618                           
  3619                           
  3620                           ;psect for function _Temp_Main
  3621  0C15                     _Temp_Main:	
  3622                           
  3623                           ;OverTemperature_B1.c: 66: setTemp_Main();
  3624                           
  3625                           ;incstack = 0
  3626                           ; Regs used in _Temp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3627  0C15  118A  24B2         	fcall	_setTemp_Main
  3628  0C17  0008               	return
  3629  0C18                     __end_of_Temp_Main:	
  3630                           
  3631                           	psect	text14
  3632  04B2                     __ptext14:	
  3633 ;; *************** function _setTemp_Main *****************
  3634 ;; Defined at:
  3635 ;;		line 71 in file "../src/OverTemperature_B1.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;		None
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;		None
  3640 ;; Return value:  Size  Location     Type
  3641 ;;		None               void
  3642 ;; Registers used:
  3643 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3649 ;;      Params:         0       0       0       0
  3650 ;;      Locals:         0       0       0       0
  3651 ;;      Temps:          0       1       0       0
  3652 ;;      Totals:         0       1       0       0
  3653 ;;Total ram usage:        1 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    5
  3656 ;; This function calls:
  3657 ;;		___awdiv
  3658 ;;		_getMain_All_Error_Status
  3659 ;;		_getMain_LightsStatus
  3660 ;;		_setLED
  3661 ;; This function is called by:
  3662 ;;		_Temp_Main
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           
  3667                           ;psect for function _setTemp_Main
  3668  04B2                     _setTemp_Main:	
  3669                           
  3670                           ;OverTemperature_B1.c: 72: if (Temp.Enable == 1) {
  3671                           
  3672                           ;incstack = 0
  3673                           ; Regs used in _setTemp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3674  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  3675  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  3676  04B4  1C36               	btfss	_Temp,0
  3677  04B5  2D44               	goto	l743
  3678                           
  3679                           ;OverTemperature_B1.c: 73: if (Temp.ADtoGO == 0) {
  3680  04B6  1936               	btfsc	_Temp,2
  3681  04B7  2CC9               	goto	l4119
  3682                           
  3683                           ;OverTemperature_B1.c: 74: Temp.Time++;
  3684  04B8  3001               	movlw	1
  3685  04B9  07B7               	addwf	_Temp+1,f
  3686  04BA  1803               	skipnc
  3687  04BB  0AB8               	incf	_Temp+2,f
  3688  04BC  3000               	movlw	0
  3689  04BD  07B8               	addwf	_Temp+2,f
  3690                           
  3691                           ;OverTemperature_B1.c: 75: if (Temp.Time >= 500) {
  3692  04BE  3001               	movlw	1
  3693  04BF  0238               	subwf	_Temp+2,w
  3694  04C0  30F4               	movlw	244
  3695  04C1  1903               	skipnz
  3696  04C2  0237               	subwf	_Temp+1,w
  3697  04C3  1C03               	skipc
  3698  04C4  0008               	return
  3699                           
  3700                           ;OverTemperature_B1.c: 76: Temp.Time = 0;
  3701  04C5  01B7               	clrf	_Temp+1
  3702  04C6  01B8               	clrf	_Temp+2
  3703                           
  3704                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 1;
  3705  04C7  1536               	bsf	_Temp,2
  3706                           
  3707                           ;OverTemperature_B1.c: 78: }
  3708                           ;OverTemperature_B1.c: 79: } else {
  3709  04C8  0008               	return
  3710  04C9                     l4119:	
  3711                           
  3712                           ;OverTemperature_B1.c: 80: if (getMain_All_Error_Status(2) == 0) {
  3713  04C9  3002               	movlw	2
  3714  04CA  158A  27AA  118A   	fcall	_getMain_All_Error_Status
  3715  04CD  3800               	iorlw	0
  3716  04CE  1D03               	skipz
  3717  04CF  0008               	return
  3718                           
  3719                           ;OverTemperature_B1.c: 81: Temp.Time++;
  3720  04D0  3001               	movlw	1
  3721  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  3722  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  3723  04D3  07B7               	addwf	_Temp+1,f
  3724  04D4  1803               	skipnc
  3725  04D5  0AB8               	incf	_Temp+2,f
  3726  04D6  3000               	movlw	0
  3727  04D7  07B8               	addwf	_Temp+2,f
  3728                           
  3729                           ;OverTemperature_B1.c: 82: if (Temp.Time >= 5) {
  3730  04D8  3000               	movlw	0
  3731  04D9  0238               	subwf	_Temp+2,w
  3732  04DA  3005               	movlw	5
  3733  04DB  1903               	skipnz
  3734  04DC  0237               	subwf	_Temp+1,w
  3735  04DD  1C03               	skipc
  3736  04DE  0008               	return
  3737                           
  3738                           ;OverTemperature_B1.c: 83: Temp.Time = 0;
  3739  04DF  01B7               	clrf	_Temp+1
  3740  04E0  01B8               	clrf	_Temp+2
  3741                           
  3742                           ;OverTemperature_B1.c: 84: Temp.ADtoGO = 0;
  3743  04E1  1136               	bcf	_Temp,2
  3744                           
  3745                           ;OverTemperature_B1.c: 85: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3746  04E2  3002               	movlw	2
  3747  04E3  00D5               	movwf	___awdiv@divisor
  3748  04E4  3000               	movlw	0
  3749  04E5  00D6               	movwf	___awdiv@divisor+1
  3750  04E6  083D               	movf	_Temp+7,w
  3751  04E7  073E               	addwf	_Temp+8,w
  3752  04E8  00D7               	movwf	___awdiv@dividend
  3753  04E9  01D8               	clrf	___awdiv@dividend+1
  3754  04EA  0DD8               	rlf	___awdiv@dividend+1,f
  3755  04EB  118A  26F9  118A   	fcall	___awdiv
  3756  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  3757  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  3758  04F0  0855               	movf	?___awdiv,w
  3759  04F1  00DD               	movwf	??_setTemp_Main
  3760  04F2  085D               	movf	??_setTemp_Main,w
  3761  04F3  00BC               	movwf	_Temp+6
  3762                           
  3763                           ;OverTemperature_B1.c: 87: if (getMain_LightsStatus() == 1) {
  3764  04F4  158A  2553  118A   	fcall	_getMain_LightsStatus
  3765  04F7  3A01               	xorlw	1
  3766  04F8  1D03               	skipz
  3767  04F9  2D02               	goto	l4133
  3768                           
  3769                           ;OverTemperature_B1.c: 88: Temp.SafeValue = 170;
  3770  04FA  30AA               	movlw	170
  3771  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  3772  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  3773  04FD  00DD               	movwf	??_setTemp_Main
  3774  04FE  085D               	movf	??_setTemp_Main,w
  3775  04FF  00C0               	movwf	_Temp+10
  3776                           
  3777                           ;OverTemperature_B1.c: 89: Temp.DangerValue = 140;
  3778  0500  308C               	movlw	140
  3779  0501  2D09               	goto	L7
  3780  0502                     l4133:	
  3781                           ;OverTemperature_B1.c: 90: } else {
  3782                           
  3783                           
  3784                           ;OverTemperature_B1.c: 91: Temp.SafeValue = 100;
  3785  0502  3064               	movlw	100
  3786  0503  1283               	bcf	3,5	;RP0=0, select bank0
  3787  0504  1303               	bcf	3,6	;RP1=0, select bank0
  3788  0505  00DD               	movwf	??_setTemp_Main
  3789  0506  085D               	movf	??_setTemp_Main,w
  3790  0507  00C0               	movwf	_Temp+10
  3791                           
  3792                           ;OverTemperature_B1.c: 92: Temp.DangerValue = 70;
  3793  0508  3046               	movlw	70
  3794  0509                     L7:	
  3795  0509  00DD               	movwf	??_setTemp_Main
  3796  050A  085D               	movf	??_setTemp_Main,w
  3797  050B  00C1               	movwf	_Temp+11
  3798                           
  3799                           ;OverTemperature_B1.c: 93: }
  3800                           ;OverTemperature_B1.c: 102: if (Temp.ERROR == 1) {
  3801  050C  1CB6               	btfss	_Temp,1
  3802  050D  2D25               	goto	l4151
  3803                           
  3804                           ;OverTemperature_B1.c: 103: if (Temp.AD >= Temp.SafeValue) {
  3805  050E  0840               	movf	_Temp+10,w
  3806  050F  023C               	subwf	_Temp+6,w
  3807  0510  1C03               	skipc
  3808  0511  2D3C               	goto	l4163
  3809                           
  3810                           ;OverTemperature_B1.c: 104: Temp.Count++;
  3811  0512  3001               	movlw	1
  3812  0513  00DD               	movwf	??_setTemp_Main
  3813  0514  085D               	movf	??_setTemp_Main,w
  3814  0515  07B9               	addwf	_Temp+3,f
  3815                           
  3816                           ;OverTemperature_B1.c: 105: if (Temp.Count >= 3) {
  3817  0516  3003               	movlw	3
  3818  0517  0239               	subwf	_Temp+3,w
  3819  0518  1C03               	skipc
  3820  0519  2D3F               	goto	l755
  3821                           
  3822                           ;OverTemperature_B1.c: 106: Temp.Count = 0;
  3823  051A  01B9               	clrf	_Temp+3
  3824                           
  3825                           ;OverTemperature_B1.c: 108: Temp.ERROR = 0;
  3826  051B  10B6               	bcf	_Temp,1
  3827                           
  3828                           ;OverTemperature_B1.c: 109: setLED(1, 10);
  3829  051C  300A               	movlw	10
  3830  051D  00DD               	movwf	??_setTemp_Main
  3831  051E  085D               	movf	??_setTemp_Main,w
  3832  051F  00D5               	movwf	setLED@command
  3833  0520  3001               	movlw	1
  3834  0521  118A  2756  118A   	fcall	_setLED
  3835                           
  3836                           ;OverTemperature_B1.c: 110: }
  3837                           ;OverTemperature_B1.c: 111: } else {
  3838  0524  2D3F               	goto	l755
  3839  0525                     l4151:	
  3840                           ;OverTemperature_B1.c: 113: }
  3841                           ;OverTemperature_B1.c: 114: } else {
  3842                           
  3843                           ;OverTemperature_B1.c: 112: Temp.Count = 0;
  3844                           
  3845                           
  3846                           ;OverTemperature_B1.c: 115: if (Temp.AD <= Temp.DangerValue) {
  3847  0525  083C               	movf	_Temp+6,w
  3848  0526  0241               	subwf	_Temp+11,w
  3849  0527  1C03               	skipc
  3850  0528  2D3C               	goto	l4163
  3851                           
  3852                           ;OverTemperature_B1.c: 116: Temp.Count++;
  3853  0529  3001               	movlw	1
  3854  052A  00DD               	movwf	??_setTemp_Main
  3855  052B  085D               	movf	??_setTemp_Main,w
  3856  052C  07B9               	addwf	_Temp+3,f
  3857                           
  3858                           ;OverTemperature_B1.c: 117: if (Temp.Count >= 3) {
  3859  052D  3003               	movlw	3
  3860  052E  0239               	subwf	_Temp+3,w
  3861  052F  1C03               	skipc
  3862  0530  2D3F               	goto	l755
  3863                           
  3864                           ;OverTemperature_B1.c: 118: Temp.Count = 0;
  3865  0531  01B9               	clrf	_Temp+3
  3866                           
  3867                           ;OverTemperature_B1.c: 119: Temp.ERROR = 1;
  3868  0532  14B6               	bsf	_Temp,1
  3869                           
  3870                           ;OverTemperature_B1.c: 120: setLED(1, 11);
  3871  0533  300B               	movlw	11
  3872  0534  00DD               	movwf	??_setTemp_Main
  3873  0535  085D               	movf	??_setTemp_Main,w
  3874  0536  00D5               	movwf	setLED@command
  3875  0537  3001               	movlw	1
  3876  0538  118A  2756  118A   	fcall	_setLED
  3877                           
  3878                           ;OverTemperature_B1.c: 122: }
  3879                           ;OverTemperature_B1.c: 123: } else {
  3880  053B  2D3F               	goto	l755
  3881  053C                     l4163:	
  3882                           
  3883                           ;OverTemperature_B1.c: 124: Temp.Count = 0;
  3884  053C  1283               	bcf	3,5	;RP0=0, select bank0
  3885  053D  1303               	bcf	3,6	;RP1=0, select bank0
  3886  053E  01B9               	clrf	_Temp+3
  3887  053F                     l755:	
  3888                           
  3889                           ;OverTemperature_B1.c: 125: }
  3890                           ;OverTemperature_B1.c: 126: }
  3891                           ;OverTemperature_B1.c: 127: ;;
  3892                           ;OverTemperature_B1.c: 128: ;;
  3893                           ;OverTemperature_B1.c: 131: Temp.ADH[0] = 0;
  3894  053F  1283               	bcf	3,5	;RP0=0, select bank0
  3895  0540  1303               	bcf	3,6	;RP1=0, select bank0
  3896  0541  01BD               	clrf	_Temp+7
  3897                           
  3898                           ;OverTemperature_B1.c: 132: Temp.ADH[1] = 0;
  3899  0542  01BE               	clrf	_Temp+8
  3900                           
  3901                           ;OverTemperature_B1.c: 133: }
  3902                           ;OverTemperature_B1.c: 134: }
  3903                           ;OverTemperature_B1.c: 135: }
  3904                           ;OverTemperature_B1.c: 136: } else {
  3905  0543  0008               	return
  3906  0544                     l743:	
  3907                           
  3908                           ;OverTemperature_B1.c: 137: if (myMain.PowerON == 1) {
  3909  0544  1C20               	btfss	_myMain,0
  3910  0545  0008               	return
  3911                           
  3912                           ;OverTemperature_B1.c: 138: Temp.Enable = 1;
  3913  0546  1436               	bsf	_Temp,0
  3914  0547  0008               	return
  3915  0548                     __end_of_setTemp_Main:	
  3916                           
  3917                           	psect	text15
  3918  06F9                     __ptext15:	
  3919 ;; *************** function ___awdiv *****************
  3920 ;; Defined at:
  3921 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;  divisor         2    0[BANK0 ] int 
  3924 ;;  dividend        2    2[BANK0 ] int 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;  quotient        2    6[BANK0 ] int 
  3927 ;;  sign            1    5[BANK0 ] unsigned char 
  3928 ;;  counter         1    4[BANK0 ] unsigned char 
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  2    0[BANK0 ] int 
  3931 ;; Registers used:
  3932 ;;		wreg, status,2, status,0
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3938 ;;      Params:         0       4       0       0
  3939 ;;      Locals:         0       4       0       0
  3940 ;;      Temps:          1       0       0       0
  3941 ;;      Totals:         1       8       0       0
  3942 ;;Total ram usage:        9 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    2
  3945 ;; This function calls:
  3946 ;;		Nothing
  3947 ;; This function is called by:
  3948 ;;		_setTemp_Main
  3949 ;;		_getPIR_AD
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           
  3954                           ;psect for function ___awdiv
  3955  06F9                     ___awdiv:	
  3956                           
  3957                           ;incstack = 0
  3958                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3959  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  3960  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  3961  06FB  01DA               	clrf	___awdiv@sign
  3962  06FC  1FD6               	btfss	___awdiv@divisor+1,7
  3963  06FD  2F05               	goto	l4009
  3964  06FE  09D5               	comf	___awdiv@divisor,f
  3965  06FF  09D6               	comf	___awdiv@divisor+1,f
  3966  0700  0AD5               	incf	___awdiv@divisor,f
  3967  0701  1903               	skipnz
  3968  0702  0AD6               	incf	___awdiv@divisor+1,f
  3969  0703  01DA               	clrf	___awdiv@sign
  3970  0704  0ADA               	incf	___awdiv@sign,f
  3971  0705                     l4009:	
  3972  0705  1FD8               	btfss	___awdiv@dividend+1,7
  3973  0706  2F10               	goto	l4015
  3974  0707  09D7               	comf	___awdiv@dividend,f
  3975  0708  09D8               	comf	___awdiv@dividend+1,f
  3976  0709  0AD7               	incf	___awdiv@dividend,f
  3977  070A  1903               	skipnz
  3978  070B  0AD8               	incf	___awdiv@dividend+1,f
  3979  070C  3001               	movlw	1
  3980  070D  00F4               	movwf	??___awdiv
  3981  070E  0874               	movf	??___awdiv,w
  3982  070F  06DA               	xorwf	___awdiv@sign,f
  3983  0710                     l4015:	
  3984  0710  01DB               	clrf	___awdiv@quotient
  3985  0711  01DC               	clrf	___awdiv@quotient+1
  3986  0712  0856               	movf	___awdiv@divisor+1,w
  3987  0713  0455               	iorwf	___awdiv@divisor,w
  3988  0714  1903               	skipnz
  3989  0715  2F47               	goto	l4037
  3990  0716  01D9               	clrf	___awdiv@counter
  3991  0717  0AD9               	incf	___awdiv@counter,f
  3992  0718                     l4025:	
  3993  0718  1BD6               	btfsc	___awdiv@divisor+1,7
  3994  0719  2F26               	goto	l4027
  3995  071A  3001               	movlw	1
  3996  071B                     u4285:	
  3997  071B  1003               	clrc
  3998  071C  0DD5               	rlf	___awdiv@divisor,f
  3999  071D  0DD6               	rlf	___awdiv@divisor+1,f
  4000  071E  3EFF               	addlw	-1
  4001  071F  1D03               	skipz
  4002  0720  2F1B               	goto	u4285
  4003  0721  3001               	movlw	1
  4004  0722  00F4               	movwf	??___awdiv
  4005  0723  0874               	movf	??___awdiv,w
  4006  0724  07D9               	addwf	___awdiv@counter,f
  4007  0725  2F18               	goto	l4025
  4008  0726                     l4027:	
  4009  0726  3001               	movlw	1
  4010  0727                     u4305:	
  4011  0727  1003               	clrc
  4012  0728  0DDB               	rlf	___awdiv@quotient,f
  4013  0729  0DDC               	rlf	___awdiv@quotient+1,f
  4014  072A  3EFF               	addlw	-1
  4015  072B  1D03               	skipz
  4016  072C  2F27               	goto	u4305
  4017  072D  0856               	movf	___awdiv@divisor+1,w
  4018  072E  0258               	subwf	___awdiv@dividend+1,w
  4019  072F  1D03               	skipz
  4020  0730  2F33               	goto	u4315
  4021  0731  0855               	movf	___awdiv@divisor,w
  4022  0732  0257               	subwf	___awdiv@dividend,w
  4023  0733                     u4315:	
  4024  0733  1C03               	skipc
  4025  0734  2F3C               	goto	l4033
  4026  0735  0855               	movf	___awdiv@divisor,w
  4027  0736  02D7               	subwf	___awdiv@dividend,f
  4028  0737  0856               	movf	___awdiv@divisor+1,w
  4029  0738  1C03               	skipc
  4030  0739  03D8               	decf	___awdiv@dividend+1,f
  4031  073A  02D8               	subwf	___awdiv@dividend+1,f
  4032  073B  145B               	bsf	___awdiv@quotient,0
  4033  073C                     l4033:	
  4034  073C  3001               	movlw	1
  4035  073D                     u4325:	
  4036  073D  1003               	clrc
  4037  073E  0CD6               	rrf	___awdiv@divisor+1,f
  4038  073F  0CD5               	rrf	___awdiv@divisor,f
  4039  0740  3EFF               	addlw	-1
  4040  0741  1D03               	skipz
  4041  0742  2F3D               	goto	u4325
  4042  0743  3001               	movlw	1
  4043  0744  02D9               	subwf	___awdiv@counter,f
  4044  0745  1D03               	btfss	3,2
  4045  0746  2F26               	goto	l4027
  4046  0747                     l4037:	
  4047  0747  085A               	movf	___awdiv@sign,w
  4048  0748  1903               	btfsc	3,2
  4049  0749  2F4F               	goto	l4041
  4050  074A  09DB               	comf	___awdiv@quotient,f
  4051  074B  09DC               	comf	___awdiv@quotient+1,f
  4052  074C  0ADB               	incf	___awdiv@quotient,f
  4053  074D  1903               	skipnz
  4054  074E  0ADC               	incf	___awdiv@quotient+1,f
  4055  074F                     l4041:	
  4056  074F  085C               	movf	___awdiv@quotient+1,w
  4057  0750  01D6               	clrf	?___awdiv+1
  4058  0751  07D6               	addwf	?___awdiv+1,f
  4059  0752  085B               	movf	___awdiv@quotient,w
  4060  0753  01D5               	clrf	?___awdiv
  4061  0754  07D5               	addwf	?___awdiv,f
  4062  0755  0008               	return
  4063  0756                     __end_of___awdiv:	
  4064                           
  4065                           	psect	text16
  4066  0C12                     __ptext16:	
  4067 ;; *************** function _Temp_Initialization *****************
  4068 ;; Defined at:
  4069 ;;		line 9 in file "../src/OverTemperature_B1.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;		None               void
  4076 ;; Registers used:
  4077 ;;		status,2, status,0, pclath, cstack
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4083 ;;      Params:         0       0       0       0
  4084 ;;      Locals:         0       0       0       0
  4085 ;;      Temps:          0       0       0       0
  4086 ;;      Totals:         0       0       0       0
  4087 ;;Total ram usage:        0 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    3
  4090 ;; This function calls:
  4091 ;;		_setTemp_Initialization
  4092 ;; This function is called by:
  4093 ;;		_main
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           
  4098                           ;psect for function _Temp_Initialization
  4099  0C12                     _Temp_Initialization:	
  4100                           
  4101                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  4102                           
  4103                           ;incstack = 0
  4104                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4105  0C12  158A  2424         	fcall	_setTemp_Initialization
  4106  0C14  0008               	return
  4107  0C15                     __end_of_Temp_Initialization:	
  4108                           
  4109                           	psect	text17
  4110  0C24                     __ptext17:	
  4111 ;; *************** function _setTemp_Initialization *****************
  4112 ;; Defined at:
  4113 ;;		line 59 in file "../src/OverTemperature_B1.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;		None
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;		None               void
  4120 ;; Registers used:
  4121 ;;		None
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4127 ;;      Params:         0       0       0       0
  4128 ;;      Locals:         0       0       0       0
  4129 ;;      Temps:          0       0       0       0
  4130 ;;      Totals:         0       0       0       0
  4131 ;;Total ram usage:        0 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:    2
  4134 ;; This function calls:
  4135 ;;		Nothing
  4136 ;; This function is called by:
  4137 ;;		_Temp_Initialization
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           
  4142                           ;psect for function _setTemp_Initialization
  4143  0C24                     _setTemp_Initialization:	
  4144                           
  4145                           ;OverTemperature_B1.c: 60: Temp.Safe = 1;
  4146                           
  4147                           ;incstack = 0
  4148                           ; Regs used in _setTemp_Initialization: []
  4149  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  4150  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  4151  0C26  1636               	bsf	_Temp,4
  4152  0C27  0008               	return
  4153  0C28                     __end_of_setTemp_Initialization:	
  4154                           
  4155                           	psect	text18
  4156  0C0F                     __ptext18:	
  4157 ;; *************** function _SYSC_Main *****************
  4158 ;; Defined at:
  4159 ;;		line 17 in file "../src/SYSC_B1.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;		None
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;		None
  4164 ;; Return value:  Size  Location     Type
  4165 ;;		None               void
  4166 ;; Registers used:
  4167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4173 ;;      Params:         0       0       0       0
  4174 ;;      Locals:         0       0       0       0
  4175 ;;      Temps:          0       0       0       0
  4176 ;;      Totals:         0       0       0       0
  4177 ;;Total ram usage:        0 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    5
  4180 ;; This function calls:
  4181 ;;		_setSYSC_Main
  4182 ;; This function is called by:
  4183 ;;		_main
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           
  4188                           ;psect for function _SYSC_Main
  4189  0C0F                     _SYSC_Main:	
  4190                           
  4191                           ;SYSC_B1.c: 19: setSYSC_Main();
  4192                           
  4193                           ;incstack = 0
  4194                           ; Regs used in _SYSC_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4195  0C0F  158A  2709         	fcall	_setSYSC_Main
  4196  0C11  0008               	return
  4197  0C12                     __end_of_SYSC_Main:	
  4198                           
  4199                           	psect	text19
  4200  0F09                     __ptext19:	
  4201 ;; *************** function _setSYSC_Main *****************
  4202 ;; Defined at:
  4203 ;;		line 23 in file "../src/SYSC_B1.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;		None               void
  4210 ;; Registers used:
  4211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4217 ;;      Params:         0       0       0       0
  4218 ;;      Locals:         0       0       0       0
  4219 ;;      Temps:          0       1       0       0
  4220 ;;      Totals:         0       1       0       0
  4221 ;;Total ram usage:        1 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    4
  4224 ;; This function calls:
  4225 ;;		_getMain_All_Error_Status
  4226 ;;		_setLED
  4227 ;; This function is called by:
  4228 ;;		_SYSC_Main
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _setSYSC_Main
  4234  0F09                     _setSYSC_Main:	
  4235                           
  4236                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4237                           
  4238                           ;incstack = 0
  4239                           ; Regs used in _setSYSC_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4240  0F09  1283               	bcf	3,5	;RP0=0, select bank0
  4241  0F0A  1303               	bcf	3,6	;RP1=0, select bank0
  4242  0F0B  1C28               	btfss	_SYSC,0
  4243  0F0C  0008               	return
  4244                           
  4245                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4246  0F0D  18A8               	btfsc	_SYSC,1
  4247  0F0E  2F27               	goto	l4179
  4248                           
  4249                           ;SYSC_B1.c: 27: SYSC.Timer++;
  4250  0F0F  3001               	movlw	1
  4251  0F10  07A9               	addwf	_SYSC+1,f
  4252  0F11  1803               	skipnc
  4253  0F12  0AAA               	incf	_SYSC+2,f
  4254  0F13  3000               	movlw	0
  4255  0F14  07AA               	addwf	_SYSC+2,f
  4256                           
  4257                           ;SYSC_B1.c: 28: if (SYSC.Timer >= 16)
  4258  0F15  3000               	movlw	0
  4259  0F16  022A               	subwf	_SYSC+2,w
  4260  0F17  3010               	movlw	16
  4261  0F18  1903               	skipnz
  4262  0F19  0229               	subwf	_SYSC+1,w
  4263  0F1A  1C03               	skipc
  4264  0F1B  0008               	return
  4265                           
  4266                           ;SYSC_B1.c: 29: {
  4267                           ;SYSC_B1.c: 30: SYSC.Timer = 0;
  4268  0F1C  01A9               	clrf	_SYSC+1
  4269  0F1D  01AA               	clrf	_SYSC+2
  4270                           
  4271                           ;SYSC_B1.c: 31: SYSC.ERROR = 1;
  4272  0F1E  14A8               	bsf	_SYSC,1
  4273                           
  4274                           ;SYSC_B1.c: 32: setLED(1, 11);
  4275  0F1F  300B               	movlw	11
  4276  0F20  00DD               	movwf	??_setSYSC_Main
  4277  0F21  085D               	movf	??_setSYSC_Main,w
  4278  0F22  00D5               	movwf	setLED@command
  4279  0F23  3001               	movlw	1
  4280  0F24  118A  2756         	fcall	_setLED
  4281                           
  4282                           ;SYSC_B1.c: 33: }
  4283                           ;SYSC_B1.c: 34: } else {
  4284  0F26  0008               	return
  4285  0F27                     l4179:	
  4286                           
  4287                           ;SYSC_B1.c: 35: if (getMain_All_Error_Status(1) == 0) {
  4288  0F27  3001               	movlw	1
  4289  0F28  158A  27AA  158A   	fcall	_getMain_All_Error_Status
  4290  0F2B  3800               	iorlw	0
  4291  0F2C  1D03               	skipz
  4292  0F2D  0008               	return
  4293                           
  4294                           ;SYSC_B1.c: 36: SYSC.Timer++;
  4295  0F2E  3001               	movlw	1
  4296  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  4297  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  4298  0F31  07A9               	addwf	_SYSC+1,f
  4299  0F32  1803               	skipnc
  4300  0F33  0AAA               	incf	_SYSC+2,f
  4301  0F34  3000               	movlw	0
  4302  0F35  07AA               	addwf	_SYSC+2,f
  4303                           
  4304                           ;SYSC_B1.c: 37: if (SYSC.Timer == 50) {
  4305  0F36  3032               	movlw	50
  4306  0F37  0629               	xorwf	_SYSC+1,w
  4307  0F38  042A               	iorwf	_SYSC+2,w
  4308  0F39  1D03               	skipz
  4309  0F3A  2F40               	goto	l4185
  4310                           
  4311                           ;SYSC_B1.c: 38: SYSC.Timer = 0;
  4312  0F3B  01A9               	clrf	_SYSC+1
  4313  0F3C  01AA               	clrf	_SYSC+2
  4314                           
  4315                           ;SYSC_B1.c: 39: SYSC.Counter = 0;
  4316  0F3D  01AB               	clrf	_SYSC+3
  4317  0F3E  01AC               	clrf	_SYSC+4
  4318                           
  4319                           ;SYSC_B1.c: 40: } else {
  4320  0F3F  0008               	return
  4321  0F40                     l4185:	
  4322                           
  4323                           ;SYSC_B1.c: 41: SYSC.Counter++;
  4324  0F40  3001               	movlw	1
  4325  0F41  07AB               	addwf	_SYSC+3,f
  4326  0F42  1803               	skipnc
  4327  0F43  0AAC               	incf	_SYSC+4,f
  4328  0F44  3000               	movlw	0
  4329  0F45  07AC               	addwf	_SYSC+4,f
  4330                           
  4331                           ;SYSC_B1.c: 42: if (SYSC.Counter == 1000) {
  4332  0F46  3003               	movlw	3
  4333  0F47  062C               	xorwf	_SYSC+4,w
  4334  0F48  1D03               	skipz
  4335  0F49  2F4C               	goto	u4625
  4336  0F4A  30E8               	movlw	232
  4337  0F4B  062B               	xorwf	_SYSC+3,w
  4338  0F4C                     u4625:	
  4339  0F4C  1D03               	skipz
  4340  0F4D  0008               	return
  4341                           
  4342                           ;SYSC_B1.c: 43: SYSC.Counter = 0;
  4343  0F4E  01AB               	clrf	_SYSC+3
  4344  0F4F  01AC               	clrf	_SYSC+4
  4345                           
  4346                           ;SYSC_B1.c: 44: SYSC.ERROR = 0;
  4347  0F50  10A8               	bcf	_SYSC,1
  4348                           
  4349                           ;SYSC_B1.c: 45: setLED(1, 10);
  4350  0F51  300A               	movlw	10
  4351  0F52  00DD               	movwf	??_setSYSC_Main
  4352  0F53  085D               	movf	??_setSYSC_Main,w
  4353  0F54  00D5               	movwf	setLED@command
  4354  0F55  3001               	movlw	1
  4355  0F56  118A  2756         	fcall	_setLED
  4356  0F58  0008               	return
  4357  0F59                     __end_of_setSYSC_Main:	
  4358                           
  4359                           	psect	text20
  4360  0C0C                     __ptext20:	
  4361 ;; *************** function _SYSC_Initialization *****************
  4362 ;; Defined at:
  4363 ;;		line 7 in file "../src/SYSC_B1.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;		None
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;		None
  4368 ;; Return value:  Size  Location     Type
  4369 ;;		None               void
  4370 ;; Registers used:
  4371 ;;		status,2, status,0, pclath, cstack
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4377 ;;      Params:         0       0       0       0
  4378 ;;      Locals:         0       0       0       0
  4379 ;;      Temps:          0       0       0       0
  4380 ;;      Totals:         0       0       0       0
  4381 ;;Total ram usage:        0 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; Hardware stack levels required when called:    3
  4384 ;; This function calls:
  4385 ;;		_setSYSC_Initialization
  4386 ;; This function is called by:
  4387 ;;		_main
  4388 ;; This function uses a non-reentrant model
  4389 ;;
  4390                           
  4391                           
  4392                           ;psect for function _SYSC_Initialization
  4393  0C0C                     _SYSC_Initialization:	
  4394                           
  4395                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4396                           
  4397                           ;incstack = 0
  4398                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4399  0C0C  158A  2420         	fcall	_setSYSC_Initialization
  4400  0C0E  0008               	return
  4401  0C0F                     __end_of_SYSC_Initialization:	
  4402                           
  4403                           	psect	text21
  4404  0C20                     __ptext21:	
  4405 ;; *************** function _setSYSC_Initialization *****************
  4406 ;; Defined at:
  4407 ;;		line 13 in file "../src/SYSC_B1.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;		None
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;		None
  4412 ;; Return value:  Size  Location     Type
  4413 ;;		None               void
  4414 ;; Registers used:
  4415 ;;		None
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4421 ;;      Params:         0       0       0       0
  4422 ;;      Locals:         0       0       0       0
  4423 ;;      Temps:          0       0       0       0
  4424 ;;      Totals:         0       0       0       0
  4425 ;;Total ram usage:        0 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    2
  4428 ;; This function calls:
  4429 ;;		Nothing
  4430 ;; This function is called by:
  4431 ;;		_SYSC_Initialization
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           
  4436                           ;psect for function _setSYSC_Initialization
  4437  0C20                     _setSYSC_Initialization:	
  4438                           
  4439                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4440                           
  4441                           ;incstack = 0
  4442                           ; Regs used in _setSYSC_Initialization: []
  4443  0C20  1283               	bcf	3,5	;RP0=0, select bank0
  4444  0C21  1303               	bcf	3,6	;RP1=0, select bank0
  4445  0C22  1428               	bsf	_SYSC,0
  4446  0C23  0008               	return
  4447  0C24                     __end_of_setSYSC_Initialization:	
  4448                           
  4449                           	psect	text22
  4450  0026                     __ptext22:	
  4451 ;; *************** function _PIR_Main *****************
  4452 ;; Defined at:
  4453 ;;		line 13 in file "../src/PIR_B1.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;		None
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  error           1   15[BANK0 ] unsigned char 
  4458 ;; Return value:  Size  Location     Type
  4459 ;;		None               void
  4460 ;; Registers used:
  4461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4467 ;;      Params:         0       0       0       0
  4468 ;;      Locals:         0       3       0       0
  4469 ;;      Temps:          0       5       0       0
  4470 ;;      Totals:         0       8       0       0
  4471 ;;Total ram usage:        8 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:    5
  4474 ;; This function calls:
  4475 ;;		_getLights_Status
  4476 ;;		_getMain_All_Error_Status
  4477 ;;		_getMain_Exception
  4478 ;;		_setLED
  4479 ;;		_setLights_Trigger
  4480 ;; This function is called by:
  4481 ;;		_main
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           
  4486                           ;psect for function _PIR_Main
  4487  0026                     _PIR_Main:	
  4488                           
  4489                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4493  0026  3000               	movlw	0
  4494  0027  158A  27AA  118A   	fcall	_getMain_All_Error_Status
  4495  002A  1283               	bcf	3,5	;RP0=0, select bank0
  4496  002B  1303               	bcf	3,6	;RP1=0, select bank0
  4497  002C  00DD               	movwf	??_PIR_Main
  4498  002D  085D               	movf	??_PIR_Main,w
  4499  002E  00E4               	movwf	PIR_Main@error
  4500                           
  4501                           ;PIR_B1.c: 15: if (_PIR.Enable == 1) {
  4502  002F  1683               	bsf	3,5	;RP0=1, select bank1
  4503  0030  1303               	bcf	3,6	;RP1=0, select bank1
  4504  0031  1C20               	btfss	__PIR^(0+128),0
  4505  0032  2A05               	goto	l815
  4506                           
  4507                           ;PIR_B1.c: 17: if (error == 0) {
  4508  0033  1283               	bcf	3,5	;RP0=0, select bank0
  4509  0034  1303               	bcf	3,6	;RP1=0, select bank0
  4510  0035  08E4               	movf	PIR_Main@error,f
  4511  0036  1D03               	skipz
  4512  0037  2852               	goto	l816
  4513                           
  4514                           ;PIR_B1.c: 19: if (_PIR.Detect == 0) {
  4515  0038  1683               	bsf	3,5	;RP0=1, select bank1
  4516  0039  1303               	bcf	3,6	;RP1=0, select bank1
  4517  003A  1A20               	btfsc	__PIR^(0+128),4
  4518  003B  2884               	goto	l4643
  4519                           
  4520                           ;PIR_B1.c: 20: _PIR.Detect = 1;
  4521  003C  1620               	bsf	__PIR^(0+128),4
  4522                           
  4523                           ;PIR_B1.c: 21: _PIR.Available = 1;
  4524  003D  17A0               	bsf	__PIR^(0+128),7
  4525                           
  4526                           ;PIR_B1.c: 22: setLED(1, 0);
  4527  003E  1283               	bcf	3,5	;RP0=0, select bank0
  4528  003F  1303               	bcf	3,6	;RP1=0, select bank0
  4529  0040  01D5               	clrf	setLED@command
  4530  0041  3001               	movlw	1
  4531  0042  118A  2756  118A   	fcall	_setLED
  4532                           
  4533                           ;PIR_B1.c: 23: if (_PIR.OK == 0) {
  4534  0045  1683               	bsf	3,5	;RP0=1, select bank1
  4535  0046  1303               	bcf	3,6	;RP1=0, select bank1
  4536  0047  19A0               	btfsc	__PIR^(0+128),3
  4537  0048  2884               	goto	l4643
  4538                           
  4539                           ;PIR_B1.c: 24: setLED(2, 1);
  4540  0049  1283               	bcf	3,5	;RP0=0, select bank0
  4541  004A  1303               	bcf	3,6	;RP1=0, select bank0
  4542  004B  01D5               	clrf	setLED@command
  4543  004C  0AD5               	incf	setLED@command,f
  4544  004D  3002               	movlw	2
  4545  004E  118A  2756  118A   	fcall	_setLED
  4546                           
  4547                           ;PIR_B1.c: 25: }
  4548                           ;PIR_B1.c: 26: }
  4549                           ;PIR_B1.c: 27: } else {
  4550  0051  2884               	goto	l4643
  4551  0052                     l816:	
  4552                           
  4553                           ;PIR_B1.c: 28: if (_PIR.Detect == 1) {
  4554  0052  1683               	bsf	3,5	;RP0=1, select bank1
  4555  0053  1303               	bcf	3,6	;RP1=0, select bank1
  4556  0054  1E20               	btfss	__PIR^(0+128),4
  4557  0055  2884               	goto	l4643
  4558                           
  4559                           ;PIR_B1.c: 29: getMain_Exception(error);
  4560  0056  1283               	bcf	3,5	;RP0=0, select bank0
  4561  0057  1303               	bcf	3,6	;RP1=0, select bank0
  4562  0058  0864               	movf	PIR_Main@error,w
  4563  0059  158A  2629  118A   	fcall	_getMain_Exception
  4564                           
  4565                           ;PIR_B1.c: 31: _PIR.Detect = 0;
  4566  005C  1683               	bsf	3,5	;RP0=1, select bank1
  4567  005D  1303               	bcf	3,6	;RP1=0, select bank1
  4568  005E  1220               	bcf	__PIR^(0+128),4
  4569                           
  4570                           ;PIR_B1.c: 32: _PIR.Available = 0;
  4571  005F  13A0               	bcf	__PIR^(0+128),7
  4572                           
  4573                           ;PIR_B1.c: 33: _PIR.Status = 0;
  4574  0060  1320               	bcf	__PIR^(0+128),6
  4575                           
  4576                           ;PIR_B1.c: 36: _PIR.Time = 0;
  4577  0061  01A5               	clrf	(__PIR^(0+128)+5)
  4578                           
  4579                           ;PIR_B1.c: 37: _PIR.RangeTime1 = 0;
  4580  0062  01CA               	clrf	(__PIR^(0+128)+42)
  4581                           
  4582                           ;PIR_B1.c: 38: _PIR.RangeValue = 15;
  4583  0063  300F               	movlw	15
  4584  0064  1283               	bcf	3,5	;RP0=0, select bank0
  4585  0065  1303               	bcf	3,6	;RP1=0, select bank0
  4586  0066  00DD               	movwf	??_PIR_Main
  4587  0067  085D               	movf	??_PIR_Main,w
  4588  0068  1683               	bsf	3,5	;RP0=1, select bank1
  4589  0069  1303               	bcf	3,6	;RP1=0, select bank1
  4590  006A  00CC               	movwf	(__PIR^(0+128)+44)
  4591                           
  4592                           ;PIR_B1.c: 39: _PIR.RangeCount = 0;
  4593  006B  01CB               	clrf	(__PIR^(0+128)+43)
  4594                           
  4595                           ;PIR_B1.c: 41: setLED(1, 1);
  4596  006C  1283               	bcf	3,5	;RP0=0, select bank0
  4597  006D  1303               	bcf	3,6	;RP1=0, select bank0
  4598  006E  01D5               	clrf	setLED@command
  4599  006F  0AD5               	incf	setLED@command,f
  4600  0070  3001               	movlw	1
  4601  0071  118A  2756  118A   	fcall	_setLED
  4602                           
  4603                           ;PIR_B1.c: 42: setLED(2, 0);
  4604  0074  1283               	bcf	3,5	;RP0=0, select bank0
  4605  0075  1303               	bcf	3,6	;RP1=0, select bank0
  4606  0076  01D5               	clrf	setLED@command
  4607  0077  3002               	movlw	2
  4608  0078  118A  2756  118A   	fcall	_setLED
  4609                           
  4610                           ;PIR_B1.c: 44: if (_PIR.OK == 1) {
  4611  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4612  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4613  007D  1DA0               	btfss	__PIR^(0+128),3
  4614  007E  2881               	goto	l821
  4615                           
  4616                           ;PIR_B1.c: 45: _PIR.Count = 0;
  4617  007F  01C1               	clrf	(__PIR^(0+128)+33)
  4618  0080  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4619  0081                     l821:	
  4620                           
  4621                           ;PIR_B1.c: 46: }
  4622                           ;PIR_B1.c: 47: _PIR.CloseTimeSeconds = 0;
  4623  0081  01C6               	clrf	(__PIR^(0+128)+38)
  4624                           
  4625                           ;PIR_B1.c: 48: _PIR.CloseTimeMinutes = 0;
  4626  0082  01C4               	clrf	(__PIR^(0+128)+36)
  4627  0083  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4628  0084                     l4643:	
  4629                           
  4630                           ;PIR_B1.c: 49: }
  4631                           ;PIR_B1.c: 50: }
  4632                           ;PIR_B1.c: 52: if (_PIR.ADtoGO == 0) {
  4633  0084  1683               	bsf	3,5	;RP0=1, select bank1
  4634  0085  1303               	bcf	3,6	;RP1=0, select bank1
  4635  0086  18A0               	btfsc	__PIR^(0+128),1
  4636  0087  2897               	goto	l822
  4637                           
  4638                           ;PIR_B1.c: 53: _PIR.Time++;
  4639  0088  3001               	movlw	1
  4640  0089  1283               	bcf	3,5	;RP0=0, select bank0
  4641  008A  1303               	bcf	3,6	;RP1=0, select bank0
  4642  008B  00DD               	movwf	??_PIR_Main
  4643  008C  085D               	movf	??_PIR_Main,w
  4644  008D  1683               	bsf	3,5	;RP0=1, select bank1
  4645  008E  1303               	bcf	3,6	;RP1=0, select bank1
  4646  008F  07A5               	addwf	(__PIR^(0+128)+5),f
  4647                           
  4648                           ;PIR_B1.c: 54: if (_PIR.Time == 10) {
  4649  0090  0825               	movf	(__PIR^(0+128)+5),w
  4650  0091  3A0A               	xorlw	10
  4651  0092  1D03               	skipz
  4652  0093  29B9               	goto	l4727
  4653                           
  4654                           ;PIR_B1.c: 55: _PIR.Time = 0;
  4655  0094  01A5               	clrf	(__PIR^(0+128)+5)
  4656                           
  4657                           ;PIR_B1.c: 56: _PIR.ADtoGO = 1;
  4658  0095  14A0               	bsf	__PIR^(0+128),1
  4659                           
  4660                           ;PIR_B1.c: 57: }
  4661                           ;PIR_B1.c: 58: } else {
  4662  0096  29B9               	goto	l4727
  4663  0097                     l822:	
  4664                           
  4665                           ;PIR_B1.c: 59: if (_PIR.GO == 1) {
  4666  0097  1D20               	btfss	__PIR^(0+128),2
  4667  0098  29B9               	goto	l4727
  4668                           
  4669                           ;PIR_B1.c: 60: _PIR.GO = 0;
  4670  0099  1120               	bcf	__PIR^(0+128),2
  4671                           
  4672                           ;PIR_B1.c: 61: if (_PIR.Available == 1) {
  4673  009A  1BA0               	btfsc	__PIR^(0+128),7
  4674                           
  4675                           ;PIR_B1.c: 62: if (_PIR.OK == 1) {
  4676  009B  1DA0               	btfss	__PIR^(0+128),3
  4677  009C  29B9               	goto	l4727
  4678                           
  4679                           ;PIR_B1.c: 64: _PIR.Time++;
  4680  009D  3001               	movlw	1
  4681  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4682  009F  1303               	bcf	3,6	;RP1=0, select bank0
  4683  00A0  00DD               	movwf	??_PIR_Main
  4684  00A1  085D               	movf	??_PIR_Main,w
  4685  00A2  1683               	bsf	3,5	;RP0=1, select bank1
  4686  00A3  1303               	bcf	3,6	;RP1=0, select bank1
  4687  00A4  07A5               	addwf	(__PIR^(0+128)+5),f
  4688                           
  4689                           ;PIR_B1.c: 65: if (_PIR.Time == 60) {
  4690  00A5  0825               	movf	(__PIR^(0+128)+5),w
  4691  00A6  3A3C               	xorlw	60
  4692  00A7  1D03               	skipz
  4693  00A8  28DD               	goto	l4693
  4694                           
  4695                           ;PIR_B1.c: 66: _PIR.Time = 0;
  4696  00A9  01A5               	clrf	(__PIR^(0+128)+5)
  4697                           
  4698                           ;PIR_B1.c: 67: if (_PIR.RangeCount >= 90) {
  4699  00AA  305A               	movlw	90
  4700  00AB  024B               	subwf	(__PIR^(0+128)+43),w
  4701  00AC  1C03               	skipc
  4702  00AD  28B9               	goto	l4675
  4703                           
  4704                           ;PIR_B1.c: 68: _PIR.RangeTime1 = 0;
  4705  00AE  01CA               	clrf	(__PIR^(0+128)+42)
  4706                           
  4707                           ;PIR_B1.c: 70: if (_PIR.RangeValue == 15) {
  4708  00AF  084C               	movf	(__PIR^(0+128)+44),w
  4709  00B0  3A0F               	xorlw	15
  4710  00B1  1903               	btfsc	3,2
  4711  00B2  28CE               	goto	L14
  4712                           
  4713                           ;PIR_B1.c: 72: } else if (_PIR.RangeValue == 25) {
  4714                           
  4715                           ;PIR_B1.c: 71: _PIR.RangeValue = 25;
  4716  00B3  084C               	movf	(__PIR^(0+128)+44),w
  4717  00B4  3A19               	xorlw	25
  4718  00B5  1D03               	skipz
  4719  00B6  28DC               	goto	l4691
  4720                           
  4721                           ;PIR_B1.c: 73: _PIR.RangeValue = 35;
  4722  00B7  3023               	movlw	35
  4723  00B8  28D5               	goto	L10
  4724  00B9                     l4675:	
  4725                           ;PIR_B1.c: 74: }
  4726                           ;PIR_B1.c: 75: } else if (_PIR.RangeCount <= 10) {
  4727                           
  4728  00B9  300B               	movlw	11
  4729  00BA  024B               	subwf	(__PIR^(0+128)+43),w
  4730  00BB  1803               	skipnc
  4731  00BC  28DC               	goto	l4691
  4732                           
  4733                           ;PIR_B1.c: 76: _PIR.RangeTime1++;
  4734  00BD  3001               	movlw	1
  4735  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  4736  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  4737  00C0  00DD               	movwf	??_PIR_Main
  4738  00C1  085D               	movf	??_PIR_Main,w
  4739  00C2  1683               	bsf	3,5	;RP0=1, select bank1
  4740  00C3  1303               	bcf	3,6	;RP1=0, select bank1
  4741  00C4  07CA               	addwf	(__PIR^(0+128)+42),f
  4742                           
  4743                           ;PIR_B1.c: 77: if (_PIR.RangeTime1 == 2) {
  4744  00C5  084A               	movf	(__PIR^(0+128)+42),w
  4745  00C6  3A02               	xorlw	2
  4746  00C7  1D03               	skipz
  4747  00C8  28DC               	goto	l4691
  4748                           
  4749                           ;PIR_B1.c: 78: _PIR.RangeTime1 = 0;
  4750  00C9  01CA               	clrf	(__PIR^(0+128)+42)
  4751                           
  4752                           ;PIR_B1.c: 80: if (_PIR.RangeValue == 35) {
  4753  00CA  084C               	movf	(__PIR^(0+128)+44),w
  4754  00CB  3A23               	xorlw	35
  4755  00CC  1D03               	skipz
  4756  00CD  28D0               	goto	l4687
  4757  00CE                     L14:	
  4758                           
  4759                           ;PIR_B1.c: 81: _PIR.RangeValue = 25;
  4760  00CE  3019               	movlw	25
  4761  00CF  28D5               	goto	L10
  4762  00D0                     l4687:	
  4763                           ;PIR_B1.c: 82: } else if (_PIR.RangeValue == 25) {
  4764                           
  4765  00D0  084C               	movf	(__PIR^(0+128)+44),w
  4766  00D1  3A19               	xorlw	25
  4767  00D2  1D03               	skipz
  4768  00D3  28DC               	goto	l4691
  4769                           
  4770                           ;PIR_B1.c: 83: _PIR.RangeValue = 15;
  4771  00D4  300F               	movlw	15
  4772  00D5                     L10:	
  4773  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  4774  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  4775  00D7  00DD               	movwf	??_PIR_Main
  4776  00D8  085D               	movf	??_PIR_Main,w
  4777  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  4778  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  4779  00DB  00CC               	movwf	(__PIR^(0+128)+44)
  4780  00DC                     l4691:	
  4781                           
  4782                           ;PIR_B1.c: 84: }
  4783                           ;PIR_B1.c: 85: }
  4784                           ;PIR_B1.c: 86: }
  4785                           ;PIR_B1.c: 87: _PIR.RangeCount = 0;
  4786  00DC  01CB               	clrf	(__PIR^(0+128)+43)
  4787  00DD                     l4693:	
  4788                           
  4789                           ;PIR_B1.c: 88: }
  4790                           ;PIR_B1.c: 91: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.Of
      +                          fset)))
  4791                           ;PIR_B1.c: 92: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + (_PIR.RangeValue + _PIR.Off
      +                          set)))) {
  4792  00DD  084C               	movf	(__PIR^(0+128)+44),w
  4793  00DE  074E               	addwf	(__PIR^(0+128)+46),w
  4794  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  4795  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  4796  00E1  00DD               	movwf	??_PIR_Main
  4797  00E2  01DE               	clrf	??_PIR_Main+1
  4798  00E3  0DDE               	rlf	??_PIR_Main+1,f
  4799  00E4  09DD               	comf	??_PIR_Main,f
  4800  00E5  09DE               	comf	??_PIR_Main+1,f
  4801  00E6  0ADD               	incf	??_PIR_Main,f
  4802  00E7  1903               	skipnz
  4803  00E8  0ADE               	incf	??_PIR_Main+1,f
  4804  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  4805  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  4806  00EB  0826               	movf	(__PIR^(0+128)+6),w
  4807  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  4808  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  4809  00EE  075D               	addwf	??_PIR_Main,w
  4810  00EF  00DF               	movwf	??_PIR_Main+2
  4811  00F0  085E               	movf	??_PIR_Main+1,w
  4812  00F1  1803               	skipnc
  4813  00F2  0A5E               	incf	??_PIR_Main+1,w
  4814  00F3  00E0               	movwf	??_PIR_Main+3
  4815  00F4  0860               	movf	??_PIR_Main+3,w
  4816  00F5  3A80               	xorlw	128
  4817  00F6  3C80               	sublw	128
  4818  00F7  1D03               	skipz
  4819  00F8  28FD               	goto	u5635
  4820  00F9  085F               	movf	??_PIR_Main+2,w
  4821  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  4822  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  4823  00FC  0221               	subwf	(__PIR^(0+128)+1),w
  4824  00FD                     u5635:	
  4825  00FD  1C03               	skipc
  4826  00FE  292B               	goto	l4703
  4827  00FF  1683               	bsf	3,5	;RP0=1, select bank1
  4828  0100  1303               	bcf	3,6	;RP1=0, select bank1
  4829  0101  084C               	movf	(__PIR^(0+128)+44),w
  4830  0102  074E               	addwf	(__PIR^(0+128)+46),w
  4831  0103  1283               	bcf	3,5	;RP0=0, select bank0
  4832  0104  1303               	bcf	3,6	;RP1=0, select bank0
  4833  0105  00DD               	movwf	??_PIR_Main
  4834  0106  01DE               	clrf	??_PIR_Main+1
  4835  0107  0DDE               	rlf	??_PIR_Main+1,f
  4836  0108  1683               	bsf	3,5	;RP0=1, select bank1
  4837  0109  1303               	bcf	3,6	;RP1=0, select bank1
  4838  010A  0826               	movf	(__PIR^(0+128)+6),w
  4839  010B  1283               	bcf	3,5	;RP0=0, select bank0
  4840  010C  1303               	bcf	3,6	;RP1=0, select bank0
  4841  010D  075D               	addwf	??_PIR_Main,w
  4842  010E  00DF               	movwf	??_PIR_Main+2
  4843  010F  3000               	movlw	0
  4844  0110  1803               	skipnc
  4845  0111  3001               	movlw	1
  4846  0112  075E               	addwf	??_PIR_Main+1,w
  4847  0113  00E0               	movwf	??_PIR_Main+3
  4848  0114  0860               	movf	??_PIR_Main+3,w
  4849  0115  3A80               	xorlw	128
  4850  0116  00E1               	movwf	??_PIR_Main+4
  4851  0117  3080               	movlw	128
  4852  0118  0261               	subwf	??_PIR_Main+4,w
  4853  0119  1D03               	skipz
  4854  011A  2921               	goto	u5645
  4855  011B  1683               	bsf	3,5	;RP0=1, select bank1
  4856  011C  1303               	bcf	3,6	;RP1=0, select bank1
  4857  011D  0821               	movf	(__PIR^(0+128)+1),w
  4858  011E  1283               	bcf	3,5	;RP0=0, select bank0
  4859  011F  1303               	bcf	3,6	;RP1=0, select bank0
  4860  0120  025F               	subwf	??_PIR_Main+2,w
  4861  0121                     u5645:	
  4862  0121  1C03               	skipc
  4863  0122  292B               	goto	l4703
  4864                           
  4865                           ;PIR_B1.c: 93: _PIR.Count = 0;
  4866  0123  1683               	bsf	3,5	;RP0=1, select bank1
  4867  0124  1303               	bcf	3,6	;RP1=0, select bank1
  4868  0125  01C1               	clrf	(__PIR^(0+128)+33)
  4869  0126  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4870                           
  4871                           ;PIR_B1.c: 94: setLED(1, 0);
  4872  0127  1283               	bcf	3,5	;RP0=0, select bank0
  4873  0128  1303               	bcf	3,6	;RP1=0, select bank0
  4874  0129  01D5               	clrf	setLED@command
  4875  012A  29A2               	goto	L15
  4876  012B                     l4703:	
  4877                           ;PIR_B1.c: 96: } else {
  4878                           
  4879                           ;PIR_B1.c: 95: setLED(2, 0);
  4880                           
  4881                           
  4882                           ;PIR_B1.c: 97: _PIR.RangeCount++;
  4883  012B  3001               	movlw	1
  4884  012C  1283               	bcf	3,5	;RP0=0, select bank0
  4885  012D  1303               	bcf	3,6	;RP1=0, select bank0
  4886  012E  00DD               	movwf	??_PIR_Main
  4887  012F  085D               	movf	??_PIR_Main,w
  4888  0130  1683               	bsf	3,5	;RP0=1, select bank1
  4889  0131  1303               	bcf	3,6	;RP1=0, select bank1
  4890  0132  07CB               	addwf	(__PIR^(0+128)+43),f
  4891                           
  4892                           ;PIR_B1.c: 98: _PIR.Count++;
  4893  0133  3001               	movlw	1
  4894  0134  07C1               	addwf	(__PIR^(0+128)+33),f
  4895  0135  1803               	skipnc
  4896  0136  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4897  0137  3000               	movlw	0
  4898  0138  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4899                           
  4900                           ;PIR_B1.c: 100: _PIR.TriggerValue = _PIR.Status == 1 ? 4 : 2;
  4901  0139  1B20               	btfsc	__PIR^(0+128),6
  4902  013A  293F               	goto	l4711
  4903  013B  3002               	movlw	2
  4904  013C  1283               	bcf	3,5	;RP0=0, select bank0
  4905  013D  1303               	bcf	3,6	;RP1=0, select bank0
  4906  013E  2941               	goto	L11
  4907  013F                     l4711:	
  4908  013F  3004               	movlw	4
  4909  0140  1283               	bcf	3,5	;RP0=0, select bank0
  4910  0141                     L11:	
  4911  0141  00E2               	movwf	_PIR_Main$3037
  4912  0142  3000               	movlw	0
  4913  0143  00E3               	movwf	_PIR_Main$3037+1
  4914  0144  0862               	movf	_PIR_Main$3037,w
  4915  0145  00DD               	movwf	??_PIR_Main
  4916  0146  085D               	movf	??_PIR_Main,w
  4917  0147  1683               	bsf	3,5	;RP0=1, select bank1
  4918  0148  1303               	bcf	3,6	;RP1=0, select bank1
  4919  0149  00C3               	movwf	(__PIR^(0+128)+35)
  4920                           
  4921                           ;PIR_B1.c: 102: if (_PIR.Count == _PIR.TriggerValue) {
  4922  014A  0843               	movf	(__PIR^(0+128)+35),w
  4923  014B  1283               	bcf	3,5	;RP0=0, select bank0
  4924  014C  1303               	bcf	3,6	;RP1=0, select bank0
  4925  014D  00DD               	movwf	??_PIR_Main
  4926  014E  01DE               	clrf	??_PIR_Main+1
  4927  014F  1683               	bsf	3,5	;RP0=1, select bank1
  4928  0150  1303               	bcf	3,6	;RP1=0, select bank1
  4929  0151  0842               	movf	((__PIR+1)^(0+128)+33),w
  4930  0152  1283               	bcf	3,5	;RP0=0, select bank0
  4931  0153  1303               	bcf	3,6	;RP1=0, select bank0
  4932  0154  065E               	xorwf	??_PIR_Main+1,w
  4933  0155  1D03               	skipz
  4934  0156  295D               	goto	u5665
  4935  0157  1683               	bsf	3,5	;RP0=1, select bank1
  4936  0158  1303               	bcf	3,6	;RP1=0, select bank1
  4937  0159  0841               	movf	(__PIR^(0+128)+33),w
  4938  015A  1283               	bcf	3,5	;RP0=0, select bank0
  4939  015B  1303               	bcf	3,6	;RP1=0, select bank0
  4940  015C  065D               	xorwf	??_PIR_Main,w
  4941  015D                     u5665:	
  4942  015D  1D03               	skipz
  4943  015E  2976               	goto	l4721
  4944                           
  4945                           ;PIR_B1.c: 103: _PIR.Count = 0;
  4946  015F  1683               	bsf	3,5	;RP0=1, select bank1
  4947  0160  1303               	bcf	3,6	;RP1=0, select bank1
  4948  0161  01C1               	clrf	(__PIR^(0+128)+33)
  4949  0162  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4950                           
  4951                           ;PIR_B1.c: 104: _PIR.CloseTimeSeconds = 0;
  4952  0163  01C6               	clrf	(__PIR^(0+128)+38)
  4953                           
  4954                           ;PIR_B1.c: 105: _PIR.CloseTimeMinutes = 0;
  4955  0164  01C4               	clrf	(__PIR^(0+128)+36)
  4956  0165  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4957                           
  4958                           ;PIR_B1.c: 106: _PIR.Status = 1;
  4959  0166  1720               	bsf	__PIR^(0+128),6
  4960                           
  4961                           ;PIR_B1.c: 109: if (getLights_Status(1) == 0) {
  4962  0167  3001               	movlw	1
  4963  0168  158A  24FB  118A   	fcall	_getLights_Status
  4964  016B  3800               	iorlw	0
  4965  016C  1D03               	skipz
  4966  016D  2976               	goto	l4721
  4967                           
  4968                           ;PIR_B1.c: 110: setLights_Trigger(1, 1);
  4969  016E  1283               	bcf	3,5	;RP0=0, select bank0
  4970  016F  1303               	bcf	3,6	;RP1=0, select bank0
  4971  0170  01D5               	clrf	setLights_Trigger@command
  4972  0171  0AD5               	incf	setLights_Trigger@command,f
  4973  0172  3001               	movlw	1
  4974  0173  158A  25BA  118A   	fcall	_setLights_Trigger
  4975  0176                     l4721:	
  4976                           
  4977                           ;PIR_B1.c: 111: }
  4978                           ;PIR_B1.c: 114: }
  4979                           ;PIR_B1.c: 115: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))) {
  4980  0176  1683               	bsf	3,5	;RP0=1, select bank1
  4981  0177  1303               	bcf	3,6	;RP1=0, select bank1
  4982  0178  084C               	movf	(__PIR^(0+128)+44),w
  4983  0179  074E               	addwf	(__PIR^(0+128)+46),w
  4984  017A  1283               	bcf	3,5	;RP0=0, select bank0
  4985  017B  1303               	bcf	3,6	;RP1=0, select bank0
  4986  017C  00DD               	movwf	??_PIR_Main
  4987  017D  01DE               	clrf	??_PIR_Main+1
  4988  017E  0DDE               	rlf	??_PIR_Main+1,f
  4989  017F  09DD               	comf	??_PIR_Main,f
  4990  0180  09DE               	comf	??_PIR_Main+1,f
  4991  0181  0ADD               	incf	??_PIR_Main,f
  4992  0182  1903               	skipnz
  4993  0183  0ADE               	incf	??_PIR_Main+1,f
  4994  0184  1683               	bsf	3,5	;RP0=1, select bank1
  4995  0185  1303               	bcf	3,6	;RP1=0, select bank1
  4996  0186  0826               	movf	(__PIR^(0+128)+6),w
  4997  0187  1283               	bcf	3,5	;RP0=0, select bank0
  4998  0188  1303               	bcf	3,6	;RP1=0, select bank0
  4999  0189  075D               	addwf	??_PIR_Main,w
  5000  018A  00DF               	movwf	??_PIR_Main+2
  5001  018B  085E               	movf	??_PIR_Main+1,w
  5002  018C  1803               	skipnc
  5003  018D  0A5E               	incf	??_PIR_Main+1,w
  5004  018E  00E0               	movwf	??_PIR_Main+3
  5005  018F  0860               	movf	??_PIR_Main+3,w
  5006  0190  3A80               	xorlw	128
  5007  0191  00E1               	movwf	??_PIR_Main+4
  5008  0192  3080               	movlw	128
  5009  0193  0261               	subwf	??_PIR_Main+4,w
  5010  0194  1D03               	skipz
  5011  0195  299C               	goto	u5685
  5012  0196  1683               	bsf	3,5	;RP0=1, select bank1
  5013  0197  1303               	bcf	3,6	;RP1=0, select bank1
  5014  0198  0821               	movf	(__PIR^(0+128)+1),w
  5015  0199  1283               	bcf	3,5	;RP0=0, select bank0
  5016  019A  1303               	bcf	3,6	;RP1=0, select bank0
  5017  019B  025F               	subwf	??_PIR_Main+2,w
  5018  019C                     u5685:	
  5019  019C  1C03               	skipc
  5020  019D  29AA               	goto	l4725
  5021                           
  5022                           ;PIR_B1.c: 116: setLED(1, 1);
  5023  019E  1283               	bcf	3,5	;RP0=0, select bank0
  5024  019F  1303               	bcf	3,6	;RP1=0, select bank0
  5025  01A0  01D5               	clrf	setLED@command
  5026  01A1  0AD5               	incf	setLED@command,f
  5027  01A2                     L15:	
  5028  01A2  3001               	movlw	1
  5029  01A3  118A  2756  118A   	fcall	_setLED
  5030                           
  5031                           ;PIR_B1.c: 117: setLED(2, 0);
  5032  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  5033  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  5034  01A8  01D5               	clrf	setLED@command
  5035  01A9  29B5               	goto	L12
  5036  01AA                     l4725:	
  5037                           ;PIR_B1.c: 118: } else {
  5038                           
  5039                           
  5040                           ;PIR_B1.c: 119: setLED(1, 0);
  5041  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  5042  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  5043  01AC  01D5               	clrf	setLED@command
  5044  01AD  3001               	movlw	1
  5045  01AE  118A  2756  118A   	fcall	_setLED
  5046                           
  5047                           ;PIR_B1.c: 120: setLED(2, 1);
  5048  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  5049  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  5050  01B3  01D5               	clrf	setLED@command
  5051  01B4  0AD5               	incf	setLED@command,f
  5052  01B5                     L12:	
  5053  01B5  3002               	movlw	2
  5054  01B6  118A  2756  118A   	fcall	_setLED
  5055  01B9                     l4727:	
  5056                           
  5057                           ;PIR_B1.c: 121: }
  5058                           ;PIR_B1.c: 122: }
  5059                           ;PIR_B1.c: 123: }
  5060                           ;PIR_B1.c: 124: }
  5061                           ;PIR_B1.c: 125: }
  5062                           ;PIR_B1.c: 126: }
  5063                           ;PIR_B1.c: 127: if (_PIR.OK == 0) {
  5064  01B9  1683               	bsf	3,5	;RP0=1, select bank1
  5065  01BA  1303               	bcf	3,6	;RP1=0, select bank1
  5066  01BB  19A0               	btfsc	__PIR^(0+128),3
  5067  01BC  29D5               	goto	l4737
  5068                           
  5069                           ;PIR_B1.c: 128: _PIR.Count++;
  5070  01BD  3001               	movlw	1
  5071  01BE  07C1               	addwf	(__PIR^(0+128)+33),f
  5072  01BF  1803               	skipnc
  5073  01C0  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  5074  01C1  3000               	movlw	0
  5075  01C2  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  5076                           
  5077                           ;PIR_B1.c: 129: if (_PIR.Count == 3000) {
  5078  01C3  300B               	movlw	11
  5079  01C4  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  5080  01C5  1D03               	skipz
  5081  01C6  29C9               	goto	u5705
  5082  01C7  30B8               	movlw	184
  5083  01C8  0641               	xorwf	(__PIR^(0+128)+33),w
  5084  01C9                     u5705:	
  5085  01C9  1D03               	skipz
  5086  01CA  29D5               	goto	l4737
  5087                           
  5088                           ;PIR_B1.c: 130: _PIR.Count = 0;
  5089  01CB  01C1               	clrf	(__PIR^(0+128)+33)
  5090  01CC  01C2               	clrf	((__PIR+1)^(0+128)+33)
  5091                           
  5092                           ;PIR_B1.c: 131: _PIR.OK = 1;
  5093  01CD  15A0               	bsf	__PIR^(0+128),3
  5094                           
  5095                           ;PIR_B1.c: 132: setLED(2, 0);
  5096  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  5097  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  5098  01D0  01D5               	clrf	setLED@command
  5099  01D1  3002               	movlw	2
  5100  01D2  118A  2756  118A   	fcall	_setLED
  5101  01D5                     l4737:	
  5102                           
  5103                           ;PIR_B1.c: 133: }
  5104                           ;PIR_B1.c: 134: }
  5105                           ;PIR_B1.c: 135: if (_PIR.Status == 1) {
  5106  01D5  1683               	bsf	3,5	;RP0=1, select bank1
  5107  01D6  1303               	bcf	3,6	;RP1=0, select bank1
  5108  01D7  1F20               	btfss	__PIR^(0+128),6
  5109  01D8  0008               	return
  5110                           
  5111                           ;PIR_B1.c: 136: _PIR.CloseTimeSeconds++;
  5112  01D9  3001               	movlw	1
  5113  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  5114  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  5115  01DC  00DD               	movwf	??_PIR_Main
  5116  01DD  085D               	movf	??_PIR_Main,w
  5117  01DE  1683               	bsf	3,5	;RP0=1, select bank1
  5118  01DF  1303               	bcf	3,6	;RP1=0, select bank1
  5119  01E0  07C6               	addwf	(__PIR^(0+128)+38),f
  5120                           
  5121                           ;PIR_B1.c: 137: if (_PIR.CloseTimeSeconds == 100) {
  5122  01E1  0846               	movf	(__PIR^(0+128)+38),w
  5123  01E2  3A64               	xorlw	100
  5124  01E3  1D03               	skipz
  5125  01E4  0008               	return
  5126                           
  5127                           ;PIR_B1.c: 138: _PIR.CloseTimeSeconds = 0;
  5128  01E5  01C6               	clrf	(__PIR^(0+128)+38)
  5129                           
  5130                           ;PIR_B1.c: 139: _PIR.CloseTimeMinutes++;
  5131  01E6  3001               	movlw	1
  5132  01E7  07C4               	addwf	(__PIR^(0+128)+36),f
  5133  01E8  1803               	skipnc
  5134  01E9  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  5135  01EA  3000               	movlw	0
  5136  01EB  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  5137                           
  5138                           ;PIR_B1.c: 140: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5139  01EC  0848               	movf	((__PIR+1)^(0+128)+39),w
  5140  01ED  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  5141  01EE  1D03               	skipz
  5142  01EF  29F2               	goto	u5735
  5143  01F0  0847               	movf	(__PIR^(0+128)+39),w
  5144  01F1  0644               	xorwf	(__PIR^(0+128)+36),w
  5145  01F2                     u5735:	
  5146  01F2  1D03               	skipz
  5147  01F3  0008               	return
  5148                           
  5149                           ;PIR_B1.c: 141: _PIR.CloseTimeMinutes = 0;
  5150  01F4  01C4               	clrf	(__PIR^(0+128)+36)
  5151  01F5  01C5               	clrf	((__PIR+1)^(0+128)+36)
  5152                           
  5153                           ;PIR_B1.c: 142: _PIR.Status = 0;
  5154  01F6  1320               	bcf	__PIR^(0+128),6
  5155                           
  5156                           ;PIR_B1.c: 145: if (getLights_Status(1) == 1) {
  5157  01F7  3001               	movlw	1
  5158  01F8  158A  24FB  118A   	fcall	_getLights_Status
  5159  01FB  3A01               	xorlw	1
  5160  01FC  1D03               	skipz
  5161  01FD  0008               	return
  5162                           
  5163                           ;PIR_B1.c: 146: setLights_Trigger(1, 0);
  5164  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  5165  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  5166  0200  01D5               	clrf	setLights_Trigger@command
  5167  0201  3001               	movlw	1
  5168  0202  158A  25BA         	fcall	_setLights_Trigger
  5169                           
  5170                           ;PIR_B1.c: 147: }
  5171                           ;PIR_B1.c: 150: }
  5172                           ;PIR_B1.c: 151: }
  5173                           ;PIR_B1.c: 152: }
  5174                           ;PIR_B1.c: 153: } else {
  5175  0204  0008               	return
  5176  0205                     l815:	
  5177                           
  5178                           ;PIR_B1.c: 154: if (myMain.PowerON == 1) {
  5179  0205  1283               	bcf	3,5	;RP0=0, select bank0
  5180  0206  1303               	bcf	3,6	;RP1=0, select bank0
  5181  0207  1C20               	btfss	_myMain,0
  5182  0208  0008               	return
  5183                           
  5184                           ;PIR_B1.c: 155: _PIR.Enable = 1;
  5185  0209  1683               	bsf	3,5	;RP0=1, select bank1
  5186  020A  1303               	bcf	3,6	;RP1=0, select bank1
  5187  020B  1420               	bsf	__PIR^(0+128),0
  5188  020C  0008               	return
  5189  020D                     __end_of_PIR_Main:	
  5190                           
  5191                           	psect	text23
  5192  0E29                     __ptext23:	
  5193 ;; *************** function _getMain_Exception *****************
  5194 ;; Defined at:
  5195 ;;		line 276 in file "../src/Main_B1.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;  command         1    wreg     unsigned char 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;  command         1    4[BANK0 ] unsigned char 
  5200 ;;  status          1    5[BANK0 ] unsigned char 
  5201 ;; Return value:  Size  Location     Type
  5202 ;;		None               void
  5203 ;; Registers used:
  5204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5205 ;; Tracked objects:
  5206 ;;		On entry : 0/0
  5207 ;;		On exit  : 0/0
  5208 ;;		Unchanged: 0/0
  5209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5210 ;;      Params:         0       0       0       0
  5211 ;;      Locals:         0       2       0       0
  5212 ;;      Temps:          0       1       0       0
  5213 ;;      Totals:         0       3       0       0
  5214 ;;Total ram usage:        3 bytes
  5215 ;; Hardware stack levels used:    1
  5216 ;; Hardware stack levels required when called:    4
  5217 ;; This function calls:
  5218 ;;		_getAll_Lights_Line
  5219 ;;		_setLights_Trigger
  5220 ;; This function is called by:
  5221 ;;		_PIR_Main
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function _getMain_Exception
  5227  0E29                     _getMain_Exception:	
  5228                           
  5229                           ;incstack = 0
  5230                           ; Regs used in _getMain_Exception: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5231                           ;getMain_Exception@command stored from wreg
  5232  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  5233  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  5234  0E2B  00D9               	movwf	getMain_Exception@command
  5235                           
  5236                           ;Main_B1.c: 277: char status = 0;
  5237  0E2C  01DA               	clrf	getMain_Exception@status
  5238                           
  5239                           ;Main_B1.c: 278: if (command == 3) {
  5240  0E2D  0859               	movf	getMain_Exception@command,w
  5241  0E2E  3A03               	xorlw	3
  5242  0E2F  1D03               	skipz
  5243  0E30  2E37               	goto	l4095
  5244                           
  5245                           ;Main_B1.c: 279: status = getAll_Lights_Line();
  5246  0E31  158A  251D  158A   	fcall	_getAll_Lights_Line
  5247  0E34  1283               	bcf	3,5	;RP0=0, select bank0
  5248  0E35  1303               	bcf	3,6	;RP1=0, select bank0
  5249  0E36  2E38               	goto	L16
  5250  0E37                     l4095:	
  5251                           ;Main_B1.c: 280: } else {
  5252                           
  5253                           
  5254                           ;Main_B1.c: 281: status = 255;
  5255  0E37  30FF               	movlw	255
  5256  0E38                     L16:	
  5257  0E38  00D8               	movwf	??_getMain_Exception
  5258  0E39  0858               	movf	??_getMain_Exception,w
  5259  0E3A  00DA               	movwf	getMain_Exception@status
  5260                           
  5261                           ;Main_B1.c: 282: }
  5262                           ;Main_B1.c: 285: if (status == 1 || status == 255) {
  5263  0E3B  085A               	movf	getMain_Exception@status,w
  5264  0E3C  3A01               	xorlw	1
  5265  0E3D  1903               	skipnz
  5266  0E3E  2E43               	goto	l4099
  5267  0E3F  085A               	movf	getMain_Exception@status,w
  5268  0E40  3AFF               	xorlw	255
  5269  0E41  1D03               	skipz
  5270  0E42  0008               	return
  5271  0E43                     l4099:	
  5272                           
  5273                           ;Main_B1.c: 286: setLights_Trigger(1, 0);
  5274  0E43  01D5               	clrf	setLights_Trigger@command
  5275  0E44  3001               	movlw	1
  5276  0E45  158A  25BA         	fcall	_setLights_Trigger
  5277  0E47  0008               	return
  5278  0E48                     __end_of_getMain_Exception:	
  5279                           
  5280                           	psect	text24
  5281  0DBA                     __ptext24:	
  5282 ;; *************** function _setLights_Trigger *****************
  5283 ;; Defined at:
  5284 ;;		line 207 in file "../src/TriacRelay_B1.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;  lights          1    wreg     unsigned char 
  5287 ;;  command         1    0[BANK0 ] unsigned char 
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;  lights          1    2[BANK0 ] unsigned char 
  5290 ;; Return value:  Size  Location     Type
  5291 ;;		None               void
  5292 ;; Registers used:
  5293 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5299 ;;      Params:         0       1       0       0
  5300 ;;      Locals:         0       1       0       0
  5301 ;;      Temps:          0       1       0       0
  5302 ;;      Totals:         0       3       0       0
  5303 ;;Total ram usage:        3 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:    3
  5306 ;; This function calls:
  5307 ;;		_LightsPointSelect
  5308 ;; This function is called by:
  5309 ;;		_getMain_Exception
  5310 ;;		_PIR_Main
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           
  5315                           ;psect for function _setLights_Trigger
  5316  0DBA                     _setLights_Trigger:	
  5317                           
  5318                           ;incstack = 0
  5319                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5320                           ;setLights_Trigger@lights stored from wreg
  5321  0DBA  1283               	bcf	3,5	;RP0=0, select bank0
  5322  0DBB  1303               	bcf	3,6	;RP1=0, select bank0
  5323  0DBC  00D7               	movwf	setLights_Trigger@lights
  5324                           
  5325                           ;TriacRelay_B1.c: 208: LightsPointSelect(lights);
  5326  0DBD  0857               	movf	setLights_Trigger@lights,w
  5327  0DBE  158A  2499         	fcall	_LightsPointSelect
  5328                           
  5329                           ;TriacRelay_B1.c: 209: Lights->Trigger = 1;
  5330  0DC0  1283               	bcf	3,5	;RP0=0, select bank0
  5331  0DC1  1303               	bcf	3,6	;RP1=0, select bank0
  5332  0DC2  0835               	movf	_Lights,w
  5333  0DC3  0084               	movwf	4
  5334  0DC4  1383               	bcf	3,7	;select IRP bank0
  5335  0DC5  1580               	bsf	0,3
  5336                           
  5337                           ;TriacRelay_B1.c: 210: Lights->Switch = command == 1 ? 1 : 0;
  5338  0DC6  0855               	movf	setLights_Trigger@command,w
  5339  0DC7  3A01               	xorlw	1
  5340  0DC8  3000               	movlw	0
  5341  0DC9  1903               	skipnz
  5342  0DCA  3001               	movlw	1
  5343  0DCB  00D6               	movwf	??_setLights_Trigger
  5344  0DCC  0835               	movf	_Lights,w
  5345  0DCD  0084               	movwf	4
  5346  0DCE  0ED6               	swapf	??_setLights_Trigger,f
  5347  0DCF  0800               	movf	0,w
  5348  0DD0  0656               	xorwf	??_setLights_Trigger,w
  5349  0DD1  39EF               	andlw	-17
  5350  0DD2  0656               	xorwf	??_setLights_Trigger,w
  5351  0DD3  0080               	movwf	0
  5352  0DD4  0008               	return
  5353  0DD5                     __end_of_setLights_Trigger:	
  5354                           
  5355                           	psect	text25
  5356  0D1D                     __ptext25:	
  5357 ;; *************** function _getAll_Lights_Line *****************
  5358 ;; Defined at:
  5359 ;;		line 229 in file "../src/TriacRelay_B1.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;		None
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;  line            1    0[BANK0 ] unsigned char 
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  1    wreg      unsigned char 
  5366 ;; Registers used:
  5367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5373 ;;      Params:         0       0       0       0
  5374 ;;      Locals:         0       1       0       0
  5375 ;;      Temps:          0       0       0       0
  5376 ;;      Totals:         0       1       0       0
  5377 ;;Total ram usage:        1 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    3
  5380 ;; This function calls:
  5381 ;;		_LightsPointSelect
  5382 ;; This function is called by:
  5383 ;;		_getMain_Exception
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           
  5388                           ;psect for function _getAll_Lights_Line
  5389  0D1D                     _getAll_Lights_Line:	
  5390                           
  5391                           ;TriacRelay_B1.c: 230: char line = 0;
  5392                           
  5393                           ;incstack = 0
  5394                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5395  0D1D  1283               	bcf	3,5	;RP0=0, select bank0
  5396  0D1E  1303               	bcf	3,6	;RP1=0, select bank0
  5397  0D1F  01D5               	clrf	getAll_Lights_Line@line
  5398                           
  5399                           ;TriacRelay_B1.c: 232: LightsPointSelect(1);
  5400  0D20  3001               	movlw	1
  5401  0D21  158A  2499         	fcall	_LightsPointSelect
  5402                           
  5403                           ;TriacRelay_B1.c: 233: line = Lights->Line == 1 ? 1 : 0;
  5404  0D23  1283               	bcf	3,5	;RP0=0, select bank0
  5405  0D24  1303               	bcf	3,6	;RP1=0, select bank0
  5406  0D25  0A35               	incf	_Lights,w
  5407  0D26  0084               	movwf	4
  5408  0D27  3000               	movlw	0
  5409  0D28  1383               	bcf	3,7	;select IRP bank0
  5410  0D29  1800               	btfsc	0,0
  5411  0D2A  3001               	movlw	1
  5412  0D2B  00D5               	movwf	getAll_Lights_Line@line
  5413                           
  5414                           ;TriacRelay_B1.c: 243: return line;
  5415  0D2C  0855               	movf	getAll_Lights_Line@line,w
  5416  0D2D  0008               	return
  5417  0D2E                     __end_of_getAll_Lights_Line:	
  5418                           
  5419                           	psect	text26
  5420  0C76                     __ptext26:	
  5421 ;; *************** function _PIR_Initialization *****************
  5422 ;; Defined at:
  5423 ;;		line 7 in file "../src/PIR_B1.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;		None               void
  5430 ;; Registers used:
  5431 ;;		wreg
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5437 ;;      Params:         0       0       0       0
  5438 ;;      Locals:         0       0       0       0
  5439 ;;      Temps:          1       0       0       0
  5440 ;;      Totals:         1       0       0       0
  5441 ;;Total ram usage:        1 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    2
  5444 ;; This function calls:
  5445 ;;		Nothing
  5446 ;; This function is called by:
  5447 ;;		_main
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           
  5452                           ;psect for function _PIR_Initialization
  5453  0C76                     _PIR_Initialization:	
  5454                           
  5455                           ;PIR_B1.c: 8: _PIR.RangeValue = 15;
  5456                           
  5457                           ;incstack = 0
  5458                           ; Regs used in _PIR_Initialization: [wreg]
  5459  0C76  300F               	movlw	15
  5460  0C77  00F4               	movwf	??_PIR_Initialization
  5461  0C78  0874               	movf	??_PIR_Initialization,w
  5462  0C79  1683               	bsf	3,5	;RP0=1, select bank1
  5463  0C7A  1303               	bcf	3,6	;RP1=0, select bank1
  5464  0C7B  00CC               	movwf	(__PIR^(0+128)+44)
  5465                           
  5466                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5467  0C7C  3005               	movlw	5
  5468  0C7D  00C7               	movwf	(__PIR^(0+128)+39)
  5469  0C7E  3000               	movlw	0
  5470  0C7F  00C8               	movwf	(__PIR^(0+128)+40)
  5471  0C80  0008               	return
  5472  0C81                     __end_of_PIR_Initialization:	
  5473                           
  5474                           	psect	text27
  5475  0CCD                     __ptext27:	
  5476 ;; *************** function _Mcu_Initialization *****************
  5477 ;; Defined at:
  5478 ;;		line 30 in file "../src/MCU_B1.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;		None
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;		None
  5483 ;; Return value:  Size  Location     Type
  5484 ;;		None               void
  5485 ;; Registers used:
  5486 ;;		wreg, status,2, status,0, pclath, cstack
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5492 ;;      Params:         0       0       0       0
  5493 ;;      Locals:         0       0       0       0
  5494 ;;      Temps:          0       0       0       0
  5495 ;;      Totals:         0       0       0       0
  5496 ;;Total ram usage:        0 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    3
  5499 ;; This function calls:
  5500 ;;		_ADC_Set
  5501 ;;		_Fosc_Set
  5502 ;;		_IO_Set
  5503 ;;		_TMR1_Set
  5504 ;;		_WDT_Set
  5505 ;; This function is called by:
  5506 ;;		_main
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           
  5511                           ;psect for function _Mcu_Initialization
  5512  0CCD                     _Mcu_Initialization:	
  5513                           
  5514                           ;MCU_B1.c: 32: Fosc_Set();
  5515                           
  5516                           ;incstack = 0
  5517                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5518  0CCD  158A  2428  158A   	fcall	_Fosc_Set
  5519                           
  5520                           ;MCU_B1.c: 34: IO_Set();
  5521  0CD0  158A  258F  158A   	fcall	_IO_Set
  5522                           
  5523                           ;MCU_B1.c: 36: ;;
  5524                           ;MCU_B1.c: 38: TMR1_Set();
  5525  0CD3  118A  27F2  158A   	fcall	_TMR1_Set
  5526                           
  5527                           ;MCU_B1.c: 40: ADC_Set();
  5528  0CD6  158A  244C  158A   	fcall	_ADC_Set
  5529                           
  5530                           ;MCU_B1.c: 42: ;;
  5531                           ;MCU_B1.c: 44: ;;
  5532                           ;MCU_B1.c: 46: ;;
  5533                           ;MCU_B1.c: 48: ;;
  5534                           ;MCU_B1.c: 50: ;;
  5535                           ;MCU_B1.c: 52: WDT_Set();
  5536  0CD9  158A  24A5         	fcall	_WDT_Set
  5537  0CDB  0008               	return
  5538  0CDC                     __end_of_Mcu_Initialization:	
  5539                           
  5540                           	psect	text28
  5541  0CA5                     __ptext28:	
  5542 ;; *************** function _WDT_Set *****************
  5543 ;; Defined at:
  5544 ;;		line 1005 in file "../src/MCU_B1.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;		None
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;		None
  5549 ;; Return value:  Size  Location     Type
  5550 ;;		None               void
  5551 ;; Registers used:
  5552 ;;		wreg
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5558 ;;      Params:         0       0       0       0
  5559 ;;      Locals:         0       0       0       0
  5560 ;;      Temps:          1       0       0       0
  5561 ;;      Totals:         1       0       0       0
  5562 ;;Total ram usage:        1 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; Hardware stack levels required when called:    2
  5565 ;; This function calls:
  5566 ;;		Nothing
  5567 ;; This function is called by:
  5568 ;;		_Mcu_Initialization
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           
  5573                           ;psect for function _WDT_Set
  5574  0CA5                     _WDT_Set:	
  5575                           
  5576                           ;MCU_B1.c: 1007: PSA = 1;
  5577                           
  5578                           ;incstack = 0
  5579                           ; Regs used in _WDT_Set: [wreg]
  5580  0CA5  1683               	bsf	3,5	;RP0=1, select bank1
  5581  0CA6  1303               	bcf	3,6	;RP1=0, select bank1
  5582  0CA7  1581               	bsf	1,3	;volatile
  5583                           
  5584                           ;MCU_B1.c: 1008: PS0 = 1;
  5585  0CA8  1401               	bsf	1,0	;volatile
  5586                           
  5587                           ;MCU_B1.c: 1009: PS1 = 1;
  5588  0CA9  1481               	bsf	1,1	;volatile
  5589                           
  5590                           ;MCU_B1.c: 1010: PS2 = 1;
  5591  0CAA  1501               	bsf	1,2	;volatile
  5592                           
  5593                           ;MCU_B1.c: 1014: WDT.Enable = 1;
  5594  0CAB  1476               	bsf	_WDT,0
  5595                           
  5596                           ;MCU_B1.c: 1015: WDT.Timer = 10;
  5597  0CAC  300A               	movlw	10
  5598  0CAD  00F4               	movwf	??_WDT_Set
  5599  0CAE  0874               	movf	??_WDT_Set,w
  5600  0CAF  00F7               	movwf	_WDT+1
  5601  0CB0  0008               	return
  5602  0CB1                     __end_of_WDT_Set:	
  5603                           
  5604                           	psect	text29
  5605  07F2                     __ptext29:	
  5606 ;; *************** function _TMR1_Set *****************
  5607 ;; Defined at:
  5608 ;;		line 199 in file "../src/MCU_B1.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;		None
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;		None
  5613 ;; Return value:  Size  Location     Type
  5614 ;;		None               void
  5615 ;; Registers used:
  5616 ;;		wreg
  5617 ;; Tracked objects:
  5618 ;;		On entry : 0/0
  5619 ;;		On exit  : 0/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5622 ;;      Params:         0       0       0       0
  5623 ;;      Locals:         0       0       0       0
  5624 ;;      Temps:          0       0       0       0
  5625 ;;      Totals:         0       0       0       0
  5626 ;;Total ram usage:        0 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; Hardware stack levels required when called:    2
  5629 ;; This function calls:
  5630 ;;		Nothing
  5631 ;; This function is called by:
  5632 ;;		_Mcu_Initialization
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           
  5637                           ;psect for function _TMR1_Set
  5638  07F2                     _TMR1_Set:	
  5639                           
  5640                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  5641                           
  5642                           ;incstack = 0
  5643                           ; Regs used in _TMR1_Set: [wreg]
  5644  07F2  3041               	movlw	65
  5645  07F3  1283               	bcf	3,5	;RP0=0, select bank0
  5646  07F4  1303               	bcf	3,6	;RP1=0, select bank0
  5647  07F5  0090               	movwf	16	;volatile
  5648                           
  5649                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  5650  07F6  30FA               	movlw	250
  5651  07F7  008F               	movwf	15	;volatile
  5652                           
  5653                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  5654  07F8  3038               	movlw	56
  5655  07F9  008E               	movwf	14	;volatile
  5656                           
  5657                           ;MCU_B1.c: 203: TMR1IE = 1;
  5658  07FA  1683               	bsf	3,5	;RP0=1, select bank1
  5659  07FB  1303               	bcf	3,6	;RP1=0, select bank1
  5660  07FC  140C               	bsf	12,0	;volatile
  5661                           
  5662                           ;MCU_B1.c: 204: PEIE = 1;
  5663  07FD  170B               	bsf	11,6	;volatile
  5664                           
  5665                           ;MCU_B1.c: 205: GIE = 1;
  5666  07FE  178B               	bsf	11,7	;volatile
  5667  07FF  0008               	return
  5668  0800                     __end_of_TMR1_Set:	
  5669                           
  5670                           	psect	text30
  5671  0D8F                     __ptext30:	
  5672 ;; *************** function _IO_Set *****************
  5673 ;; Defined at:
  5674 ;;		line 60 in file "../src/MCU_B1.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;		None
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;		None
  5679 ;; Return value:  Size  Location     Type
  5680 ;;		None               void
  5681 ;; Registers used:
  5682 ;;		wreg, status,2
  5683 ;; Tracked objects:
  5684 ;;		On entry : 0/0
  5685 ;;		On exit  : 0/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5688 ;;      Params:         0       0       0       0
  5689 ;;      Locals:         0       0       0       0
  5690 ;;      Temps:          0       0       0       0
  5691 ;;      Totals:         0       0       0       0
  5692 ;;Total ram usage:        0 bytes
  5693 ;; Hardware stack levels used:    1
  5694 ;; Hardware stack levels required when called:    2
  5695 ;; This function calls:
  5696 ;;		Nothing
  5697 ;; This function is called by:
  5698 ;;		_Mcu_Initialization
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           
  5703                           ;psect for function _IO_Set
  5704  0D8F                     _IO_Set:	
  5705                           
  5706                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5707                           
  5708                           ;incstack = 0
  5709                           ; Regs used in _IO_Set: [wreg+status,2]
  5710  0D8F  302F               	movlw	47
  5711  0D90  1683               	bsf	3,5	;RP0=1, select bank1
  5712  0D91  1303               	bcf	3,6	;RP1=0, select bank1
  5713  0D92  0085               	movwf	5	;volatile
  5714                           
  5715                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5716  0D93  3001               	movlw	1
  5717  0D94  0086               	movwf	6	;volatile
  5718                           
  5719                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5720  0D95  0187               	clrf	7	;volatile
  5721                           
  5722                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5723  0D96  3007               	movlw	7
  5724  0D97  1683               	bsf	3,5	;RP0=1, select bank3
  5725  0D98  1703               	bsf	3,6	;RP1=1, select bank3
  5726  0D99  0085               	movwf	5	;volatile
  5727                           
  5728                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5729  0D9A  3001               	movlw	1
  5730  0D9B  0086               	movwf	6	;volatile
  5731                           
  5732                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5733  0D9C  30AF               	movlw	175
  5734  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  5735  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  5736  0D9F  0085               	movwf	5	;volatile
  5737                           
  5738                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5739  0DA0  3001               	movlw	1
  5740  0DA1  0086               	movwf	6	;volatile
  5741                           
  5742                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5743  0DA2  0187               	clrf	7	;volatile
  5744  0DA3  0008               	return
  5745  0DA4                     __end_of_IO_Set:	
  5746                           
  5747                           	psect	text31
  5748  0C28                     __ptext31:	
  5749 ;; *************** function _Fosc_Set *****************
  5750 ;; Defined at:
  5751 ;;		line 56 in file "../src/MCU_B1.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;		None
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;		None
  5756 ;; Return value:  Size  Location     Type
  5757 ;;		None               void
  5758 ;; Registers used:
  5759 ;;		wreg
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5765 ;;      Params:         0       0       0       0
  5766 ;;      Locals:         0       0       0       0
  5767 ;;      Temps:          0       0       0       0
  5768 ;;      Totals:         0       0       0       0
  5769 ;;Total ram usage:        0 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    2
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_Mcu_Initialization
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           
  5780                           ;psect for function _Fosc_Set
  5781  0C28                     _Fosc_Set:	
  5782                           
  5783                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5784                           
  5785                           ;incstack = 0
  5786                           ; Regs used in _Fosc_Set: [wreg]
  5787  0C28  303C               	movlw	60
  5788  0C29  1683               	bsf	3,5	;RP0=1, select bank1
  5789  0C2A  1303               	bcf	3,6	;RP1=0, select bank1
  5790  0C2B  0090               	movwf	16	;volatile
  5791  0C2C  0008               	return
  5792  0C2D                     __end_of_Fosc_Set:	
  5793                           
  5794                           	psect	text32
  5795  0C4C                     __ptext32:	
  5796 ;; *************** function _ADC_Set *****************
  5797 ;; Defined at:
  5798 ;;		line 419 in file "../src/MCU_B1.c"
  5799 ;; Parameters:    Size  Location     Type
  5800 ;;		None
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;		None
  5803 ;; Return value:  Size  Location     Type
  5804 ;;		None               void
  5805 ;; Registers used:
  5806 ;;		wreg
  5807 ;; Tracked objects:
  5808 ;;		On entry : 0/0
  5809 ;;		On exit  : 0/0
  5810 ;;		Unchanged: 0/0
  5811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5812 ;;      Params:         0       0       0       0
  5813 ;;      Locals:         0       0       0       0
  5814 ;;      Temps:          0       0       0       0
  5815 ;;      Totals:         0       0       0       0
  5816 ;;Total ram usage:        0 bytes
  5817 ;; Hardware stack levels used:    1
  5818 ;; Hardware stack levels required when called:    2
  5819 ;; This function calls:
  5820 ;;		Nothing
  5821 ;; This function is called by:
  5822 ;;		_Mcu_Initialization
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           
  5827                           ;psect for function _ADC_Set
  5828  0C4C                     _ADC_Set:	
  5829                           
  5830                           ;MCU_B1.c: 420: ADCON1 = 0x73;
  5831                           
  5832                           ;incstack = 0
  5833                           ; Regs used in _ADC_Set: [wreg]
  5834  0C4C  3073               	movlw	115
  5835  0C4D  1683               	bsf	3,5	;RP0=1, select bank1
  5836  0C4E  1303               	bcf	3,6	;RP1=0, select bank1
  5837  0C4F  009F               	movwf	31	;volatile
  5838                           
  5839                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  5840  0C50  30C1               	movlw	193
  5841  0C51  009D               	movwf	29	;volatile
  5842  0C52  0008               	return
  5843  0C53                     __end_of_ADC_Set:	
  5844                           
  5845                           	psect	text33
  5846  020D                     __ptext33:	
  5847 ;; *************** function _Load_Main *****************
  5848 ;; Defined at:
  5849 ;;		line 39 in file "../src/OverLoad_B1.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;		None
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  i               1   13[BANK0 ] unsigned char 
  5854 ;;  error           1   11[BANK0 ] unsigned char 
  5855 ;;  j               1   10[BANK0 ] unsigned char 
  5856 ;; Return value:  Size  Location     Type
  5857 ;;		None               void
  5858 ;; Registers used:
  5859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5865 ;;      Params:         0       0       0       0
  5866 ;;      Locals:         0       4       0       0
  5867 ;;      Temps:          0       2       0       0
  5868 ;;      Totals:         0       6       0       0
  5869 ;;Total ram usage:        6 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:    4
  5872 ;; This function calls:
  5873 ;;		_getLightsControl_GO
  5874 ;;		_getLightsControl_OK
  5875 ;;		_getMain_All_Error_Status
  5876 ;;		_getMain_Lights_Count
  5877 ;;		_setLED
  5878 ;;		_setLoad_AH_AL_Restore
  5879 ;; This function is called by:
  5880 ;;		_main
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           
  5885                           ;psect for function _Load_Main
  5886  020D                     _Load_Main:	
  5887                           
  5888                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = 0;
  5889                           
  5890                           ;incstack = 0
  5891                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5892  020D  1283               	bcf	3,5	;RP0=0, select bank0
  5893  020E  1303               	bcf	3,6	;RP1=0, select bank0
  5894  020F  01E2               	clrf	Load_Main@i
  5895  0210  01DF               	clrf	Load_Main@j
  5896  0211  01E0               	clrf	Load_Main@error
  5897                           
  5898                           ;OverLoad_B1.c: 41: if (Load.Enable == 1) {
  5899  0212  1683               	bsf	3,5	;RP0=1, select bank1
  5900  0213  1303               	bcf	3,6	;RP1=0, select bank1
  5901  0214  1C4F               	btfss	_Load^(0+128),0
  5902  0215  2B70               	goto	l625
  5903                           
  5904                           ;OverLoad_B1.c: 42: Load.GO = 0;
  5905  0216  10CF               	bcf	_Load^(0+128),1
  5906                           
  5907                           ;OverLoad_B1.c: 45: Load.GO = getLightsControl_GO() == 1 && getMain_All_Error_Status(0) 
      +                          == 0 ? 1 : 0;
  5908  0217  1283               	bcf	3,5	;RP0=0, select bank0
  5909  0218  1303               	bcf	3,6	;RP1=0, select bank0
  5910  0219  01E1               	clrf	_Load_Main$2538
  5911  021A  158A  2433  118A   	fcall	_getLightsControl_GO
  5912  021D  3A01               	xorlw	1
  5913  021E  1D03               	skipz
  5914  021F  2A2B               	goto	l4477
  5915  0220  3000               	movlw	0
  5916  0221  158A  27AA  118A   	fcall	_getMain_All_Error_Status
  5917  0224  3800               	iorlw	0
  5918  0225  1D03               	skipz
  5919  0226  2A2B               	goto	l4477
  5920  0227  1283               	bcf	3,5	;RP0=0, select bank0
  5921  0228  1303               	bcf	3,6	;RP1=0, select bank0
  5922  0229  01E1               	clrf	_Load_Main$2538
  5923  022A  0AE1               	incf	_Load_Main$2538,f
  5924  022B                     l4477:	
  5925  022B  1283               	bcf	3,5	;RP0=0, select bank0
  5926  022C  1303               	bcf	3,6	;RP1=0, select bank0
  5927  022D  0861               	movf	_Load_Main$2538,w
  5928  022E  1683               	bsf	3,5	;RP0=1, select bank1
  5929  022F  1303               	bcf	3,6	;RP1=0, select bank1
  5930  0230  10CF               	bcf	_Load^(0+128),1
  5931  0231  1D03               	skipz
  5932  0232  14CF               	bsf	_Load^(0+128),1
  5933                           
  5934                           ;OverLoad_B1.c: 47: if (Load.OK == 1) {
  5935  0233  1FCF               	btfss	_Load^(0+128),7
  5936  0234  2A3F               	goto	l4487
  5937                           
  5938                           ;OverLoad_B1.c: 48: if (getLightsControl_OK() == 1) {
  5939  0235  158A  2439  118A   	fcall	_getLightsControl_OK
  5940  0238  3A01               	xorlw	1
  5941  0239  1D03               	skipz
  5942  023A  2A3F               	goto	l4487
  5943                           
  5944                           ;OverLoad_B1.c: 49: Load.OK = 0;
  5945  023B  1683               	bsf	3,5	;RP0=1, select bank1
  5946  023C  1303               	bcf	3,6	;RP1=0, select bank1
  5947  023D  13CF               	bcf	_Load^(0+128),7
  5948                           
  5949                           ;OverLoad_B1.c: 50: Load.Count = 0;
  5950  023E  01EB               	clrf	(_Load^(0+128)+28)
  5951  023F                     l4487:	
  5952                           
  5953                           ;OverLoad_B1.c: 51: }
  5954                           ;OverLoad_B1.c: 52: }
  5955                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
  5956  023F  1683               	bsf	3,5	;RP0=1, select bank1
  5957  0240  1303               	bcf	3,6	;RP1=0, select bank1
  5958  0241  1CCF               	btfss	_Load^(0+128),1
  5959  0242  2B3F               	goto	l630
  5960                           
  5961                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
  5962  0243  154F               	bsf	_Load^(0+128),2
  5963                           
  5964                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
  5965  0244  1E4F               	btfss	_Load^(0+128),4
  5966  0245  2B3D               	goto	l631
  5967                           
  5968                           ;OverLoad_B1.c: 59: Load.Time++;
  5969  0246  3001               	movlw	1
  5970  0247  07D0               	addwf	(_Load^(0+128)+1),f
  5971  0248  1803               	skipnc
  5972  0249  0AD1               	incf	((_Load+1)^(0+128)+1),f
  5973  024A  3000               	movlw	0
  5974  024B  07D1               	addwf	((_Load+1)^(0+128)+1),f
  5975                           
  5976                           ;OverLoad_B1.c: 60: if (Load.Time >= 5) {
  5977  024C  3000               	movlw	0
  5978  024D  0251               	subwf	((_Load+1)^(0+128)+1),w
  5979  024E  3005               	movlw	5
  5980  024F  1903               	skipnz
  5981  0250  0250               	subwf	(_Load^(0+128)+1),w
  5982  0251  1C03               	skipc
  5983  0252  0008               	return
  5984                           
  5985                           ;OverLoad_B1.c: 61: Load.Time = 0;
  5986  0253  01D0               	clrf	(_Load^(0+128)+1)
  5987  0254  01D1               	clrf	((_Load+1)^(0+128)+1)
  5988                           
  5989                           ;OverLoad_B1.c: 62: Load.ADtoGO = 0;
  5990  0255  124F               	bcf	_Load^(0+128),4
  5991                           
  5992                           ;OverLoad_B1.c: 63: Load.LightsCount = getMain_Lights_Count();
  5993  0256  158A  250C  118A   	fcall	_getMain_Lights_Count
  5994  0259  1283               	bcf	3,5	;RP0=0, select bank0
  5995  025A  1303               	bcf	3,6	;RP1=0, select bank0
  5996  025B  00DD               	movwf	??_Load_Main
  5997  025C  085D               	movf	??_Load_Main,w
  5998  025D  1683               	bsf	3,5	;RP0=1, select bank1
  5999  025E  1303               	bcf	3,6	;RP1=0, select bank1
  6000  025F  00ED               	movwf	(_Load^(0+128)+30)
  6001                           
  6002                           ;OverLoad_B1.c: 66: for (i = 0; i < 4; i++) {
  6003  0260  1283               	bcf	3,5	;RP0=0, select bank0
  6004  0261  1303               	bcf	3,6	;RP1=0, select bank0
  6005  0262  01E2               	clrf	Load_Main@i
  6006  0263  3004               	movlw	4
  6007  0264  0262               	subwf	Load_Main@i,w
  6008  0265  1803               	btfsc	3,0
  6009  0266  2A98               	goto	l4511
  6010  0267                     l4505:	
  6011                           
  6012                           ;OverLoad_B1.c: 67: Load.ADH += Load.AH[i];
  6013  0267  0862               	movf	Load_Main@i,w
  6014  0268  3ED9               	addlw	(_Load+10)& (0+255)
  6015  0269  0084               	movwf	4
  6016  026A  1383               	bcf	3,7	;select IRP bank1
  6017  026B  0800               	movf	0,w
  6018  026C  00DD               	movwf	??_Load_Main
  6019  026D  01DE               	clrf	??_Load_Main+1
  6020  026E  085D               	movf	??_Load_Main,w
  6021  026F  1683               	bsf	3,5	;RP0=1, select bank1
  6022  0270  1303               	bcf	3,6	;RP1=0, select bank1
  6023  0271  07D4               	addwf	(_Load^(0+128)+5),f
  6024  0272  1803               	skipnc
  6025  0273  0AD5               	incf	((_Load+1)^(0+128)+5),f
  6026  0274  1283               	bcf	3,5	;RP0=0, select bank0
  6027  0275  1303               	bcf	3,6	;RP1=0, select bank0
  6028  0276  085E               	movf	??_Load_Main+1,w
  6029  0277  1683               	bsf	3,5	;RP0=1, select bank1
  6030  0278  1303               	bcf	3,6	;RP1=0, select bank1
  6031  0279  07D5               	addwf	((_Load+1)^(0+128)+5),f
  6032                           
  6033                           ;OverLoad_B1.c: 68: Load.ADL += Load.AL[i];
  6034  027A  1283               	bcf	3,5	;RP0=0, select bank0
  6035  027B  1303               	bcf	3,6	;RP1=0, select bank0
  6036  027C  0862               	movf	Load_Main@i,w
  6037  027D  3EDE               	addlw	(_Load+15)& (0+255)
  6038  027E  0084               	movwf	4
  6039  027F  0800               	movf	0,w
  6040  0280  00DD               	movwf	??_Load_Main
  6041  0281  01DE               	clrf	??_Load_Main+1
  6042  0282  085D               	movf	??_Load_Main,w
  6043  0283  1683               	bsf	3,5	;RP0=1, select bank1
  6044  0284  1303               	bcf	3,6	;RP1=0, select bank1
  6045  0285  07D6               	addwf	(_Load^(0+128)+7),f
  6046  0286  1803               	skipnc
  6047  0287  0AD7               	incf	((_Load+1)^(0+128)+7),f
  6048  0288  1283               	bcf	3,5	;RP0=0, select bank0
  6049  0289  1303               	bcf	3,6	;RP1=0, select bank0
  6050  028A  085E               	movf	??_Load_Main+1,w
  6051  028B  1683               	bsf	3,5	;RP0=1, select bank1
  6052  028C  1303               	bcf	3,6	;RP1=0, select bank1
  6053  028D  07D7               	addwf	((_Load+1)^(0+128)+7),f
  6054  028E  3001               	movlw	1
  6055  028F  1283               	bcf	3,5	;RP0=0, select bank0
  6056  0290  1303               	bcf	3,6	;RP1=0, select bank0
  6057  0291  00DD               	movwf	??_Load_Main
  6058  0292  085D               	movf	??_Load_Main,w
  6059  0293  07E2               	addwf	Load_Main@i,f
  6060  0294  3004               	movlw	4
  6061  0295  0262               	subwf	Load_Main@i,w
  6062  0296  1C03               	skipc
  6063  0297  2A67               	goto	l4505
  6064  0298                     l4511:	
  6065                           
  6066                           ;OverLoad_B1.c: 69: }
  6067                           ;OverLoad_B1.c: 70: setLoad_AH_AL_Restore();
  6068  0298  158A  25A4  118A   	fcall	_setLoad_AH_AL_Restore
  6069                           
  6070                           ;OverLoad_B1.c: 71: Load.ADH /= 4;
  6071  029B  3002               	movlw	2
  6072  029C  1683               	bsf	3,5	;RP0=1, select bank1
  6073  029D  1303               	bcf	3,6	;RP1=0, select bank1
  6074  029E                     u5285:	
  6075  029E  1003               	clrc
  6076  029F  0CD5               	rrf	((_Load+1)^(0+128)+5),f
  6077  02A0  0CD4               	rrf	(_Load^(0+128)+5),f
  6078  02A1  3EFF               	addlw	-1
  6079  02A2  1D03               	skipz
  6080  02A3  2A9E               	goto	u5285
  6081                           
  6082                           ;OverLoad_B1.c: 72: Load.ADL /= 4;
  6083  02A4  3002               	movlw	2
  6084  02A5                     u5295:	
  6085  02A5  1003               	clrc
  6086  02A6  0CD7               	rrf	((_Load+1)^(0+128)+7),f
  6087  02A7  0CD6               	rrf	(_Load^(0+128)+7),f
  6088  02A8  3EFF               	addlw	-1
  6089  02A9  1D03               	skipz
  6090  02AA  2AA5               	goto	u5295
  6091                           
  6092                           ;OverLoad_B1.c: 74: if (Load.ADH > Load.ADL) {
  6093  02AB  0855               	movf	((_Load+1)^(0+128)+5),w
  6094  02AC  0257               	subwf	((_Load+1)^(0+128)+7),w
  6095  02AD  1D03               	skipz
  6096  02AE  2AB1               	goto	u5305
  6097  02AF  0854               	movf	(_Load^(0+128)+5),w
  6098  02B0  0256               	subwf	(_Load^(0+128)+7),w
  6099  02B1                     u5305:	
  6100  02B1  1803               	skipnc
  6101  02B2  0008               	return
  6102                           
  6103                           ;OverLoad_B1.c: 75: Load.AD = (Load.ADH - Load.ADL);
  6104  02B3  0356               	decf	(_Load^(0+128)+7),w
  6105  02B4  3AFF               	xorlw	255
  6106  02B5  0754               	addwf	(_Load^(0+128)+5),w
  6107  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  6108  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  6109  02B8  00DD               	movwf	??_Load_Main
  6110  02B9  085D               	movf	??_Load_Main,w
  6111  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  6112  02BB  1303               	bcf	3,6	;RP1=0, select bank1
  6113  02BC  00E3               	movwf	(_Load^(0+128)+20)
  6114                           
  6115                           ;OverLoad_B1.c: 77: Load.ADH = 0;
  6116  02BD  01D4               	clrf	(_Load^(0+128)+5)
  6117  02BE  01D5               	clrf	((_Load+1)^(0+128)+5)
  6118                           
  6119                           ;OverLoad_B1.c: 78: Load.ADL = 0;
  6120  02BF  01D6               	clrf	(_Load^(0+128)+7)
  6121  02C0  01D7               	clrf	((_Load+1)^(0+128)+7)
  6122                           
  6123                           ;OverLoad_B1.c: 79: if (Load.Count < 2) {
  6124  02C1  3002               	movlw	2
  6125  02C2  026B               	subwf	(_Load^(0+128)+28),w
  6126  02C3  1803               	skipnc
  6127  02C4  2AE6               	goto	l636
  6128                           
  6129                           ;OverLoad_B1.c: 80: Load.Count++;
  6130  02C5  3001               	movlw	1
  6131  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  6132  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  6133  02C8  00DD               	movwf	??_Load_Main
  6134  02C9  085D               	movf	??_Load_Main,w
  6135  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  6136  02CB  1303               	bcf	3,6	;RP1=0, select bank1
  6137  02CC  07EB               	addwf	(_Load^(0+128)+28),f
  6138                           
  6139                           ;OverLoad_B1.c: 81: if (Load.Count == 1) {
  6140  02CD  086B               	movf	(_Load^(0+128)+28),w
  6141  02CE  3A01               	xorlw	1
  6142  02CF  1D03               	skipz
  6143  02D0  2AD3               	goto	l4533
  6144                           
  6145                           ;OverLoad_B1.c: 82: Load.JudgeValue = 80;
  6146  02D1  3050               	movlw	80
  6147  02D2  2ADC               	goto	L17
  6148  02D3                     l4533:	
  6149                           ;OverLoad_B1.c: 83: } else if (Load.Count == 2) {
  6150                           
  6151  02D3  086B               	movf	(_Load^(0+128)+28),w
  6152  02D4  3A02               	xorlw	2
  6153  02D5  1D03               	skipz
  6154  02D6  2AE6               	goto	l636
  6155                           
  6156                           ;OverLoad_B1.c: 84: if (Load.LightsCount == 1) {
  6157  02D7  086D               	movf	(_Load^(0+128)+30),w
  6158  02D8  3A01               	xorlw	1
  6159  02D9  1D03               	skipz
  6160  02DA  2ADF               	goto	l4539
  6161                           
  6162                           ;OverLoad_B1.c: 85: Load.JudgeValue = 15;
  6163  02DB  300F               	movlw	15
  6164  02DC                     L17:	
  6165  02DC  00E7               	movwf	(_Load^(0+128)+24)
  6166  02DD  3000               	movlw	0
  6167  02DE  2AE5               	goto	L18
  6168  02DF                     l4539:	
  6169                           ;OverLoad_B1.c: 86: } else {
  6170                           
  6171                           
  6172                           ;OverLoad_B1.c: 87: Load.JudgeValue = (15 + Load.TotalLoad) - 0x08;
  6173  02DF  0858               	movf	(_Load^(0+128)+9),w
  6174  02E0  3E07               	addlw	7
  6175  02E1  00E7               	movwf	(_Load^(0+128)+24)
  6176  02E2  3000               	movlw	0
  6177  02E3  1803               	skipnc
  6178  02E4  3001               	movlw	1
  6179  02E5                     L18:	
  6180  02E5  00E8               	movwf	(_Load^(0+128)+25)
  6181  02E6                     l636:	
  6182                           
  6183                           ;OverLoad_B1.c: 88: }
  6184                           ;OverLoad_B1.c: 89: }
  6185                           ;OverLoad_B1.c: 90: }
  6186                           ;OverLoad_B1.c: 92: if (Load.AD >= Load.JudgeValue) {
  6187  02E6  0863               	movf	(_Load^(0+128)+20),w
  6188  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  6189  02E8  1303               	bcf	3,6	;RP1=0, select bank0
  6190  02E9  00DD               	movwf	??_Load_Main
  6191  02EA  01DE               	clrf	??_Load_Main+1
  6192  02EB  1683               	bsf	3,5	;RP0=1, select bank1
  6193  02EC  1303               	bcf	3,6	;RP1=0, select bank1
  6194  02ED  0868               	movf	((_Load+1)^(0+128)+24),w
  6195  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  6196  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  6197  02F0  025E               	subwf	??_Load_Main+1,w
  6198  02F1  1D03               	skipz
  6199  02F2  2AF9               	goto	u5355
  6200  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  6201  02F4  1303               	bcf	3,6	;RP1=0, select bank1
  6202  02F5  0867               	movf	(_Load^(0+128)+24),w
  6203  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  6204  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  6205  02F8  025D               	subwf	??_Load_Main,w
  6206  02F9                     u5355:	
  6207  02F9  1C03               	skipc
  6208  02FA  2B11               	goto	l4551
  6209                           
  6210                           ;OverLoad_B1.c: 93: Load.ErrorCount++;
  6211  02FB  3001               	movlw	1
  6212  02FC  00DD               	movwf	??_Load_Main
  6213  02FD  085D               	movf	??_Load_Main,w
  6214  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  6215  02FF  1303               	bcf	3,6	;RP1=0, select bank1
  6216  0300  07EC               	addwf	(_Load^(0+128)+29),f
  6217                           
  6218                           ;OverLoad_B1.c: 94: if (Load.ErrorCount > 2) {
  6219  0301  3003               	movlw	3
  6220  0302  026C               	subwf	(_Load^(0+128)+29),w
  6221  0303  1C03               	skipc
  6222  0304  0008               	return
  6223                           
  6224                           ;OverLoad_B1.c: 95: Load.ErrorCount = 0;
  6225  0305  01EC               	clrf	(_Load^(0+128)+29)
  6226                           
  6227                           ;OverLoad_B1.c: 97: Load.ERROR = 1;
  6228  0306  16CF               	bsf	_Load^(0+128),5
  6229                           
  6230                           ;OverLoad_B1.c: 98: setLED(1, 11);
  6231  0307  300B               	movlw	11
  6232  0308  1283               	bcf	3,5	;RP0=0, select bank0
  6233  0309  1303               	bcf	3,6	;RP1=0, select bank0
  6234  030A  00DD               	movwf	??_Load_Main
  6235  030B  085D               	movf	??_Load_Main,w
  6236  030C  00D5               	movwf	setLED@command
  6237  030D  3001               	movlw	1
  6238  030E  118A  2756         	fcall	_setLED
  6239                           
  6240                           ;OverLoad_B1.c: 106: }
  6241                           ;OverLoad_B1.c: 107: } else {
  6242  0310  0008               	return
  6243  0311                     l4551:	
  6244                           
  6245                           ;OverLoad_B1.c: 108: Load.ErrorCount = 0;
  6246  0311  1683               	bsf	3,5	;RP0=1, select bank1
  6247  0312  1303               	bcf	3,6	;RP1=0, select bank1
  6248  0313  01EC               	clrf	(_Load^(0+128)+29)
  6249                           
  6250                           ;OverLoad_B1.c: 109: if (Load.OK == 0) {
  6251  0314  1BCF               	btfsc	_Load^(0+128),7
  6252  0315  0008               	return
  6253                           
  6254                           ;OverLoad_B1.c: 110: Load.SafeCount++;
  6255  0316  3001               	movlw	1
  6256  0317  1283               	bcf	3,5	;RP0=0, select bank0
  6257  0318  1303               	bcf	3,6	;RP1=0, select bank0
  6258  0319  00DD               	movwf	??_Load_Main
  6259  031A  085D               	movf	??_Load_Main,w
  6260  031B  1683               	bsf	3,5	;RP0=1, select bank1
  6261  031C  1303               	bcf	3,6	;RP1=0, select bank1
  6262  031D  07EE               	addwf	(_Load^(0+128)+31),f
  6263                           
  6264                           ;OverLoad_B1.c: 111: if (Load.SafeCount >= 3) {
  6265  031E  3003               	movlw	3
  6266  031F  026E               	subwf	(_Load^(0+128)+31),w
  6267  0320  1C03               	skipc
  6268  0321  0008               	return
  6269                           
  6270                           ;OverLoad_B1.c: 112: Load.SafeCount = 0;
  6271  0322  01EE               	clrf	(_Load^(0+128)+31)
  6272                           
  6273                           ;OverLoad_B1.c: 113: Load.OK = 1;
  6274  0323  17CF               	bsf	_Load^(0+128),7
  6275                           
  6276                           ;OverLoad_B1.c: 114: Load.TotalLoad = Load.AD;
  6277  0324  0863               	movf	(_Load^(0+128)+20),w
  6278  0325  1283               	bcf	3,5	;RP0=0, select bank0
  6279  0326  1303               	bcf	3,6	;RP1=0, select bank0
  6280  0327  00DD               	movwf	??_Load_Main
  6281  0328  085D               	movf	??_Load_Main,w
  6282  0329  1683               	bsf	3,5	;RP0=1, select bank1
  6283  032A  1303               	bcf	3,6	;RP1=0, select bank1
  6284  032B  00D8               	movwf	(_Load^(0+128)+9)
  6285                           
  6286                           ;OverLoad_B1.c: 115: if (Load.LightsCount == 1) {
  6287  032C  086D               	movf	(_Load^(0+128)+30),w
  6288  032D  3A01               	xorlw	1
  6289  032E  1D03               	skipz
  6290  032F  2B35               	goto	l4569
  6291                           
  6292                           ;OverLoad_B1.c: 116: Load.JudgeValue = 15;
  6293  0330  300F               	movlw	15
  6294  0331  00E7               	movwf	(_Load^(0+128)+24)
  6295  0332  3000               	movlw	0
  6296  0333  00E8               	movwf	(_Load^(0+128)+25)
  6297                           
  6298                           ;OverLoad_B1.c: 117: } else {
  6299  0334  0008               	return
  6300  0335                     l4569:	
  6301                           
  6302                           ;OverLoad_B1.c: 118: Load.JudgeValue = (15 + Load.TotalLoad) - 0x08;
  6303  0335  0858               	movf	(_Load^(0+128)+9),w
  6304  0336  3E07               	addlw	7
  6305  0337  00E7               	movwf	(_Load^(0+128)+24)
  6306  0338  3000               	movlw	0
  6307  0339  1803               	skipnc
  6308  033A  3001               	movlw	1
  6309  033B  00E8               	movwf	(_Load^(0+128)+25)
  6310                           
  6311                           ;OverLoad_B1.c: 119: }
  6312                           ;OverLoad_B1.c: 120: }
  6313                           ;OverLoad_B1.c: 121: }
  6314                           ;OverLoad_B1.c: 122: }
  6315                           ;OverLoad_B1.c: 123: }
  6316                           ;OverLoad_B1.c: 124: }
  6317                           ;OverLoad_B1.c: 125: } else {
  6318  033C  0008               	return
  6319  033D                     l631:	
  6320                           
  6321                           ;OverLoad_B1.c: 126: Load.ADtoGO = 1;
  6322  033D  164F               	bsf	_Load^(0+128),4
  6323                           
  6324                           ;OverLoad_B1.c: 127: }
  6325                           ;OverLoad_B1.c: 128: } else {
  6326  033E  0008               	return
  6327  033F                     l630:	
  6328                           
  6329                           ;OverLoad_B1.c: 129: Load.OK = 1;
  6330  033F  17CF               	bsf	_Load^(0+128),7
  6331                           
  6332                           ;OverLoad_B1.c: 130: if (Load.LightsON == 1) {
  6333  0340  1D4F               	btfss	_Load^(0+128),2
  6334  0341  2B52               	goto	l4589
  6335                           
  6336                           ;OverLoad_B1.c: 131: Load.LightsON = 0;
  6337  0342  114F               	bcf	_Load^(0+128),2
  6338                           
  6339                           ;OverLoad_B1.c: 133: Load.Time = 0;
  6340  0343  01D0               	clrf	(_Load^(0+128)+1)
  6341  0344  01D1               	clrf	((_Load+1)^(0+128)+1)
  6342                           
  6343                           ;OverLoad_B1.c: 134: Load.ADtoGO = 0;
  6344  0345  124F               	bcf	_Load^(0+128),4
  6345                           
  6346                           ;OverLoad_B1.c: 135: setLoad_AH_AL_Restore();
  6347  0346  158A  25A4  118A   	fcall	_setLoad_AH_AL_Restore
  6348                           
  6349                           ;OverLoad_B1.c: 136: Load.Count = 0;
  6350  0349  1683               	bsf	3,5	;RP0=1, select bank1
  6351  034A  1303               	bcf	3,6	;RP1=0, select bank1
  6352  034B  01EB               	clrf	(_Load^(0+128)+28)
  6353                           
  6354                           ;OverLoad_B1.c: 137: Load.ErrorCount = 0;
  6355  034C  01EC               	clrf	(_Load^(0+128)+29)
  6356                           
  6357                           ;OverLoad_B1.c: 138: Load.SafeCount = 0;
  6358  034D  01EE               	clrf	(_Load^(0+128)+31)
  6359                           
  6360                           ;OverLoad_B1.c: 140: Load.ADH = 0;
  6361  034E  01D4               	clrf	(_Load^(0+128)+5)
  6362  034F  01D5               	clrf	((_Load+1)^(0+128)+5)
  6363                           
  6364                           ;OverLoad_B1.c: 141: Load.ADL = 0;
  6365  0350  01D6               	clrf	(_Load^(0+128)+7)
  6366  0351  01D7               	clrf	((_Load+1)^(0+128)+7)
  6367  0352                     l4589:	
  6368                           
  6369                           ;OverLoad_B1.c: 142: }
  6370                           ;OverLoad_B1.c: 143: if (Load.ERROR == 1) {
  6371  0352  1ECF               	btfss	_Load^(0+128),5
  6372  0353  0008               	return
  6373                           
  6374                           ;OverLoad_B1.c: 144: Load.ErrorTime++;
  6375  0354  3001               	movlw	1
  6376  0355  07D2               	addwf	(_Load^(0+128)+3),f
  6377  0356  1803               	skipnc
  6378  0357  0AD3               	incf	((_Load+1)^(0+128)+3),f
  6379  0358  3000               	movlw	0
  6380  0359  07D3               	addwf	((_Load+1)^(0+128)+3),f
  6381                           
  6382                           ;OverLoad_B1.c: 145: if (Load.ErrorTime >= 1000)
  6383  035A  3003               	movlw	3
  6384  035B  0253               	subwf	((_Load+1)^(0+128)+3),w
  6385  035C  30E8               	movlw	232
  6386  035D  1903               	skipnz
  6387  035E  0252               	subwf	(_Load^(0+128)+3),w
  6388  035F  1C03               	skipc
  6389  0360  0008               	return
  6390                           
  6391                           ;OverLoad_B1.c: 146: {
  6392                           ;OverLoad_B1.c: 147: Load.ErrorTime = 0;
  6393  0361  01D2               	clrf	(_Load^(0+128)+3)
  6394  0362  01D3               	clrf	((_Load+1)^(0+128)+3)
  6395                           
  6396                           ;OverLoad_B1.c: 149: setLED(1, 10);
  6397  0363  300A               	movlw	10
  6398  0364  1283               	bcf	3,5	;RP0=0, select bank0
  6399  0365  1303               	bcf	3,6	;RP1=0, select bank0
  6400  0366  00DD               	movwf	??_Load_Main
  6401  0367  085D               	movf	??_Load_Main,w
  6402  0368  00D5               	movwf	setLED@command
  6403  0369  3001               	movlw	1
  6404  036A  118A  2756         	fcall	_setLED
  6405                           
  6406                           ;OverLoad_B1.c: 150: Load.ERROR = 0;
  6407  036C  1683               	bsf	3,5	;RP0=1, select bank1
  6408  036D  1303               	bcf	3,6	;RP1=0, select bank1
  6409  036E  12CF               	bcf	_Load^(0+128),5
  6410                           
  6411                           ;OverLoad_B1.c: 151: }
  6412                           ;OverLoad_B1.c: 152: }
  6413                           ;OverLoad_B1.c: 153: }
  6414                           ;OverLoad_B1.c: 154: } else {
  6415  036F  0008               	return
  6416  0370                     l625:	
  6417                           
  6418                           ;OverLoad_B1.c: 155: if (myMain.PowerON == 1) {
  6419  0370  1283               	bcf	3,5	;RP0=0, select bank0
  6420  0371  1303               	bcf	3,6	;RP1=0, select bank0
  6421  0372  1C20               	btfss	_myMain,0
  6422  0373  0008               	return
  6423                           
  6424                           ;OverLoad_B1.c: 156: Load.Enable = 1;
  6425  0374  1683               	bsf	3,5	;RP0=1, select bank1
  6426  0375  1303               	bcf	3,6	;RP1=0, select bank1
  6427  0376  144F               	bsf	_Load^(0+128),0
  6428  0377  0008               	return
  6429  0378                     __end_of_Load_Main:	
  6430                           
  6431                           	psect	text34
  6432  0D0C                     __ptext34:	
  6433 ;; *************** function _getMain_Lights_Count *****************
  6434 ;; Defined at:
  6435 ;;		line 380 in file "../src/Main_B1.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;		None
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;  status1         1    3[BANK0 ] unsigned char 
  6440 ;;  status3         1    2[BANK0 ] unsigned char 
  6441 ;;  status2         1    1[BANK0 ] unsigned char 
  6442 ;;  count           1    0[BANK0 ] unsigned char 
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  1    wreg      unsigned char 
  6445 ;; Registers used:
  6446 ;;		wreg, status,2, status,0
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6452 ;;      Params:         0       0       0       0
  6453 ;;      Locals:         0       4       0       0
  6454 ;;      Temps:          1       0       0       0
  6455 ;;      Totals:         1       4       0       0
  6456 ;;Total ram usage:        5 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    2
  6459 ;; This function calls:
  6460 ;;		Nothing
  6461 ;; This function is called by:
  6462 ;;		_Load_Main
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           
  6467                           ;psect for function _getMain_Lights_Count
  6468  0D0C                     _getMain_Lights_Count:	
  6469                           
  6470                           ;Main_B1.c: 381: char status1 = 0, status2 = 0, status3 = 0, count = 0;
  6471                           
  6472                           ;incstack = 0
  6473                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  6474  0D0C  1283               	bcf	3,5	;RP0=0, select bank0
  6475  0D0D  1303               	bcf	3,6	;RP1=0, select bank0
  6476  0D0E  01D8               	clrf	getMain_Lights_Count@status1
  6477  0D0F  01D6               	clrf	getMain_Lights_Count@status2
  6478  0D10  01D7               	clrf	getMain_Lights_Count@status3
  6479  0D11  01D5               	clrf	getMain_Lights_Count@count
  6480                           
  6481                           ;Main_B1.c: 387: status1 = Lights1.Status == 1 ? 1 : 0;
  6482  0D12  3000               	movlw	0
  6483  0D13  1942               	btfsc	_Lights1,2
  6484  0D14  3001               	movlw	1
  6485  0D15  00D8               	movwf	getMain_Lights_Count@status1
  6486                           
  6487                           ;Main_B1.c: 396: return count = (status1 + status2 + status3);
  6488  0D16  0856               	movf	getMain_Lights_Count@status2,w
  6489  0D17  0758               	addwf	getMain_Lights_Count@status1,w
  6490  0D18  00F4               	movwf	??_getMain_Lights_Count
  6491  0D19  0857               	movf	getMain_Lights_Count@status3,w
  6492  0D1A  0774               	addwf	??_getMain_Lights_Count,w
  6493  0D1B  00D5               	movwf	getMain_Lights_Count@count
  6494  0D1C  0008               	return
  6495  0D1D                     __end_of_getMain_Lights_Count:	
  6496                           
  6497                           	psect	text35
  6498  0C39                     __ptext35:	
  6499 ;; *************** function _getLightsControl_OK *****************
  6500 ;; Defined at:
  6501 ;;		line 253 in file "../src/TriacRelay_B1.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;		None
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;  loadok          1    4[COMMON] unsigned char 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  1    wreg      unsigned char 
  6508 ;; Registers used:
  6509 ;;		wreg, status,2
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6515 ;;      Params:         0       0       0       0
  6516 ;;      Locals:         1       0       0       0
  6517 ;;      Temps:          0       0       0       0
  6518 ;;      Totals:         1       0       0       0
  6519 ;;Total ram usage:        1 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    2
  6522 ;; This function calls:
  6523 ;;		Nothing
  6524 ;; This function is called by:
  6525 ;;		_Load_Main
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           
  6530                           ;psect for function _getLightsControl_OK
  6531  0C39                     _getLightsControl_OK:	
  6532                           
  6533                           ;TriacRelay_B1.c: 254: char loadok = LightsControl.LoadOK == 1 ? 1 : 0;
  6534                           
  6535                           ;incstack = 0
  6536                           ; Regs used in _getLightsControl_OK: [wreg+status,2]
  6537  0C39  3000               	movlw	0
  6538  0C3A  1979               	btfsc	_LightsControl,2
  6539  0C3B  3001               	movlw	1
  6540  0C3C  00F4               	movwf	getLightsControl_OK@loadok
  6541                           
  6542                           ;TriacRelay_B1.c: 255: return loadok;
  6543  0C3D  0874               	movf	getLightsControl_OK@loadok,w
  6544  0C3E  0008               	return
  6545  0C3F                     __end_of_getLightsControl_OK:	
  6546                           
  6547                           	psect	text36
  6548  0C33                     __ptext36:	
  6549 ;; *************** function _getLightsControl_GO *****************
  6550 ;; Defined at:
  6551 ;;		line 247 in file "../src/TriacRelay_B1.c"
  6552 ;; Parameters:    Size  Location     Type
  6553 ;;		None
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;  loadgo          1    4[COMMON] unsigned char 
  6556 ;; Return value:  Size  Location     Type
  6557 ;;                  1    wreg      unsigned char 
  6558 ;; Registers used:
  6559 ;;		wreg, status,2
  6560 ;; Tracked objects:
  6561 ;;		On entry : 0/0
  6562 ;;		On exit  : 0/0
  6563 ;;		Unchanged: 0/0
  6564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6565 ;;      Params:         0       0       0       0
  6566 ;;      Locals:         1       0       0       0
  6567 ;;      Temps:          0       0       0       0
  6568 ;;      Totals:         1       0       0       0
  6569 ;;Total ram usage:        1 bytes
  6570 ;; Hardware stack levels used:    1
  6571 ;; Hardware stack levels required when called:    2
  6572 ;; This function calls:
  6573 ;;		Nothing
  6574 ;; This function is called by:
  6575 ;;		_Load_Main
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           
  6580                           ;psect for function _getLightsControl_GO
  6581  0C33                     _getLightsControl_GO:	
  6582                           
  6583                           ;TriacRelay_B1.c: 248: char loadgo = LightsControl.LoadGO == 1 ? 1 : 0;
  6584                           
  6585                           ;incstack = 0
  6586                           ; Regs used in _getLightsControl_GO: [wreg+status,2]
  6587  0C33  3000               	movlw	0
  6588  0C34  18F9               	btfsc	_LightsControl,1
  6589  0C35  3001               	movlw	1
  6590  0C36  00F4               	movwf	getLightsControl_GO@loadgo
  6591                           
  6592                           ;TriacRelay_B1.c: 249: return loadgo;
  6593  0C37  0874               	movf	getLightsControl_GO@loadgo,w
  6594  0C38  0008               	return
  6595  0C39                     __end_of_getLightsControl_GO:	
  6596                           
  6597                           	psect	text37
  6598  0C2D                     __ptext37:	
  6599 ;; *************** function _Load_Initialization *****************
  6600 ;; Defined at:
  6601 ;;		line 9 in file "../src/OverLoad_B1.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;		None
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;		None
  6606 ;; Return value:  Size  Location     Type
  6607 ;;		None               void
  6608 ;; Registers used:
  6609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6615 ;;      Params:         0       0       0       0
  6616 ;;      Locals:         0       0       0       0
  6617 ;;      Temps:          0       0       0       0
  6618 ;;      Totals:         0       0       0       0
  6619 ;;Total ram usage:        0 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    3
  6622 ;; This function calls:
  6623 ;;		_setLoad_AH_AL_Restore
  6624 ;; This function is called by:
  6625 ;;		_main
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           
  6630                           ;psect for function _Load_Initialization
  6631  0C2D                     _Load_Initialization:	
  6632                           
  6633                           ;OverLoad_B1.c: 10: Load.OK = 1;
  6634                           
  6635                           ;incstack = 0
  6636                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6637  0C2D  1683               	bsf	3,5	;RP0=1, select bank1
  6638  0C2E  1303               	bcf	3,6	;RP1=0, select bank1
  6639  0C2F  17CF               	bsf	_Load^(0+128),7
  6640                           
  6641                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6642  0C30  158A  25A4         	fcall	_setLoad_AH_AL_Restore
  6643  0C32  0008               	return
  6644  0C33                     __end_of_Load_Initialization:	
  6645                           
  6646                           	psect	text38
  6647  0DA4                     __ptext38:	
  6648 ;; *************** function _setLoad_AH_AL_Restore *****************
  6649 ;; Defined at:
  6650 ;;		line 263 in file "../src/OverLoad_B1.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;		None
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;  i               1    5[COMMON] unsigned char 
  6655 ;; Return value:  Size  Location     Type
  6656 ;;		None               void
  6657 ;; Registers used:
  6658 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6664 ;;      Params:         0       0       0       0
  6665 ;;      Locals:         1       0       0       0
  6666 ;;      Temps:          1       0       0       0
  6667 ;;      Totals:         2       0       0       0
  6668 ;;Total ram usage:        2 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    2
  6671 ;; This function calls:
  6672 ;;		Nothing
  6673 ;; This function is called by:
  6674 ;;		_Load_Initialization
  6675 ;;		_Load_Main
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           
  6680                           ;psect for function _setLoad_AH_AL_Restore
  6681  0DA4                     _setLoad_AH_AL_Restore:	
  6682                           
  6683                           ;OverLoad_B1.c: 264: char i;
  6684                           ;OverLoad_B1.c: 265: for (i = 0; i < 5; i++) {
  6685                           
  6686                           ;incstack = 0
  6687                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6688  0DA4  01F5               	clrf	setLoad_AH_AL_Restore@i
  6689  0DA5                     L19:	
  6690  0DA5  3005               	movlw	5
  6691  0DA6  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6692  0DA7  1803               	btfsc	3,0
  6693  0DA8  0008               	return
  6694                           
  6695                           ;OverLoad_B1.c: 266: Load.AH[i] = 0;
  6696  0DA9  0875               	movf	setLoad_AH_AL_Restore@i,w
  6697  0DAA  3ED9               	addlw	(_Load+10)& (0+255)
  6698  0DAB  0084               	movwf	4
  6699  0DAC  1383               	bcf	3,7	;select IRP bank1
  6700  0DAD  0180               	clrf	0
  6701                           
  6702                           ;OverLoad_B1.c: 267: Load.AL[i] = 0xff;
  6703  0DAE  30FF               	movlw	255
  6704  0DAF  00F4               	movwf	??_setLoad_AH_AL_Restore
  6705  0DB0  0875               	movf	setLoad_AH_AL_Restore@i,w
  6706  0DB1  3EDE               	addlw	(_Load+15)& (0+255)
  6707  0DB2  0084               	movwf	4
  6708  0DB3  0874               	movf	??_setLoad_AH_AL_Restore,w
  6709  0DB4  0080               	movwf	0
  6710  0DB5  3001               	movlw	1
  6711  0DB6  00F4               	movwf	??_setLoad_AH_AL_Restore
  6712  0DB7  0874               	movf	??_setLoad_AH_AL_Restore,w
  6713  0DB8  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6714  0DB9  2DA5               	goto	L19
  6715  0DBA                     __end_of_setLoad_AH_AL_Restore:	
  6716                           
  6717                           	psect	text39
  6718  0C6B                     __ptext39:	
  6719 ;; *************** function _Lights_Main *****************
  6720 ;; Defined at:
  6721 ;;		line 54 in file "../src/TriacRelay_B1.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;		None
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;		None
  6726 ;; Return value:  Size  Location     Type
  6727 ;;		None               void
  6728 ;; Registers used:
  6729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6735 ;;      Params:         0       0       0       0
  6736 ;;      Locals:         0       0       0       0
  6737 ;;      Temps:          0       0       0       0
  6738 ;;      Totals:         0       0       0       0
  6739 ;;Total ram usage:        0 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    6
  6742 ;; This function calls:
  6743 ;;		_Lights_Close
  6744 ;;		_Lights_Control
  6745 ;;		_setLights_Main
  6746 ;; This function is called by:
  6747 ;;		_main
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           
  6752                           ;psect for function _Lights_Main
  6753  0C6B                     _Lights_Main:	
  6754                           
  6755                           ;TriacRelay_B1.c: 56: setLights_Main(1);
  6756                           
  6757                           ;incstack = 0
  6758                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6759  0C6B  3001               	movlw	1
  6760  0C6C  158A  2759  158A   	fcall	_setLights_Main
  6761                           
  6762                           ;TriacRelay_B1.c: 57: Lights_Control(1);
  6763  0C6F  3001               	movlw	1
  6764  0C70  118A  2628  158A   	fcall	_Lights_Control
  6765                           
  6766                           ;TriacRelay_B1.c: 70: Lights_Close();
  6767  0C73  158A  2540         	fcall	_Lights_Close
  6768  0C75  0008               	return
  6769  0C76                     __end_of_Lights_Main:	
  6770                           
  6771                           	psect	text40
  6772  0F59                     __ptext40:	
  6773 ;; *************** function _setLights_Main *****************
  6774 ;; Defined at:
  6775 ;;		line 82 in file "../src/TriacRelay_B1.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  lights          1    wreg     unsigned char 
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;  lights          1   19[BANK0 ] unsigned char 
  6780 ;; Return value:  Size  Location     Type
  6781 ;;		None               void
  6782 ;; Registers used:
  6783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6789 ;;      Params:         0       0       0       0
  6790 ;;      Locals:         0       3       0       0
  6791 ;;      Temps:          0       3       0       0
  6792 ;;      Totals:         0       6       0       0
  6793 ;;Total ram usage:        6 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; Hardware stack levels required when called:    5
  6796 ;; This function calls:
  6797 ;;		_LightsPointSelect
  6798 ;;		_getLoad_OK
  6799 ;;		_getMain_All_Error_Status
  6800 ;;		_setLights
  6801 ;; This function is called by:
  6802 ;;		_Lights_Main
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           
  6807                           ;psect for function _setLights_Main
  6808  0F59                     _setLights_Main:	
  6809                           
  6810                           ;incstack = 0
  6811                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6812                           ;setLights_Main@lights stored from wreg
  6813  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  6814  0F5A  1303               	bcf	3,6	;RP1=0, select bank0
  6815  0F5B  00E8               	movwf	setLights_Main@lights
  6816                           
  6817                           ;TriacRelay_B1.c: 83: LightsPointSelect(lights);
  6818  0F5C  0868               	movf	setLights_Main@lights,w
  6819  0F5D  158A  2499  158A   	fcall	_LightsPointSelect
  6820                           
  6821                           ;TriacRelay_B1.c: 84: if (Lights->GO == 0) {
  6822  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  6823  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  6824  0F62  0835               	movf	_Lights,w
  6825  0F63  0084               	movwf	4
  6826  0F64  1383               	bcf	3,7	;select IRP bank0
  6827  0F65  1880               	btfsc	0,1
  6828  0F66  0008               	return
  6829                           
  6830                           ;TriacRelay_B1.c: 85: if (Lights->Trigger == 1) {
  6831  0F67  0835               	movf	_Lights,w
  6832  0F68  0084               	movwf	4
  6833  0F69  1D80               	btfss	0,3
  6834  0F6A  0008               	return
  6835                           
  6836                           ;TriacRelay_B1.c: 86: if (getMain_All_Error_Status(0) == 0) {
  6837  0F6B  3000               	movlw	0
  6838  0F6C  158A  27AA  158A   	fcall	_getMain_All_Error_Status
  6839  0F6F  3800               	iorlw	0
  6840  0F70  1D03               	skipz
  6841  0F71  2F90               	goto	l1139
  6842                           
  6843                           ;TriacRelay_B1.c: 87: if (LightsControl.LoadOK == 1) {
  6844  0F72  1D79               	btfss	_LightsControl,2
  6845  0F73  2F91               	goto	l1145
  6846                           
  6847                           ;TriacRelay_B1.c: 88: LightsControl.LoadOK = getLoad_OK() == 1 ? 0 : LightsControl.LoadO
      +                          K;
  6848  0F74  158A  2453  158A   	fcall	_getLoad_OK
  6849  0F77  3A01               	xorlw	1
  6850  0F78  1903               	skipnz
  6851  0F79  2F87               	goto	l4209
  6852  0F7A  0C79               	rrf	_LightsControl,w
  6853  0F7B  1283               	bcf	3,5	;RP0=0, select bank0
  6854  0F7C  1303               	bcf	3,6	;RP1=0, select bank0
  6855  0F7D  00E3               	movwf	??_setLights_Main
  6856  0F7E  0C63               	rrf	??_setLights_Main,w
  6857  0F7F  3901               	andlw	1
  6858  0F80  00E4               	movwf	??_setLights_Main+1
  6859  0F81  01E5               	clrf	??_setLights_Main+2
  6860  0F82  0864               	movf	??_setLights_Main+1,w
  6861  0F83  00E6               	movwf	_setLights_Main$4453
  6862  0F84  0865               	movf	??_setLights_Main+2,w
  6863  0F85  00E7               	movwf	_setLights_Main$4453+1
  6864  0F86  2F8B               	goto	l4211
  6865  0F87                     l4209:	
  6866  0F87  1283               	bcf	3,5	;RP0=0, select bank0
  6867  0F88  1303               	bcf	3,6	;RP1=0, select bank0
  6868  0F89  01E6               	clrf	_setLights_Main$4453
  6869  0F8A  01E7               	clrf	_setLights_Main$4453+1
  6870  0F8B                     l4211:	
  6871  0F8B  0866               	movf	_setLights_Main$4453,w
  6872  0F8C  1179               	bcf	_LightsControl,2
  6873  0F8D  1D03               	skipz
  6874  0F8E  1579               	bsf	_LightsControl,2
  6875                           
  6876                           ;TriacRelay_B1.c: 89: }
  6877                           ;TriacRelay_B1.c: 90: } else {
  6878  0F8F  2F91               	goto	l1145
  6879  0F90                     l1139:	
  6880                           
  6881                           ;TriacRelay_B1.c: 91: LightsControl.LoadOK = 0;
  6882  0F90  1179               	bcf	_LightsControl,2
  6883  0F91                     l1145:	
  6884                           
  6885                           ;TriacRelay_B1.c: 92: }
  6886                           ;TriacRelay_B1.c: 94: if (LightsControl.LoadOK == 0) {
  6887  0F91  1979               	btfsc	_LightsControl,2
  6888  0F92  0008               	return
  6889                           
  6890                           ;TriacRelay_B1.c: 95: Lights->Trigger = 0;
  6891  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  6892  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  6893  0F95  0835               	movf	_Lights,w
  6894  0F96  0084               	movwf	4
  6895  0F97  1383               	bcf	3,7	;select IRP bank0
  6896  0F98  1180               	bcf	0,3
  6897                           
  6898                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  6899  0F99  0835               	movf	_Lights,w
  6900  0F9A  0084               	movwf	4
  6901  0F9B  1E00               	btfss	0,4
  6902  0F9C  2FA3               	goto	l4217
  6903                           
  6904                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  6905  0F9D  01DD               	clrf	setLights@status
  6906  0F9E  0ADD               	incf	setLights@status,f
  6907  0F9F  0868               	movf	setLights_Main@lights,w
  6908  0FA0  118A  25B9         	fcall	_setLights
  6909                           
  6910                           ;TriacRelay_B1.c: 99: } else {
  6911  0FA2  0008               	return
  6912  0FA3                     l4217:	
  6913                           
  6914                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  6915  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  6916  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  6917  0FA5  01DD               	clrf	setLights@status
  6918  0FA6  0868               	movf	setLights_Main@lights,w
  6919  0FA7  118A  25B9         	fcall	_setLights
  6920  0FA9  0008               	return
  6921  0FAA                     __end_of_setLights_Main:	
  6922                           
  6923                           	psect	text41
  6924  05B9                     __ptext41:	
  6925 ;; *************** function _setLights *****************
  6926 ;; Defined at:
  6927 ;;		line 108 in file "../src/TriacRelay_B1.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;  lights          1    wreg     unsigned char 
  6930 ;;  status          1    8[BANK0 ] unsigned char 
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;  lights          1   13[BANK0 ] unsigned char 
  6933 ;; Return value:  Size  Location     Type
  6934 ;;		None               void
  6935 ;; Registers used:
  6936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6942 ;;      Params:         0       1       0       0
  6943 ;;      Locals:         0       3       0       0
  6944 ;;      Temps:          0       2       0       0
  6945 ;;      Totals:         0       6       0       0
  6946 ;;Total ram usage:        6 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    4
  6949 ;; This function calls:
  6950 ;;		_LightsPointSelect
  6951 ;;		_getMain_All_Error_Status
  6952 ;;		_setLights_Line
  6953 ;; This function is called by:
  6954 ;;		_setLights_Main
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           
  6959                           ;psect for function _setLights
  6960  05B9                     _setLights:	
  6961                           
  6962                           ;incstack = 0
  6963                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6964                           ;setLights@lights stored from wreg
  6965  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  6966  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  6967  05BB  00E2               	movwf	setLights@lights
  6968                           
  6969                           ;TriacRelay_B1.c: 110: LightsPointSelect(lights);
  6970  05BC  0862               	movf	setLights@lights,w
  6971  05BD  158A  2499  118A   	fcall	_LightsPointSelect
  6972                           
  6973                           ;TriacRelay_B1.c: 112: LightsControl.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
  6974  05C0  3000               	movlw	0
  6975  05C1  158A  27AA  118A   	fcall	_getMain_All_Error_Status
  6976  05C4  3A00               	xorlw	0
  6977  05C5  3000               	movlw	0
  6978  05C6  1903               	skipnz
  6979  05C7  3001               	movlw	1
  6980  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  6981  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  6982  05CA  00DE               	movwf	??_setLights
  6983  05CB  0DDE               	rlf	??_setLights,f
  6984  05CC  0DDE               	rlf	??_setLights,f
  6985  05CD  0879               	movf	_LightsControl,w
  6986  05CE  065E               	xorwf	??_setLights,w
  6987  05CF  39FB               	andlw	-5
  6988  05D0  065E               	xorwf	??_setLights,w
  6989  05D1  00F9               	movwf	_LightsControl
  6990                           
  6991                           ;TriacRelay_B1.c: 113: LightsControl.LoadGO = status == 1 ? 1 : LightsControl.LoadGO;
  6992  05D2  085D               	movf	setLights@status,w
  6993  05D3  3A01               	xorlw	1
  6994  05D4  1903               	skipnz
  6995  05D5  2DDE               	goto	l3981
  6996  05D6  0C79               	rrf	_LightsControl,w
  6997  05D7  3901               	andlw	1
  6998  05D8  00DE               	movwf	??_setLights
  6999  05D9  01DF               	clrf	??_setLights+1
  7000  05DA  085E               	movf	??_setLights,w
  7001  05DB  00E0               	movwf	_setLights$4457
  7002  05DC  085F               	movf	??_setLights+1,w
  7003  05DD  2DE1               	goto	L20
  7004  05DE                     l3981:	
  7005  05DE  3001               	movlw	1
  7006  05DF  00E0               	movwf	_setLights$4457
  7007  05E0  3000               	movlw	0
  7008  05E1                     L20:	
  7009  05E1  00E1               	movwf	_setLights$4457+1
  7010  05E2  0860               	movf	_setLights$4457,w
  7011  05E3  10F9               	bcf	_LightsControl,1
  7012  05E4  1D03               	skipz
  7013  05E5  14F9               	bsf	_LightsControl,1
  7014                           
  7015                           ;TriacRelay_B1.c: 115: Lights->GO = 1;
  7016  05E6  0835               	movf	_Lights,w
  7017  05E7  0084               	movwf	4
  7018  05E8  1383               	bcf	3,7	;select IRP bank0
  7019  05E9  1480               	bsf	0,1
  7020                           
  7021                           ;TriacRelay_B1.c: 116: if (status == 1) {
  7022  05EA  085D               	movf	setLights@status,w
  7023  05EB  3A01               	xorlw	1
  7024  05EC  1D03               	skipz
  7025  05ED  2E08               	goto	l3993
  7026                           
  7027                           ;TriacRelay_B1.c: 117: if (Lights->Status == 0) {
  7028  05EE  0835               	movf	_Lights,w
  7029  05EF  0084               	movwf	4
  7030  05F0  1900               	btfsc	0,2
  7031  05F1  2E20               	goto	l3997
  7032                           
  7033                           ;TriacRelay_B1.c: 118: Lights->Status = 1;
  7034  05F2  0835               	movf	_Lights,w
  7035  05F3  0084               	movwf	4
  7036  05F4  1500               	bsf	0,2
  7037                           
  7038                           ;TriacRelay_B1.c: 119: Lights->RelayValue = 10;
  7039  05F5  300A               	movlw	10
  7040  05F6  00DE               	movwf	??_setLights
  7041  05F7  0835               	movf	_Lights,w
  7042  05F8  3E06               	addlw	6
  7043  05F9  0084               	movwf	4
  7044  05FA  085E               	movf	??_setLights,w
  7045  05FB  0080               	movwf	0
  7046                           
  7047                           ;TriacRelay_B1.c: 120: Lights->TriacValue = 13;
  7048  05FC  300D               	movlw	13
  7049  05FD  00DE               	movwf	??_setLights
  7050  05FE  0835               	movf	_Lights,w
  7051  05FF  3E04               	addlw	4
  7052  0600  0084               	movwf	4
  7053  0601  085E               	movf	??_setLights,w
  7054  0602  0080               	movwf	0
  7055                           
  7056                           ;TriacRelay_B1.c: 121: setLights_Line(lights);
  7057  0603  0862               	movf	setLights@lights,w
  7058  0604  158A  24BF  118A   	fcall	_setLights_Line
  7059                           
  7060                           ;TriacRelay_B1.c: 122: }
  7061                           ;TriacRelay_B1.c: 123: } else {
  7062  0607  2E20               	goto	l3997
  7063  0608                     l3993:	
  7064                           
  7065                           ;TriacRelay_B1.c: 124: if (Lights->Status == 1) {
  7066  0608  1283               	bcf	3,5	;RP0=0, select bank0
  7067  0609  1303               	bcf	3,6	;RP1=0, select bank0
  7068  060A  0835               	movf	_Lights,w
  7069  060B  0084               	movwf	4
  7070  060C  1383               	bcf	3,7	;select IRP bank0
  7071  060D  1D00               	btfss	0,2
  7072  060E  2E20               	goto	l3997
  7073                           
  7074                           ;TriacRelay_B1.c: 125: Lights->Status = 0;
  7075  060F  0835               	movf	_Lights,w
  7076  0610  0084               	movwf	4
  7077  0611  1100               	bcf	0,2
  7078                           
  7079                           ;TriacRelay_B1.c: 126: Lights->RelayValue = 4;
  7080  0612  3004               	movlw	4
  7081  0613  00DE               	movwf	??_setLights
  7082  0614  0835               	movf	_Lights,w
  7083  0615  3E06               	addlw	6
  7084  0616  0084               	movwf	4
  7085  0617  085E               	movf	??_setLights,w
  7086  0618  0080               	movwf	0
  7087                           
  7088                           ;TriacRelay_B1.c: 127: Lights->TriacValue = 7;
  7089  0619  3007               	movlw	7
  7090  061A  00DE               	movwf	??_setLights
  7091  061B  0835               	movf	_Lights,w
  7092  061C  3E04               	addlw	4
  7093  061D  0084               	movwf	4
  7094  061E  085E               	movf	??_setLights,w
  7095  061F  0080               	movwf	0
  7096  0620                     l3997:	
  7097                           
  7098                           ;TriacRelay_B1.c: 128: }
  7099                           ;TriacRelay_B1.c: 129: }
  7100                           ;TriacRelay_B1.c: 131: if (lights == 1) {
  7101  0620  1283               	bcf	3,5	;RP0=0, select bank0
  7102  0621  1303               	bcf	3,6	;RP1=0, select bank0
  7103  0622  0862               	movf	setLights@lights,w
  7104  0623  3A01               	xorlw	1
  7105  0624  1D03               	skipz
  7106  0625  0008               	return
  7107                           
  7108                           ;TriacRelay_B1.c: 132: RB2 = 1;
  7109  0626  1506               	bsf	6,2	;volatile
  7110  0627  0008               	return
  7111  0628                     __end_of_setLights:	
  7112                           
  7113                           	psect	text42
  7114  0CBF                     __ptext42:	
  7115 ;; *************** function _setLights_Line *****************
  7116 ;; Defined at:
  7117 ;;		line 214 in file "../src/TriacRelay_B1.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  lights          1    wreg     unsigned char 
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;  lights          1    0[BANK0 ] unsigned char 
  7122 ;; Return value:  Size  Location     Type
  7123 ;;		None               void
  7124 ;; Registers used:
  7125 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7131 ;;      Params:         0       0       0       0
  7132 ;;      Locals:         0       1       0       0
  7133 ;;      Temps:          0       0       0       0
  7134 ;;      Totals:         0       1       0       0
  7135 ;;Total ram usage:        1 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    3
  7138 ;; This function calls:
  7139 ;;		_LightsPointSelect
  7140 ;; This function is called by:
  7141 ;;		_setLights
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           
  7146                           ;psect for function _setLights_Line
  7147  0CBF                     _setLights_Line:	
  7148                           
  7149                           ;incstack = 0
  7150                           ; Regs used in _setLights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7151                           ;setLights_Line@lights stored from wreg
  7152  0CBF  1283               	bcf	3,5	;RP0=0, select bank0
  7153  0CC0  1303               	bcf	3,6	;RP1=0, select bank0
  7154  0CC1  00D5               	movwf	setLights_Line@lights
  7155                           
  7156                           ;TriacRelay_B1.c: 216: Lights1.Line = 0;
  7157  0CC2  1043               	bcf	_Lights1+1,0
  7158                           
  7159                           ;TriacRelay_B1.c: 224: LightsPointSelect(lights);
  7160  0CC3  0855               	movf	setLights_Line@lights,w
  7161  0CC4  158A  2499         	fcall	_LightsPointSelect
  7162                           
  7163                           ;TriacRelay_B1.c: 225: Lights->Line = 1;
  7164  0CC6  1283               	bcf	3,5	;RP0=0, select bank0
  7165  0CC7  1303               	bcf	3,6	;RP1=0, select bank0
  7166  0CC8  0A35               	incf	_Lights,w
  7167  0CC9  0084               	movwf	4
  7168  0CCA  1383               	bcf	3,7	;select IRP bank0
  7169  0CCB  1400               	bsf	0,0
  7170  0CCC  0008               	return
  7171  0CCD                     __end_of_setLights_Line:	
  7172                           
  7173                           	psect	text43
  7174  0FAA                     __ptext43:	
  7175 ;; *************** function _getMain_All_Error_Status *****************
  7176 ;; Defined at:
  7177 ;;		line 343 in file "../src/Main_B1.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;  command         1    wreg     unsigned char 
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;  command         1    6[BANK0 ] unsigned char 
  7182 ;;  status          1    7[BANK0 ] unsigned char 
  7183 ;; Return value:  Size  Location     Type
  7184 ;;                  1    wreg      unsigned char 
  7185 ;; Registers used:
  7186 ;;		wreg, status,2, status,0, pclath, cstack
  7187 ;; Tracked objects:
  7188 ;;		On entry : 0/0
  7189 ;;		On exit  : 0/0
  7190 ;;		Unchanged: 0/0
  7191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7192 ;;      Params:         0       0       0       0
  7193 ;;      Locals:         0       8       0       0
  7194 ;;      Temps:          1       0       0       0
  7195 ;;      Totals:         1       8       0       0
  7196 ;;Total ram usage:        9 bytes
  7197 ;; Hardware stack levels used:    1
  7198 ;; Hardware stack levels required when called:    3
  7199 ;; This function calls:
  7200 ;;		_getCDS_Status
  7201 ;; This function is called by:
  7202 ;;		_Load_Main
  7203 ;;		_setTemp_Main
  7204 ;;		_PIR_Main
  7205 ;;		_setSYSC_Main
  7206 ;;		_setLights_Main
  7207 ;;		_setLights
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function _getMain_All_Error_Status
  7213  0FAA                     _getMain_All_Error_Status:	
  7214                           
  7215                           ;incstack = 0
  7216                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0+pclath+cstack]
  7217                           ;getMain_All_Error_Status@command stored from wreg
  7218  0FAA  1283               	bcf	3,5	;RP0=0, select bank0
  7219  0FAB  1303               	bcf	3,6	;RP1=0, select bank0
  7220  0FAC  00DB               	movwf	getMain_All_Error_Status@command
  7221                           
  7222                           ;Main_B1.c: 344: char status = 0;
  7223  0FAD  01DC               	clrf	getMain_All_Error_Status@status
  7224                           
  7225                           ;Main_B1.c: 345: if (command != 1) {
  7226  0FAE  085B               	movf	getMain_All_Error_Status@command,w
  7227  0FAF  3A01               	xorlw	1
  7228  0FB0  1903               	skipnz
  7229  0FB1  2FB9               	goto	l2759
  7230                           
  7231                           ;Main_B1.c: 347: if (status == 0) {
  7232  0FB2  08DC               	movf	getMain_All_Error_Status@status,f
  7233  0FB3  1D03               	skipz
  7234  0FB4  2FB9               	goto	l2759
  7235                           
  7236                           ;Main_B1.c: 348: status = SYSC.ERROR == 1 ? 1 : 0;
  7237  0FB5  3000               	movlw	0
  7238  0FB6  18A8               	btfsc	_SYSC,1
  7239  0FB7  3001               	movlw	1
  7240  0FB8  00DC               	movwf	getMain_All_Error_Status@status
  7241  0FB9                     l2759:	
  7242                           
  7243                           ;Main_B1.c: 349: }
  7244                           ;Main_B1.c: 351: }
  7245                           ;Main_B1.c: 352: if (command != 2) {
  7246  0FB9  085B               	movf	getMain_All_Error_Status@command,w
  7247  0FBA  3A02               	xorlw	2
  7248  0FBB  1903               	skipnz
  7249  0FBC  2FCD               	goto	l544
  7250                           
  7251                           ;Main_B1.c: 354: if (status == 0) {
  7252  0FBD  08DC               	movf	getMain_All_Error_Status@status,f
  7253  0FBE  1D03               	skipz
  7254  0FBF  2FCD               	goto	l544
  7255                           
  7256                           ;Main_B1.c: 355: status = Temp.ERROR == 1 ? 2 : 0;
  7257  0FC0  18B6               	btfsc	_Temp,1
  7258  0FC1  2FC5               	goto	l2767
  7259  0FC2  01D5               	clrf	_getMain_All_Error_Status$2263
  7260  0FC3  01D6               	clrf	_getMain_All_Error_Status$2263+1
  7261  0FC4  2FC9               	goto	l549
  7262  0FC5                     l2767:	
  7263  0FC5  3002               	movlw	2
  7264  0FC6  00D5               	movwf	_getMain_All_Error_Status$2263
  7265  0FC7  3000               	movlw	0
  7266  0FC8  00D6               	movwf	_getMain_All_Error_Status$2263+1
  7267  0FC9                     l549:	
  7268  0FC9  0855               	movf	_getMain_All_Error_Status$2263,w
  7269  0FCA  00F5               	movwf	??_getMain_All_Error_Status
  7270  0FCB  0875               	movf	??_getMain_All_Error_Status,w
  7271  0FCC  00DC               	movwf	getMain_All_Error_Status@status
  7272  0FCD                     l544:	
  7273                           
  7274                           ;Main_B1.c: 356: }
  7275                           ;Main_B1.c: 358: }
  7276                           ;Main_B1.c: 360: if (command != 3) {
  7277  0FCD  085B               	movf	getMain_All_Error_Status@command,w
  7278  0FCE  3A03               	xorlw	3
  7279  0FCF  1903               	skipnz
  7280  0FD0  2FE6               	goto	l2777
  7281                           
  7282                           ;Main_B1.c: 362: if (status == 0) {
  7283  0FD1  08DC               	movf	getMain_All_Error_Status@status,f
  7284  0FD2  1D03               	skipz
  7285  0FD3  2FE6               	goto	l2777
  7286                           
  7287                           ;Main_B1.c: 363: status = Load.ERROR == 1 ? 3 : 0;
  7288  0FD4  1683               	bsf	3,5	;RP0=1, select bank1
  7289  0FD5  1303               	bcf	3,6	;RP1=0, select bank1
  7290  0FD6  1ACF               	btfsc	_Load^(0+128),5
  7291  0FD7  2FDD               	goto	l2775
  7292  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  7293  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  7294  0FDA  01D7               	clrf	_getMain_All_Error_Status$2272
  7295  0FDB  01D8               	clrf	_getMain_All_Error_Status$2272+1
  7296  0FDC  2FE2               	goto	l555
  7297  0FDD                     l2775:	
  7298  0FDD  3003               	movlw	3
  7299  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  7300  0FDF  00D7               	movwf	_getMain_All_Error_Status$2272
  7301  0FE0  3000               	movlw	0
  7302  0FE1  00D8               	movwf	_getMain_All_Error_Status$2272+1
  7303  0FE2                     l555:	
  7304  0FE2  0857               	movf	_getMain_All_Error_Status$2272,w
  7305  0FE3  00F5               	movwf	??_getMain_All_Error_Status
  7306  0FE4  0875               	movf	??_getMain_All_Error_Status,w
  7307  0FE5  00DC               	movwf	getMain_All_Error_Status@status
  7308  0FE6                     l2777:	
  7309                           
  7310                           ;Main_B1.c: 364: }
  7311                           ;Main_B1.c: 366: }
  7312                           ;Main_B1.c: 372: if (status == 0) {
  7313  0FE6  08DC               	movf	getMain_All_Error_Status@status,f
  7314  0FE7  1D03               	skipz
  7315  0FE8  2FFE               	goto	l556
  7316                           
  7317                           ;Main_B1.c: 373: status = getCDS_Status() == 0 ? 5 : 0;
  7318  0FE9  158A  245B  158A   	fcall	_getCDS_Status
  7319  0FEC  3A00               	xorlw	0
  7320  0FED  1903               	skipnz
  7321  0FEE  2FF4               	goto	l2783
  7322  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  7323  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  7324  0FF1  01D9               	clrf	_getMain_All_Error_Status$2274
  7325  0FF2  01DA               	clrf	_getMain_All_Error_Status$2274+1
  7326  0FF3  2FFA               	goto	l560
  7327  0FF4                     l2783:	
  7328  0FF4  3005               	movlw	5
  7329  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  7330  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  7331  0FF7  00D9               	movwf	_getMain_All_Error_Status$2274
  7332  0FF8  3000               	movlw	0
  7333  0FF9  00DA               	movwf	_getMain_All_Error_Status$2274+1
  7334  0FFA                     l560:	
  7335  0FFA  0859               	movf	_getMain_All_Error_Status$2274,w
  7336  0FFB  00F5               	movwf	??_getMain_All_Error_Status
  7337  0FFC  0875               	movf	??_getMain_All_Error_Status,w
  7338  0FFD  00DC               	movwf	getMain_All_Error_Status@status
  7339  0FFE                     l556:	
  7340                           
  7341                           ;Main_B1.c: 374: }
  7342                           ;Main_B1.c: 376: return status;
  7343  0FFE  085C               	movf	getMain_All_Error_Status@status,w
  7344  0FFF  0008               	return
  7345  1000                     __end_of_getMain_All_Error_Status:	
  7346                           
  7347                           	psect	text44
  7348  0C5B                     __ptext44:	
  7349 ;; *************** function _getCDS_Status *****************
  7350 ;; Defined at:
  7351 ;;		line 40 in file "../src/CDS_B1.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;		None
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;  status          1    4[COMMON] unsigned char 
  7356 ;; Return value:  Size  Location     Type
  7357 ;;                  1    wreg      unsigned char 
  7358 ;; Registers used:
  7359 ;;		wreg, status,2
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7365 ;;      Params:         0       0       0       0
  7366 ;;      Locals:         1       0       0       0
  7367 ;;      Temps:          0       0       0       0
  7368 ;;      Totals:         1       0       0       0
  7369 ;;Total ram usage:        1 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:    2
  7372 ;; This function calls:
  7373 ;;		Nothing
  7374 ;; This function is called by:
  7375 ;;		_getMain_All_Error_Status
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           
  7380                           ;psect for function _getCDS_Status
  7381  0C5B                     _getCDS_Status:	
  7382                           
  7383                           ;CDS_B1.c: 41: char status = _CDS.Status == 1 ? 1 : 0;
  7384                           
  7385                           ;incstack = 0
  7386                           ; Regs used in _getCDS_Status: [wreg+status,2]
  7387  0C5B  3000               	movlw	0
  7388  0C5C  1283               	bcf	3,5	;RP0=0, select bank0
  7389  0C5D  1303               	bcf	3,6	;RP1=0, select bank0
  7390  0C5E  1A2D               	btfsc	__CDS,4
  7391  0C5F  3001               	movlw	1
  7392  0C60  00F4               	movwf	getCDS_Status@status
  7393                           
  7394                           ;CDS_B1.c: 42: return status;
  7395  0C61  0874               	movf	getCDS_Status@status,w
  7396  0C62  0008               	return
  7397  0C63                     __end_of_getCDS_Status:	
  7398                           
  7399                           	psect	text45
  7400  0C53                     __ptext45:	
  7401 ;; *************** function _getLoad_OK *****************
  7402 ;; Defined at:
  7403 ;;		line 196 in file "../src/OverLoad_B1.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;		None
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;  ok              1    4[COMMON] unsigned char 
  7408 ;; Return value:  Size  Location     Type
  7409 ;;                  1    wreg      unsigned char 
  7410 ;; Registers used:
  7411 ;;		wreg, status,2
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7417 ;;      Params:         0       0       0       0
  7418 ;;      Locals:         1       0       0       0
  7419 ;;      Temps:          0       0       0       0
  7420 ;;      Totals:         1       0       0       0
  7421 ;;Total ram usage:        1 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; Hardware stack levels required when called:    2
  7424 ;; This function calls:
  7425 ;;		Nothing
  7426 ;; This function is called by:
  7427 ;;		_setLights_Main
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           
  7432                           ;psect for function _getLoad_OK
  7433  0C53                     _getLoad_OK:	
  7434                           
  7435                           ;OverLoad_B1.c: 197: char ok = Load.OK == 1 ? 1 : 0;
  7436                           
  7437                           ;incstack = 0
  7438                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7439  0C53  3000               	movlw	0
  7440  0C54  1683               	bsf	3,5	;RP0=1, select bank1
  7441  0C55  1303               	bcf	3,6	;RP1=0, select bank1
  7442  0C56  1BCF               	btfsc	_Load^(0+128),7
  7443  0C57  3001               	movlw	1
  7444  0C58  00F4               	movwf	getLoad_OK@ok
  7445                           
  7446                           ;OverLoad_B1.c: 199: return ok;
  7447  0C59  0874               	movf	getLoad_OK@ok,w
  7448  0C5A  0008               	return
  7449  0C5B                     __end_of_getLoad_OK:	
  7450                           
  7451                           	psect	text46
  7452  0628                     __ptext46:	
  7453 ;; *************** function _Lights_Control *****************
  7454 ;; Defined at:
  7455 ;;		line 148 in file "../src/TriacRelay_B1.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;  lights          1    wreg     unsigned char 
  7458 ;; Auto vars:     Size  Location     Type
  7459 ;;  lights          1    4[BANK0 ] unsigned char 
  7460 ;; Return value:  Size  Location     Type
  7461 ;;		None               void
  7462 ;; Registers used:
  7463 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7469 ;;      Params:         0       0       0       0
  7470 ;;      Locals:         0       3       0       0
  7471 ;;      Temps:          0       2       0       0
  7472 ;;      Totals:         0       5       0       0
  7473 ;;Total ram usage:        5 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    3
  7476 ;; This function calls:
  7477 ;;		_LightsPointSelect
  7478 ;; This function is called by:
  7479 ;;		_Lights_Main
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           
  7484                           ;psect for function _Lights_Control
  7485  0628                     _Lights_Control:	
  7486                           
  7487                           ;incstack = 0
  7488                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7489                           ;Lights_Control@lights stored from wreg
  7490  0628  1283               	bcf	3,5	;RP0=0, select bank0
  7491  0629  1303               	bcf	3,6	;RP1=0, select bank0
  7492  062A  00D9               	movwf	Lights_Control@lights
  7493                           
  7494                           ;TriacRelay_B1.c: 149: LightsPointSelect(lights);
  7495  062B  0859               	movf	Lights_Control@lights,w
  7496  062C  158A  2499  118A   	fcall	_LightsPointSelect
  7497                           
  7498                           ;TriacRelay_B1.c: 150: if (Lights->GO == 1) {
  7499  062F  1283               	bcf	3,5	;RP0=0, select bank0
  7500  0630  1303               	bcf	3,6	;RP1=0, select bank0
  7501  0631  0835               	movf	_Lights,w
  7502  0632  0084               	movwf	4
  7503  0633  1383               	bcf	3,7	;select IRP bank0
  7504  0634  1C80               	btfss	0,1
  7505  0635  0008               	return
  7506                           
  7507                           ;TriacRelay_B1.c: 151: Lights->Time++;
  7508  0636  3001               	movlw	1
  7509  0637  00D5               	movwf	??_Lights_Control
  7510  0638  0835               	movf	_Lights,w
  7511  0639  3E02               	addlw	2
  7512  063A  0084               	movwf	4
  7513  063B  0855               	movf	??_Lights_Control,w
  7514  063C  0780               	addwf	0,f
  7515                           
  7516                           ;TriacRelay_B1.c: 152: if (Lights->Time >= Lights->RelayValue && Lights->RelaySet == 0) 
      +                          {
  7517  063D  0835               	movf	_Lights,w
  7518  063E  3E06               	addlw	6
  7519  063F  0084               	movwf	4
  7520  0640  0800               	movf	0,w
  7521  0641  00D5               	movwf	??_Lights_Control
  7522  0642  0835               	movf	_Lights,w
  7523  0643  3E02               	addlw	2
  7524  0644  0084               	movwf	4
  7525  0645  0800               	movf	0,w
  7526  0646  00D6               	movwf	??_Lights_Control+1
  7527  0647  0855               	movf	??_Lights_Control,w
  7528  0648  0256               	subwf	??_Lights_Control+1,w
  7529  0649  1C03               	skipc
  7530  064A  2E62               	goto	l4235
  7531  064B  0835               	movf	_Lights,w
  7532  064C  0084               	movwf	4
  7533  064D  1B80               	btfsc	0,7
  7534  064E  2E62               	goto	l4235
  7535                           
  7536                           ;TriacRelay_B1.c: 153: Lights->RelaySet = 1;
  7537  064F  0835               	movf	_Lights,w
  7538  0650  0084               	movwf	4
  7539  0651  1780               	bsf	0,7
  7540                           
  7541                           ;TriacRelay_B1.c: 155: if (lights == 1) {
  7542  0652  0859               	movf	Lights_Control@lights,w
  7543  0653  3A01               	xorlw	1
  7544  0654  1D03               	skipz
  7545  0655  0008               	return
  7546                           
  7547                           ;TriacRelay_B1.c: 156: RA4 = Lights->Status == 1 ? 1 : 0;
  7548  0656  0835               	movf	_Lights,w
  7549  0657  0084               	movwf	4
  7550  0658  1D00               	btfss	0,2
  7551  0659  2E5E               	goto	u4740
  7552  065A  1283               	bcf	3,5	;RP0=0, select bank0
  7553  065B  1303               	bcf	3,6	;RP1=0, select bank0
  7554  065C  1605               	bsf	5,4	;volatile
  7555  065D  0008               	return
  7556  065E                     u4740:	
  7557  065E  1283               	bcf	3,5	;RP0=0, select bank0
  7558  065F  1303               	bcf	3,6	;RP1=0, select bank0
  7559  0660  1205               	bcf	5,4	;volatile
  7560                           
  7561                           ;TriacRelay_B1.c: 157: }
  7562                           ;TriacRelay_B1.c: 170: } else if (Lights->Time >= Lights->TriacValue) {
  7563  0661  0008               	return
  7564  0662                     l4235:	
  7565  0662  0835               	movf	_Lights,w
  7566  0663  3E04               	addlw	4
  7567  0664  0084               	movwf	4
  7568  0665  1383               	bcf	3,7	;select IRP bank0
  7569  0666  0800               	movf	0,w
  7570  0667  00D5               	movwf	??_Lights_Control
  7571  0668  0835               	movf	_Lights,w
  7572  0669  3E02               	addlw	2
  7573  066A  0084               	movwf	4
  7574  066B  0800               	movf	0,w
  7575  066C  00D6               	movwf	??_Lights_Control+1
  7576  066D  0855               	movf	??_Lights_Control,w
  7577  066E  0256               	subwf	??_Lights_Control+1,w
  7578  066F  1C03               	skipc
  7579  0670  0008               	return
  7580                           
  7581                           ;TriacRelay_B1.c: 171: Lights->Time = 0;
  7582  0671  0835               	movf	_Lights,w
  7583  0672  3E02               	addlw	2
  7584  0673  0084               	movwf	4
  7585  0674  0180               	clrf	0
  7586                           
  7587                           ;TriacRelay_B1.c: 172: Lights->GO = 0;
  7588  0675  0835               	movf	_Lights,w
  7589  0676  0084               	movwf	4
  7590  0677  1080               	bcf	0,1
  7591                           
  7592                           ;TriacRelay_B1.c: 173: Lights->RelaySet = 0;
  7593  0678  0835               	movf	_Lights,w
  7594  0679  0084               	movwf	4
  7595  067A  1380               	bcf	0,7
  7596                           
  7597                           ;TriacRelay_B1.c: 176: LightsControl.Detect = Lights->Status == 0 ? 1 : LightsControl.De
      +                          tect;
  7598  067B  0835               	movf	_Lights,w
  7599  067C  0084               	movwf	4
  7600  067D  1D00               	btfss	0,2
  7601  067E  2E87               	goto	l4247
  7602  067F  0879               	movf	_LightsControl,w
  7603  0680  3901               	andlw	1
  7604  0681  00D5               	movwf	??_Lights_Control
  7605  0682  01D6               	clrf	??_Lights_Control+1
  7606  0683  0855               	movf	??_Lights_Control,w
  7607  0684  00D7               	movwf	_Lights_Control$4460
  7608  0685  0856               	movf	??_Lights_Control+1,w
  7609  0686  2E8A               	goto	L21
  7610  0687                     l4247:	
  7611  0687  3001               	movlw	1
  7612  0688  00D7               	movwf	_Lights_Control$4460
  7613  0689  3000               	movlw	0
  7614  068A                     L21:	
  7615  068A  00D8               	movwf	_Lights_Control$4460+1
  7616  068B  0857               	movf	_Lights_Control$4460,w
  7617  068C  1079               	bcf	_LightsControl,0
  7618  068D  1D03               	skipz
  7619  068E  1479               	bsf	_LightsControl,0
  7620                           
  7621                           ;TriacRelay_B1.c: 180: if (lights == 1) {
  7622  068F  0859               	movf	Lights_Control@lights,w
  7623  0690  3A01               	xorlw	1
  7624  0691  1D03               	skipz
  7625  0692  0008               	return
  7626                           
  7627                           ;TriacRelay_B1.c: 181: RB2 = 0;
  7628  0693  1106               	bcf	6,2	;volatile
  7629  0694  0008               	return
  7630  0695                     __end_of_Lights_Control:	
  7631                           
  7632                           	psect	text47
  7633  0D40                     __ptext47:	
  7634 ;; *************** function _Lights_Close *****************
  7635 ;; Defined at:
  7636 ;;		line 74 in file "../src/TriacRelay_B1.c"
  7637 ;; Parameters:    Size  Location     Type
  7638 ;;		None
  7639 ;; Auto vars:     Size  Location     Type
  7640 ;;		None
  7641 ;; Return value:  Size  Location     Type
  7642 ;;		None               void
  7643 ;; Registers used:
  7644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7650 ;;      Params:         0       0       0       0
  7651 ;;      Locals:         0       0       0       0
  7652 ;;      Temps:          0       1       0       0
  7653 ;;      Totals:         0       1       0       0
  7654 ;;Total ram usage:        1 bytes
  7655 ;; Hardware stack levels used:    1
  7656 ;; Hardware stack levels required when called:    5
  7657 ;; This function calls:
  7658 ;;		_getMain_LightsStatus
  7659 ;; This function is called by:
  7660 ;;		_Lights_Main
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           
  7665                           ;psect for function _Lights_Close
  7666  0D40                     _Lights_Close:	
  7667                           
  7668                           ;TriacRelay_B1.c: 75: if (LightsControl.Detect == 1) {
  7669                           
  7670                           ;incstack = 0
  7671                           ; Regs used in _Lights_Close: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7672  0D40  1C79               	btfss	_LightsControl,0
  7673  0D41  0008               	return
  7674                           
  7675                           ;TriacRelay_B1.c: 76: LightsControl.Detect = 0;
  7676  0D42  1079               	bcf	_LightsControl,0
  7677                           
  7678                           ;TriacRelay_B1.c: 77: LightsControl.LoadGO = getMain_LightsStatus() == 0 ? 0 : 1;
  7679  0D43  158A  2553         	fcall	_getMain_LightsStatus
  7680  0D45  3800               	iorlw	0
  7681  0D46  3000               	movlw	0
  7682  0D47  1D03               	skipz
  7683  0D48  3001               	movlw	1
  7684  0D49  1283               	bcf	3,5	;RP0=0, select bank0
  7685  0D4A  1303               	bcf	3,6	;RP1=0, select bank0
  7686  0D4B  00D9               	movwf	??_Lights_Close
  7687  0D4C  0DD9               	rlf	??_Lights_Close,f
  7688  0D4D  0879               	movf	_LightsControl,w
  7689  0D4E  0659               	xorwf	??_Lights_Close,w
  7690  0D4F  39FD               	andlw	-3
  7691  0D50  0659               	xorwf	??_Lights_Close,w
  7692  0D51  00F9               	movwf	_LightsControl
  7693  0D52  0008               	return
  7694  0D53                     __end_of_Lights_Close:	
  7695                           
  7696                           	psect	text48
  7697  0D53                     __ptext48:	
  7698 ;; *************** function _getMain_LightsStatus *****************
  7699 ;; Defined at:
  7700 ;;		line 319 in file "../src/Main_B1.c"
  7701 ;; Parameters:    Size  Location     Type
  7702 ;;		None
  7703 ;; Auto vars:     Size  Location     Type
  7704 ;;  status          1    3[BANK0 ] unsigned char 
  7705 ;; Return value:  Size  Location     Type
  7706 ;;                  1    wreg      unsigned char 
  7707 ;; Registers used:
  7708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7709 ;; Tracked objects:
  7710 ;;		On entry : 0/0
  7711 ;;		On exit  : 0/0
  7712 ;;		Unchanged: 0/0
  7713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7714 ;;      Params:         0       0       0       0
  7715 ;;      Locals:         0       1       0       0
  7716 ;;      Temps:          0       1       0       0
  7717 ;;      Totals:         0       2       0       0
  7718 ;;Total ram usage:        2 bytes
  7719 ;; Hardware stack levels used:    1
  7720 ;; Hardware stack levels required when called:    4
  7721 ;; This function calls:
  7722 ;;		_getLights_Status
  7723 ;; This function is called by:
  7724 ;;		_setTemp_Main
  7725 ;;		_Lights_Close
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           
  7730                           ;psect for function _getMain_LightsStatus
  7731  0D53                     _getMain_LightsStatus:	
  7732                           
  7733                           ;Main_B1.c: 320: char status = 0;
  7734                           
  7735                           ;incstack = 0
  7736                           ; Regs used in _getMain_LightsStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7737  0D53  1283               	bcf	3,5	;RP0=0, select bank0
  7738  0D54  1303               	bcf	3,6	;RP1=0, select bank0
  7739  0D55  01D8               	clrf	getMain_LightsStatus@status
  7740                           
  7741                           ;Main_B1.c: 323: if (status == 0) {
  7742  0D56  08D8               	movf	getMain_LightsStatus@status,f
  7743  0D57  1D03               	skipz
  7744  0D58  2D65               	goto	l3971
  7745                           
  7746                           ;Main_B1.c: 324: status = getLights_Status(1) == 1 ? 1 : 0;
  7747  0D59  3001               	movlw	1
  7748  0D5A  158A  24FB         	fcall	_getLights_Status
  7749  0D5C  3A01               	xorlw	1
  7750  0D5D  3000               	movlw	0
  7751  0D5E  1903               	skipnz
  7752  0D5F  3001               	movlw	1
  7753  0D60  1283               	bcf	3,5	;RP0=0, select bank0
  7754  0D61  1303               	bcf	3,6	;RP1=0, select bank0
  7755  0D62  00D7               	movwf	??_getMain_LightsStatus
  7756  0D63  0857               	movf	??_getMain_LightsStatus,w
  7757  0D64  00D8               	movwf	getMain_LightsStatus@status
  7758  0D65                     l3971:	
  7759                           
  7760                           ;Main_B1.c: 325: }
  7761                           ;Main_B1.c: 339: return status;
  7762  0D65  0858               	movf	getMain_LightsStatus@status,w
  7763  0D66  0008               	return
  7764  0D67                     __end_of_getMain_LightsStatus:	
  7765                           
  7766                           	psect	text49
  7767  0CFB                     __ptext49:	
  7768 ;; *************** function _getLights_Status *****************
  7769 ;; Defined at:
  7770 ;;		line 200 in file "../src/TriacRelay_B1.c"
  7771 ;; Parameters:    Size  Location     Type
  7772 ;;  lights          1    wreg     unsigned char 
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  lights          1    0[BANK0 ] unsigned char 
  7775 ;;  status          1    1[BANK0 ] unsigned char 
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  1    wreg      unsigned char 
  7778 ;; Registers used:
  7779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7785 ;;      Params:         0       0       0       0
  7786 ;;      Locals:         0       2       0       0
  7787 ;;      Temps:          0       0       0       0
  7788 ;;      Totals:         0       2       0       0
  7789 ;;Total ram usage:        2 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    3
  7792 ;; This function calls:
  7793 ;;		_LightsPointSelect
  7794 ;; This function is called by:
  7795 ;;		_getMain_LightsStatus
  7796 ;;		_PIR_Main
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           
  7801                           ;psect for function _getLights_Status
  7802  0CFB                     _getLights_Status:	
  7803                           
  7804                           ;incstack = 0
  7805                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7806                           ;getLights_Status@lights stored from wreg
  7807  0CFB  1283               	bcf	3,5	;RP0=0, select bank0
  7808  0CFC  1303               	bcf	3,6	;RP1=0, select bank0
  7809  0CFD  00D5               	movwf	getLights_Status@lights
  7810                           
  7811                           ;TriacRelay_B1.c: 201: LightsPointSelect(lights);
  7812  0CFE  0855               	movf	getLights_Status@lights,w
  7813  0CFF  158A  2499         	fcall	_LightsPointSelect
  7814                           
  7815                           ;TriacRelay_B1.c: 202: char status = Lights->Status == 1 ? 1 : 0;
  7816  0D01  1283               	bcf	3,5	;RP0=0, select bank0
  7817  0D02  1303               	bcf	3,6	;RP1=0, select bank0
  7818  0D03  0835               	movf	_Lights,w
  7819  0D04  0084               	movwf	4
  7820  0D05  3000               	movlw	0
  7821  0D06  1383               	bcf	3,7	;select IRP bank0
  7822  0D07  1900               	btfsc	0,2
  7823  0D08  3001               	movlw	1
  7824  0D09  00D6               	movwf	getLights_Status@status
  7825                           
  7826                           ;TriacRelay_B1.c: 203: return status;
  7827  0D0A  0856               	movf	getLights_Status@status,w
  7828  0D0B  0008               	return
  7829  0D0C                     __end_of_getLights_Status:	
  7830                           
  7831                           	psect	text50
  7832  0C1C                     __ptext50:	
  7833 ;; *************** function _Lights_Initialization *****************
  7834 ;; Defined at:
  7835 ;;		line 34 in file "../src/TriacRelay_B1.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;		None
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;		None
  7840 ;; Return value:  Size  Location     Type
  7841 ;;		None               void
  7842 ;; Registers used:
  7843 ;;		wreg, status,2, status,0, pclath, cstack
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7849 ;;      Params:         0       0       0       0
  7850 ;;      Locals:         0       0       0       0
  7851 ;;      Temps:          0       0       0       0
  7852 ;;      Totals:         0       0       0       0
  7853 ;;Total ram usage:        0 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    4
  7856 ;; This function calls:
  7857 ;;		_setLights_Initialization
  7858 ;; This function is called by:
  7859 ;;		_main
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           
  7864                           ;psect for function _Lights_Initialization
  7865  0C1C                     _Lights_Initialization:	
  7866                           
  7867                           ;TriacRelay_B1.c: 36: setLights_Initialization(1);
  7868                           
  7869                           ;incstack = 0
  7870                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7871  0C1C  3001               	movlw	1
  7872  0C1D  158A  2445         	fcall	_setLights_Initialization
  7873  0C1F  0008               	return
  7874  0C20                     __end_of_Lights_Initialization:	
  7875                           
  7876                           	psect	text51
  7877  0C45                     __ptext51:	
  7878 ;; *************** function _setLights_Initialization *****************
  7879 ;; Defined at:
  7880 ;;		line 49 in file "../src/TriacRelay_B1.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;  lights          1    wreg     unsigned char 
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;  lights          1    0[BANK0 ] unsigned char 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;		None               void
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0, pclath, cstack
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7894 ;;      Params:         0       0       0       0
  7895 ;;      Locals:         0       1       0       0
  7896 ;;      Temps:          0       0       0       0
  7897 ;;      Totals:         0       1       0       0
  7898 ;;Total ram usage:        1 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; Hardware stack levels required when called:    3
  7901 ;; This function calls:
  7902 ;;		_LightsPointSelect
  7903 ;; This function is called by:
  7904 ;;		_Lights_Initialization
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           
  7909                           ;psect for function _setLights_Initialization
  7910  0C45                     _setLights_Initialization:	
  7911                           
  7912                           ;incstack = 0
  7913                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7914                           ;setLights_Initialization@lights stored from wreg
  7915  0C45  1283               	bcf	3,5	;RP0=0, select bank0
  7916  0C46  1303               	bcf	3,6	;RP1=0, select bank0
  7917  0C47  00D5               	movwf	setLights_Initialization@lights
  7918                           
  7919                           ;TriacRelay_B1.c: 50: LightsPointSelect(lights);
  7920  0C48  0855               	movf	setLights_Initialization@lights,w
  7921  0C49  158A  2499         	fcall	_LightsPointSelect
  7922  0C4B  0008               	return
  7923  0C4C                     __end_of_setLights_Initialization:	
  7924                           
  7925                           	psect	text52
  7926  0C99                     __ptext52:	
  7927 ;; *************** function _LightsPointSelect *****************
  7928 ;; Defined at:
  7929 ;;		line 10 in file "../src/TriacRelay_B1.c"
  7930 ;; Parameters:    Size  Location     Type
  7931 ;;  lights          1    wreg     unsigned char 
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;  lights          1    5[COMMON] unsigned char 
  7934 ;; Return value:  Size  Location     Type
  7935 ;;		None               void
  7936 ;; Registers used:
  7937 ;;		wreg
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7943 ;;      Params:         0       0       0       0
  7944 ;;      Locals:         1       0       0       0
  7945 ;;      Temps:          1       0       0       0
  7946 ;;      Totals:         2       0       0       0
  7947 ;;Total ram usage:        2 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    2
  7950 ;; This function calls:
  7951 ;;		Nothing
  7952 ;; This function is called by:
  7953 ;;		_setLights_Initialization
  7954 ;;		_setLights_Main
  7955 ;;		_setLights
  7956 ;;		_Lights_Control
  7957 ;;		_getLights_Status
  7958 ;;		_setLights_Trigger
  7959 ;;		_setLights_Line
  7960 ;;		_getAll_Lights_Line
  7961 ;; This function uses a non-reentrant model
  7962 ;;
  7963                           
  7964                           
  7965                           ;psect for function _LightsPointSelect
  7966  0C99                     _LightsPointSelect:	
  7967                           
  7968                           ;incstack = 0
  7969                           ; Regs used in _LightsPointSelect: [wreg]
  7970                           ;LightsPointSelect@lights stored from wreg
  7971  0C99  00F5               	movwf	LightsPointSelect@lights
  7972                           
  7973                           ;TriacRelay_B1.c: 14: if (lights == 1) {
  7974  0C9A  0875               	movf	LightsPointSelect@lights,w
  7975  0C9B  3A01               	xorlw	1
  7976  0C9C  1D03               	skipz
  7977  0C9D  0008               	return
  7978                           
  7979                           ;TriacRelay_B1.c: 15: Lights = &Lights1;
  7980  0C9E  3042               	movlw	_Lights1& (0+255)
  7981  0C9F  00F4               	movwf	??_LightsPointSelect
  7982  0CA0  0874               	movf	??_LightsPointSelect,w
  7983  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  7984  0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  7985  0CA3  00B5               	movwf	_Lights
  7986  0CA4  0008               	return
  7987  0CA5                     __end_of_LightsPointSelect:	
  7988                           
  7989                           	psect	text53
  7990  0C8D                     __ptext53:	
  7991 ;; *************** function _LED_Main *****************
  7992 ;; Defined at:
  7993 ;;		line 47 in file "../src/LED_B1.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;		None
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;		None
  7998 ;; Return value:  Size  Location     Type
  7999 ;;		None               void
  8000 ;; Registers used:
  8001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8002 ;; Tracked objects:
  8003 ;;		On entry : 0/0
  8004 ;;		On exit  : 0/0
  8005 ;;		Unchanged: 0/0
  8006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8007 ;;      Params:         0       0       0       0
  8008 ;;      Locals:         0       0       0       0
  8009 ;;      Temps:          0       0       0       0
  8010 ;;      Totals:         0       0       0       0
  8011 ;;Total ram usage:        0 bytes
  8012 ;; Hardware stack levels used:    1
  8013 ;; Hardware stack levels required when called:    4
  8014 ;; This function calls:
  8015 ;;		_setLED_Main
  8016 ;; This function is called by:
  8017 ;;		_main
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           
  8022                           ;psect for function _LED_Main
  8023  0C8D                     _LED_Main:	
  8024                           
  8025                           ;LED_B1.c: 49: setLED_Main(1);
  8026                           
  8027                           ;incstack = 0
  8028                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8029  0C8D  3001               	movlw	1
  8030  0C8E  158A  26CC  158A   	fcall	_setLED_Main
  8031                           
  8032                           ;LED_B1.c: 52: setLED_Main(2);
  8033  0C91  3002               	movlw	2
  8034  0C92  158A  26CC  158A   	fcall	_setLED_Main
  8035                           
  8036                           ;LED_B1.c: 58: setLED_Main(99);
  8037  0C95  3063               	movlw	99
  8038  0C96  158A  26CC         	fcall	_setLED_Main
  8039  0C98  0008               	return
  8040  0C99                     __end_of_LED_Main:	
  8041                           
  8042                           	psect	text54
  8043  0ECC                     __ptext54:	
  8044 ;; *************** function _setLED_Main *****************
  8045 ;; Defined at:
  8046 ;;		line 192 in file "../src/LED_B1.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;  led             1    wreg     unsigned char 
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;  led             1    2[BANK0 ] unsigned char 
  8051 ;; Return value:  Size  Location     Type
  8052 ;;		None               void
  8053 ;; Registers used:
  8054 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8060 ;;      Params:         0       0       0       0
  8061 ;;      Locals:         0       1       0       0
  8062 ;;      Temps:          0       2       0       0
  8063 ;;      Totals:         0       3       0       0
  8064 ;;Total ram usage:        3 bytes
  8065 ;; Hardware stack levels used:    1
  8066 ;; Hardware stack levels required when called:    3
  8067 ;; This function calls:
  8068 ;;		_LedPointSelect
  8069 ;; This function is called by:
  8070 ;;		_LED_Main
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           
  8075                           ;psect for function _setLED_Main
  8076  0ECC                     _setLED_Main:	
  8077                           
  8078                           ;incstack = 0
  8079                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8080                           ;setLED_Main@led stored from wreg
  8081  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  8082  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  8083  0ECE  00D7               	movwf	setLED_Main@led
  8084                           
  8085                           ;LED_B1.c: 193: LedPointSelect(led);
  8086  0ECF  0857               	movf	setLED_Main@led,w
  8087  0ED0  158A  25F1  158A   	fcall	_LedPointSelect
  8088                           
  8089                           ;LED_B1.c: 194: if (LED->GO == 1) {
  8090  0ED3  0878               	movf	_LED,w
  8091  0ED4  0084               	movwf	4
  8092  0ED5  1383               	bcf	3,7	;select IRP bank0
  8093  0ED6  1C80               	btfss	0,1
  8094  0ED7  0008               	return
  8095                           
  8096                           ;LED_B1.c: 195: LED->Time++;
  8097  0ED8  0A78               	incf	_LED,w
  8098  0ED9  0084               	movwf	4
  8099  0EDA  3001               	movlw	1
  8100  0EDB  0780               	addwf	0,f
  8101  0EDC  0A84               	incf	4,f
  8102  0EDD  1803               	skipnc
  8103  0EDE  0A80               	incf	0,f
  8104                           
  8105                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  8106  0EDF  0A78               	incf	_LED,w
  8107  0EE0  0084               	movwf	4
  8108  0EE1  0800               	movf	0,w
  8109  0EE2  1283               	bcf	3,5	;RP0=0, select bank0
  8110  0EE3  1303               	bcf	3,6	;RP1=0, select bank0
  8111  0EE4  00D5               	movwf	??_setLED_Main
  8112  0EE5  0A84               	incf	4,f
  8113  0EE6  0800               	movf	0,w
  8114  0EE7  00D6               	movwf	??_setLED_Main+1
  8115  0EE8  3000               	movlw	0
  8116  0EE9  0256               	subwf	??_setLED_Main+1,w
  8117  0EEA  3032               	movlw	50
  8118  0EEB  1903               	skipnz
  8119  0EEC  0255               	subwf	??_setLED_Main,w
  8120  0EED  1C03               	skipc
  8121  0EEE  0008               	return
  8122                           
  8123                           ;LED_B1.c: 197: LED->Time = 0;
  8124  0EEF  0A78               	incf	_LED,w
  8125  0EF0  0084               	movwf	4
  8126  0EF1  0180               	clrf	0
  8127  0EF2  0A84               	incf	4,f
  8128  0EF3  0180               	clrf	0
  8129                           
  8130                           ;LED_B1.c: 199: if (led == 1) {
  8131  0EF4  0857               	movf	setLED_Main@led,w
  8132  0EF5  3A01               	xorlw	1
  8133  0EF6  1D03               	skipz
  8134  0EF7  2EFB               	goto	l4081
  8135                           
  8136                           ;LED_B1.c: 200: RB4 = RB4 == 1 ? 0 : 1;
  8137  0EF8  3010               	movlw	16
  8138  0EF9  0686               	xorwf	6,f
  8139                           
  8140                           ;LED_B1.c: 201: }
  8141  0EFA  0008               	return
  8142  0EFB                     l4081:	
  8143                           
  8144                           ;LED_B1.c: 204: else if (led == 2) {
  8145  0EFB  0857               	movf	setLED_Main@led,w
  8146  0EFC  3A02               	xorlw	2
  8147  0EFD  1D03               	skipz
  8148  0EFE  2F02               	goto	l4085
  8149                           
  8150                           ;LED_B1.c: 205: RB5 = RB5 == 1 ? 0 : 1;
  8151  0EFF  3020               	movlw	32
  8152  0F00  0686               	xorwf	6,f
  8153                           
  8154                           ;LED_B1.c: 206: }
  8155  0F01  0008               	return
  8156  0F02                     l4085:	
  8157                           
  8158                           ;LED_B1.c: 214: else if (led == 99) {
  8159  0F02  0857               	movf	setLED_Main@led,w
  8160  0F03  3A63               	xorlw	99
  8161  0F04  1D03               	skipz
  8162  0F05  0008               	return
  8163                           
  8164                           ;LED_B1.c: 215: RB3 = RB3 == 1 ? 0 : 1;
  8165  0F06  3008               	movlw	8
  8166  0F07  0686               	xorwf	6,f
  8167  0F08  0008               	return
  8168  0F09                     __end_of_setLED_Main:	
  8169                           
  8170                           	psect	text55
  8171  0C81                     __ptext55:	
  8172 ;; *************** function _LED_Initialization *****************
  8173 ;; Defined at:
  8174 ;;		line 31 in file "../src/LED_B1.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;		None
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;		None
  8179 ;; Return value:  Size  Location     Type
  8180 ;;		None               void
  8181 ;; Registers used:
  8182 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8188 ;;      Params:         0       0       0       0
  8189 ;;      Locals:         0       0       0       0
  8190 ;;      Temps:          0       0       0       0
  8191 ;;      Totals:         0       0       0       0
  8192 ;;Total ram usage:        0 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; Hardware stack levels required when called:    5
  8195 ;; This function calls:
  8196 ;;		_setLED_Initialization
  8197 ;; This function is called by:
  8198 ;;		_main
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           
  8203                           ;psect for function _LED_Initialization
  8204  0C81                     _LED_Initialization:	
  8205                           
  8206                           ;LED_B1.c: 33: setLED_Initialization(1);
  8207                           
  8208                           ;incstack = 0
  8209                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8210  0C81  3001               	movlw	1
  8211  0C82  158A  252E  158A   	fcall	_setLED_Initialization
  8212                           
  8213                           ;LED_B1.c: 36: setLED_Initialization(2);
  8214  0C85  3002               	movlw	2
  8215  0C86  158A  252E  158A   	fcall	_setLED_Initialization
  8216                           
  8217                           ;LED_B1.c: 42: setLED_Initialization(99);
  8218  0C89  3063               	movlw	99
  8219  0C8A  158A  252E         	fcall	_setLED_Initialization
  8220  0C8C  0008               	return
  8221  0C8D                     __end_of_LED_Initialization:	
  8222                           
  8223                           	psect	text56
  8224  0D2E                     __ptext56:	
  8225 ;; *************** function _setLED_Initialization *****************
  8226 ;; Defined at:
  8227 ;;		line 63 in file "../src/LED_B1.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;  led             1    wreg     unsigned char 
  8230 ;; Auto vars:     Size  Location     Type
  8231 ;;  led             1    2[BANK0 ] unsigned char 
  8232 ;; Return value:  Size  Location     Type
  8233 ;;		None               void
  8234 ;; Registers used:
  8235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8236 ;; Tracked objects:
  8237 ;;		On entry : 0/0
  8238 ;;		On exit  : 0/0
  8239 ;;		Unchanged: 0/0
  8240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8241 ;;      Params:         0       0       0       0
  8242 ;;      Locals:         0       1       0       0
  8243 ;;      Temps:          0       0       0       0
  8244 ;;      Totals:         0       1       0       0
  8245 ;;Total ram usage:        1 bytes
  8246 ;; Hardware stack levels used:    1
  8247 ;; Hardware stack levels required when called:    4
  8248 ;; This function calls:
  8249 ;;		_LedPointSelect
  8250 ;;		_setLED
  8251 ;; This function is called by:
  8252 ;;		_LED_Initialization
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           
  8257                           ;psect for function _setLED_Initialization
  8258  0D2E                     _setLED_Initialization:	
  8259                           
  8260                           ;incstack = 0
  8261                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8262                           ;setLED_Initialization@led stored from wreg
  8263  0D2E  1283               	bcf	3,5	;RP0=0, select bank0
  8264  0D2F  1303               	bcf	3,6	;RP1=0, select bank0
  8265  0D30  00D7               	movwf	setLED_Initialization@led
  8266                           
  8267                           ;LED_B1.c: 64: LedPointSelect(led);
  8268  0D31  0857               	movf	setLED_Initialization@led,w
  8269  0D32  158A  25F1  158A   	fcall	_LedPointSelect
  8270                           
  8271                           ;LED_B1.c: 65: LED->Enable = 1;
  8272  0D35  0878               	movf	_LED,w
  8273  0D36  0084               	movwf	4
  8274  0D37  1383               	bcf	3,7	;select IRP bank0
  8275  0D38  1400               	bsf	0,0
  8276                           
  8277                           ;LED_B1.c: 66: setLED(led, 0);
  8278  0D39  1283               	bcf	3,5	;RP0=0, select bank0
  8279  0D3A  1303               	bcf	3,6	;RP1=0, select bank0
  8280  0D3B  01D5               	clrf	setLED@command
  8281  0D3C  0857               	movf	setLED_Initialization@led,w
  8282  0D3D  118A  2756         	fcall	_setLED
  8283  0D3F  0008               	return
  8284  0D40                     __end_of_setLED_Initialization:	
  8285                           
  8286                           	psect	text57
  8287  0756                     __ptext57:	
  8288 ;; *************** function _setLED *****************
  8289 ;; Defined at:
  8290 ;;		line 70 in file "../src/LED_B1.c"
  8291 ;; Parameters:    Size  Location     Type
  8292 ;;  led             1    wreg     unsigned char 
  8293 ;;  command         1    0[BANK0 ] unsigned char 
  8294 ;; Auto vars:     Size  Location     Type
  8295 ;;  led             1    1[BANK0 ] unsigned char 
  8296 ;; Return value:  Size  Location     Type
  8297 ;;		None               void
  8298 ;; Registers used:
  8299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8300 ;; Tracked objects:
  8301 ;;		On entry : 0/0
  8302 ;;		On exit  : 0/0
  8303 ;;		Unchanged: 0/0
  8304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8305 ;;      Params:         0       1       0       0
  8306 ;;      Locals:         0       1       0       0
  8307 ;;      Temps:          0       0       0       0
  8308 ;;      Totals:         0       2       0       0
  8309 ;;Total ram usage:        2 bytes
  8310 ;; Hardware stack levels used:    1
  8311 ;; Hardware stack levels required when called:    3
  8312 ;; This function calls:
  8313 ;;		_LedPointSelect
  8314 ;; This function is called by:
  8315 ;;		_setLED_Initialization
  8316 ;;		_Load_Main
  8317 ;;		_setTemp_Main
  8318 ;;		_PIR_Main
  8319 ;;		_setSYSC_Main
  8320 ;;		_setOverTemp_Exceptions
  8321 ;; This function uses a non-reentrant model
  8322 ;;
  8323                           
  8324                           
  8325                           ;psect for function _setLED
  8326  0756                     _setLED:	
  8327                           
  8328                           ;incstack = 0
  8329                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8330                           ;setLED@led stored from wreg
  8331  0756  1283               	bcf	3,5	;RP0=0, select bank0
  8332  0757  1303               	bcf	3,6	;RP1=0, select bank0
  8333  0758  00D6               	movwf	setLED@led
  8334                           
  8335                           ;LED_B1.c: 71: LedPointSelect(led);
  8336  0759  0856               	movf	setLED@led,w
  8337  075A  158A  25F1  118A   	fcall	_LedPointSelect
  8338                           
  8339                           ;LED_B1.c: 72: if (command == 0) {
  8340  075D  1283               	bcf	3,5	;RP0=0, select bank0
  8341  075E  1303               	bcf	3,6	;RP1=0, select bank0
  8342  075F  08D5               	movf	setLED@command,f
  8343  0760  1D03               	skipz
  8344  0761  2F74               	goto	l3903
  8345                           
  8346                           ;LED_B1.c: 74: if (led == 1) {
  8347  0762  0856               	movf	setLED@led,w
  8348  0763  3A01               	xorlw	1
  8349  0764  1D03               	skipz
  8350  0765  2F68               	goto	l3895
  8351                           
  8352                           ;LED_B1.c: 78: RB4 = 1;
  8353  0766  1606               	bsf	6,4	;volatile
  8354                           
  8355                           ;LED_B1.c: 80: }
  8356  0767  0008               	return
  8357  0768                     l3895:	
  8358                           
  8359                           ;LED_B1.c: 83: else if (led == 2) {
  8360  0768  0856               	movf	setLED@led,w
  8361  0769  3A02               	xorlw	2
  8362  076A  1D03               	skipz
  8363  076B  2F6E               	goto	l3899
  8364                           
  8365                           ;LED_B1.c: 87: RB5 = 1;
  8366  076C  1686               	bsf	6,5	;volatile
  8367                           
  8368                           ;LED_B1.c: 89: }
  8369  076D  0008               	return
  8370  076E                     l3899:	
  8371                           
  8372                           ;LED_B1.c: 101: else if (led == 99) {
  8373  076E  0856               	movf	setLED@led,w
  8374  076F  3A63               	xorlw	99
  8375  0770  1D03               	skipz
  8376  0771  0008               	return
  8377                           
  8378                           ;LED_B1.c: 105: RB3 = 1;
  8379  0772  1586               	bsf	6,3	;volatile
  8380                           
  8381                           ;LED_B1.c: 107: }
  8382                           ;LED_B1.c: 109: } else if (command == 1) {
  8383  0773  0008               	return
  8384  0774                     l3903:	
  8385  0774  0855               	movf	setLED@command,w
  8386  0775  3A01               	xorlw	1
  8387  0776  1D03               	skipz
  8388  0777  2F8A               	goto	l3917
  8389                           
  8390                           ;LED_B1.c: 111: if (led == 1) {
  8391  0778  0856               	movf	setLED@led,w
  8392  0779  3A01               	xorlw	1
  8393  077A  1D03               	skipz
  8394  077B  2F7E               	goto	l3909
  8395                           
  8396                           ;LED_B1.c: 115: RB4 = 0;
  8397  077C  1206               	bcf	6,4	;volatile
  8398                           
  8399                           ;LED_B1.c: 117: }
  8400  077D  0008               	return
  8401  077E                     l3909:	
  8402                           
  8403                           ;LED_B1.c: 120: else if (led == 2) {
  8404  077E  0856               	movf	setLED@led,w
  8405  077F  3A02               	xorlw	2
  8406  0780  1D03               	skipz
  8407  0781  2F84               	goto	l3913
  8408                           
  8409                           ;LED_B1.c: 124: RB5 = 0;
  8410  0782  1286               	bcf	6,5	;volatile
  8411                           
  8412                           ;LED_B1.c: 126: }
  8413  0783  0008               	return
  8414  0784                     l3913:	
  8415                           
  8416                           ;LED_B1.c: 138: else if (led == 99) {
  8417  0784  0856               	movf	setLED@led,w
  8418  0785  3A63               	xorlw	99
  8419  0786  1D03               	skipz
  8420  0787  0008               	return
  8421                           
  8422                           ;LED_B1.c: 142: RB3 = 0;
  8423  0788  1186               	bcf	6,3	;volatile
  8424                           
  8425                           ;LED_B1.c: 144: }
  8426                           ;LED_B1.c: 146: } else if (command == 10) {
  8427  0789  0008               	return
  8428  078A                     l3917:	
  8429  078A  0855               	movf	setLED@command,w
  8430  078B  3A0A               	xorlw	10
  8431  078C  1D03               	skipz
  8432  078D  2FA9               	goto	l3935
  8433                           
  8434                           ;LED_B1.c: 147: LED->GO = 0;
  8435  078E  0878               	movf	_LED,w
  8436  078F  0084               	movwf	4
  8437  0790  1383               	bcf	3,7	;select IRP bank0
  8438  0791  1080               	bcf	0,1
  8439                           
  8440                           ;LED_B1.c: 148: LED->Time = 0;
  8441  0792  0A78               	incf	_LED,w
  8442  0793  0084               	movwf	4
  8443  0794  0180               	clrf	0
  8444  0795  0A84               	incf	4,f
  8445  0796  0180               	clrf	0
  8446                           
  8447                           ;LED_B1.c: 150: if (led == 1) {
  8448  0797  0856               	movf	setLED@led,w
  8449  0798  3A01               	xorlw	1
  8450  0799  1D03               	skipz
  8451  079A  2F9D               	goto	l3927
  8452                           
  8453                           ;LED_B1.c: 154: RB4 = 1;
  8454  079B  1606               	bsf	6,4	;volatile
  8455                           
  8456                           ;LED_B1.c: 156: }
  8457  079C  0008               	return
  8458  079D                     l3927:	
  8459                           
  8460                           ;LED_B1.c: 159: else if (led == 2) {
  8461  079D  0856               	movf	setLED@led,w
  8462  079E  3A02               	xorlw	2
  8463  079F  1D03               	skipz
  8464  07A0  2FA3               	goto	l3931
  8465                           
  8466                           ;LED_B1.c: 163: RB5 = 1;
  8467  07A1  1686               	bsf	6,5	;volatile
  8468                           
  8469                           ;LED_B1.c: 165: }
  8470  07A2  0008               	return
  8471  07A3                     l3931:	
  8472                           
  8473                           ;LED_B1.c: 177: else if (led == 99) {
  8474  07A3  0856               	movf	setLED@led,w
  8475  07A4  3A63               	xorlw	99
  8476  07A5  1D03               	skipz
  8477  07A6  0008               	return
  8478                           
  8479                           ;LED_B1.c: 181: RB3 = 1;
  8480  07A7  1586               	bsf	6,3	;volatile
  8481                           
  8482                           ;LED_B1.c: 183: }
  8483                           ;LED_B1.c: 185: } else if (command == 11) {
  8484  07A8  0008               	return
  8485  07A9                     l3935:	
  8486  07A9  0855               	movf	setLED@command,w
  8487  07AA  3A0B               	xorlw	11
  8488  07AB  1D03               	skipz
  8489  07AC  0008               	return
  8490                           
  8491                           ;LED_B1.c: 186: LED->GO = 1;
  8492  07AD  0878               	movf	_LED,w
  8493  07AE  0084               	movwf	4
  8494  07AF  1383               	bcf	3,7	;select IRP bank0
  8495  07B0  1480               	bsf	0,1
  8496  07B1  0008               	return
  8497  07B2                     __end_of_setLED:	
  8498                           
  8499                           	psect	text58
  8500  0DF1                     __ptext58:	
  8501 ;; *************** function _LedPointSelect *****************
  8502 ;; Defined at:
  8503 ;;		line 7 in file "../src/LED_B1.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  led             1    wreg     unsigned char 
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;  led             1    5[COMMON] unsigned char 
  8508 ;; Return value:  Size  Location     Type
  8509 ;;		None               void
  8510 ;; Registers used:
  8511 ;;		wreg
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8517 ;;      Params:         0       0       0       0
  8518 ;;      Locals:         1       0       0       0
  8519 ;;      Temps:          1       0       0       0
  8520 ;;      Totals:         2       0       0       0
  8521 ;;Total ram usage:        2 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    2
  8524 ;; This function calls:
  8525 ;;		Nothing
  8526 ;; This function is called by:
  8527 ;;		_setLED_Initialization
  8528 ;;		_setLED
  8529 ;;		_setLED_Main
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           
  8534                           ;psect for function _LedPointSelect
  8535  0DF1                     _LedPointSelect:	
  8536                           
  8537                           ;incstack = 0
  8538                           ; Regs used in _LedPointSelect: [wreg]
  8539                           ;LedPointSelect@led stored from wreg
  8540  0DF1  00F5               	movwf	LedPointSelect@led
  8541                           
  8542                           ;LED_B1.c: 9: if (led == 1) {
  8543  0DF2  0875               	movf	LedPointSelect@led,w
  8544  0DF3  3A01               	xorlw	1
  8545  0DF4  1D03               	skipz
  8546  0DF5  2DFB               	goto	l3865
  8547                           
  8548                           ;LED_B1.c: 10: LED = &VarLED1;
  8549  0DF6  304D               	movlw	_VarLED1& (0+255)
  8550  0DF7  00F4               	movwf	??_LedPointSelect
  8551  0DF8  0874               	movf	??_LedPointSelect,w
  8552  0DF9  00F8               	movwf	_LED
  8553                           
  8554                           ;LED_B1.c: 11: }
  8555  0DFA  0008               	return
  8556  0DFB                     l3865:	
  8557                           
  8558                           ;LED_B1.c: 14: else if (led == 2) {
  8559  0DFB  0875               	movf	LedPointSelect@led,w
  8560  0DFC  3A02               	xorlw	2
  8561  0DFD  1D03               	skipz
  8562  0DFE  2E04               	goto	l3869
  8563                           
  8564                           ;LED_B1.c: 15: LED = &VarLED2;
  8565  0DFF  3051               	movlw	_VarLED2& (0+255)
  8566  0E00  00F4               	movwf	??_LedPointSelect
  8567  0E01  0874               	movf	??_LedPointSelect,w
  8568  0E02  00F8               	movwf	_LED
  8569                           
  8570                           ;LED_B1.c: 16: }
  8571  0E03  0008               	return
  8572  0E04                     l3869:	
  8573                           
  8574                           ;LED_B1.c: 24: else if (led == 99) {
  8575  0E04  0875               	movf	LedPointSelect@led,w
  8576  0E05  3A63               	xorlw	99
  8577  0E06  1D03               	skipz
  8578  0E07  0008               	return
  8579                           
  8580                           ;LED_B1.c: 25: LED = &VarErrLED;
  8581  0E08  3049               	movlw	_VarErrLED& (0+255)
  8582  0E09  00F4               	movwf	??_LedPointSelect
  8583  0E0A  0874               	movf	??_LedPointSelect,w
  8584  0E0B  00F8               	movwf	_LED
  8585  0E0C  0008               	return
  8586  0E0D                     __end_of_LedPointSelect:	
  8587                           
  8588                           	psect	text59
  8589  0CB1                     __ptext59:	
  8590 ;; *************** function _DetectSYSC_Signal *****************
  8591 ;; Defined at:
  8592 ;;		line 53 in file "../src/SYSC_B1.c"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;		None
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;		None
  8597 ;; Return value:  Size  Location     Type
  8598 ;;		None               void
  8599 ;; Registers used:
  8600 ;;		status,2
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8606 ;;      Params:         0       0       0       0
  8607 ;;      Locals:         0       0       0       0
  8608 ;;      Temps:          0       0       0       0
  8609 ;;      Totals:         0       0       0       0
  8610 ;;Total ram usage:        0 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:    2
  8613 ;; This function calls:
  8614 ;;		Nothing
  8615 ;; This function is called by:
  8616 ;;		_main
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           
  8621                           ;psect for function _DetectSYSC_Signal
  8622  0CB1                     _DetectSYSC_Signal:	
  8623                           
  8624                           ;SYSC_B1.c: 54: if (SYSC.Signal == 0) {
  8625                           
  8626                           ;incstack = 0
  8627                           ; Regs used in _DetectSYSC_Signal: [status,2]
  8628  0CB1  1283               	bcf	3,5	;RP0=0, select bank0
  8629  0CB2  1303               	bcf	3,6	;RP1=0, select bank0
  8630  0CB3  19A8               	btfsc	_SYSC,3
  8631  0CB4  2CBB               	goto	l1001
  8632                           
  8633                           ;SYSC_B1.c: 55: if (RA5 == 1) {
  8634  0CB5  1E85               	btfss	5,5	;volatile
  8635  0CB6  0008               	return
  8636                           
  8637                           ;SYSC_B1.c: 56: SYSC.Signal = 1;
  8638  0CB7  15A8               	bsf	_SYSC,3
  8639                           
  8640                           ;SYSC_B1.c: 57: SYSC.Timer = 0;
  8641  0CB8  01A9               	clrf	_SYSC+1
  8642  0CB9  01AA               	clrf	_SYSC+2
  8643                           
  8644                           ;SYSC_B1.c: 58: }
  8645                           ;SYSC_B1.c: 59: } else {
  8646  0CBA  0008               	return
  8647  0CBB                     l1001:	
  8648                           
  8649                           ;SYSC_B1.c: 60: if (RA5 == 0) {
  8650  0CBB  1A85               	btfsc	5,5	;volatile
  8651  0CBC  0008               	return
  8652                           
  8653                           ;SYSC_B1.c: 61: SYSC.Signal = 0;
  8654  0CBD  11A8               	bcf	_SYSC,3
  8655  0CBE  0008               	return
  8656  0CBF                     __end_of_DetectSYSC_Signal:	
  8657                           
  8658                           	psect	text60
  8659  0E98                     __ptext60:	
  8660 ;; *************** function _CDS_Main *****************
  8661 ;; Defined at:
  8662 ;;		line 11 in file "../src/CDS_B1.c"
  8663 ;; Parameters:    Size  Location     Type
  8664 ;;		None
  8665 ;; Auto vars:     Size  Location     Type
  8666 ;;		None
  8667 ;; Return value:  Size  Location     Type
  8668 ;;		None               void
  8669 ;; Registers used:
  8670 ;;		wreg, status,2, status,0
  8671 ;; Tracked objects:
  8672 ;;		On entry : 0/0
  8673 ;;		On exit  : 0/0
  8674 ;;		Unchanged: 0/0
  8675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8676 ;;      Params:         0       0       0       0
  8677 ;;      Locals:         0       0       0       0
  8678 ;;      Temps:          0       3       0       0
  8679 ;;      Totals:         0       3       0       0
  8680 ;;Total ram usage:        3 bytes
  8681 ;; Hardware stack levels used:    1
  8682 ;; Hardware stack levels required when called:    2
  8683 ;; This function calls:
  8684 ;;		Nothing
  8685 ;; This function is called by:
  8686 ;;		_main
  8687 ;; This function uses a non-reentrant model
  8688 ;;
  8689                           
  8690                           
  8691                           ;psect for function _CDS_Main
  8692  0E98                     _CDS_Main:	
  8693                           
  8694                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  8695                           
  8696                           ;incstack = 0
  8697                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  8698  0E98  1283               	bcf	3,5	;RP0=0, select bank0
  8699  0E99  1303               	bcf	3,6	;RP1=0, select bank0
  8700  0E9A  1C2D               	btfss	__CDS,0
  8701  0E9B  0008               	return
  8702                           
  8703                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  8704  0E9C  18AD               	btfsc	__CDS,1
  8705  0E9D  2EAB               	goto	l99
  8706                           
  8707                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  8708  0E9E  19AD               	btfsc	__CDS,3
  8709  0E9F  0008               	return
  8710                           
  8711                           ;CDS_B1.c: 16: _CDS.Time++;
  8712  0EA0  3001               	movlw	1
  8713  0EA1  00D5               	movwf	??_CDS_Main
  8714  0EA2  0855               	movf	??_CDS_Main,w
  8715  0EA3  07AE               	addwf	__CDS+1,f
  8716                           
  8717                           ;CDS_B1.c: 17: if (_CDS.Time >= 10)
  8718  0EA4  300A               	movlw	10
  8719  0EA5  022E               	subwf	__CDS+1,w
  8720  0EA6  1C03               	skipc
  8721  0EA7  0008               	return
  8722                           
  8723                           ;CDS_B1.c: 18: {
  8724                           ;CDS_B1.c: 19: _CDS.Time = 0;
  8725  0EA8  01AE               	clrf	__CDS+1
  8726                           
  8727                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  8728  0EA9  15AD               	bsf	__CDS,3
  8729                           
  8730                           ;CDS_B1.c: 21: }
  8731                           ;CDS_B1.c: 22: }
  8732                           ;CDS_B1.c: 23: } else {
  8733  0EAA  0008               	return
  8734  0EAB                     l99:	
  8735                           
  8736                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  8737  0EAB  1CAD               	btfss	__CDS,1
  8738  0EAC  0008               	return
  8739                           
  8740                           ;CDS_B1.c: 25: _CDS.GO = 0;
  8741  0EAD  10AD               	bcf	__CDS,1
  8742                           
  8743                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  8744  0EAE  1A2D               	btfsc	__CDS,4
  8745  0EAF  2EB6               	goto	l4303
  8746                           
  8747                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  8748  0EB0  082F               	movf	__CDS+2,w
  8749  0EB1  0230               	subwf	__CDS+3,w
  8750  0EB2  1C03               	skipc
  8751  0EB3  0008               	return
  8752                           
  8753                           ;CDS_B1.c: 28: _CDS.Status = 1;
  8754  0EB4  162D               	bsf	__CDS,4
  8755                           
  8756                           ;CDS_B1.c: 29: }
  8757                           ;CDS_B1.c: 30: } else {
  8758  0EB5  0008               	return
  8759  0EB6                     l4303:	
  8760                           
  8761                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  8762  0EB6  082F               	movf	__CDS+2,w
  8763  0EB7  3E9C               	addlw	156
  8764  0EB8  00D5               	movwf	??_CDS_Main
  8765  0EB9  30FF               	movlw	255
  8766  0EBA  1803               	skipnc
  8767  0EBB  3000               	movlw	0
  8768  0EBC  00D6               	movwf	??_CDS_Main+1
  8769  0EBD  0856               	movf	??_CDS_Main+1,w
  8770  0EBE  3A80               	xorlw	128
  8771  0EBF  00D7               	movwf	??_CDS_Main+2
  8772  0EC0  3080               	movlw	128
  8773  0EC1  0257               	subwf	??_CDS_Main+2,w
  8774  0EC2  1D03               	skipz
  8775  0EC3  2EC6               	goto	u4945
  8776  0EC4  0830               	movf	__CDS+3,w
  8777  0EC5  0255               	subwf	??_CDS_Main,w
  8778  0EC6                     u4945:	
  8779  0EC6  1C03               	skipc
  8780  0EC7  0008               	return
  8781                           
  8782                           ;CDS_B1.c: 32: _CDS.Status = 0;
  8783  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  8784  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
  8785  0ECA  122D               	bcf	__CDS,4
  8786  0ECB  0008               	return
  8787  0ECC                     __end_of_CDS_Main:	
  8788                           
  8789                           	psect	text61
  8790  0C18                     __ptext61:	
  8791 ;; *************** function _CDS_Initialization *****************
  8792 ;; Defined at:
  8793 ;;		line 7 in file "../src/CDS_B1.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;		None
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;		None
  8798 ;; Return value:  Size  Location     Type
  8799 ;;		None               void
  8800 ;; Registers used:
  8801 ;;		None
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8807 ;;      Params:         0       0       0       0
  8808 ;;      Locals:         0       0       0       0
  8809 ;;      Temps:          0       0       0       0
  8810 ;;      Totals:         0       0       0       0
  8811 ;;Total ram usage:        0 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:    2
  8814 ;; This function calls:
  8815 ;;		Nothing
  8816 ;; This function is called by:
  8817 ;;		_main
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           
  8822                           ;psect for function _CDS_Initialization
  8823  0C18                     _CDS_Initialization:	
  8824                           
  8825                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  8826                           
  8827                           ;incstack = 0
  8828                           ; Regs used in _CDS_Initialization: []
  8829  0C18  1283               	bcf	3,5	;RP0=0, select bank0
  8830  0C19  1303               	bcf	3,6	;RP1=0, select bank0
  8831  0C1A  142D               	bsf	__CDS,0
  8832  0C1B  0008               	return
  8833  0C1C                     __end_of_CDS_Initialization:	
  8834                           
  8835                           	psect	text62
  8836  0CEB                     __ptext62:	
  8837 ;; *************** function _ISR *****************
  8838 ;; Defined at:
  8839 ;;		line 107 in file "../src/MCU_B1.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;		None
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;		None
  8844 ;; Return value:  Size  Location     Type
  8845 ;;		None               void
  8846 ;; Registers used:
  8847 ;;		wreg, status,2, status,0, pclath, cstack
  8848 ;; Tracked objects:
  8849 ;;		On entry : 0/0
  8850 ;;		On exit  : 0/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8853 ;;      Params:         0       0       0       0
  8854 ;;      Locals:         0       0       0       0
  8855 ;;      Temps:          4       0       0       0
  8856 ;;      Totals:         4       0       0       0
  8857 ;;Total ram usage:        4 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:    1
  8860 ;; This function calls:
  8861 ;;		_TMR1_ISR
  8862 ;; This function is called by:
  8863 ;;		Interrupt level 1
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           
  8868                           ;psect for function _ISR
  8869  0CEB                     _ISR:	
  8870                           
  8871                           ;MCU_B1.c: 109: ;;
  8872                           ;MCU_B1.c: 111: ;;
  8873                           ;MCU_B1.c: 113: TMR1_ISR();
  8874  0CEB  158A  25D5  158A   	fcall	_TMR1_ISR
  8875  0CEE  0873               	movf	??_ISR+3,w
  8876  0CEF  1283               	bcf	3,5	;RP0=0, select bank0
  8877  0CF0  1303               	bcf	3,6	;RP1=0, select bank0
  8878  0CF1  00FF               	movwf	127
  8879  0CF2  0872               	movf	??_ISR+2,w
  8880  0CF3  008A               	movwf	10
  8881  0CF4  0871               	movf	??_ISR+1,w
  8882  0CF5  0084               	movwf	4
  8883  0CF6  0E70               	swapf	??_ISR^(0+-128),w
  8884  0CF7  0083               	movwf	3
  8885  0CF8  0EFE               	swapf	126,f
  8886  0CF9  0E7E               	swapf	126,w
  8887  0CFA  0009               	retfie
  8888  0CFB                     __end_of_ISR:	
  8889                           
  8890                           	psect	intentry
  8891  0004                     __pintentry:	
  8892                           ;incstack = 0
  8893                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  8894                           
  8895  0004                     interrupt_function:	
  8896  007E                     saved_w	set	btemp
  8897  0004  00FE               	movwf	btemp
  8898  0005  0E03               	swapf	3,w
  8899  0006  00F0               	movwf	??_ISR
  8900  0007  0804               	movf	4,w
  8901  0008  00F1               	movwf	??_ISR+1
  8902  0009  080A               	movf	10,w
  8903  000A  00F2               	movwf	??_ISR+2
  8904  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8905  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8906  000D  087F               	movf	btemp+1,w
  8907  000E  00F3               	movwf	??_ISR+3
  8908  000F  158A  2CEB         	ljmp	_ISR
  8909                           
  8910                           	psect	text63
  8911  0DD5                     __ptext63:	
  8912 ;; *************** function _TMR1_ISR *****************
  8913 ;; Defined at:
  8914 ;;		line 209 in file "../src/MCU_B1.c"
  8915 ;; Parameters:    Size  Location     Type
  8916 ;;		None
  8917 ;; Auto vars:     Size  Location     Type
  8918 ;;		None
  8919 ;; Return value:  Size  Location     Type
  8920 ;;		None               void
  8921 ;; Registers used:
  8922 ;;		wreg, status,2
  8923 ;; Tracked objects:
  8924 ;;		On entry : 0/0
  8925 ;;		On exit  : 0/0
  8926 ;;		Unchanged: 0/0
  8927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8928 ;;      Params:         0       0       0       0
  8929 ;;      Locals:         0       0       0       0
  8930 ;;      Temps:          0       0       0       0
  8931 ;;      Totals:         0       0       0       0
  8932 ;;Total ram usage:        0 bytes
  8933 ;; Hardware stack levels used:    1
  8934 ;; This function calls:
  8935 ;;		Nothing
  8936 ;; This function is called by:
  8937 ;;		_ISR
  8938 ;; This function uses a non-reentrant model
  8939 ;;
  8940                           
  8941                           
  8942                           ;psect for function _TMR1_ISR
  8943  0DD5                     _TMR1_ISR:	
  8944                           
  8945                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  8946                           
  8947                           ;incstack = 0
  8948                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  8949  0DD5  1683               	bsf	3,5	;RP0=1, select bank1
  8950  0DD6  1303               	bcf	3,6	;RP1=0, select bank1
  8951  0DD7  1C0C               	btfss	12,0	;volatile
  8952  0DD8  0008               	return
  8953  0DD9  1283               	bcf	3,5	;RP0=0, select bank0
  8954  0DDA  1303               	bcf	3,6	;RP1=0, select bank0
  8955  0DDB  1C0C               	btfss	12,0	;volatile
  8956  0DDC  0008               	return
  8957                           
  8958                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
  8959  0DDD  30FA               	movlw	250
  8960  0DDE  008F               	movwf	15	;volatile
  8961                           
  8962                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
  8963  0DDF  3038               	movlw	56
  8964  0DE0  008E               	movwf	14	;volatile
  8965                           
  8966                           ;MCU_B1.c: 214: TMR1IF = 0;
  8967  0DE1  100C               	bcf	12,0	;volatile
  8968                           
  8969                           ;MCU_B1.c: 234: Timer1.Count++;
  8970  0DE2  3001               	movlw	1
  8971  0DE3  07B3               	addwf	_Timer1+1,f
  8972  0DE4  1803               	skipnc
  8973  0DE5  0AB4               	incf	_Timer1+2,f
  8974  0DE6  3000               	movlw	0
  8975  0DE7  07B4               	addwf	_Timer1+2,f
  8976                           
  8977                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
  8978  0DE8  3064               	movlw	100
  8979  0DE9  0633               	xorwf	_Timer1+1,w
  8980  0DEA  0434               	iorwf	_Timer1+2,w
  8981  0DEB  1D03               	skipz
  8982  0DEC  0008               	return
  8983                           
  8984                           ;MCU_B1.c: 236: {
  8985                           ;MCU_B1.c: 237: Timer1.Count = 0;
  8986  0DED  01B3               	clrf	_Timer1+1
  8987  0DEE  01B4               	clrf	_Timer1+2
  8988                           
  8989                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
  8990  0DEF  1432               	bsf	_Timer1,0
  8991  0DF0  0008               	return
  8992  0DF1                     __end_of_TMR1_ISR:	
  8993  007E                     btemp	set	126	;btemp
  8994  007E                     wtemp	set	126
  8995  007E                     wtemp0	set	126
  8996  0080                     wtemp1	set	128
  8997  0082                     wtemp2	set	130
  8998  0084                     wtemp3	set	132
  8999  0086                     wtemp4	set	134
  9000  0088                     wtemp5	set	136
  9001  007F                     wtemp6	set	127
  9002  007E                     ttemp	set	126
  9003  007E                     ttemp0	set	126
  9004  0081                     ttemp1	set	129
  9005  0084                     ttemp2	set	132
  9006  0087                     ttemp3	set	135
  9007  007F                     ttemp4	set	127
  9008  007E                     ltemp	set	126
  9009  007E                     ltemp0	set	126
  9010  0082                     ltemp1	set	130
  9011  0086                     ltemp2	set	134
  9012  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         136
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     25      78
    BANK1            80      0      79
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK0[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _setLights_Trigger->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_All_Error_Status
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getMain_All_Error_Status
    _setLights->_LightsPointSelect
    _setLights->_getMain_All_Error_Status
    _setLights_Line->_LightsPointSelect
    _getMain_All_Error_Status->_getCDS_Status
    _Lights_Control->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLED->_LedPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setTemp_Main->_getMain_All_Error_Status
    _SYSC_Main->_setSYSC_Main
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _getMain_Exception->_setLights_Trigger
    _Load_Main->_getMain_All_Error_Status
    _Lights_Main->_setLights_Main
    _setLights_Main->_setLights
    _setLights->_getMain_All_Error_Status
    _Lights_Close->_getMain_LightsStatus
    _getMain_LightsStatus->_getLights_Status
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setLED_Main
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   23557
                                             20 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           3     3      0     717
                                              0 BANK0      3     3      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2574
                                              8 BANK0      7     6      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     657
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0    1085
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     858
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     686
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    3804
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    3804
                                              8 BANK0      1     1      0
                            ___awdiv
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setLED
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     861
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0    2779
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         1     1      0    2779
                                              8 BANK0      1     1      0
           _getMain_All_Error_Status
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             8     8      0    3957
                                              8 BANK0      8     8      0
                   _getLights_Status
           _getMain_All_Error_Status
                  _getMain_Exception
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _getMain_Exception                                    3     3      0     575
                                              3 BANK0      3     3      0
                 _getAll_Lights_Line
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _setLights_Trigger                                    3     2      1     405
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getAll_Lights_Line                                   1     1      0      68
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    3202
                                              8 BANK0      6     6      0
                _getLightsControl_GO
                _getLightsControl_OK
           _getMain_All_Error_Status
               _getMain_Lights_Count
                             _setLED
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 5     5      0     111
                                              4 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _getLightsControl_OK                                  1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLightsControl_GO                                  1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    1554
                       _Lights_Close
                     _Lights_Control
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       6     6      0    1229
                                             14 BANK0      6     6      0
                  _LightsPointSelect
                         _getLoad_OK
           _getMain_All_Error_Status
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            6     5      1     769
                                              8 BANK0      6     5      1
                  _LightsPointSelect
           _getMain_All_Error_Status
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             9     9      0     276
                                              5 COMMON     1     1      0
                                              0 BANK0      8     8      0
                      _getCDS_Status
 ---------------------------------------------------------------------------------
 (4) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLoad_OK                                           1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       5     5      0     161
                                              0 BANK0      5     5      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Lights_Close                                         1     1      0     164
                                              4 BANK0      1     1      0
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 2     2      0     164
                                              2 BANK0      2     2      0
                   _getLights_Status
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              0 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2658
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2658
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    2503
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Close
       _getMain_LightsStatus
         _getLights_Status
           _LightsPointSelect
     _Lights_Control
       _LightsPointSelect
     _setLights_Main
       _LightsPointSelect
       _getLoad_OK
       _getMain_All_Error_Status
         _getCDS_Status
       _setLights
         _LightsPointSelect
         _getMain_All_Error_Status
           _getCDS_Status
         _setLights_Line
           _LightsPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getLightsControl_GO
     _getLightsControl_OK
     _getMain_All_Error_Status
       _getCDS_Status
     _getMain_Lights_Count
     _setLED
       _LedPointSelect
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
       _getCDS_Status
     _getMain_Exception
       _getAll_Lights_Line
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
         _getCDS_Status
       _setLED
         _LedPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
         _getCDS_Status
       _getMain_LightsStatus
         _getLights_Status
           _LightsPointSelect
       _setLED
         _LedPointSelect
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      4E       5       97.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      A7      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Nov 05 17:53:02 2014

                     _WDT_Clearing 0002          getMain_Lights_Count@count 0055  
                               l99 0EAB                       ___awdiv@sign 005A  
                               fsr 0004                                l630 033F  
                              l631 033D                                l560 0FFA  
                              l544 0FCD                                l625 0370  
                              l555 0FE2                                l556 0FFE  
                              l636 02E6                                l549 0FC9  
                              l821 0081                                l822 0097  
                              l815 0205                                l743 0544  
                              l816 0052                                l755 053F  
                              _GIE 005F                                _RB2 0032  
                              _RA4 002C                                _LED 0078  
                              _RB3 0033                                _RA5 002D  
                              _RB4 0034                                _RB5 0035  
                              _PS0 0408                                _PS1 0409  
                              _PS2 040A                                _ISR 0CEB  
                              _PSA 040B                                _WDT 0076  
           getAll_Lights_Line@line 0055                                fsr0 0004  
                              indf 0000                    __end_of_ADC_Set 0C53  
        __end_of_LightsPointSelect 0CA5                   _getLights_Status 0CFB  
          __size_of_Lights_Control 006D                               ?_ISR 0070  
                       Load_Main@i 0062                         Load_Main@j 005F  
                             l1001 0CBB                               l1145 0F91  
                             l1139 0F90                               l4015 0710  
                   _Load_Main$2538 0061                               l4041 074F  
                             l4033 073C                               l4025 0718  
                             l4009 0705                               l4211 0F8B  
                             l4027 0726                               l4051 0E1D  
                             l4037 0747                               l4133 0502  
                             l4303 0EB6                               l4151 0525  
                             l4119 04C9                               l4055 0E23  
                             l4081 0EFB                               l4217 0FA3  
                             l4209 0F87                               l4049 0E1A  
                             l4401 03DB                               l4235 0662  
                             l4163 053C                               l4403 03DF  
                             l4411 03EC                               l4085 0F02  
                             l4421 0410                               l4405 03E3  
                             l4413 03FD                               l4247 0687  
                             l4511 0298                               l4095 0E37  
                             l4407 03E7                               l4505 0267  
                             l4185 0F40                               l4345 0586  
                             l4337 056A                               l4099 0E43  
                             l4179 0F27                               l4275 07E0  
                             l4267 07BC                               l4451 04A2  
                             l4443 0476                               l4427 042C  
                             l4533 02D3                               l4365 05B3  
                             l4349 058F                               l4269 07CA  
                             l4437 045A                               l3903 0774  
                             l2783 0FF4                               l2775 0FDD  
                             l2767 0FC5                               l2759 0FB9  
                             l4551 0311                               l4711 013F  
                             l4703 012B                               l4279 07EB  
                             l3913 0784                               l2777 0FE6  
                             l4721 0176                               l4457 04B0  
                             l3931 07A3                               l4539 02DF  
                             l4643 0084                               l4395 03D1  
                             l4379 0E65                               l3909 077E  
                             l3917 078A                               l4477 022B  
                             l4725 01AA                               l3927 079D  
                             l3935 07A9                               l4487 023F  
                             l4727 01B9                               l4399 03D7  
                             l3865 0DFB                               l4569 0335  
                             l4737 01D5                               l3971 0D65  
                             l4691 00DC                               l4675 00B9  
                             l3869 0E04                               l3981 05DE  
                             l4589 0352                               l4693 00DD  
                             l3895 0768                               l4687 00D0  
                             l3993 0608                               l4777 06B1  
                             l3899 076E                               l3997 0620  
                             l4789 06D4              _myMain_Initialization 0C0B  
                     __CFG_WDTE$ON 0000                               u4305 0727  
                             u4315 0733                               u4325 073D  
                             u5305 02B1                               u4185 0D75  
                             _PEIE 005E                               u4285 071B  
                             u4625 0F4C                               u5355 02F9  
                             u4740 065E                               u5285 029E  
                             u5295 02A5                               u4815 07BF  
                             u5705 01C9                               u5635 00FD  
                             u4835 07CB                               u5645 0121  
                             u4845 07D7                               u5735 01F2  
                             u4855 07E1                               u4945 0EC6  
                             u5665 015D                               u5685 019C  
                             __CDS 002D            ?_setSYSC_Initialization 0070  
                             _SYSC 0028                               __PIR 00A0  
                             _Load 00CF                               _Temp 0036  
                             _main 0695                               btemp 007E  
                  __end_of_WDT_Set 0CB1                               ltemp 007E  
                             start 0011                               ttemp 007E  
                             wtemp 007E                   __end_of_CDS_Main 0ECC  
     __size_of_Temp_Initialization 0003                              ??_ISR 0070  
                _setLights_Trigger 0DBA                      ??_Lights_Main 0076  
                    __CFG_PLLEN$ON 0000                   __end_of_LED_Main 0C99  
               ?_setLights_Trigger 0055                              ?_main 0069  
                  __end_of___awdiv 0756                              _ADRES 001E  
                  ___awdiv@divisor 0055                              _T1CON 0010  
                  __end_of___lwdiv 07F2                      ?_Lights_Close 0070  
                  ___awdiv@counter 0059                              _TMR1H 000F  
                            _TMR1L 000E                              _PORTA 0005  
                            _PORTB 0006                              _PORTC 0007  
                     ?_setLED_Main 0070                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
          __end_of_Timeout_Counter 0D7B                ??_setLights_Trigger 0056  
                 __end_of_PIR_Main 020D                   __end_of_TMR1_ISR 0DF1  
                 __end_of_TMR1_Set 0800                              _getAD 0E0D  
   __end_of_setSYSC_Initialization 0C24                     _setLights$4457 0060  
                 __end_of_WDT_Main 0CEB                      _LightsControl 0079  
                   __CFG_BOREN$OFF 0000       __end_of_getMain_Lights_Count 0D1D  
                            pclath 000A                              ltemp0 007E  
                            ltemp1 0082                              ltemp2 0086  
                            ltemp3 0080     __size_of_setLED_Initialization 0012  
     __end_of_getMain_LightsStatus 0D67      __end_of_setLED_Initialization 0D40  
                            ttemp0 007E                              ttemp1 0081  
                            ttemp2 0084                              ttemp3 0087  
                            ttemp4 007F                              status 0003  
                            wtemp0 007E                              wtemp1 0080  
                            wtemp2 0082                              wtemp3 0084  
                            wtemp4 0086                              wtemp5 0088  
                            wtemp6 007F                  getPIR_AD@channel1 0062  
                getPIR_AD@channel2 005D             ?_setLoad_AH_AL_Restore 0070  
                   _setLights_Main 0F59                     _setLights_Line 0CBF  
                  __initialization 0013                 __size_of_SYSC_Main 0003  
        __end_of_setLights_Trigger 0DD5                       __end_of_main 06F9  
                 __end_of_Fosc_Set 0C2D                          ??_ADC_Set 0074  
                           ??_main 006D                     ??_Lights_Close 0059  
              __end_of_Lights_Main 0C76         __size_of_LightsPointSelect 000C  
                           ?_getAD 0074             ?_myMain_Initialization 0070  
                           _ADCON0 001F                             _ADCON1 009F  
                 ___awdiv@dividend 0057                          ??_WDT_Set 0074  
                           _ANSELA 0185                             _ANSELB 0186  
         _getMain_All_Error_Status 0FAA                             _FVRCON 009D  
           getLights_Status@lights 0055                             _OSCCON 0090  
               __size_of_Load_Main 016B                             _TMR1IE 0460  
                           _TMR1IF 0060                             _IO_Set 0D8F  
           getLights_Status@status 0056             __end_of_setLights_Main 0FAA  
           __end_of_setLights_Line 0CCD                _getLightsControl_GO 0C33  
              _getLightsControl_OK 0C39       __size_of_SYSC_Initialization 0003  
       __end_of_Mcu_Initialization 0CDC                             _Lights 0035  
                           _Timer1 0032        __size_of_CDS_Initialization 0004  
          ??_Lights_Initialization 0076                          ??___awdiv 0074  
                        ??___lwdiv 0074                             _setLED 0756  
                           _myMain 0020                _setLights_Main$4453 0066  
                 ___awdiv@quotient 005B                 __size_of_Temp_Main 0003  
      __end_of_Load_Initialization 0C33               ?_getLightsControl_GO 0070  
             ?_getLightsControl_OK 0070                             saved_w 007E  
                 ?_Timeout_Counter 0070        getMain_Lights_Count@status1 0058  
      getMain_Lights_Count@status2 0056        getMain_Lights_Count@status3 0057  
                __end_of_SYSC_Main 0C12                     _Lights_Control 0628  
          __size_of_LedPointSelect 001C                          ?_CDS_Main 0070  
      __size_of_PIR_Initialization 000B         getMain_LightsStatus@status 0058  
          __end_of__initialization 0023                          ?_LED_Main 0070  
                    ?_my_MainTimer 0070                    ?_setLights_Main 0070  
                  ?_setLights_Line 0070                      ?_setSYSC_Main 0070  
       __size_of_setLights_Trigger 001B                     __pcstackCOMMON 0070  
               __size_of_getCDS_AD 002A           __end_of_getLights_Status 0D0C  
                    __end_of_getAD 0E29                          ?_PIR_Main 0070  
                        ?_TMR1_ISR 0070                          ?_TMR1_Set 0070  
           setLoad_AH_AL_Restore@i 0075                 _LED_Initialization 0C81  
               __size_of_getPIR_AD 013A                        _Lights_Main 0C6B  
         _setLights_Initialization 0C45               _getMain_Lights_Count 0D0C  
                        ?_WDT_Main 0070                  __end_of_Load_Main 0378  
            ??_getLightsControl_GO 0074              ??_getLightsControl_OK 0074  
             _getMain_LightsStatus 0D53         __end_of_set_TimeoutCleared 0C45  
              ?_LED_Initialization 0070             __end_of_Lights_Control 0695  
             __size_of_setLED_Main 003D                            ??_getAD 0075  
              _Temp_Initialization 0C12                         ??_CDS_Main 0055  
                       __pbssBANK0 0020                         __pbssBANK1 00A0  
                        ?_Fosc_Set 0070        __size_of_getAll_Lights_Line 0011  
                __end_of_Temp_Main 0C18                            ?_IO_Set 0070  
                  __CFG_VCAPEN$DIS 0000                     ??_my_MainTimer 0074  
                       ??_LED_Main 0076               __end_of_Lights_Close 0D53  
                   ??_setSYSC_Main 005D               ??_LED_Initialization 0076  
                LedPointSelect@led 0075                         __pmaintext 0695  
             ?_Temp_Initialization 0070                         ??_PIR_Main 005D  
                       ??_TMR1_ISR 0070                      ?_setTemp_Main 0070  
               __size_of_setLights 006F                         _getLoad_AD 0548  
                       ??_TMR1_Set 0074                         __pintentry 0004  
                       _getLoad_OK 0C53                            ?_setLED 0055  
          setLights_Trigger@lights 0057              ?_getMain_Lights_Count 0070  
                          _ADC_Set 0C4C                         _getTemp_AD 0E48  
                       ??_WDT_Main 0074              ?_getMain_LightsStatus 0070  
           __size_of_getCDS_Status 0008                    ?_Lights_Control 0070  
                __end_of_getCDS_AD 0E98                            _WDT_Set 0CA5  
                       ??_Fosc_Set 0074                  __end_of_getPIR_AD 04B2  
          ??_setLoad_AH_AL_Restore 0074          getLightsControl_GO@loadgo 0074  
                  __size_of_IO_Set 0015                         getCDS_AD@i 0058  
                       getCDS_AD@j 0059                            _Lights1 0042  
                          _VarLED1 004D                            _VarLED2 0051  
            ??_Temp_Initialization 0074                     ??_setTemp_Main 005D  
                          ___awdiv 06F9          getLightsControl_OK@loadok 0074  
                          ___lwdiv 07B2                    __size_of_setLED 005C  
                          __ptext0 0000                            __ptext1 0D7B  
                          __ptext2 0C0B                            __ptext3 0E48  
                          __ptext4 0378                            __ptext5 07B2  
                          __ptext6 0548                            __ptext7 0E6E  
                          __ptext8 0E0D                            __ptext9 0C3F  
                       getPIR_AD@i 0063                         getPIR_AD@j 0061  
                     __size_of_ISR 0010         ??_getMain_All_Error_Status 0075  
              _SYSC_Initialization 0C0C            ??_myMain_Initialization 0074  
         ??_setTemp_Initialization 0074                     _LedPointSelect 0DF1  
                          clrloop0 0C64                  __end_of_setLights 0628  
             end_of_initialization 0023           getMain_Exception@command 0059  
                    _getCDS_Status 0C5B               ?_SYSC_Initialization 0070  
            _setLED_Initialization 0D2E                        ?_getLoad_AD 0070  
   __size_of_Lights_Initialization 0004                        ?_getLoad_OK 0070  
           ??_getMain_Lights_Count 0074      __end_of_Lights_Initialization 0C20  
           ??_getMain_LightsStatus 0057                        ?_getTemp_AD 0070  
         setLED_Initialization@led 0057                 _Mcu_Initialization 0CCD  
             __end_of_my_MainTimer 0D8F               __end_of_setSYSC_Main 0F59  
           __end_of_LedPointSelect 0E0D                ?_Mcu_Initialization 0070  
            __size_of_Lights_Close 0013                   ??_setLights_Main 0063  
                 ??_setLights_Line 0076               setLights_Main@lights 0068  
                        _SYSC_Main 0C0F    getMain_All_Error_Status@command 005B  
                __size_of_CDS_Main 0034                     ?_getCDS_Status 0070  
            ??_SYSC_Initialization 0074                     __end_of_IO_Set 0DA4  
       __end_of_CDS_Initialization 0C1C         ??_setLights_Initialization 0076  
                __size_of_LED_Main 000C                  _getMain_Exception 0E29  
             ??_Mcu_Initialization 0075                      ?_WDT_Clearing 0070  
               ?_getMain_Exception 0070                  ?_getLights_Status 0070  
                     ?_Lights_Main 0070                  __size_of_PIR_Main 01E7  
                __size_of_TMR1_ISR 001C                 ??_getLights_Status 0076  
                __size_of_TMR1_Set 000E                     __end_of_setLED 07B2  
              ??_getMain_Exception 0058           ??_setSYSC_Initialization 0074  
                     _Lights_Close 0D40                  __size_of_WDT_Main 000F  
              _Lights_Control$4460 0057                start_initialization 0013  
                  ?_LedPointSelect 0070               setLights_Line@lights 0055  
                        _Load_Main 020D                        __end_of_ISR 0CFB  
       __end_of_PIR_Initialization 0C81       __size_of_Load_Initialization 0006  
  __size_of_setTemp_Initialization 0004                getCDS_Status@status 0074  
             __end_of_setTemp_Main 0548                __size_of_getLoad_AD 0071  
              __size_of_getLoad_OK 0008                         ?_SYSC_Main 0070  
               _set_TimeoutCleared 0C3F                           ??_IO_Set 0074  
         __size_of_Timeout_Counter 0014                          _VarErrLED 0049  
              __size_of_getTemp_AD 0026             ?_setLED_Initialization 0070  
                __size_of_Fosc_Set 0005          __end_of_getMain_Exception 0E48  
                        _Temp_Main 0C15                    setLights@lights 0062  
              ?_set_TimeoutCleared 0070                     ??_WDT_Clearing 0074  
                  setLights@status 005D        __end_of_getLightsControl_GO 0C39  
      __end_of_getLightsControl_OK 0C3F                           ??_setLED 0076  
                         ?_ADC_Set 0070                   ??_Lights_Control 0055  
 __end_of_getMain_All_Error_Status 1000                      ??_setLED_Main 0055  
                      __pbssCOMMON 0076                          ___latbits 0001  
                       ?_Load_Main 0070                      __pcstackBANK0 0055  
             ??_set_TimeoutCleared 0074         __end_of_getAll_Lights_Line 0D2E  
                         ?_WDT_Set 0070                    ??_getCDS_Status 0074  
                    PIR_Main@error 0064                          _getCDS_AD 0E6E  
   __size_of_setLoad_AH_AL_Restore 0016      __end_of_setLoad_AH_AL_Restore 0DBA  
                        _getPIR_AD 0378        __size_of_LED_Initialization 000C  
                       ?_Temp_Main 0070                   ___lwdiv@dividend 0057  
                   Load_Main@error 0060             _setTemp_Initialization 0C24  
                    _PIR_Main$3037 0062                           ?___awdiv 0055  
            __size_of_my_MainTimer 0014                           ?___lwdiv 0055  
            __size_of_setSYSC_Main 0050           setLights_Trigger@command 0055  
  __size_of_setSYSC_Initialization 0004     __size_of_myMain_Initialization 0001  
    __end_of_myMain_Initialization 0C0C                     __size_of_getAD 001C  
                 ___lwdiv@quotient 005A                           _CDS_Main 0E98  
              __end_of_setLED_Main 0F09                        ??_SYSC_Main 0076  
      __end_of_Temp_Initialization 0C15                  interrupt_function 0004  
                       ?_getCDS_AD 0055                           _LED_Main 0C8D  
                        _setLights 05B9                          clear_ram0 0C63  
       __size_of_getMain_Exception 001F   __end_of_setLights_Initialization 0C4C  
                     _my_MainTimer 0D7B                         ?_getPIR_AD 005D  
                     _setSYSC_Main 0F09            getMain_Exception@status 005A  
                         _GO_nDONE 00F9                  ??_Timeout_Counter 0074  
                         _PIR_Main 0026                       ??_getLoad_AD 0055  
                         _TMR1_ISR 0DD5                       ??_getLoad_OK 0074  
                         _TMR1_Set 07F2                       ??_getTemp_AD 0055  
                         _WDT_Main 0CDC                   __size_of_ADC_Set 0007  
             __size_of_Lights_Main 000B              __size_of_setTemp_Main 0096  
                      ??_Load_Main 005D     getMain_All_Error_Status@status 005C  
                      getAD@adcon0 0075                        getAD@adcon1 0074  
                   setLED_Main@led 0057               __end_of_WDT_Clearing 0004  
                         _Fosc_Set 0C28                   __size_of_WDT_Set 000C  
               __end_of_getLoad_AD 05B9                 __end_of_getLoad_OK 0C5B  
__size_of_getMain_All_Error_Status 0056          ?_getMain_All_Error_Status 0070  
                       ?_setLights 005D                 __end_of_getTemp_AD 0E6E  
           _setSYSC_Initialization 0C20                  getLoad_AD@channel 0057  
                _DetectSYSC_Signal 0CB1                        ??_Temp_Main 0076  
    _getMain_All_Error_Status$2263 0055      _getMain_All_Error_Status$2272 0057  
    _getMain_All_Error_Status$2274 0059                _Load_Initialization 0C2D  
               ?_DetectSYSC_Signal 0070                          setLED@led 0056  
                     _setTemp_Main 04B2                   __size_of___awdiv 005D  
                 __size_of___lwdiv 0040                   ??_LedPointSelect 0074  
    __size_of_getMain_Lights_Count 0011                ??_DetectSYSC_Signal 0074  
               _CDS_Initialization 0C18              _Lights_Initialization 0C1C  
    __size_of_getMain_LightsStatus 0014                  getTemp_AD@channel 0057  
                      _setLED_Main 0ECC                    ___lwdiv@divisor 0055  
             ?_Load_Initialization 0070                ?_CDS_Initialization 0070  
                  ___lwdiv@counter 0059                           __ptext10 0D67  
                         __ptext11 0CDC                           __ptext20 0C0C  
                         __ptext12 0002                           __ptext21 0C20  
                         __ptext13 0C15                           __ptext30 0D8F  
                         __ptext22 0026                           __ptext14 04B2  
                         __ptext31 0C28                           __ptext23 0E29  
                         __ptext15 06F9                           __ptext40 0F59  
                         __ptext32 0C4C                           __ptext24 0DBA  
                         __ptext16 0C12                           __ptext41 05B9  
                         __ptext33 020D                           __ptext25 0D1D  
                         __ptext17 0C24                           __ptext50 0C1C  
                         __ptext42 0CBF                           __ptext34 0D0C  
                         __ptext26 0C76                           __ptext18 0C0F  
                         __ptext51 0C45                           __ptext43 0FAA  
                         __ptext35 0C39                           __ptext27 0CCD  
                         __ptext19 0F09                           __ptext60 0E98  
                         __ptext52 0C99                           __ptext44 0C5B  
                         __ptext36 0C33                           __ptext28 0CA5  
                         __ptext61 0C18                           __ptext53 0C8D  
                         __ptext45 0C53                           __ptext37 0C2D  
                         __ptext29 07F2                           __ptext62 0CEB  
                         __ptext54 0ECC                           __ptext46 0628  
                         __ptext38 0DA4                           __ptext63 0DD5  
                         __ptext55 0C81                           __ptext47 0D40  
                         __ptext39 0C6B                           __ptext56 0D2E  
                         __ptext48 0D53                           __ptext57 0756  
                         __ptext49 0CFB                           __ptext58 0DF1  
                         __ptext59 0CB1          __size_of_getLights_Status 0011  
      __end_of_SYSC_Initialization 0C0F            ??_setLED_Initialization 0076  
                      ??_getCDS_AD 0056                      setLED@command 0055  
        __end_of_DetectSYSC_Signal 0CBF                      __size_of_main 0064  
                      ??_getPIR_AD 005E                 _PIR_Initialization 0C76  
             ??_CDS_Initialization 0074        __size_of_Mcu_Initialization 000F  
                     getLoad_OK@ok 0074                ?_PIR_Initialization 0070  
                         main@argc 0069                           main@argv 006B  
__size_of_setLights_Initialization 0007          ?_setLights_Initialization 0070  
            ??_Load_Initialization 0076               Lights_Control@lights 0059  
             ??_PIR_Initialization 0074                           intlevel1 0000  
                      ??_setLights 005E            ?_setTemp_Initialization 0070  
          LightsPointSelect@lights 0075                 _getAll_Lights_Line 0D1D  
                      getLoad_AD@i 005A                        getLoad_AD@j 0059  
                      getLoad_AD@k 0058            __size_of_setLights_Main 0051  
          __size_of_setLights_Line 000E                ?_getAll_Lights_Line 0070  
           ?_Lights_Initialization 0070              __size_of_WDT_Clearing 0002  
   setLights_Initialization@lights 0055       __size_of_getLightsControl_GO 0006  
     __size_of_getLightsControl_OK 0006        __size_of_set_TimeoutCleared 0006  
                _LightsPointSelect 0C99               ??_getAll_Lights_Line 0076  
               __CFG_FOSC$INTOSCIO 0000                 ?_LightsPointSelect 0070  
                  _Timeout_Counter 0D67         __end_of_LED_Initialization 0C8D  
            __end_of_getCDS_Status 0C63     __end_of_setTemp_Initialization 0C28  
       __size_of_DetectSYSC_Signal 000E                  getCDS_AD@channel1 005A  
                getCDS_AD@channel2 0055                ??_LightsPointSelect 0074  
            _setLoad_AH_AL_Restore 0DA4  
