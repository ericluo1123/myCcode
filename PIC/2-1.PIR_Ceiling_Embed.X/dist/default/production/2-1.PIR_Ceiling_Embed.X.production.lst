

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Nov 14 13:48:37 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,delta=2
    68                           	psect	text55,local,class=CODE,merge=1,delta=2
    69                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text57,local,class=CODE,merge=1,delta=2
    71                           	psect	text58,local,class=CODE,merge=1,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,delta=2
    77                           	psect	intentry,global,class=CODE,delta=2
    78                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    79                           	dabs	1,0x7E,2
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  000E                     	;# 
    95  000F                     	;# 
    96  0010                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0013                     	;# 
   100  0014                     	;# 
   101  0015                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001B                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001D                     	;# 
   112  001E                     	;# 
   113  001F                     	;# 
   114  0081                     	;# 
   115  0085                     	;# 
   116  0086                     	;# 
   117  0087                     	;# 
   118  0089                     	;# 
   119  008C                     	;# 
   120  008D                     	;# 
   121  008E                     	;# 
   122  008F                     	;# 
   123  0090                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0095                     	;# 
   131  0096                     	;# 
   132  0096                     	;# 
   133  0098                     	;# 
   134  0099                     	;# 
   135  009C                     	;# 
   136  009D                     	;# 
   137  009F                     	;# 
   138  0108                     	;# 
   139  0109                     	;# 
   140  010C                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  010D                     	;# 
   144  010E                     	;# 
   145  010F                     	;# 
   146  0185                     	;# 
   147  0186                     	;# 
   148  018C                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0096                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009F                     	;# 
   207  0108                     	;# 
   208  0109                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  010F                     	;# 
   215  0185                     	;# 
   216  0186                     	;# 
   217  018C                     	;# 
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  000E                     	;# 
   232  000E                     	;# 
   233  000F                     	;# 
   234  0010                     	;# 
   235  0011                     	;# 
   236  0012                     	;# 
   237  0013                     	;# 
   238  0014                     	;# 
   239  0015                     	;# 
   240  0015                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001B                     	;# 
   248  001C                     	;# 
   249  001D                     	;# 
   250  001E                     	;# 
   251  001F                     	;# 
   252  0081                     	;# 
   253  0085                     	;# 
   254  0086                     	;# 
   255  0087                     	;# 
   256  0089                     	;# 
   257  008C                     	;# 
   258  008D                     	;# 
   259  008E                     	;# 
   260  008F                     	;# 
   261  0090                     	;# 
   262  0091                     	;# 
   263  0092                     	;# 
   264  0093                     	;# 
   265  0093                     	;# 
   266  0094                     	;# 
   267  0095                     	;# 
   268  0095                     	;# 
   269  0096                     	;# 
   270  0096                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009F                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  0185                     	;# 
   285  0186                     	;# 
   286  018C                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0089                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  008F                     	;# 
   330  0090                     	;# 
   331  0091                     	;# 
   332  0092                     	;# 
   333  0093                     	;# 
   334  0093                     	;# 
   335  0094                     	;# 
   336  0095                     	;# 
   337  0095                     	;# 
   338  0096                     	;# 
   339  0096                     	;# 
   340  0098                     	;# 
   341  0099                     	;# 
   342  009C                     	;# 
   343  009D                     	;# 
   344  009F                     	;# 
   345  0108                     	;# 
   346  0109                     	;# 
   347  010C                     	;# 
   348  010C                     	;# 
   349  010D                     	;# 
   350  010D                     	;# 
   351  010E                     	;# 
   352  010F                     	;# 
   353  0185                     	;# 
   354  0186                     	;# 
   355  018C                     	;# 
   356  0000                     	;# 
   357  0001                     	;# 
   358  0002                     	;# 
   359  0003                     	;# 
   360  0004                     	;# 
   361  0005                     	;# 
   362  0006                     	;# 
   363  0007                     	;# 
   364  0009                     	;# 
   365  000A                     	;# 
   366  000B                     	;# 
   367  000C                     	;# 
   368  000D                     	;# 
   369  000E                     	;# 
   370  000E                     	;# 
   371  000F                     	;# 
   372  0010                     	;# 
   373  0011                     	;# 
   374  0012                     	;# 
   375  0013                     	;# 
   376  0014                     	;# 
   377  0015                     	;# 
   378  0015                     	;# 
   379  0016                     	;# 
   380  0017                     	;# 
   381  0018                     	;# 
   382  0019                     	;# 
   383  001A                     	;# 
   384  001B                     	;# 
   385  001B                     	;# 
   386  001C                     	;# 
   387  001D                     	;# 
   388  001E                     	;# 
   389  001F                     	;# 
   390  0081                     	;# 
   391  0085                     	;# 
   392  0086                     	;# 
   393  0087                     	;# 
   394  0089                     	;# 
   395  008C                     	;# 
   396  008D                     	;# 
   397  008E                     	;# 
   398  008F                     	;# 
   399  0090                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0093                     	;# 
   404  0094                     	;# 
   405  0095                     	;# 
   406  0095                     	;# 
   407  0096                     	;# 
   408  0096                     	;# 
   409  0098                     	;# 
   410  0099                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009F                     	;# 
   414  0108                     	;# 
   415  0109                     	;# 
   416  010C                     	;# 
   417  010C                     	;# 
   418  010D                     	;# 
   419  010D                     	;# 
   420  010E                     	;# 
   421  010F                     	;# 
   422  0185                     	;# 
   423  0186                     	;# 
   424  018C                     	;# 
   425  0000                     	;# 
   426  0001                     	;# 
   427  0002                     	;# 
   428  0003                     	;# 
   429  0004                     	;# 
   430  0005                     	;# 
   431  0006                     	;# 
   432  0007                     	;# 
   433  0009                     	;# 
   434  000A                     	;# 
   435  000B                     	;# 
   436  000C                     	;# 
   437  000D                     	;# 
   438  000E                     	;# 
   439  000E                     	;# 
   440  000F                     	;# 
   441  0010                     	;# 
   442  0011                     	;# 
   443  0012                     	;# 
   444  0013                     	;# 
   445  0014                     	;# 
   446  0015                     	;# 
   447  0015                     	;# 
   448  0016                     	;# 
   449  0017                     	;# 
   450  0018                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001B                     	;# 
   455  001C                     	;# 
   456  001D                     	;# 
   457  001E                     	;# 
   458  001F                     	;# 
   459  0081                     	;# 
   460  0085                     	;# 
   461  0086                     	;# 
   462  0087                     	;# 
   463  0089                     	;# 
   464  008C                     	;# 
   465  008D                     	;# 
   466  008E                     	;# 
   467  008F                     	;# 
   468  0090                     	;# 
   469  0091                     	;# 
   470  0092                     	;# 
   471  0093                     	;# 
   472  0093                     	;# 
   473  0094                     	;# 
   474  0095                     	;# 
   475  0095                     	;# 
   476  0096                     	;# 
   477  0096                     	;# 
   478  0098                     	;# 
   479  0099                     	;# 
   480  009C                     	;# 
   481  009D                     	;# 
   482  009F                     	;# 
   483  0108                     	;# 
   484  0109                     	;# 
   485  010C                     	;# 
   486  010C                     	;# 
   487  010D                     	;# 
   488  010D                     	;# 
   489  010E                     	;# 
   490  010F                     	;# 
   491  0185                     	;# 
   492  0186                     	;# 
   493  018C                     	;# 
   494  0000                     	;# 
   495  0001                     	;# 
   496  0002                     	;# 
   497  0003                     	;# 
   498  0004                     	;# 
   499  0005                     	;# 
   500  0006                     	;# 
   501  0007                     	;# 
   502  0009                     	;# 
   503  000A                     	;# 
   504  000B                     	;# 
   505  000C                     	;# 
   506  000D                     	;# 
   507  000E                     	;# 
   508  000E                     	;# 
   509  000F                     	;# 
   510  0010                     	;# 
   511  0011                     	;# 
   512  0012                     	;# 
   513  0013                     	;# 
   514  0014                     	;# 
   515  0015                     	;# 
   516  0015                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001B                     	;# 
   524  001C                     	;# 
   525  001D                     	;# 
   526  001E                     	;# 
   527  001F                     	;# 
   528  0081                     	;# 
   529  0085                     	;# 
   530  0086                     	;# 
   531  0087                     	;# 
   532  0089                     	;# 
   533  008C                     	;# 
   534  008D                     	;# 
   535  008E                     	;# 
   536  008F                     	;# 
   537  0090                     	;# 
   538  0091                     	;# 
   539  0092                     	;# 
   540  0093                     	;# 
   541  0093                     	;# 
   542  0094                     	;# 
   543  0095                     	;# 
   544  0095                     	;# 
   545  0096                     	;# 
   546  0096                     	;# 
   547  0098                     	;# 
   548  0099                     	;# 
   549  009C                     	;# 
   550  009D                     	;# 
   551  009F                     	;# 
   552  0108                     	;# 
   553  0109                     	;# 
   554  010C                     	;# 
   555  010C                     	;# 
   556  010D                     	;# 
   557  010D                     	;# 
   558  010E                     	;# 
   559  010F                     	;# 
   560  0185                     	;# 
   561  0186                     	;# 
   562  018C                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0009                     	;# 
   572  000A                     	;# 
   573  000B                     	;# 
   574  000C                     	;# 
   575  000D                     	;# 
   576  000E                     	;# 
   577  000E                     	;# 
   578  000F                     	;# 
   579  0010                     	;# 
   580  0011                     	;# 
   581  0012                     	;# 
   582  0013                     	;# 
   583  0014                     	;# 
   584  0015                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0017                     	;# 
   588  0018                     	;# 
   589  0019                     	;# 
   590  001A                     	;# 
   591  001B                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  001D                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  0081                     	;# 
   598  0085                     	;# 
   599  0086                     	;# 
   600  0087                     	;# 
   601  0089                     	;# 
   602  008C                     	;# 
   603  008D                     	;# 
   604  008E                     	;# 
   605  008F                     	;# 
   606  0090                     	;# 
   607  0091                     	;# 
   608  0092                     	;# 
   609  0093                     	;# 
   610  0093                     	;# 
   611  0094                     	;# 
   612  0095                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0096                     	;# 
   616  0098                     	;# 
   617  0099                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009F                     	;# 
   621  0108                     	;# 
   622  0109                     	;# 
   623  010C                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010D                     	;# 
   627  010E                     	;# 
   628  010F                     	;# 
   629  0185                     	;# 
   630  0186                     	;# 
   631  018C                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0009                     	;# 
   641  000A                     	;# 
   642  000B                     	;# 
   643  000C                     	;# 
   644  000D                     	;# 
   645  000E                     	;# 
   646  000E                     	;# 
   647  000F                     	;# 
   648  0010                     	;# 
   649  0011                     	;# 
   650  0012                     	;# 
   651  0013                     	;# 
   652  0014                     	;# 
   653  0015                     	;# 
   654  0015                     	;# 
   655  0016                     	;# 
   656  0017                     	;# 
   657  0018                     	;# 
   658  0019                     	;# 
   659  001A                     	;# 
   660  001B                     	;# 
   661  001B                     	;# 
   662  001C                     	;# 
   663  001D                     	;# 
   664  001E                     	;# 
   665  001F                     	;# 
   666  0081                     	;# 
   667  0085                     	;# 
   668  0086                     	;# 
   669  0087                     	;# 
   670  0089                     	;# 
   671  008C                     	;# 
   672  008D                     	;# 
   673  008E                     	;# 
   674  008F                     	;# 
   675  0090                     	;# 
   676  0091                     	;# 
   677  0092                     	;# 
   678  0093                     	;# 
   679  0093                     	;# 
   680  0094                     	;# 
   681  0095                     	;# 
   682  0095                     	;# 
   683  0096                     	;# 
   684  0096                     	;# 
   685  0098                     	;# 
   686  0099                     	;# 
   687  009C                     	;# 
   688  009D                     	;# 
   689  009F                     	;# 
   690  0108                     	;# 
   691  0109                     	;# 
   692  010C                     	;# 
   693  010C                     	;# 
   694  010D                     	;# 
   695  010D                     	;# 
   696  010E                     	;# 
   697  010F                     	;# 
   698  0185                     	;# 
   699  0186                     	;# 
   700  018C                     	;# 
   701  0000                     	;# 
   702  0001                     	;# 
   703  0002                     	;# 
   704  0003                     	;# 
   705  0004                     	;# 
   706  0005                     	;# 
   707  0006                     	;# 
   708  0007                     	;# 
   709  0009                     	;# 
   710  000A                     	;# 
   711  000B                     	;# 
   712  000C                     	;# 
   713  000D                     	;# 
   714  000E                     	;# 
   715  000E                     	;# 
   716  000F                     	;# 
   717  0010                     	;# 
   718  0011                     	;# 
   719  0012                     	;# 
   720  0013                     	;# 
   721  0014                     	;# 
   722  0015                     	;# 
   723  0015                     	;# 
   724  0016                     	;# 
   725  0017                     	;# 
   726  0018                     	;# 
   727  0019                     	;# 
   728  001A                     	;# 
   729  001B                     	;# 
   730  001B                     	;# 
   731  001C                     	;# 
   732  001D                     	;# 
   733  001E                     	;# 
   734  001F                     	;# 
   735  0081                     	;# 
   736  0085                     	;# 
   737  0086                     	;# 
   738  0087                     	;# 
   739  0089                     	;# 
   740  008C                     	;# 
   741  008D                     	;# 
   742  008E                     	;# 
   743  008F                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0093                     	;# 
   748  0093                     	;# 
   749  0094                     	;# 
   750  0095                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0096                     	;# 
   754  0098                     	;# 
   755  0099                     	;# 
   756  009C                     	;# 
   757  009D                     	;# 
   758  009F                     	;# 
   759  0108                     	;# 
   760  0109                     	;# 
   761  010C                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010D                     	;# 
   765  010E                     	;# 
   766  010F                     	;# 
   767  0185                     	;# 
   768  0186                     	;# 
   769  018C                     	;# 
   770  0000                     	;# 
   771  0001                     	;# 
   772  0002                     	;# 
   773  0003                     	;# 
   774  0004                     	;# 
   775  0005                     	;# 
   776  0006                     	;# 
   777  0007                     	;# 
   778  0009                     	;# 
   779  000A                     	;# 
   780  000B                     	;# 
   781  000C                     	;# 
   782  000D                     	;# 
   783  000E                     	;# 
   784  000E                     	;# 
   785  000F                     	;# 
   786  0010                     	;# 
   787  0011                     	;# 
   788  0012                     	;# 
   789  0013                     	;# 
   790  0014                     	;# 
   791  0015                     	;# 
   792  0015                     	;# 
   793  0016                     	;# 
   794  0017                     	;# 
   795  0018                     	;# 
   796  0019                     	;# 
   797  001A                     	;# 
   798  001B                     	;# 
   799  001B                     	;# 
   800  001C                     	;# 
   801  001D                     	;# 
   802  001E                     	;# 
   803  001F                     	;# 
   804  0081                     	;# 
   805  0085                     	;# 
   806  0086                     	;# 
   807  0087                     	;# 
   808  0089                     	;# 
   809  008C                     	;# 
   810  008D                     	;# 
   811  008E                     	;# 
   812  008F                     	;# 
   813  0090                     	;# 
   814  0091                     	;# 
   815  0092                     	;# 
   816  0093                     	;# 
   817  0093                     	;# 
   818  0094                     	;# 
   819  0095                     	;# 
   820  0095                     	;# 
   821  0096                     	;# 
   822  0096                     	;# 
   823  0098                     	;# 
   824  0099                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009F                     	;# 
   828  0108                     	;# 
   829  0109                     	;# 
   830  010C                     	;# 
   831  010C                     	;# 
   832  010D                     	;# 
   833  010D                     	;# 
   834  010E                     	;# 
   835  010F                     	;# 
   836  0185                     	;# 
   837  0186                     	;# 
   838  018C                     	;# 
   839  0000                     	;# 
   840  0001                     	;# 
   841  0002                     	;# 
   842  0003                     	;# 
   843  0004                     	;# 
   844  0005                     	;# 
   845  0006                     	;# 
   846  0007                     	;# 
   847  0009                     	;# 
   848  000A                     	;# 
   849  000B                     	;# 
   850  000C                     	;# 
   851  000D                     	;# 
   852  000E                     	;# 
   853  000E                     	;# 
   854  000F                     	;# 
   855  0010                     	;# 
   856  0011                     	;# 
   857  0012                     	;# 
   858  0013                     	;# 
   859  0014                     	;# 
   860  0015                     	;# 
   861  0015                     	;# 
   862  0016                     	;# 
   863  0017                     	;# 
   864  0018                     	;# 
   865  0019                     	;# 
   866  001A                     	;# 
   867  001B                     	;# 
   868  001B                     	;# 
   869  001C                     	;# 
   870  001D                     	;# 
   871  001E                     	;# 
   872  001F                     	;# 
   873  0081                     	;# 
   874  0085                     	;# 
   875  0086                     	;# 
   876  0087                     	;# 
   877  0089                     	;# 
   878  008C                     	;# 
   879  008D                     	;# 
   880  008E                     	;# 
   881  008F                     	;# 
   882  0090                     	;# 
   883  0091                     	;# 
   884  0092                     	;# 
   885  0093                     	;# 
   886  0093                     	;# 
   887  0094                     	;# 
   888  0095                     	;# 
   889  0095                     	;# 
   890  0096                     	;# 
   891  0096                     	;# 
   892  0098                     	;# 
   893  0099                     	;# 
   894  009C                     	;# 
   895  009D                     	;# 
   896  009F                     	;# 
   897  0108                     	;# 
   898  0109                     	;# 
   899  010C                     	;# 
   900  010C                     	;# 
   901  010D                     	;# 
   902  010D                     	;# 
   903  010E                     	;# 
   904  010F                     	;# 
   905  0185                     	;# 
   906  0186                     	;# 
   907  018C                     	;# 
   908  0000                     	;# 
   909  0001                     	;# 
   910  0002                     	;# 
   911  0003                     	;# 
   912  0004                     	;# 
   913  0005                     	;# 
   914  0006                     	;# 
   915  0007                     	;# 
   916  0009                     	;# 
   917  000A                     	;# 
   918  000B                     	;# 
   919  000C                     	;# 
   920  000D                     	;# 
   921  000E                     	;# 
   922  000E                     	;# 
   923  000F                     	;# 
   924  0010                     	;# 
   925  0011                     	;# 
   926  0012                     	;# 
   927  0013                     	;# 
   928  0014                     	;# 
   929  0015                     	;# 
   930  0015                     	;# 
   931  0016                     	;# 
   932  0017                     	;# 
   933  0018                     	;# 
   934  0019                     	;# 
   935  001A                     	;# 
   936  001B                     	;# 
   937  001B                     	;# 
   938  001C                     	;# 
   939  001D                     	;# 
   940  001E                     	;# 
   941  001F                     	;# 
   942  0081                     	;# 
   943  0085                     	;# 
   944  0086                     	;# 
   945  0087                     	;# 
   946  0089                     	;# 
   947  008C                     	;# 
   948  008D                     	;# 
   949  008E                     	;# 
   950  008F                     	;# 
   951  0090                     	;# 
   952  0091                     	;# 
   953  0092                     	;# 
   954  0093                     	;# 
   955  0093                     	;# 
   956  0094                     	;# 
   957  0095                     	;# 
   958  0095                     	;# 
   959  0096                     	;# 
   960  0096                     	;# 
   961  0098                     	;# 
   962  0099                     	;# 
   963  009C                     	;# 
   964  009D                     	;# 
   965  009F                     	;# 
   966  0108                     	;# 
   967  0109                     	;# 
   968  010C                     	;# 
   969  010C                     	;# 
   970  010D                     	;# 
   971  010D                     	;# 
   972  010E                     	;# 
   973  010F                     	;# 
   974  0185                     	;# 
   975  0186                     	;# 
   976  018C                     	;# 
   977  0000                     	;# 
   978  0001                     	;# 
   979  0002                     	;# 
   980  0003                     	;# 
   981  0004                     	;# 
   982  0005                     	;# 
   983  0006                     	;# 
   984  0007                     	;# 
   985  0009                     	;# 
   986  000A                     	;# 
   987  000B                     	;# 
   988  000C                     	;# 
   989  000D                     	;# 
   990  000E                     	;# 
   991  000E                     	;# 
   992  000F                     	;# 
   993  0010                     	;# 
   994  0011                     	;# 
   995  0012                     	;# 
   996  0013                     	;# 
   997  0014                     	;# 
   998  0015                     	;# 
   999  0015                     	;# 
  1000  0016                     	;# 
  1001  0017                     	;# 
  1002  0018                     	;# 
  1003  0019                     	;# 
  1004  001A                     	;# 
  1005  001B                     	;# 
  1006  001B                     	;# 
  1007  001C                     	;# 
  1008  001D                     	;# 
  1009  001E                     	;# 
  1010  001F                     	;# 
  1011  0081                     	;# 
  1012  0085                     	;# 
  1013  0086                     	;# 
  1014  0087                     	;# 
  1015  0089                     	;# 
  1016  008C                     	;# 
  1017  008D                     	;# 
  1018  008E                     	;# 
  1019  008F                     	;# 
  1020  0090                     	;# 
  1021  0091                     	;# 
  1022  0092                     	;# 
  1023  0093                     	;# 
  1024  0093                     	;# 
  1025  0094                     	;# 
  1026  0095                     	;# 
  1027  0095                     	;# 
  1028  0096                     	;# 
  1029  0096                     	;# 
  1030  0098                     	;# 
  1031  0099                     	;# 
  1032  009C                     	;# 
  1033  009D                     	;# 
  1034  009F                     	;# 
  1035  0108                     	;# 
  1036  0109                     	;# 
  1037  010C                     	;# 
  1038  010C                     	;# 
  1039  010D                     	;# 
  1040  010D                     	;# 
  1041  010E                     	;# 
  1042  010F                     	;# 
  1043  0185                     	;# 
  1044  0186                     	;# 
  1045  018C                     	;# 
  1046  0000                     	;# 
  1047  0001                     	;# 
  1048  0002                     	;# 
  1049  0003                     	;# 
  1050  0004                     	;# 
  1051  0005                     	;# 
  1052  0006                     	;# 
  1053  0007                     	;# 
  1054  0009                     	;# 
  1055  000A                     	;# 
  1056  000B                     	;# 
  1057  000C                     	;# 
  1058  000D                     	;# 
  1059  000E                     	;# 
  1060  000E                     	;# 
  1061  000F                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0013                     	;# 
  1066  0014                     	;# 
  1067  0015                     	;# 
  1068  0015                     	;# 
  1069  0016                     	;# 
  1070  0017                     	;# 
  1071  0018                     	;# 
  1072  0019                     	;# 
  1073  001A                     	;# 
  1074  001B                     	;# 
  1075  001B                     	;# 
  1076  001C                     	;# 
  1077  001D                     	;# 
  1078  001E                     	;# 
  1079  001F                     	;# 
  1080  0081                     	;# 
  1081  0085                     	;# 
  1082  0086                     	;# 
  1083  0087                     	;# 
  1084  0089                     	;# 
  1085  008C                     	;# 
  1086  008D                     	;# 
  1087  008E                     	;# 
  1088  008F                     	;# 
  1089  0090                     	;# 
  1090  0091                     	;# 
  1091  0092                     	;# 
  1092  0093                     	;# 
  1093  0093                     	;# 
  1094  0094                     	;# 
  1095  0095                     	;# 
  1096  0095                     	;# 
  1097  0096                     	;# 
  1098  0096                     	;# 
  1099  0098                     	;# 
  1100  0099                     	;# 
  1101  009C                     	;# 
  1102  009D                     	;# 
  1103  009F                     	;# 
  1104  0108                     	;# 
  1105  0109                     	;# 
  1106  010C                     	;# 
  1107  010C                     	;# 
  1108  010D                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  010F                     	;# 
  1112  0185                     	;# 
  1113  0186                     	;# 
  1114  018C                     	;# 
  1115  0000                     	;# 
  1116  0001                     	;# 
  1117  0002                     	;# 
  1118  0003                     	;# 
  1119  0004                     	;# 
  1120  0005                     	;# 
  1121  0006                     	;# 
  1122  0007                     	;# 
  1123  0009                     	;# 
  1124  000A                     	;# 
  1125  000B                     	;# 
  1126  000C                     	;# 
  1127  000D                     	;# 
  1128  000E                     	;# 
  1129  000E                     	;# 
  1130  000F                     	;# 
  1131  0010                     	;# 
  1132  0011                     	;# 
  1133  0012                     	;# 
  1134  0013                     	;# 
  1135  0014                     	;# 
  1136  0015                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0017                     	;# 
  1140  0018                     	;# 
  1141  0019                     	;# 
  1142  001A                     	;# 
  1143  001B                     	;# 
  1144  001B                     	;# 
  1145  001C                     	;# 
  1146  001D                     	;# 
  1147  001E                     	;# 
  1148  001F                     	;# 
  1149  0081                     	;# 
  1150  0085                     	;# 
  1151  0086                     	;# 
  1152  0087                     	;# 
  1153  0089                     	;# 
  1154  008C                     	;# 
  1155  008D                     	;# 
  1156  008E                     	;# 
  1157  008F                     	;# 
  1158  0090                     	;# 
  1159  0091                     	;# 
  1160  0092                     	;# 
  1161  0093                     	;# 
  1162  0093                     	;# 
  1163  0094                     	;# 
  1164  0095                     	;# 
  1165  0095                     	;# 
  1166  0096                     	;# 
  1167  0096                     	;# 
  1168  0098                     	;# 
  1169  0099                     	;# 
  1170  009C                     	;# 
  1171  009D                     	;# 
  1172  009F                     	;# 
  1173  0108                     	;# 
  1174  0109                     	;# 
  1175  010C                     	;# 
  1176  010C                     	;# 
  1177  010D                     	;# 
  1178  010D                     	;# 
  1179  010E                     	;# 
  1180  010F                     	;# 
  1181  0185                     	;# 
  1182  0186                     	;# 
  1183  018C                     	;# 
  1184  0000                     	;# 
  1185  0001                     	;# 
  1186  0002                     	;# 
  1187  0003                     	;# 
  1188  0004                     	;# 
  1189  0005                     	;# 
  1190  0006                     	;# 
  1191  0007                     	;# 
  1192  0009                     	;# 
  1193  000A                     	;# 
  1194  000B                     	;# 
  1195  000C                     	;# 
  1196  000D                     	;# 
  1197  000E                     	;# 
  1198  000E                     	;# 
  1199  000F                     	;# 
  1200  0010                     	;# 
  1201  0011                     	;# 
  1202  0012                     	;# 
  1203  0013                     	;# 
  1204  0014                     	;# 
  1205  0015                     	;# 
  1206  0015                     	;# 
  1207  0016                     	;# 
  1208  0017                     	;# 
  1209  0018                     	;# 
  1210  0019                     	;# 
  1211  001A                     	;# 
  1212  001B                     	;# 
  1213  001B                     	;# 
  1214  001C                     	;# 
  1215  001D                     	;# 
  1216  001E                     	;# 
  1217  001F                     	;# 
  1218  0081                     	;# 
  1219  0085                     	;# 
  1220  0086                     	;# 
  1221  0087                     	;# 
  1222  0089                     	;# 
  1223  008C                     	;# 
  1224  008D                     	;# 
  1225  008E                     	;# 
  1226  008F                     	;# 
  1227  0090                     	;# 
  1228  0091                     	;# 
  1229  0092                     	;# 
  1230  0093                     	;# 
  1231  0093                     	;# 
  1232  0094                     	;# 
  1233  0095                     	;# 
  1234  0095                     	;# 
  1235  0096                     	;# 
  1236  0096                     	;# 
  1237  0098                     	;# 
  1238  0099                     	;# 
  1239  009C                     	;# 
  1240  009D                     	;# 
  1241  009F                     	;# 
  1242  0108                     	;# 
  1243  0109                     	;# 
  1244  010C                     	;# 
  1245  010C                     	;# 
  1246  010D                     	;# 
  1247  010D                     	;# 
  1248  010E                     	;# 
  1249  010F                     	;# 
  1250  0185                     	;# 
  1251  0186                     	;# 
  1252  018C                     	;# 
  1253  001F                     _ADCON0	set	31
  1254  001E                     _ADRES	set	30
  1255  0005                     _PORTA	set	5
  1256  0006                     _PORTB	set	6
  1257  0007                     _PORTC	set	7
  1258  0010                     _T1CON	set	16
  1259  000F                     _TMR1H	set	15
  1260  000E                     _TMR1L	set	14
  1261  005F                     _GIE	set	95
  1262  00F9                     _GO_nDONE	set	249
  1263  005E                     _PEIE	set	94
  1264  002C                     _RA4	set	44
  1265  002D                     _RA5	set	45
  1266  0032                     _RB2	set	50
  1267  0033                     _RB3	set	51
  1268  0034                     _RB4	set	52
  1269  0035                     _RB5	set	53
  1270  0060                     _TMR1IF	set	96
  1271  009F                     _ADCON1	set	159
  1272  009D                     _FVRCON	set	157
  1273  0090                     _OSCCON	set	144
  1274  0085                     _TRISA	set	133
  1275  0086                     _TRISB	set	134
  1276  0087                     _TRISC	set	135
  1277  0408                     _PS0	set	1032
  1278  0409                     _PS1	set	1033
  1279  040A                     _PS2	set	1034
  1280  040B                     _PSA	set	1035
  1281  0460                     _TMR1IE	set	1120
  1282  0185                     _ANSELA	set	389
  1283  0186                     _ANSELB	set	390
  1284                           
  1285                           	psect	text0
  1286  0000                     __ptext0:	
  1287                           ; #config settings
  1288                           
  1289                           
  1290                           ;psect for function _TMR1_ISR
  1291  0000                     
  1292                           	psect	cinit
  1293  0013                     start_initialization:	
  1294  0013                     __initialization:	
  1295                           
  1296                           ; Clear objects allocated to COMMON
  1297  0013  01F7               	clrf	__pbssCOMMON& (0+127)
  1298  0014  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1299  0015  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1300                           
  1301                           ; Clear objects allocated to BANK0
  1302  0016  1383               	bcf	3,7	;select IRP bank0
  1303  0017  3020               	movlw	low __pbssBANK0
  1304  0018  0084               	movwf	4
  1305  0019  305B               	movlw	low (__pbssBANK0+59)
  1306  001A  158A  23C4  118A   	fcall	clear_ram0
  1307                           
  1308                           ; Clear objects allocated to BANK1
  1309  001D  30A0               	movlw	low __pbssBANK1
  1310  001E  0084               	movwf	4
  1311  001F  30EF               	movlw	low (__pbssBANK1+79)
  1312  0020  158A  23C4         	fcall	clear_ram0
  1313  0022                     end_of_initialization:	
  1314                           ;End of C runtime variable initialization code
  1315                           
  1316  0022                     __end_of__initialization:	
  1317  0022  0183               	clrf	3
  1318  0023  118A  2EDB         	ljmp	_main	;jump to C main() function
  1319                           
  1320                           	psect	bssCOMMON
  1321  0077                     __pbssCOMMON:	
  1322  0077                     _LED:	
  1323  0077                     	ds	1
  1324  0078                     _Lights:	
  1325  0078                     	ds	1
  1326  0079                     _SwDetect:	
  1327  0079                     	ds	1
  1328                           
  1329                           	psect	bssBANK0
  1330  0020                     __pbssBANK0:	
  1331  0020                     _myMain:	
  1332  0020                     	ds	8
  1333  0028                     _SYSC:	
  1334  0028                     	ds	5
  1335  002D                     __CDS:	
  1336  002D                     	ds	5
  1337  0032                     _PIRLED:	
  1338  0032                     	ds	4
  1339  0036                     _Timer1:	
  1340  0036                     	ds	3
  1341  0039                     _WDT:	
  1342  0039                     	ds	2
  1343  003B                     _LightsControl:	
  1344  003B                     	ds	1
  1345  003C                     _Temp:	
  1346  003C                     	ds	12
  1347  0048                     _Lights1:	
  1348  0048                     	ds	7
  1349  004F                     _VarErrLED:	
  1350  004F                     	ds	4
  1351  0053                     _VarLED1:	
  1352  0053                     	ds	4
  1353  0057                     _VarLED2:	
  1354  0057                     	ds	4
  1355                           
  1356                           	psect	bssBANK1
  1357  00A0                     __pbssBANK1:	
  1358  00A0                     __PIR:	
  1359  00A0                     	ds	47
  1360  00CF                     _Load:	
  1361  00CF                     	ds	32
  1362                           
  1363                           	psect	clrtext
  1364  0BC4                     clear_ram0:	
  1365                           ;	Called with FSR containing the base address, and
  1366                           ;	W with the last address+1
  1367                           
  1368  0BC4  0064               	clrwdt	;clear the watchdog before getting into this loop
  1369  0BC5                     clrloop0:	
  1370  0BC5  0180               	clrf	0	;clear RAM location pointed to by FSR
  1371  0BC6  0A84               	incf	4,f	;increment pointer
  1372  0BC7  0604               	xorwf	4,w	;XOR with final address
  1373  0BC8  1903               	btfsc	3,2	;have we reached the end yet?
  1374  0BC9  3400               	retlw	0	;all done for this memory range, return
  1375  0BCA  0604               	xorwf	4,w	;XOR again to restore value
  1376  0BCB  2BC5               	goto	clrloop0	;do the next byte
  1377                           
  1378                           	psect	cstackBANK1
  1379  00EF                     __pcstackBANK1:	
  1380  00EF                     ??_main:	
  1381                           
  1382                           ; 0 bytes @ 0x0
  1383  00EF                     	ds	1
  1384                           
  1385                           	psect	cstackCOMMON
  1386  0070                     __pcstackCOMMON:	
  1387  0070                     ?_setLED_Initialization:	
  1388  0070                     ?_setLED_Main:	
  1389                           ; 0 bytes @ 0x0
  1390                           
  1391  0070                     ?_setPIRLED_Main:	
  1392                           ; 0 bytes @ 0x0
  1393                           
  1394  0070                     ?_Fosc_Set:	
  1395                           ; 0 bytes @ 0x0
  1396                           
  1397  0070                     ?_IO_Set:	
  1398                           ; 0 bytes @ 0x0
  1399                           
  1400  0070                     ?_TMR1_Set:	
  1401                           ; 0 bytes @ 0x0
  1402                           
  1403  0070                     ?_ADC_Set:	
  1404                           ; 0 bytes @ 0x0
  1405                           
  1406  0070                     ?_WDT_Set:	
  1407                           ; 0 bytes @ 0x0
  1408                           
  1409  0070                     ?_TMR1_ISR:	
  1410                           ; 0 bytes @ 0x0
  1411                           
  1412  0070                     ??_TMR1_ISR:	
  1413                           ; 0 bytes @ 0x0
  1414                           
  1415  0070                     ?_Timeout_Counter:	
  1416                           ; 0 bytes @ 0x0
  1417                           
  1418  0070                     ?_set_TimeoutCleared:	
  1419                           ; 0 bytes @ 0x0
  1420                           
  1421  0070                     ?_WDT_Clearing:	
  1422                           ; 0 bytes @ 0x0
  1423                           
  1424  0070                     ?_myMain_Initialization:	
  1425                           ; 0 bytes @ 0x0
  1426                           
  1427  0070                     ?_SYSC_Initialization:	
  1428                           ; 0 bytes @ 0x0
  1429                           
  1430  0070                     ?_Temp_Initialization:	
  1431                           ; 0 bytes @ 0x0
  1432                           
  1433  0070                     ?_Load_Initialization:	
  1434                           ; 0 bytes @ 0x0
  1435                           
  1436  0070                     ?_Lights_Initialization:	
  1437                           ; 0 bytes @ 0x0
  1438                           
  1439  0070                     ?_PIR_Initialization:	
  1440                           ; 0 bytes @ 0x0
  1441                           
  1442  0070                     ?_DetectSYSC_Signal:	
  1443                           ; 0 bytes @ 0x0
  1444                           
  1445  0070                     ?_getLoad_AD:	
  1446                           ; 0 bytes @ 0x0
  1447                           
  1448  0070                     ?_getTemp_AD:	
  1449                           ; 0 bytes @ 0x0
  1450                           
  1451  0070                     ?_my_MainTimer:	
  1452                           ; 0 bytes @ 0x0
  1453                           
  1454  0070                     ?_SYSC_Main:	
  1455                           ; 0 bytes @ 0x0
  1456                           
  1457  0070                     ?_Temp_Main:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_Load_Main:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_Lights_Main:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_PIR_Main:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ?_setLoad_AH_AL_Restore:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_setTemp_Initialization:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ?_setTemp_Main:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ?_setSYSC_Initialization:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_setSYSC_Main:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_setLights_Initialization:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_setLights_Main:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_Lights_Control:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_Lights_Close:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_setLights_Line:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_CDS_Initialization:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_CDS_Main:	
  1503                           ; 0 bytes @ 0x0
  1504                           
  1505  0070                     ?_LedPointSelect:	
  1506                           ; 0 bytes @ 0x0
  1507                           
  1508  0070                     ?_LED_Initialization:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0070                     ?_LED_Main:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0070                     ?_Mcu_Initialization:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0070                     ?_ISR:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0070                     ??_ISR:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0070                     ?_WDT_Main:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0070                     ?_setMain_Exception:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0070                     ?_LightsPointSelect:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0070                     ?_getAll_Lights_Line:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0070                     ?_getLights_Status:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_getLightsControl_OK:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_getCDS_Status:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0070                     ?_getMain_LightsStatus:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_getMain_All_Error_Status:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ?_getMain_Lights_Count:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ?_getMain_LoadOK:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     ?_getLoad_OK:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559                           
  1560                           ; 1 bytes @ 0x0
  1561  0070                     	ds	4
  1562  0074                     ??_Fosc_Set:	
  1563  0074                     ??_IO_Set:	
  1564                           ; 0 bytes @ 0x4
  1565                           
  1566  0074                     ??_TMR1_Set:	
  1567                           ; 0 bytes @ 0x4
  1568                           
  1569  0074                     ??_ADC_Set:	
  1570                           ; 0 bytes @ 0x4
  1571                           
  1572  0074                     ??_WDT_Set:	
  1573                           ; 0 bytes @ 0x4
  1574                           
  1575  0074                     ??_Timeout_Counter:	
  1576                           ; 0 bytes @ 0x4
  1577                           
  1578  0074                     ??_set_TimeoutCleared:	
  1579                           ; 0 bytes @ 0x4
  1580                           
  1581  0074                     ??_WDT_Clearing:	
  1582                           ; 0 bytes @ 0x4
  1583                           
  1584  0074                     ??_myMain_Initialization:	
  1585                           ; 0 bytes @ 0x4
  1586                           
  1587  0074                     ??_SYSC_Initialization:	
  1588                           ; 0 bytes @ 0x4
  1589                           
  1590  0074                     ??_Temp_Initialization:	
  1591                           ; 0 bytes @ 0x4
  1592                           
  1593  0074                     ??_DetectSYSC_Signal:	
  1594                           ; 0 bytes @ 0x4
  1595                           
  1596  0074                     ??_my_MainTimer:	
  1597                           ; 0 bytes @ 0x4
  1598                           
  1599  0074                     ??_getLightsControl_OK:	
  1600                           ; 0 bytes @ 0x4
  1601                           
  1602  0074                     ??_setLoad_AH_AL_Restore:	
  1603                           ; 0 bytes @ 0x4
  1604                           
  1605  0074                     ??_setTemp_Initialization:	
  1606                           ; 0 bytes @ 0x4
  1607                           
  1608  0074                     ??_setSYSC_Initialization:	
  1609                           ; 0 bytes @ 0x4
  1610                           
  1611  0074                     ??_CDS_Initialization:	
  1612                           ; 0 bytes @ 0x4
  1613                           
  1614  0074                     ??_CDS_Main:	
  1615                           ; 0 bytes @ 0x4
  1616                           
  1617  0074                     ??_getCDS_Status:	
  1618                           ; 0 bytes @ 0x4
  1619                           
  1620  0074                     ??_LedPointSelect:	
  1621                           ; 0 bytes @ 0x4
  1622                           
  1623  0074                     ??_WDT_Main:	
  1624                           ; 0 bytes @ 0x4
  1625                           
  1626  0074                     ??_getMain_Lights_Count:	
  1627                           ; 0 bytes @ 0x4
  1628                           
  1629  0074                     ??_getLoad_OK:	
  1630                           ; 0 bytes @ 0x4
  1631                           
  1632  0074                     ??_LightsPointSelect:	
  1633                           ; 0 bytes @ 0x4
  1634                           
  1635  0074                     ??___awdiv:	
  1636                           ; 0 bytes @ 0x4
  1637                           
  1638  0074                     ??___lwdiv:	
  1639                           ; 0 bytes @ 0x4
  1640                           
  1641  0074                     ?_getAD:	
  1642                           ; 0 bytes @ 0x4
  1643                           
  1644  0074                     getCDS_Status@status:	
  1645                           ; 1 bytes @ 0x4
  1646                           
  1647  0074                     getAD@adcon1:	
  1648                           ; 1 bytes @ 0x4
  1649                           
  1650  0074                     getLoad_OK@ok:	
  1651                           ; 1 bytes @ 0x4
  1652                           
  1653  0074                     getLightsControl_OK@loadok:	
  1654                           ; 1 bytes @ 0x4
  1655                           
  1656                           
  1657                           ; 1 bytes @ 0x4
  1658  0074                     	ds	1
  1659  0075                     ??_getAD:	
  1660  0075                     ??_Mcu_Initialization:	
  1661                           ; 0 bytes @ 0x5
  1662                           
  1663  0075                     ??_getMain_All_Error_Status:	
  1664                           ; 0 bytes @ 0x5
  1665                           
  1666  0075                     ??_getMain_LoadOK:	
  1667                           ; 0 bytes @ 0x5
  1668                           
  1669  0075                     LedPointSelect@led:	
  1670                           ; 0 bytes @ 0x5
  1671                           
  1672  0075                     getAD@adcon0:	
  1673                           ; 1 bytes @ 0x5
  1674                           
  1675  0075                     setLoad_AH_AL_Restore@i:	
  1676                           ; 1 bytes @ 0x5
  1677                           
  1678  0075                     LightsPointSelect@lights:	
  1679                           ; 1 bytes @ 0x5
  1680                           
  1681                           
  1682                           ; 1 bytes @ 0x5
  1683  0075                     	ds	1
  1684  0076                     ?_setLED:	
  1685  0076                     ??_Load_Initialization:	
  1686                           ; 0 bytes @ 0x6
  1687                           
  1688  0076                     ?_getPIR_AD:	
  1689                           ; 0 bytes @ 0x6
  1690                           
  1691  0076                     ??_getAll_Lights_Line:	
  1692                           ; 0 bytes @ 0x6
  1693                           
  1694  0076                     ?_setLights_Trigger:	
  1695                           ; 0 bytes @ 0x6
  1696                           
  1697  0076                     ??_getLights_Status:	
  1698                           ; 0 bytes @ 0x6
  1699                           
  1700  0076                     ??_setLights_Initialization:	
  1701                           ; 0 bytes @ 0x6
  1702                           
  1703  0076                     ??_setLights_Line:	
  1704                           ; 0 bytes @ 0x6
  1705                           
  1706  0076                     ?_getCDS_AD:	
  1707                           ; 0 bytes @ 0x6
  1708                           
  1709  0076                     ??_getMain_LightsStatus:	
  1710                           ; 0 bytes @ 0x6
  1711                           
  1712  0076                     getCDS_AD@channel2:	
  1713                           ; 0 bytes @ 0x6
  1714                           
  1715  0076                     setLED@command:	
  1716                           ; 1 bytes @ 0x6
  1717                           
  1718  0076                     setLED_Main@led:	
  1719                           ; 1 bytes @ 0x6
  1720                           
  1721  0076                     getMain_LoadOK@ok:	
  1722                           ; 1 bytes @ 0x6
  1723                           
  1724  0076                     getTemp_AD@channel:	
  1725                           ; 1 bytes @ 0x6
  1726                           
  1727  0076                     getPIR_AD@channel2:	
  1728                           ; 1 bytes @ 0x6
  1729                           
  1730  0076                     setLights_Initialization@lights:	
  1731                           ; 1 bytes @ 0x6
  1732                           
  1733  0076                     setLights_Trigger@command:	
  1734                           ; 1 bytes @ 0x6
  1735                           
  1736  0076                     setLights_Line@lights:	
  1737                           ; 1 bytes @ 0x6
  1738                           
  1739  0076                     getAll_Lights_Line@line:	
  1740                           ; 1 bytes @ 0x6
  1741                           
  1742                           
  1743                           ; 1 bytes @ 0x6
  1744  0076                     	ds	1
  1745  0077                     ??_setLED_Initialization:	
  1746  0077                     ??_setLED:	
  1747                           ; 0 bytes @ 0x7
  1748                           
  1749  0077                     ??_Lights_Initialization:	
  1750                           ; 0 bytes @ 0x7
  1751                           
  1752  0077                     ??_SYSC_Main:	
  1753                           ; 0 bytes @ 0x7
  1754                           
  1755  0077                     ??_Temp_Main:	
  1756                           ; 0 bytes @ 0x7
  1757                           
  1758  0077                     ??_setLights_Main:	
  1759                           ; 0 bytes @ 0x7
  1760                           
  1761  0077                     ??_LED_Initialization:	
  1762                           ; 0 bytes @ 0x7
  1763                           
  1764  0077                     ??_LED_Main:	
  1765                           ; 0 bytes @ 0x7
  1766                           
  1767                           
  1768                           	psect	cstackBANK0
  1769  005B                     __pcstackBANK0:	
  1770                           ; 0 bytes @ 0x7
  1771                           
  1772  005B                     ??_setLED_Main:	
  1773  005B                     ??_getLoad_AD:	
  1774                           ; 0 bytes @ 0x0
  1775                           
  1776  005B                     ??_getTemp_AD:	
  1777                           ; 0 bytes @ 0x0
  1778                           
  1779  005B                     ??_setLights_Trigger:	
  1780                           ; 0 bytes @ 0x0
  1781                           
  1782  005B                     ??_Lights_Control:	
  1783                           ; 0 bytes @ 0x0
  1784                           
  1785  005B                     ??_getCDS_AD:	
  1786                           ; 0 bytes @ 0x0
  1787                           
  1788  005B                     ?___awdiv:	
  1789                           ; 0 bytes @ 0x0
  1790                           
  1791  005B                     ?___lwdiv:	
  1792                           ; 2 bytes @ 0x0
  1793                           
  1794  005B                     setLED@led:	
  1795                           ; 2 bytes @ 0x0
  1796                           
  1797  005B                     getMain_Lights_Count@count:	
  1798                           ; 1 bytes @ 0x0
  1799                           
  1800  005B                     getLights_Status@lights:	
  1801                           ; 1 bytes @ 0x0
  1802                           
  1803  005B                     _getMain_All_Error_Status$2483:	
  1804                           ; 1 bytes @ 0x0
  1805                           
  1806  005B                     ___awdiv@divisor:	
  1807                           ; 2 bytes @ 0x0
  1808                           
  1809  005B                     ___lwdiv@divisor:	
  1810                           ; 2 bytes @ 0x0
  1811                           
  1812                           
  1813                           ; 2 bytes @ 0x0
  1814  005B                     	ds	1
  1815  005C                     ??_setPIRLED_Main:	
  1816  005C                     ??_PIR_Initialization:	
  1817                           ; 0 bytes @ 0x1
  1818                           
  1819  005C                     setLED_Initialization@led:	
  1820                           ; 0 bytes @ 0x1
  1821                           
  1822  005C                     getMain_Lights_Count@status2:	
  1823                           ; 1 bytes @ 0x1
  1824                           
  1825  005C                     getLights_Status@status:	
  1826                           ; 1 bytes @ 0x1
  1827                           
  1828  005C                     setLights_Trigger@lights:	
  1829                           ; 1 bytes @ 0x1
  1830                           
  1831                           
  1832                           ; 1 bytes @ 0x1
  1833  005C                     	ds	1
  1834  005D                     ??_setMain_Exception:	
  1835  005D                     getCDS_AD@i:	
  1836                           ; 0 bytes @ 0x2
  1837                           
  1838  005D                     setPIRLED_Main@count:	
  1839                           ; 1 bytes @ 0x2
  1840                           
  1841  005D                     getMain_LightsStatus@count:	
  1842                           ; 1 bytes @ 0x2
  1843                           
  1844  005D                     getMain_Lights_Count@status3:	
  1845                           ; 1 bytes @ 0x2
  1846                           
  1847  005D                     getLoad_AD@channel:	
  1848                           ; 1 bytes @ 0x2
  1849                           
  1850  005D                     _getMain_All_Error_Status$2492:	
  1851                           ; 1 bytes @ 0x2
  1852                           
  1853  005D                     _Lights_Control$4872:	
  1854                           ; 2 bytes @ 0x2
  1855                           
  1856  005D                     ___awdiv@dividend:	
  1857                           ; 2 bytes @ 0x2
  1858                           
  1859  005D                     ___lwdiv@dividend:	
  1860                           ; 2 bytes @ 0x2
  1861                           
  1862                           
  1863                           ; 2 bytes @ 0x2
  1864  005D                     	ds	1
  1865  005E                     getCDS_AD@j:	
  1866  005E                     getMain_Lights_Count@status1:	
  1867                           ; 1 bytes @ 0x3
  1868                           
  1869  005E                     getLoad_AD@k:	
  1870                           ; 1 bytes @ 0x3
  1871                           
  1872  005E                     getMain_LightsStatus@i:	
  1873                           ; 1 bytes @ 0x3
  1874                           
  1875                           
  1876                           ; 2 bytes @ 0x3
  1877  005E                     	ds	1
  1878  005F                     getCDS_AD@channel1:	
  1879  005F                     setMain_Exception@buz:	
  1880                           ; 1 bytes @ 0x4
  1881                           
  1882  005F                     getLoad_AD@j:	
  1883                           ; 1 bytes @ 0x4
  1884                           
  1885  005F                     Lights_Control@lights:	
  1886                           ; 1 bytes @ 0x4
  1887                           
  1888  005F                     ___awdiv@counter:	
  1889                           ; 1 bytes @ 0x4
  1890                           
  1891  005F                     ___lwdiv@counter:	
  1892                           ; 1 bytes @ 0x4
  1893                           
  1894  005F                     _getMain_All_Error_Status$2494:	
  1895                           ; 1 bytes @ 0x4
  1896                           
  1897                           
  1898                           ; 2 bytes @ 0x4
  1899  005F                     	ds	1
  1900  0060                     setMain_Exception@status:	
  1901  0060                     getMain_LightsStatus@status:	
  1902                           ; 1 bytes @ 0x5
  1903                           
  1904  0060                     getLoad_AD@i:	
  1905                           ; 1 bytes @ 0x5
  1906                           
  1907  0060                     ___awdiv@sign:	
  1908                           ; 1 bytes @ 0x5
  1909                           
  1910  0060                     ___lwdiv@quotient:	
  1911                           ; 1 bytes @ 0x5
  1912                           
  1913                           
  1914                           ; 2 bytes @ 0x5
  1915  0060                     	ds	1
  1916  0061                     ??_Lights_Close:	
  1917  0061                     getMain_All_Error_Status@command:	
  1918                           ; 0 bytes @ 0x6
  1919                           
  1920  0061                     _setMain_Exception$2462:	
  1921                           ; 1 bytes @ 0x6
  1922                           
  1923  0061                     ___awdiv@quotient:	
  1924                           ; 2 bytes @ 0x6
  1925                           
  1926                           
  1927                           ; 2 bytes @ 0x6
  1928  0061                     	ds	1
  1929  0062                     getMain_All_Error_Status@status:	
  1930                           
  1931                           ; 1 bytes @ 0x7
  1932  0062                     	ds	1
  1933  0063                     ??_getPIR_AD:	
  1934  0063                     ??_Load_Main:	
  1935                           ; 0 bytes @ 0x8
  1936                           
  1937  0063                     ??_setTemp_Main:	
  1938                           ; 0 bytes @ 0x8
  1939                           
  1940  0063                     ??_setSYSC_Main:	
  1941                           ; 0 bytes @ 0x8
  1942                           
  1943  0063                     ?_setLights:	
  1944                           ; 0 bytes @ 0x8
  1945                           
  1946  0063                     setMain_Exception@command:	
  1947                           ; 0 bytes @ 0x8
  1948                           
  1949  0063                     setLights@status:	
  1950                           ; 1 bytes @ 0x8
  1951                           
  1952                           
  1953                           ; 1 bytes @ 0x8
  1954  0063                     	ds	1
  1955  0064                     ??_PIR_Main:	
  1956  0064                     ??_setLights:	
  1957                           ; 0 bytes @ 0x9
  1958                           
  1959                           
  1960                           ; 0 bytes @ 0x9
  1961  0064                     	ds	1
  1962  0065                     Load_Main@j:	
  1963  0065                     setLights@lights:	
  1964                           ; 1 bytes @ 0xA
  1965                           
  1966                           
  1967                           ; 1 bytes @ 0xA
  1968  0065                     	ds	1
  1969  0066                     Load_Main@adjgo:	
  1970  0066                     getPIR_AD@j:	
  1971                           ; 1 bytes @ 0xB
  1972                           
  1973  0066                     setLights_Main@lights:	
  1974                           ; 1 bytes @ 0xB
  1975                           
  1976                           
  1977                           ; 1 bytes @ 0xB
  1978  0066                     	ds	1
  1979  0067                     ??_Lights_Main:	
  1980  0067                     _Load_Main$2773:	
  1981                           ; 0 bytes @ 0xC
  1982                           
  1983  0067                     getPIR_AD@channel1:	
  1984                           ; 1 bytes @ 0xC
  1985                           
  1986                           
  1987                           ; 1 bytes @ 0xC
  1988  0067                     	ds	1
  1989  0068                     Load_Main@error:	
  1990  0068                     getPIR_AD@i:	
  1991                           ; 1 bytes @ 0xD
  1992                           
  1993                           
  1994                           ; 1 bytes @ 0xD
  1995  0068                     	ds	1
  1996  0069                     Load_Main@i:	
  1997  0069                     _PIR_Main$3308:	
  1998                           ; 1 bytes @ 0xE
  1999                           
  2000                           
  2001                           ; 2 bytes @ 0xE
  2002  0069                     	ds	1
  2003  006A                     _Lights_Main$4852:	
  2004                           
  2005                           ; 2 bytes @ 0xF
  2006  006A                     	ds	1
  2007  006B                     PIR_Main@error:	
  2008                           
  2009                           ; 1 bytes @ 0x10
  2010  006B                     	ds	1
  2011  006C                     ?_main:	
  2012  006C                     main@argc:	
  2013                           ; 2 bytes @ 0x11
  2014                           
  2015                           
  2016                           ; 2 bytes @ 0x11
  2017  006C                     	ds	2
  2018  006E                     main@argv:	
  2019                           
  2020                           ; 2 bytes @ 0x13
  2021  006E                     	ds	2
  2022                           
  2023                           	psect	maintext
  2024  06DB                     __pmaintext:	
  2025 ;;
  2026 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2027 ;;
  2028 ;; *************** function _main *****************
  2029 ;; Defined at:
  2030 ;;		line 7 in file "../src/Main_B1.c"
  2031 ;; Parameters:    Size  Location     Type
  2032 ;;  argc            2   17[BANK0 ] int 
  2033 ;;  argv            2   19[BANK0 ] PTR PTR unsigned char 
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;		None
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  2   17[BANK0 ] int 
  2038 ;; Registers used:
  2039 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2040 ;; Tracked objects:
  2041 ;;		On entry : 17F/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2045 ;;      Params:         0       4       0       0
  2046 ;;      Locals:         0       0       0       0
  2047 ;;      Temps:          0       0       1       0
  2048 ;;      Totals:         0       4       1       0
  2049 ;;Total ram usage:        5 bytes
  2050 ;; Hardware stack levels required when called:    7
  2051 ;; This function calls:
  2052 ;;		_CDS_Initialization
  2053 ;;		_CDS_Main
  2054 ;;		_DetectSYSC_Signal
  2055 ;;		_LED_Initialization
  2056 ;;		_LED_Main
  2057 ;;		_Lights_Initialization
  2058 ;;		_Lights_Main
  2059 ;;		_Load_Initialization
  2060 ;;		_Load_Main
  2061 ;;		_Mcu_Initialization
  2062 ;;		_PIR_Initialization
  2063 ;;		_PIR_Main
  2064 ;;		_SYSC_Initialization
  2065 ;;		_SYSC_Main
  2066 ;;		_Temp_Initialization
  2067 ;;		_Temp_Main
  2068 ;;		_WDT_Main
  2069 ;;		_getCDS_AD
  2070 ;;		_getLoad_AD
  2071 ;;		_getPIR_AD
  2072 ;;		_getTemp_AD
  2073 ;;		_myMain_Initialization
  2074 ;;		_my_MainTimer
  2075 ;; This function is called by:
  2076 ;;		Startup code after reset
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           
  2081                           ;psect for function _main
  2082  06DB                     _main:	
  2083                           
  2084                           ;Main_B1.c: 8: myMain_Initialization();
  2085                           
  2086                           ;incstack = 0
  2087                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2088  06DB  158A  2379  118A   	fcall	_myMain_Initialization
  2089                           
  2090                           ;Main_B1.c: 9: Mcu_Initialization();
  2091  06DE  158A  2440  118A   	fcall	_Mcu_Initialization
  2092                           
  2093                           ;Main_B1.c: 10: ;;
  2094                           ;Main_B1.c: 11: LED_Initialization();
  2095  06E1  158A  23D6  118A   	fcall	_LED_Initialization
  2096                           
  2097                           ;Main_B1.c: 12: ;;
  2098                           ;Main_B1.c: 14: SYSC_Initialization();
  2099  06E4  158A  237A  118A   	fcall	_SYSC_Initialization
  2100                           
  2101                           ;Main_B1.c: 15: Temp_Initialization();
  2102  06E7  158A  2380  118A   	fcall	_Temp_Initialization
  2103                           
  2104                           ;Main_B1.c: 16: Load_Initialization();
  2105  06EA  158A  2399  118A   	fcall	_Load_Initialization
  2106                           
  2107                           ;Main_B1.c: 17: ;;
  2108                           ;Main_B1.c: 18: ;;
  2109                           ;Main_B1.c: 20: ;;
  2110                           ;Main_B1.c: 21: Lights_Initialization();
  2111  06ED  158A  2387  118A   	fcall	_Lights_Initialization
  2112                           
  2113                           ;Main_B1.c: 22: CDS_Initialization();
  2114  06F0  158A  2383  118A   	fcall	_CDS_Initialization
  2115                           
  2116                           ;Main_B1.c: 23: PIR_Initialization();
  2117  06F3  158A  24A4  118A   	fcall	_PIR_Initialization
  2118                           
  2119                           ;Main_B1.c: 24: ;;
  2120                           ;Main_B1.c: 25: ;;
  2121                           ;Main_B1.c: 26: __nop();
  2122  06F6  0000               	nop
  2123  06F7                     l5073:	
  2124                           ;Main_B1.c: 27: ;;
  2125                           ;Main_B1.c: 29: while (1) {
  2126                           
  2127                           
  2128                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  2129  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  2130  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  2131  06F9  1C20               	btfss	_myMain,0
  2132  06FA  2F1A               	goto	l5085
  2133                           
  2134                           ;Main_B1.c: 33: DetectSYSC_Signal();
  2135  06FB  158A  2407  118A   	fcall	_DetectSYSC_Signal
  2136                           
  2137                           ;Main_B1.c: 37: getLoad_AD(0x01);
  2138  06FE  3001               	movlw	1
  2139  06FF  118A  258E  118A   	fcall	_getLoad_AD
  2140                           
  2141                           ;Main_B1.c: 41: getTemp_AD(0x11);
  2142  0702  3011               	movlw	17
  2143  0703  158A  25DD  118A   	fcall	_getTemp_AD
  2144                           
  2145                           ;Main_B1.c: 49: getCDS_AD(0x09, 0x31);
  2146  0706  3031               	movlw	49
  2147  0707  1683               	bsf	3,5	;RP0=1, select bank1
  2148  0708  1303               	bcf	3,6	;RP1=0, select bank1
  2149  0709  00EF               	movwf	??_main^(0+128)
  2150  070A  086F               	movf	??_main^(0+128),w
  2151  070B  00F6               	movwf	getCDS_AD@channel2
  2152  070C  3009               	movlw	9
  2153  070D  158A  25B3  118A   	fcall	_getCDS_AD
  2154                           
  2155                           ;Main_B1.c: 53: getPIR_AD(0x05, 0x0d);
  2156  0710  300D               	movlw	13
  2157  0711  1683               	bsf	3,5	;RP0=1, select bank1
  2158  0712  1303               	bcf	3,6	;RP1=0, select bank1
  2159  0713  00EF               	movwf	??_main^(0+128)
  2160  0714  086F               	movf	??_main^(0+128),w
  2161  0715  00F6               	movwf	getPIR_AD@channel2
  2162  0716  3005               	movlw	5
  2163  0717  118A  2359  118A   	fcall	_getPIR_AD
  2164  071A                     l5085:	
  2165                           
  2166                           ;Main_B1.c: 56: }
  2167                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  2168  071A  1283               	bcf	3,5	;RP0=0, select bank0
  2169  071B  1303               	bcf	3,6	;RP1=0, select bank0
  2170  071C  1C36               	btfss	_Timer1,0
  2171  071D  2EF7               	goto	l5073
  2172                           
  2173                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  2174  071E  1036               	bcf	_Timer1,0
  2175                           
  2176                           ;Main_B1.c: 94: my_MainTimer();
  2177  071F  158A  24CA  118A   	fcall	_my_MainTimer
  2178                           
  2179                           ;Main_B1.c: 95: WDT_Main();
  2180  0722  158A  2481  118A   	fcall	_WDT_Main
  2181                           
  2182                           ;Main_B1.c: 96: ;;
  2183                           ;Main_B1.c: 97: ;;
  2184                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  2185  0725  1283               	bcf	3,5	;RP0=0, select bank0
  2186  0726  1303               	bcf	3,6	;RP1=0, select bank0
  2187  0727  1C20               	btfss	_myMain,0
  2188  0728  2EF7               	goto	l5073
  2189                           
  2190                           ;Main_B1.c: 99: ;;
  2191                           ;Main_B1.c: 101: LED_Main();
  2192  0729  158A  2431  118A   	fcall	_LED_Main
  2193                           
  2194                           ;Main_B1.c: 102: ;;
  2195                           ;Main_B1.c: 104: SYSC_Main();
  2196  072C  158A  237D  118A   	fcall	_SYSC_Main
  2197                           
  2198                           ;Main_B1.c: 105: Temp_Main();
  2199  072F  118A  27FD  118A   	fcall	_Temp_Main
  2200                           
  2201                           ;Main_B1.c: 106: Load_Main();
  2202  0732  118A  21F4  118A   	fcall	_Load_Main
  2203                           
  2204                           ;Main_B1.c: 107: ;;
  2205                           ;Main_B1.c: 109: Lights_Main();
  2206  0735  158A  26DB  118A   	fcall	_Lights_Main
  2207                           
  2208                           ;Main_B1.c: 110: ;;
  2209                           ;Main_B1.c: 111: ;;
  2210                           ;Main_B1.c: 112: CDS_Main();
  2211  0738  158A  2637  118A   	fcall	_CDS_Main
  2212                           
  2213                           ;Main_B1.c: 113: PIR_Main();
  2214  073B  118A  2025  118A   	fcall	_PIR_Main
  2215                           
  2216                           ;Main_B1.c: 115: ;;
  2217                           ;Main_B1.c: 116: ;;
  2218                           ;Main_B1.c: 117: ;;
  2219  073E  2EF7               	goto	l5073
  2220  073F                     __end_of_main:	
  2221                           ;Main_B1.c: 125: }
  2222                           ;Main_B1.c: 126: }
  2223                           ;Main_B1.c: 160: }
  2224                           ;Main_B1.c: 161: return (0);
  2225                           ;	Return value of _main is never used
  2226                           
  2227                           
  2228                           	psect	text1
  2229  0CCA                     __ptext1:	
  2230 ;; *************** function _my_MainTimer *****************
  2231 ;; Defined at:
  2232 ;;		line 180 in file "../src/Main_B1.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;		None
  2237 ;; Return value:  Size  Location     Type
  2238 ;;		None               void
  2239 ;; Registers used:
  2240 ;;		wreg, status,2
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2246 ;;      Params:         0       0       0       0
  2247 ;;      Locals:         0       0       0       0
  2248 ;;      Temps:          0       0       0       0
  2249 ;;      Totals:         0       0       0       0
  2250 ;;Total ram usage:        0 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    2
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_main
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           
  2261                           ;psect for function _my_MainTimer
  2262  0CCA                     _my_MainTimer:	
  2263                           
  2264                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  2265                           
  2266                           ;incstack = 0
  2267                           ; Regs used in _my_MainTimer: [wreg+status,2]
  2268  0CCA  1283               	bcf	3,5	;RP0=0, select bank0
  2269  0CCB  1303               	bcf	3,6	;RP1=0, select bank0
  2270  0CCC  1820               	btfsc	_myMain,0
  2271  0CCD  0008               	return
  2272                           
  2273                           ;Main_B1.c: 183: myMain.PowerCount++;
  2274  0CCE  3001               	movlw	1
  2275  0CCF  07A2               	addwf	_myMain+2,f
  2276  0CD0  1803               	skipnc
  2277  0CD1  0AA3               	incf	_myMain+3,f
  2278  0CD2  3000               	movlw	0
  2279  0CD3  07A3               	addwf	_myMain+3,f
  2280                           
  2281                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  2282  0CD4  3096               	movlw	150
  2283  0CD5  0622               	xorwf	_myMain+2,w
  2284  0CD6  0423               	iorwf	_myMain+3,w
  2285  0CD7  1D03               	skipz
  2286  0CD8  0008               	return
  2287                           
  2288                           ;Main_B1.c: 185: {
  2289                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  2290  0CD9  01A2               	clrf	_myMain+2
  2291  0CDA  01A3               	clrf	_myMain+3
  2292                           
  2293                           ;Main_B1.c: 187: myMain.PowerON = 1;
  2294  0CDB  1420               	bsf	_myMain,0
  2295                           
  2296                           ;Main_B1.c: 193: ;;
  2297                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  2298  0CDC  1620               	bsf	_myMain,4
  2299                           
  2300                           ;Main_B1.c: 203: }
  2301                           ;Main_B1.c: 204: } else {
  2302  0CDD  0008               	return
  2303  0CDE                     __end_of_my_MainTimer:	
  2304                           
  2305                           	psect	text2
  2306  0B79                     __ptext2:	
  2307 ;; *************** function _myMain_Initialization *****************
  2308 ;; Defined at:
  2309 ;;		line 167 in file "../src/Main_B1.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;		None
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;		None
  2314 ;; Return value:  Size  Location     Type
  2315 ;;		None               void
  2316 ;; Registers used:
  2317 ;;		None
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2323 ;;      Params:         0       0       0       0
  2324 ;;      Locals:         0       0       0       0
  2325 ;;      Temps:          0       0       0       0
  2326 ;;      Totals:         0       0       0       0
  2327 ;;Total ram usage:        0 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:    2
  2330 ;; This function calls:
  2331 ;;		Nothing
  2332 ;; This function is called by:
  2333 ;;		_main
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           
  2338                           ;psect for function _myMain_Initialization
  2339  0B79                     _myMain_Initialization:	
  2340                           
  2341                           ;incstack = 0
  2342                           ; Regs used in _myMain_Initialization: []
  2343  0B79  0008               	return
  2344  0B7A                     __end_of_myMain_Initialization:	
  2345                           
  2346                           	psect	text3
  2347  0DDD                     __ptext3:	
  2348 ;; *************** function _getTemp_AD *****************
  2349 ;; Defined at:
  2350 ;;		line 16 in file "../src/OverTemperature_B1.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;  channel         1    wreg     unsigned char 
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;  channel         1    6[COMMON] unsigned char 
  2355 ;; Return value:  Size  Location     Type
  2356 ;;		None               void
  2357 ;; Registers used:
  2358 ;;		wreg, status,2, status,0, pclath, cstack
  2359 ;; Tracked objects:
  2360 ;;		On entry : 0/0
  2361 ;;		On exit  : 0/0
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2364 ;;      Params:         0       0       0       0
  2365 ;;      Locals:         1       0       0       0
  2366 ;;      Temps:          0       2       0       0
  2367 ;;      Totals:         1       2       0       0
  2368 ;;Total ram usage:        3 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; Hardware stack levels required when called:    4
  2371 ;; This function calls:
  2372 ;;		_getAD
  2373 ;; This function is called by:
  2374 ;;		_main
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           
  2379                           ;psect for function _getTemp_AD
  2380  0DDD                     _getTemp_AD:	
  2381                           
  2382                           ;incstack = 0
  2383                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2384                           ;getTemp_AD@channel stored from wreg
  2385  0DDD  00F6               	movwf	getTemp_AD@channel
  2386                           
  2387                           ;OverTemperature_B1.c: 18: if (RA5 == 1) {
  2388  0DDE  1283               	bcf	3,5	;RP0=0, select bank0
  2389  0DDF  1303               	bcf	3,6	;RP1=0, select bank0
  2390  0DE0  1E85               	btfss	5,5	;volatile
  2391  0DE1  0008               	return
  2392                           
  2393                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2394  0DE2  1D3C               	btfss	_Temp,2
  2395  0DE3  0008               	return
  2396                           
  2397                           ;OverTemperature_B1.c: 20: Temp.ADRES = getAD(channel, 0x70);
  2398  0DE4  3070               	movlw	112
  2399  0DE5  00DB               	movwf	??_getTemp_AD
  2400  0DE6  085B               	movf	??_getTemp_AD,w
  2401  0DE7  00F4               	movwf	getAD@adcon1
  2402  0DE8  0876               	movf	getTemp_AD@channel,w
  2403  0DE9  158A  256F  158A   	fcall	_getAD
  2404  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
  2405  0DED  1303               	bcf	3,6	;RP1=0, select bank0
  2406  0DEE  00DC               	movwf	??_getTemp_AD+1
  2407  0DEF  085C               	movf	??_getTemp_AD+1,w
  2408  0DF0  00C5               	movwf	_Temp+9
  2409                           
  2410                           ;OverTemperature_B1.c: 21: if (Temp.ADRES > 0) {
  2411  0DF1  0845               	movf	_Temp+9,w
  2412  0DF2  1903               	btfsc	3,2
  2413  0DF3  0008               	return
  2414                           
  2415                           ;OverTemperature_B1.c: 22: Temp.GO = 1;
  2416  0DF4  163C               	bsf	_Temp,4
  2417                           
  2418                           ;OverTemperature_B1.c: 23: if (Temp.ADH[0] < Temp.ADRES) {
  2419  0DF5  0845               	movf	_Temp+9,w
  2420  0DF6  0243               	subwf	_Temp+7,w
  2421  0DF7  1803               	skipnc
  2422  0DF8  2DFE               	goto	l4657
  2423                           
  2424                           ;OverTemperature_B1.c: 24: Temp.ADH[0] = Temp.ADRES;
  2425  0DF9  0845               	movf	_Temp+9,w
  2426  0DFA  00DB               	movwf	??_getTemp_AD
  2427  0DFB  085B               	movf	??_getTemp_AD,w
  2428  0DFC  00C3               	movwf	_Temp+7
  2429                           
  2430                           ;OverTemperature_B1.c: 25: } else if (Temp.ADH[1] < Temp.ADRES) {
  2431  0DFD  0008               	return
  2432  0DFE                     l4657:	
  2433  0DFE  0845               	movf	_Temp+9,w
  2434  0DFF  0244               	subwf	_Temp+8,w
  2435  0E00  1803               	skipnc
  2436  0E01  0008               	return
  2437                           
  2438                           ;OverTemperature_B1.c: 26: Temp.ADH[1] = Temp.ADRES;
  2439  0E02  0845               	movf	_Temp+9,w
  2440  0E03  00DB               	movwf	??_getTemp_AD
  2441  0E04  085B               	movf	??_getTemp_AD,w
  2442  0E05  00C4               	movwf	_Temp+8
  2443  0E06  0008               	return
  2444  0E07                     __end_of_getTemp_AD:	
  2445                           
  2446                           	psect	text4
  2447  0359                     __ptext4:	
  2448 ;; *************** function _getPIR_AD *****************
  2449 ;; Defined at:
  2450 ;;		line 162 in file "../src/PIR_B1.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;  channel1        1    wreg     unsigned char 
  2453 ;;  channel2        1    6[COMMON] unsigned char 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;  channel1        1   12[BANK0 ] unsigned char 
  2456 ;;  i               1   13[BANK0 ] unsigned char 
  2457 ;;  j               1   11[BANK0 ] unsigned char 
  2458 ;; Return value:  Size  Location     Type
  2459 ;;		None               void
  2460 ;; Registers used:
  2461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2467 ;;      Params:         1       0       0       0
  2468 ;;      Locals:         0       3       0       0
  2469 ;;      Temps:          0       3       0       0
  2470 ;;      Totals:         1       6       0       0
  2471 ;;Total ram usage:        7 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    4
  2474 ;; This function calls:
  2475 ;;		___awdiv
  2476 ;;		___lwdiv
  2477 ;;		_getAD
  2478 ;; This function is called by:
  2479 ;;		_main
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           
  2484                           ;psect for function _getPIR_AD
  2485  0359                     _getPIR_AD:	
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2489                           ;getPIR_AD@channel1 stored from wreg
  2490  0359  1283               	bcf	3,5	;RP0=0, select bank0
  2491  035A  1303               	bcf	3,6	;RP1=0, select bank0
  2492  035B  00E7               	movwf	getPIR_AD@channel1
  2493                           
  2494                           ;PIR_B1.c: 163: char i = 0, j = 0;
  2495  035C  01E8               	clrf	getPIR_AD@i
  2496  035D  01E6               	clrf	getPIR_AD@j
  2497                           
  2498                           ;PIR_B1.c: 165: if (_PIR.ADtoGO == 1) {
  2499  035E  1683               	bsf	3,5	;RP0=1, select bank1
  2500  035F  1303               	bcf	3,6	;RP1=0, select bank1
  2501  0360  1CA0               	btfss	__PIR^(0+128),1
  2502  0361  0008               	return
  2503                           
  2504                           ;PIR_B1.c: 166: _PIR.GO = 1;
  2505  0362  1520               	bsf	__PIR^(0+128),2
  2506                           
  2507                           ;PIR_B1.c: 167: _PIR.ADRES = getAD(channel1, 0x70);
  2508  0363  3070               	movlw	112
  2509  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2510  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2511  0366  00E3               	movwf	??_getPIR_AD
  2512  0367  0863               	movf	??_getPIR_AD,w
  2513  0368  00F4               	movwf	getAD@adcon1
  2514  0369  0867               	movf	getPIR_AD@channel1,w
  2515  036A  158A  256F  118A   	fcall	_getAD
  2516  036D  1283               	bcf	3,5	;RP0=0, select bank0
  2517  036E  1303               	bcf	3,6	;RP1=0, select bank0
  2518  036F  00E4               	movwf	??_getPIR_AD+1
  2519  0370  0864               	movf	??_getPIR_AD+1,w
  2520  0371  1683               	bsf	3,5	;RP0=1, select bank1
  2521  0372  1303               	bcf	3,6	;RP1=0, select bank1
  2522  0373  00A2               	movwf	(__PIR^(0+128)+2)
  2523                           
  2524                           ;PIR_B1.c: 168: _PIR.VRAD = _PIR.ADRES / 51;
  2525  0374  3033               	movlw	51
  2526  0375  1283               	bcf	3,5	;RP0=0, select bank0
  2527  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2528  0377  00DB               	movwf	___awdiv@divisor
  2529  0378  3000               	movlw	0
  2530  0379  00DC               	movwf	___awdiv@divisor+1
  2531  037A  1683               	bsf	3,5	;RP0=1, select bank1
  2532  037B  1303               	bcf	3,6	;RP1=0, select bank1
  2533  037C  0822               	movf	(__PIR^(0+128)+2),w
  2534  037D  1283               	bcf	3,5	;RP0=0, select bank0
  2535  037E  1303               	bcf	3,6	;RP1=0, select bank0
  2536  037F  00E3               	movwf	??_getPIR_AD
  2537  0380  01E4               	clrf	??_getPIR_AD+1
  2538  0381  0863               	movf	??_getPIR_AD,w
  2539  0382  00DD               	movwf	___awdiv@dividend
  2540  0383  0864               	movf	??_getPIR_AD+1,w
  2541  0384  00DE               	movwf	___awdiv@dividend+1
  2542  0385  118A  27A0  118A   	fcall	___awdiv
  2543  0388  1283               	bcf	3,5	;RP0=0, select bank0
  2544  0389  1303               	bcf	3,6	;RP1=0, select bank0
  2545  038A  085B               	movf	?___awdiv,w
  2546  038B  00E5               	movwf	??_getPIR_AD+2
  2547  038C  0865               	movf	??_getPIR_AD+2,w
  2548  038D  1683               	bsf	3,5	;RP0=1, select bank1
  2549  038E  1303               	bcf	3,6	;RP1=0, select bank1
  2550  038F  00A3               	movwf	(__PIR^(0+128)+3)
  2551                           
  2552                           ;PIR_B1.c: 169: _PIR.VRAD1 = _PIR.ADRES;
  2553  0390  0822               	movf	(__PIR^(0+128)+2),w
  2554  0391  1283               	bcf	3,5	;RP0=0, select bank0
  2555  0392  1303               	bcf	3,6	;RP1=0, select bank0
  2556  0393  00E3               	movwf	??_getPIR_AD
  2557  0394  0863               	movf	??_getPIR_AD,w
  2558  0395  1683               	bsf	3,5	;RP0=1, select bank1
  2559  0396  1303               	bcf	3,6	;RP1=0, select bank1
  2560  0397  00A4               	movwf	(__PIR^(0+128)+4)
  2561                           
  2562                           ;PIR_B1.c: 170: _PIR.ADRES = getAD(channel2, 0x70);
  2563  0398  3070               	movlw	112
  2564  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2565  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2566  039B  00E3               	movwf	??_getPIR_AD
  2567  039C  0863               	movf	??_getPIR_AD,w
  2568  039D  00F4               	movwf	getAD@adcon1
  2569  039E  0876               	movf	getPIR_AD@channel2,w
  2570  039F  158A  256F  118A   	fcall	_getAD
  2571  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  2572  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  2573  03A4  00E4               	movwf	??_getPIR_AD+1
  2574  03A5  0864               	movf	??_getPIR_AD+1,w
  2575  03A6  1683               	bsf	3,5	;RP0=1, select bank1
  2576  03A7  1303               	bcf	3,6	;RP1=0, select bank1
  2577  03A8  00A2               	movwf	(__PIR^(0+128)+2)
  2578                           
  2579                           ;PIR_B1.c: 171: _PIR.SignalAD = _PIR.ADRES;
  2580  03A9  0822               	movf	(__PIR^(0+128)+2),w
  2581  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2582  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  2583  03AC  00E3               	movwf	??_getPIR_AD
  2584  03AD  0863               	movf	??_getPIR_AD,w
  2585  03AE  1683               	bsf	3,5	;RP0=1, select bank1
  2586  03AF  1303               	bcf	3,6	;RP1=0, select bank1
  2587  03B0  00A1               	movwf	(__PIR^(0+128)+1)
  2588                           
  2589                           ;PIR_B1.c: 173: switch (_PIR.VRAD) {
  2590  03B1  2BCD               	goto	l4689
  2591  03B2                     l4673:	
  2592                           ;PIR_B1.c: 174: case 0:
  2593                           
  2594                           
  2595                           ;PIR_B1.c: 175: if (_PIR.VRAD1 < 10) {
  2596  03B2  300A               	movlw	10
  2597  03B3  0224               	subwf	(__PIR^(0+128)+4),w
  2598  03B4  1803               	skipnc
  2599  03B5  2BB8               	goto	l4677
  2600                           
  2601                           ;PIR_B1.c: 176: _PIR.CloseTimeValue = 5;
  2602  03B6  3005               	movlw	5
  2603  03B7  2BB9               	goto	L1
  2604  03B8                     l4677:	
  2605                           ;PIR_B1.c: 177: } else {
  2606                           
  2607                           
  2608                           ;PIR_B1.c: 178: _PIR.CloseTimeValue = 60;
  2609  03B8  303C               	movlw	60
  2610  03B9                     L1:	
  2611  03B9  00C7               	movwf	(__PIR^(0+128)+39)
  2612  03BA  3000               	movlw	0
  2613  03BB  2BCB               	goto	L5
  2614  03BC                     l4679:	
  2615                           ;PIR_B1.c: 181: case 1:
  2616                           
  2617                           ;PIR_B1.c: 179: }
  2618                           ;PIR_B1.c: 180: break;
  2619                           
  2620                           
  2621                           ;PIR_B1.c: 182: _PIR.CloseTimeValue = 300;
  2622  03BC  302C               	movlw	44
  2623  03BD  00C7               	movwf	(__PIR^(0+128)+39)
  2624  03BE  3001               	movlw	1
  2625  03BF  2BCB               	goto	L5
  2626  03C0                     l4681:	
  2627                           ;PIR_B1.c: 184: case 2:
  2628                           
  2629                           ;PIR_B1.c: 183: break;
  2630                           
  2631                           
  2632                           ;PIR_B1.c: 185: _PIR.CloseTimeValue = 600;
  2633  03C0  3058               	movlw	88
  2634  03C1  00C7               	movwf	(__PIR^(0+128)+39)
  2635  03C2  3002               	movlw	2
  2636  03C3  2BCB               	goto	L5
  2637  03C4                     l4683:	
  2638                           ;PIR_B1.c: 187: case 3:
  2639                           
  2640                           ;PIR_B1.c: 186: break;
  2641                           
  2642                           
  2643                           ;PIR_B1.c: 188: _PIR.CloseTimeValue = 900;
  2644  03C4  3084               	movlw	132
  2645  03C5  00C7               	movwf	(__PIR^(0+128)+39)
  2646  03C6  3003               	movlw	3
  2647  03C7  2BCB               	goto	L5
  2648  03C8                     l4685:	
  2649                           ;PIR_B1.c: 190: case 4:
  2650                           
  2651                           ;PIR_B1.c: 189: break;
  2652                           
  2653                           
  2654                           ;PIR_B1.c: 191: _PIR.CloseTimeValue = 1200;
  2655  03C8  30B0               	movlw	176
  2656  03C9  00C7               	movwf	(__PIR^(0+128)+39)
  2657  03CA  3004               	movlw	4
  2658  03CB                     L5:	
  2659  03CB  00C8               	movwf	(__PIR^(0+128)+40)
  2660                           
  2661                           ;PIR_B1.c: 193: }
  2662                           
  2663                           ;PIR_B1.c: 192: break;
  2664  03CC  2BDE               	goto	l4691
  2665  03CD                     l4689:	
  2666  03CD  0823               	movf	(__PIR^(0+128)+3),w
  2667                           
  2668                           ; Switch size 1, requested type "space"
  2669                           ; Number of cases is 5, Range of values is 0 to 4
  2670                           ; switch strategies available:
  2671                           ; Name         Instructions Cycles
  2672                           ; simple_byte           16     9 (average)
  2673                           ; direct_byte           17     7 (fixed)
  2674                           ; jumptable            260     6 (fixed)
  2675                           ;	Chosen strategy is simple_byte
  2676  03CE  3A00               	xorlw	0	; case 0
  2677  03CF  1903               	skipnz
  2678  03D0  2BB2               	goto	l4673
  2679  03D1  3A01               	xorlw	1	; case 1
  2680  03D2  1903               	skipnz
  2681  03D3  2BBC               	goto	l4679
  2682  03D4  3A03               	xorlw	3	; case 2
  2683  03D5  1903               	skipnz
  2684  03D6  2BC0               	goto	l4681
  2685  03D7  3A01               	xorlw	1	; case 3
  2686  03D8  1903               	skipnz
  2687  03D9  2BC4               	goto	l4683
  2688  03DA  3A07               	xorlw	7	; case 4
  2689  03DB  1903               	skipnz
  2690  03DC  2BC8               	goto	l4685
  2691  03DD  2BDE               	goto	l4691
  2692  03DE                     l4691:	
  2693                           
  2694                           ;PIR_B1.c: 196: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2695  03DE  0821               	movf	(__PIR^(0+128)+1),w
  2696  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  2697  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  2698  03E1  00E3               	movwf	??_getPIR_AD
  2699  03E2  1683               	bsf	3,5	;RP0=1, select bank1
  2700  03E3  1303               	bcf	3,6	;RP1=0, select bank1
  2701  03E4  0827               	movf	(__PIR^(0+128)+7),w
  2702  03E5  3EA8               	addlw	(__PIR+8)& (0+255)
  2703  03E6  0084               	movwf	4
  2704  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  2705  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  2706  03E9  0863               	movf	??_getPIR_AD,w
  2707  03EA  1383               	bcf	3,7	;select IRP bank1
  2708  03EB  0080               	movwf	0
  2709                           
  2710                           ;PIR_B1.c: 197: for (i = 0; i < 10; i++) {
  2711  03EC  01E8               	clrf	getPIR_AD@i
  2712  03ED  300A               	movlw	10
  2713  03EE  0268               	subwf	getPIR_AD@i,w
  2714  03EF  1803               	btfsc	3,0
  2715  03F0  2C0D               	goto	l4705
  2716  03F1                     l4699:	
  2717                           
  2718                           ;PIR_B1.c: 198: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2719  03F1  0868               	movf	getPIR_AD@i,w
  2720  03F2  3EA8               	addlw	(__PIR+8)& (0+255)
  2721  03F3  0084               	movwf	4
  2722  03F4  0800               	movf	0,w
  2723  03F5  00E3               	movwf	??_getPIR_AD
  2724  03F6  01E4               	clrf	??_getPIR_AD+1
  2725  03F7  0863               	movf	??_getPIR_AD,w
  2726  03F8  1683               	bsf	3,5	;RP0=1, select bank1
  2727  03F9  1303               	bcf	3,6	;RP1=0, select bank1
  2728  03FA  07B2               	addwf	(__PIR^(0+128)+18),f
  2729  03FB  1803               	skipnc
  2730  03FC  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2731  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  2732  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  2733  03FF  0864               	movf	??_getPIR_AD+1,w
  2734  0400  1683               	bsf	3,5	;RP0=1, select bank1
  2735  0401  1303               	bcf	3,6	;RP1=0, select bank1
  2736  0402  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2737  0403  3001               	movlw	1
  2738  0404  1283               	bcf	3,5	;RP0=0, select bank0
  2739  0405  1303               	bcf	3,6	;RP1=0, select bank0
  2740  0406  00E3               	movwf	??_getPIR_AD
  2741  0407  0863               	movf	??_getPIR_AD,w
  2742  0408  07E8               	addwf	getPIR_AD@i,f
  2743  0409  300A               	movlw	10
  2744  040A  0268               	subwf	getPIR_AD@i,w
  2745  040B  1C03               	skipc
  2746  040C  2BF1               	goto	l4699
  2747  040D                     l4705:	
  2748                           
  2749                           ;PIR_B1.c: 199: }
  2750                           ;PIR_B1.c: 200: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2751  040D  300A               	movlw	10
  2752  040E  00DB               	movwf	___lwdiv@divisor
  2753  040F  3000               	movlw	0
  2754  0410  00DC               	movwf	___lwdiv@divisor+1
  2755  0411  1683               	bsf	3,5	;RP0=1, select bank1
  2756  0412  1303               	bcf	3,6	;RP1=0, select bank1
  2757  0413  0833               	movf	((__PIR+1)^(0+128)+18),w
  2758  0414  1283               	bcf	3,5	;RP0=0, select bank0
  2759  0415  1303               	bcf	3,6	;RP1=0, select bank0
  2760  0416  01DE               	clrf	___lwdiv@dividend+1
  2761  0417  07DE               	addwf	___lwdiv@dividend+1,f
  2762  0418  1683               	bsf	3,5	;RP0=1, select bank1
  2763  0419  1303               	bcf	3,6	;RP1=0, select bank1
  2764  041A  0832               	movf	(__PIR^(0+128)+18),w
  2765  041B  1283               	bcf	3,5	;RP0=0, select bank0
  2766  041C  1303               	bcf	3,6	;RP1=0, select bank0
  2767  041D  01DD               	clrf	___lwdiv@dividend
  2768  041E  07DD               	addwf	___lwdiv@dividend,f
  2769  041F  158A  2716  118A   	fcall	___lwdiv
  2770  0422  1283               	bcf	3,5	;RP0=0, select bank0
  2771  0423  1303               	bcf	3,6	;RP1=0, select bank0
  2772  0424  085B               	movf	?___lwdiv,w
  2773  0425  00E3               	movwf	??_getPIR_AD
  2774  0426  1683               	bsf	3,5	;RP0=1, select bank1
  2775  0427  1303               	bcf	3,6	;RP1=0, select bank1
  2776  0428  0834               	movf	(__PIR^(0+128)+20),w
  2777  0429  3EB5               	addlw	(__PIR+21)& (0+255)
  2778  042A  0084               	movwf	4
  2779  042B  1283               	bcf	3,5	;RP0=0, select bank0
  2780  042C  1303               	bcf	3,6	;RP1=0, select bank0
  2781  042D  0863               	movf	??_getPIR_AD,w
  2782  042E  1383               	bcf	3,7	;select IRP bank1
  2783  042F  0080               	movwf	0
  2784                           
  2785                           ;PIR_B1.c: 201: _PIR.TenAverageValue = 0;
  2786  0430  1683               	bsf	3,5	;RP0=1, select bank1
  2787  0431  1303               	bcf	3,6	;RP1=0, select bank1
  2788  0432  01B2               	clrf	(__PIR^(0+128)+18)
  2789  0433  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2790                           
  2791                           ;PIR_B1.c: 203: for (i = 0; i <= 9; i++) {
  2792  0434  1283               	bcf	3,5	;RP0=0, select bank0
  2793  0435  1303               	bcf	3,6	;RP1=0, select bank0
  2794  0436  01E8               	clrf	getPIR_AD@i
  2795  0437  300A               	movlw	10
  2796  0438  0268               	subwf	getPIR_AD@i,w
  2797  0439  1803               	btfsc	3,0
  2798  043A  2C57               	goto	l4721
  2799  043B                     l4715:	
  2800                           
  2801                           ;PIR_B1.c: 204: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2802  043B  0868               	movf	getPIR_AD@i,w
  2803  043C  3EB5               	addlw	(__PIR+21)& (0+255)
  2804  043D  0084               	movwf	4
  2805  043E  0800               	movf	0,w
  2806  043F  00E3               	movwf	??_getPIR_AD
  2807  0440  01E4               	clrf	??_getPIR_AD+1
  2808  0441  0863               	movf	??_getPIR_AD,w
  2809  0442  1683               	bsf	3,5	;RP0=1, select bank1
  2810  0443  1303               	bcf	3,6	;RP1=0, select bank1
  2811  0444  07BF               	addwf	(__PIR^(0+128)+31),f
  2812  0445  1803               	skipnc
  2813  0446  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2814  0447  1283               	bcf	3,5	;RP0=0, select bank0
  2815  0448  1303               	bcf	3,6	;RP1=0, select bank0
  2816  0449  0864               	movf	??_getPIR_AD+1,w
  2817  044A  1683               	bsf	3,5	;RP0=1, select bank1
  2818  044B  1303               	bcf	3,6	;RP1=0, select bank1
  2819  044C  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2820  044D  3001               	movlw	1
  2821  044E  1283               	bcf	3,5	;RP0=0, select bank0
  2822  044F  1303               	bcf	3,6	;RP1=0, select bank0
  2823  0450  00E3               	movwf	??_getPIR_AD
  2824  0451  0863               	movf	??_getPIR_AD,w
  2825  0452  07E8               	addwf	getPIR_AD@i,f
  2826  0453  300A               	movlw	10
  2827  0454  0268               	subwf	getPIR_AD@i,w
  2828  0455  1C03               	skipc
  2829  0456  2C3B               	goto	l4715
  2830  0457                     l4721:	
  2831                           
  2832                           ;PIR_B1.c: 205: }
  2833                           ;PIR_B1.c: 206: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2834  0457  300A               	movlw	10
  2835  0458  00DB               	movwf	___lwdiv@divisor
  2836  0459  3000               	movlw	0
  2837  045A  00DC               	movwf	___lwdiv@divisor+1
  2838  045B  1683               	bsf	3,5	;RP0=1, select bank1
  2839  045C  1303               	bcf	3,6	;RP1=0, select bank1
  2840  045D  0840               	movf	((__PIR+1)^(0+128)+31),w
  2841  045E  1283               	bcf	3,5	;RP0=0, select bank0
  2842  045F  1303               	bcf	3,6	;RP1=0, select bank0
  2843  0460  01DE               	clrf	___lwdiv@dividend+1
  2844  0461  07DE               	addwf	___lwdiv@dividend+1,f
  2845  0462  1683               	bsf	3,5	;RP0=1, select bank1
  2846  0463  1303               	bcf	3,6	;RP1=0, select bank1
  2847  0464  083F               	movf	(__PIR^(0+128)+31),w
  2848  0465  1283               	bcf	3,5	;RP0=0, select bank0
  2849  0466  1303               	bcf	3,6	;RP1=0, select bank0
  2850  0467  01DD               	clrf	___lwdiv@dividend
  2851  0468  07DD               	addwf	___lwdiv@dividend,f
  2852  0469  158A  2716  118A   	fcall	___lwdiv
  2853  046C  1283               	bcf	3,5	;RP0=0, select bank0
  2854  046D  1303               	bcf	3,6	;RP1=0, select bank0
  2855  046E  085B               	movf	?___lwdiv,w
  2856  046F  00E3               	movwf	??_getPIR_AD
  2857  0470  0863               	movf	??_getPIR_AD,w
  2858  0471  1683               	bsf	3,5	;RP0=1, select bank1
  2859  0472  1303               	bcf	3,6	;RP1=0, select bank1
  2860  0473  00A6               	movwf	(__PIR^(0+128)+6)
  2861                           
  2862                           ;PIR_B1.c: 207: _PIR.HundredAverageValue = 0;
  2863  0474  01BF               	clrf	(__PIR^(0+128)+31)
  2864  0475  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2865                           
  2866                           ;PIR_B1.c: 209: if (_PIR.TenCount < 10) {
  2867  0476  300A               	movlw	10
  2868  0477  0227               	subwf	(__PIR^(0+128)+7),w
  2869  0478  1803               	skipnc
  2870  0479  2C83               	goto	l4729
  2871                           
  2872                           ;PIR_B1.c: 210: _PIR.TenCount++;
  2873  047A  3001               	movlw	1
  2874  047B  1283               	bcf	3,5	;RP0=0, select bank0
  2875  047C  1303               	bcf	3,6	;RP1=0, select bank0
  2876  047D  00E3               	movwf	??_getPIR_AD
  2877  047E  0863               	movf	??_getPIR_AD,w
  2878  047F  1683               	bsf	3,5	;RP0=1, select bank1
  2879  0480  1303               	bcf	3,6	;RP1=0, select bank1
  2880  0481  07A7               	addwf	(__PIR^(0+128)+7),f
  2881                           
  2882                           ;PIR_B1.c: 211: } else {
  2883  0482  0008               	return
  2884  0483                     l4729:	
  2885                           
  2886                           ;PIR_B1.c: 212: _PIR.TenCount = 0;
  2887  0483  01A7               	clrf	(__PIR^(0+128)+7)
  2888                           
  2889                           ;PIR_B1.c: 213: if (_PIR.HundreCount < 10)
  2890  0484  300A               	movlw	10
  2891  0485  0234               	subwf	(__PIR^(0+128)+20),w
  2892  0486  1803               	skipnc
  2893  0487  2C91               	goto	l4735
  2894                           
  2895                           ;PIR_B1.c: 214: _PIR.HundreCount++;
  2896  0488  3001               	movlw	1
  2897  0489  1283               	bcf	3,5	;RP0=0, select bank0
  2898  048A  1303               	bcf	3,6	;RP1=0, select bank0
  2899  048B  00E3               	movwf	??_getPIR_AD
  2900  048C  0863               	movf	??_getPIR_AD,w
  2901  048D  1683               	bsf	3,5	;RP0=1, select bank1
  2902  048E  1303               	bcf	3,6	;RP1=0, select bank1
  2903  048F  07B4               	addwf	(__PIR^(0+128)+20),f
  2904  0490  0008               	return
  2905  0491                     l4735:	
  2906                           
  2907                           ;PIR_B1.c: 215: else
  2908                           ;PIR_B1.c: 216: _PIR.HundreCount = 0;
  2909  0491  01B4               	clrf	(__PIR^(0+128)+20)
  2910  0492  0008               	return
  2911  0493                     __end_of_getPIR_AD:	
  2912                           
  2913                           	psect	text5
  2914  0F16                     __ptext5:	
  2915 ;; *************** function ___lwdiv *****************
  2916 ;; Defined at:
  2917 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;  divisor         2    0[BANK0 ] unsigned int 
  2920 ;;  dividend        2    2[BANK0 ] unsigned int 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;  quotient        2    5[BANK0 ] unsigned int 
  2923 ;;  counter         1    4[BANK0 ] unsigned char 
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  2    0[BANK0 ] unsigned int 
  2926 ;; Registers used:
  2927 ;;		wreg, status,2, status,0
  2928 ;; Tracked objects:
  2929 ;;		On entry : 0/0
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2933 ;;      Params:         0       4       0       0
  2934 ;;      Locals:         0       3       0       0
  2935 ;;      Temps:          1       0       0       0
  2936 ;;      Totals:         1       7       0       0
  2937 ;;Total ram usage:        8 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    2
  2940 ;; This function calls:
  2941 ;;		Nothing
  2942 ;; This function is called by:
  2943 ;;		_getPIR_AD
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           
  2948                           ;psect for function ___lwdiv
  2949  0F16                     ___lwdiv:	
  2950                           
  2951                           ;incstack = 0
  2952                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2953  0F16  1283               	bcf	3,5	;RP0=0, select bank0
  2954  0F17  1303               	bcf	3,6	;RP1=0, select bank0
  2955  0F18  01E0               	clrf	___lwdiv@quotient
  2956  0F19  01E1               	clrf	___lwdiv@quotient+1
  2957  0F1A  085C               	movf	___lwdiv@divisor+1,w
  2958  0F1B  045B               	iorwf	___lwdiv@divisor,w
  2959  0F1C  1903               	skipnz
  2960  0F1D  2F4F               	goto	l4571
  2961  0F1E  01DF               	clrf	___lwdiv@counter
  2962  0F1F  0ADF               	incf	___lwdiv@counter,f
  2963  0F20                     l4559:	
  2964  0F20  1BDC               	btfsc	___lwdiv@divisor+1,7
  2965  0F21  2F2E               	goto	l4561
  2966  0F22  3001               	movlw	1
  2967  0F23                     u5525:	
  2968  0F23  1003               	clrc
  2969  0F24  0DDB               	rlf	___lwdiv@divisor,f
  2970  0F25  0DDC               	rlf	___lwdiv@divisor+1,f
  2971  0F26  3EFF               	addlw	-1
  2972  0F27  1D03               	skipz
  2973  0F28  2F23               	goto	u5525
  2974  0F29  3001               	movlw	1
  2975  0F2A  00F4               	movwf	??___lwdiv
  2976  0F2B  0874               	movf	??___lwdiv,w
  2977  0F2C  07DF               	addwf	___lwdiv@counter,f
  2978  0F2D  2F20               	goto	l4559
  2979  0F2E                     l4561:	
  2980  0F2E  3001               	movlw	1
  2981  0F2F                     u5545:	
  2982  0F2F  1003               	clrc
  2983  0F30  0DE0               	rlf	___lwdiv@quotient,f
  2984  0F31  0DE1               	rlf	___lwdiv@quotient+1,f
  2985  0F32  3EFF               	addlw	-1
  2986  0F33  1D03               	skipz
  2987  0F34  2F2F               	goto	u5545
  2988  0F35  085C               	movf	___lwdiv@divisor+1,w
  2989  0F36  025E               	subwf	___lwdiv@dividend+1,w
  2990  0F37  1D03               	skipz
  2991  0F38  2F3B               	goto	u5555
  2992  0F39  085B               	movf	___lwdiv@divisor,w
  2993  0F3A  025D               	subwf	___lwdiv@dividend,w
  2994  0F3B                     u5555:	
  2995  0F3B  1C03               	skipc
  2996  0F3C  2F44               	goto	l4567
  2997  0F3D  085B               	movf	___lwdiv@divisor,w
  2998  0F3E  02DD               	subwf	___lwdiv@dividend,f
  2999  0F3F  085C               	movf	___lwdiv@divisor+1,w
  3000  0F40  1C03               	skipc
  3001  0F41  03DE               	decf	___lwdiv@dividend+1,f
  3002  0F42  02DE               	subwf	___lwdiv@dividend+1,f
  3003  0F43  1460               	bsf	___lwdiv@quotient,0
  3004  0F44                     l4567:	
  3005  0F44  3001               	movlw	1
  3006  0F45                     u5565:	
  3007  0F45  1003               	clrc
  3008  0F46  0CDC               	rrf	___lwdiv@divisor+1,f
  3009  0F47  0CDB               	rrf	___lwdiv@divisor,f
  3010  0F48  3EFF               	addlw	-1
  3011  0F49  1D03               	skipz
  3012  0F4A  2F45               	goto	u5565
  3013  0F4B  3001               	movlw	1
  3014  0F4C  02DF               	subwf	___lwdiv@counter,f
  3015  0F4D  1D03               	btfss	3,2
  3016  0F4E  2F2E               	goto	l4561
  3017  0F4F                     l4571:	
  3018  0F4F  0861               	movf	___lwdiv@quotient+1,w
  3019  0F50  01DC               	clrf	?___lwdiv+1
  3020  0F51  07DC               	addwf	?___lwdiv+1,f
  3021  0F52  0860               	movf	___lwdiv@quotient,w
  3022  0F53  01DB               	clrf	?___lwdiv
  3023  0F54  07DB               	addwf	?___lwdiv,f
  3024  0F55  0008               	return
  3025  0F56                     __end_of___lwdiv:	
  3026                           
  3027                           	psect	text6
  3028  058E                     __ptext6:	
  3029 ;; *************** function _getLoad_AD *****************
  3030 ;; Defined at:
  3031 ;;		line 15 in file "../src/OverLoad_B1.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  channel         1    wreg     unsigned char 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  channel         1    2[BANK0 ] unsigned char 
  3036 ;;  i               1    5[BANK0 ] unsigned char 
  3037 ;;  j               1    4[BANK0 ] unsigned char 
  3038 ;;  k               1    3[BANK0 ] unsigned char 
  3039 ;; Return value:  Size  Location     Type
  3040 ;;		None               void
  3041 ;; Registers used:
  3042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3048 ;;      Params:         0       0       0       0
  3049 ;;      Locals:         0       4       0       0
  3050 ;;      Temps:          0       2       0       0
  3051 ;;      Totals:         0       6       0       0
  3052 ;;Total ram usage:        6 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    4
  3055 ;; This function calls:
  3056 ;;		_getAD
  3057 ;; This function is called by:
  3058 ;;		_main
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           
  3063                           ;psect for function _getLoad_AD
  3064  058E                     _getLoad_AD:	
  3065                           
  3066                           ;incstack = 0
  3067                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3068                           ;getLoad_AD@channel stored from wreg
  3069  058E  1283               	bcf	3,5	;RP0=0, select bank0
  3070  058F  1303               	bcf	3,6	;RP1=0, select bank0
  3071  0590  00DD               	movwf	getLoad_AD@channel
  3072                           
  3073                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3074  0591  01E0               	clrf	getLoad_AD@i
  3075  0592  01DF               	clrf	getLoad_AD@j
  3076  0593  01DE               	clrf	getLoad_AD@k
  3077                           
  3078                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3079  0594  1683               	bsf	3,5	;RP0=1, select bank1
  3080  0595  1303               	bcf	3,6	;RP1=0, select bank1
  3081  0596  1E4F               	btfss	_Load^(0+128),4
  3082  0597  0008               	return
  3083                           
  3084                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0x73);
  3085  0598  3073               	movlw	115
  3086  0599  1283               	bcf	3,5	;RP0=0, select bank0
  3087  059A  1303               	bcf	3,6	;RP1=0, select bank0
  3088  059B  00DB               	movwf	??_getLoad_AD
  3089  059C  085B               	movf	??_getLoad_AD,w
  3090  059D  00F4               	movwf	getAD@adcon1
  3091  059E  085D               	movf	getLoad_AD@channel,w
  3092  059F  158A  256F  118A   	fcall	_getAD
  3093  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  3094  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  3095  05A4  00DC               	movwf	??_getLoad_AD+1
  3096  05A5  085C               	movf	??_getLoad_AD+1,w
  3097  05A6  1683               	bsf	3,5	;RP0=1, select bank1
  3098  05A7  1303               	bcf	3,6	;RP1=0, select bank1
  3099  05A8  00E4               	movwf	(_Load^(0+128)+21)
  3100                           
  3101                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3102  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  3103  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  3104  05AB  01E0               	clrf	getLoad_AD@i
  3105  05AC  3004               	movlw	4
  3106  05AD  0260               	subwf	getLoad_AD@i,w
  3107  05AE  1803               	btfsc	3,0
  3108  05AF  2DD5               	goto	l4623
  3109  05B0                     l4611:	
  3110                           
  3111                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  3112  05B0  0860               	movf	getLoad_AD@i,w
  3113  05B1  3ED9               	addlw	(_Load+10)& (0+255)
  3114  05B2  0084               	movwf	4
  3115  05B3  1683               	bsf	3,5	;RP0=1, select bank1
  3116  05B4  1303               	bcf	3,6	;RP1=0, select bank1
  3117  05B5  0864               	movf	(_Load^(0+128)+21),w
  3118  05B6  1383               	bcf	3,7	;select IRP bank1
  3119  05B7  0200               	subwf	0,w
  3120  05B8  1803               	skipnc
  3121  05B9  2DCC               	goto	l4619
  3122  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  3123  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  3124  05BC  08DF               	movf	getLoad_AD@j,f
  3125  05BD  1D03               	skipz
  3126  05BE  2DCC               	goto	l4619
  3127                           
  3128                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  3129  05BF  1683               	bsf	3,5	;RP0=1, select bank1
  3130  05C0  1303               	bcf	3,6	;RP1=0, select bank1
  3131  05C1  0864               	movf	(_Load^(0+128)+21),w
  3132  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  3133  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  3134  05C4  00DB               	movwf	??_getLoad_AD
  3135  05C5  0860               	movf	getLoad_AD@i,w
  3136  05C6  3ED9               	addlw	(_Load+10)& (0+255)
  3137  05C7  0084               	movwf	4
  3138  05C8  085B               	movf	??_getLoad_AD,w
  3139  05C9  0080               	movwf	0
  3140                           
  3141                           ;OverLoad_B1.c: 24: j = 1;
  3142  05CA  01DF               	clrf	getLoad_AD@j
  3143  05CB  0ADF               	incf	getLoad_AD@j,f
  3144  05CC                     l4619:	
  3145  05CC  3001               	movlw	1
  3146  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  3147  05CE  00DB               	movwf	??_getLoad_AD
  3148  05CF  085B               	movf	??_getLoad_AD,w
  3149  05D0  07E0               	addwf	getLoad_AD@i,f
  3150  05D1  3004               	movlw	4
  3151  05D2  0260               	subwf	getLoad_AD@i,w
  3152  05D3  1C03               	skipc
  3153  05D4  2DB0               	goto	l4611
  3154  05D5                     l4623:	
  3155                           
  3156                           ;OverLoad_B1.c: 25: }
  3157                           ;OverLoad_B1.c: 26: }
  3158                           ;OverLoad_B1.c: 27: if (j == 0) {
  3159  05D5  08DF               	movf	getLoad_AD@j,f
  3160  05D6  1D03               	skipz
  3161  05D7  0008               	return
  3162                           
  3163                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3164  05D8  01E0               	clrf	getLoad_AD@i
  3165  05D9                     L6:	
  3166  05D9  3004               	movlw	4
  3167  05DA  0260               	subwf	getLoad_AD@i,w
  3168  05DB  1803               	btfsc	3,0
  3169  05DC  0008               	return
  3170                           
  3171                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  3172  05DD  0860               	movf	getLoad_AD@i,w
  3173  05DE  3EDE               	addlw	(_Load+15)& (0+255)
  3174  05DF  0084               	movwf	4
  3175  05E0  1383               	bcf	3,7	;select IRP bank1
  3176  05E1  0800               	movf	0,w
  3177  05E2  1683               	bsf	3,5	;RP0=1, select bank1
  3178  05E3  1303               	bcf	3,6	;RP1=0, select bank1
  3179  05E4  0264               	subwf	(_Load^(0+128)+21),w
  3180  05E5  1803               	skipnc
  3181  05E6  2DF9               	goto	l4639
  3182  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  3183  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  3184  05E9  08DE               	movf	getLoad_AD@k,f
  3185  05EA  1D03               	skipz
  3186  05EB  2DF9               	goto	l4639
  3187                           
  3188                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  3189  05EC  1683               	bsf	3,5	;RP0=1, select bank1
  3190  05ED  1303               	bcf	3,6	;RP1=0, select bank1
  3191  05EE  0864               	movf	(_Load^(0+128)+21),w
  3192  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  3193  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  3194  05F1  00DB               	movwf	??_getLoad_AD
  3195  05F2  0860               	movf	getLoad_AD@i,w
  3196  05F3  3EDE               	addlw	(_Load+15)& (0+255)
  3197  05F4  0084               	movwf	4
  3198  05F5  085B               	movf	??_getLoad_AD,w
  3199  05F6  0080               	movwf	0
  3200                           
  3201                           ;OverLoad_B1.c: 31: k = 1;
  3202  05F7  01DE               	clrf	getLoad_AD@k
  3203  05F8  0ADE               	incf	getLoad_AD@k,f
  3204  05F9                     l4639:	
  3205  05F9  3001               	movlw	1
  3206  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  3207  05FB  00DB               	movwf	??_getLoad_AD
  3208  05FC  085B               	movf	??_getLoad_AD,w
  3209  05FD  07E0               	addwf	getLoad_AD@i,f
  3210  05FE  2DD9               	goto	L6
  3211  05FF                     __end_of_getLoad_AD:	
  3212                           
  3213                           	psect	text7
  3214  0DB3                     __ptext7:	
  3215 ;; *************** function _getCDS_AD *****************
  3216 ;; Defined at:
  3217 ;;		line 45 in file "../src/CDS_B1.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;  channel1        1    wreg     unsigned char 
  3220 ;;  channel2        1    6[COMMON] unsigned char 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  channel1        1    4[BANK0 ] unsigned char 
  3223 ;;  j               1    3[BANK0 ] unsigned char 
  3224 ;;  i               1    2[BANK0 ] unsigned char 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;		None               void
  3227 ;; Registers used:
  3228 ;;		wreg, status,2, status,0, pclath, cstack
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3234 ;;      Params:         1       0       0       0
  3235 ;;      Locals:         0       3       0       0
  3236 ;;      Temps:          0       2       0       0
  3237 ;;      Totals:         1       5       0       0
  3238 ;;Total ram usage:        6 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    4
  3241 ;; This function calls:
  3242 ;;		_getAD
  3243 ;; This function is called by:
  3244 ;;		_main
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           
  3249                           ;psect for function _getCDS_AD
  3250  0DB3                     _getCDS_AD:	
  3251                           
  3252                           ;incstack = 0
  3253                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3254                           ;getCDS_AD@channel1 stored from wreg
  3255  0DB3  1283               	bcf	3,5	;RP0=0, select bank0
  3256  0DB4  1303               	bcf	3,6	;RP1=0, select bank0
  3257  0DB5  00DF               	movwf	getCDS_AD@channel1
  3258                           
  3259                           ;CDS_B1.c: 46: char i = 0, j = 0;
  3260  0DB6  01DD               	clrf	getCDS_AD@i
  3261  0DB7  01DE               	clrf	getCDS_AD@j
  3262                           
  3263                           ;CDS_B1.c: 47: if (_CDS.ADtoGO == 1) {
  3264  0DB8  1DAD               	btfss	__CDS,3
  3265  0DB9  0008               	return
  3266                           
  3267                           ;CDS_B1.c: 48: _CDS.GO = 1;
  3268  0DBA  14AD               	bsf	__CDS,1
  3269                           
  3270                           ;CDS_B1.c: 49: _CDS.ADRES = getAD(channel1, 0x70);
  3271  0DBB  3070               	movlw	112
  3272  0DBC  00DB               	movwf	??_getCDS_AD
  3273  0DBD  085B               	movf	??_getCDS_AD,w
  3274  0DBE  00F4               	movwf	getAD@adcon1
  3275  0DBF  085F               	movf	getCDS_AD@channel1,w
  3276  0DC0  158A  256F  158A   	fcall	_getAD
  3277  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  3278  0DC4  1303               	bcf	3,6	;RP1=0, select bank0
  3279  0DC5  00DC               	movwf	??_getCDS_AD+1
  3280  0DC6  085C               	movf	??_getCDS_AD+1,w
  3281  0DC7  00B1               	movwf	__CDS+4
  3282                           
  3283                           ;CDS_B1.c: 50: _CDS.VRAD = _CDS.ADRES;
  3284  0DC8  0831               	movf	__CDS+4,w
  3285  0DC9  00DB               	movwf	??_getCDS_AD
  3286  0DCA  085B               	movf	??_getCDS_AD,w
  3287  0DCB  00AF               	movwf	__CDS+2
  3288                           
  3289                           ;CDS_B1.c: 51: _CDS.ADRES = getAD(channel2, 0x70);
  3290  0DCC  3070               	movlw	112
  3291  0DCD  00DB               	movwf	??_getCDS_AD
  3292  0DCE  085B               	movf	??_getCDS_AD,w
  3293  0DCF  00F4               	movwf	getAD@adcon1
  3294  0DD0  0876               	movf	getCDS_AD@channel2,w
  3295  0DD1  158A  256F         	fcall	_getAD
  3296  0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  3297  0DD4  1303               	bcf	3,6	;RP1=0, select bank0
  3298  0DD5  00DC               	movwf	??_getCDS_AD+1
  3299  0DD6  085C               	movf	??_getCDS_AD+1,w
  3300  0DD7  00B1               	movwf	__CDS+4
  3301                           
  3302                           ;CDS_B1.c: 52: _CDS.SignalAD = _CDS.ADRES;
  3303  0DD8  0831               	movf	__CDS+4,w
  3304  0DD9  00DB               	movwf	??_getCDS_AD
  3305  0DDA  085B               	movf	??_getCDS_AD,w
  3306  0DDB  00B0               	movwf	__CDS+3
  3307  0DDC  0008               	return
  3308  0DDD                     __end_of_getCDS_AD:	
  3309                           
  3310                           	psect	text8
  3311  0D6F                     __ptext8:	
  3312 ;; *************** function _getAD *****************
  3313 ;; Defined at:
  3314 ;;		line 427 in file "../src/MCU_B1.c"
  3315 ;; Parameters:    Size  Location     Type
  3316 ;;  adcon0          1    wreg     unsigned char 
  3317 ;;  adcon1          1    4[COMMON] unsigned char 
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;  adcon0          1    5[COMMON] unsigned char 
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      unsigned char 
  3322 ;; Registers used:
  3323 ;;		wreg, status,2, status,0, pclath, cstack
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3329 ;;      Params:         1       0       0       0
  3330 ;;      Locals:         1       0       0       0
  3331 ;;      Temps:          0       0       0       0
  3332 ;;      Totals:         2       0       0       0
  3333 ;;Total ram usage:        2 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    3
  3336 ;; This function calls:
  3337 ;;		_Timeout_Counter
  3338 ;;		_set_TimeoutCleared
  3339 ;; This function is called by:
  3340 ;;		_getCDS_AD
  3341 ;;		_getLoad_AD
  3342 ;;		_getTemp_AD
  3343 ;;		_getPIR_AD
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           
  3348                           ;psect for function _getAD
  3349  0D6F                     _getAD:	
  3350                           
  3351                           ;incstack = 0
  3352                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3353                           ;getAD@adcon0 stored from wreg
  3354  0D6F  00F5               	movwf	getAD@adcon0
  3355                           
  3356                           ;MCU_B1.c: 428: ADCON0 = adcon0;
  3357  0D70  0875               	movf	getAD@adcon0,w
  3358  0D71  1283               	bcf	3,5	;RP0=0, select bank0
  3359  0D72  1303               	bcf	3,6	;RP1=0, select bank0
  3360  0D73  009F               	movwf	31	;volatile
  3361                           
  3362                           ;MCU_B1.c: 429: ADCON1 = adcon1;
  3363  0D74  0874               	movf	getAD@adcon1,w
  3364  0D75  1683               	bsf	3,5	;RP0=1, select bank1
  3365  0D76  1303               	bcf	3,6	;RP1=0, select bank1
  3366  0D77  009F               	movwf	31	;volatile
  3367                           
  3368                           ;MCU_B1.c: 430: GO_nDONE = 1;
  3369  0D78  1283               	bcf	3,5	;RP0=0, select bank0
  3370  0D79  1303               	bcf	3,6	;RP1=0, select bank0
  3371  0D7A  149F               	bsf	31,1	;volatile
  3372                           
  3373                           ;MCU_B1.c: 431: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3374  0D7B  2D7F               	goto	l3133
  3375  0D7C                     l3131:	
  3376                           
  3377                           ;MCU_B1.c: 432: Timeout_Counter();
  3378  0D7C  158A  24B6  158A   	fcall	_Timeout_Counter
  3379  0D7F                     l3133:	
  3380  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  3381  0D80  1303               	bcf	3,6	;RP1=0, select bank0
  3382  0D81  1C9F               	btfss	31,1	;volatile
  3383  0D82  2D85               	goto	l3137
  3384  0D83  1D25               	btfss	_myMain+5,2
  3385  0D84  2D7C               	goto	l3131
  3386  0D85                     l3137:	
  3387                           
  3388                           ;MCU_B1.c: 433: };
  3389                           ;MCU_B1.c: 434: set_TimeoutCleared();
  3390  0D85  158A  239F         	fcall	_set_TimeoutCleared
  3391                           
  3392                           ;MCU_B1.c: 435: return ADRES;
  3393  0D87  1283               	bcf	3,5	;RP0=0, select bank0
  3394  0D88  1303               	bcf	3,6	;RP1=0, select bank0
  3395  0D89  081E               	movf	30,w	;volatile
  3396  0D8A  0008               	return
  3397  0D8B                     __end_of_getAD:	
  3398                           
  3399                           	psect	text9
  3400  0B9F                     __ptext9:	
  3401 ;; *************** function _set_TimeoutCleared *****************
  3402 ;; Defined at:
  3403 ;;		line 270 in file "../src/Main_B1.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;		None
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;		None
  3408 ;; Return value:  Size  Location     Type
  3409 ;;		None               void
  3410 ;; Registers used:
  3411 ;;		status,2
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3417 ;;      Params:         0       0       0       0
  3418 ;;      Locals:         0       0       0       0
  3419 ;;      Temps:          0       0       0       0
  3420 ;;      Totals:         0       0       0       0
  3421 ;;Total ram usage:        0 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    2
  3424 ;; This function calls:
  3425 ;;		Nothing
  3426 ;; This function is called by:
  3427 ;;		_getAD
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           
  3432                           ;psect for function _set_TimeoutCleared
  3433  0B9F                     _set_TimeoutCleared:	
  3434                           
  3435                           ;Main_B1.c: 271: myMain.Timeout = 0;
  3436                           
  3437                           ;incstack = 0
  3438                           ; Regs used in _set_TimeoutCleared: [status,2]
  3439  0B9F  1283               	bcf	3,5	;RP0=0, select bank0
  3440  0BA0  1303               	bcf	3,6	;RP1=0, select bank0
  3441  0BA1  1125               	bcf	_myMain+5,2
  3442                           
  3443                           ;Main_B1.c: 272: myMain.Timeout_Counter = 0;
  3444  0BA2  01A6               	clrf	_myMain+6
  3445  0BA3  01A7               	clrf	_myMain+7
  3446  0BA4  0008               	return
  3447  0BA5                     __end_of_set_TimeoutCleared:	
  3448                           
  3449                           	psect	text10
  3450  0CB6                     __ptext10:	
  3451 ;; *************** function _Timeout_Counter *****************
  3452 ;; Defined at:
  3453 ;;		line 261 in file "../src/Main_B1.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;		None
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;		None
  3458 ;; Return value:  Size  Location     Type
  3459 ;;		None               void
  3460 ;; Registers used:
  3461 ;;		wreg, status,2
  3462 ;; Tracked objects:
  3463 ;;		On entry : 0/0
  3464 ;;		On exit  : 0/0
  3465 ;;		Unchanged: 0/0
  3466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3467 ;;      Params:         0       0       0       0
  3468 ;;      Locals:         0       0       0       0
  3469 ;;      Temps:          0       0       0       0
  3470 ;;      Totals:         0       0       0       0
  3471 ;;Total ram usage:        0 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; Hardware stack levels required when called:    2
  3474 ;; This function calls:
  3475 ;;		Nothing
  3476 ;; This function is called by:
  3477 ;;		_getAD
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           
  3482                           ;psect for function _Timeout_Counter
  3483  0CB6                     _Timeout_Counter:	
  3484                           
  3485                           ;Main_B1.c: 262: myMain.Timeout_Counter++;
  3486                           
  3487                           ;incstack = 0
  3488                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3489  0CB6  3001               	movlw	1
  3490  0CB7  1283               	bcf	3,5	;RP0=0, select bank0
  3491  0CB8  1303               	bcf	3,6	;RP1=0, select bank0
  3492  0CB9  07A6               	addwf	_myMain+6,f
  3493  0CBA  1803               	skipnc
  3494  0CBB  0AA7               	incf	_myMain+7,f
  3495  0CBC  3000               	movlw	0
  3496  0CBD  07A7               	addwf	_myMain+7,f
  3497                           
  3498                           ;Main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
  3499  0CBE  3027               	movlw	39
  3500  0CBF  0627               	xorwf	_myMain+7,w
  3501  0CC0  1D03               	skipz
  3502  0CC1  2CC4               	goto	u2585
  3503  0CC2  3010               	movlw	16
  3504  0CC3  0626               	xorwf	_myMain+6,w
  3505  0CC4                     u2585:	
  3506  0CC4  1D03               	skipz
  3507  0CC5  0008               	return
  3508                           
  3509                           ;Main_B1.c: 264: myMain.Timeout_Counter = 0;
  3510  0CC6  01A6               	clrf	_myMain+6
  3511  0CC7  01A7               	clrf	_myMain+7
  3512                           
  3513                           ;Main_B1.c: 265: myMain.Timeout = 1;
  3514  0CC8  1525               	bsf	_myMain+5,2
  3515  0CC9  0008               	return
  3516  0CCA                     __end_of_Timeout_Counter:	
  3517                           
  3518                           	psect	text11
  3519  0C81                     __ptext11:	
  3520 ;; *************** function _WDT_Main *****************
  3521 ;; Defined at:
  3522 ;;		line 1033 in file "../src/MCU_B1.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;		None
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;		None
  3527 ;; Return value:  Size  Location     Type
  3528 ;;		None               void
  3529 ;; Registers used:
  3530 ;;		wreg, status,2, status,0, pclath, cstack
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3536 ;;      Params:         0       0       0       0
  3537 ;;      Locals:         0       0       0       0
  3538 ;;      Temps:          1       0       0       0
  3539 ;;      Totals:         1       0       0       0
  3540 ;;Total ram usage:        1 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    3
  3543 ;; This function calls:
  3544 ;;		_WDT_Clearing
  3545 ;; This function is called by:
  3546 ;;		_main
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           
  3551                           ;psect for function _WDT_Main
  3552  0C81                     _WDT_Main:	
  3553                           
  3554                           ;MCU_B1.c: 1034: if (WDT.Enable == 1) {
  3555                           
  3556                           ;incstack = 0
  3557                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3558  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  3559  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  3560  0C83  1C39               	btfss	_WDT,0
  3561  0C84  0008               	return
  3562                           
  3563                           ;MCU_B1.c: 1035: if (WDT.Timer-- > 0) {
  3564  0C85  3001               	movlw	1
  3565  0C86  02BA               	subwf	_WDT+1,f
  3566  0C87  083A               	movf	_WDT+1,w
  3567  0C88  3AFF               	xorlw	255
  3568  0C89  1903               	skipnz
  3569  0C8A  0008               	return
  3570                           
  3571                           ;MCU_B1.c: 1036: WDT.Timer = 100;
  3572  0C8B  3064               	movlw	100
  3573  0C8C  00F4               	movwf	??_WDT_Main
  3574  0C8D  0874               	movf	??_WDT_Main,w
  3575  0C8E  00BA               	movwf	_WDT+1
  3576                           
  3577                           ;MCU_B1.c: 1037: WDT_Clearing();
  3578  0C8F  118A  2002         	fcall	_WDT_Clearing
  3579  0C91  0008               	return
  3580  0C92                     __end_of_WDT_Main:	
  3581                           
  3582                           	psect	text12
  3583  0002                     __ptext12:	
  3584 ;; *************** function _WDT_Clearing *****************
  3585 ;; Defined at:
  3586 ;;		line 1043 in file "../src/MCU_B1.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;		None               void
  3593 ;; Registers used:
  3594 ;;		None
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3600 ;;      Params:         0       0       0       0
  3601 ;;      Locals:         0       0       0       0
  3602 ;;      Temps:          0       0       0       0
  3603 ;;      Totals:         0       0       0       0
  3604 ;;Total ram usage:        0 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    2
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_WDT_Main
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           
  3615                           ;psect for function _WDT_Clearing
  3616  0002                     _WDT_Clearing:	
  3617                           
  3618                           ;incstack = 0
  3619                           ; Regs used in _WDT_Clearing: []
  3620  0002  0064               	clrwdt	;# 
  3621  0003  0008               	return
  3622  0004                     __end_of_WDT_Clearing:	
  3623                           
  3624                           	psect	text13
  3625  07FD                     __ptext13:	
  3626 ;; *************** function _Temp_Main *****************
  3627 ;; Defined at:
  3628 ;;		line 51 in file "../src/OverTemperature_B1.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;		None
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;		None
  3633 ;; Return value:  Size  Location     Type
  3634 ;;		None               void
  3635 ;; Registers used:
  3636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3642 ;;      Params:         0       0       0       0
  3643 ;;      Locals:         0       0       0       0
  3644 ;;      Temps:          0       0       0       0
  3645 ;;      Totals:         0       0       0       0
  3646 ;;Total ram usage:        0 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    6
  3649 ;; This function calls:
  3650 ;;		_setTemp_Main
  3651 ;; This function is called by:
  3652 ;;		_main
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           
  3657                           ;psect for function _Temp_Main
  3658  07FD                     _Temp_Main:	
  3659                           
  3660                           ;OverTemperature_B1.c: 53: setTemp_Main();
  3661                           
  3662                           ;incstack = 0
  3663                           ; Regs used in _Temp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3664  07FD  118A  2493         	fcall	_setTemp_Main
  3665  07FF  0008               	return
  3666  0800                     __end_of_Temp_Main:	
  3667                           
  3668                           	psect	text14
  3669  0493                     __ptext14:	
  3670 ;; *************** function _setTemp_Main *****************
  3671 ;; Defined at:
  3672 ;;		line 58 in file "../src/OverTemperature_B1.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;		None
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;		None
  3677 ;; Return value:  Size  Location     Type
  3678 ;;		None               void
  3679 ;; Registers used:
  3680 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3686 ;;      Params:         0       0       0       0
  3687 ;;      Locals:         0       0       0       0
  3688 ;;      Temps:          0       1       0       0
  3689 ;;      Totals:         0       1       0       0
  3690 ;;Total ram usage:        1 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    5
  3693 ;; This function calls:
  3694 ;;		___awdiv
  3695 ;;		_getMain_All_Error_Status
  3696 ;;		_getMain_LightsStatus
  3697 ;; This function is called by:
  3698 ;;		_Temp_Main
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           
  3703                           ;psect for function _setTemp_Main
  3704  0493                     _setTemp_Main:	
  3705                           
  3706                           ;OverTemperature_B1.c: 59: if (Temp.Enable == 1) {
  3707                           
  3708                           ;incstack = 0
  3709                           ; Regs used in _setTemp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3710  0493  1283               	bcf	3,5	;RP0=0, select bank0
  3711  0494  1303               	bcf	3,6	;RP1=0, select bank0
  3712  0495  1C3C               	btfss	_Temp,0
  3713  0496  2D13               	goto	l790
  3714                           
  3715                           ;OverTemperature_B1.c: 60: if (Temp.ADtoGO == 0) {
  3716  0497  193C               	btfsc	_Temp,2
  3717  0498  2CAA               	goto	l4423
  3718                           
  3719                           ;OverTemperature_B1.c: 61: Temp.Time++;
  3720  0499  3001               	movlw	1
  3721  049A  07BD               	addwf	_Temp+1,f
  3722  049B  1803               	skipnc
  3723  049C  0ABE               	incf	_Temp+2,f
  3724  049D  3000               	movlw	0
  3725  049E  07BE               	addwf	_Temp+2,f
  3726                           
  3727                           ;OverTemperature_B1.c: 62: if (Temp.Time >= 500) {
  3728  049F  3001               	movlw	1
  3729  04A0  023E               	subwf	_Temp+2,w
  3730  04A1  30F4               	movlw	244
  3731  04A2  1903               	skipnz
  3732  04A3  023D               	subwf	_Temp+1,w
  3733  04A4  1C03               	skipc
  3734  04A5  0008               	return
  3735                           
  3736                           ;OverTemperature_B1.c: 63: Temp.Time = 0;
  3737  04A6  01BD               	clrf	_Temp+1
  3738  04A7  01BE               	clrf	_Temp+2
  3739                           
  3740                           ;OverTemperature_B1.c: 64: Temp.ADtoGO = 1;
  3741  04A8  153C               	bsf	_Temp,2
  3742                           
  3743                           ;OverTemperature_B1.c: 65: }
  3744                           ;OverTemperature_B1.c: 66: } else {
  3745  04A9  0008               	return
  3746  04AA                     l4423:	
  3747                           
  3748                           ;OverTemperature_B1.c: 67: if (getMain_All_Error_Status(2) == 0) {
  3749  04AA  3002               	movlw	2
  3750  04AB  158A  27A6  118A   	fcall	_getMain_All_Error_Status
  3751  04AE  3800               	iorlw	0
  3752  04AF  1D03               	skipz
  3753  04B0  0008               	return
  3754                           
  3755                           ;OverTemperature_B1.c: 68: Temp.Time++;
  3756  04B1  3001               	movlw	1
  3757  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  3758  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  3759  04B4  07BD               	addwf	_Temp+1,f
  3760  04B5  1803               	skipnc
  3761  04B6  0ABE               	incf	_Temp+2,f
  3762  04B7  3000               	movlw	0
  3763  04B8  07BE               	addwf	_Temp+2,f
  3764                           
  3765                           ;OverTemperature_B1.c: 69: if (Temp.Time >= 5) {
  3766  04B9  3000               	movlw	0
  3767  04BA  023E               	subwf	_Temp+2,w
  3768  04BB  3005               	movlw	5
  3769  04BC  1903               	skipnz
  3770  04BD  023D               	subwf	_Temp+1,w
  3771  04BE  1C03               	skipc
  3772  04BF  0008               	return
  3773                           
  3774                           ;OverTemperature_B1.c: 70: Temp.Time = 0;
  3775  04C0  01BD               	clrf	_Temp+1
  3776  04C1  01BE               	clrf	_Temp+2
  3777                           
  3778                           ;OverTemperature_B1.c: 71: if (Temp.GO == 1) {
  3779  04C2  1E3C               	btfss	_Temp,4
  3780  04C3  0008               	return
  3781                           
  3782                           ;OverTemperature_B1.c: 72: Temp.ADtoGO = 0;
  3783  04C4  113C               	bcf	_Temp,2
  3784                           
  3785                           ;OverTemperature_B1.c: 73: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3786  04C5  3002               	movlw	2
  3787  04C6  00DB               	movwf	___awdiv@divisor
  3788  04C7  3000               	movlw	0
  3789  04C8  00DC               	movwf	___awdiv@divisor+1
  3790  04C9  0843               	movf	_Temp+7,w
  3791  04CA  0744               	addwf	_Temp+8,w
  3792  04CB  00DD               	movwf	___awdiv@dividend
  3793  04CC  01DE               	clrf	___awdiv@dividend+1
  3794  04CD  0DDE               	rlf	___awdiv@dividend+1,f
  3795  04CE  118A  27A0  118A   	fcall	___awdiv
  3796  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  3797  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  3798  04D3  085B               	movf	?___awdiv,w
  3799  04D4  00E3               	movwf	??_setTemp_Main
  3800  04D5  0863               	movf	??_setTemp_Main,w
  3801  04D6  00C2               	movwf	_Temp+6
  3802                           
  3803                           ;OverTemperature_B1.c: 75: if (getMain_LightsStatus() == 1) {
  3804  04D7  158A  2607  118A   	fcall	_getMain_LightsStatus
  3805  04DA  3A01               	xorlw	1
  3806  04DB  1D03               	skipz
  3807  04DC  2CE5               	goto	l4439
  3808                           
  3809                           ;OverTemperature_B1.c: 76: Temp.SafeValue = 170;
  3810  04DD  30AA               	movlw	170
  3811  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  3812  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  3813  04E0  00E3               	movwf	??_setTemp_Main
  3814  04E1  0863               	movf	??_setTemp_Main,w
  3815  04E2  00C6               	movwf	_Temp+10
  3816                           
  3817                           ;OverTemperature_B1.c: 77: Temp.DangerValue = 140;
  3818  04E3  308C               	movlw	140
  3819  04E4  2CEC               	goto	L7
  3820  04E5                     l4439:	
  3821                           ;OverTemperature_B1.c: 78: } else {
  3822                           
  3823                           
  3824                           ;OverTemperature_B1.c: 79: Temp.SafeValue = 100;
  3825  04E5  3064               	movlw	100
  3826  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  3827  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  3828  04E8  00E3               	movwf	??_setTemp_Main
  3829  04E9  0863               	movf	??_setTemp_Main,w
  3830  04EA  00C6               	movwf	_Temp+10
  3831                           
  3832                           ;OverTemperature_B1.c: 80: Temp.DangerValue = 70;
  3833  04EB  3046               	movlw	70
  3834  04EC                     L7:	
  3835  04EC  00E3               	movwf	??_setTemp_Main
  3836  04ED  0863               	movf	??_setTemp_Main,w
  3837  04EE  00C7               	movwf	_Temp+11
  3838                           
  3839                           ;OverTemperature_B1.c: 81: }
  3840                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  3841  04EF  1CBC               	btfss	_Temp,1
  3842  04F0  2D00               	goto	l4455
  3843                           
  3844                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  3845  04F1  0846               	movf	_Temp+10,w
  3846  04F2  0242               	subwf	_Temp+6,w
  3847  04F3  1C03               	skipc
  3848  04F4  2D0F               	goto	l4465
  3849                           
  3850                           ;OverTemperature_B1.c: 92: Temp.Count++;
  3851  04F5  3001               	movlw	1
  3852  04F6  00E3               	movwf	??_setTemp_Main
  3853  04F7  0863               	movf	??_setTemp_Main,w
  3854  04F8  07BF               	addwf	_Temp+3,f
  3855                           
  3856                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  3857  04F9  3003               	movlw	3
  3858  04FA  023F               	subwf	_Temp+3,w
  3859  04FB  1C03               	skipc
  3860  04FC  2D10               	goto	l803
  3861                           
  3862                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  3863  04FD  01BF               	clrf	_Temp+3
  3864                           
  3865                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  3866  04FE  10BC               	bcf	_Temp,1
  3867                           
  3868                           ;OverTemperature_B1.c: 96: }
  3869                           ;OverTemperature_B1.c: 97: } else {
  3870  04FF  2D10               	goto	l803
  3871  0500                     l4455:	
  3872                           ;OverTemperature_B1.c: 99: }
  3873                           ;OverTemperature_B1.c: 100: } else {
  3874                           
  3875                           ;OverTemperature_B1.c: 98: Temp.Count = 0;
  3876                           
  3877                           
  3878                           ;OverTemperature_B1.c: 101: if (Temp.AD <= Temp.DangerValue) {
  3879  0500  0842               	movf	_Temp+6,w
  3880  0501  0247               	subwf	_Temp+11,w
  3881  0502  1C03               	skipc
  3882  0503  2D0F               	goto	l4465
  3883                           
  3884                           ;OverTemperature_B1.c: 102: Temp.Count++;
  3885  0504  3001               	movlw	1
  3886  0505  00E3               	movwf	??_setTemp_Main
  3887  0506  0863               	movf	??_setTemp_Main,w
  3888  0507  07BF               	addwf	_Temp+3,f
  3889                           
  3890                           ;OverTemperature_B1.c: 103: if (Temp.Count >= 3) {
  3891  0508  3003               	movlw	3
  3892  0509  023F               	subwf	_Temp+3,w
  3893  050A  1C03               	skipc
  3894  050B  2D10               	goto	l803
  3895                           
  3896                           ;OverTemperature_B1.c: 104: Temp.Count = 0;
  3897  050C  01BF               	clrf	_Temp+3
  3898                           
  3899                           ;OverTemperature_B1.c: 105: Temp.ERROR = 1;
  3900  050D  14BC               	bsf	_Temp,1
  3901                           
  3902                           ;OverTemperature_B1.c: 106: }
  3903                           ;OverTemperature_B1.c: 107: } else {
  3904  050E  2D10               	goto	l803
  3905  050F                     l4465:	
  3906                           
  3907                           ;OverTemperature_B1.c: 108: Temp.Count = 0;
  3908  050F  01BF               	clrf	_Temp+3
  3909  0510                     l803:	
  3910                           
  3911                           ;OverTemperature_B1.c: 109: }
  3912                           ;OverTemperature_B1.c: 110: }
  3913                           ;OverTemperature_B1.c: 111: ;;
  3914                           ;OverTemperature_B1.c: 112: ;;
  3915                           ;OverTemperature_B1.c: 115: Temp.ADH[0] = 0;
  3916  0510  01C3               	clrf	_Temp+7
  3917                           
  3918                           ;OverTemperature_B1.c: 116: Temp.ADH[1] = 0;
  3919  0511  01C4               	clrf	_Temp+8
  3920                           
  3921                           ;OverTemperature_B1.c: 117: }
  3922                           ;OverTemperature_B1.c: 118: }
  3923                           ;OverTemperature_B1.c: 119: }
  3924                           ;OverTemperature_B1.c: 120: }
  3925                           ;OverTemperature_B1.c: 121: } else {
  3926  0512  0008               	return
  3927  0513                     l790:	
  3928                           
  3929                           ;OverTemperature_B1.c: 122: if (myMain.PowerON == 1) {
  3930  0513  1C20               	btfss	_myMain,0
  3931  0514  0008               	return
  3932                           
  3933                           ;OverTemperature_B1.c: 123: Temp.Enable = 1;
  3934  0515  143C               	bsf	_Temp,0
  3935  0516  0008               	return
  3936  0517                     __end_of_setTemp_Main:	
  3937                           
  3938                           	psect	text15
  3939  07A0                     __ptext15:	
  3940 ;; *************** function ___awdiv *****************
  3941 ;; Defined at:
  3942 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  divisor         2    0[BANK0 ] int 
  3945 ;;  dividend        2    2[BANK0 ] int 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;  quotient        2    6[BANK0 ] int 
  3948 ;;  sign            1    5[BANK0 ] unsigned char 
  3949 ;;  counter         1    4[BANK0 ] unsigned char 
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  2    0[BANK0 ] int 
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, status,0
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3959 ;;      Params:         0       4       0       0
  3960 ;;      Locals:         0       4       0       0
  3961 ;;      Temps:          1       0       0       0
  3962 ;;      Totals:         1       8       0       0
  3963 ;;Total ram usage:        9 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    2
  3966 ;; This function calls:
  3967 ;;		Nothing
  3968 ;; This function is called by:
  3969 ;;		_setTemp_Main
  3970 ;;		_getPIR_AD
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           
  3975                           ;psect for function ___awdiv
  3976  07A0                     ___awdiv:	
  3977                           
  3978                           ;incstack = 0
  3979                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3980  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  3981  07A1  1303               	bcf	3,6	;RP1=0, select bank0
  3982  07A2  01E0               	clrf	___awdiv@sign
  3983  07A3  1FDC               	btfss	___awdiv@divisor+1,7
  3984  07A4  2FAC               	goto	l4285
  3985  07A5  09DB               	comf	___awdiv@divisor,f
  3986  07A6  09DC               	comf	___awdiv@divisor+1,f
  3987  07A7  0ADB               	incf	___awdiv@divisor,f
  3988  07A8  1903               	skipnz
  3989  07A9  0ADC               	incf	___awdiv@divisor+1,f
  3990  07AA  01E0               	clrf	___awdiv@sign
  3991  07AB  0AE0               	incf	___awdiv@sign,f
  3992  07AC                     l4285:	
  3993  07AC  1FDE               	btfss	___awdiv@dividend+1,7
  3994  07AD  2FB7               	goto	l4291
  3995  07AE  09DD               	comf	___awdiv@dividend,f
  3996  07AF  09DE               	comf	___awdiv@dividend+1,f
  3997  07B0  0ADD               	incf	___awdiv@dividend,f
  3998  07B1  1903               	skipnz
  3999  07B2  0ADE               	incf	___awdiv@dividend+1,f
  4000  07B3  3001               	movlw	1
  4001  07B4  00F4               	movwf	??___awdiv
  4002  07B5  0874               	movf	??___awdiv,w
  4003  07B6  06E0               	xorwf	___awdiv@sign,f
  4004  07B7                     l4291:	
  4005  07B7  01E1               	clrf	___awdiv@quotient
  4006  07B8  01E2               	clrf	___awdiv@quotient+1
  4007  07B9  085C               	movf	___awdiv@divisor+1,w
  4008  07BA  045B               	iorwf	___awdiv@divisor,w
  4009  07BB  1903               	skipnz
  4010  07BC  2FEE               	goto	l4313
  4011  07BD  01DF               	clrf	___awdiv@counter
  4012  07BE  0ADF               	incf	___awdiv@counter,f
  4013  07BF                     l4301:	
  4014  07BF  1BDC               	btfsc	___awdiv@divisor+1,7
  4015  07C0  2FCD               	goto	l4303
  4016  07C1  3001               	movlw	1
  4017  07C2                     u4915:	
  4018  07C2  1003               	clrc
  4019  07C3  0DDB               	rlf	___awdiv@divisor,f
  4020  07C4  0DDC               	rlf	___awdiv@divisor+1,f
  4021  07C5  3EFF               	addlw	-1
  4022  07C6  1D03               	skipz
  4023  07C7  2FC2               	goto	u4915
  4024  07C8  3001               	movlw	1
  4025  07C9  00F4               	movwf	??___awdiv
  4026  07CA  0874               	movf	??___awdiv,w
  4027  07CB  07DF               	addwf	___awdiv@counter,f
  4028  07CC  2FBF               	goto	l4301
  4029  07CD                     l4303:	
  4030  07CD  3001               	movlw	1
  4031  07CE                     u4935:	
  4032  07CE  1003               	clrc
  4033  07CF  0DE1               	rlf	___awdiv@quotient,f
  4034  07D0  0DE2               	rlf	___awdiv@quotient+1,f
  4035  07D1  3EFF               	addlw	-1
  4036  07D2  1D03               	skipz
  4037  07D3  2FCE               	goto	u4935
  4038  07D4  085C               	movf	___awdiv@divisor+1,w
  4039  07D5  025E               	subwf	___awdiv@dividend+1,w
  4040  07D6  1D03               	skipz
  4041  07D7  2FDA               	goto	u4945
  4042  07D8  085B               	movf	___awdiv@divisor,w
  4043  07D9  025D               	subwf	___awdiv@dividend,w
  4044  07DA                     u4945:	
  4045  07DA  1C03               	skipc
  4046  07DB  2FE3               	goto	l4309
  4047  07DC  085B               	movf	___awdiv@divisor,w
  4048  07DD  02DD               	subwf	___awdiv@dividend,f
  4049  07DE  085C               	movf	___awdiv@divisor+1,w
  4050  07DF  1C03               	skipc
  4051  07E0  03DE               	decf	___awdiv@dividend+1,f
  4052  07E1  02DE               	subwf	___awdiv@dividend+1,f
  4053  07E2  1461               	bsf	___awdiv@quotient,0
  4054  07E3                     l4309:	
  4055  07E3  3001               	movlw	1
  4056  07E4                     u4955:	
  4057  07E4  1003               	clrc
  4058  07E5  0CDC               	rrf	___awdiv@divisor+1,f
  4059  07E6  0CDB               	rrf	___awdiv@divisor,f
  4060  07E7  3EFF               	addlw	-1
  4061  07E8  1D03               	skipz
  4062  07E9  2FE4               	goto	u4955
  4063  07EA  3001               	movlw	1
  4064  07EB  02DF               	subwf	___awdiv@counter,f
  4065  07EC  1D03               	btfss	3,2
  4066  07ED  2FCD               	goto	l4303
  4067  07EE                     l4313:	
  4068  07EE  0860               	movf	___awdiv@sign,w
  4069  07EF  1903               	btfsc	3,2
  4070  07F0  2FF6               	goto	l4317
  4071  07F1  09E1               	comf	___awdiv@quotient,f
  4072  07F2  09E2               	comf	___awdiv@quotient+1,f
  4073  07F3  0AE1               	incf	___awdiv@quotient,f
  4074  07F4  1903               	skipnz
  4075  07F5  0AE2               	incf	___awdiv@quotient+1,f
  4076  07F6                     l4317:	
  4077  07F6  0862               	movf	___awdiv@quotient+1,w
  4078  07F7  01DC               	clrf	?___awdiv+1
  4079  07F8  07DC               	addwf	?___awdiv+1,f
  4080  07F9  0861               	movf	___awdiv@quotient,w
  4081  07FA  01DB               	clrf	?___awdiv
  4082  07FB  07DB               	addwf	?___awdiv,f
  4083  07FC  0008               	return
  4084  07FD                     __end_of___awdiv:	
  4085                           
  4086                           	psect	text16
  4087  0B80                     __ptext16:	
  4088 ;; *************** function _Temp_Initialization *****************
  4089 ;; Defined at:
  4090 ;;		line 9 in file "../src/OverTemperature_B1.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;		None
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;		None               void
  4097 ;; Registers used:
  4098 ;;		status,2, status,0, pclath, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4104 ;;      Params:         0       0       0       0
  4105 ;;      Locals:         0       0       0       0
  4106 ;;      Temps:          0       0       0       0
  4107 ;;      Totals:         0       0       0       0
  4108 ;;Total ram usage:        0 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    3
  4111 ;; This function calls:
  4112 ;;		_setTemp_Initialization
  4113 ;; This function is called by:
  4114 ;;		_main
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           
  4119                           ;psect for function _Temp_Initialization
  4120  0B80                     _Temp_Initialization:	
  4121                           
  4122                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  4123                           
  4124                           ;incstack = 0
  4125                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4126  0B80  158A  2378         	fcall	_setTemp_Initialization
  4127  0B82  0008               	return
  4128  0B83                     __end_of_Temp_Initialization:	
  4129                           
  4130                           	psect	text17
  4131  0B78                     __ptext17:	
  4132 ;; *************** function _setTemp_Initialization *****************
  4133 ;; Defined at:
  4134 ;;		line 46 in file "../src/OverTemperature_B1.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;		None
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;		None
  4139 ;; Return value:  Size  Location     Type
  4140 ;;		None               void
  4141 ;; Registers used:
  4142 ;;		None
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4148 ;;      Params:         0       0       0       0
  4149 ;;      Locals:         0       0       0       0
  4150 ;;      Temps:          0       0       0       0
  4151 ;;      Totals:         0       0       0       0
  4152 ;;Total ram usage:        0 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    2
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_Temp_Initialization
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           
  4163                           ;psect for function _setTemp_Initialization
  4164  0B78                     _setTemp_Initialization:	
  4165                           
  4166                           ;incstack = 0
  4167                           ; Regs used in _setTemp_Initialization: []
  4168  0B78  0008               	return
  4169  0B79                     __end_of_setTemp_Initialization:	
  4170                           
  4171                           	psect	text18
  4172  0B7D                     __ptext18:	
  4173 ;; *************** function _SYSC_Main *****************
  4174 ;; Defined at:
  4175 ;;		line 17 in file "../src/SYSC_B1.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;		None
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;		None
  4180 ;; Return value:  Size  Location     Type
  4181 ;;		None               void
  4182 ;; Registers used:
  4183 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4189 ;;      Params:         0       0       0       0
  4190 ;;      Locals:         0       0       0       0
  4191 ;;      Temps:          0       0       0       0
  4192 ;;      Totals:         0       0       0       0
  4193 ;;Total ram usage:        0 bytes
  4194 ;; Hardware stack levels used:    1
  4195 ;; Hardware stack levels required when called:    5
  4196 ;; This function calls:
  4197 ;;		_setSYSC_Main
  4198 ;; This function is called by:
  4199 ;;		_main
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           
  4204                           ;psect for function _SYSC_Main
  4205  0B7D                     _SYSC_Main:	
  4206                           
  4207                           ;SYSC_B1.c: 19: setSYSC_Main();
  4208                           
  4209                           ;incstack = 0
  4210                           ; Regs used in _SYSC_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4211  0B7D  158A  2756         	fcall	_setSYSC_Main
  4212  0B7F  0008               	return
  4213  0B80                     __end_of_SYSC_Main:	
  4214                           
  4215                           	psect	text19
  4216  0F56                     __ptext19:	
  4217 ;; *************** function _setSYSC_Main *****************
  4218 ;; Defined at:
  4219 ;;		line 23 in file "../src/SYSC_B1.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;		None
  4222 ;; Auto vars:     Size  Location     Type
  4223 ;;		None
  4224 ;; Return value:  Size  Location     Type
  4225 ;;		None               void
  4226 ;; Registers used:
  4227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4228 ;; Tracked objects:
  4229 ;;		On entry : 0/0
  4230 ;;		On exit  : 0/0
  4231 ;;		Unchanged: 0/0
  4232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4233 ;;      Params:         0       0       0       0
  4234 ;;      Locals:         0       0       0       0
  4235 ;;      Temps:          0       1       0       0
  4236 ;;      Totals:         0       1       0       0
  4237 ;;Total ram usage:        1 bytes
  4238 ;; Hardware stack levels used:    1
  4239 ;; Hardware stack levels required when called:    4
  4240 ;; This function calls:
  4241 ;;		_getMain_All_Error_Status
  4242 ;;		_setLED
  4243 ;; This function is called by:
  4244 ;;		_SYSC_Main
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           
  4249                           ;psect for function _setSYSC_Main
  4250  0F56                     _setSYSC_Main:	
  4251                           
  4252                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4253                           
  4254                           ;incstack = 0
  4255                           ; Regs used in _setSYSC_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4256  0F56  1283               	bcf	3,5	;RP0=0, select bank0
  4257  0F57  1303               	bcf	3,6	;RP1=0, select bank0
  4258  0F58  1C28               	btfss	_SYSC,0
  4259  0F59  0008               	return
  4260                           
  4261                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4262  0F5A  18A8               	btfsc	_SYSC,1
  4263  0F5B  2F74               	goto	l4481
  4264                           
  4265                           ;SYSC_B1.c: 27: SYSC.Timer++;
  4266  0F5C  3001               	movlw	1
  4267  0F5D  07A9               	addwf	_SYSC+1,f
  4268  0F5E  1803               	skipnc
  4269  0F5F  0AAA               	incf	_SYSC+2,f
  4270  0F60  3000               	movlw	0
  4271  0F61  07AA               	addwf	_SYSC+2,f
  4272                           
  4273                           ;SYSC_B1.c: 28: if (SYSC.Timer >= 16)
  4274  0F62  3000               	movlw	0
  4275  0F63  022A               	subwf	_SYSC+2,w
  4276  0F64  3010               	movlw	16
  4277  0F65  1903               	skipnz
  4278  0F66  0229               	subwf	_SYSC+1,w
  4279  0F67  1C03               	skipc
  4280  0F68  0008               	return
  4281                           
  4282                           ;SYSC_B1.c: 29: {
  4283                           ;SYSC_B1.c: 30: SYSC.Timer = 0;
  4284  0F69  01A9               	clrf	_SYSC+1
  4285  0F6A  01AA               	clrf	_SYSC+2
  4286                           
  4287                           ;SYSC_B1.c: 31: SYSC.ERROR = 1;
  4288  0F6B  14A8               	bsf	_SYSC,1
  4289                           
  4290                           ;SYSC_B1.c: 33: setLED(1, 111);
  4291  0F6C  306F               	movlw	111
  4292  0F6D  00E3               	movwf	??_setSYSC_Main
  4293  0F6E  0863               	movf	??_setSYSC_Main,w
  4294  0F6F  00F6               	movwf	setLED@command
  4295  0F70  3001               	movlw	1
  4296  0F71  118A  2517         	fcall	_setLED
  4297                           
  4298                           ;SYSC_B1.c: 35: }
  4299                           ;SYSC_B1.c: 36: } else {
  4300  0F73  0008               	return
  4301  0F74                     l4481:	
  4302                           
  4303                           ;SYSC_B1.c: 37: if (getMain_All_Error_Status(1) == 0) {
  4304  0F74  3001               	movlw	1
  4305  0F75  158A  27A6  158A   	fcall	_getMain_All_Error_Status
  4306  0F78  3800               	iorlw	0
  4307  0F79  1D03               	skipz
  4308  0F7A  0008               	return
  4309                           
  4310                           ;SYSC_B1.c: 38: SYSC.Timer++;
  4311  0F7B  3001               	movlw	1
  4312  0F7C  1283               	bcf	3,5	;RP0=0, select bank0
  4313  0F7D  1303               	bcf	3,6	;RP1=0, select bank0
  4314  0F7E  07A9               	addwf	_SYSC+1,f
  4315  0F7F  1803               	skipnc
  4316  0F80  0AAA               	incf	_SYSC+2,f
  4317  0F81  3000               	movlw	0
  4318  0F82  07AA               	addwf	_SYSC+2,f
  4319                           
  4320                           ;SYSC_B1.c: 39: if (SYSC.Timer == 50) {
  4321  0F83  3032               	movlw	50
  4322  0F84  0629               	xorwf	_SYSC+1,w
  4323  0F85  042A               	iorwf	_SYSC+2,w
  4324  0F86  1D03               	skipz
  4325  0F87  2F8D               	goto	l4487
  4326                           
  4327                           ;SYSC_B1.c: 40: SYSC.Timer = 0;
  4328  0F88  01A9               	clrf	_SYSC+1
  4329  0F89  01AA               	clrf	_SYSC+2
  4330                           
  4331                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4332  0F8A  01AB               	clrf	_SYSC+3
  4333  0F8B  01AC               	clrf	_SYSC+4
  4334                           
  4335                           ;SYSC_B1.c: 42: } else {
  4336  0F8C  0008               	return
  4337  0F8D                     l4487:	
  4338                           
  4339                           ;SYSC_B1.c: 43: SYSC.Counter++;
  4340  0F8D  3001               	movlw	1
  4341  0F8E  07AB               	addwf	_SYSC+3,f
  4342  0F8F  1803               	skipnc
  4343  0F90  0AAC               	incf	_SYSC+4,f
  4344  0F91  3000               	movlw	0
  4345  0F92  07AC               	addwf	_SYSC+4,f
  4346                           
  4347                           ;SYSC_B1.c: 44: if (SYSC.Counter == 1000) {
  4348  0F93  3003               	movlw	3
  4349  0F94  062C               	xorwf	_SYSC+4,w
  4350  0F95  1D03               	skipz
  4351  0F96  2F99               	goto	u5365
  4352  0F97  30E8               	movlw	232
  4353  0F98  062B               	xorwf	_SYSC+3,w
  4354  0F99                     u5365:	
  4355  0F99  1D03               	skipz
  4356  0F9A  0008               	return
  4357                           
  4358                           ;SYSC_B1.c: 45: SYSC.Counter = 0;
  4359  0F9B  01AB               	clrf	_SYSC+3
  4360  0F9C  01AC               	clrf	_SYSC+4
  4361                           
  4362                           ;SYSC_B1.c: 46: SYSC.ERROR = 0;
  4363  0F9D  10A8               	bcf	_SYSC,1
  4364                           
  4365                           ;SYSC_B1.c: 48: setLED(1, 110);
  4366  0F9E  306E               	movlw	110
  4367  0F9F  00E3               	movwf	??_setSYSC_Main
  4368  0FA0  0863               	movf	??_setSYSC_Main,w
  4369  0FA1  00F6               	movwf	setLED@command
  4370  0FA2  3001               	movlw	1
  4371  0FA3  118A  2517         	fcall	_setLED
  4372  0FA5  0008               	return
  4373  0FA6                     __end_of_setSYSC_Main:	
  4374                           
  4375                           	psect	text20
  4376  0B7A                     __ptext20:	
  4377 ;; *************** function _SYSC_Initialization *****************
  4378 ;; Defined at:
  4379 ;;		line 7 in file "../src/SYSC_B1.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;		None
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;		None               void
  4386 ;; Registers used:
  4387 ;;		status,2, status,0, pclath, cstack
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4393 ;;      Params:         0       0       0       0
  4394 ;;      Locals:         0       0       0       0
  4395 ;;      Temps:          0       0       0       0
  4396 ;;      Totals:         0       0       0       0
  4397 ;;Total ram usage:        0 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    3
  4400 ;; This function calls:
  4401 ;;		_setSYSC_Initialization
  4402 ;; This function is called by:
  4403 ;;		_main
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           
  4408                           ;psect for function _SYSC_Initialization
  4409  0B7A                     _SYSC_Initialization:	
  4410                           
  4411                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4415  0B7A  158A  238B         	fcall	_setSYSC_Initialization
  4416  0B7C  0008               	return
  4417  0B7D                     __end_of_SYSC_Initialization:	
  4418                           
  4419                           	psect	text21
  4420  0B8B                     __ptext21:	
  4421 ;; *************** function _setSYSC_Initialization *****************
  4422 ;; Defined at:
  4423 ;;		line 13 in file "../src/SYSC_B1.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;		None
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;		None
  4428 ;; Return value:  Size  Location     Type
  4429 ;;		None               void
  4430 ;; Registers used:
  4431 ;;		None
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4437 ;;      Params:         0       0       0       0
  4438 ;;      Locals:         0       0       0       0
  4439 ;;      Temps:          0       0       0       0
  4440 ;;      Totals:         0       0       0       0
  4441 ;;Total ram usage:        0 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; Hardware stack levels required when called:    2
  4444 ;; This function calls:
  4445 ;;		Nothing
  4446 ;; This function is called by:
  4447 ;;		_SYSC_Initialization
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           
  4452                           ;psect for function _setSYSC_Initialization
  4453  0B8B                     _setSYSC_Initialization:	
  4454                           
  4455                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4456                           
  4457                           ;incstack = 0
  4458                           ; Regs used in _setSYSC_Initialization: []
  4459  0B8B  1283               	bcf	3,5	;RP0=0, select bank0
  4460  0B8C  1303               	bcf	3,6	;RP1=0, select bank0
  4461  0B8D  1428               	bsf	_SYSC,0
  4462  0B8E  0008               	return
  4463  0B8F                     __end_of_setSYSC_Initialization:	
  4464                           
  4465                           	psect	text22
  4466  0025                     __ptext22:	
  4467 ;; *************** function _PIR_Main *****************
  4468 ;; Defined at:
  4469 ;;		line 14 in file "../src/PIR_B1.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;		None
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  error           1   16[BANK0 ] unsigned char 
  4474 ;; Return value:  Size  Location     Type
  4475 ;;		None               void
  4476 ;; Registers used:
  4477 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4483 ;;      Params:         0       0       0       0
  4484 ;;      Locals:         0       3       0       0
  4485 ;;      Temps:          0       5       0       0
  4486 ;;      Totals:         0       8       0       0
  4487 ;;Total ram usage:        8 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    5
  4490 ;; This function calls:
  4491 ;;		_getLights_Status
  4492 ;;		_getMain_All_Error_Status
  4493 ;;		_setLED
  4494 ;;		_setLights_Trigger
  4495 ;;		_setMain_Exception
  4496 ;; This function is called by:
  4497 ;;		_main
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           
  4502                           ;psect for function _PIR_Main
  4503  0025                     _PIR_Main:	
  4504                           
  4505                           ;PIR_B1.c: 15: char error = getMain_All_Error_Status(0);
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4509  0025  3000               	movlw	0
  4510  0026  158A  27A6  118A   	fcall	_getMain_All_Error_Status
  4511  0029  1283               	bcf	3,5	;RP0=0, select bank0
  4512  002A  1303               	bcf	3,6	;RP1=0, select bank0
  4513  002B  00E4               	movwf	??_PIR_Main
  4514  002C  0864               	movf	??_PIR_Main,w
  4515  002D  00EB               	movwf	PIR_Main@error
  4516                           
  4517                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  4518  002E  1683               	bsf	3,5	;RP0=1, select bank1
  4519  002F  1303               	bcf	3,6	;RP1=0, select bank1
  4520  0030  1C20               	btfss	__PIR^(0+128),0
  4521  0031  29EC               	goto	l861
  4522                           
  4523                           ;PIR_B1.c: 18: if (error == 0) {
  4524  0032  1283               	bcf	3,5	;RP0=0, select bank0
  4525  0033  1303               	bcf	3,6	;RP1=0, select bank0
  4526  0034  08EB               	movf	PIR_Main@error,f
  4527  0035  1D03               	skipz
  4528  0036  284D               	goto	l862
  4529                           
  4530                           ;PIR_B1.c: 20: if (_PIR.Detect == 0) {
  4531  0037  1683               	bsf	3,5	;RP0=1, select bank1
  4532  0038  1303               	bcf	3,6	;RP1=0, select bank1
  4533  0039  1A20               	btfsc	__PIR^(0+128),4
  4534  003A  287B               	goto	l4939
  4535                           
  4536                           ;PIR_B1.c: 21: _PIR.Detect = 1;
  4537  003B  1620               	bsf	__PIR^(0+128),4
  4538                           
  4539                           ;PIR_B1.c: 22: _PIR.Available = 1;
  4540  003C  17A0               	bsf	__PIR^(0+128),7
  4541                           
  4542                           ;PIR_B1.c: 23: setLED(1, 0);
  4543  003D  01F6               	clrf	setLED@command
  4544  003E  3001               	movlw	1
  4545  003F  118A  2517  118A   	fcall	_setLED
  4546                           
  4547                           ;PIR_B1.c: 24: if (_PIR.OK == 0) {
  4548  0042  1683               	bsf	3,5	;RP0=1, select bank1
  4549  0043  1303               	bcf	3,6	;RP1=0, select bank1
  4550  0044  19A0               	btfsc	__PIR^(0+128),3
  4551  0045  287B               	goto	l4939
  4552                           
  4553                           ;PIR_B1.c: 25: setLED(2, 1);
  4554  0046  01F6               	clrf	setLED@command
  4555  0047  0AF6               	incf	setLED@command,f
  4556  0048  3002               	movlw	2
  4557  0049  118A  2517  118A   	fcall	_setLED
  4558                           
  4559                           ;PIR_B1.c: 26: }
  4560                           ;PIR_B1.c: 27: }
  4561                           ;PIR_B1.c: 28: } else {
  4562  004C  287B               	goto	l4939
  4563  004D                     l862:	
  4564                           
  4565                           ;PIR_B1.c: 29: if (_PIR.Detect == 1) {
  4566  004D  1683               	bsf	3,5	;RP0=1, select bank1
  4567  004E  1303               	bcf	3,6	;RP1=0, select bank1
  4568  004F  1E20               	btfss	__PIR^(0+128),4
  4569  0050  287B               	goto	l4939
  4570                           
  4571                           ;PIR_B1.c: 30: setMain_Exception(error);
  4572  0051  1283               	bcf	3,5	;RP0=0, select bank0
  4573  0052  1303               	bcf	3,6	;RP1=0, select bank0
  4574  0053  086B               	movf	PIR_Main@error,w
  4575  0054  158A  266B  118A   	fcall	_setMain_Exception
  4576                           
  4577                           ;PIR_B1.c: 32: _PIR.Detect = 0;
  4578  0057  1683               	bsf	3,5	;RP0=1, select bank1
  4579  0058  1303               	bcf	3,6	;RP1=0, select bank1
  4580  0059  1220               	bcf	__PIR^(0+128),4
  4581                           
  4582                           ;PIR_B1.c: 33: _PIR.Available = 0;
  4583  005A  13A0               	bcf	__PIR^(0+128),7
  4584                           
  4585                           ;PIR_B1.c: 34: _PIR.Status = 0;
  4586  005B  1320               	bcf	__PIR^(0+128),6
  4587                           
  4588                           ;PIR_B1.c: 37: _PIR.Time = 0;
  4589  005C  01A5               	clrf	(__PIR^(0+128)+5)
  4590                           
  4591                           ;PIR_B1.c: 38: _PIR.RangeTime1 = 0;
  4592  005D  01CA               	clrf	(__PIR^(0+128)+42)
  4593                           
  4594                           ;PIR_B1.c: 39: _PIR.RangeValue = 15;
  4595  005E  300F               	movlw	15
  4596  005F  1283               	bcf	3,5	;RP0=0, select bank0
  4597  0060  1303               	bcf	3,6	;RP1=0, select bank0
  4598  0061  00E4               	movwf	??_PIR_Main
  4599  0062  0864               	movf	??_PIR_Main,w
  4600  0063  1683               	bsf	3,5	;RP0=1, select bank1
  4601  0064  1303               	bcf	3,6	;RP1=0, select bank1
  4602  0065  00CC               	movwf	(__PIR^(0+128)+44)
  4603                           
  4604                           ;PIR_B1.c: 40: _PIR.RangeCount = 0;
  4605  0066  01CB               	clrf	(__PIR^(0+128)+43)
  4606                           
  4607                           ;PIR_B1.c: 42: setLED(1, 1);
  4608  0067  01F6               	clrf	setLED@command
  4609  0068  0AF6               	incf	setLED@command,f
  4610  0069  3001               	movlw	1
  4611  006A  118A  2517  118A   	fcall	_setLED
  4612                           
  4613                           ;PIR_B1.c: 43: setLED(2, 0);
  4614  006D  01F6               	clrf	setLED@command
  4615  006E  3002               	movlw	2
  4616  006F  118A  2517  118A   	fcall	_setLED
  4617                           
  4618                           ;PIR_B1.c: 45: if (_PIR.OK == 1) {
  4619  0072  1683               	bsf	3,5	;RP0=1, select bank1
  4620  0073  1303               	bcf	3,6	;RP1=0, select bank1
  4621  0074  1DA0               	btfss	__PIR^(0+128),3
  4622  0075  2878               	goto	l867
  4623                           
  4624                           ;PIR_B1.c: 46: _PIR.Count = 0;
  4625  0076  01C1               	clrf	(__PIR^(0+128)+33)
  4626  0077  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4627  0078                     l867:	
  4628                           
  4629                           ;PIR_B1.c: 47: }
  4630                           ;PIR_B1.c: 48: _PIR.CloseTimeSeconds = 0;
  4631  0078  01C6               	clrf	(__PIR^(0+128)+38)
  4632                           
  4633                           ;PIR_B1.c: 49: _PIR.CloseTimeMinutes = 0;
  4634  0079  01C4               	clrf	(__PIR^(0+128)+36)
  4635  007A  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4636  007B                     l4939:	
  4637                           
  4638                           ;PIR_B1.c: 50: }
  4639                           ;PIR_B1.c: 51: }
  4640                           ;PIR_B1.c: 53: if (_PIR.ADtoGO == 0) {
  4641  007B  1683               	bsf	3,5	;RP0=1, select bank1
  4642  007C  1303               	bcf	3,6	;RP1=0, select bank1
  4643  007D  18A0               	btfsc	__PIR^(0+128),1
  4644  007E  288E               	goto	l868
  4645                           
  4646                           ;PIR_B1.c: 54: _PIR.Time++;
  4647  007F  3001               	movlw	1
  4648  0080  1283               	bcf	3,5	;RP0=0, select bank0
  4649  0081  1303               	bcf	3,6	;RP1=0, select bank0
  4650  0082  00E4               	movwf	??_PIR_Main
  4651  0083  0864               	movf	??_PIR_Main,w
  4652  0084  1683               	bsf	3,5	;RP0=1, select bank1
  4653  0085  1303               	bcf	3,6	;RP1=0, select bank1
  4654  0086  07A5               	addwf	(__PIR^(0+128)+5),f
  4655                           
  4656                           ;PIR_B1.c: 55: if (_PIR.Time == 10) {
  4657  0087  0825               	movf	(__PIR^(0+128)+5),w
  4658  0088  3A0A               	xorlw	10
  4659  0089  1D03               	skipz
  4660  008A  29A4               	goto	l5023
  4661                           
  4662                           ;PIR_B1.c: 56: _PIR.Time = 0;
  4663  008B  01A5               	clrf	(__PIR^(0+128)+5)
  4664                           
  4665                           ;PIR_B1.c: 57: _PIR.ADtoGO = 1;
  4666  008C  14A0               	bsf	__PIR^(0+128),1
  4667                           
  4668                           ;PIR_B1.c: 58: }
  4669                           ;PIR_B1.c: 59: } else {
  4670  008D  29A4               	goto	l5023
  4671  008E                     l868:	
  4672                           
  4673                           ;PIR_B1.c: 60: if (_PIR.GO == 1) {
  4674  008E  1D20               	btfss	__PIR^(0+128),2
  4675  008F  29A4               	goto	l5023
  4676                           
  4677                           ;PIR_B1.c: 61: _PIR.GO = 0;
  4678  0090  1120               	bcf	__PIR^(0+128),2
  4679                           
  4680                           ;PIR_B1.c: 62: if (_PIR.Available == 1) {
  4681  0091  1BA0               	btfsc	__PIR^(0+128),7
  4682                           
  4683                           ;PIR_B1.c: 63: if (_PIR.OK == 1) {
  4684  0092  1DA0               	btfss	__PIR^(0+128),3
  4685  0093  29A4               	goto	l5023
  4686                           
  4687                           ;PIR_B1.c: 65: _PIR.Time++;
  4688  0094  3001               	movlw	1
  4689  0095  1283               	bcf	3,5	;RP0=0, select bank0
  4690  0096  1303               	bcf	3,6	;RP1=0, select bank0
  4691  0097  00E4               	movwf	??_PIR_Main
  4692  0098  0864               	movf	??_PIR_Main,w
  4693  0099  1683               	bsf	3,5	;RP0=1, select bank1
  4694  009A  1303               	bcf	3,6	;RP1=0, select bank1
  4695  009B  07A5               	addwf	(__PIR^(0+128)+5),f
  4696                           
  4697                           ;PIR_B1.c: 66: if (_PIR.Time == 60) {
  4698  009C  0825               	movf	(__PIR^(0+128)+5),w
  4699  009D  3A3C               	xorlw	60
  4700  009E  1D03               	skipz
  4701  009F  28D4               	goto	l4989
  4702                           
  4703                           ;PIR_B1.c: 67: _PIR.Time = 0;
  4704  00A0  01A5               	clrf	(__PIR^(0+128)+5)
  4705                           
  4706                           ;PIR_B1.c: 68: if (_PIR.RangeCount >= 90) {
  4707  00A1  305A               	movlw	90
  4708  00A2  024B               	subwf	(__PIR^(0+128)+43),w
  4709  00A3  1C03               	skipc
  4710  00A4  28B0               	goto	l4971
  4711                           
  4712                           ;PIR_B1.c: 69: _PIR.RangeTime1 = 0;
  4713  00A5  01CA               	clrf	(__PIR^(0+128)+42)
  4714                           
  4715                           ;PIR_B1.c: 71: if (_PIR.RangeValue == 15) {
  4716  00A6  084C               	movf	(__PIR^(0+128)+44),w
  4717  00A7  3A0F               	xorlw	15
  4718  00A8  1903               	btfsc	3,2
  4719  00A9  28C5               	goto	L14
  4720                           
  4721                           ;PIR_B1.c: 73: } else if (_PIR.RangeValue == 25) {
  4722                           
  4723                           ;PIR_B1.c: 72: _PIR.RangeValue = 25;
  4724  00AA  084C               	movf	(__PIR^(0+128)+44),w
  4725  00AB  3A19               	xorlw	25
  4726  00AC  1D03               	skipz
  4727  00AD  28D3               	goto	l4987
  4728                           
  4729                           ;PIR_B1.c: 74: _PIR.RangeValue = 35;
  4730  00AE  3023               	movlw	35
  4731  00AF  28CC               	goto	L10
  4732  00B0                     l4971:	
  4733                           ;PIR_B1.c: 75: }
  4734                           ;PIR_B1.c: 76: } else if (_PIR.RangeCount <= 10) {
  4735                           
  4736  00B0  300B               	movlw	11
  4737  00B1  024B               	subwf	(__PIR^(0+128)+43),w
  4738  00B2  1803               	skipnc
  4739  00B3  28D3               	goto	l4987
  4740                           
  4741                           ;PIR_B1.c: 77: _PIR.RangeTime1++;
  4742  00B4  3001               	movlw	1
  4743  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  4744  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  4745  00B7  00E4               	movwf	??_PIR_Main
  4746  00B8  0864               	movf	??_PIR_Main,w
  4747  00B9  1683               	bsf	3,5	;RP0=1, select bank1
  4748  00BA  1303               	bcf	3,6	;RP1=0, select bank1
  4749  00BB  07CA               	addwf	(__PIR^(0+128)+42),f
  4750                           
  4751                           ;PIR_B1.c: 78: if (_PIR.RangeTime1 == 2) {
  4752  00BC  084A               	movf	(__PIR^(0+128)+42),w
  4753  00BD  3A02               	xorlw	2
  4754  00BE  1D03               	skipz
  4755  00BF  28D3               	goto	l4987
  4756                           
  4757                           ;PIR_B1.c: 79: _PIR.RangeTime1 = 0;
  4758  00C0  01CA               	clrf	(__PIR^(0+128)+42)
  4759                           
  4760                           ;PIR_B1.c: 81: if (_PIR.RangeValue == 35) {
  4761  00C1  084C               	movf	(__PIR^(0+128)+44),w
  4762  00C2  3A23               	xorlw	35
  4763  00C3  1D03               	skipz
  4764  00C4  28C7               	goto	l4983
  4765  00C5                     L14:	
  4766                           
  4767                           ;PIR_B1.c: 82: _PIR.RangeValue = 25;
  4768  00C5  3019               	movlw	25
  4769  00C6  28CC               	goto	L10
  4770  00C7                     l4983:	
  4771                           ;PIR_B1.c: 83: } else if (_PIR.RangeValue == 25) {
  4772                           
  4773  00C7  084C               	movf	(__PIR^(0+128)+44),w
  4774  00C8  3A19               	xorlw	25
  4775  00C9  1D03               	skipz
  4776  00CA  28D3               	goto	l4987
  4777                           
  4778                           ;PIR_B1.c: 84: _PIR.RangeValue = 15;
  4779  00CB  300F               	movlw	15
  4780  00CC                     L10:	
  4781  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  4782  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  4783  00CE  00E4               	movwf	??_PIR_Main
  4784  00CF  0864               	movf	??_PIR_Main,w
  4785  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  4786  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  4787  00D2  00CC               	movwf	(__PIR^(0+128)+44)
  4788  00D3                     l4987:	
  4789                           
  4790                           ;PIR_B1.c: 85: }
  4791                           ;PIR_B1.c: 86: }
  4792                           ;PIR_B1.c: 87: }
  4793                           ;PIR_B1.c: 88: _PIR.RangeCount = 0;
  4794  00D3  01CB               	clrf	(__PIR^(0+128)+43)
  4795  00D4                     l4989:	
  4796                           
  4797                           ;PIR_B1.c: 89: }
  4798                           ;PIR_B1.c: 92: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.Of
      +                          fset)))
  4799                           ;PIR_B1.c: 93: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + (_PIR.RangeValue + _PIR.Off
      +                          set)))) {
  4800  00D4  084C               	movf	(__PIR^(0+128)+44),w
  4801  00D5  074E               	addwf	(__PIR^(0+128)+46),w
  4802  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  4803  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  4804  00D8  00E4               	movwf	??_PIR_Main
  4805  00D9  01E5               	clrf	??_PIR_Main+1
  4806  00DA  0DE5               	rlf	??_PIR_Main+1,f
  4807  00DB  09E4               	comf	??_PIR_Main,f
  4808  00DC  09E5               	comf	??_PIR_Main+1,f
  4809  00DD  0AE4               	incf	??_PIR_Main,f
  4810  00DE  1903               	skipnz
  4811  00DF  0AE5               	incf	??_PIR_Main+1,f
  4812  00E0  1683               	bsf	3,5	;RP0=1, select bank1
  4813  00E1  1303               	bcf	3,6	;RP1=0, select bank1
  4814  00E2  0826               	movf	(__PIR^(0+128)+6),w
  4815  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  4816  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  4817  00E5  0764               	addwf	??_PIR_Main,w
  4818  00E6  00E6               	movwf	??_PIR_Main+2
  4819  00E7  0865               	movf	??_PIR_Main+1,w
  4820  00E8  1803               	skipnc
  4821  00E9  0A65               	incf	??_PIR_Main+1,w
  4822  00EA  00E7               	movwf	??_PIR_Main+3
  4823  00EB  0867               	movf	??_PIR_Main+3,w
  4824  00EC  3A80               	xorlw	128
  4825  00ED  3C80               	sublw	128
  4826  00EE  1D03               	skipz
  4827  00EF  28F4               	goto	u6345
  4828  00F0  0866               	movf	??_PIR_Main+2,w
  4829  00F1  1683               	bsf	3,5	;RP0=1, select bank1
  4830  00F2  1303               	bcf	3,6	;RP1=0, select bank1
  4831  00F3  0221               	subwf	(__PIR^(0+128)+1),w
  4832  00F4                     u6345:	
  4833  00F4  1C03               	skipc
  4834  00F5  2920               	goto	l4999
  4835  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  4836  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  4837  00F8  084C               	movf	(__PIR^(0+128)+44),w
  4838  00F9  074E               	addwf	(__PIR^(0+128)+46),w
  4839  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  4840  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  4841  00FC  00E4               	movwf	??_PIR_Main
  4842  00FD  01E5               	clrf	??_PIR_Main+1
  4843  00FE  0DE5               	rlf	??_PIR_Main+1,f
  4844  00FF  1683               	bsf	3,5	;RP0=1, select bank1
  4845  0100  1303               	bcf	3,6	;RP1=0, select bank1
  4846  0101  0826               	movf	(__PIR^(0+128)+6),w
  4847  0102  1283               	bcf	3,5	;RP0=0, select bank0
  4848  0103  1303               	bcf	3,6	;RP1=0, select bank0
  4849  0104  0764               	addwf	??_PIR_Main,w
  4850  0105  00E6               	movwf	??_PIR_Main+2
  4851  0106  3000               	movlw	0
  4852  0107  1803               	skipnc
  4853  0108  3001               	movlw	1
  4854  0109  0765               	addwf	??_PIR_Main+1,w
  4855  010A  00E7               	movwf	??_PIR_Main+3
  4856  010B  0867               	movf	??_PIR_Main+3,w
  4857  010C  3A80               	xorlw	128
  4858  010D  00E8               	movwf	??_PIR_Main+4
  4859  010E  3080               	movlw	128
  4860  010F  0268               	subwf	??_PIR_Main+4,w
  4861  0110  1D03               	skipz
  4862  0111  2918               	goto	u6355
  4863  0112  1683               	bsf	3,5	;RP0=1, select bank1
  4864  0113  1303               	bcf	3,6	;RP1=0, select bank1
  4865  0114  0821               	movf	(__PIR^(0+128)+1),w
  4866  0115  1283               	bcf	3,5	;RP0=0, select bank0
  4867  0116  1303               	bcf	3,6	;RP1=0, select bank0
  4868  0117  0266               	subwf	??_PIR_Main+2,w
  4869  0118                     u6355:	
  4870  0118  1C03               	skipc
  4871  0119  2920               	goto	l4999
  4872                           
  4873                           ;PIR_B1.c: 94: _PIR.Count = 0;
  4874  011A  1683               	bsf	3,5	;RP0=1, select bank1
  4875  011B  1303               	bcf	3,6	;RP1=0, select bank1
  4876  011C  01C1               	clrf	(__PIR^(0+128)+33)
  4877  011D  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4878                           
  4879                           ;PIR_B1.c: 95: setLED(1, 0);
  4880  011E  01F6               	clrf	setLED@command
  4881  011F  2993               	goto	L15
  4882  0120                     l4999:	
  4883                           ;PIR_B1.c: 97: } else {
  4884                           
  4885                           ;PIR_B1.c: 96: setLED(2, 0);
  4886                           
  4887                           
  4888                           ;PIR_B1.c: 98: _PIR.RangeCount++;
  4889  0120  3001               	movlw	1
  4890  0121  1283               	bcf	3,5	;RP0=0, select bank0
  4891  0122  1303               	bcf	3,6	;RP1=0, select bank0
  4892  0123  00E4               	movwf	??_PIR_Main
  4893  0124  0864               	movf	??_PIR_Main,w
  4894  0125  1683               	bsf	3,5	;RP0=1, select bank1
  4895  0126  1303               	bcf	3,6	;RP1=0, select bank1
  4896  0127  07CB               	addwf	(__PIR^(0+128)+43),f
  4897                           
  4898                           ;PIR_B1.c: 99: _PIR.Count++;
  4899  0128  3001               	movlw	1
  4900  0129  07C1               	addwf	(__PIR^(0+128)+33),f
  4901  012A  1803               	skipnc
  4902  012B  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4903  012C  3000               	movlw	0
  4904  012D  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4905                           
  4906                           ;PIR_B1.c: 101: _PIR.TriggerValue = _PIR.Status == 1 ? 3 : 2;
  4907  012E  1B20               	btfsc	__PIR^(0+128),6
  4908  012F  2934               	goto	l5007
  4909  0130  3002               	movlw	2
  4910  0131  1283               	bcf	3,5	;RP0=0, select bank0
  4911  0132  1303               	bcf	3,6	;RP1=0, select bank0
  4912  0133  2936               	goto	L11
  4913  0134                     l5007:	
  4914  0134  3003               	movlw	3
  4915  0135  1283               	bcf	3,5	;RP0=0, select bank0
  4916  0136                     L11:	
  4917  0136  00E9               	movwf	_PIR_Main$3308
  4918  0137  3000               	movlw	0
  4919  0138  00EA               	movwf	_PIR_Main$3308+1
  4920  0139  0869               	movf	_PIR_Main$3308,w
  4921  013A  00E4               	movwf	??_PIR_Main
  4922  013B  0864               	movf	??_PIR_Main,w
  4923  013C  1683               	bsf	3,5	;RP0=1, select bank1
  4924  013D  1303               	bcf	3,6	;RP1=0, select bank1
  4925  013E  00C3               	movwf	(__PIR^(0+128)+35)
  4926                           
  4927                           ;PIR_B1.c: 103: if (_PIR.Count == _PIR.TriggerValue) {
  4928  013F  0843               	movf	(__PIR^(0+128)+35),w
  4929  0140  1283               	bcf	3,5	;RP0=0, select bank0
  4930  0141  1303               	bcf	3,6	;RP1=0, select bank0
  4931  0142  00E4               	movwf	??_PIR_Main
  4932  0143  01E5               	clrf	??_PIR_Main+1
  4933  0144  1683               	bsf	3,5	;RP0=1, select bank1
  4934  0145  1303               	bcf	3,6	;RP1=0, select bank1
  4935  0146  0842               	movf	((__PIR+1)^(0+128)+33),w
  4936  0147  1283               	bcf	3,5	;RP0=0, select bank0
  4937  0148  1303               	bcf	3,6	;RP1=0, select bank0
  4938  0149  0665               	xorwf	??_PIR_Main+1,w
  4939  014A  1D03               	skipz
  4940  014B  2952               	goto	u6375
  4941  014C  1683               	bsf	3,5	;RP0=1, select bank1
  4942  014D  1303               	bcf	3,6	;RP1=0, select bank1
  4943  014E  0841               	movf	(__PIR^(0+128)+33),w
  4944  014F  1283               	bcf	3,5	;RP0=0, select bank0
  4945  0150  1303               	bcf	3,6	;RP1=0, select bank0
  4946  0151  0664               	xorwf	??_PIR_Main,w
  4947  0152                     u6375:	
  4948  0152  1D03               	skipz
  4949  0153  29A4               	goto	l5023
  4950                           
  4951                           ;PIR_B1.c: 104: _PIR.Count = 0;
  4952  0154  1683               	bsf	3,5	;RP0=1, select bank1
  4953  0155  1303               	bcf	3,6	;RP1=0, select bank1
  4954  0156  01C1               	clrf	(__PIR^(0+128)+33)
  4955  0157  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4956                           
  4957                           ;PIR_B1.c: 105: _PIR.CloseTimeSeconds = 0;
  4958  0158  01C6               	clrf	(__PIR^(0+128)+38)
  4959                           
  4960                           ;PIR_B1.c: 106: _PIR.CloseTimeMinutes = 0;
  4961  0159  01C4               	clrf	(__PIR^(0+128)+36)
  4962  015A  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4963                           
  4964                           ;PIR_B1.c: 107: _PIR.Status = 1;
  4965  015B  1720               	bsf	__PIR^(0+128),6
  4966                           
  4967                           ;PIR_B1.c: 110: if (getLights_Status(1) == 0) {
  4968  015C  3001               	movlw	1
  4969  015D  158A  245F  118A   	fcall	_getLights_Status
  4970  0160  3800               	iorlw	0
  4971  0161  1D03               	skipz
  4972  0162  2969               	goto	l5017
  4973                           
  4974                           ;PIR_B1.c: 111: setLights_Trigger(1, 1);
  4975  0163  01F6               	clrf	setLights_Trigger@command
  4976  0164  0AF6               	incf	setLights_Trigger@command,f
  4977  0165  3001               	movlw	1
  4978  0166  158A  2538  118A   	fcall	_setLights_Trigger
  4979  0169                     l5017:	
  4980                           
  4981                           ;PIR_B1.c: 112: }
  4982                           ;PIR_B1.c: 115: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))) {
  4983  0169  1683               	bsf	3,5	;RP0=1, select bank1
  4984  016A  1303               	bcf	3,6	;RP1=0, select bank1
  4985  016B  084C               	movf	(__PIR^(0+128)+44),w
  4986  016C  074E               	addwf	(__PIR^(0+128)+46),w
  4987  016D  1283               	bcf	3,5	;RP0=0, select bank0
  4988  016E  1303               	bcf	3,6	;RP1=0, select bank0
  4989  016F  00E4               	movwf	??_PIR_Main
  4990  0170  01E5               	clrf	??_PIR_Main+1
  4991  0171  0DE5               	rlf	??_PIR_Main+1,f
  4992  0172  09E4               	comf	??_PIR_Main,f
  4993  0173  09E5               	comf	??_PIR_Main+1,f
  4994  0174  0AE4               	incf	??_PIR_Main,f
  4995  0175  1903               	skipnz
  4996  0176  0AE5               	incf	??_PIR_Main+1,f
  4997  0177  1683               	bsf	3,5	;RP0=1, select bank1
  4998  0178  1303               	bcf	3,6	;RP1=0, select bank1
  4999  0179  0826               	movf	(__PIR^(0+128)+6),w
  5000  017A  1283               	bcf	3,5	;RP0=0, select bank0
  5001  017B  1303               	bcf	3,6	;RP1=0, select bank0
  5002  017C  0764               	addwf	??_PIR_Main,w
  5003  017D  00E6               	movwf	??_PIR_Main+2
  5004  017E  0865               	movf	??_PIR_Main+1,w
  5005  017F  1803               	skipnc
  5006  0180  0A65               	incf	??_PIR_Main+1,w
  5007  0181  00E7               	movwf	??_PIR_Main+3
  5008  0182  0867               	movf	??_PIR_Main+3,w
  5009  0183  3A80               	xorlw	128
  5010  0184  00E8               	movwf	??_PIR_Main+4
  5011  0185  3080               	movlw	128
  5012  0186  0268               	subwf	??_PIR_Main+4,w
  5013  0187  1D03               	skipz
  5014  0188  298F               	goto	u6395
  5015  0189  1683               	bsf	3,5	;RP0=1, select bank1
  5016  018A  1303               	bcf	3,6	;RP1=0, select bank1
  5017  018B  0821               	movf	(__PIR^(0+128)+1),w
  5018  018C  1283               	bcf	3,5	;RP0=0, select bank0
  5019  018D  1303               	bcf	3,6	;RP1=0, select bank0
  5020  018E  0266               	subwf	??_PIR_Main+2,w
  5021  018F                     u6395:	
  5022  018F  1C03               	skipc
  5023  0190  2999               	goto	l5021
  5024                           
  5025                           ;PIR_B1.c: 116: setLED(1, 1);
  5026  0191  01F6               	clrf	setLED@command
  5027  0192  0AF6               	incf	setLED@command,f
  5028  0193                     L15:	
  5029  0193  3001               	movlw	1
  5030  0194  118A  2517  118A   	fcall	_setLED
  5031                           
  5032                           ;PIR_B1.c: 117: setLED(2, 0);
  5033  0197  01F6               	clrf	setLED@command
  5034  0198  29A0               	goto	L12
  5035  0199                     l5021:	
  5036                           ;PIR_B1.c: 118: } else {
  5037                           
  5038                           
  5039                           ;PIR_B1.c: 119: setLED(1, 0);
  5040  0199  01F6               	clrf	setLED@command
  5041  019A  3001               	movlw	1
  5042  019B  118A  2517  118A   	fcall	_setLED
  5043                           
  5044                           ;PIR_B1.c: 120: setLED(2, 1);
  5045  019E  01F6               	clrf	setLED@command
  5046  019F  0AF6               	incf	setLED@command,f
  5047  01A0                     L12:	
  5048  01A0  3002               	movlw	2
  5049  01A1  118A  2517  118A   	fcall	_setLED
  5050  01A4                     l5023:	
  5051                           
  5052                           ;PIR_B1.c: 121: }
  5053                           ;PIR_B1.c: 122: }
  5054                           ;PIR_B1.c: 123: }
  5055                           ;PIR_B1.c: 124: }
  5056                           ;PIR_B1.c: 125: }
  5057                           ;PIR_B1.c: 126: }
  5058                           ;PIR_B1.c: 127: }
  5059                           ;PIR_B1.c: 128: if (_PIR.OK == 0) {
  5060  01A4  1683               	bsf	3,5	;RP0=1, select bank1
  5061  01A5  1303               	bcf	3,6	;RP1=0, select bank1
  5062  01A6  19A0               	btfsc	__PIR^(0+128),3
  5063  01A7  29BE               	goto	l5033
  5064                           
  5065                           ;PIR_B1.c: 129: _PIR.Count++;
  5066  01A8  3001               	movlw	1
  5067  01A9  07C1               	addwf	(__PIR^(0+128)+33),f
  5068  01AA  1803               	skipnc
  5069  01AB  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  5070  01AC  3000               	movlw	0
  5071  01AD  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  5072                           
  5073                           ;PIR_B1.c: 130: if (_PIR.Count == 3000) {
  5074  01AE  300B               	movlw	11
  5075  01AF  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  5076  01B0  1D03               	skipz
  5077  01B1  29B4               	goto	u6415
  5078  01B2  30B8               	movlw	184
  5079  01B3  0641               	xorwf	(__PIR^(0+128)+33),w
  5080  01B4                     u6415:	
  5081  01B4  1D03               	skipz
  5082  01B5  29BE               	goto	l5033
  5083                           
  5084                           ;PIR_B1.c: 131: _PIR.Count = 0;
  5085  01B6  01C1               	clrf	(__PIR^(0+128)+33)
  5086  01B7  01C2               	clrf	((__PIR+1)^(0+128)+33)
  5087                           
  5088                           ;PIR_B1.c: 132: _PIR.OK = 1;
  5089  01B8  15A0               	bsf	__PIR^(0+128),3
  5090                           
  5091                           ;PIR_B1.c: 133: setLED(2, 0);
  5092  01B9  01F6               	clrf	setLED@command
  5093  01BA  3002               	movlw	2
  5094  01BB  118A  2517  118A   	fcall	_setLED
  5095  01BE                     l5033:	
  5096                           
  5097                           ;PIR_B1.c: 134: }
  5098                           ;PIR_B1.c: 135: }
  5099                           ;PIR_B1.c: 136: if (_PIR.Status == 1) {
  5100  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  5101  01BF  1303               	bcf	3,6	;RP1=0, select bank1
  5102  01C0  1F20               	btfss	__PIR^(0+128),6
  5103  01C1  0008               	return
  5104                           
  5105                           ;PIR_B1.c: 137: _PIR.CloseTimeSeconds++;
  5106  01C2  3001               	movlw	1
  5107  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  5108  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  5109  01C5  00E4               	movwf	??_PIR_Main
  5110  01C6  0864               	movf	??_PIR_Main,w
  5111  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  5112  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  5113  01C9  07C6               	addwf	(__PIR^(0+128)+38),f
  5114                           
  5115                           ;PIR_B1.c: 138: if (_PIR.CloseTimeSeconds == 100) {
  5116  01CA  0846               	movf	(__PIR^(0+128)+38),w
  5117  01CB  3A64               	xorlw	100
  5118  01CC  1D03               	skipz
  5119  01CD  0008               	return
  5120                           
  5121                           ;PIR_B1.c: 139: _PIR.CloseTimeSeconds = 0;
  5122  01CE  01C6               	clrf	(__PIR^(0+128)+38)
  5123                           
  5124                           ;PIR_B1.c: 140: _PIR.CloseTimeMinutes++;
  5125  01CF  3001               	movlw	1
  5126  01D0  07C4               	addwf	(__PIR^(0+128)+36),f
  5127  01D1  1803               	skipnc
  5128  01D2  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  5129  01D3  3000               	movlw	0
  5130  01D4  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  5131                           
  5132                           ;PIR_B1.c: 141: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5133  01D5  0848               	movf	((__PIR+1)^(0+128)+39),w
  5134  01D6  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  5135  01D7  1D03               	skipz
  5136  01D8  29DB               	goto	u6445
  5137  01D9  0847               	movf	(__PIR^(0+128)+39),w
  5138  01DA  0644               	xorwf	(__PIR^(0+128)+36),w
  5139  01DB                     u6445:	
  5140  01DB  1D03               	skipz
  5141  01DC  0008               	return
  5142                           
  5143                           ;PIR_B1.c: 142: _PIR.CloseTimeMinutes = 0;
  5144  01DD  01C4               	clrf	(__PIR^(0+128)+36)
  5145  01DE  01C5               	clrf	((__PIR+1)^(0+128)+36)
  5146                           
  5147                           ;PIR_B1.c: 143: _PIR.Status = 0;
  5148  01DF  1320               	bcf	__PIR^(0+128),6
  5149                           
  5150                           ;PIR_B1.c: 146: if (getLights_Status(1) == 1) {
  5151  01E0  3001               	movlw	1
  5152  01E1  158A  245F  118A   	fcall	_getLights_Status
  5153  01E4  3A01               	xorlw	1
  5154  01E5  1D03               	skipz
  5155  01E6  0008               	return
  5156                           
  5157                           ;PIR_B1.c: 147: setLights_Trigger(1, 0);
  5158  01E7  01F6               	clrf	setLights_Trigger@command
  5159  01E8  3001               	movlw	1
  5160  01E9  158A  2538         	fcall	_setLights_Trigger
  5161                           
  5162                           ;PIR_B1.c: 148: }
  5163                           ;PIR_B1.c: 151: }
  5164                           ;PIR_B1.c: 152: }
  5165                           ;PIR_B1.c: 153: }
  5166                           ;PIR_B1.c: 154: } else {
  5167  01EB  0008               	return
  5168  01EC                     l861:	
  5169                           
  5170                           ;PIR_B1.c: 155: if (myMain.PowerON == 1) {
  5171  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  5172  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  5173  01EE  1C20               	btfss	_myMain,0
  5174  01EF  0008               	return
  5175                           
  5176                           ;PIR_B1.c: 156: _PIR.Enable = 1;
  5177  01F0  1683               	bsf	3,5	;RP0=1, select bank1
  5178  01F1  1303               	bcf	3,6	;RP1=0, select bank1
  5179  01F2  1420               	bsf	__PIR^(0+128),0
  5180  01F3  0008               	return
  5181  01F4                     __end_of_PIR_Main:	
  5182                           
  5183                           	psect	text23
  5184  0E6B                     __ptext23:	
  5185 ;; *************** function _setMain_Exception *****************
  5186 ;; Defined at:
  5187 ;;		line 276 in file "../src/Main_B1.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  command         1    wreg     unsigned char 
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  command         1    8[BANK0 ] unsigned char 
  5192 ;;  status          1    5[BANK0 ] unsigned char 
  5193 ;;  buz             1    4[BANK0 ] unsigned char 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;		None               void
  5196 ;; Registers used:
  5197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5203 ;;      Params:         0       0       0       0
  5204 ;;      Locals:         0       5       0       0
  5205 ;;      Temps:          0       2       0       0
  5206 ;;      Totals:         0       7       0       0
  5207 ;;Total ram usage:        7 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; Hardware stack levels required when called:    4
  5210 ;; This function calls:
  5211 ;;		_getAll_Lights_Line
  5212 ;;		_setLED
  5213 ;;		_setLights_Trigger
  5214 ;; This function is called by:
  5215 ;;		_PIR_Main
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           
  5220                           ;psect for function _setMain_Exception
  5221  0E6B                     _setMain_Exception:	
  5222                           
  5223                           ;incstack = 0
  5224                           ; Regs used in _setMain_Exception: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5225                           ;setMain_Exception@command stored from wreg
  5226  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  5227  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  5228  0E6D  00E3               	movwf	setMain_Exception@command
  5229                           
  5230                           ;Main_B1.c: 277: char status = 0, buz = 0;
  5231  0E6E  01E0               	clrf	setMain_Exception@status
  5232  0E6F  01DF               	clrf	setMain_Exception@buz
  5233                           
  5234                           ;Main_B1.c: 279: status = command == 3 ? getAll_Lights_Line() : 255;
  5235  0E70  0863               	movf	setMain_Exception@command,w
  5236  0E71  3A03               	xorlw	3
  5237  0E72  1903               	skipnz
  5238  0E73  2E78               	goto	l4391
  5239  0E74  30FF               	movlw	255
  5240  0E75  00E1               	movwf	_setMain_Exception$2462
  5241  0E76  3000               	movlw	0
  5242  0E77  2E82               	goto	L16
  5243  0E78                     l4391:	
  5244  0E78  158A  23FA  158A   	fcall	_getAll_Lights_Line
  5245  0E7B  1283               	bcf	3,5	;RP0=0, select bank0
  5246  0E7C  1303               	bcf	3,6	;RP1=0, select bank0
  5247  0E7D  00DD               	movwf	??_setMain_Exception
  5248  0E7E  01DE               	clrf	??_setMain_Exception+1
  5249  0E7F  085D               	movf	??_setMain_Exception,w
  5250  0E80  00E1               	movwf	_setMain_Exception$2462
  5251  0E81  085E               	movf	??_setMain_Exception+1,w
  5252  0E82                     L16:	
  5253  0E82  00E2               	movwf	_setMain_Exception$2462+1
  5254  0E83  0861               	movf	_setMain_Exception$2462,w
  5255  0E84  00DD               	movwf	??_setMain_Exception
  5256  0E85  085D               	movf	??_setMain_Exception,w
  5257  0E86  00E0               	movwf	setMain_Exception@status
  5258                           
  5259                           ;Main_B1.c: 281: if (command == 0) {
  5260  0E87  08E3               	movf	setMain_Exception@command,f
  5261  0E88  1D03               	skipz
  5262  0E89  2E8C               	goto	l4399
  5263                           
  5264                           ;Main_B1.c: 282: setLED(command, 110);
  5265  0E8A  306E               	movlw	110
  5266  0E8B  2E8F               	goto	L17
  5267  0E8C                     l4399:	
  5268                           ;Main_B1.c: 283: } else {
  5269                           
  5270                           
  5271                           ;Main_B1.c: 284: setLED(command, 111);
  5272  0E8C  306F               	movlw	111
  5273  0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  5274  0E8E  1303               	bcf	3,6	;RP1=0, select bank0
  5275  0E8F                     L17:	
  5276  0E8F  00DD               	movwf	??_setMain_Exception
  5277  0E90  085D               	movf	??_setMain_Exception,w
  5278  0E91  00F6               	movwf	setLED@command
  5279  0E92  0863               	movf	setMain_Exception@command,w
  5280  0E93  118A  2517  158A   	fcall	_setLED
  5281                           
  5282                           ;Main_B1.c: 285: }
  5283                           ;Main_B1.c: 287: if (command != 0) {
  5284  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  5285  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  5286  0E98  0863               	movf	setMain_Exception@command,w
  5287  0E99  1903               	btfsc	3,2
  5288  0E9A  0008               	return
  5289                           
  5290                           ;Main_B1.c: 288: setLights_Trigger(1, 0);
  5291  0E9B  01F6               	clrf	setLights_Trigger@command
  5292  0E9C  3001               	movlw	1
  5293  0E9D  158A  2538         	fcall	_setLights_Trigger
  5294  0E9F  1283               	bcf	3,5	;RP0=0, select bank0
  5295  0EA0  1303               	bcf	3,6	;RP1=0, select bank0
  5296  0EA1  0008               	return
  5297  0EA2                     __end_of_setMain_Exception:	
  5298                           
  5299                           	psect	text24
  5300  0D38                     __ptext24:	
  5301 ;; *************** function _setLights_Trigger *****************
  5302 ;; Defined at:
  5303 ;;		line 214 in file "../src/TriacRelay_B1.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  lights          1    wreg     unsigned char 
  5306 ;;  command         1    6[COMMON] unsigned char 
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;  lights          1    1[BANK0 ] unsigned char 
  5309 ;; Return value:  Size  Location     Type
  5310 ;;		None               void
  5311 ;; Registers used:
  5312 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5318 ;;      Params:         1       0       0       0
  5319 ;;      Locals:         0       1       0       0
  5320 ;;      Temps:          0       1       0       0
  5321 ;;      Totals:         1       2       0       0
  5322 ;;Total ram usage:        3 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    3
  5325 ;; This function calls:
  5326 ;;		_LightsPointSelect
  5327 ;; This function is called by:
  5328 ;;		_setMain_Exception
  5329 ;;		_PIR_Main
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           
  5334                           ;psect for function _setLights_Trigger
  5335  0D38                     _setLights_Trigger:	
  5336                           
  5337                           ;incstack = 0
  5338                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5339                           ;setLights_Trigger@lights stored from wreg
  5340  0D38  1283               	bcf	3,5	;RP0=0, select bank0
  5341  0D39  1303               	bcf	3,6	;RP1=0, select bank0
  5342  0D3A  00DC               	movwf	setLights_Trigger@lights
  5343                           
  5344                           ;TriacRelay_B1.c: 215: LightsPointSelect(lights);
  5345  0D3B  085C               	movf	setLights_Trigger@lights,w
  5346  0D3C  158A  23CC         	fcall	_LightsPointSelect
  5347                           
  5348                           ;TriacRelay_B1.c: 216: Lights->Trigger = 1;
  5349  0D3E  0878               	movf	_Lights,w
  5350  0D3F  0084               	movwf	4
  5351  0D40  1383               	bcf	3,7	;select IRP bank0
  5352  0D41  1580               	bsf	0,3
  5353                           
  5354                           ;TriacRelay_B1.c: 217: Lights->Switch = command == 1 ? 1 : 0;
  5355  0D42  0876               	movf	setLights_Trigger@command,w
  5356  0D43  3A01               	xorlw	1
  5357  0D44  3000               	movlw	0
  5358  0D45  1903               	skipnz
  5359  0D46  3001               	movlw	1
  5360  0D47  1283               	bcf	3,5	;RP0=0, select bank0
  5361  0D48  1303               	bcf	3,6	;RP1=0, select bank0
  5362  0D49  00DB               	movwf	??_setLights_Trigger
  5363  0D4A  0878               	movf	_Lights,w
  5364  0D4B  0084               	movwf	4
  5365  0D4C  0EDB               	swapf	??_setLights_Trigger,f
  5366  0D4D  0800               	movf	0,w
  5367  0D4E  065B               	xorwf	??_setLights_Trigger,w
  5368  0D4F  39EF               	andlw	-17
  5369  0D50  065B               	xorwf	??_setLights_Trigger,w
  5370  0D51  0080               	movwf	0
  5371  0D52  0008               	return
  5372  0D53                     __end_of_setLights_Trigger:	
  5373                           
  5374                           	psect	text25
  5375  0BFA                     __ptext25:	
  5376 ;; *************** function _getAll_Lights_Line *****************
  5377 ;; Defined at:
  5378 ;;		line 236 in file "../src/TriacRelay_B1.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  line            1    6[COMMON] unsigned char 
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  1    wreg      unsigned char 
  5385 ;; Registers used:
  5386 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5392 ;;      Params:         0       0       0       0
  5393 ;;      Locals:         1       0       0       0
  5394 ;;      Temps:          0       0       0       0
  5395 ;;      Totals:         1       0       0       0
  5396 ;;Total ram usage:        1 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    3
  5399 ;; This function calls:
  5400 ;;		_LightsPointSelect
  5401 ;; This function is called by:
  5402 ;;		_setMain_Exception
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _getAll_Lights_Line
  5408  0BFA                     _getAll_Lights_Line:	
  5409                           
  5410                           ;TriacRelay_B1.c: 237: char line = 0;
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5414  0BFA  01F6               	clrf	getAll_Lights_Line@line
  5415                           
  5416                           ;TriacRelay_B1.c: 239: LightsPointSelect(1);
  5417  0BFB  3001               	movlw	1
  5418  0BFC  158A  23CC         	fcall	_LightsPointSelect
  5419                           
  5420                           ;TriacRelay_B1.c: 240: line = Lights->Line == 1 ? 1 : 0;
  5421  0BFE  0A78               	incf	_Lights,w
  5422  0BFF  0084               	movwf	4
  5423  0C00  3000               	movlw	0
  5424  0C01  1383               	bcf	3,7	;select IRP bank0
  5425  0C02  1800               	btfsc	0,0
  5426  0C03  3001               	movlw	1
  5427  0C04  00F6               	movwf	getAll_Lights_Line@line
  5428                           
  5429                           ;TriacRelay_B1.c: 250: return line;
  5430  0C05  0876               	movf	getAll_Lights_Line@line,w
  5431  0C06  0008               	return
  5432  0C07                     __end_of_getAll_Lights_Line:	
  5433                           
  5434                           	psect	text26
  5435  0CA4                     __ptext26:	
  5436 ;; *************** function _PIR_Initialization *****************
  5437 ;; Defined at:
  5438 ;;		line 7 in file "../src/PIR_B1.c"
  5439 ;; Parameters:    Size  Location     Type
  5440 ;;		None
  5441 ;; Auto vars:     Size  Location     Type
  5442 ;;		None
  5443 ;; Return value:  Size  Location     Type
  5444 ;;		None               void
  5445 ;; Registers used:
  5446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5447 ;; Tracked objects:
  5448 ;;		On entry : 0/0
  5449 ;;		On exit  : 0/0
  5450 ;;		Unchanged: 0/0
  5451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5452 ;;      Params:         0       0       0       0
  5453 ;;      Locals:         0       0       0       0
  5454 ;;      Temps:          0       1       0       0
  5455 ;;      Totals:         0       1       0       0
  5456 ;;Total ram usage:        1 bytes
  5457 ;; Hardware stack levels used:    1
  5458 ;; Hardware stack levels required when called:    4
  5459 ;; This function calls:
  5460 ;;		_setLED
  5461 ;; This function is called by:
  5462 ;;		_main
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           
  5467                           ;psect for function _PIR_Initialization
  5468  0CA4                     _PIR_Initialization:	
  5469                           
  5470                           ;PIR_B1.c: 8: setLED(1, 1);
  5471                           
  5472                           ;incstack = 0
  5473                           ; Regs used in _PIR_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5474  0CA4  01F6               	clrf	setLED@command
  5475  0CA5  0AF6               	incf	setLED@command,f
  5476  0CA6  3001               	movlw	1
  5477  0CA7  118A  2517         	fcall	_setLED
  5478                           
  5479                           ;PIR_B1.c: 9: _PIR.RangeValue = 15;
  5480  0CA9  300F               	movlw	15
  5481  0CAA  1283               	bcf	3,5	;RP0=0, select bank0
  5482  0CAB  1303               	bcf	3,6	;RP1=0, select bank0
  5483  0CAC  00DC               	movwf	??_PIR_Initialization
  5484  0CAD  085C               	movf	??_PIR_Initialization,w
  5485  0CAE  1683               	bsf	3,5	;RP0=1, select bank1
  5486  0CAF  1303               	bcf	3,6	;RP1=0, select bank1
  5487  0CB0  00CC               	movwf	(__PIR^(0+128)+44)
  5488                           
  5489                           ;PIR_B1.c: 10: _PIR.CloseTimeValue = 5;
  5490  0CB1  3005               	movlw	5
  5491  0CB2  00C7               	movwf	(__PIR^(0+128)+39)
  5492  0CB3  3000               	movlw	0
  5493  0CB4  00C8               	movwf	(__PIR^(0+128)+40)
  5494  0CB5  0008               	return
  5495  0CB6                     __end_of_PIR_Initialization:	
  5496                           
  5497                           	psect	text27
  5498  0C40                     __ptext27:	
  5499 ;; *************** function _Mcu_Initialization *****************
  5500 ;; Defined at:
  5501 ;;		line 30 in file "../src/MCU_B1.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;		None
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;		None
  5506 ;; Return value:  Size  Location     Type
  5507 ;;		None               void
  5508 ;; Registers used:
  5509 ;;		wreg, status,2, status,0, pclath, cstack
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5515 ;;      Params:         0       0       0       0
  5516 ;;      Locals:         0       0       0       0
  5517 ;;      Temps:          0       0       0       0
  5518 ;;      Totals:         0       0       0       0
  5519 ;;Total ram usage:        0 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:    3
  5522 ;; This function calls:
  5523 ;;		_ADC_Set
  5524 ;;		_Fosc_Set
  5525 ;;		_IO_Set
  5526 ;;		_TMR1_Set
  5527 ;;		_WDT_Set
  5528 ;; This function is called by:
  5529 ;;		_main
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           
  5534                           ;psect for function _Mcu_Initialization
  5535  0C40                     _Mcu_Initialization:	
  5536                           
  5537                           ;MCU_B1.c: 32: Fosc_Set();
  5538                           
  5539                           ;incstack = 0
  5540                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5541  0C40  158A  2394  158A   	fcall	_Fosc_Set
  5542                           
  5543                           ;MCU_B1.c: 34: IO_Set();
  5544  0C43  158A  24F3  158A   	fcall	_IO_Set
  5545                           
  5546                           ;MCU_B1.c: 36: ;;
  5547                           ;MCU_B1.c: 38: TMR1_Set();
  5548  0C46  158A  2415  158A   	fcall	_TMR1_Set
  5549                           
  5550                           ;MCU_B1.c: 40: ADC_Set();
  5551  0C49  158A  23A5  158A   	fcall	_ADC_Set
  5552                           
  5553                           ;MCU_B1.c: 42: ;;
  5554                           ;MCU_B1.c: 44: ;;
  5555                           ;MCU_B1.c: 46: ;;
  5556                           ;MCU_B1.c: 48: ;;
  5557                           ;MCU_B1.c: 50: ;;
  5558                           ;MCU_B1.c: 52: WDT_Set();
  5559  0C4C  158A  2423         	fcall	_WDT_Set
  5560  0C4E  0008               	return
  5561  0C4F                     __end_of_Mcu_Initialization:	
  5562                           
  5563                           	psect	text28
  5564  0C23                     __ptext28:	
  5565 ;; *************** function _WDT_Set *****************
  5566 ;; Defined at:
  5567 ;;		line 1019 in file "../src/MCU_B1.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;		None
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;		None
  5572 ;; Return value:  Size  Location     Type
  5573 ;;		None               void
  5574 ;; Registers used:
  5575 ;;		wreg
  5576 ;; Tracked objects:
  5577 ;;		On entry : 0/0
  5578 ;;		On exit  : 0/0
  5579 ;;		Unchanged: 0/0
  5580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5581 ;;      Params:         0       0       0       0
  5582 ;;      Locals:         0       0       0       0
  5583 ;;      Temps:          1       0       0       0
  5584 ;;      Totals:         1       0       0       0
  5585 ;;Total ram usage:        1 bytes
  5586 ;; Hardware stack levels used:    1
  5587 ;; Hardware stack levels required when called:    2
  5588 ;; This function calls:
  5589 ;;		Nothing
  5590 ;; This function is called by:
  5591 ;;		_Mcu_Initialization
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           
  5596                           ;psect for function _WDT_Set
  5597  0C23                     _WDT_Set:	
  5598                           
  5599                           ;MCU_B1.c: 1021: PSA = 1;
  5600                           
  5601                           ;incstack = 0
  5602                           ; Regs used in _WDT_Set: [wreg]
  5603  0C23  1683               	bsf	3,5	;RP0=1, select bank1
  5604  0C24  1303               	bcf	3,6	;RP1=0, select bank1
  5605  0C25  1581               	bsf	1,3	;volatile
  5606                           
  5607                           ;MCU_B1.c: 1022: PS0 = 1;
  5608  0C26  1401               	bsf	1,0	;volatile
  5609                           
  5610                           ;MCU_B1.c: 1023: PS1 = 1;
  5611  0C27  1481               	bsf	1,1	;volatile
  5612                           
  5613                           ;MCU_B1.c: 1024: PS2 = 1;
  5614  0C28  1501               	bsf	1,2	;volatile
  5615                           
  5616                           ;MCU_B1.c: 1028: WDT.Enable = 1;
  5617  0C29  1283               	bcf	3,5	;RP0=0, select bank0
  5618  0C2A  1303               	bcf	3,6	;RP1=0, select bank0
  5619  0C2B  1439               	bsf	_WDT,0
  5620                           
  5621                           ;MCU_B1.c: 1029: WDT.Timer = 10;
  5622  0C2C  300A               	movlw	10
  5623  0C2D  00F4               	movwf	??_WDT_Set
  5624  0C2E  0874               	movf	??_WDT_Set,w
  5625  0C2F  00BA               	movwf	_WDT+1
  5626  0C30  0008               	return
  5627  0C31                     __end_of_WDT_Set:	
  5628                           
  5629                           	psect	text29
  5630  0C15                     __ptext29:	
  5631 ;; *************** function _TMR1_Set *****************
  5632 ;; Defined at:
  5633 ;;		line 199 in file "../src/MCU_B1.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;		None
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;		None
  5638 ;; Return value:  Size  Location     Type
  5639 ;;		None               void
  5640 ;; Registers used:
  5641 ;;		wreg
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5647 ;;      Params:         0       0       0       0
  5648 ;;      Locals:         0       0       0       0
  5649 ;;      Temps:          0       0       0       0
  5650 ;;      Totals:         0       0       0       0
  5651 ;;Total ram usage:        0 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:    2
  5654 ;; This function calls:
  5655 ;;		Nothing
  5656 ;; This function is called by:
  5657 ;;		_Mcu_Initialization
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           
  5662                           ;psect for function _TMR1_Set
  5663  0C15                     _TMR1_Set:	
  5664                           
  5665                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  5666                           
  5667                           ;incstack = 0
  5668                           ; Regs used in _TMR1_Set: [wreg]
  5669  0C15  3041               	movlw	65
  5670  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  5671  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  5672  0C18  0090               	movwf	16	;volatile
  5673                           
  5674                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  5675  0C19  30FA               	movlw	250
  5676  0C1A  008F               	movwf	15	;volatile
  5677                           
  5678                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  5679  0C1B  3038               	movlw	56
  5680  0C1C  008E               	movwf	14	;volatile
  5681                           
  5682                           ;MCU_B1.c: 203: TMR1IE = 1;
  5683  0C1D  1683               	bsf	3,5	;RP0=1, select bank1
  5684  0C1E  1303               	bcf	3,6	;RP1=0, select bank1
  5685  0C1F  140C               	bsf	12,0	;volatile
  5686                           
  5687                           ;MCU_B1.c: 204: PEIE = 1;
  5688  0C20  170B               	bsf	11,6	;volatile
  5689                           
  5690                           ;MCU_B1.c: 205: GIE = 1;
  5691  0C21  178B               	bsf	11,7	;volatile
  5692  0C22  0008               	return
  5693  0C23                     __end_of_TMR1_Set:	
  5694                           
  5695                           	psect	text30
  5696  0CF3                     __ptext30:	
  5697 ;; *************** function _IO_Set *****************
  5698 ;; Defined at:
  5699 ;;		line 60 in file "../src/MCU_B1.c"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;		None
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;		None
  5704 ;; Return value:  Size  Location     Type
  5705 ;;		None               void
  5706 ;; Registers used:
  5707 ;;		wreg, status,2
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5713 ;;      Params:         0       0       0       0
  5714 ;;      Locals:         0       0       0       0
  5715 ;;      Temps:          0       0       0       0
  5716 ;;      Totals:         0       0       0       0
  5717 ;;Total ram usage:        0 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    2
  5720 ;; This function calls:
  5721 ;;		Nothing
  5722 ;; This function is called by:
  5723 ;;		_Mcu_Initialization
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           
  5728                           ;psect for function _IO_Set
  5729  0CF3                     _IO_Set:	
  5730                           
  5731                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5732                           
  5733                           ;incstack = 0
  5734                           ; Regs used in _IO_Set: [wreg+status,2]
  5735  0CF3  302F               	movlw	47
  5736  0CF4  1683               	bsf	3,5	;RP0=1, select bank1
  5737  0CF5  1303               	bcf	3,6	;RP1=0, select bank1
  5738  0CF6  0085               	movwf	5	;volatile
  5739                           
  5740                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5741  0CF7  3001               	movlw	1
  5742  0CF8  0086               	movwf	6	;volatile
  5743                           
  5744                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5745  0CF9  0187               	clrf	7	;volatile
  5746                           
  5747                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5748  0CFA  3007               	movlw	7
  5749  0CFB  1683               	bsf	3,5	;RP0=1, select bank3
  5750  0CFC  1703               	bsf	3,6	;RP1=1, select bank3
  5751  0CFD  0085               	movwf	5	;volatile
  5752                           
  5753                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5754  0CFE  3001               	movlw	1
  5755  0CFF  0086               	movwf	6	;volatile
  5756                           
  5757                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5758  0D00  30AF               	movlw	175
  5759  0D01  1283               	bcf	3,5	;RP0=0, select bank0
  5760  0D02  1303               	bcf	3,6	;RP1=0, select bank0
  5761  0D03  0085               	movwf	5	;volatile
  5762                           
  5763                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5764  0D04  3001               	movlw	1
  5765  0D05  0086               	movwf	6	;volatile
  5766                           
  5767                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5768  0D06  0187               	clrf	7	;volatile
  5769  0D07  0008               	return
  5770  0D08                     __end_of_IO_Set:	
  5771                           
  5772                           	psect	text31
  5773  0B94                     __ptext31:	
  5774 ;; *************** function _Fosc_Set *****************
  5775 ;; Defined at:
  5776 ;;		line 56 in file "../src/MCU_B1.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;		None
  5779 ;; Auto vars:     Size  Location     Type
  5780 ;;		None
  5781 ;; Return value:  Size  Location     Type
  5782 ;;		None               void
  5783 ;; Registers used:
  5784 ;;		wreg
  5785 ;; Tracked objects:
  5786 ;;		On entry : 0/0
  5787 ;;		On exit  : 0/0
  5788 ;;		Unchanged: 0/0
  5789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5790 ;;      Params:         0       0       0       0
  5791 ;;      Locals:         0       0       0       0
  5792 ;;      Temps:          0       0       0       0
  5793 ;;      Totals:         0       0       0       0
  5794 ;;Total ram usage:        0 bytes
  5795 ;; Hardware stack levels used:    1
  5796 ;; Hardware stack levels required when called:    2
  5797 ;; This function calls:
  5798 ;;		Nothing
  5799 ;; This function is called by:
  5800 ;;		_Mcu_Initialization
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           
  5805                           ;psect for function _Fosc_Set
  5806  0B94                     _Fosc_Set:	
  5807                           
  5808                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5809                           
  5810                           ;incstack = 0
  5811                           ; Regs used in _Fosc_Set: [wreg]
  5812  0B94  303C               	movlw	60
  5813  0B95  1683               	bsf	3,5	;RP0=1, select bank1
  5814  0B96  1303               	bcf	3,6	;RP1=0, select bank1
  5815  0B97  0090               	movwf	16	;volatile
  5816  0B98  0008               	return
  5817  0B99                     __end_of_Fosc_Set:	
  5818                           
  5819                           	psect	text32
  5820  0BA5                     __ptext32:	
  5821 ;; *************** function _ADC_Set *****************
  5822 ;; Defined at:
  5823 ;;		line 420 in file "../src/MCU_B1.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;		None
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;		None
  5828 ;; Return value:  Size  Location     Type
  5829 ;;		None               void
  5830 ;; Registers used:
  5831 ;;		wreg
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5837 ;;      Params:         0       0       0       0
  5838 ;;      Locals:         0       0       0       0
  5839 ;;      Temps:          0       0       0       0
  5840 ;;      Totals:         0       0       0       0
  5841 ;;Total ram usage:        0 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    2
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_Mcu_Initialization
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           
  5852                           ;psect for function _ADC_Set
  5853  0BA5                     _ADC_Set:	
  5854                           
  5855                           ;MCU_B1.c: 421: ADCON1 = 0x73;
  5856                           
  5857                           ;incstack = 0
  5858                           ; Regs used in _ADC_Set: [wreg]
  5859  0BA5  3073               	movlw	115
  5860  0BA6  1683               	bsf	3,5	;RP0=1, select bank1
  5861  0BA7  1303               	bcf	3,6	;RP1=0, select bank1
  5862  0BA8  009F               	movwf	31	;volatile
  5863                           
  5864                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  5865  0BA9  30C1               	movlw	193
  5866  0BAA  009D               	movwf	29	;volatile
  5867  0BAB  0008               	return
  5868  0BAC                     __end_of_ADC_Set:	
  5869                           
  5870                           	psect	text33
  5871  01F4                     __ptext33:	
  5872 ;; *************** function _Load_Main *****************
  5873 ;; Defined at:
  5874 ;;		line 39 in file "../src/OverLoad_B1.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;		None
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;  i               1   14[BANK0 ] unsigned char 
  5879 ;;  error           1   13[BANK0 ] unsigned char 
  5880 ;;  adjgo           1   11[BANK0 ] unsigned char 
  5881 ;;  j               1   10[BANK0 ] unsigned char 
  5882 ;; Return value:  Size  Location     Type
  5883 ;;		None               void
  5884 ;; Registers used:
  5885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5886 ;; Tracked objects:
  5887 ;;		On entry : 0/0
  5888 ;;		On exit  : 0/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5891 ;;      Params:         0       0       0       0
  5892 ;;      Locals:         0       5       0       0
  5893 ;;      Temps:          0       2       0       0
  5894 ;;      Totals:         0       7       0       0
  5895 ;;Total ram usage:        7 bytes
  5896 ;; Hardware stack levels used:    1
  5897 ;; Hardware stack levels required when called:    5
  5898 ;; This function calls:
  5899 ;;		_getMain_All_Error_Status
  5900 ;;		_getMain_LightsStatus
  5901 ;;		_getMain_Lights_Count
  5902 ;;		_getMain_LoadOK
  5903 ;;		_setLoad_AH_AL_Restore
  5904 ;; This function is called by:
  5905 ;;		_main
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           
  5910                           ;psect for function _Load_Main
  5911  01F4                     _Load_Main:	
  5912                           
  5913                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
  5914                           
  5915                           ;incstack = 0
  5916                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5917  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  5918  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  5919  01F6  01E9               	clrf	Load_Main@i
  5920  01F7  01E5               	clrf	Load_Main@j
  5921  01F8  3000               	movlw	0
  5922  01F9  158A  27A6  118A   	fcall	_getMain_All_Error_Status
  5923  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  5924  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  5925  01FE  00E3               	movwf	??_Load_Main
  5926  01FF  0863               	movf	??_Load_Main,w
  5927  0200  00E8               	movwf	Load_Main@error
  5928  0201  01E6               	clrf	Load_Main@adjgo
  5929                           
  5930                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  5931  0202  1683               	bsf	3,5	;RP0=1, select bank1
  5932  0203  1303               	bcf	3,6	;RP1=0, select bank1
  5933  0204  1C4F               	btfss	_Load^(0+128),0
  5934  0205  2B51               	goto	l679
  5935                           
  5936                           ;OverLoad_B1.c: 46: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
  5937  0206  1283               	bcf	3,5	;RP0=0, select bank0
  5938  0207  1303               	bcf	3,6	;RP1=0, select bank0
  5939  0208  01E7               	clrf	_Load_Main$2773
  5940  0209  158A  2607  118A   	fcall	_getMain_LightsStatus
  5941  020C  3A01               	xorlw	1
  5942  020D  1D03               	skipz
  5943  020E  2A19               	goto	l4759
  5944  020F  1283               	bcf	3,5	;RP0=0, select bank0
  5945  0210  1303               	bcf	3,6	;RP1=0, select bank0
  5946  0211  08E8               	movf	Load_Main@error,f
  5947  0212  1D03               	skipz
  5948  0213  2A19               	goto	l4759
  5949  0214  08E6               	movf	Load_Main@adjgo,f
  5950  0215  1D03               	skipz
  5951  0216  2A19               	goto	l4759
  5952  0217  01E7               	clrf	_Load_Main$2773
  5953  0218  0AE7               	incf	_Load_Main$2773,f
  5954  0219                     l4759:	
  5955  0219  1283               	bcf	3,5	;RP0=0, select bank0
  5956  021A  1303               	bcf	3,6	;RP1=0, select bank0
  5957  021B  0867               	movf	_Load_Main$2773,w
  5958  021C  1683               	bsf	3,5	;RP0=1, select bank1
  5959  021D  1303               	bcf	3,6	;RP1=0, select bank1
  5960  021E  10CF               	bcf	_Load^(0+128),1
  5961  021F  1D03               	skipz
  5962  0220  14CF               	bsf	_Load^(0+128),1
  5963                           
  5964                           ;OverLoad_B1.c: 47: if (getMain_LoadOK() == 1 && Load.Run == 0) {
  5965  0221  158A  23EE  118A   	fcall	_getMain_LoadOK
  5966  0224  3A01               	xorlw	1
  5967  0225  1D03               	skipz
  5968  0226  2A2D               	goto	l682
  5969  0227  1683               	bsf	3,5	;RP0=1, select bank1
  5970  0228  1303               	bcf	3,6	;RP1=0, select bank1
  5971  0229  19CF               	btfsc	_Load^(0+128),3
  5972  022A  2A2D               	goto	l682
  5973                           
  5974                           ;OverLoad_B1.c: 48: Load.Run = 1;
  5975  022B  15CF               	bsf	_Load^(0+128),3
  5976                           
  5977                           ;OverLoad_B1.c: 49: Load.OK = 0;
  5978  022C  13CF               	bcf	_Load^(0+128),7
  5979  022D                     l682:	
  5980                           
  5981                           ;OverLoad_B1.c: 50: }
  5982                           ;OverLoad_B1.c: 53: if (Load.GO == 1) {
  5983  022D  1683               	bsf	3,5	;RP0=1, select bank1
  5984  022E  1303               	bcf	3,6	;RP1=0, select bank1
  5985  022F  1CCF               	btfss	_Load^(0+128),1
  5986  0230  2B1C               	goto	l683
  5987                           
  5988                           ;OverLoad_B1.c: 54: Load.LightsON = 1;
  5989  0231  154F               	bsf	_Load^(0+128),2
  5990                           
  5991                           ;OverLoad_B1.c: 56: if (Load.ADtoGO == 1) {
  5992  0232  1E4F               	btfss	_Load^(0+128),4
  5993  0233  2B1A               	goto	l684
  5994                           
  5995                           ;OverLoad_B1.c: 57: Load.Time++;
  5996  0234  3001               	movlw	1
  5997  0235  07D0               	addwf	(_Load^(0+128)+1),f
  5998  0236  1803               	skipnc
  5999  0237  0AD1               	incf	((_Load+1)^(0+128)+1),f
  6000  0238  3000               	movlw	0
  6001  0239  07D1               	addwf	((_Load+1)^(0+128)+1),f
  6002                           
  6003                           ;OverLoad_B1.c: 58: if (Load.Time >= 5) {
  6004  023A  3000               	movlw	0
  6005  023B  0251               	subwf	((_Load+1)^(0+128)+1),w
  6006  023C  3005               	movlw	5
  6007  023D  1903               	skipnz
  6008  023E  0250               	subwf	(_Load^(0+128)+1),w
  6009  023F  1C03               	skipc
  6010  0240  0008               	return
  6011                           
  6012                           ;OverLoad_B1.c: 59: Load.Time = 0;
  6013  0241  01D0               	clrf	(_Load^(0+128)+1)
  6014  0242  01D1               	clrf	((_Load+1)^(0+128)+1)
  6015                           
  6016                           ;OverLoad_B1.c: 60: Load.ADtoGO = 0;
  6017  0243  124F               	bcf	_Load^(0+128),4
  6018                           
  6019                           ;OverLoad_B1.c: 62: for (i = 0; i < 4; i++) {
  6020  0244  1283               	bcf	3,5	;RP0=0, select bank0
  6021  0245  1303               	bcf	3,6	;RP1=0, select bank0
  6022  0246  01E9               	clrf	Load_Main@i
  6023  0247  3004               	movlw	4
  6024  0248  0269               	subwf	Load_Main@i,w
  6025  0249  1803               	btfsc	3,0
  6026  024A  2A7C               	goto	l4785
  6027  024B                     l4779:	
  6028                           
  6029                           ;OverLoad_B1.c: 63: Load.ADH += Load.AH[i];
  6030  024B  0869               	movf	Load_Main@i,w
  6031  024C  3ED9               	addlw	(_Load+10)& (0+255)
  6032  024D  0084               	movwf	4
  6033  024E  1383               	bcf	3,7	;select IRP bank1
  6034  024F  0800               	movf	0,w
  6035  0250  00E3               	movwf	??_Load_Main
  6036  0251  01E4               	clrf	??_Load_Main+1
  6037  0252  0863               	movf	??_Load_Main,w
  6038  0253  1683               	bsf	3,5	;RP0=1, select bank1
  6039  0254  1303               	bcf	3,6	;RP1=0, select bank1
  6040  0255  07D4               	addwf	(_Load^(0+128)+5),f
  6041  0256  1803               	skipnc
  6042  0257  0AD5               	incf	((_Load+1)^(0+128)+5),f
  6043  0258  1283               	bcf	3,5	;RP0=0, select bank0
  6044  0259  1303               	bcf	3,6	;RP1=0, select bank0
  6045  025A  0864               	movf	??_Load_Main+1,w
  6046  025B  1683               	bsf	3,5	;RP0=1, select bank1
  6047  025C  1303               	bcf	3,6	;RP1=0, select bank1
  6048  025D  07D5               	addwf	((_Load+1)^(0+128)+5),f
  6049                           
  6050                           ;OverLoad_B1.c: 64: Load.ADL += Load.AL[i];
  6051  025E  1283               	bcf	3,5	;RP0=0, select bank0
  6052  025F  1303               	bcf	3,6	;RP1=0, select bank0
  6053  0260  0869               	movf	Load_Main@i,w
  6054  0261  3EDE               	addlw	(_Load+15)& (0+255)
  6055  0262  0084               	movwf	4
  6056  0263  0800               	movf	0,w
  6057  0264  00E3               	movwf	??_Load_Main
  6058  0265  01E4               	clrf	??_Load_Main+1
  6059  0266  0863               	movf	??_Load_Main,w
  6060  0267  1683               	bsf	3,5	;RP0=1, select bank1
  6061  0268  1303               	bcf	3,6	;RP1=0, select bank1
  6062  0269  07D6               	addwf	(_Load^(0+128)+7),f
  6063  026A  1803               	skipnc
  6064  026B  0AD7               	incf	((_Load+1)^(0+128)+7),f
  6065  026C  1283               	bcf	3,5	;RP0=0, select bank0
  6066  026D  1303               	bcf	3,6	;RP1=0, select bank0
  6067  026E  0864               	movf	??_Load_Main+1,w
  6068  026F  1683               	bsf	3,5	;RP0=1, select bank1
  6069  0270  1303               	bcf	3,6	;RP1=0, select bank1
  6070  0271  07D7               	addwf	((_Load+1)^(0+128)+7),f
  6071  0272  3001               	movlw	1
  6072  0273  1283               	bcf	3,5	;RP0=0, select bank0
  6073  0274  1303               	bcf	3,6	;RP1=0, select bank0
  6074  0275  00E3               	movwf	??_Load_Main
  6075  0276  0863               	movf	??_Load_Main,w
  6076  0277  07E9               	addwf	Load_Main@i,f
  6077  0278  3004               	movlw	4
  6078  0279  0269               	subwf	Load_Main@i,w
  6079  027A  1C03               	skipc
  6080  027B  2A4B               	goto	l4779
  6081  027C                     l4785:	
  6082                           
  6083                           ;OverLoad_B1.c: 65: }
  6084                           ;OverLoad_B1.c: 66: Load.ADH /= 4;
  6085  027C  3002               	movlw	2
  6086  027D  1683               	bsf	3,5	;RP0=1, select bank1
  6087  027E  1303               	bcf	3,6	;RP1=0, select bank1
  6088  027F                     u5935:	
  6089  027F  1003               	clrc
  6090  0280  0CD5               	rrf	((_Load+1)^(0+128)+5),f
  6091  0281  0CD4               	rrf	(_Load^(0+128)+5),f
  6092  0282  3EFF               	addlw	-1
  6093  0283  1D03               	skipz
  6094  0284  2A7F               	goto	u5935
  6095                           
  6096                           ;OverLoad_B1.c: 67: Load.ADL /= 4;
  6097  0285  3002               	movlw	2
  6098  0286                     u5945:	
  6099  0286  1003               	clrc
  6100  0287  0CD7               	rrf	((_Load+1)^(0+128)+7),f
  6101  0288  0CD6               	rrf	(_Load^(0+128)+7),f
  6102  0289  3EFF               	addlw	-1
  6103  028A  1D03               	skipz
  6104  028B  2A86               	goto	u5945
  6105                           
  6106                           ;OverLoad_B1.c: 68: setLoad_AH_AL_Restore();
  6107  028C  158A  2508  118A   	fcall	_setLoad_AH_AL_Restore
  6108                           
  6109                           ;OverLoad_B1.c: 69: if (Load.ADH > Load.ADL) {
  6110  028F  1683               	bsf	3,5	;RP0=1, select bank1
  6111  0290  1303               	bcf	3,6	;RP1=0, select bank1
  6112  0291  0855               	movf	((_Load+1)^(0+128)+5),w
  6113  0292  0257               	subwf	((_Load+1)^(0+128)+7),w
  6114  0293  1D03               	skipz
  6115  0294  2A97               	goto	u5955
  6116  0295  0854               	movf	(_Load^(0+128)+5),w
  6117  0296  0256               	subwf	(_Load^(0+128)+7),w
  6118  0297                     u5955:	
  6119  0297  1803               	skipnc
  6120  0298  0008               	return
  6121                           
  6122                           ;OverLoad_B1.c: 70: Load.AD = Load.ADH - Load.ADL;
  6123  0299  0356               	decf	(_Load^(0+128)+7),w
  6124  029A  3AFF               	xorlw	255
  6125  029B  0754               	addwf	(_Load^(0+128)+5),w
  6126  029C  1283               	bcf	3,5	;RP0=0, select bank0
  6127  029D  1303               	bcf	3,6	;RP1=0, select bank0
  6128  029E  00E3               	movwf	??_Load_Main
  6129  029F  0863               	movf	??_Load_Main,w
  6130  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  6131  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  6132  02A2  00E3               	movwf	(_Load^(0+128)+20)
  6133                           
  6134                           ;OverLoad_B1.c: 71: Load.ADH = 0;
  6135  02A3  01D4               	clrf	(_Load^(0+128)+5)
  6136  02A4  01D5               	clrf	((_Load+1)^(0+128)+5)
  6137                           
  6138                           ;OverLoad_B1.c: 72: Load.ADL = 0;
  6139  02A5  01D6               	clrf	(_Load^(0+128)+7)
  6140  02A6  01D7               	clrf	((_Load+1)^(0+128)+7)
  6141                           
  6142                           ;OverLoad_B1.c: 73: Load.LightsCount = getMain_Lights_Count();
  6143  02A7  158A  2470  118A   	fcall	_getMain_Lights_Count
  6144  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  6145  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  6146  02AC  00E3               	movwf	??_Load_Main
  6147  02AD  0863               	movf	??_Load_Main,w
  6148  02AE  1683               	bsf	3,5	;RP0=1, select bank1
  6149  02AF  1303               	bcf	3,6	;RP1=0, select bank1
  6150  02B0  00ED               	movwf	(_Load^(0+128)+30)
  6151                           
  6152                           ;OverLoad_B1.c: 75: if (Load.Run == 1) {
  6153  02B1  1DCF               	btfss	_Load^(0+128),3
  6154  02B2  2AD8               	goto	l689
  6155                           
  6156                           ;OverLoad_B1.c: 76: if (Load.Count < 2) {
  6157  02B3  3002               	movlw	2
  6158  02B4  026B               	subwf	(_Load^(0+128)+28),w
  6159  02B5  1803               	skipnc
  6160  02B6  2AD8               	goto	l689
  6161                           
  6162                           ;OverLoad_B1.c: 77: Load.Count++;
  6163  02B7  3001               	movlw	1
  6164  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  6165  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  6166  02BA  00E3               	movwf	??_Load_Main
  6167  02BB  0863               	movf	??_Load_Main,w
  6168  02BC  1683               	bsf	3,5	;RP0=1, select bank1
  6169  02BD  1303               	bcf	3,6	;RP1=0, select bank1
  6170  02BE  07EB               	addwf	(_Load^(0+128)+28),f
  6171                           
  6172                           ;OverLoad_B1.c: 78: if (Load.Count == 1) {
  6173  02BF  086B               	movf	(_Load^(0+128)+28),w
  6174  02C0  3A01               	xorlw	1
  6175  02C1  1D03               	skipz
  6176  02C2  2AC5               	goto	l4809
  6177                           
  6178                           ;OverLoad_B1.c: 79: Load.JudgeValue = 80;
  6179  02C3  3050               	movlw	80
  6180  02C4  2ACE               	goto	L18
  6181  02C5                     l4809:	
  6182                           ;OverLoad_B1.c: 80: } else if (Load.Count == 2) {
  6183                           
  6184  02C5  086B               	movf	(_Load^(0+128)+28),w
  6185  02C6  3A02               	xorlw	2
  6186  02C7  1D03               	skipz
  6187  02C8  2AD8               	goto	l689
  6188                           
  6189                           ;OverLoad_B1.c: 81: if (Load.LightsCount == 1) {
  6190  02C9  086D               	movf	(_Load^(0+128)+30),w
  6191  02CA  3A01               	xorlw	1
  6192  02CB  1D03               	skipz
  6193  02CC  2AD1               	goto	l4815
  6194                           
  6195                           ;OverLoad_B1.c: 82: Load.JudgeValue = 15;
  6196  02CD  300F               	movlw	15
  6197  02CE                     L18:	
  6198  02CE  00E7               	movwf	(_Load^(0+128)+24)
  6199  02CF  3000               	movlw	0
  6200  02D0  2AD7               	goto	L19
  6201  02D1                     l4815:	
  6202                           ;OverLoad_B1.c: 83: } else {
  6203                           
  6204                           
  6205                           ;OverLoad_B1.c: 84: Load.JudgeValue = 15 + Load.TotalLoad;
  6206  02D1  0858               	movf	(_Load^(0+128)+9),w
  6207  02D2  3E0F               	addlw	15
  6208  02D3  00E7               	movwf	(_Load^(0+128)+24)
  6209  02D4  3000               	movlw	0
  6210  02D5  1803               	skipnc
  6211  02D6  3001               	movlw	1
  6212  02D7                     L19:	
  6213  02D7  00E8               	movwf	(_Load^(0+128)+25)
  6214  02D8                     l689:	
  6215                           
  6216                           ;OverLoad_B1.c: 85: }
  6217                           ;OverLoad_B1.c: 86: }
  6218                           ;OverLoad_B1.c: 87: }
  6219                           ;OverLoad_B1.c: 88: }
  6220                           ;OverLoad_B1.c: 90: if (Load.AD >= Load.JudgeValue) {
  6221  02D8  0863               	movf	(_Load^(0+128)+20),w
  6222  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  6223  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  6224  02DB  00E3               	movwf	??_Load_Main
  6225  02DC  01E4               	clrf	??_Load_Main+1
  6226  02DD  1683               	bsf	3,5	;RP0=1, select bank1
  6227  02DE  1303               	bcf	3,6	;RP1=0, select bank1
  6228  02DF  0868               	movf	((_Load+1)^(0+128)+24),w
  6229  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  6230  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  6231  02E2  0264               	subwf	??_Load_Main+1,w
  6232  02E3  1D03               	skipz
  6233  02E4  2AEB               	goto	u6015
  6234  02E5  1683               	bsf	3,5	;RP0=1, select bank1
  6235  02E6  1303               	bcf	3,6	;RP1=0, select bank1
  6236  02E7  0867               	movf	(_Load^(0+128)+24),w
  6237  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  6238  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  6239  02EA  0263               	subwf	??_Load_Main,w
  6240  02EB                     u6015:	
  6241  02EB  1C03               	skipc
  6242  02EC  2AFA               	goto	l4825
  6243                           
  6244                           ;OverLoad_B1.c: 91: Load.ErrorCount++;
  6245  02ED  3001               	movlw	1
  6246  02EE  00E3               	movwf	??_Load_Main
  6247  02EF  0863               	movf	??_Load_Main,w
  6248  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  6249  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  6250  02F2  07EC               	addwf	(_Load^(0+128)+29),f
  6251                           
  6252                           ;OverLoad_B1.c: 92: if (Load.ErrorCount > 2) {
  6253  02F3  3003               	movlw	3
  6254  02F4  026C               	subwf	(_Load^(0+128)+29),w
  6255  02F5  1C03               	skipc
  6256  02F6  0008               	return
  6257                           
  6258                           ;OverLoad_B1.c: 93: Load.ErrorCount = 0;
  6259  02F7  01EC               	clrf	(_Load^(0+128)+29)
  6260                           
  6261                           ;OverLoad_B1.c: 94: Load.ERROR = 1;
  6262  02F8  16CF               	bsf	_Load^(0+128),5
  6263                           
  6264                           ;OverLoad_B1.c: 107: }
  6265                           ;OverLoad_B1.c: 108: } else {
  6266  02F9  0008               	return
  6267  02FA                     l4825:	
  6268                           
  6269                           ;OverLoad_B1.c: 109: Load.ErrorCount = 0;
  6270  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  6271  02FB  1303               	bcf	3,6	;RP1=0, select bank1
  6272  02FC  01EC               	clrf	(_Load^(0+128)+29)
  6273                           
  6274                           ;OverLoad_B1.c: 110: if (Load.Run == 1) {
  6275  02FD  1DCF               	btfss	_Load^(0+128),3
  6276  02FE  0008               	return
  6277                           
  6278                           ;OverLoad_B1.c: 111: if (Load.OK == 0) {
  6279  02FF  1BCF               	btfsc	_Load^(0+128),7
  6280  0300  0008               	return
  6281                           
  6282                           ;OverLoad_B1.c: 112: Load.SafeCount++;
  6283  0301  3001               	movlw	1
  6284  0302  1283               	bcf	3,5	;RP0=0, select bank0
  6285  0303  1303               	bcf	3,6	;RP1=0, select bank0
  6286  0304  00E3               	movwf	??_Load_Main
  6287  0305  0863               	movf	??_Load_Main,w
  6288  0306  1683               	bsf	3,5	;RP0=1, select bank1
  6289  0307  1303               	bcf	3,6	;RP1=0, select bank1
  6290  0308  07EE               	addwf	(_Load^(0+128)+31),f
  6291                           
  6292                           ;OverLoad_B1.c: 113: if (Load.SafeCount >= 3) {
  6293  0309  3003               	movlw	3
  6294  030A  026E               	subwf	(_Load^(0+128)+31),w
  6295  030B  1C03               	skipc
  6296  030C  0008               	return
  6297                           
  6298                           ;OverLoad_B1.c: 114: Load.SafeCount = 0;
  6299  030D  01EE               	clrf	(_Load^(0+128)+31)
  6300                           
  6301                           ;OverLoad_B1.c: 115: Load.OK = 1;
  6302  030E  17CF               	bsf	_Load^(0+128),7
  6303                           
  6304                           ;OverLoad_B1.c: 116: Load.Run = 0;
  6305  030F  11CF               	bcf	_Load^(0+128),3
  6306                           
  6307                           ;OverLoad_B1.c: 117: Load.Count = 0;
  6308  0310  01EB               	clrf	(_Load^(0+128)+28)
  6309                           
  6310                           ;OverLoad_B1.c: 118: Load.TotalLoad = Load.AD;
  6311  0311  0863               	movf	(_Load^(0+128)+20),w
  6312  0312  1283               	bcf	3,5	;RP0=0, select bank0
  6313  0313  1303               	bcf	3,6	;RP1=0, select bank0
  6314  0314  00E3               	movwf	??_Load_Main
  6315  0315  0863               	movf	??_Load_Main,w
  6316  0316  1683               	bsf	3,5	;RP0=1, select bank1
  6317  0317  1303               	bcf	3,6	;RP1=0, select bank1
  6318  0318  00D8               	movwf	(_Load^(0+128)+9)
  6319                           
  6320                           ;OverLoad_B1.c: 127: }
  6321                           ;OverLoad_B1.c: 128: }
  6322                           ;OverLoad_B1.c: 129: }
  6323                           ;OverLoad_B1.c: 130: }
  6324                           ;OverLoad_B1.c: 131: }
  6325                           ;OverLoad_B1.c: 132: }
  6326                           ;OverLoad_B1.c: 133: } else {
  6327  0319  0008               	return
  6328  031A                     l684:	
  6329                           
  6330                           ;OverLoad_B1.c: 134: Load.ADtoGO = 1;
  6331  031A  164F               	bsf	_Load^(0+128),4
  6332                           
  6333                           ;OverLoad_B1.c: 135: }
  6334                           ;OverLoad_B1.c: 136: } else {
  6335  031B  0008               	return
  6336  031C                     l683:	
  6337                           
  6338                           ;OverLoad_B1.c: 137: if (Load.LightsON == 1 && error != 3) {
  6339  031C  1D4F               	btfss	_Load^(0+128),2
  6340  031D  2B3C               	goto	l4873
  6341  031E  1283               	bcf	3,5	;RP0=0, select bank0
  6342  031F  1303               	bcf	3,6	;RP1=0, select bank0
  6343  0320  0868               	movf	Load_Main@error,w
  6344  0321  3A03               	xorlw	3
  6345  0322  1903               	skipnz
  6346  0323  2B3C               	goto	l4873
  6347                           
  6348                           ;OverLoad_B1.c: 138: Load.LightsON = 0;
  6349  0324  1683               	bsf	3,5	;RP0=1, select bank1
  6350  0325  1303               	bcf	3,6	;RP1=0, select bank1
  6351  0326  114F               	bcf	_Load^(0+128),2
  6352                           
  6353                           ;OverLoad_B1.c: 140: Load.Time = 0;
  6354  0327  01D0               	clrf	(_Load^(0+128)+1)
  6355  0328  01D1               	clrf	((_Load+1)^(0+128)+1)
  6356                           
  6357                           ;OverLoad_B1.c: 141: Load.ADtoGO = 0;
  6358  0329  124F               	bcf	_Load^(0+128),4
  6359                           
  6360                           ;OverLoad_B1.c: 142: setLoad_AH_AL_Restore();
  6361  032A  158A  2508  118A   	fcall	_setLoad_AH_AL_Restore
  6362                           
  6363                           ;OverLoad_B1.c: 143: Load.Count = 0;
  6364  032D  1683               	bsf	3,5	;RP0=1, select bank1
  6365  032E  1303               	bcf	3,6	;RP1=0, select bank1
  6366  032F  01EB               	clrf	(_Load^(0+128)+28)
  6367                           
  6368                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
  6369  0330  01EC               	clrf	(_Load^(0+128)+29)
  6370                           
  6371                           ;OverLoad_B1.c: 145: Load.SafeCount = 0;
  6372  0331  01EE               	clrf	(_Load^(0+128)+31)
  6373                           
  6374                           ;OverLoad_B1.c: 147: Load.ADH = 0;
  6375  0332  01D4               	clrf	(_Load^(0+128)+5)
  6376  0333  01D5               	clrf	((_Load+1)^(0+128)+5)
  6377                           
  6378                           ;OverLoad_B1.c: 148: Load.ADL = 0;
  6379  0334  01D6               	clrf	(_Load^(0+128)+7)
  6380  0335  01D7               	clrf	((_Load+1)^(0+128)+7)
  6381                           
  6382                           ;OverLoad_B1.c: 149: Load.AD = 0;
  6383  0336  01E3               	clrf	(_Load^(0+128)+20)
  6384                           
  6385                           ;OverLoad_B1.c: 150: Load.JudgeValue = 0;
  6386  0337  01E7               	clrf	(_Load^(0+128)+24)
  6387  0338  01E8               	clrf	((_Load+1)^(0+128)+24)
  6388                           
  6389                           ;OverLoad_B1.c: 151: Load.LightsCount = 0;
  6390  0339  01ED               	clrf	(_Load^(0+128)+30)
  6391                           
  6392                           ;OverLoad_B1.c: 152: Load.Run = 0;
  6393  033A  11CF               	bcf	_Load^(0+128),3
  6394                           
  6395                           ;OverLoad_B1.c: 153: Load.OK = 1;
  6396  033B  17CF               	bsf	_Load^(0+128),7
  6397  033C                     l4873:	
  6398                           
  6399                           ;OverLoad_B1.c: 161: }
  6400                           ;OverLoad_B1.c: 162: if (Load.ERROR == 1) {
  6401  033C  1683               	bsf	3,5	;RP0=1, select bank1
  6402  033D  1303               	bcf	3,6	;RP1=0, select bank1
  6403  033E  1ECF               	btfss	_Load^(0+128),5
  6404  033F  0008               	return
  6405                           
  6406                           ;OverLoad_B1.c: 163: Load.ErrorTime++;
  6407  0340  3001               	movlw	1
  6408  0341  07D2               	addwf	(_Load^(0+128)+3),f
  6409  0342  1803               	skipnc
  6410  0343  0AD3               	incf	((_Load+1)^(0+128)+3),f
  6411  0344  3000               	movlw	0
  6412  0345  07D3               	addwf	((_Load+1)^(0+128)+3),f
  6413                           
  6414                           ;OverLoad_B1.c: 164: if (Load.ErrorTime >= 1000) {
  6415  0346  3003               	movlw	3
  6416  0347  0253               	subwf	((_Load+1)^(0+128)+3),w
  6417  0348  30E8               	movlw	232
  6418  0349  1903               	skipnz
  6419  034A  0252               	subwf	(_Load^(0+128)+3),w
  6420  034B  1C03               	skipc
  6421  034C  0008               	return
  6422                           
  6423                           ;OverLoad_B1.c: 165: Load.ErrorTime = 0;
  6424  034D  01D2               	clrf	(_Load^(0+128)+3)
  6425  034E  01D3               	clrf	((_Load+1)^(0+128)+3)
  6426                           
  6427                           ;OverLoad_B1.c: 172: Load.ERROR = 0;
  6428  034F  12CF               	bcf	_Load^(0+128),5
  6429                           
  6430                           ;OverLoad_B1.c: 173: }
  6431                           ;OverLoad_B1.c: 174: }
  6432                           ;OverLoad_B1.c: 175: }
  6433                           ;OverLoad_B1.c: 176: } else {
  6434  0350  0008               	return
  6435  0351                     l679:	
  6436                           
  6437                           ;OverLoad_B1.c: 177: if (myMain.PowerON == 1) {
  6438  0351  1283               	bcf	3,5	;RP0=0, select bank0
  6439  0352  1303               	bcf	3,6	;RP1=0, select bank0
  6440  0353  1C20               	btfss	_myMain,0
  6441  0354  0008               	return
  6442                           
  6443                           ;OverLoad_B1.c: 178: Load.Enable = 1;
  6444  0355  1683               	bsf	3,5	;RP0=1, select bank1
  6445  0356  1303               	bcf	3,6	;RP1=0, select bank1
  6446  0357  144F               	bsf	_Load^(0+128),0
  6447  0358  0008               	return
  6448  0359                     __end_of_Load_Main:	
  6449                           
  6450                           	psect	text34
  6451  0BEE                     __ptext34:	
  6452 ;; *************** function _getMain_LoadOK *****************
  6453 ;; Defined at:
  6454 ;;		line 432 in file "../src/Main_B1.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;		None
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;  ok              1    6[COMMON] unsigned char 
  6459 ;; Return value:  Size  Location     Type
  6460 ;;                  1    wreg      unsigned char 
  6461 ;; Registers used:
  6462 ;;		wreg, status,2, pclath, cstack
  6463 ;; Tracked objects:
  6464 ;;		On entry : 0/0
  6465 ;;		On exit  : 0/0
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6468 ;;      Params:         0       0       0       0
  6469 ;;      Locals:         1       0       0       0
  6470 ;;      Temps:          1       0       0       0
  6471 ;;      Totals:         2       0       0       0
  6472 ;;Total ram usage:        2 bytes
  6473 ;; Hardware stack levels used:    1
  6474 ;; Hardware stack levels required when called:    3
  6475 ;; This function calls:
  6476 ;;		_getLightsControl_OK
  6477 ;; This function is called by:
  6478 ;;		_Load_Main
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           
  6483                           ;psect for function _getMain_LoadOK
  6484  0BEE                     _getMain_LoadOK:	
  6485                           
  6486                           ;Main_B1.c: 433: char ok = 0;
  6487                           
  6488                           ;incstack = 0
  6489                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
  6490  0BEE  01F6               	clrf	getMain_LoadOK@ok
  6491                           
  6492                           ;Main_B1.c: 436: ok = getLightsControl_OK() == 1 ? 1 : 0;
  6493  0BEF  158A  23BC         	fcall	_getLightsControl_OK
  6494  0BF1  3A01               	xorlw	1
  6495  0BF2  3000               	movlw	0
  6496  0BF3  1903               	skipnz
  6497  0BF4  3001               	movlw	1
  6498  0BF5  00F5               	movwf	??_getMain_LoadOK
  6499  0BF6  0875               	movf	??_getMain_LoadOK,w
  6500  0BF7  00F6               	movwf	getMain_LoadOK@ok
  6501                           
  6502                           ;Main_B1.c: 441: return ok;
  6503  0BF8  0876               	movf	getMain_LoadOK@ok,w
  6504  0BF9  0008               	return
  6505  0BFA                     __end_of_getMain_LoadOK:	
  6506                           
  6507                           	psect	text35
  6508  0BBC                     __ptext35:	
  6509 ;; *************** function _getLightsControl_OK *****************
  6510 ;; Defined at:
  6511 ;;		line 260 in file "../src/TriacRelay_B1.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;		None
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;  loadok          1    4[COMMON] unsigned char 
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  1    wreg      unsigned char 
  6518 ;; Registers used:
  6519 ;;		wreg, status,2
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6525 ;;      Params:         0       0       0       0
  6526 ;;      Locals:         1       0       0       0
  6527 ;;      Temps:          0       0       0       0
  6528 ;;      Totals:         1       0       0       0
  6529 ;;Total ram usage:        1 bytes
  6530 ;; Hardware stack levels used:    1
  6531 ;; Hardware stack levels required when called:    2
  6532 ;; This function calls:
  6533 ;;		Nothing
  6534 ;; This function is called by:
  6535 ;;		_getMain_LoadOK
  6536 ;; This function uses a non-reentrant model
  6537 ;;
  6538                           
  6539                           
  6540                           ;psect for function _getLightsControl_OK
  6541  0BBC                     _getLightsControl_OK:	
  6542                           
  6543                           ;TriacRelay_B1.c: 261: char loadok = LightsControl.LoadOK == 1 ? 1 : 0;
  6544                           
  6545                           ;incstack = 0
  6546                           ; Regs used in _getLightsControl_OK: [wreg+status,2]
  6547  0BBC  3000               	movlw	0
  6548  0BBD  1283               	bcf	3,5	;RP0=0, select bank0
  6549  0BBE  1303               	bcf	3,6	;RP1=0, select bank0
  6550  0BBF  193B               	btfsc	_LightsControl,2
  6551  0BC0  3001               	movlw	1
  6552  0BC1  00F4               	movwf	getLightsControl_OK@loadok
  6553                           
  6554                           ;TriacRelay_B1.c: 262: return loadok;
  6555  0BC2  0874               	movf	getLightsControl_OK@loadok,w
  6556  0BC3  0008               	return
  6557  0BC4                     __end_of_getLightsControl_OK:	
  6558                           
  6559                           	psect	text36
  6560  0C70                     __ptext36:	
  6561 ;; *************** function _getMain_Lights_Count *****************
  6562 ;; Defined at:
  6563 ;;		line 402 in file "../src/Main_B1.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;		None
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  status1         1    3[BANK0 ] unsigned char 
  6568 ;;  status3         1    2[BANK0 ] unsigned char 
  6569 ;;  status2         1    1[BANK0 ] unsigned char 
  6570 ;;  count           1    0[BANK0 ] unsigned char 
  6571 ;; Return value:  Size  Location     Type
  6572 ;;                  1    wreg      unsigned char 
  6573 ;; Registers used:
  6574 ;;		wreg, status,2, status,0
  6575 ;; Tracked objects:
  6576 ;;		On entry : 0/0
  6577 ;;		On exit  : 0/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6580 ;;      Params:         0       0       0       0
  6581 ;;      Locals:         0       4       0       0
  6582 ;;      Temps:          1       0       0       0
  6583 ;;      Totals:         1       4       0       0
  6584 ;;Total ram usage:        5 bytes
  6585 ;; Hardware stack levels used:    1
  6586 ;; Hardware stack levels required when called:    2
  6587 ;; This function calls:
  6588 ;;		Nothing
  6589 ;; This function is called by:
  6590 ;;		_Load_Main
  6591 ;; This function uses a non-reentrant model
  6592 ;;
  6593                           
  6594                           
  6595                           ;psect for function _getMain_Lights_Count
  6596  0C70                     _getMain_Lights_Count:	
  6597                           
  6598                           ;Main_B1.c: 403: char status1 = 0, status2 = 0, status3 = 0, count = 0;
  6599                           
  6600                           ;incstack = 0
  6601                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  6602  0C70  1283               	bcf	3,5	;RP0=0, select bank0
  6603  0C71  1303               	bcf	3,6	;RP1=0, select bank0
  6604  0C72  01DE               	clrf	getMain_Lights_Count@status1
  6605  0C73  01DC               	clrf	getMain_Lights_Count@status2
  6606  0C74  01DD               	clrf	getMain_Lights_Count@status3
  6607  0C75  01DB               	clrf	getMain_Lights_Count@count
  6608                           
  6609                           ;Main_B1.c: 419: status1 = Lights1.Loop == 1 ? 1 : 0;
  6610  0C76  3000               	movlw	0
  6611  0C77  18C9               	btfsc	_Lights1+1,1
  6612  0C78  3001               	movlw	1
  6613  0C79  00DE               	movwf	getMain_Lights_Count@status1
  6614                           
  6615                           ;Main_B1.c: 428: return count = (status1 + status2 + status3);
  6616  0C7A  085C               	movf	getMain_Lights_Count@status2,w
  6617  0C7B  075E               	addwf	getMain_Lights_Count@status1,w
  6618  0C7C  00F4               	movwf	??_getMain_Lights_Count
  6619  0C7D  085D               	movf	getMain_Lights_Count@status3,w
  6620  0C7E  0774               	addwf	??_getMain_Lights_Count,w
  6621  0C7F  00DB               	movwf	getMain_Lights_Count@count
  6622  0C80  0008               	return
  6623  0C81                     __end_of_getMain_Lights_Count:	
  6624                           
  6625                           	psect	text37
  6626  0B99                     __ptext37:	
  6627 ;; *************** function _Load_Initialization *****************
  6628 ;; Defined at:
  6629 ;;		line 9 in file "../src/OverLoad_B1.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;		None
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;		None
  6634 ;; Return value:  Size  Location     Type
  6635 ;;		None               void
  6636 ;; Registers used:
  6637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6643 ;;      Params:         0       0       0       0
  6644 ;;      Locals:         0       0       0       0
  6645 ;;      Temps:          0       0       0       0
  6646 ;;      Totals:         0       0       0       0
  6647 ;;Total ram usage:        0 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    3
  6650 ;; This function calls:
  6651 ;;		_setLoad_AH_AL_Restore
  6652 ;; This function is called by:
  6653 ;;		_main
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           
  6658                           ;psect for function _Load_Initialization
  6659  0B99                     _Load_Initialization:	
  6660                           
  6661                           ;OverLoad_B1.c: 10: Load.OK = 1;
  6662                           
  6663                           ;incstack = 0
  6664                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6665  0B99  1683               	bsf	3,5	;RP0=1, select bank1
  6666  0B9A  1303               	bcf	3,6	;RP1=0, select bank1
  6667  0B9B  17CF               	bsf	_Load^(0+128),7
  6668                           
  6669                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6670  0B9C  158A  2508         	fcall	_setLoad_AH_AL_Restore
  6671  0B9E  0008               	return
  6672  0B9F                     __end_of_Load_Initialization:	
  6673                           
  6674                           	psect	text38
  6675  0D08                     __ptext38:	
  6676 ;; *************** function _setLoad_AH_AL_Restore *****************
  6677 ;; Defined at:
  6678 ;;		line 284 in file "../src/OverLoad_B1.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;		None
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;  i               1    5[COMMON] unsigned char 
  6683 ;; Return value:  Size  Location     Type
  6684 ;;		None               void
  6685 ;; Registers used:
  6686 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6692 ;;      Params:         0       0       0       0
  6693 ;;      Locals:         1       0       0       0
  6694 ;;      Temps:          1       0       0       0
  6695 ;;      Totals:         2       0       0       0
  6696 ;;Total ram usage:        2 bytes
  6697 ;; Hardware stack levels used:    1
  6698 ;; Hardware stack levels required when called:    2
  6699 ;; This function calls:
  6700 ;;		Nothing
  6701 ;; This function is called by:
  6702 ;;		_Load_Initialization
  6703 ;;		_Load_Main
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           
  6708                           ;psect for function _setLoad_AH_AL_Restore
  6709  0D08                     _setLoad_AH_AL_Restore:	
  6710                           
  6711                           ;OverLoad_B1.c: 285: char i;
  6712                           ;OverLoad_B1.c: 286: for (i = 0; i < 5; i++) {
  6713                           
  6714                           ;incstack = 0
  6715                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6716  0D08  01F5               	clrf	setLoad_AH_AL_Restore@i
  6717  0D09                     L20:	
  6718  0D09  3005               	movlw	5
  6719  0D0A  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6720  0D0B  1803               	btfsc	3,0
  6721  0D0C  0008               	return
  6722                           
  6723                           ;OverLoad_B1.c: 287: Load.AH[i] = 0;
  6724  0D0D  0875               	movf	setLoad_AH_AL_Restore@i,w
  6725  0D0E  3ED9               	addlw	(_Load+10)& (0+255)
  6726  0D0F  0084               	movwf	4
  6727  0D10  1383               	bcf	3,7	;select IRP bank1
  6728  0D11  0180               	clrf	0
  6729                           
  6730                           ;OverLoad_B1.c: 288: Load.AL[i] = 0xff;
  6731  0D12  30FF               	movlw	255
  6732  0D13  00F4               	movwf	??_setLoad_AH_AL_Restore
  6733  0D14  0875               	movf	setLoad_AH_AL_Restore@i,w
  6734  0D15  3EDE               	addlw	(_Load+15)& (0+255)
  6735  0D16  0084               	movwf	4
  6736  0D17  0874               	movf	??_setLoad_AH_AL_Restore,w
  6737  0D18  0080               	movwf	0
  6738  0D19  3001               	movlw	1
  6739  0D1A  00F4               	movwf	??_setLoad_AH_AL_Restore
  6740  0D1B  0874               	movf	??_setLoad_AH_AL_Restore,w
  6741  0D1C  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6742  0D1D  2D09               	goto	L20
  6743  0D1E                     __end_of_setLoad_AH_AL_Restore:	
  6744                           
  6745                           	psect	text39
  6746  0EDB                     __ptext39:	
  6747 ;; *************** function _Lights_Main *****************
  6748 ;; Defined at:
  6749 ;;		line 54 in file "../src/TriacRelay_B1.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;		None
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;		None
  6754 ;; Return value:  Size  Location     Type
  6755 ;;		None               void
  6756 ;; Registers used:
  6757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6763 ;;      Params:         0       0       0       0
  6764 ;;      Locals:         0       2       0       0
  6765 ;;      Temps:          0       3       0       0
  6766 ;;      Totals:         0       5       0       0
  6767 ;;Total ram usage:        5 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    6
  6770 ;; This function calls:
  6771 ;;		_Lights_Close
  6772 ;;		_Lights_Control
  6773 ;;		_getLoad_OK
  6774 ;;		_getMain_All_Error_Status
  6775 ;;		_getMain_LightsStatus
  6776 ;;		_setLights_Main
  6777 ;; This function is called by:
  6778 ;;		_main
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           
  6783                           ;psect for function _Lights_Main
  6784  0EDB                     _Lights_Main:	
  6785                           
  6786                           ;TriacRelay_B1.c: 57: if (getMain_All_Error_Status(0) == 0) {
  6787                           
  6788                           ;incstack = 0
  6789                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6790  0EDB  3000               	movlw	0
  6791  0EDC  158A  27A6  158A   	fcall	_getMain_All_Error_Status
  6792  0EDF  3800               	iorlw	0
  6793  0EE0  1D03               	skipz
  6794  0EE1  2F08               	goto	l1200
  6795                           
  6796                           ;TriacRelay_B1.c: 58: if (LightsControl.LoadOK == 1) {
  6797  0EE2  1283               	bcf	3,5	;RP0=0, select bank0
  6798  0EE3  1303               	bcf	3,6	;RP1=0, select bank0
  6799  0EE4  1D3B               	btfss	_LightsControl,2
  6800  0EE5  2F0B               	goto	l4897
  6801                           
  6802                           ;TriacRelay_B1.c: 59: LightsControl.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus()
      +                           == 0 ? 0 : LightsControl.LoadOK;
  6803  0EE6  158A  23AC  158A   	fcall	_getLoad_OK
  6804  0EE9  3A01               	xorlw	1
  6805  0EEA  1903               	skipnz
  6806  0EEB  2EFF               	goto	l4893
  6807  0EEC  158A  2607  158A   	fcall	_getMain_LightsStatus
  6808  0EEF  3A00               	xorlw	0
  6809  0EF0  1903               	skipnz
  6810  0EF1  2EFF               	goto	l4893
  6811  0EF2  1283               	bcf	3,5	;RP0=0, select bank0
  6812  0EF3  1303               	bcf	3,6	;RP1=0, select bank0
  6813  0EF4  0C3B               	rrf	_LightsControl,w
  6814  0EF5  00E7               	movwf	??_Lights_Main
  6815  0EF6  0C67               	rrf	??_Lights_Main,w
  6816  0EF7  3901               	andlw	1
  6817  0EF8  00E8               	movwf	??_Lights_Main+1
  6818  0EF9  01E9               	clrf	??_Lights_Main+2
  6819  0EFA  0868               	movf	??_Lights_Main+1,w
  6820  0EFB  00EA               	movwf	_Lights_Main$4852
  6821  0EFC  0869               	movf	??_Lights_Main+2,w
  6822  0EFD  00EB               	movwf	_Lights_Main$4852+1
  6823  0EFE  2F03               	goto	l4895
  6824  0EFF                     l4893:	
  6825  0EFF  1283               	bcf	3,5	;RP0=0, select bank0
  6826  0F00  1303               	bcf	3,6	;RP1=0, select bank0
  6827  0F01  01EA               	clrf	_Lights_Main$4852
  6828  0F02  01EB               	clrf	_Lights_Main$4852+1
  6829  0F03                     l4895:	
  6830  0F03  086A               	movf	_Lights_Main$4852,w
  6831  0F04  113B               	bcf	_LightsControl,2
  6832  0F05  1D03               	skipz
  6833  0F06  153B               	bsf	_LightsControl,2
  6834                           
  6835                           ;TriacRelay_B1.c: 60: }
  6836                           ;TriacRelay_B1.c: 61: } else {
  6837  0F07  2F0B               	goto	l4897
  6838  0F08                     l1200:	
  6839                           
  6840                           ;TriacRelay_B1.c: 62: LightsControl.LoadOK = 0;
  6841  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  6842  0F09  1303               	bcf	3,6	;RP1=0, select bank0
  6843  0F0A  113B               	bcf	_LightsControl,2
  6844  0F0B                     l4897:	
  6845                           
  6846                           ;TriacRelay_B1.c: 63: }
  6847                           ;TriacRelay_B1.c: 67: setLights_Main(1);
  6848  0F0B  3001               	movlw	1
  6849  0F0C  158A  258B  158A   	fcall	_setLights_Main
  6850                           
  6851                           ;TriacRelay_B1.c: 68: Lights_Control(1);
  6852  0F0F  3001               	movlw	1
  6853  0F10  118A  266E  158A   	fcall	_Lights_Control
  6854                           
  6855                           ;TriacRelay_B1.c: 81: Lights_Close();
  6856  0F13  158A  24DE         	fcall	_Lights_Close
  6857  0F15  0008               	return
  6858  0F16                     __end_of_Lights_Main:	
  6859                           
  6860                           	psect	text40
  6861  0D8B                     __ptext40:	
  6862 ;; *************** function _setLights_Main *****************
  6863 ;; Defined at:
  6864 ;;		line 93 in file "../src/TriacRelay_B1.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  lights          1    wreg     unsigned char 
  6867 ;; Auto vars:     Size  Location     Type
  6868 ;;  lights          1   11[BANK0 ] unsigned char 
  6869 ;; Return value:  Size  Location     Type
  6870 ;;		None               void
  6871 ;; Registers used:
  6872 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6873 ;; Tracked objects:
  6874 ;;		On entry : 0/0
  6875 ;;		On exit  : 0/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6878 ;;      Params:         0       0       0       0
  6879 ;;      Locals:         0       1       0       0
  6880 ;;      Temps:          0       0       0       0
  6881 ;;      Totals:         0       1       0       0
  6882 ;;Total ram usage:        1 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:    5
  6885 ;; This function calls:
  6886 ;;		_LightsPointSelect
  6887 ;;		_setLights
  6888 ;; This function is called by:
  6889 ;;		_Lights_Main
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           
  6894                           ;psect for function _setLights_Main
  6895  0D8B                     _setLights_Main:	
  6896                           
  6897                           ;incstack = 0
  6898                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6899                           ;setLights_Main@lights stored from wreg
  6900  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  6901  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  6902  0D8D  00E6               	movwf	setLights_Main@lights
  6903                           
  6904                           ;TriacRelay_B1.c: 94: LightsPointSelect(lights);
  6905  0D8E  0866               	movf	setLights_Main@lights,w
  6906  0D8F  158A  23CC  158A   	fcall	_LightsPointSelect
  6907                           
  6908                           ;TriacRelay_B1.c: 95: if (Lights->GO == 0) {
  6909  0D92  0878               	movf	_Lights,w
  6910  0D93  0084               	movwf	4
  6911  0D94  1383               	bcf	3,7	;select IRP bank0
  6912  0D95  1880               	btfsc	0,1
  6913  0D96  0008               	return
  6914                           
  6915                           ;TriacRelay_B1.c: 96: if (Lights->Trigger == 1) {
  6916  0D97  0878               	movf	_Lights,w
  6917  0D98  0084               	movwf	4
  6918  0D99  1D80               	btfss	0,3
  6919  0D9A  0008               	return
  6920                           
  6921                           ;TriacRelay_B1.c: 97: if (LightsControl.LoadOK == 0) {
  6922  0D9B  1283               	bcf	3,5	;RP0=0, select bank0
  6923  0D9C  1303               	bcf	3,6	;RP1=0, select bank0
  6924  0D9D  193B               	btfsc	_LightsControl,2
  6925  0D9E  0008               	return
  6926                           
  6927                           ;TriacRelay_B1.c: 98: Lights->Trigger = 0;
  6928  0D9F  0878               	movf	_Lights,w
  6929  0DA0  0084               	movwf	4
  6930  0DA1  1180               	bcf	0,3
  6931                           
  6932                           ;TriacRelay_B1.c: 100: if (Lights->Switch == 1) {
  6933  0DA2  0878               	movf	_Lights,w
  6934  0DA3  0084               	movwf	4
  6935  0DA4  1E00               	btfss	0,4
  6936  0DA5  2DAC               	goto	l4509
  6937                           
  6938                           ;TriacRelay_B1.c: 101: setLights(lights, 1);
  6939  0DA6  01E3               	clrf	setLights@status
  6940  0DA7  0AE3               	incf	setLights@status,f
  6941  0DA8  0866               	movf	setLights_Main@lights,w
  6942  0DA9  118A  273F         	fcall	_setLights
  6943                           
  6944                           ;TriacRelay_B1.c: 102: } else {
  6945  0DAB  0008               	return
  6946  0DAC                     l4509:	
  6947                           
  6948                           ;TriacRelay_B1.c: 103: setLights(lights, 0);
  6949  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  6950  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  6951  0DAE  01E3               	clrf	setLights@status
  6952  0DAF  0866               	movf	setLights_Main@lights,w
  6953  0DB0  118A  273F         	fcall	_setLights
  6954  0DB2  0008               	return
  6955  0DB3                     __end_of_setLights_Main:	
  6956                           
  6957                           	psect	text41
  6958  073F                     __ptext41:	
  6959 ;; *************** function _setLights *****************
  6960 ;; Defined at:
  6961 ;;		line 111 in file "../src/TriacRelay_B1.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;  lights          1    wreg     unsigned char 
  6964 ;;  status          1    8[BANK0 ] unsigned char 
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;  lights          1   10[BANK0 ] unsigned char 
  6967 ;; Return value:  Size  Location     Type
  6968 ;;		None               void
  6969 ;; Registers used:
  6970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6976 ;;      Params:         0       1       0       0
  6977 ;;      Locals:         0       1       0       0
  6978 ;;      Temps:          0       1       0       0
  6979 ;;      Totals:         0       3       0       0
  6980 ;;Total ram usage:        3 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    4
  6983 ;; This function calls:
  6984 ;;		_LightsPointSelect
  6985 ;;		_getMain_All_Error_Status
  6986 ;;		_setLights_Line
  6987 ;; This function is called by:
  6988 ;;		_setLights_Main
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           
  6993                           ;psect for function _setLights
  6994  073F                     _setLights:	
  6995                           
  6996                           ;incstack = 0
  6997                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6998                           ;setLights@lights stored from wreg
  6999  073F  1283               	bcf	3,5	;RP0=0, select bank0
  7000  0740  1303               	bcf	3,6	;RP1=0, select bank0
  7001  0741  00E5               	movwf	setLights@lights
  7002                           
  7003                           ;TriacRelay_B1.c: 113: LightsPointSelect(lights);
  7004  0742  0865               	movf	setLights@lights,w
  7005  0743  158A  23CC  118A   	fcall	_LightsPointSelect
  7006                           
  7007                           ;TriacRelay_B1.c: 116: LightsControl.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
  7008  0746  3000               	movlw	0
  7009  0747  158A  27A6  118A   	fcall	_getMain_All_Error_Status
  7010  074A  3A00               	xorlw	0
  7011  074B  3000               	movlw	0
  7012  074C  1903               	skipnz
  7013  074D  3001               	movlw	1
  7014  074E  1283               	bcf	3,5	;RP0=0, select bank0
  7015  074F  1303               	bcf	3,6	;RP1=0, select bank0
  7016  0750  00E4               	movwf	??_setLights
  7017  0751  0DE4               	rlf	??_setLights,f
  7018  0752  0DE4               	rlf	??_setLights,f
  7019  0753  083B               	movf	_LightsControl,w
  7020  0754  0664               	xorwf	??_setLights,w
  7021  0755  39FB               	andlw	-5
  7022  0756  0664               	xorwf	??_setLights,w
  7023  0757  00BB               	movwf	_LightsControl
  7024                           
  7025                           ;TriacRelay_B1.c: 120: Lights->GO = 1;
  7026  0758  0878               	movf	_Lights,w
  7027  0759  0084               	movwf	4
  7028  075A  1383               	bcf	3,7	;select IRP bank0
  7029  075B  1480               	bsf	0,1
  7030                           
  7031                           ;TriacRelay_B1.c: 121: if (status == 1) {
  7032  075C  0863               	movf	setLights@status,w
  7033  075D  3A01               	xorlw	1
  7034  075E  1D03               	skipz
  7035  075F  2F7D               	goto	l4269
  7036                           
  7037                           ;TriacRelay_B1.c: 122: if (Lights->Status == 0) {
  7038  0760  0878               	movf	_Lights,w
  7039  0761  0084               	movwf	4
  7040  0762  1900               	btfsc	0,2
  7041  0763  2F98               	goto	l4273
  7042                           
  7043                           ;TriacRelay_B1.c: 123: Lights->Status = 1;
  7044  0764  0878               	movf	_Lights,w
  7045  0765  0084               	movwf	4
  7046  0766  1500               	bsf	0,2
  7047                           
  7048                           ;TriacRelay_B1.c: 124: Lights->Loop = 1;
  7049  0767  0A78               	incf	_Lights,w
  7050  0768  0084               	movwf	4
  7051  0769  1480               	bsf	0,1
  7052                           
  7053                           ;TriacRelay_B1.c: 125: Lights->RelayValue = 10;
  7054  076A  300A               	movlw	10
  7055  076B  00E4               	movwf	??_setLights
  7056  076C  0878               	movf	_Lights,w
  7057  076D  3E06               	addlw	6
  7058  076E  0084               	movwf	4
  7059  076F  0864               	movf	??_setLights,w
  7060  0770  0080               	movwf	0
  7061                           
  7062                           ;TriacRelay_B1.c: 126: Lights->TriacValue = 13;
  7063  0771  300D               	movlw	13
  7064  0772  00E4               	movwf	??_setLights
  7065  0773  0878               	movf	_Lights,w
  7066  0774  3E04               	addlw	4
  7067  0775  0084               	movwf	4
  7068  0776  0864               	movf	??_setLights,w
  7069  0777  0080               	movwf	0
  7070                           
  7071                           ;TriacRelay_B1.c: 127: setLights_Line(lights);
  7072  0778  0865               	movf	setLights@lights,w
  7073  0779  158A  23E2  118A   	fcall	_setLights_Line
  7074                           
  7075                           ;TriacRelay_B1.c: 128: }
  7076                           ;TriacRelay_B1.c: 129: } else {
  7077  077C  2F98               	goto	l4273
  7078  077D                     l4269:	
  7079                           
  7080                           ;TriacRelay_B1.c: 130: if (Lights->Status == 1) {
  7081  077D  0878               	movf	_Lights,w
  7082  077E  0084               	movwf	4
  7083  077F  1383               	bcf	3,7	;select IRP bank0
  7084  0780  1D00               	btfss	0,2
  7085  0781  2F98               	goto	l4273
  7086                           
  7087                           ;TriacRelay_B1.c: 131: Lights->Status = 0;
  7088  0782  0878               	movf	_Lights,w
  7089  0783  0084               	movwf	4
  7090  0784  1100               	bcf	0,2
  7091                           
  7092                           ;TriacRelay_B1.c: 132: Lights->Loop = 0;
  7093  0785  0A78               	incf	_Lights,w
  7094  0786  0084               	movwf	4
  7095  0787  1080               	bcf	0,1
  7096                           
  7097                           ;TriacRelay_B1.c: 133: Lights->RelayValue = 4;
  7098  0788  3004               	movlw	4
  7099  0789  1283               	bcf	3,5	;RP0=0, select bank0
  7100  078A  1303               	bcf	3,6	;RP1=0, select bank0
  7101  078B  00E4               	movwf	??_setLights
  7102  078C  0878               	movf	_Lights,w
  7103  078D  3E06               	addlw	6
  7104  078E  0084               	movwf	4
  7105  078F  0864               	movf	??_setLights,w
  7106  0790  0080               	movwf	0
  7107                           
  7108                           ;TriacRelay_B1.c: 134: Lights->TriacValue = 7;
  7109  0791  3007               	movlw	7
  7110  0792  00E4               	movwf	??_setLights
  7111  0793  0878               	movf	_Lights,w
  7112  0794  3E04               	addlw	4
  7113  0795  0084               	movwf	4
  7114  0796  0864               	movf	??_setLights,w
  7115  0797  0080               	movwf	0
  7116  0798                     l4273:	
  7117                           
  7118                           ;TriacRelay_B1.c: 135: }
  7119                           ;TriacRelay_B1.c: 136: }
  7120                           ;TriacRelay_B1.c: 138: if (lights == 1) {
  7121  0798  1283               	bcf	3,5	;RP0=0, select bank0
  7122  0799  1303               	bcf	3,6	;RP1=0, select bank0
  7123  079A  0865               	movf	setLights@lights,w
  7124  079B  3A01               	xorlw	1
  7125  079C  1D03               	skipz
  7126  079D  0008               	return
  7127                           
  7128                           ;TriacRelay_B1.c: 139: RB2 = 1;
  7129  079E  1506               	bsf	6,2	;volatile
  7130  079F  0008               	return
  7131  07A0                     __end_of_setLights:	
  7132                           
  7133                           	psect	text42
  7134  0BE2                     __ptext42:	
  7135 ;; *************** function _setLights_Line *****************
  7136 ;; Defined at:
  7137 ;;		line 221 in file "../src/TriacRelay_B1.c"
  7138 ;; Parameters:    Size  Location     Type
  7139 ;;  lights          1    wreg     unsigned char 
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;  lights          1    6[COMMON] unsigned char 
  7142 ;; Return value:  Size  Location     Type
  7143 ;;		None               void
  7144 ;; Registers used:
  7145 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7146 ;; Tracked objects:
  7147 ;;		On entry : 0/0
  7148 ;;		On exit  : 0/0
  7149 ;;		Unchanged: 0/0
  7150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7151 ;;      Params:         0       0       0       0
  7152 ;;      Locals:         1       0       0       0
  7153 ;;      Temps:          0       0       0       0
  7154 ;;      Totals:         1       0       0       0
  7155 ;;Total ram usage:        1 bytes
  7156 ;; Hardware stack levels used:    1
  7157 ;; Hardware stack levels required when called:    3
  7158 ;; This function calls:
  7159 ;;		_LightsPointSelect
  7160 ;; This function is called by:
  7161 ;;		_setLights
  7162 ;; This function uses a non-reentrant model
  7163 ;;
  7164                           
  7165                           
  7166                           ;psect for function _setLights_Line
  7167  0BE2                     _setLights_Line:	
  7168                           
  7169                           ;incstack = 0
  7170                           ; Regs used in _setLights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7171                           ;setLights_Line@lights stored from wreg
  7172  0BE2  00F6               	movwf	setLights_Line@lights
  7173                           
  7174                           ;TriacRelay_B1.c: 223: Lights1.Line = 0;
  7175  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  7176  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  7177  0BE5  1049               	bcf	_Lights1+1,0
  7178                           
  7179                           ;TriacRelay_B1.c: 231: LightsPointSelect(lights);
  7180  0BE6  0876               	movf	setLights_Line@lights,w
  7181  0BE7  158A  23CC         	fcall	_LightsPointSelect
  7182                           
  7183                           ;TriacRelay_B1.c: 232: Lights->Line = 1;
  7184  0BE9  0A78               	incf	_Lights,w
  7185  0BEA  0084               	movwf	4
  7186  0BEB  1383               	bcf	3,7	;select IRP bank0
  7187  0BEC  1400               	bsf	0,0
  7188  0BED  0008               	return
  7189  0BEE                     __end_of_setLights_Line:	
  7190                           
  7191                           	psect	text43
  7192  0FA6                     __ptext43:	
  7193 ;; *************** function _getMain_All_Error_Status *****************
  7194 ;; Defined at:
  7195 ;;		line 361 in file "../src/Main_B1.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;  command         1    wreg     unsigned char 
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;  command         1    6[BANK0 ] unsigned char 
  7200 ;;  status          1    7[BANK0 ] unsigned char 
  7201 ;; Return value:  Size  Location     Type
  7202 ;;                  1    wreg      unsigned char 
  7203 ;; Registers used:
  7204 ;;		wreg, status,2, status,0, pclath, cstack
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7210 ;;      Params:         0       0       0       0
  7211 ;;      Locals:         0       8       0       0
  7212 ;;      Temps:          1       0       0       0
  7213 ;;      Totals:         1       8       0       0
  7214 ;;Total ram usage:        9 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; Hardware stack levels required when called:    3
  7217 ;; This function calls:
  7218 ;;		_getCDS_Status
  7219 ;; This function is called by:
  7220 ;;		_Load_Main
  7221 ;;		_setTemp_Main
  7222 ;;		_PIR_Main
  7223 ;;		_setSYSC_Main
  7224 ;;		_Lights_Main
  7225 ;;		_setLights
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           
  7230                           ;psect for function _getMain_All_Error_Status
  7231  0FA6                     _getMain_All_Error_Status:	
  7232                           
  7233                           ;incstack = 0
  7234                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0+pclath+cstack]
  7235                           ;getMain_All_Error_Status@command stored from wreg
  7236  0FA6  1283               	bcf	3,5	;RP0=0, select bank0
  7237  0FA7  1303               	bcf	3,6	;RP1=0, select bank0
  7238  0FA8  00E1               	movwf	getMain_All_Error_Status@command
  7239                           
  7240                           ;Main_B1.c: 362: char status = 0;
  7241  0FA9  01E2               	clrf	getMain_All_Error_Status@status
  7242                           
  7243                           ;Main_B1.c: 365: if (status == 0 && command != 1) {
  7244  0FAA  08E2               	movf	getMain_All_Error_Status@status,f
  7245  0FAB  1D03               	skipz
  7246  0FAC  2FB5               	goto	l4105
  7247  0FAD  0861               	movf	getMain_All_Error_Status@command,w
  7248  0FAE  3A01               	xorlw	1
  7249  0FAF  1903               	skipnz
  7250  0FB0  2FB5               	goto	l4105
  7251                           
  7252                           ;Main_B1.c: 366: status = SYSC.ERROR == 1 ? 1 : 0;
  7253  0FB1  3000               	movlw	0
  7254  0FB2  18A8               	btfsc	_SYSC,1
  7255  0FB3  3001               	movlw	1
  7256  0FB4  00E2               	movwf	getMain_All_Error_Status@status
  7257  0FB5                     l4105:	
  7258                           
  7259                           ;Main_B1.c: 367: }
  7260                           ;Main_B1.c: 373: if (status == 0 && command != 2) {
  7261  0FB5  08E2               	movf	getMain_All_Error_Status@status,f
  7262  0FB6  1D03               	skipz
  7263  0FB7  2FC9               	goto	l4115
  7264  0FB8  0861               	movf	getMain_All_Error_Status@command,w
  7265  0FB9  3A02               	xorlw	2
  7266  0FBA  1903               	skipnz
  7267  0FBB  2FC9               	goto	l4115
  7268                           
  7269                           ;Main_B1.c: 374: status = Temp.ERROR == 1 ? 2 : 0;
  7270  0FBC  18BC               	btfsc	_Temp,1
  7271  0FBD  2FC1               	goto	l4113
  7272  0FBE  01DB               	clrf	_getMain_All_Error_Status$2483
  7273  0FBF  01DC               	clrf	_getMain_All_Error_Status$2483+1
  7274  0FC0  2FC5               	goto	l599
  7275  0FC1                     l4113:	
  7276  0FC1  3002               	movlw	2
  7277  0FC2  00DB               	movwf	_getMain_All_Error_Status$2483
  7278  0FC3  3000               	movlw	0
  7279  0FC4  00DC               	movwf	_getMain_All_Error_Status$2483+1
  7280  0FC5                     l599:	
  7281  0FC5  085B               	movf	_getMain_All_Error_Status$2483,w
  7282  0FC6  00F5               	movwf	??_getMain_All_Error_Status
  7283  0FC7  0875               	movf	??_getMain_All_Error_Status,w
  7284  0FC8  00E2               	movwf	getMain_All_Error_Status@status
  7285  0FC9                     l4115:	
  7286                           
  7287                           ;Main_B1.c: 375: }
  7288                           ;Main_B1.c: 380: if (status == 0 && command != 3) {
  7289  0FC9  08E2               	movf	getMain_All_Error_Status@status,f
  7290  0FCA  1D03               	skipz
  7291  0FCB  2FE2               	goto	l4125
  7292  0FCC  0861               	movf	getMain_All_Error_Status@command,w
  7293  0FCD  3A03               	xorlw	3
  7294  0FCE  1903               	skipnz
  7295  0FCF  2FE2               	goto	l4125
  7296                           
  7297                           ;Main_B1.c: 381: status = Load.ERROR == 1 ? 3 : 0;
  7298  0FD0  1683               	bsf	3,5	;RP0=1, select bank1
  7299  0FD1  1303               	bcf	3,6	;RP1=0, select bank1
  7300  0FD2  1ACF               	btfsc	_Load^(0+128),5
  7301  0FD3  2FD9               	goto	l4123
  7302  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  7303  0FD5  1303               	bcf	3,6	;RP1=0, select bank0
  7304  0FD6  01DD               	clrf	_getMain_All_Error_Status$2492
  7305  0FD7  01DE               	clrf	_getMain_All_Error_Status$2492+1
  7306  0FD8  2FDE               	goto	l604
  7307  0FD9                     l4123:	
  7308  0FD9  3003               	movlw	3
  7309  0FDA  1283               	bcf	3,5	;RP0=0, select bank0
  7310  0FDB  00DD               	movwf	_getMain_All_Error_Status$2492
  7311  0FDC  3000               	movlw	0
  7312  0FDD  00DE               	movwf	_getMain_All_Error_Status$2492+1
  7313  0FDE                     l604:	
  7314  0FDE  085D               	movf	_getMain_All_Error_Status$2492,w
  7315  0FDF  00F5               	movwf	??_getMain_All_Error_Status
  7316  0FE0  0875               	movf	??_getMain_All_Error_Status,w
  7317  0FE1  00E2               	movwf	getMain_All_Error_Status@status
  7318  0FE2                     l4125:	
  7319                           
  7320                           ;Main_B1.c: 382: }
  7321                           ;Main_B1.c: 394: if (status == 0 && command != 5) {
  7322  0FE2  08E2               	movf	getMain_All_Error_Status@status,f
  7323  0FE3  1D03               	skipz
  7324  0FE4  2FFE               	goto	l605
  7325  0FE5  0861               	movf	getMain_All_Error_Status@command,w
  7326  0FE6  3A05               	xorlw	5
  7327  0FE7  1903               	skipnz
  7328  0FE8  2FFE               	goto	l605
  7329                           
  7330                           ;Main_B1.c: 395: status = getCDS_Status() == 0 ? 5 : 0;
  7331  0FE9  158A  23B4  158A   	fcall	_getCDS_Status
  7332  0FEC  3A00               	xorlw	0
  7333  0FED  1903               	skipnz
  7334  0FEE  2FF4               	goto	l4133
  7335  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  7336  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  7337  0FF1  01DF               	clrf	_getMain_All_Error_Status$2494
  7338  0FF2  01E0               	clrf	_getMain_All_Error_Status$2494+1
  7339  0FF3  2FFA               	goto	l609
  7340  0FF4                     l4133:	
  7341  0FF4  3005               	movlw	5
  7342  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  7343  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  7344  0FF7  00DF               	movwf	_getMain_All_Error_Status$2494
  7345  0FF8  3000               	movlw	0
  7346  0FF9  00E0               	movwf	_getMain_All_Error_Status$2494+1
  7347  0FFA                     l609:	
  7348  0FFA  085F               	movf	_getMain_All_Error_Status$2494,w
  7349  0FFB  00F5               	movwf	??_getMain_All_Error_Status
  7350  0FFC  0875               	movf	??_getMain_All_Error_Status,w
  7351  0FFD  00E2               	movwf	getMain_All_Error_Status@status
  7352  0FFE                     l605:	
  7353                           
  7354                           ;Main_B1.c: 396: }
  7355                           ;Main_B1.c: 398: return status;
  7356  0FFE  0862               	movf	getMain_All_Error_Status@status,w
  7357  0FFF  0008               	return
  7358  1000                     __end_of_getMain_All_Error_Status:	
  7359                           
  7360                           	psect	text44
  7361  0BB4                     __ptext44:	
  7362 ;; *************** function _getCDS_Status *****************
  7363 ;; Defined at:
  7364 ;;		line 40 in file "../src/CDS_B1.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;		None
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;  status          1    4[COMMON] unsigned char 
  7369 ;; Return value:  Size  Location     Type
  7370 ;;                  1    wreg      unsigned char 
  7371 ;; Registers used:
  7372 ;;		wreg, status,2
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7378 ;;      Params:         0       0       0       0
  7379 ;;      Locals:         1       0       0       0
  7380 ;;      Temps:          0       0       0       0
  7381 ;;      Totals:         1       0       0       0
  7382 ;;Total ram usage:        1 bytes
  7383 ;; Hardware stack levels used:    1
  7384 ;; Hardware stack levels required when called:    2
  7385 ;; This function calls:
  7386 ;;		Nothing
  7387 ;; This function is called by:
  7388 ;;		_getMain_All_Error_Status
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           
  7393                           ;psect for function _getCDS_Status
  7394  0BB4                     _getCDS_Status:	
  7395                           
  7396                           ;CDS_B1.c: 41: char status = _CDS.Status == 1 ? 1 : 0;
  7397                           
  7398                           ;incstack = 0
  7399                           ; Regs used in _getCDS_Status: [wreg+status,2]
  7400  0BB4  3000               	movlw	0
  7401  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  7402  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  7403  0BB7  1A2D               	btfsc	__CDS,4
  7404  0BB8  3001               	movlw	1
  7405  0BB9  00F4               	movwf	getCDS_Status@status
  7406                           
  7407                           ;CDS_B1.c: 42: return status;
  7408  0BBA  0874               	movf	getCDS_Status@status,w
  7409  0BBB  0008               	return
  7410  0BBC                     __end_of_getCDS_Status:	
  7411                           
  7412                           	psect	text45
  7413  0BAC                     __ptext45:	
  7414 ;; *************** function _getLoad_OK *****************
  7415 ;; Defined at:
  7416 ;;		line 218 in file "../src/OverLoad_B1.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;		None
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;  ok              1    4[COMMON] unsigned char 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;                  1    wreg      unsigned char 
  7423 ;; Registers used:
  7424 ;;		wreg, status,2
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7430 ;;      Params:         0       0       0       0
  7431 ;;      Locals:         1       0       0       0
  7432 ;;      Temps:          0       0       0       0
  7433 ;;      Totals:         1       0       0       0
  7434 ;;Total ram usage:        1 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    2
  7437 ;; This function calls:
  7438 ;;		Nothing
  7439 ;; This function is called by:
  7440 ;;		_Lights_Main
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           
  7445                           ;psect for function _getLoad_OK
  7446  0BAC                     _getLoad_OK:	
  7447                           
  7448                           ;OverLoad_B1.c: 219: char ok = Load.OK == 1 ? 1 : 0;
  7449                           
  7450                           ;incstack = 0
  7451                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7452  0BAC  3000               	movlw	0
  7453  0BAD  1683               	bsf	3,5	;RP0=1, select bank1
  7454  0BAE  1303               	bcf	3,6	;RP1=0, select bank1
  7455  0BAF  1BCF               	btfsc	_Load^(0+128),7
  7456  0BB0  3001               	movlw	1
  7457  0BB1  00F4               	movwf	getLoad_OK@ok
  7458                           
  7459                           ;OverLoad_B1.c: 220: return ok;
  7460  0BB2  0874               	movf	getLoad_OK@ok,w
  7461  0BB3  0008               	return
  7462  0BB4                     __end_of_getLoad_OK:	
  7463                           
  7464                           	psect	text46
  7465  066E                     __ptext46:	
  7466 ;; *************** function _Lights_Control *****************
  7467 ;; Defined at:
  7468 ;;		line 155 in file "../src/TriacRelay_B1.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;  lights          1    wreg     unsigned char 
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;  lights          1    4[BANK0 ] unsigned char 
  7473 ;; Return value:  Size  Location     Type
  7474 ;;		None               void
  7475 ;; Registers used:
  7476 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7477 ;; Tracked objects:
  7478 ;;		On entry : 0/0
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7482 ;;      Params:         0       0       0       0
  7483 ;;      Locals:         0       3       0       0
  7484 ;;      Temps:          0       2       0       0
  7485 ;;      Totals:         0       5       0       0
  7486 ;;Total ram usage:        5 bytes
  7487 ;; Hardware stack levels used:    1
  7488 ;; Hardware stack levels required when called:    3
  7489 ;; This function calls:
  7490 ;;		_LightsPointSelect
  7491 ;; This function is called by:
  7492 ;;		_Lights_Main
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           
  7497                           ;psect for function _Lights_Control
  7498  066E                     _Lights_Control:	
  7499                           
  7500                           ;incstack = 0
  7501                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7502                           ;Lights_Control@lights stored from wreg
  7503  066E  1283               	bcf	3,5	;RP0=0, select bank0
  7504  066F  1303               	bcf	3,6	;RP1=0, select bank0
  7505  0670  00DF               	movwf	Lights_Control@lights
  7506                           
  7507                           ;TriacRelay_B1.c: 156: LightsPointSelect(lights);
  7508  0671  085F               	movf	Lights_Control@lights,w
  7509  0672  158A  23CC  118A   	fcall	_LightsPointSelect
  7510                           
  7511                           ;TriacRelay_B1.c: 157: if (Lights->GO == 1) {
  7512  0675  0878               	movf	_Lights,w
  7513  0676  0084               	movwf	4
  7514  0677  1383               	bcf	3,7	;select IRP bank0
  7515  0678  1C80               	btfss	0,1
  7516  0679  0008               	return
  7517                           
  7518                           ;TriacRelay_B1.c: 158: Lights->Time++;
  7519  067A  3001               	movlw	1
  7520  067B  1283               	bcf	3,5	;RP0=0, select bank0
  7521  067C  1303               	bcf	3,6	;RP1=0, select bank0
  7522  067D  00DB               	movwf	??_Lights_Control
  7523  067E  0878               	movf	_Lights,w
  7524  067F  3E02               	addlw	2
  7525  0680  0084               	movwf	4
  7526  0681  085B               	movf	??_Lights_Control,w
  7527  0682  0780               	addwf	0,f
  7528                           
  7529                           ;TriacRelay_B1.c: 159: if (Lights->Time >= Lights->RelayValue && Lights->RelaySet == 0) 
      +                          {
  7530  0683  0878               	movf	_Lights,w
  7531  0684  3E06               	addlw	6
  7532  0685  0084               	movwf	4
  7533  0686  0800               	movf	0,w
  7534  0687  00DB               	movwf	??_Lights_Control
  7535  0688  0878               	movf	_Lights,w
  7536  0689  3E02               	addlw	2
  7537  068A  0084               	movwf	4
  7538  068B  0800               	movf	0,w
  7539  068C  00DC               	movwf	??_Lights_Control+1
  7540  068D  085B               	movf	??_Lights_Control,w
  7541  068E  025C               	subwf	??_Lights_Control+1,w
  7542  068F  1C03               	skipc
  7543  0690  2EA8               	goto	l4527
  7544  0691  0878               	movf	_Lights,w
  7545  0692  0084               	movwf	4
  7546  0693  1B80               	btfsc	0,7
  7547  0694  2EA8               	goto	l4527
  7548                           
  7549                           ;TriacRelay_B1.c: 160: Lights->RelaySet = 1;
  7550  0695  0878               	movf	_Lights,w
  7551  0696  0084               	movwf	4
  7552  0697  1780               	bsf	0,7
  7553                           
  7554                           ;TriacRelay_B1.c: 162: if (lights == 1) {
  7555  0698  085F               	movf	Lights_Control@lights,w
  7556  0699  3A01               	xorlw	1
  7557  069A  1D03               	skipz
  7558  069B  0008               	return
  7559                           
  7560                           ;TriacRelay_B1.c: 163: RA4 = Lights->Status == 1 ? 1 : 0;
  7561  069C  0878               	movf	_Lights,w
  7562  069D  0084               	movwf	4
  7563  069E  1D00               	btfss	0,2
  7564  069F  2EA4               	goto	u5450
  7565  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  7566  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  7567  06A2  1605               	bsf	5,4	;volatile
  7568  06A3  0008               	return
  7569  06A4                     u5450:	
  7570  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  7571  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  7572  06A6  1205               	bcf	5,4	;volatile
  7573                           
  7574                           ;TriacRelay_B1.c: 164: }
  7575                           ;TriacRelay_B1.c: 177: } else if (Lights->Time >= Lights->TriacValue) {
  7576  06A7  0008               	return
  7577  06A8                     l4527:	
  7578  06A8  0878               	movf	_Lights,w
  7579  06A9  3E04               	addlw	4
  7580  06AA  0084               	movwf	4
  7581  06AB  1383               	bcf	3,7	;select IRP bank0
  7582  06AC  0800               	movf	0,w
  7583  06AD  00DB               	movwf	??_Lights_Control
  7584  06AE  0878               	movf	_Lights,w
  7585  06AF  3E02               	addlw	2
  7586  06B0  0084               	movwf	4
  7587  06B1  0800               	movf	0,w
  7588  06B2  00DC               	movwf	??_Lights_Control+1
  7589  06B3  085B               	movf	??_Lights_Control,w
  7590  06B4  025C               	subwf	??_Lights_Control+1,w
  7591  06B5  1C03               	skipc
  7592  06B6  0008               	return
  7593                           
  7594                           ;TriacRelay_B1.c: 178: Lights->Time = 0;
  7595  06B7  0878               	movf	_Lights,w
  7596  06B8  3E02               	addlw	2
  7597  06B9  0084               	movwf	4
  7598  06BA  0180               	clrf	0
  7599                           
  7600                           ;TriacRelay_B1.c: 179: Lights->GO = 0;
  7601  06BB  0878               	movf	_Lights,w
  7602  06BC  0084               	movwf	4
  7603  06BD  1080               	bcf	0,1
  7604                           
  7605                           ;TriacRelay_B1.c: 180: Lights->RelaySet = 0;
  7606  06BE  0878               	movf	_Lights,w
  7607  06BF  0084               	movwf	4
  7608  06C0  1380               	bcf	0,7
  7609                           
  7610                           ;TriacRelay_B1.c: 183: LightsControl.Detect = Lights->Status == 0 ? 1 : LightsControl.De
      +                          tect;
  7611  06C1  0878               	movf	_Lights,w
  7612  06C2  0084               	movwf	4
  7613  06C3  1D00               	btfss	0,2
  7614  06C4  2ECD               	goto	l4539
  7615  06C5  083B               	movf	_LightsControl,w
  7616  06C6  3901               	andlw	1
  7617  06C7  00DB               	movwf	??_Lights_Control
  7618  06C8  01DC               	clrf	??_Lights_Control+1
  7619  06C9  085B               	movf	??_Lights_Control,w
  7620  06CA  00DD               	movwf	_Lights_Control$4872
  7621  06CB  085C               	movf	??_Lights_Control+1,w
  7622  06CC  2ED0               	goto	L21
  7623  06CD                     l4539:	
  7624  06CD  3001               	movlw	1
  7625  06CE  00DD               	movwf	_Lights_Control$4872
  7626  06CF  3000               	movlw	0
  7627  06D0                     L21:	
  7628  06D0  00DE               	movwf	_Lights_Control$4872+1
  7629  06D1  085D               	movf	_Lights_Control$4872,w
  7630  06D2  103B               	bcf	_LightsControl,0
  7631  06D3  1D03               	skipz
  7632  06D4  143B               	bsf	_LightsControl,0
  7633                           
  7634                           ;TriacRelay_B1.c: 187: if (lights == 1) {
  7635  06D5  085F               	movf	Lights_Control@lights,w
  7636  06D6  3A01               	xorlw	1
  7637  06D7  1D03               	skipz
  7638  06D8  0008               	return
  7639                           
  7640                           ;TriacRelay_B1.c: 188: RB2 = 0;
  7641  06D9  1106               	bcf	6,2	;volatile
  7642  06DA  0008               	return
  7643  06DB                     __end_of_Lights_Control:	
  7644                           
  7645                           	psect	text47
  7646  0CDE                     __ptext47:	
  7647 ;; *************** function _Lights_Close *****************
  7648 ;; Defined at:
  7649 ;;		line 85 in file "../src/TriacRelay_B1.c"
  7650 ;; Parameters:    Size  Location     Type
  7651 ;;		None
  7652 ;; Auto vars:     Size  Location     Type
  7653 ;;		None
  7654 ;; Return value:  Size  Location     Type
  7655 ;;		None               void
  7656 ;; Registers used:
  7657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7658 ;; Tracked objects:
  7659 ;;		On entry : 0/0
  7660 ;;		On exit  : 0/0
  7661 ;;		Unchanged: 0/0
  7662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7663 ;;      Params:         0       0       0       0
  7664 ;;      Locals:         0       0       0       0
  7665 ;;      Temps:          0       1       0       0
  7666 ;;      Totals:         0       1       0       0
  7667 ;;Total ram usage:        1 bytes
  7668 ;; Hardware stack levels used:    1
  7669 ;; Hardware stack levels required when called:    5
  7670 ;; This function calls:
  7671 ;;		_getMain_LightsStatus
  7672 ;; This function is called by:
  7673 ;;		_Lights_Main
  7674 ;; This function uses a non-reentrant model
  7675 ;;
  7676                           
  7677                           
  7678                           ;psect for function _Lights_Close
  7679  0CDE                     _Lights_Close:	
  7680                           
  7681                           ;TriacRelay_B1.c: 86: if (LightsControl.Detect == 1) {
  7682                           
  7683                           ;incstack = 0
  7684                           ; Regs used in _Lights_Close: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7685  0CDE  1283               	bcf	3,5	;RP0=0, select bank0
  7686  0CDF  1303               	bcf	3,6	;RP1=0, select bank0
  7687  0CE0  1C3B               	btfss	_LightsControl,0
  7688  0CE1  0008               	return
  7689                           
  7690                           ;TriacRelay_B1.c: 87: LightsControl.Detect = 0;
  7691  0CE2  103B               	bcf	_LightsControl,0
  7692                           
  7693                           ;TriacRelay_B1.c: 88: LightsControl.LoadGO = getMain_LightsStatus() == 0 ? 0 : 1;
  7694  0CE3  158A  2607         	fcall	_getMain_LightsStatus
  7695  0CE5  3800               	iorlw	0
  7696  0CE6  3000               	movlw	0
  7697  0CE7  1D03               	skipz
  7698  0CE8  3001               	movlw	1
  7699  0CE9  1283               	bcf	3,5	;RP0=0, select bank0
  7700  0CEA  1303               	bcf	3,6	;RP1=0, select bank0
  7701  0CEB  00E1               	movwf	??_Lights_Close
  7702  0CEC  0DE1               	rlf	??_Lights_Close,f
  7703  0CED  083B               	movf	_LightsControl,w
  7704  0CEE  0661               	xorwf	??_Lights_Close,w
  7705  0CEF  39FD               	andlw	-3
  7706  0CF0  0661               	xorwf	??_Lights_Close,w
  7707  0CF1  00BB               	movwf	_LightsControl
  7708  0CF2  0008               	return
  7709  0CF3                     __end_of_Lights_Close:	
  7710                           
  7711                           	psect	text48
  7712  0E07                     __ptext48:	
  7713 ;; *************** function _getMain_LightsStatus *****************
  7714 ;; Defined at:
  7715 ;;		line 334 in file "../src/Main_B1.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;		None
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;  i               2    3[BANK0 ] int 
  7720 ;;  status          1    5[BANK0 ] unsigned char 
  7721 ;;  count           1    2[BANK0 ] unsigned char 
  7722 ;; Return value:  Size  Location     Type
  7723 ;;                  1    wreg      unsigned char 
  7724 ;; Registers used:
  7725 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7731 ;;      Params:         0       0       0       0
  7732 ;;      Locals:         0       4       0       0
  7733 ;;      Temps:          1       0       0       0
  7734 ;;      Totals:         1       4       0       0
  7735 ;;Total ram usage:        5 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; Hardware stack levels required when called:    4
  7738 ;; This function calls:
  7739 ;;		_getLights_Status
  7740 ;; This function is called by:
  7741 ;;		_Load_Main
  7742 ;;		_setTemp_Main
  7743 ;;		_Lights_Main
  7744 ;;		_Lights_Close
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           
  7749                           ;psect for function _getMain_LightsStatus
  7750  0E07                     _getMain_LightsStatus:	
  7751                           
  7752                           ;Main_B1.c: 335: char status = 0;
  7753                           
  7754                           ;incstack = 0
  7755                           ; Regs used in _getMain_LightsStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7756  0E07  1283               	bcf	3,5	;RP0=0, select bank0
  7757  0E08  1303               	bcf	3,6	;RP1=0, select bank0
  7758  0E09  01E0               	clrf	getMain_LightsStatus@status
  7759                           
  7760                           ;Main_B1.c: 338: char count = 1;
  7761  0E0A  01DD               	clrf	getMain_LightsStatus@count
  7762  0E0B  0ADD               	incf	getMain_LightsStatus@count,f
  7763                           
  7764                           ;Main_B1.c: 347: for (int i = 0; i < count; i++) {
  7765  0E0C  01DE               	clrf	getMain_LightsStatus@i
  7766  0E0D  01DF               	clrf	getMain_LightsStatus@i+1
  7767  0E0E                     l4251:	
  7768  0E0E  085F               	movf	getMain_LightsStatus@i+1,w
  7769  0E0F  3A80               	xorlw	128
  7770  0E10  00F6               	movwf	??_getMain_LightsStatus
  7771  0E11  3080               	movlw	128
  7772  0E12  0276               	subwf	??_getMain_LightsStatus,w
  7773  0E13  1D03               	skipz
  7774  0E14  2E17               	goto	u4835
  7775  0E15  085D               	movf	getMain_LightsStatus@count,w
  7776  0E16  025E               	subwf	getMain_LightsStatus@i,w
  7777  0E17                     u4835:	
  7778  0E17  1803               	btfsc	3,0
  7779  0E18  2E33               	goto	l4253
  7780                           
  7781                           ;Main_B1.c: 348: if (status == 0) {
  7782  0E19  1283               	bcf	3,5	;RP0=0, select bank0
  7783  0E1A  1303               	bcf	3,6	;RP1=0, select bank0
  7784  0E1B  08E0               	movf	getMain_LightsStatus@status,f
  7785  0E1C  1D03               	skipz
  7786  0E1D  2E2C               	goto	l4249
  7787                           
  7788                           ;Main_B1.c: 350: status = getLights_Status(i + 1) == 1 ? 1 : 0;
  7789  0E1E  085E               	movf	getMain_LightsStatus@i,w
  7790  0E1F  3E01               	addlw	1
  7791  0E20  158A  245F  158A   	fcall	_getLights_Status
  7792  0E23  3A01               	xorlw	1
  7793  0E24  3000               	movlw	0
  7794  0E25  1903               	skipnz
  7795  0E26  3001               	movlw	1
  7796  0E27  00F6               	movwf	??_getMain_LightsStatus
  7797  0E28  0876               	movf	??_getMain_LightsStatus,w
  7798  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  7799  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  7800  0E2B  00E0               	movwf	getMain_LightsStatus@status
  7801  0E2C                     l4249:	
  7802  0E2C  3001               	movlw	1
  7803  0E2D  07DE               	addwf	getMain_LightsStatus@i,f
  7804  0E2E  1803               	skipnc
  7805  0E2F  0ADF               	incf	getMain_LightsStatus@i+1,f
  7806  0E30  3000               	movlw	0
  7807  0E31  07DF               	addwf	getMain_LightsStatus@i+1,f
  7808  0E32  2E0E               	goto	l4251
  7809  0E33                     l4253:	
  7810                           
  7811                           ;Main_B1.c: 355: }
  7812                           ;Main_B1.c: 356: }
  7813                           ;Main_B1.c: 357: return status;
  7814  0E33  1283               	bcf	3,5	;RP0=0, select bank0
  7815  0E34  1303               	bcf	3,6	;RP1=0, select bank0
  7816  0E35  0860               	movf	getMain_LightsStatus@status,w
  7817  0E36  0008               	return
  7818  0E37                     __end_of_getMain_LightsStatus:	
  7819                           
  7820                           	psect	text49
  7821  0C5F                     __ptext49:	
  7822 ;; *************** function _getLights_Status *****************
  7823 ;; Defined at:
  7824 ;;		line 207 in file "../src/TriacRelay_B1.c"
  7825 ;; Parameters:    Size  Location     Type
  7826 ;;  lights          1    wreg     unsigned char 
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;  lights          1    0[BANK0 ] unsigned char 
  7829 ;;  status          1    1[BANK0 ] unsigned char 
  7830 ;; Return value:  Size  Location     Type
  7831 ;;                  1    wreg      unsigned char 
  7832 ;; Registers used:
  7833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7839 ;;      Params:         0       0       0       0
  7840 ;;      Locals:         0       2       0       0
  7841 ;;      Temps:          0       0       0       0
  7842 ;;      Totals:         0       2       0       0
  7843 ;;Total ram usage:        2 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:    3
  7846 ;; This function calls:
  7847 ;;		_LightsPointSelect
  7848 ;; This function is called by:
  7849 ;;		_getMain_LightsStatus
  7850 ;;		_PIR_Main
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           
  7855                           ;psect for function _getLights_Status
  7856  0C5F                     _getLights_Status:	
  7857                           
  7858                           ;incstack = 0
  7859                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7860                           ;getLights_Status@lights stored from wreg
  7861  0C5F  1283               	bcf	3,5	;RP0=0, select bank0
  7862  0C60  1303               	bcf	3,6	;RP1=0, select bank0
  7863  0C61  00DB               	movwf	getLights_Status@lights
  7864                           
  7865                           ;TriacRelay_B1.c: 208: LightsPointSelect(lights);
  7866  0C62  085B               	movf	getLights_Status@lights,w
  7867  0C63  158A  23CC         	fcall	_LightsPointSelect
  7868                           
  7869                           ;TriacRelay_B1.c: 209: char status = Lights->Status == 1 ? 1 : 0;
  7870  0C65  0878               	movf	_Lights,w
  7871  0C66  0084               	movwf	4
  7872  0C67  3000               	movlw	0
  7873  0C68  1383               	bcf	3,7	;select IRP bank0
  7874  0C69  1900               	btfsc	0,2
  7875  0C6A  3001               	movlw	1
  7876  0C6B  1283               	bcf	3,5	;RP0=0, select bank0
  7877  0C6C  1303               	bcf	3,6	;RP1=0, select bank0
  7878  0C6D  00DC               	movwf	getLights_Status@status
  7879                           
  7880                           ;TriacRelay_B1.c: 210: return status;
  7881  0C6E  085C               	movf	getLights_Status@status,w
  7882  0C6F  0008               	return
  7883  0C70                     __end_of_getLights_Status:	
  7884                           
  7885                           	psect	text50
  7886  0B87                     __ptext50:	
  7887 ;; *************** function _Lights_Initialization *****************
  7888 ;; Defined at:
  7889 ;;		line 34 in file "../src/TriacRelay_B1.c"
  7890 ;; Parameters:    Size  Location     Type
  7891 ;;		None
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;		None
  7894 ;; Return value:  Size  Location     Type
  7895 ;;		None               void
  7896 ;; Registers used:
  7897 ;;		wreg, status,2, status,0, pclath, cstack
  7898 ;; Tracked objects:
  7899 ;;		On entry : 0/0
  7900 ;;		On exit  : 0/0
  7901 ;;		Unchanged: 0/0
  7902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7903 ;;      Params:         0       0       0       0
  7904 ;;      Locals:         0       0       0       0
  7905 ;;      Temps:          0       0       0       0
  7906 ;;      Totals:         0       0       0       0
  7907 ;;Total ram usage:        0 bytes
  7908 ;; Hardware stack levels used:    1
  7909 ;; Hardware stack levels required when called:    4
  7910 ;; This function calls:
  7911 ;;		_setLights_Initialization
  7912 ;; This function is called by:
  7913 ;;		_main
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           
  7918                           ;psect for function _Lights_Initialization
  7919  0B87                     _Lights_Initialization:	
  7920                           
  7921                           ;TriacRelay_B1.c: 36: setLights_Initialization(1);
  7922                           
  7923                           ;incstack = 0
  7924                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7925  0B87  3001               	movlw	1
  7926  0B88  158A  238F         	fcall	_setLights_Initialization
  7927  0B8A  0008               	return
  7928  0B8B                     __end_of_Lights_Initialization:	
  7929                           
  7930                           	psect	text51
  7931  0B8F                     __ptext51:	
  7932 ;; *************** function _setLights_Initialization *****************
  7933 ;; Defined at:
  7934 ;;		line 49 in file "../src/TriacRelay_B1.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;  lights          1    wreg     unsigned char 
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;  lights          1    6[COMMON] unsigned char 
  7939 ;; Return value:  Size  Location     Type
  7940 ;;		None               void
  7941 ;; Registers used:
  7942 ;;		wreg, status,2, status,0, pclath, cstack
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7948 ;;      Params:         0       0       0       0
  7949 ;;      Locals:         1       0       0       0
  7950 ;;      Temps:          0       0       0       0
  7951 ;;      Totals:         1       0       0       0
  7952 ;;Total ram usage:        1 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; Hardware stack levels required when called:    3
  7955 ;; This function calls:
  7956 ;;		_LightsPointSelect
  7957 ;; This function is called by:
  7958 ;;		_Lights_Initialization
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           
  7963                           ;psect for function _setLights_Initialization
  7964  0B8F                     _setLights_Initialization:	
  7965                           
  7966                           ;incstack = 0
  7967                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7968                           ;setLights_Initialization@lights stored from wreg
  7969  0B8F  00F6               	movwf	setLights_Initialization@lights
  7970                           
  7971                           ;TriacRelay_B1.c: 50: LightsPointSelect(lights);
  7972  0B90  0876               	movf	setLights_Initialization@lights,w
  7973  0B91  158A  23CC         	fcall	_LightsPointSelect
  7974  0B93  0008               	return
  7975  0B94                     __end_of_setLights_Initialization:	
  7976                           
  7977                           	psect	text52
  7978  0BCC                     __ptext52:	
  7979 ;; *************** function _LightsPointSelect *****************
  7980 ;; Defined at:
  7981 ;;		line 10 in file "../src/TriacRelay_B1.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  lights          1    wreg     unsigned char 
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;  lights          1    5[COMMON] unsigned char 
  7986 ;; Return value:  Size  Location     Type
  7987 ;;		None               void
  7988 ;; Registers used:
  7989 ;;		wreg
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7995 ;;      Params:         0       0       0       0
  7996 ;;      Locals:         1       0       0       0
  7997 ;;      Temps:          1       0       0       0
  7998 ;;      Totals:         2       0       0       0
  7999 ;;Total ram usage:        2 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    2
  8002 ;; This function calls:
  8003 ;;		Nothing
  8004 ;; This function is called by:
  8005 ;;		_setLights_Initialization
  8006 ;;		_setLights_Main
  8007 ;;		_setLights
  8008 ;;		_Lights_Control
  8009 ;;		_getLights_Status
  8010 ;;		_setLights_Trigger
  8011 ;;		_setLights_Line
  8012 ;;		_getAll_Lights_Line
  8013 ;; This function uses a non-reentrant model
  8014 ;;
  8015                           
  8016                           
  8017                           ;psect for function _LightsPointSelect
  8018  0BCC                     _LightsPointSelect:	
  8019                           
  8020                           ;incstack = 0
  8021                           ; Regs used in _LightsPointSelect: [wreg]
  8022                           ;LightsPointSelect@lights stored from wreg
  8023  0BCC  00F5               	movwf	LightsPointSelect@lights
  8024                           
  8025                           ;TriacRelay_B1.c: 14: if (lights == 1) {
  8026  0BCD  0875               	movf	LightsPointSelect@lights,w
  8027  0BCE  3A01               	xorlw	1
  8028  0BCF  1D03               	skipz
  8029  0BD0  0008               	return
  8030                           
  8031                           ;TriacRelay_B1.c: 15: Lights = &Lights1;
  8032  0BD1  3048               	movlw	_Lights1& (0+255)
  8033  0BD2  00F4               	movwf	??_LightsPointSelect
  8034  0BD3  0874               	movf	??_LightsPointSelect,w
  8035  0BD4  00F8               	movwf	_Lights
  8036  0BD5  0008               	return
  8037  0BD6                     __end_of_LightsPointSelect:	
  8038                           
  8039                           	psect	text53
  8040  0C31                     __ptext53:	
  8041 ;; *************** function _LED_Main *****************
  8042 ;; Defined at:
  8043 ;;		line 47 in file "../src/LED_B1.c"
  8044 ;; Parameters:    Size  Location     Type
  8045 ;;		None
  8046 ;; Auto vars:     Size  Location     Type
  8047 ;;		None
  8048 ;; Return value:  Size  Location     Type
  8049 ;;		None               void
  8050 ;; Registers used:
  8051 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8052 ;; Tracked objects:
  8053 ;;		On entry : 0/0
  8054 ;;		On exit  : 0/0
  8055 ;;		Unchanged: 0/0
  8056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8057 ;;      Params:         0       0       0       0
  8058 ;;      Locals:         0       0       0       0
  8059 ;;      Temps:          0       0       0       0
  8060 ;;      Totals:         0       0       0       0
  8061 ;;Total ram usage:        0 bytes
  8062 ;; Hardware stack levels used:    1
  8063 ;; Hardware stack levels required when called:    5
  8064 ;; This function calls:
  8065 ;;		_setLED_Main
  8066 ;;		_setPIRLED_Main
  8067 ;; This function is called by:
  8068 ;;		_main
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           
  8073                           ;psect for function _LED_Main
  8074  0C31                     _LED_Main:	
  8075                           
  8076                           ;LED_B1.c: 49: setLED_Main(1);
  8077                           
  8078                           ;incstack = 0
  8079                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8080  0C31  3001               	movlw	1
  8081  0C32  158A  26A2  158A   	fcall	_setLED_Main
  8082                           
  8083                           ;LED_B1.c: 52: setLED_Main(2);
  8084  0C35  3002               	movlw	2
  8085  0C36  158A  26A2  158A   	fcall	_setLED_Main
  8086                           
  8087                           ;LED_B1.c: 58: setLED_Main(99);
  8088  0C39  3063               	movlw	99
  8089  0C3A  158A  26A2  158A   	fcall	_setLED_Main
  8090                           
  8091                           ;LED_B1.c: 61: setPIRLED_Main();
  8092  0C3D  118A  25FF         	fcall	_setPIRLED_Main
  8093  0C3F  0008               	return
  8094  0C40                     __end_of_LED_Main:	
  8095                           
  8096                           	psect	text54
  8097  05FF                     __ptext54:	
  8098 ;; *************** function _setPIRLED_Main *****************
  8099 ;; Defined at:
  8100 ;;		line 248 in file "../src/LED_B1.c"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;		None
  8103 ;; Auto vars:     Size  Location     Type
  8104 ;;  count           1    2[BANK0 ] unsigned char 
  8105 ;; Return value:  Size  Location     Type
  8106 ;;		None               void
  8107 ;; Registers used:
  8108 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8109 ;; Tracked objects:
  8110 ;;		On entry : 0/0
  8111 ;;		On exit  : 0/0
  8112 ;;		Unchanged: 0/0
  8113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8114 ;;      Params:         0       0       0       0
  8115 ;;      Locals:         0       1       0       0
  8116 ;;      Temps:          0       1       0       0
  8117 ;;      Totals:         0       2       0       0
  8118 ;;Total ram usage:        2 bytes
  8119 ;; Hardware stack levels used:    1
  8120 ;; Hardware stack levels required when called:    4
  8121 ;; This function calls:
  8122 ;;		_setLED
  8123 ;; This function is called by:
  8124 ;;		_LED_Main
  8125 ;; This function uses a non-reentrant model
  8126 ;;
  8127                           
  8128                           
  8129                           ;psect for function _setPIRLED_Main
  8130  05FF                     _setPIRLED_Main:	
  8131                           
  8132                           ;LED_B1.c: 249: char count;
  8133                           ;LED_B1.c: 250: if (PIRLED.GO == 1) {
  8134                           
  8135                           ;incstack = 0
  8136                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8137  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  8138  0600  1303               	bcf	3,6	;RP1=0, select bank0
  8139  0601  1C32               	btfss	_PIRLED,0
  8140  0602  0008               	return
  8141                           
  8142                           ;LED_B1.c: 251: PIRLED.Time++;
  8143  0603  3001               	movlw	1
  8144  0604  07B4               	addwf	_PIRLED+2,f
  8145  0605  1803               	skipnc
  8146  0606  0AB5               	incf	_PIRLED+3,f
  8147  0607  3000               	movlw	0
  8148  0608  07B5               	addwf	_PIRLED+3,f
  8149                           
  8150                           ;LED_B1.c: 252: if (PIRLED.Time >= 500 / 10) {
  8151  0609  3000               	movlw	0
  8152  060A  0235               	subwf	_PIRLED+3,w
  8153  060B  3032               	movlw	50
  8154  060C  1903               	skipnz
  8155  060D  0234               	subwf	_PIRLED+2,w
  8156  060E  1C03               	skipc
  8157  060F  0008               	return
  8158                           
  8159                           ;LED_B1.c: 253: PIRLED.Time = 0;
  8160  0610  01B4               	clrf	_PIRLED+2
  8161  0611  01B5               	clrf	_PIRLED+3
  8162                           
  8163                           ;LED_B1.c: 254: setLED(1, 0);
  8164  0612  01F6               	clrf	setLED@command
  8165  0613  3001               	movlw	1
  8166  0614  118A  2517  118A   	fcall	_setLED
  8167                           
  8168                           ;LED_B1.c: 255: setLED(2, 0);
  8169  0617  01F6               	clrf	setLED@command
  8170  0618  3002               	movlw	2
  8171  0619  118A  2517  118A   	fcall	_setLED
  8172                           
  8173                           ;LED_B1.c: 256: if (PIRLED.GO1 == 1) {
  8174  061C  1283               	bcf	3,5	;RP0=0, select bank0
  8175  061D  1303               	bcf	3,6	;RP1=0, select bank0
  8176  061E  1CB2               	btfss	_PIRLED,1
  8177  061F  2E24               	goto	l4359
  8178                           
  8179                           ;LED_B1.c: 257: count = 4;
  8180  0620  3004               	movlw	4
  8181  0621  00DC               	movwf	??_setPIRLED_Main
  8182  0622  085C               	movf	??_setPIRLED_Main,w
  8183  0623  00DD               	movwf	setPIRLED_Main@count
  8184  0624                     l4359:	
  8185                           
  8186                           ;LED_B1.c: 258: }
  8187                           ;LED_B1.c: 259: if (PIRLED.GO2 == 1) {
  8188  0624  1D32               	btfss	_PIRLED,2
  8189  0625  2E2A               	goto	l4363
  8190                           
  8191                           ;LED_B1.c: 260: count = 6;
  8192  0626  3006               	movlw	6
  8193  0627  00DC               	movwf	??_setPIRLED_Main
  8194  0628  085C               	movf	??_setPIRLED_Main,w
  8195  0629  00DD               	movwf	setPIRLED_Main@count
  8196  062A                     l4363:	
  8197                           
  8198                           ;LED_B1.c: 261: }
  8199                           ;LED_B1.c: 262: if (PIRLED.GO3 == 1) {
  8200  062A  1DB2               	btfss	_PIRLED,3
  8201  062B  2E30               	goto	l4367
  8202                           
  8203                           ;LED_B1.c: 263: count = 8;
  8204  062C  3008               	movlw	8
  8205  062D  00DC               	movwf	??_setPIRLED_Main
  8206  062E  085C               	movf	??_setPIRLED_Main,w
  8207  062F  00DD               	movwf	setPIRLED_Main@count
  8208  0630                     l4367:	
  8209                           
  8210                           ;LED_B1.c: 264: }
  8211                           ;LED_B1.c: 265: PIRLED.Count++;
  8212  0630  3001               	movlw	1
  8213  0631  00DC               	movwf	??_setPIRLED_Main
  8214  0632  085C               	movf	??_setPIRLED_Main,w
  8215  0633  07B3               	addwf	_PIRLED+1,f
  8216                           
  8217                           ;LED_B1.c: 266: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  8218  0634  0833               	movf	_PIRLED+1,w
  8219  0635  3A01               	xorlw	1
  8220  0636  1903               	skipnz
  8221  0637  2E3C               	goto	l4373
  8222  0638  0833               	movf	_PIRLED+1,w
  8223  0639  3A02               	xorlw	2
  8224  063A  1D03               	skipz
  8225  063B  2E50               	goto	l4377
  8226  063C                     l4373:	
  8227                           
  8228                           ;LED_B1.c: 267: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8229  063C  1003               	clrc
  8230  063D  1E32               	btfss	_PIRLED,4
  8231  063E  1403               	setc
  8232  063F  1C03               	btfss	3,0
  8233  0640  2E45               	goto	u5100
  8234  0641  1283               	bcf	3,5	;RP0=0, select bank0
  8235  0642  1303               	bcf	3,6	;RP1=0, select bank0
  8236  0643  1632               	bsf	_PIRLED,4
  8237  0644  2E48               	goto	l4375
  8238  0645                     u5100:	
  8239  0645  1283               	bcf	3,5	;RP0=0, select bank0
  8240  0646  1303               	bcf	3,6	;RP1=0, select bank0
  8241  0647  1232               	bcf	_PIRLED,4
  8242  0648                     l4375:	
  8243                           
  8244                           ;LED_B1.c: 268: setLED(2, PIRLED.status);
  8245  0648  3000               	movlw	0
  8246  0649  1A32               	btfsc	_PIRLED,4
  8247  064A  3001               	movlw	1
  8248  064B  00F6               	movwf	setLED@command
  8249  064C  3002               	movlw	2
  8250  064D  118A  2517         	fcall	_setLED
  8251                           
  8252                           ;LED_B1.c: 269: } else {
  8253  064F  0008               	return
  8254  0650                     l4377:	
  8255                           
  8256                           ;LED_B1.c: 270: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8257  0650  1003               	clrc
  8258  0651  1283               	bcf	3,5	;RP0=0, select bank0
  8259  0652  1303               	bcf	3,6	;RP1=0, select bank0
  8260  0653  1E32               	btfss	_PIRLED,4
  8261  0654  1403               	setc
  8262  0655  1C03               	btfss	3,0
  8263  0656  2E5B               	goto	u5120
  8264  0657  1283               	bcf	3,5	;RP0=0, select bank0
  8265  0658  1303               	bcf	3,6	;RP1=0, select bank0
  8266  0659  1632               	bsf	_PIRLED,4
  8267  065A  2E5E               	goto	l4379
  8268  065B                     u5120:	
  8269  065B  1283               	bcf	3,5	;RP0=0, select bank0
  8270  065C  1303               	bcf	3,6	;RP1=0, select bank0
  8271  065D  1232               	bcf	_PIRLED,4
  8272  065E                     l4379:	
  8273                           
  8274                           ;LED_B1.c: 271: setLED(1, PIRLED.status);
  8275  065E  3000               	movlw	0
  8276  065F  1A32               	btfsc	_PIRLED,4
  8277  0660  3001               	movlw	1
  8278  0661  00F6               	movwf	setLED@command
  8279  0662  3001               	movlw	1
  8280  0663  118A  2517  118A   	fcall	_setLED
  8281                           
  8282                           ;LED_B1.c: 272: if (PIRLED.Count == count) {
  8283  0666  1283               	bcf	3,5	;RP0=0, select bank0
  8284  0667  1303               	bcf	3,6	;RP1=0, select bank0
  8285  0668  0833               	movf	_PIRLED+1,w
  8286  0669  065D               	xorwf	setPIRLED_Main@count,w
  8287  066A  1D03               	skipz
  8288  066B  0008               	return
  8289                           
  8290                           ;LED_B1.c: 273: PIRLED.Count = 0;
  8291  066C  01B3               	clrf	_PIRLED+1
  8292  066D  0008               	return
  8293  066E                     __end_of_setPIRLED_Main:	
  8294                           
  8295                           	psect	text55
  8296  0EA2                     __ptext55:	
  8297 ;; *************** function _setLED_Main *****************
  8298 ;; Defined at:
  8299 ;;		line 216 in file "../src/LED_B1.c"
  8300 ;; Parameters:    Size  Location     Type
  8301 ;;  led             1    wreg     unsigned char 
  8302 ;; Auto vars:     Size  Location     Type
  8303 ;;  led             1    6[COMMON] unsigned char 
  8304 ;; Return value:  Size  Location     Type
  8305 ;;		None               void
  8306 ;; Registers used:
  8307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8308 ;; Tracked objects:
  8309 ;;		On entry : 0/0
  8310 ;;		On exit  : 0/0
  8311 ;;		Unchanged: 0/0
  8312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8313 ;;      Params:         0       0       0       0
  8314 ;;      Locals:         1       0       0       0
  8315 ;;      Temps:          0       2       0       0
  8316 ;;      Totals:         1       2       0       0
  8317 ;;Total ram usage:        3 bytes
  8318 ;; Hardware stack levels used:    1
  8319 ;; Hardware stack levels required when called:    3
  8320 ;; This function calls:
  8321 ;;		_LedPointSelect
  8322 ;; This function is called by:
  8323 ;;		_LED_Main
  8324 ;; This function uses a non-reentrant model
  8325 ;;
  8326                           
  8327                           
  8328                           ;psect for function _setLED_Main
  8329  0EA2                     _setLED_Main:	
  8330                           
  8331                           ;incstack = 0
  8332                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8333                           ;setLED_Main@led stored from wreg
  8334  0EA2  00F6               	movwf	setLED_Main@led
  8335                           
  8336                           ;LED_B1.c: 217: LedPointSelect(led);
  8337  0EA3  0876               	movf	setLED_Main@led,w
  8338  0EA4  158A  251E  158A   	fcall	_LedPointSelect
  8339                           
  8340                           ;LED_B1.c: 218: if (LED->GO == 1) {
  8341  0EA7  0877               	movf	_LED,w
  8342  0EA8  0084               	movwf	4
  8343  0EA9  1383               	bcf	3,7	;select IRP bank0
  8344  0EAA  1C80               	btfss	0,1
  8345  0EAB  0008               	return
  8346                           
  8347                           ;LED_B1.c: 219: LED->Time++;
  8348  0EAC  0A77               	incf	_LED,w
  8349  0EAD  0084               	movwf	4
  8350  0EAE  3001               	movlw	1
  8351  0EAF  0780               	addwf	0,f
  8352  0EB0  0A84               	incf	4,f
  8353  0EB1  1803               	skipnc
  8354  0EB2  0A80               	incf	0,f
  8355                           
  8356                           ;LED_B1.c: 220: if (LED->Time >= 500 / 10) {
  8357  0EB3  0A77               	incf	_LED,w
  8358  0EB4  0084               	movwf	4
  8359  0EB5  0800               	movf	0,w
  8360  0EB6  1283               	bcf	3,5	;RP0=0, select bank0
  8361  0EB7  1303               	bcf	3,6	;RP1=0, select bank0
  8362  0EB8  00DB               	movwf	??_setLED_Main
  8363  0EB9  0A84               	incf	4,f
  8364  0EBA  0800               	movf	0,w
  8365  0EBB  00DC               	movwf	??_setLED_Main+1
  8366  0EBC  3000               	movlw	0
  8367  0EBD  025C               	subwf	??_setLED_Main+1,w
  8368  0EBE  3032               	movlw	50
  8369  0EBF  1903               	skipnz
  8370  0EC0  025B               	subwf	??_setLED_Main,w
  8371  0EC1  1C03               	skipc
  8372  0EC2  0008               	return
  8373                           
  8374                           ;LED_B1.c: 221: LED->Time = 0;
  8375  0EC3  0A77               	incf	_LED,w
  8376  0EC4  0084               	movwf	4
  8377  0EC5  0180               	clrf	0
  8378  0EC6  0A84               	incf	4,f
  8379  0EC7  0180               	clrf	0
  8380                           
  8381                           ;LED_B1.c: 223: if (led == 1) {
  8382  0EC8  0876               	movf	setLED_Main@led,w
  8383  0EC9  3A01               	xorlw	1
  8384  0ECA  1D03               	skipz
  8385  0ECB  2ECE               	goto	l288
  8386                           
  8387                           ;LED_B1.c: 224: RB4 = RB4 == 1 ? 0 : 1;
  8388  0ECC  3010               	movlw	16
  8389  0ECD  0686               	xorwf	6,f
  8390  0ECE                     l288:	
  8391                           
  8392                           ;LED_B1.c: 225: }
  8393                           ;LED_B1.c: 228: if (led == 2) {
  8394  0ECE  0876               	movf	setLED_Main@led,w
  8395  0ECF  3A02               	xorlw	2
  8396  0ED0  1D03               	skipz
  8397  0ED1  2ED4               	goto	l289
  8398                           
  8399                           ;LED_B1.c: 229: RB5 = RB5 == 1 ? 0 : 1;
  8400  0ED2  3020               	movlw	32
  8401  0ED3  0686               	xorwf	6,f
  8402  0ED4                     l289:	
  8403                           
  8404                           ;LED_B1.c: 230: }
  8405                           ;LED_B1.c: 238: if (led == 99) {
  8406  0ED4  0876               	movf	setLED_Main@led,w
  8407  0ED5  3A63               	xorlw	99
  8408  0ED6  1D03               	skipz
  8409  0ED7  0008               	return
  8410                           
  8411                           ;LED_B1.c: 239: RB3 = RB3 == 1 ? 0 : 1;
  8412  0ED8  3008               	movlw	8
  8413  0ED9  0686               	xorwf	6,f
  8414  0EDA  0008               	return
  8415  0EDB                     __end_of_setLED_Main:	
  8416                           
  8417                           	psect	text56
  8418  0BD6                     __ptext56:	
  8419 ;; *************** function _LED_Initialization *****************
  8420 ;; Defined at:
  8421 ;;		line 31 in file "../src/LED_B1.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;		None
  8424 ;; Auto vars:     Size  Location     Type
  8425 ;;		None
  8426 ;; Return value:  Size  Location     Type
  8427 ;;		None               void
  8428 ;; Registers used:
  8429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8430 ;; Tracked objects:
  8431 ;;		On entry : 0/0
  8432 ;;		On exit  : 0/0
  8433 ;;		Unchanged: 0/0
  8434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8435 ;;      Params:         0       0       0       0
  8436 ;;      Locals:         0       0       0       0
  8437 ;;      Temps:          0       0       0       0
  8438 ;;      Totals:         0       0       0       0
  8439 ;;Total ram usage:        0 bytes
  8440 ;; Hardware stack levels used:    1
  8441 ;; Hardware stack levels required when called:    5
  8442 ;; This function calls:
  8443 ;;		_setLED_Initialization
  8444 ;; This function is called by:
  8445 ;;		_main
  8446 ;; This function uses a non-reentrant model
  8447 ;;
  8448                           
  8449                           
  8450                           ;psect for function _LED_Initialization
  8451  0BD6                     _LED_Initialization:	
  8452                           
  8453                           ;LED_B1.c: 33: setLED_Initialization(1);
  8454                           
  8455                           ;incstack = 0
  8456                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8457  0BD6  3001               	movlw	1
  8458  0BD7  158A  2492  158A   	fcall	_setLED_Initialization
  8459                           
  8460                           ;LED_B1.c: 36: setLED_Initialization(2);
  8461  0BDA  3002               	movlw	2
  8462  0BDB  158A  2492  158A   	fcall	_setLED_Initialization
  8463                           
  8464                           ;LED_B1.c: 42: setLED_Initialization(99);
  8465  0BDE  3063               	movlw	99
  8466  0BDF  158A  2492         	fcall	_setLED_Initialization
  8467  0BE1  0008               	return
  8468  0BE2                     __end_of_LED_Initialization:	
  8469                           
  8470                           	psect	text57
  8471  0C92                     __ptext57:	
  8472 ;; *************** function _setLED_Initialization *****************
  8473 ;; Defined at:
  8474 ;;		line 66 in file "../src/LED_B1.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;  led             1    wreg     unsigned char 
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  led             1    1[BANK0 ] unsigned char 
  8479 ;; Return value:  Size  Location     Type
  8480 ;;		None               void
  8481 ;; Registers used:
  8482 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8488 ;;      Params:         0       0       0       0
  8489 ;;      Locals:         0       1       0       0
  8490 ;;      Temps:          0       0       0       0
  8491 ;;      Totals:         0       1       0       0
  8492 ;;Total ram usage:        1 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:    4
  8495 ;; This function calls:
  8496 ;;		_LedPointSelect
  8497 ;;		_setLED
  8498 ;; This function is called by:
  8499 ;;		_LED_Initialization
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           
  8504                           ;psect for function _setLED_Initialization
  8505  0C92                     _setLED_Initialization:	
  8506                           
  8507                           ;incstack = 0
  8508                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8509                           ;setLED_Initialization@led stored from wreg
  8510  0C92  1283               	bcf	3,5	;RP0=0, select bank0
  8511  0C93  1303               	bcf	3,6	;RP1=0, select bank0
  8512  0C94  00DC               	movwf	setLED_Initialization@led
  8513                           
  8514                           ;LED_B1.c: 67: LedPointSelect(led);
  8515  0C95  085C               	movf	setLED_Initialization@led,w
  8516  0C96  158A  251E  158A   	fcall	_LedPointSelect
  8517                           
  8518                           ;LED_B1.c: 68: LED->Enable = 1;
  8519  0C99  0877               	movf	_LED,w
  8520  0C9A  0084               	movwf	4
  8521  0C9B  1383               	bcf	3,7	;select IRP bank0
  8522  0C9C  1400               	bsf	0,0
  8523                           
  8524                           ;LED_B1.c: 69: setLED(led, 0);
  8525  0C9D  01F6               	clrf	setLED@command
  8526  0C9E  1283               	bcf	3,5	;RP0=0, select bank0
  8527  0C9F  1303               	bcf	3,6	;RP1=0, select bank0
  8528  0CA0  085C               	movf	setLED_Initialization@led,w
  8529  0CA1  118A  2517         	fcall	_setLED
  8530  0CA3  0008               	return
  8531  0CA4                     __end_of_setLED_Initialization:	
  8532                           
  8533                           	psect	text58
  8534  0517                     __ptext58:	
  8535 ;; *************** function _setLED *****************
  8536 ;; Defined at:
  8537 ;;		line 73 in file "../src/LED_B1.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  led             1    wreg     unsigned char 
  8540 ;;  command         1    6[COMMON] unsigned char 
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;  led             1    0[BANK0 ] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;		None               void
  8545 ;; Registers used:
  8546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8552 ;;      Params:         1       0       0       0
  8553 ;;      Locals:         0       1       0       0
  8554 ;;      Temps:          0       0       0       0
  8555 ;;      Totals:         1       1       0       0
  8556 ;;Total ram usage:        2 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    3
  8559 ;; This function calls:
  8560 ;;		_LedPointSelect
  8561 ;; This function is called by:
  8562 ;;		_setLED_Initialization
  8563 ;;		_setPIRLED_Main
  8564 ;;		_setMain_Exception
  8565 ;;		_PIR_Initialization
  8566 ;;		_PIR_Main
  8567 ;;		_setSYSC_Main
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           
  8572                           ;psect for function _setLED
  8573  0517                     _setLED:	
  8574                           
  8575                           ;incstack = 0
  8576                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8577                           ;setLED@led stored from wreg
  8578  0517  1283               	bcf	3,5	;RP0=0, select bank0
  8579  0518  1303               	bcf	3,6	;RP1=0, select bank0
  8580  0519  00DB               	movwf	setLED@led
  8581                           
  8582                           ;LED_B1.c: 74: LedPointSelect(led);
  8583  051A  085B               	movf	setLED@led,w
  8584  051B  158A  251E  118A   	fcall	_LedPointSelect
  8585                           
  8586                           ;LED_B1.c: 75: if (command == 0) {
  8587  051E  08F6               	movf	setLED@command,f
  8588  051F  1D03               	skipz
  8589  0520  2D2F               	goto	l4159
  8590                           
  8591                           ;LED_B1.c: 77: if (led == 1) {
  8592  0521  1283               	bcf	3,5	;RP0=0, select bank0
  8593  0522  1303               	bcf	3,6	;RP1=0, select bank0
  8594  0523  085B               	movf	setLED@led,w
  8595  0524  3A01               	xorlw	1
  8596  0525  1903               	btfsc	3,2
  8597                           
  8598                           ;LED_B1.c: 81: RB4 = 1;
  8599  0526  1606               	bsf	6,4	;volatile
  8600                           
  8601                           ;LED_B1.c: 83: }
  8602                           ;LED_B1.c: 86: if (led == 2) {
  8603  0527  085B               	movf	setLED@led,w
  8604  0528  3A02               	xorlw	2
  8605  0529  1903               	btfsc	3,2
  8606                           
  8607                           ;LED_B1.c: 90: RB5 = 1;
  8608  052A  1686               	bsf	6,5	;volatile
  8609                           
  8610                           ;LED_B1.c: 92: }
  8611                           ;LED_B1.c: 104: if (led == 99) {
  8612  052B  085B               	movf	setLED@led,w
  8613  052C  3A63               	xorlw	99
  8614  052D  1903               	btfsc	3,2
  8615                           
  8616                           ;LED_B1.c: 108: RB3 = 1;
  8617  052E  1586               	bsf	6,3	;volatile
  8618  052F                     l4159:	
  8619                           
  8620                           ;LED_B1.c: 110: }
  8621                           ;LED_B1.c: 112: } if (command == 1) {
  8622  052F  0876               	movf	setLED@command,w
  8623  0530  3A01               	xorlw	1
  8624  0531  1D03               	skipz
  8625  0532  2D41               	goto	l4173
  8626                           
  8627                           ;LED_B1.c: 114: if (led == 1) {
  8628  0533  1283               	bcf	3,5	;RP0=0, select bank0
  8629  0534  1303               	bcf	3,6	;RP1=0, select bank0
  8630  0535  085B               	movf	setLED@led,w
  8631  0536  3A01               	xorlw	1
  8632  0537  1903               	btfsc	3,2
  8633                           
  8634                           ;LED_B1.c: 118: RB4 = 0;
  8635  0538  1206               	bcf	6,4	;volatile
  8636                           
  8637                           ;LED_B1.c: 120: }
  8638                           ;LED_B1.c: 123: if (led == 2) {
  8639  0539  085B               	movf	setLED@led,w
  8640  053A  3A02               	xorlw	2
  8641  053B  1903               	btfsc	3,2
  8642                           
  8643                           ;LED_B1.c: 127: RB5 = 0;
  8644  053C  1286               	bcf	6,5	;volatile
  8645                           
  8646                           ;LED_B1.c: 129: }
  8647                           ;LED_B1.c: 141: if (led == 99) {
  8648  053D  085B               	movf	setLED@led,w
  8649  053E  3A63               	xorlw	99
  8650  053F  1903               	btfsc	3,2
  8651                           
  8652                           ;LED_B1.c: 145: RB3 = 0;
  8653  0540  1186               	bcf	6,3	;volatile
  8654  0541                     l4173:	
  8655                           
  8656                           ;LED_B1.c: 147: }
  8657                           ;LED_B1.c: 149: } if (command == 10) {
  8658  0541  0876               	movf	setLED@command,w
  8659  0542  3A0A               	xorlw	10
  8660  0543  1D03               	skipz
  8661  0544  2D5E               	goto	l4191
  8662                           
  8663                           ;LED_B1.c: 150: LED->GO = 0;
  8664  0545  0877               	movf	_LED,w
  8665  0546  0084               	movwf	4
  8666  0547  1383               	bcf	3,7	;select IRP bank0
  8667  0548  1080               	bcf	0,1
  8668                           
  8669                           ;LED_B1.c: 151: LED->Time = 0;
  8670  0549  0A77               	incf	_LED,w
  8671  054A  0084               	movwf	4
  8672  054B  0180               	clrf	0
  8673  054C  0A84               	incf	4,f
  8674  054D  0180               	clrf	0
  8675                           
  8676                           ;LED_B1.c: 153: if (led == 1) {
  8677  054E  1283               	bcf	3,5	;RP0=0, select bank0
  8678  054F  1303               	bcf	3,6	;RP1=0, select bank0
  8679  0550  085B               	movf	setLED@led,w
  8680  0551  3A01               	xorlw	1
  8681  0552  1D03               	skipz
  8682  0553  2D56               	goto	l4183
  8683                           
  8684                           ;LED_B1.c: 157: RB4 = 1;
  8685  0554  1606               	bsf	6,4	;volatile
  8686                           
  8687                           ;LED_B1.c: 159: }
  8688  0555  2D5A               	goto	l4187
  8689  0556                     l4183:	
  8690                           
  8691                           ;LED_B1.c: 162: else if (led == 2) {
  8692  0556  085B               	movf	setLED@led,w
  8693  0557  3A02               	xorlw	2
  8694  0558  1903               	btfsc	3,2
  8695                           
  8696                           ;LED_B1.c: 166: RB5 = 1;
  8697  0559  1686               	bsf	6,5	;volatile
  8698  055A                     l4187:	
  8699                           
  8700                           ;LED_B1.c: 168: }
  8701                           ;LED_B1.c: 180: if (led == 99) {
  8702  055A  085B               	movf	setLED@led,w
  8703  055B  3A63               	xorlw	99
  8704  055C  1903               	btfsc	3,2
  8705                           
  8706                           ;LED_B1.c: 184: RB3 = 1;
  8707  055D  1586               	bsf	6,3	;volatile
  8708  055E                     l4191:	
  8709                           
  8710                           ;LED_B1.c: 186: }
  8711                           ;LED_B1.c: 188: }
  8712                           ;LED_B1.c: 189: if (command == 11) {
  8713  055E  0876               	movf	setLED@command,w
  8714  055F  3A0B               	xorlw	11
  8715  0560  1D03               	skipz
  8716  0561  2D66               	goto	l4195
  8717                           
  8718                           ;LED_B1.c: 190: LED->GO = 1;
  8719  0562  0877               	movf	_LED,w
  8720  0563  0084               	movwf	4
  8721  0564  1383               	bcf	3,7	;select IRP bank0
  8722  0565  1480               	bsf	0,1
  8723  0566                     l4195:	
  8724                           
  8725                           ;LED_B1.c: 191: }
  8726                           ;LED_B1.c: 193: if (command == 111) {
  8727  0566  0876               	movf	setLED@command,w
  8728  0567  3A6F               	xorlw	111
  8729  0568  1D03               	skipz
  8730  0569  2D86               	goto	l4221
  8731                           
  8732                           ;LED_B1.c: 194: PIRLED.Count = 0;
  8733  056A  1283               	bcf	3,5	;RP0=0, select bank0
  8734  056B  1303               	bcf	3,6	;RP1=0, select bank0
  8735  056C  01B3               	clrf	_PIRLED+1
  8736                           
  8737                           ;LED_B1.c: 195: PIRLED.Time = 0;
  8738  056D  01B4               	clrf	_PIRLED+2
  8739  056E  01B5               	clrf	_PIRLED+3
  8740                           
  8741                           ;LED_B1.c: 196: PIRLED.status = 0;
  8742  056F  1232               	bcf	_PIRLED,4
  8743                           
  8744                           ;LED_B1.c: 197: PIRLED.GO = 1;
  8745  0570  1432               	bsf	_PIRLED,0
  8746                           
  8747                           ;LED_B1.c: 198: PIRLED.GO1 = 0;
  8748  0571  10B2               	bcf	_PIRLED,1
  8749                           
  8750                           ;LED_B1.c: 199: PIRLED.GO2 = 0;
  8751  0572  1132               	bcf	_PIRLED,2
  8752                           
  8753                           ;LED_B1.c: 200: PIRLED.GO3 = 0;
  8754  0573  11B2               	bcf	_PIRLED,3
  8755                           
  8756                           ;LED_B1.c: 201: if (led == 1) {
  8757  0574  085B               	movf	setLED@led,w
  8758  0575  3A01               	xorlw	1
  8759  0576  1D03               	skipz
  8760  0577  2D7A               	goto	l4213
  8761                           
  8762                           ;LED_B1.c: 202: PIRLED.GO1 = 1;
  8763  0578  14B2               	bsf	_PIRLED,1
  8764                           
  8765                           ;LED_B1.c: 203: } else if (led == 2) {
  8766  0579  0008               	return
  8767  057A                     l4213:	
  8768  057A  085B               	movf	setLED@led,w
  8769  057B  3A02               	xorlw	2
  8770  057C  1D03               	skipz
  8771  057D  2D80               	goto	l4217
  8772                           
  8773                           ;LED_B1.c: 204: PIRLED.GO2 = 1;
  8774  057E  1532               	bsf	_PIRLED,2
  8775                           
  8776                           ;LED_B1.c: 205: } else if (led == 3) {
  8777  057F  0008               	return
  8778  0580                     l4217:	
  8779  0580  085B               	movf	setLED@led,w
  8780  0581  3A03               	xorlw	3
  8781  0582  1D03               	skipz
  8782  0583  0008               	return
  8783                           
  8784                           ;LED_B1.c: 206: PIRLED.GO3 = 1;
  8785  0584  15B2               	bsf	_PIRLED,3
  8786                           
  8787                           ;LED_B1.c: 207: }
  8788                           ;LED_B1.c: 208: } else if (command == 110) {
  8789  0585  0008               	return
  8790  0586                     l4221:	
  8791  0586  0876               	movf	setLED@command,w
  8792  0587  3A6E               	xorlw	110
  8793  0588  1D03               	skipz
  8794  0589  0008               	return
  8795                           
  8796                           ;LED_B1.c: 209: PIRLED.GO = 0;
  8797  058A  1283               	bcf	3,5	;RP0=0, select bank0
  8798  058B  1303               	bcf	3,6	;RP1=0, select bank0
  8799  058C  1032               	bcf	_PIRLED,0
  8800  058D  0008               	return
  8801  058E                     __end_of_setLED:	
  8802                           
  8803                           	psect	text59
  8804  0D1E                     __ptext59:	
  8805 ;; *************** function _LedPointSelect *****************
  8806 ;; Defined at:
  8807 ;;		line 7 in file "../src/LED_B1.c"
  8808 ;; Parameters:    Size  Location     Type
  8809 ;;  led             1    wreg     unsigned char 
  8810 ;; Auto vars:     Size  Location     Type
  8811 ;;  led             1    5[COMMON] unsigned char 
  8812 ;; Return value:  Size  Location     Type
  8813 ;;		None               void
  8814 ;; Registers used:
  8815 ;;		wreg
  8816 ;; Tracked objects:
  8817 ;;		On entry : 0/0
  8818 ;;		On exit  : 0/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8821 ;;      Params:         0       0       0       0
  8822 ;;      Locals:         1       0       0       0
  8823 ;;      Temps:          1       0       0       0
  8824 ;;      Totals:         2       0       0       0
  8825 ;;Total ram usage:        2 bytes
  8826 ;; Hardware stack levels used:    1
  8827 ;; Hardware stack levels required when called:    2
  8828 ;; This function calls:
  8829 ;;		Nothing
  8830 ;; This function is called by:
  8831 ;;		_setLED_Initialization
  8832 ;;		_setLED
  8833 ;;		_setLED_Main
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           
  8838                           ;psect for function _LedPointSelect
  8839  0D1E                     _LedPointSelect:	
  8840                           
  8841                           ;incstack = 0
  8842                           ; Regs used in _LedPointSelect: [wreg]
  8843                           ;LedPointSelect@led stored from wreg
  8844  0D1E  00F5               	movwf	LedPointSelect@led
  8845                           
  8846                           ;LED_B1.c: 9: if (led == 1) {
  8847  0D1F  0875               	movf	LedPointSelect@led,w
  8848  0D20  3A01               	xorlw	1
  8849  0D21  1D03               	skipz
  8850  0D22  2D27               	goto	l246
  8851                           
  8852                           ;LED_B1.c: 10: LED = &VarLED1;
  8853  0D23  3053               	movlw	_VarLED1& (0+255)
  8854  0D24  00F4               	movwf	??_LedPointSelect
  8855  0D25  0874               	movf	??_LedPointSelect,w
  8856  0D26  00F7               	movwf	_LED
  8857  0D27                     l246:	
  8858                           
  8859                           ;LED_B1.c: 11: }
  8860                           ;LED_B1.c: 14: if (led == 2) {
  8861  0D27  0875               	movf	LedPointSelect@led,w
  8862  0D28  3A02               	xorlw	2
  8863  0D29  1D03               	skipz
  8864  0D2A  2D2F               	goto	l247
  8865                           
  8866                           ;LED_B1.c: 15: LED = &VarLED2;
  8867  0D2B  3057               	movlw	_VarLED2& (0+255)
  8868  0D2C  00F4               	movwf	??_LedPointSelect
  8869  0D2D  0874               	movf	??_LedPointSelect,w
  8870  0D2E  00F7               	movwf	_LED
  8871  0D2F                     l247:	
  8872                           
  8873                           ;LED_B1.c: 16: }
  8874                           ;LED_B1.c: 24: if (led == 99) {
  8875  0D2F  0875               	movf	LedPointSelect@led,w
  8876  0D30  3A63               	xorlw	99
  8877  0D31  1D03               	skipz
  8878  0D32  0008               	return
  8879                           
  8880                           ;LED_B1.c: 25: LED = &VarErrLED;
  8881  0D33  304F               	movlw	_VarErrLED& (0+255)
  8882  0D34  00F4               	movwf	??_LedPointSelect
  8883  0D35  0874               	movf	??_LedPointSelect,w
  8884  0D36  00F7               	movwf	_LED
  8885  0D37  0008               	return
  8886  0D38                     __end_of_LedPointSelect:	
  8887                           
  8888                           	psect	text60
  8889  0C07                     __ptext60:	
  8890 ;; *************** function _DetectSYSC_Signal *****************
  8891 ;; Defined at:
  8892 ;;		line 57 in file "../src/SYSC_B1.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;		None
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;		None
  8897 ;; Return value:  Size  Location     Type
  8898 ;;		None               void
  8899 ;; Registers used:
  8900 ;;		status,2
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8906 ;;      Params:         0       0       0       0
  8907 ;;      Locals:         0       0       0       0
  8908 ;;      Temps:          0       0       0       0
  8909 ;;      Totals:         0       0       0       0
  8910 ;;Total ram usage:        0 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; Hardware stack levels required when called:    2
  8913 ;; This function calls:
  8914 ;;		Nothing
  8915 ;; This function is called by:
  8916 ;;		_main
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function _DetectSYSC_Signal
  8922  0C07                     _DetectSYSC_Signal:	
  8923                           
  8924                           ;SYSC_B1.c: 58: if (SYSC.Signal == 0) {
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _DetectSYSC_Signal: [status,2]
  8928  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  8929  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  8930  0C09  19A8               	btfsc	_SYSC,3
  8931  0C0A  2C11               	goto	l1059
  8932                           
  8933                           ;SYSC_B1.c: 59: if (RA5 == 1) {
  8934  0C0B  1E85               	btfss	5,5	;volatile
  8935  0C0C  0008               	return
  8936                           
  8937                           ;SYSC_B1.c: 60: SYSC.Signal = 1;
  8938  0C0D  15A8               	bsf	_SYSC,3
  8939                           
  8940                           ;SYSC_B1.c: 61: SYSC.Timer = 0;
  8941  0C0E  01A9               	clrf	_SYSC+1
  8942  0C0F  01AA               	clrf	_SYSC+2
  8943                           
  8944                           ;SYSC_B1.c: 62: }
  8945                           ;SYSC_B1.c: 63: } else {
  8946  0C10  0008               	return
  8947  0C11                     l1059:	
  8948                           
  8949                           ;SYSC_B1.c: 64: if (RA5 == 0) {
  8950  0C11  1A85               	btfsc	5,5	;volatile
  8951  0C12  0008               	return
  8952                           
  8953                           ;SYSC_B1.c: 65: SYSC.Signal = 0;
  8954  0C13  11A8               	bcf	_SYSC,3
  8955  0C14  0008               	return
  8956  0C15                     __end_of_DetectSYSC_Signal:	
  8957                           
  8958                           	psect	text61
  8959  0E37                     __ptext61:	
  8960 ;; *************** function _CDS_Main *****************
  8961 ;; Defined at:
  8962 ;;		line 11 in file "../src/CDS_B1.c"
  8963 ;; Parameters:    Size  Location     Type
  8964 ;;		None
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;		None
  8967 ;; Return value:  Size  Location     Type
  8968 ;;		None               void
  8969 ;; Registers used:
  8970 ;;		wreg, status,2, status,0
  8971 ;; Tracked objects:
  8972 ;;		On entry : 0/0
  8973 ;;		On exit  : 0/0
  8974 ;;		Unchanged: 0/0
  8975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8976 ;;      Params:         0       0       0       0
  8977 ;;      Locals:         0       0       0       0
  8978 ;;      Temps:          3       0       0       0
  8979 ;;      Totals:         3       0       0       0
  8980 ;;Total ram usage:        3 bytes
  8981 ;; Hardware stack levels used:    1
  8982 ;; Hardware stack levels required when called:    2
  8983 ;; This function calls:
  8984 ;;		Nothing
  8985 ;; This function is called by:
  8986 ;;		_main
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           
  8991                           ;psect for function _CDS_Main
  8992  0E37                     _CDS_Main:	
  8993                           
  8994                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  8995                           
  8996                           ;incstack = 0
  8997                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  8998  0E37  1283               	bcf	3,5	;RP0=0, select bank0
  8999  0E38  1303               	bcf	3,6	;RP1=0, select bank0
  9000  0E39  1C2D               	btfss	__CDS,0
  9001  0E3A  0008               	return
  9002                           
  9003                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9004  0E3B  18AD               	btfsc	__CDS,1
  9005  0E3C  2E4A               	goto	l111
  9006                           
  9007                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9008  0E3D  19AD               	btfsc	__CDS,3
  9009  0E3E  0008               	return
  9010                           
  9011                           ;CDS_B1.c: 16: _CDS.Time++;
  9012  0E3F  3001               	movlw	1
  9013  0E40  00F4               	movwf	??_CDS_Main
  9014  0E41  0874               	movf	??_CDS_Main,w
  9015  0E42  07AE               	addwf	__CDS+1,f
  9016                           
  9017                           ;CDS_B1.c: 17: if (_CDS.Time >= 10)
  9018  0E43  300A               	movlw	10
  9019  0E44  022E               	subwf	__CDS+1,w
  9020  0E45  1C03               	skipc
  9021  0E46  0008               	return
  9022                           
  9023                           ;CDS_B1.c: 18: {
  9024                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9025  0E47  01AE               	clrf	__CDS+1
  9026                           
  9027                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9028  0E48  15AD               	bsf	__CDS,3
  9029                           
  9030                           ;CDS_B1.c: 21: }
  9031                           ;CDS_B1.c: 22: }
  9032                           ;CDS_B1.c: 23: } else {
  9033  0E49  0008               	return
  9034  0E4A                     l111:	
  9035                           
  9036                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9037  0E4A  1CAD               	btfss	__CDS,1
  9038  0E4B  0008               	return
  9039                           
  9040                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9041  0E4C  10AD               	bcf	__CDS,1
  9042                           
  9043                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9044  0E4D  1A2D               	btfsc	__CDS,4
  9045  0E4E  2E55               	goto	l3479
  9046                           
  9047                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9048  0E4F  082F               	movf	__CDS+2,w
  9049  0E50  0230               	subwf	__CDS+3,w
  9050  0E51  1C03               	skipc
  9051  0E52  0008               	return
  9052                           
  9053                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9054  0E53  162D               	bsf	__CDS,4
  9055                           
  9056                           ;CDS_B1.c: 29: }
  9057                           ;CDS_B1.c: 30: } else {
  9058  0E54  0008               	return
  9059  0E55                     l3479:	
  9060                           
  9061                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9062  0E55  082F               	movf	__CDS+2,w
  9063  0E56  3E9C               	addlw	156
  9064  0E57  00F4               	movwf	??_CDS_Main
  9065  0E58  30FF               	movlw	255
  9066  0E59  1803               	skipnc
  9067  0E5A  3000               	movlw	0
  9068  0E5B  00F5               	movwf	??_CDS_Main+1
  9069  0E5C  0875               	movf	??_CDS_Main+1,w
  9070  0E5D  3A80               	xorlw	128
  9071  0E5E  00F6               	movwf	??_CDS_Main+2
  9072  0E5F  3080               	movlw	128
  9073  0E60  0276               	subwf	??_CDS_Main+2,w
  9074  0E61  1D03               	skipz
  9075  0E62  2E65               	goto	u3465
  9076  0E63  0830               	movf	__CDS+3,w
  9077  0E64  0274               	subwf	??_CDS_Main,w
  9078  0E65                     u3465:	
  9079  0E65  1C03               	skipc
  9080  0E66  0008               	return
  9081                           
  9082                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9083  0E67  1283               	bcf	3,5	;RP0=0, select bank0
  9084  0E68  1303               	bcf	3,6	;RP1=0, select bank0
  9085  0E69  122D               	bcf	__CDS,4
  9086  0E6A  0008               	return
  9087  0E6B                     __end_of_CDS_Main:	
  9088                           
  9089                           	psect	text62
  9090  0B83                     __ptext62:	
  9091 ;; *************** function _CDS_Initialization *****************
  9092 ;; Defined at:
  9093 ;;		line 7 in file "../src/CDS_B1.c"
  9094 ;; Parameters:    Size  Location     Type
  9095 ;;		None
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;		None
  9098 ;; Return value:  Size  Location     Type
  9099 ;;		None               void
  9100 ;; Registers used:
  9101 ;;		None
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9107 ;;      Params:         0       0       0       0
  9108 ;;      Locals:         0       0       0       0
  9109 ;;      Temps:          0       0       0       0
  9110 ;;      Totals:         0       0       0       0
  9111 ;;Total ram usage:        0 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    2
  9114 ;; This function calls:
  9115 ;;		Nothing
  9116 ;; This function is called by:
  9117 ;;		_main
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _CDS_Initialization
  9123  0B83                     _CDS_Initialization:	
  9124                           
  9125                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _CDS_Initialization: []
  9129  0B83  1283               	bcf	3,5	;RP0=0, select bank0
  9130  0B84  1303               	bcf	3,6	;RP1=0, select bank0
  9131  0B85  142D               	bsf	__CDS,0
  9132  0B86  0008               	return
  9133  0B87                     __end_of_CDS_Initialization:	
  9134                           
  9135                           	psect	text63
  9136  0C4F                     __ptext63:	
  9137 ;; *************** function _ISR *****************
  9138 ;; Defined at:
  9139 ;;		line 107 in file "../src/MCU_B1.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;		None
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;		None
  9144 ;; Return value:  Size  Location     Type
  9145 ;;		None               void
  9146 ;; Registers used:
  9147 ;;		wreg, status,2, status,0, pclath, cstack
  9148 ;; Tracked objects:
  9149 ;;		On entry : 0/0
  9150 ;;		On exit  : 0/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9153 ;;      Params:         0       0       0       0
  9154 ;;      Locals:         0       0       0       0
  9155 ;;      Temps:          4       0       0       0
  9156 ;;      Totals:         4       0       0       0
  9157 ;;Total ram usage:        4 bytes
  9158 ;; Hardware stack levels used:    1
  9159 ;; Hardware stack levels required when called:    1
  9160 ;; This function calls:
  9161 ;;		_TMR1_ISR
  9162 ;; This function is called by:
  9163 ;;		Interrupt level 1
  9164 ;; This function uses a non-reentrant model
  9165 ;;
  9166                           
  9167                           
  9168                           ;psect for function _ISR
  9169  0C4F                     _ISR:	
  9170                           
  9171                           ;MCU_B1.c: 109: ;;
  9172                           ;MCU_B1.c: 111: ;;
  9173                           ;MCU_B1.c: 113: TMR1_ISR();
  9174  0C4F  158A  2553  158A   	fcall	_TMR1_ISR
  9175  0C52  0873               	movf	??_ISR+3,w
  9176  0C53  1283               	bcf	3,5	;RP0=0, select bank0
  9177  0C54  1303               	bcf	3,6	;RP1=0, select bank0
  9178  0C55  00FF               	movwf	127
  9179  0C56  0872               	movf	??_ISR+2,w
  9180  0C57  008A               	movwf	10
  9181  0C58  0871               	movf	??_ISR+1,w
  9182  0C59  0084               	movwf	4
  9183  0C5A  0E70               	swapf	??_ISR^(0+-128),w
  9184  0C5B  0083               	movwf	3
  9185  0C5C  0EFE               	swapf	126,f
  9186  0C5D  0E7E               	swapf	126,w
  9187  0C5E  0009               	retfie
  9188  0C5F                     __end_of_ISR:	
  9189                           
  9190                           	psect	intentry
  9191  0004                     __pintentry:	
  9192                           ;incstack = 0
  9193                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9194                           
  9195  0004                     interrupt_function:	
  9196  007E                     saved_w	set	btemp
  9197  0004  00FE               	movwf	btemp
  9198  0005  0E03               	swapf	3,w
  9199  0006  00F0               	movwf	??_ISR
  9200  0007  0804               	movf	4,w
  9201  0008  00F1               	movwf	??_ISR+1
  9202  0009  080A               	movf	10,w
  9203  000A  00F2               	movwf	??_ISR+2
  9204  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9205  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9206  000D  087F               	movf	btemp+1,w
  9207  000E  00F3               	movwf	??_ISR+3
  9208  000F  158A  2C4F         	ljmp	_ISR
  9209                           
  9210                           	psect	text64
  9211  0D53                     __ptext64:	
  9212 ;; *************** function _TMR1_ISR *****************
  9213 ;; Defined at:
  9214 ;;		line 209 in file "../src/MCU_B1.c"
  9215 ;; Parameters:    Size  Location     Type
  9216 ;;		None
  9217 ;; Auto vars:     Size  Location     Type
  9218 ;;		None
  9219 ;; Return value:  Size  Location     Type
  9220 ;;		None               void
  9221 ;; Registers used:
  9222 ;;		wreg, status,2
  9223 ;; Tracked objects:
  9224 ;;		On entry : 0/0
  9225 ;;		On exit  : 0/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9228 ;;      Params:         0       0       0       0
  9229 ;;      Locals:         0       0       0       0
  9230 ;;      Temps:          0       0       0       0
  9231 ;;      Totals:         0       0       0       0
  9232 ;;Total ram usage:        0 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; This function calls:
  9235 ;;		Nothing
  9236 ;; This function is called by:
  9237 ;;		_ISR
  9238 ;; This function uses a non-reentrant model
  9239 ;;
  9240                           
  9241                           
  9242                           ;psect for function _TMR1_ISR
  9243  0D53                     _TMR1_ISR:	
  9244                           
  9245                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  9246                           
  9247                           ;incstack = 0
  9248                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9249  0D53  1683               	bsf	3,5	;RP0=1, select bank1
  9250  0D54  1303               	bcf	3,6	;RP1=0, select bank1
  9251  0D55  1C0C               	btfss	12,0	;volatile
  9252  0D56  0008               	return
  9253  0D57  1283               	bcf	3,5	;RP0=0, select bank0
  9254  0D58  1303               	bcf	3,6	;RP1=0, select bank0
  9255  0D59  1C0C               	btfss	12,0	;volatile
  9256  0D5A  0008               	return
  9257                           
  9258                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
  9259  0D5B  30FA               	movlw	250
  9260  0D5C  008F               	movwf	15	;volatile
  9261                           
  9262                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
  9263  0D5D  3038               	movlw	56
  9264  0D5E  008E               	movwf	14	;volatile
  9265                           
  9266                           ;MCU_B1.c: 214: TMR1IF = 0;
  9267  0D5F  100C               	bcf	12,0	;volatile
  9268                           
  9269                           ;MCU_B1.c: 234: Timer1.Count++;
  9270  0D60  3001               	movlw	1
  9271  0D61  07B7               	addwf	_Timer1+1,f
  9272  0D62  1803               	skipnc
  9273  0D63  0AB8               	incf	_Timer1+2,f
  9274  0D64  3000               	movlw	0
  9275  0D65  07B8               	addwf	_Timer1+2,f
  9276                           
  9277                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
  9278  0D66  3064               	movlw	100
  9279  0D67  0637               	xorwf	_Timer1+1,w
  9280  0D68  0438               	iorwf	_Timer1+2,w
  9281  0D69  1D03               	skipz
  9282  0D6A  0008               	return
  9283                           
  9284                           ;MCU_B1.c: 236: {
  9285                           ;MCU_B1.c: 237: Timer1.Count = 0;
  9286  0D6B  01B7               	clrf	_Timer1+1
  9287  0D6C  01B8               	clrf	_Timer1+2
  9288                           
  9289                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
  9290  0D6D  1436               	bsf	_Timer1,0
  9291  0D6E  0008               	return
  9292  0D6F                     __end_of_TMR1_ISR:	
  9293  007E                     btemp	set	126	;btemp
  9294  007E                     wtemp	set	126
  9295  007E                     wtemp0	set	126
  9296  0080                     wtemp1	set	128
  9297  0082                     wtemp2	set	130
  9298  0084                     wtemp3	set	132
  9299  0086                     wtemp4	set	134
  9300  0088                     wtemp5	set	136
  9301  007F                     wtemp6	set	127
  9302  007E                     ttemp	set	126
  9303  007E                     ttemp0	set	126
  9304  0081                     ttemp1	set	129
  9305  0084                     ttemp2	set	132
  9306  0087                     ttemp3	set	135
  9307  007F                     ttemp4	set	127
  9308  007E                     ltemp	set	126
  9309  007E                     ltemp0	set	126
  9310  0082                     ltemp1	set	130
  9311  0086                     ltemp2	set	134
  9312  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         141
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     21      80
    BANK1            80      1      80
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK0[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_CDS_Main
    _main->_getCDS_AD
    _main->_getPIR_AD
    _main->_getTemp_AD
    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->_getMain_LightsStatus
    _setSYSC_Main->_setLED
    _PIR_Main->_setLED
    _PIR_Main->_setLights_Trigger
    _setMain_Exception->_getAll_Lights_Line
    _setMain_Exception->_setLED
    _setMain_Exception->_setLights_Trigger
    _setLights_Trigger->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect
    _PIR_Initialization->_setLED
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _Load_Main->_getMain_LoadOK
    _getMain_LoadOK->_getLightsControl_OK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_getMain_LightsStatus
    _setLights->_setLights_Line
    _setLights_Line->_LightsPointSelect
    _getMain_All_Error_Status->_getCDS_Status
    _Lights_Control->_LightsPointSelect
    _Lights_Close->_getMain_LightsStatus
    _getLights_Status->_LightsPointSelect
    _Lights_Initialization->_setLights_Initialization
    _setLights_Initialization->_LightsPointSelect
    _LED_Main->_setLED_Main
    _setPIRLED_Main->_setLED
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_setLED
    _setLED->_LedPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lights_Main
    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setTemp_Main->_getMain_All_Error_Status
    _SYSC_Main->_setSYSC_Main
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_setMain_Exception
    _setMain_Exception->_setLights_Trigger
    _PIR_Initialization->_setLED
    _Load_Main->_getMain_All_Error_Status
    _Lights_Main->_setLights_Main
    _setLights_Main->_setLights
    _setLights->_getMain_All_Error_Status
    _Lights_Close->_getMain_LightsStatus
    _getMain_LightsStatus->_getLights_Status
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   29688
                                             17 BANK0      4     0      4
                                              0 BANK1      1     1      0
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           3     3      0     609
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2466
                                              6 COMMON     1     0      1
                                              8 BANK0      6     6      0
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     657
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     977
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     750
                                              6 COMMON     1     0      1
                                              0 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     578
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1566
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    1566
                                              8 BANK0      1     1      0
                            ___awdiv
           _getMain_All_Error_Status
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     861
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0    3305
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         1     1      0    3305
                                              8 BANK0      1     1      0
           _getMain_All_Error_Status
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             8     8      0    7448
                                              9 BANK0      8     8      0
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
                  _setMain_Exception
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    3540
                                              2 BANK0      7     7      0
                 _getAll_Lights_Line
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_Trigger                                    3     2      1     405
                                              6 COMMON     1     0      1
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getAll_Lights_Line                                   1     1      0      68
                                              6 COMMON     1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0    2866
                                              1 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1225
                                              8 BANK0      7     7      0
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              5 COMMON     2     2      0
                _getLightsControl_OK
 ---------------------------------------------------------------------------------
 (3) _getLightsControl_OK                                  1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 5     5      0     111
                                              4 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          5     5      0    2180
                                             12 BANK0      5     5      0
                       _Lights_Close
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0     988
                                             11 BANK0      1     1      0
                  _LightsPointSelect
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1     864
                                              8 BANK0      3     2      1
                  _LightsPointSelect
           _getMain_All_Error_Status
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      62
                                              6 COMMON     1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             9     9      0     439
                                              5 COMMON     1     1      0
                                              0 BANK0      8     8      0
                      _getCDS_Status
 ---------------------------------------------------------------------------------
 (4) _getCDS_Status                                        1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       5     5      0     161
                                              0 BANK0      5     5      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Lights_Close                                         1     1      0     266
                                              6 BANK0      1     1      0
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     266
                                              6 COMMON     1     1      0
                                              2 BANK0      4     4      0
                   _getLights_Status
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              6 COMMON     1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    3123
                        _setLED_Main
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2906
                                              1 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    3021
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    3021
                                              1 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    2866
                                              6 COMMON     1     0      1
                                              0 BANK0      1     1      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Close
       _getMain_LightsStatus
         _getLights_Status
           _LightsPointSelect
     _Lights_Control
       _LightsPointSelect
     _getLoad_OK
     _getMain_All_Error_Status
       _getCDS_Status
     _getMain_LightsStatus
       _getLights_Status
         _LightsPointSelect
     _setLights_Main
       _LightsPointSelect
       _setLights
         _LightsPointSelect
         _getMain_All_Error_Status
           _getCDS_Status
         _setLights_Line
           _LightsPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getMain_All_Error_Status
       _getCDS_Status
     _getMain_LightsStatus
       _getLights_Status
         _LightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getLightsControl_OK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
     _setLED
       _LedPointSelect
   _PIR_Main
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
       _getCDS_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
     _setMain_Exception
       _getAll_Lights_Line
         _LightsPointSelect
       _setLED
         _LedPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
         _getCDS_Status
       _setLED
         _LedPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
         _getCDS_Status
       _getMain_LightsStatus
         _getLights_Status
           _LightsPointSelect
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      AA       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     15      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      1      50       7      100.0%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      AA      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Nov 14 13:48:37 2014

                     _WDT_Clearing 0002          getMain_Lights_Count@count 005B  
                     ___awdiv@sign 0060                                 fsr 0004  
                              l111 0E4A                                l246 0D27  
                              l247 0D2F                                l604 0FDE  
                              l605 0FFE                                l288 0ECE  
                              l289 0ED4                                l609 0FFA  
                              l803 0510                                l682 022D  
                              l683 031C                                l684 031A  
                              l861 01EC                                l862 004D  
                              l790 0513                                l599 0FC5  
                              l679 0351                                l689 02D8  
                              l867 0078                                l868 008E  
                              _GIE 005F                                _RB2 0032  
                              _RA4 002C                                _LED 0077  
                              _RB3 0033                                _RA5 002D  
                              _RB4 0034                                _RB5 0035  
                              _PS0 0408                                _PS1 0409  
                              _PS2 040A                                _ISR 0C4F  
                              _PSA 040B                                _WDT 0039  
           getAll_Lights_Line@line 0076                                fsr0 0004  
                              indf 0000                    __end_of_ADC_Set 0BAC  
        __end_of_LightsPointSelect 0BD6             _setMain_Exception$2462 0061  
                 _getLights_Status 0C5F            __size_of_Lights_Control 006D  
                             ?_ISR 0070                         Load_Main@i 0069  
                       Load_Main@j 0065                               l1200 0F08  
                             l1059 0C11                               l3131 0D7C  
                             l3133 0D7F                               l4113 0FC1  
                             l4105 0FB5                               l3137 0D85  
                             l4123 0FD9                               l4115 0FC9  
                             l4213 057A                               l4221 0586  
                             l4133 0FF4                               l4125 0FE2  
                             l5021 0199                               l4301 07BF  
                             l5007 0134                               l5023 01A4  
                             l4303 07CD                               l4217 0580  
                             l5033 01BE                               l5017 0169  
                             l4313 07EE                               l4251 0E0E  
                   _Load_Main$2773 0067                               l4173 0541  
                             l4253 0E33                               l4317 07F6  
                             l4309 07E3                               l4183 0556  
                             l4191 055E                               l4159 052F  
                             l4423 04AA                               l4249 0E2C  
                             l4273 0798                               l5073 06F7  
                             l4195 0566                               l4187 055A  
                             l4363 062A                               l4291 07B7  
                             l4611 05B0                               l4373 063C  
                             l4269 077D                               l4509 0DAC  
                             l4285 07AC                               l5085 071A  
                             l3479 0E55                               l4375 0648  
                             l4367 0630                               l4359 0624  
                             l4527 06A8                               l4391 0E78  
                             l4455 0500                               l4439 04E5  
                             l4623 05D5                               l4377 0650  
                             l4481 0F74                               l4465 050F  
                             l4561 0F2E                               l4721 0457  
                             l4705 040D                               l4379 065E  
                             l4539 06CD                               l4619 05CC  
                             l4571 0F4F                               l4715 043B  
                             l4815 02D1                               l4399 0E8C  
                             l4487 0F8D                               l4639 05F9  
                             l4567 0F44                               l4559 0F20  
                             l4735 0491                               l4825 02FA  
                             l4809 02C5                               l4729 0483  
                             l4681 03C0                               l4673 03B2  
                             l4657 0DFE                               l4683 03C4  
                             l4691 03DE                               l4685 03C8  
                             l4677 03B8                               l4759 0219  
                             l4679 03BC                               l4873 033C  
                             l4785 027C                               l4689 03CD  
                             l4779 024B                               l4971 00B0  
                             l4939 007B                               l4699 03F1  
                             l4893 0EFF                               l4895 0F03  
                             l4983 00C7                               l4897 0F0B  
                             l4987 00D3                               l4989 00D4  
                             l4999 0120              _myMain_Initialization 0B79  
                     __CFG_WDTE$ON 0000                               u5100 0645  
                             u5120 065B                               u6015 02EB  
                             u3465 0E65                               u2585 0CC4  
                             _PEIE 005E                               u5450 06A4  
                             u5365 0F99                               u5525 0F23  
                             u6415 01B4                               u6345 00F4  
                             u5545 0F2F                               u4835 0E17  
                             u6355 0118                               u4915 07C2  
                             u5555 0F3B                               u6445 01DB  
                             u5565 0F45                               u6375 0152  
                             u4935 07CE                               u4945 07DA  
                             u6395 018F                               u4955 07E4  
                             u5935 027F                               u5945 0286  
                             u5955 0297                               __CDS 002D  
          ?_setSYSC_Initialization 0070                               _SYSC 0028  
                             __PIR 00A0                               _Load 00CF  
                             _Temp 003C                               _main 06DB  
                             btemp 007E                    __end_of_WDT_Set 0C31  
                             ltemp 007E                               start 0011  
                             ttemp 007E                               wtemp 007E  
                 __end_of_CDS_Main 0E6B       __size_of_Temp_Initialization 0003  
                            ??_ISR 0070                  _setLights_Trigger 0D38  
                    ??_Lights_Main 0067                      __CFG_PLLEN$ON 0000  
                 __end_of_LED_Main 0C40                 ?_setLights_Trigger 0076  
                 ??_setPIRLED_Main 005C                              ?_main 006C  
                  __end_of___awdiv 07FD                              _ADRES 001E  
                  ___awdiv@divisor 005B                              _T1CON 0010  
                  __end_of___lwdiv 0F56                      ?_Lights_Close 0070  
                  ___awdiv@counter 005F                              _TMR1H 000F  
                            _TMR1L 000E                              _PORTA 0005  
                            _PORTB 0006                              _PORTC 0007  
                     ?_setLED_Main 0070                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
             setMain_Exception@buz 005F            __end_of_Timeout_Counter 0CCA  
              ??_setLights_Trigger 005B                   __end_of_PIR_Main 01F4  
                 __end_of_TMR1_ISR 0D6F                   __end_of_TMR1_Set 0C23  
                            _getAD 0D6F     __end_of_setSYSC_Initialization 0B8F  
                 __end_of_WDT_Main 0C92                      _LightsControl 003B  
                   __CFG_BOREN$OFF 0000       __end_of_getMain_Lights_Count 0C81  
                            pclath 000A                              ltemp0 007E  
                            ltemp1 0082                              ltemp2 0086  
                            ltemp3 0080     __size_of_setLED_Initialization 0012  
     __end_of_getMain_LightsStatus 0E37      __end_of_setLED_Initialization 0CA4  
                            ttemp0 007E                              ttemp1 0081  
                            ttemp2 0084                              ttemp3 0087  
                            ttemp4 007F                              status 0003  
                            wtemp0 007E                              wtemp1 0080  
                            wtemp2 0082                              wtemp3 0084  
                            wtemp4 0086                              wtemp5 0088  
                            wtemp6 007F                  getPIR_AD@channel1 0067  
                getPIR_AD@channel2 0076             ?_setLoad_AH_AL_Restore 0070  
                   _setLights_Main 0D8B                     _setLights_Line 0BE2  
                  __initialization 0013                 __size_of_SYSC_Main 0003  
        __end_of_setLights_Trigger 0D53                       __end_of_main 073F  
                 __end_of_Fosc_Set 0B99                          ??_ADC_Set 0074  
                           ??_main 00EF                     ??_Lights_Close 0061  
              __end_of_Lights_Main 0F16         __size_of_LightsPointSelect 000A  
                           ?_getAD 0074             ?_myMain_Initialization 0070  
                           _ADCON0 001F                             _ADCON1 009F  
                 ___awdiv@dividend 005D                          ??_WDT_Set 0074  
                           _ANSELA 0185                             _ANSELB 0186  
         _getMain_All_Error_Status 0FA6                             _FVRCON 009D  
           getLights_Status@lights 005B                             _PIRLED 0032  
                           _OSCCON 0090                 __size_of_Load_Main 0165  
                           _TMR1IE 0460                             _TMR1IF 0060  
                           _IO_Set 0CF3             getLights_Status@status 005C  
           __end_of_setLights_Main 0DB3             __end_of_setLights_Line 0BEE  
              _getLightsControl_OK 0BBC       __size_of_SYSC_Initialization 0003  
       __end_of_Mcu_Initialization 0C4F                             _Lights 0078  
                           _Timer1 0036        __size_of_CDS_Initialization 0004  
          ??_Lights_Initialization 0077                          ??___awdiv 0074  
                        ??___lwdiv 0074                             _setLED 0517  
                           _myMain 0020                   ___awdiv@quotient 0061  
               __size_of_Temp_Main 0003        __end_of_Load_Initialization 0B9F  
             ?_getLightsControl_OK 0070                             saved_w 007E  
                 ?_Timeout_Counter 0070        getMain_Lights_Count@status1 005E  
      getMain_Lights_Count@status2 005C        getMain_Lights_Count@status3 005D  
                __end_of_SYSC_Main 0B80                     _Lights_Control 066E  
          __size_of_LedPointSelect 001A                          ?_CDS_Main 0070  
          __size_of_getMain_LoadOK 000C        __size_of_PIR_Initialization 0012  
       getMain_LightsStatus@status 0060            __end_of__initialization 0022  
                        ?_LED_Main 0070                      ?_my_MainTimer 0070  
                  ?_setLights_Main 0070                    ?_setLights_Line 0070  
                    ?_setSYSC_Main 0070         __size_of_setLights_Trigger 001B  
                   __pcstackCOMMON 0070                 __size_of_getCDS_AD 002A  
         __end_of_getLights_Status 0C70                      __end_of_getAD 0D8B  
                        ?_PIR_Main 0070                          ?_TMR1_ISR 0070  
                        ?_TMR1_Set 0070             setLoad_AH_AL_Restore@i 0075  
               _LED_Initialization 0BD6                 __size_of_getPIR_AD 013A  
                      _Lights_Main 0EDB           _setLights_Initialization 0B8F  
             _getMain_Lights_Count 0C70                          ?_WDT_Main 0070  
                __end_of_Load_Main 0359              ??_getLightsControl_OK 0074  
             _getMain_LightsStatus 0E07         __end_of_set_TimeoutCleared 0BA5  
              ?_LED_Initialization 0070             __end_of_Lights_Control 06DB  
            getMain_LightsStatus@i 005E               __size_of_setLED_Main 0039  
                          ??_getAD 0075                _Temp_Initialization 0B80  
                       ??_CDS_Main 0074                         __pbssBANK0 0020  
                       __pbssBANK1 00A0                          ?_Fosc_Set 0070  
      __size_of_getAll_Lights_Line 000D                  __end_of_Temp_Main 0800  
                          ?_IO_Set 0070                    __CFG_VCAPEN$DIS 0000  
                   ??_my_MainTimer 0074                         ??_LED_Main 0077  
             __end_of_Lights_Close 0CF3                     ??_setSYSC_Main 0063  
        getMain_LightsStatus@count 005D               ??_LED_Initialization 0077  
                LedPointSelect@led 0075                         __pmaintext 06DB  
             ?_Temp_Initialization 0070                         ??_PIR_Main 0064  
                       ??_TMR1_ISR 0070                      ?_setTemp_Main 0070  
               __size_of_setLights 0061                         _getLoad_AD 058E  
                       ??_TMR1_Set 0074                         __pintentry 0004  
                       _getLoad_OK 0BAC                            ?_setLED 0076  
          setLights_Trigger@lights 005C              ?_getMain_Lights_Count 0070  
                          _ADC_Set 0BA5                         _getTemp_AD 0DDD  
                       ??_WDT_Main 0074              ?_getMain_LightsStatus 0070  
           __size_of_getCDS_Status 0008                    ?_Lights_Control 0070  
                __end_of_getCDS_AD 0DDD                            _WDT_Set 0C23  
                       ??_Fosc_Set 0074                  __end_of_getPIR_AD 0493  
          ??_setLoad_AH_AL_Restore 0074                    __size_of_IO_Set 0015  
                       getCDS_AD@i 005D                         getCDS_AD@j 005E  
                          _Lights1 0048                            _VarLED1 0053  
                          _VarLED2 0057              ??_Temp_Initialization 0074  
                   ??_setTemp_Main 0063                            ___awdiv 07A0  
        getLightsControl_OK@loadok 0074                            ___lwdiv 0F16  
                  __size_of_setLED 0077                            __ptext0 0000  
                          __ptext1 0CCA                            __ptext2 0B79  
                          __ptext3 0DDD                            __ptext4 0359  
                          __ptext5 0F16                            __ptext6 058E  
                          __ptext7 0DB3                            __ptext8 0D6F  
                          __ptext9 0B9F                         getPIR_AD@i 0068  
                       getPIR_AD@j 0066                       __size_of_ISR 0010  
       ??_getMain_All_Error_Status 0075                _SYSC_Initialization 0B7A  
          ??_myMain_Initialization 0074           ??_setTemp_Initialization 0074  
                   _LedPointSelect 0D1E                     _getMain_LoadOK 0BEE  
                          clrloop0 0BC5                  __end_of_setLights 07A0  
             end_of_initialization 0022                      _getCDS_Status 0BB4  
             ?_SYSC_Initialization 0070              _setLED_Initialization 0C92  
                      ?_getLoad_AD 0070     __size_of_Lights_Initialization 0004  
                      ?_getLoad_OK 0070             ??_getMain_Lights_Count 0074  
    __end_of_Lights_Initialization 0B8B             ??_getMain_LightsStatus 0076  
                      ?_getTemp_AD 0070           setLED_Initialization@led 005C  
               _Mcu_Initialization 0C40               __end_of_my_MainTimer 0CDE  
             __end_of_setSYSC_Main 0FA6             __end_of_LedPointSelect 0D38  
           __end_of_getMain_LoadOK 0BFA                setPIRLED_Main@count 005D  
              ?_Mcu_Initialization 0070              __size_of_Lights_Close 0015  
          __size_of_setPIRLED_Main 006F                   ??_setLights_Main 0077  
                 ??_setLights_Line 0076               setLights_Main@lights 0066  
                        _SYSC_Main 0B7D    getMain_All_Error_Status@command 0061  
                __size_of_CDS_Main 0034                     ?_getCDS_Status 0070  
            ??_SYSC_Initialization 0074                     __end_of_IO_Set 0D08  
       __end_of_CDS_Initialization 0B87         ??_setLights_Initialization 0076  
                __size_of_LED_Main 000F                  _setMain_Exception 0E6B  
             ??_Mcu_Initialization 0075                      ?_WDT_Clearing 0070  
               ?_setMain_Exception 0070                  ?_getLights_Status 0070  
         setMain_Exception@command 0063                       ?_Lights_Main 0070  
                __size_of_PIR_Main 01CF                  __size_of_TMR1_ISR 001C  
               ??_getLights_Status 0076                  __size_of_TMR1_Set 000E  
                   __end_of_setLED 058E                ??_setMain_Exception 005D  
         ??_setSYSC_Initialization 0074                       _Lights_Close 0CDE  
                __size_of_WDT_Main 0011                _Lights_Control$4872 005D  
              start_initialization 0013                    ?_LedPointSelect 0070  
             setLights_Line@lights 0076                          _Load_Main 01F4  
                      __end_of_ISR 0C5F                    ?_getMain_LoadOK 0070  
       __end_of_PIR_Initialization 0CB6       __size_of_Load_Initialization 0006  
  __size_of_setTemp_Initialization 0001                getCDS_Status@status 0074  
             __end_of_setTemp_Main 0517                __size_of_getLoad_AD 0071  
              __size_of_getLoad_OK 0008                         ?_SYSC_Main 0070  
               _set_TimeoutCleared 0B9F                           ??_IO_Set 0074  
         __size_of_Timeout_Counter 0014                          _VarErrLED 004F  
              __size_of_getTemp_AD 002A             ?_setLED_Initialization 0070  
                __size_of_Fosc_Set 0005          __end_of_setMain_Exception 0EA2  
                        _Temp_Main 07FD                    setLights@lights 0065  
              ?_set_TimeoutCleared 0070                     ??_WDT_Clearing 0074  
                  setLights@status 0063        __end_of_getLightsControl_OK 0BC4  
                         ??_setLED 0077                           ?_ADC_Set 0070  
                 ??_Lights_Control 005B   __end_of_getMain_All_Error_Status 1000  
                    ??_setLED_Main 005B                        __pbssCOMMON 0077  
                        ___latbits 0001                         ?_Load_Main 0070  
                    __pcstackBANK0 005B                      __pcstackBANK1 00EF  
             ??_set_TimeoutCleared 0074         __end_of_getAll_Lights_Line 0C07  
                         ?_WDT_Set 0070                    ??_getCDS_Status 0074  
                    PIR_Main@error 006B                          _getCDS_AD 0DB3  
   __size_of_setLoad_AH_AL_Restore 0016      __end_of_setLoad_AH_AL_Restore 0D1E  
                        _getPIR_AD 0359        __size_of_LED_Initialization 000C  
                       ?_Temp_Main 0070                     Load_Main@adjgo 0066  
                 ___lwdiv@dividend 005D                     Load_Main@error 0068  
           _setTemp_Initialization 0B78                      _PIR_Main$3308 0069  
                         ?___awdiv 005B              __size_of_my_MainTimer 0014  
                         ?___lwdiv 005B              __size_of_setSYSC_Main 0050  
                 getMain_LoadOK@ok 0076           setLights_Trigger@command 0076  
  __size_of_setSYSC_Initialization 0004     __size_of_myMain_Initialization 0001  
    __end_of_myMain_Initialization 0B7A                     __size_of_getAD 001C  
                 ___lwdiv@quotient 0060                     _setPIRLED_Main 05FF  
                         _CDS_Main 0E37                __end_of_setLED_Main 0EDB  
                      ??_SYSC_Main 0077        __end_of_Temp_Initialization 0B83  
                interrupt_function 0004                         ?_getCDS_AD 0076  
                         _LED_Main 0C31                          _setLights 073F  
                        clear_ram0 0BC4   __end_of_setLights_Initialization 0B94  
       __size_of_setMain_Exception 0037                       _my_MainTimer 0CCA  
                       ?_getPIR_AD 0076                       _setSYSC_Main 0F56  
                         _GO_nDONE 00F9                  ??_Timeout_Counter 0074  
                         _PIR_Main 0025                       ??_getLoad_AD 005B  
                         _TMR1_ISR 0D53                       ??_getLoad_OK 0074  
                         _TMR1_Set 0C15                       ??_getTemp_AD 005B  
                         _WDT_Main 0C81                   __size_of_ADC_Set 0007  
             __size_of_Lights_Main 003B              __size_of_setTemp_Main 0084  
                      ??_Load_Main 0063             __end_of_setPIRLED_Main 066E  
   getMain_All_Error_Status@status 0062                        getAD@adcon0 0075  
                      getAD@adcon1 0074                     setLED_Main@led 0076  
             __end_of_WDT_Clearing 0004                           _Fosc_Set 0B94  
                 __size_of_WDT_Set 000E            setMain_Exception@status 0060  
               __end_of_getLoad_AD 05FF                 __end_of_getLoad_OK 0BB4  
__size_of_getMain_All_Error_Status 005A          ?_getMain_All_Error_Status 0070  
                       ?_setLights 0063                 __end_of_getTemp_AD 0E07  
           _setSYSC_Initialization 0B8B                  getLoad_AD@channel 005D  
                _DetectSYSC_Signal 0C07                           _SwDetect 0079  
                      ??_Temp_Main 0077      _getMain_All_Error_Status$2483 005B  
    _getMain_All_Error_Status$2492 005D      _getMain_All_Error_Status$2494 005F  
              _Load_Initialization 0B99                 ?_DetectSYSC_Signal 0070  
                        setLED@led 005B                       _setTemp_Main 0493  
                 __size_of___awdiv 005D                   __size_of___lwdiv 0040  
                 ??_LedPointSelect 0074      __size_of_getMain_Lights_Count 0011  
              ??_DetectSYSC_Signal 0074                 _CDS_Initialization 0B83  
                 ??_getMain_LoadOK 0075              _Lights_Initialization 0B87  
    __size_of_getMain_LightsStatus 0030                  getTemp_AD@channel 0076  
                      _setLED_Main 0EA2                    ?_setPIRLED_Main 0070  
                  ___lwdiv@divisor 005B               ?_Load_Initialization 0070  
              ?_CDS_Initialization 0070                    ___lwdiv@counter 005F  
                         __ptext10 0CB6                           __ptext11 0C81  
                         __ptext20 0B7A                           __ptext12 0002  
                         __ptext21 0B8B                           __ptext13 07FD  
                         __ptext30 0CF3                           __ptext22 0025  
                         __ptext14 0493                           __ptext31 0B94  
                         __ptext23 0E6B                           __ptext15 07A0  
                         __ptext40 0D8B                           __ptext32 0BA5  
                         __ptext24 0D38                           __ptext16 0B80  
                         __ptext41 073F                           __ptext33 01F4  
                         __ptext25 0BFA                           __ptext17 0B78  
                         __ptext50 0B87                           __ptext42 0BE2  
                         __ptext34 0BEE                           __ptext26 0CA4  
                         __ptext18 0B7D                           __ptext51 0B8F  
                         __ptext43 0FA6                           __ptext35 0BBC  
                         __ptext27 0C40                           __ptext19 0F56  
                         __ptext60 0C07                           __ptext52 0BCC  
                         __ptext44 0BB4                           __ptext36 0C70  
                         __ptext28 0C23                           __ptext61 0E37  
                         __ptext53 0C31                           __ptext45 0BAC  
                         __ptext37 0B99                           __ptext29 0C15  
                         __ptext62 0B83                           __ptext54 05FF  
                         __ptext46 066E                           __ptext38 0D08  
                         __ptext63 0C4F                           __ptext55 0EA2  
                         __ptext47 0CDE                           __ptext39 0EDB  
                         __ptext64 0D53                           __ptext56 0BD6  
                         __ptext48 0E07                           __ptext57 0C92  
                         __ptext49 0C5F                           __ptext58 0517  
                         __ptext59 0D1E          __size_of_getLights_Status 0011  
      __end_of_SYSC_Initialization 0B7D            ??_setLED_Initialization 0077  
                      ??_getCDS_AD 005B                      setLED@command 0076  
        __end_of_DetectSYSC_Signal 0C15                      __size_of_main 0064  
                      ??_getPIR_AD 0063                 _PIR_Initialization 0CA4  
             ??_CDS_Initialization 0074        __size_of_Mcu_Initialization 000F  
                     getLoad_OK@ok 0074                ?_PIR_Initialization 0070  
                         main@argc 006C                           main@argv 006E  
__size_of_setLights_Initialization 0005          ?_setLights_Initialization 0070  
            ??_Load_Initialization 0076               Lights_Control@lights 005F  
             ??_PIR_Initialization 005C                           intlevel1 0000  
                 _Lights_Main$4852 006A                        ??_setLights 0064  
          ?_setTemp_Initialization 0070            LightsPointSelect@lights 0075  
               _getAll_Lights_Line 0BFA                        getLoad_AD@i 0060  
                      getLoad_AD@j 005F                        getLoad_AD@k 005E  
          __size_of_setLights_Main 0028            __size_of_setLights_Line 000C  
              ?_getAll_Lights_Line 0070             ?_Lights_Initialization 0070  
            __size_of_WDT_Clearing 0002     setLights_Initialization@lights 0076  
     __size_of_getLightsControl_OK 0008        __size_of_set_TimeoutCleared 0006  
                _LightsPointSelect 0BCC               ??_getAll_Lights_Line 0076  
               __CFG_FOSC$INTOSCIO 0000                 ?_LightsPointSelect 0070  
                  _Timeout_Counter 0CB6         __end_of_LED_Initialization 0BE2  
            __end_of_getCDS_Status 0BBC     __end_of_setTemp_Initialization 0B79  
       __size_of_DetectSYSC_Signal 000E                  getCDS_AD@channel1 005F  
                getCDS_AD@channel2 0076                ??_LightsPointSelect 0074  
            _setLoad_AH_AL_Restore 0D08  
