

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Dec 05 16:12:21 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    75                           	dabs	1,0x7E,2
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  000E                     	;# 
    91  000F                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  001D                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  0086                     	;# 
   113  0087                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  008F                     	;# 
   119  0090                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0093                     	;# 
   124  0094                     	;# 
   125  0095                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0096                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009F                     	;# 
   134  0108                     	;# 
   135  0109                     	;# 
   136  010C                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  0185                     	;# 
   143  0186                     	;# 
   144  018C                     	;# 
   145  0000                     	;# 
   146  0001                     	;# 
   147  0002                     	;# 
   148  0003                     	;# 
   149  0004                     	;# 
   150  0005                     	;# 
   151  0006                     	;# 
   152  0007                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0014                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001D                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  0081                     	;# 
   180  0085                     	;# 
   181  0086                     	;# 
   182  0087                     	;# 
   183  0089                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  008F                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0095                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0096                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009F                     	;# 
   203  0108                     	;# 
   204  0109                     	;# 
   205  010C                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  0185                     	;# 
   212  0186                     	;# 
   213  018C                     	;# 
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  0007                     	;# 
   222  0009                     	;# 
   223  000A                     	;# 
   224  000B                     	;# 
   225  000C                     	;# 
   226  000D                     	;# 
   227  000E                     	;# 
   228  000E                     	;# 
   229  000F                     	;# 
   230  0010                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0015                     	;# 
   236  0015                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001B                     	;# 
   244  001C                     	;# 
   245  001D                     	;# 
   246  001E                     	;# 
   247  001F                     	;# 
   248  0081                     	;# 
   249  0085                     	;# 
   250  0086                     	;# 
   251  0087                     	;# 
   252  0089                     	;# 
   253  008C                     	;# 
   254  008D                     	;# 
   255  008E                     	;# 
   256  008F                     	;# 
   257  0090                     	;# 
   258  0091                     	;# 
   259  0092                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0095                     	;# 
   265  0096                     	;# 
   266  0096                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009C                     	;# 
   270  009D                     	;# 
   271  009F                     	;# 
   272  0108                     	;# 
   273  0109                     	;# 
   274  010C                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0186                     	;# 
   282  018C                     	;# 
   283  0000                     	;# 
   284  0001                     	;# 
   285  0002                     	;# 
   286  0003                     	;# 
   287  0004                     	;# 
   288  0005                     	;# 
   289  0006                     	;# 
   290  0007                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  000E                     	;# 
   298  000F                     	;# 
   299  0010                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0013                     	;# 
   303  0014                     	;# 
   304  0015                     	;# 
   305  0015                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001B                     	;# 
   313  001C                     	;# 
   314  001D                     	;# 
   315  001E                     	;# 
   316  001F                     	;# 
   317  0081                     	;# 
   318  0085                     	;# 
   319  0086                     	;# 
   320  0087                     	;# 
   321  0089                     	;# 
   322  008C                     	;# 
   323  008D                     	;# 
   324  008E                     	;# 
   325  008F                     	;# 
   326  0090                     	;# 
   327  0091                     	;# 
   328  0092                     	;# 
   329  0093                     	;# 
   330  0093                     	;# 
   331  0094                     	;# 
   332  0095                     	;# 
   333  0095                     	;# 
   334  0096                     	;# 
   335  0096                     	;# 
   336  0098                     	;# 
   337  0099                     	;# 
   338  009C                     	;# 
   339  009D                     	;# 
   340  009F                     	;# 
   341  0108                     	;# 
   342  0109                     	;# 
   343  010C                     	;# 
   344  010C                     	;# 
   345  010D                     	;# 
   346  010D                     	;# 
   347  010E                     	;# 
   348  010F                     	;# 
   349  0185                     	;# 
   350  0186                     	;# 
   351  018C                     	;# 
   352  0000                     	;# 
   353  0001                     	;# 
   354  0002                     	;# 
   355  0003                     	;# 
   356  0004                     	;# 
   357  0005                     	;# 
   358  0006                     	;# 
   359  0007                     	;# 
   360  0009                     	;# 
   361  000A                     	;# 
   362  000B                     	;# 
   363  000C                     	;# 
   364  000D                     	;# 
   365  000E                     	;# 
   366  000E                     	;# 
   367  000F                     	;# 
   368  0010                     	;# 
   369  0011                     	;# 
   370  0012                     	;# 
   371  0013                     	;# 
   372  0014                     	;# 
   373  0015                     	;# 
   374  0015                     	;# 
   375  0016                     	;# 
   376  0017                     	;# 
   377  0018                     	;# 
   378  0019                     	;# 
   379  001A                     	;# 
   380  001B                     	;# 
   381  001B                     	;# 
   382  001C                     	;# 
   383  001D                     	;# 
   384  001E                     	;# 
   385  001F                     	;# 
   386  0081                     	;# 
   387  0085                     	;# 
   388  0086                     	;# 
   389  0087                     	;# 
   390  0089                     	;# 
   391  008C                     	;# 
   392  008D                     	;# 
   393  008E                     	;# 
   394  008F                     	;# 
   395  0090                     	;# 
   396  0091                     	;# 
   397  0092                     	;# 
   398  0093                     	;# 
   399  0093                     	;# 
   400  0094                     	;# 
   401  0095                     	;# 
   402  0095                     	;# 
   403  0096                     	;# 
   404  0096                     	;# 
   405  0098                     	;# 
   406  0099                     	;# 
   407  009C                     	;# 
   408  009D                     	;# 
   409  009F                     	;# 
   410  0108                     	;# 
   411  0109                     	;# 
   412  010C                     	;# 
   413  010C                     	;# 
   414  010D                     	;# 
   415  010D                     	;# 
   416  010E                     	;# 
   417  010F                     	;# 
   418  0185                     	;# 
   419  0186                     	;# 
   420  018C                     	;# 
   421  0000                     	;# 
   422  0001                     	;# 
   423  0002                     	;# 
   424  0003                     	;# 
   425  0004                     	;# 
   426  0005                     	;# 
   427  0006                     	;# 
   428  0007                     	;# 
   429  0009                     	;# 
   430  000A                     	;# 
   431  000B                     	;# 
   432  000C                     	;# 
   433  000D                     	;# 
   434  000E                     	;# 
   435  000E                     	;# 
   436  000F                     	;# 
   437  0010                     	;# 
   438  0011                     	;# 
   439  0012                     	;# 
   440  0013                     	;# 
   441  0014                     	;# 
   442  0015                     	;# 
   443  0015                     	;# 
   444  0016                     	;# 
   445  0017                     	;# 
   446  0018                     	;# 
   447  0019                     	;# 
   448  001A                     	;# 
   449  001B                     	;# 
   450  001B                     	;# 
   451  001C                     	;# 
   452  001D                     	;# 
   453  001E                     	;# 
   454  001F                     	;# 
   455  0081                     	;# 
   456  0085                     	;# 
   457  0086                     	;# 
   458  0087                     	;# 
   459  0089                     	;# 
   460  008C                     	;# 
   461  008D                     	;# 
   462  008E                     	;# 
   463  008F                     	;# 
   464  0090                     	;# 
   465  0091                     	;# 
   466  0092                     	;# 
   467  0093                     	;# 
   468  0093                     	;# 
   469  0094                     	;# 
   470  0095                     	;# 
   471  0095                     	;# 
   472  0096                     	;# 
   473  0096                     	;# 
   474  0098                     	;# 
   475  0099                     	;# 
   476  009C                     	;# 
   477  009D                     	;# 
   478  009F                     	;# 
   479  0108                     	;# 
   480  0109                     	;# 
   481  010C                     	;# 
   482  010C                     	;# 
   483  010D                     	;# 
   484  010D                     	;# 
   485  010E                     	;# 
   486  010F                     	;# 
   487  0185                     	;# 
   488  0186                     	;# 
   489  018C                     	;# 
   490  0000                     	;# 
   491  0001                     	;# 
   492  0002                     	;# 
   493  0003                     	;# 
   494  0004                     	;# 
   495  0005                     	;# 
   496  0006                     	;# 
   497  0007                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  000E                     	;# 
   505  000F                     	;# 
   506  0010                     	;# 
   507  0011                     	;# 
   508  0012                     	;# 
   509  0013                     	;# 
   510  0014                     	;# 
   511  0015                     	;# 
   512  0015                     	;# 
   513  0016                     	;# 
   514  0017                     	;# 
   515  0018                     	;# 
   516  0019                     	;# 
   517  001A                     	;# 
   518  001B                     	;# 
   519  001B                     	;# 
   520  001C                     	;# 
   521  001D                     	;# 
   522  001E                     	;# 
   523  001F                     	;# 
   524  0081                     	;# 
   525  0085                     	;# 
   526  0086                     	;# 
   527  0087                     	;# 
   528  0089                     	;# 
   529  008C                     	;# 
   530  008D                     	;# 
   531  008E                     	;# 
   532  008F                     	;# 
   533  0090                     	;# 
   534  0091                     	;# 
   535  0092                     	;# 
   536  0093                     	;# 
   537  0093                     	;# 
   538  0094                     	;# 
   539  0095                     	;# 
   540  0095                     	;# 
   541  0096                     	;# 
   542  0096                     	;# 
   543  0098                     	;# 
   544  0099                     	;# 
   545  009C                     	;# 
   546  009D                     	;# 
   547  009F                     	;# 
   548  0108                     	;# 
   549  0109                     	;# 
   550  010C                     	;# 
   551  010C                     	;# 
   552  010D                     	;# 
   553  010D                     	;# 
   554  010E                     	;# 
   555  010F                     	;# 
   556  0185                     	;# 
   557  0186                     	;# 
   558  018C                     	;# 
   559  0000                     	;# 
   560  0001                     	;# 
   561  0002                     	;# 
   562  0003                     	;# 
   563  0004                     	;# 
   564  0005                     	;# 
   565  0006                     	;# 
   566  0007                     	;# 
   567  0009                     	;# 
   568  000A                     	;# 
   569  000B                     	;# 
   570  000C                     	;# 
   571  000D                     	;# 
   572  000E                     	;# 
   573  000E                     	;# 
   574  000F                     	;# 
   575  0010                     	;# 
   576  0011                     	;# 
   577  0012                     	;# 
   578  0013                     	;# 
   579  0014                     	;# 
   580  0015                     	;# 
   581  0015                     	;# 
   582  0016                     	;# 
   583  0017                     	;# 
   584  0018                     	;# 
   585  0019                     	;# 
   586  001A                     	;# 
   587  001B                     	;# 
   588  001B                     	;# 
   589  001C                     	;# 
   590  001D                     	;# 
   591  001E                     	;# 
   592  001F                     	;# 
   593  0081                     	;# 
   594  0085                     	;# 
   595  0086                     	;# 
   596  0087                     	;# 
   597  0089                     	;# 
   598  008C                     	;# 
   599  008D                     	;# 
   600  008E                     	;# 
   601  008F                     	;# 
   602  0090                     	;# 
   603  0091                     	;# 
   604  0092                     	;# 
   605  0093                     	;# 
   606  0093                     	;# 
   607  0094                     	;# 
   608  0095                     	;# 
   609  0095                     	;# 
   610  0096                     	;# 
   611  0096                     	;# 
   612  0098                     	;# 
   613  0099                     	;# 
   614  009C                     	;# 
   615  009D                     	;# 
   616  009F                     	;# 
   617  0108                     	;# 
   618  0109                     	;# 
   619  010C                     	;# 
   620  010C                     	;# 
   621  010D                     	;# 
   622  010D                     	;# 
   623  010E                     	;# 
   624  010F                     	;# 
   625  0185                     	;# 
   626  0186                     	;# 
   627  018C                     	;# 
   628  0000                     	;# 
   629  0001                     	;# 
   630  0002                     	;# 
   631  0003                     	;# 
   632  0004                     	;# 
   633  0005                     	;# 
   634  0006                     	;# 
   635  0007                     	;# 
   636  0009                     	;# 
   637  000A                     	;# 
   638  000B                     	;# 
   639  000C                     	;# 
   640  000D                     	;# 
   641  000E                     	;# 
   642  000E                     	;# 
   643  000F                     	;# 
   644  0010                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0013                     	;# 
   648  0014                     	;# 
   649  0015                     	;# 
   650  0015                     	;# 
   651  0016                     	;# 
   652  0017                     	;# 
   653  0018                     	;# 
   654  0019                     	;# 
   655  001A                     	;# 
   656  001B                     	;# 
   657  001B                     	;# 
   658  001C                     	;# 
   659  001D                     	;# 
   660  001E                     	;# 
   661  001F                     	;# 
   662  0081                     	;# 
   663  0085                     	;# 
   664  0086                     	;# 
   665  0087                     	;# 
   666  0089                     	;# 
   667  008C                     	;# 
   668  008D                     	;# 
   669  008E                     	;# 
   670  008F                     	;# 
   671  0090                     	;# 
   672  0091                     	;# 
   673  0092                     	;# 
   674  0093                     	;# 
   675  0093                     	;# 
   676  0094                     	;# 
   677  0095                     	;# 
   678  0095                     	;# 
   679  0096                     	;# 
   680  0096                     	;# 
   681  0098                     	;# 
   682  0099                     	;# 
   683  009C                     	;# 
   684  009D                     	;# 
   685  009F                     	;# 
   686  0108                     	;# 
   687  0109                     	;# 
   688  010C                     	;# 
   689  010C                     	;# 
   690  010D                     	;# 
   691  010D                     	;# 
   692  010E                     	;# 
   693  010F                     	;# 
   694  0185                     	;# 
   695  0186                     	;# 
   696  018C                     	;# 
   697  0000                     	;# 
   698  0001                     	;# 
   699  0002                     	;# 
   700  0003                     	;# 
   701  0004                     	;# 
   702  0005                     	;# 
   703  0006                     	;# 
   704  0007                     	;# 
   705  0009                     	;# 
   706  000A                     	;# 
   707  000B                     	;# 
   708  000C                     	;# 
   709  000D                     	;# 
   710  000E                     	;# 
   711  000E                     	;# 
   712  000F                     	;# 
   713  0010                     	;# 
   714  0011                     	;# 
   715  0012                     	;# 
   716  0013                     	;# 
   717  0014                     	;# 
   718  0015                     	;# 
   719  0015                     	;# 
   720  0016                     	;# 
   721  0017                     	;# 
   722  0018                     	;# 
   723  0019                     	;# 
   724  001A                     	;# 
   725  001B                     	;# 
   726  001B                     	;# 
   727  001C                     	;# 
   728  001D                     	;# 
   729  001E                     	;# 
   730  001F                     	;# 
   731  0081                     	;# 
   732  0085                     	;# 
   733  0086                     	;# 
   734  0087                     	;# 
   735  0089                     	;# 
   736  008C                     	;# 
   737  008D                     	;# 
   738  008E                     	;# 
   739  008F                     	;# 
   740  0090                     	;# 
   741  0091                     	;# 
   742  0092                     	;# 
   743  0093                     	;# 
   744  0093                     	;# 
   745  0094                     	;# 
   746  0095                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0096                     	;# 
   750  0098                     	;# 
   751  0099                     	;# 
   752  009C                     	;# 
   753  009D                     	;# 
   754  009F                     	;# 
   755  0108                     	;# 
   756  0109                     	;# 
   757  010C                     	;# 
   758  010C                     	;# 
   759  010D                     	;# 
   760  010D                     	;# 
   761  010E                     	;# 
   762  010F                     	;# 
   763  0185                     	;# 
   764  0186                     	;# 
   765  018C                     	;# 
   766  0000                     	;# 
   767  0001                     	;# 
   768  0002                     	;# 
   769  0003                     	;# 
   770  0004                     	;# 
   771  0005                     	;# 
   772  0006                     	;# 
   773  0007                     	;# 
   774  0009                     	;# 
   775  000A                     	;# 
   776  000B                     	;# 
   777  000C                     	;# 
   778  000D                     	;# 
   779  000E                     	;# 
   780  000E                     	;# 
   781  000F                     	;# 
   782  0010                     	;# 
   783  0011                     	;# 
   784  0012                     	;# 
   785  0013                     	;# 
   786  0014                     	;# 
   787  0015                     	;# 
   788  0015                     	;# 
   789  0016                     	;# 
   790  0017                     	;# 
   791  0018                     	;# 
   792  0019                     	;# 
   793  001A                     	;# 
   794  001B                     	;# 
   795  001B                     	;# 
   796  001C                     	;# 
   797  001D                     	;# 
   798  001E                     	;# 
   799  001F                     	;# 
   800  0081                     	;# 
   801  0085                     	;# 
   802  0086                     	;# 
   803  0087                     	;# 
   804  0089                     	;# 
   805  008C                     	;# 
   806  008D                     	;# 
   807  008E                     	;# 
   808  008F                     	;# 
   809  0090                     	;# 
   810  0091                     	;# 
   811  0092                     	;# 
   812  0093                     	;# 
   813  0093                     	;# 
   814  0094                     	;# 
   815  0095                     	;# 
   816  0095                     	;# 
   817  0096                     	;# 
   818  0096                     	;# 
   819  0098                     	;# 
   820  0099                     	;# 
   821  009C                     	;# 
   822  009D                     	;# 
   823  009F                     	;# 
   824  0108                     	;# 
   825  0109                     	;# 
   826  010C                     	;# 
   827  010C                     	;# 
   828  010D                     	;# 
   829  010D                     	;# 
   830  010E                     	;# 
   831  010F                     	;# 
   832  0185                     	;# 
   833  0186                     	;# 
   834  018C                     	;# 
   835  0000                     	;# 
   836  0001                     	;# 
   837  0002                     	;# 
   838  0003                     	;# 
   839  0004                     	;# 
   840  0005                     	;# 
   841  0006                     	;# 
   842  0007                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  000E                     	;# 
   850  000F                     	;# 
   851  0010                     	;# 
   852  0011                     	;# 
   853  0012                     	;# 
   854  0013                     	;# 
   855  0014                     	;# 
   856  0015                     	;# 
   857  0015                     	;# 
   858  0016                     	;# 
   859  0017                     	;# 
   860  0018                     	;# 
   861  0019                     	;# 
   862  001A                     	;# 
   863  001B                     	;# 
   864  001B                     	;# 
   865  001C                     	;# 
   866  001D                     	;# 
   867  001E                     	;# 
   868  001F                     	;# 
   869  0081                     	;# 
   870  0085                     	;# 
   871  0086                     	;# 
   872  0087                     	;# 
   873  0089                     	;# 
   874  008C                     	;# 
   875  008D                     	;# 
   876  008E                     	;# 
   877  008F                     	;# 
   878  0090                     	;# 
   879  0091                     	;# 
   880  0092                     	;# 
   881  0093                     	;# 
   882  0093                     	;# 
   883  0094                     	;# 
   884  0095                     	;# 
   885  0095                     	;# 
   886  0096                     	;# 
   887  0096                     	;# 
   888  0098                     	;# 
   889  0099                     	;# 
   890  009C                     	;# 
   891  009D                     	;# 
   892  009F                     	;# 
   893  0108                     	;# 
   894  0109                     	;# 
   895  010C                     	;# 
   896  010C                     	;# 
   897  010D                     	;# 
   898  010D                     	;# 
   899  010E                     	;# 
   900  010F                     	;# 
   901  0185                     	;# 
   902  0186                     	;# 
   903  018C                     	;# 
   904  0000                     	;# 
   905  0001                     	;# 
   906  0002                     	;# 
   907  0003                     	;# 
   908  0004                     	;# 
   909  0005                     	;# 
   910  0006                     	;# 
   911  0007                     	;# 
   912  0009                     	;# 
   913  000A                     	;# 
   914  000B                     	;# 
   915  000C                     	;# 
   916  000D                     	;# 
   917  000E                     	;# 
   918  000E                     	;# 
   919  000F                     	;# 
   920  0010                     	;# 
   921  0011                     	;# 
   922  0012                     	;# 
   923  0013                     	;# 
   924  0014                     	;# 
   925  0015                     	;# 
   926  0015                     	;# 
   927  0016                     	;# 
   928  0017                     	;# 
   929  0018                     	;# 
   930  0019                     	;# 
   931  001A                     	;# 
   932  001B                     	;# 
   933  001B                     	;# 
   934  001C                     	;# 
   935  001D                     	;# 
   936  001E                     	;# 
   937  001F                     	;# 
   938  0081                     	;# 
   939  0085                     	;# 
   940  0086                     	;# 
   941  0087                     	;# 
   942  0089                     	;# 
   943  008C                     	;# 
   944  008D                     	;# 
   945  008E                     	;# 
   946  008F                     	;# 
   947  0090                     	;# 
   948  0091                     	;# 
   949  0092                     	;# 
   950  0093                     	;# 
   951  0093                     	;# 
   952  0094                     	;# 
   953  0095                     	;# 
   954  0095                     	;# 
   955  0096                     	;# 
   956  0096                     	;# 
   957  0098                     	;# 
   958  0099                     	;# 
   959  009C                     	;# 
   960  009D                     	;# 
   961  009F                     	;# 
   962  0108                     	;# 
   963  0109                     	;# 
   964  010C                     	;# 
   965  010C                     	;# 
   966  010D                     	;# 
   967  010D                     	;# 
   968  010E                     	;# 
   969  010F                     	;# 
   970  0185                     	;# 
   971  0186                     	;# 
   972  018C                     	;# 
   973  0000                     	;# 
   974  0001                     	;# 
   975  0002                     	;# 
   976  0003                     	;# 
   977  0004                     	;# 
   978  0005                     	;# 
   979  0006                     	;# 
   980  0007                     	;# 
   981  0009                     	;# 
   982  000A                     	;# 
   983  000B                     	;# 
   984  000C                     	;# 
   985  000D                     	;# 
   986  000E                     	;# 
   987  000E                     	;# 
   988  000F                     	;# 
   989  0010                     	;# 
   990  0011                     	;# 
   991  0012                     	;# 
   992  0013                     	;# 
   993  0014                     	;# 
   994  0015                     	;# 
   995  0015                     	;# 
   996  0016                     	;# 
   997  0017                     	;# 
   998  0018                     	;# 
   999  0019                     	;# 
  1000  001A                     	;# 
  1001  001B                     	;# 
  1002  001B                     	;# 
  1003  001C                     	;# 
  1004  001D                     	;# 
  1005  001E                     	;# 
  1006  001F                     	;# 
  1007  0081                     	;# 
  1008  0085                     	;# 
  1009  0086                     	;# 
  1010  0087                     	;# 
  1011  0089                     	;# 
  1012  008C                     	;# 
  1013  008D                     	;# 
  1014  008E                     	;# 
  1015  008F                     	;# 
  1016  0090                     	;# 
  1017  0091                     	;# 
  1018  0092                     	;# 
  1019  0093                     	;# 
  1020  0093                     	;# 
  1021  0094                     	;# 
  1022  0095                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0096                     	;# 
  1026  0098                     	;# 
  1027  0099                     	;# 
  1028  009C                     	;# 
  1029  009D                     	;# 
  1030  009F                     	;# 
  1031  0108                     	;# 
  1032  0109                     	;# 
  1033  010C                     	;# 
  1034  010C                     	;# 
  1035  010D                     	;# 
  1036  010D                     	;# 
  1037  010E                     	;# 
  1038  010F                     	;# 
  1039  0185                     	;# 
  1040  0186                     	;# 
  1041  018C                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0009                     	;# 
  1051  000A                     	;# 
  1052  000B                     	;# 
  1053  000C                     	;# 
  1054  000D                     	;# 
  1055  000E                     	;# 
  1056  000E                     	;# 
  1057  000F                     	;# 
  1058  0010                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0013                     	;# 
  1062  0014                     	;# 
  1063  0015                     	;# 
  1064  0015                     	;# 
  1065  0016                     	;# 
  1066  0017                     	;# 
  1067  0018                     	;# 
  1068  0019                     	;# 
  1069  001A                     	;# 
  1070  001B                     	;# 
  1071  001B                     	;# 
  1072  001C                     	;# 
  1073  001D                     	;# 
  1074  001E                     	;# 
  1075  001F                     	;# 
  1076  0081                     	;# 
  1077  0085                     	;# 
  1078  0086                     	;# 
  1079  0087                     	;# 
  1080  0089                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  008E                     	;# 
  1084  008F                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0093                     	;# 
  1089  0093                     	;# 
  1090  0094                     	;# 
  1091  0095                     	;# 
  1092  0095                     	;# 
  1093  0096                     	;# 
  1094  0096                     	;# 
  1095  0098                     	;# 
  1096  0099                     	;# 
  1097  009C                     	;# 
  1098  009D                     	;# 
  1099  009F                     	;# 
  1100  0108                     	;# 
  1101  0109                     	;# 
  1102  010C                     	;# 
  1103  010C                     	;# 
  1104  010D                     	;# 
  1105  010D                     	;# 
  1106  010E                     	;# 
  1107  010F                     	;# 
  1108  0185                     	;# 
  1109  0186                     	;# 
  1110  018C                     	;# 
  1111  0000                     	;# 
  1112  0001                     	;# 
  1113  0002                     	;# 
  1114  0003                     	;# 
  1115  0004                     	;# 
  1116  0005                     	;# 
  1117  0006                     	;# 
  1118  0007                     	;# 
  1119  0009                     	;# 
  1120  000A                     	;# 
  1121  000B                     	;# 
  1122  000C                     	;# 
  1123  000D                     	;# 
  1124  000E                     	;# 
  1125  000E                     	;# 
  1126  000F                     	;# 
  1127  0010                     	;# 
  1128  0011                     	;# 
  1129  0012                     	;# 
  1130  0013                     	;# 
  1131  0014                     	;# 
  1132  0015                     	;# 
  1133  0015                     	;# 
  1134  0016                     	;# 
  1135  0017                     	;# 
  1136  0018                     	;# 
  1137  0019                     	;# 
  1138  001A                     	;# 
  1139  001B                     	;# 
  1140  001B                     	;# 
  1141  001C                     	;# 
  1142  001D                     	;# 
  1143  001E                     	;# 
  1144  001F                     	;# 
  1145  0081                     	;# 
  1146  0085                     	;# 
  1147  0086                     	;# 
  1148  0087                     	;# 
  1149  0089                     	;# 
  1150  008C                     	;# 
  1151  008D                     	;# 
  1152  008E                     	;# 
  1153  008F                     	;# 
  1154  0090                     	;# 
  1155  0091                     	;# 
  1156  0092                     	;# 
  1157  0093                     	;# 
  1158  0093                     	;# 
  1159  0094                     	;# 
  1160  0095                     	;# 
  1161  0095                     	;# 
  1162  0096                     	;# 
  1163  0096                     	;# 
  1164  0098                     	;# 
  1165  0099                     	;# 
  1166  009C                     	;# 
  1167  009D                     	;# 
  1168  009F                     	;# 
  1169  0108                     	;# 
  1170  0109                     	;# 
  1171  010C                     	;# 
  1172  010C                     	;# 
  1173  010D                     	;# 
  1174  010D                     	;# 
  1175  010E                     	;# 
  1176  010F                     	;# 
  1177  0185                     	;# 
  1178  0186                     	;# 
  1179  018C                     	;# 
  1180  0000                     	;# 
  1181  0001                     	;# 
  1182  0002                     	;# 
  1183  0003                     	;# 
  1184  0004                     	;# 
  1185  0005                     	;# 
  1186  0006                     	;# 
  1187  0007                     	;# 
  1188  0009                     	;# 
  1189  000A                     	;# 
  1190  000B                     	;# 
  1191  000C                     	;# 
  1192  000D                     	;# 
  1193  000E                     	;# 
  1194  000E                     	;# 
  1195  000F                     	;# 
  1196  0010                     	;# 
  1197  0011                     	;# 
  1198  0012                     	;# 
  1199  0013                     	;# 
  1200  0014                     	;# 
  1201  0015                     	;# 
  1202  0015                     	;# 
  1203  0016                     	;# 
  1204  0017                     	;# 
  1205  0018                     	;# 
  1206  0019                     	;# 
  1207  001A                     	;# 
  1208  001B                     	;# 
  1209  001B                     	;# 
  1210  001C                     	;# 
  1211  001D                     	;# 
  1212  001E                     	;# 
  1213  001F                     	;# 
  1214  0081                     	;# 
  1215  0085                     	;# 
  1216  0086                     	;# 
  1217  0087                     	;# 
  1218  0089                     	;# 
  1219  008C                     	;# 
  1220  008D                     	;# 
  1221  008E                     	;# 
  1222  008F                     	;# 
  1223  0090                     	;# 
  1224  0091                     	;# 
  1225  0092                     	;# 
  1226  0093                     	;# 
  1227  0093                     	;# 
  1228  0094                     	;# 
  1229  0095                     	;# 
  1230  0095                     	;# 
  1231  0096                     	;# 
  1232  0096                     	;# 
  1233  0098                     	;# 
  1234  0099                     	;# 
  1235  009C                     	;# 
  1236  009D                     	;# 
  1237  009F                     	;# 
  1238  0108                     	;# 
  1239  0109                     	;# 
  1240  010C                     	;# 
  1241  010C                     	;# 
  1242  010D                     	;# 
  1243  010D                     	;# 
  1244  010E                     	;# 
  1245  010F                     	;# 
  1246  0185                     	;# 
  1247  0186                     	;# 
  1248  018C                     	;# 
  1249  0000                     	;# 
  1250  0001                     	;# 
  1251  0002                     	;# 
  1252  0003                     	;# 
  1253  0004                     	;# 
  1254  0005                     	;# 
  1255  0006                     	;# 
  1256  0007                     	;# 
  1257  0009                     	;# 
  1258  000A                     	;# 
  1259  000B                     	;# 
  1260  000C                     	;# 
  1261  000D                     	;# 
  1262  000E                     	;# 
  1263  000E                     	;# 
  1264  000F                     	;# 
  1265  0010                     	;# 
  1266  0011                     	;# 
  1267  0012                     	;# 
  1268  0013                     	;# 
  1269  0014                     	;# 
  1270  0015                     	;# 
  1271  0015                     	;# 
  1272  0016                     	;# 
  1273  0017                     	;# 
  1274  0018                     	;# 
  1275  0019                     	;# 
  1276  001A                     	;# 
  1277  001B                     	;# 
  1278  001B                     	;# 
  1279  001C                     	;# 
  1280  001D                     	;# 
  1281  001E                     	;# 
  1282  001F                     	;# 
  1283  0081                     	;# 
  1284  0085                     	;# 
  1285  0086                     	;# 
  1286  0087                     	;# 
  1287  0089                     	;# 
  1288  008C                     	;# 
  1289  008D                     	;# 
  1290  008E                     	;# 
  1291  008F                     	;# 
  1292  0090                     	;# 
  1293  0091                     	;# 
  1294  0092                     	;# 
  1295  0093                     	;# 
  1296  0093                     	;# 
  1297  0094                     	;# 
  1298  0095                     	;# 
  1299  0095                     	;# 
  1300  0096                     	;# 
  1301  0096                     	;# 
  1302  0098                     	;# 
  1303  0099                     	;# 
  1304  009C                     	;# 
  1305  009D                     	;# 
  1306  009F                     	;# 
  1307  0108                     	;# 
  1308  0109                     	;# 
  1309  010C                     	;# 
  1310  010C                     	;# 
  1311  010D                     	;# 
  1312  010D                     	;# 
  1313  010E                     	;# 
  1314  010F                     	;# 
  1315  0185                     	;# 
  1316  0186                     	;# 
  1317  018C                     	;# 
  1318  001F                     _ADCON0	set	31
  1319  001E                     _ADRES	set	30
  1320  0005                     _PORTA	set	5
  1321  0006                     _PORTB	set	6
  1322  0007                     _PORTC	set	7
  1323  001A                     _RCREG	set	26
  1324  0018                     _RCSTA	set	24
  1325  0010                     _T1CON	set	16
  1326  000F                     _TMR1H	set	15
  1327  000E                     _TMR1L	set	14
  1328  0019                     _TXREG	set	25
  1329  005F                     _GIE	set	95
  1330  00F9                     _GO_nDONE	set	249
  1331  005E                     _PEIE	set	94
  1332  002C                     _RA4	set	44
  1333  0032                     _RB2	set	50
  1334  0033                     _RB3	set	51
  1335  0034                     _RB4	set	52
  1336  0035                     _RB5	set	53
  1337  0065                     _RCIF	set	101
  1338  00C6                     _RX9	set	198
  1339  0060                     _TMR1IF	set	96
  1340  0064                     _TXIF	set	100
  1341  009F                     _ADCON1	set	159
  1342  009D                     _FVRCON	set	157
  1343  0090                     _OSCCON	set	144
  1344  0099                     _SPBRG	set	153
  1345  0085                     _TRISA	set	133
  1346  0086                     _TRISB	set	134
  1347  0087                     _TRISC	set	135
  1348  0098                     _TXSTA	set	152
  1349  0408                     _PS0	set	1032
  1350  0409                     _PS1	set	1033
  1351  040A                     _PS2	set	1034
  1352  040B                     _PSA	set	1035
  1353  0465                     _RCIE	set	1125
  1354  0460                     _TMR1IE	set	1120
  1355  043E                     _TRISC6	set	1086
  1356  043F                     _TRISC7	set	1087
  1357  04C6                     _TX9	set	1222
  1358  0464                     _TXIE	set	1124
  1359  0185                     _ANSELA	set	389
  1360  0186                     _ANSELB	set	390
  1361                           
  1362                           	psect	text0
  1363  0000                     __ptext0:	
  1364                           ; #config settings
  1365                           
  1366                           
  1367                           ;psect for function _TMR1_ISR
  1368  0000                     
  1369                           	psect	cinit
  1370  0013                     start_initialization:	
  1371  0013                     __initialization:	
  1372                           
  1373                           ; Clear objects allocated to COMMON
  1374  0013  01F7               	clrf	__pbssCOMMON& (0+127)
  1375  0014  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1376  0015  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1377                           
  1378                           ; Clear objects allocated to BANK0
  1379  0016  1383               	bcf	3,7	;select IRP bank0
  1380  0017  3020               	movlw	low __pbssBANK0
  1381  0018  0084               	movwf	4
  1382  0019  3055               	movlw	low (__pbssBANK0+53)
  1383  001A  158A  23B2  118A   	fcall	clear_ram0
  1384                           
  1385                           ; Clear objects allocated to BANK1
  1386  001D  30A0               	movlw	low __pbssBANK1
  1387  001E  0084               	movwf	4
  1388  001F  30F0               	movlw	low (__pbssBANK1+80)
  1389  0020  158A  23B2         	fcall	clear_ram0
  1390  0022                     end_of_initialization:	
  1391                           ;End of C runtime variable initialization code
  1392                           
  1393  0022                     __end_of__initialization:	
  1394  0022  0183               	clrf	3
  1395  0023  158A  2FAC         	ljmp	_main	;jump to C main() function
  1396                           
  1397                           	psect	bssCOMMON
  1398  0077                     __pbssCOMMON:	
  1399  0077                     _WDT:	
  1400  0077                     	ds	2
  1401  0079                     _SwDetect:	
  1402  0079                     	ds	1
  1403                           
  1404                           	psect	bssBANK0
  1405  0020                     __pbssBANK0:	
  1406  0020                     _myMain:	
  1407  0020                     	ds	7
  1408  0027                     __CDS:	
  1409  0027                     	ds	5
  1410  002C                     _PIRLED:	
  1411  002C                     	ds	4
  1412  0030                     _Timer1:	
  1413  0030                     	ds	3
  1414  0033                     _LED:	
  1415  0033                     	ds	1
  1416  0034                     _Lights:	
  1417  0034                     	ds	1
  1418  0035                     _LightsControl:	
  1419  0035                     	ds	1
  1420  0036                     _UART:	
  1421  0036                     	ds	12
  1422  0042                     _Lights1:	
  1423  0042                     	ds	7
  1424  0049                     _VarErrLED:	
  1425  0049                     	ds	4
  1426  004D                     _VarLED1:	
  1427  004D                     	ds	4
  1428  0051                     _VarLED2:	
  1429  0051                     	ds	4
  1430                           
  1431                           	psect	bssBANK1
  1432  00A0                     __pbssBANK1:	
  1433  00A0                     __PIR:	
  1434  00A0                     	ds	47
  1435  00CF                     _Load:	
  1436  00CF                     	ds	33
  1437                           
  1438                           	psect	clrtext
  1439  0BB2                     clear_ram0:	
  1440                           ;	Called with FSR containing the base address, and
  1441                           ;	W with the last address+1
  1442                           
  1443  0BB2  0064               	clrwdt	;clear the watchdog before getting into this loop
  1444  0BB3                     clrloop0:	
  1445  0BB3  0180               	clrf	0	;clear RAM location pointed to by FSR
  1446  0BB4  0A84               	incf	4,f	;increment pointer
  1447  0BB5  0604               	xorwf	4,w	;XOR with final address
  1448  0BB6  1903               	btfsc	3,2	;have we reached the end yet?
  1449  0BB7  3400               	retlw	0	;all done for this memory range, return
  1450  0BB8  0604               	xorwf	4,w	;XOR again to restore value
  1451  0BB9  2BB3               	goto	clrloop0	;do the next byte
  1452                           
  1453                           	psect	cstackCOMMON
  1454  0070                     __pcstackCOMMON:	
  1455  0070                     ?_setLED_Initialization:	
  1456  0070                     ?_setPIRLED_Main:	
  1457                           ; 0 bytes @ 0x0
  1458                           
  1459  0070                     ?_Fosc_Set:	
  1460                           ; 0 bytes @ 0x0
  1461                           
  1462  0070                     ?_IO_Set:	
  1463                           ; 0 bytes @ 0x0
  1464                           
  1465  0070                     ?_TMR1_Set:	
  1466                           ; 0 bytes @ 0x0
  1467                           
  1468  0070                     ?_ADC_Set:	
  1469                           ; 0 bytes @ 0x0
  1470                           
  1471  0070                     ?_UART_Set:	
  1472                           ; 0 bytes @ 0x0
  1473                           
  1474  0070                     ?_WDT_Set:	
  1475                           ; 0 bytes @ 0x0
  1476                           
  1477  0070                     ?_TMR1_ISR:	
  1478                           ; 0 bytes @ 0x0
  1479                           
  1480  0070                     ??_TMR1_ISR:	
  1481                           ; 0 bytes @ 0x0
  1482                           
  1483  0070                     ?_UART_ISR:	
  1484                           ; 0 bytes @ 0x0
  1485                           
  1486  0070                     ??_UART_ISR:	
  1487                           ; 0 bytes @ 0x0
  1488                           
  1489  0070                     ?_Timeout_Counter:	
  1490                           ; 0 bytes @ 0x0
  1491                           
  1492  0070                     ?_set_TimeoutCleared:	
  1493                           ; 0 bytes @ 0x0
  1494                           
  1495  0070                     ??_getch:	
  1496                           ; 0 bytes @ 0x0
  1497                           
  1498  0070                     ?_UART_Receive:	
  1499                           ; 0 bytes @ 0x0
  1500                           
  1501  0070                     ?_UART_Transmit:	
  1502                           ; 0 bytes @ 0x0
  1503                           
  1504  0070                     ?_putch:	
  1505                           ; 0 bytes @ 0x0
  1506                           
  1507  0070                     ?_WDT_Clearing:	
  1508                           ; 0 bytes @ 0x0
  1509                           
  1510  0070                     ?_myMain_Initialization:	
  1511                           ; 0 bytes @ 0x0
  1512                           
  1513  0070                     ?_Load_Initialization:	
  1514                           ; 0 bytes @ 0x0
  1515                           
  1516  0070                     ?_Lights_Initialization:	
  1517                           ; 0 bytes @ 0x0
  1518                           
  1519  0070                     ?_PIR_Initialization:	
  1520                           ; 0 bytes @ 0x0
  1521                           
  1522  0070                     ?_getLoad_AD:	
  1523                           ; 0 bytes @ 0x0
  1524                           
  1525  0070                     ?_my_MainTimer:	
  1526                           ; 0 bytes @ 0x0
  1527                           
  1528  0070                     ?_Load_Main:	
  1529                           ; 0 bytes @ 0x0
  1530                           
  1531  0070                     ?_Lights_Main:	
  1532                           ; 0 bytes @ 0x0
  1533                           
  1534  0070                     ?_PIR_Main:	
  1535                           ; 0 bytes @ 0x0
  1536                           
  1537  0070                     ?_setLoad_AH_AL_Restore:	
  1538                           ; 0 bytes @ 0x0
  1539                           
  1540  0070                     ?_setLights_Initialization:	
  1541                           ; 0 bytes @ 0x0
  1542                           
  1543  0070                     ?_setLights_Main:	
  1544                           ; 0 bytes @ 0x0
  1545                           
  1546  0070                     ?_Lights_Control:	
  1547                           ; 0 bytes @ 0x0
  1548                           
  1549  0070                     ?_Lights_Close:	
  1550                           ; 0 bytes @ 0x0
  1551                           
  1552  0070                     ?_setLights_Line:	
  1553                           ; 0 bytes @ 0x0
  1554                           
  1555  0070                     ?_CDS_Initialization:	
  1556                           ; 0 bytes @ 0x0
  1557                           
  1558  0070                     ?_CDS_Main:	
  1559                           ; 0 bytes @ 0x0
  1560                           
  1561  0070                     ?_LedPointSelect:	
  1562                           ; 0 bytes @ 0x0
  1563                           
  1564  0070                     ?_LED_Initialization:	
  1565                           ; 0 bytes @ 0x0
  1566                           
  1567  0070                     ?_LED_Main:	
  1568                           ; 0 bytes @ 0x0
  1569                           
  1570  0070                     ?_Mcu_Initialization:	
  1571                           ; 0 bytes @ 0x0
  1572                           
  1573  0070                     ?_ISR:	
  1574                           ; 0 bytes @ 0x0
  1575                           
  1576  0070                     ?_UART_Main:	
  1577                           ; 0 bytes @ 0x0
  1578                           
  1579  0070                     ?_UART_SetData:	
  1580                           ; 0 bytes @ 0x0
  1581                           
  1582  0070                     ?_WDT_Main:	
  1583                           ; 0 bytes @ 0x0
  1584                           
  1585  0070                     ?_setMain_Exception:	
  1586                           ; 0 bytes @ 0x0
  1587                           
  1588  0070                     ?_LightsPointSelect:	
  1589                           ; 0 bytes @ 0x0
  1590                           
  1591  0070                     ?_getch:	
  1592                           ; 0 bytes @ 0x0
  1593                           
  1594  0070                     ?_getAll_Lights_Line:	
  1595                           ; 1 bytes @ 0x0
  1596                           
  1597  0070                     ?_getLights_Status:	
  1598                           ; 1 bytes @ 0x0
  1599                           
  1600  0070                     ?_getLightsControl_OK:	
  1601                           ; 1 bytes @ 0x0
  1602                           
  1603  0070                     ?_getCDS_Status:	
  1604                           ; 1 bytes @ 0x0
  1605                           
  1606  0070                     ?_getMain_LightsStatus:	
  1607                           ; 1 bytes @ 0x0
  1608                           
  1609  0070                     ?_getMain_All_Error_Status:	
  1610                           ; 1 bytes @ 0x0
  1611                           
  1612  0070                     ?_getMain_Lights_Count:	
  1613                           ; 1 bytes @ 0x0
  1614                           
  1615  0070                     ?_getMain_LoadOK:	
  1616                           ; 1 bytes @ 0x0
  1617                           
  1618  0070                     ?_getLoad_OK:	
  1619                           ; 1 bytes @ 0x0
  1620                           
  1621                           
  1622                           ; 1 bytes @ 0x0
  1623  0070                     	ds	1
  1624  0071                     UART_ISR@i:	
  1625                           
  1626                           ; 2 bytes @ 0x1
  1627  0071                     	ds	2
  1628  0073                     ??_ISR:	
  1629                           
  1630                           ; 0 bytes @ 0x3
  1631  0073                     	ds	4
  1632                           
  1633                           	psect	cstackBANK0
  1634  0055                     __pcstackBANK0:	
  1635  0055                     ??_Fosc_Set:	
  1636  0055                     ??_IO_Set:	
  1637                           ; 0 bytes @ 0x0
  1638                           
  1639  0055                     ??_TMR1_Set:	
  1640                           ; 0 bytes @ 0x0
  1641                           
  1642  0055                     ??_ADC_Set:	
  1643                           ; 0 bytes @ 0x0
  1644                           
  1645  0055                     ??_UART_Set:	
  1646                           ; 0 bytes @ 0x0
  1647                           
  1648  0055                     ??_WDT_Set:	
  1649                           ; 0 bytes @ 0x0
  1650                           
  1651  0055                     ??_Timeout_Counter:	
  1652                           ; 0 bytes @ 0x0
  1653                           
  1654  0055                     ??_set_TimeoutCleared:	
  1655                           ; 0 bytes @ 0x0
  1656                           
  1657  0055                     ??_UART_Receive:	
  1658                           ; 0 bytes @ 0x0
  1659                           
  1660  0055                     ??_putch:	
  1661                           ; 0 bytes @ 0x0
  1662                           
  1663  0055                     ??_WDT_Clearing:	
  1664                           ; 0 bytes @ 0x0
  1665                           
  1666  0055                     ??_myMain_Initialization:	
  1667                           ; 0 bytes @ 0x0
  1668                           
  1669  0055                     ??_my_MainTimer:	
  1670                           ; 0 bytes @ 0x0
  1671                           
  1672  0055                     ??_getLightsControl_OK:	
  1673                           ; 0 bytes @ 0x0
  1674                           
  1675  0055                     ??_setLoad_AH_AL_Restore:	
  1676                           ; 0 bytes @ 0x0
  1677                           
  1678  0055                     ??_CDS_Initialization:	
  1679                           ; 0 bytes @ 0x0
  1680                           
  1681  0055                     ??_CDS_Main:	
  1682                           ; 0 bytes @ 0x0
  1683                           
  1684  0055                     ??_getCDS_Status:	
  1685                           ; 0 bytes @ 0x0
  1686                           
  1687  0055                     ??_LedPointSelect:	
  1688                           ; 0 bytes @ 0x0
  1689                           
  1690  0055                     ??_UART_SetData:	
  1691                           ; 0 bytes @ 0x0
  1692                           
  1693  0055                     ??_WDT_Main:	
  1694                           ; 0 bytes @ 0x0
  1695                           
  1696  0055                     ??_getMain_Lights_Count:	
  1697                           ; 0 bytes @ 0x0
  1698                           
  1699  0055                     ??_getLoad_OK:	
  1700                           ; 0 bytes @ 0x0
  1701                           
  1702  0055                     ??_LightsPointSelect:	
  1703                           ; 0 bytes @ 0x0
  1704                           
  1705  0055                     ?_getAD:	
  1706                           ; 0 bytes @ 0x0
  1707                           
  1708  0055                     ?___awdiv:	
  1709                           ; 1 bytes @ 0x0
  1710                           
  1711  0055                     ?___lwdiv:	
  1712                           ; 2 bytes @ 0x0
  1713                           
  1714  0055                     getCDS_Status@status:	
  1715                           ; 2 bytes @ 0x0
  1716                           
  1717  0055                     getAD@adcon1:	
  1718                           ; 1 bytes @ 0x0
  1719                           
  1720  0055                     putch@byte:	
  1721                           ; 1 bytes @ 0x0
  1722                           
  1723  0055                     getLoad_OK@ok:	
  1724                           ; 1 bytes @ 0x0
  1725                           
  1726  0055                     getLightsControl_OK@loadok:	
  1727                           ; 1 bytes @ 0x0
  1728                           
  1729  0055                     ___awdiv@divisor:	
  1730                           ; 1 bytes @ 0x0
  1731                           
  1732  0055                     ___lwdiv@divisor:	
  1733                           ; 2 bytes @ 0x0
  1734                           
  1735                           
  1736                           ; 2 bytes @ 0x0
  1737  0055                     	ds	1
  1738  0056                     ??_getAD:	
  1739  0056                     ??_UART_Transmit:	
  1740                           ; 0 bytes @ 0x1
  1741                           
  1742  0056                     ??_Mcu_Initialization:	
  1743                           ; 0 bytes @ 0x1
  1744                           
  1745  0056                     ??_getMain_All_Error_Status:	
  1746                           ; 0 bytes @ 0x1
  1747                           
  1748  0056                     ??_getMain_LoadOK:	
  1749                           ; 0 bytes @ 0x1
  1750                           
  1751  0056                     LedPointSelect@led:	
  1752                           ; 0 bytes @ 0x1
  1753                           
  1754  0056                     getAD@adcon0:	
  1755                           ; 1 bytes @ 0x1
  1756                           
  1757  0056                     getMain_Lights_Count@count:	
  1758                           ; 1 bytes @ 0x1
  1759                           
  1760  0056                     setLoad_AH_AL_Restore@i:	
  1761                           ; 1 bytes @ 0x1
  1762                           
  1763  0056                     LightsPointSelect@lights:	
  1764                           ; 1 bytes @ 0x1
  1765                           
  1766  0056                     UART_Transmit@i:	
  1767                           ; 1 bytes @ 0x1
  1768                           
  1769                           
  1770                           ; 2 bytes @ 0x1
  1771  0056                     	ds	1
  1772  0057                     ?_setLED:	
  1773  0057                     ??_Load_Initialization:	
  1774                           ; 0 bytes @ 0x2
  1775                           
  1776  0057                     ??_getLoad_AD:	
  1777                           ; 0 bytes @ 0x2
  1778                           
  1779  0057                     ??_getAll_Lights_Line:	
  1780                           ; 0 bytes @ 0x2
  1781                           
  1782  0057                     ?_setLights_Trigger:	
  1783                           ; 0 bytes @ 0x2
  1784                           
  1785  0057                     ??_getLights_Status:	
  1786                           ; 0 bytes @ 0x2
  1787                           
  1788  0057                     ??_setLights_Initialization:	
  1789                           ; 0 bytes @ 0x2
  1790                           
  1791  0057                     ??_Lights_Control:	
  1792                           ; 0 bytes @ 0x2
  1793                           
  1794  0057                     ??_setLights_Line:	
  1795                           ; 0 bytes @ 0x2
  1796                           
  1797  0057                     ?_getCDS_AD:	
  1798                           ; 0 bytes @ 0x2
  1799                           
  1800  0057                     getCDS_AD@channel2:	
  1801                           ; 0 bytes @ 0x2
  1802                           
  1803  0057                     setLED@command:	
  1804                           ; 1 bytes @ 0x2
  1805                           
  1806  0057                     getMain_Lights_Count@status2:	
  1807                           ; 1 bytes @ 0x2
  1808                           
  1809  0057                     getMain_LoadOK@ok:	
  1810                           ; 1 bytes @ 0x2
  1811                           
  1812  0057                     setLights_Initialization@lights:	
  1813                           ; 1 bytes @ 0x2
  1814                           
  1815  0057                     getLights_Status@lights:	
  1816                           ; 1 bytes @ 0x2
  1817                           
  1818  0057                     setLights_Trigger@command:	
  1819                           ; 1 bytes @ 0x2
  1820                           
  1821  0057                     setLights_Line@lights:	
  1822                           ; 1 bytes @ 0x2
  1823                           
  1824  0057                     getAll_Lights_Line@line:	
  1825                           ; 1 bytes @ 0x2
  1826                           
  1827  0057                     _getMain_All_Error_Status$2337:	
  1828                           ; 1 bytes @ 0x2
  1829                           
  1830  0057                     ___awdiv@dividend:	
  1831                           ; 2 bytes @ 0x2
  1832                           
  1833  0057                     ___lwdiv@dividend:	
  1834                           ; 2 bytes @ 0x2
  1835                           
  1836                           
  1837                           ; 2 bytes @ 0x2
  1838  0057                     	ds	1
  1839  0058                     ??_setLED:	
  1840  0058                     ??_Lights_Initialization:	
  1841                           ; 0 bytes @ 0x3
  1842                           
  1843  0058                     ??_setLights_Trigger:	
  1844                           ; 0 bytes @ 0x3
  1845                           
  1846  0058                     ??_getCDS_AD:	
  1847                           ; 0 bytes @ 0x3
  1848                           
  1849  0058                     ??_UART_Main:	
  1850                           ; 0 bytes @ 0x3
  1851                           
  1852  0058                     setLED@led:	
  1853                           ; 0 bytes @ 0x3
  1854                           
  1855  0058                     getMain_Lights_Count@status3:	
  1856                           ; 1 bytes @ 0x3
  1857                           
  1858  0058                     getLights_Status@status:	
  1859                           ; 1 bytes @ 0x3
  1860                           
  1861                           
  1862                           ; 1 bytes @ 0x3
  1863  0058                     	ds	1
  1864  0059                     ??_setLED_Initialization:	
  1865  0059                     ??_setPIRLED_Main:	
  1866                           ; 0 bytes @ 0x4
  1867                           
  1868  0059                     ??_PIR_Initialization:	
  1869                           ; 0 bytes @ 0x4
  1870                           
  1871  0059                     ??_getMain_LightsStatus:	
  1872                           ; 0 bytes @ 0x4
  1873                           
  1874  0059                     ??___awdiv:	
  1875                           ; 0 bytes @ 0x4
  1876                           
  1877  0059                     ??___lwdiv:	
  1878                           ; 0 bytes @ 0x4
  1879                           
  1880  0059                     setLED_Initialization@led:	
  1881                           ; 0 bytes @ 0x4
  1882                           
  1883  0059                     getMain_Lights_Count@status1:	
  1884                           ; 1 bytes @ 0x4
  1885                           
  1886  0059                     getLoad_AD@channel:	
  1887                           ; 1 bytes @ 0x4
  1888                           
  1889  0059                     setLights_Trigger@lights:	
  1890                           ; 1 bytes @ 0x4
  1891                           
  1892  0059                     _getMain_All_Error_Status$2339:	
  1893                           ; 1 bytes @ 0x4
  1894                           
  1895  0059                     _Lights_Control$4505:	
  1896                           ; 2 bytes @ 0x4
  1897                           
  1898                           
  1899                           ; 2 bytes @ 0x4
  1900  0059                     	ds	1
  1901  005A                     ??_LED_Initialization:	
  1902  005A                     ??_setMain_Exception:	
  1903                           ; 0 bytes @ 0x5
  1904                           
  1905  005A                     getCDS_AD@i:	
  1906                           ; 0 bytes @ 0x5
  1907                           
  1908  005A                     setPIRLED_Main@count:	
  1909                           ; 1 bytes @ 0x5
  1910                           
  1911  005A                     getMain_LightsStatus@count:	
  1912                           ; 1 bytes @ 0x5
  1913                           
  1914  005A                     getLoad_AD@k:	
  1915                           ; 1 bytes @ 0x5
  1916                           
  1917  005A                     ___awdiv@counter:	
  1918                           ; 1 bytes @ 0x5
  1919                           
  1920  005A                     ___lwdiv@quotient:	
  1921                           ; 1 bytes @ 0x5
  1922                           
  1923                           
  1924                           ; 2 bytes @ 0x5
  1925  005A                     	ds	1
  1926  005B                     ??_LED_Main:	
  1927  005B                     getCDS_AD@j:	
  1928                           ; 0 bytes @ 0x6
  1929                           
  1930  005B                     getMain_All_Error_Status@command:	
  1931                           ; 1 bytes @ 0x6
  1932                           
  1933  005B                     getLoad_AD@j:	
  1934                           ; 1 bytes @ 0x6
  1935                           
  1936  005B                     Lights_Control@lights:	
  1937                           ; 1 bytes @ 0x6
  1938                           
  1939  005B                     ___awdiv@sign:	
  1940                           ; 1 bytes @ 0x6
  1941                           
  1942  005B                     getMain_LightsStatus@i:	
  1943                           ; 1 bytes @ 0x6
  1944                           
  1945                           
  1946                           ; 2 bytes @ 0x6
  1947  005B                     	ds	1
  1948  005C                     getCDS_AD@channel1:	
  1949  005C                     setMain_Exception@buz:	
  1950                           ; 1 bytes @ 0x7
  1951                           
  1952  005C                     getMain_All_Error_Status@status:	
  1953                           ; 1 bytes @ 0x7
  1954                           
  1955  005C                     getLoad_AD@i:	
  1956                           ; 1 bytes @ 0x7
  1957                           
  1958  005C                     ___lwdiv@counter:	
  1959                           ; 1 bytes @ 0x7
  1960                           
  1961  005C                     ___awdiv@quotient:	
  1962                           ; 1 bytes @ 0x7
  1963                           
  1964                           
  1965                           ; 2 bytes @ 0x7
  1966  005C                     	ds	1
  1967  005D                     ?_setLights:	
  1968  005D                     setMain_Exception@status:	
  1969                           ; 0 bytes @ 0x8
  1970                           
  1971  005D                     getMain_LightsStatus@status:	
  1972                           ; 1 bytes @ 0x8
  1973                           
  1974  005D                     setLights@status:	
  1975                           ; 1 bytes @ 0x8
  1976                           
  1977                           
  1978                           ; 1 bytes @ 0x8
  1979  005D                     	ds	1
  1980  005E                     ?_getPIR_AD:	
  1981  005E                     ??_Load_Main:	
  1982                           ; 0 bytes @ 0x9
  1983                           
  1984  005E                     ??_Lights_Close:	
  1985                           ; 0 bytes @ 0x9
  1986                           
  1987  005E                     ??_setLights:	
  1988                           ; 0 bytes @ 0x9
  1989                           
  1990  005E                     getPIR_AD@channel2:	
  1991                           ; 0 bytes @ 0x9
  1992                           
  1993  005E                     _setMain_Exception$2319:	
  1994                           ; 1 bytes @ 0x9
  1995                           
  1996                           
  1997                           ; 2 bytes @ 0x9
  1998  005E                     	ds	1
  1999  005F                     ??_getPIR_AD:	
  2000  005F                     setLights@lights:	
  2001                           ; 0 bytes @ 0xA
  2002                           
  2003                           
  2004                           ; 1 bytes @ 0xA
  2005  005F                     	ds	1
  2006  0060                     ??_setLights_Main:	
  2007  0060                     setMain_Exception@command:	
  2008                           ; 0 bytes @ 0xB
  2009                           
  2010  0060                     Load_Main@j:	
  2011                           ; 1 bytes @ 0xB
  2012                           
  2013  0060                     setLights_Main@lights:	
  2014                           ; 1 bytes @ 0xB
  2015                           
  2016                           
  2017                           ; 1 bytes @ 0xB
  2018  0060                     	ds	1
  2019  0061                     ??_Lights_Main:	
  2020  0061                     ??_PIR_Main:	
  2021                           ; 0 bytes @ 0xC
  2022                           
  2023  0061                     Load_Main@adjgo:	
  2024                           ; 0 bytes @ 0xC
  2025                           
  2026                           
  2027                           ; 1 bytes @ 0xC
  2028  0061                     	ds	1
  2029  0062                     _Load_Main$2599:	
  2030  0062                     getPIR_AD@j:	
  2031                           ; 1 bytes @ 0xD
  2032                           
  2033                           
  2034                           ; 1 bytes @ 0xD
  2035  0062                     	ds	1
  2036  0063                     Load_Main@error:	
  2037  0063                     getPIR_AD@channel1:	
  2038                           ; 1 bytes @ 0xE
  2039                           
  2040                           
  2041                           ; 1 bytes @ 0xE
  2042  0063                     	ds	1
  2043  0064                     Load_Main@i:	
  2044  0064                     getPIR_AD@i:	
  2045                           ; 1 bytes @ 0xF
  2046                           
  2047  0064                     _Lights_Main$4485:	
  2048                           ; 1 bytes @ 0xF
  2049                           
  2050                           
  2051                           ; 2 bytes @ 0xF
  2052  0064                     	ds	2
  2053  0066                     _PIR_Main$3074:	
  2054                           
  2055                           ; 2 bytes @ 0x11
  2056  0066                     	ds	2
  2057  0068                     PIR_Main@error:	
  2058                           
  2059                           ; 1 bytes @ 0x13
  2060  0068                     	ds	1
  2061  0069                     ?_main:	
  2062  0069                     main@argc:	
  2063                           ; 2 bytes @ 0x14
  2064                           
  2065                           
  2066                           ; 2 bytes @ 0x14
  2067  0069                     	ds	2
  2068  006B                     main@argv:	
  2069                           
  2070                           ; 2 bytes @ 0x16
  2071  006B                     	ds	2
  2072  006D                     ??_main:	
  2073                           
  2074                           ; 0 bytes @ 0x18
  2075  006D                     	ds	1
  2076                           
  2077                           	psect	maintext
  2078  0FAC                     __pmaintext:	
  2079 ;;
  2080 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2081 ;;
  2082 ;; *************** function _main *****************
  2083 ;; Defined at:
  2084 ;;		line 7 in file "../src/Main_B1.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;  argc            2   20[BANK0 ] int 
  2087 ;;  argv            2   22[BANK0 ] PTR PTR unsigned char 
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;		None
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  2   20[BANK0 ] int 
  2092 ;; Registers used:
  2093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2094 ;; Tracked objects:
  2095 ;;		On entry : 17F/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2099 ;;      Params:         0       4       0       0
  2100 ;;      Locals:         0       0       0       0
  2101 ;;      Temps:          0       1       0       0
  2102 ;;      Totals:         0       5       0       0
  2103 ;;Total ram usage:        5 bytes
  2104 ;; Hardware stack levels required when called:    8
  2105 ;; This function calls:
  2106 ;;		_CDS_Initialization
  2107 ;;		_CDS_Main
  2108 ;;		_LED_Initialization
  2109 ;;		_LED_Main
  2110 ;;		_Lights_Initialization
  2111 ;;		_Lights_Main
  2112 ;;		_Load_Initialization
  2113 ;;		_Load_Main
  2114 ;;		_Mcu_Initialization
  2115 ;;		_PIR_Initialization
  2116 ;;		_PIR_Main
  2117 ;;		_UART_Main
  2118 ;;		_WDT_Main
  2119 ;;		_getCDS_AD
  2120 ;;		_getLoad_AD
  2121 ;;		_getPIR_AD
  2122 ;;		_myMain_Initialization
  2123 ;;		_my_MainTimer
  2124 ;; This function is called by:
  2125 ;;		Startup code after reset
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           
  2130                           ;psect for function _main
  2131  0FAC                     _main:	
  2132                           
  2133                           ;Main_B1.c: 8: myMain_Initialization();
  2134                           
  2135                           ;incstack = 0
  2136                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2137  0FAC  158A  235D  158A   	fcall	_myMain_Initialization
  2138                           
  2139                           ;Main_B1.c: 9: Mcu_Initialization();
  2140  0FAF  158A  246C  158A   	fcall	_Mcu_Initialization
  2141                           
  2142                           ;Main_B1.c: 10: ;;
  2143                           ;Main_B1.c: 11: LED_Initialization();
  2144  0FB2  158A  23C4  158A   	fcall	_LED_Initialization
  2145                           
  2146                           ;Main_B1.c: 12: ;;
  2147                           ;Main_B1.c: 14: ;;
  2148                           ;Main_B1.c: 15: ;;
  2149                           ;Main_B1.c: 16: Load_Initialization();
  2150  0FB5  158A  2378  158A   	fcall	_Load_Initialization
  2151                           
  2152                           ;Main_B1.c: 17: ;;
  2153                           ;Main_B1.c: 18: ;;
  2154                           ;Main_B1.c: 20: ;;
  2155                           ;Main_B1.c: 21: Lights_Initialization();
  2156  0FB8  158A  2365  158A   	fcall	_Lights_Initialization
  2157                           
  2158                           ;Main_B1.c: 22: CDS_Initialization();
  2159  0FBB  158A  2361  158A   	fcall	_CDS_Initialization
  2160                           
  2161                           ;Main_B1.c: 23: PIR_Initialization();
  2162  0FBE  158A  2491  158A   	fcall	_PIR_Initialization
  2163                           
  2164                           ;Main_B1.c: 24: ;;
  2165                           ;Main_B1.c: 25: ;;
  2166                           ;Main_B1.c: 26: __nop();
  2167  0FC1  0000               	nop
  2168  0FC2                     l4989:	
  2169                           ;Main_B1.c: 27: ;;
  2170                           ;Main_B1.c: 28: ;;
  2171                           ;Main_B1.c: 30: while (1) {
  2172                           
  2173                           
  2174                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2175  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  2176  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  2177  0FC4  1C20               	btfss	_myMain,0
  2178  0FC5  2FDE               	goto	l4997
  2179                           
  2180                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2181  0FC6  3001               	movlw	1
  2182  0FC7  118A  2574  158A   	fcall	_getLoad_AD
  2183                           
  2184                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x31);
  2185  0FCA  3031               	movlw	49
  2186  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  2187  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  2188  0FCD  00ED               	movwf	??_main
  2189  0FCE  086D               	movf	??_main,w
  2190  0FCF  00D7               	movwf	getCDS_AD@channel2
  2191  0FD0  3009               	movlw	9
  2192  0FD1  158A  25F3  158A   	fcall	_getCDS_AD
  2193                           
  2194                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2195  0FD4  300D               	movlw	13
  2196  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  2197  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  2198  0FD7  00ED               	movwf	??_main
  2199  0FD8  086D               	movf	??_main,w
  2200  0FD9  00DE               	movwf	getPIR_AD@channel2
  2201  0FDA  3005               	movlw	5
  2202  0FDB  118A  243A  158A   	fcall	_getPIR_AD
  2203  0FDE                     l4997:	
  2204                           
  2205                           ;Main_B1.c: 57: }
  2206                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2207  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  2208  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  2209  0FE0  1C30               	btfss	_Timer1,0
  2210  0FE1  2FC2               	goto	l4989
  2211                           
  2212                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2213  0FE2  1030               	bcf	_Timer1,0
  2214                           
  2215                           ;Main_B1.c: 95: my_MainTimer();
  2216  0FE3  158A  25A5  158A   	fcall	_my_MainTimer
  2217                           
  2218                           ;Main_B1.c: 96: WDT_Main();
  2219  0FE6  158A  2449  158A   	fcall	_WDT_Main
  2220                           
  2221                           ;Main_B1.c: 97: ;;
  2222                           ;Main_B1.c: 98: UART_Main();
  2223  0FE9  118A  27F2  158A   	fcall	_UART_Main
  2224                           
  2225                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  2226  0FEC  1283               	bcf	3,5	;RP0=0, select bank0
  2227  0FED  1303               	bcf	3,6	;RP1=0, select bank0
  2228  0FEE  1C20               	btfss	_myMain,0
  2229  0FEF  2FC2               	goto	l4989
  2230                           
  2231                           ;Main_B1.c: 100: ;;
  2232                           ;Main_B1.c: 102: LED_Main();
  2233  0FF0  158A  235E  158A   	fcall	_LED_Main
  2234                           
  2235                           ;Main_B1.c: 103: ;;
  2236                           ;Main_B1.c: 105: ;;
  2237                           ;Main_B1.c: 106: ;;
  2238                           ;Main_B1.c: 107: Load_Main();
  2239  0FF3  118A  2025  158A   	fcall	_Load_Main
  2240                           
  2241                           ;Main_B1.c: 108: ;;
  2242                           ;Main_B1.c: 110: Lights_Main();
  2243  0FF6  158A  26F2  158A   	fcall	_Lights_Main
  2244                           
  2245                           ;Main_B1.c: 111: ;;
  2246                           ;Main_B1.c: 112: ;;
  2247                           ;Main_B1.c: 113: CDS_Main();
  2248  0FF9  158A  264E  158A   	fcall	_CDS_Main
  2249                           
  2250                           ;Main_B1.c: 114: PIR_Main();
  2251  0FFC  118A  2245  158A   	fcall	_PIR_Main
  2252                           
  2253                           ;Main_B1.c: 116: ;;
  2254                           ;Main_B1.c: 117: ;;
  2255                           ;Main_B1.c: 118: ;;
  2256                           ;Main_B1.c: 119: ;;
  2257  0FFF  2FC2               	goto	l4989
  2258  1000                     __end_of_main:	
  2259                           ;Main_B1.c: 126: }
  2260                           ;Main_B1.c: 127: }
  2261                           ;Main_B1.c: 161: }
  2262                           ;Main_B1.c: 162: return (0);
  2263                           ;	Return value of _main is never used
  2264                           
  2265                           
  2266                           	psect	text1
  2267  0DA5                     __ptext1:	
  2268 ;; *************** function _my_MainTimer *****************
  2269 ;; Defined at:
  2270 ;;		line 181 in file "../src/Main_B1.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;		None
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;		None
  2275 ;; Return value:  Size  Location     Type
  2276 ;;		None               void
  2277 ;; Registers used:
  2278 ;;		wreg, status,2, status,0, pclath, cstack
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2284 ;;      Params:         0       0       0       0
  2285 ;;      Locals:         0       0       0       0
  2286 ;;      Temps:          0       0       0       0
  2287 ;;      Totals:         0       0       0       0
  2288 ;;Total ram usage:        0 bytes
  2289 ;; Hardware stack levels used:    1
  2290 ;; Hardware stack levels required when called:    4
  2291 ;; This function calls:
  2292 ;;		_UART_SetData
  2293 ;; This function is called by:
  2294 ;;		_main
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           
  2299                           ;psect for function _my_MainTimer
  2300  0DA5                     _my_MainTimer:	
  2301                           
  2302                           ;Main_B1.c: 183: if (myMain.PowerON == 0) {
  2303                           
  2304                           ;incstack = 0
  2305                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0+pclath+cstack]
  2306  0DA5  1283               	bcf	3,5	;RP0=0, select bank0
  2307  0DA6  1303               	bcf	3,6	;RP1=0, select bank0
  2308  0DA7  1820               	btfsc	_myMain,0
  2309  0DA8  2DB9               	goto	l4601
  2310                           
  2311                           ;Main_B1.c: 184: myMain.PowerCount++;
  2312  0DA9  3001               	movlw	1
  2313  0DAA  07A1               	addwf	_myMain+1,f
  2314  0DAB  1803               	skipnc
  2315  0DAC  0AA2               	incf	_myMain+2,f
  2316  0DAD  3000               	movlw	0
  2317  0DAE  07A2               	addwf	_myMain+2,f
  2318                           
  2319                           ;Main_B1.c: 185: if (myMain.PowerCount == 150)
  2320  0DAF  3096               	movlw	150
  2321  0DB0  0621               	xorwf	_myMain+1,w
  2322  0DB1  0422               	iorwf	_myMain+2,w
  2323  0DB2  1D03               	skipz
  2324  0DB3  0008               	return
  2325                           
  2326                           ;Main_B1.c: 186: {
  2327                           ;Main_B1.c: 187: myMain.PowerCount = 0;
  2328  0DB4  01A1               	clrf	_myMain+1
  2329  0DB5  01A2               	clrf	_myMain+2
  2330                           
  2331                           ;Main_B1.c: 188: myMain.PowerON = 1;
  2332  0DB6  1420               	bsf	_myMain,0
  2333                           
  2334                           ;Main_B1.c: 193: ;;
  2335                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  2336  0DB7  1620               	bsf	_myMain,4
  2337                           
  2338                           ;Main_B1.c: 203: }
  2339                           ;Main_B1.c: 204: } else {
  2340  0DB8  0008               	return
  2341  0DB9                     l4601:	
  2342                           
  2343                           ;Main_B1.c: 205: myMain.PowerCount++;
  2344  0DB9  3001               	movlw	1
  2345  0DBA  07A1               	addwf	_myMain+1,f
  2346  0DBB  1803               	skipnc
  2347  0DBC  0AA2               	incf	_myMain+2,f
  2348  0DBD  3000               	movlw	0
  2349  0DBE  07A2               	addwf	_myMain+2,f
  2350                           
  2351                           ;Main_B1.c: 206: if (myMain.PowerCount == 100) {
  2352  0DBF  3064               	movlw	100
  2353  0DC0  0621               	xorwf	_myMain+1,w
  2354  0DC1  0422               	iorwf	_myMain+2,w
  2355  0DC2  1D03               	skipz
  2356  0DC3  0008               	return
  2357                           
  2358                           ;Main_B1.c: 207: myMain.PowerCount = 0;
  2359  0DC4  01A1               	clrf	_myMain+1
  2360  0DC5  01A2               	clrf	_myMain+2
  2361                           
  2362                           ;Main_B1.c: 211: if (UART.TxGO == 0) {
  2363  0DC6  1841               	btfsc	_UART+11,0
  2364  0DC7  0008               	return
  2365                           
  2366                           ;Main_B1.c: 212: UART_SetData();
  2367  0DC8  158A  23AA         	fcall	_UART_SetData
  2368  0DCA  0008               	return
  2369  0DCB                     __end_of_my_MainTimer:	
  2370                           
  2371                           	psect	text2
  2372  0BAA                     __ptext2:	
  2373 ;; *************** function _UART_SetData *****************
  2374 ;; Defined at:
  2375 ;;		line 829 in file "../src/MCU_B1.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;		None
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;		None
  2380 ;; Return value:  Size  Location     Type
  2381 ;;		None               void
  2382 ;; Registers used:
  2383 ;;		wreg
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2389 ;;      Params:         0       0       0       0
  2390 ;;      Locals:         0       0       0       0
  2391 ;;      Temps:          0       0       0       0
  2392 ;;      Totals:         0       0       0       0
  2393 ;;Total ram usage:        0 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    3
  2396 ;; This function calls:
  2397 ;;		Nothing
  2398 ;; This function is called by:
  2399 ;;		_my_MainTimer
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           
  2404                           ;psect for function _UART_SetData
  2405  0BAA                     _UART_SetData:	
  2406                           
  2407                           ;MCU_B1.c: 839: if (UART.TxGO == 0) {
  2408                           
  2409                           ;incstack = 0
  2410                           ; Regs used in _UART_SetData: [wreg]
  2411  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  2412  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  2413  0BAC  1841               	btfsc	_UART+11,0
  2414  0BAD  0008               	return
  2415                           
  2416                           ;MCU_B1.c: 848: RB3 = RB3 == 1 ? 0 : 1;
  2417  0BAE  3008               	movlw	8
  2418  0BAF  0686               	xorwf	6,f
  2419                           
  2420                           ;MCU_B1.c: 850: UART.TxGO = 1;
  2421  0BB0  1441               	bsf	_UART+11,0
  2422  0BB1  0008               	return
  2423  0BB2                     __end_of_UART_SetData:	
  2424                           
  2425                           	psect	text3
  2426  0B5D                     __ptext3:	
  2427 ;; *************** function _myMain_Initialization *****************
  2428 ;; Defined at:
  2429 ;;		line 168 in file "../src/Main_B1.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;		None
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;		None
  2434 ;; Return value:  Size  Location     Type
  2435 ;;		None               void
  2436 ;; Registers used:
  2437 ;;		None
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2443 ;;      Params:         0       0       0       0
  2444 ;;      Locals:         0       0       0       0
  2445 ;;      Temps:          0       0       0       0
  2446 ;;      Totals:         0       0       0       0
  2447 ;;Total ram usage:        0 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    3
  2450 ;; This function calls:
  2451 ;;		Nothing
  2452 ;; This function is called by:
  2453 ;;		_main
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           
  2458                           ;psect for function _myMain_Initialization
  2459  0B5D                     _myMain_Initialization:	
  2460                           
  2461                           ;incstack = 0
  2462                           ; Regs used in _myMain_Initialization: []
  2463  0B5D  0008               	return
  2464  0B5E                     __end_of_myMain_Initialization:	
  2465                           
  2466                           	psect	text4
  2467  043A                     __ptext4:	
  2468 ;; *************** function _getPIR_AD *****************
  2469 ;; Defined at:
  2470 ;;		line 167 in file "../src/PIR_B1.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  channel1        1    wreg     unsigned char 
  2473 ;;  channel2        1    9[BANK0 ] unsigned char 
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;  channel1        1   14[BANK0 ] unsigned char 
  2476 ;;  i               1   15[BANK0 ] unsigned char 
  2477 ;;  j               1   13[BANK0 ] unsigned char 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;		None               void
  2480 ;; Registers used:
  2481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2487 ;;      Params:         0       1       0       0
  2488 ;;      Locals:         0       3       0       0
  2489 ;;      Temps:          0       3       0       0
  2490 ;;      Totals:         0       7       0       0
  2491 ;;Total ram usage:        7 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    5
  2494 ;; This function calls:
  2495 ;;		___awdiv
  2496 ;;		___lwdiv
  2497 ;;		_getAD
  2498 ;; This function is called by:
  2499 ;;		_main
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           
  2504                           ;psect for function _getPIR_AD
  2505  043A                     _getPIR_AD:	
  2506                           
  2507                           ;incstack = 0
  2508                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2509                           ;getPIR_AD@channel1 stored from wreg
  2510  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2511  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2512  043C  00E3               	movwf	getPIR_AD@channel1
  2513                           
  2514                           ;PIR_B1.c: 168: char i = 0, j = 0;
  2515  043D  01E4               	clrf	getPIR_AD@i
  2516  043E  01E2               	clrf	getPIR_AD@j
  2517                           
  2518                           ;PIR_B1.c: 170: if (_PIR.ADtoGO == 1) {
  2519  043F  1683               	bsf	3,5	;RP0=1, select bank1
  2520  0440  1303               	bcf	3,6	;RP1=0, select bank1
  2521  0441  1CA0               	btfss	__PIR^(0+128),1
  2522  0442  0008               	return
  2523                           
  2524                           ;PIR_B1.c: 171: _PIR.GO = 1;
  2525  0443  1520               	bsf	__PIR^(0+128),2
  2526                           
  2527                           ;PIR_B1.c: 172: _PIR.ADRES = getAD(channel1, 0x70);
  2528  0444  3070               	movlw	112
  2529  0445  1283               	bcf	3,5	;RP0=0, select bank0
  2530  0446  1303               	bcf	3,6	;RP1=0, select bank0
  2531  0447  00DF               	movwf	??_getPIR_AD
  2532  0448  085F               	movf	??_getPIR_AD,w
  2533  0449  00D5               	movwf	getAD@adcon1
  2534  044A  0863               	movf	getPIR_AD@channel1,w
  2535  044B  158A  2567  118A   	fcall	_getAD
  2536  044E  1283               	bcf	3,5	;RP0=0, select bank0
  2537  044F  1303               	bcf	3,6	;RP1=0, select bank0
  2538  0450  00E0               	movwf	??_getPIR_AD+1
  2539  0451  0860               	movf	??_getPIR_AD+1,w
  2540  0452  1683               	bsf	3,5	;RP0=1, select bank1
  2541  0453  1303               	bcf	3,6	;RP1=0, select bank1
  2542  0454  00A2               	movwf	(__PIR^(0+128)+2)
  2543                           
  2544                           ;PIR_B1.c: 173: _PIR.VRAD = _PIR.ADRES / 51;
  2545  0455  3033               	movlw	51
  2546  0456  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0457  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0458  00D5               	movwf	___awdiv@divisor
  2549  0459  3000               	movlw	0
  2550  045A  00D6               	movwf	___awdiv@divisor+1
  2551  045B  1683               	bsf	3,5	;RP0=1, select bank1
  2552  045C  1303               	bcf	3,6	;RP1=0, select bank1
  2553  045D  0822               	movf	(__PIR^(0+128)+2),w
  2554  045E  1283               	bcf	3,5	;RP0=0, select bank0
  2555  045F  1303               	bcf	3,6	;RP1=0, select bank0
  2556  0460  00DF               	movwf	??_getPIR_AD
  2557  0461  01E0               	clrf	??_getPIR_AD+1
  2558  0462  085F               	movf	??_getPIR_AD,w
  2559  0463  00D7               	movwf	___awdiv@dividend
  2560  0464  0860               	movf	??_getPIR_AD+1,w
  2561  0465  00D8               	movwf	___awdiv@dividend+1
  2562  0466  118A  2795  118A   	fcall	___awdiv
  2563  0469  1283               	bcf	3,5	;RP0=0, select bank0
  2564  046A  1303               	bcf	3,6	;RP1=0, select bank0
  2565  046B  0855               	movf	?___awdiv,w
  2566  046C  00E1               	movwf	??_getPIR_AD+2
  2567  046D  0861               	movf	??_getPIR_AD+2,w
  2568  046E  1683               	bsf	3,5	;RP0=1, select bank1
  2569  046F  1303               	bcf	3,6	;RP1=0, select bank1
  2570  0470  00A3               	movwf	(__PIR^(0+128)+3)
  2571                           
  2572                           ;PIR_B1.c: 174: _PIR.VRAD1 = _PIR.ADRES;
  2573  0471  0822               	movf	(__PIR^(0+128)+2),w
  2574  0472  1283               	bcf	3,5	;RP0=0, select bank0
  2575  0473  1303               	bcf	3,6	;RP1=0, select bank0
  2576  0474  00DF               	movwf	??_getPIR_AD
  2577  0475  085F               	movf	??_getPIR_AD,w
  2578  0476  1683               	bsf	3,5	;RP0=1, select bank1
  2579  0477  1303               	bcf	3,6	;RP1=0, select bank1
  2580  0478  00A4               	movwf	(__PIR^(0+128)+4)
  2581                           
  2582                           ;PIR_B1.c: 175: _PIR.ADRES = getAD(channel2, 0x70);
  2583  0479  3070               	movlw	112
  2584  047A  1283               	bcf	3,5	;RP0=0, select bank0
  2585  047B  1303               	bcf	3,6	;RP1=0, select bank0
  2586  047C  00DF               	movwf	??_getPIR_AD
  2587  047D  085F               	movf	??_getPIR_AD,w
  2588  047E  00D5               	movwf	getAD@adcon1
  2589  047F  085E               	movf	getPIR_AD@channel2,w
  2590  0480  158A  2567  118A   	fcall	_getAD
  2591  0483  1283               	bcf	3,5	;RP0=0, select bank0
  2592  0484  1303               	bcf	3,6	;RP1=0, select bank0
  2593  0485  00E0               	movwf	??_getPIR_AD+1
  2594  0486  0860               	movf	??_getPIR_AD+1,w
  2595  0487  1683               	bsf	3,5	;RP0=1, select bank1
  2596  0488  1303               	bcf	3,6	;RP1=0, select bank1
  2597  0489  00A2               	movwf	(__PIR^(0+128)+2)
  2598                           
  2599                           ;PIR_B1.c: 176: _PIR.SignalAD = _PIR.ADRES;
  2600  048A  0822               	movf	(__PIR^(0+128)+2),w
  2601  048B  1283               	bcf	3,5	;RP0=0, select bank0
  2602  048C  1303               	bcf	3,6	;RP1=0, select bank0
  2603  048D  00DF               	movwf	??_getPIR_AD
  2604  048E  085F               	movf	??_getPIR_AD,w
  2605  048F  1683               	bsf	3,5	;RP0=1, select bank1
  2606  0490  1303               	bcf	3,6	;RP1=0, select bank1
  2607  0491  00A1               	movwf	(__PIR^(0+128)+1)
  2608                           
  2609                           ;PIR_B1.c: 178: switch (_PIR.VRAD) {
  2610  0492  2CAE               	goto	l4543
  2611  0493                     l4527:	
  2612                           ;PIR_B1.c: 179: case 0:
  2613                           
  2614                           
  2615                           ;PIR_B1.c: 180: if (_PIR.VRAD1 < 10) {
  2616  0493  300A               	movlw	10
  2617  0494  0224               	subwf	(__PIR^(0+128)+4),w
  2618  0495  1803               	skipnc
  2619  0496  2C99               	goto	l4531
  2620                           
  2621                           ;PIR_B1.c: 181: _PIR.CloseTimeValue = 5;
  2622  0497  3005               	movlw	5
  2623  0498  2C9A               	goto	L1
  2624  0499                     l4531:	
  2625                           ;PIR_B1.c: 182: } else {
  2626                           
  2627                           
  2628                           ;PIR_B1.c: 183: _PIR.CloseTimeValue = 60;
  2629  0499  303C               	movlw	60
  2630  049A                     L1:	
  2631  049A  00C7               	movwf	(__PIR^(0+128)+39)
  2632  049B  3000               	movlw	0
  2633  049C  2CAC               	goto	L5
  2634  049D                     l4533:	
  2635                           ;PIR_B1.c: 186: case 1:
  2636                           
  2637                           ;PIR_B1.c: 184: }
  2638                           ;PIR_B1.c: 185: break;
  2639                           
  2640                           
  2641                           ;PIR_B1.c: 187: _PIR.CloseTimeValue = 300;
  2642  049D  302C               	movlw	44
  2643  049E  00C7               	movwf	(__PIR^(0+128)+39)
  2644  049F  3001               	movlw	1
  2645  04A0  2CAC               	goto	L5
  2646  04A1                     l4535:	
  2647                           ;PIR_B1.c: 189: case 2:
  2648                           
  2649                           ;PIR_B1.c: 188: break;
  2650                           
  2651                           
  2652                           ;PIR_B1.c: 190: _PIR.CloseTimeValue = 600;
  2653  04A1  3058               	movlw	88
  2654  04A2  00C7               	movwf	(__PIR^(0+128)+39)
  2655  04A3  3002               	movlw	2
  2656  04A4  2CAC               	goto	L5
  2657  04A5                     l4537:	
  2658                           ;PIR_B1.c: 192: case 3:
  2659                           
  2660                           ;PIR_B1.c: 191: break;
  2661                           
  2662                           
  2663                           ;PIR_B1.c: 193: _PIR.CloseTimeValue = 900;
  2664  04A5  3084               	movlw	132
  2665  04A6  00C7               	movwf	(__PIR^(0+128)+39)
  2666  04A7  3003               	movlw	3
  2667  04A8  2CAC               	goto	L5
  2668  04A9                     l4539:	
  2669                           ;PIR_B1.c: 195: case 4:
  2670                           
  2671                           ;PIR_B1.c: 194: break;
  2672                           
  2673                           
  2674                           ;PIR_B1.c: 196: _PIR.CloseTimeValue = 1200;
  2675  04A9  30B0               	movlw	176
  2676  04AA  00C7               	movwf	(__PIR^(0+128)+39)
  2677  04AB  3004               	movlw	4
  2678  04AC                     L5:	
  2679  04AC  00C8               	movwf	(__PIR^(0+128)+40)
  2680                           
  2681                           ;PIR_B1.c: 198: }
  2682                           
  2683                           ;PIR_B1.c: 197: break;
  2684  04AD  2CBF               	goto	l4545
  2685  04AE                     l4543:	
  2686  04AE  0823               	movf	(__PIR^(0+128)+3),w
  2687                           
  2688                           ; Switch size 1, requested type "space"
  2689                           ; Number of cases is 5, Range of values is 0 to 4
  2690                           ; switch strategies available:
  2691                           ; Name         Instructions Cycles
  2692                           ; simple_byte           16     9 (average)
  2693                           ; direct_byte           17     7 (fixed)
  2694                           ; jumptable            260     6 (fixed)
  2695                           ;	Chosen strategy is simple_byte
  2696  04AF  3A00               	xorlw	0	; case 0
  2697  04B0  1903               	skipnz
  2698  04B1  2C93               	goto	l4527
  2699  04B2  3A01               	xorlw	1	; case 1
  2700  04B3  1903               	skipnz
  2701  04B4  2C9D               	goto	l4533
  2702  04B5  3A03               	xorlw	3	; case 2
  2703  04B6  1903               	skipnz
  2704  04B7  2CA1               	goto	l4535
  2705  04B8  3A01               	xorlw	1	; case 3
  2706  04B9  1903               	skipnz
  2707  04BA  2CA5               	goto	l4537
  2708  04BB  3A07               	xorlw	7	; case 4
  2709  04BC  1903               	skipnz
  2710  04BD  2CA9               	goto	l4539
  2711  04BE  2CBF               	goto	l4545
  2712  04BF                     l4545:	
  2713                           
  2714                           ;PIR_B1.c: 201: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2715  04BF  0821               	movf	(__PIR^(0+128)+1),w
  2716  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  2717  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  2718  04C2  00DF               	movwf	??_getPIR_AD
  2719  04C3  1683               	bsf	3,5	;RP0=1, select bank1
  2720  04C4  1303               	bcf	3,6	;RP1=0, select bank1
  2721  04C5  0827               	movf	(__PIR^(0+128)+7),w
  2722  04C6  3EA8               	addlw	(__PIR+8)& (0+255)
  2723  04C7  0084               	movwf	4
  2724  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  2725  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  2726  04CA  085F               	movf	??_getPIR_AD,w
  2727  04CB  1383               	bcf	3,7	;select IRP bank1
  2728  04CC  0080               	movwf	0
  2729                           
  2730                           ;PIR_B1.c: 202: for (i = 0; i < 10; i++) {
  2731  04CD  01E4               	clrf	getPIR_AD@i
  2732  04CE  300A               	movlw	10
  2733  04CF  0264               	subwf	getPIR_AD@i,w
  2734  04D0  1803               	btfsc	3,0
  2735  04D1  2CEE               	goto	l4559
  2736  04D2                     l4553:	
  2737                           
  2738                           ;PIR_B1.c: 203: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2739  04D2  0864               	movf	getPIR_AD@i,w
  2740  04D3  3EA8               	addlw	(__PIR+8)& (0+255)
  2741  04D4  0084               	movwf	4
  2742  04D5  0800               	movf	0,w
  2743  04D6  00DF               	movwf	??_getPIR_AD
  2744  04D7  01E0               	clrf	??_getPIR_AD+1
  2745  04D8  085F               	movf	??_getPIR_AD,w
  2746  04D9  1683               	bsf	3,5	;RP0=1, select bank1
  2747  04DA  1303               	bcf	3,6	;RP1=0, select bank1
  2748  04DB  07B2               	addwf	(__PIR^(0+128)+18),f
  2749  04DC  1803               	skipnc
  2750  04DD  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2751  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  2752  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  2753  04E0  0860               	movf	??_getPIR_AD+1,w
  2754  04E1  1683               	bsf	3,5	;RP0=1, select bank1
  2755  04E2  1303               	bcf	3,6	;RP1=0, select bank1
  2756  04E3  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2757  04E4  3001               	movlw	1
  2758  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  2759  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  2760  04E7  00DF               	movwf	??_getPIR_AD
  2761  04E8  085F               	movf	??_getPIR_AD,w
  2762  04E9  07E4               	addwf	getPIR_AD@i,f
  2763  04EA  300A               	movlw	10
  2764  04EB  0264               	subwf	getPIR_AD@i,w
  2765  04EC  1C03               	skipc
  2766  04ED  2CD2               	goto	l4553
  2767  04EE                     l4559:	
  2768                           
  2769                           ;PIR_B1.c: 204: }
  2770                           ;PIR_B1.c: 205: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2771  04EE  300A               	movlw	10
  2772  04EF  00D5               	movwf	___lwdiv@divisor
  2773  04F0  3000               	movlw	0
  2774  04F1  00D6               	movwf	___lwdiv@divisor+1
  2775  04F2  1683               	bsf	3,5	;RP0=1, select bank1
  2776  04F3  1303               	bcf	3,6	;RP1=0, select bank1
  2777  04F4  0833               	movf	((__PIR+1)^(0+128)+18),w
  2778  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  2779  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  2780  04F7  01D8               	clrf	___lwdiv@dividend+1
  2781  04F8  07D8               	addwf	___lwdiv@dividend+1,f
  2782  04F9  1683               	bsf	3,5	;RP0=1, select bank1
  2783  04FA  1303               	bcf	3,6	;RP1=0, select bank1
  2784  04FB  0832               	movf	(__PIR^(0+128)+18),w
  2785  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2786  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2787  04FE  01D7               	clrf	___lwdiv@dividend
  2788  04FF  07D7               	addwf	___lwdiv@dividend,f
  2789  0500  158A  276C  118A   	fcall	___lwdiv
  2790  0503  1283               	bcf	3,5	;RP0=0, select bank0
  2791  0504  1303               	bcf	3,6	;RP1=0, select bank0
  2792  0505  0855               	movf	?___lwdiv,w
  2793  0506  00DF               	movwf	??_getPIR_AD
  2794  0507  1683               	bsf	3,5	;RP0=1, select bank1
  2795  0508  1303               	bcf	3,6	;RP1=0, select bank1
  2796  0509  0834               	movf	(__PIR^(0+128)+20),w
  2797  050A  3EB5               	addlw	(__PIR+21)& (0+255)
  2798  050B  0084               	movwf	4
  2799  050C  1283               	bcf	3,5	;RP0=0, select bank0
  2800  050D  1303               	bcf	3,6	;RP1=0, select bank0
  2801  050E  085F               	movf	??_getPIR_AD,w
  2802  050F  1383               	bcf	3,7	;select IRP bank1
  2803  0510  0080               	movwf	0
  2804                           
  2805                           ;PIR_B1.c: 206: _PIR.TenAverageValue = 0;
  2806  0511  1683               	bsf	3,5	;RP0=1, select bank1
  2807  0512  1303               	bcf	3,6	;RP1=0, select bank1
  2808  0513  01B2               	clrf	(__PIR^(0+128)+18)
  2809  0514  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2810                           
  2811                           ;PIR_B1.c: 208: for (i = 0; i <= 9; i++) {
  2812  0515  1283               	bcf	3,5	;RP0=0, select bank0
  2813  0516  1303               	bcf	3,6	;RP1=0, select bank0
  2814  0517  01E4               	clrf	getPIR_AD@i
  2815  0518  300A               	movlw	10
  2816  0519  0264               	subwf	getPIR_AD@i,w
  2817  051A  1803               	btfsc	3,0
  2818  051B  2D38               	goto	l4575
  2819  051C                     l4569:	
  2820                           
  2821                           ;PIR_B1.c: 209: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2822  051C  0864               	movf	getPIR_AD@i,w
  2823  051D  3EB5               	addlw	(__PIR+21)& (0+255)
  2824  051E  0084               	movwf	4
  2825  051F  0800               	movf	0,w
  2826  0520  00DF               	movwf	??_getPIR_AD
  2827  0521  01E0               	clrf	??_getPIR_AD+1
  2828  0522  085F               	movf	??_getPIR_AD,w
  2829  0523  1683               	bsf	3,5	;RP0=1, select bank1
  2830  0524  1303               	bcf	3,6	;RP1=0, select bank1
  2831  0525  07BF               	addwf	(__PIR^(0+128)+31),f
  2832  0526  1803               	skipnc
  2833  0527  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2834  0528  1283               	bcf	3,5	;RP0=0, select bank0
  2835  0529  1303               	bcf	3,6	;RP1=0, select bank0
  2836  052A  0860               	movf	??_getPIR_AD+1,w
  2837  052B  1683               	bsf	3,5	;RP0=1, select bank1
  2838  052C  1303               	bcf	3,6	;RP1=0, select bank1
  2839  052D  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2840  052E  3001               	movlw	1
  2841  052F  1283               	bcf	3,5	;RP0=0, select bank0
  2842  0530  1303               	bcf	3,6	;RP1=0, select bank0
  2843  0531  00DF               	movwf	??_getPIR_AD
  2844  0532  085F               	movf	??_getPIR_AD,w
  2845  0533  07E4               	addwf	getPIR_AD@i,f
  2846  0534  300A               	movlw	10
  2847  0535  0264               	subwf	getPIR_AD@i,w
  2848  0536  1C03               	skipc
  2849  0537  2D1C               	goto	l4569
  2850  0538                     l4575:	
  2851                           
  2852                           ;PIR_B1.c: 210: }
  2853                           ;PIR_B1.c: 211: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2854  0538  300A               	movlw	10
  2855  0539  00D5               	movwf	___lwdiv@divisor
  2856  053A  3000               	movlw	0
  2857  053B  00D6               	movwf	___lwdiv@divisor+1
  2858  053C  1683               	bsf	3,5	;RP0=1, select bank1
  2859  053D  1303               	bcf	3,6	;RP1=0, select bank1
  2860  053E  0840               	movf	((__PIR+1)^(0+128)+31),w
  2861  053F  1283               	bcf	3,5	;RP0=0, select bank0
  2862  0540  1303               	bcf	3,6	;RP1=0, select bank0
  2863  0541  01D8               	clrf	___lwdiv@dividend+1
  2864  0542  07D8               	addwf	___lwdiv@dividend+1,f
  2865  0543  1683               	bsf	3,5	;RP0=1, select bank1
  2866  0544  1303               	bcf	3,6	;RP1=0, select bank1
  2867  0545  083F               	movf	(__PIR^(0+128)+31),w
  2868  0546  1283               	bcf	3,5	;RP0=0, select bank0
  2869  0547  1303               	bcf	3,6	;RP1=0, select bank0
  2870  0548  01D7               	clrf	___lwdiv@dividend
  2871  0549  07D7               	addwf	___lwdiv@dividend,f
  2872  054A  158A  276C  118A   	fcall	___lwdiv
  2873  054D  1283               	bcf	3,5	;RP0=0, select bank0
  2874  054E  1303               	bcf	3,6	;RP1=0, select bank0
  2875  054F  0855               	movf	?___lwdiv,w
  2876  0550  00DF               	movwf	??_getPIR_AD
  2877  0551  085F               	movf	??_getPIR_AD,w
  2878  0552  1683               	bsf	3,5	;RP0=1, select bank1
  2879  0553  1303               	bcf	3,6	;RP1=0, select bank1
  2880  0554  00A6               	movwf	(__PIR^(0+128)+6)
  2881                           
  2882                           ;PIR_B1.c: 212: _PIR.HundredAverageValue = 0;
  2883  0555  01BF               	clrf	(__PIR^(0+128)+31)
  2884  0556  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2885                           
  2886                           ;PIR_B1.c: 214: if (_PIR.TenCount < 10) {
  2887  0557  300A               	movlw	10
  2888  0558  0227               	subwf	(__PIR^(0+128)+7),w
  2889  0559  1803               	skipnc
  2890  055A  2D64               	goto	l4583
  2891                           
  2892                           ;PIR_B1.c: 215: _PIR.TenCount++;
  2893  055B  3001               	movlw	1
  2894  055C  1283               	bcf	3,5	;RP0=0, select bank0
  2895  055D  1303               	bcf	3,6	;RP1=0, select bank0
  2896  055E  00DF               	movwf	??_getPIR_AD
  2897  055F  085F               	movf	??_getPIR_AD,w
  2898  0560  1683               	bsf	3,5	;RP0=1, select bank1
  2899  0561  1303               	bcf	3,6	;RP1=0, select bank1
  2900  0562  07A7               	addwf	(__PIR^(0+128)+7),f
  2901                           
  2902                           ;PIR_B1.c: 216: } else {
  2903  0563  0008               	return
  2904  0564                     l4583:	
  2905                           
  2906                           ;PIR_B1.c: 217: _PIR.TenCount = 0;
  2907  0564  01A7               	clrf	(__PIR^(0+128)+7)
  2908                           
  2909                           ;PIR_B1.c: 218: if (_PIR.HundreCount < 10)
  2910  0565  300A               	movlw	10
  2911  0566  0234               	subwf	(__PIR^(0+128)+20),w
  2912  0567  1803               	skipnc
  2913  0568  2D72               	goto	l4589
  2914                           
  2915                           ;PIR_B1.c: 219: _PIR.HundreCount++;
  2916  0569  3001               	movlw	1
  2917  056A  1283               	bcf	3,5	;RP0=0, select bank0
  2918  056B  1303               	bcf	3,6	;RP1=0, select bank0
  2919  056C  00DF               	movwf	??_getPIR_AD
  2920  056D  085F               	movf	??_getPIR_AD,w
  2921  056E  1683               	bsf	3,5	;RP0=1, select bank1
  2922  056F  1303               	bcf	3,6	;RP1=0, select bank1
  2923  0570  07B4               	addwf	(__PIR^(0+128)+20),f
  2924  0571  0008               	return
  2925  0572                     l4589:	
  2926                           
  2927                           ;PIR_B1.c: 220: else
  2928                           ;PIR_B1.c: 221: _PIR.HundreCount = 0;
  2929  0572  01B4               	clrf	(__PIR^(0+128)+20)
  2930  0573  0008               	return
  2931  0574                     __end_of_getPIR_AD:	
  2932                           
  2933                           	psect	text5
  2934  0795                     __ptext5:	
  2935 ;; *************** function ___awdiv *****************
  2936 ;; Defined at:
  2937 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  divisor         2    0[BANK0 ] int 
  2940 ;;  dividend        2    2[BANK0 ] int 
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;  quotient        2    7[BANK0 ] int 
  2943 ;;  sign            1    6[BANK0 ] unsigned char 
  2944 ;;  counter         1    5[BANK0 ] unsigned char 
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  2    0[BANK0 ] int 
  2947 ;; Registers used:
  2948 ;;		wreg, status,2, status,0
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2954 ;;      Params:         0       4       0       0
  2955 ;;      Locals:         0       4       0       0
  2956 ;;      Temps:          0       1       0       0
  2957 ;;      Totals:         0       9       0       0
  2958 ;;Total ram usage:        9 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    3
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_getPIR_AD
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           
  2969                           ;psect for function ___awdiv
  2970  0795                     ___awdiv:	
  2971                           
  2972                           ;incstack = 0
  2973                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2974  0795  1283               	bcf	3,5	;RP0=0, select bank0
  2975  0796  1303               	bcf	3,6	;RP1=0, select bank0
  2976  0797  01DB               	clrf	___awdiv@sign
  2977  0798  1FD6               	btfss	___awdiv@divisor+1,7
  2978  0799  2FA1               	goto	l3303
  2979  079A  09D5               	comf	___awdiv@divisor,f
  2980  079B  09D6               	comf	___awdiv@divisor+1,f
  2981  079C  0AD5               	incf	___awdiv@divisor,f
  2982  079D  1903               	skipnz
  2983  079E  0AD6               	incf	___awdiv@divisor+1,f
  2984  079F  01DB               	clrf	___awdiv@sign
  2985  07A0  0ADB               	incf	___awdiv@sign,f
  2986  07A1                     l3303:	
  2987  07A1  1FD8               	btfss	___awdiv@dividend+1,7
  2988  07A2  2FAC               	goto	l3309
  2989  07A3  09D7               	comf	___awdiv@dividend,f
  2990  07A4  09D8               	comf	___awdiv@dividend+1,f
  2991  07A5  0AD7               	incf	___awdiv@dividend,f
  2992  07A6  1903               	skipnz
  2993  07A7  0AD8               	incf	___awdiv@dividend+1,f
  2994  07A8  3001               	movlw	1
  2995  07A9  00D9               	movwf	??___awdiv
  2996  07AA  0859               	movf	??___awdiv,w
  2997  07AB  06DB               	xorwf	___awdiv@sign,f
  2998  07AC                     l3309:	
  2999  07AC  01DC               	clrf	___awdiv@quotient
  3000  07AD  01DD               	clrf	___awdiv@quotient+1
  3001  07AE  0856               	movf	___awdiv@divisor+1,w
  3002  07AF  0455               	iorwf	___awdiv@divisor,w
  3003  07B0  1903               	skipnz
  3004  07B1  2FE3               	goto	l3331
  3005  07B2  01DA               	clrf	___awdiv@counter
  3006  07B3  0ADA               	incf	___awdiv@counter,f
  3007  07B4                     l3319:	
  3008  07B4  1BD6               	btfsc	___awdiv@divisor+1,7
  3009  07B5  2FC2               	goto	l3321
  3010  07B6  3001               	movlw	1
  3011  07B7                     u2835:	
  3012  07B7  1003               	clrc
  3013  07B8  0DD5               	rlf	___awdiv@divisor,f
  3014  07B9  0DD6               	rlf	___awdiv@divisor+1,f
  3015  07BA  3EFF               	addlw	-1
  3016  07BB  1D03               	skipz
  3017  07BC  2FB7               	goto	u2835
  3018  07BD  3001               	movlw	1
  3019  07BE  00D9               	movwf	??___awdiv
  3020  07BF  0859               	movf	??___awdiv,w
  3021  07C0  07DA               	addwf	___awdiv@counter,f
  3022  07C1  2FB4               	goto	l3319
  3023  07C2                     l3321:	
  3024  07C2  3001               	movlw	1
  3025  07C3                     u2855:	
  3026  07C3  1003               	clrc
  3027  07C4  0DDC               	rlf	___awdiv@quotient,f
  3028  07C5  0DDD               	rlf	___awdiv@quotient+1,f
  3029  07C6  3EFF               	addlw	-1
  3030  07C7  1D03               	skipz
  3031  07C8  2FC3               	goto	u2855
  3032  07C9  0856               	movf	___awdiv@divisor+1,w
  3033  07CA  0258               	subwf	___awdiv@dividend+1,w
  3034  07CB  1D03               	skipz
  3035  07CC  2FCF               	goto	u2865
  3036  07CD  0855               	movf	___awdiv@divisor,w
  3037  07CE  0257               	subwf	___awdiv@dividend,w
  3038  07CF                     u2865:	
  3039  07CF  1C03               	skipc
  3040  07D0  2FD8               	goto	l3327
  3041  07D1  0855               	movf	___awdiv@divisor,w
  3042  07D2  02D7               	subwf	___awdiv@dividend,f
  3043  07D3  0856               	movf	___awdiv@divisor+1,w
  3044  07D4  1C03               	skipc
  3045  07D5  03D8               	decf	___awdiv@dividend+1,f
  3046  07D6  02D8               	subwf	___awdiv@dividend+1,f
  3047  07D7  145C               	bsf	___awdiv@quotient,0
  3048  07D8                     l3327:	
  3049  07D8  3001               	movlw	1
  3050  07D9                     u2875:	
  3051  07D9  1003               	clrc
  3052  07DA  0CD6               	rrf	___awdiv@divisor+1,f
  3053  07DB  0CD5               	rrf	___awdiv@divisor,f
  3054  07DC  3EFF               	addlw	-1
  3055  07DD  1D03               	skipz
  3056  07DE  2FD9               	goto	u2875
  3057  07DF  3001               	movlw	1
  3058  07E0  02DA               	subwf	___awdiv@counter,f
  3059  07E1  1D03               	btfss	3,2
  3060  07E2  2FC2               	goto	l3321
  3061  07E3                     l3331:	
  3062  07E3  085B               	movf	___awdiv@sign,w
  3063  07E4  1903               	btfsc	3,2
  3064  07E5  2FEB               	goto	l3335
  3065  07E6  09DC               	comf	___awdiv@quotient,f
  3066  07E7  09DD               	comf	___awdiv@quotient+1,f
  3067  07E8  0ADC               	incf	___awdiv@quotient,f
  3068  07E9  1903               	skipnz
  3069  07EA  0ADD               	incf	___awdiv@quotient+1,f
  3070  07EB                     l3335:	
  3071  07EB  085D               	movf	___awdiv@quotient+1,w
  3072  07EC  01D6               	clrf	?___awdiv+1
  3073  07ED  07D6               	addwf	?___awdiv+1,f
  3074  07EE  085C               	movf	___awdiv@quotient,w
  3075  07EF  01D5               	clrf	?___awdiv
  3076  07F0  07D5               	addwf	?___awdiv,f
  3077  07F1  0008               	return
  3078  07F2                     __end_of___awdiv:	
  3079                           
  3080                           	psect	text6
  3081  0574                     __ptext6:	
  3082 ;; *************** function _getLoad_AD *****************
  3083 ;; Defined at:
  3084 ;;		line 15 in file "../src/OverLoad_B1.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;  channel         1    wreg     unsigned char 
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;  channel         1    4[BANK0 ] unsigned char 
  3089 ;;  i               1    7[BANK0 ] unsigned char 
  3090 ;;  j               1    6[BANK0 ] unsigned char 
  3091 ;;  k               1    5[BANK0 ] unsigned char 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;		None               void
  3094 ;; Registers used:
  3095 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3101 ;;      Params:         0       0       0       0
  3102 ;;      Locals:         0       4       0       0
  3103 ;;      Temps:          0       2       0       0
  3104 ;;      Totals:         0       6       0       0
  3105 ;;Total ram usage:        6 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    5
  3108 ;; This function calls:
  3109 ;;		_getAD
  3110 ;; This function is called by:
  3111 ;;		_main
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           
  3116                           ;psect for function _getLoad_AD
  3117  0574                     _getLoad_AD:	
  3118                           
  3119                           ;incstack = 0
  3120                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3121                           ;getLoad_AD@channel stored from wreg
  3122  0574  1283               	bcf	3,5	;RP0=0, select bank0
  3123  0575  1303               	bcf	3,6	;RP1=0, select bank0
  3124  0576  00D9               	movwf	getLoad_AD@channel
  3125                           
  3126                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3127  0577  01DC               	clrf	getLoad_AD@i
  3128  0578  01DB               	clrf	getLoad_AD@j
  3129  0579  01DA               	clrf	getLoad_AD@k
  3130                           
  3131                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3132  057A  1683               	bsf	3,5	;RP0=1, select bank1
  3133  057B  1303               	bcf	3,6	;RP1=0, select bank1
  3134  057C  1E4F               	btfss	_Load^(0+128),4
  3135  057D  0008               	return
  3136                           
  3137                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0x73);
  3138  057E  3073               	movlw	115
  3139  057F  1283               	bcf	3,5	;RP0=0, select bank0
  3140  0580  1303               	bcf	3,6	;RP1=0, select bank0
  3141  0581  00D7               	movwf	??_getLoad_AD
  3142  0582  0857               	movf	??_getLoad_AD,w
  3143  0583  00D5               	movwf	getAD@adcon1
  3144  0584  0859               	movf	getLoad_AD@channel,w
  3145  0585  158A  2567  118A   	fcall	_getAD
  3146  0588  1283               	bcf	3,5	;RP0=0, select bank0
  3147  0589  1303               	bcf	3,6	;RP1=0, select bank0
  3148  058A  00D8               	movwf	??_getLoad_AD+1
  3149  058B  0858               	movf	??_getLoad_AD+1,w
  3150  058C  1683               	bsf	3,5	;RP0=1, select bank1
  3151  058D  1303               	bcf	3,6	;RP1=0, select bank1
  3152  058E  00E4               	movwf	(_Load^(0+128)+21)
  3153                           
  3154                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3155  058F  1283               	bcf	3,5	;RP0=0, select bank0
  3156  0590  1303               	bcf	3,6	;RP1=0, select bank0
  3157  0591  01DC               	clrf	getLoad_AD@i
  3158  0592  3004               	movlw	4
  3159  0593  025C               	subwf	getLoad_AD@i,w
  3160  0594  1803               	btfsc	3,0
  3161  0595  2DBB               	goto	l4495
  3162  0596                     l4483:	
  3163                           
  3164                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  3165  0596  085C               	movf	getLoad_AD@i,w
  3166  0597  3ED9               	addlw	(_Load+10)& (0+255)
  3167  0598  0084               	movwf	4
  3168  0599  1683               	bsf	3,5	;RP0=1, select bank1
  3169  059A  1303               	bcf	3,6	;RP1=0, select bank1
  3170  059B  0864               	movf	(_Load^(0+128)+21),w
  3171  059C  1383               	bcf	3,7	;select IRP bank1
  3172  059D  0200               	subwf	0,w
  3173  059E  1803               	skipnc
  3174  059F  2DB2               	goto	l4491
  3175  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  3176  05A1  1303               	bcf	3,6	;RP1=0, select bank0
  3177  05A2  08DB               	movf	getLoad_AD@j,f
  3178  05A3  1D03               	skipz
  3179  05A4  2DB2               	goto	l4491
  3180                           
  3181                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  3182  05A5  1683               	bsf	3,5	;RP0=1, select bank1
  3183  05A6  1303               	bcf	3,6	;RP1=0, select bank1
  3184  05A7  0864               	movf	(_Load^(0+128)+21),w
  3185  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  3186  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  3187  05AA  00D7               	movwf	??_getLoad_AD
  3188  05AB  085C               	movf	getLoad_AD@i,w
  3189  05AC  3ED9               	addlw	(_Load+10)& (0+255)
  3190  05AD  0084               	movwf	4
  3191  05AE  0857               	movf	??_getLoad_AD,w
  3192  05AF  0080               	movwf	0
  3193                           
  3194                           ;OverLoad_B1.c: 24: j = 1;
  3195  05B0  01DB               	clrf	getLoad_AD@j
  3196  05B1  0ADB               	incf	getLoad_AD@j,f
  3197  05B2                     l4491:	
  3198  05B2  3001               	movlw	1
  3199  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  3200  05B4  00D7               	movwf	??_getLoad_AD
  3201  05B5  0857               	movf	??_getLoad_AD,w
  3202  05B6  07DC               	addwf	getLoad_AD@i,f
  3203  05B7  3004               	movlw	4
  3204  05B8  025C               	subwf	getLoad_AD@i,w
  3205  05B9  1C03               	skipc
  3206  05BA  2D96               	goto	l4483
  3207  05BB                     l4495:	
  3208                           
  3209                           ;OverLoad_B1.c: 25: }
  3210                           ;OverLoad_B1.c: 26: }
  3211                           ;OverLoad_B1.c: 27: if (j == 0) {
  3212  05BB  08DB               	movf	getLoad_AD@j,f
  3213  05BC  1D03               	skipz
  3214  05BD  0008               	return
  3215                           
  3216                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3217  05BE  01DC               	clrf	getLoad_AD@i
  3218  05BF                     L6:	
  3219  05BF  3004               	movlw	4
  3220  05C0  025C               	subwf	getLoad_AD@i,w
  3221  05C1  1803               	btfsc	3,0
  3222  05C2  0008               	return
  3223                           
  3224                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  3225  05C3  085C               	movf	getLoad_AD@i,w
  3226  05C4  3EDE               	addlw	(_Load+15)& (0+255)
  3227  05C5  0084               	movwf	4
  3228  05C6  1383               	bcf	3,7	;select IRP bank1
  3229  05C7  0800               	movf	0,w
  3230  05C8  1683               	bsf	3,5	;RP0=1, select bank1
  3231  05C9  1303               	bcf	3,6	;RP1=0, select bank1
  3232  05CA  0264               	subwf	(_Load^(0+128)+21),w
  3233  05CB  1803               	skipnc
  3234  05CC  2DDF               	goto	l4511
  3235  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  3236  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  3237  05CF  08DA               	movf	getLoad_AD@k,f
  3238  05D0  1D03               	skipz
  3239  05D1  2DDF               	goto	l4511
  3240                           
  3241                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  3242  05D2  1683               	bsf	3,5	;RP0=1, select bank1
  3243  05D3  1303               	bcf	3,6	;RP1=0, select bank1
  3244  05D4  0864               	movf	(_Load^(0+128)+21),w
  3245  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  3246  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  3247  05D7  00D7               	movwf	??_getLoad_AD
  3248  05D8  085C               	movf	getLoad_AD@i,w
  3249  05D9  3EDE               	addlw	(_Load+15)& (0+255)
  3250  05DA  0084               	movwf	4
  3251  05DB  0857               	movf	??_getLoad_AD,w
  3252  05DC  0080               	movwf	0
  3253                           
  3254                           ;OverLoad_B1.c: 31: k = 1;
  3255  05DD  01DA               	clrf	getLoad_AD@k
  3256  05DE  0ADA               	incf	getLoad_AD@k,f
  3257  05DF                     l4511:	
  3258  05DF  3001               	movlw	1
  3259  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  3260  05E1  00D7               	movwf	??_getLoad_AD
  3261  05E2  0857               	movf	??_getLoad_AD,w
  3262  05E3  07DC               	addwf	getLoad_AD@i,f
  3263  05E4  2DBF               	goto	L6
  3264  05E5                     __end_of_getLoad_AD:	
  3265                           
  3266                           	psect	text7
  3267  0DF3                     __ptext7:	
  3268 ;; *************** function _getCDS_AD *****************
  3269 ;; Defined at:
  3270 ;;		line 45 in file "../src/CDS_B1.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  channel1        1    wreg     unsigned char 
  3273 ;;  channel2        1    2[BANK0 ] unsigned char 
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  channel1        1    7[BANK0 ] unsigned char 
  3276 ;;  j               1    6[BANK0 ] unsigned char 
  3277 ;;  i               1    5[BANK0 ] unsigned char 
  3278 ;; Return value:  Size  Location     Type
  3279 ;;		None               void
  3280 ;; Registers used:
  3281 ;;		wreg, status,2, status,0, pclath, cstack
  3282 ;; Tracked objects:
  3283 ;;		On entry : 0/0
  3284 ;;		On exit  : 0/0
  3285 ;;		Unchanged: 0/0
  3286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3287 ;;      Params:         0       1       0       0
  3288 ;;      Locals:         0       3       0       0
  3289 ;;      Temps:          0       2       0       0
  3290 ;;      Totals:         0       6       0       0
  3291 ;;Total ram usage:        6 bytes
  3292 ;; Hardware stack levels used:    1
  3293 ;; Hardware stack levels required when called:    5
  3294 ;; This function calls:
  3295 ;;		_getAD
  3296 ;; This function is called by:
  3297 ;;		_main
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           
  3302                           ;psect for function _getCDS_AD
  3303  0DF3                     _getCDS_AD:	
  3304                           
  3305                           ;incstack = 0
  3306                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3307                           ;getCDS_AD@channel1 stored from wreg
  3308  0DF3  1283               	bcf	3,5	;RP0=0, select bank0
  3309  0DF4  1303               	bcf	3,6	;RP1=0, select bank0
  3310  0DF5  00DC               	movwf	getCDS_AD@channel1
  3311                           
  3312                           ;CDS_B1.c: 46: char i = 0, j = 0;
  3313  0DF6  01DA               	clrf	getCDS_AD@i
  3314  0DF7  01DB               	clrf	getCDS_AD@j
  3315                           
  3316                           ;CDS_B1.c: 47: if (_CDS.ADtoGO == 1) {
  3317  0DF8  1DA7               	btfss	__CDS,3
  3318  0DF9  0008               	return
  3319                           
  3320                           ;CDS_B1.c: 48: _CDS.GO = 1;
  3321  0DFA  14A7               	bsf	__CDS,1
  3322                           
  3323                           ;CDS_B1.c: 49: _CDS.ADRES = getAD(channel1, 0x70);
  3324  0DFB  3070               	movlw	112
  3325  0DFC  00D8               	movwf	??_getCDS_AD
  3326  0DFD  0858               	movf	??_getCDS_AD,w
  3327  0DFE  00D5               	movwf	getAD@adcon1
  3328  0DFF  085C               	movf	getCDS_AD@channel1,w
  3329  0E00  158A  2567  158A   	fcall	_getAD
  3330  0E03  1283               	bcf	3,5	;RP0=0, select bank0
  3331  0E04  1303               	bcf	3,6	;RP1=0, select bank0
  3332  0E05  00D9               	movwf	??_getCDS_AD+1
  3333  0E06  0859               	movf	??_getCDS_AD+1,w
  3334  0E07  00AB               	movwf	__CDS+4
  3335                           
  3336                           ;CDS_B1.c: 50: _CDS.VRAD = _CDS.ADRES;
  3337  0E08  082B               	movf	__CDS+4,w
  3338  0E09  00D8               	movwf	??_getCDS_AD
  3339  0E0A  0858               	movf	??_getCDS_AD,w
  3340  0E0B  00A9               	movwf	__CDS+2
  3341                           
  3342                           ;CDS_B1.c: 51: _CDS.ADRES = getAD(channel2, 0x70);
  3343  0E0C  3070               	movlw	112
  3344  0E0D  00D8               	movwf	??_getCDS_AD
  3345  0E0E  0858               	movf	??_getCDS_AD,w
  3346  0E0F  00D5               	movwf	getAD@adcon1
  3347  0E10  0857               	movf	getCDS_AD@channel2,w
  3348  0E11  158A  2567         	fcall	_getAD
  3349  0E13  1283               	bcf	3,5	;RP0=0, select bank0
  3350  0E14  1303               	bcf	3,6	;RP1=0, select bank0
  3351  0E15  00D9               	movwf	??_getCDS_AD+1
  3352  0E16  0859               	movf	??_getCDS_AD+1,w
  3353  0E17  00AB               	movwf	__CDS+4
  3354                           
  3355                           ;CDS_B1.c: 52: _CDS.SignalAD = _CDS.ADRES;
  3356  0E18  082B               	movf	__CDS+4,w
  3357  0E19  00D8               	movwf	??_getCDS_AD
  3358  0E1A  0858               	movf	??_getCDS_AD,w
  3359  0E1B  00AA               	movwf	__CDS+3
  3360  0E1C  0008               	return
  3361  0E1D                     __end_of_getCDS_AD:	
  3362                           
  3363                           	psect	text8
  3364  0D67                     __ptext8:	
  3365 ;; *************** function _getAD *****************
  3366 ;; Defined at:
  3367 ;;		line 428 in file "../src/MCU_B1.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;  adcon0          1    wreg     unsigned char 
  3370 ;;  adcon1          1    0[BANK0 ] unsigned char 
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;  adcon0          1    1[BANK0 ] unsigned char 
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  1    wreg      unsigned char 
  3375 ;; Registers used:
  3376 ;;		wreg, status,2, status,0, pclath, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3382 ;;      Params:         0       1       0       0
  3383 ;;      Locals:         0       1       0       0
  3384 ;;      Temps:          0       0       0       0
  3385 ;;      Totals:         0       2       0       0
  3386 ;;Total ram usage:        2 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:    4
  3389 ;; This function calls:
  3390 ;;		_Timeout_Counter
  3391 ;;		_set_TimeoutCleared
  3392 ;; This function is called by:
  3393 ;;		_getCDS_AD
  3394 ;;		_getLoad_AD
  3395 ;;		_getPIR_AD
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           
  3400                           ;psect for function _getAD
  3401  0D67                     _getAD:	
  3402                           
  3403                           ;incstack = 0
  3404                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3405                           ;getAD@adcon0 stored from wreg
  3406  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  3407  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  3408  0D69  00D6               	movwf	getAD@adcon0
  3409                           
  3410                           ;MCU_B1.c: 429: ADCON0 = adcon0;
  3411  0D6A  0856               	movf	getAD@adcon0,w
  3412  0D6B  009F               	movwf	31	;volatile
  3413                           
  3414                           ;MCU_B1.c: 430: ADCON1 = adcon1;
  3415  0D6C  0855               	movf	getAD@adcon1,w
  3416  0D6D  1683               	bsf	3,5	;RP0=1, select bank1
  3417  0D6E  1303               	bcf	3,6	;RP1=0, select bank1
  3418  0D6F  009F               	movwf	31	;volatile
  3419                           
  3420                           ;MCU_B1.c: 431: GO_nDONE = 1;
  3421  0D70  1283               	bcf	3,5	;RP0=0, select bank0
  3422  0D71  1303               	bcf	3,6	;RP1=0, select bank0
  3423  0D72  149F               	bsf	31,1	;volatile
  3424                           
  3425                           ;MCU_B1.c: 432: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3426  0D73  2D77               	goto	l4241
  3427  0D74                     l4239:	
  3428                           
  3429                           ;MCU_B1.c: 433: Timeout_Counter();
  3430  0D74  158A  24A5  158A   	fcall	_Timeout_Counter
  3431  0D77                     l4241:	
  3432  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  3433  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  3434  0D79  1C9F               	btfss	31,1	;volatile
  3435  0D7A  2D7D               	goto	l4245
  3436  0D7B  1D24               	btfss	_myMain+4,2
  3437  0D7C  2D74               	goto	l4239
  3438  0D7D                     l4245:	
  3439                           
  3440                           ;MCU_B1.c: 434: };
  3441                           ;MCU_B1.c: 435: set_TimeoutCleared();
  3442  0D7D  158A  237E         	fcall	_set_TimeoutCleared
  3443                           
  3444                           ;MCU_B1.c: 436: return ADRES;
  3445  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  3446  0D80  1303               	bcf	3,6	;RP1=0, select bank0
  3447  0D81  081E               	movf	30,w	;volatile
  3448  0D82  0008               	return
  3449  0D83                     __end_of_getAD:	
  3450                           
  3451                           	psect	text9
  3452  0B7E                     __ptext9:	
  3453 ;; *************** function _set_TimeoutCleared *****************
  3454 ;; Defined at:
  3455 ;;		line 276 in file "../src/Main_B1.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;		None
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;		None
  3460 ;; Return value:  Size  Location     Type
  3461 ;;		None               void
  3462 ;; Registers used:
  3463 ;;		status,2
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3469 ;;      Params:         0       0       0       0
  3470 ;;      Locals:         0       0       0       0
  3471 ;;      Temps:          0       0       0       0
  3472 ;;      Totals:         0       0       0       0
  3473 ;;Total ram usage:        0 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    3
  3476 ;; This function calls:
  3477 ;;		Nothing
  3478 ;; This function is called by:
  3479 ;;		_getAD
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           
  3484                           ;psect for function _set_TimeoutCleared
  3485  0B7E                     _set_TimeoutCleared:	
  3486                           
  3487                           ;Main_B1.c: 277: myMain.Timeout = 0;
  3488                           
  3489                           ;incstack = 0
  3490                           ; Regs used in _set_TimeoutCleared: [status,2]
  3491  0B7E  1283               	bcf	3,5	;RP0=0, select bank0
  3492  0B7F  1303               	bcf	3,6	;RP1=0, select bank0
  3493  0B80  1124               	bcf	_myMain+4,2
  3494                           
  3495                           ;Main_B1.c: 278: myMain.Timeout_Counter = 0;
  3496  0B81  01A5               	clrf	_myMain+5
  3497  0B82  01A6               	clrf	_myMain+6
  3498  0B83  0008               	return
  3499  0B84                     __end_of_set_TimeoutCleared:	
  3500                           
  3501                           	psect	text10
  3502  0CA5                     __ptext10:	
  3503 ;; *************** function _Timeout_Counter *****************
  3504 ;; Defined at:
  3505 ;;		line 267 in file "../src/Main_B1.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;		None
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;		None
  3510 ;; Return value:  Size  Location     Type
  3511 ;;		None               void
  3512 ;; Registers used:
  3513 ;;		wreg, status,2
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3519 ;;      Params:         0       0       0       0
  3520 ;;      Locals:         0       0       0       0
  3521 ;;      Temps:          0       0       0       0
  3522 ;;      Totals:         0       0       0       0
  3523 ;;Total ram usage:        0 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    3
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_getAD
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           
  3534                           ;psect for function _Timeout_Counter
  3535  0CA5                     _Timeout_Counter:	
  3536                           
  3537                           ;Main_B1.c: 268: myMain.Timeout_Counter++;
  3538                           
  3539                           ;incstack = 0
  3540                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3541  0CA5  3001               	movlw	1
  3542  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  3543  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  3544  0CA8  07A5               	addwf	_myMain+5,f
  3545  0CA9  1803               	skipnc
  3546  0CAA  0AA6               	incf	_myMain+6,f
  3547  0CAB  3000               	movlw	0
  3548  0CAC  07A6               	addwf	_myMain+6,f
  3549                           
  3550                           ;Main_B1.c: 269: if (myMain.Timeout_Counter == 10000) {
  3551  0CAD  3027               	movlw	39
  3552  0CAE  0626               	xorwf	_myMain+6,w
  3553  0CAF  1D03               	skipz
  3554  0CB0  2CB3               	goto	u4355
  3555  0CB1  3010               	movlw	16
  3556  0CB2  0625               	xorwf	_myMain+5,w
  3557  0CB3                     u4355:	
  3558  0CB3  1D03               	skipz
  3559  0CB4  0008               	return
  3560                           
  3561                           ;Main_B1.c: 270: myMain.Timeout_Counter = 0;
  3562  0CB5  01A5               	clrf	_myMain+5
  3563  0CB6  01A6               	clrf	_myMain+6
  3564                           
  3565                           ;Main_B1.c: 271: myMain.Timeout = 1;
  3566  0CB7  1524               	bsf	_myMain+4,2
  3567  0CB8  0008               	return
  3568  0CB9                     __end_of_Timeout_Counter:	
  3569                           
  3570                           	psect	text11
  3571  0C49                     __ptext11:	
  3572 ;; *************** function _WDT_Main *****************
  3573 ;; Defined at:
  3574 ;;		line 1058 in file "../src/MCU_B1.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;		None               void
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0, pclath, cstack
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3588 ;;      Params:         0       0       0       0
  3589 ;;      Locals:         0       0       0       0
  3590 ;;      Temps:          0       1       0       0
  3591 ;;      Totals:         0       1       0       0
  3592 ;;Total ram usage:        1 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    4
  3595 ;; This function calls:
  3596 ;;		_WDT_Clearing
  3597 ;; This function is called by:
  3598 ;;		_main
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           
  3603                           ;psect for function _WDT_Main
  3604  0C49                     _WDT_Main:	
  3605                           
  3606                           ;MCU_B1.c: 1059: if (WDT.Enable == 1) {
  3607                           
  3608                           ;incstack = 0
  3609                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3610  0C49  1C77               	btfss	_WDT,0
  3611  0C4A  0008               	return
  3612                           
  3613                           ;MCU_B1.c: 1060: if (WDT.Timer-- > 0) {
  3614  0C4B  3001               	movlw	1
  3615  0C4C  02F8               	subwf	_WDT+1,f
  3616  0C4D  0878               	movf	_WDT+1,w
  3617  0C4E  3AFF               	xorlw	255
  3618  0C4F  1903               	skipnz
  3619  0C50  0008               	return
  3620                           
  3621                           ;MCU_B1.c: 1061: WDT.Timer = 100;
  3622  0C51  3064               	movlw	100
  3623  0C52  1283               	bcf	3,5	;RP0=0, select bank0
  3624  0C53  1303               	bcf	3,6	;RP1=0, select bank0
  3625  0C54  00D5               	movwf	??_WDT_Main
  3626  0C55  0855               	movf	??_WDT_Main,w
  3627  0C56  00F8               	movwf	_WDT+1
  3628                           
  3629                           ;MCU_B1.c: 1062: WDT_Clearing();
  3630  0C57  118A  2002         	fcall	_WDT_Clearing
  3631  0C59  0008               	return
  3632  0C5A                     __end_of_WDT_Main:	
  3633                           
  3634                           	psect	text12
  3635  0002                     __ptext12:	
  3636 ;; *************** function _WDT_Clearing *****************
  3637 ;; Defined at:
  3638 ;;		line 1068 in file "../src/MCU_B1.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;		None
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;		None
  3643 ;; Return value:  Size  Location     Type
  3644 ;;		None               void
  3645 ;; Registers used:
  3646 ;;		None
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3652 ;;      Params:         0       0       0       0
  3653 ;;      Locals:         0       0       0       0
  3654 ;;      Temps:          0       0       0       0
  3655 ;;      Totals:         0       0       0       0
  3656 ;;Total ram usage:        0 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    3
  3659 ;; This function calls:
  3660 ;;		Nothing
  3661 ;; This function is called by:
  3662 ;;		_WDT_Main
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           
  3667                           ;psect for function _WDT_Clearing
  3668  0002                     _WDT_Clearing:	
  3669                           
  3670                           ;incstack = 0
  3671                           ; Regs used in _WDT_Clearing: []
  3672  0002  0064               	clrwdt	;# 
  3673  0003  0008               	return
  3674  0004                     __end_of_WDT_Clearing:	
  3675                           
  3676                           	psect	text13
  3677  07F2                     __ptext13:	
  3678 ;; *************** function _UART_Main *****************
  3679 ;; Defined at:
  3680 ;;		line 757 in file "../src/MCU_B1.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;		None
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;		None
  3685 ;; Return value:  Size  Location     Type
  3686 ;;		None               void
  3687 ;; Registers used:
  3688 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3694 ;;      Params:         0       0       0       0
  3695 ;;      Locals:         0       0       0       0
  3696 ;;      Temps:          0       0       0       0
  3697 ;;      Totals:         0       0       0       0
  3698 ;;Total ram usage:        0 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    5
  3701 ;; This function calls:
  3702 ;;		_UART_Receive
  3703 ;;		_UART_Transmit
  3704 ;; This function is called by:
  3705 ;;		_main
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           
  3710                           ;psect for function _UART_Main
  3711  07F2                     _UART_Main:	
  3712                           
  3713                           ;MCU_B1.c: 758: if (UART.RxGO == 1) {
  3714                           
  3715                           ;incstack = 0
  3716                           ; Regs used in _UART_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3717  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  3718  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  3719  07F4  1CC1               	btfss	_UART+11,1
  3720  07F5  2FFA               	goto	l476
  3721                           
  3722                           ;MCU_B1.c: 759: UART.RxGO = 0;
  3723  07F6  10C1               	bcf	_UART+11,1
  3724                           
  3725                           ;MCU_B1.c: 760: UART_Receive();
  3726  07F7  158A  2369         	fcall	_UART_Receive
  3727                           
  3728                           ;MCU_B1.c: 761: ;;
  3729                           ;MCU_B1.c: 764: } else {
  3730  07F9  0008               	return
  3731  07FA                     l476:	
  3732                           
  3733                           ;MCU_B1.c: 765: if (UART.TxGO == 1) {
  3734  07FA  1C41               	btfss	_UART+11,0
  3735  07FB  0008               	return
  3736                           
  3737                           ;MCU_B1.c: 766: UART.TxGO = 0;
  3738  07FC  1041               	bcf	_UART+11,0
  3739                           
  3740                           ;MCU_B1.c: 767: UART_Transmit();
  3741  07FD  158A  2583         	fcall	_UART_Transmit
  3742  07FF  0008               	return
  3743  0800                     __end_of_UART_Main:	
  3744                           
  3745                           	psect	text14
  3746  0D83                     __ptext14:	
  3747 ;; *************** function _UART_Transmit *****************
  3748 ;; Defined at:
  3749 ;;		line 772 in file "../src/MCU_B1.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;		None
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  i               2    1[BANK0 ] int 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;		None               void
  3756 ;; Registers used:
  3757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3763 ;;      Params:         0       0       0       0
  3764 ;;      Locals:         0       2       0       0
  3765 ;;      Temps:          0       0       0       0
  3766 ;;      Totals:         0       2       0       0
  3767 ;;Total ram usage:        2 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    4
  3770 ;; This function calls:
  3771 ;;		_putch
  3772 ;; This function is called by:
  3773 ;;		_UART_Main
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           
  3778                           ;psect for function _UART_Transmit
  3779  0D83                     _UART_Transmit:	
  3780                           
  3781                           ;MCU_B1.c: 775: for (int i = 0; i < 8; i++) {
  3782                           
  3783                           ;incstack = 0
  3784                           ; Regs used in _UART_Transmit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3785  0D83  1283               	bcf	3,5	;RP0=0, select bank0
  3786  0D84  1303               	bcf	3,6	;RP1=0, select bank0
  3787  0D85  01D6               	clrf	UART_Transmit@i
  3788  0D86  01D7               	clrf	UART_Transmit@i+1
  3789  0D87                     L7:	
  3790  0D87  0857               	movf	UART_Transmit@i+1,w
  3791  0D88  3A80               	xorlw	128
  3792  0D89  00FF               	movwf	127
  3793  0D8A  3080               	movlw	128
  3794  0D8B  027F               	subwf	127,w
  3795  0D8C  1D03               	skipz
  3796  0D8D  2D90               	goto	u4575
  3797  0D8E  3008               	movlw	8
  3798  0D8F  0256               	subwf	UART_Transmit@i,w
  3799  0D90                     u4575:	
  3800  0D90  1803               	btfsc	3,0
  3801  0D91  0008               	return
  3802                           
  3803                           ;MCU_B1.c: 777: putch(UART.Data[i]);
  3804  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  3805  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  3806  0D94  0856               	movf	UART_Transmit@i,w
  3807  0D95  3E36               	addlw	_UART& (0+255)
  3808  0D96  0084               	movwf	4
  3809  0D97  1383               	bcf	3,7	;select IRP bank0
  3810  0D98  0800               	movf	0,w
  3811  0D99  158A  23A2  158A   	fcall	_putch
  3812  0D9C  3001               	movlw	1
  3813  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  3814  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  3815  0D9F  07D6               	addwf	UART_Transmit@i,f
  3816  0DA0  1803               	skipnc
  3817  0DA1  0AD7               	incf	UART_Transmit@i+1,f
  3818  0DA2  3000               	movlw	0
  3819  0DA3  07D7               	addwf	UART_Transmit@i+1,f
  3820  0DA4  2D87               	goto	L7
  3821  0DA5                     __end_of_UART_Transmit:	
  3822                           
  3823                           	psect	text15
  3824  0BA2                     __ptext15:	
  3825 ;; *************** function _putch *****************
  3826 ;; Defined at:
  3827 ;;		line 856 in file "../src/MCU_B1.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;  byte            1    wreg     unsigned char 
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;  byte            1    0[BANK0 ] unsigned char 
  3832 ;; Return value:  Size  Location     Type
  3833 ;;		None               void
  3834 ;; Registers used:
  3835 ;;		wreg
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3841 ;;      Params:         0       0       0       0
  3842 ;;      Locals:         0       1       0       0
  3843 ;;      Temps:          0       0       0       0
  3844 ;;      Totals:         0       1       0       0
  3845 ;;Total ram usage:        1 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; Hardware stack levels required when called:    3
  3848 ;; This function calls:
  3849 ;;		Nothing
  3850 ;; This function is called by:
  3851 ;;		_UART_Transmit
  3852 ;;		_getche
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _putch
  3858  0BA2                     _putch:	
  3859                           
  3860                           ;incstack = 0
  3861                           ; Regs used in _putch: [wreg]
  3862                           ;putch@byte stored from wreg
  3863  0BA2  1283               	bcf	3,5	;RP0=0, select bank0
  3864  0BA3  1303               	bcf	3,6	;RP1=0, select bank0
  3865  0BA4  00D5               	movwf	putch@byte
  3866  0BA5                     l494:	
  3867                           ;MCU_B1.c: 859: continue;
  3868                           
  3869                           ;MCU_B1.c: 858: while (!TXIF)
  3870                           
  3871  0BA5  1E0C               	btfss	12,4	;volatile
  3872  0BA6  2BA5               	goto	l494
  3873                           
  3874                           ;MCU_B1.c: 860: TXREG = byte;
  3875  0BA7  0855               	movf	putch@byte,w
  3876  0BA8  0099               	movwf	25	;volatile
  3877  0BA9  0008               	return
  3878  0BAA                     __end_of_putch:	
  3879                           
  3880                           	psect	text16
  3881  0B69                     __ptext16:	
  3882 ;; *************** function _UART_Receive *****************
  3883 ;; Defined at:
  3884 ;;		line 791 in file "../src/MCU_B1.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;		None
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;		None
  3889 ;; Return value:  Size  Location     Type
  3890 ;;		None               void
  3891 ;; Registers used:
  3892 ;;		None
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3898 ;;      Params:         0       0       0       0
  3899 ;;      Locals:         0       0       0       0
  3900 ;;      Temps:          0       0       0       0
  3901 ;;      Totals:         0       0       0       0
  3902 ;;Total ram usage:        0 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; Hardware stack levels required when called:    3
  3905 ;; This function calls:
  3906 ;;		Nothing
  3907 ;; This function is called by:
  3908 ;;		_UART_Main
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           
  3913                           ;psect for function _UART_Receive
  3914  0B69                     _UART_Receive:	
  3915                           
  3916                           ;MCU_B1.c: 813: myMain.Test = 1;
  3917                           
  3918                           ;incstack = 0
  3919                           ; Regs used in _UART_Receive: []
  3920  0B69  1283               	bcf	3,5	;RP0=0, select bank0
  3921  0B6A  1303               	bcf	3,6	;RP1=0, select bank0
  3922  0B6B  1720               	bsf	_myMain,6
  3923  0B6C  0008               	return
  3924  0B6D                     __end_of_UART_Receive:	
  3925                           
  3926                           	psect	text17
  3927  0245                     __ptext17:	
  3928 ;; *************** function _PIR_Main *****************
  3929 ;; Defined at:
  3930 ;;		line 14 in file "../src/PIR_B1.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;		None
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  error           1   19[BANK0 ] unsigned char 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;		None               void
  3937 ;; Registers used:
  3938 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3944 ;;      Params:         0       0       0       0
  3945 ;;      Locals:         0       3       0       0
  3946 ;;      Temps:          0       5       0       0
  3947 ;;      Totals:         0       8       0       0
  3948 ;;Total ram usage:        8 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    6
  3951 ;; This function calls:
  3952 ;;		_getLights_Status
  3953 ;;		_getMain_All_Error_Status
  3954 ;;		_setLED
  3955 ;;		_setLights_Trigger
  3956 ;;		_setMain_Exception
  3957 ;; This function is called by:
  3958 ;;		_main
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           
  3963                           ;psect for function _PIR_Main
  3964  0245                     _PIR_Main:	
  3965                           
  3966                           ;PIR_B1.c: 15: char error = getMain_All_Error_Status(0);
  3967                           
  3968                           ;incstack = 0
  3969                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3970  0245  3000               	movlw	0
  3971  0246  158A  26B7  118A   	fcall	_getMain_All_Error_Status
  3972  0249  1283               	bcf	3,5	;RP0=0, select bank0
  3973  024A  1303               	bcf	3,6	;RP1=0, select bank0
  3974  024B  00E1               	movwf	??_PIR_Main
  3975  024C  0861               	movf	??_PIR_Main,w
  3976  024D  00E8               	movwf	PIR_Main@error
  3977                           
  3978                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  3979  024E  1683               	bsf	3,5	;RP0=1, select bank1
  3980  024F  1303               	bcf	3,6	;RP1=0, select bank1
  3981  0250  1C20               	btfss	__PIR^(0+128),0
  3982  0251  2C24               	goto	l857
  3983                           
  3984                           ;PIR_B1.c: 17: if (error == 0) {
  3985  0252  1283               	bcf	3,5	;RP0=0, select bank0
  3986  0253  1303               	bcf	3,6	;RP1=0, select bank0
  3987  0254  08E8               	movf	PIR_Main@error,f
  3988  0255  1D03               	skipz
  3989  0256  2A71               	goto	l858
  3990                           
  3991                           ;PIR_B1.c: 18: if (_PIR.Detect == 0) {
  3992  0257  1683               	bsf	3,5	;RP0=1, select bank1
  3993  0258  1303               	bcf	3,6	;RP1=0, select bank1
  3994  0259  1A20               	btfsc	__PIR^(0+128),4
  3995  025A  2AA3               	goto	l4851
  3996                           
  3997                           ;PIR_B1.c: 19: _PIR.Detect = 1;
  3998  025B  1620               	bsf	__PIR^(0+128),4
  3999                           
  4000                           ;PIR_B1.c: 20: _PIR.Available = 1;
  4001  025C  17A0               	bsf	__PIR^(0+128),7
  4002                           
  4003                           ;PIR_B1.c: 21: setLED(1, 0);
  4004  025D  1283               	bcf	3,5	;RP0=0, select bank0
  4005  025E  1303               	bcf	3,6	;RP1=0, select bank0
  4006  025F  01D7               	clrf	setLED@command
  4007  0260  3001               	movlw	1
  4008  0261  118A  2656  118A   	fcall	_setLED
  4009                           
  4010                           ;PIR_B1.c: 22: if (_PIR.OK == 0) {
  4011  0264  1683               	bsf	3,5	;RP0=1, select bank1
  4012  0265  1303               	bcf	3,6	;RP1=0, select bank1
  4013  0266  19A0               	btfsc	__PIR^(0+128),3
  4014  0267  2AA3               	goto	l4851
  4015                           
  4016                           ;PIR_B1.c: 23: setLED(2, 1);
  4017  0268  1283               	bcf	3,5	;RP0=0, select bank0
  4018  0269  1303               	bcf	3,6	;RP1=0, select bank0
  4019  026A  01D7               	clrf	setLED@command
  4020  026B  0AD7               	incf	setLED@command,f
  4021  026C  3002               	movlw	2
  4022  026D  118A  2656  118A   	fcall	_setLED
  4023                           
  4024                           ;PIR_B1.c: 24: }
  4025                           ;PIR_B1.c: 25: }
  4026                           ;PIR_B1.c: 26: } else {
  4027  0270  2AA3               	goto	l4851
  4028  0271                     l858:	
  4029                           
  4030                           ;PIR_B1.c: 27: if (_PIR.Detect == 1) {
  4031  0271  1683               	bsf	3,5	;RP0=1, select bank1
  4032  0272  1303               	bcf	3,6	;RP1=0, select bank1
  4033  0273  1E20               	btfss	__PIR^(0+128),4
  4034  0274  2AA3               	goto	l4851
  4035                           
  4036                           ;PIR_B1.c: 28: setMain_Exception(error);
  4037  0275  1283               	bcf	3,5	;RP0=0, select bank0
  4038  0276  1303               	bcf	3,6	;RP1=0, select bank0
  4039  0277  0868               	movf	PIR_Main@error,w
  4040  0278  158A  272D  118A   	fcall	_setMain_Exception
  4041                           
  4042                           ;PIR_B1.c: 30: _PIR.Detect = 0;
  4043  027B  1683               	bsf	3,5	;RP0=1, select bank1
  4044  027C  1303               	bcf	3,6	;RP1=0, select bank1
  4045  027D  1220               	bcf	__PIR^(0+128),4
  4046                           
  4047                           ;PIR_B1.c: 31: _PIR.Available = 0;
  4048  027E  13A0               	bcf	__PIR^(0+128),7
  4049                           
  4050                           ;PIR_B1.c: 32: _PIR.Status = 0;
  4051  027F  1320               	bcf	__PIR^(0+128),6
  4052                           
  4053                           ;PIR_B1.c: 35: _PIR.Time = 0;
  4054  0280  01A5               	clrf	(__PIR^(0+128)+5)
  4055                           
  4056                           ;PIR_B1.c: 36: _PIR.RangeTime1 = 0;
  4057  0281  01CA               	clrf	(__PIR^(0+128)+42)
  4058                           
  4059                           ;PIR_B1.c: 37: _PIR.RangeValue = 15;
  4060  0282  300F               	movlw	15
  4061  0283  1283               	bcf	3,5	;RP0=0, select bank0
  4062  0284  1303               	bcf	3,6	;RP1=0, select bank0
  4063  0285  00E1               	movwf	??_PIR_Main
  4064  0286  0861               	movf	??_PIR_Main,w
  4065  0287  1683               	bsf	3,5	;RP0=1, select bank1
  4066  0288  1303               	bcf	3,6	;RP1=0, select bank1
  4067  0289  00CC               	movwf	(__PIR^(0+128)+44)
  4068                           
  4069                           ;PIR_B1.c: 38: _PIR.RangeCount = 0;
  4070  028A  01CB               	clrf	(__PIR^(0+128)+43)
  4071                           
  4072                           ;PIR_B1.c: 40: setLED(1, 1);
  4073  028B  1283               	bcf	3,5	;RP0=0, select bank0
  4074  028C  1303               	bcf	3,6	;RP1=0, select bank0
  4075  028D  01D7               	clrf	setLED@command
  4076  028E  0AD7               	incf	setLED@command,f
  4077  028F  3001               	movlw	1
  4078  0290  118A  2656  118A   	fcall	_setLED
  4079                           
  4080                           ;PIR_B1.c: 41: setLED(2, 0);
  4081  0293  1283               	bcf	3,5	;RP0=0, select bank0
  4082  0294  1303               	bcf	3,6	;RP1=0, select bank0
  4083  0295  01D7               	clrf	setLED@command
  4084  0296  3002               	movlw	2
  4085  0297  118A  2656  118A   	fcall	_setLED
  4086                           
  4087                           ;PIR_B1.c: 43: if (_PIR.OK == 1) {
  4088  029A  1683               	bsf	3,5	;RP0=1, select bank1
  4089  029B  1303               	bcf	3,6	;RP1=0, select bank1
  4090  029C  1DA0               	btfss	__PIR^(0+128),3
  4091  029D  2AA0               	goto	l863
  4092                           
  4093                           ;PIR_B1.c: 44: _PIR.Count = 0;
  4094  029E  01C1               	clrf	(__PIR^(0+128)+33)
  4095  029F  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4096  02A0                     l863:	
  4097                           
  4098                           ;PIR_B1.c: 45: }
  4099                           ;PIR_B1.c: 46: _PIR.CloseTimeSeconds = 0;
  4100  02A0  01C6               	clrf	(__PIR^(0+128)+38)
  4101                           
  4102                           ;PIR_B1.c: 47: _PIR.CloseTimeMinutes = 0;
  4103  02A1  01C4               	clrf	(__PIR^(0+128)+36)
  4104  02A2  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4105  02A3                     l4851:	
  4106                           
  4107                           ;PIR_B1.c: 48: }
  4108                           ;PIR_B1.c: 49: }
  4109                           ;PIR_B1.c: 51: if (_PIR.ADtoGO == 0) {
  4110  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  4111  02A4  1303               	bcf	3,6	;RP1=0, select bank1
  4112  02A5  18A0               	btfsc	__PIR^(0+128),1
  4113  02A6  2AB6               	goto	l864
  4114                           
  4115                           ;PIR_B1.c: 52: _PIR.Time++;
  4116  02A7  3001               	movlw	1
  4117  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  4118  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  4119  02AA  00E1               	movwf	??_PIR_Main
  4120  02AB  0861               	movf	??_PIR_Main,w
  4121  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  4122  02AD  1303               	bcf	3,6	;RP1=0, select bank1
  4123  02AE  07A5               	addwf	(__PIR^(0+128)+5),f
  4124                           
  4125                           ;PIR_B1.c: 53: if (_PIR.Time == 10) {
  4126  02AF  0825               	movf	(__PIR^(0+128)+5),w
  4127  02B0  3A0A               	xorlw	10
  4128  02B1  1D03               	skipz
  4129  02B2  2BD8               	goto	l4935
  4130                           
  4131                           ;PIR_B1.c: 54: _PIR.Time = 0;
  4132  02B3  01A5               	clrf	(__PIR^(0+128)+5)
  4133                           
  4134                           ;PIR_B1.c: 55: _PIR.ADtoGO = 1;
  4135  02B4  14A0               	bsf	__PIR^(0+128),1
  4136                           
  4137                           ;PIR_B1.c: 56: }
  4138                           ;PIR_B1.c: 57: } else {
  4139  02B5  2BD8               	goto	l4935
  4140  02B6                     l864:	
  4141                           
  4142                           ;PIR_B1.c: 58: if (_PIR.GO == 1) {
  4143  02B6  1D20               	btfss	__PIR^(0+128),2
  4144  02B7  2BD8               	goto	l4935
  4145                           
  4146                           ;PIR_B1.c: 59: _PIR.GO = 0;
  4147  02B8  1120               	bcf	__PIR^(0+128),2
  4148                           
  4149                           ;PIR_B1.c: 60: if (_PIR.Available == 1) {
  4150  02B9  1BA0               	btfsc	__PIR^(0+128),7
  4151                           
  4152                           ;PIR_B1.c: 61: if (_PIR.OK == 1) {
  4153  02BA  1DA0               	btfss	__PIR^(0+128),3
  4154  02BB  2BD8               	goto	l4935
  4155                           
  4156                           ;PIR_B1.c: 63: _PIR.Time++;
  4157  02BC  3001               	movlw	1
  4158  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  4159  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  4160  02BF  00E1               	movwf	??_PIR_Main
  4161  02C0  0861               	movf	??_PIR_Main,w
  4162  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  4163  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  4164  02C3  07A5               	addwf	(__PIR^(0+128)+5),f
  4165                           
  4166                           ;PIR_B1.c: 64: if (_PIR.Time == 60) {
  4167  02C4  0825               	movf	(__PIR^(0+128)+5),w
  4168  02C5  3A3C               	xorlw	60
  4169  02C6  1D03               	skipz
  4170  02C7  2AFC               	goto	l4901
  4171                           
  4172                           ;PIR_B1.c: 65: _PIR.Time = 0;
  4173  02C8  01A5               	clrf	(__PIR^(0+128)+5)
  4174                           
  4175                           ;PIR_B1.c: 66: if (_PIR.RangeCount >= 90) {
  4176  02C9  305A               	movlw	90
  4177  02CA  024B               	subwf	(__PIR^(0+128)+43),w
  4178  02CB  1C03               	skipc
  4179  02CC  2AD8               	goto	l4883
  4180                           
  4181                           ;PIR_B1.c: 67: _PIR.RangeTime1 = 0;
  4182  02CD  01CA               	clrf	(__PIR^(0+128)+42)
  4183                           
  4184                           ;PIR_B1.c: 69: if (_PIR.RangeValue == 15) {
  4185  02CE  084C               	movf	(__PIR^(0+128)+44),w
  4186  02CF  3A0F               	xorlw	15
  4187  02D0  1903               	btfsc	3,2
  4188  02D1  2AED               	goto	L14
  4189                           
  4190                           ;PIR_B1.c: 71: } else if (_PIR.RangeValue == (15+10)) {
  4191                           
  4192                           ;PIR_B1.c: 70: _PIR.RangeValue = (15+10);
  4193  02D2  084C               	movf	(__PIR^(0+128)+44),w
  4194  02D3  3A19               	xorlw	25
  4195  02D4  1D03               	skipz
  4196  02D5  2AFB               	goto	l4899
  4197                           
  4198                           ;PIR_B1.c: 72: _PIR.RangeValue = (15+20);
  4199  02D6  3023               	movlw	35
  4200  02D7  2AF4               	goto	L10
  4201  02D8                     l4883:	
  4202                           ;PIR_B1.c: 73: }
  4203                           ;PIR_B1.c: 74: } else if (_PIR.RangeCount <= 10) {
  4204                           
  4205  02D8  300B               	movlw	11
  4206  02D9  024B               	subwf	(__PIR^(0+128)+43),w
  4207  02DA  1803               	skipnc
  4208  02DB  2AFB               	goto	l4899
  4209                           
  4210                           ;PIR_B1.c: 75: _PIR.RangeTime1++;
  4211  02DC  3001               	movlw	1
  4212  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  4213  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  4214  02DF  00E1               	movwf	??_PIR_Main
  4215  02E0  0861               	movf	??_PIR_Main,w
  4216  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  4217  02E2  1303               	bcf	3,6	;RP1=0, select bank1
  4218  02E3  07CA               	addwf	(__PIR^(0+128)+42),f
  4219                           
  4220                           ;PIR_B1.c: 76: if (_PIR.RangeTime1 == 2) {
  4221  02E4  084A               	movf	(__PIR^(0+128)+42),w
  4222  02E5  3A02               	xorlw	2
  4223  02E6  1D03               	skipz
  4224  02E7  2AFB               	goto	l4899
  4225                           
  4226                           ;PIR_B1.c: 77: _PIR.RangeTime1 = 0;
  4227  02E8  01CA               	clrf	(__PIR^(0+128)+42)
  4228                           
  4229                           ;PIR_B1.c: 79: if (_PIR.RangeValue == (15+20)) {
  4230  02E9  084C               	movf	(__PIR^(0+128)+44),w
  4231  02EA  3A23               	xorlw	35
  4232  02EB  1D03               	skipz
  4233  02EC  2AEF               	goto	l4895
  4234  02ED                     L14:	
  4235                           
  4236                           ;PIR_B1.c: 80: _PIR.RangeValue = (15+10);
  4237  02ED  3019               	movlw	25
  4238  02EE  2AF4               	goto	L10
  4239  02EF                     l4895:	
  4240                           ;PIR_B1.c: 81: } else if (_PIR.RangeValue == (15+10)) {
  4241                           
  4242  02EF  084C               	movf	(__PIR^(0+128)+44),w
  4243  02F0  3A19               	xorlw	25
  4244  02F1  1D03               	skipz
  4245  02F2  2AFB               	goto	l4899
  4246                           
  4247                           ;PIR_B1.c: 82: _PIR.RangeValue = 15;
  4248  02F3  300F               	movlw	15
  4249  02F4                     L10:	
  4250  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  4251  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  4252  02F6  00E1               	movwf	??_PIR_Main
  4253  02F7  0861               	movf	??_PIR_Main,w
  4254  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  4255  02F9  1303               	bcf	3,6	;RP1=0, select bank1
  4256  02FA  00CC               	movwf	(__PIR^(0+128)+44)
  4257  02FB                     l4899:	
  4258                           
  4259                           ;PIR_B1.c: 83: }
  4260                           ;PIR_B1.c: 84: }
  4261                           ;PIR_B1.c: 85: }
  4262                           ;PIR_B1.c: 86: _PIR.RangeCount = 0;
  4263  02FB  01CB               	clrf	(__PIR^(0+128)+43)
  4264  02FC                     l4901:	
  4265                           
  4266                           ;PIR_B1.c: 87: }
  4267                           ;PIR_B1.c: 90: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.Of
      +                          fset)))
  4268                           ;PIR_B1.c: 91: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + (_PIR.RangeValue + _PIR.Off
      +                          set)))) {
  4269  02FC  084C               	movf	(__PIR^(0+128)+44),w
  4270  02FD  074E               	addwf	(__PIR^(0+128)+46),w
  4271  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  4272  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  4273  0300  00E1               	movwf	??_PIR_Main
  4274  0301  01E2               	clrf	??_PIR_Main+1
  4275  0302  0DE2               	rlf	??_PIR_Main+1,f
  4276  0303  09E1               	comf	??_PIR_Main,f
  4277  0304  09E2               	comf	??_PIR_Main+1,f
  4278  0305  0AE1               	incf	??_PIR_Main,f
  4279  0306  1903               	skipnz
  4280  0307  0AE2               	incf	??_PIR_Main+1,f
  4281  0308  1683               	bsf	3,5	;RP0=1, select bank1
  4282  0309  1303               	bcf	3,6	;RP1=0, select bank1
  4283  030A  0826               	movf	(__PIR^(0+128)+6),w
  4284  030B  1283               	bcf	3,5	;RP0=0, select bank0
  4285  030C  1303               	bcf	3,6	;RP1=0, select bank0
  4286  030D  0761               	addwf	??_PIR_Main,w
  4287  030E  00E3               	movwf	??_PIR_Main+2
  4288  030F  0862               	movf	??_PIR_Main+1,w
  4289  0310  1803               	skipnc
  4290  0311  0A62               	incf	??_PIR_Main+1,w
  4291  0312  00E4               	movwf	??_PIR_Main+3
  4292  0313  0864               	movf	??_PIR_Main+3,w
  4293  0314  3A80               	xorlw	128
  4294  0315  3C80               	sublw	128
  4295  0316  1D03               	skipz
  4296  0317  2B1C               	goto	u5465
  4297  0318  0863               	movf	??_PIR_Main+2,w
  4298  0319  1683               	bsf	3,5	;RP0=1, select bank1
  4299  031A  1303               	bcf	3,6	;RP1=0, select bank1
  4300  031B  0221               	subwf	(__PIR^(0+128)+1),w
  4301  031C                     u5465:	
  4302  031C  1C03               	skipc
  4303  031D  2B4A               	goto	l4911
  4304  031E  1683               	bsf	3,5	;RP0=1, select bank1
  4305  031F  1303               	bcf	3,6	;RP1=0, select bank1
  4306  0320  084C               	movf	(__PIR^(0+128)+44),w
  4307  0321  074E               	addwf	(__PIR^(0+128)+46),w
  4308  0322  1283               	bcf	3,5	;RP0=0, select bank0
  4309  0323  1303               	bcf	3,6	;RP1=0, select bank0
  4310  0324  00E1               	movwf	??_PIR_Main
  4311  0325  01E2               	clrf	??_PIR_Main+1
  4312  0326  0DE2               	rlf	??_PIR_Main+1,f
  4313  0327  1683               	bsf	3,5	;RP0=1, select bank1
  4314  0328  1303               	bcf	3,6	;RP1=0, select bank1
  4315  0329  0826               	movf	(__PIR^(0+128)+6),w
  4316  032A  1283               	bcf	3,5	;RP0=0, select bank0
  4317  032B  1303               	bcf	3,6	;RP1=0, select bank0
  4318  032C  0761               	addwf	??_PIR_Main,w
  4319  032D  00E3               	movwf	??_PIR_Main+2
  4320  032E  3000               	movlw	0
  4321  032F  1803               	skipnc
  4322  0330  3001               	movlw	1
  4323  0331  0762               	addwf	??_PIR_Main+1,w
  4324  0332  00E4               	movwf	??_PIR_Main+3
  4325  0333  0864               	movf	??_PIR_Main+3,w
  4326  0334  3A80               	xorlw	128
  4327  0335  00E5               	movwf	??_PIR_Main+4
  4328  0336  3080               	movlw	128
  4329  0337  0265               	subwf	??_PIR_Main+4,w
  4330  0338  1D03               	skipz
  4331  0339  2B40               	goto	u5475
  4332  033A  1683               	bsf	3,5	;RP0=1, select bank1
  4333  033B  1303               	bcf	3,6	;RP1=0, select bank1
  4334  033C  0821               	movf	(__PIR^(0+128)+1),w
  4335  033D  1283               	bcf	3,5	;RP0=0, select bank0
  4336  033E  1303               	bcf	3,6	;RP1=0, select bank0
  4337  033F  0263               	subwf	??_PIR_Main+2,w
  4338  0340                     u5475:	
  4339  0340  1C03               	skipc
  4340  0341  2B4A               	goto	l4911
  4341                           
  4342                           ;PIR_B1.c: 92: _PIR.Count = 0;
  4343  0342  1683               	bsf	3,5	;RP0=1, select bank1
  4344  0343  1303               	bcf	3,6	;RP1=0, select bank1
  4345  0344  01C1               	clrf	(__PIR^(0+128)+33)
  4346  0345  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4347                           
  4348                           ;PIR_B1.c: 93: setLED(1, 0);
  4349  0346  1283               	bcf	3,5	;RP0=0, select bank0
  4350  0347  1303               	bcf	3,6	;RP1=0, select bank0
  4351  0348  01D7               	clrf	setLED@command
  4352  0349  2BC1               	goto	L15
  4353  034A                     l4911:	
  4354                           ;PIR_B1.c: 95: } else {
  4355                           
  4356                           ;PIR_B1.c: 94: setLED(2, 0);
  4357                           
  4358                           
  4359                           ;PIR_B1.c: 96: _PIR.RangeCount++;
  4360  034A  3001               	movlw	1
  4361  034B  1283               	bcf	3,5	;RP0=0, select bank0
  4362  034C  1303               	bcf	3,6	;RP1=0, select bank0
  4363  034D  00E1               	movwf	??_PIR_Main
  4364  034E  0861               	movf	??_PIR_Main,w
  4365  034F  1683               	bsf	3,5	;RP0=1, select bank1
  4366  0350  1303               	bcf	3,6	;RP1=0, select bank1
  4367  0351  07CB               	addwf	(__PIR^(0+128)+43),f
  4368                           
  4369                           ;PIR_B1.c: 97: _PIR.Count++;
  4370  0352  3001               	movlw	1
  4371  0353  07C1               	addwf	(__PIR^(0+128)+33),f
  4372  0354  1803               	skipnc
  4373  0355  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4374  0356  3000               	movlw	0
  4375  0357  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4376                           
  4377                           ;PIR_B1.c: 99: _PIR.TriggerValue = _PIR.Status == 1 ? 3 : 2;
  4378  0358  1B20               	btfsc	__PIR^(0+128),6
  4379  0359  2B5E               	goto	l4919
  4380  035A  3002               	movlw	2
  4381  035B  1283               	bcf	3,5	;RP0=0, select bank0
  4382  035C  1303               	bcf	3,6	;RP1=0, select bank0
  4383  035D  2B60               	goto	L11
  4384  035E                     l4919:	
  4385  035E  3003               	movlw	3
  4386  035F  1283               	bcf	3,5	;RP0=0, select bank0
  4387  0360                     L11:	
  4388  0360  00E6               	movwf	_PIR_Main$3074
  4389  0361  3000               	movlw	0
  4390  0362  00E7               	movwf	_PIR_Main$3074+1
  4391  0363  0866               	movf	_PIR_Main$3074,w
  4392  0364  00E1               	movwf	??_PIR_Main
  4393  0365  0861               	movf	??_PIR_Main,w
  4394  0366  1683               	bsf	3,5	;RP0=1, select bank1
  4395  0367  1303               	bcf	3,6	;RP1=0, select bank1
  4396  0368  00C3               	movwf	(__PIR^(0+128)+35)
  4397                           
  4398                           ;PIR_B1.c: 101: if (_PIR.Count == _PIR.TriggerValue) {
  4399  0369  0843               	movf	(__PIR^(0+128)+35),w
  4400  036A  1283               	bcf	3,5	;RP0=0, select bank0
  4401  036B  1303               	bcf	3,6	;RP1=0, select bank0
  4402  036C  00E1               	movwf	??_PIR_Main
  4403  036D  01E2               	clrf	??_PIR_Main+1
  4404  036E  1683               	bsf	3,5	;RP0=1, select bank1
  4405  036F  1303               	bcf	3,6	;RP1=0, select bank1
  4406  0370  0842               	movf	((__PIR+1)^(0+128)+33),w
  4407  0371  1283               	bcf	3,5	;RP0=0, select bank0
  4408  0372  1303               	bcf	3,6	;RP1=0, select bank0
  4409  0373  0662               	xorwf	??_PIR_Main+1,w
  4410  0374  1D03               	skipz
  4411  0375  2B7C               	goto	u5495
  4412  0376  1683               	bsf	3,5	;RP0=1, select bank1
  4413  0377  1303               	bcf	3,6	;RP1=0, select bank1
  4414  0378  0841               	movf	(__PIR^(0+128)+33),w
  4415  0379  1283               	bcf	3,5	;RP0=0, select bank0
  4416  037A  1303               	bcf	3,6	;RP1=0, select bank0
  4417  037B  0661               	xorwf	??_PIR_Main,w
  4418  037C                     u5495:	
  4419  037C  1D03               	skipz
  4420  037D  2BD8               	goto	l4935
  4421                           
  4422                           ;PIR_B1.c: 102: _PIR.Count = 0;
  4423  037E  1683               	bsf	3,5	;RP0=1, select bank1
  4424  037F  1303               	bcf	3,6	;RP1=0, select bank1
  4425  0380  01C1               	clrf	(__PIR^(0+128)+33)
  4426  0381  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4427                           
  4428                           ;PIR_B1.c: 103: _PIR.CloseTimeSeconds = 0;
  4429  0382  01C6               	clrf	(__PIR^(0+128)+38)
  4430                           
  4431                           ;PIR_B1.c: 104: _PIR.CloseTimeMinutes = 0;
  4432  0383  01C4               	clrf	(__PIR^(0+128)+36)
  4433  0384  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4434                           
  4435                           ;PIR_B1.c: 105: _PIR.Status = 1;
  4436  0385  1720               	bsf	__PIR^(0+128),6
  4437                           
  4438                           ;PIR_B1.c: 108: if (getLights_Status(1) == 0) {
  4439  0386  3001               	movlw	1
  4440  0387  158A  2416  118A   	fcall	_getLights_Status
  4441  038A  3800               	iorlw	0
  4442  038B  1D03               	skipz
  4443  038C  2B95               	goto	l4929
  4444                           
  4445                           ;PIR_B1.c: 109: setLights_Trigger(1, 1);
  4446  038D  1283               	bcf	3,5	;RP0=0, select bank0
  4447  038E  1303               	bcf	3,6	;RP1=0, select bank0
  4448  038F  01D7               	clrf	setLights_Trigger@command
  4449  0390  0AD7               	incf	setLights_Trigger@command,f
  4450  0391  3001               	movlw	1
  4451  0392  158A  2514  118A   	fcall	_setLights_Trigger
  4452  0395                     l4929:	
  4453                           
  4454                           ;PIR_B1.c: 110: }
  4455                           ;PIR_B1.c: 113: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))) {
  4456  0395  1683               	bsf	3,5	;RP0=1, select bank1
  4457  0396  1303               	bcf	3,6	;RP1=0, select bank1
  4458  0397  084C               	movf	(__PIR^(0+128)+44),w
  4459  0398  074E               	addwf	(__PIR^(0+128)+46),w
  4460  0399  1283               	bcf	3,5	;RP0=0, select bank0
  4461  039A  1303               	bcf	3,6	;RP1=0, select bank0
  4462  039B  00E1               	movwf	??_PIR_Main
  4463  039C  01E2               	clrf	??_PIR_Main+1
  4464  039D  0DE2               	rlf	??_PIR_Main+1,f
  4465  039E  09E1               	comf	??_PIR_Main,f
  4466  039F  09E2               	comf	??_PIR_Main+1,f
  4467  03A0  0AE1               	incf	??_PIR_Main,f
  4468  03A1  1903               	skipnz
  4469  03A2  0AE2               	incf	??_PIR_Main+1,f
  4470  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  4471  03A4  1303               	bcf	3,6	;RP1=0, select bank1
  4472  03A5  0826               	movf	(__PIR^(0+128)+6),w
  4473  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  4474  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  4475  03A8  0761               	addwf	??_PIR_Main,w
  4476  03A9  00E3               	movwf	??_PIR_Main+2
  4477  03AA  0862               	movf	??_PIR_Main+1,w
  4478  03AB  1803               	skipnc
  4479  03AC  0A62               	incf	??_PIR_Main+1,w
  4480  03AD  00E4               	movwf	??_PIR_Main+3
  4481  03AE  0864               	movf	??_PIR_Main+3,w
  4482  03AF  3A80               	xorlw	128
  4483  03B0  00E5               	movwf	??_PIR_Main+4
  4484  03B1  3080               	movlw	128
  4485  03B2  0265               	subwf	??_PIR_Main+4,w
  4486  03B3  1D03               	skipz
  4487  03B4  2BBB               	goto	u5515
  4488  03B5  1683               	bsf	3,5	;RP0=1, select bank1
  4489  03B6  1303               	bcf	3,6	;RP1=0, select bank1
  4490  03B7  0821               	movf	(__PIR^(0+128)+1),w
  4491  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  4492  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  4493  03BA  0263               	subwf	??_PIR_Main+2,w
  4494  03BB                     u5515:	
  4495  03BB  1C03               	skipc
  4496  03BC  2BC9               	goto	l4933
  4497                           
  4498                           ;PIR_B1.c: 114: setLED(1, 1);
  4499  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  4500  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  4501  03BF  01D7               	clrf	setLED@command
  4502  03C0  0AD7               	incf	setLED@command,f
  4503  03C1                     L15:	
  4504  03C1  3001               	movlw	1
  4505  03C2  118A  2656  118A   	fcall	_setLED
  4506                           
  4507                           ;PIR_B1.c: 115: setLED(2, 0);
  4508  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  4509  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  4510  03C7  01D7               	clrf	setLED@command
  4511  03C8  2BD4               	goto	L12
  4512  03C9                     l4933:	
  4513                           ;PIR_B1.c: 116: } else {
  4514                           
  4515                           
  4516                           ;PIR_B1.c: 117: setLED(1, 0);
  4517  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  4518  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  4519  03CB  01D7               	clrf	setLED@command
  4520  03CC  3001               	movlw	1
  4521  03CD  118A  2656  118A   	fcall	_setLED
  4522                           
  4523                           ;PIR_B1.c: 118: setLED(2, 1);
  4524  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  4525  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  4526  03D2  01D7               	clrf	setLED@command
  4527  03D3  0AD7               	incf	setLED@command,f
  4528  03D4                     L12:	
  4529  03D4  3002               	movlw	2
  4530  03D5  118A  2656  118A   	fcall	_setLED
  4531  03D8                     l4935:	
  4532                           
  4533                           ;PIR_B1.c: 119: }
  4534                           ;PIR_B1.c: 120: }
  4535                           ;PIR_B1.c: 121: }
  4536                           ;PIR_B1.c: 122: }
  4537                           ;PIR_B1.c: 123: }
  4538                           ;PIR_B1.c: 124: }
  4539                           ;PIR_B1.c: 125: }
  4540                           ;PIR_B1.c: 126: if (_PIR.OK == 0) {
  4541  03D8  1683               	bsf	3,5	;RP0=1, select bank1
  4542  03D9  1303               	bcf	3,6	;RP1=0, select bank1
  4543  03DA  19A0               	btfsc	__PIR^(0+128),3
  4544  03DB  2BF4               	goto	l4945
  4545                           
  4546                           ;PIR_B1.c: 127: _PIR.Count++;
  4547  03DC  3001               	movlw	1
  4548  03DD  07C1               	addwf	(__PIR^(0+128)+33),f
  4549  03DE  1803               	skipnc
  4550  03DF  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4551  03E0  3000               	movlw	0
  4552  03E1  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4553                           
  4554                           ;PIR_B1.c: 128: if (_PIR.Count == 3000) {
  4555  03E2  300B               	movlw	11
  4556  03E3  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  4557  03E4  1D03               	skipz
  4558  03E5  2BE8               	goto	u5535
  4559  03E6  30B8               	movlw	184
  4560  03E7  0641               	xorwf	(__PIR^(0+128)+33),w
  4561  03E8                     u5535:	
  4562  03E8  1D03               	skipz
  4563  03E9  2BF4               	goto	l4945
  4564                           
  4565                           ;PIR_B1.c: 129: _PIR.Count = 0;
  4566  03EA  01C1               	clrf	(__PIR^(0+128)+33)
  4567  03EB  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4568                           
  4569                           ;PIR_B1.c: 130: _PIR.OK = 1;
  4570  03EC  15A0               	bsf	__PIR^(0+128),3
  4571                           
  4572                           ;PIR_B1.c: 131: setLED(2, 0);
  4573  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  4574  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  4575  03EF  01D7               	clrf	setLED@command
  4576  03F0  3002               	movlw	2
  4577  03F1  118A  2656  118A   	fcall	_setLED
  4578  03F4                     l4945:	
  4579                           
  4580                           ;PIR_B1.c: 132: }
  4581                           ;PIR_B1.c: 133: }
  4582                           ;PIR_B1.c: 134: if (_PIR.Status == 1) {
  4583  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  4584  03F5  1303               	bcf	3,6	;RP1=0, select bank1
  4585  03F6  1F20               	btfss	__PIR^(0+128),6
  4586  03F7  0008               	return
  4587                           
  4588                           ;PIR_B1.c: 135: _PIR.CloseTimeSeconds++;
  4589  03F8  3001               	movlw	1
  4590  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  4591  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  4592  03FB  00E1               	movwf	??_PIR_Main
  4593  03FC  0861               	movf	??_PIR_Main,w
  4594  03FD  1683               	bsf	3,5	;RP0=1, select bank1
  4595  03FE  1303               	bcf	3,6	;RP1=0, select bank1
  4596  03FF  07C6               	addwf	(__PIR^(0+128)+38),f
  4597                           
  4598                           ;PIR_B1.c: 136: if (_PIR.CloseTimeSeconds == 100) {
  4599  0400  0846               	movf	(__PIR^(0+128)+38),w
  4600  0401  3A64               	xorlw	100
  4601  0402  1D03               	skipz
  4602  0403  0008               	return
  4603                           
  4604                           ;PIR_B1.c: 137: _PIR.CloseTimeSeconds = 0;
  4605  0404  01C6               	clrf	(__PIR^(0+128)+38)
  4606                           
  4607                           ;PIR_B1.c: 138: _PIR.CloseTimeMinutes++;
  4608  0405  3001               	movlw	1
  4609  0406  07C4               	addwf	(__PIR^(0+128)+36),f
  4610  0407  1803               	skipnc
  4611  0408  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  4612  0409  3000               	movlw	0
  4613  040A  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  4614                           
  4615                           ;PIR_B1.c: 139: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  4616  040B  0848               	movf	((__PIR+1)^(0+128)+39),w
  4617  040C  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  4618  040D  1D03               	skipz
  4619  040E  2C11               	goto	u5565
  4620  040F  0847               	movf	(__PIR^(0+128)+39),w
  4621  0410  0644               	xorwf	(__PIR^(0+128)+36),w
  4622  0411                     u5565:	
  4623  0411  1D03               	skipz
  4624  0412  0008               	return
  4625                           
  4626                           ;PIR_B1.c: 140: _PIR.CloseTimeMinutes = 0;
  4627  0413  01C4               	clrf	(__PIR^(0+128)+36)
  4628  0414  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4629                           
  4630                           ;PIR_B1.c: 141: _PIR.Status = 0;
  4631  0415  1320               	bcf	__PIR^(0+128),6
  4632                           
  4633                           ;PIR_B1.c: 144: if (getLights_Status(1) == 1) {
  4634  0416  3001               	movlw	1
  4635  0417  158A  2416  118A   	fcall	_getLights_Status
  4636  041A  3A01               	xorlw	1
  4637  041B  1D03               	skipz
  4638  041C  0008               	return
  4639                           
  4640                           ;PIR_B1.c: 145: setLights_Trigger(1, 0);
  4641  041D  1283               	bcf	3,5	;RP0=0, select bank0
  4642  041E  1303               	bcf	3,6	;RP1=0, select bank0
  4643  041F  01D7               	clrf	setLights_Trigger@command
  4644  0420  3001               	movlw	1
  4645  0421  158A  2514         	fcall	_setLights_Trigger
  4646                           
  4647                           ;PIR_B1.c: 146: }
  4648                           ;PIR_B1.c: 149: }
  4649                           ;PIR_B1.c: 150: }
  4650                           ;PIR_B1.c: 151: }
  4651                           ;PIR_B1.c: 152: } else {
  4652  0423  0008               	return
  4653  0424                     l857:	
  4654                           
  4655                           ;PIR_B1.c: 153: if (myMain.PowerON == 1) {
  4656  0424  1283               	bcf	3,5	;RP0=0, select bank0
  4657  0425  1303               	bcf	3,6	;RP1=0, select bank0
  4658  0426  1C20               	btfss	_myMain,0
  4659  0427  0008               	return
  4660                           
  4661                           ;PIR_B1.c: 154: _PIR.Enable = 1;
  4662  0428  1683               	bsf	3,5	;RP0=1, select bank1
  4663  0429  1303               	bcf	3,6	;RP1=0, select bank1
  4664  042A  1420               	bsf	__PIR^(0+128),0
  4665                           
  4666                           ;PIR_B1.c: 157: if (getLights_Status(1) == 0) {
  4667  042B  3001               	movlw	1
  4668  042C  158A  2416  118A   	fcall	_getLights_Status
  4669  042F  3800               	iorlw	0
  4670  0430  1D03               	skipz
  4671  0431  0008               	return
  4672                           
  4673                           ;PIR_B1.c: 158: setLights_Trigger(1, 1);
  4674  0432  1283               	bcf	3,5	;RP0=0, select bank0
  4675  0433  1303               	bcf	3,6	;RP1=0, select bank0
  4676  0434  01D7               	clrf	setLights_Trigger@command
  4677  0435  0AD7               	incf	setLights_Trigger@command,f
  4678  0436  3001               	movlw	1
  4679  0437  158A  2514         	fcall	_setLights_Trigger
  4680  0439  0008               	return
  4681  043A                     __end_of_PIR_Main:	
  4682                           
  4683                           	psect	text18
  4684  0F2D                     __ptext18:	
  4685 ;; *************** function _setMain_Exception *****************
  4686 ;; Defined at:
  4687 ;;		line 282 in file "../src/Main_B1.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;  command         1    wreg     unsigned char 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;  command         1   11[BANK0 ] unsigned char 
  4692 ;;  status          1    8[BANK0 ] unsigned char 
  4693 ;;  buz             1    7[BANK0 ] unsigned char 
  4694 ;; Return value:  Size  Location     Type
  4695 ;;		None               void
  4696 ;; Registers used:
  4697 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4703 ;;      Params:         0       0       0       0
  4704 ;;      Locals:         0       5       0       0
  4705 ;;      Temps:          0       2       0       0
  4706 ;;      Totals:         0       7       0       0
  4707 ;;Total ram usage:        7 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    5
  4710 ;; This function calls:
  4711 ;;		_getAll_Lights_Line
  4712 ;;		_setLED
  4713 ;;		_setLights_Trigger
  4714 ;; This function is called by:
  4715 ;;		_PIR_Main
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           
  4720                           ;psect for function _setMain_Exception
  4721  0F2D                     _setMain_Exception:	
  4722                           
  4723                           ;incstack = 0
  4724                           ; Regs used in _setMain_Exception: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4725                           ;setMain_Exception@command stored from wreg
  4726  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  4727  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  4728  0F2F  00E0               	movwf	setMain_Exception@command
  4729                           
  4730                           ;Main_B1.c: 283: char status = 0, buz = 0;
  4731  0F30  01DD               	clrf	setMain_Exception@status
  4732  0F31  01DC               	clrf	setMain_Exception@buz
  4733                           
  4734                           ;Main_B1.c: 285: status = command == 3 ? getAll_Lights_Line() : 255;
  4735  0F32  0860               	movf	setMain_Exception@command,w
  4736  0F33  3A03               	xorlw	3
  4737  0F34  1903               	skipnz
  4738  0F35  2F3A               	goto	l4367
  4739  0F36  30FF               	movlw	255
  4740  0F37  00DE               	movwf	_setMain_Exception$2319
  4741  0F38  3000               	movlw	0
  4742  0F39  2F44               	goto	L16
  4743  0F3A                     l4367:	
  4744  0F3A  158A  2438  158A   	fcall	_getAll_Lights_Line
  4745  0F3D  1283               	bcf	3,5	;RP0=0, select bank0
  4746  0F3E  1303               	bcf	3,6	;RP1=0, select bank0
  4747  0F3F  00DA               	movwf	??_setMain_Exception
  4748  0F40  01DB               	clrf	??_setMain_Exception+1
  4749  0F41  085A               	movf	??_setMain_Exception,w
  4750  0F42  00DE               	movwf	_setMain_Exception$2319
  4751  0F43  085B               	movf	??_setMain_Exception+1,w
  4752  0F44                     L16:	
  4753  0F44  00DF               	movwf	_setMain_Exception$2319+1
  4754  0F45  085E               	movf	_setMain_Exception$2319,w
  4755  0F46  00DA               	movwf	??_setMain_Exception
  4756  0F47  085A               	movf	??_setMain_Exception,w
  4757  0F48  00DD               	movwf	setMain_Exception@status
  4758                           
  4759                           ;Main_B1.c: 287: if (command == 0) {
  4760  0F49  08E0               	movf	setMain_Exception@command,f
  4761  0F4A  1D03               	skipz
  4762  0F4B  2F4E               	goto	l4375
  4763                           
  4764                           ;Main_B1.c: 288: setLED(command, 110);
  4765  0F4C  306E               	movlw	110
  4766  0F4D  2F59               	goto	L17
  4767  0F4E                     l4375:	
  4768                           ;Main_B1.c: 289: } else if (command == 5) {
  4769                           
  4770  0F4E  1283               	bcf	3,5	;RP0=0, select bank0
  4771  0F4F  1303               	bcf	3,6	;RP1=0, select bank0
  4772  0F50  0860               	movf	setMain_Exception@command,w
  4773  0F51  3A05               	xorlw	5
  4774  0F52  1D03               	skipz
  4775  0F53  2F56               	goto	l4379
  4776                           
  4777                           ;Main_B1.c: 290: __nop();
  4778  0F54  0000               	nop
  4779                           
  4780                           ;Main_B1.c: 291: } else {
  4781  0F55  2F60               	goto	l4381
  4782  0F56                     l4379:	
  4783                           
  4784                           ;Main_B1.c: 292: setLED(command, 111);
  4785  0F56  306F               	movlw	111
  4786  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  4787  0F58  1303               	bcf	3,6	;RP1=0, select bank0
  4788  0F59                     L17:	
  4789  0F59  00DA               	movwf	??_setMain_Exception
  4790  0F5A  085A               	movf	??_setMain_Exception,w
  4791  0F5B  00D7               	movwf	setLED@command
  4792  0F5C  0860               	movf	setMain_Exception@command,w
  4793  0F5D  118A  2656  158A   	fcall	_setLED
  4794  0F60                     l4381:	
  4795                           
  4796                           ;Main_B1.c: 293: }
  4797                           ;Main_B1.c: 295: if (command != 0) {
  4798  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  4799  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  4800  0F62  0860               	movf	setMain_Exception@command,w
  4801  0F63  1903               	btfsc	3,2
  4802  0F64  0008               	return
  4803                           
  4804                           ;Main_B1.c: 296: setLights_Trigger(1, 0);
  4805  0F65  01D7               	clrf	setLights_Trigger@command
  4806  0F66  3001               	movlw	1
  4807  0F67  158A  2514         	fcall	_setLights_Trigger
  4808  0F69  1283               	bcf	3,5	;RP0=0, select bank0
  4809  0F6A  1303               	bcf	3,6	;RP1=0, select bank0
  4810  0F6B  0008               	return
  4811  0F6C                     __end_of_setMain_Exception:	
  4812                           
  4813                           	psect	text19
  4814  0D14                     __ptext19:	
  4815 ;; *************** function _setLights_Trigger *****************
  4816 ;; Defined at:
  4817 ;;		line 214 in file "../src/TriacRelay_B1.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;  lights          1    wreg     unsigned char 
  4820 ;;  command         1    2[BANK0 ] unsigned char 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  lights          1    4[BANK0 ] unsigned char 
  4823 ;; Return value:  Size  Location     Type
  4824 ;;		None               void
  4825 ;; Registers used:
  4826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4832 ;;      Params:         0       1       0       0
  4833 ;;      Locals:         0       1       0       0
  4834 ;;      Temps:          0       1       0       0
  4835 ;;      Totals:         0       3       0       0
  4836 ;;Total ram usage:        3 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    4
  4839 ;; This function calls:
  4840 ;;		_LightsPointSelect
  4841 ;; This function is called by:
  4842 ;;		_setMain_Exception
  4843 ;;		_PIR_Main
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           
  4848                           ;psect for function _setLights_Trigger
  4849  0D14                     _setLights_Trigger:	
  4850                           
  4851                           ;incstack = 0
  4852                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4853                           ;setLights_Trigger@lights stored from wreg
  4854  0D14  1283               	bcf	3,5	;RP0=0, select bank0
  4855  0D15  1303               	bcf	3,6	;RP1=0, select bank0
  4856  0D16  00D9               	movwf	setLights_Trigger@lights
  4857                           
  4858                           ;TriacRelay_B1.c: 215: LightsPointSelect(lights);
  4859  0D17  0859               	movf	setLights_Trigger@lights,w
  4860  0D18  158A  23D0         	fcall	_LightsPointSelect
  4861                           
  4862                           ;TriacRelay_B1.c: 216: Lights->Trigger = 1;
  4863  0D1A  1283               	bcf	3,5	;RP0=0, select bank0
  4864  0D1B  1303               	bcf	3,6	;RP1=0, select bank0
  4865  0D1C  0834               	movf	_Lights,w
  4866  0D1D  0084               	movwf	4
  4867  0D1E  1383               	bcf	3,7	;select IRP bank0
  4868  0D1F  1580               	bsf	0,3
  4869                           
  4870                           ;TriacRelay_B1.c: 217: Lights->Switch = command == 1 ? 1 : 0;
  4871  0D20  0857               	movf	setLights_Trigger@command,w
  4872  0D21  3A01               	xorlw	1
  4873  0D22  3000               	movlw	0
  4874  0D23  1903               	skipnz
  4875  0D24  3001               	movlw	1
  4876  0D25  00D8               	movwf	??_setLights_Trigger
  4877  0D26  0834               	movf	_Lights,w
  4878  0D27  0084               	movwf	4
  4879  0D28  0ED8               	swapf	??_setLights_Trigger,f
  4880  0D29  0800               	movf	0,w
  4881  0D2A  0658               	xorwf	??_setLights_Trigger,w
  4882  0D2B  39EF               	andlw	-17
  4883  0D2C  0658               	xorwf	??_setLights_Trigger,w
  4884  0D2D  0080               	movwf	0
  4885  0D2E  0008               	return
  4886  0D2F                     __end_of_setLights_Trigger:	
  4887                           
  4888                           	psect	text20
  4889  0C38                     __ptext20:	
  4890 ;; *************** function _getAll_Lights_Line *****************
  4891 ;; Defined at:
  4892 ;;		line 236 in file "../src/TriacRelay_B1.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;		None
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;  line            1    2[BANK0 ] unsigned char 
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  1    wreg      unsigned char 
  4899 ;; Registers used:
  4900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4906 ;;      Params:         0       0       0       0
  4907 ;;      Locals:         0       1       0       0
  4908 ;;      Temps:          0       0       0       0
  4909 ;;      Totals:         0       1       0       0
  4910 ;;Total ram usage:        1 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; Hardware stack levels required when called:    4
  4913 ;; This function calls:
  4914 ;;		_LightsPointSelect
  4915 ;; This function is called by:
  4916 ;;		_setMain_Exception
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           
  4921                           ;psect for function _getAll_Lights_Line
  4922  0C38                     _getAll_Lights_Line:	
  4923                           
  4924                           ;TriacRelay_B1.c: 237: char line = 0;
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4928  0C38  1283               	bcf	3,5	;RP0=0, select bank0
  4929  0C39  1303               	bcf	3,6	;RP1=0, select bank0
  4930  0C3A  01D7               	clrf	getAll_Lights_Line@line
  4931                           
  4932                           ;TriacRelay_B1.c: 239: LightsPointSelect(1);
  4933  0C3B  3001               	movlw	1
  4934  0C3C  158A  23D0         	fcall	_LightsPointSelect
  4935                           
  4936                           ;TriacRelay_B1.c: 240: line = Lights->Line == 1 ? 1 : 0;
  4937  0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  4938  0C3F  1303               	bcf	3,6	;RP1=0, select bank0
  4939  0C40  0A34               	incf	_Lights,w
  4940  0C41  0084               	movwf	4
  4941  0C42  3000               	movlw	0
  4942  0C43  1383               	bcf	3,7	;select IRP bank0
  4943  0C44  1800               	btfsc	0,0
  4944  0C45  3001               	movlw	1
  4945  0C46  00D7               	movwf	getAll_Lights_Line@line
  4946                           
  4947                           ;TriacRelay_B1.c: 250: return line;
  4948  0C47  0857               	movf	getAll_Lights_Line@line,w
  4949  0C48  0008               	return
  4950  0C49                     __end_of_getAll_Lights_Line:	
  4951                           
  4952                           	psect	text21
  4953  0C91                     __ptext21:	
  4954 ;; *************** function _PIR_Initialization *****************
  4955 ;; Defined at:
  4956 ;;		line 7 in file "../src/PIR_B1.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;		None
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;		None
  4961 ;; Return value:  Size  Location     Type
  4962 ;;		None               void
  4963 ;; Registers used:
  4964 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4970 ;;      Params:         0       0       0       0
  4971 ;;      Locals:         0       0       0       0
  4972 ;;      Temps:          0       1       0       0
  4973 ;;      Totals:         0       1       0       0
  4974 ;;Total ram usage:        1 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    5
  4977 ;; This function calls:
  4978 ;;		_setLED
  4979 ;; This function is called by:
  4980 ;;		_main
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           
  4985                           ;psect for function _PIR_Initialization
  4986  0C91                     _PIR_Initialization:	
  4987                           
  4988                           ;PIR_B1.c: 8: setLED(1, 1);
  4989                           
  4990                           ;incstack = 0
  4991                           ; Regs used in _PIR_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4992  0C91  1283               	bcf	3,5	;RP0=0, select bank0
  4993  0C92  1303               	bcf	3,6	;RP1=0, select bank0
  4994  0C93  01D7               	clrf	setLED@command
  4995  0C94  0AD7               	incf	setLED@command,f
  4996  0C95  3001               	movlw	1
  4997  0C96  118A  2656         	fcall	_setLED
  4998                           
  4999                           ;PIR_B1.c: 9: _PIR.RangeValue = 15;
  5000  0C98  300F               	movlw	15
  5001  0C99  1283               	bcf	3,5	;RP0=0, select bank0
  5002  0C9A  1303               	bcf	3,6	;RP1=0, select bank0
  5003  0C9B  00D9               	movwf	??_PIR_Initialization
  5004  0C9C  0859               	movf	??_PIR_Initialization,w
  5005  0C9D  1683               	bsf	3,5	;RP0=1, select bank1
  5006  0C9E  1303               	bcf	3,6	;RP1=0, select bank1
  5007  0C9F  00CC               	movwf	(__PIR^(0+128)+44)
  5008                           
  5009                           ;PIR_B1.c: 10: _PIR.CloseTimeValue = 5;
  5010  0CA0  3005               	movlw	5
  5011  0CA1  00C7               	movwf	(__PIR^(0+128)+39)
  5012  0CA2  3000               	movlw	0
  5013  0CA3  00C8               	movwf	(__PIR^(0+128)+40)
  5014  0CA4  0008               	return
  5015  0CA5                     __end_of_PIR_Initialization:	
  5016                           
  5017                           	psect	text22
  5018  0C6C                     __ptext22:	
  5019 ;; *************** function _Mcu_Initialization *****************
  5020 ;; Defined at:
  5021 ;;		line 30 in file "../src/MCU_B1.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;		None
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;		None
  5026 ;; Return value:  Size  Location     Type
  5027 ;;		None               void
  5028 ;; Registers used:
  5029 ;;		wreg, status,2, status,0, pclath, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5035 ;;      Params:         0       0       0       0
  5036 ;;      Locals:         0       0       0       0
  5037 ;;      Temps:          0       0       0       0
  5038 ;;      Totals:         0       0       0       0
  5039 ;;Total ram usage:        0 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    4
  5042 ;; This function calls:
  5043 ;;		_ADC_Set
  5044 ;;		_Fosc_Set
  5045 ;;		_IO_Set
  5046 ;;		_TMR1_Set
  5047 ;;		_UART_Set
  5048 ;;		_WDT_Set
  5049 ;; This function is called by:
  5050 ;;		_main
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           
  5055                           ;psect for function _Mcu_Initialization
  5056  0C6C                     _Mcu_Initialization:	
  5057                           
  5058                           ;MCU_B1.c: 32: Fosc_Set();
  5059                           
  5060                           ;incstack = 0
  5061                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5062  0C6C  158A  236D  158A   	fcall	_Fosc_Set
  5063                           
  5064                           ;MCU_B1.c: 34: IO_Set();
  5065  0C6F  158A  24CE  158A   	fcall	_IO_Set
  5066                           
  5067                           ;MCU_B1.c: 36: ;;
  5068                           ;MCU_B1.c: 38: TMR1_Set();
  5069  0C72  158A  23EA  158A   	fcall	_TMR1_Set
  5070                           
  5071                           ;MCU_B1.c: 40: ADC_Set();
  5072  0C75  158A  238B  158A   	fcall	_ADC_Set
  5073                           
  5074                           ;MCU_B1.c: 42: ;;
  5075                           ;MCU_B1.c: 44: ;;
  5076                           ;MCU_B1.c: 46: ;;
  5077                           ;MCU_B1.c: 48: ;;
  5078                           ;MCU_B1.c: 50: UART_Set();
  5079  0C78  158A  24FB  158A   	fcall	_UART_Set
  5080                           
  5081                           ;MCU_B1.c: 52: WDT_Set();
  5082  0C7B  158A  23F8         	fcall	_WDT_Set
  5083  0C7D  0008               	return
  5084  0C7E                     __end_of_Mcu_Initialization:	
  5085                           
  5086                           	psect	text23
  5087  0BF8                     __ptext23:	
  5088 ;; *************** function _WDT_Set *****************
  5089 ;; Defined at:
  5090 ;;		line 1044 in file "../src/MCU_B1.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;		None
  5095 ;; Return value:  Size  Location     Type
  5096 ;;		None               void
  5097 ;; Registers used:
  5098 ;;		wreg
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5104 ;;      Params:         0       0       0       0
  5105 ;;      Locals:         0       0       0       0
  5106 ;;      Temps:          0       1       0       0
  5107 ;;      Totals:         0       1       0       0
  5108 ;;Total ram usage:        1 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    3
  5111 ;; This function calls:
  5112 ;;		Nothing
  5113 ;; This function is called by:
  5114 ;;		_Mcu_Initialization
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           
  5119                           ;psect for function _WDT_Set
  5120  0BF8                     _WDT_Set:	
  5121                           
  5122                           ;MCU_B1.c: 1046: PSA = 1;
  5123                           
  5124                           ;incstack = 0
  5125                           ; Regs used in _WDT_Set: [wreg]
  5126  0BF8  1683               	bsf	3,5	;RP0=1, select bank1
  5127  0BF9  1303               	bcf	3,6	;RP1=0, select bank1
  5128  0BFA  1581               	bsf	1,3	;volatile
  5129                           
  5130                           ;MCU_B1.c: 1047: PS0 = 1;
  5131  0BFB  1401               	bsf	1,0	;volatile
  5132                           
  5133                           ;MCU_B1.c: 1048: PS1 = 1;
  5134  0BFC  1481               	bsf	1,1	;volatile
  5135                           
  5136                           ;MCU_B1.c: 1049: PS2 = 1;
  5137  0BFD  1501               	bsf	1,2	;volatile
  5138                           
  5139                           ;MCU_B1.c: 1053: WDT.Enable = 1;
  5140  0BFE  1477               	bsf	_WDT,0
  5141                           
  5142                           ;MCU_B1.c: 1054: WDT.Timer = 10;
  5143  0BFF  300A               	movlw	10
  5144  0C00  1283               	bcf	3,5	;RP0=0, select bank0
  5145  0C01  1303               	bcf	3,6	;RP1=0, select bank0
  5146  0C02  00D5               	movwf	??_WDT_Set
  5147  0C03  0855               	movf	??_WDT_Set,w
  5148  0C04  00F8               	movwf	_WDT+1
  5149  0C05  0008               	return
  5150  0C06                     __end_of_WDT_Set:	
  5151                           
  5152                           	psect	text24
  5153  0CFB                     __ptext24:	
  5154 ;; *************** function _UART_Set *****************
  5155 ;; Defined at:
  5156 ;;		line 720 in file "../src/MCU_B1.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;		None
  5159 ;; Auto vars:     Size  Location     Type
  5160 ;;		None
  5161 ;; Return value:  Size  Location     Type
  5162 ;;		None               void
  5163 ;; Registers used:
  5164 ;;		wreg
  5165 ;; Tracked objects:
  5166 ;;		On entry : 0/0
  5167 ;;		On exit  : 0/0
  5168 ;;		Unchanged: 0/0
  5169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5170 ;;      Params:         0       0       0       0
  5171 ;;      Locals:         0       0       0       0
  5172 ;;      Temps:          0       0       0       0
  5173 ;;      Totals:         0       0       0       0
  5174 ;;Total ram usage:        0 bytes
  5175 ;; Hardware stack levels used:    1
  5176 ;; Hardware stack levels required when called:    3
  5177 ;; This function calls:
  5178 ;;		Nothing
  5179 ;; This function is called by:
  5180 ;;		_Mcu_Initialization
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           
  5185                           ;psect for function _UART_Set
  5186  0CFB                     _UART_Set:	
  5187                           
  5188                           ;MCU_B1.c: 722: TRISC7 = 1;
  5189                           
  5190                           ;incstack = 0
  5191                           ; Regs used in _UART_Set: [wreg]
  5192  0CFB  1683               	bsf	3,5	;RP0=1, select bank1
  5193  0CFC  1303               	bcf	3,6	;RP1=0, select bank1
  5194  0CFD  1787               	bsf	7,7	;volatile
  5195                           
  5196                           ;MCU_B1.c: 723: TRISC6 = 1;
  5197  0CFE  1707               	bsf	7,6	;volatile
  5198                           
  5199                           ;MCU_B1.c: 724: SPBRG = ((int)(16000000L/(16UL * 19200) -1));
  5200  0CFF  3033               	movlw	51
  5201  0D00  0099               	movwf	25	;volatile
  5202                           
  5203                           ;MCU_B1.c: 729: RCSTA = (0 | 0x90);
  5204  0D01  3090               	movlw	144
  5205  0D02  1283               	bcf	3,5	;RP0=0, select bank0
  5206  0D03  1303               	bcf	3,6	;RP1=0, select bank0
  5207  0D04  0098               	movwf	24	;volatile
  5208                           
  5209                           ;MCU_B1.c: 730: TXSTA = (0x4 | 0 | 0x20);
  5210  0D05  3024               	movlw	36
  5211  0D06  1683               	bsf	3,5	;RP0=1, select bank1
  5212  0D07  1303               	bcf	3,6	;RP1=0, select bank1
  5213  0D08  0098               	movwf	24	;volatile
  5214                           
  5215                           ;MCU_B1.c: 731: TX9 = 0;
  5216  0D09  1318               	bcf	24,6	;volatile
  5217                           
  5218                           ;MCU_B1.c: 732: RX9 = 0;
  5219  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  5220  0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  5221  0D0C  1318               	bcf	24,6	;volatile
  5222                           
  5223                           ;MCU_B1.c: 733: TXIE = 0;
  5224  0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  5225  0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  5226  0D0F  120C               	bcf	12,4	;volatile
  5227                           
  5228                           ;MCU_B1.c: 734: RCIE = 1;
  5229  0D10  168C               	bsf	12,5	;volatile
  5230                           
  5231                           ;MCU_B1.c: 735: PEIE = 1;
  5232  0D11  170B               	bsf	11,6	;volatile
  5233                           
  5234                           ;MCU_B1.c: 736: GIE = 1;
  5235  0D12  178B               	bsf	11,7	;volatile
  5236  0D13  0008               	return
  5237  0D14                     __end_of_UART_Set:	
  5238                           
  5239                           	psect	text25
  5240  0BEA                     __ptext25:	
  5241 ;; *************** function _TMR1_Set *****************
  5242 ;; Defined at:
  5243 ;;		line 199 in file "../src/MCU_B1.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;		None
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;		None               void
  5250 ;; Registers used:
  5251 ;;		wreg
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5257 ;;      Params:         0       0       0       0
  5258 ;;      Locals:         0       0       0       0
  5259 ;;      Temps:          0       0       0       0
  5260 ;;      Totals:         0       0       0       0
  5261 ;;Total ram usage:        0 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    3
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		_Mcu_Initialization
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           
  5272                           ;psect for function _TMR1_Set
  5273  0BEA                     _TMR1_Set:	
  5274                           
  5275                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  5276                           
  5277                           ;incstack = 0
  5278                           ; Regs used in _TMR1_Set: [wreg]
  5279  0BEA  3041               	movlw	65
  5280  0BEB  1283               	bcf	3,5	;RP0=0, select bank0
  5281  0BEC  1303               	bcf	3,6	;RP1=0, select bank0
  5282  0BED  0090               	movwf	16	;volatile
  5283                           
  5284                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  5285  0BEE  30FA               	movlw	250
  5286  0BEF  008F               	movwf	15	;volatile
  5287                           
  5288                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  5289  0BF0  3038               	movlw	56
  5290  0BF1  008E               	movwf	14	;volatile
  5291                           
  5292                           ;MCU_B1.c: 203: TMR1IE = 1;
  5293  0BF2  1683               	bsf	3,5	;RP0=1, select bank1
  5294  0BF3  1303               	bcf	3,6	;RP1=0, select bank1
  5295  0BF4  140C               	bsf	12,0	;volatile
  5296                           
  5297                           ;MCU_B1.c: 204: PEIE = 1;
  5298  0BF5  170B               	bsf	11,6	;volatile
  5299                           
  5300                           ;MCU_B1.c: 205: GIE = 1;
  5301  0BF6  178B               	bsf	11,7	;volatile
  5302  0BF7  0008               	return
  5303  0BF8                     __end_of_TMR1_Set:	
  5304                           
  5305                           	psect	text26
  5306  0CCE                     __ptext26:	
  5307 ;; *************** function _IO_Set *****************
  5308 ;; Defined at:
  5309 ;;		line 60 in file "../src/MCU_B1.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;		None
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;		None
  5314 ;; Return value:  Size  Location     Type
  5315 ;;		None               void
  5316 ;; Registers used:
  5317 ;;		wreg, status,2
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5323 ;;      Params:         0       0       0       0
  5324 ;;      Locals:         0       0       0       0
  5325 ;;      Temps:          0       0       0       0
  5326 ;;      Totals:         0       0       0       0
  5327 ;;Total ram usage:        0 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; Hardware stack levels required when called:    3
  5330 ;; This function calls:
  5331 ;;		Nothing
  5332 ;; This function is called by:
  5333 ;;		_Mcu_Initialization
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           
  5338                           ;psect for function _IO_Set
  5339  0CCE                     _IO_Set:	
  5340                           
  5341                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5342                           
  5343                           ;incstack = 0
  5344                           ; Regs used in _IO_Set: [wreg+status,2]
  5345  0CCE  302F               	movlw	47
  5346  0CCF  1683               	bsf	3,5	;RP0=1, select bank1
  5347  0CD0  1303               	bcf	3,6	;RP1=0, select bank1
  5348  0CD1  0085               	movwf	5	;volatile
  5349                           
  5350                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5351  0CD2  3001               	movlw	1
  5352  0CD3  0086               	movwf	6	;volatile
  5353                           
  5354                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5355  0CD4  0187               	clrf	7	;volatile
  5356                           
  5357                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5358  0CD5  3007               	movlw	7
  5359  0CD6  1683               	bsf	3,5	;RP0=1, select bank3
  5360  0CD7  1703               	bsf	3,6	;RP1=1, select bank3
  5361  0CD8  0085               	movwf	5	;volatile
  5362                           
  5363                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5364  0CD9  3001               	movlw	1
  5365  0CDA  0086               	movwf	6	;volatile
  5366                           
  5367                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5368  0CDB  30AF               	movlw	175
  5369  0CDC  1283               	bcf	3,5	;RP0=0, select bank0
  5370  0CDD  1303               	bcf	3,6	;RP1=0, select bank0
  5371  0CDE  0085               	movwf	5	;volatile
  5372                           
  5373                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5374  0CDF  3001               	movlw	1
  5375  0CE0  0086               	movwf	6	;volatile
  5376                           
  5377                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5378  0CE1  0187               	clrf	7	;volatile
  5379  0CE2  0008               	return
  5380  0CE3                     __end_of_IO_Set:	
  5381                           
  5382                           	psect	text27
  5383  0B6D                     __ptext27:	
  5384 ;; *************** function _Fosc_Set *****************
  5385 ;; Defined at:
  5386 ;;		line 56 in file "../src/MCU_B1.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;		None
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;		None
  5391 ;; Return value:  Size  Location     Type
  5392 ;;		None               void
  5393 ;; Registers used:
  5394 ;;		wreg
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5400 ;;      Params:         0       0       0       0
  5401 ;;      Locals:         0       0       0       0
  5402 ;;      Temps:          0       0       0       0
  5403 ;;      Totals:         0       0       0       0
  5404 ;;Total ram usage:        0 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    3
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_Mcu_Initialization
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           
  5415                           ;psect for function _Fosc_Set
  5416  0B6D                     _Fosc_Set:	
  5417                           
  5418                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5419                           
  5420                           ;incstack = 0
  5421                           ; Regs used in _Fosc_Set: [wreg]
  5422  0B6D  303C               	movlw	60
  5423  0B6E  1683               	bsf	3,5	;RP0=1, select bank1
  5424  0B6F  1303               	bcf	3,6	;RP1=0, select bank1
  5425  0B70  0090               	movwf	16	;volatile
  5426  0B71  0008               	return
  5427  0B72                     __end_of_Fosc_Set:	
  5428                           
  5429                           	psect	text28
  5430  0B8B                     __ptext28:	
  5431 ;; *************** function _ADC_Set *****************
  5432 ;; Defined at:
  5433 ;;		line 421 in file "../src/MCU_B1.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;		None
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;		None
  5438 ;; Return value:  Size  Location     Type
  5439 ;;		None               void
  5440 ;; Registers used:
  5441 ;;		wreg
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5447 ;;      Params:         0       0       0       0
  5448 ;;      Locals:         0       0       0       0
  5449 ;;      Temps:          0       0       0       0
  5450 ;;      Totals:         0       0       0       0
  5451 ;;Total ram usage:        0 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:    3
  5454 ;; This function calls:
  5455 ;;		Nothing
  5456 ;; This function is called by:
  5457 ;;		_Mcu_Initialization
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           
  5462                           ;psect for function _ADC_Set
  5463  0B8B                     _ADC_Set:	
  5464                           
  5465                           ;MCU_B1.c: 422: ADCON1 = 0x73;
  5466                           
  5467                           ;incstack = 0
  5468                           ; Regs used in _ADC_Set: [wreg]
  5469  0B8B  3073               	movlw	115
  5470  0B8C  1683               	bsf	3,5	;RP0=1, select bank1
  5471  0B8D  1303               	bcf	3,6	;RP1=0, select bank1
  5472  0B8E  009F               	movwf	31	;volatile
  5473                           
  5474                           ;MCU_B1.c: 423: FVRCON = 0xc1;
  5475  0B8F  30C1               	movlw	193
  5476  0B90  009D               	movwf	29	;volatile
  5477  0B91  0008               	return
  5478  0B92                     __end_of_ADC_Set:	
  5479                           
  5480                           	psect	text29
  5481  0025                     __ptext29:	
  5482 ;; *************** function _Load_Main *****************
  5483 ;; Defined at:
  5484 ;;		line 39 in file "../src/OverLoad_B1.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;		None
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  i               1   15[BANK0 ] unsigned char 
  5489 ;;  error           1   14[BANK0 ] unsigned char 
  5490 ;;  adjgo           1   12[BANK0 ] unsigned char 
  5491 ;;  j               1   11[BANK0 ] unsigned char 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;		None               void
  5494 ;; Registers used:
  5495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5501 ;;      Params:         0       0       0       0
  5502 ;;      Locals:         0       5       0       0
  5503 ;;      Temps:          0       2       0       0
  5504 ;;      Totals:         0       7       0       0
  5505 ;;Total ram usage:        7 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:    6
  5508 ;; This function calls:
  5509 ;;		___lwdiv
  5510 ;;		_getMain_All_Error_Status
  5511 ;;		_getMain_LightsStatus
  5512 ;;		_getMain_Lights_Count
  5513 ;;		_getMain_LoadOK
  5514 ;;		_setLoad_AH_AL_Restore
  5515 ;; This function is called by:
  5516 ;;		_main
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           
  5521                           ;psect for function _Load_Main
  5522  0025                     _Load_Main:	
  5523                           
  5524                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
  5525                           
  5526                           ;incstack = 0
  5527                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5528  0025  1283               	bcf	3,5	;RP0=0, select bank0
  5529  0026  1303               	bcf	3,6	;RP1=0, select bank0
  5530  0027  01E4               	clrf	Load_Main@i
  5531  0028  01E0               	clrf	Load_Main@j
  5532  0029  3000               	movlw	0
  5533  002A  158A  26B7  118A   	fcall	_getMain_All_Error_Status
  5534  002D  1283               	bcf	3,5	;RP0=0, select bank0
  5535  002E  1303               	bcf	3,6	;RP1=0, select bank0
  5536  002F  00DE               	movwf	??_Load_Main
  5537  0030  085E               	movf	??_Load_Main,w
  5538  0031  00E3               	movwf	Load_Main@error
  5539  0032  01E1               	clrf	Load_Main@adjgo
  5540                           
  5541                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  5542  0033  1683               	bsf	3,5	;RP0=1, select bank1
  5543  0034  1303               	bcf	3,6	;RP1=0, select bank1
  5544  0035  1C4F               	btfss	_Load^(0+128),0
  5545  0036  2A3D               	goto	l731
  5546                           
  5547                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
  5548  0037  1283               	bcf	3,5	;RP0=0, select bank0
  5549  0038  1303               	bcf	3,6	;RP1=0, select bank0
  5550  0039  01E2               	clrf	_Load_Main$2599
  5551  003A  158A  261D  118A   	fcall	_getMain_LightsStatus
  5552  003D  3A01               	xorlw	1
  5553  003E  1D03               	skipz
  5554  003F  284A               	goto	l4627
  5555  0040  1283               	bcf	3,5	;RP0=0, select bank0
  5556  0041  1303               	bcf	3,6	;RP1=0, select bank0
  5557  0042  08E3               	movf	Load_Main@error,f
  5558  0043  1D03               	skipz
  5559  0044  284A               	goto	l4627
  5560  0045  08E1               	movf	Load_Main@adjgo,f
  5561  0046  1D03               	skipz
  5562  0047  284A               	goto	l4627
  5563  0048  01E2               	clrf	_Load_Main$2599
  5564  0049  0AE2               	incf	_Load_Main$2599,f
  5565  004A                     l4627:	
  5566  004A  1283               	bcf	3,5	;RP0=0, select bank0
  5567  004B  1303               	bcf	3,6	;RP1=0, select bank0
  5568  004C  0862               	movf	_Load_Main$2599,w
  5569  004D  1683               	bsf	3,5	;RP0=1, select bank1
  5570  004E  1303               	bcf	3,6	;RP1=0, select bank1
  5571  004F  10CF               	bcf	_Load^(0+128),1
  5572  0050  1D03               	skipz
  5573  0051  14CF               	bsf	_Load^(0+128),1
  5574                           
  5575                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
  5576  0052  158A  2406  118A   	fcall	_getMain_LoadOK
  5577  0055  3A01               	xorlw	1
  5578  0056  1D03               	skipz
  5579  0057  285E               	goto	l734
  5580  0058  1683               	bsf	3,5	;RP0=1, select bank1
  5581  0059  1303               	bcf	3,6	;RP1=0, select bank1
  5582  005A  19CF               	btfsc	_Load^(0+128),3
  5583  005B  285E               	goto	l734
  5584                           
  5585                           ;OverLoad_B1.c: 49: Load.Run = 1;
  5586  005C  15CF               	bsf	_Load^(0+128),3
  5587                           
  5588                           ;OverLoad_B1.c: 50: Load.OK = 0;
  5589  005D  13CF               	bcf	_Load^(0+128),7
  5590  005E                     l734:	
  5591                           
  5592                           ;OverLoad_B1.c: 51: }
  5593                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
  5594  005E  1683               	bsf	3,5	;RP0=1, select bank1
  5595  005F  1303               	bcf	3,6	;RP1=0, select bank1
  5596  0060  1CCF               	btfss	_Load^(0+128),1
  5597  0061  29E2               	goto	l735
  5598                           
  5599                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
  5600  0062  154F               	bsf	_Load^(0+128),2
  5601                           
  5602                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
  5603  0063  1E4F               	btfss	_Load^(0+128),4
  5604  0064  29E0               	goto	l736
  5605                           
  5606                           ;OverLoad_B1.c: 58: Load.Time++;
  5607  0065  3001               	movlw	1
  5608  0066  07D0               	addwf	(_Load^(0+128)+1),f
  5609  0067  1803               	skipnc
  5610  0068  0AD1               	incf	((_Load+1)^(0+128)+1),f
  5611  0069  3000               	movlw	0
  5612  006A  07D1               	addwf	((_Load+1)^(0+128)+1),f
  5613                           
  5614                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
  5615  006B  3000               	movlw	0
  5616  006C  0251               	subwf	((_Load+1)^(0+128)+1),w
  5617  006D  3005               	movlw	5
  5618  006E  1903               	skipnz
  5619  006F  0250               	subwf	(_Load^(0+128)+1),w
  5620  0070  1C03               	skipc
  5621  0071  0008               	return
  5622                           
  5623                           ;OverLoad_B1.c: 60: Load.Time = 0;
  5624  0072  01D0               	clrf	(_Load^(0+128)+1)
  5625  0073  01D1               	clrf	((_Load+1)^(0+128)+1)
  5626                           
  5627                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
  5628  0074  124F               	bcf	_Load^(0+128),4
  5629                           
  5630                           ;OverLoad_B1.c: 63: for (i = 1; i < 4; i++) {
  5631  0075  1283               	bcf	3,5	;RP0=0, select bank0
  5632  0076  1303               	bcf	3,6	;RP1=0, select bank0
  5633  0077  01E4               	clrf	Load_Main@i
  5634  0078  0AE4               	incf	Load_Main@i,f
  5635  0079  3004               	movlw	4
  5636  007A  0264               	subwf	Load_Main@i,w
  5637  007B  1803               	btfsc	3,0
  5638  007C  28AE               	goto	l4655
  5639  007D                     l4649:	
  5640                           
  5641                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
  5642  007D  0864               	movf	Load_Main@i,w
  5643  007E  3ED9               	addlw	(_Load+10)& (0+255)
  5644  007F  0084               	movwf	4
  5645  0080  1383               	bcf	3,7	;select IRP bank1
  5646  0081  0800               	movf	0,w
  5647  0082  00DE               	movwf	??_Load_Main
  5648  0083  01DF               	clrf	??_Load_Main+1
  5649  0084  085E               	movf	??_Load_Main,w
  5650  0085  1683               	bsf	3,5	;RP0=1, select bank1
  5651  0086  1303               	bcf	3,6	;RP1=0, select bank1
  5652  0087  07D4               	addwf	(_Load^(0+128)+5),f
  5653  0088  1803               	skipnc
  5654  0089  0AD5               	incf	((_Load+1)^(0+128)+5),f
  5655  008A  1283               	bcf	3,5	;RP0=0, select bank0
  5656  008B  1303               	bcf	3,6	;RP1=0, select bank0
  5657  008C  085F               	movf	??_Load_Main+1,w
  5658  008D  1683               	bsf	3,5	;RP0=1, select bank1
  5659  008E  1303               	bcf	3,6	;RP1=0, select bank1
  5660  008F  07D5               	addwf	((_Load+1)^(0+128)+5),f
  5661                           
  5662                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
  5663  0090  1283               	bcf	3,5	;RP0=0, select bank0
  5664  0091  1303               	bcf	3,6	;RP1=0, select bank0
  5665  0092  0864               	movf	Load_Main@i,w
  5666  0093  3EDE               	addlw	(_Load+15)& (0+255)
  5667  0094  0084               	movwf	4
  5668  0095  0800               	movf	0,w
  5669  0096  00DE               	movwf	??_Load_Main
  5670  0097  01DF               	clrf	??_Load_Main+1
  5671  0098  085E               	movf	??_Load_Main,w
  5672  0099  1683               	bsf	3,5	;RP0=1, select bank1
  5673  009A  1303               	bcf	3,6	;RP1=0, select bank1
  5674  009B  07D6               	addwf	(_Load^(0+128)+7),f
  5675  009C  1803               	skipnc
  5676  009D  0AD7               	incf	((_Load+1)^(0+128)+7),f
  5677  009E  1283               	bcf	3,5	;RP0=0, select bank0
  5678  009F  1303               	bcf	3,6	;RP1=0, select bank0
  5679  00A0  085F               	movf	??_Load_Main+1,w
  5680  00A1  1683               	bsf	3,5	;RP0=1, select bank1
  5681  00A2  1303               	bcf	3,6	;RP1=0, select bank1
  5682  00A3  07D7               	addwf	((_Load+1)^(0+128)+7),f
  5683  00A4  3001               	movlw	1
  5684  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  5685  00A6  1303               	bcf	3,6	;RP1=0, select bank0
  5686  00A7  00DE               	movwf	??_Load_Main
  5687  00A8  085E               	movf	??_Load_Main,w
  5688  00A9  07E4               	addwf	Load_Main@i,f
  5689  00AA  3004               	movlw	4
  5690  00AB  0264               	subwf	Load_Main@i,w
  5691  00AC  1C03               	skipc
  5692  00AD  287D               	goto	l4649
  5693  00AE                     l4655:	
  5694                           
  5695                           ;OverLoad_B1.c: 66: }
  5696                           ;OverLoad_B1.c: 67: Load.ADH /= 3;
  5697  00AE  3003               	movlw	3
  5698  00AF  00D5               	movwf	___lwdiv@divisor
  5699  00B0  3000               	movlw	0
  5700  00B1  00D6               	movwf	___lwdiv@divisor+1
  5701  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  5702  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  5703  00B4  0855               	movf	((_Load+1)^(0+128)+5),w
  5704  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  5705  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  5706  00B7  01D8               	clrf	___lwdiv@dividend+1
  5707  00B8  07D8               	addwf	___lwdiv@dividend+1,f
  5708  00B9  1683               	bsf	3,5	;RP0=1, select bank1
  5709  00BA  1303               	bcf	3,6	;RP1=0, select bank1
  5710  00BB  0854               	movf	(_Load^(0+128)+5),w
  5711  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  5712  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  5713  00BE  01D7               	clrf	___lwdiv@dividend
  5714  00BF  07D7               	addwf	___lwdiv@dividend,f
  5715  00C0  158A  276C  118A   	fcall	___lwdiv
  5716  00C3  1283               	bcf	3,5	;RP0=0, select bank0
  5717  00C4  1303               	bcf	3,6	;RP1=0, select bank0
  5718  00C5  0856               	movf	?___lwdiv+1,w
  5719  00C6  1683               	bsf	3,5	;RP0=1, select bank1
  5720  00C7  1303               	bcf	3,6	;RP1=0, select bank1
  5721  00C8  01D5               	clrf	((_Load+1)^(0+128)+5)
  5722  00C9  07D5               	addwf	((_Load+1)^(0+128)+5),f
  5723  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  5724  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  5725  00CC  0855               	movf	?___lwdiv,w
  5726  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  5727  00CE  1303               	bcf	3,6	;RP1=0, select bank1
  5728  00CF  01D4               	clrf	(_Load^(0+128)+5)
  5729  00D0  07D4               	addwf	(_Load^(0+128)+5),f
  5730                           
  5731                           ;OverLoad_B1.c: 68: Load.ADL /= 3;
  5732  00D1  3003               	movlw	3
  5733  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  5734  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  5735  00D4  00D5               	movwf	___lwdiv@divisor
  5736  00D5  3000               	movlw	0
  5737  00D6  00D6               	movwf	___lwdiv@divisor+1
  5738  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  5739  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  5740  00D9  0857               	movf	((_Load+1)^(0+128)+7),w
  5741  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  5742  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  5743  00DC  01D8               	clrf	___lwdiv@dividend+1
  5744  00DD  07D8               	addwf	___lwdiv@dividend+1,f
  5745  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  5746  00DF  1303               	bcf	3,6	;RP1=0, select bank1
  5747  00E0  0856               	movf	(_Load^(0+128)+7),w
  5748  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  5749  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  5750  00E3  01D7               	clrf	___lwdiv@dividend
  5751  00E4  07D7               	addwf	___lwdiv@dividend,f
  5752  00E5  158A  276C  118A   	fcall	___lwdiv
  5753  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  5754  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  5755  00EA  0856               	movf	?___lwdiv+1,w
  5756  00EB  1683               	bsf	3,5	;RP0=1, select bank1
  5757  00EC  1303               	bcf	3,6	;RP1=0, select bank1
  5758  00ED  01D7               	clrf	((_Load+1)^(0+128)+7)
  5759  00EE  07D7               	addwf	((_Load+1)^(0+128)+7),f
  5760  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  5761  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  5762  00F1  0855               	movf	?___lwdiv,w
  5763  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  5764  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  5765  00F4  01D6               	clrf	(_Load^(0+128)+7)
  5766  00F5  07D6               	addwf	(_Load^(0+128)+7),f
  5767                           
  5768                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
  5769  00F6  158A  24E3  118A   	fcall	_setLoad_AH_AL_Restore
  5770                           
  5771                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
  5772  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  5773  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  5774  00FB  0855               	movf	((_Load+1)^(0+128)+5),w
  5775  00FC  0257               	subwf	((_Load+1)^(0+128)+7),w
  5776  00FD  1D03               	skipz
  5777  00FE  2901               	goto	u5075
  5778  00FF  0854               	movf	(_Load^(0+128)+5),w
  5779  0100  0256               	subwf	(_Load^(0+128)+7),w
  5780  0101                     u5075:	
  5781  0101  1803               	skipnc
  5782  0102  0008               	return
  5783                           
  5784                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
  5785  0103  0356               	decf	(_Load^(0+128)+7),w
  5786  0104  3AFF               	xorlw	255
  5787  0105  0754               	addwf	(_Load^(0+128)+5),w
  5788  0106  1283               	bcf	3,5	;RP0=0, select bank0
  5789  0107  1303               	bcf	3,6	;RP1=0, select bank0
  5790  0108  00DE               	movwf	??_Load_Main
  5791  0109  085E               	movf	??_Load_Main,w
  5792  010A  1683               	bsf	3,5	;RP0=1, select bank1
  5793  010B  1303               	bcf	3,6	;RP1=0, select bank1
  5794  010C  00E3               	movwf	(_Load^(0+128)+20)
  5795                           
  5796                           ;OverLoad_B1.c: 73: Load.ADH = 0;
  5797  010D  01D4               	clrf	(_Load^(0+128)+5)
  5798  010E  01D5               	clrf	((_Load+1)^(0+128)+5)
  5799                           
  5800                           ;OverLoad_B1.c: 74: Load.ADL = 0;
  5801  010F  01D6               	clrf	(_Load^(0+128)+7)
  5802  0110  01D7               	clrf	((_Load+1)^(0+128)+7)
  5803                           
  5804                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
  5805  0111  158A  2427  118A   	fcall	_getMain_Lights_Count
  5806  0114  1283               	bcf	3,5	;RP0=0, select bank0
  5807  0115  1303               	bcf	3,6	;RP1=0, select bank0
  5808  0116  00DE               	movwf	??_Load_Main
  5809  0117  085E               	movf	??_Load_Main,w
  5810  0118  1683               	bsf	3,5	;RP0=1, select bank1
  5811  0119  1303               	bcf	3,6	;RP1=0, select bank1
  5812  011A  00EE               	movwf	(_Load^(0+128)+31)
  5813                           
  5814                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
  5815  011B  1DCF               	btfss	_Load^(0+128),3
  5816  011C  294A               	goto	l741
  5817                           
  5818                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
  5819  011D  3002               	movlw	2
  5820  011E  026B               	subwf	(_Load^(0+128)+28),w
  5821  011F  1803               	skipnc
  5822  0120  294A               	goto	l741
  5823                           
  5824                           ;OverLoad_B1.c: 79: Load.Count++;
  5825  0121  3001               	movlw	1
  5826  0122  1283               	bcf	3,5	;RP0=0, select bank0
  5827  0123  1303               	bcf	3,6	;RP1=0, select bank0
  5828  0124  00DE               	movwf	??_Load_Main
  5829  0125  085E               	movf	??_Load_Main,w
  5830  0126  1683               	bsf	3,5	;RP0=1, select bank1
  5831  0127  1303               	bcf	3,6	;RP1=0, select bank1
  5832  0128  07EB               	addwf	(_Load^(0+128)+28),f
  5833                           
  5834                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
  5835  0129  086B               	movf	(_Load^(0+128)+28),w
  5836  012A  3A01               	xorlw	1
  5837  012B  1D03               	skipz
  5838  012C  2937               	goto	l4679
  5839                           
  5840                           ;OverLoad_B1.c: 81: Load.ErrorCountValue = 2;
  5841  012D  3002               	movlw	2
  5842  012E  1283               	bcf	3,5	;RP0=0, select bank0
  5843  012F  1303               	bcf	3,6	;RP1=0, select bank0
  5844  0130  00DE               	movwf	??_Load_Main
  5845  0131  085E               	movf	??_Load_Main,w
  5846  0132  1683               	bsf	3,5	;RP0=1, select bank1
  5847  0133  1303               	bcf	3,6	;RP1=0, select bank1
  5848  0134  00ED               	movwf	(_Load^(0+128)+30)
  5849                           
  5850                           ;OverLoad_B1.c: 82: Load.JudgeValue = (20*12);
  5851  0135  30F0               	movlw	240
  5852  0136  2940               	goto	L18
  5853  0137                     l4679:	
  5854                           ;OverLoad_B1.c: 83: } else if (Load.Count == 2) {
  5855                           
  5856  0137  086B               	movf	(_Load^(0+128)+28),w
  5857  0138  3A02               	xorlw	2
  5858  0139  1D03               	skipz
  5859  013A  294A               	goto	l741
  5860                           
  5861                           ;OverLoad_B1.c: 84: if (Load.LightsCount == 1) {
  5862  013B  086E               	movf	(_Load^(0+128)+31),w
  5863  013C  3A01               	xorlw	1
  5864  013D  1D03               	skipz
  5865  013E  2943               	goto	l4685
  5866                           
  5867                           ;OverLoad_B1.c: 85: Load.JudgeValue = (int)(7*12);
  5868  013F  3054               	movlw	84
  5869  0140                     L18:	
  5870  0140  00E7               	movwf	(_Load^(0+128)+24)
  5871  0141  3000               	movlw	0
  5872  0142  2949               	goto	L19
  5873  0143                     l4685:	
  5874                           ;OverLoad_B1.c: 86: } else {
  5875                           
  5876                           
  5877                           ;OverLoad_B1.c: 87: Load.JudgeValue = (int)(7*12) + Load.TotalLoad;
  5878  0143  0858               	movf	(_Load^(0+128)+9),w
  5879  0144  3E54               	addlw	84
  5880  0145  00E7               	movwf	(_Load^(0+128)+24)
  5881  0146  3000               	movlw	0
  5882  0147  1803               	skipnc
  5883  0148  3001               	movlw	1
  5884  0149                     L19:	
  5885  0149  00E8               	movwf	(_Load^(0+128)+25)
  5886  014A                     l741:	
  5887                           
  5888                           ;OverLoad_B1.c: 88: }
  5889                           ;OverLoad_B1.c: 89: }
  5890                           ;OverLoad_B1.c: 90: }
  5891                           ;OverLoad_B1.c: 91: }
  5892                           ;OverLoad_B1.c: 93: if (Load.AD >= Load.JudgeValue) {
  5893  014A  0863               	movf	(_Load^(0+128)+20),w
  5894  014B  1283               	bcf	3,5	;RP0=0, select bank0
  5895  014C  1303               	bcf	3,6	;RP1=0, select bank0
  5896  014D  00DE               	movwf	??_Load_Main
  5897  014E  01DF               	clrf	??_Load_Main+1
  5898  014F  1683               	bsf	3,5	;RP0=1, select bank1
  5899  0150  1303               	bcf	3,6	;RP1=0, select bank1
  5900  0151  0868               	movf	((_Load+1)^(0+128)+24),w
  5901  0152  1283               	bcf	3,5	;RP0=0, select bank0
  5902  0153  1303               	bcf	3,6	;RP1=0, select bank0
  5903  0154  025F               	subwf	??_Load_Main+1,w
  5904  0155  1D03               	skipz
  5905  0156  295D               	goto	u5135
  5906  0157  1683               	bsf	3,5	;RP0=1, select bank1
  5907  0158  1303               	bcf	3,6	;RP1=0, select bank1
  5908  0159  0867               	movf	(_Load^(0+128)+24),w
  5909  015A  1283               	bcf	3,5	;RP0=0, select bank0
  5910  015B  1303               	bcf	3,6	;RP1=0, select bank0
  5911  015C  025E               	subwf	??_Load_Main,w
  5912  015D                     u5135:	
  5913  015D  1C03               	skipc
  5914  015E  2992               	goto	l4707
  5915                           
  5916                           ;OverLoad_B1.c: 94: Load.ErrorCount++;
  5917  015F  3001               	movlw	1
  5918  0160  00DE               	movwf	??_Load_Main
  5919  0161  085E               	movf	??_Load_Main,w
  5920  0162  1683               	bsf	3,5	;RP0=1, select bank1
  5921  0163  1303               	bcf	3,6	;RP1=0, select bank1
  5922  0164  07EC               	addwf	(_Load^(0+128)+29),f
  5923                           
  5924                           ;OverLoad_B1.c: 95: if (Load.ErrorCount > Load.ErrorCountValue) {
  5925  0165  086C               	movf	(_Load^(0+128)+29),w
  5926  0166  026D               	subwf	(_Load^(0+128)+30),w
  5927  0167  1803               	skipnc
  5928  0168  0008               	return
  5929                           
  5930                           ;OverLoad_B1.c: 96: Load.ErrorCount = 0;
  5931  0169  01EC               	clrf	(_Load^(0+128)+29)
  5932                           
  5933                           ;OverLoad_B1.c: 97: Load.ERROR = 1;
  5934  016A  16CF               	bsf	_Load^(0+128),5
  5935                           
  5936                           ;OverLoad_B1.c: 101: UART.Data[0] = (Load.AD >> 8);
  5937  016B  1283               	bcf	3,5	;RP0=0, select bank0
  5938  016C  1303               	bcf	3,6	;RP1=0, select bank0
  5939  016D  01B6               	clrf	_UART
  5940                           
  5941                           ;OverLoad_B1.c: 102: UART.Data[1] = Load.AD;
  5942  016E  1683               	bsf	3,5	;RP0=1, select bank1
  5943  016F  1303               	bcf	3,6	;RP1=0, select bank1
  5944  0170  0863               	movf	(_Load^(0+128)+20),w
  5945  0171  1283               	bcf	3,5	;RP0=0, select bank0
  5946  0172  1303               	bcf	3,6	;RP1=0, select bank0
  5947  0173  00DE               	movwf	??_Load_Main
  5948  0174  085E               	movf	??_Load_Main,w
  5949  0175  00B7               	movwf	_UART+1
  5950                           
  5951                           ;OverLoad_B1.c: 103: UART.Data[2] = (Load.JudgeValue >> 8);
  5952  0176  1683               	bsf	3,5	;RP0=1, select bank1
  5953  0177  1303               	bcf	3,6	;RP1=0, select bank1
  5954  0178  0868               	movf	((_Load+1)^(0+128)+24),w
  5955  0179  1283               	bcf	3,5	;RP0=0, select bank0
  5956  017A  1303               	bcf	3,6	;RP1=0, select bank0
  5957  017B  00DE               	movwf	??_Load_Main
  5958  017C  085E               	movf	??_Load_Main,w
  5959  017D  00B8               	movwf	_UART+2
  5960                           
  5961                           ;OverLoad_B1.c: 104: UART.Data[3] = Load.JudgeValue;
  5962  017E  1683               	bsf	3,5	;RP0=1, select bank1
  5963  017F  1303               	bcf	3,6	;RP1=0, select bank1
  5964  0180  0867               	movf	(_Load^(0+128)+24),w
  5965  0181  1283               	bcf	3,5	;RP0=0, select bank0
  5966  0182  1303               	bcf	3,6	;RP1=0, select bank0
  5967  0183  00DE               	movwf	??_Load_Main
  5968  0184  085E               	movf	??_Load_Main,w
  5969  0185  00B9               	movwf	_UART+3
  5970                           
  5971                           ;OverLoad_B1.c: 105: UART.Data[4] = Load.LightsCount;
  5972  0186  1683               	bsf	3,5	;RP0=1, select bank1
  5973  0187  1303               	bcf	3,6	;RP1=0, select bank1
  5974  0188  086E               	movf	(_Load^(0+128)+31),w
  5975  0189  1283               	bcf	3,5	;RP0=0, select bank0
  5976  018A  1303               	bcf	3,6	;RP1=0, select bank0
  5977  018B  00DE               	movwf	??_Load_Main
  5978  018C  085E               	movf	??_Load_Main,w
  5979  018D  00BA               	movwf	_UART+4
  5980                           
  5981                           ;OverLoad_B1.c: 106: UART.Data[5] = 0;
  5982  018E  01BB               	clrf	_UART+5
  5983                           
  5984                           ;OverLoad_B1.c: 107: UART.Data[6] = 0;
  5985  018F  01BC               	clrf	_UART+6
  5986                           
  5987                           ;OverLoad_B1.c: 108: UART.Data[7] = 0;
  5988  0190  01BD               	clrf	_UART+7
  5989                           
  5990                           ;OverLoad_B1.c: 118: }
  5991                           ;OverLoad_B1.c: 119: } else {
  5992  0191  0008               	return
  5993  0192                     l4707:	
  5994                           
  5995                           ;OverLoad_B1.c: 120: Load.ErrorCount = 0;
  5996  0192  1683               	bsf	3,5	;RP0=1, select bank1
  5997  0193  1303               	bcf	3,6	;RP1=0, select bank1
  5998  0194  01EC               	clrf	(_Load^(0+128)+29)
  5999                           
  6000                           ;OverLoad_B1.c: 121: if (Load.Run == 1) {
  6001  0195  1DCF               	btfss	_Load^(0+128),3
  6002  0196  0008               	return
  6003                           
  6004                           ;OverLoad_B1.c: 122: if (Load.OK == 0) {
  6005  0197  1BCF               	btfsc	_Load^(0+128),7
  6006  0198  0008               	return
  6007                           
  6008                           ;OverLoad_B1.c: 123: Load.SafeCount++;
  6009  0199  3001               	movlw	1
  6010  019A  1283               	bcf	3,5	;RP0=0, select bank0
  6011  019B  1303               	bcf	3,6	;RP1=0, select bank0
  6012  019C  00DE               	movwf	??_Load_Main
  6013  019D  085E               	movf	??_Load_Main,w
  6014  019E  1683               	bsf	3,5	;RP0=1, select bank1
  6015  019F  1303               	bcf	3,6	;RP1=0, select bank1
  6016  01A0  07EF               	addwf	(_Load^(0+128)+32),f
  6017                           
  6018                           ;OverLoad_B1.c: 124: if (Load.SafeCount >= 3) {
  6019  01A1  3003               	movlw	3
  6020  01A2  026F               	subwf	(_Load^(0+128)+32),w
  6021  01A3  1C03               	skipc
  6022  01A4  0008               	return
  6023                           
  6024                           ;OverLoad_B1.c: 125: Load.SafeCount = 0;
  6025  01A5  01EF               	clrf	(_Load^(0+128)+32)
  6026                           
  6027                           ;OverLoad_B1.c: 126: Load.OK = 1;
  6028  01A6  17CF               	bsf	_Load^(0+128),7
  6029                           
  6030                           ;OverLoad_B1.c: 127: Load.Run = 0;
  6031  01A7  11CF               	bcf	_Load^(0+128),3
  6032                           
  6033                           ;OverLoad_B1.c: 128: Load.Count = 0;
  6034  01A8  01EB               	clrf	(_Load^(0+128)+28)
  6035                           
  6036                           ;OverLoad_B1.c: 129: Load.TotalLoad = Load.AD;
  6037  01A9  0863               	movf	(_Load^(0+128)+20),w
  6038  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  6039  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  6040  01AC  00DE               	movwf	??_Load_Main
  6041  01AD  085E               	movf	??_Load_Main,w
  6042  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  6043  01AF  1303               	bcf	3,6	;RP1=0, select bank1
  6044  01B0  00D8               	movwf	(_Load^(0+128)+9)
  6045                           
  6046                           ;OverLoad_B1.c: 130: Load.ErrorCountValue = 3;
  6047  01B1  3003               	movlw	3
  6048  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  6049  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  6050  01B4  00DE               	movwf	??_Load_Main
  6051  01B5  085E               	movf	??_Load_Main,w
  6052  01B6  1683               	bsf	3,5	;RP0=1, select bank1
  6053  01B7  1303               	bcf	3,6	;RP1=0, select bank1
  6054  01B8  00ED               	movwf	(_Load^(0+128)+30)
  6055                           
  6056                           ;OverLoad_B1.c: 136: UART.Data[0] = (Load.AD >> 8);
  6057  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  6058  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  6059  01BB  01B6               	clrf	_UART
  6060                           
  6061                           ;OverLoad_B1.c: 137: UART.Data[1] = Load.AD;
  6062  01BC  1683               	bsf	3,5	;RP0=1, select bank1
  6063  01BD  1303               	bcf	3,6	;RP1=0, select bank1
  6064  01BE  0863               	movf	(_Load^(0+128)+20),w
  6065  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  6066  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  6067  01C1  00DE               	movwf	??_Load_Main
  6068  01C2  085E               	movf	??_Load_Main,w
  6069  01C3  00B7               	movwf	_UART+1
  6070                           
  6071                           ;OverLoad_B1.c: 138: UART.Data[2] = (Load.JudgeValue >> 8);
  6072  01C4  1683               	bsf	3,5	;RP0=1, select bank1
  6073  01C5  1303               	bcf	3,6	;RP1=0, select bank1
  6074  01C6  0868               	movf	((_Load+1)^(0+128)+24),w
  6075  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  6076  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  6077  01C9  00DE               	movwf	??_Load_Main
  6078  01CA  085E               	movf	??_Load_Main,w
  6079  01CB  00B8               	movwf	_UART+2
  6080                           
  6081                           ;OverLoad_B1.c: 139: UART.Data[3] = Load.JudgeValue;
  6082  01CC  1683               	bsf	3,5	;RP0=1, select bank1
  6083  01CD  1303               	bcf	3,6	;RP1=0, select bank1
  6084  01CE  0867               	movf	(_Load^(0+128)+24),w
  6085  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  6086  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  6087  01D1  00DE               	movwf	??_Load_Main
  6088  01D2  085E               	movf	??_Load_Main,w
  6089  01D3  00B9               	movwf	_UART+3
  6090                           
  6091                           ;OverLoad_B1.c: 140: UART.Data[4] = Load.LightsCount;
  6092  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  6093  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  6094  01D6  086E               	movf	(_Load^(0+128)+31),w
  6095  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  6096  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  6097  01D9  00DE               	movwf	??_Load_Main
  6098  01DA  085E               	movf	??_Load_Main,w
  6099  01DB  00BA               	movwf	_UART+4
  6100                           
  6101                           ;OverLoad_B1.c: 141: UART.Data[5] = 0;
  6102  01DC  01BB               	clrf	_UART+5
  6103                           
  6104                           ;OverLoad_B1.c: 142: UART.Data[6] = 0;
  6105  01DD  01BC               	clrf	_UART+6
  6106                           
  6107                           ;OverLoad_B1.c: 143: UART.Data[7] = 0;
  6108  01DE  01BD               	clrf	_UART+7
  6109                           
  6110                           ;OverLoad_B1.c: 154: }
  6111                           ;OverLoad_B1.c: 155: }
  6112                           ;OverLoad_B1.c: 156: }
  6113                           ;OverLoad_B1.c: 157: }
  6114                           ;OverLoad_B1.c: 158: }
  6115                           ;OverLoad_B1.c: 159: }
  6116                           ;OverLoad_B1.c: 160: } else {
  6117  01DF  0008               	return
  6118  01E0                     l736:	
  6119                           
  6120                           ;OverLoad_B1.c: 161: Load.ADtoGO = 1;
  6121  01E0  164F               	bsf	_Load^(0+128),4
  6122                           
  6123                           ;OverLoad_B1.c: 162: }
  6124                           ;OverLoad_B1.c: 163: } else {
  6125  01E1  0008               	return
  6126  01E2                     l735:	
  6127                           
  6128                           ;OverLoad_B1.c: 164: if (Load.LightsON == 1 && error != 3) {
  6129  01E2  1D4F               	btfss	_Load^(0+128),2
  6130  01E3  2A28               	goto	l4785
  6131  01E4  1283               	bcf	3,5	;RP0=0, select bank0
  6132  01E5  1303               	bcf	3,6	;RP1=0, select bank0
  6133  01E6  0863               	movf	Load_Main@error,w
  6134  01E7  3A03               	xorlw	3
  6135  01E8  1903               	skipnz
  6136  01E9  2A28               	goto	l4785
  6137                           
  6138                           ;OverLoad_B1.c: 165: Load.LightsON = 0;
  6139  01EA  1683               	bsf	3,5	;RP0=1, select bank1
  6140  01EB  1303               	bcf	3,6	;RP1=0, select bank1
  6141  01EC  114F               	bcf	_Load^(0+128),2
  6142                           
  6143                           ;OverLoad_B1.c: 167: Load.Time = 0;
  6144  01ED  01D0               	clrf	(_Load^(0+128)+1)
  6145  01EE  01D1               	clrf	((_Load+1)^(0+128)+1)
  6146                           
  6147                           ;OverLoad_B1.c: 168: Load.ADtoGO = 0;
  6148  01EF  124F               	bcf	_Load^(0+128),4
  6149                           
  6150                           ;OverLoad_B1.c: 169: setLoad_AH_AL_Restore();
  6151  01F0  158A  24E3  118A   	fcall	_setLoad_AH_AL_Restore
  6152                           
  6153                           ;OverLoad_B1.c: 170: Load.Count = 0;
  6154  01F3  1683               	bsf	3,5	;RP0=1, select bank1
  6155  01F4  1303               	bcf	3,6	;RP1=0, select bank1
  6156  01F5  01EB               	clrf	(_Load^(0+128)+28)
  6157                           
  6158                           ;OverLoad_B1.c: 171: Load.ErrorCount = 0;
  6159  01F6  01EC               	clrf	(_Load^(0+128)+29)
  6160                           
  6161                           ;OverLoad_B1.c: 172: Load.SafeCount = 0;
  6162  01F7  01EF               	clrf	(_Load^(0+128)+32)
  6163                           
  6164                           ;OverLoad_B1.c: 174: Load.ADH = 0;
  6165  01F8  01D4               	clrf	(_Load^(0+128)+5)
  6166  01F9  01D5               	clrf	((_Load+1)^(0+128)+5)
  6167                           
  6168                           ;OverLoad_B1.c: 175: Load.ADL = 0;
  6169  01FA  01D6               	clrf	(_Load^(0+128)+7)
  6170  01FB  01D7               	clrf	((_Load+1)^(0+128)+7)
  6171                           
  6172                           ;OverLoad_B1.c: 176: Load.AD = 0;
  6173  01FC  01E3               	clrf	(_Load^(0+128)+20)
  6174                           
  6175                           ;OverLoad_B1.c: 177: Load.JudgeValue = 0;
  6176  01FD  01E7               	clrf	(_Load^(0+128)+24)
  6177  01FE  01E8               	clrf	((_Load+1)^(0+128)+24)
  6178                           
  6179                           ;OverLoad_B1.c: 178: Load.LightsCount = 0;
  6180  01FF  01EE               	clrf	(_Load^(0+128)+31)
  6181                           
  6182                           ;OverLoad_B1.c: 179: Load.Run = 0;
  6183  0200  11CF               	bcf	_Load^(0+128),3
  6184                           
  6185                           ;OverLoad_B1.c: 180: Load.OK = 1;
  6186  0201  17CF               	bsf	_Load^(0+128),7
  6187                           
  6188                           ;OverLoad_B1.c: 184: UART.Data[0] = (Load.AD >> 8);
  6189  0202  1283               	bcf	3,5	;RP0=0, select bank0
  6190  0203  1303               	bcf	3,6	;RP1=0, select bank0
  6191  0204  01B6               	clrf	_UART
  6192                           
  6193                           ;OverLoad_B1.c: 185: UART.Data[1] = Load.AD;
  6194  0205  1683               	bsf	3,5	;RP0=1, select bank1
  6195  0206  1303               	bcf	3,6	;RP1=0, select bank1
  6196  0207  0863               	movf	(_Load^(0+128)+20),w
  6197  0208  1283               	bcf	3,5	;RP0=0, select bank0
  6198  0209  1303               	bcf	3,6	;RP1=0, select bank0
  6199  020A  00DE               	movwf	??_Load_Main
  6200  020B  085E               	movf	??_Load_Main,w
  6201  020C  00B7               	movwf	_UART+1
  6202                           
  6203                           ;OverLoad_B1.c: 186: UART.Data[2] = (Load.JudgeValue >> 8);
  6204  020D  1683               	bsf	3,5	;RP0=1, select bank1
  6205  020E  1303               	bcf	3,6	;RP1=0, select bank1
  6206  020F  0868               	movf	((_Load+1)^(0+128)+24),w
  6207  0210  1283               	bcf	3,5	;RP0=0, select bank0
  6208  0211  1303               	bcf	3,6	;RP1=0, select bank0
  6209  0212  00DE               	movwf	??_Load_Main
  6210  0213  085E               	movf	??_Load_Main,w
  6211  0214  00B8               	movwf	_UART+2
  6212                           
  6213                           ;OverLoad_B1.c: 187: UART.Data[3] = Load.JudgeValue;
  6214  0215  1683               	bsf	3,5	;RP0=1, select bank1
  6215  0216  1303               	bcf	3,6	;RP1=0, select bank1
  6216  0217  0867               	movf	(_Load^(0+128)+24),w
  6217  0218  1283               	bcf	3,5	;RP0=0, select bank0
  6218  0219  1303               	bcf	3,6	;RP1=0, select bank0
  6219  021A  00DE               	movwf	??_Load_Main
  6220  021B  085E               	movf	??_Load_Main,w
  6221  021C  00B9               	movwf	_UART+3
  6222                           
  6223                           ;OverLoad_B1.c: 188: UART.Data[4] = Load.LightsCount;
  6224  021D  1683               	bsf	3,5	;RP0=1, select bank1
  6225  021E  1303               	bcf	3,6	;RP1=0, select bank1
  6226  021F  086E               	movf	(_Load^(0+128)+31),w
  6227  0220  1283               	bcf	3,5	;RP0=0, select bank0
  6228  0221  1303               	bcf	3,6	;RP1=0, select bank0
  6229  0222  00DE               	movwf	??_Load_Main
  6230  0223  085E               	movf	??_Load_Main,w
  6231  0224  00BA               	movwf	_UART+4
  6232                           
  6233                           ;OverLoad_B1.c: 189: UART.Data[5] = 0;
  6234  0225  01BB               	clrf	_UART+5
  6235                           
  6236                           ;OverLoad_B1.c: 190: UART.Data[6] = 0;
  6237  0226  01BC               	clrf	_UART+6
  6238                           
  6239                           ;OverLoad_B1.c: 191: UART.Data[7] = 0;
  6240  0227  01BD               	clrf	_UART+7
  6241  0228                     l4785:	
  6242                           
  6243                           ;OverLoad_B1.c: 201: }
  6244                           ;OverLoad_B1.c: 202: if (Load.ERROR == 1) {
  6245  0228  1683               	bsf	3,5	;RP0=1, select bank1
  6246  0229  1303               	bcf	3,6	;RP1=0, select bank1
  6247  022A  1ECF               	btfss	_Load^(0+128),5
  6248  022B  0008               	return
  6249                           
  6250                           ;OverLoad_B1.c: 203: Load.ErrorTime++;
  6251  022C  3001               	movlw	1
  6252  022D  07D2               	addwf	(_Load^(0+128)+3),f
  6253  022E  1803               	skipnc
  6254  022F  0AD3               	incf	((_Load+1)^(0+128)+3),f
  6255  0230  3000               	movlw	0
  6256  0231  07D3               	addwf	((_Load+1)^(0+128)+3),f
  6257                           
  6258                           ;OverLoad_B1.c: 204: if (Load.ErrorTime >= 1000) {
  6259  0232  3003               	movlw	3
  6260  0233  0253               	subwf	((_Load+1)^(0+128)+3),w
  6261  0234  30E8               	movlw	232
  6262  0235  1903               	skipnz
  6263  0236  0252               	subwf	(_Load^(0+128)+3),w
  6264  0237  1C03               	skipc
  6265  0238  0008               	return
  6266                           
  6267                           ;OverLoad_B1.c: 205: Load.ErrorTime = 0;
  6268  0239  01D2               	clrf	(_Load^(0+128)+3)
  6269  023A  01D3               	clrf	((_Load+1)^(0+128)+3)
  6270                           
  6271                           ;OverLoad_B1.c: 206: Load.ERROR = 0;
  6272  023B  12CF               	bcf	_Load^(0+128),5
  6273                           
  6274                           ;OverLoad_B1.c: 207: }
  6275                           ;OverLoad_B1.c: 208: }
  6276                           ;OverLoad_B1.c: 209: }
  6277                           ;OverLoad_B1.c: 210: } else {
  6278  023C  0008               	return
  6279  023D                     l731:	
  6280                           
  6281                           ;OverLoad_B1.c: 211: if (myMain.PowerON == 1) {
  6282  023D  1283               	bcf	3,5	;RP0=0, select bank0
  6283  023E  1303               	bcf	3,6	;RP1=0, select bank0
  6284  023F  1C20               	btfss	_myMain,0
  6285  0240  0008               	return
  6286                           
  6287                           ;OverLoad_B1.c: 212: Load.Enable = 1;
  6288  0241  1683               	bsf	3,5	;RP0=1, select bank1
  6289  0242  1303               	bcf	3,6	;RP1=0, select bank1
  6290  0243  144F               	bsf	_Load^(0+128),0
  6291  0244  0008               	return
  6292  0245                     __end_of_Load_Main:	
  6293                           
  6294                           	psect	text30
  6295  0C06                     __ptext30:	
  6296 ;; *************** function _getMain_LoadOK *****************
  6297 ;; Defined at:
  6298 ;;		line 440 in file "../src/Main_B1.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;		None
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;  ok              1    2[BANK0 ] unsigned char 
  6303 ;; Return value:  Size  Location     Type
  6304 ;;                  1    wreg      unsigned char 
  6305 ;; Registers used:
  6306 ;;		wreg, status,2, pclath, cstack
  6307 ;; Tracked objects:
  6308 ;;		On entry : 0/0
  6309 ;;		On exit  : 0/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6312 ;;      Params:         0       0       0       0
  6313 ;;      Locals:         0       1       0       0
  6314 ;;      Temps:          0       1       0       0
  6315 ;;      Totals:         0       2       0       0
  6316 ;;Total ram usage:        2 bytes
  6317 ;; Hardware stack levels used:    1
  6318 ;; Hardware stack levels required when called:    4
  6319 ;; This function calls:
  6320 ;;		_getLightsControl_OK
  6321 ;; This function is called by:
  6322 ;;		_Load_Main
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           
  6327                           ;psect for function _getMain_LoadOK
  6328  0C06                     _getMain_LoadOK:	
  6329                           
  6330                           ;Main_B1.c: 441: char ok = 0;
  6331                           
  6332                           ;incstack = 0
  6333                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
  6334  0C06  1283               	bcf	3,5	;RP0=0, select bank0
  6335  0C07  1303               	bcf	3,6	;RP1=0, select bank0
  6336  0C08  01D7               	clrf	getMain_LoadOK@ok
  6337                           
  6338                           ;Main_B1.c: 444: ok = getLightsControl_OK() == 1 ? 1 : 0;
  6339  0C09  158A  239A         	fcall	_getLightsControl_OK
  6340  0C0B  3A01               	xorlw	1
  6341  0C0C  3000               	movlw	0
  6342  0C0D  1903               	skipnz
  6343  0C0E  3001               	movlw	1
  6344  0C0F  1283               	bcf	3,5	;RP0=0, select bank0
  6345  0C10  1303               	bcf	3,6	;RP1=0, select bank0
  6346  0C11  00D6               	movwf	??_getMain_LoadOK
  6347  0C12  0856               	movf	??_getMain_LoadOK,w
  6348  0C13  00D7               	movwf	getMain_LoadOK@ok
  6349                           
  6350                           ;Main_B1.c: 449: return ok;
  6351  0C14  0857               	movf	getMain_LoadOK@ok,w
  6352  0C15  0008               	return
  6353  0C16                     __end_of_getMain_LoadOK:	
  6354                           
  6355                           	psect	text31
  6356  0B9A                     __ptext31:	
  6357 ;; *************** function _getLightsControl_OK *****************
  6358 ;; Defined at:
  6359 ;;		line 260 in file "../src/TriacRelay_B1.c"
  6360 ;; Parameters:    Size  Location     Type
  6361 ;;		None
  6362 ;; Auto vars:     Size  Location     Type
  6363 ;;  loadok          1    0[BANK0 ] unsigned char 
  6364 ;; Return value:  Size  Location     Type
  6365 ;;                  1    wreg      unsigned char 
  6366 ;; Registers used:
  6367 ;;		wreg, status,2
  6368 ;; Tracked objects:
  6369 ;;		On entry : 0/0
  6370 ;;		On exit  : 0/0
  6371 ;;		Unchanged: 0/0
  6372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6373 ;;      Params:         0       0       0       0
  6374 ;;      Locals:         0       1       0       0
  6375 ;;      Temps:          0       0       0       0
  6376 ;;      Totals:         0       1       0       0
  6377 ;;Total ram usage:        1 bytes
  6378 ;; Hardware stack levels used:    1
  6379 ;; Hardware stack levels required when called:    3
  6380 ;; This function calls:
  6381 ;;		Nothing
  6382 ;; This function is called by:
  6383 ;;		_getMain_LoadOK
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           
  6388                           ;psect for function _getLightsControl_OK
  6389  0B9A                     _getLightsControl_OK:	
  6390                           
  6391                           ;TriacRelay_B1.c: 261: char loadok = LightsControl.LoadOK == 1 ? 1 : 0;
  6392                           
  6393                           ;incstack = 0
  6394                           ; Regs used in _getLightsControl_OK: [wreg+status,2]
  6395  0B9A  3000               	movlw	0
  6396  0B9B  1283               	bcf	3,5	;RP0=0, select bank0
  6397  0B9C  1303               	bcf	3,6	;RP1=0, select bank0
  6398  0B9D  1935               	btfsc	_LightsControl,2
  6399  0B9E  3001               	movlw	1
  6400  0B9F  00D5               	movwf	getLightsControl_OK@loadok
  6401                           
  6402                           ;TriacRelay_B1.c: 262: return loadok;
  6403  0BA0  0855               	movf	getLightsControl_OK@loadok,w
  6404  0BA1  0008               	return
  6405  0BA2                     __end_of_getLightsControl_OK:	
  6406                           
  6407                           	psect	text32
  6408  0C27                     __ptext32:	
  6409 ;; *************** function _getMain_Lights_Count *****************
  6410 ;; Defined at:
  6411 ;;		line 410 in file "../src/Main_B1.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;		None
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;  status1         1    4[BANK0 ] unsigned char 
  6416 ;;  status3         1    3[BANK0 ] unsigned char 
  6417 ;;  status2         1    2[BANK0 ] unsigned char 
  6418 ;;  count           1    1[BANK0 ] unsigned char 
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      unsigned char 
  6421 ;; Registers used:
  6422 ;;		wreg, status,2, status,0
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6428 ;;      Params:         0       0       0       0
  6429 ;;      Locals:         0       4       0       0
  6430 ;;      Temps:          0       1       0       0
  6431 ;;      Totals:         0       5       0       0
  6432 ;;Total ram usage:        5 bytes
  6433 ;; Hardware stack levels used:    1
  6434 ;; Hardware stack levels required when called:    3
  6435 ;; This function calls:
  6436 ;;		Nothing
  6437 ;; This function is called by:
  6438 ;;		_Load_Main
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442                           
  6443                           ;psect for function _getMain_Lights_Count
  6444  0C27                     _getMain_Lights_Count:	
  6445                           
  6446                           ;Main_B1.c: 411: char status1 = 0, status2 = 0, status3 = 0, count = 0;
  6447                           
  6448                           ;incstack = 0
  6449                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  6450  0C27  1283               	bcf	3,5	;RP0=0, select bank0
  6451  0C28  1303               	bcf	3,6	;RP1=0, select bank0
  6452  0C29  01D9               	clrf	getMain_Lights_Count@status1
  6453  0C2A  01D7               	clrf	getMain_Lights_Count@status2
  6454  0C2B  01D8               	clrf	getMain_Lights_Count@status3
  6455  0C2C  01D6               	clrf	getMain_Lights_Count@count
  6456                           
  6457                           ;Main_B1.c: 427: status1 = Lights1.Loop == 1 ? 1 : 0;
  6458  0C2D  3000               	movlw	0
  6459  0C2E  18C3               	btfsc	_Lights1+1,1
  6460  0C2F  3001               	movlw	1
  6461  0C30  00D9               	movwf	getMain_Lights_Count@status1
  6462                           
  6463                           ;Main_B1.c: 436: return count = (status1 + status2 + status3);
  6464  0C31  0857               	movf	getMain_Lights_Count@status2,w
  6465  0C32  0759               	addwf	getMain_Lights_Count@status1,w
  6466  0C33  00D5               	movwf	??_getMain_Lights_Count
  6467  0C34  0858               	movf	getMain_Lights_Count@status3,w
  6468  0C35  0755               	addwf	??_getMain_Lights_Count,w
  6469  0C36  00D6               	movwf	getMain_Lights_Count@count
  6470  0C37  0008               	return
  6471  0C38                     __end_of_getMain_Lights_Count:	
  6472                           
  6473                           	psect	text33
  6474  0F6C                     __ptext33:	
  6475 ;; *************** function ___lwdiv *****************
  6476 ;; Defined at:
  6477 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;  divisor         2    0[BANK0 ] unsigned int 
  6480 ;;  dividend        2    2[BANK0 ] unsigned int 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  quotient        2    5[BANK0 ] unsigned int 
  6483 ;;  counter         1    7[BANK0 ] unsigned char 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  2    0[BANK0 ] unsigned int 
  6486 ;; Registers used:
  6487 ;;		wreg, status,2, status,0
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6493 ;;      Params:         0       4       0       0
  6494 ;;      Locals:         0       3       0       0
  6495 ;;      Temps:          0       1       0       0
  6496 ;;      Totals:         0       8       0       0
  6497 ;;Total ram usage:        8 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    3
  6500 ;; This function calls:
  6501 ;;		Nothing
  6502 ;; This function is called by:
  6503 ;;		_Load_Main
  6504 ;;		_getPIR_AD
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           
  6509                           ;psect for function ___lwdiv
  6510  0F6C                     ___lwdiv:	
  6511                           
  6512                           ;incstack = 0
  6513                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6514  0F6C  1283               	bcf	3,5	;RP0=0, select bank0
  6515  0F6D  1303               	bcf	3,6	;RP1=0, select bank0
  6516  0F6E  01DA               	clrf	___lwdiv@quotient
  6517  0F6F  01DB               	clrf	___lwdiv@quotient+1
  6518  0F70  0856               	movf	___lwdiv@divisor+1,w
  6519  0F71  0455               	iorwf	___lwdiv@divisor,w
  6520  0F72  1903               	skipnz
  6521  0F73  2FA5               	goto	l3361
  6522  0F74  01DC               	clrf	___lwdiv@counter
  6523  0F75  0ADC               	incf	___lwdiv@counter,f
  6524  0F76                     l3349:	
  6525  0F76  1BD6               	btfsc	___lwdiv@divisor+1,7
  6526  0F77  2F84               	goto	l3351
  6527  0F78  3001               	movlw	1
  6528  0F79                     u2915:	
  6529  0F79  1003               	clrc
  6530  0F7A  0DD5               	rlf	___lwdiv@divisor,f
  6531  0F7B  0DD6               	rlf	___lwdiv@divisor+1,f
  6532  0F7C  3EFF               	addlw	-1
  6533  0F7D  1D03               	skipz
  6534  0F7E  2F79               	goto	u2915
  6535  0F7F  3001               	movlw	1
  6536  0F80  00D9               	movwf	??___lwdiv
  6537  0F81  0859               	movf	??___lwdiv,w
  6538  0F82  07DC               	addwf	___lwdiv@counter,f
  6539  0F83  2F76               	goto	l3349
  6540  0F84                     l3351:	
  6541  0F84  3001               	movlw	1
  6542  0F85                     u2935:	
  6543  0F85  1003               	clrc
  6544  0F86  0DDA               	rlf	___lwdiv@quotient,f
  6545  0F87  0DDB               	rlf	___lwdiv@quotient+1,f
  6546  0F88  3EFF               	addlw	-1
  6547  0F89  1D03               	skipz
  6548  0F8A  2F85               	goto	u2935
  6549  0F8B  0856               	movf	___lwdiv@divisor+1,w
  6550  0F8C  0258               	subwf	___lwdiv@dividend+1,w
  6551  0F8D  1D03               	skipz
  6552  0F8E  2F91               	goto	u2945
  6553  0F8F  0855               	movf	___lwdiv@divisor,w
  6554  0F90  0257               	subwf	___lwdiv@dividend,w
  6555  0F91                     u2945:	
  6556  0F91  1C03               	skipc
  6557  0F92  2F9A               	goto	l3357
  6558  0F93  0855               	movf	___lwdiv@divisor,w
  6559  0F94  02D7               	subwf	___lwdiv@dividend,f
  6560  0F95  0856               	movf	___lwdiv@divisor+1,w
  6561  0F96  1C03               	skipc
  6562  0F97  03D8               	decf	___lwdiv@dividend+1,f
  6563  0F98  02D8               	subwf	___lwdiv@dividend+1,f
  6564  0F99  145A               	bsf	___lwdiv@quotient,0
  6565  0F9A                     l3357:	
  6566  0F9A  3001               	movlw	1
  6567  0F9B                     u2955:	
  6568  0F9B  1003               	clrc
  6569  0F9C  0CD6               	rrf	___lwdiv@divisor+1,f
  6570  0F9D  0CD5               	rrf	___lwdiv@divisor,f
  6571  0F9E  3EFF               	addlw	-1
  6572  0F9F  1D03               	skipz
  6573  0FA0  2F9B               	goto	u2955
  6574  0FA1  3001               	movlw	1
  6575  0FA2  02DC               	subwf	___lwdiv@counter,f
  6576  0FA3  1D03               	btfss	3,2
  6577  0FA4  2F84               	goto	l3351
  6578  0FA5                     l3361:	
  6579  0FA5  085B               	movf	___lwdiv@quotient+1,w
  6580  0FA6  01D6               	clrf	?___lwdiv+1
  6581  0FA7  07D6               	addwf	?___lwdiv+1,f
  6582  0FA8  085A               	movf	___lwdiv@quotient,w
  6583  0FA9  01D5               	clrf	?___lwdiv
  6584  0FAA  07D5               	addwf	?___lwdiv,f
  6585  0FAB  0008               	return
  6586  0FAC                     __end_of___lwdiv:	
  6587                           
  6588                           	psect	text34
  6589  0B78                     __ptext34:	
  6590 ;; *************** function _Load_Initialization *****************
  6591 ;; Defined at:
  6592 ;;		line 9 in file "../src/OverLoad_B1.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;		None
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;		None
  6597 ;; Return value:  Size  Location     Type
  6598 ;;		None               void
  6599 ;; Registers used:
  6600 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6606 ;;      Params:         0       0       0       0
  6607 ;;      Locals:         0       0       0       0
  6608 ;;      Temps:          0       0       0       0
  6609 ;;      Totals:         0       0       0       0
  6610 ;;Total ram usage:        0 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; Hardware stack levels required when called:    4
  6613 ;; This function calls:
  6614 ;;		_setLoad_AH_AL_Restore
  6615 ;; This function is called by:
  6616 ;;		_main
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           
  6621                           ;psect for function _Load_Initialization
  6622  0B78                     _Load_Initialization:	
  6623                           
  6624                           ;OverLoad_B1.c: 10: Load.OK = 1;
  6625                           
  6626                           ;incstack = 0
  6627                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6628  0B78  1683               	bsf	3,5	;RP0=1, select bank1
  6629  0B79  1303               	bcf	3,6	;RP1=0, select bank1
  6630  0B7A  17CF               	bsf	_Load^(0+128),7
  6631                           
  6632                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6633  0B7B  158A  24E3         	fcall	_setLoad_AH_AL_Restore
  6634  0B7D  0008               	return
  6635  0B7E                     __end_of_Load_Initialization:	
  6636                           
  6637                           	psect	text35
  6638  0CE3                     __ptext35:	
  6639 ;; *************** function _setLoad_AH_AL_Restore *****************
  6640 ;; Defined at:
  6641 ;;		line 239 in file "../src/OverLoad_B1.c"
  6642 ;; Parameters:    Size  Location     Type
  6643 ;;		None
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;  i               1    1[BANK0 ] unsigned char 
  6646 ;; Return value:  Size  Location     Type
  6647 ;;		None               void
  6648 ;; Registers used:
  6649 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6650 ;; Tracked objects:
  6651 ;;		On entry : 0/0
  6652 ;;		On exit  : 0/0
  6653 ;;		Unchanged: 0/0
  6654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6655 ;;      Params:         0       0       0       0
  6656 ;;      Locals:         0       1       0       0
  6657 ;;      Temps:          0       1       0       0
  6658 ;;      Totals:         0       2       0       0
  6659 ;;Total ram usage:        2 bytes
  6660 ;; Hardware stack levels used:    1
  6661 ;; Hardware stack levels required when called:    3
  6662 ;; This function calls:
  6663 ;;		Nothing
  6664 ;; This function is called by:
  6665 ;;		_Load_Initialization
  6666 ;;		_Load_Main
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           
  6671                           ;psect for function _setLoad_AH_AL_Restore
  6672  0CE3                     _setLoad_AH_AL_Restore:	
  6673                           
  6674                           ;OverLoad_B1.c: 240: char i;
  6675                           ;OverLoad_B1.c: 241: for (i = 0; i < 5; i++) {
  6676                           
  6677                           ;incstack = 0
  6678                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6679  0CE3  1283               	bcf	3,5	;RP0=0, select bank0
  6680  0CE4  1303               	bcf	3,6	;RP1=0, select bank0
  6681  0CE5  01D6               	clrf	setLoad_AH_AL_Restore@i
  6682  0CE6                     L20:	
  6683  0CE6  3005               	movlw	5
  6684  0CE7  0256               	subwf	setLoad_AH_AL_Restore@i,w
  6685  0CE8  1803               	btfsc	3,0
  6686  0CE9  0008               	return
  6687                           
  6688                           ;OverLoad_B1.c: 242: Load.AH[i] = 0;
  6689  0CEA  0856               	movf	setLoad_AH_AL_Restore@i,w
  6690  0CEB  3ED9               	addlw	(_Load+10)& (0+255)
  6691  0CEC  0084               	movwf	4
  6692  0CED  1383               	bcf	3,7	;select IRP bank1
  6693  0CEE  0180               	clrf	0
  6694                           
  6695                           ;OverLoad_B1.c: 243: Load.AL[i] = 0xff;
  6696  0CEF  30FF               	movlw	255
  6697  0CF0  00D5               	movwf	??_setLoad_AH_AL_Restore
  6698  0CF1  0856               	movf	setLoad_AH_AL_Restore@i,w
  6699  0CF2  3EDE               	addlw	(_Load+15)& (0+255)
  6700  0CF3  0084               	movwf	4
  6701  0CF4  0855               	movf	??_setLoad_AH_AL_Restore,w
  6702  0CF5  0080               	movwf	0
  6703  0CF6  3001               	movlw	1
  6704  0CF7  00D5               	movwf	??_setLoad_AH_AL_Restore
  6705  0CF8  0855               	movf	??_setLoad_AH_AL_Restore,w
  6706  0CF9  07D6               	addwf	setLoad_AH_AL_Restore@i,f
  6707  0CFA  2CE6               	goto	L20
  6708  0CFB                     __end_of_setLoad_AH_AL_Restore:	
  6709                           
  6710                           	psect	text36
  6711  0EF2                     __ptext36:	
  6712 ;; *************** function _Lights_Main *****************
  6713 ;; Defined at:
  6714 ;;		line 54 in file "../src/TriacRelay_B1.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;		None
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;		None
  6719 ;; Return value:  Size  Location     Type
  6720 ;;		None               void
  6721 ;; Registers used:
  6722 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6728 ;;      Params:         0       0       0       0
  6729 ;;      Locals:         0       2       0       0
  6730 ;;      Temps:          0       3       0       0
  6731 ;;      Totals:         0       5       0       0
  6732 ;;Total ram usage:        5 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:    7
  6735 ;; This function calls:
  6736 ;;		_Lights_Close
  6737 ;;		_Lights_Control
  6738 ;;		_getLoad_OK
  6739 ;;		_getMain_All_Error_Status
  6740 ;;		_getMain_LightsStatus
  6741 ;;		_setLights_Main
  6742 ;; This function is called by:
  6743 ;;		_main
  6744 ;; This function uses a non-reentrant model
  6745 ;;
  6746                           
  6747                           
  6748                           ;psect for function _Lights_Main
  6749  0EF2                     _Lights_Main:	
  6750                           
  6751                           ;TriacRelay_B1.c: 57: if (getMain_All_Error_Status(0) == 0) {
  6752                           
  6753                           ;incstack = 0
  6754                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6755  0EF2  3000               	movlw	0
  6756  0EF3  158A  26B7  158A   	fcall	_getMain_All_Error_Status
  6757  0EF6  3800               	iorlw	0
  6758  0EF7  1D03               	skipz
  6759  0EF8  2F1F               	goto	l1148
  6760                           
  6761                           ;TriacRelay_B1.c: 58: if (LightsControl.LoadOK == 1) {
  6762  0EF9  1283               	bcf	3,5	;RP0=0, select bank0
  6763  0EFA  1303               	bcf	3,6	;RP1=0, select bank0
  6764  0EFB  1D35               	btfss	_LightsControl,2
  6765  0EFC  2F22               	goto	l4809
  6766                           
  6767                           ;TriacRelay_B1.c: 59: LightsControl.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus()
      +                           == 0 ? 0 : LightsControl.LoadOK;
  6768  0EFD  158A  23BA  158A   	fcall	_getLoad_OK
  6769  0F00  3A01               	xorlw	1
  6770  0F01  1903               	skipnz
  6771  0F02  2F16               	goto	l4805
  6772  0F03  158A  261D  158A   	fcall	_getMain_LightsStatus
  6773  0F06  3A00               	xorlw	0
  6774  0F07  1903               	skipnz
  6775  0F08  2F16               	goto	l4805
  6776  0F09  1283               	bcf	3,5	;RP0=0, select bank0
  6777  0F0A  1303               	bcf	3,6	;RP1=0, select bank0
  6778  0F0B  0C35               	rrf	_LightsControl,w
  6779  0F0C  00E1               	movwf	??_Lights_Main
  6780  0F0D  0C61               	rrf	??_Lights_Main,w
  6781  0F0E  3901               	andlw	1
  6782  0F0F  00E2               	movwf	??_Lights_Main+1
  6783  0F10  01E3               	clrf	??_Lights_Main+2
  6784  0F11  0862               	movf	??_Lights_Main+1,w
  6785  0F12  00E4               	movwf	_Lights_Main$4485
  6786  0F13  0863               	movf	??_Lights_Main+2,w
  6787  0F14  00E5               	movwf	_Lights_Main$4485+1
  6788  0F15  2F1A               	goto	l4807
  6789  0F16                     l4805:	
  6790  0F16  1283               	bcf	3,5	;RP0=0, select bank0
  6791  0F17  1303               	bcf	3,6	;RP1=0, select bank0
  6792  0F18  01E4               	clrf	_Lights_Main$4485
  6793  0F19  01E5               	clrf	_Lights_Main$4485+1
  6794  0F1A                     l4807:	
  6795  0F1A  0864               	movf	_Lights_Main$4485,w
  6796  0F1B  1135               	bcf	_LightsControl,2
  6797  0F1C  1D03               	skipz
  6798  0F1D  1535               	bsf	_LightsControl,2
  6799                           
  6800                           ;TriacRelay_B1.c: 60: }
  6801                           ;TriacRelay_B1.c: 61: } else {
  6802  0F1E  2F22               	goto	l4809
  6803  0F1F                     l1148:	
  6804                           
  6805                           ;TriacRelay_B1.c: 62: LightsControl.LoadOK = 0;
  6806  0F1F  1283               	bcf	3,5	;RP0=0, select bank0
  6807  0F20  1303               	bcf	3,6	;RP1=0, select bank0
  6808  0F21  1135               	bcf	_LightsControl,2
  6809  0F22                     l4809:	
  6810                           
  6811                           ;TriacRelay_B1.c: 63: }
  6812                           ;TriacRelay_B1.c: 67: setLights_Main(1);
  6813  0F22  3001               	movlw	1
  6814  0F23  158A  25CB  158A   	fcall	_setLights_Main
  6815                           
  6816                           ;TriacRelay_B1.c: 68: Lights_Control(1);
  6817  0F26  3001               	movlw	1
  6818  0F27  118A  26C7  158A   	fcall	_Lights_Control
  6819                           
  6820                           ;TriacRelay_B1.c: 81: Lights_Close();
  6821  0F2A  158A  24B9         	fcall	_Lights_Close
  6822  0F2C  0008               	return
  6823  0F2D                     __end_of_Lights_Main:	
  6824                           
  6825                           	psect	text37
  6826  0DCB                     __ptext37:	
  6827 ;; *************** function _setLights_Main *****************
  6828 ;; Defined at:
  6829 ;;		line 93 in file "../src/TriacRelay_B1.c"
  6830 ;; Parameters:    Size  Location     Type
  6831 ;;  lights          1    wreg     unsigned char 
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;  lights          1   11[BANK0 ] unsigned char 
  6834 ;; Return value:  Size  Location     Type
  6835 ;;		None               void
  6836 ;; Registers used:
  6837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6843 ;;      Params:         0       0       0       0
  6844 ;;      Locals:         0       1       0       0
  6845 ;;      Temps:          0       0       0       0
  6846 ;;      Totals:         0       1       0       0
  6847 ;;Total ram usage:        1 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; Hardware stack levels required when called:    6
  6850 ;; This function calls:
  6851 ;;		_LightsPointSelect
  6852 ;;		_setLights
  6853 ;; This function is called by:
  6854 ;;		_Lights_Main
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           
  6859                           ;psect for function _setLights_Main
  6860  0DCB                     _setLights_Main:	
  6861                           
  6862                           ;incstack = 0
  6863                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6864                           ;setLights_Main@lights stored from wreg
  6865  0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  6866  0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  6867  0DCD  00E0               	movwf	setLights_Main@lights
  6868                           
  6869                           ;TriacRelay_B1.c: 94: LightsPointSelect(lights);
  6870  0DCE  0860               	movf	setLights_Main@lights,w
  6871  0DCF  158A  23D0  158A   	fcall	_LightsPointSelect
  6872                           
  6873                           ;TriacRelay_B1.c: 95: if (Lights->GO == 0) {
  6874  0DD2  1283               	bcf	3,5	;RP0=0, select bank0
  6875  0DD3  1303               	bcf	3,6	;RP1=0, select bank0
  6876  0DD4  0834               	movf	_Lights,w
  6877  0DD5  0084               	movwf	4
  6878  0DD6  1383               	bcf	3,7	;select IRP bank0
  6879  0DD7  1880               	btfsc	0,1
  6880  0DD8  0008               	return
  6881                           
  6882                           ;TriacRelay_B1.c: 96: if (Lights->Trigger == 1) {
  6883  0DD9  0834               	movf	_Lights,w
  6884  0DDA  0084               	movwf	4
  6885  0DDB  1D80               	btfss	0,3
  6886  0DDC  0008               	return
  6887                           
  6888                           ;TriacRelay_B1.c: 97: if (LightsControl.LoadOK == 0) {
  6889  0DDD  1935               	btfsc	_LightsControl,2
  6890  0DDE  0008               	return
  6891                           
  6892                           ;TriacRelay_B1.c: 98: Lights->Trigger = 0;
  6893  0DDF  0834               	movf	_Lights,w
  6894  0DE0  0084               	movwf	4
  6895  0DE1  1180               	bcf	0,3
  6896                           
  6897                           ;TriacRelay_B1.c: 100: if (Lights->Switch == 1) {
  6898  0DE2  0834               	movf	_Lights,w
  6899  0DE3  0084               	movwf	4
  6900  0DE4  1E00               	btfss	0,4
  6901  0DE5  2DEC               	goto	l4413
  6902                           
  6903                           ;TriacRelay_B1.c: 101: setLights(lights, 1);
  6904  0DE6  01DD               	clrf	setLights@status
  6905  0DE7  0ADD               	incf	setLights@status,f
  6906  0DE8  0860               	movf	setLights_Main@lights,w
  6907  0DE9  118A  2734         	fcall	_setLights
  6908                           
  6909                           ;TriacRelay_B1.c: 102: } else {
  6910  0DEB  0008               	return
  6911  0DEC                     l4413:	
  6912                           
  6913                           ;TriacRelay_B1.c: 103: setLights(lights, 0);
  6914  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
  6915  0DED  1303               	bcf	3,6	;RP1=0, select bank0
  6916  0DEE  01DD               	clrf	setLights@status
  6917  0DEF  0860               	movf	setLights_Main@lights,w
  6918  0DF0  118A  2734         	fcall	_setLights
  6919  0DF2  0008               	return
  6920  0DF3                     __end_of_setLights_Main:	
  6921                           
  6922                           	psect	text38
  6923  0734                     __ptext38:	
  6924 ;; *************** function _setLights *****************
  6925 ;; Defined at:
  6926 ;;		line 111 in file "../src/TriacRelay_B1.c"
  6927 ;; Parameters:    Size  Location     Type
  6928 ;;  lights          1    wreg     unsigned char 
  6929 ;;  status          1    8[BANK0 ] unsigned char 
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;  lights          1   10[BANK0 ] unsigned char 
  6932 ;; Return value:  Size  Location     Type
  6933 ;;		None               void
  6934 ;; Registers used:
  6935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6936 ;; Tracked objects:
  6937 ;;		On entry : 0/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6941 ;;      Params:         0       1       0       0
  6942 ;;      Locals:         0       1       0       0
  6943 ;;      Temps:          0       1       0       0
  6944 ;;      Totals:         0       3       0       0
  6945 ;;Total ram usage:        3 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    5
  6948 ;; This function calls:
  6949 ;;		_LightsPointSelect
  6950 ;;		_getMain_All_Error_Status
  6951 ;;		_setLights_Line
  6952 ;; This function is called by:
  6953 ;;		_setLights_Main
  6954 ;; This function uses a non-reentrant model
  6955 ;;
  6956                           
  6957                           
  6958                           ;psect for function _setLights
  6959  0734                     _setLights:	
  6960                           
  6961                           ;incstack = 0
  6962                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6963                           ;setLights@lights stored from wreg
  6964  0734  1283               	bcf	3,5	;RP0=0, select bank0
  6965  0735  1303               	bcf	3,6	;RP1=0, select bank0
  6966  0736  00DF               	movwf	setLights@lights
  6967                           
  6968                           ;TriacRelay_B1.c: 113: LightsPointSelect(lights);
  6969  0737  085F               	movf	setLights@lights,w
  6970  0738  158A  23D0  118A   	fcall	_LightsPointSelect
  6971                           
  6972                           ;TriacRelay_B1.c: 116: LightsControl.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
  6973  073B  3000               	movlw	0
  6974  073C  158A  26B7  118A   	fcall	_getMain_All_Error_Status
  6975  073F  3A00               	xorlw	0
  6976  0740  3000               	movlw	0
  6977  0741  1903               	skipnz
  6978  0742  3001               	movlw	1
  6979  0743  1283               	bcf	3,5	;RP0=0, select bank0
  6980  0744  1303               	bcf	3,6	;RP1=0, select bank0
  6981  0745  00DE               	movwf	??_setLights
  6982  0746  0DDE               	rlf	??_setLights,f
  6983  0747  0DDE               	rlf	??_setLights,f
  6984  0748  0835               	movf	_LightsControl,w
  6985  0749  065E               	xorwf	??_setLights,w
  6986  074A  39FB               	andlw	-5
  6987  074B  065E               	xorwf	??_setLights,w
  6988  074C  00B5               	movwf	_LightsControl
  6989                           
  6990                           ;TriacRelay_B1.c: 120: Lights->GO = 1;
  6991  074D  0834               	movf	_Lights,w
  6992  074E  0084               	movwf	4
  6993  074F  1383               	bcf	3,7	;select IRP bank0
  6994  0750  1480               	bsf	0,1
  6995                           
  6996                           ;TriacRelay_B1.c: 121: if (status == 1) {
  6997  0751  085D               	movf	setLights@status,w
  6998  0752  3A01               	xorlw	1
  6999  0753  1D03               	skipz
  7000  0754  2F72               	goto	l4227
  7001                           
  7002                           ;TriacRelay_B1.c: 122: if (Lights->Status == 0) {
  7003  0755  0834               	movf	_Lights,w
  7004  0756  0084               	movwf	4
  7005  0757  1900               	btfsc	0,2
  7006  0758  2F8D               	goto	l4231
  7007                           
  7008                           ;TriacRelay_B1.c: 123: Lights->Status = 1;
  7009  0759  0834               	movf	_Lights,w
  7010  075A  0084               	movwf	4
  7011  075B  1500               	bsf	0,2
  7012                           
  7013                           ;TriacRelay_B1.c: 124: Lights->Loop = 1;
  7014  075C  0A34               	incf	_Lights,w
  7015  075D  0084               	movwf	4
  7016  075E  1480               	bsf	0,1
  7017                           
  7018                           ;TriacRelay_B1.c: 125: Lights->RelayValue = 10;
  7019  075F  300A               	movlw	10
  7020  0760  00DE               	movwf	??_setLights
  7021  0761  0834               	movf	_Lights,w
  7022  0762  3E06               	addlw	6
  7023  0763  0084               	movwf	4
  7024  0764  085E               	movf	??_setLights,w
  7025  0765  0080               	movwf	0
  7026                           
  7027                           ;TriacRelay_B1.c: 126: Lights->TriacValue = 13;
  7028  0766  300D               	movlw	13
  7029  0767  00DE               	movwf	??_setLights
  7030  0768  0834               	movf	_Lights,w
  7031  0769  3E04               	addlw	4
  7032  076A  0084               	movwf	4
  7033  076B  085E               	movf	??_setLights,w
  7034  076C  0080               	movwf	0
  7035                           
  7036                           ;TriacRelay_B1.c: 127: setLights_Line(lights);
  7037  076D  085F               	movf	setLights@lights,w
  7038  076E  158A  23DC  118A   	fcall	_setLights_Line
  7039                           
  7040                           ;TriacRelay_B1.c: 128: }
  7041                           ;TriacRelay_B1.c: 129: } else {
  7042  0771  2F8D               	goto	l4231
  7043  0772                     l4227:	
  7044                           
  7045                           ;TriacRelay_B1.c: 130: if (Lights->Status == 1) {
  7046  0772  1283               	bcf	3,5	;RP0=0, select bank0
  7047  0773  1303               	bcf	3,6	;RP1=0, select bank0
  7048  0774  0834               	movf	_Lights,w
  7049  0775  0084               	movwf	4
  7050  0776  1383               	bcf	3,7	;select IRP bank0
  7051  0777  1D00               	btfss	0,2
  7052  0778  2F8D               	goto	l4231
  7053                           
  7054                           ;TriacRelay_B1.c: 131: Lights->Status = 0;
  7055  0779  0834               	movf	_Lights,w
  7056  077A  0084               	movwf	4
  7057  077B  1100               	bcf	0,2
  7058                           
  7059                           ;TriacRelay_B1.c: 132: Lights->Loop = 0;
  7060  077C  0A34               	incf	_Lights,w
  7061  077D  0084               	movwf	4
  7062  077E  1080               	bcf	0,1
  7063                           
  7064                           ;TriacRelay_B1.c: 133: Lights->RelayValue = 4;
  7065  077F  3004               	movlw	4
  7066  0780  00DE               	movwf	??_setLights
  7067  0781  0834               	movf	_Lights,w
  7068  0782  3E06               	addlw	6
  7069  0783  0084               	movwf	4
  7070  0784  085E               	movf	??_setLights,w
  7071  0785  0080               	movwf	0
  7072                           
  7073                           ;TriacRelay_B1.c: 134: Lights->TriacValue = 7;
  7074  0786  3007               	movlw	7
  7075  0787  00DE               	movwf	??_setLights
  7076  0788  0834               	movf	_Lights,w
  7077  0789  3E04               	addlw	4
  7078  078A  0084               	movwf	4
  7079  078B  085E               	movf	??_setLights,w
  7080  078C  0080               	movwf	0
  7081  078D                     l4231:	
  7082                           
  7083                           ;TriacRelay_B1.c: 135: }
  7084                           ;TriacRelay_B1.c: 136: }
  7085                           ;TriacRelay_B1.c: 138: if (lights == 1) {
  7086  078D  1283               	bcf	3,5	;RP0=0, select bank0
  7087  078E  1303               	bcf	3,6	;RP1=0, select bank0
  7088  078F  085F               	movf	setLights@lights,w
  7089  0790  3A01               	xorlw	1
  7090  0791  1D03               	skipz
  7091  0792  0008               	return
  7092                           
  7093                           ;TriacRelay_B1.c: 139: RB2 = 1;
  7094  0793  1506               	bsf	6,2	;volatile
  7095  0794  0008               	return
  7096  0795                     __end_of_setLights:	
  7097                           
  7098                           	psect	text39
  7099  0BDC                     __ptext39:	
  7100 ;; *************** function _setLights_Line *****************
  7101 ;; Defined at:
  7102 ;;		line 221 in file "../src/TriacRelay_B1.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  lights          1    wreg     unsigned char 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  lights          1    2[BANK0 ] unsigned char 
  7107 ;; Return value:  Size  Location     Type
  7108 ;;		None               void
  7109 ;; Registers used:
  7110 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7111 ;; Tracked objects:
  7112 ;;		On entry : 0/0
  7113 ;;		On exit  : 0/0
  7114 ;;		Unchanged: 0/0
  7115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7116 ;;      Params:         0       0       0       0
  7117 ;;      Locals:         0       1       0       0
  7118 ;;      Temps:          0       0       0       0
  7119 ;;      Totals:         0       1       0       0
  7120 ;;Total ram usage:        1 bytes
  7121 ;; Hardware stack levels used:    1
  7122 ;; Hardware stack levels required when called:    4
  7123 ;; This function calls:
  7124 ;;		_LightsPointSelect
  7125 ;; This function is called by:
  7126 ;;		_setLights
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           
  7131                           ;psect for function _setLights_Line
  7132  0BDC                     _setLights_Line:	
  7133                           
  7134                           ;incstack = 0
  7135                           ; Regs used in _setLights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7136                           ;setLights_Line@lights stored from wreg
  7137  0BDC  1283               	bcf	3,5	;RP0=0, select bank0
  7138  0BDD  1303               	bcf	3,6	;RP1=0, select bank0
  7139  0BDE  00D7               	movwf	setLights_Line@lights
  7140                           
  7141                           ;TriacRelay_B1.c: 223: Lights1.Line = 0;
  7142  0BDF  1043               	bcf	_Lights1+1,0
  7143                           
  7144                           ;TriacRelay_B1.c: 231: LightsPointSelect(lights);
  7145  0BE0  0857               	movf	setLights_Line@lights,w
  7146  0BE1  158A  23D0         	fcall	_LightsPointSelect
  7147                           
  7148                           ;TriacRelay_B1.c: 232: Lights->Line = 1;
  7149  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  7150  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  7151  0BE5  0A34               	incf	_Lights,w
  7152  0BE6  0084               	movwf	4
  7153  0BE7  1383               	bcf	3,7	;select IRP bank0
  7154  0BE8  1400               	bsf	0,0
  7155  0BE9  0008               	return
  7156  0BEA                     __end_of_setLights_Line:	
  7157                           
  7158                           	psect	text40
  7159  0EB7                     __ptext40:	
  7160 ;; *************** function _getMain_All_Error_Status *****************
  7161 ;; Defined at:
  7162 ;;		line 369 in file "../src/Main_B1.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  command         1    wreg     unsigned char 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  command         1    6[BANK0 ] unsigned char 
  7167 ;;  status          1    7[BANK0 ] unsigned char 
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      unsigned char 
  7170 ;; Registers used:
  7171 ;;		wreg, status,2, status,0, pclath, cstack
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7177 ;;      Params:         0       0       0       0
  7178 ;;      Locals:         0       6       0       0
  7179 ;;      Temps:          0       1       0       0
  7180 ;;      Totals:         0       7       0       0
  7181 ;;Total ram usage:        7 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; Hardware stack levels required when called:    4
  7184 ;; This function calls:
  7185 ;;		_getCDS_Status
  7186 ;; This function is called by:
  7187 ;;		_Load_Main
  7188 ;;		_PIR_Main
  7189 ;;		_Lights_Main
  7190 ;;		_setLights
  7191 ;; This function uses a non-reentrant model
  7192 ;;
  7193                           
  7194                           
  7195                           ;psect for function _getMain_All_Error_Status
  7196  0EB7                     _getMain_All_Error_Status:	
  7197                           
  7198                           ;incstack = 0
  7199                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0+pclath+cstack]
  7200                           ;getMain_All_Error_Status@command stored from wreg
  7201  0EB7  1283               	bcf	3,5	;RP0=0, select bank0
  7202  0EB8  1303               	bcf	3,6	;RP1=0, select bank0
  7203  0EB9  00DB               	movwf	getMain_All_Error_Status@command
  7204                           
  7205                           ;Main_B1.c: 370: char status = 0;
  7206  0EBA  01DC               	clrf	getMain_All_Error_Status@status
  7207                           
  7208                           ;Main_B1.c: 388: if (status == 0 && command != 3) {
  7209  0EBB  08DC               	movf	getMain_All_Error_Status@status,f
  7210  0EBC  1D03               	skipz
  7211  0EBD  2ED4               	goto	l4069
  7212  0EBE  085B               	movf	getMain_All_Error_Status@command,w
  7213  0EBF  3A03               	xorlw	3
  7214  0EC0  1903               	skipnz
  7215  0EC1  2ED4               	goto	l4069
  7216                           
  7217                           ;Main_B1.c: 389: status = Load.ERROR == 1 ? 3 : 0;
  7218  0EC2  1683               	bsf	3,5	;RP0=1, select bank1
  7219  0EC3  1303               	bcf	3,6	;RP1=0, select bank1
  7220  0EC4  1ACF               	btfsc	_Load^(0+128),5
  7221  0EC5  2ECB               	goto	l4067
  7222  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  7223  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  7224  0EC8  01D7               	clrf	_getMain_All_Error_Status$2337
  7225  0EC9  01D8               	clrf	_getMain_All_Error_Status$2337+1
  7226  0ECA  2ED0               	goto	l658
  7227  0ECB                     l4067:	
  7228  0ECB  3003               	movlw	3
  7229  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  7230  0ECD  00D7               	movwf	_getMain_All_Error_Status$2337
  7231  0ECE  3000               	movlw	0
  7232  0ECF  00D8               	movwf	_getMain_All_Error_Status$2337+1
  7233  0ED0                     l658:	
  7234  0ED0  0857               	movf	_getMain_All_Error_Status$2337,w
  7235  0ED1  00D6               	movwf	??_getMain_All_Error_Status
  7236  0ED2  0856               	movf	??_getMain_All_Error_Status,w
  7237  0ED3  00DC               	movwf	getMain_All_Error_Status@status
  7238  0ED4                     l4069:	
  7239                           
  7240                           ;Main_B1.c: 390: }
  7241                           ;Main_B1.c: 402: if (status == 0 && command != 5) {
  7242  0ED4  08DC               	movf	getMain_All_Error_Status@status,f
  7243  0ED5  1D03               	skipz
  7244  0ED6  2EF0               	goto	l659
  7245  0ED7  085B               	movf	getMain_All_Error_Status@command,w
  7246  0ED8  3A05               	xorlw	5
  7247  0ED9  1903               	skipnz
  7248  0EDA  2EF0               	goto	l659
  7249                           
  7250                           ;Main_B1.c: 403: status = getCDS_Status() == 0 ? 5 : 0;
  7251  0EDB  158A  2392  158A   	fcall	_getCDS_Status
  7252  0EDE  3A00               	xorlw	0
  7253  0EDF  1903               	skipnz
  7254  0EE0  2EE6               	goto	l4077
  7255  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  7256  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  7257  0EE3  01D9               	clrf	_getMain_All_Error_Status$2339
  7258  0EE4  01DA               	clrf	_getMain_All_Error_Status$2339+1
  7259  0EE5  2EEC               	goto	l663
  7260  0EE6                     l4077:	
  7261  0EE6  3005               	movlw	5
  7262  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  7263  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  7264  0EE9  00D9               	movwf	_getMain_All_Error_Status$2339
  7265  0EEA  3000               	movlw	0
  7266  0EEB  00DA               	movwf	_getMain_All_Error_Status$2339+1
  7267  0EEC                     l663:	
  7268  0EEC  0859               	movf	_getMain_All_Error_Status$2339,w
  7269  0EED  00D6               	movwf	??_getMain_All_Error_Status
  7270  0EEE  0856               	movf	??_getMain_All_Error_Status,w
  7271  0EEF  00DC               	movwf	getMain_All_Error_Status@status
  7272  0EF0                     l659:	
  7273                           
  7274                           ;Main_B1.c: 404: }
  7275                           ;Main_B1.c: 406: return status;
  7276  0EF0  085C               	movf	getMain_All_Error_Status@status,w
  7277  0EF1  0008               	return
  7278  0EF2                     __end_of_getMain_All_Error_Status:	
  7279                           
  7280                           	psect	text41
  7281  0B92                     __ptext41:	
  7282 ;; *************** function _getCDS_Status *****************
  7283 ;; Defined at:
  7284 ;;		line 40 in file "../src/CDS_B1.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;		None
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;  status          1    0[BANK0 ] unsigned char 
  7289 ;; Return value:  Size  Location     Type
  7290 ;;                  1    wreg      unsigned char 
  7291 ;; Registers used:
  7292 ;;		wreg, status,2
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7298 ;;      Params:         0       0       0       0
  7299 ;;      Locals:         0       1       0       0
  7300 ;;      Temps:          0       0       0       0
  7301 ;;      Totals:         0       1       0       0
  7302 ;;Total ram usage:        1 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    3
  7305 ;; This function calls:
  7306 ;;		Nothing
  7307 ;; This function is called by:
  7308 ;;		_getMain_All_Error_Status
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           
  7313                           ;psect for function _getCDS_Status
  7314  0B92                     _getCDS_Status:	
  7315                           
  7316                           ;CDS_B1.c: 41: char status = _CDS.Status == 1 ? 1 : 0;
  7317                           
  7318                           ;incstack = 0
  7319                           ; Regs used in _getCDS_Status: [wreg+status,2]
  7320  0B92  3000               	movlw	0
  7321  0B93  1283               	bcf	3,5	;RP0=0, select bank0
  7322  0B94  1303               	bcf	3,6	;RP1=0, select bank0
  7323  0B95  1A27               	btfsc	__CDS,4
  7324  0B96  3001               	movlw	1
  7325  0B97  00D5               	movwf	getCDS_Status@status
  7326                           
  7327                           ;CDS_B1.c: 42: return status;
  7328  0B98  0855               	movf	getCDS_Status@status,w
  7329  0B99  0008               	return
  7330  0B9A                     __end_of_getCDS_Status:	
  7331                           
  7332                           	psect	text42
  7333  0BBA                     __ptext42:	
  7334 ;; *************** function _getLoad_OK *****************
  7335 ;; Defined at:
  7336 ;;		line 219 in file "../src/OverLoad_B1.c"
  7337 ;; Parameters:    Size  Location     Type
  7338 ;;		None
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;  ok              1    0[BANK0 ] unsigned char 
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  1    wreg      unsigned char 
  7343 ;; Registers used:
  7344 ;;		wreg, status,2
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7350 ;;      Params:         0       0       0       0
  7351 ;;      Locals:         0       1       0       0
  7352 ;;      Temps:          0       0       0       0
  7353 ;;      Totals:         0       1       0       0
  7354 ;;Total ram usage:        1 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    3
  7357 ;; This function calls:
  7358 ;;		Nothing
  7359 ;; This function is called by:
  7360 ;;		_Lights_Main
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           
  7365                           ;psect for function _getLoad_OK
  7366  0BBA                     _getLoad_OK:	
  7367                           
  7368                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
  7369                           
  7370                           ;incstack = 0
  7371                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7372  0BBA  3000               	movlw	0
  7373  0BBB  1683               	bsf	3,5	;RP0=1, select bank1
  7374  0BBC  1303               	bcf	3,6	;RP1=0, select bank1
  7375  0BBD  1BCF               	btfsc	_Load^(0+128),7
  7376  0BBE  3001               	movlw	1
  7377  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
  7378  0BC0  1303               	bcf	3,6	;RP1=0, select bank0
  7379  0BC1  00D5               	movwf	getLoad_OK@ok
  7380                           
  7381                           ;OverLoad_B1.c: 221: return ok;
  7382  0BC2  0855               	movf	getLoad_OK@ok,w
  7383  0BC3  0008               	return
  7384  0BC4                     __end_of_getLoad_OK:	
  7385                           
  7386                           	psect	text43
  7387  06C7                     __ptext43:	
  7388 ;; *************** function _Lights_Control *****************
  7389 ;; Defined at:
  7390 ;;		line 155 in file "../src/TriacRelay_B1.c"
  7391 ;; Parameters:    Size  Location     Type
  7392 ;;  lights          1    wreg     unsigned char 
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;  lights          1    6[BANK0 ] unsigned char 
  7395 ;; Return value:  Size  Location     Type
  7396 ;;		None               void
  7397 ;; Registers used:
  7398 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7399 ;; Tracked objects:
  7400 ;;		On entry : 0/0
  7401 ;;		On exit  : 0/0
  7402 ;;		Unchanged: 0/0
  7403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7404 ;;      Params:         0       0       0       0
  7405 ;;      Locals:         0       3       0       0
  7406 ;;      Temps:          0       2       0       0
  7407 ;;      Totals:         0       5       0       0
  7408 ;;Total ram usage:        5 bytes
  7409 ;; Hardware stack levels used:    1
  7410 ;; Hardware stack levels required when called:    4
  7411 ;; This function calls:
  7412 ;;		_LightsPointSelect
  7413 ;; This function is called by:
  7414 ;;		_Lights_Main
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           
  7419                           ;psect for function _Lights_Control
  7420  06C7                     _Lights_Control:	
  7421                           
  7422                           ;incstack = 0
  7423                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7424                           ;Lights_Control@lights stored from wreg
  7425  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  7426  06C8  1303               	bcf	3,6	;RP1=0, select bank0
  7427  06C9  00DB               	movwf	Lights_Control@lights
  7428                           
  7429                           ;TriacRelay_B1.c: 156: LightsPointSelect(lights);
  7430  06CA  085B               	movf	Lights_Control@lights,w
  7431  06CB  158A  23D0  118A   	fcall	_LightsPointSelect
  7432                           
  7433                           ;TriacRelay_B1.c: 157: if (Lights->GO == 1) {
  7434  06CE  1283               	bcf	3,5	;RP0=0, select bank0
  7435  06CF  1303               	bcf	3,6	;RP1=0, select bank0
  7436  06D0  0834               	movf	_Lights,w
  7437  06D1  0084               	movwf	4
  7438  06D2  1383               	bcf	3,7	;select IRP bank0
  7439  06D3  1C80               	btfss	0,1
  7440  06D4  0008               	return
  7441                           
  7442                           ;TriacRelay_B1.c: 158: Lights->Time++;
  7443  06D5  3001               	movlw	1
  7444  06D6  00D7               	movwf	??_Lights_Control
  7445  06D7  0834               	movf	_Lights,w
  7446  06D8  3E02               	addlw	2
  7447  06D9  0084               	movwf	4
  7448  06DA  0857               	movf	??_Lights_Control,w
  7449  06DB  0780               	addwf	0,f
  7450                           
  7451                           ;TriacRelay_B1.c: 159: if (Lights->Time >= Lights->RelayValue && Lights->RelaySet == 0) 
      +                          {
  7452  06DC  0834               	movf	_Lights,w
  7453  06DD  3E06               	addlw	6
  7454  06DE  0084               	movwf	4
  7455  06DF  0800               	movf	0,w
  7456  06E0  00D7               	movwf	??_Lights_Control
  7457  06E1  0834               	movf	_Lights,w
  7458  06E2  3E02               	addlw	2
  7459  06E3  0084               	movwf	4
  7460  06E4  0800               	movf	0,w
  7461  06E5  00D8               	movwf	??_Lights_Control+1
  7462  06E6  0857               	movf	??_Lights_Control,w
  7463  06E7  0258               	subwf	??_Lights_Control+1,w
  7464  06E8  1C03               	skipc
  7465  06E9  2F01               	goto	l3273
  7466  06EA  0834               	movf	_Lights,w
  7467  06EB  0084               	movwf	4
  7468  06EC  1B80               	btfsc	0,7
  7469  06ED  2F01               	goto	l3273
  7470                           
  7471                           ;TriacRelay_B1.c: 160: Lights->RelaySet = 1;
  7472  06EE  0834               	movf	_Lights,w
  7473  06EF  0084               	movwf	4
  7474  06F0  1780               	bsf	0,7
  7475                           
  7476                           ;TriacRelay_B1.c: 162: if (lights == 1) {
  7477  06F1  085B               	movf	Lights_Control@lights,w
  7478  06F2  3A01               	xorlw	1
  7479  06F3  1D03               	skipz
  7480  06F4  0008               	return
  7481                           
  7482                           ;TriacRelay_B1.c: 163: RA4 = Lights->Status == 1 ? 1 : 0;
  7483  06F5  0834               	movf	_Lights,w
  7484  06F6  0084               	movwf	4
  7485  06F7  1D00               	btfss	0,2
  7486  06F8  2EFD               	goto	u2740
  7487  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  7488  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  7489  06FB  1605               	bsf	5,4	;volatile
  7490  06FC  0008               	return
  7491  06FD                     u2740:	
  7492  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  7493  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  7494  06FF  1205               	bcf	5,4	;volatile
  7495                           
  7496                           ;TriacRelay_B1.c: 164: }
  7497                           ;TriacRelay_B1.c: 177: } else if (Lights->Time >= Lights->TriacValue) {
  7498  0700  0008               	return
  7499  0701                     l3273:	
  7500  0701  0834               	movf	_Lights,w
  7501  0702  3E04               	addlw	4
  7502  0703  0084               	movwf	4
  7503  0704  1383               	bcf	3,7	;select IRP bank0
  7504  0705  0800               	movf	0,w
  7505  0706  00D7               	movwf	??_Lights_Control
  7506  0707  0834               	movf	_Lights,w
  7507  0708  3E02               	addlw	2
  7508  0709  0084               	movwf	4
  7509  070A  0800               	movf	0,w
  7510  070B  00D8               	movwf	??_Lights_Control+1
  7511  070C  0857               	movf	??_Lights_Control,w
  7512  070D  0258               	subwf	??_Lights_Control+1,w
  7513  070E  1C03               	skipc
  7514  070F  0008               	return
  7515                           
  7516                           ;TriacRelay_B1.c: 178: Lights->Time = 0;
  7517  0710  0834               	movf	_Lights,w
  7518  0711  3E02               	addlw	2
  7519  0712  0084               	movwf	4
  7520  0713  0180               	clrf	0
  7521                           
  7522                           ;TriacRelay_B1.c: 179: Lights->GO = 0;
  7523  0714  0834               	movf	_Lights,w
  7524  0715  0084               	movwf	4
  7525  0716  1080               	bcf	0,1
  7526                           
  7527                           ;TriacRelay_B1.c: 180: Lights->RelaySet = 0;
  7528  0717  0834               	movf	_Lights,w
  7529  0718  0084               	movwf	4
  7530  0719  1380               	bcf	0,7
  7531                           
  7532                           ;TriacRelay_B1.c: 183: LightsControl.Detect = Lights->Status == 0 ? 1 : LightsControl.De
      +                          tect;
  7533  071A  0834               	movf	_Lights,w
  7534  071B  0084               	movwf	4
  7535  071C  1D00               	btfss	0,2
  7536  071D  2F26               	goto	l3285
  7537  071E  0835               	movf	_LightsControl,w
  7538  071F  3901               	andlw	1
  7539  0720  00D7               	movwf	??_Lights_Control
  7540  0721  01D8               	clrf	??_Lights_Control+1
  7541  0722  0857               	movf	??_Lights_Control,w
  7542  0723  00D9               	movwf	_Lights_Control$4505
  7543  0724  0858               	movf	??_Lights_Control+1,w
  7544  0725  2F29               	goto	L21
  7545  0726                     l3285:	
  7546  0726  3001               	movlw	1
  7547  0727  00D9               	movwf	_Lights_Control$4505
  7548  0728  3000               	movlw	0
  7549  0729                     L21:	
  7550  0729  00DA               	movwf	_Lights_Control$4505+1
  7551  072A  0859               	movf	_Lights_Control$4505,w
  7552  072B  1035               	bcf	_LightsControl,0
  7553  072C  1D03               	skipz
  7554  072D  1435               	bsf	_LightsControl,0
  7555                           
  7556                           ;TriacRelay_B1.c: 187: if (lights == 1) {
  7557  072E  085B               	movf	Lights_Control@lights,w
  7558  072F  3A01               	xorlw	1
  7559  0730  1D03               	skipz
  7560  0731  0008               	return
  7561                           
  7562                           ;TriacRelay_B1.c: 188: RB2 = 0;
  7563  0732  1106               	bcf	6,2	;volatile
  7564  0733  0008               	return
  7565  0734                     __end_of_Lights_Control:	
  7566                           
  7567                           	psect	text44
  7568  0CB9                     __ptext44:	
  7569 ;; *************** function _Lights_Close *****************
  7570 ;; Defined at:
  7571 ;;		line 85 in file "../src/TriacRelay_B1.c"
  7572 ;; Parameters:    Size  Location     Type
  7573 ;;		None
  7574 ;; Auto vars:     Size  Location     Type
  7575 ;;		None
  7576 ;; Return value:  Size  Location     Type
  7577 ;;		None               void
  7578 ;; Registers used:
  7579 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7580 ;; Tracked objects:
  7581 ;;		On entry : 0/0
  7582 ;;		On exit  : 0/0
  7583 ;;		Unchanged: 0/0
  7584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7585 ;;      Params:         0       0       0       0
  7586 ;;      Locals:         0       0       0       0
  7587 ;;      Temps:          0       1       0       0
  7588 ;;      Totals:         0       1       0       0
  7589 ;;Total ram usage:        1 bytes
  7590 ;; Hardware stack levels used:    1
  7591 ;; Hardware stack levels required when called:    6
  7592 ;; This function calls:
  7593 ;;		_getMain_LightsStatus
  7594 ;; This function is called by:
  7595 ;;		_Lights_Main
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           
  7600                           ;psect for function _Lights_Close
  7601  0CB9                     _Lights_Close:	
  7602                           
  7603                           ;TriacRelay_B1.c: 86: if (LightsControl.Detect == 1) {
  7604                           
  7605                           ;incstack = 0
  7606                           ; Regs used in _Lights_Close: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7607  0CB9  1283               	bcf	3,5	;RP0=0, select bank0
  7608  0CBA  1303               	bcf	3,6	;RP1=0, select bank0
  7609  0CBB  1C35               	btfss	_LightsControl,0
  7610  0CBC  0008               	return
  7611                           
  7612                           ;TriacRelay_B1.c: 87: LightsControl.Detect = 0;
  7613  0CBD  1035               	bcf	_LightsControl,0
  7614                           
  7615                           ;TriacRelay_B1.c: 88: LightsControl.LoadGO = getMain_LightsStatus() == 0 ? 0 : 1;
  7616  0CBE  158A  261D         	fcall	_getMain_LightsStatus
  7617  0CC0  3800               	iorlw	0
  7618  0CC1  3000               	movlw	0
  7619  0CC2  1D03               	skipz
  7620  0CC3  3001               	movlw	1
  7621  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  7622  0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  7623  0CC6  00DE               	movwf	??_Lights_Close
  7624  0CC7  0DDE               	rlf	??_Lights_Close,f
  7625  0CC8  0835               	movf	_LightsControl,w
  7626  0CC9  065E               	xorwf	??_Lights_Close,w
  7627  0CCA  39FD               	andlw	-3
  7628  0CCB  065E               	xorwf	??_Lights_Close,w
  7629  0CCC  00B5               	movwf	_LightsControl
  7630  0CCD  0008               	return
  7631  0CCE                     __end_of_Lights_Close:	
  7632                           
  7633                           	psect	text45
  7634  0E1D                     __ptext45:	
  7635 ;; *************** function _getMain_LightsStatus *****************
  7636 ;; Defined at:
  7637 ;;		line 342 in file "../src/Main_B1.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;		None
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;  i               2    6[BANK0 ] int 
  7642 ;;  status          1    8[BANK0 ] unsigned char 
  7643 ;;  count           1    5[BANK0 ] unsigned char 
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      unsigned char 
  7646 ;; Registers used:
  7647 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7653 ;;      Params:         0       0       0       0
  7654 ;;      Locals:         0       4       0       0
  7655 ;;      Temps:          0       1       0       0
  7656 ;;      Totals:         0       5       0       0
  7657 ;;Total ram usage:        5 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    5
  7660 ;; This function calls:
  7661 ;;		_getLights_Status
  7662 ;; This function is called by:
  7663 ;;		_Load_Main
  7664 ;;		_Lights_Main
  7665 ;;		_Lights_Close
  7666 ;; This function uses a non-reentrant model
  7667 ;;
  7668                           
  7669                           
  7670                           ;psect for function _getMain_LightsStatus
  7671  0E1D                     _getMain_LightsStatus:	
  7672                           
  7673                           ;Main_B1.c: 343: char status = 0, count = 0;
  7674                           
  7675                           ;incstack = 0
  7676                           ; Regs used in _getMain_LightsStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7677  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  7678  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  7679  0E1F  01DD               	clrf	getMain_LightsStatus@status
  7680  0E20  01DA               	clrf	getMain_LightsStatus@count
  7681                           
  7682                           ;Main_B1.c: 346: count = 1;
  7683  0E21  01DA               	clrf	getMain_LightsStatus@count
  7684  0E22  0ADA               	incf	getMain_LightsStatus@count,f
  7685                           
  7686                           ;Main_B1.c: 355: for (int i = 0; i < count; i++) {
  7687  0E23  01DB               	clrf	getMain_LightsStatus@i
  7688  0E24  01DC               	clrf	getMain_LightsStatus@i+1
  7689  0E25                     l4203:	
  7690  0E25  085C               	movf	getMain_LightsStatus@i+1,w
  7691  0E26  3A80               	xorlw	128
  7692  0E27  00D9               	movwf	??_getMain_LightsStatus
  7693  0E28  3080               	movlw	128
  7694  0E29  0259               	subwf	??_getMain_LightsStatus,w
  7695  0E2A  1D03               	skipz
  7696  0E2B  2E2E               	goto	u4385
  7697  0E2C  085A               	movf	getMain_LightsStatus@count,w
  7698  0E2D  025B               	subwf	getMain_LightsStatus@i,w
  7699  0E2E                     u4385:	
  7700  0E2E  1803               	btfsc	3,0
  7701  0E2F  2E4A               	goto	l4205
  7702                           
  7703                           ;Main_B1.c: 356: if (status == 0) {
  7704  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  7705  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  7706  0E32  08DD               	movf	getMain_LightsStatus@status,f
  7707  0E33  1D03               	skipz
  7708  0E34  2E43               	goto	l4201
  7709                           
  7710                           ;Main_B1.c: 358: status = getLights_Status(i + 1) == 1 ? 1 : 0;
  7711  0E35  085B               	movf	getMain_LightsStatus@i,w
  7712  0E36  3E01               	addlw	1
  7713  0E37  158A  2416  158A   	fcall	_getLights_Status
  7714  0E3A  3A01               	xorlw	1
  7715  0E3B  3000               	movlw	0
  7716  0E3C  1903               	skipnz
  7717  0E3D  3001               	movlw	1
  7718  0E3E  1283               	bcf	3,5	;RP0=0, select bank0
  7719  0E3F  1303               	bcf	3,6	;RP1=0, select bank0
  7720  0E40  00D9               	movwf	??_getMain_LightsStatus
  7721  0E41  0859               	movf	??_getMain_LightsStatus,w
  7722  0E42  00DD               	movwf	getMain_LightsStatus@status
  7723  0E43                     l4201:	
  7724  0E43  3001               	movlw	1
  7725  0E44  07DB               	addwf	getMain_LightsStatus@i,f
  7726  0E45  1803               	skipnc
  7727  0E46  0ADC               	incf	getMain_LightsStatus@i+1,f
  7728  0E47  3000               	movlw	0
  7729  0E48  07DC               	addwf	getMain_LightsStatus@i+1,f
  7730  0E49  2E25               	goto	l4203
  7731  0E4A                     l4205:	
  7732                           
  7733                           ;Main_B1.c: 363: }
  7734                           ;Main_B1.c: 364: }
  7735                           ;Main_B1.c: 365: return status;
  7736  0E4A  1283               	bcf	3,5	;RP0=0, select bank0
  7737  0E4B  1303               	bcf	3,6	;RP1=0, select bank0
  7738  0E4C  085D               	movf	getMain_LightsStatus@status,w
  7739  0E4D  0008               	return
  7740  0E4E                     __end_of_getMain_LightsStatus:	
  7741                           
  7742                           	psect	text46
  7743  0C16                     __ptext46:	
  7744 ;; *************** function _getLights_Status *****************
  7745 ;; Defined at:
  7746 ;;		line 207 in file "../src/TriacRelay_B1.c"
  7747 ;; Parameters:    Size  Location     Type
  7748 ;;  lights          1    wreg     unsigned char 
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;  lights          1    2[BANK0 ] unsigned char 
  7751 ;;  status          1    3[BANK0 ] unsigned char 
  7752 ;; Return value:  Size  Location     Type
  7753 ;;                  1    wreg      unsigned char 
  7754 ;; Registers used:
  7755 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7756 ;; Tracked objects:
  7757 ;;		On entry : 0/0
  7758 ;;		On exit  : 0/0
  7759 ;;		Unchanged: 0/0
  7760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7761 ;;      Params:         0       0       0       0
  7762 ;;      Locals:         0       2       0       0
  7763 ;;      Temps:          0       0       0       0
  7764 ;;      Totals:         0       2       0       0
  7765 ;;Total ram usage:        2 bytes
  7766 ;; Hardware stack levels used:    1
  7767 ;; Hardware stack levels required when called:    4
  7768 ;; This function calls:
  7769 ;;		_LightsPointSelect
  7770 ;; This function is called by:
  7771 ;;		_getMain_LightsStatus
  7772 ;;		_PIR_Main
  7773 ;; This function uses a non-reentrant model
  7774 ;;
  7775                           
  7776                           
  7777                           ;psect for function _getLights_Status
  7778  0C16                     _getLights_Status:	
  7779                           
  7780                           ;incstack = 0
  7781                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7782                           ;getLights_Status@lights stored from wreg
  7783  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  7784  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  7785  0C18  00D7               	movwf	getLights_Status@lights
  7786                           
  7787                           ;TriacRelay_B1.c: 208: LightsPointSelect(lights);
  7788  0C19  0857               	movf	getLights_Status@lights,w
  7789  0C1A  158A  23D0         	fcall	_LightsPointSelect
  7790                           
  7791                           ;TriacRelay_B1.c: 209: char status = Lights->Status == 1 ? 1 : 0;
  7792  0C1C  1283               	bcf	3,5	;RP0=0, select bank0
  7793  0C1D  1303               	bcf	3,6	;RP1=0, select bank0
  7794  0C1E  0834               	movf	_Lights,w
  7795  0C1F  0084               	movwf	4
  7796  0C20  3000               	movlw	0
  7797  0C21  1383               	bcf	3,7	;select IRP bank0
  7798  0C22  1900               	btfsc	0,2
  7799  0C23  3001               	movlw	1
  7800  0C24  00D8               	movwf	getLights_Status@status
  7801                           
  7802                           ;TriacRelay_B1.c: 210: return status;
  7803  0C25  0858               	movf	getLights_Status@status,w
  7804  0C26  0008               	return
  7805  0C27                     __end_of_getLights_Status:	
  7806                           
  7807                           	psect	text47
  7808  0B65                     __ptext47:	
  7809 ;; *************** function _Lights_Initialization *****************
  7810 ;; Defined at:
  7811 ;;		line 34 in file "../src/TriacRelay_B1.c"
  7812 ;; Parameters:    Size  Location     Type
  7813 ;;		None
  7814 ;; Auto vars:     Size  Location     Type
  7815 ;;		None
  7816 ;; Return value:  Size  Location     Type
  7817 ;;		None               void
  7818 ;; Registers used:
  7819 ;;		wreg, status,2, status,0, pclath, cstack
  7820 ;; Tracked objects:
  7821 ;;		On entry : 0/0
  7822 ;;		On exit  : 0/0
  7823 ;;		Unchanged: 0/0
  7824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7825 ;;      Params:         0       0       0       0
  7826 ;;      Locals:         0       0       0       0
  7827 ;;      Temps:          0       0       0       0
  7828 ;;      Totals:         0       0       0       0
  7829 ;;Total ram usage:        0 bytes
  7830 ;; Hardware stack levels used:    1
  7831 ;; Hardware stack levels required when called:    5
  7832 ;; This function calls:
  7833 ;;		_setLights_Initialization
  7834 ;; This function is called by:
  7835 ;;		_main
  7836 ;; This function uses a non-reentrant model
  7837 ;;
  7838                           
  7839                           
  7840                           ;psect for function _Lights_Initialization
  7841  0B65                     _Lights_Initialization:	
  7842                           
  7843                           ;TriacRelay_B1.c: 36: setLights_Initialization(1);
  7844                           
  7845                           ;incstack = 0
  7846                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7847  0B65  3001               	movlw	1
  7848  0B66  158A  2384         	fcall	_setLights_Initialization
  7849  0B68  0008               	return
  7850  0B69                     __end_of_Lights_Initialization:	
  7851                           
  7852                           	psect	text48
  7853  0B84                     __ptext48:	
  7854 ;; *************** function _setLights_Initialization *****************
  7855 ;; Defined at:
  7856 ;;		line 49 in file "../src/TriacRelay_B1.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;  lights          1    wreg     unsigned char 
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;  lights          1    2[BANK0 ] unsigned char 
  7861 ;; Return value:  Size  Location     Type
  7862 ;;		None               void
  7863 ;; Registers used:
  7864 ;;		wreg, status,2, status,0, pclath, cstack
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7870 ;;      Params:         0       0       0       0
  7871 ;;      Locals:         0       1       0       0
  7872 ;;      Temps:          0       0       0       0
  7873 ;;      Totals:         0       1       0       0
  7874 ;;Total ram usage:        1 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; Hardware stack levels required when called:    4
  7877 ;; This function calls:
  7878 ;;		_LightsPointSelect
  7879 ;; This function is called by:
  7880 ;;		_Lights_Initialization
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           
  7885                           ;psect for function _setLights_Initialization
  7886  0B84                     _setLights_Initialization:	
  7887                           
  7888                           ;incstack = 0
  7889                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7890                           ;setLights_Initialization@lights stored from wreg
  7891  0B84  1283               	bcf	3,5	;RP0=0, select bank0
  7892  0B85  1303               	bcf	3,6	;RP1=0, select bank0
  7893  0B86  00D7               	movwf	setLights_Initialization@lights
  7894                           
  7895                           ;TriacRelay_B1.c: 50: LightsPointSelect(lights);
  7896  0B87  0857               	movf	setLights_Initialization@lights,w
  7897  0B88  158A  23D0         	fcall	_LightsPointSelect
  7898  0B8A  0008               	return
  7899  0B8B                     __end_of_setLights_Initialization:	
  7900                           
  7901                           	psect	text49
  7902  0BD0                     __ptext49:	
  7903 ;; *************** function _LightsPointSelect *****************
  7904 ;; Defined at:
  7905 ;;		line 10 in file "../src/TriacRelay_B1.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;  lights          1    wreg     unsigned char 
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;  lights          1    1[BANK0 ] unsigned char 
  7910 ;; Return value:  Size  Location     Type
  7911 ;;		None               void
  7912 ;; Registers used:
  7913 ;;		wreg
  7914 ;; Tracked objects:
  7915 ;;		On entry : 0/0
  7916 ;;		On exit  : 0/0
  7917 ;;		Unchanged: 0/0
  7918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7919 ;;      Params:         0       0       0       0
  7920 ;;      Locals:         0       1       0       0
  7921 ;;      Temps:          0       1       0       0
  7922 ;;      Totals:         0       2       0       0
  7923 ;;Total ram usage:        2 bytes
  7924 ;; Hardware stack levels used:    1
  7925 ;; Hardware stack levels required when called:    3
  7926 ;; This function calls:
  7927 ;;		Nothing
  7928 ;; This function is called by:
  7929 ;;		_setLights_Initialization
  7930 ;;		_setLights_Main
  7931 ;;		_setLights
  7932 ;;		_Lights_Control
  7933 ;;		_getLights_Status
  7934 ;;		_setLights_Trigger
  7935 ;;		_setLights_Line
  7936 ;;		_getAll_Lights_Line
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           
  7941                           ;psect for function _LightsPointSelect
  7942  0BD0                     _LightsPointSelect:	
  7943                           
  7944                           ;incstack = 0
  7945                           ; Regs used in _LightsPointSelect: [wreg]
  7946                           ;LightsPointSelect@lights stored from wreg
  7947  0BD0  1283               	bcf	3,5	;RP0=0, select bank0
  7948  0BD1  1303               	bcf	3,6	;RP1=0, select bank0
  7949  0BD2  00D6               	movwf	LightsPointSelect@lights
  7950                           
  7951                           ;TriacRelay_B1.c: 14: if (lights == 1) {
  7952  0BD3  0856               	movf	LightsPointSelect@lights,w
  7953  0BD4  3A01               	xorlw	1
  7954  0BD5  1D03               	skipz
  7955  0BD6  0008               	return
  7956                           
  7957                           ;TriacRelay_B1.c: 15: Lights = &Lights1;
  7958  0BD7  3042               	movlw	_Lights1& (0+255)
  7959  0BD8  00D5               	movwf	??_LightsPointSelect
  7960  0BD9  0855               	movf	??_LightsPointSelect,w
  7961  0BDA  00B4               	movwf	_Lights
  7962  0BDB  0008               	return
  7963  0BDC                     __end_of_LightsPointSelect:	
  7964                           
  7965                           	psect	text50
  7966  0B5E                     __ptext50:	
  7967 ;; *************** function _LED_Main *****************
  7968 ;; Defined at:
  7969 ;;		line 47 in file "../src/LED_B1.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;		None
  7972 ;; Auto vars:     Size  Location     Type
  7973 ;;		None
  7974 ;; Return value:  Size  Location     Type
  7975 ;;		None               void
  7976 ;; Registers used:
  7977 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7983 ;;      Params:         0       0       0       0
  7984 ;;      Locals:         0       0       0       0
  7985 ;;      Temps:          0       0       0       0
  7986 ;;      Totals:         0       0       0       0
  7987 ;;Total ram usage:        0 bytes
  7988 ;; Hardware stack levels used:    1
  7989 ;; Hardware stack levels required when called:    6
  7990 ;; This function calls:
  7991 ;;		_setPIRLED_Main
  7992 ;; This function is called by:
  7993 ;;		_main
  7994 ;; This function uses a non-reentrant model
  7995 ;;
  7996                           
  7997                           
  7998                           ;psect for function _LED_Main
  7999  0B5E                     _LED_Main:	
  8000                           
  8001                           ;LED_B1.c: 50: setPIRLED_Main();
  8002                           
  8003                           ;incstack = 0
  8004                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8005  0B5E  118A  25E5         	fcall	_setPIRLED_Main
  8006  0B60  0008               	return
  8007  0B61                     __end_of_LED_Main:	
  8008                           
  8009                           	psect	text51
  8010  05E5                     __ptext51:	
  8011 ;; *************** function _setPIRLED_Main *****************
  8012 ;; Defined at:
  8013 ;;		line 253 in file "../src/LED_B1.c"
  8014 ;; Parameters:    Size  Location     Type
  8015 ;;		None
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;  count           1    5[BANK0 ] unsigned char 
  8018 ;; Return value:  Size  Location     Type
  8019 ;;		None               void
  8020 ;; Registers used:
  8021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8022 ;; Tracked objects:
  8023 ;;		On entry : 0/0
  8024 ;;		On exit  : 0/0
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8027 ;;      Params:         0       0       0       0
  8028 ;;      Locals:         0       1       0       0
  8029 ;;      Temps:          0       1       0       0
  8030 ;;      Totals:         0       2       0       0
  8031 ;;Total ram usage:        2 bytes
  8032 ;; Hardware stack levels used:    1
  8033 ;; Hardware stack levels required when called:    5
  8034 ;; This function calls:
  8035 ;;		_setLED
  8036 ;; This function is called by:
  8037 ;;		_LED_Main
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           
  8042                           ;psect for function _setPIRLED_Main
  8043  05E5                     _setPIRLED_Main:	
  8044                           
  8045                           ;LED_B1.c: 254: char count;
  8046                           ;LED_B1.c: 255: if (PIRLED.GO == 1) {
  8047                           
  8048                           ;incstack = 0
  8049                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8050  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  8051  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  8052  05E7  1C2C               	btfss	_PIRLED,0
  8053  05E8  0008               	return
  8054                           
  8055                           ;LED_B1.c: 256: PIRLED.Time++;
  8056  05E9  3001               	movlw	1
  8057  05EA  07AE               	addwf	_PIRLED+2,f
  8058  05EB  1803               	skipnc
  8059  05EC  0AAF               	incf	_PIRLED+3,f
  8060  05ED  3000               	movlw	0
  8061  05EE  07AF               	addwf	_PIRLED+3,f
  8062                           
  8063                           ;LED_B1.c: 257: if (PIRLED.Time >= 500 / 10) {
  8064  05EF  3000               	movlw	0
  8065  05F0  022F               	subwf	_PIRLED+3,w
  8066  05F1  3032               	movlw	50
  8067  05F2  1903               	skipnz
  8068  05F3  022E               	subwf	_PIRLED+2,w
  8069  05F4  1C03               	skipc
  8070  05F5  0008               	return
  8071                           
  8072                           ;LED_B1.c: 258: PIRLED.Time = 0;
  8073  05F6  01AE               	clrf	_PIRLED+2
  8074  05F7  01AF               	clrf	_PIRLED+3
  8075                           
  8076                           ;LED_B1.c: 259: setLED(1, 0);
  8077  05F8  01D7               	clrf	setLED@command
  8078  05F9  3001               	movlw	1
  8079  05FA  118A  2656  118A   	fcall	_setLED
  8080                           
  8081                           ;LED_B1.c: 260: setLED(2, 0);
  8082  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  8083  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  8084  05FF  01D7               	clrf	setLED@command
  8085  0600  3002               	movlw	2
  8086  0601  118A  2656  118A   	fcall	_setLED
  8087                           
  8088                           ;LED_B1.c: 261: if (PIRLED.GO1 == 1) {
  8089  0604  1283               	bcf	3,5	;RP0=0, select bank0
  8090  0605  1303               	bcf	3,6	;RP1=0, select bank0
  8091  0606  1CAC               	btfss	_PIRLED,1
  8092  0607  2E0C               	goto	l4271
  8093                           
  8094                           ;LED_B1.c: 262: count = 4;
  8095  0608  3004               	movlw	4
  8096  0609  00D9               	movwf	??_setPIRLED_Main
  8097  060A  0859               	movf	??_setPIRLED_Main,w
  8098  060B  00DA               	movwf	setPIRLED_Main@count
  8099  060C                     l4271:	
  8100                           
  8101                           ;LED_B1.c: 263: }
  8102                           ;LED_B1.c: 264: if (PIRLED.GO2 == 1) {
  8103  060C  1D2C               	btfss	_PIRLED,2
  8104  060D  2E12               	goto	l4275
  8105                           
  8106                           ;LED_B1.c: 265: count = 6;
  8107  060E  3006               	movlw	6
  8108  060F  00D9               	movwf	??_setPIRLED_Main
  8109  0610  0859               	movf	??_setPIRLED_Main,w
  8110  0611  00DA               	movwf	setPIRLED_Main@count
  8111  0612                     l4275:	
  8112                           
  8113                           ;LED_B1.c: 266: }
  8114                           ;LED_B1.c: 267: if (PIRLED.GO3 == 1) {
  8115  0612  1DAC               	btfss	_PIRLED,3
  8116  0613  2E18               	goto	l4279
  8117                           
  8118                           ;LED_B1.c: 268: count = 8;
  8119  0614  3008               	movlw	8
  8120  0615  00D9               	movwf	??_setPIRLED_Main
  8121  0616  0859               	movf	??_setPIRLED_Main,w
  8122  0617  00DA               	movwf	setPIRLED_Main@count
  8123  0618                     l4279:	
  8124                           
  8125                           ;LED_B1.c: 269: }
  8126                           ;LED_B1.c: 270: PIRLED.Count++;
  8127  0618  3001               	movlw	1
  8128  0619  00D9               	movwf	??_setPIRLED_Main
  8129  061A  0859               	movf	??_setPIRLED_Main,w
  8130  061B  07AD               	addwf	_PIRLED+1,f
  8131                           
  8132                           ;LED_B1.c: 271: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  8133  061C  082D               	movf	_PIRLED+1,w
  8134  061D  3A01               	xorlw	1
  8135  061E  1903               	skipnz
  8136  061F  2E24               	goto	l4285
  8137  0620  082D               	movf	_PIRLED+1,w
  8138  0621  3A02               	xorlw	2
  8139  0622  1D03               	skipz
  8140  0623  2E38               	goto	l4289
  8141  0624                     l4285:	
  8142                           
  8143                           ;LED_B1.c: 272: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8144  0624  1003               	clrc
  8145  0625  1E2C               	btfss	_PIRLED,4
  8146  0626  1403               	setc
  8147  0627  1C03               	btfss	3,0
  8148  0628  2E2D               	goto	u4520
  8149  0629  1283               	bcf	3,5	;RP0=0, select bank0
  8150  062A  1303               	bcf	3,6	;RP1=0, select bank0
  8151  062B  162C               	bsf	_PIRLED,4
  8152  062C  2E30               	goto	l4287
  8153  062D                     u4520:	
  8154  062D  1283               	bcf	3,5	;RP0=0, select bank0
  8155  062E  1303               	bcf	3,6	;RP1=0, select bank0
  8156  062F  122C               	bcf	_PIRLED,4
  8157  0630                     l4287:	
  8158                           
  8159                           ;LED_B1.c: 273: setLED(2, PIRLED.status);
  8160  0630  3000               	movlw	0
  8161  0631  1A2C               	btfsc	_PIRLED,4
  8162  0632  3001               	movlw	1
  8163  0633  00D7               	movwf	setLED@command
  8164  0634  3002               	movlw	2
  8165  0635  118A  2656         	fcall	_setLED
  8166                           
  8167                           ;LED_B1.c: 274: } else {
  8168  0637  0008               	return
  8169  0638                     l4289:	
  8170                           
  8171                           ;LED_B1.c: 275: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  8172  0638  1003               	clrc
  8173  0639  1283               	bcf	3,5	;RP0=0, select bank0
  8174  063A  1303               	bcf	3,6	;RP1=0, select bank0
  8175  063B  1E2C               	btfss	_PIRLED,4
  8176  063C  1403               	setc
  8177  063D  1C03               	btfss	3,0
  8178  063E  2E43               	goto	u4540
  8179  063F  1283               	bcf	3,5	;RP0=0, select bank0
  8180  0640  1303               	bcf	3,6	;RP1=0, select bank0
  8181  0641  162C               	bsf	_PIRLED,4
  8182  0642  2E46               	goto	l4291
  8183  0643                     u4540:	
  8184  0643  1283               	bcf	3,5	;RP0=0, select bank0
  8185  0644  1303               	bcf	3,6	;RP1=0, select bank0
  8186  0645  122C               	bcf	_PIRLED,4
  8187  0646                     l4291:	
  8188                           
  8189                           ;LED_B1.c: 276: setLED(1, PIRLED.status);
  8190  0646  3000               	movlw	0
  8191  0647  1A2C               	btfsc	_PIRLED,4
  8192  0648  3001               	movlw	1
  8193  0649  00D7               	movwf	setLED@command
  8194  064A  3001               	movlw	1
  8195  064B  118A  2656  118A   	fcall	_setLED
  8196                           
  8197                           ;LED_B1.c: 277: if (PIRLED.Count == count) {
  8198  064E  1283               	bcf	3,5	;RP0=0, select bank0
  8199  064F  1303               	bcf	3,6	;RP1=0, select bank0
  8200  0650  082D               	movf	_PIRLED+1,w
  8201  0651  065A               	xorwf	setPIRLED_Main@count,w
  8202  0652  1D03               	skipz
  8203  0653  0008               	return
  8204                           
  8205                           ;LED_B1.c: 278: PIRLED.Count = 0;
  8206  0654  01AD               	clrf	_PIRLED+1
  8207  0655  0008               	return
  8208  0656                     __end_of_setPIRLED_Main:	
  8209                           
  8210                           	psect	text52
  8211  0BC4                     __ptext52:	
  8212 ;; *************** function _LED_Initialization *****************
  8213 ;; Defined at:
  8214 ;;		line 31 in file "../src/LED_B1.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;		None
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;		None
  8219 ;; Return value:  Size  Location     Type
  8220 ;;		None               void
  8221 ;; Registers used:
  8222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8228 ;;      Params:         0       0       0       0
  8229 ;;      Locals:         0       0       0       0
  8230 ;;      Temps:          0       0       0       0
  8231 ;;      Totals:         0       0       0       0
  8232 ;;Total ram usage:        0 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; Hardware stack levels required when called:    6
  8235 ;; This function calls:
  8236 ;;		_setLED_Initialization
  8237 ;; This function is called by:
  8238 ;;		_main
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           
  8243                           ;psect for function _LED_Initialization
  8244  0BC4                     _LED_Initialization:	
  8245                           
  8246                           ;LED_B1.c: 33: setLED_Initialization(1);
  8247                           
  8248                           ;incstack = 0
  8249                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8250  0BC4  3001               	movlw	1
  8251  0BC5  158A  245A  158A   	fcall	_setLED_Initialization
  8252                           
  8253                           ;LED_B1.c: 36: setLED_Initialization(2);
  8254  0BC8  3002               	movlw	2
  8255  0BC9  158A  245A  158A   	fcall	_setLED_Initialization
  8256                           
  8257                           ;LED_B1.c: 42: setLED_Initialization(99);
  8258  0BCC  3063               	movlw	99
  8259  0BCD  158A  245A         	fcall	_setLED_Initialization
  8260  0BCF  0008               	return
  8261  0BD0                     __end_of_LED_Initialization:	
  8262                           
  8263                           	psect	text53
  8264  0C5A                     __ptext53:	
  8265 ;; *************** function _setLED_Initialization *****************
  8266 ;; Defined at:
  8267 ;;		line 69 in file "../src/LED_B1.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  led             1    wreg     unsigned char 
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;  led             1    4[BANK0 ] unsigned char 
  8272 ;; Return value:  Size  Location     Type
  8273 ;;		None               void
  8274 ;; Registers used:
  8275 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8276 ;; Tracked objects:
  8277 ;;		On entry : 0/0
  8278 ;;		On exit  : 0/0
  8279 ;;		Unchanged: 0/0
  8280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8281 ;;      Params:         0       0       0       0
  8282 ;;      Locals:         0       1       0       0
  8283 ;;      Temps:          0       0       0       0
  8284 ;;      Totals:         0       1       0       0
  8285 ;;Total ram usage:        1 bytes
  8286 ;; Hardware stack levels used:    1
  8287 ;; Hardware stack levels required when called:    5
  8288 ;; This function calls:
  8289 ;;		_LedPointSelect
  8290 ;;		_setLED
  8291 ;; This function is called by:
  8292 ;;		_LED_Initialization
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function _setLED_Initialization
  8298  0C5A                     _setLED_Initialization:	
  8299                           
  8300                           ;incstack = 0
  8301                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8302                           ;setLED_Initialization@led stored from wreg
  8303  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  8304  0C5B  1303               	bcf	3,6	;RP1=0, select bank0
  8305  0C5C  00D9               	movwf	setLED_Initialization@led
  8306                           
  8307                           ;LED_B1.c: 70: LedPointSelect(led);
  8308  0C5D  0859               	movf	setLED_Initialization@led,w
  8309  0C5E  158A  254B  158A   	fcall	_LedPointSelect
  8310                           
  8311                           ;LED_B1.c: 71: LED->Enable = 1;
  8312  0C61  1283               	bcf	3,5	;RP0=0, select bank0
  8313  0C62  1303               	bcf	3,6	;RP1=0, select bank0
  8314  0C63  0833               	movf	_LED,w
  8315  0C64  0084               	movwf	4
  8316  0C65  1383               	bcf	3,7	;select IRP bank0
  8317  0C66  1400               	bsf	0,0
  8318                           
  8319                           ;LED_B1.c: 72: setLED(led, 0);
  8320  0C67  01D7               	clrf	setLED@command
  8321  0C68  0859               	movf	setLED_Initialization@led,w
  8322  0C69  118A  2656         	fcall	_setLED
  8323  0C6B  0008               	return
  8324  0C6C                     __end_of_setLED_Initialization:	
  8325                           
  8326                           	psect	text54
  8327  0656                     __ptext54:	
  8328 ;; *************** function _setLED *****************
  8329 ;; Defined at:
  8330 ;;		line 76 in file "../src/LED_B1.c"
  8331 ;; Parameters:    Size  Location     Type
  8332 ;;  led             1    wreg     unsigned char 
  8333 ;;  command         1    2[BANK0 ] unsigned char 
  8334 ;; Auto vars:     Size  Location     Type
  8335 ;;  led             1    3[BANK0 ] unsigned char 
  8336 ;; Return value:  Size  Location     Type
  8337 ;;		None               void
  8338 ;; Registers used:
  8339 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8340 ;; Tracked objects:
  8341 ;;		On entry : 0/0
  8342 ;;		On exit  : 0/0
  8343 ;;		Unchanged: 0/0
  8344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8345 ;;      Params:         0       1       0       0
  8346 ;;      Locals:         0       1       0       0
  8347 ;;      Temps:          0       0       0       0
  8348 ;;      Totals:         0       2       0       0
  8349 ;;Total ram usage:        2 bytes
  8350 ;; Hardware stack levels used:    1
  8351 ;; Hardware stack levels required when called:    4
  8352 ;; This function calls:
  8353 ;;		_LedPointSelect
  8354 ;; This function is called by:
  8355 ;;		_setLED_Initialization
  8356 ;;		_setPIRLED_Main
  8357 ;;		_setMain_Exception
  8358 ;;		_PIR_Initialization
  8359 ;;		_PIR_Main
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           
  8364                           ;psect for function _setLED
  8365  0656                     _setLED:	
  8366                           
  8367                           ;incstack = 0
  8368                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8369                           ;setLED@led stored from wreg
  8370  0656  1283               	bcf	3,5	;RP0=0, select bank0
  8371  0657  1303               	bcf	3,6	;RP1=0, select bank0
  8372  0658  00D8               	movwf	setLED@led
  8373                           
  8374                           ;LED_B1.c: 77: LedPointSelect(led);
  8375  0659  0858               	movf	setLED@led,w
  8376  065A  158A  254B  118A   	fcall	_LedPointSelect
  8377                           
  8378                           ;LED_B1.c: 78: if (command == 0) {
  8379  065D  1283               	bcf	3,5	;RP0=0, select bank0
  8380  065E  1303               	bcf	3,6	;RP1=0, select bank0
  8381  065F  08D7               	movf	setLED@command,f
  8382  0660  1D03               	skipz
  8383  0661  2E6F               	goto	l4103
  8384                           
  8385                           ;LED_B1.c: 80: if (led == 1) {
  8386  0662  0858               	movf	setLED@led,w
  8387  0663  3A01               	xorlw	1
  8388  0664  1D03               	skipz
  8389  0665  2E67               	goto	l4095
  8390                           
  8391                           ;LED_B1.c: 84: RB4 = 1;
  8392  0666  1606               	bsf	6,4	;volatile
  8393  0667                     l4095:	
  8394                           
  8395                           ;LED_B1.c: 86: }
  8396                           ;LED_B1.c: 89: if (led == 2) {
  8397  0667  0858               	movf	setLED@led,w
  8398  0668  3A02               	xorlw	2
  8399  0669  1903               	btfsc	3,2
  8400                           
  8401                           ;LED_B1.c: 93: RB5 = 1;
  8402  066A  1686               	bsf	6,5	;volatile
  8403                           
  8404                           ;LED_B1.c: 95: }
  8405                           ;LED_B1.c: 107: if (led == 99) {
  8406  066B  0858               	movf	setLED@led,w
  8407  066C  3A63               	xorlw	99
  8408  066D  1903               	btfsc	3,2
  8409                           
  8410                           ;LED_B1.c: 111: RB3 = 1;
  8411  066E  1586               	bsf	6,3	;volatile
  8412  066F                     l4103:	
  8413                           
  8414                           ;LED_B1.c: 113: }
  8415                           ;LED_B1.c: 115: }
  8416                           ;LED_B1.c: 116: if (command == 1) {
  8417  066F  0857               	movf	setLED@command,w
  8418  0670  3A01               	xorlw	1
  8419  0671  1D03               	skipz
  8420  0672  2E80               	goto	l4117
  8421                           
  8422                           ;LED_B1.c: 118: if (led == 1) {
  8423  0673  0858               	movf	setLED@led,w
  8424  0674  3A01               	xorlw	1
  8425  0675  1D03               	skipz
  8426  0676  2E78               	goto	l4109
  8427                           
  8428                           ;LED_B1.c: 122: RB4 = 0;
  8429  0677  1206               	bcf	6,4	;volatile
  8430  0678                     l4109:	
  8431                           
  8432                           ;LED_B1.c: 124: }
  8433                           ;LED_B1.c: 127: if (led == 2) {
  8434  0678  0858               	movf	setLED@led,w
  8435  0679  3A02               	xorlw	2
  8436  067A  1903               	btfsc	3,2
  8437                           
  8438                           ;LED_B1.c: 131: RB5 = 0;
  8439  067B  1286               	bcf	6,5	;volatile
  8440                           
  8441                           ;LED_B1.c: 133: }
  8442                           ;LED_B1.c: 145: if (led == 99) {
  8443  067C  0858               	movf	setLED@led,w
  8444  067D  3A63               	xorlw	99
  8445  067E  1903               	btfsc	3,2
  8446                           
  8447                           ;LED_B1.c: 149: RB3 = 0;
  8448  067F  1186               	bcf	6,3	;volatile
  8449  0680                     l4117:	
  8450                           
  8451                           ;LED_B1.c: 151: }
  8452                           ;LED_B1.c: 153: }
  8453                           ;LED_B1.c: 154: if (command == 10) {
  8454  0680  0857               	movf	setLED@command,w
  8455  0681  3A0A               	xorlw	10
  8456  0682  1D03               	skipz
  8457  0683  2E9B               	goto	l4135
  8458                           
  8459                           ;LED_B1.c: 155: LED->GO = 0;
  8460  0684  0833               	movf	_LED,w
  8461  0685  0084               	movwf	4
  8462  0686  1383               	bcf	3,7	;select IRP bank0
  8463  0687  1080               	bcf	0,1
  8464                           
  8465                           ;LED_B1.c: 156: LED->Time = 0;
  8466  0688  0A33               	incf	_LED,w
  8467  0689  0084               	movwf	4
  8468  068A  0180               	clrf	0
  8469  068B  0A84               	incf	4,f
  8470  068C  0180               	clrf	0
  8471                           
  8472                           ;LED_B1.c: 158: if (led == 1) {
  8473  068D  0858               	movf	setLED@led,w
  8474  068E  3A01               	xorlw	1
  8475  068F  1D03               	skipz
  8476  0690  2E93               	goto	l4127
  8477                           
  8478                           ;LED_B1.c: 162: RB4 = 1;
  8479  0691  1606               	bsf	6,4	;volatile
  8480                           
  8481                           ;LED_B1.c: 164: }
  8482  0692  2E97               	goto	l4131
  8483  0693                     l4127:	
  8484                           
  8485                           ;LED_B1.c: 167: else if (led == 2) {
  8486  0693  0858               	movf	setLED@led,w
  8487  0694  3A02               	xorlw	2
  8488  0695  1903               	btfsc	3,2
  8489                           
  8490                           ;LED_B1.c: 171: RB5 = 1;
  8491  0696  1686               	bsf	6,5	;volatile
  8492  0697                     l4131:	
  8493                           
  8494                           ;LED_B1.c: 173: }
  8495                           ;LED_B1.c: 185: if (led == 99) {
  8496  0697  0858               	movf	setLED@led,w
  8497  0698  3A63               	xorlw	99
  8498  0699  1903               	btfsc	3,2
  8499                           
  8500                           ;LED_B1.c: 189: RB3 = 1;
  8501  069A  1586               	bsf	6,3	;volatile
  8502  069B                     l4135:	
  8503                           
  8504                           ;LED_B1.c: 191: }
  8505                           ;LED_B1.c: 193: }
  8506                           ;LED_B1.c: 194: if (command == 11) {
  8507  069B  0857               	movf	setLED@command,w
  8508  069C  3A0B               	xorlw	11
  8509  069D  1D03               	skipz
  8510  069E  2EA3               	goto	l4139
  8511                           
  8512                           ;LED_B1.c: 195: LED->GO = 1;
  8513  069F  0833               	movf	_LED,w
  8514  06A0  0084               	movwf	4
  8515  06A1  1383               	bcf	3,7	;select IRP bank0
  8516  06A2  1480               	bsf	0,1
  8517  06A3                     l4139:	
  8518                           
  8519                           ;LED_B1.c: 196: }
  8520                           ;LED_B1.c: 198: if (command == 111) {
  8521  06A3  0857               	movf	setLED@command,w
  8522  06A4  3A6F               	xorlw	111
  8523  06A5  1D03               	skipz
  8524  06A6  2EC1               	goto	l4165
  8525                           
  8526                           ;LED_B1.c: 199: PIRLED.Count = 0;
  8527  06A7  01AD               	clrf	_PIRLED+1
  8528                           
  8529                           ;LED_B1.c: 200: PIRLED.Time = 0;
  8530  06A8  01AE               	clrf	_PIRLED+2
  8531  06A9  01AF               	clrf	_PIRLED+3
  8532                           
  8533                           ;LED_B1.c: 201: PIRLED.status = 0;
  8534  06AA  122C               	bcf	_PIRLED,4
  8535                           
  8536                           ;LED_B1.c: 202: PIRLED.GO = 1;
  8537  06AB  142C               	bsf	_PIRLED,0
  8538                           
  8539                           ;LED_B1.c: 203: PIRLED.GO1 = 0;
  8540  06AC  10AC               	bcf	_PIRLED,1
  8541                           
  8542                           ;LED_B1.c: 204: PIRLED.GO2 = 0;
  8543  06AD  112C               	bcf	_PIRLED,2
  8544                           
  8545                           ;LED_B1.c: 205: PIRLED.GO3 = 0;
  8546  06AE  11AC               	bcf	_PIRLED,3
  8547                           
  8548                           ;LED_B1.c: 206: if (led == 1) {
  8549  06AF  0858               	movf	setLED@led,w
  8550  06B0  3A01               	xorlw	1
  8551  06B1  1D03               	skipz
  8552  06B2  2EB5               	goto	l4157
  8553                           
  8554                           ;LED_B1.c: 207: PIRLED.GO1 = 1;
  8555  06B3  14AC               	bsf	_PIRLED,1
  8556                           
  8557                           ;LED_B1.c: 208: } else if (led == 2) {
  8558  06B4  0008               	return
  8559  06B5                     l4157:	
  8560  06B5  0858               	movf	setLED@led,w
  8561  06B6  3A02               	xorlw	2
  8562  06B7  1D03               	skipz
  8563  06B8  2EBB               	goto	l4161
  8564                           
  8565                           ;LED_B1.c: 209: PIRLED.GO2 = 1;
  8566  06B9  152C               	bsf	_PIRLED,2
  8567                           
  8568                           ;LED_B1.c: 210: } else if (led == 3) {
  8569  06BA  0008               	return
  8570  06BB                     l4161:	
  8571  06BB  0858               	movf	setLED@led,w
  8572  06BC  3A03               	xorlw	3
  8573  06BD  1D03               	skipz
  8574  06BE  0008               	return
  8575                           
  8576                           ;LED_B1.c: 211: PIRLED.GO3 = 1;
  8577  06BF  15AC               	bsf	_PIRLED,3
  8578                           
  8579                           ;LED_B1.c: 212: }
  8580                           ;LED_B1.c: 213: } else if (command == 110) {
  8581  06C0  0008               	return
  8582  06C1                     l4165:	
  8583  06C1  0857               	movf	setLED@command,w
  8584  06C2  3A6E               	xorlw	110
  8585  06C3  1D03               	skipz
  8586  06C4  0008               	return
  8587                           
  8588                           ;LED_B1.c: 214: PIRLED.GO = 0;
  8589  06C5  102C               	bcf	_PIRLED,0
  8590  06C6  0008               	return
  8591  06C7                     __end_of_setLED:	
  8592                           
  8593                           	psect	text55
  8594  0D4B                     __ptext55:	
  8595 ;; *************** function _LedPointSelect *****************
  8596 ;; Defined at:
  8597 ;;		line 7 in file "../src/LED_B1.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;  led             1    wreg     unsigned char 
  8600 ;; Auto vars:     Size  Location     Type
  8601 ;;  led             1    1[BANK0 ] unsigned char 
  8602 ;; Return value:  Size  Location     Type
  8603 ;;		None               void
  8604 ;; Registers used:
  8605 ;;		wreg
  8606 ;; Tracked objects:
  8607 ;;		On entry : 0/0
  8608 ;;		On exit  : 0/0
  8609 ;;		Unchanged: 0/0
  8610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8611 ;;      Params:         0       0       0       0
  8612 ;;      Locals:         0       1       0       0
  8613 ;;      Temps:          0       1       0       0
  8614 ;;      Totals:         0       2       0       0
  8615 ;;Total ram usage:        2 bytes
  8616 ;; Hardware stack levels used:    1
  8617 ;; Hardware stack levels required when called:    3
  8618 ;; This function calls:
  8619 ;;		Nothing
  8620 ;; This function is called by:
  8621 ;;		_setLED_Initialization
  8622 ;;		_setLED
  8623 ;;		_setLED_Main
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           
  8628                           ;psect for function _LedPointSelect
  8629  0D4B                     _LedPointSelect:	
  8630                           
  8631                           ;incstack = 0
  8632                           ; Regs used in _LedPointSelect: [wreg]
  8633                           ;LedPointSelect@led stored from wreg
  8634  0D4B  1283               	bcf	3,5	;RP0=0, select bank0
  8635  0D4C  1303               	bcf	3,6	;RP1=0, select bank0
  8636  0D4D  00D6               	movwf	LedPointSelect@led
  8637                           
  8638                           ;LED_B1.c: 9: if (led == 1) {
  8639  0D4E  0856               	movf	LedPointSelect@led,w
  8640  0D4F  3A01               	xorlw	1
  8641  0D50  1D03               	skipz
  8642  0D51  2D56               	goto	l232
  8643                           
  8644                           ;LED_B1.c: 10: LED = &VarLED1;
  8645  0D52  304D               	movlw	_VarLED1& (0+255)
  8646  0D53  00D5               	movwf	??_LedPointSelect
  8647  0D54  0855               	movf	??_LedPointSelect,w
  8648  0D55  00B3               	movwf	_LED
  8649  0D56                     l232:	
  8650                           
  8651                           ;LED_B1.c: 11: }
  8652                           ;LED_B1.c: 14: if (led == 2) {
  8653  0D56  0856               	movf	LedPointSelect@led,w
  8654  0D57  3A02               	xorlw	2
  8655  0D58  1D03               	skipz
  8656  0D59  2D5E               	goto	l233
  8657                           
  8658                           ;LED_B1.c: 15: LED = &VarLED2;
  8659  0D5A  3051               	movlw	_VarLED2& (0+255)
  8660  0D5B  00D5               	movwf	??_LedPointSelect
  8661  0D5C  0855               	movf	??_LedPointSelect,w
  8662  0D5D  00B3               	movwf	_LED
  8663  0D5E                     l233:	
  8664                           
  8665                           ;LED_B1.c: 16: }
  8666                           ;LED_B1.c: 24: if (led == 99) {
  8667  0D5E  0856               	movf	LedPointSelect@led,w
  8668  0D5F  3A63               	xorlw	99
  8669  0D60  1D03               	skipz
  8670  0D61  0008               	return
  8671                           
  8672                           ;LED_B1.c: 25: LED = &VarErrLED;
  8673  0D62  3049               	movlw	_VarErrLED& (0+255)
  8674  0D63  00D5               	movwf	??_LedPointSelect
  8675  0D64  0855               	movf	??_LedPointSelect,w
  8676  0D65  00B3               	movwf	_LED
  8677  0D66  0008               	return
  8678  0D67                     __end_of_LedPointSelect:	
  8679                           
  8680                           	psect	text56
  8681  0E4E                     __ptext56:	
  8682 ;; *************** function _CDS_Main *****************
  8683 ;; Defined at:
  8684 ;;		line 11 in file "../src/CDS_B1.c"
  8685 ;; Parameters:    Size  Location     Type
  8686 ;;		None
  8687 ;; Auto vars:     Size  Location     Type
  8688 ;;		None
  8689 ;; Return value:  Size  Location     Type
  8690 ;;		None               void
  8691 ;; Registers used:
  8692 ;;		wreg, status,2, status,0
  8693 ;; Tracked objects:
  8694 ;;		On entry : 0/0
  8695 ;;		On exit  : 0/0
  8696 ;;		Unchanged: 0/0
  8697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8698 ;;      Params:         0       0       0       0
  8699 ;;      Locals:         0       0       0       0
  8700 ;;      Temps:          0       3       0       0
  8701 ;;      Totals:         0       3       0       0
  8702 ;;Total ram usage:        3 bytes
  8703 ;; Hardware stack levels used:    1
  8704 ;; Hardware stack levels required when called:    3
  8705 ;; This function calls:
  8706 ;;		Nothing
  8707 ;; This function is called by:
  8708 ;;		_main
  8709 ;; This function uses a non-reentrant model
  8710 ;;
  8711                           
  8712                           
  8713                           ;psect for function _CDS_Main
  8714  0E4E                     _CDS_Main:	
  8715                           
  8716                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  8717                           
  8718                           ;incstack = 0
  8719                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  8720  0E4E  1283               	bcf	3,5	;RP0=0, select bank0
  8721  0E4F  1303               	bcf	3,6	;RP1=0, select bank0
  8722  0E50  1C27               	btfss	__CDS,0
  8723  0E51  0008               	return
  8724                           
  8725                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  8726  0E52  18A7               	btfsc	__CDS,1
  8727  0E53  2E61               	goto	l105
  8728                           
  8729                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  8730  0E54  19A7               	btfsc	__CDS,3
  8731  0E55  0008               	return
  8732                           
  8733                           ;CDS_B1.c: 16: _CDS.Time++;
  8734  0E56  3001               	movlw	1
  8735  0E57  00D5               	movwf	??_CDS_Main
  8736  0E58  0855               	movf	??_CDS_Main,w
  8737  0E59  07A8               	addwf	__CDS+1,f
  8738                           
  8739                           ;CDS_B1.c: 17: if (_CDS.Time >= 10)
  8740  0E5A  300A               	movlw	10
  8741  0E5B  0228               	subwf	__CDS+1,w
  8742  0E5C  1C03               	skipc
  8743  0E5D  0008               	return
  8744                           
  8745                           ;CDS_B1.c: 18: {
  8746                           ;CDS_B1.c: 19: _CDS.Time = 0;
  8747  0E5E  01A8               	clrf	__CDS+1
  8748                           
  8749                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  8750  0E5F  15A7               	bsf	__CDS,3
  8751                           
  8752                           ;CDS_B1.c: 21: }
  8753                           ;CDS_B1.c: 22: }
  8754                           ;CDS_B1.c: 23: } else {
  8755  0E60  0008               	return
  8756  0E61                     l105:	
  8757                           
  8758                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  8759  0E61  1CA7               	btfss	__CDS,1
  8760  0E62  0008               	return
  8761                           
  8762                           ;CDS_B1.c: 25: _CDS.GO = 0;
  8763  0E63  10A7               	bcf	__CDS,1
  8764                           
  8765                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  8766  0E64  1A27               	btfsc	__CDS,4
  8767  0E65  2E6C               	goto	l3387
  8768                           
  8769                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  8770  0E66  0829               	movf	__CDS+2,w
  8771  0E67  022A               	subwf	__CDS+3,w
  8772  0E68  1C03               	skipc
  8773  0E69  0008               	return
  8774                           
  8775                           ;CDS_B1.c: 28: _CDS.Status = 1;
  8776  0E6A  1627               	bsf	__CDS,4
  8777                           
  8778                           ;CDS_B1.c: 29: }
  8779                           ;CDS_B1.c: 30: } else {
  8780  0E6B  0008               	return
  8781  0E6C                     l3387:	
  8782                           
  8783                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  8784  0E6C  0829               	movf	__CDS+2,w
  8785  0E6D  3E9C               	addlw	156
  8786  0E6E  00D5               	movwf	??_CDS_Main
  8787  0E6F  30FF               	movlw	255
  8788  0E70  1803               	skipnc
  8789  0E71  3000               	movlw	0
  8790  0E72  00D6               	movwf	??_CDS_Main+1
  8791  0E73  0856               	movf	??_CDS_Main+1,w
  8792  0E74  3A80               	xorlw	128
  8793  0E75  00D7               	movwf	??_CDS_Main+2
  8794  0E76  3080               	movlw	128
  8795  0E77  0257               	subwf	??_CDS_Main+2,w
  8796  0E78  1D03               	skipz
  8797  0E79  2E7C               	goto	u3045
  8798  0E7A  082A               	movf	__CDS+3,w
  8799  0E7B  0255               	subwf	??_CDS_Main,w
  8800  0E7C                     u3045:	
  8801  0E7C  1C03               	skipc
  8802  0E7D  0008               	return
  8803                           
  8804                           ;CDS_B1.c: 32: _CDS.Status = 0;
  8805  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  8806  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
  8807  0E80  1227               	bcf	__CDS,4
  8808  0E81  0008               	return
  8809  0E82                     __end_of_CDS_Main:	
  8810                           
  8811                           	psect	text57
  8812  0B61                     __ptext57:	
  8813 ;; *************** function _CDS_Initialization *****************
  8814 ;; Defined at:
  8815 ;;		line 7 in file "../src/CDS_B1.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;		None
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;		None
  8820 ;; Return value:  Size  Location     Type
  8821 ;;		None               void
  8822 ;; Registers used:
  8823 ;;		None
  8824 ;; Tracked objects:
  8825 ;;		On entry : 0/0
  8826 ;;		On exit  : 0/0
  8827 ;;		Unchanged: 0/0
  8828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8829 ;;      Params:         0       0       0       0
  8830 ;;      Locals:         0       0       0       0
  8831 ;;      Temps:          0       0       0       0
  8832 ;;      Totals:         0       0       0       0
  8833 ;;Total ram usage:        0 bytes
  8834 ;; Hardware stack levels used:    1
  8835 ;; Hardware stack levels required when called:    3
  8836 ;; This function calls:
  8837 ;;		Nothing
  8838 ;; This function is called by:
  8839 ;;		_main
  8840 ;; This function uses a non-reentrant model
  8841 ;;
  8842                           
  8843                           
  8844                           ;psect for function _CDS_Initialization
  8845  0B61                     _CDS_Initialization:	
  8846                           
  8847                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  8848                           
  8849                           ;incstack = 0
  8850                           ; Regs used in _CDS_Initialization: []
  8851  0B61  1283               	bcf	3,5	;RP0=0, select bank0
  8852  0B62  1303               	bcf	3,6	;RP1=0, select bank0
  8853  0B63  1427               	bsf	__CDS,0
  8854  0B64  0008               	return
  8855  0B65                     __end_of_CDS_Initialization:	
  8856                           
  8857                           	psect	text58
  8858  0C7E                     __ptext58:	
  8859 ;; *************** function _ISR *****************
  8860 ;; Defined at:
  8861 ;;		line 107 in file "../src/MCU_B1.c"
  8862 ;; Parameters:    Size  Location     Type
  8863 ;;		None
  8864 ;; Auto vars:     Size  Location     Type
  8865 ;;		None
  8866 ;; Return value:  Size  Location     Type
  8867 ;;		None               void
  8868 ;; Registers used:
  8869 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8870 ;; Tracked objects:
  8871 ;;		On entry : 0/0
  8872 ;;		On exit  : 0/0
  8873 ;;		Unchanged: 0/0
  8874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8875 ;;      Params:         0       0       0       0
  8876 ;;      Locals:         0       0       0       0
  8877 ;;      Temps:          4       0       0       0
  8878 ;;      Totals:         4       0       0       0
  8879 ;;Total ram usage:        4 bytes
  8880 ;; Hardware stack levels used:    1
  8881 ;; Hardware stack levels required when called:    2
  8882 ;; This function calls:
  8883 ;;		_TMR1_ISR
  8884 ;;		_UART_ISR
  8885 ;; This function is called by:
  8886 ;;		Interrupt level 1
  8887 ;; This function uses a non-reentrant model
  8888 ;;
  8889                           
  8890                           
  8891                           ;psect for function _ISR
  8892  0C7E                     _ISR:	
  8893                           
  8894                           ;MCU_B1.c: 109: ;;
  8895                           ;MCU_B1.c: 111: ;;
  8896                           ;MCU_B1.c: 113: TMR1_ISR();
  8897  0C7E  158A  252F  158A   	fcall	_TMR1_ISR
  8898                           
  8899                           ;MCU_B1.c: 115: ;;
  8900                           ;MCU_B1.c: 117: ;;
  8901                           ;MCU_B1.c: 119: UART_ISR();
  8902  0C81  158A  2682  158A   	fcall	_UART_ISR
  8903  0C84  0876               	movf	??_ISR+3,w
  8904  0C85  1283               	bcf	3,5	;RP0=0, select bank0
  8905  0C86  1303               	bcf	3,6	;RP1=0, select bank0
  8906  0C87  00FF               	movwf	127
  8907  0C88  0875               	movf	??_ISR+2,w
  8908  0C89  008A               	movwf	10
  8909  0C8A  0874               	movf	??_ISR+1,w
  8910  0C8B  0084               	movwf	4
  8911  0C8C  0E73               	swapf	??_ISR^(0+-128),w
  8912  0C8D  0083               	movwf	3
  8913  0C8E  0EFE               	swapf	126,f
  8914  0C8F  0E7E               	swapf	126,w
  8915  0C90  0009               	retfie
  8916  0C91                     __end_of_ISR:	
  8917                           
  8918                           	psect	intentry
  8919  0004                     __pintentry:	
  8920                           ;incstack = 0
  8921                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8922                           
  8923  0004                     interrupt_function:	
  8924  007E                     saved_w	set	btemp
  8925  0004  00FE               	movwf	btemp
  8926  0005  0E03               	swapf	3,w
  8927  0006  00F3               	movwf	??_ISR
  8928  0007  0804               	movf	4,w
  8929  0008  00F4               	movwf	??_ISR+1
  8930  0009  080A               	movf	10,w
  8931  000A  00F5               	movwf	??_ISR+2
  8932  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8933  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8934  000D  087F               	movf	btemp+1,w
  8935  000E  00F6               	movwf	??_ISR+3
  8936  000F  158A  2C7E         	ljmp	_ISR
  8937                           
  8938                           	psect	text59
  8939  0E82                     __ptext59:	
  8940 ;; *************** function _UART_ISR *****************
  8941 ;; Defined at:
  8942 ;;		line 740 in file "../src/MCU_B1.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;		None
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;  i               2    1[COMMON] int 
  8947 ;; Return value:  Size  Location     Type
  8948 ;;		None               void
  8949 ;; Registers used:
  8950 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8956 ;;      Params:         0       0       0       0
  8957 ;;      Locals:         2       0       0       0
  8958 ;;      Temps:          1       0       0       0
  8959 ;;      Totals:         3       0       0       0
  8960 ;;Total ram usage:        3 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    1
  8963 ;; This function calls:
  8964 ;;		_getch
  8965 ;; This function is called by:
  8966 ;;		_ISR
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970                           
  8971                           ;psect for function _UART_ISR
  8972  0E82                     _UART_ISR:	
  8973                           
  8974                           ;MCU_B1.c: 741: if (RCIE == 1 && RCIF == 1) {
  8975                           
  8976                           ;incstack = 0
  8977                           ; Regs used in _UART_ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8978  0E82  1683               	bsf	3,5	;RP0=1, select bank1
  8979  0E83  1303               	bcf	3,6	;RP1=0, select bank1
  8980  0E84  1E8C               	btfss	12,5	;volatile
  8981  0E85  0008               	return
  8982  0E86  1283               	bcf	3,5	;RP0=0, select bank0
  8983  0E87  1303               	bcf	3,6	;RP1=0, select bank0
  8984  0E88  1E8C               	btfss	12,5	;volatile
  8985  0E89  0008               	return
  8986                           
  8987                           ;MCU_B1.c: 743: for (int i = 0; i < 8; i++) {
  8988  0E8A  01F1               	clrf	UART_ISR@i
  8989  0E8B  01F2               	clrf	UART_ISR@i+1
  8990  0E8C  0872               	movf	UART_ISR@i+1,w
  8991  0E8D  3A80               	xorlw	128
  8992  0E8E  00FF               	movwf	127
  8993  0E8F  3080               	movlw	128
  8994  0E90  027F               	subwf	127,w
  8995  0E91  1D03               	skipz
  8996  0E92  2E95               	goto	u311_25
  8997  0E93  3008               	movlw	8
  8998  0E94  0271               	subwf	UART_ISR@i,w
  8999  0E95                     u311_25:	
  9000  0E95  1803               	btfsc	3,0
  9001  0E96  2EB2               	goto	i1l472
  9002  0E97                     i1l3431:	
  9003                           
  9004                           ;MCU_B1.c: 744: UART.Data[i] = getch();
  9005  0E97  158A  2372  158A   	fcall	_getch
  9006  0E9A  00F0               	movwf	??_UART_ISR
  9007  0E9B  0871               	movf	UART_ISR@i,w
  9008  0E9C  3E36               	addlw	_UART& (0+255)
  9009  0E9D  0084               	movwf	4
  9010  0E9E  0870               	movf	??_UART_ISR,w
  9011  0E9F  1383               	bcf	3,7	;select IRP bank0
  9012  0EA0  0080               	movwf	0
  9013  0EA1  3001               	movlw	1
  9014  0EA2  07F1               	addwf	UART_ISR@i,f
  9015  0EA3  1803               	skipnc
  9016  0EA4  0AF2               	incf	UART_ISR@i+1,f
  9017  0EA5  3000               	movlw	0
  9018  0EA6  07F2               	addwf	UART_ISR@i+1,f
  9019  0EA7  0872               	movf	UART_ISR@i+1,w
  9020  0EA8  3A80               	xorlw	128
  9021  0EA9  00FF               	movwf	127
  9022  0EAA  3080               	movlw	128
  9023  0EAB  027F               	subwf	127,w
  9024  0EAC  1D03               	skipz
  9025  0EAD  2EB0               	goto	u312_25
  9026  0EAE  3008               	movlw	8
  9027  0EAF  0271               	subwf	UART_ISR@i,w
  9028  0EB0                     u312_25:	
  9029  0EB0  1C03               	skipc
  9030  0EB1  2E97               	goto	i1l3431
  9031  0EB2                     i1l472:	
  9032                           
  9033                           ;MCU_B1.c: 745: }
  9034                           ;MCU_B1.c: 746: UART.RxGO = 1;
  9035  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  9036  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  9037  0EB4  14C1               	bsf	_UART+11,1
  9038                           
  9039                           ;MCU_B1.c: 753: RCIF = 0;
  9040  0EB5  128C               	bcf	12,5	;volatile
  9041  0EB6  0008               	return
  9042  0EB7                     __end_of_UART_ISR:	
  9043                           
  9044                           	psect	text60
  9045  0B72                     __ptext60:	
  9046 ;; *************** function _getch *****************
  9047 ;; Defined at:
  9048 ;;		line 864 in file "../src/MCU_B1.c"
  9049 ;; Parameters:    Size  Location     Type
  9050 ;;		None
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;		None
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      unsigned char 
  9055 ;; Registers used:
  9056 ;;		wreg
  9057 ;; Tracked objects:
  9058 ;;		On entry : 0/0
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9062 ;;      Params:         0       0       0       0
  9063 ;;      Locals:         0       0       0       0
  9064 ;;      Temps:          0       0       0       0
  9065 ;;      Totals:         0       0       0       0
  9066 ;;Total ram usage:        0 bytes
  9067 ;; Hardware stack levels used:    1
  9068 ;; This function calls:
  9069 ;;		Nothing
  9070 ;; This function is called by:
  9071 ;;		_UART_ISR
  9072 ;;		_getche
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           
  9077                           ;psect for function _getch
  9078  0B72                     _getch:	
  9079  0B72                     i1l500:	
  9080                           ;MCU_B1.c: 867: continue;
  9081                           
  9082                           ;MCU_B1.c: 866: while (!RCIF)
  9083                           
  9084                           ;incstack = 0
  9085                           ; Regs used in _getch: [wreg]
  9086                           
  9087  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  9088  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  9089  0B74  1E8C               	btfss	12,5	;volatile
  9090  0B75  2B72               	goto	i1l500
  9091                           
  9092                           ;MCU_B1.c: 868: return RCREG;
  9093  0B76  081A               	movf	26,w	;volatile
  9094  0B77  0008               	return
  9095  0B78                     __end_of_getch:	
  9096                           
  9097                           	psect	text61
  9098  0D2F                     __ptext61:	
  9099 ;; *************** function _TMR1_ISR *****************
  9100 ;; Defined at:
  9101 ;;		line 209 in file "../src/MCU_B1.c"
  9102 ;; Parameters:    Size  Location     Type
  9103 ;;		None
  9104 ;; Auto vars:     Size  Location     Type
  9105 ;;		None
  9106 ;; Return value:  Size  Location     Type
  9107 ;;		None               void
  9108 ;; Registers used:
  9109 ;;		wreg, status,2
  9110 ;; Tracked objects:
  9111 ;;		On entry : 0/0
  9112 ;;		On exit  : 0/0
  9113 ;;		Unchanged: 0/0
  9114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9115 ;;      Params:         0       0       0       0
  9116 ;;      Locals:         0       0       0       0
  9117 ;;      Temps:          0       0       0       0
  9118 ;;      Totals:         0       0       0       0
  9119 ;;Total ram usage:        0 bytes
  9120 ;; Hardware stack levels used:    1
  9121 ;; This function calls:
  9122 ;;		Nothing
  9123 ;; This function is called by:
  9124 ;;		_ISR
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           
  9129                           ;psect for function _TMR1_ISR
  9130  0D2F                     _TMR1_ISR:	
  9131                           
  9132                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  9133                           
  9134                           ;incstack = 0
  9135                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9136  0D2F  1683               	bsf	3,5	;RP0=1, select bank1
  9137  0D30  1303               	bcf	3,6	;RP1=0, select bank1
  9138  0D31  1C0C               	btfss	12,0	;volatile
  9139  0D32  0008               	return
  9140  0D33  1283               	bcf	3,5	;RP0=0, select bank0
  9141  0D34  1303               	bcf	3,6	;RP1=0, select bank0
  9142  0D35  1C0C               	btfss	12,0	;volatile
  9143  0D36  0008               	return
  9144                           
  9145                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
  9146  0D37  30FA               	movlw	250
  9147  0D38  008F               	movwf	15	;volatile
  9148                           
  9149                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
  9150  0D39  3038               	movlw	56
  9151  0D3A  008E               	movwf	14	;volatile
  9152                           
  9153                           ;MCU_B1.c: 214: TMR1IF = 0;
  9154  0D3B  100C               	bcf	12,0	;volatile
  9155                           
  9156                           ;MCU_B1.c: 234: Timer1.Count++;
  9157  0D3C  3001               	movlw	1
  9158  0D3D  07B1               	addwf	_Timer1+1,f
  9159  0D3E  1803               	skipnc
  9160  0D3F  0AB2               	incf	_Timer1+2,f
  9161  0D40  3000               	movlw	0
  9162  0D41  07B2               	addwf	_Timer1+2,f
  9163                           
  9164                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
  9165  0D42  3064               	movlw	100
  9166  0D43  0631               	xorwf	_Timer1+1,w
  9167  0D44  0432               	iorwf	_Timer1+2,w
  9168  0D45  1D03               	skipz
  9169  0D46  0008               	return
  9170                           
  9171                           ;MCU_B1.c: 236: {
  9172                           ;MCU_B1.c: 237: Timer1.Count = 0;
  9173  0D47  01B1               	clrf	_Timer1+1
  9174  0D48  01B2               	clrf	_Timer1+2
  9175                           
  9176                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
  9177  0D49  1430               	bsf	_Timer1,0
  9178  0D4A  0008               	return
  9179  0D4B                     __end_of_TMR1_ISR:	
  9180  007E                     btemp	set	126	;btemp
  9181  007E                     wtemp	set	126
  9182  007E                     wtemp0	set	126
  9183  0080                     wtemp1	set	128
  9184  0082                     wtemp2	set	130
  9185  0084                     wtemp3	set	132
  9186  0086                     wtemp4	set	134
  9187  0088                     wtemp5	set	136
  9188  007F                     wtemp6	set	127
  9189  007E                     ttemp	set	126
  9190  007E                     ttemp0	set	126
  9191  0081                     ttemp1	set	129
  9192  0084                     ttemp2	set	132
  9193  0087                     ttemp3	set	135
  9194  007F                     ttemp4	set	127
  9195  007E                     ltemp	set	126
  9196  007E                     ltemp0	set	126
  9197  0082                     ltemp1	set	130
  9198  0086                     ltemp2	set	134
  9199  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         136
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     25      78
    BANK1            80      0      80
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK0[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_UART_ISR

Critical Paths under _main in BANK0

    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _UART_Main->_UART_Transmit
    _UART_Transmit->_putch
    _PIR_Main->_setMain_Exception
    _setMain_Exception->_setLights_Trigger
    _setLights_Trigger->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect
    _PIR_Initialization->_setLED
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getLightsControl_OK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_setLights_Main
    _setLights_Main->_setLights
    _setLights->_getMain_All_Error_Status
    _setLights_Line->_LightsPointSelect
    _getMain_All_Error_Status->_getCDS_Status
    _Lights_Control->_LightsPointSelect
    _Lights_Close->_getMain_LightsStatus
    _getMain_LightsStatus->_getLights_Status
    _getLights_Status->_LightsPointSelect
    _Lights_Initialization->_setLights_Initialization
    _setLights_Initialization->_LightsPointSelect
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _setLED->_LedPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   22911
                                             20 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                          _UART_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0       0
                       _UART_SetData
 ---------------------------------------------------------------------------------
 (2) _UART_SetData                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2304
                                              9 BANK0      7     6      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     981
                                              2 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     754
                                              2 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     582
                                              0 BANK0      2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Main                                            0     0      0     130
                       _UART_Receive
                      _UART_Transmit
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit                                        2     2      0     130
                                              1 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Receive                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             8     8      0    6858
                                             12 BANK0      8     8      0
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
                  _setMain_Exception
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    3344
                                              5 BANK0      7     7      0
                 _getAll_Lights_Line
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_Trigger                                    3     2      1     422
                                              2 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getAll_Lights_Line                                   1     1      0      59
                                              2 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0    2631
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                           _UART_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1911
                                              9 BANK0      7     7      0
                            ___lwdiv
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      71
                                              1 BANK0      2     2      0
                _getLightsControl_OK
 ---------------------------------------------------------------------------------
 (3) _getLightsControl_OK                                  1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 5     5      0      72
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     874
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          5     5      0    1769
                                             12 BANK0      5     5      0
                       _Lights_Close
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0     794
                                             11 BANK0      1     1      0
                  _LightsPointSelect
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1     679
                                              8 BANK0      3     2      1
                  _LightsPointSelect
           _getMain_All_Error_Status
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      53
                                              2 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getMain_All_Error_Status                             7     7      0     272
                                              1 BANK0      7     7      0
                      _getCDS_Status
 ---------------------------------------------------------------------------------
 (3) _getCDS_Status                                        1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       5     5      0     112
                                              2 BANK0      5     5      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Lights_Close                                         1     1      0     260
                                              9 BANK0      1     1      0
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 5     5      0     260
                                              4 BANK0      5     5      0
                   _getLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLights_Status                                     2     2      0      87
                                              2 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      53
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      53
                                              2 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _LightsPointSelect                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2671
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2671
                                              4 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2759
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2759
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    2631
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0      68
                                              3 COMMON     4     4      0
                           _TMR1_ISR
                           _UART_ISR
 ---------------------------------------------------------------------------------
 (7) _UART_ISR                                             3     3      0      68
                                              0 COMMON     3     3      0
                              _getch
 ---------------------------------------------------------------------------------
 (8) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Close
       _getMain_LightsStatus
         _getLights_Status
           _LightsPointSelect
     _Lights_Control
       _LightsPointSelect
     _getLoad_OK
     _getMain_All_Error_Status
       _getCDS_Status
     _getMain_LightsStatus
       _getLights_Status
         _LightsPointSelect
     _setLights_Main
       _LightsPointSelect
       _setLights
         _LightsPointSelect
         _getMain_All_Error_Status
           _getCDS_Status
         _setLights_Line
           _LightsPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getMain_All_Error_Status
       _getCDS_Status
     _getMain_LightsStatus
       _getLights_Status
         _LightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getLightsControl_OK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _UART_Set
     _WDT_Set
   _PIR_Initialization
     _setLED
       _LedPointSelect
   _PIR_Main
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
       _getCDS_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
     _setMain_Exception
       _getAll_Lights_Line
         _LightsPointSelect
       _setLED
         _LedPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _UART_Main
     _UART_Receive
     _UART_Transmit
       _putch
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _UART_SetData

 _ISR (ROOT)
   _TMR1_ISR
   _UART_ISR
     _getch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      4E       5       97.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      A8      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Dec 05 16:12:21 2014

                     _WDT_Clearing 0002          getMain_Lights_Count@count 0056  
                     ___awdiv@sign 005B                                 fsr 0004  
                              l105 0E61                                l232 0D56  
                              l233 0D5E                                l731 023D  
                              l476 07FA                                l741 014A  
                              l734 005E                                l494 0BA5  
                              l663 0EEC                                l735 01E2  
                              l736 01E0                                l658 0ED0  
                              l659 0EF0                                l863 02A0  
                              l864 02B6                                l857 0424  
                              l858 0271                                _GIE 005F  
                              _RB2 0032                                _RA4 002C  
                              _LED 0033                                _RB3 0033  
                              _RB4 0034                                _RB5 0035  
                              _PS0 0408                                _PS1 0409  
                              _PS2 040A                                _ISR 0C7E  
                              _PSA 040B                                _RX9 00C6  
                              _WDT 0077                                _TX9 04C6  
           getAll_Lights_Line@line 0057                                fsr0 0004  
                              indf 0000                    __end_of_ADC_Set 0B92  
        __end_of_LightsPointSelect 0BDC             _setMain_Exception$2319 005E  
                 _getLights_Status 0C16            __size_of_Lights_Control 006D  
                             ?_ISR 0070                         Load_Main@i 0064  
                       Load_Main@j 0060                               l1148 0F1F  
                             l4103 066F                               l3303 07A1  
                             l4201 0E43                               l3321 07C2  
                             l4131 0697                               l4203 0E25  
                             l3331 07E3                               l4109 0678  
                             l4117 0680                               l4205 0E4A  
                             l3309 07AC                               l4127 0693  
                             l4135 069B                               l4231 078D  
                             l3351 0F84                               l3335 07EB  
                             l3327 07D8                               l3319 07B4  
                             l4161 06BB                               l3273 0701  
                             l3361 0FA5                               l4241 0D77  
                             l4139 06A3                               l4067 0ECB  
                             l4227 0772                               l4157 06B5  
                             l4165 06C1                               l3285 0726  
                             l4077 0EE6                               l4069 0ED4  
                             l4413 0DEC                               l3357 0F9A  
                             l3349 0F76                               l4245 0D7D  
                   _Load_Main$2599 0062                               l4095 0667  
                             l4271 060C                               l4239 0D74  
                             l4511 05DF                               l4601 0DB9  
                             l3387 0E6C                               l4291 0646  
                             l4275 0612                               l4531 0499  
                             l4285 0624                               l4381 0F60  
                             l4533 049D                               l4287 0630  
                             l4279 0618                               l4375 0F4E  
                             l4367 0F3A                               l4535 04A1  
                             l4527 0493                               l4543 04AE  
                             l4289 0638                               l4553 04D2  
                             l4537 04A5                               l4545 04BF  
                             l4707 0192                               l4627 004A  
                             l4379 0F56                               l4491 05B2  
                             l4483 0596                               l4539 04A9  
                             l4805 0F16                               l4901 02FC  
                             l4807 0F1A                               l4655 00AE  
                             l4911 034A                               l4495 05BB  
                             l4583 0564                               l4575 0538  
                             l4559 04EE                               l4809 0F22  
                             l4649 007D                               l4569 051C  
                             l4851 02A3                               l4685 0143  
                             l4933 03C9                               l4589 0572  
                             l4679 0137                               l4919 035E  
                             l4935 03D8                               l4785 0228  
                             l4945 03F4                               l4929 0395  
                             l4883 02D8                               l4895 02EF  
                             l4899 02FB                               l4997 0FDE  
                             l4989 0FC2              _myMain_Initialization 0B5D  
                     __CFG_WDTE$ON 0000                               u3045 0E7C  
                             u2740 06FD                               u5135 015D  
                             u4520 062D                               u2915 0F79  
                             u5075 0101                               u4355 0CB3  
                             u2835 07B7                               _PEIE 005E  
                             u4540 0643                               u2935 0F85  
                             u2855 07C3                               u4385 0E2E  
                             u2945 0F91                               u2865 07CF  
                             u2955 0F9B                               u5515 03BB  
                             u2875 07D9                               _RCIE 0465  
                             _RCIF 0065                               u5535 03E8  
                             u4575 0D90                               u5465 031C  
                             u5475 0340                               u5565 0411  
                             u5495 037C                               _UART 0036  
                             _TXIE 0464                               _TXIF 0064  
                             __CDS 0027                               __PIR 00A0  
                             _Load 00CF                               _main 0FAC  
                             btemp 007E                    __end_of_WDT_Set 0C06  
                             ltemp 007E                               start 0011  
                             ttemp 007E                               wtemp 007E  
                 __end_of_CDS_Main 0E82                              ??_ISR 0073  
                _setLights_Trigger 0D14                      ??_Lights_Main 0061  
                    __CFG_PLLEN$ON 0000                   __end_of_LED_Main 0B61  
               ?_setLights_Trigger 0057                   ??_setPIRLED_Main 0059  
                            ?_main 0069                    __end_of___awdiv 07F2  
                            _ADRES 001E                    ___awdiv@divisor 0055  
                            _T1CON 0010                    __end_of___lwdiv 0FAC  
                    ?_Lights_Close 0070                              i1l500 0B72  
                            i1l472 0EB2                    ___awdiv@counter 005A  
                            _RCREG 001A                              _RCSTA 0018  
                            _TMR1H 000F                              _TMR1L 000E  
                            _SPBRG 0099                              _PORTA 0005  
                            _PORTB 0006                              _PORTC 0007  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087                              _TXREG 0019  
                            _TXSTA 0098               setMain_Exception@buz 005C  
          __end_of_Timeout_Counter 0CB9                   __end_of_UART_ISR 0EB7  
               __size_of_UART_Main 000E                ??_setLights_Trigger 0058  
                 __end_of_PIR_Main 043A                   __end_of_TMR1_ISR 0D4B  
                 __end_of_UART_Set 0D14                   __end_of_TMR1_Set 0BF8  
                            _getAD 0D67                              _getch 0B72  
                            _putch 0BA2                   __end_of_WDT_Main 0C5A  
                    _LightsControl 0035                     __CFG_BOREN$OFF 0000  
     __end_of_getMain_Lights_Count 0C38                              pclath 000A  
                            ltemp0 007E                              ltemp1 0082  
                            ltemp2 0086                              ltemp3 0080  
   __size_of_setLED_Initialization 0012       __end_of_getMain_LightsStatus 0E4E  
    __end_of_setLED_Initialization 0C6C                              ttemp0 007E  
                            ttemp1 0081                              ttemp2 0084  
                            ttemp3 0087                              ttemp4 007F  
                            status 0003                              wtemp0 007E  
                            wtemp1 0080                              wtemp2 0082  
                            wtemp3 0084                              wtemp4 0086  
                            wtemp5 0088                              wtemp6 007F  
                getPIR_AD@channel1 0063                  getPIR_AD@channel2 005E  
           ?_setLoad_AH_AL_Restore 0070                     _setLights_Main 0DCB  
                   _setLights_Line 0BDC                    __initialization 0013  
        __end_of_setLights_Trigger 0D2F                       __end_of_main 1000  
                 __end_of_Fosc_Set 0B72                          ??_ADC_Set 0055  
                           ??_main 006D                     ??_Lights_Close 005E  
              __end_of_Lights_Main 0F2D         __size_of_LightsPointSelect 000C  
                           ?_getAD 0055             ?_myMain_Initialization 0070  
                           ?_getch 0070                             _ADCON0 001F  
                           _ADCON1 009F                   ___awdiv@dividend 0057  
                        ??_WDT_Set 0055                             _ANSELA 0185  
                           ?_putch 0070                             _ANSELB 0186  
         _getMain_All_Error_Status 0EB7                             i1l3431 0E97  
                           u311_25 0E95                             u312_25 0EB0  
                           _FVRCON 009D             getLights_Status@lights 0057  
                           _PIRLED 002C                             _OSCCON 0090  
               __size_of_Load_Main 0220                             _TMR1IE 0460  
                           _TMR1IF 0060                             _IO_Set 0CCE  
                           _TRISC6 043E                             _TRISC7 043F  
           getLights_Status@status 0058             __end_of_setLights_Main 0DF3  
           __end_of_setLights_Line 0BEA                _getLightsControl_OK 0B9A  
       __end_of_Mcu_Initialization 0C7E                             _Lights 0034  
                           _Timer1 0030                  __end_of_UART_Main 0800  
      __size_of_CDS_Initialization 0004            ??_Lights_Initialization 0058  
                        ??___awdiv 0059                          ??___lwdiv 0059  
                           _setLED 0656                             _myMain 0020  
                 ___awdiv@quotient 005C        __end_of_Load_Initialization 0B7E  
             ?_getLightsControl_OK 0070                             saved_w 007E  
                 ?_Timeout_Counter 0070        getMain_Lights_Count@status1 0059  
      getMain_Lights_Count@status2 0057        getMain_Lights_Count@status3 0058  
                   _Lights_Control 06C7            __size_of_LedPointSelect 001C  
                        ?_CDS_Main 0070            __size_of_getMain_LoadOK 0010  
      __size_of_PIR_Initialization 0014         getMain_LightsStatus@status 005D  
          __end_of__initialization 0022                          ?_LED_Main 0070  
                    ?_my_MainTimer 0070                    ?_setLights_Main 0070  
                  ?_setLights_Line 0070              __end_of_UART_Transmit 0DA5  
       __size_of_setLights_Trigger 001B                     __pcstackCOMMON 0070  
               __size_of_getCDS_AD 002A                          ?_UART_ISR 0070  
         __end_of_getLights_Status 0C27                      __end_of_getAD 0D83  
                        ?_PIR_Main 0070                          ?_TMR1_ISR 0070  
                        ?_UART_Set 0070                      __end_of_getch 0B78  
                        ?_TMR1_Set 0070             setLoad_AH_AL_Restore@i 0056  
               _LED_Initialization 0BC4                 __size_of_getPIR_AD 013A  
                      _Lights_Main 0EF2                      __end_of_putch 0BAA  
         _setLights_Initialization 0B84               _getMain_Lights_Count 0C27  
                        ?_WDT_Main 0070                  __end_of_Load_Main 0245  
            ??_getLightsControl_OK 0055               _getMain_LightsStatus 0E1D  
       __end_of_set_TimeoutCleared 0B84                ?_LED_Initialization 0070  
           __end_of_Lights_Control 0734              getMain_LightsStatus@i 005B  
                          ??_getAD 0056                            ??_getch 0070  
                       ??_CDS_Main 0055                            ??_putch 0055  
                       __pbssBANK0 0020                         __pbssBANK1 00A0  
                        ?_Fosc_Set 0070        __size_of_getAll_Lights_Line 0011  
                          ?_IO_Set 0070                    __CFG_VCAPEN$DIS 0000  
                   ??_my_MainTimer 0055                         ??_LED_Main 005B  
             __end_of_Lights_Close 0CCE          getMain_LightsStatus@count 005A  
             ??_LED_Initialization 005A                  LedPointSelect@led 0056  
                       __pmaintext 0FAC                         ??_UART_ISR 0070  
                       ??_PIR_Main 0061                         ??_TMR1_ISR 0070  
                       ??_UART_Set 0055                 __size_of_setLights 0061  
                       _getLoad_AD 0574                         ??_TMR1_Set 0055  
                       __pintentry 0004                         _getLoad_OK 0BBA  
                          ?_setLED 0057            setLights_Trigger@lights 0059  
            ?_getMain_Lights_Count 0070                          UART_ISR@i 0071  
                          _ADC_Set 0B8B                         ??_WDT_Main 0055  
            ?_getMain_LightsStatus 0070             __size_of_getCDS_Status 0008  
                  ?_Lights_Control 0070                  __end_of_getCDS_AD 0E1D  
                          _WDT_Set 0BF8                         ??_Fosc_Set 0055  
                __end_of_getPIR_AD 0574            ??_setLoad_AH_AL_Restore 0055  
                    ?_UART_Receive 0070                      ?_UART_SetData 0070  
                  __size_of_IO_Set 0015                         getCDS_AD@i 005A  
                       getCDS_AD@j 005B                            _Lights1 0042  
                          _VarLED1 004D                            _VarLED2 0051  
                          ___awdiv 0795          getLightsControl_OK@loadok 0055  
                          ___lwdiv 0F6C                    __size_of_setLED 0071  
                          __ptext0 0000                            __ptext1 0DA5  
                          __ptext2 0BAA                            __ptext3 0B5D  
                          __ptext4 043A                            __ptext5 0795  
                          __ptext6 0574                            __ptext7 0DF3  
                          __ptext8 0D67                            __ptext9 0B7E  
                       getPIR_AD@i 0064                         getPIR_AD@j 0062  
                     __size_of_ISR 0013         ??_getMain_All_Error_Status 0056  
          ??_myMain_Initialization 0055                     _LedPointSelect 0D4B  
                   _getMain_LoadOK 0C06                            clrloop0 0BB3  
                __end_of_setLights 0795               end_of_initialization 0022  
                   ??_UART_Receive 0055                     ??_UART_SetData 0055  
                    _getCDS_Status 0B92                     UART_Transmit@i 0056  
            _setLED_Initialization 0C5A                        ?_getLoad_AD 0070  
   __size_of_Lights_Initialization 0004                        ?_getLoad_OK 0070  
           ??_getMain_Lights_Count 0055      __end_of_Lights_Initialization 0B69  
           ??_getMain_LightsStatus 0059                          _UART_Main 07F2  
         setLED_Initialization@led 0059                 _Mcu_Initialization 0C6C  
             __end_of_my_MainTimer 0DCB             __end_of_LedPointSelect 0D67  
           __end_of_getMain_LoadOK 0C16                setPIRLED_Main@count 005A  
              ?_Mcu_Initialization 0070              __size_of_Lights_Close 0015  
          __size_of_setPIRLED_Main 0071                   ??_setLights_Main 0060  
                 ??_setLights_Line 0057               setLights_Main@lights 0060  
  getMain_All_Error_Status@command 005B                  __size_of_CDS_Main 0034  
                   ?_getCDS_Status 0070                     __end_of_IO_Set 0CE3  
       __end_of_CDS_Initialization 0B65         ??_setLights_Initialization 0057  
                __size_of_LED_Main 0003                  _setMain_Exception 0F2D  
             ??_Mcu_Initialization 0056                      ?_WDT_Clearing 0070  
               ?_setMain_Exception 0070                  ?_getLights_Status 0070  
         setMain_Exception@command 0060                       ?_Lights_Main 0070  
                       ?_UART_Main 0070                  __size_of_UART_ISR 0035  
                __size_of_PIR_Main 01F5                  __size_of_TMR1_ISR 001C  
               ??_getLights_Status 0057                  __size_of_UART_Set 0019  
                __size_of_TMR1_Set 000E                     __end_of_setLED 06C7  
              ??_setMain_Exception 005A                       _Lights_Close 0CB9  
                __size_of_WDT_Main 0011                _Lights_Control$4505 0059  
              start_initialization 0013                    ?_LedPointSelect 0070  
             setLights_Line@lights 0057                          _Load_Main 0025  
                      __end_of_ISR 0C91                    ?_getMain_LoadOK 0070  
       __end_of_PIR_Initialization 0CA5       __size_of_Load_Initialization 0006  
              getCDS_Status@status 0055                __size_of_getLoad_AD 0071  
              __size_of_getLoad_OK 000A                 _set_TimeoutCleared 0B7E  
                         ??_IO_Set 0055           __size_of_Timeout_Counter 0014  
                        _VarErrLED 0049             ?_setLED_Initialization 0070  
                __size_of_Fosc_Set 0005          __end_of_setMain_Exception 0F6C  
                  setLights@lights 005F                ?_set_TimeoutCleared 0070  
                   ??_WDT_Clearing 0055                    setLights@status 005D  
      __end_of_getLightsControl_OK 0BA2                           ??_setLED 0058  
                         ?_ADC_Set 0070                   ??_Lights_Control 0057  
             __end_of_UART_Receive 0B6D   __end_of_getMain_All_Error_Status 0EF2  
             __end_of_UART_SetData 0BB2                        __pbssCOMMON 0077  
                        ___latbits 0001                         ?_Load_Main 0070  
           __size_of_UART_Transmit 0022                      __pcstackBANK0 0055  
             ??_set_TimeoutCleared 0055         __end_of_getAll_Lights_Line 0C49  
                         ?_WDT_Set 0070                    ??_getCDS_Status 0055  
                    PIR_Main@error 0068                          _getCDS_AD 0DF3  
   __size_of_setLoad_AH_AL_Restore 0018      __end_of_setLoad_AH_AL_Restore 0CFB  
                        _getPIR_AD 043A        __size_of_LED_Initialization 000C  
                   Load_Main@adjgo 0061                   ___lwdiv@dividend 0057  
                   Load_Main@error 0063                      _PIR_Main$3074 0066  
                         ?___awdiv 0055              __size_of_my_MainTimer 0026  
                         ?___lwdiv 0055                        ??_UART_Main 0058  
                 getMain_LoadOK@ok 0057           setLights_Trigger@command 0057  
   __size_of_myMain_Initialization 0001      __end_of_myMain_Initialization 0B5E  
                   __size_of_getAD 001C                   ___lwdiv@quotient 005A  
                   __size_of_getch 0006                     _setPIRLED_Main 05E5  
                         _CDS_Main 0E4E                     __size_of_putch 0008  
                interrupt_function 0004                         ?_getCDS_AD 0057  
                         _LED_Main 0B5E                          _setLights 0734  
                        clear_ram0 0BB2   __end_of_setLights_Initialization 0B8B  
       __size_of_setMain_Exception 003F                       _my_MainTimer 0DA5  
                       ?_getPIR_AD 005E                      _UART_Transmit 0D83  
                         _GO_nDONE 00F9                  ??_Timeout_Counter 0055  
                         _UART_ISR 0E82                           _PIR_Main 0245  
                     ??_getLoad_AD 0057                           _TMR1_ISR 0D2F  
                     ??_getLoad_OK 0055                           _UART_Set 0CFB  
                         _TMR1_Set 0BEA                           _WDT_Main 0C49  
                 __size_of_ADC_Set 0007               __size_of_Lights_Main 003B  
                      ??_Load_Main 005E             __end_of_setPIRLED_Main 0656  
   getMain_All_Error_Status@status 005C                        getAD@adcon0 0056  
                      getAD@adcon1 0055               __end_of_WDT_Clearing 0004  
                         _Fosc_Set 0B6D                   __size_of_WDT_Set 000E  
          setMain_Exception@status 005D                 __end_of_getLoad_AD 05E5  
               __end_of_getLoad_OK 0BC4  __size_of_getMain_All_Error_Status 003B  
        ?_getMain_All_Error_Status 0070                         ?_setLights 005D  
                getLoad_AD@channel 0059                     ?_UART_Transmit 0070  
                         _SwDetect 0079      _getMain_All_Error_Status$2337 0057  
    _getMain_All_Error_Status$2339 0059                _Load_Initialization 0B78  
                        setLED@led 0058              __size_of_UART_Receive 0004  
            __size_of_UART_SetData 0008                   __size_of___awdiv 005D  
                 __size_of___lwdiv 0040                   ??_LedPointSelect 0055  
    __size_of_getMain_Lights_Count 0011                 _CDS_Initialization 0B61  
                 ??_getMain_LoadOK 0056              _Lights_Initialization 0B65  
    __size_of_getMain_LightsStatus 0031                    ?_setPIRLED_Main 0070  
                  ___lwdiv@divisor 0055               ?_Load_Initialization 0070  
              ?_CDS_Initialization 0070                    ___lwdiv@counter 005C  
                         __ptext10 0CA5                           __ptext11 0C49  
                         __ptext20 0C38                           __ptext12 0002  
                         __ptext21 0C91                           __ptext13 07F2  
                         __ptext30 0C06                           __ptext22 0C6C  
                         __ptext14 0D83                           __ptext31 0B9A  
                         __ptext23 0BF8                           __ptext15 0BA2  
                         __ptext40 0EB7                           __ptext32 0C27  
                         __ptext24 0CFB                           __ptext16 0B69  
                         __ptext41 0B92                           __ptext33 0F6C  
                         __ptext25 0BEA                           __ptext17 0245  
                         __ptext50 0B5E                           __ptext42 0BBA  
                         __ptext34 0B78                           __ptext26 0CCE  
                         __ptext18 0F2D                           __ptext51 05E5  
                         __ptext43 06C7                           __ptext35 0CE3  
                         __ptext27 0B6D                           __ptext19 0D14  
                         __ptext60 0B72                           __ptext52 0BC4  
                         __ptext44 0CB9                           __ptext36 0EF2  
                         __ptext28 0B8B                           __ptext61 0D2F  
                         __ptext53 0C5A                           __ptext45 0E1D  
                         __ptext37 0DCB                           __ptext29 0025  
                         __ptext54 0656                           __ptext46 0C16  
                         __ptext38 0734                           __ptext55 0D4B  
                         __ptext47 0B65                           __ptext39 0BDC  
                         __ptext56 0E4E                           __ptext48 0B84  
                         __ptext57 0B61                           __ptext49 0BD0  
                         __ptext58 0C7E                           __ptext59 0E82  
        __size_of_getLights_Status 0011            ??_setLED_Initialization 0059  
                      ??_getCDS_AD 0058                      setLED@command 0057  
                    __size_of_main 0054                       _UART_Receive 0B69  
                     _UART_SetData 0BAA                        ??_getPIR_AD 005F  
               _PIR_Initialization 0C91               ??_CDS_Initialization 0055  
      __size_of_Mcu_Initialization 0012                       getLoad_OK@ok 0055  
              ?_PIR_Initialization 0070                           main@argc 0069  
                         main@argv 006B  __size_of_setLights_Initialization 0007  
                        putch@byte 0055          ?_setLights_Initialization 0070  
            ??_Load_Initialization 0057               Lights_Control@lights 005B  
             ??_PIR_Initialization 0059                           intlevel1 0000  
                 _Lights_Main$4485 0064                    ??_UART_Transmit 0056  
                      ??_setLights 005E            LightsPointSelect@lights 0056  
               _getAll_Lights_Line 0C38                        getLoad_AD@i 005C  
                      getLoad_AD@j 005B                        getLoad_AD@k 005A  
          __size_of_setLights_Main 0028            __size_of_setLights_Line 000E  
              ?_getAll_Lights_Line 0070             ?_Lights_Initialization 0070  
            __size_of_WDT_Clearing 0002     setLights_Initialization@lights 0057  
     __size_of_getLightsControl_OK 0008        __size_of_set_TimeoutCleared 0006  
                _LightsPointSelect 0BD0               ??_getAll_Lights_Line 0057  
               __CFG_FOSC$INTOSCIO 0000                 ?_LightsPointSelect 0070  
                  _Timeout_Counter 0CA5         __end_of_LED_Initialization 0BD0  
            __end_of_getCDS_Status 0B9A                  getCDS_AD@channel1 005C  
                getCDS_AD@channel2 0057                ??_LightsPointSelect 0055  
            _setLoad_AH_AL_Restore 0CE3  
