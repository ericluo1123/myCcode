

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Oct 30 17:53:26 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,delta=2
    68                           	psect	text55,local,class=CODE,merge=1,delta=2
    69                           	psect	text56,local,class=CODE,merge=1,delta=2
    70                           	psect	text57,local,class=CODE,merge=1,delta=2
    71                           	psect	text58,local,class=CODE,merge=1,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text62,local,class=CODE,merge=1,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,delta=2
    77                           	psect	text64,local,class=CODE,merge=1,delta=2
    78                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text67,local,class=CODE,merge=1,delta=2
    81                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text69,local,class=CODE,merge=1,delta=2
    83                           	psect	intentry,global,class=CODE,delta=2
    84                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    85                           	dabs	1,0x7E,2
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  0009                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000D                     	;# 
    99  000E                     	;# 
   100  000E                     	;# 
   101  000F                     	;# 
   102  0010                     	;# 
   103  0011                     	;# 
   104  0012                     	;# 
   105  0013                     	;# 
   106  0014                     	;# 
   107  0015                     	;# 
   108  0015                     	;# 
   109  0016                     	;# 
   110  0017                     	;# 
   111  0018                     	;# 
   112  0019                     	;# 
   113  001A                     	;# 
   114  001B                     	;# 
   115  001B                     	;# 
   116  001C                     	;# 
   117  001D                     	;# 
   118  001E                     	;# 
   119  001F                     	;# 
   120  0081                     	;# 
   121  0085                     	;# 
   122  0086                     	;# 
   123  0087                     	;# 
   124  0089                     	;# 
   125  008C                     	;# 
   126  008D                     	;# 
   127  008E                     	;# 
   128  008F                     	;# 
   129  0090                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0093                     	;# 
   133  0093                     	;# 
   134  0094                     	;# 
   135  0095                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0096                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009F                     	;# 
   144  0108                     	;# 
   145  0109                     	;# 
   146  010C                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0185                     	;# 
   153  0186                     	;# 
   154  018C                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  000E                     	;# 
   170  000F                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0013                     	;# 
   175  0014                     	;# 
   176  0015                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  001D                     	;# 
   187  001E                     	;# 
   188  001F                     	;# 
   189  0081                     	;# 
   190  0085                     	;# 
   191  0086                     	;# 
   192  0087                     	;# 
   193  0089                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  008F                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0093                     	;# 
   203  0094                     	;# 
   204  0095                     	;# 
   205  0095                     	;# 
   206  0096                     	;# 
   207  0096                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009F                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  010F                     	;# 
   221  0185                     	;# 
   222  0186                     	;# 
   223  018C                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0009                     	;# 
   233  000A                     	;# 
   234  000B                     	;# 
   235  000C                     	;# 
   236  000D                     	;# 
   237  000E                     	;# 
   238  000E                     	;# 
   239  000F                     	;# 
   240  0010                     	;# 
   241  0011                     	;# 
   242  0012                     	;# 
   243  0013                     	;# 
   244  0014                     	;# 
   245  0015                     	;# 
   246  0015                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001B                     	;# 
   253  001B                     	;# 
   254  001C                     	;# 
   255  001D                     	;# 
   256  001E                     	;# 
   257  001F                     	;# 
   258  0081                     	;# 
   259  0085                     	;# 
   260  0086                     	;# 
   261  0087                     	;# 
   262  0089                     	;# 
   263  008C                     	;# 
   264  008D                     	;# 
   265  008E                     	;# 
   266  008F                     	;# 
   267  0090                     	;# 
   268  0091                     	;# 
   269  0092                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0094                     	;# 
   273  0095                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0096                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009C                     	;# 
   280  009D                     	;# 
   281  009F                     	;# 
   282  0108                     	;# 
   283  0109                     	;# 
   284  010C                     	;# 
   285  010C                     	;# 
   286  010D                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  010F                     	;# 
   290  0185                     	;# 
   291  0186                     	;# 
   292  018C                     	;# 
   293  0000                     	;# 
   294  0001                     	;# 
   295  0002                     	;# 
   296  0003                     	;# 
   297  0004                     	;# 
   298  0005                     	;# 
   299  0006                     	;# 
   300  0007                     	;# 
   301  0009                     	;# 
   302  000A                     	;# 
   303  000B                     	;# 
   304  000C                     	;# 
   305  000D                     	;# 
   306  000E                     	;# 
   307  000E                     	;# 
   308  000F                     	;# 
   309  0010                     	;# 
   310  0011                     	;# 
   311  0012                     	;# 
   312  0013                     	;# 
   313  0014                     	;# 
   314  0015                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0017                     	;# 
   318  0018                     	;# 
   319  0019                     	;# 
   320  001A                     	;# 
   321  001B                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  001D                     	;# 
   325  001E                     	;# 
   326  001F                     	;# 
   327  0081                     	;# 
   328  0085                     	;# 
   329  0086                     	;# 
   330  0087                     	;# 
   331  0089                     	;# 
   332  008C                     	;# 
   333  008D                     	;# 
   334  008E                     	;# 
   335  008F                     	;# 
   336  0090                     	;# 
   337  0091                     	;# 
   338  0092                     	;# 
   339  0093                     	;# 
   340  0093                     	;# 
   341  0094                     	;# 
   342  0095                     	;# 
   343  0095                     	;# 
   344  0096                     	;# 
   345  0096                     	;# 
   346  0098                     	;# 
   347  0099                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009F                     	;# 
   351  0108                     	;# 
   352  0109                     	;# 
   353  010C                     	;# 
   354  010C                     	;# 
   355  010D                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0186                     	;# 
   361  018C                     	;# 
   362  0000                     	;# 
   363  0001                     	;# 
   364  0002                     	;# 
   365  0003                     	;# 
   366  0004                     	;# 
   367  0005                     	;# 
   368  0006                     	;# 
   369  0007                     	;# 
   370  0009                     	;# 
   371  000A                     	;# 
   372  000B                     	;# 
   373  000C                     	;# 
   374  000D                     	;# 
   375  000E                     	;# 
   376  000E                     	;# 
   377  000F                     	;# 
   378  0010                     	;# 
   379  0011                     	;# 
   380  0012                     	;# 
   381  0013                     	;# 
   382  0014                     	;# 
   383  0015                     	;# 
   384  0015                     	;# 
   385  0016                     	;# 
   386  0017                     	;# 
   387  0018                     	;# 
   388  0019                     	;# 
   389  001A                     	;# 
   390  001B                     	;# 
   391  001B                     	;# 
   392  001C                     	;# 
   393  001D                     	;# 
   394  001E                     	;# 
   395  001F                     	;# 
   396  0081                     	;# 
   397  0085                     	;# 
   398  0086                     	;# 
   399  0087                     	;# 
   400  0089                     	;# 
   401  008C                     	;# 
   402  008D                     	;# 
   403  008E                     	;# 
   404  008F                     	;# 
   405  0090                     	;# 
   406  0091                     	;# 
   407  0092                     	;# 
   408  0093                     	;# 
   409  0093                     	;# 
   410  0094                     	;# 
   411  0095                     	;# 
   412  0095                     	;# 
   413  0096                     	;# 
   414  0096                     	;# 
   415  0098                     	;# 
   416  0099                     	;# 
   417  009C                     	;# 
   418  009D                     	;# 
   419  009F                     	;# 
   420  0108                     	;# 
   421  0109                     	;# 
   422  010C                     	;# 
   423  010C                     	;# 
   424  010D                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  010F                     	;# 
   428  0185                     	;# 
   429  0186                     	;# 
   430  018C                     	;# 
   431  0000                     	;# 
   432  0001                     	;# 
   433  0002                     	;# 
   434  0003                     	;# 
   435  0004                     	;# 
   436  0005                     	;# 
   437  0006                     	;# 
   438  0007                     	;# 
   439  0009                     	;# 
   440  000A                     	;# 
   441  000B                     	;# 
   442  000C                     	;# 
   443  000D                     	;# 
   444  000E                     	;# 
   445  000E                     	;# 
   446  000F                     	;# 
   447  0010                     	;# 
   448  0011                     	;# 
   449  0012                     	;# 
   450  0013                     	;# 
   451  0014                     	;# 
   452  0015                     	;# 
   453  0015                     	;# 
   454  0016                     	;# 
   455  0017                     	;# 
   456  0018                     	;# 
   457  0019                     	;# 
   458  001A                     	;# 
   459  001B                     	;# 
   460  001B                     	;# 
   461  001C                     	;# 
   462  001D                     	;# 
   463  001E                     	;# 
   464  001F                     	;# 
   465  0081                     	;# 
   466  0085                     	;# 
   467  0086                     	;# 
   468  0087                     	;# 
   469  0089                     	;# 
   470  008C                     	;# 
   471  008D                     	;# 
   472  008E                     	;# 
   473  008F                     	;# 
   474  0090                     	;# 
   475  0091                     	;# 
   476  0092                     	;# 
   477  0093                     	;# 
   478  0093                     	;# 
   479  0094                     	;# 
   480  0095                     	;# 
   481  0095                     	;# 
   482  0096                     	;# 
   483  0096                     	;# 
   484  0098                     	;# 
   485  0099                     	;# 
   486  009C                     	;# 
   487  009D                     	;# 
   488  009F                     	;# 
   489  0108                     	;# 
   490  0109                     	;# 
   491  010C                     	;# 
   492  010C                     	;# 
   493  010D                     	;# 
   494  010D                     	;# 
   495  010E                     	;# 
   496  010F                     	;# 
   497  0185                     	;# 
   498  0186                     	;# 
   499  018C                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000D                     	;# 
   513  000E                     	;# 
   514  000E                     	;# 
   515  000F                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0013                     	;# 
   520  0014                     	;# 
   521  0015                     	;# 
   522  0015                     	;# 
   523  0016                     	;# 
   524  0017                     	;# 
   525  0018                     	;# 
   526  0019                     	;# 
   527  001A                     	;# 
   528  001B                     	;# 
   529  001B                     	;# 
   530  001C                     	;# 
   531  001D                     	;# 
   532  001E                     	;# 
   533  001F                     	;# 
   534  0081                     	;# 
   535  0085                     	;# 
   536  0086                     	;# 
   537  0087                     	;# 
   538  0089                     	;# 
   539  008C                     	;# 
   540  008D                     	;# 
   541  008E                     	;# 
   542  008F                     	;# 
   543  0090                     	;# 
   544  0091                     	;# 
   545  0092                     	;# 
   546  0093                     	;# 
   547  0093                     	;# 
   548  0094                     	;# 
   549  0095                     	;# 
   550  0095                     	;# 
   551  0096                     	;# 
   552  0096                     	;# 
   553  0098                     	;# 
   554  0099                     	;# 
   555  009C                     	;# 
   556  009D                     	;# 
   557  009F                     	;# 
   558  0108                     	;# 
   559  0109                     	;# 
   560  010C                     	;# 
   561  010C                     	;# 
   562  010D                     	;# 
   563  010D                     	;# 
   564  010E                     	;# 
   565  010F                     	;# 
   566  0185                     	;# 
   567  0186                     	;# 
   568  018C                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  000E                     	;# 
   583  000E                     	;# 
   584  000F                     	;# 
   585  0010                     	;# 
   586  0011                     	;# 
   587  0012                     	;# 
   588  0013                     	;# 
   589  0014                     	;# 
   590  0015                     	;# 
   591  0015                     	;# 
   592  0016                     	;# 
   593  0017                     	;# 
   594  0018                     	;# 
   595  0019                     	;# 
   596  001A                     	;# 
   597  001B                     	;# 
   598  001B                     	;# 
   599  001C                     	;# 
   600  001D                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  0081                     	;# 
   604  0085                     	;# 
   605  0086                     	;# 
   606  0087                     	;# 
   607  0089                     	;# 
   608  008C                     	;# 
   609  008D                     	;# 
   610  008E                     	;# 
   611  008F                     	;# 
   612  0090                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0093                     	;# 
   616  0093                     	;# 
   617  0094                     	;# 
   618  0095                     	;# 
   619  0095                     	;# 
   620  0096                     	;# 
   621  0096                     	;# 
   622  0098                     	;# 
   623  0099                     	;# 
   624  009C                     	;# 
   625  009D                     	;# 
   626  009F                     	;# 
   627  0108                     	;# 
   628  0109                     	;# 
   629  010C                     	;# 
   630  010C                     	;# 
   631  010D                     	;# 
   632  010D                     	;# 
   633  010E                     	;# 
   634  010F                     	;# 
   635  0185                     	;# 
   636  0186                     	;# 
   637  018C                     	;# 
   638  0000                     	;# 
   639  0001                     	;# 
   640  0002                     	;# 
   641  0003                     	;# 
   642  0004                     	;# 
   643  0005                     	;# 
   644  0006                     	;# 
   645  0007                     	;# 
   646  0009                     	;# 
   647  000A                     	;# 
   648  000B                     	;# 
   649  000C                     	;# 
   650  000D                     	;# 
   651  000E                     	;# 
   652  000E                     	;# 
   653  000F                     	;# 
   654  0010                     	;# 
   655  0011                     	;# 
   656  0012                     	;# 
   657  0013                     	;# 
   658  0014                     	;# 
   659  0015                     	;# 
   660  0015                     	;# 
   661  0016                     	;# 
   662  0017                     	;# 
   663  0018                     	;# 
   664  0019                     	;# 
   665  001A                     	;# 
   666  001B                     	;# 
   667  001B                     	;# 
   668  001C                     	;# 
   669  001D                     	;# 
   670  001E                     	;# 
   671  001F                     	;# 
   672  0081                     	;# 
   673  0085                     	;# 
   674  0086                     	;# 
   675  0087                     	;# 
   676  0089                     	;# 
   677  008C                     	;# 
   678  008D                     	;# 
   679  008E                     	;# 
   680  008F                     	;# 
   681  0090                     	;# 
   682  0091                     	;# 
   683  0092                     	;# 
   684  0093                     	;# 
   685  0093                     	;# 
   686  0094                     	;# 
   687  0095                     	;# 
   688  0095                     	;# 
   689  0096                     	;# 
   690  0096                     	;# 
   691  0098                     	;# 
   692  0099                     	;# 
   693  009C                     	;# 
   694  009D                     	;# 
   695  009F                     	;# 
   696  0108                     	;# 
   697  0109                     	;# 
   698  010C                     	;# 
   699  010C                     	;# 
   700  010D                     	;# 
   701  010D                     	;# 
   702  010E                     	;# 
   703  010F                     	;# 
   704  0185                     	;# 
   705  0186                     	;# 
   706  018C                     	;# 
   707  0000                     	;# 
   708  0001                     	;# 
   709  0002                     	;# 
   710  0003                     	;# 
   711  0004                     	;# 
   712  0005                     	;# 
   713  0006                     	;# 
   714  0007                     	;# 
   715  0009                     	;# 
   716  000A                     	;# 
   717  000B                     	;# 
   718  000C                     	;# 
   719  000D                     	;# 
   720  000E                     	;# 
   721  000E                     	;# 
   722  000F                     	;# 
   723  0010                     	;# 
   724  0011                     	;# 
   725  0012                     	;# 
   726  0013                     	;# 
   727  0014                     	;# 
   728  0015                     	;# 
   729  0015                     	;# 
   730  0016                     	;# 
   731  0017                     	;# 
   732  0018                     	;# 
   733  0019                     	;# 
   734  001A                     	;# 
   735  001B                     	;# 
   736  001B                     	;# 
   737  001C                     	;# 
   738  001D                     	;# 
   739  001E                     	;# 
   740  001F                     	;# 
   741  0081                     	;# 
   742  0085                     	;# 
   743  0086                     	;# 
   744  0087                     	;# 
   745  0089                     	;# 
   746  008C                     	;# 
   747  008D                     	;# 
   748  008E                     	;# 
   749  008F                     	;# 
   750  0090                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0093                     	;# 
   754  0093                     	;# 
   755  0094                     	;# 
   756  0095                     	;# 
   757  0095                     	;# 
   758  0096                     	;# 
   759  0096                     	;# 
   760  0098                     	;# 
   761  0099                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009F                     	;# 
   765  0108                     	;# 
   766  0109                     	;# 
   767  010C                     	;# 
   768  010C                     	;# 
   769  010D                     	;# 
   770  010D                     	;# 
   771  010E                     	;# 
   772  010F                     	;# 
   773  0185                     	;# 
   774  0186                     	;# 
   775  018C                     	;# 
   776  0000                     	;# 
   777  0001                     	;# 
   778  0002                     	;# 
   779  0003                     	;# 
   780  0004                     	;# 
   781  0005                     	;# 
   782  0006                     	;# 
   783  0007                     	;# 
   784  0009                     	;# 
   785  000A                     	;# 
   786  000B                     	;# 
   787  000C                     	;# 
   788  000D                     	;# 
   789  000E                     	;# 
   790  000E                     	;# 
   791  000F                     	;# 
   792  0010                     	;# 
   793  0011                     	;# 
   794  0012                     	;# 
   795  0013                     	;# 
   796  0014                     	;# 
   797  0015                     	;# 
   798  0015                     	;# 
   799  0016                     	;# 
   800  0017                     	;# 
   801  0018                     	;# 
   802  0019                     	;# 
   803  001A                     	;# 
   804  001B                     	;# 
   805  001B                     	;# 
   806  001C                     	;# 
   807  001D                     	;# 
   808  001E                     	;# 
   809  001F                     	;# 
   810  0081                     	;# 
   811  0085                     	;# 
   812  0086                     	;# 
   813  0087                     	;# 
   814  0089                     	;# 
   815  008C                     	;# 
   816  008D                     	;# 
   817  008E                     	;# 
   818  008F                     	;# 
   819  0090                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0093                     	;# 
   824  0094                     	;# 
   825  0095                     	;# 
   826  0095                     	;# 
   827  0096                     	;# 
   828  0096                     	;# 
   829  0098                     	;# 
   830  0099                     	;# 
   831  009C                     	;# 
   832  009D                     	;# 
   833  009F                     	;# 
   834  0108                     	;# 
   835  0109                     	;# 
   836  010C                     	;# 
   837  010C                     	;# 
   838  010D                     	;# 
   839  010D                     	;# 
   840  010E                     	;# 
   841  010F                     	;# 
   842  0185                     	;# 
   843  0186                     	;# 
   844  018C                     	;# 
   845  0000                     	;# 
   846  0001                     	;# 
   847  0002                     	;# 
   848  0003                     	;# 
   849  0004                     	;# 
   850  0005                     	;# 
   851  0006                     	;# 
   852  0007                     	;# 
   853  0009                     	;# 
   854  000A                     	;# 
   855  000B                     	;# 
   856  000C                     	;# 
   857  000D                     	;# 
   858  000E                     	;# 
   859  000E                     	;# 
   860  000F                     	;# 
   861  0010                     	;# 
   862  0011                     	;# 
   863  0012                     	;# 
   864  0013                     	;# 
   865  0014                     	;# 
   866  0015                     	;# 
   867  0015                     	;# 
   868  0016                     	;# 
   869  0017                     	;# 
   870  0018                     	;# 
   871  0019                     	;# 
   872  001A                     	;# 
   873  001B                     	;# 
   874  001B                     	;# 
   875  001C                     	;# 
   876  001D                     	;# 
   877  001E                     	;# 
   878  001F                     	;# 
   879  0081                     	;# 
   880  0085                     	;# 
   881  0086                     	;# 
   882  0087                     	;# 
   883  0089                     	;# 
   884  008C                     	;# 
   885  008D                     	;# 
   886  008E                     	;# 
   887  008F                     	;# 
   888  0090                     	;# 
   889  0091                     	;# 
   890  0092                     	;# 
   891  0093                     	;# 
   892  0093                     	;# 
   893  0094                     	;# 
   894  0095                     	;# 
   895  0095                     	;# 
   896  0096                     	;# 
   897  0096                     	;# 
   898  0098                     	;# 
   899  0099                     	;# 
   900  009C                     	;# 
   901  009D                     	;# 
   902  009F                     	;# 
   903  0108                     	;# 
   904  0109                     	;# 
   905  010C                     	;# 
   906  010C                     	;# 
   907  010D                     	;# 
   908  010D                     	;# 
   909  010E                     	;# 
   910  010F                     	;# 
   911  0185                     	;# 
   912  0186                     	;# 
   913  018C                     	;# 
   914  0000                     	;# 
   915  0001                     	;# 
   916  0002                     	;# 
   917  0003                     	;# 
   918  0004                     	;# 
   919  0005                     	;# 
   920  0006                     	;# 
   921  0007                     	;# 
   922  0009                     	;# 
   923  000A                     	;# 
   924  000B                     	;# 
   925  000C                     	;# 
   926  000D                     	;# 
   927  000E                     	;# 
   928  000E                     	;# 
   929  000F                     	;# 
   930  0010                     	;# 
   931  0011                     	;# 
   932  0012                     	;# 
   933  0013                     	;# 
   934  0014                     	;# 
   935  0015                     	;# 
   936  0015                     	;# 
   937  0016                     	;# 
   938  0017                     	;# 
   939  0018                     	;# 
   940  0019                     	;# 
   941  001A                     	;# 
   942  001B                     	;# 
   943  001B                     	;# 
   944  001C                     	;# 
   945  001D                     	;# 
   946  001E                     	;# 
   947  001F                     	;# 
   948  0081                     	;# 
   949  0085                     	;# 
   950  0086                     	;# 
   951  0087                     	;# 
   952  0089                     	;# 
   953  008C                     	;# 
   954  008D                     	;# 
   955  008E                     	;# 
   956  008F                     	;# 
   957  0090                     	;# 
   958  0091                     	;# 
   959  0092                     	;# 
   960  0093                     	;# 
   961  0093                     	;# 
   962  0094                     	;# 
   963  0095                     	;# 
   964  0095                     	;# 
   965  0096                     	;# 
   966  0096                     	;# 
   967  0098                     	;# 
   968  0099                     	;# 
   969  009C                     	;# 
   970  009D                     	;# 
   971  009F                     	;# 
   972  0108                     	;# 
   973  0109                     	;# 
   974  010C                     	;# 
   975  010C                     	;# 
   976  010D                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  010F                     	;# 
   980  0185                     	;# 
   981  0186                     	;# 
   982  018C                     	;# 
   983  0000                     	;# 
   984  0001                     	;# 
   985  0002                     	;# 
   986  0003                     	;# 
   987  0004                     	;# 
   988  0005                     	;# 
   989  0006                     	;# 
   990  0007                     	;# 
   991  0009                     	;# 
   992  000A                     	;# 
   993  000B                     	;# 
   994  000C                     	;# 
   995  000D                     	;# 
   996  000E                     	;# 
   997  000E                     	;# 
   998  000F                     	;# 
   999  0010                     	;# 
  1000  0011                     	;# 
  1001  0012                     	;# 
  1002  0013                     	;# 
  1003  0014                     	;# 
  1004  0015                     	;# 
  1005  0015                     	;# 
  1006  0016                     	;# 
  1007  0017                     	;# 
  1008  0018                     	;# 
  1009  0019                     	;# 
  1010  001A                     	;# 
  1011  001B                     	;# 
  1012  001B                     	;# 
  1013  001C                     	;# 
  1014  001D                     	;# 
  1015  001E                     	;# 
  1016  001F                     	;# 
  1017  0081                     	;# 
  1018  0085                     	;# 
  1019  0086                     	;# 
  1020  0087                     	;# 
  1021  0089                     	;# 
  1022  008C                     	;# 
  1023  008D                     	;# 
  1024  008E                     	;# 
  1025  008F                     	;# 
  1026  0090                     	;# 
  1027  0091                     	;# 
  1028  0092                     	;# 
  1029  0093                     	;# 
  1030  0093                     	;# 
  1031  0094                     	;# 
  1032  0095                     	;# 
  1033  0095                     	;# 
  1034  0096                     	;# 
  1035  0096                     	;# 
  1036  0098                     	;# 
  1037  0099                     	;# 
  1038  009C                     	;# 
  1039  009D                     	;# 
  1040  009F                     	;# 
  1041  0108                     	;# 
  1042  0109                     	;# 
  1043  010C                     	;# 
  1044  010C                     	;# 
  1045  010D                     	;# 
  1046  010D                     	;# 
  1047  010E                     	;# 
  1048  010F                     	;# 
  1049  0185                     	;# 
  1050  0186                     	;# 
  1051  018C                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0009                     	;# 
  1061  000A                     	;# 
  1062  000B                     	;# 
  1063  000C                     	;# 
  1064  000D                     	;# 
  1065  000E                     	;# 
  1066  000E                     	;# 
  1067  000F                     	;# 
  1068  0010                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0013                     	;# 
  1072  0014                     	;# 
  1073  0015                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  001D                     	;# 
  1084  001E                     	;# 
  1085  001F                     	;# 
  1086  0081                     	;# 
  1087  0085                     	;# 
  1088  0086                     	;# 
  1089  0087                     	;# 
  1090  0089                     	;# 
  1091  008C                     	;# 
  1092  008D                     	;# 
  1093  008E                     	;# 
  1094  008F                     	;# 
  1095  0090                     	;# 
  1096  0091                     	;# 
  1097  0092                     	;# 
  1098  0093                     	;# 
  1099  0093                     	;# 
  1100  0094                     	;# 
  1101  0095                     	;# 
  1102  0095                     	;# 
  1103  0096                     	;# 
  1104  0096                     	;# 
  1105  0098                     	;# 
  1106  0099                     	;# 
  1107  009C                     	;# 
  1108  009D                     	;# 
  1109  009F                     	;# 
  1110  0108                     	;# 
  1111  0109                     	;# 
  1112  010C                     	;# 
  1113  010C                     	;# 
  1114  010D                     	;# 
  1115  010D                     	;# 
  1116  010E                     	;# 
  1117  010F                     	;# 
  1118  0185                     	;# 
  1119  0186                     	;# 
  1120  018C                     	;# 
  1121  0000                     	;# 
  1122  0001                     	;# 
  1123  0002                     	;# 
  1124  0003                     	;# 
  1125  0004                     	;# 
  1126  0005                     	;# 
  1127  0006                     	;# 
  1128  0007                     	;# 
  1129  0009                     	;# 
  1130  000A                     	;# 
  1131  000B                     	;# 
  1132  000C                     	;# 
  1133  000D                     	;# 
  1134  000E                     	;# 
  1135  000E                     	;# 
  1136  000F                     	;# 
  1137  0010                     	;# 
  1138  0011                     	;# 
  1139  0012                     	;# 
  1140  0013                     	;# 
  1141  0014                     	;# 
  1142  0015                     	;# 
  1143  0015                     	;# 
  1144  0016                     	;# 
  1145  0017                     	;# 
  1146  0018                     	;# 
  1147  0019                     	;# 
  1148  001A                     	;# 
  1149  001B                     	;# 
  1150  001B                     	;# 
  1151  001C                     	;# 
  1152  001D                     	;# 
  1153  001E                     	;# 
  1154  001F                     	;# 
  1155  0081                     	;# 
  1156  0085                     	;# 
  1157  0086                     	;# 
  1158  0087                     	;# 
  1159  0089                     	;# 
  1160  008C                     	;# 
  1161  008D                     	;# 
  1162  008E                     	;# 
  1163  008F                     	;# 
  1164  0090                     	;# 
  1165  0091                     	;# 
  1166  0092                     	;# 
  1167  0093                     	;# 
  1168  0093                     	;# 
  1169  0094                     	;# 
  1170  0095                     	;# 
  1171  0095                     	;# 
  1172  0096                     	;# 
  1173  0096                     	;# 
  1174  0098                     	;# 
  1175  0099                     	;# 
  1176  009C                     	;# 
  1177  009D                     	;# 
  1178  009F                     	;# 
  1179  0108                     	;# 
  1180  0109                     	;# 
  1181  010C                     	;# 
  1182  010C                     	;# 
  1183  010D                     	;# 
  1184  010D                     	;# 
  1185  010E                     	;# 
  1186  010F                     	;# 
  1187  0185                     	;# 
  1188  0186                     	;# 
  1189  018C                     	;# 
  1190  0000                     	;# 
  1191  0001                     	;# 
  1192  0002                     	;# 
  1193  0003                     	;# 
  1194  0004                     	;# 
  1195  0005                     	;# 
  1196  0006                     	;# 
  1197  0007                     	;# 
  1198  0009                     	;# 
  1199  000A                     	;# 
  1200  000B                     	;# 
  1201  000C                     	;# 
  1202  000D                     	;# 
  1203  000E                     	;# 
  1204  000E                     	;# 
  1205  000F                     	;# 
  1206  0010                     	;# 
  1207  0011                     	;# 
  1208  0012                     	;# 
  1209  0013                     	;# 
  1210  0014                     	;# 
  1211  0015                     	;# 
  1212  0015                     	;# 
  1213  0016                     	;# 
  1214  0017                     	;# 
  1215  0018                     	;# 
  1216  0019                     	;# 
  1217  001A                     	;# 
  1218  001B                     	;# 
  1219  001B                     	;# 
  1220  001C                     	;# 
  1221  001D                     	;# 
  1222  001E                     	;# 
  1223  001F                     	;# 
  1224  0081                     	;# 
  1225  0085                     	;# 
  1226  0086                     	;# 
  1227  0087                     	;# 
  1228  0089                     	;# 
  1229  008C                     	;# 
  1230  008D                     	;# 
  1231  008E                     	;# 
  1232  008F                     	;# 
  1233  0090                     	;# 
  1234  0091                     	;# 
  1235  0092                     	;# 
  1236  0093                     	;# 
  1237  0093                     	;# 
  1238  0094                     	;# 
  1239  0095                     	;# 
  1240  0095                     	;# 
  1241  0096                     	;# 
  1242  0096                     	;# 
  1243  0098                     	;# 
  1244  0099                     	;# 
  1245  009C                     	;# 
  1246  009D                     	;# 
  1247  009F                     	;# 
  1248  0108                     	;# 
  1249  0109                     	;# 
  1250  010C                     	;# 
  1251  010C                     	;# 
  1252  010D                     	;# 
  1253  010D                     	;# 
  1254  010E                     	;# 
  1255  010F                     	;# 
  1256  0185                     	;# 
  1257  0186                     	;# 
  1258  018C                     	;# 
  1259  001F                     _ADCON0	set	31
  1260  001E                     _ADRES	set	30
  1261  0005                     _PORTA	set	5
  1262  0006                     _PORTB	set	6
  1263  0007                     _PORTC	set	7
  1264  0010                     _T1CON	set	16
  1265  000F                     _TMR1H	set	15
  1266  000E                     _TMR1L	set	14
  1267  005F                     _GIE	set	95
  1268  00F9                     _GO_nDONE	set	249
  1269  005E                     _PEIE	set	94
  1270  002C                     _RA4	set	44
  1271  002D                     _RA5	set	45
  1272  0032                     _RB2	set	50
  1273  0033                     _RB3	set	51
  1274  0034                     _RB4	set	52
  1275  0035                     _RB5	set	53
  1276  0060                     _TMR1IF	set	96
  1277  009F                     _ADCON1	set	159
  1278  009D                     _FVRCON	set	157
  1279  0090                     _OSCCON	set	144
  1280  0085                     _TRISA	set	133
  1281  0086                     _TRISB	set	134
  1282  0087                     _TRISC	set	135
  1283  0408                     _PS0	set	1032
  1284  0409                     _PS1	set	1033
  1285  040A                     _PS2	set	1034
  1286  040B                     _PSA	set	1035
  1287  0460                     _TMR1IE	set	1120
  1288  0185                     _ANSELA	set	389
  1289  0186                     _ANSELB	set	390
  1290                           
  1291                           	psect	text0
  1292  0000                     __ptext0:	
  1293                           ; #config settings
  1294                           
  1295                           
  1296                           ;psect for function _TMR1_ISR
  1297  0000                     
  1298                           	psect	cinit
  1299  0013                     start_initialization:	
  1300  0013                     __initialization:	
  1301                           
  1302                           ; Clear objects allocated to COMMON
  1303  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1304  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1305  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1306  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1307                           
  1308                           ; Clear objects allocated to BANK0
  1309  0017  1383               	bcf	3,7	;select IRP bank0
  1310  0018  3020               	movlw	low __pbssBANK0
  1311  0019  0084               	movwf	4
  1312  001A  3061               	movlw	low (__pbssBANK0+65)
  1313  001B  158A  2459  118A   	fcall	clear_ram0
  1314                           
  1315                           ; Clear objects allocated to BANK1
  1316  001E  30A0               	movlw	low __pbssBANK1
  1317  001F  0084               	movwf	4
  1318  0020  30E6               	movlw	low (__pbssBANK1+70)
  1319  0021  158A  2459         	fcall	clear_ram0
  1320  0023                     end_of_initialization:	
  1321                           ;End of C runtime variable initialization code
  1322                           
  1323  0023                     __end_of__initialization:	
  1324  0023  0183               	clrf	3
  1325  0024  118A  2CF7         	ljmp	_main	;jump to C main() function
  1326                           
  1327                           	psect	bssCOMMON
  1328  0076                     __pbssCOMMON:	
  1329  0076                     _WDT:	
  1330  0076                     	ds	2
  1331  0078                     _LED:	
  1332  0078                     	ds	1
  1333  0079                     _LightsControl:	
  1334  0079                     	ds	1
  1335                           
  1336                           	psect	bssBANK0
  1337  0020                     __pbssBANK0:	
  1338  0020                     _SYSC:	
  1339  0020                     	ds	5
  1340  0025                     __CDS:	
  1341  0025                     	ds	5
  1342  002A                     _Timer1:	
  1343  002A                     	ds	3
  1344  002D                     _Lights:	
  1345  002D                     	ds	1
  1346  002E                     _Load1:	
  1347  002E                     	ds	35
  1348  0051                     _Temp:	
  1349  0051                     	ds	12
  1350  005D                     _VarErrLED:	
  1351  005D                     	ds	4
  1352                           
  1353                           	psect	bssBANK1
  1354  00A0                     __pbssBANK1:	
  1355  00A0                     _myMain:	
  1356  00A0                     	ds	8
  1357  00A8                     __PIR:	
  1358  00A8                     	ds	47
  1359  00D7                     _Lights1:	
  1360  00D7                     	ds	7
  1361  00DE                     _VarLED1:	
  1362  00DE                     	ds	4
  1363  00E2                     _VarLED2:	
  1364  00E2                     	ds	4
  1365                           
  1366                           	psect	clrtext
  1367  0C59                     clear_ram0:	
  1368                           ;	Called with FSR containing the base address, and
  1369                           ;	W with the last address+1
  1370                           
  1371  0C59  0064               	clrwdt	;clear the watchdog before getting into this loop
  1372  0C5A                     clrloop0:	
  1373  0C5A  0180               	clrf	0	;clear RAM location pointed to by FSR
  1374  0C5B  0A84               	incf	4,f	;increment pointer
  1375  0C5C  0604               	xorwf	4,w	;XOR with final address
  1376  0C5D  1903               	btfsc	3,2	;have we reached the end yet?
  1377  0C5E  3400               	retlw	0	;all done for this memory range, return
  1378  0C5F  0604               	xorwf	4,w	;XOR again to restore value
  1379  0C60  2C5A               	goto	clrloop0	;do the next byte
  1380                           
  1381                           	psect	cstackBANK1
  1382  00E6                     __pcstackBANK1:	
  1383  00E6                     ?_main:	
  1384  00E6                     main@argc:	
  1385                           ; 2 bytes @ 0x0
  1386                           
  1387                           
  1388                           ; 2 bytes @ 0x0
  1389  00E6                     	ds	2
  1390  00E8                     main@argv:	
  1391                           
  1392                           ; 2 bytes @ 0x2
  1393  00E8                     	ds	2
  1394  00EA                     ??_main:	
  1395                           
  1396                           ; 0 bytes @ 0x4
  1397  00EA                     	ds	1
  1398                           
  1399                           	psect	cstackCOMMON
  1400  0070                     __pcstackCOMMON:	
  1401  0070                     ?_setLED_Initialization:	
  1402  0070                     ?_setLED_Main:	
  1403                           ; 0 bytes @ 0x0
  1404                           
  1405  0070                     ?_Fosc_Set:	
  1406                           ; 0 bytes @ 0x0
  1407                           
  1408  0070                     ?_IO_Set:	
  1409                           ; 0 bytes @ 0x0
  1410                           
  1411  0070                     ?_TMR1_Set:	
  1412                           ; 0 bytes @ 0x0
  1413                           
  1414  0070                     ?_ADC_Set:	
  1415                           ; 0 bytes @ 0x0
  1416                           
  1417  0070                     ?_WDT_Set:	
  1418                           ; 0 bytes @ 0x0
  1419                           
  1420  0070                     ?_TMR1_ISR:	
  1421                           ; 0 bytes @ 0x0
  1422                           
  1423  0070                     ??_TMR1_ISR:	
  1424                           ; 0 bytes @ 0x0
  1425                           
  1426  0070                     ?_Timeout_Counter:	
  1427                           ; 0 bytes @ 0x0
  1428                           
  1429  0070                     ?_set_TimeoutCleared:	
  1430                           ; 0 bytes @ 0x0
  1431                           
  1432  0070                     ?_WDT_Clearing:	
  1433                           ; 0 bytes @ 0x0
  1434                           
  1435  0070                     ?_myMain_Initialization:	
  1436                           ; 0 bytes @ 0x0
  1437                           
  1438  0070                     ?_SYSC_Initialization:	
  1439                           ; 0 bytes @ 0x0
  1440                           
  1441  0070                     ?_Temp_Initialization:	
  1442                           ; 0 bytes @ 0x0
  1443                           
  1444  0070                     ?_Load_Initialization:	
  1445                           ; 0 bytes @ 0x0
  1446                           
  1447  0070                     ?_Lights_Initialization:	
  1448                           ; 0 bytes @ 0x0
  1449                           
  1450  0070                     ?_PIR_Initialization:	
  1451                           ; 0 bytes @ 0x0
  1452                           
  1453  0070                     ?_DetectSYSC_Signal:	
  1454                           ; 0 bytes @ 0x0
  1455                           
  1456  0070                     ?_getLoad_AD:	
  1457                           ; 0 bytes @ 0x0
  1458                           
  1459  0070                     ?_getTemp_AD:	
  1460                           ; 0 bytes @ 0x0
  1461                           
  1462  0070                     ?_my_MainTime:	
  1463                           ; 0 bytes @ 0x0
  1464                           
  1465  0070                     ?_SYSC_Main:	
  1466                           ; 0 bytes @ 0x0
  1467                           
  1468  0070                     ?_Temp_Main:	
  1469                           ; 0 bytes @ 0x0
  1470                           
  1471  0070                     ?_Load_Main:	
  1472                           ; 0 bytes @ 0x0
  1473                           
  1474  0070                     ?_Lights_Main:	
  1475                           ; 0 bytes @ 0x0
  1476                           
  1477  0070                     ?_PIR_Main:	
  1478                           ; 0 bytes @ 0x0
  1479                           
  1480  0070                     ?_setTemp_Enable:	
  1481                           ; 0 bytes @ 0x0
  1482                           
  1483  0070                     ?_setLoad_Enable:	
  1484                           ; 0 bytes @ 0x0
  1485                           
  1486  0070                     ?_LightsPointSelect:	
  1487                           ; 0 bytes @ 0x0
  1488                           
  1489  0070                     ?_setLoad_AH_AL_Restore:	
  1490                           ; 0 bytes @ 0x0
  1491                           
  1492  0070                     ?_setLoad_Exceptions:	
  1493                           ; 0 bytes @ 0x0
  1494                           
  1495  0070                     ?_setTemp_Initialization:	
  1496                           ; 0 bytes @ 0x0
  1497                           
  1498  0070                     ?_setTemp_Main:	
  1499                           ; 0 bytes @ 0x0
  1500                           
  1501  0070                     ?_setOverTemp_Exceptions:	
  1502                           ; 0 bytes @ 0x0
  1503                           
  1504  0070                     ?_setSYSC_Initialization:	
  1505                           ; 0 bytes @ 0x0
  1506                           
  1507  0070                     ?_setSYSC_Main:	
  1508                           ; 0 bytes @ 0x0
  1509                           
  1510  0070                     ?_setLights_Initialization:	
  1511                           ; 0 bytes @ 0x0
  1512                           
  1513  0070                     ?_setLights_Main:	
  1514                           ; 0 bytes @ 0x0
  1515                           
  1516  0070                     ?_Lights_Control:	
  1517                           ; 0 bytes @ 0x0
  1518                           
  1519  0070                     ?_Lights_Close:	
  1520                           ; 0 bytes @ 0x0
  1521                           
  1522  0070                     ?_CDS_Initialization:	
  1523                           ; 0 bytes @ 0x0
  1524                           
  1525  0070                     ?_CDS_Main:	
  1526                           ; 0 bytes @ 0x0
  1527                           
  1528  0070                     ?_LedPointSelect:	
  1529                           ; 0 bytes @ 0x0
  1530                           
  1531  0070                     ?_LED_Initialization:	
  1532                           ; 0 bytes @ 0x0
  1533                           
  1534  0070                     ?_LED_Main:	
  1535                           ; 0 bytes @ 0x0
  1536                           
  1537  0070                     ?_Mcu_Initialization:	
  1538                           ; 0 bytes @ 0x0
  1539                           
  1540  0070                     ?_ISR:	
  1541                           ; 0 bytes @ 0x0
  1542                           
  1543  0070                     ??_ISR:	
  1544                           ; 0 bytes @ 0x0
  1545                           
  1546  0070                     ?_WDT_Main:	
  1547                           ; 0 bytes @ 0x0
  1548                           
  1549  0070                     ?_setLoad_Count:	
  1550                           ; 0 bytes @ 0x0
  1551                           
  1552  0070                     ?_setLoad_GO:	
  1553                           ; 0 bytes @ 0x0
  1554                           
  1555  0070                     ?_getMain_AD_Safe:	
  1556                           ; 0 bytes @ 0x0
  1557                           
  1558  0070                     ?_getTemp_Safe:	
  1559                           ; 1 bytes @ 0x0
  1560                           
  1561  0070                     ?_getLights_Status:	
  1562                           ; 1 bytes @ 0x0
  1563                           
  1564  0070                     ?_getCDS_Status:	
  1565                           ; 1 bytes @ 0x0
  1566                           
  1567  0070                     ?_getMain_Exception:	
  1568                           ; 1 bytes @ 0x0
  1569                           
  1570  0070                     ?_getMain_LightsStatus:	
  1571                           ; 1 bytes @ 0x0
  1572                           
  1573                           
  1574                           ; 1 bytes @ 0x0
  1575  0070                     	ds	4
  1576  0074                     ??_getMain_AD_Safe:	
  1577  0074                     ??_Fosc_Set:	
  1578                           ; 0 bytes @ 0x4
  1579                           
  1580  0074                     ??_IO_Set:	
  1581                           ; 0 bytes @ 0x4
  1582                           
  1583  0074                     ??_TMR1_Set:	
  1584                           ; 0 bytes @ 0x4
  1585                           
  1586  0074                     ??_ADC_Set:	
  1587                           ; 0 bytes @ 0x4
  1588                           
  1589  0074                     ??_WDT_Set:	
  1590                           ; 0 bytes @ 0x4
  1591                           
  1592  0074                     ??_Timeout_Counter:	
  1593                           ; 0 bytes @ 0x4
  1594                           
  1595  0074                     ??_set_TimeoutCleared:	
  1596                           ; 0 bytes @ 0x4
  1597                           
  1598  0074                     ??_WDT_Clearing:	
  1599                           ; 0 bytes @ 0x4
  1600                           
  1601  0074                     ??_myMain_Initialization:	
  1602                           ; 0 bytes @ 0x4
  1603                           
  1604  0074                     ??_SYSC_Initialization:	
  1605                           ; 0 bytes @ 0x4
  1606                           
  1607  0074                     ??_Temp_Initialization:	
  1608                           ; 0 bytes @ 0x4
  1609                           
  1610  0074                     ??_PIR_Initialization:	
  1611                           ; 0 bytes @ 0x4
  1612                           
  1613  0074                     ??_DetectSYSC_Signal:	
  1614                           ; 0 bytes @ 0x4
  1615                           
  1616  0074                     ??_setTemp_Enable:	
  1617                           ; 0 bytes @ 0x4
  1618                           
  1619  0074                     ??_setLoad_Enable:	
  1620                           ; 0 bytes @ 0x4
  1621                           
  1622  0074                     ??_LightsPointSelect:	
  1623                           ; 0 bytes @ 0x4
  1624                           
  1625  0074                     ??_setLoad_AH_AL_Restore:	
  1626                           ; 0 bytes @ 0x4
  1627                           
  1628  0074                     ??_getTemp_Safe:	
  1629                           ; 0 bytes @ 0x4
  1630                           
  1631  0074                     ??_setTemp_Initialization:	
  1632                           ; 0 bytes @ 0x4
  1633                           
  1634  0074                     ??_setSYSC_Initialization:	
  1635                           ; 0 bytes @ 0x4
  1636                           
  1637  0074                     ??_CDS_Initialization:	
  1638                           ; 0 bytes @ 0x4
  1639                           
  1640  0074                     ??_getCDS_Status:	
  1641                           ; 0 bytes @ 0x4
  1642                           
  1643  0074                     ??_LedPointSelect:	
  1644                           ; 0 bytes @ 0x4
  1645                           
  1646  0074                     ??_WDT_Main:	
  1647                           ; 0 bytes @ 0x4
  1648                           
  1649  0074                     ??_getMain_Exception:	
  1650                           ; 0 bytes @ 0x4
  1651                           
  1652  0074                     ??_setLoad_Count:	
  1653                           ; 0 bytes @ 0x4
  1654                           
  1655  0074                     ??_setLoad_GO:	
  1656                           ; 0 bytes @ 0x4
  1657                           
  1658  0074                     ?_setLoad_StatusOn:	
  1659                           ; 0 bytes @ 0x4
  1660                           
  1661  0074                     ?_setLoad_StatusOff:	
  1662                           ; 0 bytes @ 0x4
  1663                           
  1664  0074                     ??___wmul:	
  1665                           ; 0 bytes @ 0x4
  1666                           
  1667  0074                     ??___awdiv:	
  1668                           ; 0 bytes @ 0x4
  1669                           
  1670  0074                     ??___lwdiv:	
  1671                           ; 0 bytes @ 0x4
  1672                           
  1673  0074                     ?_getAD:	
  1674                           ; 0 bytes @ 0x4
  1675                           
  1676  0074                     ?___lbdiv:	
  1677                           ; 1 bytes @ 0x4
  1678                           
  1679  0074                     getCDS_Status@result:	
  1680                           ; 1 bytes @ 0x4
  1681                           
  1682  0074                     getAD@adcon1:	
  1683                           ; 1 bytes @ 0x4
  1684                           
  1685  0074                     getMain_Exception@result:	
  1686                           ; 1 bytes @ 0x4
  1687                           
  1688  0074                     getMain_AD_Safe@result:	
  1689                           ; 1 bytes @ 0x4
  1690                           
  1691  0074                     setLoad_Enable@command:	
  1692                           ; 1 bytes @ 0x4
  1693                           
  1694  0074                     setLoad_GO@command:	
  1695                           ; 1 bytes @ 0x4
  1696                           
  1697  0074                     setLoad_StatusOn@command:	
  1698                           ; 1 bytes @ 0x4
  1699                           
  1700  0074                     setLoad_StatusOff@command:	
  1701                           ; 1 bytes @ 0x4
  1702                           
  1703  0074                     setTemp_Enable@command:	
  1704                           ; 1 bytes @ 0x4
  1705                           
  1706  0074                     getTemp_Safe@result:	
  1707                           ; 1 bytes @ 0x4
  1708                           
  1709  0074                     ___lbdiv@divisor:	
  1710                           ; 1 bytes @ 0x4
  1711                           
  1712  0074                     ___wmul@product:	
  1713                           ; 1 bytes @ 0x4
  1714                           
  1715                           
  1716                           ; 2 bytes @ 0x4
  1717  0074                     	ds	1
  1718  0075                     ??_getAD:	
  1719  0075                     ??_my_MainTime:	
  1720                           ; 0 bytes @ 0x5
  1721                           
  1722  0075                     ??_Mcu_Initialization:	
  1723                           ; 0 bytes @ 0x5
  1724                           
  1725  0075                     ??_setLoad_StatusOn:	
  1726                           ; 0 bytes @ 0x5
  1727                           
  1728  0075                     ??_setLoad_StatusOff:	
  1729                           ; 0 bytes @ 0x5
  1730                           
  1731  0075                     ??___lbdiv:	
  1732                           ; 0 bytes @ 0x5
  1733                           
  1734  0075                     LedPointSelect@led:	
  1735                           ; 0 bytes @ 0x5
  1736                           
  1737  0075                     getAD@adcon0:	
  1738                           ; 1 bytes @ 0x5
  1739                           
  1740  0075                     setLoad_Count@command:	
  1741                           ; 1 bytes @ 0x5
  1742                           
  1743  0075                     setLoad_StatusOn@lights:	
  1744                           ; 1 bytes @ 0x5
  1745                           
  1746  0075                     setLoad_StatusOff@lights:	
  1747                           ; 1 bytes @ 0x5
  1748                           
  1749  0075                     setLoad_AH_AL_Restore@i:	
  1750                           ; 1 bytes @ 0x5
  1751                           
  1752  0075                     LightsPointSelect@lights:	
  1753                           ; 1 bytes @ 0x5
  1754                           
  1755                           
  1756                           ; 1 bytes @ 0x5
  1757  0075                     	ds	1
  1758  0076                     ??_setLED_Initialization:	
  1759  0076                     ??_setLED:	
  1760                           ; 0 bytes @ 0x6
  1761                           
  1762  0076                     ??_Load_Initialization:	
  1763                           ; 0 bytes @ 0x6
  1764                           
  1765  0076                     ??_Lights_Initialization:	
  1766                           ; 0 bytes @ 0x6
  1767                           
  1768  0076                     ??_SYSC_Main:	
  1769                           ; 0 bytes @ 0x6
  1770                           
  1771  0076                     ??_Temp_Main:	
  1772                           ; 0 bytes @ 0x6
  1773                           
  1774  0076                     ??_Lights_Main:	
  1775                           ; 0 bytes @ 0x6
  1776                           
  1777  0076                     ??_setLights_Clear:	
  1778                           ; 0 bytes @ 0x6
  1779                           
  1780  0076                     ??_getLights_Status:	
  1781                           ; 0 bytes @ 0x6
  1782                           
  1783  0076                     ??_setLights_Trigger:	
  1784                           ; 0 bytes @ 0x6
  1785                           
  1786  0076                     ??_setLights_Switch:	
  1787                           ; 0 bytes @ 0x6
  1788                           
  1789  0076                     ??_setLights_Initialization:	
  1790                           ; 0 bytes @ 0x6
  1791                           
  1792  0076                     ??_setLights_Main:	
  1793                           ; 0 bytes @ 0x6
  1794                           
  1795  0076                     ??_LED_Initialization:	
  1796                           ; 0 bytes @ 0x6
  1797                           
  1798  0076                     ??_LED_Main:	
  1799                           ; 0 bytes @ 0x6
  1800                           
  1801                           
  1802                           	psect	cstackBANK0
  1803  0061                     __pcstackBANK0:	
  1804                           ; 0 bytes @ 0x6
  1805                           
  1806  0061                     ??_setLED_Main:	
  1807  0061                     ?_setLED:	
  1808                           ; 0 bytes @ 0x0
  1809                           
  1810  0061                     ??_getLoad_AD:	
  1811                           ; 0 bytes @ 0x0
  1812                           
  1813  0061                     ??_getTemp_AD:	
  1814                           ; 0 bytes @ 0x0
  1815                           
  1816  0061                     ?_setLights_Clear:	
  1817                           ; 0 bytes @ 0x0
  1818                           
  1819  0061                     ?_setLights_Trigger:	
  1820                           ; 0 bytes @ 0x0
  1821                           
  1822  0061                     ?_setLights_Switch:	
  1823                           ; 0 bytes @ 0x0
  1824                           
  1825  0061                     ??_Lights_Control:	
  1826                           ; 0 bytes @ 0x0
  1827                           
  1828  0061                     ?_setLights:	
  1829                           ; 0 bytes @ 0x0
  1830                           
  1831  0061                     ??_CDS_Main:	
  1832                           ; 0 bytes @ 0x0
  1833                           
  1834  0061                     ?_getCDS_AD:	
  1835                           ; 0 bytes @ 0x0
  1836                           
  1837  0061                     ??_getMain_LightsStatus:	
  1838                           ; 0 bytes @ 0x0
  1839                           
  1840  0061                     ?___wmul:	
  1841                           ; 0 bytes @ 0x0
  1842                           
  1843  0061                     ?___awdiv:	
  1844                           ; 2 bytes @ 0x0
  1845                           
  1846  0061                     ?___lwdiv:	
  1847                           ; 2 bytes @ 0x0
  1848                           
  1849  0061                     getCDS_AD@channel2:	
  1850                           ; 2 bytes @ 0x0
  1851                           
  1852  0061                     setLED@command:	
  1853                           ; 1 bytes @ 0x0
  1854                           
  1855  0061                     setLights_Initialization@lights:	
  1856                           ; 1 bytes @ 0x0
  1857                           
  1858  0061                     setLights_Clear@command:	
  1859                           ; 1 bytes @ 0x0
  1860                           
  1861  0061                     setLights_Trigger@command:	
  1862                           ; 1 bytes @ 0x0
  1863                           
  1864  0061                     setLights_Switch@command:	
  1865                           ; 1 bytes @ 0x0
  1866                           
  1867  0061                     getLights_Status@lights:	
  1868                           ; 1 bytes @ 0x0
  1869                           
  1870  0061                     setLights@status:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  0061                     ___lbdiv@dividend:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  0061                     ___wmul@multiplier:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  0061                     ___awdiv@divisor:	
  1880                           ; 2 bytes @ 0x0
  1881                           
  1882  0061                     ___lwdiv@divisor:	
  1883                           ; 2 bytes @ 0x0
  1884                           
  1885                           
  1886                           ; 2 bytes @ 0x0
  1887  0061                     	ds	1
  1888  0062                     ??_setLights:	
  1889  0062                     ??_getCDS_AD:	
  1890                           ; 0 bytes @ 0x1
  1891                           
  1892  0062                     setLED@led:	
  1893                           ; 0 bytes @ 0x1
  1894                           
  1895  0062                     getMain_LightsStatus@count:	
  1896                           ; 1 bytes @ 0x1
  1897                           
  1898  0062                     setLights_Clear@lights:	
  1899                           ; 1 bytes @ 0x1
  1900                           
  1901  0062                     setLights_Trigger@lights:	
  1902                           ; 1 bytes @ 0x1
  1903                           
  1904  0062                     setLights_Switch@lights:	
  1905                           ; 1 bytes @ 0x1
  1906                           
  1907  0062                     getLights_Status@result:	
  1908                           ; 1 bytes @ 0x1
  1909                           
  1910  0062                     ___lbdiv@counter:	
  1911                           ; 1 bytes @ 0x1
  1912                           
  1913                           
  1914                           ; 1 bytes @ 0x1
  1915  0062                     	ds	1
  1916  0063                     ??_PIR_Main:	
  1917  0063                     ??_setLoad_Exceptions:	
  1918                           ; 0 bytes @ 0x2
  1919                           
  1920  0063                     ??_setOverTemp_Exceptions:	
  1921                           ; 0 bytes @ 0x2
  1922                           
  1923  0063                     ??_setSYSC_Main:	
  1924                           ; 0 bytes @ 0x2
  1925                           
  1926  0063                     ??_Lights_Close:	
  1927                           ; 0 bytes @ 0x2
  1928                           
  1929  0063                     setLED_Initialization@led:	
  1930                           ; 0 bytes @ 0x2
  1931                           
  1932  0063                     setLED_Main@led:	
  1933                           ; 1 bytes @ 0x2
  1934                           
  1935  0063                     getLoad_AD@channel:	
  1936                           ; 1 bytes @ 0x2
  1937                           
  1938  0063                     getTemp_AD@channel:	
  1939                           ; 1 bytes @ 0x2
  1940                           
  1941  0063                     setLights@lights:	
  1942                           ; 1 bytes @ 0x2
  1943                           
  1944  0063                     Lights_Control@lights:	
  1945                           ; 1 bytes @ 0x2
  1946                           
  1947  0063                     ___lbdiv@quotient:	
  1948                           ; 1 bytes @ 0x2
  1949                           
  1950  0063                     getMain_LightsStatus@i:	
  1951                           ; 1 bytes @ 0x2
  1952                           
  1953  0063                     ___wmul@multiplicand:	
  1954                           ; 2 bytes @ 0x2
  1955                           
  1956  0063                     ___awdiv@dividend:	
  1957                           ; 2 bytes @ 0x2
  1958                           
  1959  0063                     ___lwdiv@dividend:	
  1960                           ; 2 bytes @ 0x2
  1961                           
  1962                           
  1963                           ; 2 bytes @ 0x2
  1964  0063                     	ds	1
  1965  0064                     getCDS_AD@i:	
  1966  0064                     getLoad_AD@j:	
  1967                           ; 1 bytes @ 0x3
  1968                           
  1969  0064                     setLoad_Exceptions@i:	
  1970                           ; 1 bytes @ 0x3
  1971                           
  1972  0064                     setOverTemp_Exceptions@i:	
  1973                           ; 1 bytes @ 0x3
  1974                           
  1975  0064                     Lights_Close@status:	
  1976                           ; 1 bytes @ 0x3
  1977                           
  1978  0064                     setLights_Main@clear:	
  1979                           ; 1 bytes @ 0x3
  1980                           
  1981                           
  1982                           ; 1 bytes @ 0x3
  1983  0064                     	ds	1
  1984  0065                     getCDS_AD@j:	
  1985  0065                     getMain_LightsStatus@result:	
  1986                           ; 1 bytes @ 0x4
  1987                           
  1988  0065                     getLoad_AD@i:	
  1989                           ; 1 bytes @ 0x4
  1990                           
  1991  0065                     setLoad_Exceptions@command:	
  1992                           ; 1 bytes @ 0x4
  1993                           
  1994  0065                     setOverTemp_Exceptions@command:	
  1995                           ; 1 bytes @ 0x4
  1996                           
  1997  0065                     setLights_Main@lights:	
  1998                           ; 1 bytes @ 0x4
  1999                           
  2000  0065                     ___awdiv@counter:	
  2001                           ; 1 bytes @ 0x4
  2002                           
  2003  0065                     ___lwdiv@counter:	
  2004                           ; 1 bytes @ 0x4
  2005                           
  2006                           
  2007                           ; 1 bytes @ 0x4
  2008  0065                     	ds	1
  2009  0066                     ??_Load_Main:	
  2010  0066                     getCDS_AD@channel1:	
  2011                           ; 0 bytes @ 0x5
  2012                           
  2013  0066                     ___awdiv@sign:	
  2014                           ; 1 bytes @ 0x5
  2015                           
  2016  0066                     ___lwdiv@quotient:	
  2017                           ; 1 bytes @ 0x5
  2018                           
  2019                           
  2020                           ; 2 bytes @ 0x5
  2021  0066                     	ds	1
  2022  0067                     ___awdiv@quotient:	
  2023                           
  2024                           ; 2 bytes @ 0x6
  2025  0067                     	ds	1
  2026  0068                     Load_Main@i:	
  2027                           
  2028                           ; 1 bytes @ 0x7
  2029  0068                     	ds	1
  2030  0069                     ?_getPIR_AD:	
  2031  0069                     ??_setTemp_Main:	
  2032                           ; 0 bytes @ 0x8
  2033                           
  2034  0069                     getPIR_AD@channel2:	
  2035                           ; 0 bytes @ 0x8
  2036                           
  2037                           
  2038                           ; 1 bytes @ 0x8
  2039  0069                     	ds	1
  2040  006A                     ??_getPIR_AD:	
  2041                           
  2042                           ; 0 bytes @ 0x9
  2043  006A                     	ds	3
  2044  006D                     getPIR_AD@j:	
  2045                           
  2046                           ; 1 bytes @ 0xC
  2047  006D                     	ds	1
  2048  006E                     getPIR_AD@channel1:	
  2049                           
  2050                           ; 1 bytes @ 0xD
  2051  006E                     	ds	1
  2052  006F                     getPIR_AD@i:	
  2053                           
  2054                           ; 1 bytes @ 0xE
  2055  006F                     	ds	1
  2056                           
  2057                           	psect	maintext
  2058  04F7                     __pmaintext:	
  2059 ;;
  2060 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2061 ;;
  2062 ;; *************** function _main *****************
  2063 ;; Defined at:
  2064 ;;		line 7 in file "../src/Main_B1.c"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;  argc            2    0[BANK1 ] int 
  2067 ;;  argv            2    2[BANK1 ] PTR PTR unsigned char 
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  2    0[BANK1 ] int 
  2072 ;; Registers used:
  2073 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2074 ;; Tracked objects:
  2075 ;;		On entry : 17F/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2079 ;;      Params:         0       0       4       0
  2080 ;;      Locals:         0       0       0       0
  2081 ;;      Temps:          0       0       1       0
  2082 ;;      Totals:         0       0       5       0
  2083 ;;Total ram usage:        5 bytes
  2084 ;; Hardware stack levels required when called:    7
  2085 ;; This function calls:
  2086 ;;		_CDS_Initialization
  2087 ;;		_CDS_Main
  2088 ;;		_DetectSYSC_Signal
  2089 ;;		_LED_Initialization
  2090 ;;		_LED_Main
  2091 ;;		_Lights_Initialization
  2092 ;;		_Lights_Main
  2093 ;;		_Load_Initialization
  2094 ;;		_Load_Main
  2095 ;;		_Mcu_Initialization
  2096 ;;		_PIR_Initialization
  2097 ;;		_PIR_Main
  2098 ;;		_SYSC_Initialization
  2099 ;;		_SYSC_Main
  2100 ;;		_Temp_Initialization
  2101 ;;		_Temp_Main
  2102 ;;		_WDT_Main
  2103 ;;		_getCDS_AD
  2104 ;;		_getLoad_AD
  2105 ;;		_getPIR_AD
  2106 ;;		_getTemp_AD
  2107 ;;		_myMain_Initialization
  2108 ;;		_my_MainTime
  2109 ;; This function is called by:
  2110 ;;		Startup code after reset
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           
  2115                           ;psect for function _main
  2116  04F7                     _main:	
  2117                           
  2118                           ;Main_B1.c: 8: myMain_Initialization();
  2119                           
  2120                           ;incstack = 0
  2121                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2122  04F7  158A  2404  118A   	fcall	_myMain_Initialization
  2123                           
  2124                           ;Main_B1.c: 9: Mcu_Initialization();
  2125  04FA  158A  24F9  118A   	fcall	_Mcu_Initialization
  2126                           
  2127                           ;Main_B1.c: 10: ;;
  2128                           ;Main_B1.c: 11: LED_Initialization();
  2129  04FD  158A  2475  118A   	fcall	_LED_Initialization
  2130                           
  2131                           ;Main_B1.c: 12: ;;
  2132                           ;Main_B1.c: 14: SYSC_Initialization();
  2133  0500  158A  2405  118A   	fcall	_SYSC_Initialization
  2134                           
  2135                           ;Main_B1.c: 15: Temp_Initialization();
  2136  0503  158A  240B  118A   	fcall	_Temp_Initialization
  2137                           
  2138                           ;Main_B1.c: 16: Load_Initialization();
  2139  0506  158A  2426  118A   	fcall	_Load_Initialization
  2140                           
  2141                           ;Main_B1.c: 17: ;;
  2142                           ;Main_B1.c: 18: ;;
  2143                           ;Main_B1.c: 20: ;;
  2144                           ;Main_B1.c: 21: Lights_Initialization();
  2145  0509  158A  2415  118A   	fcall	_Lights_Initialization
  2146                           
  2147                           ;Main_B1.c: 22: CDS_Initialization();
  2148  050C  158A  2411  118A   	fcall	_CDS_Initialization
  2149                           
  2150                           ;Main_B1.c: 23: PIR_Initialization();
  2151  050F  158A  2547  118A   	fcall	_PIR_Initialization
  2152                           
  2153                           ;Main_B1.c: 24: ;;
  2154                           ;Main_B1.c: 25: ;;
  2155                           ;Main_B1.c: 26: __nop();
  2156  0512  0000               	nop
  2157  0513                     l4830:	
  2158                           ;Main_B1.c: 27: ;;
  2159                           ;Main_B1.c: 29: while (1) {
  2160                           
  2161                           
  2162                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  2163  0513  1683               	bsf	3,5	;RP0=1, select bank1
  2164  0514  1303               	bcf	3,6	;RP1=0, select bank1
  2165  0515  1C20               	btfss	_myMain^(0+128),0
  2166  0516  2D3A               	goto	l4842
  2167                           
  2168                           ;Main_B1.c: 33: DetectSYSC_Signal();
  2169  0517  158A  24BF  118A   	fcall	_DetectSYSC_Signal
  2170                           
  2171                           ;Main_B1.c: 37: getLoad_AD(0x01);
  2172  051A  3001               	movlw	1
  2173  051B  118A  2730  118A   	fcall	_getLoad_AD
  2174                           
  2175                           ;Main_B1.c: 41: getTemp_AD(0x11);
  2176  051E  3011               	movlw	17
  2177  051F  158A  2704  118A   	fcall	_getTemp_AD
  2178                           
  2179                           ;Main_B1.c: 49: getCDS_AD(0x09, 0x31);
  2180  0522  3031               	movlw	49
  2181  0523  1683               	bsf	3,5	;RP0=1, select bank1
  2182  0524  1303               	bcf	3,6	;RP1=0, select bank1
  2183  0525  00EA               	movwf	??_main^(0+128)
  2184  0526  086A               	movf	??_main^(0+128),w
  2185  0527  1283               	bcf	3,5	;RP0=0, select bank0
  2186  0528  1303               	bcf	3,6	;RP1=0, select bank0
  2187  0529  00E1               	movwf	getCDS_AD@channel2
  2188  052A  3009               	movlw	9
  2189  052B  158A  272A  118A   	fcall	_getCDS_AD
  2190                           
  2191                           ;Main_B1.c: 53: getPIR_AD(0x05, 0x0d);
  2192  052E  300D               	movlw	13
  2193  052F  1683               	bsf	3,5	;RP0=1, select bank1
  2194  0530  1303               	bcf	3,6	;RP1=0, select bank1
  2195  0531  00EA               	movwf	??_main^(0+128)
  2196  0532  086A               	movf	??_main^(0+128),w
  2197  0533  1283               	bcf	3,5	;RP0=0, select bank0
  2198  0534  1303               	bcf	3,6	;RP1=0, select bank0
  2199  0535  00E9               	movwf	getPIR_AD@channel2
  2200  0536  3005               	movlw	5
  2201  0537  118A  2218  118A   	fcall	_getPIR_AD
  2202  053A                     l4842:	
  2203                           
  2204                           ;Main_B1.c: 56: }
  2205                           ;Main_B1.c: 92: if (myMain.T1_Timerout == 1) {
  2206  053A  1683               	bsf	3,5	;RP0=1, select bank1
  2207  053B  1303               	bcf	3,6	;RP1=0, select bank1
  2208  053C  1D20               	btfss	_myMain^(0+128),2
  2209  053D  2D13               	goto	l4830
  2210                           
  2211                           ;Main_B1.c: 93: myMain.T1_Timerout = 0;
  2212  053E  1120               	bcf	_myMain^(0+128),2
  2213                           
  2214                           ;Main_B1.c: 94: my_MainTime();
  2215  053F  158A  2643  118A   	fcall	_my_MainTime
  2216                           
  2217                           ;Main_B1.c: 95: WDT_Main();
  2218  0542  158A  2508  118A   	fcall	_WDT_Main
  2219                           
  2220                           ;Main_B1.c: 96: ;;
  2221                           ;Main_B1.c: 97: ;;
  2222                           ;Main_B1.c: 98: if (myMain.PowerON) {
  2223  0545  1683               	bsf	3,5	;RP0=1, select bank1
  2224  0546  1303               	bcf	3,6	;RP1=0, select bank1
  2225  0547  1C20               	btfss	_myMain^(0+128),0
  2226  0548  2D13               	goto	l4830
  2227                           
  2228                           ;Main_B1.c: 99: ;;
  2229                           ;Main_B1.c: 101: LED_Main();
  2230  0549  158A  2481  118A   	fcall	_LED_Main
  2231                           
  2232                           ;Main_B1.c: 102: ;;
  2233                           ;Main_B1.c: 104: SYSC_Main();
  2234  054C  158A  2408  118A   	fcall	_SYSC_Main
  2235                           
  2236                           ;Main_B1.c: 105: Temp_Main();
  2237  054F  158A  240E  118A   	fcall	_Temp_Main
  2238                           
  2239                           ;Main_B1.c: 106: Load_Main();
  2240  0552  118A  2352  118A   	fcall	_Load_Main
  2241                           
  2242                           ;Main_B1.c: 107: ;;
  2243                           ;Main_B1.c: 109: Lights_Main();
  2244  0555  158A  246A  118A   	fcall	_Lights_Main
  2245                           
  2246                           ;Main_B1.c: 110: ;;
  2247                           ;Main_B1.c: 111: ;;
  2248                           ;Main_B1.c: 112: CDS_Main();
  2249  0558  118A  2780  118A   	fcall	_CDS_Main
  2250                           
  2251                           ;Main_B1.c: 113: PIR_Main();
  2252  055B  118A  2026  118A   	fcall	_PIR_Main
  2253                           
  2254                           ;Main_B1.c: 115: ;;
  2255                           ;Main_B1.c: 116: ;;
  2256                           ;Main_B1.c: 117: ;;
  2257  055E  2D13               	goto	l4830
  2258  055F                     __end_of_main:	
  2259                           ;Main_B1.c: 125: }
  2260                           ;Main_B1.c: 126: }
  2261                           ;Main_B1.c: 160: }
  2262                           ;Main_B1.c: 161: return (0);
  2263                           ;	Return value of _main is never used
  2264                           
  2265                           
  2266                           	psect	text1
  2267  0E43                     __ptext1:	
  2268 ;; *************** function _my_MainTime *****************
  2269 ;; Defined at:
  2270 ;;		line 180 in file "../src/Main_B1.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;		None
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;		None
  2275 ;; Return value:  Size  Location     Type
  2276 ;;		None               void
  2277 ;; Registers used:
  2278 ;;		wreg, status,2, status,0, pclath, cstack
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2284 ;;      Params:         0       0       0       0
  2285 ;;      Locals:         0       0       0       0
  2286 ;;      Temps:          0       0       0       0
  2287 ;;      Totals:         0       0       0       0
  2288 ;;Total ram usage:        0 bytes
  2289 ;; Hardware stack levels used:    1
  2290 ;; Hardware stack levels required when called:    3
  2291 ;; This function calls:
  2292 ;;		_setLoad_Enable
  2293 ;;		_setTemp_Enable
  2294 ;; This function is called by:
  2295 ;;		_main
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           
  2300                           ;psect for function _my_MainTime
  2301  0E43                     _my_MainTime:	
  2302                           
  2303                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  2304                           
  2305                           ;incstack = 0
  2306                           ; Regs used in _my_MainTime: [wreg+status,2+status,0+pclath+cstack]
  2307  0E43  1683               	bsf	3,5	;RP0=1, select bank1
  2308  0E44  1303               	bcf	3,6	;RP1=0, select bank1
  2309  0E45  1820               	btfsc	_myMain^(0+128),0
  2310  0E46  0008               	return
  2311                           
  2312                           ;Main_B1.c: 183: myMain.PowerCount++;
  2313  0E47  3001               	movlw	1
  2314  0E48  07A2               	addwf	(_myMain^(0+128)+2),f
  2315  0E49  1803               	skipnc
  2316  0E4A  0AA3               	incf	((_myMain+1)^(0+128)+2),f
  2317  0E4B  3000               	movlw	0
  2318  0E4C  07A3               	addwf	((_myMain+1)^(0+128)+2),f
  2319                           
  2320                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  2321  0E4D  3096               	movlw	150
  2322  0E4E  0622               	xorwf	(_myMain^(0+128)+2),w
  2323  0E4F  0423               	iorwf	((_myMain+1)^(0+128)+2),w
  2324  0E50  1D03               	skipz
  2325  0E51  0008               	return
  2326                           
  2327                           ;Main_B1.c: 185: {
  2328                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  2329  0E52  01A2               	clrf	(_myMain^(0+128)+2)
  2330  0E53  01A3               	clrf	((_myMain+1)^(0+128)+2)
  2331                           
  2332                           ;Main_B1.c: 187: myMain.PowerON = 1;
  2333  0E54  1420               	bsf	_myMain^(0+128),0
  2334                           
  2335                           ;Main_B1.c: 190: setTemp_Enable(1);
  2336  0E55  3001               	movlw	1
  2337  0E56  158A  2451  158A   	fcall	_setTemp_Enable
  2338                           
  2339                           ;Main_B1.c: 194: setLoad_Enable(1);
  2340  0E59  3001               	movlw	1
  2341  0E5A  158A  2461         	fcall	_setLoad_Enable
  2342                           
  2343                           ;Main_B1.c: 200: ;;
  2344                           ;Main_B1.c: 201: myMain.SelfTest = 1;
  2345  0E5C  1683               	bsf	3,5	;RP0=1, select bank1
  2346  0E5D  1303               	bcf	3,6	;RP1=0, select bank1
  2347  0E5E  17A0               	bsf	_myMain^(0+128),7
  2348                           
  2349                           ;Main_B1.c: 210: }
  2350                           ;Main_B1.c: 211: } else {
  2351                           
  2352                           ;Main_B1.c: 203: ;;
  2353  0E5F  0008               	return
  2354  0E60                     __end_of_my_MainTime:	
  2355                           
  2356                           	psect	text2
  2357  0C51                     __ptext2:	
  2358 ;; *************** function _setTemp_Enable *****************
  2359 ;; Defined at:
  2360 ;;		line 16 in file "../src/OverTemperature_B1.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  command         1    wreg     unsigned char 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  command         1    4[COMMON] unsigned char 
  2365 ;; Return value:  Size  Location     Type
  2366 ;;		None               void
  2367 ;; Registers used:
  2368 ;;		wreg
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2374 ;;      Params:         0       0       0       0
  2375 ;;      Locals:         1       0       0       0
  2376 ;;      Temps:          0       0       0       0
  2377 ;;      Totals:         1       0       0       0
  2378 ;;Total ram usage:        1 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    2
  2381 ;; This function calls:
  2382 ;;		Nothing
  2383 ;; This function is called by:
  2384 ;;		_my_MainTime
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           
  2389                           ;psect for function _setTemp_Enable
  2390  0C51                     _setTemp_Enable:	
  2391                           
  2392                           ;incstack = 0
  2393                           ; Regs used in _setTemp_Enable: [wreg]
  2394                           ;setTemp_Enable@command stored from wreg
  2395  0C51  00F4               	movwf	setTemp_Enable@command
  2396                           
  2397                           ;OverTemperature_B1.c: 17: Temp.Enable = command;
  2398  0C52  0874               	movf	setTemp_Enable@command,w
  2399  0C53  1283               	bcf	3,5	;RP0=0, select bank0
  2400  0C54  1303               	bcf	3,6	;RP1=0, select bank0
  2401  0C55  1051               	bcf	_Temp,0
  2402  0C56  1D03               	skipz
  2403  0C57  1451               	bsf	_Temp,0
  2404  0C58  0008               	return
  2405  0C59                     __end_of_setTemp_Enable:	
  2406                           
  2407                           	psect	text3
  2408  0C61                     __ptext3:	
  2409 ;; *************** function _setLoad_Enable *****************
  2410 ;; Defined at:
  2411 ;;		line 257 in file "../src/OverLoad_B1.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;  command         1    wreg     unsigned char 
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;  command         1    4[COMMON] unsigned char 
  2416 ;; Return value:  Size  Location     Type
  2417 ;;		None               void
  2418 ;; Registers used:
  2419 ;;		wreg
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2425 ;;      Params:         0       0       0       0
  2426 ;;      Locals:         1       0       0       0
  2427 ;;      Temps:          0       0       0       0
  2428 ;;      Totals:         1       0       0       0
  2429 ;;Total ram usage:        1 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; Hardware stack levels required when called:    2
  2432 ;; This function calls:
  2433 ;;		Nothing
  2434 ;; This function is called by:
  2435 ;;		_my_MainTime
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           
  2440                           ;psect for function _setLoad_Enable
  2441  0C61                     _setLoad_Enable:	
  2442                           
  2443                           ;incstack = 0
  2444                           ; Regs used in _setLoad_Enable: [wreg]
  2445                           ;setLoad_Enable@command stored from wreg
  2446  0C61  00F4               	movwf	setLoad_Enable@command
  2447                           
  2448                           ;OverLoad_B1.c: 258: Load1.Enable = command;
  2449  0C62  0874               	movf	setLoad_Enable@command,w
  2450  0C63  1283               	bcf	3,5	;RP0=0, select bank0
  2451  0C64  1303               	bcf	3,6	;RP1=0, select bank0
  2452  0C65  102E               	bcf	_Load1,0
  2453  0C66  1D03               	skipz
  2454  0C67  142E               	bsf	_Load1,0
  2455                           
  2456                           ;OverLoad_B1.c: 259: Load1.GO = 0;
  2457  0C68  10AE               	bcf	_Load1,1
  2458  0C69  0008               	return
  2459  0C6A                     __end_of_setLoad_Enable:	
  2460                           
  2461                           	psect	text4
  2462  0C04                     __ptext4:	
  2463 ;; *************** function _myMain_Initialization *****************
  2464 ;; Defined at:
  2465 ;;		line 167 in file "../src/Main_B1.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;		None
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;		None
  2470 ;; Return value:  Size  Location     Type
  2471 ;;		None               void
  2472 ;; Registers used:
  2473 ;;		None
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2479 ;;      Params:         0       0       0       0
  2480 ;;      Locals:         0       0       0       0
  2481 ;;      Temps:          0       0       0       0
  2482 ;;      Totals:         0       0       0       0
  2483 ;;Total ram usage:        0 bytes
  2484 ;; Hardware stack levels used:    1
  2485 ;; Hardware stack levels required when called:    2
  2486 ;; This function calls:
  2487 ;;		Nothing
  2488 ;; This function is called by:
  2489 ;;		_main
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           
  2494                           ;psect for function _myMain_Initialization
  2495  0C04                     _myMain_Initialization:	
  2496                           
  2497                           ;incstack = 0
  2498                           ; Regs used in _myMain_Initialization: []
  2499  0C04  0008               	return
  2500  0C05                     __end_of_myMain_Initialization:	
  2501                           
  2502                           	psect	text5
  2503  0F04                     __ptext5:	
  2504 ;; *************** function _getTemp_AD *****************
  2505 ;; Defined at:
  2506 ;;		line 33 in file "../src/OverTemperature_B1.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;  channel         1    wreg     unsigned char 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  channel         1    2[BANK0 ] unsigned char 
  2511 ;; Return value:  Size  Location     Type
  2512 ;;		None               void
  2513 ;; Registers used:
  2514 ;;		wreg, status,2, status,0, pclath, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2520 ;;      Params:         0       0       0       0
  2521 ;;      Locals:         0       1       0       0
  2522 ;;      Temps:          0       2       0       0
  2523 ;;      Totals:         0       3       0       0
  2524 ;;Total ram usage:        3 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    4
  2527 ;; This function calls:
  2528 ;;		_getAD
  2529 ;; This function is called by:
  2530 ;;		_main
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           
  2535                           ;psect for function _getTemp_AD
  2536  0F04                     _getTemp_AD:	
  2537                           
  2538                           ;incstack = 0
  2539                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2540                           ;getTemp_AD@channel stored from wreg
  2541  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  2542  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  2543  0F06  00E3               	movwf	getTemp_AD@channel
  2544                           
  2545                           ;OverTemperature_B1.c: 35: if (RA5 == 1) {
  2546  0F07  1E85               	btfss	5,5	;volatile
  2547  0F08  0008               	return
  2548                           
  2549                           ;OverTemperature_B1.c: 36: if (Temp.ADtoGO == 1) {
  2550  0F09  1D51               	btfss	_Temp,2
  2551  0F0A  0008               	return
  2552                           
  2553                           ;OverTemperature_B1.c: 37: Temp.ADRES = getAD(channel, 0x70);
  2554  0F0B  3070               	movlw	112
  2555  0F0C  00E1               	movwf	??_getTemp_AD
  2556  0F0D  0861               	movf	??_getTemp_AD,w
  2557  0F0E  00F4               	movwf	getAD@adcon1
  2558  0F0F  0863               	movf	getTemp_AD@channel,w
  2559  0F10  158A  267E  158A   	fcall	_getAD
  2560  0F13  1283               	bcf	3,5	;RP0=0, select bank0
  2561  0F14  1303               	bcf	3,6	;RP1=0, select bank0
  2562  0F15  00E2               	movwf	??_getTemp_AD+1
  2563  0F16  0862               	movf	??_getTemp_AD+1,w
  2564  0F17  00DA               	movwf	_Temp+9
  2565                           
  2566                           ;OverTemperature_B1.c: 38: if (Temp.ADH[0] < Temp.ADRES) {
  2567  0F18  085A               	movf	_Temp+9,w
  2568  0F19  0258               	subwf	_Temp+7,w
  2569  0F1A  1803               	skipnc
  2570  0F1B  2F21               	goto	l4466
  2571                           
  2572                           ;OverTemperature_B1.c: 39: Temp.ADH[0] = Temp.ADRES;
  2573  0F1C  085A               	movf	_Temp+9,w
  2574  0F1D  00E1               	movwf	??_getTemp_AD
  2575  0F1E  0861               	movf	??_getTemp_AD,w
  2576  0F1F  00D8               	movwf	_Temp+7
  2577                           
  2578                           ;OverTemperature_B1.c: 40: } else if (Temp.ADH[1] < Temp.ADRES) {
  2579  0F20  0008               	return
  2580  0F21                     l4466:	
  2581  0F21  085A               	movf	_Temp+9,w
  2582  0F22  0259               	subwf	_Temp+8,w
  2583  0F23  1803               	skipnc
  2584  0F24  0008               	return
  2585                           
  2586                           ;OverTemperature_B1.c: 41: Temp.ADH[1] = Temp.ADRES;
  2587  0F25  085A               	movf	_Temp+9,w
  2588  0F26  00E1               	movwf	??_getTemp_AD
  2589  0F27  0861               	movf	??_getTemp_AD,w
  2590  0F28  00D9               	movwf	_Temp+8
  2591  0F29  0008               	return
  2592  0F2A                     __end_of_getTemp_AD:	
  2593                           
  2594                           	psect	text6
  2595  0218                     __ptext6:	
  2596 ;; *************** function _getPIR_AD *****************
  2597 ;; Defined at:
  2598 ;;		line 172 in file "../src/PIR_B1.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;  channel1        1    wreg     unsigned char 
  2601 ;;  channel2        1    8[BANK0 ] unsigned char 
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  channel1        1   13[BANK0 ] unsigned char 
  2604 ;;  i               1   14[BANK0 ] unsigned char 
  2605 ;;  j               1   12[BANK0 ] unsigned char 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;		None               void
  2608 ;; Registers used:
  2609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2615 ;;      Params:         0       1       0       0
  2616 ;;      Locals:         0       3       0       0
  2617 ;;      Temps:          0       3       0       0
  2618 ;;      Totals:         0       7       0       0
  2619 ;;Total ram usage:        7 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    4
  2622 ;; This function calls:
  2623 ;;		___awdiv
  2624 ;;		___lwdiv
  2625 ;;		_getAD
  2626 ;; This function is called by:
  2627 ;;		_main
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           
  2632                           ;psect for function _getPIR_AD
  2633  0218                     _getPIR_AD:	
  2634                           
  2635                           ;incstack = 0
  2636                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2637                           ;getPIR_AD@channel1 stored from wreg
  2638  0218  1283               	bcf	3,5	;RP0=0, select bank0
  2639  0219  1303               	bcf	3,6	;RP1=0, select bank0
  2640  021A  00EE               	movwf	getPIR_AD@channel1
  2641                           
  2642                           ;PIR_B1.c: 173: char i = 0, j = 0;
  2643  021B  01EF               	clrf	getPIR_AD@i
  2644  021C  01ED               	clrf	getPIR_AD@j
  2645                           
  2646                           ;PIR_B1.c: 175: if (_PIR.ADtoGO == 1) {
  2647  021D  1683               	bsf	3,5	;RP0=1, select bank1
  2648  021E  1303               	bcf	3,6	;RP1=0, select bank1
  2649  021F  1CA8               	btfss	__PIR^(0+128),1
  2650  0220  0008               	return
  2651                           
  2652                           ;PIR_B1.c: 176: _PIR.GO = 1;
  2653  0221  1528               	bsf	__PIR^(0+128),2
  2654                           
  2655                           ;PIR_B1.c: 177: _PIR.ADRES = getAD(channel1, 0x70);
  2656  0222  3070               	movlw	112
  2657  0223  1283               	bcf	3,5	;RP0=0, select bank0
  2658  0224  1303               	bcf	3,6	;RP1=0, select bank0
  2659  0225  00EA               	movwf	??_getPIR_AD
  2660  0226  086A               	movf	??_getPIR_AD,w
  2661  0227  00F4               	movwf	getAD@adcon1
  2662  0228  086E               	movf	getPIR_AD@channel1,w
  2663  0229  158A  267E  118A   	fcall	_getAD
  2664  022C  1283               	bcf	3,5	;RP0=0, select bank0
  2665  022D  1303               	bcf	3,6	;RP1=0, select bank0
  2666  022E  00EB               	movwf	??_getPIR_AD+1
  2667  022F  086B               	movf	??_getPIR_AD+1,w
  2668  0230  1683               	bsf	3,5	;RP0=1, select bank1
  2669  0231  1303               	bcf	3,6	;RP1=0, select bank1
  2670  0232  00AA               	movwf	(__PIR^(0+128)+2)
  2671                           
  2672                           ;PIR_B1.c: 178: _PIR.VRAD = _PIR.ADRES / 51;
  2673  0233  3033               	movlw	51
  2674  0234  1283               	bcf	3,5	;RP0=0, select bank0
  2675  0235  1303               	bcf	3,6	;RP1=0, select bank0
  2676  0236  00E1               	movwf	___awdiv@divisor
  2677  0237  3000               	movlw	0
  2678  0238  00E2               	movwf	___awdiv@divisor+1
  2679  0239  1683               	bsf	3,5	;RP0=1, select bank1
  2680  023A  1303               	bcf	3,6	;RP1=0, select bank1
  2681  023B  082A               	movf	(__PIR^(0+128)+2),w
  2682  023C  1283               	bcf	3,5	;RP0=0, select bank0
  2683  023D  1303               	bcf	3,6	;RP1=0, select bank0
  2684  023E  00EA               	movwf	??_getPIR_AD
  2685  023F  01EB               	clrf	??_getPIR_AD+1
  2686  0240  086A               	movf	??_getPIR_AD,w
  2687  0241  00E3               	movwf	___awdiv@dividend
  2688  0242  086B               	movf	??_getPIR_AD+1,w
  2689  0243  00E4               	movwf	___awdiv@dividend+1
  2690  0244  118A  25C3  118A   	fcall	___awdiv
  2691  0247  1283               	bcf	3,5	;RP0=0, select bank0
  2692  0248  1303               	bcf	3,6	;RP1=0, select bank0
  2693  0249  0861               	movf	?___awdiv,w
  2694  024A  00EC               	movwf	??_getPIR_AD+2
  2695  024B  086C               	movf	??_getPIR_AD+2,w
  2696  024C  1683               	bsf	3,5	;RP0=1, select bank1
  2697  024D  1303               	bcf	3,6	;RP1=0, select bank1
  2698  024E  00AB               	movwf	(__PIR^(0+128)+3)
  2699                           
  2700                           ;PIR_B1.c: 179: _PIR.VRAD1 = _PIR.ADRES;
  2701  024F  082A               	movf	(__PIR^(0+128)+2),w
  2702  0250  1283               	bcf	3,5	;RP0=0, select bank0
  2703  0251  1303               	bcf	3,6	;RP1=0, select bank0
  2704  0252  00EA               	movwf	??_getPIR_AD
  2705  0253  086A               	movf	??_getPIR_AD,w
  2706  0254  1683               	bsf	3,5	;RP0=1, select bank1
  2707  0255  1303               	bcf	3,6	;RP1=0, select bank1
  2708  0256  00AC               	movwf	(__PIR^(0+128)+4)
  2709                           
  2710                           ;PIR_B1.c: 180: _PIR.ADRES = getAD(channel2, 0x70);
  2711  0257  3070               	movlw	112
  2712  0258  1283               	bcf	3,5	;RP0=0, select bank0
  2713  0259  1303               	bcf	3,6	;RP1=0, select bank0
  2714  025A  00EA               	movwf	??_getPIR_AD
  2715  025B  086A               	movf	??_getPIR_AD,w
  2716  025C  00F4               	movwf	getAD@adcon1
  2717  025D  0869               	movf	getPIR_AD@channel2,w
  2718  025E  158A  267E  118A   	fcall	_getAD
  2719  0261  1283               	bcf	3,5	;RP0=0, select bank0
  2720  0262  1303               	bcf	3,6	;RP1=0, select bank0
  2721  0263  00EB               	movwf	??_getPIR_AD+1
  2722  0264  086B               	movf	??_getPIR_AD+1,w
  2723  0265  1683               	bsf	3,5	;RP0=1, select bank1
  2724  0266  1303               	bcf	3,6	;RP1=0, select bank1
  2725  0267  00AA               	movwf	(__PIR^(0+128)+2)
  2726                           
  2727                           ;PIR_B1.c: 181: _PIR.SignalAD = _PIR.ADRES;
  2728  0268  082A               	movf	(__PIR^(0+128)+2),w
  2729  0269  1283               	bcf	3,5	;RP0=0, select bank0
  2730  026A  1303               	bcf	3,6	;RP1=0, select bank0
  2731  026B  00EA               	movwf	??_getPIR_AD
  2732  026C  086A               	movf	??_getPIR_AD,w
  2733  026D  1683               	bsf	3,5	;RP0=1, select bank1
  2734  026E  1303               	bcf	3,6	;RP1=0, select bank1
  2735  026F  00A9               	movwf	(__PIR^(0+128)+1)
  2736                           
  2737                           ;PIR_B1.c: 183: switch (_PIR.VRAD) {
  2738  0270  2A8C               	goto	l4498
  2739  0271                     l4482:	
  2740                           ;PIR_B1.c: 184: case 0:
  2741                           
  2742                           
  2743                           ;PIR_B1.c: 185: if (_PIR.VRAD1 < 10) {
  2744  0271  300A               	movlw	10
  2745  0272  022C               	subwf	(__PIR^(0+128)+4),w
  2746  0273  1803               	skipnc
  2747  0274  2A77               	goto	l4486
  2748                           
  2749                           ;PIR_B1.c: 186: _PIR.CloseTimeValue = 5;
  2750  0275  3005               	movlw	5
  2751  0276  2A78               	goto	L1
  2752  0277                     l4486:	
  2753                           ;PIR_B1.c: 187: } else {
  2754                           
  2755                           
  2756                           ;PIR_B1.c: 188: _PIR.CloseTimeValue = 60;
  2757  0277  303C               	movlw	60
  2758  0278                     L1:	
  2759  0278  00CF               	movwf	(__PIR^(0+128)+39)
  2760  0279  3000               	movlw	0
  2761  027A  2A8A               	goto	L5
  2762  027B                     l4488:	
  2763                           ;PIR_B1.c: 191: case 1:
  2764                           
  2765                           ;PIR_B1.c: 189: }
  2766                           ;PIR_B1.c: 190: break;
  2767                           
  2768                           
  2769                           ;PIR_B1.c: 192: _PIR.CloseTimeValue = 300;
  2770  027B  302C               	movlw	44
  2771  027C  00CF               	movwf	(__PIR^(0+128)+39)
  2772  027D  3001               	movlw	1
  2773  027E  2A8A               	goto	L5
  2774  027F                     l4490:	
  2775                           ;PIR_B1.c: 194: case 2:
  2776                           
  2777                           ;PIR_B1.c: 193: break;
  2778                           
  2779                           
  2780                           ;PIR_B1.c: 195: _PIR.CloseTimeValue = 600;
  2781  027F  3058               	movlw	88
  2782  0280  00CF               	movwf	(__PIR^(0+128)+39)
  2783  0281  3002               	movlw	2
  2784  0282  2A8A               	goto	L5
  2785  0283                     l4492:	
  2786                           ;PIR_B1.c: 197: case 3:
  2787                           
  2788                           ;PIR_B1.c: 196: break;
  2789                           
  2790                           
  2791                           ;PIR_B1.c: 198: _PIR.CloseTimeValue = 900;
  2792  0283  3084               	movlw	132
  2793  0284  00CF               	movwf	(__PIR^(0+128)+39)
  2794  0285  3003               	movlw	3
  2795  0286  2A8A               	goto	L5
  2796  0287                     l4494:	
  2797                           ;PIR_B1.c: 200: case 4:
  2798                           
  2799                           ;PIR_B1.c: 199: break;
  2800                           
  2801                           
  2802                           ;PIR_B1.c: 201: _PIR.CloseTimeValue = 1200;
  2803  0287  30B0               	movlw	176
  2804  0288  00CF               	movwf	(__PIR^(0+128)+39)
  2805  0289  3004               	movlw	4
  2806  028A                     L5:	
  2807  028A  00D0               	movwf	(__PIR^(0+128)+40)
  2808                           
  2809                           ;PIR_B1.c: 203: }
  2810                           
  2811                           ;PIR_B1.c: 202: break;
  2812  028B  2A9D               	goto	l4500
  2813  028C                     l4498:	
  2814  028C  082B               	movf	(__PIR^(0+128)+3),w
  2815                           
  2816                           ; Switch size 1, requested type "space"
  2817                           ; Number of cases is 5, Range of values is 0 to 4
  2818                           ; switch strategies available:
  2819                           ; Name         Instructions Cycles
  2820                           ; simple_byte           16     9 (average)
  2821                           ; direct_byte           17     7 (fixed)
  2822                           ; jumptable            260     6 (fixed)
  2823                           ;	Chosen strategy is simple_byte
  2824  028D  3A00               	xorlw	0	; case 0
  2825  028E  1903               	skipnz
  2826  028F  2A71               	goto	l4482
  2827  0290  3A01               	xorlw	1	; case 1
  2828  0291  1903               	skipnz
  2829  0292  2A7B               	goto	l4488
  2830  0293  3A03               	xorlw	3	; case 2
  2831  0294  1903               	skipnz
  2832  0295  2A7F               	goto	l4490
  2833  0296  3A01               	xorlw	1	; case 3
  2834  0297  1903               	skipnz
  2835  0298  2A83               	goto	l4492
  2836  0299  3A07               	xorlw	7	; case 4
  2837  029A  1903               	skipnz
  2838  029B  2A87               	goto	l4494
  2839  029C  2A9D               	goto	l4500
  2840  029D                     l4500:	
  2841                           
  2842                           ;PIR_B1.c: 206: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2843  029D  0829               	movf	(__PIR^(0+128)+1),w
  2844  029E  1283               	bcf	3,5	;RP0=0, select bank0
  2845  029F  1303               	bcf	3,6	;RP1=0, select bank0
  2846  02A0  00EA               	movwf	??_getPIR_AD
  2847  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  2848  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  2849  02A3  082F               	movf	(__PIR^(0+128)+7),w
  2850  02A4  3EB0               	addlw	(__PIR+8)& (0+255)
  2851  02A5  0084               	movwf	4
  2852  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  2853  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  2854  02A8  086A               	movf	??_getPIR_AD,w
  2855  02A9  1383               	bcf	3,7	;select IRP bank1
  2856  02AA  0080               	movwf	0
  2857                           
  2858                           ;PIR_B1.c: 207: for (i = 0; i < 10; i++) {
  2859  02AB  01EF               	clrf	getPIR_AD@i
  2860  02AC  300A               	movlw	10
  2861  02AD  026F               	subwf	getPIR_AD@i,w
  2862  02AE  1803               	btfsc	3,0
  2863  02AF  2ACC               	goto	l4514
  2864  02B0                     l4508:	
  2865                           
  2866                           ;PIR_B1.c: 208: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2867  02B0  086F               	movf	getPIR_AD@i,w
  2868  02B1  3EB0               	addlw	(__PIR+8)& (0+255)
  2869  02B2  0084               	movwf	4
  2870  02B3  0800               	movf	0,w
  2871  02B4  00EA               	movwf	??_getPIR_AD
  2872  02B5  01EB               	clrf	??_getPIR_AD+1
  2873  02B6  086A               	movf	??_getPIR_AD,w
  2874  02B7  1683               	bsf	3,5	;RP0=1, select bank1
  2875  02B8  1303               	bcf	3,6	;RP1=0, select bank1
  2876  02B9  07BA               	addwf	(__PIR^(0+128)+18),f
  2877  02BA  1803               	skipnc
  2878  02BB  0ABB               	incf	((__PIR+1)^(0+128)+18),f
  2879  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  2880  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  2881  02BE  086B               	movf	??_getPIR_AD+1,w
  2882  02BF  1683               	bsf	3,5	;RP0=1, select bank1
  2883  02C0  1303               	bcf	3,6	;RP1=0, select bank1
  2884  02C1  07BB               	addwf	((__PIR+1)^(0+128)+18),f
  2885  02C2  3001               	movlw	1
  2886  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  2887  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  2888  02C5  00EA               	movwf	??_getPIR_AD
  2889  02C6  086A               	movf	??_getPIR_AD,w
  2890  02C7  07EF               	addwf	getPIR_AD@i,f
  2891  02C8  300A               	movlw	10
  2892  02C9  026F               	subwf	getPIR_AD@i,w
  2893  02CA  1C03               	skipc
  2894  02CB  2AB0               	goto	l4508
  2895  02CC                     l4514:	
  2896                           
  2897                           ;PIR_B1.c: 209: }
  2898                           ;PIR_B1.c: 210: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2899  02CC  300A               	movlw	10
  2900  02CD  00E1               	movwf	___lwdiv@divisor
  2901  02CE  3000               	movlw	0
  2902  02CF  00E2               	movwf	___lwdiv@divisor+1
  2903  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  2904  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  2905  02D2  083B               	movf	((__PIR+1)^(0+128)+18),w
  2906  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  2907  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  2908  02D5  01E4               	clrf	___lwdiv@dividend+1
  2909  02D6  07E4               	addwf	___lwdiv@dividend+1,f
  2910  02D7  1683               	bsf	3,5	;RP0=1, select bank1
  2911  02D8  1303               	bcf	3,6	;RP1=0, select bank1
  2912  02D9  083A               	movf	(__PIR^(0+128)+18),w
  2913  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  2914  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  2915  02DC  01E3               	clrf	___lwdiv@dividend
  2916  02DD  07E3               	addwf	___lwdiv@dividend,f
  2917  02DE  158A  27C0  118A   	fcall	___lwdiv
  2918  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  2919  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  2920  02E3  0861               	movf	?___lwdiv,w
  2921  02E4  00EA               	movwf	??_getPIR_AD
  2922  02E5  1683               	bsf	3,5	;RP0=1, select bank1
  2923  02E6  1303               	bcf	3,6	;RP1=0, select bank1
  2924  02E7  083C               	movf	(__PIR^(0+128)+20),w
  2925  02E8  3EBD               	addlw	(__PIR+21)& (0+255)
  2926  02E9  0084               	movwf	4
  2927  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  2928  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  2929  02EC  086A               	movf	??_getPIR_AD,w
  2930  02ED  1383               	bcf	3,7	;select IRP bank1
  2931  02EE  0080               	movwf	0
  2932                           
  2933                           ;PIR_B1.c: 211: _PIR.TenAverageValue = 0;
  2934  02EF  1683               	bsf	3,5	;RP0=1, select bank1
  2935  02F0  1303               	bcf	3,6	;RP1=0, select bank1
  2936  02F1  01BA               	clrf	(__PIR^(0+128)+18)
  2937  02F2  01BB               	clrf	((__PIR+1)^(0+128)+18)
  2938                           
  2939                           ;PIR_B1.c: 213: for (i = 0; i <= 9; i++) {
  2940  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  2941  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  2942  02F5  01EF               	clrf	getPIR_AD@i
  2943  02F6  300A               	movlw	10
  2944  02F7  026F               	subwf	getPIR_AD@i,w
  2945  02F8  1803               	btfsc	3,0
  2946  02F9  2B16               	goto	l4530
  2947  02FA                     l4524:	
  2948                           
  2949                           ;PIR_B1.c: 214: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2950  02FA  086F               	movf	getPIR_AD@i,w
  2951  02FB  3EBD               	addlw	(__PIR+21)& (0+255)
  2952  02FC  0084               	movwf	4
  2953  02FD  0800               	movf	0,w
  2954  02FE  00EA               	movwf	??_getPIR_AD
  2955  02FF  01EB               	clrf	??_getPIR_AD+1
  2956  0300  086A               	movf	??_getPIR_AD,w
  2957  0301  1683               	bsf	3,5	;RP0=1, select bank1
  2958  0302  1303               	bcf	3,6	;RP1=0, select bank1
  2959  0303  07C7               	addwf	(__PIR^(0+128)+31),f
  2960  0304  1803               	skipnc
  2961  0305  0AC8               	incf	((__PIR+1)^(0+128)+31),f
  2962  0306  1283               	bcf	3,5	;RP0=0, select bank0
  2963  0307  1303               	bcf	3,6	;RP1=0, select bank0
  2964  0308  086B               	movf	??_getPIR_AD+1,w
  2965  0309  1683               	bsf	3,5	;RP0=1, select bank1
  2966  030A  1303               	bcf	3,6	;RP1=0, select bank1
  2967  030B  07C8               	addwf	((__PIR+1)^(0+128)+31),f
  2968  030C  3001               	movlw	1
  2969  030D  1283               	bcf	3,5	;RP0=0, select bank0
  2970  030E  1303               	bcf	3,6	;RP1=0, select bank0
  2971  030F  00EA               	movwf	??_getPIR_AD
  2972  0310  086A               	movf	??_getPIR_AD,w
  2973  0311  07EF               	addwf	getPIR_AD@i,f
  2974  0312  300A               	movlw	10
  2975  0313  026F               	subwf	getPIR_AD@i,w
  2976  0314  1C03               	skipc
  2977  0315  2AFA               	goto	l4524
  2978  0316                     l4530:	
  2979                           
  2980                           ;PIR_B1.c: 215: }
  2981                           ;PIR_B1.c: 216: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2982  0316  300A               	movlw	10
  2983  0317  00E1               	movwf	___lwdiv@divisor
  2984  0318  3000               	movlw	0
  2985  0319  00E2               	movwf	___lwdiv@divisor+1
  2986  031A  1683               	bsf	3,5	;RP0=1, select bank1
  2987  031B  1303               	bcf	3,6	;RP1=0, select bank1
  2988  031C  0848               	movf	((__PIR+1)^(0+128)+31),w
  2989  031D  1283               	bcf	3,5	;RP0=0, select bank0
  2990  031E  1303               	bcf	3,6	;RP1=0, select bank0
  2991  031F  01E4               	clrf	___lwdiv@dividend+1
  2992  0320  07E4               	addwf	___lwdiv@dividend+1,f
  2993  0321  1683               	bsf	3,5	;RP0=1, select bank1
  2994  0322  1303               	bcf	3,6	;RP1=0, select bank1
  2995  0323  0847               	movf	(__PIR^(0+128)+31),w
  2996  0324  1283               	bcf	3,5	;RP0=0, select bank0
  2997  0325  1303               	bcf	3,6	;RP1=0, select bank0
  2998  0326  01E3               	clrf	___lwdiv@dividend
  2999  0327  07E3               	addwf	___lwdiv@dividend,f
  3000  0328  158A  27C0  118A   	fcall	___lwdiv
  3001  032B  1283               	bcf	3,5	;RP0=0, select bank0
  3002  032C  1303               	bcf	3,6	;RP1=0, select bank0
  3003  032D  0861               	movf	?___lwdiv,w
  3004  032E  00EA               	movwf	??_getPIR_AD
  3005  032F  086A               	movf	??_getPIR_AD,w
  3006  0330  1683               	bsf	3,5	;RP0=1, select bank1
  3007  0331  1303               	bcf	3,6	;RP1=0, select bank1
  3008  0332  00AE               	movwf	(__PIR^(0+128)+6)
  3009                           
  3010                           ;PIR_B1.c: 217: _PIR.HundredAverageValue = 0;
  3011  0333  01C7               	clrf	(__PIR^(0+128)+31)
  3012  0334  01C8               	clrf	((__PIR+1)^(0+128)+31)
  3013                           
  3014                           ;PIR_B1.c: 219: if (_PIR.TenCount < 10) {
  3015  0335  300A               	movlw	10
  3016  0336  022F               	subwf	(__PIR^(0+128)+7),w
  3017  0337  1803               	skipnc
  3018  0338  2B42               	goto	l4538
  3019                           
  3020                           ;PIR_B1.c: 220: _PIR.TenCount++;
  3021  0339  3001               	movlw	1
  3022  033A  1283               	bcf	3,5	;RP0=0, select bank0
  3023  033B  1303               	bcf	3,6	;RP1=0, select bank0
  3024  033C  00EA               	movwf	??_getPIR_AD
  3025  033D  086A               	movf	??_getPIR_AD,w
  3026  033E  1683               	bsf	3,5	;RP0=1, select bank1
  3027  033F  1303               	bcf	3,6	;RP1=0, select bank1
  3028  0340  07AF               	addwf	(__PIR^(0+128)+7),f
  3029                           
  3030                           ;PIR_B1.c: 221: } else {
  3031  0341  0008               	return
  3032  0342                     l4538:	
  3033                           
  3034                           ;PIR_B1.c: 222: _PIR.TenCount = 0;
  3035  0342  01AF               	clrf	(__PIR^(0+128)+7)
  3036                           
  3037                           ;PIR_B1.c: 223: if (_PIR.HundreCount < 10)
  3038  0343  300A               	movlw	10
  3039  0344  023C               	subwf	(__PIR^(0+128)+20),w
  3040  0345  1803               	skipnc
  3041  0346  2B50               	goto	l4544
  3042                           
  3043                           ;PIR_B1.c: 224: _PIR.HundreCount++;
  3044  0347  3001               	movlw	1
  3045  0348  1283               	bcf	3,5	;RP0=0, select bank0
  3046  0349  1303               	bcf	3,6	;RP1=0, select bank0
  3047  034A  00EA               	movwf	??_getPIR_AD
  3048  034B  086A               	movf	??_getPIR_AD,w
  3049  034C  1683               	bsf	3,5	;RP0=1, select bank1
  3050  034D  1303               	bcf	3,6	;RP1=0, select bank1
  3051  034E  07BC               	addwf	(__PIR^(0+128)+20),f
  3052  034F  0008               	return
  3053  0350                     l4544:	
  3054                           
  3055                           ;PIR_B1.c: 225: else
  3056                           ;PIR_B1.c: 226: _PIR.HundreCount = 0;
  3057  0350  01BC               	clrf	(__PIR^(0+128)+20)
  3058  0351  0008               	return
  3059  0352                     __end_of_getPIR_AD:	
  3060                           
  3061                           	psect	text7
  3062  0FC0                     __ptext7:	
  3063 ;; *************** function ___lwdiv *****************
  3064 ;; Defined at:
  3065 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  divisor         2    0[BANK0 ] unsigned int 
  3068 ;;  dividend        2    2[BANK0 ] unsigned int 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  quotient        2    5[BANK0 ] unsigned int 
  3071 ;;  counter         1    4[BANK0 ] unsigned char 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  2    0[BANK0 ] unsigned int 
  3074 ;; Registers used:
  3075 ;;		wreg, status,2, status,0
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3081 ;;      Params:         0       4       0       0
  3082 ;;      Locals:         0       3       0       0
  3083 ;;      Temps:          1       0       0       0
  3084 ;;      Totals:         1       7       0       0
  3085 ;;Total ram usage:        8 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    2
  3088 ;; This function calls:
  3089 ;;		Nothing
  3090 ;; This function is called by:
  3091 ;;		_getPIR_AD
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           
  3096                           ;psect for function ___lwdiv
  3097  0FC0                     ___lwdiv:	
  3098                           
  3099                           ;incstack = 0
  3100                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3101  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  3102  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  3103  0FC2  01E6               	clrf	___lwdiv@quotient
  3104  0FC3  01E7               	clrf	___lwdiv@quotient+1
  3105  0FC4  0862               	movf	___lwdiv@divisor+1,w
  3106  0FC5  0461               	iorwf	___lwdiv@divisor,w
  3107  0FC6  1903               	skipnz
  3108  0FC7  2FF9               	goto	l4368
  3109  0FC8  01E5               	clrf	___lwdiv@counter
  3110  0FC9  0AE5               	incf	___lwdiv@counter,f
  3111  0FCA                     l4356:	
  3112  0FCA  1BE2               	btfsc	___lwdiv@divisor+1,7
  3113  0FCB  2FD8               	goto	l4358
  3114  0FCC  3001               	movlw	1
  3115  0FCD                     u4695:	
  3116  0FCD  1003               	clrc
  3117  0FCE  0DE1               	rlf	___lwdiv@divisor,f
  3118  0FCF  0DE2               	rlf	___lwdiv@divisor+1,f
  3119  0FD0  3EFF               	addlw	-1
  3120  0FD1  1D03               	skipz
  3121  0FD2  2FCD               	goto	u4695
  3122  0FD3  3001               	movlw	1
  3123  0FD4  00F4               	movwf	??___lwdiv
  3124  0FD5  0874               	movf	??___lwdiv,w
  3125  0FD6  07E5               	addwf	___lwdiv@counter,f
  3126  0FD7  2FCA               	goto	l4356
  3127  0FD8                     l4358:	
  3128  0FD8  3001               	movlw	1
  3129  0FD9                     u4715:	
  3130  0FD9  1003               	clrc
  3131  0FDA  0DE6               	rlf	___lwdiv@quotient,f
  3132  0FDB  0DE7               	rlf	___lwdiv@quotient+1,f
  3133  0FDC  3EFF               	addlw	-1
  3134  0FDD  1D03               	skipz
  3135  0FDE  2FD9               	goto	u4715
  3136  0FDF  0862               	movf	___lwdiv@divisor+1,w
  3137  0FE0  0264               	subwf	___lwdiv@dividend+1,w
  3138  0FE1  1D03               	skipz
  3139  0FE2  2FE5               	goto	u4725
  3140  0FE3  0861               	movf	___lwdiv@divisor,w
  3141  0FE4  0263               	subwf	___lwdiv@dividend,w
  3142  0FE5                     u4725:	
  3143  0FE5  1C03               	skipc
  3144  0FE6  2FEE               	goto	l4364
  3145  0FE7  0861               	movf	___lwdiv@divisor,w
  3146  0FE8  02E3               	subwf	___lwdiv@dividend,f
  3147  0FE9  0862               	movf	___lwdiv@divisor+1,w
  3148  0FEA  1C03               	skipc
  3149  0FEB  03E4               	decf	___lwdiv@dividend+1,f
  3150  0FEC  02E4               	subwf	___lwdiv@dividend+1,f
  3151  0FED  1466               	bsf	___lwdiv@quotient,0
  3152  0FEE                     l4364:	
  3153  0FEE  3001               	movlw	1
  3154  0FEF                     u4735:	
  3155  0FEF  1003               	clrc
  3156  0FF0  0CE2               	rrf	___lwdiv@divisor+1,f
  3157  0FF1  0CE1               	rrf	___lwdiv@divisor,f
  3158  0FF2  3EFF               	addlw	-1
  3159  0FF3  1D03               	skipz
  3160  0FF4  2FEF               	goto	u4735
  3161  0FF5  3001               	movlw	1
  3162  0FF6  02E5               	subwf	___lwdiv@counter,f
  3163  0FF7  1D03               	btfss	3,2
  3164  0FF8  2FD8               	goto	l4358
  3165  0FF9                     l4368:	
  3166  0FF9  0867               	movf	___lwdiv@quotient+1,w
  3167  0FFA  01E2               	clrf	?___lwdiv+1
  3168  0FFB  07E2               	addwf	?___lwdiv+1,f
  3169  0FFC  0866               	movf	___lwdiv@quotient,w
  3170  0FFD  01E1               	clrf	?___lwdiv
  3171  0FFE  07E1               	addwf	?___lwdiv,f
  3172  0FFF  0008               	return
  3173  1000                     __end_of___lwdiv:	
  3174                           
  3175                           	psect	text8
  3176  0730                     __ptext8:	
  3177 ;; *************** function _getLoad_AD *****************
  3178 ;; Defined at:
  3179 ;;		line 15 in file "../src/OverLoad_B1.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;  channel         1    wreg     unsigned char 
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;  channel         1    2[BANK0 ] unsigned char 
  3184 ;;  i               1    4[BANK0 ] unsigned char 
  3185 ;;  j               1    3[BANK0 ] unsigned char 
  3186 ;; Return value:  Size  Location     Type
  3187 ;;		None               void
  3188 ;; Registers used:
  3189 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3195 ;;      Params:         0       0       0       0
  3196 ;;      Locals:         0       3       0       0
  3197 ;;      Temps:          0       2       0       0
  3198 ;;      Totals:         0       5       0       0
  3199 ;;Total ram usage:        5 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    4
  3202 ;; This function calls:
  3203 ;;		_getAD
  3204 ;; This function is called by:
  3205 ;;		_main
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           
  3210                           ;psect for function _getLoad_AD
  3211  0730                     _getLoad_AD:	
  3212                           
  3213                           ;incstack = 0
  3214                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3215                           ;getLoad_AD@channel stored from wreg
  3216  0730  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0731  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0732  00E3               	movwf	getLoad_AD@channel
  3219                           
  3220                           ;OverLoad_B1.c: 16: char i = 0, j = 0;
  3221  0733  01E5               	clrf	getLoad_AD@i
  3222  0734  01E4               	clrf	getLoad_AD@j
  3223                           
  3224                           ;OverLoad_B1.c: 18: if (Load1.ADtoGO == 1) {
  3225  0735  1E2E               	btfss	_Load1,4
  3226  0736  0008               	return
  3227                           
  3228                           ;OverLoad_B1.c: 19: Load1.ADRES = getAD(channel, 0xc1);
  3229  0737  30C1               	movlw	193
  3230  0738  00E1               	movwf	??_getLoad_AD
  3231  0739  0861               	movf	??_getLoad_AD,w
  3232  073A  00F4               	movwf	getAD@adcon1
  3233  073B  0863               	movf	getLoad_AD@channel,w
  3234  073C  158A  267E  118A   	fcall	_getAD
  3235  073F  1283               	bcf	3,5	;RP0=0, select bank0
  3236  0740  1303               	bcf	3,6	;RP1=0, select bank0
  3237  0741  00E2               	movwf	??_getLoad_AD+1
  3238  0742  0862               	movf	??_getLoad_AD+1,w
  3239  0743  00C2               	movwf	_Load1+20
  3240                           
  3241                           ;OverLoad_B1.c: 20: for (i = 0; i < 5; i++) {
  3242  0744  01E5               	clrf	getLoad_AD@i
  3243  0745  3005               	movlw	5
  3244  0746  0265               	subwf	getLoad_AD@i,w
  3245  0747  1803               	btfsc	3,0
  3246  0748  2F63               	goto	l4440
  3247  0749                     l4430:	
  3248                           
  3249                           ;OverLoad_B1.c: 21: if (Load1.AH[i] < Load1.ADRES) {
  3250  0749  0865               	movf	getLoad_AD@i,w
  3251  074A  3E35               	addlw	(_Load1+7)& (0+255)
  3252  074B  0084               	movwf	4
  3253  074C  0842               	movf	_Load1+20,w
  3254  074D  1383               	bcf	3,7	;select IRP bank0
  3255  074E  0200               	subwf	0,w
  3256  074F  1803               	skipnc
  3257  0750  2F5B               	goto	l4436
  3258                           
  3259                           ;OverLoad_B1.c: 22: Load1.AH[i] = Load1.ADRES;
  3260  0751  0842               	movf	_Load1+20,w
  3261  0752  00E1               	movwf	??_getLoad_AD
  3262  0753  0865               	movf	getLoad_AD@i,w
  3263  0754  3E35               	addlw	(_Load1+7)& (0+255)
  3264  0755  0084               	movwf	4
  3265  0756  0861               	movf	??_getLoad_AD,w
  3266  0757  0080               	movwf	0
  3267                           
  3268                           ;OverLoad_B1.c: 23: j = 1;
  3269  0758  01E4               	clrf	getLoad_AD@j
  3270  0759  0AE4               	incf	getLoad_AD@j,f
  3271                           
  3272                           ;OverLoad_B1.c: 24: break;
  3273  075A  2F63               	goto	l4440
  3274  075B                     l4436:	
  3275  075B  3001               	movlw	1
  3276  075C  00E1               	movwf	??_getLoad_AD
  3277  075D  0861               	movf	??_getLoad_AD,w
  3278  075E  07E5               	addwf	getLoad_AD@i,f
  3279  075F  3005               	movlw	5
  3280  0760  0265               	subwf	getLoad_AD@i,w
  3281  0761  1C03               	skipc
  3282  0762  2F49               	goto	l4430
  3283  0763                     l4440:	
  3284                           
  3285                           ;OverLoad_B1.c: 25: }
  3286                           ;OverLoad_B1.c: 26: }
  3287                           ;OverLoad_B1.c: 27: if (j == 0) {
  3288  0763  08E4               	movf	getLoad_AD@j,f
  3289  0764  1D03               	skipz
  3290  0765  0008               	return
  3291                           
  3292                           ;OverLoad_B1.c: 28: for (i = 0; i < 5; i++) {
  3293  0766  01E5               	clrf	getLoad_AD@i
  3294  0767                     L6:	
  3295  0767  3005               	movlw	5
  3296  0768  0265               	subwf	getLoad_AD@i,w
  3297  0769  1803               	btfsc	3,0
  3298  076A  0008               	return
  3299                           
  3300                           ;OverLoad_B1.c: 29: if (Load1.AL[i] > Load1.ADRES) {
  3301  076B  0865               	movf	getLoad_AD@i,w
  3302  076C  3E3A               	addlw	(_Load1+12)& (0+255)
  3303  076D  0084               	movwf	4
  3304  076E  1383               	bcf	3,7	;select IRP bank0
  3305  076F  0800               	movf	0,w
  3306  0770  0242               	subwf	_Load1+20,w
  3307  0771  1803               	skipnc
  3308  0772  2F7B               	goto	l4452
  3309                           
  3310                           ;OverLoad_B1.c: 30: Load1.AL[i] = Load1.ADRES;
  3311  0773  0842               	movf	_Load1+20,w
  3312  0774  00E1               	movwf	??_getLoad_AD
  3313  0775  0865               	movf	getLoad_AD@i,w
  3314  0776  3E3A               	addlw	(_Load1+12)& (0+255)
  3315  0777  0084               	movwf	4
  3316  0778  0861               	movf	??_getLoad_AD,w
  3317  0779  0080               	movwf	0
  3318                           
  3319                           ;OverLoad_B1.c: 31: break;
  3320  077A  0008               	return
  3321  077B                     l4452:	
  3322  077B  3001               	movlw	1
  3323  077C  00E1               	movwf	??_getLoad_AD
  3324  077D  0861               	movf	??_getLoad_AD,w
  3325  077E  07E5               	addwf	getLoad_AD@i,f
  3326  077F  2F67               	goto	L6
  3327  0780                     __end_of_getLoad_AD:	
  3328                           
  3329                           	psect	text9
  3330  0F2A                     __ptext9:	
  3331 ;; *************** function _getCDS_AD *****************
  3332 ;; Defined at:
  3333 ;;		line 49 in file "../src/CDS_B1.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;  channel1        1    wreg     unsigned char 
  3336 ;;  channel2        1    0[BANK0 ] unsigned char 
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;  channel1        1    5[BANK0 ] unsigned char 
  3339 ;;  j               1    4[BANK0 ] unsigned char 
  3340 ;;  i               1    3[BANK0 ] unsigned char 
  3341 ;; Return value:  Size  Location     Type
  3342 ;;		None               void
  3343 ;; Registers used:
  3344 ;;		wreg, status,2, status,0, pclath, cstack
  3345 ;; Tracked objects:
  3346 ;;		On entry : 0/0
  3347 ;;		On exit  : 0/0
  3348 ;;		Unchanged: 0/0
  3349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3350 ;;      Params:         0       1       0       0
  3351 ;;      Locals:         0       3       0       0
  3352 ;;      Temps:          0       2       0       0
  3353 ;;      Totals:         0       6       0       0
  3354 ;;Total ram usage:        6 bytes
  3355 ;; Hardware stack levels used:    1
  3356 ;; Hardware stack levels required when called:    4
  3357 ;; This function calls:
  3358 ;;		_getAD
  3359 ;; This function is called by:
  3360 ;;		_main
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           
  3365                           ;psect for function _getCDS_AD
  3366  0F2A                     _getCDS_AD:	
  3367                           
  3368                           ;incstack = 0
  3369                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3370                           ;getCDS_AD@channel1 stored from wreg
  3371  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  3372  0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  3373  0F2C  00E6               	movwf	getCDS_AD@channel1
  3374                           
  3375                           ;CDS_B1.c: 50: char i = 0, j = 0;
  3376  0F2D  01E4               	clrf	getCDS_AD@i
  3377  0F2E  01E5               	clrf	getCDS_AD@j
  3378                           
  3379                           ;CDS_B1.c: 51: if (_CDS.ADtoGO == 1) {
  3380  0F2F  1DA5               	btfss	__CDS,3
  3381  0F30  0008               	return
  3382                           
  3383                           ;CDS_B1.c: 52: _CDS.GO = 1;
  3384  0F31  14A5               	bsf	__CDS,1
  3385                           
  3386                           ;CDS_B1.c: 53: _CDS.ADRES = getAD(channel1, 0x70);
  3387  0F32  3070               	movlw	112
  3388  0F33  00E2               	movwf	??_getCDS_AD
  3389  0F34  0862               	movf	??_getCDS_AD,w
  3390  0F35  00F4               	movwf	getAD@adcon1
  3391  0F36  0866               	movf	getCDS_AD@channel1,w
  3392  0F37  158A  267E  158A   	fcall	_getAD
  3393  0F3A  1283               	bcf	3,5	;RP0=0, select bank0
  3394  0F3B  1303               	bcf	3,6	;RP1=0, select bank0
  3395  0F3C  00E3               	movwf	??_getCDS_AD+1
  3396  0F3D  0863               	movf	??_getCDS_AD+1,w
  3397  0F3E  00A9               	movwf	__CDS+4
  3398                           
  3399                           ;CDS_B1.c: 54: _CDS.VRAD = _CDS.ADRES;
  3400  0F3F  0829               	movf	__CDS+4,w
  3401  0F40  00E2               	movwf	??_getCDS_AD
  3402  0F41  0862               	movf	??_getCDS_AD,w
  3403  0F42  00A7               	movwf	__CDS+2
  3404                           
  3405                           ;CDS_B1.c: 55: _CDS.ADRES = getAD(channel2, 0x70);
  3406  0F43  3070               	movlw	112
  3407  0F44  00E2               	movwf	??_getCDS_AD
  3408  0F45  0862               	movf	??_getCDS_AD,w
  3409  0F46  00F4               	movwf	getAD@adcon1
  3410  0F47  0861               	movf	getCDS_AD@channel2,w
  3411  0F48  158A  267E         	fcall	_getAD
  3412  0F4A  1283               	bcf	3,5	;RP0=0, select bank0
  3413  0F4B  1303               	bcf	3,6	;RP1=0, select bank0
  3414  0F4C  00E3               	movwf	??_getCDS_AD+1
  3415  0F4D  0863               	movf	??_getCDS_AD+1,w
  3416  0F4E  00A9               	movwf	__CDS+4
  3417                           
  3418                           ;CDS_B1.c: 56: _CDS.SignalAD = _CDS.ADRES;
  3419  0F4F  0829               	movf	__CDS+4,w
  3420  0F50  00E2               	movwf	??_getCDS_AD
  3421  0F51  0862               	movf	??_getCDS_AD,w
  3422  0F52  00A8               	movwf	__CDS+3
  3423  0F53  0008               	return
  3424  0F54                     __end_of_getCDS_AD:	
  3425                           
  3426                           	psect	text10
  3427  0E7E                     __ptext10:	
  3428 ;; *************** function _getAD *****************
  3429 ;; Defined at:
  3430 ;;		line 426 in file "../src/MCU_B1.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;  adcon0          1    wreg     unsigned char 
  3433 ;;  adcon1          1    4[COMMON] unsigned char 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  adcon0          1    5[COMMON] unsigned char 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      unsigned char 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2, status,0, pclath, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3445 ;;      Params:         1       0       0       0
  3446 ;;      Locals:         1       0       0       0
  3447 ;;      Temps:          0       0       0       0
  3448 ;;      Totals:         2       0       0       0
  3449 ;;Total ram usage:        2 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    3
  3452 ;; This function calls:
  3453 ;;		_Timeout_Counter
  3454 ;;		_set_TimeoutCleared
  3455 ;; This function is called by:
  3456 ;;		_getCDS_AD
  3457 ;;		_getLoad_AD
  3458 ;;		_getTemp_AD
  3459 ;;		_getPIR_AD
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           
  3464                           ;psect for function _getAD
  3465  0E7E                     _getAD:	
  3466                           
  3467                           ;incstack = 0
  3468                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3469                           ;getAD@adcon0 stored from wreg
  3470  0E7E  00F5               	movwf	getAD@adcon0
  3471                           
  3472                           ;MCU_B1.c: 427: ADCON0 = adcon0;
  3473  0E7F  0875               	movf	getAD@adcon0,w
  3474  0E80  1283               	bcf	3,5	;RP0=0, select bank0
  3475  0E81  1303               	bcf	3,6	;RP1=0, select bank0
  3476  0E82  009F               	movwf	31	;volatile
  3477                           
  3478                           ;MCU_B1.c: 428: ADCON1 = adcon1;
  3479  0E83  0874               	movf	getAD@adcon1,w
  3480  0E84  1683               	bsf	3,5	;RP0=1, select bank1
  3481  0E85  1303               	bcf	3,6	;RP1=0, select bank1
  3482  0E86  009F               	movwf	31	;volatile
  3483                           
  3484                           ;MCU_B1.c: 429: GO_nDONE = 1;
  3485  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  3486  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  3487  0E89  149F               	bsf	31,1	;volatile
  3488                           
  3489                           ;MCU_B1.c: 430: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3490  0E8A  2E8E               	goto	l4090
  3491  0E8B                     l4088:	
  3492                           
  3493                           ;MCU_B1.c: 431: Timeout_Counter();
  3494  0E8B  158A  259A  158A   	fcall	_Timeout_Counter
  3495  0E8E                     l4090:	
  3496  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  3497  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  3498  0E90  1C9F               	btfss	31,1	;volatile
  3499  0E91  2E96               	goto	l4094
  3500  0E92  1683               	bsf	3,5	;RP0=1, select bank1
  3501  0E93  1303               	bcf	3,6	;RP1=0, select bank1
  3502  0E94  1D25               	btfss	(_myMain^(0+128)+5),2
  3503  0E95  2E8B               	goto	l4088
  3504  0E96                     l4094:	
  3505                           
  3506                           ;MCU_B1.c: 432: };
  3507                           ;MCU_B1.c: 433: set_TimeoutCleared();
  3508  0E96  158A  242C         	fcall	_set_TimeoutCleared
  3509                           
  3510                           ;MCU_B1.c: 434: return ADRES;
  3511  0E98  1283               	bcf	3,5	;RP0=0, select bank0
  3512  0E99  1303               	bcf	3,6	;RP1=0, select bank0
  3513  0E9A  081E               	movf	30,w	;volatile
  3514  0E9B  0008               	return
  3515  0E9C                     __end_of_getAD:	
  3516                           
  3517                           	psect	text11
  3518  0C2C                     __ptext11:	
  3519 ;; *************** function _set_TimeoutCleared *****************
  3520 ;; Defined at:
  3521 ;;		line 278 in file "../src/Main_B1.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;		None
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;		None
  3526 ;; Return value:  Size  Location     Type
  3527 ;;		None               void
  3528 ;; Registers used:
  3529 ;;		status,2
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3535 ;;      Params:         0       0       0       0
  3536 ;;      Locals:         0       0       0       0
  3537 ;;      Temps:          0       0       0       0
  3538 ;;      Totals:         0       0       0       0
  3539 ;;Total ram usage:        0 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    2
  3542 ;; This function calls:
  3543 ;;		Nothing
  3544 ;; This function is called by:
  3545 ;;		_getAD
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           
  3550                           ;psect for function _set_TimeoutCleared
  3551  0C2C                     _set_TimeoutCleared:	
  3552                           
  3553                           ;Main_B1.c: 279: myMain.Timeout = 0;
  3554                           
  3555                           ;incstack = 0
  3556                           ; Regs used in _set_TimeoutCleared: [status,2]
  3557  0C2C  1683               	bsf	3,5	;RP0=1, select bank1
  3558  0C2D  1303               	bcf	3,6	;RP1=0, select bank1
  3559  0C2E  1125               	bcf	(_myMain^(0+128)+5),2
  3560                           
  3561                           ;Main_B1.c: 280: myMain.Timeout_Counter = 0;
  3562  0C2F  01A6               	clrf	(_myMain^(0+128)+6)
  3563  0C30  01A7               	clrf	((_myMain+1)^(0+128)+6)
  3564  0C31  0008               	return
  3565  0C32                     __end_of_set_TimeoutCleared:	
  3566                           
  3567                           	psect	text12
  3568  0D9A                     __ptext12:	
  3569 ;; *************** function _Timeout_Counter *****************
  3570 ;; Defined at:
  3571 ;;		line 268 in file "../src/Main_B1.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;		None
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;		None
  3576 ;; Return value:  Size  Location     Type
  3577 ;;		None               void
  3578 ;; Registers used:
  3579 ;;		wreg, status,2
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3585 ;;      Params:         0       0       0       0
  3586 ;;      Locals:         0       0       0       0
  3587 ;;      Temps:          0       0       0       0
  3588 ;;      Totals:         0       0       0       0
  3589 ;;Total ram usage:        0 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    2
  3592 ;; This function calls:
  3593 ;;		Nothing
  3594 ;; This function is called by:
  3595 ;;		_getAD
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           
  3600                           ;psect for function _Timeout_Counter
  3601  0D9A                     _Timeout_Counter:	
  3602                           
  3603                           ;Main_B1.c: 269: myMain.Timeout_Counter++;
  3604                           
  3605                           ;incstack = 0
  3606                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3607  0D9A  3001               	movlw	1
  3608  0D9B  1683               	bsf	3,5	;RP0=1, select bank1
  3609  0D9C  1303               	bcf	3,6	;RP1=0, select bank1
  3610  0D9D  07A6               	addwf	(_myMain^(0+128)+6),f
  3611  0D9E  1803               	skipnc
  3612  0D9F  0AA7               	incf	((_myMain+1)^(0+128)+6),f
  3613  0DA0  3000               	movlw	0
  3614  0DA1  07A7               	addwf	((_myMain+1)^(0+128)+6),f
  3615                           
  3616                           ;Main_B1.c: 270: if (myMain.Timeout_Counter == 10000) {
  3617  0DA2  3027               	movlw	39
  3618  0DA3  0627               	xorwf	((_myMain+1)^(0+128)+6),w
  3619  0DA4  1D03               	skipz
  3620  0DA5  2DA8               	goto	u4045
  3621  0DA6  3010               	movlw	16
  3622  0DA7  0626               	xorwf	(_myMain^(0+128)+6),w
  3623  0DA8                     u4045:	
  3624  0DA8  1D03               	skipz
  3625  0DA9  0008               	return
  3626                           
  3627                           ;Main_B1.c: 271: myMain.Timeout_Counter = 0;
  3628  0DAA  01A6               	clrf	(_myMain^(0+128)+6)
  3629  0DAB  01A7               	clrf	((_myMain+1)^(0+128)+6)
  3630                           
  3631                           ;Main_B1.c: 272: myMain.Timeout = 1;
  3632  0DAC  1525               	bsf	(_myMain^(0+128)+5),2
  3633  0DAD  0008               	return
  3634  0DAE                     __end_of_Timeout_Counter:	
  3635                           
  3636                           	psect	text13
  3637  0D08                     __ptext13:	
  3638 ;; *************** function _WDT_Main *****************
  3639 ;; Defined at:
  3640 ;;		line 1019 in file "../src/MCU_B1.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;		None
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;		None
  3645 ;; Return value:  Size  Location     Type
  3646 ;;		None               void
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0, pclath, cstack
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3654 ;;      Params:         0       0       0       0
  3655 ;;      Locals:         0       0       0       0
  3656 ;;      Temps:          1       0       0       0
  3657 ;;      Totals:         1       0       0       0
  3658 ;;Total ram usage:        1 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    3
  3661 ;; This function calls:
  3662 ;;		_WDT_Clearing
  3663 ;; This function is called by:
  3664 ;;		_main
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           
  3669                           ;psect for function _WDT_Main
  3670  0D08                     _WDT_Main:	
  3671                           
  3672                           ;MCU_B1.c: 1020: if (WDT.Enable == 1) {
  3673                           
  3674                           ;incstack = 0
  3675                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3676  0D08  1C76               	btfss	_WDT,0
  3677  0D09  0008               	return
  3678                           
  3679                           ;MCU_B1.c: 1021: if (WDT.Timer-- > 0) {
  3680  0D0A  3001               	movlw	1
  3681  0D0B  02F7               	subwf	_WDT+1,f
  3682  0D0C  0877               	movf	_WDT+1,w
  3683  0D0D  3AFF               	xorlw	255
  3684  0D0E  1903               	skipnz
  3685  0D0F  0008               	return
  3686                           
  3687                           ;MCU_B1.c: 1022: WDT.Timer = 100;
  3688  0D10  3064               	movlw	100
  3689  0D11  00F4               	movwf	??_WDT_Main
  3690  0D12  0874               	movf	??_WDT_Main,w
  3691  0D13  00F7               	movwf	_WDT+1
  3692                           
  3693                           ;MCU_B1.c: 1023: WDT_Clearing();
  3694  0D14  118A  2002         	fcall	_WDT_Clearing
  3695  0D16  0008               	return
  3696  0D17                     __end_of_WDT_Main:	
  3697                           
  3698                           	psect	text14
  3699  0002                     __ptext14:	
  3700 ;; *************** function _WDT_Clearing *****************
  3701 ;; Defined at:
  3702 ;;		line 1029 in file "../src/MCU_B1.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;		None
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;		None
  3707 ;; Return value:  Size  Location     Type
  3708 ;;		None               void
  3709 ;; Registers used:
  3710 ;;		None
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3716 ;;      Params:         0       0       0       0
  3717 ;;      Locals:         0       0       0       0
  3718 ;;      Temps:          0       0       0       0
  3719 ;;      Totals:         0       0       0       0
  3720 ;;Total ram usage:        0 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    2
  3723 ;; This function calls:
  3724 ;;		Nothing
  3725 ;; This function is called by:
  3726 ;;		_WDT_Main
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           
  3731                           ;psect for function _WDT_Clearing
  3732  0002                     _WDT_Clearing:	
  3733                           
  3734                           ;incstack = 0
  3735                           ; Regs used in _WDT_Clearing: []
  3736  0002  0064               	clrwdt	;# 
  3737  0003  0008               	return
  3738  0004                     __end_of_WDT_Clearing:	
  3739                           
  3740                           	psect	text15
  3741  0C0E                     __ptext15:	
  3742 ;; *************** function _Temp_Main *****************
  3743 ;; Defined at:
  3744 ;;		line 64 in file "../src/OverTemperature_B1.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;		None
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;		None
  3749 ;; Return value:  Size  Location     Type
  3750 ;;		None               void
  3751 ;; Registers used:
  3752 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3753 ;; Tracked objects:
  3754 ;;		On entry : 0/0
  3755 ;;		On exit  : 0/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3758 ;;      Params:         0       0       0       0
  3759 ;;      Locals:         0       0       0       0
  3760 ;;      Temps:          0       0       0       0
  3761 ;;      Totals:         0       0       0       0
  3762 ;;Total ram usage:        0 bytes
  3763 ;; Hardware stack levels used:    1
  3764 ;; Hardware stack levels required when called:    6
  3765 ;; This function calls:
  3766 ;;		_setTemp_Main
  3767 ;; This function is called by:
  3768 ;;		_main
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           
  3773                           ;psect for function _Temp_Main
  3774  0C0E                     _Temp_Main:	
  3775                           
  3776                           ;OverTemperature_B1.c: 66: setTemp_Main();
  3777                           
  3778                           ;incstack = 0
  3779                           ; Regs used in _Temp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3780  0C0E  118A  2466         	fcall	_setTemp_Main
  3781  0C10  0008               	return
  3782  0C11                     __end_of_Temp_Main:	
  3783                           
  3784                           	psect	text16
  3785  0466                     __ptext16:	
  3786 ;; *************** function _setTemp_Main *****************
  3787 ;; Defined at:
  3788 ;;		line 71 in file "../src/OverTemperature_B1.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;		None
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;		None
  3793 ;; Return value:  Size  Location     Type
  3794 ;;		None               void
  3795 ;; Registers used:
  3796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3797 ;; Tracked objects:
  3798 ;;		On entry : 0/0
  3799 ;;		On exit  : 0/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3802 ;;      Params:         0       0       0       0
  3803 ;;      Locals:         0       0       0       0
  3804 ;;      Temps:          0       1       0       0
  3805 ;;      Totals:         0       1       0       0
  3806 ;;Total ram usage:        1 bytes
  3807 ;; Hardware stack levels used:    1
  3808 ;; Hardware stack levels required when called:    5
  3809 ;; This function calls:
  3810 ;;		___awdiv
  3811 ;;		_getMain_AD_Safe
  3812 ;;		_getMain_LightsStatus
  3813 ;;		_setOverTemp_Exceptions
  3814 ;; This function is called by:
  3815 ;;		_Temp_Main
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           
  3820                           ;psect for function _setTemp_Main
  3821  0466                     _setTemp_Main:	
  3822                           
  3823                           ;OverTemperature_B1.c: 72: if (Temp.Enable == 1) {
  3824                           
  3825                           ;incstack = 0
  3826                           ; Regs used in _setTemp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3827  0466  1283               	bcf	3,5	;RP0=0, select bank0
  3828  0467  1303               	bcf	3,6	;RP1=0, select bank0
  3829  0468  1C51               	btfss	_Temp,0
  3830  0469  0008               	return
  3831                           
  3832                           ;OverTemperature_B1.c: 73: if (Temp.ADtoGO == 0) {
  3833  046A  1951               	btfsc	_Temp,2
  3834  046B  2C8D               	goto	l4152
  3835                           
  3836                           ;OverTemperature_B1.c: 74: Temp.Time++;
  3837  046C  3001               	movlw	1
  3838  046D  07D2               	addwf	_Temp+1,f
  3839  046E  1803               	skipnc
  3840  046F  0AD3               	incf	_Temp+2,f
  3841  0470  3000               	movlw	0
  3842  0471  07D3               	addwf	_Temp+2,f
  3843                           
  3844                           ;OverTemperature_B1.c: 75: if (Temp.Time >= 500) {
  3845  0472  3001               	movlw	1
  3846  0473  0253               	subwf	_Temp+2,w
  3847  0474  30F4               	movlw	244
  3848  0475  1903               	skipnz
  3849  0476  0252               	subwf	_Temp+1,w
  3850  0477  1C03               	skipc
  3851  0478  0008               	return
  3852                           
  3853                           ;OverTemperature_B1.c: 76: if (getMain_AD_Safe() == 1) {
  3854  0479  158A  24B1  118A   	fcall	_getMain_AD_Safe
  3855  047C  3A01               	xorlw	1
  3856  047D  1D03               	skipz
  3857  047E  2C86               	goto	l4150
  3858                           
  3859                           ;OverTemperature_B1.c: 77: Temp.Time = 0;
  3860  047F  1283               	bcf	3,5	;RP0=0, select bank0
  3861  0480  1303               	bcf	3,6	;RP1=0, select bank0
  3862  0481  01D2               	clrf	_Temp+1
  3863  0482  01D3               	clrf	_Temp+2
  3864                           
  3865                           ;OverTemperature_B1.c: 78: Temp.ADtoGO = 1;
  3866  0483  1551               	bsf	_Temp,2
  3867                           
  3868                           ;OverTemperature_B1.c: 79: Temp.Safe = 0;
  3869  0484  1251               	bcf	_Temp,4
  3870                           
  3871                           ;OverTemperature_B1.c: 81: } else {
  3872  0485  0008               	return
  3873  0486                     l4150:	
  3874                           
  3875                           ;OverTemperature_B1.c: 82: Temp.Time = 500;
  3876  0486  30F4               	movlw	244
  3877  0487  1283               	bcf	3,5	;RP0=0, select bank0
  3878  0488  1303               	bcf	3,6	;RP1=0, select bank0
  3879  0489  00D2               	movwf	_Temp+1
  3880  048A  3001               	movlw	1
  3881  048B  00D3               	movwf	_Temp+2
  3882                           
  3883                           ;OverTemperature_B1.c: 83: }
  3884                           ;OverTemperature_B1.c: 84: }
  3885                           ;OverTemperature_B1.c: 85: } else {
  3886  048C  0008               	return
  3887  048D                     l4152:	
  3888                           
  3889                           ;OverTemperature_B1.c: 86: Temp.Time++;
  3890  048D  3001               	movlw	1
  3891  048E  07D2               	addwf	_Temp+1,f
  3892  048F  1803               	skipnc
  3893  0490  0AD3               	incf	_Temp+2,f
  3894  0491  3000               	movlw	0
  3895  0492  07D3               	addwf	_Temp+2,f
  3896                           
  3897                           ;OverTemperature_B1.c: 87: if (Temp.Time >= 5) {
  3898  0493  3000               	movlw	0
  3899  0494  0253               	subwf	_Temp+2,w
  3900  0495  3005               	movlw	5
  3901  0496  1903               	skipnz
  3902  0497  0252               	subwf	_Temp+1,w
  3903  0498  1C03               	skipc
  3904  0499  0008               	return
  3905                           
  3906                           ;OverTemperature_B1.c: 88: Temp.Time = 0;
  3907  049A  01D2               	clrf	_Temp+1
  3908  049B  01D3               	clrf	_Temp+2
  3909                           
  3910                           ;OverTemperature_B1.c: 89: Temp.ADtoGO = 0;
  3911  049C  1151               	bcf	_Temp,2
  3912                           
  3913                           ;OverTemperature_B1.c: 90: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3914  049D  3002               	movlw	2
  3915  049E  00E1               	movwf	___awdiv@divisor
  3916  049F  3000               	movlw	0
  3917  04A0  00E2               	movwf	___awdiv@divisor+1
  3918  04A1  0858               	movf	_Temp+7,w
  3919  04A2  0759               	addwf	_Temp+8,w
  3920  04A3  00E3               	movwf	___awdiv@dividend
  3921  04A4  01E4               	clrf	___awdiv@dividend+1
  3922  04A5  0DE4               	rlf	___awdiv@dividend+1,f
  3923  04A6  118A  25C3  118A   	fcall	___awdiv
  3924  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  3925  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  3926  04AB  0861               	movf	?___awdiv,w
  3927  04AC  00E9               	movwf	??_setTemp_Main
  3928  04AD  0869               	movf	??_setTemp_Main,w
  3929  04AE  00D7               	movwf	_Temp+6
  3930                           
  3931                           ;OverTemperature_B1.c: 92: if (getMain_LightsStatus() == 1) {
  3932  04AF  158A  2754  118A   	fcall	_getMain_LightsStatus
  3933  04B2  3A01               	xorlw	1
  3934  04B3  1D03               	skipz
  3935  04B4  2CBD               	goto	l4164
  3936                           
  3937                           ;OverTemperature_B1.c: 93: Temp.SafeValue = 190;
  3938  04B5  30BE               	movlw	190
  3939  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  3940  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  3941  04B8  00E9               	movwf	??_setTemp_Main
  3942  04B9  0869               	movf	??_setTemp_Main,w
  3943  04BA  00DB               	movwf	_Temp+10
  3944                           
  3945                           ;OverTemperature_B1.c: 94: Temp.DangerValue = 170;
  3946  04BB  30AA               	movlw	170
  3947  04BC  2CC4               	goto	L7
  3948  04BD                     l4164:	
  3949                           ;OverTemperature_B1.c: 95: } else {
  3950                           
  3951                           
  3952                           ;OverTemperature_B1.c: 96: Temp.SafeValue = 120;
  3953  04BD  3078               	movlw	120
  3954  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  3955  04BF  1303               	bcf	3,6	;RP1=0, select bank0
  3956  04C0  00E9               	movwf	??_setTemp_Main
  3957  04C1  0869               	movf	??_setTemp_Main,w
  3958  04C2  00DB               	movwf	_Temp+10
  3959                           
  3960                           ;OverTemperature_B1.c: 97: Temp.DangerValue = 100;
  3961  04C3  3064               	movlw	100
  3962  04C4                     L7:	
  3963  04C4  00E9               	movwf	??_setTemp_Main
  3964  04C5  0869               	movf	??_setTemp_Main,w
  3965  04C6  00DC               	movwf	_Temp+11
  3966                           
  3967                           ;OverTemperature_B1.c: 98: }
  3968                           ;OverTemperature_B1.c: 107: if (Temp.ERROR == 1) {
  3969  04C7  1CD1               	btfss	_Temp,1
  3970  04C8  2CDB               	goto	l4180
  3971                           
  3972                           ;OverTemperature_B1.c: 108: if (Temp.AD >= Temp.SafeValue) {
  3973  04C9  085B               	movf	_Temp+10,w
  3974  04CA  0257               	subwf	_Temp+6,w
  3975  04CB  1C03               	skipc
  3976  04CC  2CED               	goto	l4190
  3977                           
  3978                           ;OverTemperature_B1.c: 109: Temp.Count++;
  3979  04CD  3001               	movlw	1
  3980  04CE  00E9               	movwf	??_setTemp_Main
  3981  04CF  0869               	movf	??_setTemp_Main,w
  3982  04D0  07D4               	addwf	_Temp+3,f
  3983                           
  3984                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  3985  04D1  3003               	movlw	3
  3986  04D2  0254               	subwf	_Temp+3,w
  3987  04D3  1C03               	skipc
  3988  04D4  2CF0               	goto	l4192
  3989                           
  3990                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  3991  04D5  01D4               	clrf	_Temp+3
  3992                           
  3993                           ;OverTemperature_B1.c: 112: setOverTemp_Exceptions(0);
  3994  04D6  3000               	movlw	0
  3995  04D7  158A  260A  118A   	fcall	_setOverTemp_Exceptions
  3996                           
  3997                           ;OverTemperature_B1.c: 113: }
  3998                           ;OverTemperature_B1.c: 114: } else {
  3999  04DA  2CF0               	goto	l4192
  4000  04DB                     l4180:	
  4001                           ;OverTemperature_B1.c: 116: }
  4002                           ;OverTemperature_B1.c: 117: } else {
  4003                           
  4004                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  4005                           
  4006                           
  4007                           ;OverTemperature_B1.c: 118: if (Temp.AD <= Temp.DangerValue) {
  4008  04DB  0857               	movf	_Temp+6,w
  4009  04DC  025C               	subwf	_Temp+11,w
  4010  04DD  1C03               	skipc
  4011  04DE  2CED               	goto	l4190
  4012                           
  4013                           ;OverTemperature_B1.c: 119: Temp.Count++;
  4014  04DF  3001               	movlw	1
  4015  04E0  00E9               	movwf	??_setTemp_Main
  4016  04E1  0869               	movf	??_setTemp_Main,w
  4017  04E2  07D4               	addwf	_Temp+3,f
  4018                           
  4019                           ;OverTemperature_B1.c: 120: if (Temp.Count >= 3) {
  4020  04E3  3003               	movlw	3
  4021  04E4  0254               	subwf	_Temp+3,w
  4022  04E5  1C03               	skipc
  4023  04E6  2CF0               	goto	l4192
  4024                           
  4025                           ;OverTemperature_B1.c: 121: Temp.Count = 0;
  4026  04E7  01D4               	clrf	_Temp+3
  4027                           
  4028                           ;OverTemperature_B1.c: 122: setOverTemp_Exceptions(1);
  4029  04E8  3001               	movlw	1
  4030  04E9  158A  260A  118A   	fcall	_setOverTemp_Exceptions
  4031                           
  4032                           ;OverTemperature_B1.c: 123: }
  4033                           ;OverTemperature_B1.c: 124: } else {
  4034  04EC  2CF0               	goto	l4192
  4035  04ED                     l4190:	
  4036                           
  4037                           ;OverTemperature_B1.c: 125: Temp.Count = 0;
  4038  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  4039  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  4040  04EF  01D4               	clrf	_Temp+3
  4041  04F0                     l4192:	
  4042                           
  4043                           ;OverTemperature_B1.c: 126: }
  4044                           ;OverTemperature_B1.c: 127: }
  4045                           ;OverTemperature_B1.c: 128: if (Temp.ERROR == 0) {
  4046  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  4047  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  4048  04F2  1CD1               	btfss	_Temp,1
  4049                           
  4050                           ;OverTemperature_B1.c: 129: Temp.Safe = 1;
  4051  04F3  1651               	bsf	_Temp,4
  4052                           
  4053                           ;OverTemperature_B1.c: 130: }
  4054                           ;OverTemperature_B1.c: 131: ;;
  4055                           ;OverTemperature_B1.c: 132: ;;
  4056                           ;OverTemperature_B1.c: 135: Temp.ADH[0] = 0;
  4057  04F4  01D8               	clrf	_Temp+7
  4058                           
  4059                           ;OverTemperature_B1.c: 136: Temp.ADH[1] = 0;
  4060  04F5  01D9               	clrf	_Temp+8
  4061  04F6  0008               	return
  4062  04F7                     __end_of_setTemp_Main:	
  4063                           
  4064                           	psect	text17
  4065  0E0A                     __ptext17:	
  4066 ;; *************** function _setOverTemp_Exceptions *****************
  4067 ;; Defined at:
  4068 ;;		line 143 in file "../src/OverTemperature_B1.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;  command         1    wreg     unsigned char 
  4071 ;; Auto vars:     Size  Location     Type
  4072 ;;  command         1    4[BANK0 ] unsigned char 
  4073 ;;  i               1    3[BANK0 ] unsigned char 
  4074 ;; Return value:  Size  Location     Type
  4075 ;;		None               void
  4076 ;; Registers used:
  4077 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4083 ;;      Params:         0       0       0       0
  4084 ;;      Locals:         0       2       0       0
  4085 ;;      Temps:          0       1       0       0
  4086 ;;      Totals:         0       3       0       0
  4087 ;;Total ram usage:        3 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    4
  4090 ;; This function calls:
  4091 ;;		_setLED
  4092 ;; This function is called by:
  4093 ;;		_setTemp_Main
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           
  4098                           ;psect for function _setOverTemp_Exceptions
  4099  0E0A                     _setOverTemp_Exceptions:	
  4100                           
  4101                           ;incstack = 0
  4102                           ; Regs used in _setOverTemp_Exceptions: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4103                           ;setOverTemp_Exceptions@command stored from wreg
  4104  0E0A  1283               	bcf	3,5	;RP0=0, select bank0
  4105  0E0B  1303               	bcf	3,6	;RP1=0, select bank0
  4106  0E0C  00E5               	movwf	setOverTemp_Exceptions@command
  4107                           
  4108                           ;OverTemperature_B1.c: 144: char i = command == 1 ? 0 : 1;
  4109  0E0D  0865               	movf	setOverTemp_Exceptions@command,w
  4110  0E0E  3A01               	xorlw	1
  4111  0E0F  3000               	movlw	0
  4112  0E10  1D03               	skipz
  4113  0E11  3001               	movlw	1
  4114  0E12  00E3               	movwf	??_setOverTemp_Exceptions
  4115  0E13  0863               	movf	??_setOverTemp_Exceptions,w
  4116  0E14  00E4               	movwf	setOverTemp_Exceptions@i
  4117                           
  4118                           ;OverTemperature_B1.c: 145: Temp.ERROR = command;
  4119  0E15  0865               	movf	setOverTemp_Exceptions@command,w
  4120  0E16  10D1               	bcf	_Temp,1
  4121  0E17  1D03               	skipz
  4122  0E18  14D1               	bsf	_Temp,1
  4123                           
  4124                           ;OverTemperature_B1.c: 147: if (command == 1) {
  4125  0E19  0864               	movf	setOverTemp_Exceptions@i,w
  4126  0E1A  1251               	bcf	_Temp,4
  4127  0E1B  1D03               	skipz
  4128  0E1C  1651               	bsf	_Temp,4
  4129                           
  4130                           ;OverTemperature_B1.c: 154: }
  4131                           ;OverTemperature_B1.c: 158: setLED(2, command + 10);
  4132                           
  4133                           ;OverTemperature_B1.c: 153: ;;
  4134                           
  4135                           ;OverTemperature_B1.c: 148: ;;
  4136                           ;OverTemperature_B1.c: 152: } else if (command == 0) {
  4137  0E1D  0865               	movf	setOverTemp_Exceptions@command,w
  4138  0E1E  3E0A               	addlw	10
  4139  0E1F  00E3               	movwf	??_setOverTemp_Exceptions
  4140  0E20  0863               	movf	??_setOverTemp_Exceptions,w
  4141  0E21  00E1               	movwf	setLED@command
  4142  0E22  3002               	movlw	2
  4143  0E23  118A  2620         	fcall	_setLED
  4144  0E25  0008               	return
  4145  0E26                     __end_of_setOverTemp_Exceptions:	
  4146                           
  4147                           	psect	text18
  4148  0F54                     __ptext18:	
  4149 ;; *************** function _getMain_LightsStatus *****************
  4150 ;; Defined at:
  4151 ;;		line 315 in file "../src/Main_B1.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;		None
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  i               2    2[BANK0 ] int 
  4156 ;;  result          1    4[BANK0 ] unsigned char 
  4157 ;;  count           1    1[BANK0 ] unsigned char 
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  1    wreg      unsigned char 
  4160 ;; Registers used:
  4161 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4167 ;;      Params:         0       0       0       0
  4168 ;;      Locals:         0       4       0       0
  4169 ;;      Temps:          0       1       0       0
  4170 ;;      Totals:         0       5       0       0
  4171 ;;Total ram usage:        5 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    3
  4174 ;; This function calls:
  4175 ;;		_LightsPointSelect
  4176 ;; This function is called by:
  4177 ;;		_setTemp_Main
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           
  4182                           ;psect for function _getMain_LightsStatus
  4183  0F54                     _getMain_LightsStatus:	
  4184                           
  4185                           ;Main_B1.c: 316: char result = 1, count = 0;
  4186                           
  4187                           ;incstack = 0
  4188                           ; Regs used in _getMain_LightsStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4189  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  4190  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  4191  0F56  01E5               	clrf	getMain_LightsStatus@result
  4192  0F57  0AE5               	incf	getMain_LightsStatus@result,f
  4193  0F58  01E2               	clrf	getMain_LightsStatus@count
  4194                           
  4195                           ;Main_B1.c: 319: count = 1;
  4196  0F59  01E2               	clrf	getMain_LightsStatus@count
  4197  0F5A  0AE2               	incf	getMain_LightsStatus@count,f
  4198                           
  4199                           ;Main_B1.c: 327: for (int i = 0; i < count; i++) {
  4200  0F5B  01E3               	clrf	getMain_LightsStatus@i
  4201  0F5C  01E4               	clrf	getMain_LightsStatus@i+1
  4202  0F5D                     l3990:	
  4203  0F5D  0864               	movf	getMain_LightsStatus@i+1,w
  4204  0F5E  3A80               	xorlw	128
  4205  0F5F  00E1               	movwf	??_getMain_LightsStatus
  4206  0F60  3080               	movlw	128
  4207  0F61  0261               	subwf	??_getMain_LightsStatus,w
  4208  0F62  1D03               	skipz
  4209  0F63  2F66               	goto	u4065
  4210  0F64  0862               	movf	getMain_LightsStatus@count,w
  4211  0F65  0263               	subwf	getMain_LightsStatus@i,w
  4212  0F66                     u4065:	
  4213  0F66  1803               	btfsc	3,0
  4214  0F67  2F83               	goto	l3992
  4215                           
  4216                           ;Main_B1.c: 328: if (result == 1) {
  4217  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  4218  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  4219  0F6A  0865               	movf	getMain_LightsStatus@result,w
  4220  0F6B  3A01               	xorlw	1
  4221  0F6C  1D03               	skipz
  4222  0F6D  2F7C               	goto	l3988
  4223                           
  4224                           ;Main_B1.c: 329: LightsPointSelect(i + 1);
  4225  0F6E  0863               	movf	getMain_LightsStatus@i,w
  4226  0F6F  3E01               	addlw	1
  4227  0F70  158A  248D  158A   	fcall	_LightsPointSelect
  4228                           
  4229                           ;Main_B1.c: 330: result = Lights->Status == 1 ? 1 : 0;
  4230  0F73  1283               	bcf	3,5	;RP0=0, select bank0
  4231  0F74  1303               	bcf	3,6	;RP1=0, select bank0
  4232  0F75  082D               	movf	_Lights,w
  4233  0F76  0084               	movwf	4
  4234  0F77  3000               	movlw	0
  4235  0F78  1383               	bcf	3,7	;select IRP bank0
  4236  0F79  1900               	btfsc	0,2
  4237  0F7A  3001               	movlw	1
  4238  0F7B  00E5               	movwf	getMain_LightsStatus@result
  4239  0F7C                     l3988:	
  4240  0F7C  3001               	movlw	1
  4241  0F7D  07E3               	addwf	getMain_LightsStatus@i,f
  4242  0F7E  1803               	skipnc
  4243  0F7F  0AE4               	incf	getMain_LightsStatus@i+1,f
  4244  0F80  3000               	movlw	0
  4245  0F81  07E4               	addwf	getMain_LightsStatus@i+1,f
  4246  0F82  2F5D               	goto	l3990
  4247  0F83                     l3992:	
  4248                           
  4249                           ;Main_B1.c: 331: }
  4250                           ;Main_B1.c: 332: }
  4251                           ;Main_B1.c: 335: return result;
  4252  0F83  1283               	bcf	3,5	;RP0=0, select bank0
  4253  0F84  1303               	bcf	3,6	;RP1=0, select bank0
  4254  0F85  0865               	movf	getMain_LightsStatus@result,w
  4255  0F86  0008               	return
  4256  0F87                     __end_of_getMain_LightsStatus:	
  4257                           
  4258                           	psect	text19
  4259  05C3                     __ptext19:	
  4260 ;; *************** function ___awdiv *****************
  4261 ;; Defined at:
  4262 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;  divisor         2    0[BANK0 ] int 
  4265 ;;  dividend        2    2[BANK0 ] int 
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;  quotient        2    6[BANK0 ] int 
  4268 ;;  sign            1    5[BANK0 ] unsigned char 
  4269 ;;  counter         1    4[BANK0 ] unsigned char 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  2    0[BANK0 ] int 
  4272 ;; Registers used:
  4273 ;;		wreg, status,2, status,0
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4279 ;;      Params:         0       4       0       0
  4280 ;;      Locals:         0       4       0       0
  4281 ;;      Temps:          1       0       0       0
  4282 ;;      Totals:         1       8       0       0
  4283 ;;Total ram usage:        9 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    2
  4286 ;; This function calls:
  4287 ;;		Nothing
  4288 ;; This function is called by:
  4289 ;;		_setTemp_Main
  4290 ;;		_getPIR_AD
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           
  4295                           ;psect for function ___awdiv
  4296  05C3                     ___awdiv:	
  4297                           
  4298                           ;incstack = 0
  4299                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4300  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  4301  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  4302  05C5  01E6               	clrf	___awdiv@sign
  4303  05C6  1FE2               	btfss	___awdiv@divisor+1,7
  4304  05C7  2DCF               	goto	l4048
  4305  05C8  09E1               	comf	___awdiv@divisor,f
  4306  05C9  09E2               	comf	___awdiv@divisor+1,f
  4307  05CA  0AE1               	incf	___awdiv@divisor,f
  4308  05CB  1903               	skipnz
  4309  05CC  0AE2               	incf	___awdiv@divisor+1,f
  4310  05CD  01E6               	clrf	___awdiv@sign
  4311  05CE  0AE6               	incf	___awdiv@sign,f
  4312  05CF                     l4048:	
  4313  05CF  1FE4               	btfss	___awdiv@dividend+1,7
  4314  05D0  2DDA               	goto	l4054
  4315  05D1  09E3               	comf	___awdiv@dividend,f
  4316  05D2  09E4               	comf	___awdiv@dividend+1,f
  4317  05D3  0AE3               	incf	___awdiv@dividend,f
  4318  05D4  1903               	skipnz
  4319  05D5  0AE4               	incf	___awdiv@dividend+1,f
  4320  05D6  3001               	movlw	1
  4321  05D7  00F4               	movwf	??___awdiv
  4322  05D8  0874               	movf	??___awdiv,w
  4323  05D9  06E6               	xorwf	___awdiv@sign,f
  4324  05DA                     l4054:	
  4325  05DA  01E7               	clrf	___awdiv@quotient
  4326  05DB  01E8               	clrf	___awdiv@quotient+1
  4327  05DC  0862               	movf	___awdiv@divisor+1,w
  4328  05DD  0461               	iorwf	___awdiv@divisor,w
  4329  05DE  1903               	skipnz
  4330  05DF  2E11               	goto	l4076
  4331  05E0  01E5               	clrf	___awdiv@counter
  4332  05E1  0AE5               	incf	___awdiv@counter,f
  4333  05E2                     l4064:	
  4334  05E2  1BE2               	btfsc	___awdiv@divisor+1,7
  4335  05E3  2DF0               	goto	l4066
  4336  05E4  3001               	movlw	1
  4337  05E5                     u4145:	
  4338  05E5  1003               	clrc
  4339  05E6  0DE1               	rlf	___awdiv@divisor,f
  4340  05E7  0DE2               	rlf	___awdiv@divisor+1,f
  4341  05E8  3EFF               	addlw	-1
  4342  05E9  1D03               	skipz
  4343  05EA  2DE5               	goto	u4145
  4344  05EB  3001               	movlw	1
  4345  05EC  00F4               	movwf	??___awdiv
  4346  05ED  0874               	movf	??___awdiv,w
  4347  05EE  07E5               	addwf	___awdiv@counter,f
  4348  05EF  2DE2               	goto	l4064
  4349  05F0                     l4066:	
  4350  05F0  3001               	movlw	1
  4351  05F1                     u4165:	
  4352  05F1  1003               	clrc
  4353  05F2  0DE7               	rlf	___awdiv@quotient,f
  4354  05F3  0DE8               	rlf	___awdiv@quotient+1,f
  4355  05F4  3EFF               	addlw	-1
  4356  05F5  1D03               	skipz
  4357  05F6  2DF1               	goto	u4165
  4358  05F7  0862               	movf	___awdiv@divisor+1,w
  4359  05F8  0264               	subwf	___awdiv@dividend+1,w
  4360  05F9  1D03               	skipz
  4361  05FA  2DFD               	goto	u4175
  4362  05FB  0861               	movf	___awdiv@divisor,w
  4363  05FC  0263               	subwf	___awdiv@dividend,w
  4364  05FD                     u4175:	
  4365  05FD  1C03               	skipc
  4366  05FE  2E06               	goto	l4072
  4367  05FF  0861               	movf	___awdiv@divisor,w
  4368  0600  02E3               	subwf	___awdiv@dividend,f
  4369  0601  0862               	movf	___awdiv@divisor+1,w
  4370  0602  1C03               	skipc
  4371  0603  03E4               	decf	___awdiv@dividend+1,f
  4372  0604  02E4               	subwf	___awdiv@dividend+1,f
  4373  0605  1467               	bsf	___awdiv@quotient,0
  4374  0606                     l4072:	
  4375  0606  3001               	movlw	1
  4376  0607                     u4185:	
  4377  0607  1003               	clrc
  4378  0608  0CE2               	rrf	___awdiv@divisor+1,f
  4379  0609  0CE1               	rrf	___awdiv@divisor,f
  4380  060A  3EFF               	addlw	-1
  4381  060B  1D03               	skipz
  4382  060C  2E07               	goto	u4185
  4383  060D  3001               	movlw	1
  4384  060E  02E5               	subwf	___awdiv@counter,f
  4385  060F  1D03               	btfss	3,2
  4386  0610  2DF0               	goto	l4066
  4387  0611                     l4076:	
  4388  0611  0866               	movf	___awdiv@sign,w
  4389  0612  1903               	btfsc	3,2
  4390  0613  2E19               	goto	l4080
  4391  0614  09E7               	comf	___awdiv@quotient,f
  4392  0615  09E8               	comf	___awdiv@quotient+1,f
  4393  0616  0AE7               	incf	___awdiv@quotient,f
  4394  0617  1903               	skipnz
  4395  0618  0AE8               	incf	___awdiv@quotient+1,f
  4396  0619                     l4080:	
  4397  0619  0868               	movf	___awdiv@quotient+1,w
  4398  061A  01E2               	clrf	?___awdiv+1
  4399  061B  07E2               	addwf	?___awdiv+1,f
  4400  061C  0867               	movf	___awdiv@quotient,w
  4401  061D  01E1               	clrf	?___awdiv
  4402  061E  07E1               	addwf	?___awdiv,f
  4403  061F  0008               	return
  4404  0620                     __end_of___awdiv:	
  4405                           
  4406                           	psect	text20
  4407  0C0B                     __ptext20:	
  4408 ;; *************** function _Temp_Initialization *****************
  4409 ;; Defined at:
  4410 ;;		line 9 in file "../src/OverTemperature_B1.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;		None
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;		None
  4415 ;; Return value:  Size  Location     Type
  4416 ;;		None               void
  4417 ;; Registers used:
  4418 ;;		status,2, status,0, pclath, cstack
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4424 ;;      Params:         0       0       0       0
  4425 ;;      Locals:         0       0       0       0
  4426 ;;      Temps:          0       0       0       0
  4427 ;;      Totals:         0       0       0       0
  4428 ;;Total ram usage:        0 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; Hardware stack levels required when called:    3
  4431 ;; This function calls:
  4432 ;;		_setTemp_Initialization
  4433 ;; This function is called by:
  4434 ;;		_main
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           
  4439                           ;psect for function _Temp_Initialization
  4440  0C0B                     _Temp_Initialization:	
  4441                           
  4442                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  4443                           
  4444                           ;incstack = 0
  4445                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4446  0C0B  158A  241D         	fcall	_setTemp_Initialization
  4447  0C0D  0008               	return
  4448  0C0E                     __end_of_Temp_Initialization:	
  4449                           
  4450                           	psect	text21
  4451  0C1D                     __ptext21:	
  4452 ;; *************** function _setTemp_Initialization *****************
  4453 ;; Defined at:
  4454 ;;		line 59 in file "../src/OverTemperature_B1.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;		None
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;		None
  4459 ;; Return value:  Size  Location     Type
  4460 ;;		None               void
  4461 ;; Registers used:
  4462 ;;		None
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4468 ;;      Params:         0       0       0       0
  4469 ;;      Locals:         0       0       0       0
  4470 ;;      Temps:          0       0       0       0
  4471 ;;      Totals:         0       0       0       0
  4472 ;;Total ram usage:        0 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    2
  4475 ;; This function calls:
  4476 ;;		Nothing
  4477 ;; This function is called by:
  4478 ;;		_Temp_Initialization
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           
  4483                           ;psect for function _setTemp_Initialization
  4484  0C1D                     _setTemp_Initialization:	
  4485                           
  4486                           ;OverTemperature_B1.c: 60: Temp.Safe = 1;
  4487                           
  4488                           ;incstack = 0
  4489                           ; Regs used in _setTemp_Initialization: []
  4490  0C1D  1283               	bcf	3,5	;RP0=0, select bank0
  4491  0C1E  1303               	bcf	3,6	;RP1=0, select bank0
  4492  0C1F  1651               	bsf	_Temp,4
  4493  0C20  0008               	return
  4494  0C21                     __end_of_setTemp_Initialization:	
  4495                           
  4496                           	psect	text22
  4497  0C08                     __ptext22:	
  4498 ;; *************** function _SYSC_Main *****************
  4499 ;; Defined at:
  4500 ;;		line 17 in file "../src/SYSC_B1.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;		None
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;		None
  4505 ;; Return value:  Size  Location     Type
  4506 ;;		None               void
  4507 ;; Registers used:
  4508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4514 ;;      Params:         0       0       0       0
  4515 ;;      Locals:         0       0       0       0
  4516 ;;      Temps:          0       0       0       0
  4517 ;;      Totals:         0       0       0       0
  4518 ;;Total ram usage:        0 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    5
  4521 ;; This function calls:
  4522 ;;		_setSYSC_Main
  4523 ;; This function is called by:
  4524 ;;		_main
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528                           
  4529                           ;psect for function _SYSC_Main
  4530  0C08                     _SYSC_Main:	
  4531                           
  4532                           ;SYSC_B1.c: 19: setSYSC_Main();
  4533                           
  4534                           ;incstack = 0
  4535                           ; Regs used in _SYSC_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4536  0C08  118A  255F         	fcall	_setSYSC_Main
  4537  0C0A  0008               	return
  4538  0C0B                     __end_of_SYSC_Main:	
  4539                           
  4540                           	psect	text23
  4541  055F                     __ptext23:	
  4542 ;; *************** function _setSYSC_Main *****************
  4543 ;; Defined at:
  4544 ;;		line 23 in file "../src/SYSC_B1.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;		None
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;		None
  4549 ;; Return value:  Size  Location     Type
  4550 ;;		None               void
  4551 ;; Registers used:
  4552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4558 ;;      Params:         0       0       0       0
  4559 ;;      Locals:         0       0       0       0
  4560 ;;      Temps:          0       1       0       0
  4561 ;;      Totals:         0       1       0       0
  4562 ;;Total ram usage:        1 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:    4
  4565 ;; This function calls:
  4566 ;;		_setLED
  4567 ;; This function is called by:
  4568 ;;		_SYSC_Main
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           
  4573                           ;psect for function _setSYSC_Main
  4574  055F                     _setSYSC_Main:	
  4575                           
  4576                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4577                           
  4578                           ;incstack = 0
  4579                           ; Regs used in _setSYSC_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4580  055F  1283               	bcf	3,5	;RP0=0, select bank0
  4581  0560  1303               	bcf	3,6	;RP1=0, select bank0
  4582  0561  1C20               	btfss	_SYSC,0
  4583  0562  0008               	return
  4584                           
  4585                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4586  0563  18A0               	btfsc	_SYSC,1
  4587  0564  2D8E               	goto	l4222
  4588                           
  4589                           ;SYSC_B1.c: 28: SYSC.Timer++;
  4590  0565  3001               	movlw	1
  4591  0566  07A1               	addwf	_SYSC+1,f
  4592  0567  1803               	skipnc
  4593  0568  0AA2               	incf	_SYSC+2,f
  4594  0569  3000               	movlw	0
  4595  056A  07A2               	addwf	_SYSC+2,f
  4596                           
  4597                           ;SYSC_B1.c: 29: if (SYSC.Timer >= 16)
  4598  056B  3000               	movlw	0
  4599  056C  0222               	subwf	_SYSC+2,w
  4600  056D  3010               	movlw	16
  4601  056E  1903               	skipnz
  4602  056F  0221               	subwf	_SYSC+1,w
  4603  0570  1C03               	skipc
  4604  0571  0008               	return
  4605                           
  4606                           ;SYSC_B1.c: 30: {
  4607                           ;SYSC_B1.c: 31: SYSC.Timer = 0;
  4608  0572  01A1               	clrf	_SYSC+1
  4609  0573  01A2               	clrf	_SYSC+2
  4610                           
  4611                           ;SYSC_B1.c: 32: SYSC.ERROR = 1;
  4612  0574  14A0               	bsf	_SYSC,1
  4613                           
  4614                           ;SYSC_B1.c: 33: setLED(1, 0);
  4615  0575  01E1               	clrf	setLED@command
  4616  0576  3001               	movlw	1
  4617  0577  118A  2620  118A   	fcall	_setLED
  4618                           
  4619                           ;SYSC_B1.c: 34: setLED(2, 11);
  4620  057A  300B               	movlw	11
  4621  057B  1283               	bcf	3,5	;RP0=0, select bank0
  4622  057C  1303               	bcf	3,6	;RP1=0, select bank0
  4623  057D  00E3               	movwf	??_setSYSC_Main
  4624  057E  0863               	movf	??_setSYSC_Main,w
  4625  057F  00E1               	movwf	setLED@command
  4626  0580  3002               	movlw	2
  4627  0581  118A  2620  118A   	fcall	_setLED
  4628                           
  4629                           ;SYSC_B1.c: 35: setLED(99, 11);
  4630  0584  300B               	movlw	11
  4631  0585  1283               	bcf	3,5	;RP0=0, select bank0
  4632  0586  1303               	bcf	3,6	;RP1=0, select bank0
  4633  0587  00E3               	movwf	??_setSYSC_Main
  4634  0588  0863               	movf	??_setSYSC_Main,w
  4635  0589  00E1               	movwf	setLED@command
  4636  058A  3063               	movlw	99
  4637  058B  118A  2620         	fcall	_setLED
  4638                           
  4639                           ;SYSC_B1.c: 36: }
  4640                           ;SYSC_B1.c: 37: } else {
  4641  058D  0008               	return
  4642  058E                     l4222:	
  4643                           
  4644                           ;SYSC_B1.c: 38: SYSC.Timer++;
  4645  058E  3001               	movlw	1
  4646  058F  1283               	bcf	3,5	;RP0=0, select bank0
  4647  0590  1303               	bcf	3,6	;RP1=0, select bank0
  4648  0591  07A1               	addwf	_SYSC+1,f
  4649  0592  1803               	skipnc
  4650  0593  0AA2               	incf	_SYSC+2,f
  4651  0594  3000               	movlw	0
  4652  0595  07A2               	addwf	_SYSC+2,f
  4653                           
  4654                           ;SYSC_B1.c: 39: if (SYSC.Timer == 50) {
  4655  0596  3032               	movlw	50
  4656  0597  0621               	xorwf	_SYSC+1,w
  4657  0598  0422               	iorwf	_SYSC+2,w
  4658  0599  1D03               	skipz
  4659  059A  2DA0               	goto	l4226
  4660                           
  4661                           ;SYSC_B1.c: 40: SYSC.Timer = 0;
  4662  059B  01A1               	clrf	_SYSC+1
  4663  059C  01A2               	clrf	_SYSC+2
  4664                           
  4665                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4666  059D  01A3               	clrf	_SYSC+3
  4667  059E  01A4               	clrf	_SYSC+4
  4668                           
  4669                           ;SYSC_B1.c: 42: } else {
  4670  059F  0008               	return
  4671  05A0                     l4226:	
  4672                           
  4673                           ;SYSC_B1.c: 43: SYSC.Counter++;
  4674  05A0  3001               	movlw	1
  4675  05A1  07A3               	addwf	_SYSC+3,f
  4676  05A2  1803               	skipnc
  4677  05A3  0AA4               	incf	_SYSC+4,f
  4678  05A4  3000               	movlw	0
  4679  05A5  07A4               	addwf	_SYSC+4,f
  4680                           
  4681                           ;SYSC_B1.c: 44: if (SYSC.Counter == 1000) {
  4682  05A6  3003               	movlw	3
  4683  05A7  0624               	xorwf	_SYSC+4,w
  4684  05A8  1D03               	skipz
  4685  05A9  2DAC               	goto	u4445
  4686  05AA  30E8               	movlw	232
  4687  05AB  0623               	xorwf	_SYSC+3,w
  4688  05AC                     u4445:	
  4689  05AC  1D03               	skipz
  4690  05AD  0008               	return
  4691                           
  4692                           ;SYSC_B1.c: 45: SYSC.Counter = 0;
  4693  05AE  01A3               	clrf	_SYSC+3
  4694  05AF  01A4               	clrf	_SYSC+4
  4695                           
  4696                           ;SYSC_B1.c: 46: SYSC.ERROR = 0;
  4697  05B0  10A0               	bcf	_SYSC,1
  4698                           
  4699                           ;SYSC_B1.c: 47: setLED(2, 10);
  4700  05B1  300A               	movlw	10
  4701  05B2  00E3               	movwf	??_setSYSC_Main
  4702  05B3  0863               	movf	??_setSYSC_Main,w
  4703  05B4  00E1               	movwf	setLED@command
  4704  05B5  3002               	movlw	2
  4705  05B6  118A  2620  118A   	fcall	_setLED
  4706                           
  4707                           ;SYSC_B1.c: 48: setLED(99, 10);
  4708  05B9  300A               	movlw	10
  4709  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  4710  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  4711  05BC  00E3               	movwf	??_setSYSC_Main
  4712  05BD  0863               	movf	??_setSYSC_Main,w
  4713  05BE  00E1               	movwf	setLED@command
  4714  05BF  3063               	movlw	99
  4715  05C0  118A  2620         	fcall	_setLED
  4716  05C2  0008               	return
  4717  05C3                     __end_of_setSYSC_Main:	
  4718                           
  4719                           	psect	text24
  4720  0C05                     __ptext24:	
  4721 ;; *************** function _SYSC_Initialization *****************
  4722 ;; Defined at:
  4723 ;;		line 7 in file "../src/SYSC_B1.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;		None               void
  4730 ;; Registers used:
  4731 ;;		status,2, status,0, pclath, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4737 ;;      Params:         0       0       0       0
  4738 ;;      Locals:         0       0       0       0
  4739 ;;      Temps:          0       0       0       0
  4740 ;;      Totals:         0       0       0       0
  4741 ;;Total ram usage:        0 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    3
  4744 ;; This function calls:
  4745 ;;		_setSYSC_Initialization
  4746 ;; This function is called by:
  4747 ;;		_main
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           
  4752                           ;psect for function _SYSC_Initialization
  4753  0C05                     _SYSC_Initialization:	
  4754                           
  4755                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4756                           
  4757                           ;incstack = 0
  4758                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4759  0C05  158A  2419         	fcall	_setSYSC_Initialization
  4760  0C07  0008               	return
  4761  0C08                     __end_of_SYSC_Initialization:	
  4762                           
  4763                           	psect	text25
  4764  0C19                     __ptext25:	
  4765 ;; *************** function _setSYSC_Initialization *****************
  4766 ;; Defined at:
  4767 ;;		line 13 in file "../src/SYSC_B1.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;		None
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;		None
  4772 ;; Return value:  Size  Location     Type
  4773 ;;		None               void
  4774 ;; Registers used:
  4775 ;;		None
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4781 ;;      Params:         0       0       0       0
  4782 ;;      Locals:         0       0       0       0
  4783 ;;      Temps:          0       0       0       0
  4784 ;;      Totals:         0       0       0       0
  4785 ;;Total ram usage:        0 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    2
  4788 ;; This function calls:
  4789 ;;		Nothing
  4790 ;; This function is called by:
  4791 ;;		_SYSC_Initialization
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           
  4796                           ;psect for function _setSYSC_Initialization
  4797  0C19                     _setSYSC_Initialization:	
  4798                           
  4799                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4800                           
  4801                           ;incstack = 0
  4802                           ; Regs used in _setSYSC_Initialization: []
  4803  0C19  1283               	bcf	3,5	;RP0=0, select bank0
  4804  0C1A  1303               	bcf	3,6	;RP1=0, select bank0
  4805  0C1B  1420               	bsf	_SYSC,0
  4806  0C1C  0008               	return
  4807  0C1D                     __end_of_setSYSC_Initialization:	
  4808                           
  4809                           	psect	text26
  4810  0026                     __ptext26:	
  4811 ;; *************** function _PIR_Main *****************
  4812 ;; Defined at:
  4813 ;;		line 15 in file "../src/PIR_B1.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;		None
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;		None
  4818 ;; Return value:  Size  Location     Type
  4819 ;;		None               void
  4820 ;; Registers used:
  4821 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4827 ;;      Params:         0       0       0       0
  4828 ;;      Locals:         0       0       0       0
  4829 ;;      Temps:          0       5       0       0
  4830 ;;      Totals:         0       5       0       0
  4831 ;;Total ram usage:        5 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    4
  4834 ;; This function calls:
  4835 ;;		_getCDS_Status
  4836 ;;		_getLights_Status
  4837 ;;		_getMain_AD_Safe
  4838 ;;		_getMain_Exception
  4839 ;;		_setLED
  4840 ;;		_setLights_Switch
  4841 ;;		_setLights_Trigger
  4842 ;; This function is called by:
  4843 ;;		_main
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           
  4848                           ;psect for function _PIR_Main
  4849  0026                     _PIR_Main:	
  4850                           
  4851                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  4852                           
  4853                           ;incstack = 0
  4854                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4855  0026  1683               	bsf	3,5	;RP0=1, select bank1
  4856  0027  1303               	bcf	3,6	;RP1=0, select bank1
  4857  0028  1C28               	btfss	__PIR^(0+128),0
  4858  0029  0008               	return
  4859                           
  4860                           ;PIR_B1.c: 18: if (getCDS_Status() == 1 && getMain_Exception() == 0) {
  4861  002A  158A  2449  118A   	fcall	_getCDS_Status
  4862  002D  3A01               	xorlw	1
  4863  002E  1D03               	skipz
  4864  002F  2847               	goto	l813
  4865  0030  158A  25C3  118A   	fcall	_getMain_Exception
  4866  0033  3800               	iorlw	0
  4867  0034  1D03               	skipz
  4868  0035  2847               	goto	l813
  4869                           
  4870                           ;PIR_B1.c: 19: if (_PIR.Detect == 0) {
  4871  0036  1683               	bsf	3,5	;RP0=1, select bank1
  4872  0037  1303               	bcf	3,6	;RP1=0, select bank1
  4873  0038  1A28               	btfsc	__PIR^(0+128),4
  4874  0039  2887               	goto	l4696
  4875                           
  4876                           ;PIR_B1.c: 20: _PIR.Detect = 1;
  4877  003A  1628               	bsf	__PIR^(0+128),4
  4878                           
  4879                           ;PIR_B1.c: 21: _PIR.Available = 1;
  4880  003B  17A8               	bsf	__PIR^(0+128),7
  4881                           
  4882                           ;PIR_B1.c: 22: if (_PIR.OK == 0) {
  4883  003C  19A8               	btfsc	__PIR^(0+128),3
  4884  003D  2887               	goto	l4696
  4885                           
  4886                           ;PIR_B1.c: 23: setLED(2, 1);
  4887  003E  1283               	bcf	3,5	;RP0=0, select bank0
  4888  003F  1303               	bcf	3,6	;RP1=0, select bank0
  4889  0040  01E1               	clrf	setLED@command
  4890  0041  0AE1               	incf	setLED@command,f
  4891  0042  3002               	movlw	2
  4892  0043  118A  2620  118A   	fcall	_setLED
  4893                           
  4894                           ;PIR_B1.c: 24: }
  4895                           ;PIR_B1.c: 25: }
  4896                           ;PIR_B1.c: 26: } else {
  4897  0046  2887               	goto	l4696
  4898  0047                     l813:	
  4899                           
  4900                           ;PIR_B1.c: 27: if (_PIR.Detect == 1) {
  4901  0047  1683               	bsf	3,5	;RP0=1, select bank1
  4902  0048  1303               	bcf	3,6	;RP1=0, select bank1
  4903  0049  1E28               	btfss	__PIR^(0+128),4
  4904  004A  2887               	goto	l4696
  4905                           
  4906                           ;PIR_B1.c: 28: _PIR.Detect = 0;
  4907  004B  1228               	bcf	__PIR^(0+128),4
  4908                           
  4909                           ;PIR_B1.c: 29: _PIR.Available = 0;
  4910  004C  13A8               	bcf	__PIR^(0+128),7
  4911                           
  4912                           ;PIR_B1.c: 30: _PIR.Status = 0;
  4913  004D  1328               	bcf	__PIR^(0+128),6
  4914                           
  4915                           ;PIR_B1.c: 33: _PIR.Time = 0;
  4916  004E  01AD               	clrf	(__PIR^(0+128)+5)
  4917                           
  4918                           ;PIR_B1.c: 34: _PIR.RangeTime1 = 0;
  4919  004F  01D2               	clrf	(__PIR^(0+128)+42)
  4920                           
  4921                           ;PIR_B1.c: 35: _PIR.RangeValue = 7;
  4922  0050  3007               	movlw	7
  4923  0051  1283               	bcf	3,5	;RP0=0, select bank0
  4924  0052  1303               	bcf	3,6	;RP1=0, select bank0
  4925  0053  00E3               	movwf	??_PIR_Main
  4926  0054  0863               	movf	??_PIR_Main,w
  4927  0055  1683               	bsf	3,5	;RP0=1, select bank1
  4928  0056  1303               	bcf	3,6	;RP1=0, select bank1
  4929  0057  00D4               	movwf	(__PIR^(0+128)+44)
  4930                           
  4931                           ;PIR_B1.c: 36: _PIR.RangeCount = 0;
  4932  0058  01D3               	clrf	(__PIR^(0+128)+43)
  4933                           
  4934                           ;PIR_B1.c: 38: setLED(1, 0);
  4935  0059  1283               	bcf	3,5	;RP0=0, select bank0
  4936  005A  1303               	bcf	3,6	;RP1=0, select bank0
  4937  005B  01E1               	clrf	setLED@command
  4938  005C  3001               	movlw	1
  4939  005D  118A  2620  118A   	fcall	_setLED
  4940                           
  4941                           ;PIR_B1.c: 39: setLED(2, 0);
  4942  0060  1283               	bcf	3,5	;RP0=0, select bank0
  4943  0061  1303               	bcf	3,6	;RP1=0, select bank0
  4944  0062  01E1               	clrf	setLED@command
  4945  0063  3002               	movlw	2
  4946  0064  118A  2620  118A   	fcall	_setLED
  4947                           
  4948                           ;PIR_B1.c: 40: _PIR.Status = 0;
  4949  0067  1683               	bsf	3,5	;RP0=1, select bank1
  4950  0068  1303               	bcf	3,6	;RP1=0, select bank1
  4951  0069  1328               	bcf	__PIR^(0+128),6
  4952                           
  4953                           ;PIR_B1.c: 41: if (_PIR.OK == 1) {
  4954  006A  1DA8               	btfss	__PIR^(0+128),3
  4955  006B  286E               	goto	l818
  4956                           
  4957                           ;PIR_B1.c: 42: _PIR.Count = 0;
  4958  006C  01C9               	clrf	(__PIR^(0+128)+33)
  4959  006D  01CA               	clrf	((__PIR+1)^(0+128)+33)
  4960  006E                     l818:	
  4961                           
  4962                           ;PIR_B1.c: 43: }
  4963                           ;PIR_B1.c: 44: _PIR.CloseTimeSeconds = 0;
  4964  006E  01CE               	clrf	(__PIR^(0+128)+38)
  4965                           
  4966                           ;PIR_B1.c: 45: _PIR.CloseTimeMinutes = 0;
  4967  006F  01CC               	clrf	(__PIR^(0+128)+36)
  4968  0070  01CD               	clrf	((__PIR+1)^(0+128)+36)
  4969                           
  4970                           ;PIR_B1.c: 50: if (getLights_Status(1) == 1) {
  4971  0071  3001               	movlw	1
  4972  0072  158A  2577  118A   	fcall	_getLights_Status
  4973  0075  3A01               	xorlw	1
  4974  0076  1D03               	skipz
  4975  0077  2887               	goto	l4696
  4976                           
  4977                           ;PIR_B1.c: 51: setLights_Trigger(1, 1);
  4978  0078  1283               	bcf	3,5	;RP0=0, select bank0
  4979  0079  1303               	bcf	3,6	;RP1=0, select bank0
  4980  007A  01E1               	clrf	setLights_Trigger@command
  4981  007B  0AE1               	incf	setLights_Trigger@command,f
  4982  007C  3001               	movlw	1
  4983  007D  158A  2567  118A   	fcall	_setLights_Trigger
  4984                           
  4985                           ;PIR_B1.c: 52: setLights_Switch(1, 0);
  4986  0080  1283               	bcf	3,5	;RP0=0, select bank0
  4987  0081  1303               	bcf	3,6	;RP1=0, select bank0
  4988  0082  01E1               	clrf	setLights_Switch@command
  4989  0083  3001               	movlw	1
  4990  0084  158A  2557  118A   	fcall	_setLights_Switch
  4991  0087                     l4696:	
  4992                           
  4993                           ;PIR_B1.c: 53: }
  4994                           ;PIR_B1.c: 56: }
  4995                           ;PIR_B1.c: 57: }
  4996                           ;PIR_B1.c: 59: if (_PIR.ADtoGO == 0) {
  4997  0087  1683               	bsf	3,5	;RP0=1, select bank1
  4998  0088  1303               	bcf	3,6	;RP1=0, select bank1
  4999  0089  18A8               	btfsc	__PIR^(0+128),1
  5000  008A  28AB               	goto	l820
  5001                           
  5002                           ;PIR_B1.c: 60: _PIR.Time++;
  5003  008B  3001               	movlw	1
  5004  008C  1283               	bcf	3,5	;RP0=0, select bank0
  5005  008D  1303               	bcf	3,6	;RP1=0, select bank0
  5006  008E  00E3               	movwf	??_PIR_Main
  5007  008F  0863               	movf	??_PIR_Main,w
  5008  0090  1683               	bsf	3,5	;RP0=1, select bank1
  5009  0091  1303               	bcf	3,6	;RP1=0, select bank1
  5010  0092  07AD               	addwf	(__PIR^(0+128)+5),f
  5011                           
  5012                           ;PIR_B1.c: 61: if (_PIR.Time == 10) {
  5013  0093  082D               	movf	(__PIR^(0+128)+5),w
  5014  0094  3A0A               	xorlw	10
  5015  0095  1D03               	skipz
  5016  0096  29C4               	goto	l4780
  5017                           
  5018                           ;PIR_B1.c: 62: if (getMain_AD_Safe() == 1) {
  5019  0097  158A  24B1  118A   	fcall	_getMain_AD_Safe
  5020  009A  3A01               	xorlw	1
  5021  009B  1D03               	skipz
  5022  009C  28A2               	goto	l4708
  5023                           
  5024                           ;PIR_B1.c: 63: _PIR.Time = 0;
  5025  009D  1683               	bsf	3,5	;RP0=1, select bank1
  5026  009E  1303               	bcf	3,6	;RP1=0, select bank1
  5027  009F  01AD               	clrf	(__PIR^(0+128)+5)
  5028                           
  5029                           ;PIR_B1.c: 64: _PIR.ADtoGO = 1;
  5030  00A0  14A8               	bsf	__PIR^(0+128),1
  5031                           
  5032                           ;PIR_B1.c: 65: } else {
  5033  00A1  29C4               	goto	l4780
  5034  00A2                     l4708:	
  5035                           
  5036                           ;PIR_B1.c: 66: _PIR.Time = 10;
  5037  00A2  300A               	movlw	10
  5038  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  5039  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  5040  00A5  00E3               	movwf	??_PIR_Main
  5041  00A6  0863               	movf	??_PIR_Main,w
  5042  00A7  1683               	bsf	3,5	;RP0=1, select bank1
  5043  00A8  1303               	bcf	3,6	;RP1=0, select bank1
  5044  00A9  00AD               	movwf	(__PIR^(0+128)+5)
  5045                           
  5046                           ;PIR_B1.c: 67: }
  5047                           ;PIR_B1.c: 68: }
  5048                           ;PIR_B1.c: 69: } else {
  5049  00AA  29C4               	goto	l4780
  5050  00AB                     l820:	
  5051                           
  5052                           ;PIR_B1.c: 70: if (_PIR.GO == 1) {
  5053  00AB  1D28               	btfss	__PIR^(0+128),2
  5054  00AC  29C4               	goto	l4780
  5055                           
  5056                           ;PIR_B1.c: 71: _PIR.GO = 0;
  5057  00AD  1128               	bcf	__PIR^(0+128),2
  5058                           
  5059                           ;PIR_B1.c: 72: if (_PIR.Available == 1) {
  5060  00AE  1BA8               	btfsc	__PIR^(0+128),7
  5061                           
  5062                           ;PIR_B1.c: 73: if (_PIR.OK == 1) {
  5063  00AF  1DA8               	btfss	__PIR^(0+128),3
  5064  00B0  29C4               	goto	l4780
  5065                           
  5066                           ;PIR_B1.c: 75: _PIR.Time++;
  5067  00B1  3001               	movlw	1
  5068  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  5069  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  5070  00B4  00E3               	movwf	??_PIR_Main
  5071  00B5  0863               	movf	??_PIR_Main,w
  5072  00B6  1683               	bsf	3,5	;RP0=1, select bank1
  5073  00B7  1303               	bcf	3,6	;RP1=0, select bank1
  5074  00B8  07AD               	addwf	(__PIR^(0+128)+5),f
  5075                           
  5076                           ;PIR_B1.c: 76: if (_PIR.Time == 60) {
  5077  00B9  082D               	movf	(__PIR^(0+128)+5),w
  5078  00BA  3A3C               	xorlw	60
  5079  00BB  1D03               	skipz
  5080  00BC  28F1               	goto	l4750
  5081                           
  5082                           ;PIR_B1.c: 77: _PIR.Time = 0;
  5083  00BD  01AD               	clrf	(__PIR^(0+128)+5)
  5084                           
  5085                           ;PIR_B1.c: 78: if (_PIR.RangeCount >= 90) {
  5086  00BE  305A               	movlw	90
  5087  00BF  0253               	subwf	(__PIR^(0+128)+43),w
  5088  00C0  1C03               	skipc
  5089  00C1  28CD               	goto	l4732
  5090                           
  5091                           ;PIR_B1.c: 79: _PIR.RangeTime1 = 0;
  5092  00C2  01D2               	clrf	(__PIR^(0+128)+42)
  5093                           
  5094                           ;PIR_B1.c: 81: if (_PIR.RangeValue == 7) {
  5095  00C3  0854               	movf	(__PIR^(0+128)+44),w
  5096  00C4  3A07               	xorlw	7
  5097  00C5  1903               	btfsc	3,2
  5098  00C6  28E2               	goto	L13
  5099                           
  5100                           ;PIR_B1.c: 83: } else if (_PIR.RangeValue == 25) {
  5101                           
  5102                           ;PIR_B1.c: 82: _PIR.RangeValue = 25;
  5103  00C7  0854               	movf	(__PIR^(0+128)+44),w
  5104  00C8  3A19               	xorlw	25
  5105  00C9  1D03               	skipz
  5106  00CA  28F0               	goto	l4748
  5107                           
  5108                           ;PIR_B1.c: 84: _PIR.RangeValue = 35;
  5109  00CB  3023               	movlw	35
  5110  00CC  28E9               	goto	L10
  5111  00CD                     l4732:	
  5112                           ;PIR_B1.c: 85: }
  5113                           ;PIR_B1.c: 86: } else if (_PIR.RangeCount <= 10) {
  5114                           
  5115  00CD  300B               	movlw	11
  5116  00CE  0253               	subwf	(__PIR^(0+128)+43),w
  5117  00CF  1803               	skipnc
  5118  00D0  28F0               	goto	l4748
  5119                           
  5120                           ;PIR_B1.c: 87: _PIR.RangeTime1++;
  5121  00D1  3001               	movlw	1
  5122  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  5123  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  5124  00D4  00E3               	movwf	??_PIR_Main
  5125  00D5  0863               	movf	??_PIR_Main,w
  5126  00D6  1683               	bsf	3,5	;RP0=1, select bank1
  5127  00D7  1303               	bcf	3,6	;RP1=0, select bank1
  5128  00D8  07D2               	addwf	(__PIR^(0+128)+42),f
  5129                           
  5130                           ;PIR_B1.c: 88: if (_PIR.RangeTime1 == 2) {
  5131  00D9  0852               	movf	(__PIR^(0+128)+42),w
  5132  00DA  3A02               	xorlw	2
  5133  00DB  1D03               	skipz
  5134  00DC  28F0               	goto	l4748
  5135                           
  5136                           ;PIR_B1.c: 89: _PIR.RangeTime1 = 0;
  5137  00DD  01D2               	clrf	(__PIR^(0+128)+42)
  5138                           
  5139                           ;PIR_B1.c: 91: if (_PIR.RangeValue == 35) {
  5140  00DE  0854               	movf	(__PIR^(0+128)+44),w
  5141  00DF  3A23               	xorlw	35
  5142  00E0  1D03               	skipz
  5143  00E1  28E4               	goto	l4744
  5144  00E2                     L13:	
  5145                           
  5146                           ;PIR_B1.c: 92: _PIR.RangeValue = 25;
  5147  00E2  3019               	movlw	25
  5148  00E3  28E9               	goto	L10
  5149  00E4                     l4744:	
  5150                           ;PIR_B1.c: 93: } else if (_PIR.RangeValue == 25) {
  5151                           
  5152  00E4  0854               	movf	(__PIR^(0+128)+44),w
  5153  00E5  3A19               	xorlw	25
  5154  00E6  1D03               	skipz
  5155  00E7  28F0               	goto	l4748
  5156                           
  5157                           ;PIR_B1.c: 94: _PIR.RangeValue = 7;
  5158  00E8  3007               	movlw	7
  5159  00E9                     L10:	
  5160  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  5161  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  5162  00EB  00E3               	movwf	??_PIR_Main
  5163  00EC  0863               	movf	??_PIR_Main,w
  5164  00ED  1683               	bsf	3,5	;RP0=1, select bank1
  5165  00EE  1303               	bcf	3,6	;RP1=0, select bank1
  5166  00EF  00D4               	movwf	(__PIR^(0+128)+44)
  5167  00F0                     l4748:	
  5168                           
  5169                           ;PIR_B1.c: 95: }
  5170                           ;PIR_B1.c: 96: }
  5171                           ;PIR_B1.c: 97: }
  5172                           ;PIR_B1.c: 98: _PIR.RangeCount = 0;
  5173  00F0  01D3               	clrf	(__PIR^(0+128)+43)
  5174  00F1                     l4750:	
  5175                           
  5176                           ;PIR_B1.c: 99: }
  5177                           ;PIR_B1.c: 102: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))
  5178                           ;PIR_B1.c: 103: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + (_PIR.RangeValue + _PIR.Of
      +                          fset)))) {
  5179  00F1  0854               	movf	(__PIR^(0+128)+44),w
  5180  00F2  0756               	addwf	(__PIR^(0+128)+46),w
  5181  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  5182  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  5183  00F5  00E3               	movwf	??_PIR_Main
  5184  00F6  01E4               	clrf	??_PIR_Main+1
  5185  00F7  0DE4               	rlf	??_PIR_Main+1,f
  5186  00F8  09E3               	comf	??_PIR_Main,f
  5187  00F9  09E4               	comf	??_PIR_Main+1,f
  5188  00FA  0AE3               	incf	??_PIR_Main,f
  5189  00FB  1903               	skipnz
  5190  00FC  0AE4               	incf	??_PIR_Main+1,f
  5191  00FD  1683               	bsf	3,5	;RP0=1, select bank1
  5192  00FE  1303               	bcf	3,6	;RP1=0, select bank1
  5193  00FF  082E               	movf	(__PIR^(0+128)+6),w
  5194  0100  1283               	bcf	3,5	;RP0=0, select bank0
  5195  0101  1303               	bcf	3,6	;RP1=0, select bank0
  5196  0102  0763               	addwf	??_PIR_Main,w
  5197  0103  00E5               	movwf	??_PIR_Main+2
  5198  0104  0864               	movf	??_PIR_Main+1,w
  5199  0105  1803               	skipnc
  5200  0106  0A64               	incf	??_PIR_Main+1,w
  5201  0107  00E6               	movwf	??_PIR_Main+3
  5202  0108  0866               	movf	??_PIR_Main+3,w
  5203  0109  3A80               	xorlw	128
  5204  010A  3C80               	sublw	128
  5205  010B  1D03               	skipz
  5206  010C  2911               	goto	u5485
  5207  010D  0865               	movf	??_PIR_Main+2,w
  5208  010E  1683               	bsf	3,5	;RP0=1, select bank1
  5209  010F  1303               	bcf	3,6	;RP1=0, select bank1
  5210  0110  0229               	subwf	(__PIR^(0+128)+1),w
  5211  0111                     u5485:	
  5212  0111  1C03               	skipc
  5213  0112  293F               	goto	l4760
  5214  0113  1683               	bsf	3,5	;RP0=1, select bank1
  5215  0114  1303               	bcf	3,6	;RP1=0, select bank1
  5216  0115  0854               	movf	(__PIR^(0+128)+44),w
  5217  0116  0756               	addwf	(__PIR^(0+128)+46),w
  5218  0117  1283               	bcf	3,5	;RP0=0, select bank0
  5219  0118  1303               	bcf	3,6	;RP1=0, select bank0
  5220  0119  00E3               	movwf	??_PIR_Main
  5221  011A  01E4               	clrf	??_PIR_Main+1
  5222  011B  0DE4               	rlf	??_PIR_Main+1,f
  5223  011C  1683               	bsf	3,5	;RP0=1, select bank1
  5224  011D  1303               	bcf	3,6	;RP1=0, select bank1
  5225  011E  082E               	movf	(__PIR^(0+128)+6),w
  5226  011F  1283               	bcf	3,5	;RP0=0, select bank0
  5227  0120  1303               	bcf	3,6	;RP1=0, select bank0
  5228  0121  0763               	addwf	??_PIR_Main,w
  5229  0122  00E5               	movwf	??_PIR_Main+2
  5230  0123  3000               	movlw	0
  5231  0124  1803               	skipnc
  5232  0125  3001               	movlw	1
  5233  0126  0764               	addwf	??_PIR_Main+1,w
  5234  0127  00E6               	movwf	??_PIR_Main+3
  5235  0128  0866               	movf	??_PIR_Main+3,w
  5236  0129  3A80               	xorlw	128
  5237  012A  00E7               	movwf	??_PIR_Main+4
  5238  012B  3080               	movlw	128
  5239  012C  0267               	subwf	??_PIR_Main+4,w
  5240  012D  1D03               	skipz
  5241  012E  2935               	goto	u5495
  5242  012F  1683               	bsf	3,5	;RP0=1, select bank1
  5243  0130  1303               	bcf	3,6	;RP1=0, select bank1
  5244  0131  0829               	movf	(__PIR^(0+128)+1),w
  5245  0132  1283               	bcf	3,5	;RP0=0, select bank0
  5246  0133  1303               	bcf	3,6	;RP1=0, select bank0
  5247  0134  0265               	subwf	??_PIR_Main+2,w
  5248  0135                     u5495:	
  5249  0135  1C03               	skipc
  5250  0136  293F               	goto	l4760
  5251                           
  5252                           ;PIR_B1.c: 104: _PIR.Count = 0;
  5253  0137  1683               	bsf	3,5	;RP0=1, select bank1
  5254  0138  1303               	bcf	3,6	;RP1=0, select bank1
  5255  0139  01C9               	clrf	(__PIR^(0+128)+33)
  5256  013A  01CA               	clrf	((__PIR+1)^(0+128)+33)
  5257                           
  5258                           ;PIR_B1.c: 105: setLED(1, 0);
  5259  013B  1283               	bcf	3,5	;RP0=0, select bank0
  5260  013C  1303               	bcf	3,6	;RP1=0, select bank0
  5261  013D  01E1               	clrf	setLED@command
  5262  013E  29AD               	goto	L14
  5263  013F                     l4760:	
  5264                           ;PIR_B1.c: 107: } else {
  5265                           
  5266                           ;PIR_B1.c: 106: setLED(2, 0);
  5267                           
  5268                           
  5269                           ;PIR_B1.c: 108: _PIR.RangeCount++;
  5270  013F  3001               	movlw	1
  5271  0140  1283               	bcf	3,5	;RP0=0, select bank0
  5272  0141  1303               	bcf	3,6	;RP1=0, select bank0
  5273  0142  00E3               	movwf	??_PIR_Main
  5274  0143  0863               	movf	??_PIR_Main,w
  5275  0144  1683               	bsf	3,5	;RP0=1, select bank1
  5276  0145  1303               	bcf	3,6	;RP1=0, select bank1
  5277  0146  07D3               	addwf	(__PIR^(0+128)+43),f
  5278                           
  5279                           ;PIR_B1.c: 109: _PIR.Count++;
  5280  0147  3001               	movlw	1
  5281  0148  07C9               	addwf	(__PIR^(0+128)+33),f
  5282  0149  1803               	skipnc
  5283  014A  0ACA               	incf	((__PIR+1)^(0+128)+33),f
  5284  014B  3000               	movlw	0
  5285  014C  07CA               	addwf	((__PIR+1)^(0+128)+33),f
  5286                           
  5287                           ;PIR_B1.c: 110: if (_PIR.Count == _PIR.TriggerValue) {
  5288  014D  084B               	movf	(__PIR^(0+128)+35),w
  5289  014E  1283               	bcf	3,5	;RP0=0, select bank0
  5290  014F  1303               	bcf	3,6	;RP1=0, select bank0
  5291  0150  00E3               	movwf	??_PIR_Main
  5292  0151  01E4               	clrf	??_PIR_Main+1
  5293  0152  1683               	bsf	3,5	;RP0=1, select bank1
  5294  0153  1303               	bcf	3,6	;RP1=0, select bank1
  5295  0154  084A               	movf	((__PIR+1)^(0+128)+33),w
  5296  0155  1283               	bcf	3,5	;RP0=0, select bank0
  5297  0156  1303               	bcf	3,6	;RP1=0, select bank0
  5298  0157  0664               	xorwf	??_PIR_Main+1,w
  5299  0158  1D03               	skipz
  5300  0159  2960               	goto	u5505
  5301  015A  1683               	bsf	3,5	;RP0=1, select bank1
  5302  015B  1303               	bcf	3,6	;RP1=0, select bank1
  5303  015C  0849               	movf	(__PIR^(0+128)+33),w
  5304  015D  1283               	bcf	3,5	;RP0=0, select bank0
  5305  015E  1303               	bcf	3,6	;RP1=0, select bank0
  5306  015F  0663               	xorwf	??_PIR_Main,w
  5307  0160                     u5505:	
  5308  0160  1D03               	skipz
  5309  0161  29C4               	goto	l4780
  5310                           
  5311                           ;PIR_B1.c: 111: _PIR.Count = 0;
  5312  0162  1683               	bsf	3,5	;RP0=1, select bank1
  5313  0163  1303               	bcf	3,6	;RP1=0, select bank1
  5314  0164  01C9               	clrf	(__PIR^(0+128)+33)
  5315  0165  01CA               	clrf	((__PIR+1)^(0+128)+33)
  5316                           
  5317                           ;PIR_B1.c: 112: _PIR.CloseTimeSeconds = 0;
  5318  0166  01CE               	clrf	(__PIR^(0+128)+38)
  5319                           
  5320                           ;PIR_B1.c: 113: _PIR.CloseTimeMinutes = 0;
  5321  0167  01CC               	clrf	(__PIR^(0+128)+36)
  5322  0168  01CD               	clrf	((__PIR+1)^(0+128)+36)
  5323                           
  5324                           ;PIR_B1.c: 117: if (getLights_Status(1) == 0) {
  5325  0169  3001               	movlw	1
  5326  016A  158A  2577  118A   	fcall	_getLights_Status
  5327  016D  3800               	iorlw	0
  5328  016E  1D03               	skipz
  5329  016F  2980               	goto	l4772
  5330                           
  5331                           ;PIR_B1.c: 118: setLights_Trigger(1, 1);
  5332  0170  1283               	bcf	3,5	;RP0=0, select bank0
  5333  0171  1303               	bcf	3,6	;RP1=0, select bank0
  5334  0172  01E1               	clrf	setLights_Trigger@command
  5335  0173  0AE1               	incf	setLights_Trigger@command,f
  5336  0174  3001               	movlw	1
  5337  0175  158A  2567  118A   	fcall	_setLights_Trigger
  5338                           
  5339                           ;PIR_B1.c: 119: setLights_Switch(1, 1);
  5340  0178  1283               	bcf	3,5	;RP0=0, select bank0
  5341  0179  1303               	bcf	3,6	;RP1=0, select bank0
  5342  017A  01E1               	clrf	setLights_Switch@command
  5343  017B  0AE1               	incf	setLights_Switch@command,f
  5344  017C  3001               	movlw	1
  5345  017D  158A  2557  118A   	fcall	_setLights_Switch
  5346  0180                     l4772:	
  5347                           
  5348                           ;PIR_B1.c: 120: }
  5349                           ;PIR_B1.c: 124: _PIR.Status = 1;
  5350  0180  1683               	bsf	3,5	;RP0=1, select bank1
  5351  0181  1303               	bcf	3,6	;RP1=0, select bank1
  5352  0182  1728               	bsf	__PIR^(0+128),6
  5353                           
  5354                           ;PIR_B1.c: 126: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))) {
  5355  0183  0854               	movf	(__PIR^(0+128)+44),w
  5356  0184  0756               	addwf	(__PIR^(0+128)+46),w
  5357  0185  1283               	bcf	3,5	;RP0=0, select bank0
  5358  0186  1303               	bcf	3,6	;RP1=0, select bank0
  5359  0187  00E3               	movwf	??_PIR_Main
  5360  0188  01E4               	clrf	??_PIR_Main+1
  5361  0189  0DE4               	rlf	??_PIR_Main+1,f
  5362  018A  09E3               	comf	??_PIR_Main,f
  5363  018B  09E4               	comf	??_PIR_Main+1,f
  5364  018C  0AE3               	incf	??_PIR_Main,f
  5365  018D  1903               	skipnz
  5366  018E  0AE4               	incf	??_PIR_Main+1,f
  5367  018F  1683               	bsf	3,5	;RP0=1, select bank1
  5368  0190  1303               	bcf	3,6	;RP1=0, select bank1
  5369  0191  082E               	movf	(__PIR^(0+128)+6),w
  5370  0192  1283               	bcf	3,5	;RP0=0, select bank0
  5371  0193  1303               	bcf	3,6	;RP1=0, select bank0
  5372  0194  0763               	addwf	??_PIR_Main,w
  5373  0195  00E5               	movwf	??_PIR_Main+2
  5374  0196  0864               	movf	??_PIR_Main+1,w
  5375  0197  1803               	skipnc
  5376  0198  0A64               	incf	??_PIR_Main+1,w
  5377  0199  00E6               	movwf	??_PIR_Main+3
  5378  019A  0866               	movf	??_PIR_Main+3,w
  5379  019B  3A80               	xorlw	128
  5380  019C  00E7               	movwf	??_PIR_Main+4
  5381  019D  3080               	movlw	128
  5382  019E  0267               	subwf	??_PIR_Main+4,w
  5383  019F  1D03               	skipz
  5384  01A0  29A7               	goto	u5525
  5385  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  5386  01A2  1303               	bcf	3,6	;RP1=0, select bank1
  5387  01A3  0829               	movf	(__PIR^(0+128)+1),w
  5388  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  5389  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  5390  01A6  0265               	subwf	??_PIR_Main+2,w
  5391  01A7                     u5525:	
  5392  01A7  1C03               	skipc
  5393  01A8  29B5               	goto	l4778
  5394                           
  5395                           ;PIR_B1.c: 127: setLED(1, 1);
  5396  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  5397  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  5398  01AB  01E1               	clrf	setLED@command
  5399  01AC  0AE1               	incf	setLED@command,f
  5400  01AD                     L14:	
  5401  01AD  3001               	movlw	1
  5402  01AE  118A  2620  118A   	fcall	_setLED
  5403                           
  5404                           ;PIR_B1.c: 128: setLED(2, 0);
  5405  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  5406  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  5407  01B3  01E1               	clrf	setLED@command
  5408  01B4  29C0               	goto	L11
  5409  01B5                     l4778:	
  5410                           ;PIR_B1.c: 129: } else {
  5411                           
  5412                           
  5413                           ;PIR_B1.c: 130: setLED(1, 0);
  5414  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  5415  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  5416  01B7  01E1               	clrf	setLED@command
  5417  01B8  3001               	movlw	1
  5418  01B9  118A  2620  118A   	fcall	_setLED
  5419                           
  5420                           ;PIR_B1.c: 131: setLED(2, 1);
  5421  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  5422  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  5423  01BE  01E1               	clrf	setLED@command
  5424  01BF  0AE1               	incf	setLED@command,f
  5425  01C0                     L11:	
  5426  01C0  3002               	movlw	2
  5427  01C1  118A  2620  118A   	fcall	_setLED
  5428  01C4                     l4780:	
  5429                           
  5430                           ;PIR_B1.c: 132: }
  5431                           ;PIR_B1.c: 133: }
  5432                           ;PIR_B1.c: 134: }
  5433                           ;PIR_B1.c: 135: }
  5434                           ;PIR_B1.c: 136: }
  5435                           ;PIR_B1.c: 137: }
  5436                           ;PIR_B1.c: 138: }
  5437                           ;PIR_B1.c: 139: if (_PIR.OK == 0) {
  5438  01C4  1683               	bsf	3,5	;RP0=1, select bank1
  5439  01C5  1303               	bcf	3,6	;RP1=0, select bank1
  5440  01C6  19A8               	btfsc	__PIR^(0+128),3
  5441  01C7  29E0               	goto	l4790
  5442                           
  5443                           ;PIR_B1.c: 140: _PIR.Count++;
  5444  01C8  3001               	movlw	1
  5445  01C9  07C9               	addwf	(__PIR^(0+128)+33),f
  5446  01CA  1803               	skipnc
  5447  01CB  0ACA               	incf	((__PIR+1)^(0+128)+33),f
  5448  01CC  3000               	movlw	0
  5449  01CD  07CA               	addwf	((__PIR+1)^(0+128)+33),f
  5450                           
  5451                           ;PIR_B1.c: 141: if (_PIR.Count == 3000) {
  5452  01CE  300B               	movlw	11
  5453  01CF  064A               	xorwf	((__PIR+1)^(0+128)+33),w
  5454  01D0  1D03               	skipz
  5455  01D1  29D4               	goto	u5545
  5456  01D2  30B8               	movlw	184
  5457  01D3  0649               	xorwf	(__PIR^(0+128)+33),w
  5458  01D4                     u5545:	
  5459  01D4  1D03               	skipz
  5460  01D5  29E0               	goto	l4790
  5461                           
  5462                           ;PIR_B1.c: 142: _PIR.Count = 0;
  5463  01D6  01C9               	clrf	(__PIR^(0+128)+33)
  5464  01D7  01CA               	clrf	((__PIR+1)^(0+128)+33)
  5465                           
  5466                           ;PIR_B1.c: 143: _PIR.OK = 1;
  5467  01D8  15A8               	bsf	__PIR^(0+128),3
  5468                           
  5469                           ;PIR_B1.c: 144: setLED(2, 0);
  5470  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  5471  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  5472  01DB  01E1               	clrf	setLED@command
  5473  01DC  3002               	movlw	2
  5474  01DD  118A  2620  118A   	fcall	_setLED
  5475  01E0                     l4790:	
  5476                           
  5477                           ;PIR_B1.c: 145: }
  5478                           ;PIR_B1.c: 146: }
  5479                           ;PIR_B1.c: 147: if (_PIR.Status == 1) {
  5480  01E0  1683               	bsf	3,5	;RP0=1, select bank1
  5481  01E1  1303               	bcf	3,6	;RP1=0, select bank1
  5482  01E2  1F28               	btfss	__PIR^(0+128),6
  5483  01E3  0008               	return
  5484                           
  5485                           ;PIR_B1.c: 148: _PIR.CloseTimeSeconds++;
  5486  01E4  3001               	movlw	1
  5487  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  5488  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  5489  01E7  00E3               	movwf	??_PIR_Main
  5490  01E8  0863               	movf	??_PIR_Main,w
  5491  01E9  1683               	bsf	3,5	;RP0=1, select bank1
  5492  01EA  1303               	bcf	3,6	;RP1=0, select bank1
  5493  01EB  07CE               	addwf	(__PIR^(0+128)+38),f
  5494                           
  5495                           ;PIR_B1.c: 149: if (_PIR.CloseTimeSeconds == 100) {
  5496  01EC  084E               	movf	(__PIR^(0+128)+38),w
  5497  01ED  3A64               	xorlw	100
  5498  01EE  1D03               	skipz
  5499  01EF  0008               	return
  5500                           
  5501                           ;PIR_B1.c: 150: _PIR.CloseTimeSeconds = 0;
  5502  01F0  01CE               	clrf	(__PIR^(0+128)+38)
  5503                           
  5504                           ;PIR_B1.c: 151: _PIR.CloseTimeMinutes++;
  5505  01F1  3001               	movlw	1
  5506  01F2  07CC               	addwf	(__PIR^(0+128)+36),f
  5507  01F3  1803               	skipnc
  5508  01F4  0ACD               	incf	((__PIR+1)^(0+128)+36),f
  5509  01F5  3000               	movlw	0
  5510  01F6  07CD               	addwf	((__PIR+1)^(0+128)+36),f
  5511                           
  5512                           ;PIR_B1.c: 152: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5513  01F7  0850               	movf	((__PIR+1)^(0+128)+39),w
  5514  01F8  064D               	xorwf	((__PIR+1)^(0+128)+36),w
  5515  01F9  1D03               	skipz
  5516  01FA  29FD               	goto	u5575
  5517  01FB  084F               	movf	(__PIR^(0+128)+39),w
  5518  01FC  064C               	xorwf	(__PIR^(0+128)+36),w
  5519  01FD                     u5575:	
  5520  01FD  1D03               	skipz
  5521  01FE  0008               	return
  5522                           
  5523                           ;PIR_B1.c: 153: _PIR.CloseTimeMinutes = 0;
  5524  01FF  01CC               	clrf	(__PIR^(0+128)+36)
  5525  0200  01CD               	clrf	((__PIR+1)^(0+128)+36)
  5526                           
  5527                           ;PIR_B1.c: 154: _PIR.Status = 0;
  5528  0201  1328               	bcf	__PIR^(0+128),6
  5529                           
  5530                           ;PIR_B1.c: 158: if (getLights_Status(1) == 1) {
  5531  0202  3001               	movlw	1
  5532  0203  158A  2577  118A   	fcall	_getLights_Status
  5533  0206  3A01               	xorlw	1
  5534  0207  1D03               	skipz
  5535  0208  0008               	return
  5536                           
  5537                           ;PIR_B1.c: 159: setLights_Trigger(1, 1);
  5538  0209  1283               	bcf	3,5	;RP0=0, select bank0
  5539  020A  1303               	bcf	3,6	;RP1=0, select bank0
  5540  020B  01E1               	clrf	setLights_Trigger@command
  5541  020C  0AE1               	incf	setLights_Trigger@command,f
  5542  020D  3001               	movlw	1
  5543  020E  158A  2567  118A   	fcall	_setLights_Trigger
  5544                           
  5545                           ;PIR_B1.c: 160: setLights_Switch(1, 0);
  5546  0211  1283               	bcf	3,5	;RP0=0, select bank0
  5547  0212  1303               	bcf	3,6	;RP1=0, select bank0
  5548  0213  01E1               	clrf	setLights_Switch@command
  5549  0214  3001               	movlw	1
  5550  0215  158A  2557         	fcall	_setLights_Switch
  5551  0217  0008               	return
  5552  0218                     __end_of_PIR_Main:	
  5553                           
  5554                           	psect	text27
  5555  0D67                     __ptext27:	
  5556 ;; *************** function _setLights_Trigger *****************
  5557 ;; Defined at:
  5558 ;;		line 160 in file "../src/TriacRelay_B1.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  lights          1    wreg     unsigned char 
  5561 ;;  command         1    0[BANK0 ] unsigned char 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  lights          1    1[BANK0 ] unsigned char 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;		None               void
  5566 ;; Registers used:
  5567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5573 ;;      Params:         0       1       0       0
  5574 ;;      Locals:         0       1       0       0
  5575 ;;      Temps:          0       0       0       0
  5576 ;;      Totals:         0       2       0       0
  5577 ;;Total ram usage:        2 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    3
  5580 ;; This function calls:
  5581 ;;		_LightsPointSelect
  5582 ;; This function is called by:
  5583 ;;		_PIR_Main
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           
  5588                           ;psect for function _setLights_Trigger
  5589  0D67                     _setLights_Trigger:	
  5590                           
  5591                           ;incstack = 0
  5592                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5593                           ;setLights_Trigger@lights stored from wreg
  5594  0D67  1283               	bcf	3,5	;RP0=0, select bank0
  5595  0D68  1303               	bcf	3,6	;RP1=0, select bank0
  5596  0D69  00E2               	movwf	setLights_Trigger@lights
  5597                           
  5598                           ;TriacRelay_B1.c: 161: LightsPointSelect(lights);
  5599  0D6A  0862               	movf	setLights_Trigger@lights,w
  5600  0D6B  158A  248D         	fcall	_LightsPointSelect
  5601                           
  5602                           ;TriacRelay_B1.c: 162: Lights->Trigger = command;
  5603  0D6D  1283               	bcf	3,5	;RP0=0, select bank0
  5604  0D6E  1303               	bcf	3,6	;RP1=0, select bank0
  5605  0D6F  082D               	movf	_Lights,w
  5606  0D70  0084               	movwf	4
  5607  0D71  0861               	movf	setLights_Trigger@command,w
  5608  0D72  1383               	bcf	3,7	;select IRP bank0
  5609  0D73  1280               	bcf	0,5
  5610  0D74  1D03               	skipz
  5611  0D75  1680               	bsf	0,5
  5612  0D76  0008               	return
  5613  0D77                     __end_of_setLights_Trigger:	
  5614                           
  5615                           	psect	text28
  5616  0D57                     __ptext28:	
  5617 ;; *************** function _setLights_Switch *****************
  5618 ;; Defined at:
  5619 ;;		line 165 in file "../src/TriacRelay_B1.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  lights          1    wreg     unsigned char 
  5622 ;;  command         1    0[BANK0 ] unsigned char 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  lights          1    1[BANK0 ] unsigned char 
  5625 ;; Return value:  Size  Location     Type
  5626 ;;		None               void
  5627 ;; Registers used:
  5628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5634 ;;      Params:         0       1       0       0
  5635 ;;      Locals:         0       1       0       0
  5636 ;;      Temps:          0       0       0       0
  5637 ;;      Totals:         0       2       0       0
  5638 ;;Total ram usage:        2 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    3
  5641 ;; This function calls:
  5642 ;;		_LightsPointSelect
  5643 ;; This function is called by:
  5644 ;;		_PIR_Main
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function _setLights_Switch
  5650  0D57                     _setLights_Switch:	
  5651                           
  5652                           ;incstack = 0
  5653                           ; Regs used in _setLights_Switch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5654                           ;setLights_Switch@lights stored from wreg
  5655  0D57  1283               	bcf	3,5	;RP0=0, select bank0
  5656  0D58  1303               	bcf	3,6	;RP1=0, select bank0
  5657  0D59  00E2               	movwf	setLights_Switch@lights
  5658                           
  5659                           ;TriacRelay_B1.c: 166: LightsPointSelect(lights);
  5660  0D5A  0862               	movf	setLights_Switch@lights,w
  5661  0D5B  158A  248D         	fcall	_LightsPointSelect
  5662                           
  5663                           ;TriacRelay_B1.c: 167: Lights->Switch = command;
  5664  0D5D  1283               	bcf	3,5	;RP0=0, select bank0
  5665  0D5E  1303               	bcf	3,6	;RP1=0, select bank0
  5666  0D5F  082D               	movf	_Lights,w
  5667  0D60  0084               	movwf	4
  5668  0D61  0861               	movf	setLights_Switch@command,w
  5669  0D62  1383               	bcf	3,7	;select IRP bank0
  5670  0D63  1300               	bcf	0,6
  5671  0D64  1D03               	skipz
  5672  0D65  1700               	bsf	0,6
  5673  0D66  0008               	return
  5674  0D67                     __end_of_setLights_Switch:	
  5675                           
  5676                           	psect	text29
  5677  0DC3                     __ptext29:	
  5678 ;; *************** function _getMain_Exception *****************
  5679 ;; Defined at:
  5680 ;;		line 284 in file "../src/Main_B1.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;		None
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  result          1    4[COMMON] unsigned char 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  1    wreg      unsigned char 
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5694 ;;      Params:         0       0       0       0
  5695 ;;      Locals:         1       0       0       0
  5696 ;;      Temps:          0       0       0       0
  5697 ;;      Totals:         1       0       0       0
  5698 ;;Total ram usage:        1 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    2
  5701 ;; This function calls:
  5702 ;;		Nothing
  5703 ;; This function is called by:
  5704 ;;		_PIR_Main
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           
  5709                           ;psect for function _getMain_Exception
  5710  0DC3                     _getMain_Exception:	
  5711                           
  5712                           ;Main_B1.c: 285: char result = 0;
  5713                           
  5714                           ;incstack = 0
  5715                           ; Regs used in _getMain_Exception: [wreg+status,2+status,0]
  5716  0DC3  01F4               	clrf	getMain_Exception@result
  5717                           
  5718                           ;Main_B1.c: 287: if (result == 0) {
  5719  0DC4  08F4               	movf	getMain_Exception@result,f
  5720  0DC5  1D03               	skipz
  5721  0DC6  2DCD               	goto	l3036
  5722                           
  5723                           ;Main_B1.c: 288: result = SYSC.ERROR == 1 ? 1 : 0;
  5724  0DC7  3000               	movlw	0
  5725  0DC8  1283               	bcf	3,5	;RP0=0, select bank0
  5726  0DC9  1303               	bcf	3,6	;RP1=0, select bank0
  5727  0DCA  18A0               	btfsc	_SYSC,1
  5728  0DCB  3001               	movlw	1
  5729  0DCC  00F4               	movwf	getMain_Exception@result
  5730  0DCD                     l3036:	
  5731                           
  5732                           ;Main_B1.c: 289: }
  5733                           ;Main_B1.c: 293: if (result == 0) {
  5734  0DCD  08F4               	movf	getMain_Exception@result,f
  5735  0DCE  1D03               	skipz
  5736  0DCF  2DD6               	goto	l3040
  5737                           
  5738                           ;Main_B1.c: 294: result = Temp.ERROR == 1 ? 1 : 0;
  5739  0DD0  3000               	movlw	0
  5740  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  5741  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  5742  0DD3  18D1               	btfsc	_Temp,1
  5743  0DD4  3001               	movlw	1
  5744  0DD5  00F4               	movwf	getMain_Exception@result
  5745  0DD6                     l3040:	
  5746                           
  5747                           ;Main_B1.c: 295: }
  5748                           ;Main_B1.c: 297: return result;
  5749  0DD6  0874               	movf	getMain_Exception@result,w
  5750  0DD7  0008               	return
  5751  0DD8                     __end_of_getMain_Exception:	
  5752                           
  5753                           	psect	text30
  5754  0C49                     __ptext30:	
  5755 ;; *************** function _getCDS_Status *****************
  5756 ;; Defined at:
  5757 ;;		line 44 in file "../src/CDS_B1.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;		None
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;  result          1    4[COMMON] unsigned char 
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  1    wreg      unsigned char 
  5764 ;; Registers used:
  5765 ;;		wreg, status,2
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5771 ;;      Params:         0       0       0       0
  5772 ;;      Locals:         1       0       0       0
  5773 ;;      Temps:          0       0       0       0
  5774 ;;      Totals:         1       0       0       0
  5775 ;;Total ram usage:        1 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:    2
  5778 ;; This function calls:
  5779 ;;		Nothing
  5780 ;; This function is called by:
  5781 ;;		_PIR_Main
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           
  5786                           ;psect for function _getCDS_Status
  5787  0C49                     _getCDS_Status:	
  5788                           
  5789                           ;CDS_B1.c: 45: char result = _CDS.Status;
  5790                           
  5791                           ;incstack = 0
  5792                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5793  0C49  3000               	movlw	0
  5794  0C4A  1283               	bcf	3,5	;RP0=0, select bank0
  5795  0C4B  1303               	bcf	3,6	;RP1=0, select bank0
  5796  0C4C  1A25               	btfsc	__CDS,4
  5797  0C4D  3001               	movlw	1
  5798  0C4E  00F4               	movwf	getCDS_Status@result
  5799                           
  5800                           ;CDS_B1.c: 46: return result;
  5801  0C4F  0874               	movf	getCDS_Status@result,w
  5802  0C50  0008               	return
  5803  0C51                     __end_of_getCDS_Status:	
  5804                           
  5805                           	psect	text31
  5806  0D47                     __ptext31:	
  5807 ;; *************** function _PIR_Initialization *****************
  5808 ;; Defined at:
  5809 ;;		line 7 in file "../src/PIR_B1.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;		None
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;		None
  5814 ;; Return value:  Size  Location     Type
  5815 ;;		None               void
  5816 ;; Registers used:
  5817 ;;		wreg
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5823 ;;      Params:         0       0       0       0
  5824 ;;      Locals:         0       0       0       0
  5825 ;;      Temps:          1       0       0       0
  5826 ;;      Totals:         1       0       0       0
  5827 ;;Total ram usage:        1 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    2
  5830 ;; This function calls:
  5831 ;;		Nothing
  5832 ;; This function is called by:
  5833 ;;		_main
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837                           
  5838                           ;psect for function _PIR_Initialization
  5839  0D47                     _PIR_Initialization:	
  5840                           
  5841                           ;PIR_B1.c: 8: _PIR.Enable = 1;
  5842                           
  5843                           ;incstack = 0
  5844                           ; Regs used in _PIR_Initialization: [wreg]
  5845  0D47  1683               	bsf	3,5	;RP0=1, select bank1
  5846  0D48  1303               	bcf	3,6	;RP1=0, select bank1
  5847  0D49  1428               	bsf	__PIR^(0+128),0
  5848                           
  5849                           ;PIR_B1.c: 9: _PIR.RangeValue = 7;
  5850  0D4A  3007               	movlw	7
  5851  0D4B  00F4               	movwf	??_PIR_Initialization
  5852  0D4C  0874               	movf	??_PIR_Initialization,w
  5853  0D4D  00D4               	movwf	(__PIR^(0+128)+44)
  5854                           
  5855                           ;PIR_B1.c: 10: _PIR.CloseTimeValue = 150;
  5856  0D4E  3096               	movlw	150
  5857  0D4F  00CF               	movwf	(__PIR^(0+128)+39)
  5858  0D50  3000               	movlw	0
  5859  0D51  00D0               	movwf	(__PIR^(0+128)+40)
  5860                           
  5861                           ;PIR_B1.c: 11: _PIR.TriggerValue = 2;
  5862  0D52  3002               	movlw	2
  5863  0D53  00F4               	movwf	??_PIR_Initialization
  5864  0D54  0874               	movf	??_PIR_Initialization,w
  5865  0D55  00CB               	movwf	(__PIR^(0+128)+35)
  5866  0D56  0008               	return
  5867  0D57                     __end_of_PIR_Initialization:	
  5868                           
  5869                           	psect	text32
  5870  0CF9                     __ptext32:	
  5871 ;; *************** function _Mcu_Initialization *****************
  5872 ;; Defined at:
  5873 ;;		line 30 in file "../src/MCU_B1.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;		None
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;		None
  5878 ;; Return value:  Size  Location     Type
  5879 ;;		None               void
  5880 ;; Registers used:
  5881 ;;		wreg, status,2, status,0, pclath, cstack
  5882 ;; Tracked objects:
  5883 ;;		On entry : 0/0
  5884 ;;		On exit  : 0/0
  5885 ;;		Unchanged: 0/0
  5886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5887 ;;      Params:         0       0       0       0
  5888 ;;      Locals:         0       0       0       0
  5889 ;;      Temps:          0       0       0       0
  5890 ;;      Totals:         0       0       0       0
  5891 ;;Total ram usage:        0 bytes
  5892 ;; Hardware stack levels used:    1
  5893 ;; Hardware stack levels required when called:    3
  5894 ;; This function calls:
  5895 ;;		_ADC_Set
  5896 ;;		_Fosc_Set
  5897 ;;		_IO_Set
  5898 ;;		_TMR1_Set
  5899 ;;		_WDT_Set
  5900 ;; This function is called by:
  5901 ;;		_main
  5902 ;; This function uses a non-reentrant model
  5903 ;;
  5904                           
  5905                           
  5906                           ;psect for function _Mcu_Initialization
  5907  0CF9                     _Mcu_Initialization:	
  5908                           
  5909                           ;MCU_B1.c: 32: Fosc_Set();
  5910                           
  5911                           ;incstack = 0
  5912                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5913  0CF9  158A  2421  158A   	fcall	_Fosc_Set
  5914                           
  5915                           ;MCU_B1.c: 34: IO_Set();
  5916  0CFC  158A  25AE  158A   	fcall	_IO_Set
  5917                           
  5918                           ;MCU_B1.c: 36: ;;
  5919                           ;MCU_B1.c: 38: TMR1_Set();
  5920  0CFF  158A  24CD  158A   	fcall	_TMR1_Set
  5921                           
  5922                           ;MCU_B1.c: 40: ADC_Set();
  5923  0D02  158A  2432  158A   	fcall	_ADC_Set
  5924                           
  5925                           ;MCU_B1.c: 42: ;;
  5926                           ;MCU_B1.c: 44: ;;
  5927                           ;MCU_B1.c: 46: ;;
  5928                           ;MCU_B1.c: 48: ;;
  5929                           ;MCU_B1.c: 50: ;;
  5930                           ;MCU_B1.c: 52: WDT_Set();
  5931  0D05  158A  24A5         	fcall	_WDT_Set
  5932  0D07  0008               	return
  5933  0D08                     __end_of_Mcu_Initialization:	
  5934                           
  5935                           	psect	text33
  5936  0CA5                     __ptext33:	
  5937 ;; *************** function _WDT_Set *****************
  5938 ;; Defined at:
  5939 ;;		line 1005 in file "../src/MCU_B1.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;		None
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;		None
  5944 ;; Return value:  Size  Location     Type
  5945 ;;		None               void
  5946 ;; Registers used:
  5947 ;;		wreg
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5953 ;;      Params:         0       0       0       0
  5954 ;;      Locals:         0       0       0       0
  5955 ;;      Temps:          1       0       0       0
  5956 ;;      Totals:         1       0       0       0
  5957 ;;Total ram usage:        1 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:    2
  5960 ;; This function calls:
  5961 ;;		Nothing
  5962 ;; This function is called by:
  5963 ;;		_Mcu_Initialization
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           
  5968                           ;psect for function _WDT_Set
  5969  0CA5                     _WDT_Set:	
  5970                           
  5971                           ;MCU_B1.c: 1007: PSA = 1;
  5972                           
  5973                           ;incstack = 0
  5974                           ; Regs used in _WDT_Set: [wreg]
  5975  0CA5  1683               	bsf	3,5	;RP0=1, select bank1
  5976  0CA6  1303               	bcf	3,6	;RP1=0, select bank1
  5977  0CA7  1581               	bsf	1,3	;volatile
  5978                           
  5979                           ;MCU_B1.c: 1008: PS0 = 1;
  5980  0CA8  1401               	bsf	1,0	;volatile
  5981                           
  5982                           ;MCU_B1.c: 1009: PS1 = 1;
  5983  0CA9  1481               	bsf	1,1	;volatile
  5984                           
  5985                           ;MCU_B1.c: 1010: PS2 = 1;
  5986  0CAA  1501               	bsf	1,2	;volatile
  5987                           
  5988                           ;MCU_B1.c: 1014: WDT.Enable = 1;
  5989  0CAB  1476               	bsf	_WDT,0
  5990                           
  5991                           ;MCU_B1.c: 1015: WDT.Timer = 10;
  5992  0CAC  300A               	movlw	10
  5993  0CAD  00F4               	movwf	??_WDT_Set
  5994  0CAE  0874               	movf	??_WDT_Set,w
  5995  0CAF  00F7               	movwf	_WDT+1
  5996  0CB0  0008               	return
  5997  0CB1                     __end_of_WDT_Set:	
  5998                           
  5999                           	psect	text34
  6000  0CCD                     __ptext34:	
  6001 ;; *************** function _TMR1_Set *****************
  6002 ;; Defined at:
  6003 ;;		line 199 in file "../src/MCU_B1.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;		None
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;		None
  6008 ;; Return value:  Size  Location     Type
  6009 ;;		None               void
  6010 ;; Registers used:
  6011 ;;		wreg
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6017 ;;      Params:         0       0       0       0
  6018 ;;      Locals:         0       0       0       0
  6019 ;;      Temps:          0       0       0       0
  6020 ;;      Totals:         0       0       0       0
  6021 ;;Total ram usage:        0 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    2
  6024 ;; This function calls:
  6025 ;;		Nothing
  6026 ;; This function is called by:
  6027 ;;		_Mcu_Initialization
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           
  6032                           ;psect for function _TMR1_Set
  6033  0CCD                     _TMR1_Set:	
  6034                           
  6035                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  6036                           
  6037                           ;incstack = 0
  6038                           ; Regs used in _TMR1_Set: [wreg]
  6039  0CCD  3041               	movlw	65
  6040  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  6041  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
  6042  0CD0  0090               	movwf	16	;volatile
  6043                           
  6044                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  6045  0CD1  30FA               	movlw	250
  6046  0CD2  008F               	movwf	15	;volatile
  6047                           
  6048                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  6049  0CD3  3038               	movlw	56
  6050  0CD4  008E               	movwf	14	;volatile
  6051                           
  6052                           ;MCU_B1.c: 203: TMR1IE = 1;
  6053  0CD5  1683               	bsf	3,5	;RP0=1, select bank1
  6054  0CD6  1303               	bcf	3,6	;RP1=0, select bank1
  6055  0CD7  140C               	bsf	12,0	;volatile
  6056                           
  6057                           ;MCU_B1.c: 204: PEIE = 1;
  6058  0CD8  170B               	bsf	11,6	;volatile
  6059                           
  6060                           ;MCU_B1.c: 205: GIE = 1;
  6061  0CD9  178B               	bsf	11,7	;volatile
  6062  0CDA  0008               	return
  6063  0CDB                     __end_of_TMR1_Set:	
  6064                           
  6065                           	psect	text35
  6066  0DAE                     __ptext35:	
  6067 ;; *************** function _IO_Set *****************
  6068 ;; Defined at:
  6069 ;;		line 60 in file "../src/MCU_B1.c"
  6070 ;; Parameters:    Size  Location     Type
  6071 ;;		None
  6072 ;; Auto vars:     Size  Location     Type
  6073 ;;		None
  6074 ;; Return value:  Size  Location     Type
  6075 ;;		None               void
  6076 ;; Registers used:
  6077 ;;		wreg, status,2
  6078 ;; Tracked objects:
  6079 ;;		On entry : 0/0
  6080 ;;		On exit  : 0/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6083 ;;      Params:         0       0       0       0
  6084 ;;      Locals:         0       0       0       0
  6085 ;;      Temps:          0       0       0       0
  6086 ;;      Totals:         0       0       0       0
  6087 ;;Total ram usage:        0 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    2
  6090 ;; This function calls:
  6091 ;;		Nothing
  6092 ;; This function is called by:
  6093 ;;		_Mcu_Initialization
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           
  6098                           ;psect for function _IO_Set
  6099  0DAE                     _IO_Set:	
  6100                           
  6101                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  6102                           
  6103                           ;incstack = 0
  6104                           ; Regs used in _IO_Set: [wreg+status,2]
  6105  0DAE  302F               	movlw	47
  6106  0DAF  1683               	bsf	3,5	;RP0=1, select bank1
  6107  0DB0  1303               	bcf	3,6	;RP1=0, select bank1
  6108  0DB1  0085               	movwf	5	;volatile
  6109                           
  6110                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  6111  0DB2  3001               	movlw	1
  6112  0DB3  0086               	movwf	6	;volatile
  6113                           
  6114                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  6115  0DB4  0187               	clrf	7	;volatile
  6116                           
  6117                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  6118  0DB5  3007               	movlw	7
  6119  0DB6  1683               	bsf	3,5	;RP0=1, select bank3
  6120  0DB7  1703               	bsf	3,6	;RP1=1, select bank3
  6121  0DB8  0085               	movwf	5	;volatile
  6122                           
  6123                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  6124  0DB9  3001               	movlw	1
  6125  0DBA  0086               	movwf	6	;volatile
  6126                           
  6127                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  6128  0DBB  30AF               	movlw	175
  6129  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  6130  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  6131  0DBE  0085               	movwf	5	;volatile
  6132                           
  6133                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  6134  0DBF  3001               	movlw	1
  6135  0DC0  0086               	movwf	6	;volatile
  6136                           
  6137                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  6138  0DC1  0187               	clrf	7	;volatile
  6139  0DC2  0008               	return
  6140  0DC3                     __end_of_IO_Set:	
  6141                           
  6142                           	psect	text36
  6143  0C21                     __ptext36:	
  6144 ;; *************** function _Fosc_Set *****************
  6145 ;; Defined at:
  6146 ;;		line 56 in file "../src/MCU_B1.c"
  6147 ;; Parameters:    Size  Location     Type
  6148 ;;		None
  6149 ;; Auto vars:     Size  Location     Type
  6150 ;;		None
  6151 ;; Return value:  Size  Location     Type
  6152 ;;		None               void
  6153 ;; Registers used:
  6154 ;;		wreg
  6155 ;; Tracked objects:
  6156 ;;		On entry : 0/0
  6157 ;;		On exit  : 0/0
  6158 ;;		Unchanged: 0/0
  6159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6160 ;;      Params:         0       0       0       0
  6161 ;;      Locals:         0       0       0       0
  6162 ;;      Temps:          0       0       0       0
  6163 ;;      Totals:         0       0       0       0
  6164 ;;Total ram usage:        0 bytes
  6165 ;; Hardware stack levels used:    1
  6166 ;; Hardware stack levels required when called:    2
  6167 ;; This function calls:
  6168 ;;		Nothing
  6169 ;; This function is called by:
  6170 ;;		_Mcu_Initialization
  6171 ;; This function uses a non-reentrant model
  6172 ;;
  6173                           
  6174                           
  6175                           ;psect for function _Fosc_Set
  6176  0C21                     _Fosc_Set:	
  6177                           
  6178                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  6179                           
  6180                           ;incstack = 0
  6181                           ; Regs used in _Fosc_Set: [wreg]
  6182  0C21  303C               	movlw	60
  6183  0C22  1683               	bsf	3,5	;RP0=1, select bank1
  6184  0C23  1303               	bcf	3,6	;RP1=0, select bank1
  6185  0C24  0090               	movwf	16	;volatile
  6186  0C25  0008               	return
  6187  0C26                     __end_of_Fosc_Set:	
  6188                           
  6189                           	psect	text37
  6190  0C32                     __ptext37:	
  6191 ;; *************** function _ADC_Set *****************
  6192 ;; Defined at:
  6193 ;;		line 419 in file "../src/MCU_B1.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;		None
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;		None
  6198 ;; Return value:  Size  Location     Type
  6199 ;;		None               void
  6200 ;; Registers used:
  6201 ;;		wreg
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6207 ;;      Params:         0       0       0       0
  6208 ;;      Locals:         0       0       0       0
  6209 ;;      Temps:          0       0       0       0
  6210 ;;      Totals:         0       0       0       0
  6211 ;;Total ram usage:        0 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    2
  6214 ;; This function calls:
  6215 ;;		Nothing
  6216 ;; This function is called by:
  6217 ;;		_Mcu_Initialization
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           
  6222                           ;psect for function _ADC_Set
  6223  0C32                     _ADC_Set:	
  6224                           
  6225                           ;MCU_B1.c: 420: ADCON1 = 0x72;
  6226                           
  6227                           ;incstack = 0
  6228                           ; Regs used in _ADC_Set: [wreg]
  6229  0C32  3072               	movlw	114
  6230  0C33  1683               	bsf	3,5	;RP0=1, select bank1
  6231  0C34  1303               	bcf	3,6	;RP1=0, select bank1
  6232  0C35  009F               	movwf	31	;volatile
  6233                           
  6234                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  6235  0C36  30C1               	movlw	193
  6236  0C37  009D               	movwf	29	;volatile
  6237  0C38  0008               	return
  6238  0C39                     __end_of_ADC_Set:	
  6239                           
  6240                           	psect	text38
  6241  0352                     __ptext38:	
  6242 ;; *************** function _Load_Main *****************
  6243 ;; Defined at:
  6244 ;;		line 39 in file "../src/OverLoad_B1.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;		None
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  i               1    7[BANK0 ] unsigned char 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;		None               void
  6251 ;; Registers used:
  6252 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6258 ;;      Params:         0       0       0       0
  6259 ;;      Locals:         0       1       0       0
  6260 ;;      Temps:          0       2       0       0
  6261 ;;      Totals:         0       3       0       0
  6262 ;;Total ram usage:        3 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    5
  6265 ;; This function calls:
  6266 ;;		___lbdiv
  6267 ;;		___wmul
  6268 ;;		_getTemp_Safe
  6269 ;;		_setLights_Clear
  6270 ;;		_setLoad_AH_AL_Restore
  6271 ;;		_setLoad_Exceptions
  6272 ;; This function is called by:
  6273 ;;		_main
  6274 ;; This function uses a non-reentrant model
  6275 ;;
  6276                           
  6277                           
  6278                           ;psect for function _Load_Main
  6279  0352                     _Load_Main:	
  6280                           
  6281                           ;OverLoad_B1.c: 40: char i = 0;
  6282                           
  6283                           ;incstack = 0
  6284                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6285  0352  1283               	bcf	3,5	;RP0=0, select bank0
  6286  0353  1303               	bcf	3,6	;RP1=0, select bank0
  6287  0354  01E8               	clrf	Load_Main@i
  6288                           
  6289                           ;OverLoad_B1.c: 41: if (Load1.ERROR == 1) {
  6290  0355  1EAE               	btfss	_Load1,5
  6291  0356  2B6A               	goto	l602
  6292                           
  6293                           ;OverLoad_B1.c: 42: Load1.ErrorTime++;
  6294  0357  3001               	movlw	1
  6295  0358  07B1               	addwf	_Load1+3,f
  6296  0359  1803               	skipnc
  6297  035A  0AB2               	incf	_Load1+4,f
  6298  035B  3000               	movlw	0
  6299  035C  07B2               	addwf	_Load1+4,f
  6300                           
  6301                           ;OverLoad_B1.c: 43: if (Load1.ErrorTime >= 1000)
  6302  035D  3003               	movlw	3
  6303  035E  0232               	subwf	_Load1+4,w
  6304  035F  30E8               	movlw	232
  6305  0360  1903               	skipnz
  6306  0361  0231               	subwf	_Load1+3,w
  6307  0362  1C03               	skipc
  6308  0363  0008               	return
  6309                           
  6310                           ;OverLoad_B1.c: 44: {
  6311                           ;OverLoad_B1.c: 45: Load1.ErrorTime = 0;
  6312  0364  01B1               	clrf	_Load1+3
  6313  0365  01B2               	clrf	_Load1+4
  6314                           
  6315                           ;OverLoad_B1.c: 46: setLoad_Exceptions(0);
  6316  0366  3000               	movlw	0
  6317  0367  158A  269C         	fcall	_setLoad_Exceptions
  6318                           
  6319                           ;OverLoad_B1.c: 47: }
  6320                           ;OverLoad_B1.c: 48: } else {
  6321  0369  0008               	return
  6322  036A                     l602:	
  6323                           
  6324                           ;OverLoad_B1.c: 49: if (Load1.ADtoGO == 1) {
  6325  036A  1E2E               	btfss	_Load1,4
  6326  036B  2C41               	goto	l605
  6327                           
  6328                           ;OverLoad_B1.c: 50: Load1.Time++;
  6329  036C  3001               	movlw	1
  6330  036D  07AF               	addwf	_Load1+1,f
  6331  036E  1803               	skipnc
  6332  036F  0AB0               	incf	_Load1+2,f
  6333  0370  3000               	movlw	0
  6334  0371  07B0               	addwf	_Load1+2,f
  6335                           
  6336                           ;OverLoad_B1.c: 51: if (Load1.Time >= 5)
  6337  0372  3000               	movlw	0
  6338  0373  0230               	subwf	_Load1+2,w
  6339  0374  3005               	movlw	5
  6340  0375  1903               	skipnz
  6341  0376  022F               	subwf	_Load1+1,w
  6342  0377  1C03               	skipc
  6343  0378  0008               	return
  6344                           
  6345                           ;OverLoad_B1.c: 52: {
  6346                           ;OverLoad_B1.c: 53: Load1.Time = 0;
  6347  0379  01AF               	clrf	_Load1+1
  6348  037A  01B0               	clrf	_Load1+2
  6349                           
  6350                           ;OverLoad_B1.c: 54: Load1.ADtoGO = 0;
  6351  037B  122E               	bcf	_Load1,4
  6352                           
  6353                           ;OverLoad_B1.c: 55: Load1.LightsCount = Load1.Lights1Status + Load1.Lights2Status + Load
      +                          1.Lights3Status;
  6354  037C  084F               	movf	_Load1+33,w
  6355  037D  074E               	addwf	_Load1+32,w
  6356  037E  00E6               	movwf	??_Load_Main
  6357  037F  0850               	movf	_Load1+34,w
  6358  0380  0766               	addwf	??_Load_Main,w
  6359  0381  00E7               	movwf	??_Load_Main+1
  6360  0382  0867               	movf	??_Load_Main+1,w
  6361  0383  00CB               	movwf	_Load1+29
  6362                           
  6363                           ;OverLoad_B1.c: 56: for (i = 1; i < 4; i++) {
  6364  0384  01E8               	clrf	Load_Main@i
  6365  0385  0AE8               	incf	Load_Main@i,f
  6366  0386  3004               	movlw	4
  6367  0387  0268               	subwf	Load_Main@i,w
  6368  0388  1803               	btfsc	3,0
  6369  0389  2BA1               	goto	l4580
  6370  038A                     l4574:	
  6371                           
  6372                           ;OverLoad_B1.c: 57: Load1.ADH += Load1.AH[i];
  6373  038A  0868               	movf	Load_Main@i,w
  6374  038B  3E35               	addlw	(_Load1+7)& (0+255)
  6375  038C  0084               	movwf	4
  6376  038D  1383               	bcf	3,7	;select IRP bank0
  6377  038E  0800               	movf	0,w
  6378  038F  00E6               	movwf	??_Load_Main
  6379  0390  0866               	movf	??_Load_Main,w
  6380  0391  07C0               	addwf	_Load1+18,f
  6381                           
  6382                           ;OverLoad_B1.c: 58: Load1.ADL += Load1.AL[i];
  6383  0392  0868               	movf	Load_Main@i,w
  6384  0393  3E3A               	addlw	(_Load1+12)& (0+255)
  6385  0394  0084               	movwf	4
  6386  0395  0800               	movf	0,w
  6387  0396  00E6               	movwf	??_Load_Main
  6388  0397  0866               	movf	??_Load_Main,w
  6389  0398  07C1               	addwf	_Load1+19,f
  6390  0399  3001               	movlw	1
  6391  039A  00E6               	movwf	??_Load_Main
  6392  039B  0866               	movf	??_Load_Main,w
  6393  039C  07E8               	addwf	Load_Main@i,f
  6394  039D  3004               	movlw	4
  6395  039E  0268               	subwf	Load_Main@i,w
  6396  039F  1C03               	skipc
  6397  03A0  2B8A               	goto	l4574
  6398  03A1                     l4580:	
  6399                           
  6400                           ;OverLoad_B1.c: 59: }
  6401                           ;OverLoad_B1.c: 60: Load1.ADH /= 3;
  6402  03A1  3003               	movlw	3
  6403  03A2  00E6               	movwf	??_Load_Main
  6404  03A3  0866               	movf	??_Load_Main,w
  6405  03A4  00F4               	movwf	___lbdiv@divisor
  6406  03A5  0840               	movf	_Load1+18,w
  6407  03A6  158A  26BC  118A   	fcall	___lbdiv
  6408  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  6409  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  6410  03AB  00E7               	movwf	??_Load_Main+1
  6411  03AC  0867               	movf	??_Load_Main+1,w
  6412  03AD  00C0               	movwf	_Load1+18
  6413                           
  6414                           ;OverLoad_B1.c: 61: Load1.ADL /= 3;
  6415  03AE  3003               	movlw	3
  6416  03AF  00E6               	movwf	??_Load_Main
  6417  03B0  0866               	movf	??_Load_Main,w
  6418  03B1  00F4               	movwf	___lbdiv@divisor
  6419  03B2  0841               	movf	_Load1+19,w
  6420  03B3  158A  26BC  118A   	fcall	___lbdiv
  6421  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  6422  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  6423  03B8  00E7               	movwf	??_Load_Main+1
  6424  03B9  0867               	movf	??_Load_Main+1,w
  6425  03BA  00C1               	movwf	_Load1+19
  6426                           
  6427                           ;OverLoad_B1.c: 62: if (Load1.ADH > Load1.ADL) {
  6428  03BB  0840               	movf	_Load1+18,w
  6429  03BC  0241               	subwf	_Load1+19,w
  6430  03BD  1803               	skipnc
  6431  03BE  2C3E               	goto	l4638
  6432                           
  6433                           ;OverLoad_B1.c: 63: Load1.AD = (Load1.ADH - Load1.ADL);
  6434  03BF  0341               	decf	_Load1+19,w
  6435  03C0  3AFF               	xorlw	255
  6436  03C1  0740               	addwf	_Load1+18,w
  6437  03C2  00E6               	movwf	??_Load_Main
  6438  03C3  0866               	movf	??_Load_Main,w
  6439  03C4  00BF               	movwf	_Load1+17
  6440                           
  6441                           ;OverLoad_B1.c: 65: if (Load1.Count < 2) {
  6442  03C5  3002               	movlw	2
  6443  03C6  0249               	subwf	_Load1+27,w
  6444  03C7  1803               	skipnc
  6445  03C8  2BE7               	goto	l610
  6446                           
  6447                           ;OverLoad_B1.c: 66: Load1.Count++;
  6448  03C9  3001               	movlw	1
  6449  03CA  00E6               	movwf	??_Load_Main
  6450  03CB  0866               	movf	??_Load_Main,w
  6451  03CC  07C9               	addwf	_Load1+27,f
  6452                           
  6453                           ;OverLoad_B1.c: 67: if (Load1.Count == 1) {
  6454  03CD  0849               	movf	_Load1+27,w
  6455  03CE  3A01               	xorlw	1
  6456  03CF  1D03               	skipz
  6457  03D0  2BD4               	goto	l4594
  6458                           
  6459                           ;OverLoad_B1.c: 68: Load1.JudgeValue = 500;
  6460  03D1  30F4               	movlw	244
  6461  03D2  00C5               	movwf	_Load1+23
  6462  03D3  2BE5               	goto	L17
  6463  03D4                     l4594:	
  6464                           ;OverLoad_B1.c: 69: } else if (Load1.Count == 2) {
  6465                           
  6466  03D4  0849               	movf	_Load1+27,w
  6467  03D5  3A02               	xorlw	2
  6468  03D6  1D03               	skipz
  6469  03D7  2BE7               	goto	l610
  6470                           
  6471                           ;OverLoad_B1.c: 70: if (Load1.LightsCount == 1) {
  6472  03D8  084B               	movf	_Load1+29,w
  6473  03D9  3A01               	xorlw	1
  6474  03DA  1D03               	skipz
  6475  03DB  2BE0               	goto	l4600
  6476                           
  6477                           ;OverLoad_B1.c: 71: Load1.JudgeValue = 0x42;
  6478  03DC  3042               	movlw	66
  6479  03DD  00C5               	movwf	_Load1+23
  6480  03DE  3000               	movlw	0
  6481  03DF  2BE6               	goto	L16
  6482  03E0                     l4600:	
  6483                           ;OverLoad_B1.c: 72: } else {
  6484                           
  6485                           
  6486                           ;OverLoad_B1.c: 73: Load1.JudgeValue = (0x42 + Load1.TotalLoad) - 0x08;
  6487  03E0  0834               	movf	_Load1+6,w
  6488  03E1  3E3A               	addlw	58
  6489  03E2  00C5               	movwf	_Load1+23
  6490  03E3  3000               	movlw	0
  6491  03E4  1803               	skipnc
  6492  03E5                     L17:	
  6493  03E5  3001               	movlw	1
  6494  03E6                     L16:	
  6495  03E6  00C6               	movwf	_Load1+24
  6496  03E7                     l610:	
  6497                           
  6498                           ;OverLoad_B1.c: 74: }
  6499                           ;OverLoad_B1.c: 75: }
  6500                           ;OverLoad_B1.c: 76: }
  6501                           ;OverLoad_B1.c: 78: if (Load1.AD >= Load1.JudgeValue) {
  6502  03E7  083F               	movf	_Load1+17,w
  6503  03E8  00E6               	movwf	??_Load_Main
  6504  03E9  01E7               	clrf	??_Load_Main+1
  6505  03EA  0846               	movf	_Load1+24,w
  6506  03EB  0267               	subwf	??_Load_Main+1,w
  6507  03EC  1D03               	skipz
  6508  03ED  2BF0               	goto	u5165
  6509  03EE  0845               	movf	_Load1+23,w
  6510  03EF  0266               	subwf	??_Load_Main,w
  6511  03F0                     u5165:	
  6512  03F0  1C03               	skipc
  6513  03F1  2C00               	goto	l4610
  6514                           
  6515                           ;OverLoad_B1.c: 79: Load1.ErrorCount++;
  6516  03F2  3001               	movlw	1
  6517  03F3  00E6               	movwf	??_Load_Main
  6518  03F4  0866               	movf	??_Load_Main,w
  6519  03F5  07CA               	addwf	_Load1+28,f
  6520                           
  6521                           ;OverLoad_B1.c: 80: if (Load1.ErrorCount > 2) {
  6522  03F6  3003               	movlw	3
  6523  03F7  024A               	subwf	_Load1+28,w
  6524  03F8  1C03               	skipc
  6525  03F9  2C3E               	goto	l4638
  6526                           
  6527                           ;OverLoad_B1.c: 81: Load1.ErrorCount = 0;
  6528  03FA  01CA               	clrf	_Load1+28
  6529                           
  6530                           ;OverLoad_B1.c: 82: setLoad_Exceptions(1);
  6531  03FB  3001               	movlw	1
  6532  03FC  158A  269C  118A   	fcall	_setLoad_Exceptions
  6533                           
  6534                           ;OverLoad_B1.c: 90: }
  6535                           ;OverLoad_B1.c: 91: } else {
  6536  03FF  2C3E               	goto	l4638
  6537  0400                     l4610:	
  6538                           
  6539                           ;OverLoad_B1.c: 92: RB3 = RB3 == 1 ? 0 : 1;
  6540  0400  3008               	movlw	8
  6541  0401  1283               	bcf	3,5	;RP0=0, select bank0
  6542  0402  1303               	bcf	3,6	;RP1=0, select bank0
  6543  0403  0686               	xorwf	6,f
  6544                           
  6545                           ;OverLoad_B1.c: 93: Load1.ErrorCount = 0;
  6546  0404  01CA               	clrf	_Load1+28
  6547                           
  6548                           ;OverLoad_B1.c: 94: if (Load1.SafeCount < 10) {
  6549  0405  300A               	movlw	10
  6550  0406  024D               	subwf	_Load1+31,w
  6551  0407  1803               	skipnc
  6552  0408  2C0D               	goto	l4618
  6553                           
  6554                           ;OverLoad_B1.c: 95: Load1.SafeCount++;
  6555  0409  3001               	movlw	1
  6556  040A  00E6               	movwf	??_Load_Main
  6557  040B  0866               	movf	??_Load_Main,w
  6558  040C  07CD               	addwf	_Load1+31,f
  6559  040D                     l4618:	
  6560                           
  6561                           ;OverLoad_B1.c: 96: }
  6562                           ;OverLoad_B1.c: 97: if (Load1.SafeCount >= 10) {
  6563  040D  300A               	movlw	10
  6564  040E  024D               	subwf	_Load1+31,w
  6565  040F  1C03               	skipc
  6566  0410  2C3E               	goto	l4638
  6567                           
  6568                           ;OverLoad_B1.c: 98: Load1.Safe = 1;
  6569  0411  15AE               	bsf	_Load1,3
  6570                           
  6571                           ;OverLoad_B1.c: 106: setLights_Clear(1, 1);
  6572  0412  01E1               	clrf	setLights_Clear@command
  6573  0413  0AE1               	incf	setLights_Clear@command,f
  6574  0414  3001               	movlw	1
  6575  0415  158A  2537  118A   	fcall	_setLights_Clear
  6576                           
  6577                           ;OverLoad_B1.c: 130: if (Load1.StatusOn == 1) {
  6578  0418  1283               	bcf	3,5	;RP0=0, select bank0
  6579  0419  1303               	bcf	3,6	;RP1=0, select bank0
  6580  041A  1F2E               	btfss	_Load1,6
  6581  041B  2C21               	goto	l4630
  6582                           
  6583                           ;OverLoad_B1.c: 131: Load1.StatusOn = 0;
  6584  041C  132E               	bcf	_Load1,6
  6585                           
  6586                           ;OverLoad_B1.c: 132: Load1.TotalLoad = Load1.AD;
  6587  041D  083F               	movf	_Load1+17,w
  6588  041E  00E6               	movwf	??_Load_Main
  6589  041F  0866               	movf	??_Load_Main,w
  6590  0420  00B4               	movwf	_Load1+6
  6591  0421                     l4630:	
  6592                           
  6593                           ;OverLoad_B1.c: 134: }
  6594                           ;OverLoad_B1.c: 136: if (Load1.StatusOff == 1) {
  6595  0421  1FAE               	btfss	_Load1,7
  6596  0422  2C3E               	goto	l4638
  6597                           
  6598                           ;OverLoad_B1.c: 137: Load1.StatusOff = 0;
  6599  0423  13AE               	bcf	_Load1,7
  6600                           
  6601                           ;OverLoad_B1.c: 138: Load1.TotalLoad = Load1.AD;
  6602  0424  083F               	movf	_Load1+17,w
  6603  0425  00E6               	movwf	??_Load_Main
  6604  0426  0866               	movf	??_Load_Main,w
  6605  0427  00B4               	movwf	_Load1+6
  6606                           
  6607                           ;OverLoad_B1.c: 139: Load1.JudgeValue = 0x42 * Load1.LightsCount;
  6608  0428  084B               	movf	_Load1+29,w
  6609  0429  00E6               	movwf	??_Load_Main
  6610  042A  01E7               	clrf	??_Load_Main+1
  6611  042B  0866               	movf	??_Load_Main,w
  6612  042C  00E1               	movwf	___wmul@multiplier
  6613  042D  0867               	movf	??_Load_Main+1,w
  6614  042E  00E2               	movwf	___wmul@multiplier+1
  6615  042F  3042               	movlw	66
  6616  0430  00E3               	movwf	___wmul@multiplicand
  6617  0431  3000               	movlw	0
  6618  0432  00E4               	movwf	___wmul@multiplicand+1
  6619  0433  158A  26DF  118A   	fcall	___wmul
  6620  0436  1283               	bcf	3,5	;RP0=0, select bank0
  6621  0437  1303               	bcf	3,6	;RP1=0, select bank0
  6622  0438  0862               	movf	?___wmul+1,w
  6623  0439  01C6               	clrf	_Load1+24
  6624  043A  07C6               	addwf	_Load1+24,f
  6625  043B  0861               	movf	?___wmul,w
  6626  043C  01C5               	clrf	_Load1+23
  6627  043D  07C5               	addwf	_Load1+23,f
  6628  043E                     l4638:	
  6629                           
  6630                           ;OverLoad_B1.c: 140: }
  6631                           ;OverLoad_B1.c: 141: }
  6632                           ;OverLoad_B1.c: 142: }
  6633                           ;OverLoad_B1.c: 143: }
  6634                           ;OverLoad_B1.c: 144: setLoad_AH_AL_Restore();
  6635  043E  158A  25D8         	fcall	_setLoad_AH_AL_Restore
  6636                           
  6637                           ;OverLoad_B1.c: 156: }
  6638                           ;OverLoad_B1.c: 157: } else {
  6639  0440  0008               	return
  6640  0441                     l605:	
  6641                           
  6642                           ;OverLoad_B1.c: 158: if (Load1.GO == 1) {
  6643  0441  1CAE               	btfss	_Load1,1
  6644  0442  2C51               	goto	l624
  6645                           
  6646                           ;OverLoad_B1.c: 159: if (Load1.LightsON == 0) {
  6647  0443  192E               	btfsc	_Load1,2
  6648  0444  2C47               	goto	l4644
  6649                           
  6650                           ;OverLoad_B1.c: 160: Load1.LightsON = 1;
  6651  0445  152E               	bsf	_Load1,2
  6652                           
  6653                           ;OverLoad_B1.c: 161: Load1.Safe = 0;
  6654  0446  11AE               	bcf	_Load1,3
  6655  0447                     l4644:	
  6656                           
  6657                           ;OverLoad_B1.c: 162: }
  6658                           ;OverLoad_B1.c: 163: if (getTemp_Safe() == 1 && 1 == 1) {
  6659  0447  158A  2441  118A   	fcall	_getTemp_Safe
  6660  044A  3A01               	xorlw	1
  6661  044B  1D03               	skipz
  6662  044C  0008               	return
  6663                           
  6664                           ;OverLoad_B1.c: 164: Load1.ADtoGO = 1;
  6665  044D  1283               	bcf	3,5	;RP0=0, select bank0
  6666  044E  1303               	bcf	3,6	;RP1=0, select bank0
  6667  044F  162E               	bsf	_Load1,4
  6668                           
  6669                           ;OverLoad_B1.c: 165: }
  6670                           ;OverLoad_B1.c: 166: } else {
  6671  0450  0008               	return
  6672  0451                     l624:	
  6673                           
  6674                           ;OverLoad_B1.c: 167: if (Load1.LightsON == 1) {
  6675  0451  1D2E               	btfss	_Load1,2
  6676  0452  0008               	return
  6677                           
  6678                           ;OverLoad_B1.c: 168: Load1.LightsON = 0;
  6679  0453  112E               	bcf	_Load1,2
  6680                           
  6681                           ;OverLoad_B1.c: 169: Load1.Safe = 1;
  6682  0454  15AE               	bsf	_Load1,3
  6683                           
  6684                           ;OverLoad_B1.c: 170: Load1.ErrorCount = 0;
  6685  0455  01CA               	clrf	_Load1+28
  6686                           
  6687                           ;OverLoad_B1.c: 171: Load1.Count = 0;
  6688  0456  01C9               	clrf	_Load1+27
  6689                           
  6690                           ;OverLoad_B1.c: 172: Load1.TotalLoad = 0;
  6691  0457  01B4               	clrf	_Load1+6
  6692                           
  6693                           ;OverLoad_B1.c: 173: Load1.StatusOn = 0;
  6694  0458  132E               	bcf	_Load1,6
  6695                           
  6696                           ;OverLoad_B1.c: 174: Load1.StatusOff = 0;
  6697  0459  13AE               	bcf	_Load1,7
  6698                           
  6699                           ;OverLoad_B1.c: 175: Load1.AD = 0;
  6700  045A  01BF               	clrf	_Load1+17
  6701                           
  6702                           ;OverLoad_B1.c: 176: setLoad_AH_AL_Restore();
  6703  045B  158A  25D8  118A   	fcall	_setLoad_AH_AL_Restore
  6704                           
  6705                           ;OverLoad_B1.c: 184: setLights_Clear(1, 1);
  6706  045E  1283               	bcf	3,5	;RP0=0, select bank0
  6707  045F  1303               	bcf	3,6	;RP1=0, select bank0
  6708  0460  01E1               	clrf	setLights_Clear@command
  6709  0461  0AE1               	incf	setLights_Clear@command,f
  6710  0462  3001               	movlw	1
  6711  0463  158A  2537         	fcall	_setLights_Clear
  6712  0465  0008               	return
  6713  0466                     __end_of_Load_Main:	
  6714                           
  6715                           	psect	text39
  6716  0E9C                     __ptext39:	
  6717 ;; *************** function _setLoad_Exceptions *****************
  6718 ;; Defined at:
  6719 ;;		line 230 in file "../src/OverLoad_B1.c"
  6720 ;; Parameters:    Size  Location     Type
  6721 ;;  command         1    wreg     unsigned char 
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;  command         1    4[BANK0 ] unsigned char 
  6724 ;;  i               1    3[BANK0 ] unsigned char 
  6725 ;; Return value:  Size  Location     Type
  6726 ;;		None               void
  6727 ;; Registers used:
  6728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6734 ;;      Params:         0       0       0       0
  6735 ;;      Locals:         0       2       0       0
  6736 ;;      Temps:          0       1       0       0
  6737 ;;      Totals:         0       3       0       0
  6738 ;;Total ram usage:        3 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    4
  6741 ;; This function calls:
  6742 ;;		_setLED
  6743 ;; This function is called by:
  6744 ;;		_Load_Main
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           
  6749                           ;psect for function _setLoad_Exceptions
  6750  0E9C                     _setLoad_Exceptions:	
  6751                           
  6752                           ;incstack = 0
  6753                           ; Regs used in _setLoad_Exceptions: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6754                           ;setLoad_Exceptions@command stored from wreg
  6755  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  6756  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  6757  0E9E  00E5               	movwf	setLoad_Exceptions@command
  6758                           
  6759                           ;OverLoad_B1.c: 231: char i = command == 1 ? 0 : 1;
  6760  0E9F  0865               	movf	setLoad_Exceptions@command,w
  6761  0EA0  3A01               	xorlw	1
  6762  0EA1  3000               	movlw	0
  6763  0EA2  1D03               	skipz
  6764  0EA3  3001               	movlw	1
  6765  0EA4  00E3               	movwf	??_setLoad_Exceptions
  6766  0EA5  0863               	movf	??_setLoad_Exceptions,w
  6767  0EA6  00E4               	movwf	setLoad_Exceptions@i
  6768                           
  6769                           ;OverLoad_B1.c: 232: Load1.ERROR = command;
  6770  0EA7  0865               	movf	setLoad_Exceptions@command,w
  6771  0EA8  12AE               	bcf	_Load1,5
  6772  0EA9  1D03               	skipz
  6773  0EAA  16AE               	bsf	_Load1,5
  6774                           
  6775                           ;OverLoad_B1.c: 233: Load1.Safe = i;
  6776  0EAB  0864               	movf	setLoad_Exceptions@i,w
  6777  0EAC  11AE               	bcf	_Load1,3
  6778  0EAD  1D03               	skipz
  6779  0EAE  15AE               	bsf	_Load1,3
  6780                           
  6781                           ;OverLoad_B1.c: 236: if (command == 1) {
  6782  0EAF  0865               	movf	setLoad_Exceptions@command,w
  6783  0EB0  00E3               	movwf	??_setLoad_Exceptions
  6784  0EB1  0863               	movf	??_setLoad_Exceptions,w
  6785  0EB2  00B3               	movwf	_Load1+5
  6786                           
  6787                           ;OverLoad_B1.c: 241: }
  6788                           ;OverLoad_B1.c: 242: setLED(99, command + 10);
  6789                           
  6790                           ;OverLoad_B1.c: 237: ;;
  6791  0EB3  0865               	movf	setLoad_Exceptions@command,w
  6792  0EB4  3E0A               	addlw	10
  6793  0EB5  00E3               	movwf	??_setLoad_Exceptions
  6794  0EB6  0863               	movf	??_setLoad_Exceptions,w
  6795  0EB7  00E1               	movwf	setLED@command
  6796  0EB8  3063               	movlw	99
  6797  0EB9  118A  2620         	fcall	_setLED
  6798  0EBB  0008               	return
  6799  0EBC                     __end_of_setLoad_Exceptions:	
  6800                           
  6801                           	psect	text40
  6802  0D37                     __ptext40:	
  6803 ;; *************** function _setLights_Clear *****************
  6804 ;; Defined at:
  6805 ;;		line 155 in file "../src/TriacRelay_B1.c"
  6806 ;; Parameters:    Size  Location     Type
  6807 ;;  lights          1    wreg     unsigned char 
  6808 ;;  command         1    0[BANK0 ] unsigned char 
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  lights          1    1[BANK0 ] unsigned char 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;		None               void
  6813 ;; Registers used:
  6814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6820 ;;      Params:         0       1       0       0
  6821 ;;      Locals:         0       1       0       0
  6822 ;;      Temps:          0       0       0       0
  6823 ;;      Totals:         0       2       0       0
  6824 ;;Total ram usage:        2 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:    3
  6827 ;; This function calls:
  6828 ;;		_LightsPointSelect
  6829 ;; This function is called by:
  6830 ;;		_Load_Main
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           
  6835                           ;psect for function _setLights_Clear
  6836  0D37                     _setLights_Clear:	
  6837                           
  6838                           ;incstack = 0
  6839                           ; Regs used in _setLights_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6840                           ;setLights_Clear@lights stored from wreg
  6841  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  6842  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  6843  0D39  00E2               	movwf	setLights_Clear@lights
  6844                           
  6845                           ;TriacRelay_B1.c: 156: LightsPointSelect(lights);
  6846  0D3A  0862               	movf	setLights_Clear@lights,w
  6847  0D3B  158A  248D         	fcall	_LightsPointSelect
  6848                           
  6849                           ;TriacRelay_B1.c: 157: Lights->Clear = command;
  6850  0D3D  1283               	bcf	3,5	;RP0=0, select bank0
  6851  0D3E  1303               	bcf	3,6	;RP1=0, select bank0
  6852  0D3F  0A2D               	incf	_Lights,w
  6853  0D40  0084               	movwf	4
  6854  0D41  0861               	movf	setLights_Clear@command,w
  6855  0D42  1383               	bcf	3,7	;select IRP bank0
  6856  0D43  1080               	bcf	0,1
  6857  0D44  1D03               	skipz
  6858  0D45  1480               	bsf	0,1
  6859  0D46  0008               	return
  6860  0D47                     __end_of_setLights_Clear:	
  6861                           
  6862                           	psect	text41
  6863  0C41                     __ptext41:	
  6864 ;; *************** function _getTemp_Safe *****************
  6865 ;; Defined at:
  6866 ;;		line 21 in file "../src/OverTemperature_B1.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;  result          1    4[COMMON] unsigned char 
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      unsigned char 
  6873 ;; Registers used:
  6874 ;;		wreg, status,2
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6880 ;;      Params:         0       0       0       0
  6881 ;;      Locals:         1       0       0       0
  6882 ;;      Temps:          0       0       0       0
  6883 ;;      Totals:         1       0       0       0
  6884 ;;Total ram usage:        1 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    2
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_Load_Main
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           
  6895                           ;psect for function _getTemp_Safe
  6896  0C41                     _getTemp_Safe:	
  6897                           
  6898                           ;OverTemperature_B1.c: 22: char result = Temp.Safe;
  6899                           
  6900                           ;incstack = 0
  6901                           ; Regs used in _getTemp_Safe: [wreg+status,2]
  6902  0C41  3000               	movlw	0
  6903  0C42  1283               	bcf	3,5	;RP0=0, select bank0
  6904  0C43  1303               	bcf	3,6	;RP1=0, select bank0
  6905  0C44  1A51               	btfsc	_Temp,4
  6906  0C45  3001               	movlw	1
  6907  0C46  00F4               	movwf	getTemp_Safe@result
  6908                           
  6909                           ;OverTemperature_B1.c: 23: return result;
  6910  0C47  0874               	movf	getTemp_Safe@result,w
  6911  0C48  0008               	return
  6912  0C49                     __end_of_getTemp_Safe:	
  6913                           
  6914                           	psect	text42
  6915  0EDF                     __ptext42:	
  6916 ;; *************** function ___wmul *****************
  6917 ;; Defined at:
  6918 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6921 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;  product         2    4[COMMON] unsigned int 
  6924 ;; Return value:  Size  Location     Type
  6925 ;;                  2    0[BANK0 ] unsigned int 
  6926 ;; Registers used:
  6927 ;;		wreg, status,2, status,0
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6933 ;;      Params:         0       4       0       0
  6934 ;;      Locals:         2       0       0       0
  6935 ;;      Temps:          0       0       0       0
  6936 ;;      Totals:         2       4       0       0
  6937 ;;Total ram usage:        6 bytes
  6938 ;; Hardware stack levels used:    1
  6939 ;; Hardware stack levels required when called:    2
  6940 ;; This function calls:
  6941 ;;		Nothing
  6942 ;; This function is called by:
  6943 ;;		_Load_Main
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           
  6948                           ;psect for function ___wmul
  6949  0EDF                     ___wmul:	
  6950                           
  6951                           ;incstack = 0
  6952                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6953  0EDF  01F4               	clrf	___wmul@product
  6954  0EE0  01F5               	clrf	___wmul@product+1
  6955  0EE1                     l4310:	
  6956  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  6957  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  6958  0EE3  1C61               	btfss	___wmul@multiplier,0
  6959  0EE4  2EEB               	goto	l1185
  6960  0EE5  0863               	movf	___wmul@multiplicand,w
  6961  0EE6  07F4               	addwf	___wmul@product,f
  6962  0EE7  1803               	skipnc
  6963  0EE8  0AF5               	incf	___wmul@product+1,f
  6964  0EE9  0864               	movf	___wmul@multiplicand+1,w
  6965  0EEA  07F5               	addwf	___wmul@product+1,f
  6966  0EEB                     l1185:	
  6967  0EEB  3001               	movlw	1
  6968  0EEC                     u4615:	
  6969  0EEC  1003               	clrc
  6970  0EED  0DE3               	rlf	___wmul@multiplicand,f
  6971  0EEE  0DE4               	rlf	___wmul@multiplicand+1,f
  6972  0EEF  3EFF               	addlw	-1
  6973  0EF0  1D03               	skipz
  6974  0EF1  2EEC               	goto	u4615
  6975  0EF2  3001               	movlw	1
  6976  0EF3                     u4625:	
  6977  0EF3  1003               	clrc
  6978  0EF4  0CE2               	rrf	___wmul@multiplier+1,f
  6979  0EF5  0CE1               	rrf	___wmul@multiplier,f
  6980  0EF6  3EFF               	addlw	-1
  6981  0EF7  1D03               	skipz
  6982  0EF8  2EF3               	goto	u4625
  6983  0EF9  0862               	movf	___wmul@multiplier+1,w
  6984  0EFA  0461               	iorwf	___wmul@multiplier,w
  6985  0EFB  1D03               	skipz
  6986  0EFC  2EE1               	goto	l4310
  6987  0EFD  0875               	movf	___wmul@product+1,w
  6988  0EFE  01E2               	clrf	?___wmul+1
  6989  0EFF  07E2               	addwf	?___wmul+1,f
  6990  0F00  0874               	movf	___wmul@product,w
  6991  0F01  01E1               	clrf	?___wmul
  6992  0F02  07E1               	addwf	?___wmul,f
  6993  0F03  0008               	return
  6994  0F04                     __end_of___wmul:	
  6995                           
  6996                           	psect	text43
  6997  0EBC                     __ptext43:	
  6998 ;; *************** function ___lbdiv *****************
  6999 ;; Defined at:
  7000 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;  dividend        1    wreg     unsigned char 
  7003 ;;  divisor         1    4[COMMON] unsigned char 
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  dividend        1    0[BANK0 ] unsigned char 
  7006 ;;  quotient        1    2[BANK0 ] unsigned char 
  7007 ;;  counter         1    1[BANK0 ] unsigned char 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  1    wreg      unsigned char 
  7010 ;; Registers used:
  7011 ;;		wreg, status,2, status,0
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7017 ;;      Params:         1       0       0       0
  7018 ;;      Locals:         0       3       0       0
  7019 ;;      Temps:          1       0       0       0
  7020 ;;      Totals:         2       3       0       0
  7021 ;;Total ram usage:        5 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    2
  7024 ;; This function calls:
  7025 ;;		Nothing
  7026 ;; This function is called by:
  7027 ;;		_Load_Main
  7028 ;; This function uses a non-reentrant model
  7029 ;;
  7030                           
  7031                           
  7032                           ;psect for function ___lbdiv
  7033  0EBC                     ___lbdiv:	
  7034                           
  7035                           ;incstack = 0
  7036                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  7037                           ;___lbdiv@dividend stored from wreg
  7038  0EBC  1283               	bcf	3,5	;RP0=0, select bank0
  7039  0EBD  1303               	bcf	3,6	;RP1=0, select bank0
  7040  0EBE  00E1               	movwf	___lbdiv@dividend
  7041  0EBF  01E3               	clrf	___lbdiv@quotient
  7042  0EC0  0874               	movf	___lbdiv@divisor,w
  7043  0EC1  1903               	btfsc	3,2
  7044  0EC2  2EDD               	goto	l4342
  7045  0EC3  01E2               	clrf	___lbdiv@counter
  7046  0EC4  0AE2               	incf	___lbdiv@counter,f
  7047  0EC5                     l4330:	
  7048  0EC5  1BF4               	btfsc	___lbdiv@divisor,7
  7049  0EC6  2ECE               	goto	l4332
  7050  0EC7  1003               	clrc
  7051  0EC8  0DF4               	rlf	___lbdiv@divisor,f
  7052  0EC9  3001               	movlw	1
  7053  0ECA  00F5               	movwf	??___lbdiv
  7054  0ECB  0875               	movf	??___lbdiv,w
  7055  0ECC  07E2               	addwf	___lbdiv@counter,f
  7056  0ECD  2EC5               	goto	l4330
  7057  0ECE                     l4332:	
  7058  0ECE  1003               	clrc
  7059  0ECF  0DE3               	rlf	___lbdiv@quotient,f
  7060  0ED0  0874               	movf	___lbdiv@divisor,w
  7061  0ED1  0261               	subwf	___lbdiv@dividend,w
  7062  0ED2  1C03               	skipc
  7063  0ED3  2ED8               	goto	L18
  7064  0ED4  0874               	movf	___lbdiv@divisor,w
  7065  0ED5  02E1               	subwf	___lbdiv@dividend,f
  7066  0ED6  1463               	bsf	___lbdiv@quotient,0
  7067  0ED7  1003               	clrc
  7068  0ED8                     L18:	
  7069  0ED8  0CF4               	rrf	___lbdiv@divisor,f
  7070  0ED9  3001               	movlw	1
  7071  0EDA  02E2               	subwf	___lbdiv@counter,f
  7072  0EDB  1D03               	btfss	3,2
  7073  0EDC  2ECE               	goto	l4332
  7074  0EDD                     l4342:	
  7075  0EDD  0863               	movf	___lbdiv@quotient,w
  7076  0EDE  0008               	return
  7077  0EDF                     __end_of___lbdiv:	
  7078                           
  7079                           	psect	text44
  7080  0C26                     __ptext44:	
  7081 ;; *************** function _Load_Initialization *****************
  7082 ;; Defined at:
  7083 ;;		line 9 in file "../src/OverLoad_B1.c"
  7084 ;; Parameters:    Size  Location     Type
  7085 ;;		None
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;		None
  7088 ;; Return value:  Size  Location     Type
  7089 ;;		None               void
  7090 ;; Registers used:
  7091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7097 ;;      Params:         0       0       0       0
  7098 ;;      Locals:         0       0       0       0
  7099 ;;      Temps:          0       0       0       0
  7100 ;;      Totals:         0       0       0       0
  7101 ;;Total ram usage:        0 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    3
  7104 ;; This function calls:
  7105 ;;		_setLoad_AH_AL_Restore
  7106 ;; This function is called by:
  7107 ;;		_main
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           
  7112                           ;psect for function _Load_Initialization
  7113  0C26                     _Load_Initialization:	
  7114                           
  7115                           ;OverLoad_B1.c: 10: Load1.Safe = 1;
  7116                           
  7117                           ;incstack = 0
  7118                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7119  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  7120  0C27  1303               	bcf	3,6	;RP1=0, select bank0
  7121  0C28  15AE               	bsf	_Load1,3
  7122                           
  7123                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  7124  0C29  158A  25D8         	fcall	_setLoad_AH_AL_Restore
  7125  0C2B  0008               	return
  7126  0C2C                     __end_of_Load_Initialization:	
  7127                           
  7128                           	psect	text45
  7129  0DD8                     __ptext45:	
  7130 ;; *************** function _setLoad_AH_AL_Restore *****************
  7131 ;; Defined at:
  7132 ;;		line 319 in file "../src/OverLoad_B1.c"
  7133 ;; Parameters:    Size  Location     Type
  7134 ;;		None
  7135 ;; Auto vars:     Size  Location     Type
  7136 ;;  i               1    5[COMMON] unsigned char 
  7137 ;; Return value:  Size  Location     Type
  7138 ;;		None               void
  7139 ;; Registers used:
  7140 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7141 ;; Tracked objects:
  7142 ;;		On entry : 0/0
  7143 ;;		On exit  : 0/0
  7144 ;;		Unchanged: 0/0
  7145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7146 ;;      Params:         0       0       0       0
  7147 ;;      Locals:         1       0       0       0
  7148 ;;      Temps:          1       0       0       0
  7149 ;;      Totals:         2       0       0       0
  7150 ;;Total ram usage:        2 bytes
  7151 ;; Hardware stack levels used:    1
  7152 ;; Hardware stack levels required when called:    2
  7153 ;; This function calls:
  7154 ;;		Nothing
  7155 ;; This function is called by:
  7156 ;;		_Load_Initialization
  7157 ;;		_Load_Main
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           
  7162                           ;psect for function _setLoad_AH_AL_Restore
  7163  0DD8                     _setLoad_AH_AL_Restore:	
  7164                           
  7165                           ;OverLoad_B1.c: 320: char i;
  7166                           ;OverLoad_B1.c: 321: for (i = 0; i < 5; i++) {
  7167                           
  7168                           ;incstack = 0
  7169                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  7170  0DD8  01F5               	clrf	setLoad_AH_AL_Restore@i
  7171  0DD9                     L19:	
  7172  0DD9  3005               	movlw	5
  7173  0DDA  0275               	subwf	setLoad_AH_AL_Restore@i,w
  7174  0DDB  1803               	btfsc	3,0
  7175  0DDC  0008               	return
  7176                           
  7177                           ;OverLoad_B1.c: 322: Load1.AH[i] = 0;
  7178  0DDD  0875               	movf	setLoad_AH_AL_Restore@i,w
  7179  0DDE  3E35               	addlw	(_Load1+7)& (0+255)
  7180  0DDF  0084               	movwf	4
  7181  0DE0  1383               	bcf	3,7	;select IRP bank0
  7182  0DE1  0180               	clrf	0
  7183                           
  7184                           ;OverLoad_B1.c: 323: Load1.AL[i] = 0xff;
  7185  0DE2  30FF               	movlw	255
  7186  0DE3  00F4               	movwf	??_setLoad_AH_AL_Restore
  7187  0DE4  0875               	movf	setLoad_AH_AL_Restore@i,w
  7188  0DE5  3E3A               	addlw	(_Load1+12)& (0+255)
  7189  0DE6  0084               	movwf	4
  7190  0DE7  0874               	movf	??_setLoad_AH_AL_Restore,w
  7191  0DE8  0080               	movwf	0
  7192  0DE9  3001               	movlw	1
  7193  0DEA  00F4               	movwf	??_setLoad_AH_AL_Restore
  7194  0DEB  0874               	movf	??_setLoad_AH_AL_Restore,w
  7195  0DEC  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  7196  0DED  2DD9               	goto	L19
  7197  0DEE                     __end_of_setLoad_AH_AL_Restore:	
  7198                           
  7199                           	psect	text46
  7200  0C6A                     __ptext46:	
  7201 ;; *************** function _Lights_Main *****************
  7202 ;; Defined at:
  7203 ;;		line 53 in file "../src/TriacRelay_B1.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;		None
  7206 ;; Auto vars:     Size  Location     Type
  7207 ;;		None
  7208 ;; Return value:  Size  Location     Type
  7209 ;;		None               void
  7210 ;; Registers used:
  7211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7212 ;; Tracked objects:
  7213 ;;		On entry : 0/0
  7214 ;;		On exit  : 0/0
  7215 ;;		Unchanged: 0/0
  7216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7217 ;;      Params:         0       0       0       0
  7218 ;;      Locals:         0       0       0       0
  7219 ;;      Temps:          0       0       0       0
  7220 ;;      Totals:         0       0       0       0
  7221 ;;Total ram usage:        0 bytes
  7222 ;; Hardware stack levels used:    1
  7223 ;; Hardware stack levels required when called:    5
  7224 ;; This function calls:
  7225 ;;		_Lights_Close
  7226 ;;		_Lights_Control
  7227 ;;		_setLights_Main
  7228 ;; This function is called by:
  7229 ;;		_main
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           
  7234                           ;psect for function _Lights_Main
  7235  0C6A                     _Lights_Main:	
  7236                           
  7237                           ;TriacRelay_B1.c: 55: setLights_Main(1);
  7238                           
  7239                           ;incstack = 0
  7240                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7241  0C6A  3001               	movlw	1
  7242  0C6B  158A  2787  158A   	fcall	_setLights_Main
  7243                           
  7244                           ;TriacRelay_B1.c: 67: Lights_Control(1);
  7245  0C6E  3001               	movlw	1
  7246  0C6F  118A  26D7  158A   	fcall	_Lights_Control
  7247                           
  7248                           ;TriacRelay_B1.c: 78: Lights_Close();
  7249  0C72  158A  2626         	fcall	_Lights_Close
  7250  0C74  0008               	return
  7251  0C75                     __end_of_Lights_Main:	
  7252                           
  7253                           	psect	text47
  7254  0F87                     __ptext47:	
  7255 ;; *************** function _setLights_Main *****************
  7256 ;; Defined at:
  7257 ;;		line 107 in file "../src/TriacRelay_B1.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;  lights          1    wreg     unsigned char 
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;  lights          1    4[BANK0 ] unsigned char 
  7262 ;;  clear           1    3[BANK0 ] unsigned char 
  7263 ;; Return value:  Size  Location     Type
  7264 ;;		None               void
  7265 ;; Registers used:
  7266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7267 ;; Tracked objects:
  7268 ;;		On entry : 0/0
  7269 ;;		On exit  : 0/0
  7270 ;;		Unchanged: 0/0
  7271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7272 ;;      Params:         0       0       0       0
  7273 ;;      Locals:         0       2       0       0
  7274 ;;      Temps:          0       0       0       0
  7275 ;;      Totals:         0       2       0       0
  7276 ;;Total ram usage:        2 bytes
  7277 ;; Hardware stack levels used:    1
  7278 ;; Hardware stack levels required when called:    4
  7279 ;; This function calls:
  7280 ;;		_LightsPointSelect
  7281 ;;		_setLights
  7282 ;; This function is called by:
  7283 ;;		_Lights_Main
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           
  7288                           ;psect for function _setLights_Main
  7289  0F87                     _setLights_Main:	
  7290                           
  7291                           ;incstack = 0
  7292                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7293                           ;setLights_Main@lights stored from wreg
  7294  0F87  1283               	bcf	3,5	;RP0=0, select bank0
  7295  0F88  1303               	bcf	3,6	;RP1=0, select bank0
  7296  0F89  00E5               	movwf	setLights_Main@lights
  7297                           
  7298                           ;TriacRelay_B1.c: 108: char clear = 1;
  7299  0F8A  01E4               	clrf	setLights_Main@clear
  7300  0F8B  0AE4               	incf	setLights_Main@clear,f
  7301                           
  7302                           ;TriacRelay_B1.c: 109: LightsPointSelect(lights);
  7303  0F8C  0865               	movf	setLights_Main@lights,w
  7304  0F8D  158A  248D  158A   	fcall	_LightsPointSelect
  7305                           
  7306                           ;TriacRelay_B1.c: 110: if (Lights->GO == 0) {
  7307  0F90  1283               	bcf	3,5	;RP0=0, select bank0
  7308  0F91  1303               	bcf	3,6	;RP1=0, select bank0
  7309  0F92  082D               	movf	_Lights,w
  7310  0F93  0084               	movwf	4
  7311  0F94  1383               	bcf	3,7	;select IRP bank0
  7312  0F95  1880               	btfsc	0,1
  7313  0F96  0008               	return
  7314                           
  7315                           ;TriacRelay_B1.c: 130: if (Lights->Trigger == 1) {
  7316  0F97  082D               	movf	_Lights,w
  7317  0F98  0084               	movwf	4
  7318  0F99  1E80               	btfss	0,5
  7319  0F9A  0008               	return
  7320                           
  7321                           ;TriacRelay_B1.c: 131: if (clear == 1) {
  7322  0F9B  0864               	movf	setLights_Main@clear,w
  7323  0F9C  3A01               	xorlw	1
  7324  0F9D  1D03               	skipz
  7325  0F9E  0008               	return
  7326                           
  7327                           ;TriacRelay_B1.c: 132: if (Lights->Switch == 1) {
  7328  0F9F  082D               	movf	_Lights,w
  7329  0FA0  0084               	movwf	4
  7330  0FA1  1F00               	btfss	0,6
  7331  0FA2  2FB2               	goto	l4260
  7332                           
  7333                           ;TriacRelay_B1.c: 133: Lights->Trigger = 0;
  7334  0FA3  082D               	movf	_Lights,w
  7335  0FA4  0084               	movwf	4
  7336  0FA5  1280               	bcf	0,5
  7337                           
  7338                           ;TriacRelay_B1.c: 135: setLights(lights, 1);
  7339  0FA6  01E1               	clrf	setLights@status
  7340  0FA7  0AE1               	incf	setLights@status,f
  7341  0FA8  0865               	movf	setLights_Main@lights,w
  7342  0FA9  118A  267C         	fcall	_setLights
  7343                           
  7344                           ;TriacRelay_B1.c: 139: Lights->Clear = 0;
  7345  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  7346  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  7347  0FAD  0A2D               	incf	_Lights,w
  7348  0FAE  0084               	movwf	4
  7349  0FAF  1383               	bcf	3,7	;select IRP bank0
  7350  0FB0  1080               	bcf	0,1
  7351                           
  7352                           ;TriacRelay_B1.c: 141: } else {
  7353  0FB1  0008               	return
  7354  0FB2                     l4260:	
  7355                           
  7356                           ;TriacRelay_B1.c: 142: Lights->Trigger = 0;
  7357  0FB2  082D               	movf	_Lights,w
  7358  0FB3  0084               	movwf	4
  7359  0FB4  1280               	bcf	0,5
  7360                           
  7361                           ;TriacRelay_B1.c: 144: setLights(lights, 0);
  7362  0FB5  01E1               	clrf	setLights@status
  7363  0FB6  0865               	movf	setLights_Main@lights,w
  7364  0FB7  118A  267C         	fcall	_setLights
  7365                           
  7366                           ;TriacRelay_B1.c: 147: Lights->Clear = 0;
  7367  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  7368  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  7369  0FBB  0A2D               	incf	_Lights,w
  7370  0FBC  0084               	movwf	4
  7371  0FBD  1383               	bcf	3,7	;select IRP bank0
  7372  0FBE  1080               	bcf	0,1
  7373  0FBF  0008               	return
  7374  0FC0                     __end_of_setLights_Main:	
  7375                           
  7376                           	psect	text48
  7377  067C                     __ptext48:	
  7378 ;; *************** function _setLights *****************
  7379 ;; Defined at:
  7380 ;;		line 201 in file "../src/TriacRelay_B1.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;  lights          1    wreg     unsigned char 
  7383 ;;  status          1    0[BANK0 ] unsigned char 
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;  lights          1    2[BANK0 ] unsigned char 
  7386 ;; Return value:  Size  Location     Type
  7387 ;;		None               void
  7388 ;; Registers used:
  7389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7395 ;;      Params:         0       1       0       0
  7396 ;;      Locals:         0       1       0       0
  7397 ;;      Temps:          0       1       0       0
  7398 ;;      Totals:         0       3       0       0
  7399 ;;Total ram usage:        3 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; Hardware stack levels required when called:    3
  7402 ;; This function calls:
  7403 ;;		_LightsPointSelect
  7404 ;;		_setLoad_Count
  7405 ;;		_setLoad_StatusOff
  7406 ;;		_setLoad_StatusOn
  7407 ;; This function is called by:
  7408 ;;		_setLights_Main
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           
  7413                           ;psect for function _setLights
  7414  067C                     _setLights:	
  7415                           
  7416                           ;incstack = 0
  7417                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7418                           ;setLights@lights stored from wreg
  7419  067C  1283               	bcf	3,5	;RP0=0, select bank0
  7420  067D  1303               	bcf	3,6	;RP1=0, select bank0
  7421  067E  00E3               	movwf	setLights@lights
  7422                           
  7423                           ;TriacRelay_B1.c: 203: LightsPointSelect(lights);
  7424  067F  0863               	movf	setLights@lights,w
  7425  0680  158A  248D  118A   	fcall	_LightsPointSelect
  7426                           
  7427                           ;TriacRelay_B1.c: 204: LightsControl.Load=lights;
  7428  0683  1283               	bcf	3,5	;RP0=0, select bank0
  7429  0684  1303               	bcf	3,6	;RP1=0, select bank0
  7430  0685  0863               	movf	setLights@lights,w
  7431  0686  1079               	bcf	_LightsControl,0
  7432  0687  1D03               	skipz
  7433  0688  1479               	bsf	_LightsControl,0
  7434                           
  7435                           ;TriacRelay_B1.c: 205: Lights->GO = 1;
  7436  0689  082D               	movf	_Lights,w
  7437  068A  0084               	movwf	4
  7438  068B  1383               	bcf	3,7	;select IRP bank0
  7439  068C  1480               	bsf	0,1
  7440                           
  7441                           ;TriacRelay_B1.c: 206: if (status == 1) {
  7442  068D  0861               	movf	setLights@status,w
  7443  068E  3A01               	xorlw	1
  7444  068F  1D03               	skipz
  7445  0690  2EB1               	goto	l4030
  7446                           
  7447                           ;TriacRelay_B1.c: 207: if (Lights->Status == 0) {
  7448  0691  082D               	movf	_Lights,w
  7449  0692  0084               	movwf	4
  7450  0693  1900               	btfsc	0,2
  7451  0694  2ECF               	goto	l4036
  7452                           
  7453                           ;TriacRelay_B1.c: 208: Lights->Status = 1;
  7454  0695  082D               	movf	_Lights,w
  7455  0696  0084               	movwf	4
  7456  0697  1500               	bsf	0,2
  7457                           
  7458                           ;TriacRelay_B1.c: 209: Lights->RelayValue = 7;
  7459  0698  3007               	movlw	7
  7460  0699  00E2               	movwf	??_setLights
  7461  069A  082D               	movf	_Lights,w
  7462  069B  3E06               	addlw	6
  7463  069C  0084               	movwf	4
  7464  069D  0862               	movf	??_setLights,w
  7465  069E  0080               	movwf	0
  7466                           
  7467                           ;TriacRelay_B1.c: 210: Lights->TriacValue = 14;
  7468  069F  300E               	movlw	14
  7469  06A0  00E2               	movwf	??_setLights
  7470  06A1  082D               	movf	_Lights,w
  7471  06A2  3E04               	addlw	4
  7472  06A3  0084               	movwf	4
  7473  06A4  0862               	movf	??_setLights,w
  7474  06A5  0080               	movwf	0
  7475                           
  7476                           ;TriacRelay_B1.c: 211: setLoad_StatusOn(lights, 1);
  7477  06A6  01F4               	clrf	setLoad_StatusOn@command
  7478  06A7  0AF4               	incf	setLoad_StatusOn@command,f
  7479  06A8  0863               	movf	setLights@lights,w
  7480  06A9  158A  24EA  118A   	fcall	_setLoad_StatusOn
  7481                           
  7482                           ;TriacRelay_B1.c: 212: setLoad_Count(0);
  7483  06AC  3000               	movlw	0
  7484  06AD  158A  2499  118A   	fcall	_setLoad_Count
  7485                           
  7486                           ;TriacRelay_B1.c: 213: }
  7487                           ;TriacRelay_B1.c: 214: } else {
  7488  06B0  2ECF               	goto	l4036
  7489  06B1                     l4030:	
  7490                           
  7491                           ;TriacRelay_B1.c: 215: if (Lights->Status == 1) {
  7492  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  7493  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  7494  06B3  082D               	movf	_Lights,w
  7495  06B4  0084               	movwf	4
  7496  06B5  1383               	bcf	3,7	;select IRP bank0
  7497  06B6  1D00               	btfss	0,2
  7498  06B7  2ECF               	goto	l4036
  7499                           
  7500                           ;TriacRelay_B1.c: 216: Lights->Status = 0;
  7501  06B8  082D               	movf	_Lights,w
  7502  06B9  0084               	movwf	4
  7503  06BA  1100               	bcf	0,2
  7504                           
  7505                           ;TriacRelay_B1.c: 217: Lights->RelayValue = 4;
  7506  06BB  3004               	movlw	4
  7507  06BC  00E2               	movwf	??_setLights
  7508  06BD  082D               	movf	_Lights,w
  7509  06BE  3E06               	addlw	6
  7510  06BF  0084               	movwf	4
  7511  06C0  0862               	movf	??_setLights,w
  7512  06C1  0080               	movwf	0
  7513                           
  7514                           ;TriacRelay_B1.c: 218: Lights->TriacValue = 8;
  7515  06C2  3008               	movlw	8
  7516  06C3  00E2               	movwf	??_setLights
  7517  06C4  082D               	movf	_Lights,w
  7518  06C5  3E04               	addlw	4
  7519  06C6  0084               	movwf	4
  7520  06C7  0862               	movf	??_setLights,w
  7521  06C8  0080               	movwf	0
  7522                           
  7523                           ;TriacRelay_B1.c: 219: setLoad_StatusOff(lights, 1);
  7524  06C9  01F4               	clrf	setLoad_StatusOff@command
  7525  06CA  0AF4               	incf	setLoad_StatusOff@command,f
  7526  06CB  0863               	movf	setLights@lights,w
  7527  06CC  158A  24DB  118A   	fcall	_setLoad_StatusOff
  7528  06CF                     l4036:	
  7529                           
  7530                           ;TriacRelay_B1.c: 220: }
  7531                           ;TriacRelay_B1.c: 221: }
  7532                           ;TriacRelay_B1.c: 223: if (lights == 1) {
  7533  06CF  1283               	bcf	3,5	;RP0=0, select bank0
  7534  06D0  1303               	bcf	3,6	;RP1=0, select bank0
  7535  06D1  0863               	movf	setLights@lights,w
  7536  06D2  3A01               	xorlw	1
  7537  06D3  1D03               	skipz
  7538  06D4  0008               	return
  7539                           
  7540                           ;TriacRelay_B1.c: 224: RB2 = 1;
  7541  06D5  1506               	bsf	6,2	;volatile
  7542  06D6  0008               	return
  7543  06D7                     __end_of_setLights:	
  7544                           
  7545                           	psect	text49
  7546  0CEA                     __ptext49:	
  7547 ;; *************** function _setLoad_StatusOn *****************
  7548 ;; Defined at:
  7549 ;;		line 266 in file "../src/OverLoad_B1.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;  lights          1    wreg     unsigned char 
  7552 ;;  command         1    4[COMMON] unsigned char 
  7553 ;; Auto vars:     Size  Location     Type
  7554 ;;  lights          1    5[COMMON] unsigned char 
  7555 ;; Return value:  Size  Location     Type
  7556 ;;		None               void
  7557 ;; Registers used:
  7558 ;;		wreg
  7559 ;; Tracked objects:
  7560 ;;		On entry : 0/0
  7561 ;;		On exit  : 0/0
  7562 ;;		Unchanged: 0/0
  7563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7564 ;;      Params:         1       0       0       0
  7565 ;;      Locals:         1       0       0       0
  7566 ;;      Temps:          0       0       0       0
  7567 ;;      Totals:         2       0       0       0
  7568 ;;Total ram usage:        2 bytes
  7569 ;; Hardware stack levels used:    1
  7570 ;; Hardware stack levels required when called:    2
  7571 ;; This function calls:
  7572 ;;		Nothing
  7573 ;; This function is called by:
  7574 ;;		_setLights
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578                           
  7579                           ;psect for function _setLoad_StatusOn
  7580  0CEA                     _setLoad_StatusOn:	
  7581                           
  7582                           ;incstack = 0
  7583                           ; Regs used in _setLoad_StatusOn: [wreg]
  7584                           ;setLoad_StatusOn@lights stored from wreg
  7585  0CEA  00F5               	movwf	setLoad_StatusOn@lights
  7586                           
  7587                           ;OverLoad_B1.c: 267: Load1.GO = 1;
  7588  0CEB  1283               	bcf	3,5	;RP0=0, select bank0
  7589  0CEC  1303               	bcf	3,6	;RP1=0, select bank0
  7590  0CED  14AE               	bsf	_Load1,1
  7591                           
  7592                           ;OverLoad_B1.c: 268: Load1.StatusOn = command;
  7593  0CEE  0874               	movf	setLoad_StatusOn@command,w
  7594  0CEF  132E               	bcf	_Load1,6
  7595  0CF0  1D03               	skipz
  7596  0CF1  172E               	bsf	_Load1,6
  7597                           
  7598                           ;OverLoad_B1.c: 271: if (lights == 1) {
  7599  0CF2  0875               	movf	setLoad_StatusOn@lights,w
  7600  0CF3  3A01               	xorlw	1
  7601  0CF4  1D03               	skipz
  7602  0CF5  0008               	return
  7603                           
  7604                           ;OverLoad_B1.c: 272: Load1.Lights1Status = 1;
  7605  0CF6  01CE               	clrf	_Load1+32
  7606  0CF7  0ACE               	incf	_Load1+32,f
  7607  0CF8  0008               	return
  7608  0CF9                     __end_of_setLoad_StatusOn:	
  7609                           
  7610                           	psect	text50
  7611  0CDB                     __ptext50:	
  7612 ;; *************** function _setLoad_StatusOff *****************
  7613 ;; Defined at:
  7614 ;;		line 287 in file "../src/OverLoad_B1.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;  lights          1    wreg     unsigned char 
  7617 ;;  command         1    4[COMMON] unsigned char 
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;  lights          1    5[COMMON] unsigned char 
  7620 ;; Return value:  Size  Location     Type
  7621 ;;		None               void
  7622 ;; Registers used:
  7623 ;;		wreg, status,2, status,0
  7624 ;; Tracked objects:
  7625 ;;		On entry : 0/0
  7626 ;;		On exit  : 0/0
  7627 ;;		Unchanged: 0/0
  7628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7629 ;;      Params:         1       0       0       0
  7630 ;;      Locals:         1       0       0       0
  7631 ;;      Temps:          0       0       0       0
  7632 ;;      Totals:         2       0       0       0
  7633 ;;Total ram usage:        2 bytes
  7634 ;; Hardware stack levels used:    1
  7635 ;; Hardware stack levels required when called:    2
  7636 ;; This function calls:
  7637 ;;		Nothing
  7638 ;; This function is called by:
  7639 ;;		_setLights
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           
  7644                           ;psect for function _setLoad_StatusOff
  7645  0CDB                     _setLoad_StatusOff:	
  7646                           
  7647                           ;incstack = 0
  7648                           ; Regs used in _setLoad_StatusOff: [wreg+status,2+status,0]
  7649                           ;setLoad_StatusOff@lights stored from wreg
  7650  0CDB  00F5               	movwf	setLoad_StatusOff@lights
  7651                           
  7652                           ;OverLoad_B1.c: 288: Load1.StatusOff = command;
  7653  0CDC  0874               	movf	setLoad_StatusOff@command,w
  7654  0CDD  1283               	bcf	3,5	;RP0=0, select bank0
  7655  0CDE  1303               	bcf	3,6	;RP1=0, select bank0
  7656  0CDF  13AE               	bcf	_Load1,7
  7657  0CE0  1D03               	skipz
  7658  0CE1  17AE               	bsf	_Load1,7
  7659                           
  7660                           ;OverLoad_B1.c: 289: Load1.SafeCount -= 2;
  7661  0CE2  3002               	movlw	2
  7662  0CE3  02CD               	subwf	_Load1+31,f
  7663                           
  7664                           ;OverLoad_B1.c: 292: if (lights == 1) {
  7665  0CE4  0875               	movf	setLoad_StatusOff@lights,w
  7666  0CE5  3A01               	xorlw	1
  7667  0CE6  1D03               	skipz
  7668  0CE7  0008               	return
  7669                           
  7670                           ;OverLoad_B1.c: 293: Load1.Lights1Status = 0;
  7671  0CE8  01CE               	clrf	_Load1+32
  7672  0CE9  0008               	return
  7673  0CEA                     __end_of_setLoad_StatusOff:	
  7674                           
  7675                           	psect	text51
  7676  0C99                     __ptext51:	
  7677 ;; *************** function _setLoad_Count *****************
  7678 ;; Defined at:
  7679 ;;		line 251 in file "../src/OverLoad_B1.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;  command         1    wreg     unsigned char 
  7682 ;; Auto vars:     Size  Location     Type
  7683 ;;  command         1    5[COMMON] unsigned char 
  7684 ;; Return value:  Size  Location     Type
  7685 ;;		None               void
  7686 ;; Registers used:
  7687 ;;		wreg
  7688 ;; Tracked objects:
  7689 ;;		On entry : 0/0
  7690 ;;		On exit  : 0/0
  7691 ;;		Unchanged: 0/0
  7692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7693 ;;      Params:         0       0       0       0
  7694 ;;      Locals:         1       0       0       0
  7695 ;;      Temps:          1       0       0       0
  7696 ;;      Totals:         2       0       0       0
  7697 ;;Total ram usage:        2 bytes
  7698 ;; Hardware stack levels used:    1
  7699 ;; Hardware stack levels required when called:    2
  7700 ;; This function calls:
  7701 ;;		Nothing
  7702 ;; This function is called by:
  7703 ;;		_setLights
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           
  7708                           ;psect for function _setLoad_Count
  7709  0C99                     _setLoad_Count:	
  7710                           
  7711                           ;incstack = 0
  7712                           ; Regs used in _setLoad_Count: [wreg]
  7713                           ;setLoad_Count@command stored from wreg
  7714  0C99  00F5               	movwf	setLoad_Count@command
  7715                           
  7716                           ;OverLoad_B1.c: 252: Load1.Count = command;
  7717  0C9A  0875               	movf	setLoad_Count@command,w
  7718  0C9B  00F4               	movwf	??_setLoad_Count
  7719  0C9C  0874               	movf	??_setLoad_Count,w
  7720  0C9D  1283               	bcf	3,5	;RP0=0, select bank0
  7721  0C9E  1303               	bcf	3,6	;RP1=0, select bank0
  7722  0C9F  00C9               	movwf	_Load1+27
  7723                           
  7724                           ;OverLoad_B1.c: 253: Load1.SafeCount = command;
  7725  0CA0  0875               	movf	setLoad_Count@command,w
  7726  0CA1  00F4               	movwf	??_setLoad_Count
  7727  0CA2  0874               	movf	??_setLoad_Count,w
  7728  0CA3  00CD               	movwf	_Load1+31
  7729  0CA4  0008               	return
  7730  0CA5                     __end_of_setLoad_Count:	
  7731                           
  7732                           	psect	text52
  7733  06D7                     __ptext52:	
  7734 ;; *************** function _Lights_Control *****************
  7735 ;; Defined at:
  7736 ;;		line 239 in file "../src/TriacRelay_B1.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  lights          1    wreg     unsigned char 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  lights          1    2[BANK0 ] unsigned char 
  7741 ;; Return value:  Size  Location     Type
  7742 ;;		None               void
  7743 ;; Registers used:
  7744 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7750 ;;      Params:         0       0       0       0
  7751 ;;      Locals:         0       1       0       0
  7752 ;;      Temps:          0       2       0       0
  7753 ;;      Totals:         0       3       0       0
  7754 ;;Total ram usage:        3 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    3
  7757 ;; This function calls:
  7758 ;;		_LightsPointSelect
  7759 ;; This function is called by:
  7760 ;;		_Lights_Main
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           
  7765                           ;psect for function _Lights_Control
  7766  06D7                     _Lights_Control:	
  7767                           
  7768                           ;incstack = 0
  7769                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7770                           ;Lights_Control@lights stored from wreg
  7771  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  7772  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  7773  06D9  00E3               	movwf	Lights_Control@lights
  7774                           
  7775                           ;TriacRelay_B1.c: 240: LightsPointSelect(lights);
  7776  06DA  0863               	movf	Lights_Control@lights,w
  7777  06DB  158A  248D  118A   	fcall	_LightsPointSelect
  7778                           
  7779                           ;TriacRelay_B1.c: 241: if (Lights->GO == 1) {
  7780  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  7781  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  7782  06E0  082D               	movf	_Lights,w
  7783  06E1  0084               	movwf	4
  7784  06E2  1383               	bcf	3,7	;select IRP bank0
  7785  06E3  1C80               	btfss	0,1
  7786  06E4  0008               	return
  7787                           
  7788                           ;TriacRelay_B1.c: 242: Lights->Time++;
  7789  06E5  3001               	movlw	1
  7790  06E6  00E1               	movwf	??_Lights_Control
  7791  06E7  082D               	movf	_Lights,w
  7792  06E8  3E02               	addlw	2
  7793  06E9  0084               	movwf	4
  7794  06EA  0861               	movf	??_Lights_Control,w
  7795  06EB  0780               	addwf	0,f
  7796                           
  7797                           ;TriacRelay_B1.c: 243: if (Lights->Time >= Lights->RelayValue && Lights->RelaySet == 0) 
      +                          {
  7798  06EC  082D               	movf	_Lights,w
  7799  06ED  3E06               	addlw	6
  7800  06EE  0084               	movwf	4
  7801  06EF  0800               	movf	0,w
  7802  06F0  00E1               	movwf	??_Lights_Control
  7803  06F1  082D               	movf	_Lights,w
  7804  06F2  3E02               	addlw	2
  7805  06F3  0084               	movwf	4
  7806  06F4  0800               	movf	0,w
  7807  06F5  00E2               	movwf	??_Lights_Control+1
  7808  06F6  0861               	movf	??_Lights_Control,w
  7809  06F7  0262               	subwf	??_Lights_Control+1,w
  7810  06F8  1C03               	skipc
  7811  06F9  2F11               	goto	l4282
  7812  06FA  0A2D               	incf	_Lights,w
  7813  06FB  0084               	movwf	4
  7814  06FC  1900               	btfsc	0,2
  7815  06FD  2F11               	goto	l4282
  7816                           
  7817                           ;TriacRelay_B1.c: 244: Lights->RelaySet = 1;
  7818  06FE  0A2D               	incf	_Lights,w
  7819  06FF  0084               	movwf	4
  7820  0700  1500               	bsf	0,2
  7821                           
  7822                           ;TriacRelay_B1.c: 246: if (lights == 1) {
  7823  0701  0863               	movf	Lights_Control@lights,w
  7824  0702  3A01               	xorlw	1
  7825  0703  1D03               	skipz
  7826  0704  0008               	return
  7827                           
  7828                           ;TriacRelay_B1.c: 248: RA4 = Lights->Status ? 1 : 0;
  7829  0705  082D               	movf	_Lights,w
  7830  0706  0084               	movwf	4
  7831  0707  1D00               	btfss	0,2
  7832  0708  2F0D               	goto	u4530
  7833  0709  1283               	bcf	3,5	;RP0=0, select bank0
  7834  070A  1303               	bcf	3,6	;RP1=0, select bank0
  7835  070B  1605               	bsf	5,4	;volatile
  7836  070C  0008               	return
  7837  070D                     u4530:	
  7838  070D  1283               	bcf	3,5	;RP0=0, select bank0
  7839  070E  1303               	bcf	3,6	;RP1=0, select bank0
  7840  070F  1205               	bcf	5,4	;volatile
  7841                           
  7842                           ;TriacRelay_B1.c: 250: }
  7843                           ;TriacRelay_B1.c: 265: } else if (Lights->Time >= Lights->TriacValue) {
  7844  0710  0008               	return
  7845  0711                     l4282:	
  7846  0711  082D               	movf	_Lights,w
  7847  0712  3E04               	addlw	4
  7848  0713  0084               	movwf	4
  7849  0714  1383               	bcf	3,7	;select IRP bank0
  7850  0715  0800               	movf	0,w
  7851  0716  00E1               	movwf	??_Lights_Control
  7852  0717  082D               	movf	_Lights,w
  7853  0718  3E02               	addlw	2
  7854  0719  0084               	movwf	4
  7855  071A  0800               	movf	0,w
  7856  071B  00E2               	movwf	??_Lights_Control+1
  7857  071C  0861               	movf	??_Lights_Control,w
  7858  071D  0262               	subwf	??_Lights_Control+1,w
  7859  071E  1C03               	skipc
  7860  071F  0008               	return
  7861                           
  7862                           ;TriacRelay_B1.c: 266: Lights->Time = 0;
  7863  0720  082D               	movf	_Lights,w
  7864  0721  3E02               	addlw	2
  7865  0722  0084               	movwf	4
  7866  0723  0180               	clrf	0
  7867                           
  7868                           ;TriacRelay_B1.c: 267: Lights->GO = 0;
  7869  0724  082D               	movf	_Lights,w
  7870  0725  0084               	movwf	4
  7871  0726  1080               	bcf	0,1
  7872                           
  7873                           ;TriacRelay_B1.c: 268: Lights->RelaySet = 0;
  7874  0727  0A2D               	incf	_Lights,w
  7875  0728  0084               	movwf	4
  7876  0729  1100               	bcf	0,2
  7877                           
  7878                           ;TriacRelay_B1.c: 270: if (lights == 1) {
  7879  072A  0863               	movf	Lights_Control@lights,w
  7880  072B  3A01               	xorlw	1
  7881  072C  1D03               	skipz
  7882  072D  0008               	return
  7883                           
  7884                           ;TriacRelay_B1.c: 271: RB2 = 0;
  7885  072E  1106               	bcf	6,2	;volatile
  7886  072F  0008               	return
  7887  0730                     __end_of_Lights_Control:	
  7888                           
  7889                           	psect	text53
  7890  0E26                     __ptext53:	
  7891 ;; *************** function _Lights_Close *****************
  7892 ;; Defined at:
  7893 ;;		line 81 in file "../src/TriacRelay_B1.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;		None
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;  status          1    3[BANK0 ] unsigned char 
  7898 ;; Return value:  Size  Location     Type
  7899 ;;		None               void
  7900 ;; Registers used:
  7901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/0
  7904 ;;		On exit  : 0/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7907 ;;      Params:         0       0       0       0
  7908 ;;      Locals:         0       1       0       0
  7909 ;;      Temps:          0       1       0       0
  7910 ;;      Totals:         0       2       0       0
  7911 ;;Total ram usage:        2 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:    4
  7914 ;; This function calls:
  7915 ;;		_getLights_Status
  7916 ;;		_setLoad_GO
  7917 ;; This function is called by:
  7918 ;;		_Lights_Main
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           
  7923                           ;psect for function _Lights_Close
  7924  0E26                     _Lights_Close:	
  7925                           
  7926                           ;TriacRelay_B1.c: 82: char status = 0;
  7927                           
  7928                           ;incstack = 0
  7929                           ; Regs used in _Lights_Close: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7930  0E26  1283               	bcf	3,5	;RP0=0, select bank0
  7931  0E27  1303               	bcf	3,6	;RP1=0, select bank0
  7932  0E28  01E4               	clrf	Lights_Close@status
  7933                           
  7934                           ;TriacRelay_B1.c: 83: if (LightsControl.Detect == 1) {
  7935  0E29  1C79               	btfss	_LightsControl,0
  7936  0E2A  0008               	return
  7937                           
  7938                           ;TriacRelay_B1.c: 84: LightsControl.Detect = 0;
  7939  0E2B  1079               	bcf	_LightsControl,0
  7940                           
  7941                           ;TriacRelay_B1.c: 86: if (status == 0) {
  7942  0E2C  08E4               	movf	Lights_Close@status,f
  7943  0E2D  1D03               	skipz
  7944  0E2E  2E3C               	goto	l4304
  7945                           
  7946                           ;TriacRelay_B1.c: 87: status = getLights_Status(1) == 1 ? 1 : 0;
  7947  0E2F  3001               	movlw	1
  7948  0E30  158A  2577  158A   	fcall	_getLights_Status
  7949  0E33  3A01               	xorlw	1
  7950  0E34  3000               	movlw	0
  7951  0E35  1903               	skipnz
  7952  0E36  3001               	movlw	1
  7953  0E37  1283               	bcf	3,5	;RP0=0, select bank0
  7954  0E38  1303               	bcf	3,6	;RP1=0, select bank0
  7955  0E39  00E3               	movwf	??_Lights_Close
  7956  0E3A  0863               	movf	??_Lights_Close,w
  7957  0E3B  00E4               	movwf	Lights_Close@status
  7958  0E3C                     l4304:	
  7959                           
  7960                           ;TriacRelay_B1.c: 88: }
  7961                           ;TriacRelay_B1.c: 101: if (status == 0) {
  7962  0E3C  08E4               	movf	Lights_Close@status,f
  7963  0E3D  1D03               	skipz
  7964  0E3E  0008               	return
  7965                           
  7966                           ;TriacRelay_B1.c: 102: setLoad_GO(0);
  7967  0E3F  3000               	movlw	0
  7968  0E40  158A  2439         	fcall	_setLoad_GO
  7969  0E42  0008               	return
  7970  0E43                     __end_of_Lights_Close:	
  7971                           
  7972                           	psect	text54
  7973  0C39                     __ptext54:	
  7974 ;; *************** function _setLoad_GO *****************
  7975 ;; Defined at:
  7976 ;;		line 262 in file "../src/OverLoad_B1.c"
  7977 ;; Parameters:    Size  Location     Type
  7978 ;;  command         1    wreg     unsigned char 
  7979 ;; Auto vars:     Size  Location     Type
  7980 ;;  command         1    4[COMMON] unsigned char 
  7981 ;; Return value:  Size  Location     Type
  7982 ;;		None               void
  7983 ;; Registers used:
  7984 ;;		wreg
  7985 ;; Tracked objects:
  7986 ;;		On entry : 0/0
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7990 ;;      Params:         0       0       0       0
  7991 ;;      Locals:         1       0       0       0
  7992 ;;      Temps:          0       0       0       0
  7993 ;;      Totals:         1       0       0       0
  7994 ;;Total ram usage:        1 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; Hardware stack levels required when called:    2
  7997 ;; This function calls:
  7998 ;;		Nothing
  7999 ;; This function is called by:
  8000 ;;		_Lights_Close
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004                           
  8005                           ;psect for function _setLoad_GO
  8006  0C39                     _setLoad_GO:	
  8007                           
  8008                           ;incstack = 0
  8009                           ; Regs used in _setLoad_GO: [wreg]
  8010                           ;setLoad_GO@command stored from wreg
  8011  0C39  00F4               	movwf	setLoad_GO@command
  8012                           
  8013                           ;OverLoad_B1.c: 263: Load1.GO = command;
  8014  0C3A  0874               	movf	setLoad_GO@command,w
  8015  0C3B  1283               	bcf	3,5	;RP0=0, select bank0
  8016  0C3C  1303               	bcf	3,6	;RP1=0, select bank0
  8017  0C3D  10AE               	bcf	_Load1,1
  8018  0C3E  1D03               	skipz
  8019  0C3F  14AE               	bsf	_Load1,1
  8020  0C40  0008               	return
  8021  0C41                     __end_of_setLoad_GO:	
  8022                           
  8023                           	psect	text55
  8024  0D77                     __ptext55:	
  8025 ;; *************** function _getLights_Status *****************
  8026 ;; Defined at:
  8027 ;;		line 195 in file "../src/TriacRelay_B1.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;  lights          1    wreg     unsigned char 
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;  lights          1    0[BANK0 ] unsigned char 
  8032 ;;  result          1    1[BANK0 ] unsigned char 
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  1    wreg      unsigned char 
  8035 ;; Registers used:
  8036 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8042 ;;      Params:         0       0       0       0
  8043 ;;      Locals:         0       2       0       0
  8044 ;;      Temps:          0       0       0       0
  8045 ;;      Totals:         0       2       0       0
  8046 ;;Total ram usage:        2 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; Hardware stack levels required when called:    3
  8049 ;; This function calls:
  8050 ;;		_LightsPointSelect
  8051 ;; This function is called by:
  8052 ;;		_PIR_Main
  8053 ;;		_Lights_Close
  8054 ;; This function uses a non-reentrant model
  8055 ;;
  8056                           
  8057                           
  8058                           ;psect for function _getLights_Status
  8059  0D77                     _getLights_Status:	
  8060                           
  8061                           ;incstack = 0
  8062                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8063                           ;getLights_Status@lights stored from wreg
  8064  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  8065  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  8066  0D79  00E1               	movwf	getLights_Status@lights
  8067                           
  8068                           ;TriacRelay_B1.c: 196: LightsPointSelect(lights);
  8069  0D7A  0861               	movf	getLights_Status@lights,w
  8070  0D7B  158A  248D         	fcall	_LightsPointSelect
  8071                           
  8072                           ;TriacRelay_B1.c: 197: char result = Lights->Status;
  8073  0D7D  1283               	bcf	3,5	;RP0=0, select bank0
  8074  0D7E  1303               	bcf	3,6	;RP1=0, select bank0
  8075  0D7F  082D               	movf	_Lights,w
  8076  0D80  0084               	movwf	4
  8077  0D81  3000               	movlw	0
  8078  0D82  1383               	bcf	3,7	;select IRP bank0
  8079  0D83  1900               	btfsc	0,2
  8080  0D84  3001               	movlw	1
  8081  0D85  00E2               	movwf	getLights_Status@result
  8082                           
  8083                           ;TriacRelay_B1.c: 198: return result;
  8084  0D86  0862               	movf	getLights_Status@result,w
  8085  0D87  0008               	return
  8086  0D88                     __end_of_getLights_Status:	
  8087                           
  8088                           	psect	text56
  8089  0C15                     __ptext56:	
  8090 ;; *************** function _Lights_Initialization *****************
  8091 ;; Defined at:
  8092 ;;		line 33 in file "../src/TriacRelay_B1.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;		None
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;		None               void
  8099 ;; Registers used:
  8100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8106 ;;      Params:         0       0       0       0
  8107 ;;      Locals:         0       0       0       0
  8108 ;;      Temps:          0       0       0       0
  8109 ;;      Totals:         0       0       0       0
  8110 ;;Total ram usage:        0 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    4
  8113 ;; This function calls:
  8114 ;;		_setLights_Initialization
  8115 ;; This function is called by:
  8116 ;;		_main
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _Lights_Initialization
  8122  0C15                     _Lights_Initialization:	
  8123                           
  8124                           ;TriacRelay_B1.c: 35: setLights_Initialization(1);
  8125                           
  8126                           ;incstack = 0
  8127                           ; Regs used in _Lights_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8128  0C15  3001               	movlw	1
  8129  0C16  158A  2527         	fcall	_setLights_Initialization
  8130  0C18  0008               	return
  8131  0C19                     __end_of_Lights_Initialization:	
  8132                           
  8133                           	psect	text57
  8134  0D27                     __ptext57:	
  8135 ;; *************** function _setLights_Initialization *****************
  8136 ;; Defined at:
  8137 ;;		line 47 in file "../src/TriacRelay_B1.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;  lights          1    wreg     unsigned char 
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;  lights          1    0[BANK0 ] unsigned char 
  8142 ;; Return value:  Size  Location     Type
  8143 ;;		None               void
  8144 ;; Registers used:
  8145 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8151 ;;      Params:         0       0       0       0
  8152 ;;      Locals:         0       1       0       0
  8153 ;;      Temps:          0       0       0       0
  8154 ;;      Totals:         0       1       0       0
  8155 ;;Total ram usage:        1 bytes
  8156 ;; Hardware stack levels used:    1
  8157 ;; Hardware stack levels required when called:    3
  8158 ;; This function calls:
  8159 ;;		_LightsPointSelect
  8160 ;; This function is called by:
  8161 ;;		_Lights_Initialization
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           
  8166                           ;psect for function _setLights_Initialization
  8167  0D27                     _setLights_Initialization:	
  8168                           
  8169                           ;incstack = 0
  8170                           ; Regs used in _setLights_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8171                           ;setLights_Initialization@lights stored from wreg
  8172  0D27  1283               	bcf	3,5	;RP0=0, select bank0
  8173  0D28  1303               	bcf	3,6	;RP1=0, select bank0
  8174  0D29  00E1               	movwf	setLights_Initialization@lights
  8175                           
  8176                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  8177  0D2A  0861               	movf	setLights_Initialization@lights,w
  8178  0D2B  158A  248D         	fcall	_LightsPointSelect
  8179                           
  8180                           ;TriacRelay_B1.c: 49: Lights->Open = 1;
  8181  0D2D  1283               	bcf	3,5	;RP0=0, select bank0
  8182  0D2E  1303               	bcf	3,6	;RP1=0, select bank0
  8183  0D2F  082D               	movf	_Lights,w
  8184  0D30  0084               	movwf	4
  8185  0D31  1383               	bcf	3,7	;select IRP bank0
  8186  0D32  1580               	bsf	0,3
  8187                           
  8188                           ;TriacRelay_B1.c: 50: Lights->Close = 1;
  8189  0D33  082D               	movf	_Lights,w
  8190  0D34  0084               	movwf	4
  8191  0D35  1600               	bsf	0,4
  8192  0D36  0008               	return
  8193  0D37                     __end_of_setLights_Initialization:	
  8194                           
  8195                           	psect	text58
  8196  0C8D                     __ptext58:	
  8197 ;; *************** function _LightsPointSelect *****************
  8198 ;; Defined at:
  8199 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;  lights          1    wreg     unsigned char 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  lights          1    5[COMMON] unsigned char 
  8204 ;; Return value:  Size  Location     Type
  8205 ;;		None               void
  8206 ;; Registers used:
  8207 ;;		wreg
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8213 ;;      Params:         0       0       0       0
  8214 ;;      Locals:         1       0       0       0
  8215 ;;      Temps:          1       0       0       0
  8216 ;;      Totals:         2       0       0       0
  8217 ;;Total ram usage:        2 bytes
  8218 ;; Hardware stack levels used:    1
  8219 ;; Hardware stack levels required when called:    2
  8220 ;; This function calls:
  8221 ;;		Nothing
  8222 ;; This function is called by:
  8223 ;;		_getMain_LightsStatus
  8224 ;;		_setLights_Initialization
  8225 ;;		_setLights_Main
  8226 ;;		_setLights_Clear
  8227 ;;		_setLights_Trigger
  8228 ;;		_setLights_Switch
  8229 ;;		_getLights_Status
  8230 ;;		_setLights
  8231 ;;		_Lights_Control
  8232 ;;		_setLights_Open
  8233 ;;		_getLights_Open
  8234 ;;		_setLights_Close
  8235 ;;		_getLights_Close
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           
  8240                           ;psect for function _LightsPointSelect
  8241  0C8D                     _LightsPointSelect:	
  8242                           
  8243                           ;incstack = 0
  8244                           ; Regs used in _LightsPointSelect: [wreg]
  8245                           ;LightsPointSelect@lights stored from wreg
  8246  0C8D  00F5               	movwf	LightsPointSelect@lights
  8247                           
  8248                           ;TriacRelay_B1.c: 14: if (lights == 1) {
  8249  0C8E  0875               	movf	LightsPointSelect@lights,w
  8250  0C8F  3A01               	xorlw	1
  8251  0C90  1D03               	skipz
  8252  0C91  0008               	return
  8253                           
  8254                           ;TriacRelay_B1.c: 15: Lights = &Lights1;
  8255  0C92  30D7               	movlw	_Lights1& (0+255)
  8256  0C93  00F4               	movwf	??_LightsPointSelect
  8257  0C94  0874               	movf	??_LightsPointSelect,w
  8258  0C95  1283               	bcf	3,5	;RP0=0, select bank0
  8259  0C96  1303               	bcf	3,6	;RP1=0, select bank0
  8260  0C97  00AD               	movwf	_Lights
  8261  0C98  0008               	return
  8262  0C99                     __end_of_LightsPointSelect:	
  8263                           
  8264                           	psect	text59
  8265  0C81                     __ptext59:	
  8266 ;; *************** function _LED_Main *****************
  8267 ;; Defined at:
  8268 ;;		line 47 in file "../src/LED_B1.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;		None
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;		None
  8273 ;; Return value:  Size  Location     Type
  8274 ;;		None               void
  8275 ;; Registers used:
  8276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8282 ;;      Params:         0       0       0       0
  8283 ;;      Locals:         0       0       0       0
  8284 ;;      Temps:          0       0       0       0
  8285 ;;      Totals:         0       0       0       0
  8286 ;;Total ram usage:        0 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; Hardware stack levels required when called:    4
  8289 ;; This function calls:
  8290 ;;		_setLED_Main
  8291 ;; This function is called by:
  8292 ;;		_main
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function _LED_Main
  8298  0C81                     _LED_Main:	
  8299                           
  8300                           ;LED_B1.c: 49: setLED_Main(1);
  8301                           
  8302                           ;incstack = 0
  8303                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8304  0C81  3001               	movlw	1
  8305  0C82  118A  27C3  158A   	fcall	_setLED_Main
  8306                           
  8307                           ;LED_B1.c: 52: setLED_Main(2);
  8308  0C85  3002               	movlw	2
  8309  0C86  118A  27C3  158A   	fcall	_setLED_Main
  8310                           
  8311                           ;LED_B1.c: 58: setLED_Main(99);
  8312  0C89  3063               	movlw	99
  8313  0C8A  118A  27C3         	fcall	_setLED_Main
  8314  0C8C  0008               	return
  8315  0C8D                     __end_of_LED_Main:	
  8316                           
  8317                           	psect	text60
  8318  07C3                     __ptext60:	
  8319 ;; *************** function _setLED_Main *****************
  8320 ;; Defined at:
  8321 ;;		line 192 in file "../src/LED_B1.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;  led             1    wreg     unsigned char 
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;  led             1    2[BANK0 ] unsigned char 
  8326 ;; Return value:  Size  Location     Type
  8327 ;;		None               void
  8328 ;; Registers used:
  8329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8335 ;;      Params:         0       0       0       0
  8336 ;;      Locals:         0       1       0       0
  8337 ;;      Temps:          0       2       0       0
  8338 ;;      Totals:         0       3       0       0
  8339 ;;Total ram usage:        3 bytes
  8340 ;; Hardware stack levels used:    1
  8341 ;; Hardware stack levels required when called:    3
  8342 ;; This function calls:
  8343 ;;		_LedPointSelect
  8344 ;; This function is called by:
  8345 ;;		_LED_Main
  8346 ;; This function uses a non-reentrant model
  8347 ;;
  8348                           
  8349                           
  8350                           ;psect for function _setLED_Main
  8351  07C3                     _setLED_Main:	
  8352                           
  8353                           ;incstack = 0
  8354                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8355                           ;setLED_Main@led stored from wreg
  8356  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  8357  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  8358  07C5  00E3               	movwf	setLED_Main@led
  8359                           
  8360                           ;LED_B1.c: 193: LedPointSelect(led);
  8361  07C6  0863               	movf	setLED_Main@led,w
  8362  07C7  158A  25EE  118A   	fcall	_LedPointSelect
  8363                           
  8364                           ;LED_B1.c: 194: if (LED->GO == 1) {
  8365  07CA  0878               	movf	_LED,w
  8366  07CB  0084               	movwf	4
  8367  07CC  1383               	bcf	3,7	;select IRP bank0
  8368  07CD  1C80               	btfss	0,1
  8369  07CE  0008               	return
  8370                           
  8371                           ;LED_B1.c: 195: LED->Time++;
  8372  07CF  0A78               	incf	_LED,w
  8373  07D0  0084               	movwf	4
  8374  07D1  3001               	movlw	1
  8375  07D2  0780               	addwf	0,f
  8376  07D3  0A84               	incf	4,f
  8377  07D4  1803               	skipnc
  8378  07D5  0A80               	incf	0,f
  8379                           
  8380                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  8381  07D6  0A78               	incf	_LED,w
  8382  07D7  0084               	movwf	4
  8383  07D8  0800               	movf	0,w
  8384  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  8385  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  8386  07DB  00E1               	movwf	??_setLED_Main
  8387  07DC  0A84               	incf	4,f
  8388  07DD  0800               	movf	0,w
  8389  07DE  00E2               	movwf	??_setLED_Main+1
  8390  07DF  3000               	movlw	0
  8391  07E0  0262               	subwf	??_setLED_Main+1,w
  8392  07E1  3032               	movlw	50
  8393  07E2  1903               	skipnz
  8394  07E3  0261               	subwf	??_setLED_Main,w
  8395  07E4  1C03               	skipc
  8396  07E5  0008               	return
  8397                           
  8398                           ;LED_B1.c: 197: LED->Time = 0;
  8399  07E6  0A78               	incf	_LED,w
  8400  07E7  0084               	movwf	4
  8401  07E8  0180               	clrf	0
  8402  07E9  0A84               	incf	4,f
  8403  07EA  0180               	clrf	0
  8404                           
  8405                           ;LED_B1.c: 199: if (led == 1) {
  8406  07EB  0863               	movf	setLED_Main@led,w
  8407  07EC  3A01               	xorlw	1
  8408  07ED  1D03               	skipz
  8409  07EE  2FF2               	goto	l4120
  8410                           
  8411                           ;LED_B1.c: 200: RB4 = RB4 == 1 ? 0 : 1;
  8412  07EF  3010               	movlw	16
  8413  07F0  0686               	xorwf	6,f
  8414                           
  8415                           ;LED_B1.c: 201: }
  8416  07F1  0008               	return
  8417  07F2                     l4120:	
  8418                           
  8419                           ;LED_B1.c: 204: else if (led == 2) {
  8420  07F2  0863               	movf	setLED_Main@led,w
  8421  07F3  3A02               	xorlw	2
  8422  07F4  1D03               	skipz
  8423  07F5  2FF9               	goto	l4124
  8424                           
  8425                           ;LED_B1.c: 205: RB5 = RB5 == 1 ? 0 : 1;
  8426  07F6  3020               	movlw	32
  8427  07F7  0686               	xorwf	6,f
  8428                           
  8429                           ;LED_B1.c: 206: }
  8430  07F8  0008               	return
  8431  07F9                     l4124:	
  8432                           
  8433                           ;LED_B1.c: 214: else if (led == 99) {
  8434  07F9  0863               	movf	setLED_Main@led,w
  8435  07FA  3A63               	xorlw	99
  8436  07FB  1D03               	skipz
  8437  07FC  0008               	return
  8438                           
  8439                           ;LED_B1.c: 215: RB3 = RB3 == 1 ? 0 : 1;
  8440  07FD  3008               	movlw	8
  8441  07FE  0686               	xorwf	6,f
  8442  07FF  0008               	return
  8443  0800                     __end_of_setLED_Main:	
  8444                           
  8445                           	psect	text61
  8446  0C75                     __ptext61:	
  8447 ;; *************** function _LED_Initialization *****************
  8448 ;; Defined at:
  8449 ;;		line 31 in file "../src/LED_B1.c"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;		None
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;		None
  8454 ;; Return value:  Size  Location     Type
  8455 ;;		None               void
  8456 ;; Registers used:
  8457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8463 ;;      Params:         0       0       0       0
  8464 ;;      Locals:         0       0       0       0
  8465 ;;      Temps:          0       0       0       0
  8466 ;;      Totals:         0       0       0       0
  8467 ;;Total ram usage:        0 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    5
  8470 ;; This function calls:
  8471 ;;		_setLED_Initialization
  8472 ;; This function is called by:
  8473 ;;		_main
  8474 ;; This function uses a non-reentrant model
  8475 ;;
  8476                           
  8477                           
  8478                           ;psect for function _LED_Initialization
  8479  0C75                     _LED_Initialization:	
  8480                           
  8481                           ;LED_B1.c: 33: setLED_Initialization(1);
  8482                           
  8483                           ;incstack = 0
  8484                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8485  0C75  3001               	movlw	1
  8486  0C76  158A  2588  158A   	fcall	_setLED_Initialization
  8487                           
  8488                           ;LED_B1.c: 36: setLED_Initialization(2);
  8489  0C79  3002               	movlw	2
  8490  0C7A  158A  2588  158A   	fcall	_setLED_Initialization
  8491                           
  8492                           ;LED_B1.c: 42: setLED_Initialization(99);
  8493  0C7D  3063               	movlw	99
  8494  0C7E  158A  2588         	fcall	_setLED_Initialization
  8495  0C80  0008               	return
  8496  0C81                     __end_of_LED_Initialization:	
  8497                           
  8498                           	psect	text62
  8499  0D88                     __ptext62:	
  8500 ;; *************** function _setLED_Initialization *****************
  8501 ;; Defined at:
  8502 ;;		line 63 in file "../src/LED_B1.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;  led             1    wreg     unsigned char 
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;  led             1    2[BANK0 ] unsigned char 
  8507 ;; Return value:  Size  Location     Type
  8508 ;;		None               void
  8509 ;; Registers used:
  8510 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8516 ;;      Params:         0       0       0       0
  8517 ;;      Locals:         0       1       0       0
  8518 ;;      Temps:          0       0       0       0
  8519 ;;      Totals:         0       1       0       0
  8520 ;;Total ram usage:        1 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:    4
  8523 ;; This function calls:
  8524 ;;		_LedPointSelect
  8525 ;;		_setLED
  8526 ;; This function is called by:
  8527 ;;		_LED_Initialization
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           
  8532                           ;psect for function _setLED_Initialization
  8533  0D88                     _setLED_Initialization:	
  8534                           
  8535                           ;incstack = 0
  8536                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8537                           ;setLED_Initialization@led stored from wreg
  8538  0D88  1283               	bcf	3,5	;RP0=0, select bank0
  8539  0D89  1303               	bcf	3,6	;RP1=0, select bank0
  8540  0D8A  00E3               	movwf	setLED_Initialization@led
  8541                           
  8542                           ;LED_B1.c: 64: LedPointSelect(led);
  8543  0D8B  0863               	movf	setLED_Initialization@led,w
  8544  0D8C  158A  25EE  158A   	fcall	_LedPointSelect
  8545                           
  8546                           ;LED_B1.c: 65: LED->Enable = 1;
  8547  0D8F  0878               	movf	_LED,w
  8548  0D90  0084               	movwf	4
  8549  0D91  1383               	bcf	3,7	;select IRP bank0
  8550  0D92  1400               	bsf	0,0
  8551                           
  8552                           ;LED_B1.c: 66: setLED(led, 0);
  8553  0D93  1283               	bcf	3,5	;RP0=0, select bank0
  8554  0D94  1303               	bcf	3,6	;RP1=0, select bank0
  8555  0D95  01E1               	clrf	setLED@command
  8556  0D96  0863               	movf	setLED_Initialization@led,w
  8557  0D97  118A  2620         	fcall	_setLED
  8558  0D99  0008               	return
  8559  0D9A                     __end_of_setLED_Initialization:	
  8560                           
  8561                           	psect	text63
  8562  0620                     __ptext63:	
  8563 ;; *************** function _setLED *****************
  8564 ;; Defined at:
  8565 ;;		line 70 in file "../src/LED_B1.c"
  8566 ;; Parameters:    Size  Location     Type
  8567 ;;  led             1    wreg     unsigned char 
  8568 ;;  command         1    0[BANK0 ] unsigned char 
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;  led             1    1[BANK0 ] unsigned char 
  8571 ;; Return value:  Size  Location     Type
  8572 ;;		None               void
  8573 ;; Registers used:
  8574 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8580 ;;      Params:         0       1       0       0
  8581 ;;      Locals:         0       1       0       0
  8582 ;;      Temps:          0       0       0       0
  8583 ;;      Totals:         0       2       0       0
  8584 ;;Total ram usage:        2 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    3
  8587 ;; This function calls:
  8588 ;;		_LedPointSelect
  8589 ;; This function is called by:
  8590 ;;		_setLED_Initialization
  8591 ;;		_setLoad_Exceptions
  8592 ;;		_setOverTemp_Exceptions
  8593 ;;		_PIR_Main
  8594 ;;		_setSYSC_Main
  8595 ;; This function uses a non-reentrant model
  8596 ;;
  8597                           
  8598                           
  8599                           ;psect for function _setLED
  8600  0620                     _setLED:	
  8601                           
  8602                           ;incstack = 0
  8603                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8604                           ;setLED@led stored from wreg
  8605  0620  1283               	bcf	3,5	;RP0=0, select bank0
  8606  0621  1303               	bcf	3,6	;RP1=0, select bank0
  8607  0622  00E2               	movwf	setLED@led
  8608                           
  8609                           ;LED_B1.c: 71: LedPointSelect(led);
  8610  0623  0862               	movf	setLED@led,w
  8611  0624  158A  25EE  118A   	fcall	_LedPointSelect
  8612                           
  8613                           ;LED_B1.c: 72: if (command == 0) {
  8614  0627  1283               	bcf	3,5	;RP0=0, select bank0
  8615  0628  1303               	bcf	3,6	;RP1=0, select bank0
  8616  0629  08E1               	movf	setLED@command,f
  8617  062A  1D03               	skipz
  8618  062B  2E3E               	goto	l3910
  8619                           
  8620                           ;LED_B1.c: 74: if (led == 1) {
  8621  062C  0862               	movf	setLED@led,w
  8622  062D  3A01               	xorlw	1
  8623  062E  1D03               	skipz
  8624  062F  2E32               	goto	l3902
  8625                           
  8626                           ;LED_B1.c: 78: RB4 = 1;
  8627  0630  1606               	bsf	6,4	;volatile
  8628                           
  8629                           ;LED_B1.c: 80: }
  8630  0631  0008               	return
  8631  0632                     l3902:	
  8632                           
  8633                           ;LED_B1.c: 83: else if (led == 2) {
  8634  0632  0862               	movf	setLED@led,w
  8635  0633  3A02               	xorlw	2
  8636  0634  1D03               	skipz
  8637  0635  2E38               	goto	l3906
  8638                           
  8639                           ;LED_B1.c: 87: RB5 = 1;
  8640  0636  1686               	bsf	6,5	;volatile
  8641                           
  8642                           ;LED_B1.c: 89: }
  8643  0637  0008               	return
  8644  0638                     l3906:	
  8645                           
  8646                           ;LED_B1.c: 101: else if (led == 99) {
  8647  0638  0862               	movf	setLED@led,w
  8648  0639  3A63               	xorlw	99
  8649  063A  1D03               	skipz
  8650  063B  0008               	return
  8651                           
  8652                           ;LED_B1.c: 105: RB3 = 1;
  8653  063C  1586               	bsf	6,3	;volatile
  8654                           
  8655                           ;LED_B1.c: 107: }
  8656                           ;LED_B1.c: 109: } else if (command == 1) {
  8657  063D  0008               	return
  8658  063E                     l3910:	
  8659  063E  0861               	movf	setLED@command,w
  8660  063F  3A01               	xorlw	1
  8661  0640  1D03               	skipz
  8662  0641  2E54               	goto	l3924
  8663                           
  8664                           ;LED_B1.c: 111: if (led == 1) {
  8665  0642  0862               	movf	setLED@led,w
  8666  0643  3A01               	xorlw	1
  8667  0644  1D03               	skipz
  8668  0645  2E48               	goto	l3916
  8669                           
  8670                           ;LED_B1.c: 115: RB4 = 0;
  8671  0646  1206               	bcf	6,4	;volatile
  8672                           
  8673                           ;LED_B1.c: 117: }
  8674  0647  0008               	return
  8675  0648                     l3916:	
  8676                           
  8677                           ;LED_B1.c: 120: else if (led == 2) {
  8678  0648  0862               	movf	setLED@led,w
  8679  0649  3A02               	xorlw	2
  8680  064A  1D03               	skipz
  8681  064B  2E4E               	goto	l3920
  8682                           
  8683                           ;LED_B1.c: 124: RB5 = 0;
  8684  064C  1286               	bcf	6,5	;volatile
  8685                           
  8686                           ;LED_B1.c: 126: }
  8687  064D  0008               	return
  8688  064E                     l3920:	
  8689                           
  8690                           ;LED_B1.c: 138: else if (led == 99) {
  8691  064E  0862               	movf	setLED@led,w
  8692  064F  3A63               	xorlw	99
  8693  0650  1D03               	skipz
  8694  0651  0008               	return
  8695                           
  8696                           ;LED_B1.c: 142: RB3 = 0;
  8697  0652  1186               	bcf	6,3	;volatile
  8698                           
  8699                           ;LED_B1.c: 144: }
  8700                           ;LED_B1.c: 146: } else if (command == 10) {
  8701  0653  0008               	return
  8702  0654                     l3924:	
  8703  0654  0861               	movf	setLED@command,w
  8704  0655  3A0A               	xorlw	10
  8705  0656  1D03               	skipz
  8706  0657  2E73               	goto	l3942
  8707                           
  8708                           ;LED_B1.c: 147: LED->GO = 0;
  8709  0658  0878               	movf	_LED,w
  8710  0659  0084               	movwf	4
  8711  065A  1383               	bcf	3,7	;select IRP bank0
  8712  065B  1080               	bcf	0,1
  8713                           
  8714                           ;LED_B1.c: 148: LED->Time = 0;
  8715  065C  0A78               	incf	_LED,w
  8716  065D  0084               	movwf	4
  8717  065E  0180               	clrf	0
  8718  065F  0A84               	incf	4,f
  8719  0660  0180               	clrf	0
  8720                           
  8721                           ;LED_B1.c: 150: if (led == 1) {
  8722  0661  0862               	movf	setLED@led,w
  8723  0662  3A01               	xorlw	1
  8724  0663  1D03               	skipz
  8725  0664  2E67               	goto	l3934
  8726                           
  8727                           ;LED_B1.c: 154: RB4 = 1;
  8728  0665  1606               	bsf	6,4	;volatile
  8729                           
  8730                           ;LED_B1.c: 156: }
  8731  0666  0008               	return
  8732  0667                     l3934:	
  8733                           
  8734                           ;LED_B1.c: 159: else if (led == 2) {
  8735  0667  0862               	movf	setLED@led,w
  8736  0668  3A02               	xorlw	2
  8737  0669  1D03               	skipz
  8738  066A  2E6D               	goto	l3938
  8739                           
  8740                           ;LED_B1.c: 163: RB5 = 1;
  8741  066B  1686               	bsf	6,5	;volatile
  8742                           
  8743                           ;LED_B1.c: 165: }
  8744  066C  0008               	return
  8745  066D                     l3938:	
  8746                           
  8747                           ;LED_B1.c: 177: else if (led == 99) {
  8748  066D  0862               	movf	setLED@led,w
  8749  066E  3A63               	xorlw	99
  8750  066F  1D03               	skipz
  8751  0670  0008               	return
  8752                           
  8753                           ;LED_B1.c: 181: RB3 = 1;
  8754  0671  1586               	bsf	6,3	;volatile
  8755                           
  8756                           ;LED_B1.c: 183: }
  8757                           ;LED_B1.c: 185: } else if (command == 11) {
  8758  0672  0008               	return
  8759  0673                     l3942:	
  8760  0673  0861               	movf	setLED@command,w
  8761  0674  3A0B               	xorlw	11
  8762  0675  1D03               	skipz
  8763  0676  0008               	return
  8764                           
  8765                           ;LED_B1.c: 186: LED->GO = 1;
  8766  0677  0878               	movf	_LED,w
  8767  0678  0084               	movwf	4
  8768  0679  1383               	bcf	3,7	;select IRP bank0
  8769  067A  1480               	bsf	0,1
  8770  067B  0008               	return
  8771  067C                     __end_of_setLED:	
  8772                           
  8773                           	psect	text64
  8774  0DEE                     __ptext64:	
  8775 ;; *************** function _LedPointSelect *****************
  8776 ;; Defined at:
  8777 ;;		line 7 in file "../src/LED_B1.c"
  8778 ;; Parameters:    Size  Location     Type
  8779 ;;  led             1    wreg     unsigned char 
  8780 ;; Auto vars:     Size  Location     Type
  8781 ;;  led             1    5[COMMON] unsigned char 
  8782 ;; Return value:  Size  Location     Type
  8783 ;;		None               void
  8784 ;; Registers used:
  8785 ;;		wreg
  8786 ;; Tracked objects:
  8787 ;;		On entry : 0/0
  8788 ;;		On exit  : 0/0
  8789 ;;		Unchanged: 0/0
  8790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8791 ;;      Params:         0       0       0       0
  8792 ;;      Locals:         1       0       0       0
  8793 ;;      Temps:          1       0       0       0
  8794 ;;      Totals:         2       0       0       0
  8795 ;;Total ram usage:        2 bytes
  8796 ;; Hardware stack levels used:    1
  8797 ;; Hardware stack levels required when called:    2
  8798 ;; This function calls:
  8799 ;;		Nothing
  8800 ;; This function is called by:
  8801 ;;		_setLED_Initialization
  8802 ;;		_setLED
  8803 ;;		_setLED_Main
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           
  8808                           ;psect for function _LedPointSelect
  8809  0DEE                     _LedPointSelect:	
  8810                           
  8811                           ;incstack = 0
  8812                           ; Regs used in _LedPointSelect: [wreg]
  8813                           ;LedPointSelect@led stored from wreg
  8814  0DEE  00F5               	movwf	LedPointSelect@led
  8815                           
  8816                           ;LED_B1.c: 9: if (led == 1) {
  8817  0DEF  0875               	movf	LedPointSelect@led,w
  8818  0DF0  3A01               	xorlw	1
  8819  0DF1  1D03               	skipz
  8820  0DF2  2DF8               	goto	l3886
  8821                           
  8822                           ;LED_B1.c: 10: LED = &VarLED1;
  8823  0DF3  30DE               	movlw	_VarLED1& (0+255)
  8824  0DF4  00F4               	movwf	??_LedPointSelect
  8825  0DF5  0874               	movf	??_LedPointSelect,w
  8826  0DF6  00F8               	movwf	_LED
  8827                           
  8828                           ;LED_B1.c: 11: }
  8829  0DF7  0008               	return
  8830  0DF8                     l3886:	
  8831                           
  8832                           ;LED_B1.c: 14: else if (led == 2) {
  8833  0DF8  0875               	movf	LedPointSelect@led,w
  8834  0DF9  3A02               	xorlw	2
  8835  0DFA  1D03               	skipz
  8836  0DFB  2E01               	goto	l3890
  8837                           
  8838                           ;LED_B1.c: 15: LED = &VarLED2;
  8839  0DFC  30E2               	movlw	_VarLED2& (0+255)
  8840  0DFD  00F4               	movwf	??_LedPointSelect
  8841  0DFE  0874               	movf	??_LedPointSelect,w
  8842  0DFF  00F8               	movwf	_LED
  8843                           
  8844                           ;LED_B1.c: 16: }
  8845  0E00  0008               	return
  8846  0E01                     l3890:	
  8847                           
  8848                           ;LED_B1.c: 24: else if (led == 99) {
  8849  0E01  0875               	movf	LedPointSelect@led,w
  8850  0E02  3A63               	xorlw	99
  8851  0E03  1D03               	skipz
  8852  0E04  0008               	return
  8853                           
  8854                           ;LED_B1.c: 25: LED = &VarErrLED;
  8855  0E05  305D               	movlw	_VarErrLED& (0+255)
  8856  0E06  00F4               	movwf	??_LedPointSelect
  8857  0E07  0874               	movf	??_LedPointSelect,w
  8858  0E08  00F8               	movwf	_LED
  8859  0E09  0008               	return
  8860  0E0A                     __end_of_LedPointSelect:	
  8861                           
  8862                           	psect	text65
  8863  0CBF                     __ptext65:	
  8864 ;; *************** function _DetectSYSC_Signal *****************
  8865 ;; Defined at:
  8866 ;;		line 55 in file "../src/SYSC_B1.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;		None
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;		None
  8871 ;; Return value:  Size  Location     Type
  8872 ;;		None               void
  8873 ;; Registers used:
  8874 ;;		status,2
  8875 ;; Tracked objects:
  8876 ;;		On entry : 0/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8880 ;;      Params:         0       0       0       0
  8881 ;;      Locals:         0       0       0       0
  8882 ;;      Temps:          0       0       0       0
  8883 ;;      Totals:         0       0       0       0
  8884 ;;Total ram usage:        0 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; Hardware stack levels required when called:    2
  8887 ;; This function calls:
  8888 ;;		Nothing
  8889 ;; This function is called by:
  8890 ;;		_main
  8891 ;; This function uses a non-reentrant model
  8892 ;;
  8893                           
  8894                           
  8895                           ;psect for function _DetectSYSC_Signal
  8896  0CBF                     _DetectSYSC_Signal:	
  8897                           
  8898                           ;SYSC_B1.c: 56: if (SYSC.Signal == 0) {
  8899                           
  8900                           ;incstack = 0
  8901                           ; Regs used in _DetectSYSC_Signal: [status,2]
  8902  0CBF  1283               	bcf	3,5	;RP0=0, select bank0
  8903  0CC0  1303               	bcf	3,6	;RP1=0, select bank0
  8904  0CC1  19A0               	btfsc	_SYSC,3
  8905  0CC2  2CC9               	goto	l992
  8906                           
  8907                           ;SYSC_B1.c: 57: if (RA5 == 1) {
  8908  0CC3  1E85               	btfss	5,5	;volatile
  8909  0CC4  0008               	return
  8910                           
  8911                           ;SYSC_B1.c: 58: SYSC.Signal = 1;
  8912  0CC5  15A0               	bsf	_SYSC,3
  8913                           
  8914                           ;SYSC_B1.c: 59: SYSC.Timer = 0;
  8915  0CC6  01A1               	clrf	_SYSC+1
  8916  0CC7  01A2               	clrf	_SYSC+2
  8917                           
  8918                           ;SYSC_B1.c: 60: }
  8919                           ;SYSC_B1.c: 61: } else {
  8920  0CC8  0008               	return
  8921  0CC9                     l992:	
  8922                           
  8923                           ;SYSC_B1.c: 62: if (RA5 == 0) {
  8924  0CC9  1A85               	btfsc	5,5	;volatile
  8925  0CCA  0008               	return
  8926                           
  8927                           ;SYSC_B1.c: 63: SYSC.Signal = 0;
  8928  0CCB  11A0               	bcf	_SYSC,3
  8929  0CCC  0008               	return
  8930  0CCD                     __end_of_DetectSYSC_Signal:	
  8931                           
  8932                           	psect	text66
  8933  0780                     __ptext66:	
  8934 ;; *************** function _CDS_Main *****************
  8935 ;; Defined at:
  8936 ;;		line 11 in file "../src/CDS_B1.c"
  8937 ;; Parameters:    Size  Location     Type
  8938 ;;		None
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;		None
  8941 ;; Return value:  Size  Location     Type
  8942 ;;		None               void
  8943 ;; Registers used:
  8944 ;;		wreg, status,2, status,0, pclath, cstack
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8950 ;;      Params:         0       0       0       0
  8951 ;;      Locals:         0       0       0       0
  8952 ;;      Temps:          0       3       0       0
  8953 ;;      Totals:         0       3       0       0
  8954 ;;Total ram usage:        3 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; Hardware stack levels required when called:    3
  8957 ;; This function calls:
  8958 ;;		_getMain_AD_Safe
  8959 ;; This function is called by:
  8960 ;;		_main
  8961 ;; This function uses a non-reentrant model
  8962 ;;
  8963                           
  8964                           
  8965                           ;psect for function _CDS_Main
  8966  0780                     _CDS_Main:	
  8967                           
  8968                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  8969                           
  8970                           ;incstack = 0
  8971                           ; Regs used in _CDS_Main: [wreg+status,2+status,0+pclath+cstack]
  8972  0780  1283               	bcf	3,5	;RP0=0, select bank0
  8973  0781  1303               	bcf	3,6	;RP1=0, select bank0
  8974  0782  1C25               	btfss	__CDS,0
  8975  0783  0008               	return
  8976                           
  8977                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  8978  0784  18A5               	btfsc	__CDS,1
  8979  0785  2FA2               	goto	l101
  8980                           
  8981                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  8982  0786  19A5               	btfsc	__CDS,3
  8983  0787  0008               	return
  8984                           
  8985                           ;CDS_B1.c: 16: _CDS.Time++;
  8986  0788  3001               	movlw	1
  8987  0789  00E1               	movwf	??_CDS_Main
  8988  078A  0861               	movf	??_CDS_Main,w
  8989  078B  07A6               	addwf	__CDS+1,f
  8990                           
  8991                           ;CDS_B1.c: 17: if (_CDS.Time >= 10)
  8992  078C  300A               	movlw	10
  8993  078D  0226               	subwf	__CDS+1,w
  8994  078E  1C03               	skipc
  8995  078F  0008               	return
  8996                           
  8997                           ;CDS_B1.c: 18: {
  8998                           ;CDS_B1.c: 19: if (getMain_AD_Safe() == 1) {
  8999  0790  158A  24B1  118A   	fcall	_getMain_AD_Safe
  9000  0793  3A01               	xorlw	1
  9001  0794  1D03               	skipz
  9002  0795  2F9B               	goto	l4388
  9003                           
  9004                           ;CDS_B1.c: 20: _CDS.Time = 0;
  9005  0796  1283               	bcf	3,5	;RP0=0, select bank0
  9006  0797  1303               	bcf	3,6	;RP1=0, select bank0
  9007  0798  01A6               	clrf	__CDS+1
  9008                           
  9009                           ;CDS_B1.c: 21: _CDS.ADtoGO = 1;
  9010  0799  15A5               	bsf	__CDS,3
  9011                           
  9012                           ;CDS_B1.c: 22: } else {
  9013  079A  0008               	return
  9014  079B                     l4388:	
  9015                           
  9016                           ;CDS_B1.c: 23: _CDS.Time = 10;
  9017  079B  300A               	movlw	10
  9018  079C  1283               	bcf	3,5	;RP0=0, select bank0
  9019  079D  1303               	bcf	3,6	;RP1=0, select bank0
  9020  079E  00E1               	movwf	??_CDS_Main
  9021  079F  0861               	movf	??_CDS_Main,w
  9022  07A0  00A6               	movwf	__CDS+1
  9023                           
  9024                           ;CDS_B1.c: 24: }
  9025                           ;CDS_B1.c: 25: }
  9026                           ;CDS_B1.c: 26: }
  9027                           ;CDS_B1.c: 27: } else {
  9028  07A1  0008               	return
  9029  07A2                     l101:	
  9030                           
  9031                           ;CDS_B1.c: 28: if (_CDS.GO == 1) {
  9032  07A2  1CA5               	btfss	__CDS,1
  9033  07A3  0008               	return
  9034                           
  9035                           ;CDS_B1.c: 29: _CDS.GO = 0;
  9036  07A4  10A5               	bcf	__CDS,1
  9037                           
  9038                           ;CDS_B1.c: 30: if (_CDS.Status == 0) {
  9039  07A5  1A25               	btfsc	__CDS,4
  9040  07A6  2FAD               	goto	l4396
  9041                           
  9042                           ;CDS_B1.c: 31: if (_CDS.SignalAD >= _CDS.VRAD) {
  9043  07A7  0827               	movf	__CDS+2,w
  9044  07A8  0228               	subwf	__CDS+3,w
  9045  07A9  1C03               	skipc
  9046  07AA  0008               	return
  9047                           
  9048                           ;CDS_B1.c: 32: _CDS.Status = 1;
  9049  07AB  1625               	bsf	__CDS,4
  9050                           
  9051                           ;CDS_B1.c: 33: }
  9052                           ;CDS_B1.c: 34: } else {
  9053  07AC  0008               	return
  9054  07AD                     l4396:	
  9055                           
  9056                           ;CDS_B1.c: 35: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9057  07AD  0827               	movf	__CDS+2,w
  9058  07AE  3E9C               	addlw	156
  9059  07AF  00E1               	movwf	??_CDS_Main
  9060  07B0  30FF               	movlw	255
  9061  07B1  1803               	skipnc
  9062  07B2  3000               	movlw	0
  9063  07B3  00E2               	movwf	??_CDS_Main+1
  9064  07B4  0862               	movf	??_CDS_Main+1,w
  9065  07B5  3A80               	xorlw	128
  9066  07B6  00E3               	movwf	??_CDS_Main+2
  9067  07B7  3080               	movlw	128
  9068  07B8  0263               	subwf	??_CDS_Main+2,w
  9069  07B9  1D03               	skipz
  9070  07BA  2FBD               	goto	u4835
  9071  07BB  0828               	movf	__CDS+3,w
  9072  07BC  0261               	subwf	??_CDS_Main,w
  9073  07BD                     u4835:	
  9074  07BD  1C03               	skipc
  9075  07BE  0008               	return
  9076                           
  9077                           ;CDS_B1.c: 36: _CDS.Status = 0;
  9078  07BF  1283               	bcf	3,5	;RP0=0, select bank0
  9079  07C0  1303               	bcf	3,6	;RP1=0, select bank0
  9080  07C1  1225               	bcf	__CDS,4
  9081  07C2  0008               	return
  9082  07C3                     __end_of_CDS_Main:	
  9083                           
  9084                           	psect	text67
  9085  0CB1                     __ptext67:	
  9086 ;; *************** function _getMain_AD_Safe *****************
  9087 ;; Defined at:
  9088 ;;		line 301 in file "../src/Main_B1.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;		None
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;  result          1    4[COMMON] unsigned char 
  9093 ;; Return value:  Size  Location     Type
  9094 ;;                  1    wreg      unsigned char 
  9095 ;; Registers used:
  9096 ;;		wreg, status,2
  9097 ;; Tracked objects:
  9098 ;;		On entry : 0/0
  9099 ;;		On exit  : 0/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9102 ;;      Params:         0       0       0       0
  9103 ;;      Locals:         1       0       0       0
  9104 ;;      Temps:          0       0       0       0
  9105 ;;      Totals:         1       0       0       0
  9106 ;;Total ram usage:        1 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    2
  9109 ;; This function calls:
  9110 ;;		Nothing
  9111 ;; This function is called by:
  9112 ;;		_CDS_Main
  9113 ;;		_setTemp_Main
  9114 ;;		_PIR_Main
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           
  9119                           ;psect for function _getMain_AD_Safe
  9120  0CB1                     _getMain_AD_Safe:	
  9121                           
  9122                           ;Main_B1.c: 302: char result = 1;
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in _getMain_AD_Safe: [wreg+status,2]
  9126  0CB1  01F4               	clrf	getMain_AD_Safe@result
  9127  0CB2  0AF4               	incf	getMain_AD_Safe@result,f
  9128                           
  9129                           ;Main_B1.c: 308: if (result == 1) {
  9130  0CB3  0874               	movf	getMain_AD_Safe@result,w
  9131  0CB4  3A01               	xorlw	1
  9132  0CB5  1D03               	skipz
  9133  0CB6  2CBD               	goto	l2820
  9134                           
  9135                           ;Main_B1.c: 309: result = Load1.Safe == 1 ? 1 : 0;
  9136  0CB7  3000               	movlw	0
  9137  0CB8  1283               	bcf	3,5	;RP0=0, select bank0
  9138  0CB9  1303               	bcf	3,6	;RP1=0, select bank0
  9139  0CBA  19AE               	btfsc	_Load1,3
  9140  0CBB  3001               	movlw	1
  9141  0CBC  00F4               	movwf	getMain_AD_Safe@result
  9142  0CBD                     l2820:	
  9143                           
  9144                           ;Main_B1.c: 310: }
  9145                           ;Main_B1.c: 312: return result;
  9146  0CBD  0874               	movf	getMain_AD_Safe@result,w
  9147  0CBE  0008               	return
  9148  0CBF                     __end_of_getMain_AD_Safe:	
  9149                           
  9150                           	psect	text68
  9151  0C11                     __ptext68:	
  9152 ;; *************** function _CDS_Initialization *****************
  9153 ;; Defined at:
  9154 ;;		line 7 in file "../src/CDS_B1.c"
  9155 ;; Parameters:    Size  Location     Type
  9156 ;;		None
  9157 ;; Auto vars:     Size  Location     Type
  9158 ;;		None
  9159 ;; Return value:  Size  Location     Type
  9160 ;;		None               void
  9161 ;; Registers used:
  9162 ;;		None
  9163 ;; Tracked objects:
  9164 ;;		On entry : 0/0
  9165 ;;		On exit  : 0/0
  9166 ;;		Unchanged: 0/0
  9167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9168 ;;      Params:         0       0       0       0
  9169 ;;      Locals:         0       0       0       0
  9170 ;;      Temps:          0       0       0       0
  9171 ;;      Totals:         0       0       0       0
  9172 ;;Total ram usage:        0 bytes
  9173 ;; Hardware stack levels used:    1
  9174 ;; Hardware stack levels required when called:    2
  9175 ;; This function calls:
  9176 ;;		Nothing
  9177 ;; This function is called by:
  9178 ;;		_main
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           
  9183                           ;psect for function _CDS_Initialization
  9184  0C11                     _CDS_Initialization:	
  9185                           
  9186                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9187                           
  9188                           ;incstack = 0
  9189                           ; Regs used in _CDS_Initialization: []
  9190  0C11  1283               	bcf	3,5	;RP0=0, select bank0
  9191  0C12  1303               	bcf	3,6	;RP1=0, select bank0
  9192  0C13  1425               	bsf	__CDS,0
  9193  0C14  0008               	return
  9194  0C15                     __end_of_CDS_Initialization:	
  9195                           
  9196                           	psect	text69
  9197  0D17                     __ptext69:	
  9198 ;; *************** function _ISR *****************
  9199 ;; Defined at:
  9200 ;;		line 107 in file "../src/MCU_B1.c"
  9201 ;; Parameters:    Size  Location     Type
  9202 ;;		None
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;		None
  9205 ;; Return value:  Size  Location     Type
  9206 ;;		None               void
  9207 ;; Registers used:
  9208 ;;		wreg, status,2, status,0, pclath, cstack
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9214 ;;      Params:         0       0       0       0
  9215 ;;      Locals:         0       0       0       0
  9216 ;;      Temps:          4       0       0       0
  9217 ;;      Totals:         4       0       0       0
  9218 ;;Total ram usage:        4 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    1
  9221 ;; This function calls:
  9222 ;;		_TMR1_ISR
  9223 ;; This function is called by:
  9224 ;;		Interrupt level 1
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           
  9229                           ;psect for function _ISR
  9230  0D17                     _ISR:	
  9231                           
  9232                           ;MCU_B1.c: 109: ;;
  9233                           ;MCU_B1.c: 111: ;;
  9234                           ;MCU_B1.c: 113: TMR1_ISR();
  9235  0D17  158A  2660  158A   	fcall	_TMR1_ISR
  9236  0D1A  0873               	movf	??_ISR+3,w
  9237  0D1B  1283               	bcf	3,5	;RP0=0, select bank0
  9238  0D1C  1303               	bcf	3,6	;RP1=0, select bank0
  9239  0D1D  00FF               	movwf	127
  9240  0D1E  0872               	movf	??_ISR+2,w
  9241  0D1F  008A               	movwf	10
  9242  0D20  0871               	movf	??_ISR+1,w
  9243  0D21  0084               	movwf	4
  9244  0D22  0E70               	swapf	??_ISR^(0+-128),w
  9245  0D23  0083               	movwf	3
  9246  0D24  0EFE               	swapf	126,f
  9247  0D25  0E7E               	swapf	126,w
  9248  0D26  0009               	retfie
  9249  0D27                     __end_of_ISR:	
  9250                           
  9251                           	psect	intentry
  9252  0004                     __pintentry:	
  9253                           ;incstack = 0
  9254                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9255                           
  9256  0004                     interrupt_function:	
  9257  007E                     saved_w	set	btemp
  9258  0004  00FE               	movwf	btemp
  9259  0005  0E03               	swapf	3,w
  9260  0006  00F0               	movwf	??_ISR
  9261  0007  0804               	movf	4,w
  9262  0008  00F1               	movwf	??_ISR+1
  9263  0009  080A               	movf	10,w
  9264  000A  00F2               	movwf	??_ISR+2
  9265  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9266  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9267  000D  087F               	movf	btemp+1,w
  9268  000E  00F3               	movwf	??_ISR+3
  9269  000F  158A  2D17         	ljmp	_ISR
  9270                           
  9271                           	psect	text70
  9272  0E60                     __ptext70:	
  9273 ;; *************** function _TMR1_ISR *****************
  9274 ;; Defined at:
  9275 ;;		line 209 in file "../src/MCU_B1.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;		None
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;		None
  9280 ;; Return value:  Size  Location     Type
  9281 ;;		None               void
  9282 ;; Registers used:
  9283 ;;		wreg, status,2
  9284 ;; Tracked objects:
  9285 ;;		On entry : 0/0
  9286 ;;		On exit  : 0/0
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9289 ;;      Params:         0       0       0       0
  9290 ;;      Locals:         0       0       0       0
  9291 ;;      Temps:          0       0       0       0
  9292 ;;      Totals:         0       0       0       0
  9293 ;;Total ram usage:        0 bytes
  9294 ;; Hardware stack levels used:    1
  9295 ;; This function calls:
  9296 ;;		Nothing
  9297 ;; This function is called by:
  9298 ;;		_ISR
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           
  9303                           ;psect for function _TMR1_ISR
  9304  0E60                     _TMR1_ISR:	
  9305                           
  9306                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  9307                           
  9308                           ;incstack = 0
  9309                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9310  0E60  1683               	bsf	3,5	;RP0=1, select bank1
  9311  0E61  1303               	bcf	3,6	;RP1=0, select bank1
  9312  0E62  1C0C               	btfss	12,0	;volatile
  9313  0E63  0008               	return
  9314  0E64  1283               	bcf	3,5	;RP0=0, select bank0
  9315  0E65  1303               	bcf	3,6	;RP1=0, select bank0
  9316  0E66  1C0C               	btfss	12,0	;volatile
  9317  0E67  0008               	return
  9318                           
  9319                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
  9320  0E68  30FA               	movlw	250
  9321  0E69  008F               	movwf	15	;volatile
  9322                           
  9323                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
  9324  0E6A  3038               	movlw	56
  9325  0E6B  008E               	movwf	14	;volatile
  9326                           
  9327                           ;MCU_B1.c: 214: TMR1IF = 0;
  9328  0E6C  100C               	bcf	12,0	;volatile
  9329                           
  9330                           ;MCU_B1.c: 234: Timer1.Count++;
  9331  0E6D  3001               	movlw	1
  9332  0E6E  07AB               	addwf	_Timer1+1,f
  9333  0E6F  1803               	skipnc
  9334  0E70  0AAC               	incf	_Timer1+2,f
  9335  0E71  3000               	movlw	0
  9336  0E72  07AC               	addwf	_Timer1+2,f
  9337                           
  9338                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
  9339  0E73  3064               	movlw	100
  9340  0E74  062B               	xorwf	_Timer1+1,w
  9341  0E75  042C               	iorwf	_Timer1+2,w
  9342  0E76  1D03               	skipz
  9343  0E77  0008               	return
  9344                           
  9345                           ;MCU_B1.c: 236: {
  9346                           ;MCU_B1.c: 237: Timer1.Count = 0;
  9347  0E78  01AB               	clrf	_Timer1+1
  9348  0E79  01AC               	clrf	_Timer1+2
  9349                           
  9350                           ;MCU_B1.c: 238: myMain.T1_Timerout = 1;
  9351  0E7A  1683               	bsf	3,5	;RP0=1, select bank1
  9352  0E7B  1303               	bcf	3,6	;RP1=0, select bank1
  9353  0E7C  1520               	bsf	_myMain^(0+128),2
  9354  0E7D  0008               	return
  9355  0E7E                     __end_of_TMR1_ISR:	
  9356  007E                     btemp	set	126	;btemp
  9357  007E                     wtemp	set	126
  9358  007E                     wtemp0	set	126
  9359  0080                     wtemp1	set	128
  9360  0082                     wtemp2	set	130
  9361  0084                     wtemp3	set	132
  9362  0086                     wtemp4	set	134
  9363  0088                     wtemp5	set	136
  9364  007F                     wtemp6	set	127
  9365  007E                     ttemp	set	126
  9366  007E                     ttemp0	set	126
  9367  0081                     ttemp1	set	129
  9368  0084                     ttemp2	set	132
  9369  0087                     ttemp3	set	135
  9370  007F                     ttemp4	set	127
  9371  007E                     ltemp	set	126
  9372  007E                     ltemp0	set	126
  9373  0082                     ltemp1	set	130
  9374  0086                     ltemp2	set	134
  9375  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         139
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     15      80
    BANK1            80      5      75
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK1[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 


Critical Paths under _main in COMMON

    _my_MainTime->_setLoad_Enable
    _my_MainTime->_setTemp_Enable
    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _getMain_LightsStatus->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _setLights_Switch->_LightsPointSelect
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lbdiv
    _Load_Main->___wmul
    _Load_Main->_setLoad_AH_AL_Restore
    _setLights_Clear->_LightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights->_LightsPointSelect
    _setLights->_setLoad_Count
    _setLights->_setLoad_StatusOff
    _setLights->_setLoad_StatusOn
    _Lights_Control->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLED->_LedPointSelect
    _CDS_Main->_getMain_AD_Safe

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_getPIR_AD
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setOverTemp_Exceptions->_setLED
    _SYSC_Main->_setSYSC_Main
    _setSYSC_Main->_setLED
    _PIR_Main->_getLights_Status
    _PIR_Main->_setLED
    _PIR_Main->_setLights_Switch
    _PIR_Main->_setLights_Trigger
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_setLED
    _Lights_Main->_setLights_Main
    _setLights_Main->_setLights
    _Lights_Close->_getLights_Status
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setLED_Main
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   22944
                                              0 BANK1      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0      44
                     _setLoad_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           3     3      0     717
                                              0 BANK0      3     3      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2574
                                              8 BANK0      7     6      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     657
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           5     5      0    1017
                                              0 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     858
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     686
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    3699
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    3699
                                              8 BANK0      1     1      0
                            ___awdiv
                    _getMain_AD_Safe
               _getMain_LightsStatus
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    2588
                                              2 BANK0      3     3      0
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     204
                                              0 BANK0      5     5      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     861
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0    2399
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         1     1      0    2399
                                              2 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             5     5      0    3443
                                              2 BANK0      5     5      0
                      _getCDS_Status
                   _getLights_Status
                    _getMain_AD_Safe
                  _getMain_Exception
                             _setLED
                   _setLights_Switch
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _setLights_Trigger                                    2     1      1     405
                                              0 BANK0      2     1      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLights_Switch                                     2     1      1     405
                                              0 BANK0      2     1      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getMain_Exception                                    1     1      0      69
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            3     3      0    3928
                                              5 BANK0      3     3      0
                            ___lbdiv
                             ___wmul
                       _getTemp_Safe
                    _setLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   3     3      0    2588
                                              2 BANK0      3     3      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _setLights_Clear                                      2     1      1     301
                                              0 BANK0      2     1      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getTemp_Safe                                         1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     344
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     449
                                              4 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    1296
                       _Lights_Close
                     _Lights_Control
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       2     2      0     977
                                              3 BANK0      2     2      0
                  _LightsPointSelect
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1     819
                                              0 BANK0      3     2      1
                  _LightsPointSelect
                      _setLoad_Count
                  _setLoad_StatusOff
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (4) _setLoad_StatusOn                                     2     1      1     166
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (4) _setLoad_StatusOff                                    2     1      1     166
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (4) _setLoad_Count                                        2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0     124
                                              0 BANK0      3     3      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Lights_Close                                         2     2      0     195
                                              2 BANK0      2     2      0
                   _getLights_Status
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              0 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2554
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2554
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    2399
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0      46
                                              0 BANK0      3     3      0
                    _getMain_AD_Safe
 ---------------------------------------------------------------------------------
 (3) _getMain_AD_Safe                                      1     1      0      46
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
     _getMain_AD_Safe
   _DetectSYSC_Signal
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Close
       _getLights_Status
         _LightsPointSelect
       _setLoad_GO
     _Lights_Control
       _LightsPointSelect
     _setLights_Main
       _LightsPointSelect
       _setLights
         _LightsPointSelect
         _setLoad_Count
         _setLoad_StatusOff
         _setLoad_StatusOn
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lbdiv
     ___wmul
     _getTemp_Safe
     _setLights_Clear
       _LightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _setLED
         _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_AD_Safe
     _getMain_Exception
     _setLED
       _LedPointSelect
     _setLights_Switch
       _LightsPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _setLED
         _LedPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_AD_Safe
       _getMain_LightsStatus
         _LightsPointSelect
       _setOverTemp_Exceptions
         _setLED
           _LedPointSelect
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTime
     _setLoad_Enable
     _setTemp_Enable

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A5       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      F      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      5      4B       7       93.8%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      A5      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Oct 30 17:53:26 2014

                     _WDT_Clearing 0002                       ___awdiv@sign 0066  
                               fsr 0004                ___wmul@multiplicand 0063  
                ??_setLights_Clear 0076          __end_of_setLoad_StatusOff 0CEA  
                              l101 07A2                                l610 03E7  
                              l602 036A                                l605 0441  
                              l624 0451                                l820 00AB  
                              l813 0047                                l818 006E  
                              l992 0CC9                                _GIE 005F  
                              _RB2 0032                                _RA4 002C  
                              _LED 0078                                _RB3 0033  
                              _RA5 002D                                _RB4 0034  
                              _RB5 0035                                _PS0 0408  
                              _PS1 0409                                _PS2 040A  
                              _ISR 0D17                                _PSA 040B  
                              _WDT 0076                                fsr0 0004  
                              indf 0000                    __end_of_ADC_Set 0C39  
        __end_of_LightsPointSelect 0C99                   _getLights_Status 0D77  
          __size_of_setTemp_Enable 0008            __size_of_Lights_Control 0059  
                             ?_ISR 0070                         Load_Main@i 0068  
                             l3040 0DD6                               l1185 0EEB  
                             l3036 0DCD                               l4030 06B1  
                             l4120 07F2                               l4124 07F9  
                             l4036 06CF                               l4310 0EE1  
                             l4222 058E                               l4054 05DA  
                             l4150 0486                               l4304 0E3C  
                             l4080 0619                               l4072 0606  
                             l4064 05E2                               l4048 05CF  
                             l4152 048D                               l4330 0EC5  
                             l4226 05A0                               l4066 05F0  
                             l4090 0E8E                               l2820 0CBD  
                             l4260 0FB2                               l4332 0ECE  
                             l4076 0611                               l4180 04DB  
                             l4164 04BD                               l4500 029D  
                             l4342 0EDD                               l4190 04ED  
                             l4094 0E96                               l4430 0749  
                             l4600 03E0                               l4192 04F0  
                             l4088 0E8B                               l4440 0763  
                             l4282 0711                               l4610 0400  
                             l4530 0316                               l4514 02CC  
                             l4452 077B                               l4436 075B  
                             l4364 0FEE                               l4356 0FCA  
                             l4524 02FA                               l4508 02B0  
                             l3902 0632                               l3910 063E  
                             l4630 0421                               l4358 0FD8  
                             l3920 064E                               l4368 0FF9  
                             l4544 0350                               l3906 0638  
                             l4618 040D                               l4538 0342  
                             l4490 027F                               l4482 0271  
                             l4466 0F21                               l4396 07AD  
                             l4388 079B                               l3916 0648  
                             l3924 0654                               l4644 0447  
                             l4580 03A1                               l4732 00CD  
                             l4708 00A2                               l4492 0283  
                             l3934 0667                               l3942 0673  
                             l4638 043E                               l4574 038A  
                             l4750 00F1                               l4494 0287  
                             l4486 0277                               l4830 0513  
                             l4760 013F                               l4744 00E4  
                             l4488 027B                               l3890 0E01  
                             l3938 066D                               l4594 03D4  
                             l4498 028C                               l4842 053A  
                             l4772 0180                               l4748 00F0  
                             l4780 01C4                               l3886 0DF8  
                             l4790 01E0                               l3990 0F5D  
                             l4696 0087                               l3992 0F83  
                             l4778 01B5                               l3988 0F7C  
                ?_setLights_Switch 0061              _myMain_Initialization 0C04  
                     __CFG_WDTE$ON 0000                               u4045 0DA8  
                             u4145 05E5                               u4065 0F66  
                             u4165 05F1                               u4175 05FD  
                             u4185 0607                               u4530 070D  
                             _PEIE 005E                               u5165 03F0  
                             u4445 05AC                               u4615 0EEC  
                             u4625 0EF3                               u5505 0160  
                             u4715 0FD9                               u5525 01A7  
                             u4725 0FE5                               u4735 0FEF  
                             u5545 01D4                               u4835 07BD  
                             u5485 0111                               u5575 01FD  
                             u5495 0135                               u4695 0FCD  
                             __CDS 0025            ?_setSYSC_Initialization 0070  
                             _SYSC 0020                               __PIR 00A8  
                             _Temp 0051                 ??_setLights_Switch 0076  
                             _main 04F7                               btemp 007E  
                  __end_of_WDT_Set 0CB1                               ltemp 007E  
                             start 0011                               ttemp 007E  
                             wtemp 007E                   __end_of_CDS_Main 07C3  
     __size_of_Temp_Initialization 0003                              ??_ISR 0070  
                _setLights_Trigger 0D67                      ??_Lights_Main 0076  
                    __CFG_PLLEN$ON 0000                   __end_of_LED_Main 0C8D  
               ?_setLights_Trigger 0061              __end_of_setLoad_Count 0CA5  
                            ?_main 00E6                    __end_of___awdiv 0620  
                  __end_of___lbdiv 0EDF                              _ADRES 001E  
                  ___awdiv@divisor 0061                              _T1CON 0010  
                  __end_of___lwdiv 1000                      ?_Lights_Close 0070  
                  ___awdiv@counter 0065                              _TMR1H 000F  
                            _TMR1L 000E                              _PORTA 0005  
                            _PORTB 0006                              _PORTC 0007  
                     ?_setLED_Main 0070                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
                            _Load1 002E            __end_of_Timeout_Counter 0DAE  
                 ?_getMain_AD_Safe 0070                ??_setLights_Trigger 0076  
                 __end_of_PIR_Main 0218                   __end_of_TMR1_ISR 0E7E  
                 __end_of_TMR1_Set 0CDB                              _getAD 0E7E  
   __end_of_setSYSC_Initialization 0C1D                     _setLoad_Enable 0C61  
                 __end_of_WDT_Main 0D17                      _LightsControl 0079  
                   __CFG_BOREN$OFF 0000                              pclath 000A  
                            ltemp0 007E                              ltemp1 0082  
                            ltemp2 0086                              ltemp3 0080  
   __size_of_setLED_Initialization 0012       __end_of_getMain_LightsStatus 0F87  
    __end_of_setLED_Initialization 0D9A                 Lights_Close@status 0064  
                            ttemp0 007E                              ttemp1 0081  
                            ttemp2 0084                              ttemp3 0087  
                            ttemp4 007F                              status 0003  
                            wtemp0 007E                              wtemp1 0080  
                            wtemp2 0082                              wtemp3 0084  
                            wtemp4 0086                              wtemp5 0088  
                            wtemp6 007F                    ___lbdiv@divisor 0074  
                getPIR_AD@channel1 006E                  getPIR_AD@channel2 0069  
                  ___lbdiv@counter 0062           setLoad_StatusOff@command 0074  
           ?_setLoad_AH_AL_Restore 0070                       ?_my_MainTime 0070  
            setLoad_Enable@command 0074                     _setLights_Main 0F87  
                  __initialization 0013                 __size_of_SYSC_Main 0003  
        __end_of_setLights_Trigger 0D77                       __end_of_main 055F  
                 __end_of_Fosc_Set 0C26                          ??_ADC_Set 0074  
          setOverTemp_Exceptions@i 0064         __size_of_setLoad_StatusOff 000F  
                           ??_main 00EA                     ??_Lights_Close 0063  
              __end_of_Lights_Main 0C75         __size_of_LightsPointSelect 000C  
           __end_of_setLoad_Enable 0C6A               __end_of_getTemp_Safe 0C49  
                           ?_getAD 0074             ?_myMain_Initialization 0070  
                           _ADCON0 001F                             _ADCON1 009F  
                 ___awdiv@dividend 0063                          ??_WDT_Set 0074  
                           _ANSELA 0185                             _ANSELB 0186  
                           _FVRCON 009D             getLights_Status@lights 0061  
                           _OSCCON 0090                 __size_of_Load_Main 0114  
                           _TMR1IE 0460                             _TMR1IF 0060  
                           _IO_Set 0DAE             getLights_Status@result 0062  
           __end_of_setLights_Main 0FC0       __size_of_SYSC_Initialization 0003  
      __size_of_setLoad_Exceptions 0020         __end_of_Mcu_Initialization 0D08  
                           _Lights 002D                             _Timer1 002A  
      __size_of_CDS_Initialization 0004            ??_Lights_Initialization 0076  
                           ___wmul 0EDF                          ??___awdiv 0074  
                        ??___lbdiv 0075                          ??___lwdiv 0074  
                           _setLED 0620                             _myMain 00A0  
                 ___awdiv@quotient 0067                 __size_of_Temp_Main 0003  
      __end_of_Load_Initialization 0C2C                             saved_w 007E  
                 ?_Timeout_Counter 0070                    ?_setLoad_Enable 0070  
                __end_of_SYSC_Main 0C0B                     _setTemp_Enable 0C51  
                   _Lights_Control 06D7            __size_of_LedPointSelect 001C  
                        ?_CDS_Main 0070                   ___lbdiv@dividend 0061  
       getMain_LightsStatus@result 0065        __size_of_PIR_Initialization 0010  
          __end_of__initialization 0023                          ?_LED_Main 0070  
                  ?_setLights_Main 0070                      ?_setSYSC_Main 0070  
                  _setLights_Clear 0D37         __size_of_setLights_Trigger 0010  
                   __pcstackCOMMON 0070                 __size_of_getCDS_AD 002A  
         __end_of_getLights_Status 0D88                      __end_of_getAD 0E9C  
                        ?_PIR_Main 0070                          ?_TMR1_ISR 0070  
                        ?_TMR1_Set 0070             setLoad_AH_AL_Restore@i 0075  
               _LED_Initialization 0C75                 __size_of_getPIR_AD 013A  
                      _Lights_Main 0C6A          __size_of_setLoad_StatusOn 000F  
         _setLights_Initialization 0D27                   ___lbdiv@quotient 0063  
                        ?_WDT_Main 0070                  __end_of_Load_Main 0466  
             _getMain_LightsStatus 0F54         __end_of_set_TimeoutCleared 0C32  
              ?_LED_Initialization 0070             __end_of_setTemp_Enable 0C59  
           __end_of_Lights_Control 0730              getMain_LightsStatus@i 0063  
             __size_of_setLED_Main 003D                            ??_getAD 0075  
              _Temp_Initialization 0C0B                         ??_CDS_Main 0061  
                       __pbssBANK0 0020                         __pbssBANK1 00A0  
                        ?_Fosc_Set 0070                  __end_of_Temp_Main 0C11  
                          ?_IO_Set 0070                    __CFG_VCAPEN$DIS 0000  
                       ??_LED_Main 0076               __end_of_Lights_Close 0E43  
                   ??_setSYSC_Main 0063          getMain_LightsStatus@count 0062  
             ??_LED_Initialization 0076                  LedPointSelect@led 0075  
               getTemp_Safe@result 0074                         __pmaintext 04F7  
             ?_Temp_Initialization 0070               __size_of_my_MainTime 001D  
                          ?___wmul 0061                         ??_PIR_Main 0063  
                       ??_TMR1_ISR 0070          __size_of_setLights_Switch 0010  
                    ?_setTemp_Main 0070                 __size_of_setLights 005B  
                       _getLoad_AD 0730                         ??_TMR1_Set 0074  
                       __pintentry 0004             setLights_Switch@lights 0062  
                          ?_setLED 0061            setLights_Trigger@lights 0062  
                          _ADC_Set 0C32                         _getTemp_AD 0F04  
                       ??_WDT_Main 0074              ?_getMain_LightsStatus 0070  
            __size_of_getTemp_Safe 0008             __size_of_getCDS_Status 0008  
                  ?_setTemp_Enable 0070                    ?_Lights_Control 0070  
                __end_of_getCDS_AD 0F54                            _WDT_Set 0CA5  
                       ??_Fosc_Set 0074            __end_of_setLights_Clear 0D47  
                __end_of_getPIR_AD 0352            ??_setLoad_AH_AL_Restore 0074  
                  __size_of_IO_Set 0015                         getCDS_AD@i 0064  
                       getCDS_AD@j 0065                            _Lights1 00D7  
                          _VarLED1 00DE                            _VarLED2 00E2  
            ??_Temp_Initialization 0074                       _getTemp_Safe 0C41  
                   ??_setTemp_Main 0069                            ___awdiv 05C3  
                          ___lbdiv 0EBC                    __size_of___wmul 0025  
                          ___lwdiv 0FC0           ??_setOverTemp_Exceptions 0063  
                  __size_of_setLED 005C                            __ptext0 0000  
                          __ptext1 0E43                            __ptext2 0C51  
                          __ptext3 0C61                            __ptext4 0C04  
                          __ptext5 0F04                            __ptext6 0218  
                          __ptext7 0FC0                            __ptext8 0730  
                          __ptext9 0F2A                         getPIR_AD@i 006F  
                       getPIR_AD@j 006D                       __size_of_ISR 0010  
              _SYSC_Initialization 0C05            ??_myMain_Initialization 0074  
         ??_setTemp_Initialization 0074                     _LedPointSelect 0DEE  
                          clrloop0 0C5A                  __end_of_setLights 06D7  
             end_of_initialization 0023                         _setLoad_GO 0C39  
            getMain_AD_Safe@result 0074           __size_of_getMain_AD_Safe 000E  
                    _getCDS_Status 0C49             __size_of_setLoad_Count 000C  
             ?_SYSC_Initialization 0070              _setLED_Initialization 0D88  
                      ?_getLoad_AD 0070     __size_of_Lights_Initialization 0004  
    __end_of_Lights_Initialization 0C19             ??_getMain_LightsStatus 0061  
                 _setLoad_StatusOn 0CEA                        ?_getTemp_AD 0070  
        setLoad_Exceptions@command 0065           setLED_Initialization@led 0063  
               _Mcu_Initialization 0CF9                   ??_setLoad_Enable 0074  
             __end_of_setSYSC_Main 05C3             __end_of_LedPointSelect 0E0A  
              ?_Mcu_Initialization 0070              __size_of_Lights_Close 001D  
                 ??_setLights_Main 0076               setLights_Main@lights 0065  
                 ?_setLights_Clear 0061                          _SYSC_Main 0C08  
                __size_of_CDS_Main 0043                     ?_getCDS_Status 0070  
       __end_of_setLoad_Exceptions 0EBC              ??_SYSC_Initialization 0074  
                   __end_of_IO_Set 0DC3         __end_of_CDS_Initialization 0C15  
       ??_setLights_Initialization 0076                setLoad_Exceptions@i 0064  
                __size_of_LED_Main 000C                  _getMain_Exception 0DC3  
             ??_Mcu_Initialization 0075                      ?_WDT_Clearing 0070  
                 _setLights_Switch 0D57                 ?_getMain_Exception 0070  
                ?_getLights_Status 0070                       ?_Lights_Main 0070  
                   __end_of___wmul 0F04    __size_of_setOverTemp_Exceptions 001C  
                __size_of_PIR_Main 01F2                  __size_of_TMR1_ISR 001E  
               ??_getLights_Status 0076                  __size_of_TMR1_Set 000E  
                   __end_of_setLED 067C                      _setLoad_Count 0C99  
              ??_getMain_Exception 0074           ??_setSYSC_Initialization 0074  
          setLoad_StatusOn@command 0074                       _Lights_Close 0E26  
                __size_of_WDT_Main 000F                start_initialization 0013  
                  ?_LedPointSelect 0070                          _Load_Main 0352  
          setLoad_StatusOff@lights 0075                        __end_of_ISR 0D27  
       __end_of_PIR_Initialization 0D57       __size_of_Load_Initialization 0006  
              getCDS_Status@result 0074    __size_of_setTemp_Initialization 0004  
             __end_of_setTemp_Main 04F7                        ?_setLoad_GO 0070  
              __size_of_getLoad_AD 0050                         ?_SYSC_Main 0070  
               _set_TimeoutCleared 0C2C                           ??_IO_Set 0074  
         __size_of_Timeout_Counter 0014                          _VarErrLED 005D  
              __size_of_getTemp_AD 0026             ?_setLED_Initialization 0070  
                __size_of_Fosc_Set 0005          __end_of_getMain_Exception 0DD8  
                        _Temp_Main 0C0E                    setLights@lights 0063  
    setOverTemp_Exceptions@command 0065                ?_set_TimeoutCleared 0070  
                   ??_WDT_Clearing 0074                  ??_getMain_AD_Safe 0074  
                  setLights@status 0061                           ??___wmul 0074  
                         ??_setLED 0076                   ??_setTemp_Enable 0074  
                         ?_ADC_Set 0070                   ??_Lights_Control 0061  
                   ?_setLoad_Count 0070                      ??_setLED_Main 0061  
                      __pbssCOMMON 0076                          ___latbits 0001  
                       ?_Load_Main 0070              setTemp_Enable@command 0074  
                    __pcstackBANK0 0061                      __pcstackBANK1 00E6  
             ??_set_TimeoutCleared 0074                           ?_WDT_Set 0070  
                  ??_getCDS_Status 0074             _setOverTemp_Exceptions 0E0A  
                        _getCDS_AD 0F2A     __size_of_setLoad_AH_AL_Restore 0016  
    __end_of_setLoad_AH_AL_Restore 0DEE                      ??_my_MainTime 0075  
                        _getPIR_AD 0218        __size_of_LED_Initialization 000C  
                       ?_Temp_Main 0070                   ___lwdiv@dividend 0063  
           _setTemp_Initialization 0C1D                           ?___awdiv 0061  
                         ?___lbdiv 0074                           ?___lwdiv 0061  
           setLights_Clear@command 0061              __size_of_setSYSC_Main 0064  
              __size_of_setLoad_GO 0008            setLights_Switch@command 0061  
         setLights_Trigger@command 0061    __size_of_setSYSC_Initialization 0004  
   __size_of_myMain_Initialization 0001      __end_of_myMain_Initialization 0C05  
                   __size_of_getAD 001E                   ___lwdiv@quotient 0066  
                         _CDS_Main 0780                __end_of_setLED_Main 0800  
         __end_of_setLoad_StatusOn 0CF9                        ??_SYSC_Main 0076  
      __end_of_Temp_Initialization 0C0E                  interrupt_function 0004  
                       ?_getCDS_AD 0061                     ___wmul@product 0074  
                         _LED_Main 0C81                          _setLights 067C  
                        clear_ram0 0C59         __size_of_getMain_Exception 0015  
 __end_of_setLights_Initialization 0D37                         ?_getPIR_AD 0069  
                     _setSYSC_Main 055F            getMain_Exception@result 0074  
                         _GO_nDONE 00F9                  ??_Timeout_Counter 0074  
                         _PIR_Main 0026                       ??_getLoad_AD 0061  
                         _TMR1_ISR 0E60                           _TMR1_Set 0CCD  
              __end_of_my_MainTime 0E60                    ??_setLoad_Count 0074  
                     ??_getTemp_AD 0061                           _WDT_Main 0D08  
              setLights_Main@clear 0064                   __size_of_ADC_Set 0007  
                ___wmul@multiplier 0061               __size_of_Lights_Main 000B  
            __size_of_setTemp_Main 0091                        ??_Load_Main 0066  
                      getAD@adcon0 0075                        getAD@adcon1 0074  
                   setLED_Main@led 0063               __end_of_WDT_Clearing 0004  
         __end_of_setLights_Switch 0D67                           _Fosc_Set 0C21  
                 __size_of_WDT_Set 000C             setLoad_StatusOn@lights 0075  
               __end_of_getLoad_AD 0780                         ?_setLights 0061  
               __end_of_getTemp_AD 0F2A             _setSYSC_Initialization 0C19  
                getLoad_AD@channel 0063                  _DetectSYSC_Signal 0CBF  
                      ??_Temp_Main 0076                _Load_Initialization 0C26  
               ?_DetectSYSC_Signal 0070                          setLED@led 0062  
                     _setTemp_Main 0466                 _setLoad_Exceptions 0E9C  
                 __size_of___awdiv 005D                   __size_of___lbdiv 0023  
                 __size_of___lwdiv 0040                   ??_LedPointSelect 0074  
              ??_DetectSYSC_Signal 0074                 _CDS_Initialization 0C11  
            _Lights_Initialization 0C15      __size_of_getMain_LightsStatus 0033  
                getTemp_AD@channel 0063                        _setLED_Main 07C3  
              ?_setLoad_Exceptions 0070                    ___lwdiv@divisor 0061  
             ?_Load_Initialization 0070                ?_CDS_Initialization 0070  
                  ___lwdiv@counter 0065                           __ptext10 0E7E  
                         __ptext11 0C2C                           __ptext20 0C0B  
                         __ptext12 0D9A                           __ptext21 0C1D  
                         __ptext13 0D08                           __ptext30 0C49  
                         __ptext22 0C08                           __ptext14 0002  
                         __ptext31 0D47                           __ptext23 055F  
                         __ptext15 0C0E                           __ptext40 0D37  
                         __ptext32 0CF9                           __ptext24 0C05  
                         __ptext16 0466                           __ptext41 0C41  
                         __ptext33 0CA5                           __ptext25 0C19  
                         __ptext17 0E0A                           __ptext50 0CDB  
                         __ptext42 0EDF                           __ptext34 0CCD  
                         __ptext26 0026                           __ptext18 0F54  
                         __ptext51 0C99                           __ptext43 0EBC  
                         __ptext35 0DAE                           __ptext27 0D67  
                         __ptext19 05C3                           __ptext60 07C3  
                         __ptext52 06D7                           __ptext44 0C26  
                         __ptext36 0C21                           __ptext28 0D57  
                         __ptext61 0C75                           __ptext53 0E26  
                         __ptext45 0DD8                           __ptext37 0C32  
                         __ptext29 0DC3                           __ptext70 0E60  
                         __ptext62 0D88                           __ptext54 0C39  
                         __ptext46 0C6A                           __ptext38 0352  
                         __ptext63 0620                           __ptext55 0D77  
                         __ptext47 0F87                           __ptext39 0E9C  
                         __ptext64 0DEE                           __ptext56 0C15  
                         __ptext48 067C                           __ptext65 0CBF  
                         __ptext57 0D27                           __ptext49 0CEA  
                         __ptext66 0780                           __ptext58 0C8D  
                         __ptext67 0CB1                           __ptext59 0C81  
                         __ptext68 0C11                           __ptext69 0D17  
        __size_of_getLights_Status 0011        __end_of_SYSC_Initialization 0C08  
            setLights_Clear@lights 0062                       ??_setLoad_GO 0074  
          ??_setLED_Initialization 0076                    _getMain_AD_Safe 0CB1  
                      ??_getCDS_AD 0062                      setLED@command 0061  
        __end_of_DetectSYSC_Signal 0CCD                      __size_of_main 0068  
             ??_setLoad_Exceptions 0063                        ??_getPIR_AD 006A  
               _PIR_Initialization 0D47                        _my_MainTime 0E43  
             ??_CDS_Initialization 0074           __size_of_setLights_Clear 0010  
      __size_of_Mcu_Initialization 000F                ?_PIR_Initialization 0070  
                         main@argc 00E6                           main@argv 00E8  
               __end_of_setLoad_GO 0C41  __size_of_setLights_Initialization 0010  
        ?_setLights_Initialization 0070                  setLoad_GO@command 0074  
            ??_Load_Initialization 0076               Lights_Control@lights 0063  
             setLoad_Count@command 0075            ?_setOverTemp_Exceptions 0070  
             ??_PIR_Initialization 0074                           intlevel1 0000  
          __size_of_setLoad_Enable 0009                        ??_setLights 0062  
          ?_setTemp_Initialization 0070            LightsPointSelect@lights 0075  
                      getLoad_AD@i 0065                        getLoad_AD@j 0064  
          __size_of_setLights_Main 0039                      ?_getTemp_Safe 0070  
           ?_Lights_Initialization 0070              __size_of_WDT_Clearing 0002  
   setLights_Initialization@lights 0061                  _setLoad_StatusOff 0CDB  
   __end_of_setOverTemp_Exceptions 0E26            __end_of_getMain_AD_Safe 0CBF  
      __size_of_set_TimeoutCleared 0006                 ?_setLoad_StatusOff 0074  
                _LightsPointSelect 0C8D                 __CFG_FOSC$INTOSCIO 0000  
               ?_LightsPointSelect 0070                    _Timeout_Counter 0D9A  
       __end_of_LED_Initialization 0C81                  ?_setLoad_StatusOn 0074  
            __end_of_getCDS_Status 0C51     __end_of_setTemp_Initialization 0C21  
              ??_setLoad_StatusOff 0075         __size_of_DetectSYSC_Signal 000E  
               ??_setLoad_StatusOn 0075                  getCDS_AD@channel1 0066  
                getCDS_AD@channel2 0061                ??_LightsPointSelect 0074  
                   ??_getTemp_Safe 0074              _setLoad_AH_AL_Restore 0DD8  
