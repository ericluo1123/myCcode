

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Dec 09 16:57:43 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,delta=2
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    77                           	dabs	1,0x7E,2
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0014                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001D                     	;# 
   110  001E                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  0087                     	;# 
   116  0089                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  008F                     	;# 
   121  0090                     	;# 
   122  0091                     	;# 
   123  0092                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0095                     	;# 
   128  0095                     	;# 
   129  0096                     	;# 
   130  0096                     	;# 
   131  0098                     	;# 
   132  0099                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009F                     	;# 
   136  0108                     	;# 
   137  0109                     	;# 
   138  010C                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  0185                     	;# 
   145  0186                     	;# 
   146  018C                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0089                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0095                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0096                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009F                     	;# 
   205  0108                     	;# 
   206  0109                     	;# 
   207  010C                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  0185                     	;# 
   214  0186                     	;# 
   215  018C                     	;# 
   216  0000                     	;# 
   217  0001                     	;# 
   218  0002                     	;# 
   219  0003                     	;# 
   220  0004                     	;# 
   221  0005                     	;# 
   222  0006                     	;# 
   223  0007                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  000E                     	;# 
   231  000F                     	;# 
   232  0010                     	;# 
   233  0011                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0015                     	;# 
   238  0015                     	;# 
   239  0016                     	;# 
   240  0017                     	;# 
   241  0018                     	;# 
   242  0019                     	;# 
   243  001A                     	;# 
   244  001B                     	;# 
   245  001B                     	;# 
   246  001C                     	;# 
   247  001D                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  0081                     	;# 
   251  0085                     	;# 
   252  0086                     	;# 
   253  0087                     	;# 
   254  0089                     	;# 
   255  008C                     	;# 
   256  008D                     	;# 
   257  008E                     	;# 
   258  008F                     	;# 
   259  0090                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0094                     	;# 
   265  0095                     	;# 
   266  0095                     	;# 
   267  0096                     	;# 
   268  0096                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009C                     	;# 
   272  009D                     	;# 
   273  009F                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  010F                     	;# 
   282  0185                     	;# 
   283  0186                     	;# 
   284  018C                     	;# 
   285  0000                     	;# 
   286  0001                     	;# 
   287  0002                     	;# 
   288  0003                     	;# 
   289  0004                     	;# 
   290  0005                     	;# 
   291  0006                     	;# 
   292  0007                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  000E                     	;# 
   300  000F                     	;# 
   301  0010                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0013                     	;# 
   305  0014                     	;# 
   306  0015                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001D                     	;# 
   317  001E                     	;# 
   318  001F                     	;# 
   319  0081                     	;# 
   320  0085                     	;# 
   321  0086                     	;# 
   322  0087                     	;# 
   323  0089                     	;# 
   324  008C                     	;# 
   325  008D                     	;# 
   326  008E                     	;# 
   327  008F                     	;# 
   328  0090                     	;# 
   329  0091                     	;# 
   330  0092                     	;# 
   331  0093                     	;# 
   332  0093                     	;# 
   333  0094                     	;# 
   334  0095                     	;# 
   335  0095                     	;# 
   336  0096                     	;# 
   337  0096                     	;# 
   338  0098                     	;# 
   339  0099                     	;# 
   340  009C                     	;# 
   341  009D                     	;# 
   342  009F                     	;# 
   343  0108                     	;# 
   344  0109                     	;# 
   345  010C                     	;# 
   346  010C                     	;# 
   347  010D                     	;# 
   348  010D                     	;# 
   349  010E                     	;# 
   350  010F                     	;# 
   351  0185                     	;# 
   352  0186                     	;# 
   353  018C                     	;# 
   354  0000                     	;# 
   355  0001                     	;# 
   356  0002                     	;# 
   357  0003                     	;# 
   358  0004                     	;# 
   359  0005                     	;# 
   360  0006                     	;# 
   361  0007                     	;# 
   362  0009                     	;# 
   363  000A                     	;# 
   364  000B                     	;# 
   365  000C                     	;# 
   366  000D                     	;# 
   367  000E                     	;# 
   368  000E                     	;# 
   369  000F                     	;# 
   370  0010                     	;# 
   371  0011                     	;# 
   372  0012                     	;# 
   373  0013                     	;# 
   374  0014                     	;# 
   375  0015                     	;# 
   376  0015                     	;# 
   377  0016                     	;# 
   378  0017                     	;# 
   379  0018                     	;# 
   380  0019                     	;# 
   381  001A                     	;# 
   382  001B                     	;# 
   383  001B                     	;# 
   384  001C                     	;# 
   385  001D                     	;# 
   386  001E                     	;# 
   387  001F                     	;# 
   388  0081                     	;# 
   389  0085                     	;# 
   390  0086                     	;# 
   391  0087                     	;# 
   392  0089                     	;# 
   393  008C                     	;# 
   394  008D                     	;# 
   395  008E                     	;# 
   396  008F                     	;# 
   397  0090                     	;# 
   398  0091                     	;# 
   399  0092                     	;# 
   400  0093                     	;# 
   401  0093                     	;# 
   402  0094                     	;# 
   403  0095                     	;# 
   404  0095                     	;# 
   405  0096                     	;# 
   406  0096                     	;# 
   407  0098                     	;# 
   408  0099                     	;# 
   409  009C                     	;# 
   410  009D                     	;# 
   411  009F                     	;# 
   412  0108                     	;# 
   413  0109                     	;# 
   414  010C                     	;# 
   415  010C                     	;# 
   416  010D                     	;# 
   417  010D                     	;# 
   418  010E                     	;# 
   419  010F                     	;# 
   420  0185                     	;# 
   421  0186                     	;# 
   422  018C                     	;# 
   423  0000                     	;# 
   424  0001                     	;# 
   425  0002                     	;# 
   426  0003                     	;# 
   427  0004                     	;# 
   428  0005                     	;# 
   429  0006                     	;# 
   430  0007                     	;# 
   431  0009                     	;# 
   432  000A                     	;# 
   433  000B                     	;# 
   434  000C                     	;# 
   435  000D                     	;# 
   436  000E                     	;# 
   437  000E                     	;# 
   438  000F                     	;# 
   439  0010                     	;# 
   440  0011                     	;# 
   441  0012                     	;# 
   442  0013                     	;# 
   443  0014                     	;# 
   444  0015                     	;# 
   445  0015                     	;# 
   446  0016                     	;# 
   447  0017                     	;# 
   448  0018                     	;# 
   449  0019                     	;# 
   450  001A                     	;# 
   451  001B                     	;# 
   452  001B                     	;# 
   453  001C                     	;# 
   454  001D                     	;# 
   455  001E                     	;# 
   456  001F                     	;# 
   457  0081                     	;# 
   458  0085                     	;# 
   459  0086                     	;# 
   460  0087                     	;# 
   461  0089                     	;# 
   462  008C                     	;# 
   463  008D                     	;# 
   464  008E                     	;# 
   465  008F                     	;# 
   466  0090                     	;# 
   467  0091                     	;# 
   468  0092                     	;# 
   469  0093                     	;# 
   470  0093                     	;# 
   471  0094                     	;# 
   472  0095                     	;# 
   473  0095                     	;# 
   474  0096                     	;# 
   475  0096                     	;# 
   476  0098                     	;# 
   477  0099                     	;# 
   478  009C                     	;# 
   479  009D                     	;# 
   480  009F                     	;# 
   481  0108                     	;# 
   482  0109                     	;# 
   483  010C                     	;# 
   484  010C                     	;# 
   485  010D                     	;# 
   486  010D                     	;# 
   487  010E                     	;# 
   488  010F                     	;# 
   489  0185                     	;# 
   490  0186                     	;# 
   491  018C                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0009                     	;# 
   501  000A                     	;# 
   502  000B                     	;# 
   503  000C                     	;# 
   504  000D                     	;# 
   505  000E                     	;# 
   506  000E                     	;# 
   507  000F                     	;# 
   508  0010                     	;# 
   509  0011                     	;# 
   510  0012                     	;# 
   511  0013                     	;# 
   512  0014                     	;# 
   513  0015                     	;# 
   514  0015                     	;# 
   515  0016                     	;# 
   516  0017                     	;# 
   517  0018                     	;# 
   518  0019                     	;# 
   519  001A                     	;# 
   520  001B                     	;# 
   521  001B                     	;# 
   522  001C                     	;# 
   523  001D                     	;# 
   524  001E                     	;# 
   525  001F                     	;# 
   526  0081                     	;# 
   527  0085                     	;# 
   528  0086                     	;# 
   529  0087                     	;# 
   530  0089                     	;# 
   531  008C                     	;# 
   532  008D                     	;# 
   533  008E                     	;# 
   534  008F                     	;# 
   535  0090                     	;# 
   536  0091                     	;# 
   537  0092                     	;# 
   538  0093                     	;# 
   539  0093                     	;# 
   540  0094                     	;# 
   541  0095                     	;# 
   542  0095                     	;# 
   543  0096                     	;# 
   544  0096                     	;# 
   545  0098                     	;# 
   546  0099                     	;# 
   547  009C                     	;# 
   548  009D                     	;# 
   549  009F                     	;# 
   550  0108                     	;# 
   551  0109                     	;# 
   552  010C                     	;# 
   553  010C                     	;# 
   554  010D                     	;# 
   555  010D                     	;# 
   556  010E                     	;# 
   557  010F                     	;# 
   558  0185                     	;# 
   559  0186                     	;# 
   560  018C                     	;# 
   561  0000                     	;# 
   562  0001                     	;# 
   563  0002                     	;# 
   564  0003                     	;# 
   565  0004                     	;# 
   566  0005                     	;# 
   567  0006                     	;# 
   568  0007                     	;# 
   569  0009                     	;# 
   570  000A                     	;# 
   571  000B                     	;# 
   572  000C                     	;# 
   573  000D                     	;# 
   574  000E                     	;# 
   575  000E                     	;# 
   576  000F                     	;# 
   577  0010                     	;# 
   578  0011                     	;# 
   579  0012                     	;# 
   580  0013                     	;# 
   581  0014                     	;# 
   582  0015                     	;# 
   583  0015                     	;# 
   584  0016                     	;# 
   585  0017                     	;# 
   586  0018                     	;# 
   587  0019                     	;# 
   588  001A                     	;# 
   589  001B                     	;# 
   590  001B                     	;# 
   591  001C                     	;# 
   592  001D                     	;# 
   593  001E                     	;# 
   594  001F                     	;# 
   595  0081                     	;# 
   596  0085                     	;# 
   597  0086                     	;# 
   598  0087                     	;# 
   599  0089                     	;# 
   600  008C                     	;# 
   601  008D                     	;# 
   602  008E                     	;# 
   603  008F                     	;# 
   604  0090                     	;# 
   605  0091                     	;# 
   606  0092                     	;# 
   607  0093                     	;# 
   608  0093                     	;# 
   609  0094                     	;# 
   610  0095                     	;# 
   611  0095                     	;# 
   612  0096                     	;# 
   613  0096                     	;# 
   614  0098                     	;# 
   615  0099                     	;# 
   616  009C                     	;# 
   617  009D                     	;# 
   618  009F                     	;# 
   619  0108                     	;# 
   620  0109                     	;# 
   621  010C                     	;# 
   622  010C                     	;# 
   623  010D                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  010F                     	;# 
   627  0185                     	;# 
   628  0186                     	;# 
   629  018C                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0009                     	;# 
   639  000A                     	;# 
   640  000B                     	;# 
   641  000C                     	;# 
   642  000D                     	;# 
   643  000E                     	;# 
   644  000E                     	;# 
   645  000F                     	;# 
   646  0010                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0014                     	;# 
   651  0015                     	;# 
   652  0015                     	;# 
   653  0016                     	;# 
   654  0017                     	;# 
   655  0018                     	;# 
   656  0019                     	;# 
   657  001A                     	;# 
   658  001B                     	;# 
   659  001B                     	;# 
   660  001C                     	;# 
   661  001D                     	;# 
   662  001E                     	;# 
   663  001F                     	;# 
   664  0081                     	;# 
   665  0085                     	;# 
   666  0086                     	;# 
   667  0087                     	;# 
   668  0089                     	;# 
   669  008C                     	;# 
   670  008D                     	;# 
   671  008E                     	;# 
   672  008F                     	;# 
   673  0090                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0093                     	;# 
   678  0094                     	;# 
   679  0095                     	;# 
   680  0095                     	;# 
   681  0096                     	;# 
   682  0096                     	;# 
   683  0098                     	;# 
   684  0099                     	;# 
   685  009C                     	;# 
   686  009D                     	;# 
   687  009F                     	;# 
   688  0108                     	;# 
   689  0109                     	;# 
   690  010C                     	;# 
   691  010C                     	;# 
   692  010D                     	;# 
   693  010D                     	;# 
   694  010E                     	;# 
   695  010F                     	;# 
   696  0185                     	;# 
   697  0186                     	;# 
   698  018C                     	;# 
   699  0000                     	;# 
   700  0001                     	;# 
   701  0002                     	;# 
   702  0003                     	;# 
   703  0004                     	;# 
   704  0005                     	;# 
   705  0006                     	;# 
   706  0007                     	;# 
   707  0009                     	;# 
   708  000A                     	;# 
   709  000B                     	;# 
   710  000C                     	;# 
   711  000D                     	;# 
   712  000E                     	;# 
   713  000E                     	;# 
   714  000F                     	;# 
   715  0010                     	;# 
   716  0011                     	;# 
   717  0012                     	;# 
   718  0013                     	;# 
   719  0014                     	;# 
   720  0015                     	;# 
   721  0015                     	;# 
   722  0016                     	;# 
   723  0017                     	;# 
   724  0018                     	;# 
   725  0019                     	;# 
   726  001A                     	;# 
   727  001B                     	;# 
   728  001B                     	;# 
   729  001C                     	;# 
   730  001D                     	;# 
   731  001E                     	;# 
   732  001F                     	;# 
   733  0081                     	;# 
   734  0085                     	;# 
   735  0086                     	;# 
   736  0087                     	;# 
   737  0089                     	;# 
   738  008C                     	;# 
   739  008D                     	;# 
   740  008E                     	;# 
   741  008F                     	;# 
   742  0090                     	;# 
   743  0091                     	;# 
   744  0092                     	;# 
   745  0093                     	;# 
   746  0093                     	;# 
   747  0094                     	;# 
   748  0095                     	;# 
   749  0095                     	;# 
   750  0096                     	;# 
   751  0096                     	;# 
   752  0098                     	;# 
   753  0099                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009F                     	;# 
   757  0108                     	;# 
   758  0109                     	;# 
   759  010C                     	;# 
   760  010C                     	;# 
   761  010D                     	;# 
   762  010D                     	;# 
   763  010E                     	;# 
   764  010F                     	;# 
   765  0185                     	;# 
   766  0186                     	;# 
   767  018C                     	;# 
   768  0000                     	;# 
   769  0001                     	;# 
   770  0002                     	;# 
   771  0003                     	;# 
   772  0004                     	;# 
   773  0005                     	;# 
   774  0006                     	;# 
   775  0007                     	;# 
   776  0009                     	;# 
   777  000A                     	;# 
   778  000B                     	;# 
   779  000C                     	;# 
   780  000D                     	;# 
   781  000E                     	;# 
   782  000E                     	;# 
   783  000F                     	;# 
   784  0010                     	;# 
   785  0011                     	;# 
   786  0012                     	;# 
   787  0013                     	;# 
   788  0014                     	;# 
   789  0015                     	;# 
   790  0015                     	;# 
   791  0016                     	;# 
   792  0017                     	;# 
   793  0018                     	;# 
   794  0019                     	;# 
   795  001A                     	;# 
   796  001B                     	;# 
   797  001B                     	;# 
   798  001C                     	;# 
   799  001D                     	;# 
   800  001E                     	;# 
   801  001F                     	;# 
   802  0081                     	;# 
   803  0085                     	;# 
   804  0086                     	;# 
   805  0087                     	;# 
   806  0089                     	;# 
   807  008C                     	;# 
   808  008D                     	;# 
   809  008E                     	;# 
   810  008F                     	;# 
   811  0090                     	;# 
   812  0091                     	;# 
   813  0092                     	;# 
   814  0093                     	;# 
   815  0093                     	;# 
   816  0094                     	;# 
   817  0095                     	;# 
   818  0095                     	;# 
   819  0096                     	;# 
   820  0096                     	;# 
   821  0098                     	;# 
   822  0099                     	;# 
   823  009C                     	;# 
   824  009D                     	;# 
   825  009F                     	;# 
   826  0108                     	;# 
   827  0109                     	;# 
   828  010C                     	;# 
   829  010C                     	;# 
   830  010D                     	;# 
   831  010D                     	;# 
   832  010E                     	;# 
   833  010F                     	;# 
   834  0185                     	;# 
   835  0186                     	;# 
   836  018C                     	;# 
   837  0000                     	;# 
   838  0001                     	;# 
   839  0002                     	;# 
   840  0003                     	;# 
   841  0004                     	;# 
   842  0005                     	;# 
   843  0006                     	;# 
   844  0007                     	;# 
   845  0009                     	;# 
   846  000A                     	;# 
   847  000B                     	;# 
   848  000C                     	;# 
   849  000D                     	;# 
   850  000E                     	;# 
   851  000E                     	;# 
   852  000F                     	;# 
   853  0010                     	;# 
   854  0011                     	;# 
   855  0012                     	;# 
   856  0013                     	;# 
   857  0014                     	;# 
   858  0015                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0017                     	;# 
   862  0018                     	;# 
   863  0019                     	;# 
   864  001A                     	;# 
   865  001B                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  001D                     	;# 
   869  001E                     	;# 
   870  001F                     	;# 
   871  0081                     	;# 
   872  0085                     	;# 
   873  0086                     	;# 
   874  0087                     	;# 
   875  0089                     	;# 
   876  008C                     	;# 
   877  008D                     	;# 
   878  008E                     	;# 
   879  008F                     	;# 
   880  0090                     	;# 
   881  0091                     	;# 
   882  0092                     	;# 
   883  0093                     	;# 
   884  0093                     	;# 
   885  0094                     	;# 
   886  0095                     	;# 
   887  0095                     	;# 
   888  0096                     	;# 
   889  0096                     	;# 
   890  0098                     	;# 
   891  0099                     	;# 
   892  009C                     	;# 
   893  009D                     	;# 
   894  009F                     	;# 
   895  0108                     	;# 
   896  0109                     	;# 
   897  010C                     	;# 
   898  010C                     	;# 
   899  010D                     	;# 
   900  010D                     	;# 
   901  010E                     	;# 
   902  010F                     	;# 
   903  0185                     	;# 
   904  0186                     	;# 
   905  018C                     	;# 
   906  0000                     	;# 
   907  0001                     	;# 
   908  0002                     	;# 
   909  0003                     	;# 
   910  0004                     	;# 
   911  0005                     	;# 
   912  0006                     	;# 
   913  0007                     	;# 
   914  0009                     	;# 
   915  000A                     	;# 
   916  000B                     	;# 
   917  000C                     	;# 
   918  000D                     	;# 
   919  000E                     	;# 
   920  000E                     	;# 
   921  000F                     	;# 
   922  0010                     	;# 
   923  0011                     	;# 
   924  0012                     	;# 
   925  0013                     	;# 
   926  0014                     	;# 
   927  0015                     	;# 
   928  0015                     	;# 
   929  0016                     	;# 
   930  0017                     	;# 
   931  0018                     	;# 
   932  0019                     	;# 
   933  001A                     	;# 
   934  001B                     	;# 
   935  001B                     	;# 
   936  001C                     	;# 
   937  001D                     	;# 
   938  001E                     	;# 
   939  001F                     	;# 
   940  0081                     	;# 
   941  0085                     	;# 
   942  0086                     	;# 
   943  0087                     	;# 
   944  0089                     	;# 
   945  008C                     	;# 
   946  008D                     	;# 
   947  008E                     	;# 
   948  008F                     	;# 
   949  0090                     	;# 
   950  0091                     	;# 
   951  0092                     	;# 
   952  0093                     	;# 
   953  0093                     	;# 
   954  0094                     	;# 
   955  0095                     	;# 
   956  0095                     	;# 
   957  0096                     	;# 
   958  0096                     	;# 
   959  0098                     	;# 
   960  0099                     	;# 
   961  009C                     	;# 
   962  009D                     	;# 
   963  009F                     	;# 
   964  0108                     	;# 
   965  0109                     	;# 
   966  010C                     	;# 
   967  010C                     	;# 
   968  010D                     	;# 
   969  010D                     	;# 
   970  010E                     	;# 
   971  010F                     	;# 
   972  0185                     	;# 
   973  0186                     	;# 
   974  018C                     	;# 
   975  0000                     	;# 
   976  0001                     	;# 
   977  0002                     	;# 
   978  0003                     	;# 
   979  0004                     	;# 
   980  0005                     	;# 
   981  0006                     	;# 
   982  0007                     	;# 
   983  0009                     	;# 
   984  000A                     	;# 
   985  000B                     	;# 
   986  000C                     	;# 
   987  000D                     	;# 
   988  000E                     	;# 
   989  000E                     	;# 
   990  000F                     	;# 
   991  0010                     	;# 
   992  0011                     	;# 
   993  0012                     	;# 
   994  0013                     	;# 
   995  0014                     	;# 
   996  0015                     	;# 
   997  0015                     	;# 
   998  0016                     	;# 
   999  0017                     	;# 
  1000  0018                     	;# 
  1001  0019                     	;# 
  1002  001A                     	;# 
  1003  001B                     	;# 
  1004  001B                     	;# 
  1005  001C                     	;# 
  1006  001D                     	;# 
  1007  001E                     	;# 
  1008  001F                     	;# 
  1009  0081                     	;# 
  1010  0085                     	;# 
  1011  0086                     	;# 
  1012  0087                     	;# 
  1013  0089                     	;# 
  1014  008C                     	;# 
  1015  008D                     	;# 
  1016  008E                     	;# 
  1017  008F                     	;# 
  1018  0090                     	;# 
  1019  0091                     	;# 
  1020  0092                     	;# 
  1021  0093                     	;# 
  1022  0093                     	;# 
  1023  0094                     	;# 
  1024  0095                     	;# 
  1025  0095                     	;# 
  1026  0096                     	;# 
  1027  0096                     	;# 
  1028  0098                     	;# 
  1029  0099                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009F                     	;# 
  1033  0108                     	;# 
  1034  0109                     	;# 
  1035  010C                     	;# 
  1036  010C                     	;# 
  1037  010D                     	;# 
  1038  010D                     	;# 
  1039  010E                     	;# 
  1040  010F                     	;# 
  1041  0185                     	;# 
  1042  0186                     	;# 
  1043  018C                     	;# 
  1044  0000                     	;# 
  1045  0001                     	;# 
  1046  0002                     	;# 
  1047  0003                     	;# 
  1048  0004                     	;# 
  1049  0005                     	;# 
  1050  0006                     	;# 
  1051  0007                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  000E                     	;# 
  1059  000F                     	;# 
  1060  0010                     	;# 
  1061  0011                     	;# 
  1062  0012                     	;# 
  1063  0013                     	;# 
  1064  0014                     	;# 
  1065  0015                     	;# 
  1066  0015                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001B                     	;# 
  1074  001C                     	;# 
  1075  001D                     	;# 
  1076  001E                     	;# 
  1077  001F                     	;# 
  1078  0081                     	;# 
  1079  0085                     	;# 
  1080  0086                     	;# 
  1081  0087                     	;# 
  1082  0089                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  008F                     	;# 
  1087  0090                     	;# 
  1088  0091                     	;# 
  1089  0092                     	;# 
  1090  0093                     	;# 
  1091  0093                     	;# 
  1092  0094                     	;# 
  1093  0095                     	;# 
  1094  0095                     	;# 
  1095  0096                     	;# 
  1096  0096                     	;# 
  1097  0098                     	;# 
  1098  0099                     	;# 
  1099  009C                     	;# 
  1100  009D                     	;# 
  1101  009F                     	;# 
  1102  0108                     	;# 
  1103  0109                     	;# 
  1104  010C                     	;# 
  1105  010C                     	;# 
  1106  010D                     	;# 
  1107  010D                     	;# 
  1108  010E                     	;# 
  1109  010F                     	;# 
  1110  0185                     	;# 
  1111  0186                     	;# 
  1112  018C                     	;# 
  1113  0000                     	;# 
  1114  0001                     	;# 
  1115  0002                     	;# 
  1116  0003                     	;# 
  1117  0004                     	;# 
  1118  0005                     	;# 
  1119  0006                     	;# 
  1120  0007                     	;# 
  1121  0009                     	;# 
  1122  000A                     	;# 
  1123  000B                     	;# 
  1124  000C                     	;# 
  1125  000D                     	;# 
  1126  000E                     	;# 
  1127  000E                     	;# 
  1128  000F                     	;# 
  1129  0010                     	;# 
  1130  0011                     	;# 
  1131  0012                     	;# 
  1132  0013                     	;# 
  1133  0014                     	;# 
  1134  0015                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0017                     	;# 
  1138  0018                     	;# 
  1139  0019                     	;# 
  1140  001A                     	;# 
  1141  001B                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  001D                     	;# 
  1145  001E                     	;# 
  1146  001F                     	;# 
  1147  0081                     	;# 
  1148  0085                     	;# 
  1149  0086                     	;# 
  1150  0087                     	;# 
  1151  0089                     	;# 
  1152  008C                     	;# 
  1153  008D                     	;# 
  1154  008E                     	;# 
  1155  008F                     	;# 
  1156  0090                     	;# 
  1157  0091                     	;# 
  1158  0092                     	;# 
  1159  0093                     	;# 
  1160  0093                     	;# 
  1161  0094                     	;# 
  1162  0095                     	;# 
  1163  0095                     	;# 
  1164  0096                     	;# 
  1165  0096                     	;# 
  1166  0098                     	;# 
  1167  0099                     	;# 
  1168  009C                     	;# 
  1169  009D                     	;# 
  1170  009F                     	;# 
  1171  0108                     	;# 
  1172  0109                     	;# 
  1173  010C                     	;# 
  1174  010C                     	;# 
  1175  010D                     	;# 
  1176  010D                     	;# 
  1177  010E                     	;# 
  1178  010F                     	;# 
  1179  0185                     	;# 
  1180  0186                     	;# 
  1181  018C                     	;# 
  1182  0000                     	;# 
  1183  0001                     	;# 
  1184  0002                     	;# 
  1185  0003                     	;# 
  1186  0004                     	;# 
  1187  0005                     	;# 
  1188  0006                     	;# 
  1189  0007                     	;# 
  1190  0009                     	;# 
  1191  000A                     	;# 
  1192  000B                     	;# 
  1193  000C                     	;# 
  1194  000D                     	;# 
  1195  000E                     	;# 
  1196  000E                     	;# 
  1197  000F                     	;# 
  1198  0010                     	;# 
  1199  0011                     	;# 
  1200  0012                     	;# 
  1201  0013                     	;# 
  1202  0014                     	;# 
  1203  0015                     	;# 
  1204  0015                     	;# 
  1205  0016                     	;# 
  1206  0017                     	;# 
  1207  0018                     	;# 
  1208  0019                     	;# 
  1209  001A                     	;# 
  1210  001B                     	;# 
  1211  001B                     	;# 
  1212  001C                     	;# 
  1213  001D                     	;# 
  1214  001E                     	;# 
  1215  001F                     	;# 
  1216  0081                     	;# 
  1217  0085                     	;# 
  1218  0086                     	;# 
  1219  0087                     	;# 
  1220  0089                     	;# 
  1221  008C                     	;# 
  1222  008D                     	;# 
  1223  008E                     	;# 
  1224  008F                     	;# 
  1225  0090                     	;# 
  1226  0091                     	;# 
  1227  0092                     	;# 
  1228  0093                     	;# 
  1229  0093                     	;# 
  1230  0094                     	;# 
  1231  0095                     	;# 
  1232  0095                     	;# 
  1233  0096                     	;# 
  1234  0096                     	;# 
  1235  0098                     	;# 
  1236  0099                     	;# 
  1237  009C                     	;# 
  1238  009D                     	;# 
  1239  009F                     	;# 
  1240  0108                     	;# 
  1241  0109                     	;# 
  1242  010C                     	;# 
  1243  010C                     	;# 
  1244  010D                     	;# 
  1245  010D                     	;# 
  1246  010E                     	;# 
  1247  010F                     	;# 
  1248  0185                     	;# 
  1249  0186                     	;# 
  1250  018C                     	;# 
  1251  0000                     	;# 
  1252  0001                     	;# 
  1253  0002                     	;# 
  1254  0003                     	;# 
  1255  0004                     	;# 
  1256  0005                     	;# 
  1257  0006                     	;# 
  1258  0007                     	;# 
  1259  0009                     	;# 
  1260  000A                     	;# 
  1261  000B                     	;# 
  1262  000C                     	;# 
  1263  000D                     	;# 
  1264  000E                     	;# 
  1265  000E                     	;# 
  1266  000F                     	;# 
  1267  0010                     	;# 
  1268  0011                     	;# 
  1269  0012                     	;# 
  1270  0013                     	;# 
  1271  0014                     	;# 
  1272  0015                     	;# 
  1273  0015                     	;# 
  1274  0016                     	;# 
  1275  0017                     	;# 
  1276  0018                     	;# 
  1277  0019                     	;# 
  1278  001A                     	;# 
  1279  001B                     	;# 
  1280  001B                     	;# 
  1281  001C                     	;# 
  1282  001D                     	;# 
  1283  001E                     	;# 
  1284  001F                     	;# 
  1285  0081                     	;# 
  1286  0085                     	;# 
  1287  0086                     	;# 
  1288  0087                     	;# 
  1289  0089                     	;# 
  1290  008C                     	;# 
  1291  008D                     	;# 
  1292  008E                     	;# 
  1293  008F                     	;# 
  1294  0090                     	;# 
  1295  0091                     	;# 
  1296  0092                     	;# 
  1297  0093                     	;# 
  1298  0093                     	;# 
  1299  0094                     	;# 
  1300  0095                     	;# 
  1301  0095                     	;# 
  1302  0096                     	;# 
  1303  0096                     	;# 
  1304  0098                     	;# 
  1305  0099                     	;# 
  1306  009C                     	;# 
  1307  009D                     	;# 
  1308  009F                     	;# 
  1309  0108                     	;# 
  1310  0109                     	;# 
  1311  010C                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010D                     	;# 
  1315  010E                     	;# 
  1316  010F                     	;# 
  1317  0185                     	;# 
  1318  0186                     	;# 
  1319  018C                     	;# 
  1320  001F                     _ADCON0	set	31
  1321  001E                     _ADRES	set	30
  1322  0005                     _PORTA	set	5
  1323  0006                     _PORTB	set	6
  1324  0007                     _PORTC	set	7
  1325  0010                     _T1CON	set	16
  1326  000F                     _TMR1H	set	15
  1327  000E                     _TMR1L	set	14
  1328  005F                     _GIE	set	95
  1329  00F9                     _GO_nDONE	set	249
  1330  005E                     _PEIE	set	94
  1331  002C                     _RA4	set	44
  1332  002D                     _RA5	set	45
  1333  0032                     _RB2	set	50
  1334  0033                     _RB3	set	51
  1335  0034                     _RB4	set	52
  1336  0035                     _RB5	set	53
  1337  0060                     _TMR1IF	set	96
  1338  009F                     _ADCON1	set	159
  1339  009D                     _FVRCON	set	157
  1340  0090                     _OSCCON	set	144
  1341  0085                     _TRISA	set	133
  1342  0086                     _TRISB	set	134
  1343  0087                     _TRISC	set	135
  1344  0408                     _PS0	set	1032
  1345  0409                     _PS1	set	1033
  1346  040A                     _PS2	set	1034
  1347  040B                     _PSA	set	1035
  1348  0460                     _TMR1IE	set	1120
  1349  0185                     _ANSELA	set	389
  1350  0186                     _ANSELB	set	390
  1351                           
  1352                           	psect	text0
  1353  0000                     __ptext0:	
  1354                           ; #config settings
  1355                           
  1356                           
  1357                           ;psect for function _TMR1_ISR
  1358  0000                     
  1359                           	psect	cinit
  1360  0013                     start_initialization:	
  1361  0013                     __initialization:	
  1362                           
  1363                           ; Clear objects allocated to COMMON
  1364  0013  01F7               	clrf	__pbssCOMMON& (0+127)
  1365  0014  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1366  0015  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1367                           
  1368                           ; Clear objects allocated to BANK0
  1369  0016  1383               	bcf	3,7	;select IRP bank0
  1370  0017  3020               	movlw	low __pbssBANK0
  1371  0018  0084               	movwf	4
  1372  0019  3059               	movlw	low (__pbssBANK0+57)
  1373  001A  158A  23A3  118A   	fcall	clear_ram0
  1374                           
  1375                           ; Clear objects allocated to BANK1
  1376  001D  30A0               	movlw	low __pbssBANK1
  1377  001E  0084               	movwf	4
  1378  001F  30F0               	movlw	low (__pbssBANK1+80)
  1379  0020  158A  23A3         	fcall	clear_ram0
  1380  0022                     end_of_initialization:	
  1381                           ;End of C runtime variable initialization code
  1382                           
  1383  0022                     __end_of__initialization:	
  1384  0022  0183               	clrf	3
  1385  0023  158A  2F99         	ljmp	_main	;jump to C main() function
  1386                           
  1387                           	psect	bssCOMMON
  1388  0077                     __pbssCOMMON:	
  1389  0077                     _LED:	
  1390  0077                     	ds	1
  1391  0078                     _Lights:	
  1392  0078                     	ds	1
  1393  0079                     _SwDetect:	
  1394  0079                     	ds	1
  1395                           
  1396                           	psect	bssBANK0
  1397  0020                     __pbssBANK0:	
  1398  0020                     _myMain:	
  1399  0020                     	ds	6
  1400  0026                     _SYSC:	
  1401  0026                     	ds	5
  1402  002B                     __CDS:	
  1403  002B                     	ds	5
  1404  0030                     _PIRLED:	
  1405  0030                     	ds	4
  1406  0034                     _Timer1:	
  1407  0034                     	ds	3
  1408  0037                     _WDT:	
  1409  0037                     	ds	2
  1410  0039                     _LightsControl:	
  1411  0039                     	ds	1
  1412  003A                     _Temp:	
  1413  003A                     	ds	12
  1414  0046                     _Lights1:	
  1415  0046                     	ds	7
  1416  004D                     _VarErrLED:	
  1417  004D                     	ds	4
  1418  0051                     _VarLED1:	
  1419  0051                     	ds	4
  1420  0055                     _VarLED2:	
  1421  0055                     	ds	4
  1422                           
  1423                           	psect	bssBANK1
  1424  00A0                     __pbssBANK1:	
  1425  00A0                     __PIR:	
  1426  00A0                     	ds	47
  1427  00CF                     _Load:	
  1428  00CF                     	ds	33
  1429                           
  1430                           	psect	clrtext
  1431  0BA3                     clear_ram0:	
  1432                           ;	Called with FSR containing the base address, and
  1433                           ;	W with the last address+1
  1434                           
  1435  0BA3  0064               	clrwdt	;clear the watchdog before getting into this loop
  1436  0BA4                     clrloop0:	
  1437  0BA4  0180               	clrf	0	;clear RAM location pointed to by FSR
  1438  0BA5  0A84               	incf	4,f	;increment pointer
  1439  0BA6  0604               	xorwf	4,w	;XOR with final address
  1440  0BA7  1903               	btfsc	3,2	;have we reached the end yet?
  1441  0BA8  3400               	retlw	0	;all done for this memory range, return
  1442  0BA9  0604               	xorwf	4,w	;XOR again to restore value
  1443  0BAA  2BA4               	goto	clrloop0	;do the next byte
  1444                           
  1445                           	psect	cstackCOMMON
  1446  0070                     __pcstackCOMMON:	
  1447  0070                     ?_setLED_Initialization:	
  1448  0070                     ?_setPIRLED_Main:	
  1449                           ; 0 bytes @ 0x0
  1450                           
  1451  0070                     ?_Fosc_Set:	
  1452                           ; 0 bytes @ 0x0
  1453                           
  1454  0070                     ?_IO_Set:	
  1455                           ; 0 bytes @ 0x0
  1456                           
  1457  0070                     ?_TMR1_Set:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_ADC_Set:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_WDT_Set:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_TMR1_ISR:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ??_TMR1_ISR:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_Timeout_Counter:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ?_set_TimeoutCleared:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ?_WDT_Clearing:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_myMain_Initialization:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_SYSC_Initialization:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_Temp_Initialization:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_Load_Initialization:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_Lights_Initialization:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_PIR_Initialization:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_DetectSYSC_Signal:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_getLoad_AD:	
  1503                           ; 0 bytes @ 0x0
  1504                           
  1505  0070                     ?_getTemp_AD:	
  1506                           ; 0 bytes @ 0x0
  1507                           
  1508  0070                     ?_my_MainTimer:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0070                     ?_SYSC_Main:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0070                     ?_Temp_Main:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0070                     ?_Load_Main:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0070                     ?_Lights_Main:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0070                     ?_PIR_Main:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0070                     ?_Exception_Main:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0070                     ?_setLoad_AH_AL_Restore:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0070                     ?_setTemp_Initialization:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0070                     ?_setTemp_Main:	
  1536                           ; 0 bytes @ 0x0
  1537                           
  1538  0070                     ?_setSYSC_Initialization:	
  1539                           ; 0 bytes @ 0x0
  1540                           
  1541  0070                     ?_setSYSC_Main:	
  1542                           ; 0 bytes @ 0x0
  1543                           
  1544  0070                     ?_setLights_Initialization:	
  1545                           ; 0 bytes @ 0x0
  1546                           
  1547  0070                     ?_setLights_Main:	
  1548                           ; 0 bytes @ 0x0
  1549                           
  1550  0070                     ?_Lights_Control:	
  1551                           ; 0 bytes @ 0x0
  1552                           
  1553  0070                     ?_Lights_Close:	
  1554                           ; 0 bytes @ 0x0
  1555                           
  1556  0070                     ?_setLights_Line:	
  1557                           ; 0 bytes @ 0x0
  1558                           
  1559  0070                     ?_CDS_Initialization:	
  1560                           ; 0 bytes @ 0x0
  1561                           
  1562  0070                     ?_CDS_Main:	
  1563                           ; 0 bytes @ 0x0
  1564                           
  1565  0070                     ?_LedPointSelect:	
  1566                           ; 0 bytes @ 0x0
  1567                           
  1568  0070                     ?_LED_Initialization:	
  1569                           ; 0 bytes @ 0x0
  1570                           
  1571  0070                     ?_LED_Main:	
  1572                           ; 0 bytes @ 0x0
  1573                           
  1574  0070                     ?_Mcu_Initialization:	
  1575                           ; 0 bytes @ 0x0
  1576                           
  1577  0070                     ?_ISR:	
  1578                           ; 0 bytes @ 0x0
  1579                           
  1580  0070                     ??_ISR:	
  1581                           ; 0 bytes @ 0x0
  1582                           
  1583  0070                     ?_WDT_Main:	
  1584                           ; 0 bytes @ 0x0
  1585                           
  1586  0070                     ?_LightsPointSelect:	
  1587                           ; 0 bytes @ 0x0
  1588                           
  1589  0070                     ?_getAll_Lights_Line:	
  1590                           ; 0 bytes @ 0x0
  1591                           
  1592  0070                     ?_getLights_Status:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ?_getLightsControl_OK:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ?_getCDS_Status:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ?_getMain_LightsStatus:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_getMain_All_Error_Status:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_getMain_Lights_Count:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_getMain_LoadOK:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_getLoad_OK:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616                           
  1617                           ; 1 bytes @ 0x0
  1618  0070                     	ds	4
  1619  0074                     ??_Fosc_Set:	
  1620  0074                     ??_IO_Set:	
  1621                           ; 0 bytes @ 0x4
  1622                           
  1623  0074                     ??_TMR1_Set:	
  1624                           ; 0 bytes @ 0x4
  1625                           
  1626  0074                     ??_ADC_Set:	
  1627                           ; 0 bytes @ 0x4
  1628                           
  1629  0074                     ??_WDT_Set:	
  1630                           ; 0 bytes @ 0x4
  1631                           
  1632  0074                     ??_Timeout_Counter:	
  1633                           ; 0 bytes @ 0x4
  1634                           
  1635  0074                     ??_set_TimeoutCleared:	
  1636                           ; 0 bytes @ 0x4
  1637                           
  1638  0074                     ??_WDT_Clearing:	
  1639                           ; 0 bytes @ 0x4
  1640                           
  1641  0074                     ??_myMain_Initialization:	
  1642                           ; 0 bytes @ 0x4
  1643                           
  1644  0074                     ??_SYSC_Initialization:	
  1645                           ; 0 bytes @ 0x4
  1646                           
  1647  0074                     ??_Temp_Initialization:	
  1648                           ; 0 bytes @ 0x4
  1649                           
  1650  0074                     ??_PIR_Initialization:	
  1651                           ; 0 bytes @ 0x4
  1652                           
  1653  0074                     ??_DetectSYSC_Signal:	
  1654                           ; 0 bytes @ 0x4
  1655                           
  1656  0074                     ??_my_MainTimer:	
  1657                           ; 0 bytes @ 0x4
  1658                           
  1659  0074                     ??_getLightsControl_OK:	
  1660                           ; 0 bytes @ 0x4
  1661                           
  1662  0074                     ??_setLoad_AH_AL_Restore:	
  1663                           ; 0 bytes @ 0x4
  1664                           
  1665  0074                     ??_setTemp_Initialization:	
  1666                           ; 0 bytes @ 0x4
  1667                           
  1668  0074                     ??_setSYSC_Initialization:	
  1669                           ; 0 bytes @ 0x4
  1670                           
  1671  0074                     ??_CDS_Initialization:	
  1672                           ; 0 bytes @ 0x4
  1673                           
  1674  0074                     ??_CDS_Main:	
  1675                           ; 0 bytes @ 0x4
  1676                           
  1677  0074                     ??_getCDS_Status:	
  1678                           ; 0 bytes @ 0x4
  1679                           
  1680  0074                     ??_LedPointSelect:	
  1681                           ; 0 bytes @ 0x4
  1682                           
  1683  0074                     ??_WDT_Main:	
  1684                           ; 0 bytes @ 0x4
  1685                           
  1686  0074                     ??_getMain_All_Error_Status:	
  1687                           ; 0 bytes @ 0x4
  1688                           
  1689  0074                     ??_getMain_Lights_Count:	
  1690                           ; 0 bytes @ 0x4
  1691                           
  1692  0074                     ??_getLoad_OK:	
  1693                           ; 0 bytes @ 0x4
  1694                           
  1695  0074                     ??_LightsPointSelect:	
  1696                           ; 0 bytes @ 0x4
  1697                           
  1698  0074                     ??___awdiv:	
  1699                           ; 0 bytes @ 0x4
  1700                           
  1701  0074                     ??___lwdiv:	
  1702                           ; 0 bytes @ 0x4
  1703                           
  1704  0074                     ?_getAD:	
  1705                           ; 0 bytes @ 0x4
  1706                           
  1707  0074                     getCDS_Status@status:	
  1708                           ; 1 bytes @ 0x4
  1709                           
  1710  0074                     getAD@adcon1:	
  1711                           ; 1 bytes @ 0x4
  1712                           
  1713  0074                     getLoad_OK@ok:	
  1714                           ; 1 bytes @ 0x4
  1715                           
  1716  0074                     getLightsControl_OK@loadok:	
  1717                           ; 1 bytes @ 0x4
  1718                           
  1719                           
  1720                           ; 1 bytes @ 0x4
  1721  0074                     	ds	1
  1722  0075                     ??_getAD:	
  1723  0075                     ??_SYSC_Main:	
  1724                           ; 0 bytes @ 0x5
  1725                           
  1726  0075                     ??_setSYSC_Main:	
  1727                           ; 0 bytes @ 0x5
  1728                           
  1729  0075                     ??_Mcu_Initialization:	
  1730                           ; 0 bytes @ 0x5
  1731                           
  1732  0075                     ??_getMain_LoadOK:	
  1733                           ; 0 bytes @ 0x5
  1734                           
  1735  0075                     LedPointSelect@led:	
  1736                           ; 0 bytes @ 0x5
  1737                           
  1738  0075                     getAD@adcon0:	
  1739                           ; 1 bytes @ 0x5
  1740                           
  1741  0075                     setLoad_AH_AL_Restore@i:	
  1742                           ; 1 bytes @ 0x5
  1743                           
  1744  0075                     LightsPointSelect@lights:	
  1745                           ; 1 bytes @ 0x5
  1746                           
  1747                           
  1748                           ; 1 bytes @ 0x5
  1749  0075                     	ds	1
  1750  0076                     ?_setLED:	
  1751  0076                     ??_Load_Initialization:	
  1752                           ; 0 bytes @ 0x6
  1753                           
  1754  0076                     ?_getPIR_AD:	
  1755                           ; 0 bytes @ 0x6
  1756                           
  1757  0076                     ??_getAll_Lights_Line:	
  1758                           ; 0 bytes @ 0x6
  1759                           
  1760  0076                     ??_getLights_Status:	
  1761                           ; 0 bytes @ 0x6
  1762                           
  1763  0076                     ?_setLights_Trigger:	
  1764                           ; 0 bytes @ 0x6
  1765                           
  1766  0076                     ??_setLights_Initialization:	
  1767                           ; 0 bytes @ 0x6
  1768                           
  1769  0076                     ??_setLights_Line:	
  1770                           ; 0 bytes @ 0x6
  1771                           
  1772  0076                     ?_getCDS_AD:	
  1773                           ; 0 bytes @ 0x6
  1774                           
  1775  0076                     ??_getMain_LightsStatus:	
  1776                           ; 0 bytes @ 0x6
  1777                           
  1778  0076                     getCDS_AD@channel2:	
  1779                           ; 0 bytes @ 0x6
  1780                           
  1781  0076                     setLED@command:	
  1782                           ; 1 bytes @ 0x6
  1783                           
  1784  0076                     getMain_LoadOK@ok:	
  1785                           ; 1 bytes @ 0x6
  1786                           
  1787  0076                     getTemp_AD@channel:	
  1788                           ; 1 bytes @ 0x6
  1789                           
  1790  0076                     getPIR_AD@channel2:	
  1791                           ; 1 bytes @ 0x6
  1792                           
  1793  0076                     setLights_Initialization@lights:	
  1794                           ; 1 bytes @ 0x6
  1795                           
  1796  0076                     setLights_Trigger@command:	
  1797                           ; 1 bytes @ 0x6
  1798                           
  1799  0076                     setLights_Line@lights:	
  1800                           ; 1 bytes @ 0x6
  1801                           
  1802  0076                     getAll_Lights_Line@line:	
  1803                           ; 1 bytes @ 0x6
  1804                           
  1805                           
  1806                           ; 1 bytes @ 0x6
  1807  0076                     	ds	1
  1808  0077                     ??_setLED_Initialization:	
  1809  0077                     ??_setLED:	
  1810                           ; 0 bytes @ 0x7
  1811                           
  1812  0077                     ??_Lights_Initialization:	
  1813                           ; 0 bytes @ 0x7
  1814                           
  1815  0077                     ??_Temp_Main:	
  1816                           ; 0 bytes @ 0x7
  1817                           
  1818  0077                     ??_setLights_Main:	
  1819                           ; 0 bytes @ 0x7
  1820                           
  1821  0077                     ??_LED_Initialization:	
  1822                           ; 0 bytes @ 0x7
  1823                           
  1824  0077                     ??_LED_Main:	
  1825                           ; 0 bytes @ 0x7
  1826                           
  1827                           
  1828                           	psect	cstackBANK0
  1829  0059                     __pcstackBANK0:	
  1830                           ; 0 bytes @ 0x7
  1831                           
  1832  0059                     ??_getLoad_AD:	
  1833  0059                     ??_getTemp_AD:	
  1834                           ; 0 bytes @ 0x0
  1835                           
  1836  0059                     ??_setLights_Trigger:	
  1837                           ; 0 bytes @ 0x0
  1838                           
  1839  0059                     ??_Lights_Control:	
  1840                           ; 0 bytes @ 0x0
  1841                           
  1842  0059                     ??_getCDS_AD:	
  1843                           ; 0 bytes @ 0x0
  1844                           
  1845  0059                     ?___awdiv:	
  1846                           ; 0 bytes @ 0x0
  1847                           
  1848  0059                     ?___lwdiv:	
  1849                           ; 2 bytes @ 0x0
  1850                           
  1851  0059                     setLED@led:	
  1852                           ; 2 bytes @ 0x0
  1853                           
  1854  0059                     getMain_Lights_Count@count:	
  1855                           ; 1 bytes @ 0x0
  1856                           
  1857  0059                     getLights_Status@lights:	
  1858                           ; 1 bytes @ 0x0
  1859                           
  1860  0059                     _getMain_All_Error_Status$2252:	
  1861                           ; 1 bytes @ 0x0
  1862                           
  1863  0059                     ___awdiv@divisor:	
  1864                           ; 2 bytes @ 0x0
  1865                           
  1866  0059                     ___lwdiv@divisor:	
  1867                           ; 2 bytes @ 0x0
  1868                           
  1869                           
  1870                           ; 2 bytes @ 0x0
  1871  0059                     	ds	1
  1872  005A                     ??_setPIRLED_Main:	
  1873  005A                     setLED_Initialization@led:	
  1874                           ; 0 bytes @ 0x1
  1875                           
  1876  005A                     getMain_Lights_Count@status2:	
  1877                           ; 1 bytes @ 0x1
  1878                           
  1879  005A                     getLights_Status@status:	
  1880                           ; 1 bytes @ 0x1
  1881                           
  1882  005A                     setLights_Trigger@lights:	
  1883                           ; 1 bytes @ 0x1
  1884                           
  1885                           
  1886                           ; 1 bytes @ 0x1
  1887  005A                     	ds	1
  1888  005B                     getCDS_AD@i:	
  1889  005B                     setPIRLED_Main@count:	
  1890                           ; 1 bytes @ 0x2
  1891                           
  1892  005B                     getMain_LightsStatus@count:	
  1893                           ; 1 bytes @ 0x2
  1894                           
  1895  005B                     getMain_Lights_Count@status3:	
  1896                           ; 1 bytes @ 0x2
  1897                           
  1898  005B                     getLoad_AD@channel:	
  1899                           ; 1 bytes @ 0x2
  1900                           
  1901  005B                     _getMain_All_Error_Status$2253:	
  1902                           ; 1 bytes @ 0x2
  1903                           
  1904  005B                     _Lights_Control$4403:	
  1905                           ; 2 bytes @ 0x2
  1906                           
  1907  005B                     ___awdiv@dividend:	
  1908                           ; 2 bytes @ 0x2
  1909                           
  1910  005B                     ___lwdiv@dividend:	
  1911                           ; 2 bytes @ 0x2
  1912                           
  1913                           
  1914                           ; 2 bytes @ 0x2
  1915  005B                     	ds	1
  1916  005C                     getCDS_AD@j:	
  1917  005C                     getMain_Lights_Count@status1:	
  1918                           ; 1 bytes @ 0x3
  1919                           
  1920  005C                     getLoad_AD@k:	
  1921                           ; 1 bytes @ 0x3
  1922                           
  1923  005C                     getMain_LightsStatus@i:	
  1924                           ; 1 bytes @ 0x3
  1925                           
  1926                           
  1927                           ; 2 bytes @ 0x3
  1928  005C                     	ds	1
  1929  005D                     getCDS_AD@channel1:	
  1930  005D                     getMain_All_Error_Status@command:	
  1931                           ; 1 bytes @ 0x4
  1932                           
  1933  005D                     getLoad_AD@j:	
  1934                           ; 1 bytes @ 0x4
  1935                           
  1936  005D                     Lights_Control@lights:	
  1937                           ; 1 bytes @ 0x4
  1938                           
  1939  005D                     ___awdiv@counter:	
  1940                           ; 1 bytes @ 0x4
  1941                           
  1942  005D                     ___lwdiv@counter:	
  1943                           ; 1 bytes @ 0x4
  1944                           
  1945                           
  1946                           ; 1 bytes @ 0x4
  1947  005D                     	ds	1
  1948  005E                     getMain_LightsStatus@status:	
  1949  005E                     getMain_All_Error_Status@status:	
  1950                           ; 1 bytes @ 0x5
  1951                           
  1952  005E                     getLoad_AD@i:	
  1953                           ; 1 bytes @ 0x5
  1954                           
  1955  005E                     ___awdiv@sign:	
  1956                           ; 1 bytes @ 0x5
  1957                           
  1958  005E                     ___lwdiv@quotient:	
  1959                           ; 1 bytes @ 0x5
  1960                           
  1961                           
  1962                           ; 2 bytes @ 0x5
  1963  005E                     	ds	1
  1964  005F                     ??_PIR_Main:	
  1965  005F                     ??_Exception_Main:	
  1966                           ; 0 bytes @ 0x6
  1967                           
  1968  005F                     ??_Lights_Close:	
  1969                           ; 0 bytes @ 0x6
  1970                           
  1971  005F                     ?_setLights:	
  1972                           ; 0 bytes @ 0x6
  1973                           
  1974  005F                     setLights@status:	
  1975                           ; 0 bytes @ 0x6
  1976                           
  1977  005F                     ___awdiv@quotient:	
  1978                           ; 1 bytes @ 0x6
  1979                           
  1980                           
  1981                           ; 2 bytes @ 0x6
  1982  005F                     	ds	1
  1983  0060                     ??_Load_Main:	
  1984  0060                     ??_setLights:	
  1985                           ; 0 bytes @ 0x7
  1986                           
  1987  0060                     Exception_Main@count:	
  1988                           ; 0 bytes @ 0x7
  1989                           
  1990                           
  1991                           ; 1 bytes @ 0x7
  1992  0060                     	ds	1
  1993  0061                     ??_getPIR_AD:	
  1994  0061                     ??_setTemp_Main:	
  1995                           ; 0 bytes @ 0x8
  1996                           
  1997  0061                     Exception_Main@status:	
  1998                           ; 0 bytes @ 0x8
  1999                           
  2000  0061                     setLights@lights:	
  2001                           ; 1 bytes @ 0x8
  2002                           
  2003                           
  2004                           ; 1 bytes @ 0x8
  2005  0061                     	ds	1
  2006  0062                     Load_Main@j:	
  2007  0062                     setTemp_Main@error:	
  2008                           ; 1 bytes @ 0x9
  2009                           
  2010  0062                     setLights_Main@lights:	
  2011                           ; 1 bytes @ 0x9
  2012                           
  2013  0062                     Exception_Main@i:	
  2014                           ; 1 bytes @ 0x9
  2015                           
  2016                           
  2017                           ; 2 bytes @ 0x9
  2018  0062                     	ds	1
  2019  0063                     ??_Lights_Main:	
  2020  0063                     Load_Main@adjgo:	
  2021                           ; 0 bytes @ 0xA
  2022                           
  2023                           
  2024                           ; 1 bytes @ 0xA
  2025  0063                     	ds	1
  2026  0064                     Exception_Main@error:	
  2027  0064                     _Load_Main$2511:	
  2028                           ; 1 bytes @ 0xB
  2029                           
  2030  0064                     PIR_Main@error:	
  2031                           ; 1 bytes @ 0xB
  2032                           
  2033  0064                     getPIR_AD@j:	
  2034                           ; 1 bytes @ 0xB
  2035                           
  2036                           
  2037                           ; 1 bytes @ 0xB
  2038  0064                     	ds	1
  2039  0065                     Load_Main@error:	
  2040  0065                     getPIR_AD@channel1:	
  2041                           ; 1 bytes @ 0xC
  2042                           
  2043  0065                     _PIR_Main$2993:	
  2044                           ; 1 bytes @ 0xC
  2045                           
  2046                           
  2047                           ; 2 bytes @ 0xC
  2048  0065                     	ds	1
  2049  0066                     Load_Main@i:	
  2050  0066                     getPIR_AD@i:	
  2051                           ; 1 bytes @ 0xD
  2052                           
  2053  0066                     _Lights_Main$4394:	
  2054                           ; 1 bytes @ 0xD
  2055                           
  2056                           
  2057                           ; 2 bytes @ 0xD
  2058  0066                     	ds	1
  2059  0067                     PIR_Main@cds:	
  2060                           
  2061                           ; 1 bytes @ 0xE
  2062  0067                     	ds	1
  2063  0068                     ?_main:	
  2064  0068                     main@argc:	
  2065                           ; 2 bytes @ 0xF
  2066                           
  2067                           
  2068                           ; 2 bytes @ 0xF
  2069  0068                     	ds	2
  2070  006A                     main@argv:	
  2071                           
  2072                           ; 2 bytes @ 0x11
  2073  006A                     	ds	2
  2074  006C                     ??_main:	
  2075                           
  2076                           ; 0 bytes @ 0x13
  2077  006C                     	ds	1
  2078                           
  2079                           	psect	maintext
  2080  0F99                     __pmaintext:	
  2081 ;;
  2082 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2083 ;;
  2084 ;; *************** function _main *****************
  2085 ;; Defined at:
  2086 ;;		line 7 in file "../src/Main_B1.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  argc            2   15[BANK0 ] int 
  2089 ;;  argv            2   17[BANK0 ] PTR PTR unsigned char 
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;		None
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  2   15[BANK0 ] int 
  2094 ;; Registers used:
  2095 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2096 ;; Tracked objects:
  2097 ;;		On entry : 17F/0
  2098 ;;		On exit  : 0/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2101 ;;      Params:         0       4       0       0
  2102 ;;      Locals:         0       0       0       0
  2103 ;;      Temps:          0       1       0       0
  2104 ;;      Totals:         0       5       0       0
  2105 ;;Total ram usage:        5 bytes
  2106 ;; Hardware stack levels required when called:    7
  2107 ;; This function calls:
  2108 ;;		_CDS_Initialization
  2109 ;;		_CDS_Main
  2110 ;;		_DetectSYSC_Signal
  2111 ;;		_Exception_Main
  2112 ;;		_LED_Initialization
  2113 ;;		_LED_Main
  2114 ;;		_Lights_Initialization
  2115 ;;		_Lights_Main
  2116 ;;		_Load_Initialization
  2117 ;;		_Load_Main
  2118 ;;		_Mcu_Initialization
  2119 ;;		_PIR_Initialization
  2120 ;;		_PIR_Main
  2121 ;;		_SYSC_Initialization
  2122 ;;		_SYSC_Main
  2123 ;;		_Temp_Initialization
  2124 ;;		_Temp_Main
  2125 ;;		_WDT_Main
  2126 ;;		_getCDS_AD
  2127 ;;		_getLoad_AD
  2128 ;;		_getPIR_AD
  2129 ;;		_getTemp_AD
  2130 ;;		_myMain_Initialization
  2131 ;;		_my_MainTimer
  2132 ;; This function is called by:
  2133 ;;		Startup code after reset
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           
  2138                           ;psect for function _main
  2139  0F99                     _main:	
  2140                           
  2141                           ;Main_B1.c: 8: myMain_Initialization();
  2142                           
  2143                           ;incstack = 0
  2144                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2145  0F99  118A  2003  158A   	fcall	_myMain_Initialization
  2146                           
  2147                           ;Main_B1.c: 9: Mcu_Initialization();
  2148  0F9C  158A  241B  158A   	fcall	_Mcu_Initialization
  2149                           
  2150                           ;Main_B1.c: 10: ;;
  2151                           ;Main_B1.c: 11: LED_Initialization();
  2152  0F9F  158A  23C0  158A   	fcall	_LED_Initialization
  2153                           
  2154                           ;Main_B1.c: 12: ;;
  2155                           ;Main_B1.c: 14: SYSC_Initialization();
  2156  0FA2  158A  2356  158A   	fcall	_SYSC_Initialization
  2157                           
  2158                           ;Main_B1.c: 15: Temp_Initialization();
  2159  0FA5  158A  235C  158A   	fcall	_Temp_Initialization
  2160                           
  2161                           ;Main_B1.c: 16: Load_Initialization();
  2162  0FA8  158A  2378  158A   	fcall	_Load_Initialization
  2163                           
  2164                           ;Main_B1.c: 17: ;;
  2165                           ;Main_B1.c: 18: ;;
  2166                           ;Main_B1.c: 20: ;;
  2167                           ;Main_B1.c: 21: Lights_Initialization();
  2168  0FAB  158A  2366  158A   	fcall	_Lights_Initialization
  2169                           
  2170                           ;Main_B1.c: 22: CDS_Initialization();
  2171  0FAE  158A  2362  158A   	fcall	_CDS_Initialization
  2172                           
  2173                           ;Main_B1.c: 23: PIR_Initialization();
  2174  0FB1  158A  23B5  158A   	fcall	_PIR_Initialization
  2175                           
  2176                           ;Main_B1.c: 24: ;;
  2177                           ;Main_B1.c: 25: ;;
  2178                           ;Main_B1.c: 26: __nop();
  2179  0FB4  0000               	nop
  2180  0FB5                     l5224:	
  2181                           ;Main_B1.c: 27: ;;
  2182                           ;Main_B1.c: 28: ;;
  2183                           ;Main_B1.c: 30: while (1) {
  2184                           
  2185                           
  2186                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2187  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2188  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2189  0FB7  1C20               	btfss	_myMain,0
  2190  0FB8  2FD8               	goto	l5236
  2191                           
  2192                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2193  0FB9  158A  23F1  158A   	fcall	_DetectSYSC_Signal
  2194                           
  2195                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2196  0FBC  3001               	movlw	1
  2197  0FBD  118A  2659  158A   	fcall	_getLoad_AD
  2198                           
  2199                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2200  0FC0  3011               	movlw	17
  2201  0FC1  158A  2544  158A   	fcall	_getTemp_AD
  2202                           
  2203                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x31);
  2204  0FC4  3031               	movlw	49
  2205  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  2206  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  2207  0FC7  00EC               	movwf	??_main
  2208  0FC8  086C               	movf	??_main,w
  2209  0FC9  00F6               	movwf	getCDS_AD@channel2
  2210  0FCA  3009               	movlw	9
  2211  0FCB  158A  2593  158A   	fcall	_getCDS_AD
  2212                           
  2213                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2214  0FCE  300D               	movlw	13
  2215  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2216  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  2217  0FD1  00EC               	movwf	??_main
  2218  0FD2  086C               	movf	??_main,w
  2219  0FD3  00F6               	movwf	getPIR_AD@channel2
  2220  0FD4  3005               	movlw	5
  2221  0FD5  118A  23AD  158A   	fcall	_getPIR_AD
  2222  0FD8                     l5236:	
  2223                           
  2224                           ;Main_B1.c: 57: }
  2225                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2226  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2227  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2228  0FDA  1C34               	btfss	_Timer1,0
  2229  0FDB  2FB5               	goto	l5224
  2230                           
  2231                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2232  0FDC  1034               	bcf	_Timer1,0
  2233                           
  2234                           ;Main_B1.c: 96: my_MainTimer();
  2235  0FDD  158A  24D7  158A   	fcall	_my_MainTimer
  2236                           
  2237                           ;Main_B1.c: 97: WDT_Main();
  2238  0FE0  158A  245C  158A   	fcall	_WDT_Main
  2239                           
  2240                           ;Main_B1.c: 98: ;;
  2241                           ;Main_B1.c: 99: ;;
  2242                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2243  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  2244  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  2245  0FE5  1C20               	btfss	_myMain,0
  2246  0FE6  2FB5               	goto	l5224
  2247                           
  2248                           ;Main_B1.c: 101: ;;
  2249                           ;Main_B1.c: 103: LED_Main();
  2250  0FE7  158A  2353  158A   	fcall	_LED_Main
  2251                           
  2252                           ;Main_B1.c: 104: ;;
  2253                           ;Main_B1.c: 106: SYSC_Main();
  2254  0FEA  158A  2359  158A   	fcall	_SYSC_Main
  2255                           
  2256                           ;Main_B1.c: 107: Temp_Main();
  2257  0FED  158A  235F  158A   	fcall	_Temp_Main
  2258                           
  2259                           ;Main_B1.c: 108: Load_Main();
  2260  0FF0  118A  21FF  158A   	fcall	_Load_Main
  2261                           
  2262                           ;Main_B1.c: 109: ;;
  2263                           ;Main_B1.c: 111: Lights_Main();
  2264  0FF3  158A  2622  158A   	fcall	_Lights_Main
  2265                           
  2266                           ;Main_B1.c: 112: ;;
  2267                           ;Main_B1.c: 113: ;;
  2268                           ;Main_B1.c: 114: CDS_Main();
  2269  0FF6  158A  25EE  158A   	fcall	_CDS_Main
  2270                           
  2271                           ;Main_B1.c: 115: PIR_Main();
  2272  0FF9  118A  2025  158A   	fcall	_PIR_Main
  2273                           
  2274                           ;Main_B1.c: 117: ;;
  2275                           ;Main_B1.c: 118: ;;
  2276                           ;Main_B1.c: 119: ;;
  2277                           ;Main_B1.c: 120: ;;
  2278                           ;Main_B1.c: 121: Exception_Main();
  2279  0FFC  118A  25E6  158A   	fcall	_Exception_Main
  2280  0FFF  2FB5               	goto	l5224
  2281  1000                     __end_of_main:	
  2282                           ;Main_B1.c: 128: }
  2283                           ;Main_B1.c: 129: }
  2284                           ;Main_B1.c: 163: }
  2285                           ;Main_B1.c: 164: return (0);
  2286                           ;	Return value of _main is never used
  2287                           
  2288                           
  2289                           	psect	text1
  2290  0CD7                     __ptext1:	
  2291 ;; *************** function _my_MainTimer *****************
  2292 ;; Defined at:
  2293 ;;		line 185 in file "../src/Main_B1.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;		None
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;		None
  2298 ;; Return value:  Size  Location     Type
  2299 ;;		None               void
  2300 ;; Registers used:
  2301 ;;		wreg, status,2, status,0
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2307 ;;      Params:         0       0       0       0
  2308 ;;      Locals:         0       0       0       0
  2309 ;;      Temps:          1       0       0       0
  2310 ;;      Totals:         1       0       0       0
  2311 ;;Total ram usage:        1 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    2
  2314 ;; This function calls:
  2315 ;;		Nothing
  2316 ;; This function is called by:
  2317 ;;		_main
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           
  2322                           ;psect for function _my_MainTimer
  2323  0CD7                     _my_MainTimer:	
  2324                           
  2325                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  2326                           
  2327                           ;incstack = 0
  2328                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2329  0CD7  1283               	bcf	3,5	;RP0=0, select bank0
  2330  0CD8  1303               	bcf	3,6	;RP1=0, select bank0
  2331  0CD9  1820               	btfsc	_myMain,0
  2332  0CDA  2CE7               	goto	l3752
  2333                           
  2334                           ;Main_B1.c: 189: myMain.PowerCount++;
  2335  0CDB  3001               	movlw	1
  2336  0CDC  00F4               	movwf	??_my_MainTimer
  2337  0CDD  0874               	movf	??_my_MainTimer,w
  2338  0CDE  07A1               	addwf	_myMain+1,f
  2339                           
  2340                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  2341  0CDF  0821               	movf	_myMain+1,w
  2342  0CE0  3A96               	xorlw	150
  2343  0CE1  1D03               	skipz
  2344  0CE2  0008               	return
  2345                           
  2346                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  2347  0CE3  01A1               	clrf	_myMain+1
  2348                           
  2349                           ;Main_B1.c: 192: myMain.PowerON = 1;
  2350  0CE4  1420               	bsf	_myMain,0
  2351                           
  2352                           ;Main_B1.c: 197: ;;
  2353                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  2354  0CE5  1620               	bsf	_myMain,4
  2355                           
  2356                           ;Main_B1.c: 207: }
  2357                           ;Main_B1.c: 208: } else {
  2358  0CE6  0008               	return
  2359  0CE7                     l3752:	
  2360                           
  2361                           ;Main_B1.c: 209: myMain.PowerCount++;
  2362  0CE7  3001               	movlw	1
  2363  0CE8  00F4               	movwf	??_my_MainTimer
  2364  0CE9  0874               	movf	??_my_MainTimer,w
  2365  0CEA  07A1               	addwf	_myMain+1,f
  2366                           
  2367                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  2368  0CEB  0821               	movf	_myMain+1,w
  2369  0CEC  3A64               	xorlw	100
  2370  0CED  1D03               	skipz
  2371  0CEE  0008               	return
  2372                           
  2373                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  2374  0CEF  01A1               	clrf	_myMain+1
  2375  0CF0  0008               	return
  2376  0CF1                     __end_of_my_MainTimer:	
  2377                           
  2378                           	psect	text2
  2379  0003                     __ptext2:	
  2380 ;; *************** function _myMain_Initialization *****************
  2381 ;; Defined at:
  2382 ;;		line 170 in file "../src/Main_B1.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;		None
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;		None
  2387 ;; Return value:  Size  Location     Type
  2388 ;;		None               void
  2389 ;; Registers used:
  2390 ;;		None
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2396 ;;      Params:         0       0       0       0
  2397 ;;      Locals:         0       0       0       0
  2398 ;;      Temps:          0       0       0       0
  2399 ;;      Totals:         0       0       0       0
  2400 ;;Total ram usage:        0 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    2
  2403 ;; This function calls:
  2404 ;;		Nothing
  2405 ;; This function is called by:
  2406 ;;		_main
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           
  2411                           ;psect for function _myMain_Initialization
  2412  0003                     _myMain_Initialization:	
  2413                           
  2414                           ;incstack = 0
  2415                           ; Regs used in _myMain_Initialization: []
  2416  0003  0008               	return
  2417  0004                     __end_of_myMain_Initialization:	
  2418                           
  2419                           	psect	text3
  2420  0D44                     __ptext3:	
  2421 ;; *************** function _getTemp_AD *****************
  2422 ;; Defined at:
  2423 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;  channel         1    wreg     unsigned char 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  channel         1    6[COMMON] unsigned char 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;		None               void
  2430 ;; Registers used:
  2431 ;;		wreg, status,2, status,0, pclath, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2437 ;;      Params:         0       0       0       0
  2438 ;;      Locals:         1       0       0       0
  2439 ;;      Temps:          0       2       0       0
  2440 ;;      Totals:         1       2       0       0
  2441 ;;Total ram usage:        3 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    4
  2444 ;; This function calls:
  2445 ;;		_getAD
  2446 ;; This function is called by:
  2447 ;;		_main
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           
  2452                           ;psect for function _getTemp_AD
  2453  0D44                     _getTemp_AD:	
  2454                           
  2455                           ;incstack = 0
  2456                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2457                           ;getTemp_AD@channel stored from wreg
  2458  0D44  00F6               	movwf	getTemp_AD@channel
  2459                           
  2460                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  2461  0D45  1283               	bcf	3,5	;RP0=0, select bank0
  2462  0D46  1303               	bcf	3,6	;RP1=0, select bank0
  2463  0D47  1D3A               	btfss	_Temp,2
  2464  0D48  0008               	return
  2465                           
  2466                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0x70);
  2467  0D49  3070               	movlw	112
  2468  0D4A  00D9               	movwf	??_getTemp_AD
  2469  0D4B  0859               	movf	??_getTemp_AD,w
  2470  0D4C  00F4               	movwf	getAD@adcon1
  2471  0D4D  0876               	movf	getTemp_AD@channel,w
  2472  0D4E  158A  2528  158A   	fcall	_getAD
  2473  0D51  1283               	bcf	3,5	;RP0=0, select bank0
  2474  0D52  1303               	bcf	3,6	;RP1=0, select bank0
  2475  0D53  00DA               	movwf	??_getTemp_AD+1
  2476  0D54  085A               	movf	??_getTemp_AD+1,w
  2477  0D55  00C3               	movwf	_Temp+9
  2478                           
  2479                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  2480  0D56  0843               	movf	_Temp+9,w
  2481  0D57  1903               	btfsc	3,2
  2482  0D58  0008               	return
  2483                           
  2484                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  2485  0D59  0843               	movf	_Temp+9,w
  2486  0D5A  0241               	subwf	_Temp+7,w
  2487  0D5B  1803               	skipnc
  2488  0D5C  2D62               	goto	l4762
  2489                           
  2490                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  2491  0D5D  0843               	movf	_Temp+9,w
  2492  0D5E  00D9               	movwf	??_getTemp_AD
  2493  0D5F  0859               	movf	??_getTemp_AD,w
  2494  0D60  00C1               	movwf	_Temp+7
  2495                           
  2496                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  2497  0D61  0008               	return
  2498  0D62                     l4762:	
  2499  0D62  0843               	movf	_Temp+9,w
  2500  0D63  0242               	subwf	_Temp+8,w
  2501  0D64  1803               	skipnc
  2502  0D65  0008               	return
  2503                           
  2504                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  2505  0D66  0843               	movf	_Temp+9,w
  2506  0D67  00D9               	movwf	??_getTemp_AD
  2507  0D68  0859               	movf	??_getTemp_AD,w
  2508  0D69  00C2               	movwf	_Temp+8
  2509  0D6A  0008               	return
  2510  0D6B                     __end_of_getTemp_AD:	
  2511                           
  2512                           	psect	text4
  2513  03AD                     __ptext4:	
  2514 ;; *************** function _getPIR_AD *****************
  2515 ;; Defined at:
  2516 ;;		line 220 in file "../src/PIR_B1.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  channel1        1    wreg     unsigned char 
  2519 ;;  channel2        1    6[COMMON] unsigned char 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  channel1        1   12[BANK0 ] unsigned char 
  2522 ;;  i               1   13[BANK0 ] unsigned char 
  2523 ;;  j               1   11[BANK0 ] unsigned char 
  2524 ;; Return value:  Size  Location     Type
  2525 ;;		None               void
  2526 ;; Registers used:
  2527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2533 ;;      Params:         1       0       0       0
  2534 ;;      Locals:         0       3       0       0
  2535 ;;      Temps:          0       3       0       0
  2536 ;;      Totals:         1       6       0       0
  2537 ;;Total ram usage:        7 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    4
  2540 ;; This function calls:
  2541 ;;		___awdiv
  2542 ;;		___lwdiv
  2543 ;;		_getAD
  2544 ;; This function is called by:
  2545 ;;		_main
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           
  2550                           ;psect for function _getPIR_AD
  2551  03AD                     _getPIR_AD:	
  2552                           
  2553                           ;incstack = 0
  2554                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2555                           ;getPIR_AD@channel1 stored from wreg
  2556  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2557  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  2558  03AF  00E5               	movwf	getPIR_AD@channel1
  2559                           
  2560                           ;PIR_B1.c: 221: char i = 0, j = 0;
  2561  03B0  01E6               	clrf	getPIR_AD@i
  2562  03B1  01E4               	clrf	getPIR_AD@j
  2563                           
  2564                           ;PIR_B1.c: 223: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2565  03B2  1683               	bsf	3,5	;RP0=1, select bank1
  2566  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  2567  03B4  1CA0               	btfss	__PIR^(0+128),1
  2568  03B5  0008               	return
  2569  03B6  1920               	btfsc	__PIR^(0+128),2
  2570  03B7  0008               	return
  2571                           
  2572                           ;PIR_B1.c: 224: _PIR.GO = 1;
  2573  03B8  1520               	bsf	__PIR^(0+128),2
  2574                           
  2575                           ;PIR_B1.c: 225: _PIR.ADRES = getAD(channel1, 0x70);
  2576  03B9  3070               	movlw	112
  2577  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  2578  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  2579  03BC  00E1               	movwf	??_getPIR_AD
  2580  03BD  0861               	movf	??_getPIR_AD,w
  2581  03BE  00F4               	movwf	getAD@adcon1
  2582  03BF  0865               	movf	getPIR_AD@channel1,w
  2583  03C0  158A  2528  118A   	fcall	_getAD
  2584  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  2585  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  2586  03C5  00E2               	movwf	??_getPIR_AD+1
  2587  03C6  0862               	movf	??_getPIR_AD+1,w
  2588  03C7  1683               	bsf	3,5	;RP0=1, select bank1
  2589  03C8  1303               	bcf	3,6	;RP1=0, select bank1
  2590  03C9  00A2               	movwf	(__PIR^(0+128)+2)
  2591                           
  2592                           ;PIR_B1.c: 226: _PIR.VRAD = _PIR.ADRES / 51;
  2593  03CA  3033               	movlw	51
  2594  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  2595  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  2596  03CD  00D9               	movwf	___awdiv@divisor
  2597  03CE  3000               	movlw	0
  2598  03CF  00DA               	movwf	___awdiv@divisor+1
  2599  03D0  1683               	bsf	3,5	;RP0=1, select bank1
  2600  03D1  1303               	bcf	3,6	;RP1=0, select bank1
  2601  03D2  0822               	movf	(__PIR^(0+128)+2),w
  2602  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  2603  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  2604  03D5  00E1               	movwf	??_getPIR_AD
  2605  03D6  01E2               	clrf	??_getPIR_AD+1
  2606  03D7  0861               	movf	??_getPIR_AD,w
  2607  03D8  00DB               	movwf	___awdiv@dividend
  2608  03D9  0862               	movf	??_getPIR_AD+1,w
  2609  03DA  00DC               	movwf	___awdiv@dividend+1
  2610  03DB  158A  26DB  118A   	fcall	___awdiv
  2611  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  2612  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  2613  03E0  0859               	movf	?___awdiv,w
  2614  03E1  00E3               	movwf	??_getPIR_AD+2
  2615  03E2  0863               	movf	??_getPIR_AD+2,w
  2616  03E3  1683               	bsf	3,5	;RP0=1, select bank1
  2617  03E4  1303               	bcf	3,6	;RP1=0, select bank1
  2618  03E5  00A3               	movwf	(__PIR^(0+128)+3)
  2619                           
  2620                           ;PIR_B1.c: 227: _PIR.VRAD1 = _PIR.ADRES;
  2621  03E6  0822               	movf	(__PIR^(0+128)+2),w
  2622  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  2623  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  2624  03E9  00E1               	movwf	??_getPIR_AD
  2625  03EA  0861               	movf	??_getPIR_AD,w
  2626  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  2627  03EC  1303               	bcf	3,6	;RP1=0, select bank1
  2628  03ED  00A4               	movwf	(__PIR^(0+128)+4)
  2629                           
  2630                           ;PIR_B1.c: 228: _PIR.ADRES = getAD(channel2, 0x70);
  2631  03EE  3070               	movlw	112
  2632  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  2633  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  2634  03F1  00E1               	movwf	??_getPIR_AD
  2635  03F2  0861               	movf	??_getPIR_AD,w
  2636  03F3  00F4               	movwf	getAD@adcon1
  2637  03F4  0876               	movf	getPIR_AD@channel2,w
  2638  03F5  158A  2528  118A   	fcall	_getAD
  2639  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  2640  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  2641  03FA  00E2               	movwf	??_getPIR_AD+1
  2642  03FB  0862               	movf	??_getPIR_AD+1,w
  2643  03FC  1683               	bsf	3,5	;RP0=1, select bank1
  2644  03FD  1303               	bcf	3,6	;RP1=0, select bank1
  2645  03FE  00A2               	movwf	(__PIR^(0+128)+2)
  2646                           
  2647                           ;PIR_B1.c: 229: _PIR.SignalAD = _PIR.ADRES;
  2648  03FF  0822               	movf	(__PIR^(0+128)+2),w
  2649  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2650  0401  1303               	bcf	3,6	;RP1=0, select bank0
  2651  0402  00E1               	movwf	??_getPIR_AD
  2652  0403  0861               	movf	??_getPIR_AD,w
  2653  0404  1683               	bsf	3,5	;RP0=1, select bank1
  2654  0405  1303               	bcf	3,6	;RP1=0, select bank1
  2655  0406  00A1               	movwf	(__PIR^(0+128)+1)
  2656                           
  2657                           ;PIR_B1.c: 231: switch (_PIR.VRAD) {
  2658  0407  2C23               	goto	l4796
  2659  0408                     l4780:	
  2660                           ;PIR_B1.c: 232: case 0:
  2661                           
  2662                           
  2663                           ;PIR_B1.c: 233: if (_PIR.VRAD1 < 10) {
  2664  0408  300A               	movlw	10
  2665  0409  0224               	subwf	(__PIR^(0+128)+4),w
  2666  040A  1803               	skipnc
  2667  040B  2C0E               	goto	l4784
  2668                           
  2669                           ;PIR_B1.c: 234: _PIR.CloseTimeValue = 5;
  2670  040C  3005               	movlw	5
  2671  040D  2C0F               	goto	L1
  2672  040E                     l4784:	
  2673                           ;PIR_B1.c: 235: } else {
  2674                           
  2675                           
  2676                           ;PIR_B1.c: 236: _PIR.CloseTimeValue = 60;
  2677  040E  303C               	movlw	60
  2678  040F                     L1:	
  2679  040F  00C7               	movwf	(__PIR^(0+128)+39)
  2680  0410  3000               	movlw	0
  2681  0411  2C21               	goto	L5
  2682  0412                     l4786:	
  2683                           ;PIR_B1.c: 239: case 1:
  2684                           
  2685                           ;PIR_B1.c: 237: }
  2686                           ;PIR_B1.c: 238: break;
  2687                           
  2688                           
  2689                           ;PIR_B1.c: 240: _PIR.CloseTimeValue = 300;
  2690  0412  302C               	movlw	44
  2691  0413  00C7               	movwf	(__PIR^(0+128)+39)
  2692  0414  3001               	movlw	1
  2693  0415  2C21               	goto	L5
  2694  0416                     l4788:	
  2695                           ;PIR_B1.c: 242: case 2:
  2696                           
  2697                           ;PIR_B1.c: 241: break;
  2698                           
  2699                           
  2700                           ;PIR_B1.c: 243: _PIR.CloseTimeValue = 600;
  2701  0416  3058               	movlw	88
  2702  0417  00C7               	movwf	(__PIR^(0+128)+39)
  2703  0418  3002               	movlw	2
  2704  0419  2C21               	goto	L5
  2705  041A                     l4790:	
  2706                           ;PIR_B1.c: 245: case 3:
  2707                           
  2708                           ;PIR_B1.c: 244: break;
  2709                           
  2710                           
  2711                           ;PIR_B1.c: 246: _PIR.CloseTimeValue = 900;
  2712  041A  3084               	movlw	132
  2713  041B  00C7               	movwf	(__PIR^(0+128)+39)
  2714  041C  3003               	movlw	3
  2715  041D  2C21               	goto	L5
  2716  041E                     l4792:	
  2717                           ;PIR_B1.c: 248: case 4:
  2718                           
  2719                           ;PIR_B1.c: 247: break;
  2720                           
  2721                           
  2722                           ;PIR_B1.c: 249: _PIR.CloseTimeValue = 1200;
  2723  041E  30B0               	movlw	176
  2724  041F  00C7               	movwf	(__PIR^(0+128)+39)
  2725  0420  3004               	movlw	4
  2726  0421                     L5:	
  2727  0421  00C8               	movwf	(__PIR^(0+128)+40)
  2728                           
  2729                           ;PIR_B1.c: 251: }
  2730                           
  2731                           ;PIR_B1.c: 250: break;
  2732  0422  2C34               	goto	l4798
  2733  0423                     l4796:	
  2734  0423  0823               	movf	(__PIR^(0+128)+3),w
  2735                           
  2736                           ; Switch size 1, requested type "space"
  2737                           ; Number of cases is 5, Range of values is 0 to 4
  2738                           ; switch strategies available:
  2739                           ; Name         Instructions Cycles
  2740                           ; simple_byte           16     9 (average)
  2741                           ; direct_byte           17     7 (fixed)
  2742                           ; jumptable            260     6 (fixed)
  2743                           ;	Chosen strategy is simple_byte
  2744  0424  3A00               	xorlw	0	; case 0
  2745  0425  1903               	skipnz
  2746  0426  2C08               	goto	l4780
  2747  0427  3A01               	xorlw	1	; case 1
  2748  0428  1903               	skipnz
  2749  0429  2C12               	goto	l4786
  2750  042A  3A03               	xorlw	3	; case 2
  2751  042B  1903               	skipnz
  2752  042C  2C16               	goto	l4788
  2753  042D  3A01               	xorlw	1	; case 3
  2754  042E  1903               	skipnz
  2755  042F  2C1A               	goto	l4790
  2756  0430  3A07               	xorlw	7	; case 4
  2757  0431  1903               	skipnz
  2758  0432  2C1E               	goto	l4792
  2759  0433  2C34               	goto	l4798
  2760  0434                     l4798:	
  2761                           
  2762                           ;PIR_B1.c: 254: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2763  0434  0821               	movf	(__PIR^(0+128)+1),w
  2764  0435  1283               	bcf	3,5	;RP0=0, select bank0
  2765  0436  1303               	bcf	3,6	;RP1=0, select bank0
  2766  0437  00E1               	movwf	??_getPIR_AD
  2767  0438  1683               	bsf	3,5	;RP0=1, select bank1
  2768  0439  1303               	bcf	3,6	;RP1=0, select bank1
  2769  043A  0827               	movf	(__PIR^(0+128)+7),w
  2770  043B  3EA8               	addlw	(__PIR+8)& (0+255)
  2771  043C  0084               	movwf	4
  2772  043D  1283               	bcf	3,5	;RP0=0, select bank0
  2773  043E  1303               	bcf	3,6	;RP1=0, select bank0
  2774  043F  0861               	movf	??_getPIR_AD,w
  2775  0440  1383               	bcf	3,7	;select IRP bank1
  2776  0441  0080               	movwf	0
  2777                           
  2778                           ;PIR_B1.c: 255: for (i = 0; i < 10; i++) {
  2779  0442  01E6               	clrf	getPIR_AD@i
  2780  0443  300A               	movlw	10
  2781  0444  0266               	subwf	getPIR_AD@i,w
  2782  0445  1803               	btfsc	3,0
  2783  0446  2C63               	goto	l4812
  2784  0447                     l4806:	
  2785                           
  2786                           ;PIR_B1.c: 256: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2787  0447  0866               	movf	getPIR_AD@i,w
  2788  0448  3EA8               	addlw	(__PIR+8)& (0+255)
  2789  0449  0084               	movwf	4
  2790  044A  0800               	movf	0,w
  2791  044B  00E1               	movwf	??_getPIR_AD
  2792  044C  01E2               	clrf	??_getPIR_AD+1
  2793  044D  0861               	movf	??_getPIR_AD,w
  2794  044E  1683               	bsf	3,5	;RP0=1, select bank1
  2795  044F  1303               	bcf	3,6	;RP1=0, select bank1
  2796  0450  07B2               	addwf	(__PIR^(0+128)+18),f
  2797  0451  1803               	skipnc
  2798  0452  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2799  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2800  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2801  0455  0862               	movf	??_getPIR_AD+1,w
  2802  0456  1683               	bsf	3,5	;RP0=1, select bank1
  2803  0457  1303               	bcf	3,6	;RP1=0, select bank1
  2804  0458  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2805  0459  3001               	movlw	1
  2806  045A  1283               	bcf	3,5	;RP0=0, select bank0
  2807  045B  1303               	bcf	3,6	;RP1=0, select bank0
  2808  045C  00E1               	movwf	??_getPIR_AD
  2809  045D  0861               	movf	??_getPIR_AD,w
  2810  045E  07E6               	addwf	getPIR_AD@i,f
  2811  045F  300A               	movlw	10
  2812  0460  0266               	subwf	getPIR_AD@i,w
  2813  0461  1C03               	skipc
  2814  0462  2C47               	goto	l4806
  2815  0463                     l4812:	
  2816                           
  2817                           ;PIR_B1.c: 257: }
  2818                           ;PIR_B1.c: 258: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2819  0463  300A               	movlw	10
  2820  0464  00D9               	movwf	___lwdiv@divisor
  2821  0465  3000               	movlw	0
  2822  0466  00DA               	movwf	___lwdiv@divisor+1
  2823  0467  1683               	bsf	3,5	;RP0=1, select bank1
  2824  0468  1303               	bcf	3,6	;RP1=0, select bank1
  2825  0469  0833               	movf	((__PIR+1)^(0+128)+18),w
  2826  046A  1283               	bcf	3,5	;RP0=0, select bank0
  2827  046B  1303               	bcf	3,6	;RP1=0, select bank0
  2828  046C  01DC               	clrf	___lwdiv@dividend+1
  2829  046D  07DC               	addwf	___lwdiv@dividend+1,f
  2830  046E  1683               	bsf	3,5	;RP0=1, select bank1
  2831  046F  1303               	bcf	3,6	;RP1=0, select bank1
  2832  0470  0832               	movf	(__PIR^(0+128)+18),w
  2833  0471  1283               	bcf	3,5	;RP0=0, select bank0
  2834  0472  1303               	bcf	3,6	;RP1=0, select bank0
  2835  0473  01DB               	clrf	___lwdiv@dividend
  2836  0474  07DB               	addwf	___lwdiv@dividend,f
  2837  0475  158A  269B  118A   	fcall	___lwdiv
  2838  0478  1283               	bcf	3,5	;RP0=0, select bank0
  2839  0479  1303               	bcf	3,6	;RP1=0, select bank0
  2840  047A  0859               	movf	?___lwdiv,w
  2841  047B  00E1               	movwf	??_getPIR_AD
  2842  047C  1683               	bsf	3,5	;RP0=1, select bank1
  2843  047D  1303               	bcf	3,6	;RP1=0, select bank1
  2844  047E  0834               	movf	(__PIR^(0+128)+20),w
  2845  047F  3EB5               	addlw	(__PIR+21)& (0+255)
  2846  0480  0084               	movwf	4
  2847  0481  1283               	bcf	3,5	;RP0=0, select bank0
  2848  0482  1303               	bcf	3,6	;RP1=0, select bank0
  2849  0483  0861               	movf	??_getPIR_AD,w
  2850  0484  1383               	bcf	3,7	;select IRP bank1
  2851  0485  0080               	movwf	0
  2852                           
  2853                           ;PIR_B1.c: 259: _PIR.TenAverageValue = 0;
  2854  0486  1683               	bsf	3,5	;RP0=1, select bank1
  2855  0487  1303               	bcf	3,6	;RP1=0, select bank1
  2856  0488  01B2               	clrf	(__PIR^(0+128)+18)
  2857  0489  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2858                           
  2859                           ;PIR_B1.c: 261: for (i = 0; i <= 9; i++) {
  2860  048A  1283               	bcf	3,5	;RP0=0, select bank0
  2861  048B  1303               	bcf	3,6	;RP1=0, select bank0
  2862  048C  01E6               	clrf	getPIR_AD@i
  2863  048D  300A               	movlw	10
  2864  048E  0266               	subwf	getPIR_AD@i,w
  2865  048F  1803               	btfsc	3,0
  2866  0490  2CAD               	goto	l4828
  2867  0491                     l4822:	
  2868                           
  2869                           ;PIR_B1.c: 262: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2870  0491  0866               	movf	getPIR_AD@i,w
  2871  0492  3EB5               	addlw	(__PIR+21)& (0+255)
  2872  0493  0084               	movwf	4
  2873  0494  0800               	movf	0,w
  2874  0495  00E1               	movwf	??_getPIR_AD
  2875  0496  01E2               	clrf	??_getPIR_AD+1
  2876  0497  0861               	movf	??_getPIR_AD,w
  2877  0498  1683               	bsf	3,5	;RP0=1, select bank1
  2878  0499  1303               	bcf	3,6	;RP1=0, select bank1
  2879  049A  07BF               	addwf	(__PIR^(0+128)+31),f
  2880  049B  1803               	skipnc
  2881  049C  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2882  049D  1283               	bcf	3,5	;RP0=0, select bank0
  2883  049E  1303               	bcf	3,6	;RP1=0, select bank0
  2884  049F  0862               	movf	??_getPIR_AD+1,w
  2885  04A0  1683               	bsf	3,5	;RP0=1, select bank1
  2886  04A1  1303               	bcf	3,6	;RP1=0, select bank1
  2887  04A2  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2888  04A3  3001               	movlw	1
  2889  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  2890  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  2891  04A6  00E1               	movwf	??_getPIR_AD
  2892  04A7  0861               	movf	??_getPIR_AD,w
  2893  04A8  07E6               	addwf	getPIR_AD@i,f
  2894  04A9  300A               	movlw	10
  2895  04AA  0266               	subwf	getPIR_AD@i,w
  2896  04AB  1C03               	skipc
  2897  04AC  2C91               	goto	l4822
  2898  04AD                     l4828:	
  2899                           
  2900                           ;PIR_B1.c: 263: }
  2901                           ;PIR_B1.c: 264: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2902  04AD  300A               	movlw	10
  2903  04AE  00D9               	movwf	___lwdiv@divisor
  2904  04AF  3000               	movlw	0
  2905  04B0  00DA               	movwf	___lwdiv@divisor+1
  2906  04B1  1683               	bsf	3,5	;RP0=1, select bank1
  2907  04B2  1303               	bcf	3,6	;RP1=0, select bank1
  2908  04B3  0840               	movf	((__PIR+1)^(0+128)+31),w
  2909  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  2910  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  2911  04B6  01DC               	clrf	___lwdiv@dividend+1
  2912  04B7  07DC               	addwf	___lwdiv@dividend+1,f
  2913  04B8  1683               	bsf	3,5	;RP0=1, select bank1
  2914  04B9  1303               	bcf	3,6	;RP1=0, select bank1
  2915  04BA  083F               	movf	(__PIR^(0+128)+31),w
  2916  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  2917  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  2918  04BD  01DB               	clrf	___lwdiv@dividend
  2919  04BE  07DB               	addwf	___lwdiv@dividend,f
  2920  04BF  158A  269B  118A   	fcall	___lwdiv
  2921  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  2922  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  2923  04C4  0859               	movf	?___lwdiv,w
  2924  04C5  00E1               	movwf	??_getPIR_AD
  2925  04C6  0861               	movf	??_getPIR_AD,w
  2926  04C7  1683               	bsf	3,5	;RP0=1, select bank1
  2927  04C8  1303               	bcf	3,6	;RP1=0, select bank1
  2928  04C9  00A6               	movwf	(__PIR^(0+128)+6)
  2929                           
  2930                           ;PIR_B1.c: 265: _PIR.HundredAverageValue = 0;
  2931  04CA  01BF               	clrf	(__PIR^(0+128)+31)
  2932  04CB  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2933                           
  2934                           ;PIR_B1.c: 267: if (_PIR.TenCount < 10) {
  2935  04CC  300A               	movlw	10
  2936  04CD  0227               	subwf	(__PIR^(0+128)+7),w
  2937  04CE  1803               	skipnc
  2938  04CF  2CD9               	goto	l4836
  2939                           
  2940                           ;PIR_B1.c: 268: _PIR.TenCount++;
  2941  04D0  3001               	movlw	1
  2942  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  2943  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  2944  04D3  00E1               	movwf	??_getPIR_AD
  2945  04D4  0861               	movf	??_getPIR_AD,w
  2946  04D5  1683               	bsf	3,5	;RP0=1, select bank1
  2947  04D6  1303               	bcf	3,6	;RP1=0, select bank1
  2948  04D7  07A7               	addwf	(__PIR^(0+128)+7),f
  2949                           
  2950                           ;PIR_B1.c: 269: } else {
  2951  04D8  0008               	return
  2952  04D9                     l4836:	
  2953                           
  2954                           ;PIR_B1.c: 270: _PIR.TenCount = 0;
  2955  04D9  01A7               	clrf	(__PIR^(0+128)+7)
  2956                           
  2957                           ;PIR_B1.c: 271: if (_PIR.HundreCount < 10)
  2958  04DA  300A               	movlw	10
  2959  04DB  0234               	subwf	(__PIR^(0+128)+20),w
  2960  04DC  1803               	skipnc
  2961  04DD  2CE7               	goto	l4842
  2962                           
  2963                           ;PIR_B1.c: 272: _PIR.HundreCount++;
  2964  04DE  3001               	movlw	1
  2965  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  2966  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  2967  04E1  00E1               	movwf	??_getPIR_AD
  2968  04E2  0861               	movf	??_getPIR_AD,w
  2969  04E3  1683               	bsf	3,5	;RP0=1, select bank1
  2970  04E4  1303               	bcf	3,6	;RP1=0, select bank1
  2971  04E5  07B4               	addwf	(__PIR^(0+128)+20),f
  2972  04E6  0008               	return
  2973  04E7                     l4842:	
  2974                           
  2975                           ;PIR_B1.c: 273: else
  2976                           ;PIR_B1.c: 274: _PIR.HundreCount = 0;
  2977  04E7  01B4               	clrf	(__PIR^(0+128)+20)
  2978  04E8  0008               	return
  2979  04E9                     __end_of_getPIR_AD:	
  2980                           
  2981                           	psect	text5
  2982  0659                     __ptext5:	
  2983 ;; *************** function _getLoad_AD *****************
  2984 ;; Defined at:
  2985 ;;		line 15 in file "../src/OverLoad_B1.c"
  2986 ;; Parameters:    Size  Location     Type
  2987 ;;  channel         1    wreg     unsigned char 
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;  channel         1    2[BANK0 ] unsigned char 
  2990 ;;  i               1    5[BANK0 ] unsigned char 
  2991 ;;  j               1    4[BANK0 ] unsigned char 
  2992 ;;  k               1    3[BANK0 ] unsigned char 
  2993 ;; Return value:  Size  Location     Type
  2994 ;;		None               void
  2995 ;; Registers used:
  2996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3002 ;;      Params:         0       0       0       0
  3003 ;;      Locals:         0       4       0       0
  3004 ;;      Temps:          0       2       0       0
  3005 ;;      Totals:         0       6       0       0
  3006 ;;Total ram usage:        6 bytes
  3007 ;; Hardware stack levels used:    1
  3008 ;; Hardware stack levels required when called:    4
  3009 ;; This function calls:
  3010 ;;		_getAD
  3011 ;; This function is called by:
  3012 ;;		_main
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           
  3017                           ;psect for function _getLoad_AD
  3018  0659                     _getLoad_AD:	
  3019                           
  3020                           ;incstack = 0
  3021                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3022                           ;getLoad_AD@channel stored from wreg
  3023  0659  1283               	bcf	3,5	;RP0=0, select bank0
  3024  065A  1303               	bcf	3,6	;RP1=0, select bank0
  3025  065B  00DB               	movwf	getLoad_AD@channel
  3026                           
  3027                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3028  065C  01DE               	clrf	getLoad_AD@i
  3029  065D  01DD               	clrf	getLoad_AD@j
  3030  065E  01DC               	clrf	getLoad_AD@k
  3031                           
  3032                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3033  065F  1683               	bsf	3,5	;RP0=1, select bank1
  3034  0660  1303               	bcf	3,6	;RP1=0, select bank1
  3035  0661  1E4F               	btfss	_Load^(0+128),4
  3036  0662  0008               	return
  3037                           
  3038                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0x73);
  3039  0663  3073               	movlw	115
  3040  0664  1283               	bcf	3,5	;RP0=0, select bank0
  3041  0665  1303               	bcf	3,6	;RP1=0, select bank0
  3042  0666  00D9               	movwf	??_getLoad_AD
  3043  0667  0859               	movf	??_getLoad_AD,w
  3044  0668  00F4               	movwf	getAD@adcon1
  3045  0669  085B               	movf	getLoad_AD@channel,w
  3046  066A  158A  2528  118A   	fcall	_getAD
  3047  066D  1283               	bcf	3,5	;RP0=0, select bank0
  3048  066E  1303               	bcf	3,6	;RP1=0, select bank0
  3049  066F  00DA               	movwf	??_getLoad_AD+1
  3050  0670  085A               	movf	??_getLoad_AD+1,w
  3051  0671  1683               	bsf	3,5	;RP0=1, select bank1
  3052  0672  1303               	bcf	3,6	;RP1=0, select bank1
  3053  0673  00E4               	movwf	(_Load^(0+128)+21)
  3054                           
  3055                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3056  0674  1283               	bcf	3,5	;RP0=0, select bank0
  3057  0675  1303               	bcf	3,6	;RP1=0, select bank0
  3058  0676  01DE               	clrf	getLoad_AD@i
  3059  0677  3004               	movlw	4
  3060  0678  025E               	subwf	getLoad_AD@i,w
  3061  0679  1803               	btfsc	3,0
  3062  067A  2EA0               	goto	l4732
  3063  067B                     l4720:	
  3064                           
  3065                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  3066  067B  085E               	movf	getLoad_AD@i,w
  3067  067C  3ED9               	addlw	(_Load+10)& (0+255)
  3068  067D  0084               	movwf	4
  3069  067E  1683               	bsf	3,5	;RP0=1, select bank1
  3070  067F  1303               	bcf	3,6	;RP1=0, select bank1
  3071  0680  0864               	movf	(_Load^(0+128)+21),w
  3072  0681  1383               	bcf	3,7	;select IRP bank1
  3073  0682  0200               	subwf	0,w
  3074  0683  1803               	skipnc
  3075  0684  2E97               	goto	l4728
  3076  0685  1283               	bcf	3,5	;RP0=0, select bank0
  3077  0686  1303               	bcf	3,6	;RP1=0, select bank0
  3078  0687  08DD               	movf	getLoad_AD@j,f
  3079  0688  1D03               	skipz
  3080  0689  2E97               	goto	l4728
  3081                           
  3082                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  3083  068A  1683               	bsf	3,5	;RP0=1, select bank1
  3084  068B  1303               	bcf	3,6	;RP1=0, select bank1
  3085  068C  0864               	movf	(_Load^(0+128)+21),w
  3086  068D  1283               	bcf	3,5	;RP0=0, select bank0
  3087  068E  1303               	bcf	3,6	;RP1=0, select bank0
  3088  068F  00D9               	movwf	??_getLoad_AD
  3089  0690  085E               	movf	getLoad_AD@i,w
  3090  0691  3ED9               	addlw	(_Load+10)& (0+255)
  3091  0692  0084               	movwf	4
  3092  0693  0859               	movf	??_getLoad_AD,w
  3093  0694  0080               	movwf	0
  3094                           
  3095                           ;OverLoad_B1.c: 24: j = 1;
  3096  0695  01DD               	clrf	getLoad_AD@j
  3097  0696  0ADD               	incf	getLoad_AD@j,f
  3098  0697                     l4728:	
  3099  0697  3001               	movlw	1
  3100  0698  1283               	bcf	3,5	;RP0=0, select bank0
  3101  0699  00D9               	movwf	??_getLoad_AD
  3102  069A  0859               	movf	??_getLoad_AD,w
  3103  069B  07DE               	addwf	getLoad_AD@i,f
  3104  069C  3004               	movlw	4
  3105  069D  025E               	subwf	getLoad_AD@i,w
  3106  069E  1C03               	skipc
  3107  069F  2E7B               	goto	l4720
  3108  06A0                     l4732:	
  3109                           
  3110                           ;OverLoad_B1.c: 25: }
  3111                           ;OverLoad_B1.c: 26: }
  3112                           ;OverLoad_B1.c: 27: if (j == 0) {
  3113  06A0  08DD               	movf	getLoad_AD@j,f
  3114  06A1  1D03               	skipz
  3115  06A2  0008               	return
  3116                           
  3117                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3118  06A3  01DE               	clrf	getLoad_AD@i
  3119  06A4                     L6:	
  3120  06A4  3004               	movlw	4
  3121  06A5  025E               	subwf	getLoad_AD@i,w
  3122  06A6  1803               	btfsc	3,0
  3123  06A7  0008               	return
  3124                           
  3125                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  3126  06A8  085E               	movf	getLoad_AD@i,w
  3127  06A9  3EDE               	addlw	(_Load+15)& (0+255)
  3128  06AA  0084               	movwf	4
  3129  06AB  1383               	bcf	3,7	;select IRP bank1
  3130  06AC  0800               	movf	0,w
  3131  06AD  1683               	bsf	3,5	;RP0=1, select bank1
  3132  06AE  1303               	bcf	3,6	;RP1=0, select bank1
  3133  06AF  0264               	subwf	(_Load^(0+128)+21),w
  3134  06B0  1803               	skipnc
  3135  06B1  2EC4               	goto	l4748
  3136  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  3137  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  3138  06B4  08DC               	movf	getLoad_AD@k,f
  3139  06B5  1D03               	skipz
  3140  06B6  2EC4               	goto	l4748
  3141                           
  3142                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  3143  06B7  1683               	bsf	3,5	;RP0=1, select bank1
  3144  06B8  1303               	bcf	3,6	;RP1=0, select bank1
  3145  06B9  0864               	movf	(_Load^(0+128)+21),w
  3146  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  3147  06BB  1303               	bcf	3,6	;RP1=0, select bank0
  3148  06BC  00D9               	movwf	??_getLoad_AD
  3149  06BD  085E               	movf	getLoad_AD@i,w
  3150  06BE  3EDE               	addlw	(_Load+15)& (0+255)
  3151  06BF  0084               	movwf	4
  3152  06C0  0859               	movf	??_getLoad_AD,w
  3153  06C1  0080               	movwf	0
  3154                           
  3155                           ;OverLoad_B1.c: 31: k = 1;
  3156  06C2  01DC               	clrf	getLoad_AD@k
  3157  06C3  0ADC               	incf	getLoad_AD@k,f
  3158  06C4                     l4748:	
  3159  06C4  3001               	movlw	1
  3160  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  3161  06C6  00D9               	movwf	??_getLoad_AD
  3162  06C7  0859               	movf	??_getLoad_AD,w
  3163  06C8  07DE               	addwf	getLoad_AD@i,f
  3164  06C9  2EA4               	goto	L6
  3165  06CA                     __end_of_getLoad_AD:	
  3166                           
  3167                           	psect	text6
  3168  0D93                     __ptext6:	
  3169 ;; *************** function _getCDS_AD *****************
  3170 ;; Defined at:
  3171 ;;		line 48 in file "../src/CDS_B1.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  channel1        1    wreg     unsigned char 
  3174 ;;  channel2        1    6[COMMON] unsigned char 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  channel1        1    4[BANK0 ] unsigned char 
  3177 ;;  j               1    3[BANK0 ] unsigned char 
  3178 ;;  i               1    2[BANK0 ] unsigned char 
  3179 ;; Return value:  Size  Location     Type
  3180 ;;		None               void
  3181 ;; Registers used:
  3182 ;;		wreg, status,2, status,0, pclath, cstack
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3188 ;;      Params:         1       0       0       0
  3189 ;;      Locals:         0       3       0       0
  3190 ;;      Temps:          0       2       0       0
  3191 ;;      Totals:         1       5       0       0
  3192 ;;Total ram usage:        6 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    4
  3195 ;; This function calls:
  3196 ;;		_getAD
  3197 ;; This function is called by:
  3198 ;;		_main
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           
  3203                           ;psect for function _getCDS_AD
  3204  0D93                     _getCDS_AD:	
  3205                           
  3206                           ;incstack = 0
  3207                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3208                           ;getCDS_AD@channel1 stored from wreg
  3209  0D93  1283               	bcf	3,5	;RP0=0, select bank0
  3210  0D94  1303               	bcf	3,6	;RP1=0, select bank0
  3211  0D95  00DD               	movwf	getCDS_AD@channel1
  3212                           
  3213                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3214  0D96  01DB               	clrf	getCDS_AD@i
  3215  0D97  01DC               	clrf	getCDS_AD@j
  3216                           
  3217                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3218  0D98  1DAB               	btfss	__CDS,3
  3219  0D99  0008               	return
  3220                           
  3221                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3222  0D9A  14AB               	bsf	__CDS,1
  3223                           
  3224                           ;CDS_B1.c: 52: _CDS.ADRES = getAD(channel1, 0x70);
  3225  0D9B  3070               	movlw	112
  3226  0D9C  00D9               	movwf	??_getCDS_AD
  3227  0D9D  0859               	movf	??_getCDS_AD,w
  3228  0D9E  00F4               	movwf	getAD@adcon1
  3229  0D9F  085D               	movf	getCDS_AD@channel1,w
  3230  0DA0  158A  2528  158A   	fcall	_getAD
  3231  0DA3  1283               	bcf	3,5	;RP0=0, select bank0
  3232  0DA4  1303               	bcf	3,6	;RP1=0, select bank0
  3233  0DA5  00DA               	movwf	??_getCDS_AD+1
  3234  0DA6  085A               	movf	??_getCDS_AD+1,w
  3235  0DA7  00AF               	movwf	__CDS+4
  3236                           
  3237                           ;CDS_B1.c: 53: _CDS.VRAD = _CDS.ADRES;
  3238  0DA8  082F               	movf	__CDS+4,w
  3239  0DA9  00D9               	movwf	??_getCDS_AD
  3240  0DAA  0859               	movf	??_getCDS_AD,w
  3241  0DAB  00AD               	movwf	__CDS+2
  3242                           
  3243                           ;CDS_B1.c: 54: _CDS.ADRES = getAD(channel2, 0x70);
  3244  0DAC  3070               	movlw	112
  3245  0DAD  00D9               	movwf	??_getCDS_AD
  3246  0DAE  0859               	movf	??_getCDS_AD,w
  3247  0DAF  00F4               	movwf	getAD@adcon1
  3248  0DB0  0876               	movf	getCDS_AD@channel2,w
  3249  0DB1  158A  2528         	fcall	_getAD
  3250  0DB3  1283               	bcf	3,5	;RP0=0, select bank0
  3251  0DB4  1303               	bcf	3,6	;RP1=0, select bank0
  3252  0DB5  00DA               	movwf	??_getCDS_AD+1
  3253  0DB6  085A               	movf	??_getCDS_AD+1,w
  3254  0DB7  00AF               	movwf	__CDS+4
  3255                           
  3256                           ;CDS_B1.c: 55: _CDS.SignalAD = _CDS.ADRES;
  3257  0DB8  082F               	movf	__CDS+4,w
  3258  0DB9  00D9               	movwf	??_getCDS_AD
  3259  0DBA  0859               	movf	??_getCDS_AD,w
  3260  0DBB  00AE               	movwf	__CDS+3
  3261  0DBC  0008               	return
  3262  0DBD                     __end_of_getCDS_AD:	
  3263                           
  3264                           	psect	text7
  3265  0D28                     __ptext7:	
  3266 ;; *************** function _getAD *****************
  3267 ;; Defined at:
  3268 ;;		line 427 in file "../src/MCU_B1.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  adcon0          1    wreg     unsigned char 
  3271 ;;  adcon1          1    4[COMMON] unsigned char 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  adcon0          1    5[COMMON] unsigned char 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      unsigned char 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, status,0, pclath, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3283 ;;      Params:         1       0       0       0
  3284 ;;      Locals:         1       0       0       0
  3285 ;;      Temps:          0       0       0       0
  3286 ;;      Totals:         2       0       0       0
  3287 ;;Total ram usage:        2 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    3
  3290 ;; This function calls:
  3291 ;;		_Timeout_Counter
  3292 ;;		_set_TimeoutCleared
  3293 ;; This function is called by:
  3294 ;;		_getCDS_AD
  3295 ;;		_getLoad_AD
  3296 ;;		_getTemp_AD
  3297 ;;		_getPIR_AD
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           
  3302                           ;psect for function _getAD
  3303  0D28                     _getAD:	
  3304                           
  3305                           ;incstack = 0
  3306                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3307                           ;getAD@adcon0 stored from wreg
  3308  0D28  00F5               	movwf	getAD@adcon0
  3309                           
  3310                           ;MCU_B1.c: 428: ADCON0 = adcon0;
  3311  0D29  0875               	movf	getAD@adcon0,w
  3312  0D2A  1283               	bcf	3,5	;RP0=0, select bank0
  3313  0D2B  1303               	bcf	3,6	;RP1=0, select bank0
  3314  0D2C  009F               	movwf	31	;volatile
  3315                           
  3316                           ;MCU_B1.c: 429: ADCON1 = adcon1;
  3317  0D2D  0874               	movf	getAD@adcon1,w
  3318  0D2E  1683               	bsf	3,5	;RP0=1, select bank1
  3319  0D2F  1303               	bcf	3,6	;RP1=0, select bank1
  3320  0D30  009F               	movwf	31	;volatile
  3321                           
  3322                           ;MCU_B1.c: 430: GO_nDONE = 1;
  3323  0D31  1283               	bcf	3,5	;RP0=0, select bank0
  3324  0D32  1303               	bcf	3,6	;RP1=0, select bank0
  3325  0D33  149F               	bsf	31,1	;volatile
  3326                           
  3327                           ;MCU_B1.c: 431: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3328  0D34  2D38               	goto	l3218
  3329  0D35                     l3216:	
  3330                           
  3331                           ;MCU_B1.c: 432: Timeout_Counter();
  3332  0D35  158A  247F  158A   	fcall	_Timeout_Counter
  3333  0D38                     l3218:	
  3334  0D38  1283               	bcf	3,5	;RP0=0, select bank0
  3335  0D39  1303               	bcf	3,6	;RP1=0, select bank0
  3336  0D3A  1C9F               	btfss	31,1	;volatile
  3337  0D3B  2D3E               	goto	l3222
  3338  0D3C  1D23               	btfss	_myMain+3,2
  3339  0D3D  2D35               	goto	l3216
  3340  0D3E                     l3222:	
  3341                           
  3342                           ;MCU_B1.c: 433: };
  3343                           ;MCU_B1.c: 434: set_TimeoutCleared();
  3344  0D3E  158A  237E         	fcall	_set_TimeoutCleared
  3345                           
  3346                           ;MCU_B1.c: 435: return ADRES;
  3347  0D40  1283               	bcf	3,5	;RP0=0, select bank0
  3348  0D41  1303               	bcf	3,6	;RP1=0, select bank0
  3349  0D42  081E               	movf	30,w	;volatile
  3350  0D43  0008               	return
  3351  0D44                     __end_of_getAD:	
  3352                           
  3353                           	psect	text8
  3354  0B7E                     __ptext8:	
  3355 ;; *************** function _set_TimeoutCleared *****************
  3356 ;; Defined at:
  3357 ;;		line 282 in file "../src/Main_B1.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;		None
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;		None
  3362 ;; Return value:  Size  Location     Type
  3363 ;;		None               void
  3364 ;; Registers used:
  3365 ;;		status,2
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3371 ;;      Params:         0       0       0       0
  3372 ;;      Locals:         0       0       0       0
  3373 ;;      Temps:          0       0       0       0
  3374 ;;      Totals:         0       0       0       0
  3375 ;;Total ram usage:        0 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    2
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_getAD
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           
  3386                           ;psect for function _set_TimeoutCleared
  3387  0B7E                     _set_TimeoutCleared:	
  3388                           
  3389                           ;Main_B1.c: 283: myMain.Timeout = 0;
  3390                           
  3391                           ;incstack = 0
  3392                           ; Regs used in _set_TimeoutCleared: [status,2]
  3393  0B7E  1283               	bcf	3,5	;RP0=0, select bank0
  3394  0B7F  1303               	bcf	3,6	;RP1=0, select bank0
  3395  0B80  1123               	bcf	_myMain+3,2
  3396                           
  3397                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  3398  0B81  01A4               	clrf	_myMain+4
  3399  0B82  01A5               	clrf	_myMain+5
  3400  0B83  0008               	return
  3401  0B84                     __end_of_set_TimeoutCleared:	
  3402                           
  3403                           	psect	text9
  3404  0C7F                     __ptext9:	
  3405 ;; *************** function _Timeout_Counter *****************
  3406 ;; Defined at:
  3407 ;;		line 273 in file "../src/Main_B1.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;		None
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;		None
  3412 ;; Return value:  Size  Location     Type
  3413 ;;		None               void
  3414 ;; Registers used:
  3415 ;;		wreg, status,2
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3421 ;;      Params:         0       0       0       0
  3422 ;;      Locals:         0       0       0       0
  3423 ;;      Temps:          0       0       0       0
  3424 ;;      Totals:         0       0       0       0
  3425 ;;Total ram usage:        0 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; Hardware stack levels required when called:    2
  3428 ;; This function calls:
  3429 ;;		Nothing
  3430 ;; This function is called by:
  3431 ;;		_getAD
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           
  3436                           ;psect for function _Timeout_Counter
  3437  0C7F                     _Timeout_Counter:	
  3438                           
  3439                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  3440                           
  3441                           ;incstack = 0
  3442                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3443  0C7F  3001               	movlw	1
  3444  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  3445  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  3446  0C82  07A4               	addwf	_myMain+4,f
  3447  0C83  1803               	skipnc
  3448  0C84  0AA5               	incf	_myMain+5,f
  3449  0C85  3000               	movlw	0
  3450  0C86  07A5               	addwf	_myMain+5,f
  3451                           
  3452                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 10000) {
  3453  0C87  3027               	movlw	39
  3454  0C88  0625               	xorwf	_myMain+5,w
  3455  0C89  1D03               	skipz
  3456  0C8A  2C8D               	goto	u2695
  3457  0C8B  3010               	movlw	16
  3458  0C8C  0624               	xorwf	_myMain+4,w
  3459  0C8D                     u2695:	
  3460  0C8D  1D03               	skipz
  3461  0C8E  0008               	return
  3462                           
  3463                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  3464  0C8F  01A4               	clrf	_myMain+4
  3465  0C90  01A5               	clrf	_myMain+5
  3466                           
  3467                           ;Main_B1.c: 277: myMain.Timeout = 1;
  3468  0C91  1523               	bsf	_myMain+3,2
  3469  0C92  0008               	return
  3470  0C93                     __end_of_Timeout_Counter:	
  3471                           
  3472                           	psect	text10
  3473  0C5C                     __ptext10:	
  3474 ;; *************** function _WDT_Main *****************
  3475 ;; Defined at:
  3476 ;;		line 1060 in file "../src/MCU_B1.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;		None
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;		None
  3481 ;; Return value:  Size  Location     Type
  3482 ;;		None               void
  3483 ;; Registers used:
  3484 ;;		wreg, status,2, status,0, pclath, cstack
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3490 ;;      Params:         0       0       0       0
  3491 ;;      Locals:         0       0       0       0
  3492 ;;      Temps:          1       0       0       0
  3493 ;;      Totals:         1       0       0       0
  3494 ;;Total ram usage:        1 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    3
  3497 ;; This function calls:
  3498 ;;		_WDT_Clearing
  3499 ;; This function is called by:
  3500 ;;		_main
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           
  3505                           ;psect for function _WDT_Main
  3506  0C5C                     _WDT_Main:	
  3507                           
  3508                           ;MCU_B1.c: 1061: if (WDT.Enable == 1) {
  3509                           
  3510                           ;incstack = 0
  3511                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3512  0C5C  1283               	bcf	3,5	;RP0=0, select bank0
  3513  0C5D  1303               	bcf	3,6	;RP1=0, select bank0
  3514  0C5E  1C37               	btfss	_WDT,0
  3515  0C5F  0008               	return
  3516                           
  3517                           ;MCU_B1.c: 1062: if (WDT.Timer-- > 0) {
  3518  0C60  3001               	movlw	1
  3519  0C61  02B8               	subwf	_WDT+1,f
  3520  0C62  0838               	movf	_WDT+1,w
  3521  0C63  3AFF               	xorlw	255
  3522  0C64  1903               	skipnz
  3523  0C65  0008               	return
  3524                           
  3525                           ;MCU_B1.c: 1063: WDT.Timer = 100;
  3526  0C66  3064               	movlw	100
  3527  0C67  00F4               	movwf	??_WDT_Main
  3528  0C68  0874               	movf	??_WDT_Main,w
  3529  0C69  00B8               	movwf	_WDT+1
  3530                           
  3531                           ;MCU_B1.c: 1064: WDT_Clearing();
  3532  0C6A  118A  27FE         	fcall	_WDT_Clearing
  3533  0C6C  0008               	return
  3534  0C6D                     __end_of_WDT_Main:	
  3535                           
  3536                           	psect	text11
  3537  07FE                     __ptext11:	
  3538 ;; *************** function _WDT_Clearing *****************
  3539 ;; Defined at:
  3540 ;;		line 1070 in file "../src/MCU_B1.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;		None
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;		None
  3545 ;; Return value:  Size  Location     Type
  3546 ;;		None               void
  3547 ;; Registers used:
  3548 ;;		None
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3554 ;;      Params:         0       0       0       0
  3555 ;;      Locals:         0       0       0       0
  3556 ;;      Temps:          0       0       0       0
  3557 ;;      Totals:         0       0       0       0
  3558 ;;Total ram usage:        0 bytes
  3559 ;; Hardware stack levels used:    1
  3560 ;; Hardware stack levels required when called:    2
  3561 ;; This function calls:
  3562 ;;		Nothing
  3563 ;; This function is called by:
  3564 ;;		_WDT_Main
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           
  3569                           ;psect for function _WDT_Clearing
  3570  07FE                     _WDT_Clearing:	
  3571                           
  3572                           ;incstack = 0
  3573                           ; Regs used in _WDT_Clearing: []
  3574  07FE  0064               	clrwdt	;# 
  3575  07FF  0008               	return
  3576  0800                     __end_of_WDT_Clearing:	
  3577                           
  3578                           	psect	text12
  3579  0B5F                     __ptext12:	
  3580 ;; *************** function _Temp_Main *****************
  3581 ;; Defined at:
  3582 ;;		line 49 in file "../src/OverTemperature_B1.c"
  3583 ;; Parameters:    Size  Location     Type
  3584 ;;		None
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;		None
  3587 ;; Return value:  Size  Location     Type
  3588 ;;		None               void
  3589 ;; Registers used:
  3590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3596 ;;      Params:         0       0       0       0
  3597 ;;      Locals:         0       0       0       0
  3598 ;;      Temps:          0       0       0       0
  3599 ;;      Totals:         0       0       0       0
  3600 ;;Total ram usage:        0 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; Hardware stack levels required when called:    6
  3603 ;; This function calls:
  3604 ;;		_setTemp_Main
  3605 ;; This function is called by:
  3606 ;;		_main
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           
  3611                           ;psect for function _Temp_Main
  3612  0B5F                     _Temp_Main:	
  3613                           
  3614                           ;OverTemperature_B1.c: 51: setTemp_Main();
  3615                           
  3616                           ;incstack = 0
  3617                           ; Regs used in _Temp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3618  0B5F  118A  24E9         	fcall	_setTemp_Main
  3619  0B61  0008               	return
  3620  0B62                     __end_of_Temp_Main:	
  3621                           
  3622                           	psect	text13
  3623  04E9                     __ptext13:	
  3624 ;; *************** function _setTemp_Main *****************
  3625 ;; Defined at:
  3626 ;;		line 56 in file "../src/OverTemperature_B1.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;		None
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;  error           1    9[BANK0 ] unsigned char 
  3631 ;; Return value:  Size  Location     Type
  3632 ;;		None               void
  3633 ;; Registers used:
  3634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3640 ;;      Params:         0       0       0       0
  3641 ;;      Locals:         0       1       0       0
  3642 ;;      Temps:          0       1       0       0
  3643 ;;      Totals:         0       2       0       0
  3644 ;;Total ram usage:        2 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:    5
  3647 ;; This function calls:
  3648 ;;		___awdiv
  3649 ;;		_getMain_All_Error_Status
  3650 ;;		_getMain_LightsStatus
  3651 ;; This function is called by:
  3652 ;;		_Temp_Main
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           
  3657                           ;psect for function _setTemp_Main
  3658  04E9                     _setTemp_Main:	
  3659                           
  3660                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  3661                           
  3662                           ;incstack = 0
  3663                           ; Regs used in _setTemp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3664  04E9  3000               	movlw	0
  3665  04EA  158A  265D  118A   	fcall	_getMain_All_Error_Status
  3666  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  3667  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  3668  04EF  00E1               	movwf	??_setTemp_Main
  3669  04F0  0861               	movf	??_setTemp_Main,w
  3670  04F1  00E2               	movwf	setTemp_Main@error
  3671                           
  3672                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  3673  04F2  1C3A               	btfss	_Temp,0
  3674  04F3  2D6B               	goto	l801
  3675                           
  3676                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  3677  04F4  193A               	btfsc	_Temp,2
  3678  04F5  2D07               	goto	l4542
  3679                           
  3680                           ;OverTemperature_B1.c: 66: Temp.Time++;
  3681  04F6  3001               	movlw	1
  3682  04F7  07BB               	addwf	_Temp+1,f
  3683  04F8  1803               	skipnc
  3684  04F9  0ABC               	incf	_Temp+2,f
  3685  04FA  3000               	movlw	0
  3686  04FB  07BC               	addwf	_Temp+2,f
  3687                           
  3688                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  3689  04FC  3001               	movlw	1
  3690  04FD  023C               	subwf	_Temp+2,w
  3691  04FE  30F4               	movlw	244
  3692  04FF  1903               	skipnz
  3693  0500  023B               	subwf	_Temp+1,w
  3694  0501  1C03               	skipc
  3695  0502  0008               	return
  3696                           
  3697                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  3698  0503  01BB               	clrf	_Temp+1
  3699  0504  01BC               	clrf	_Temp+2
  3700                           
  3701                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  3702  0505  153A               	bsf	_Temp,2
  3703                           
  3704                           ;OverTemperature_B1.c: 70: }
  3705                           ;OverTemperature_B1.c: 71: } else {
  3706  0506  0008               	return
  3707  0507                     l4542:	
  3708                           
  3709                           ;OverTemperature_B1.c: 72: Temp.Time++;
  3710  0507  3001               	movlw	1
  3711  0508  07BB               	addwf	_Temp+1,f
  3712  0509  1803               	skipnc
  3713  050A  0ABC               	incf	_Temp+2,f
  3714  050B  3000               	movlw	0
  3715  050C  07BC               	addwf	_Temp+2,f
  3716                           
  3717                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  3718  050D  3000               	movlw	0
  3719  050E  023C               	subwf	_Temp+2,w
  3720  050F  3005               	movlw	5
  3721  0510  1903               	skipnz
  3722  0511  023B               	subwf	_Temp+1,w
  3723  0512  1C03               	skipc
  3724  0513  0008               	return
  3725                           
  3726                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  3727  0514  01BB               	clrf	_Temp+1
  3728  0515  01BC               	clrf	_Temp+2
  3729                           
  3730                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  3731  0516  0841               	movf	_Temp+7,w
  3732  0517  1903               	btfsc	3,2
  3733  0518  2D68               	goto	l806
  3734  0519  0842               	movf	_Temp+8,w
  3735  051A  1903               	btfsc	3,2
  3736  051B  2D68               	goto	l806
  3737                           
  3738                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  3739  051C  113A               	bcf	_Temp,2
  3740                           
  3741                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3742  051D  3002               	movlw	2
  3743  051E  00D9               	movwf	___awdiv@divisor
  3744  051F  3000               	movlw	0
  3745  0520  00DA               	movwf	___awdiv@divisor+1
  3746  0521  0841               	movf	_Temp+7,w
  3747  0522  0742               	addwf	_Temp+8,w
  3748  0523  00DB               	movwf	___awdiv@dividend
  3749  0524  01DC               	clrf	___awdiv@dividend+1
  3750  0525  0DDC               	rlf	___awdiv@dividend+1,f
  3751  0526  158A  26DB  118A   	fcall	___awdiv
  3752  0529  1283               	bcf	3,5	;RP0=0, select bank0
  3753  052A  1303               	bcf	3,6	;RP1=0, select bank0
  3754  052B  0859               	movf	?___awdiv,w
  3755  052C  00E1               	movwf	??_setTemp_Main
  3756  052D  0861               	movf	??_setTemp_Main,w
  3757  052E  00C0               	movwf	_Temp+6
  3758                           
  3759                           ;OverTemperature_B1.c: 81: if (getMain_LightsStatus() == 1) {
  3760  052F  158A  25BD  118A   	fcall	_getMain_LightsStatus
  3761  0532  3A01               	xorlw	1
  3762  0533  1D03               	skipz
  3763  0534  2D3D               	goto	l4558
  3764                           
  3765                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 0x85;
  3766  0535  3085               	movlw	133
  3767  0536  1283               	bcf	3,5	;RP0=0, select bank0
  3768  0537  1303               	bcf	3,6	;RP1=0, select bank0
  3769  0538  00E1               	movwf	??_setTemp_Main
  3770  0539  0861               	movf	??_setTemp_Main,w
  3771  053A  00C4               	movwf	_Temp+10
  3772                           
  3773                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 0x70;
  3774  053B  3070               	movlw	112
  3775  053C  2D44               	goto	L7
  3776  053D                     l4558:	
  3777                           ;OverTemperature_B1.c: 84: } else {
  3778                           
  3779                           
  3780                           ;OverTemperature_B1.c: 85: Temp.SafeValue = 0x4f;
  3781  053D  304F               	movlw	79
  3782  053E  1283               	bcf	3,5	;RP0=0, select bank0
  3783  053F  1303               	bcf	3,6	;RP1=0, select bank0
  3784  0540  00E1               	movwf	??_setTemp_Main
  3785  0541  0861               	movf	??_setTemp_Main,w
  3786  0542  00C4               	movwf	_Temp+10
  3787                           
  3788                           ;OverTemperature_B1.c: 86: Temp.DangerValue = 0x40;
  3789  0543  3040               	movlw	64
  3790  0544                     L7:	
  3791  0544  00E1               	movwf	??_setTemp_Main
  3792  0545  0861               	movf	??_setTemp_Main,w
  3793  0546  00C5               	movwf	_Temp+11
  3794                           
  3795                           ;OverTemperature_B1.c: 87: }
  3796                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  3797  0547  1CBA               	btfss	_Temp,1
  3798  0548  2D58               	goto	l4574
  3799                           
  3800                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  3801  0549  0844               	movf	_Temp+10,w
  3802  054A  0240               	subwf	_Temp+6,w
  3803  054B  1C03               	skipc
  3804  054C  2D67               	goto	l4584
  3805                           
  3806                           ;OverTemperature_B1.c: 98: Temp.Count++;
  3807  054D  3001               	movlw	1
  3808  054E  00E1               	movwf	??_setTemp_Main
  3809  054F  0861               	movf	??_setTemp_Main,w
  3810  0550  07BD               	addwf	_Temp+3,f
  3811                           
  3812                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  3813  0551  3003               	movlw	3
  3814  0552  023D               	subwf	_Temp+3,w
  3815  0553  1C03               	skipc
  3816  0554  2D68               	goto	l806
  3817                           
  3818                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  3819  0555  01BD               	clrf	_Temp+3
  3820                           
  3821                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  3822  0556  10BA               	bcf	_Temp,1
  3823                           
  3824                           ;OverTemperature_B1.c: 103: }
  3825                           ;OverTemperature_B1.c: 104: } else {
  3826                           
  3827                           ;OverTemperature_B1.c: 102: ;;
  3828  0557  2D68               	goto	l806
  3829  0558                     l4574:	
  3830                           ;OverTemperature_B1.c: 106: }
  3831                           ;OverTemperature_B1.c: 107: } else {
  3832                           
  3833                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  3834                           
  3835                           
  3836                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  3837  0558  0840               	movf	_Temp+6,w
  3838  0559  0245               	subwf	_Temp+11,w
  3839  055A  1C03               	skipc
  3840  055B  2D67               	goto	l4584
  3841                           
  3842                           ;OverTemperature_B1.c: 109: Temp.Count++;
  3843  055C  3001               	movlw	1
  3844  055D  00E1               	movwf	??_setTemp_Main
  3845  055E  0861               	movf	??_setTemp_Main,w
  3846  055F  07BD               	addwf	_Temp+3,f
  3847                           
  3848                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  3849  0560  3003               	movlw	3
  3850  0561  023D               	subwf	_Temp+3,w
  3851  0562  1C03               	skipc
  3852  0563  2D68               	goto	l806
  3853                           
  3854                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  3855  0564  01BD               	clrf	_Temp+3
  3856                           
  3857                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  3858  0565  14BA               	bsf	_Temp,1
  3859                           
  3860                           ;OverTemperature_B1.c: 113: }
  3861                           ;OverTemperature_B1.c: 114: } else {
  3862  0566  2D68               	goto	l806
  3863  0567                     l4584:	
  3864                           
  3865                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  3866  0567  01BD               	clrf	_Temp+3
  3867  0568                     l806:	
  3868                           ;OverTemperature_B1.c: 116: }
  3869                           ;OverTemperature_B1.c: 117: }
  3870                           ;OverTemperature_B1.c: 118: ;;
  3871                           ;OverTemperature_B1.c: 119: ;;
  3872                           
  3873                           
  3874                           ;OverTemperature_B1.c: 135: }
  3875                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  3876  0568  01C1               	clrf	_Temp+7
  3877                           
  3878                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  3879  0569  01C2               	clrf	_Temp+8
  3880                           
  3881                           ;OverTemperature_B1.c: 138: }
  3882                           ;OverTemperature_B1.c: 139: }
  3883                           ;OverTemperature_B1.c: 141: } else {
  3884  056A  0008               	return
  3885  056B                     l801:	
  3886                           
  3887                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  3888  056B  1C20               	btfss	_myMain,0
  3889  056C  0008               	return
  3890                           
  3891                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  3892  056D  143A               	bsf	_Temp,0
  3893  056E  0008               	return
  3894  056F                     __end_of_setTemp_Main:	
  3895                           
  3896                           	psect	text14
  3897  0EDB                     __ptext14:	
  3898 ;; *************** function ___awdiv *****************
  3899 ;; Defined at:
  3900 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;  divisor         2    0[BANK0 ] int 
  3903 ;;  dividend        2    2[BANK0 ] int 
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;  quotient        2    6[BANK0 ] int 
  3906 ;;  sign            1    5[BANK0 ] unsigned char 
  3907 ;;  counter         1    4[BANK0 ] unsigned char 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  2    0[BANK0 ] int 
  3910 ;; Registers used:
  3911 ;;		wreg, status,2, status,0
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3917 ;;      Params:         0       4       0       0
  3918 ;;      Locals:         0       4       0       0
  3919 ;;      Temps:          1       0       0       0
  3920 ;;      Totals:         1       8       0       0
  3921 ;;Total ram usage:        9 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    2
  3924 ;; This function calls:
  3925 ;;		Nothing
  3926 ;; This function is called by:
  3927 ;;		_setTemp_Main
  3928 ;;		_getPIR_AD
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           
  3933                           ;psect for function ___awdiv
  3934  0EDB                     ___awdiv:	
  3935                           
  3936                           ;incstack = 0
  3937                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3938  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  3939  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  3940  0EDD  01DE               	clrf	___awdiv@sign
  3941  0EDE  1FDA               	btfss	___awdiv@divisor+1,7
  3942  0EDF  2EE7               	goto	l4424
  3943  0EE0  09D9               	comf	___awdiv@divisor,f
  3944  0EE1  09DA               	comf	___awdiv@divisor+1,f
  3945  0EE2  0AD9               	incf	___awdiv@divisor,f
  3946  0EE3  1903               	skipnz
  3947  0EE4  0ADA               	incf	___awdiv@divisor+1,f
  3948  0EE5  01DE               	clrf	___awdiv@sign
  3949  0EE6  0ADE               	incf	___awdiv@sign,f
  3950  0EE7                     l4424:	
  3951  0EE7  1FDC               	btfss	___awdiv@dividend+1,7
  3952  0EE8  2EF2               	goto	l4430
  3953  0EE9  09DB               	comf	___awdiv@dividend,f
  3954  0EEA  09DC               	comf	___awdiv@dividend+1,f
  3955  0EEB  0ADB               	incf	___awdiv@dividend,f
  3956  0EEC  1903               	skipnz
  3957  0EED  0ADC               	incf	___awdiv@dividend+1,f
  3958  0EEE  3001               	movlw	1
  3959  0EEF  00F4               	movwf	??___awdiv
  3960  0EF0  0874               	movf	??___awdiv,w
  3961  0EF1  06DE               	xorwf	___awdiv@sign,f
  3962  0EF2                     l4430:	
  3963  0EF2  01DF               	clrf	___awdiv@quotient
  3964  0EF3  01E0               	clrf	___awdiv@quotient+1
  3965  0EF4  085A               	movf	___awdiv@divisor+1,w
  3966  0EF5  0459               	iorwf	___awdiv@divisor,w
  3967  0EF6  1903               	skipnz
  3968  0EF7  2F29               	goto	l4452
  3969  0EF8  01DD               	clrf	___awdiv@counter
  3970  0EF9  0ADD               	incf	___awdiv@counter,f
  3971  0EFA                     l4440:	
  3972  0EFA  1BDA               	btfsc	___awdiv@divisor+1,7
  3973  0EFB  2F08               	goto	l4442
  3974  0EFC  3001               	movlw	1
  3975  0EFD                     u5165:	
  3976  0EFD  1003               	clrc
  3977  0EFE  0DD9               	rlf	___awdiv@divisor,f
  3978  0EFF  0DDA               	rlf	___awdiv@divisor+1,f
  3979  0F00  3EFF               	addlw	-1
  3980  0F01  1D03               	skipz
  3981  0F02  2EFD               	goto	u5165
  3982  0F03  3001               	movlw	1
  3983  0F04  00F4               	movwf	??___awdiv
  3984  0F05  0874               	movf	??___awdiv,w
  3985  0F06  07DD               	addwf	___awdiv@counter,f
  3986  0F07  2EFA               	goto	l4440
  3987  0F08                     l4442:	
  3988  0F08  3001               	movlw	1
  3989  0F09                     u5185:	
  3990  0F09  1003               	clrc
  3991  0F0A  0DDF               	rlf	___awdiv@quotient,f
  3992  0F0B  0DE0               	rlf	___awdiv@quotient+1,f
  3993  0F0C  3EFF               	addlw	-1
  3994  0F0D  1D03               	skipz
  3995  0F0E  2F09               	goto	u5185
  3996  0F0F  085A               	movf	___awdiv@divisor+1,w
  3997  0F10  025C               	subwf	___awdiv@dividend+1,w
  3998  0F11  1D03               	skipz
  3999  0F12  2F15               	goto	u5195
  4000  0F13  0859               	movf	___awdiv@divisor,w
  4001  0F14  025B               	subwf	___awdiv@dividend,w
  4002  0F15                     u5195:	
  4003  0F15  1C03               	skipc
  4004  0F16  2F1E               	goto	l4448
  4005  0F17  0859               	movf	___awdiv@divisor,w
  4006  0F18  02DB               	subwf	___awdiv@dividend,f
  4007  0F19  085A               	movf	___awdiv@divisor+1,w
  4008  0F1A  1C03               	skipc
  4009  0F1B  03DC               	decf	___awdiv@dividend+1,f
  4010  0F1C  02DC               	subwf	___awdiv@dividend+1,f
  4011  0F1D  145F               	bsf	___awdiv@quotient,0
  4012  0F1E                     l4448:	
  4013  0F1E  3001               	movlw	1
  4014  0F1F                     u5205:	
  4015  0F1F  1003               	clrc
  4016  0F20  0CDA               	rrf	___awdiv@divisor+1,f
  4017  0F21  0CD9               	rrf	___awdiv@divisor,f
  4018  0F22  3EFF               	addlw	-1
  4019  0F23  1D03               	skipz
  4020  0F24  2F1F               	goto	u5205
  4021  0F25  3001               	movlw	1
  4022  0F26  02DD               	subwf	___awdiv@counter,f
  4023  0F27  1D03               	btfss	3,2
  4024  0F28  2F08               	goto	l4442
  4025  0F29                     l4452:	
  4026  0F29  085E               	movf	___awdiv@sign,w
  4027  0F2A  1903               	btfsc	3,2
  4028  0F2B  2F31               	goto	l4456
  4029  0F2C  09DF               	comf	___awdiv@quotient,f
  4030  0F2D  09E0               	comf	___awdiv@quotient+1,f
  4031  0F2E  0ADF               	incf	___awdiv@quotient,f
  4032  0F2F  1903               	skipnz
  4033  0F30  0AE0               	incf	___awdiv@quotient+1,f
  4034  0F31                     l4456:	
  4035  0F31  0860               	movf	___awdiv@quotient+1,w
  4036  0F32  01DA               	clrf	?___awdiv+1
  4037  0F33  07DA               	addwf	?___awdiv+1,f
  4038  0F34  085F               	movf	___awdiv@quotient,w
  4039  0F35  01D9               	clrf	?___awdiv
  4040  0F36  07D9               	addwf	?___awdiv,f
  4041  0F37  0008               	return
  4042  0F38                     __end_of___awdiv:	
  4043                           
  4044                           	psect	text15
  4045  0B5C                     __ptext15:	
  4046 ;; *************** function _Temp_Initialization *****************
  4047 ;; Defined at:
  4048 ;;		line 8 in file "../src/OverTemperature_B1.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;		None
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;		None
  4053 ;; Return value:  Size  Location     Type
  4054 ;;		None               void
  4055 ;; Registers used:
  4056 ;;		status,2, status,0, pclath, cstack
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4062 ;;      Params:         0       0       0       0
  4063 ;;      Locals:         0       0       0       0
  4064 ;;      Temps:          0       0       0       0
  4065 ;;      Totals:         0       0       0       0
  4066 ;;Total ram usage:        0 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    3
  4069 ;; This function calls:
  4070 ;;		_setTemp_Initialization
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function _Temp_Initialization
  4078  0B5C                     _Temp_Initialization:	
  4079                           
  4080                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  4081                           
  4082                           ;incstack = 0
  4083                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4084  0B5C  118A  2002         	fcall	_setTemp_Initialization
  4085  0B5E  0008               	return
  4086  0B5F                     __end_of_Temp_Initialization:	
  4087                           
  4088                           	psect	text16
  4089  0002                     __ptext16:	
  4090 ;; *************** function _setTemp_Initialization *****************
  4091 ;; Defined at:
  4092 ;;		line 44 in file "../src/OverTemperature_B1.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;		None
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;		None
  4097 ;; Return value:  Size  Location     Type
  4098 ;;		None               void
  4099 ;; Registers used:
  4100 ;;		None
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4106 ;;      Params:         0       0       0       0
  4107 ;;      Locals:         0       0       0       0
  4108 ;;      Temps:          0       0       0       0
  4109 ;;      Totals:         0       0       0       0
  4110 ;;Total ram usage:        0 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    2
  4113 ;; This function calls:
  4114 ;;		Nothing
  4115 ;; This function is called by:
  4116 ;;		_Temp_Initialization
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           
  4121                           ;psect for function _setTemp_Initialization
  4122  0002                     _setTemp_Initialization:	
  4123                           
  4124                           ;incstack = 0
  4125                           ; Regs used in _setTemp_Initialization: []
  4126  0002  0008               	return
  4127  0003                     __end_of_setTemp_Initialization:	
  4128                           
  4129                           	psect	text17
  4130  0B59                     __ptext17:	
  4131 ;; *************** function _SYSC_Main *****************
  4132 ;; Defined at:
  4133 ;;		line 17 in file "../src/SYSC_B1.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;		None
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;		None
  4138 ;; Return value:  Size  Location     Type
  4139 ;;		None               void
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0, pclath, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4147 ;;      Params:         0       0       0       0
  4148 ;;      Locals:         0       0       0       0
  4149 ;;      Temps:          0       0       0       0
  4150 ;;      Totals:         0       0       0       0
  4151 ;;Total ram usage:        0 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    4
  4154 ;; This function calls:
  4155 ;;		_setSYSC_Main
  4156 ;; This function is called by:
  4157 ;;		_main
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           
  4162                           ;psect for function _SYSC_Main
  4163  0B59                     _SYSC_Main:	
  4164                           
  4165                           ;SYSC_B1.c: 19: setSYSC_Main();
  4166                           
  4167                           ;incstack = 0
  4168                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4169  0B59  118A  27A6         	fcall	_setSYSC_Main
  4170  0B5B  0008               	return
  4171  0B5C                     __end_of_SYSC_Main:	
  4172                           
  4173                           	psect	text18
  4174  07A6                     __ptext18:	
  4175 ;; *************** function _setSYSC_Main *****************
  4176 ;; Defined at:
  4177 ;;		line 23 in file "../src/SYSC_B1.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;		None
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;		None
  4182 ;; Return value:  Size  Location     Type
  4183 ;;		None               void
  4184 ;; Registers used:
  4185 ;;		wreg, status,2, status,0, pclath, cstack
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4191 ;;      Params:         0       0       0       0
  4192 ;;      Locals:         0       0       0       0
  4193 ;;      Temps:          0       0       0       0
  4194 ;;      Totals:         0       0       0       0
  4195 ;;Total ram usage:        0 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    3
  4198 ;; This function calls:
  4199 ;;		_getMain_All_Error_Status
  4200 ;; This function is called by:
  4201 ;;		_SYSC_Main
  4202 ;; This function uses a non-reentrant model
  4203 ;;
  4204                           
  4205                           
  4206                           ;psect for function _setSYSC_Main
  4207  07A6                     _setSYSC_Main:	
  4208                           
  4209                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4210                           
  4211                           ;incstack = 0
  4212                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4213  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  4214  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  4215  07A8  1C26               	btfss	_SYSC,0
  4216  07A9  0008               	return
  4217                           
  4218                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4219  07AA  18A6               	btfsc	_SYSC,1
  4220  07AB  2FBD               	goto	l4598
  4221                           
  4222                           ;SYSC_B1.c: 27: SYSC.Timer++;
  4223  07AC  3001               	movlw	1
  4224  07AD  07A7               	addwf	_SYSC+1,f
  4225  07AE  1803               	skipnc
  4226  07AF  0AA8               	incf	_SYSC+2,f
  4227  07B0  3000               	movlw	0
  4228  07B1  07A8               	addwf	_SYSC+2,f
  4229                           
  4230                           ;SYSC_B1.c: 28: if (SYSC.Timer >= 16)
  4231  07B2  3000               	movlw	0
  4232  07B3  0228               	subwf	_SYSC+2,w
  4233  07B4  3010               	movlw	16
  4234  07B5  1903               	skipnz
  4235  07B6  0227               	subwf	_SYSC+1,w
  4236  07B7  1C03               	skipc
  4237  07B8  0008               	return
  4238                           
  4239                           ;SYSC_B1.c: 29: {
  4240                           ;SYSC_B1.c: 30: SYSC.Timer = 0;
  4241  07B9  01A7               	clrf	_SYSC+1
  4242  07BA  01A8               	clrf	_SYSC+2
  4243                           
  4244                           ;SYSC_B1.c: 31: SYSC.ERROR = 1;
  4245  07BB  14A6               	bsf	_SYSC,1
  4246                           
  4247                           ;SYSC_B1.c: 32: }
  4248                           ;SYSC_B1.c: 33: } else {
  4249  07BC  0008               	return
  4250  07BD                     l4598:	
  4251                           
  4252                           ;SYSC_B1.c: 34: if (getMain_All_Error_Status(1) == 0) {
  4253  07BD  3001               	movlw	1
  4254  07BE  158A  265D  118A   	fcall	_getMain_All_Error_Status
  4255  07C1  3800               	iorlw	0
  4256  07C2  1D03               	skipz
  4257  07C3  0008               	return
  4258                           
  4259                           ;SYSC_B1.c: 35: SYSC.Timer++;
  4260  07C4  3001               	movlw	1
  4261  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  4262  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  4263  07C7  07A7               	addwf	_SYSC+1,f
  4264  07C8  1803               	skipnc
  4265  07C9  0AA8               	incf	_SYSC+2,f
  4266  07CA  3000               	movlw	0
  4267  07CB  07A8               	addwf	_SYSC+2,f
  4268                           
  4269                           ;SYSC_B1.c: 36: if (SYSC.Timer == 50) {
  4270  07CC  3032               	movlw	50
  4271  07CD  0627               	xorwf	_SYSC+1,w
  4272  07CE  0428               	iorwf	_SYSC+2,w
  4273  07CF  1D03               	skipz
  4274  07D0  2FD6               	goto	l4604
  4275                           
  4276                           ;SYSC_B1.c: 37: SYSC.Timer = 0;
  4277  07D1  01A7               	clrf	_SYSC+1
  4278  07D2  01A8               	clrf	_SYSC+2
  4279                           
  4280                           ;SYSC_B1.c: 38: SYSC.Counter = 0;
  4281  07D3  01A9               	clrf	_SYSC+3
  4282  07D4  01AA               	clrf	_SYSC+4
  4283                           
  4284                           ;SYSC_B1.c: 39: } else {
  4285  07D5  0008               	return
  4286  07D6                     l4604:	
  4287                           
  4288                           ;SYSC_B1.c: 40: SYSC.Counter++;
  4289  07D6  3001               	movlw	1
  4290  07D7  07A9               	addwf	_SYSC+3,f
  4291  07D8  1803               	skipnc
  4292  07D9  0AAA               	incf	_SYSC+4,f
  4293  07DA  3000               	movlw	0
  4294  07DB  07AA               	addwf	_SYSC+4,f
  4295                           
  4296                           ;SYSC_B1.c: 41: if (SYSC.Counter == 1000) {
  4297  07DC  3003               	movlw	3
  4298  07DD  062A               	xorwf	_SYSC+4,w
  4299  07DE  1D03               	skipz
  4300  07DF  2FE2               	goto	u5535
  4301  07E0  30E8               	movlw	232
  4302  07E1  0629               	xorwf	_SYSC+3,w
  4303  07E2                     u5535:	
  4304  07E2  1D03               	skipz
  4305  07E3  0008               	return
  4306                           
  4307                           ;SYSC_B1.c: 42: SYSC.Counter = 0;
  4308  07E4  01A9               	clrf	_SYSC+3
  4309  07E5  01AA               	clrf	_SYSC+4
  4310                           
  4311                           ;SYSC_B1.c: 43: SYSC.ERROR = 0;
  4312  07E6  10A6               	bcf	_SYSC,1
  4313  07E7  0008               	return
  4314  07E8                     __end_of_setSYSC_Main:	
  4315                           
  4316                           	psect	text19
  4317  0B56                     __ptext19:	
  4318 ;; *************** function _SYSC_Initialization *****************
  4319 ;; Defined at:
  4320 ;;		line 7 in file "../src/SYSC_B1.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;		None
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;		None
  4325 ;; Return value:  Size  Location     Type
  4326 ;;		None               void
  4327 ;; Registers used:
  4328 ;;		status,2, status,0, pclath, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4334 ;;      Params:         0       0       0       0
  4335 ;;      Locals:         0       0       0       0
  4336 ;;      Temps:          0       0       0       0
  4337 ;;      Totals:         0       0       0       0
  4338 ;;Total ram usage:        0 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    3
  4341 ;; This function calls:
  4342 ;;		_setSYSC_Initialization
  4343 ;; This function is called by:
  4344 ;;		_main
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _SYSC_Initialization
  4350  0B56                     _SYSC_Initialization:	
  4351                           
  4352                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4353                           
  4354                           ;incstack = 0
  4355                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4356  0B56  158A  236A         	fcall	_setSYSC_Initialization
  4357  0B58  0008               	return
  4358  0B59                     __end_of_SYSC_Initialization:	
  4359                           
  4360                           	psect	text20
  4361  0B6A                     __ptext20:	
  4362 ;; *************** function _setSYSC_Initialization *****************
  4363 ;; Defined at:
  4364 ;;		line 13 in file "../src/SYSC_B1.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;		None
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;		None
  4369 ;; Return value:  Size  Location     Type
  4370 ;;		None               void
  4371 ;; Registers used:
  4372 ;;		None
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4378 ;;      Params:         0       0       0       0
  4379 ;;      Locals:         0       0       0       0
  4380 ;;      Temps:          0       0       0       0
  4381 ;;      Totals:         0       0       0       0
  4382 ;;Total ram usage:        0 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    2
  4385 ;; This function calls:
  4386 ;;		Nothing
  4387 ;; This function is called by:
  4388 ;;		_SYSC_Initialization
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           
  4393                           ;psect for function _setSYSC_Initialization
  4394  0B6A                     _setSYSC_Initialization:	
  4395                           
  4396                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4397                           
  4398                           ;incstack = 0
  4399                           ; Regs used in _setSYSC_Initialization: []
  4400  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  4401  0B6B  1303               	bcf	3,6	;RP1=0, select bank0
  4402  0B6C  1426               	bsf	_SYSC,0
  4403  0B6D  0008               	return
  4404  0B6E                     __end_of_setSYSC_Initialization:	
  4405                           
  4406                           	psect	text21
  4407  0025                     __ptext21:	
  4408 ;; *************** function _PIR_Main *****************
  4409 ;; Defined at:
  4410 ;;		line 13 in file "../src/PIR_B1.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;		None
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;  cds             1   14[BANK0 ] unsigned char 
  4415 ;;  error           1   11[BANK0 ] unsigned char 
  4416 ;; Return value:  Size  Location     Type
  4417 ;;		None               void
  4418 ;; Registers used:
  4419 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4425 ;;      Params:         0       0       0       0
  4426 ;;      Locals:         0       4       0       0
  4427 ;;      Temps:          0       5       0       0
  4428 ;;      Totals:         0       9       0       0
  4429 ;;Total ram usage:        9 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; Hardware stack levels required when called:    4
  4432 ;; This function calls:
  4433 ;;		_getCDS_Status
  4434 ;;		_getLights_Status
  4435 ;;		_getMain_All_Error_Status
  4436 ;;		_setLED
  4437 ;;		_setLights_Trigger
  4438 ;; This function is called by:
  4439 ;;		_main
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           
  4444                           ;psect for function _PIR_Main
  4445  0025                     _PIR_Main:	
  4446                           
  4447                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4448                           
  4449                           ;incstack = 0
  4450                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4451  0025  3000               	movlw	0
  4452  0026  158A  265D  118A   	fcall	_getMain_All_Error_Status
  4453  0029  1283               	bcf	3,5	;RP0=0, select bank0
  4454  002A  1303               	bcf	3,6	;RP1=0, select bank0
  4455  002B  00DF               	movwf	??_PIR_Main
  4456  002C  085F               	movf	??_PIR_Main,w
  4457  002D  00E4               	movwf	PIR_Main@error
  4458                           
  4459                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4460  002E  158A  239B  118A   	fcall	_getCDS_Status
  4461  0031  1283               	bcf	3,5	;RP0=0, select bank0
  4462  0032  1303               	bcf	3,6	;RP1=0, select bank0
  4463  0033  00DF               	movwf	??_PIR_Main
  4464  0034  085F               	movf	??_PIR_Main,w
  4465  0035  00E7               	movwf	PIR_Main@cds
  4466                           
  4467                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  4468  0036  1683               	bsf	3,5	;RP0=1, select bank1
  4469  0037  1303               	bcf	3,6	;RP1=0, select bank1
  4470  0038  1C20               	btfss	__PIR^(0+128),0
  4471  0039  29E5               	goto	l871
  4472                           
  4473                           ;PIR_B1.c: 17: if (error == 0) {
  4474  003A  1283               	bcf	3,5	;RP0=0, select bank0
  4475  003B  1303               	bcf	3,6	;RP1=0, select bank0
  4476  003C  08E4               	movf	PIR_Main@error,f
  4477  003D  1D03               	skipz
  4478  003E  284E               	goto	l872
  4479                           
  4480                           ;PIR_B1.c: 30: _PIR.Available = 1;
  4481  003F  1683               	bsf	3,5	;RP0=1, select bank1
  4482  0040  1303               	bcf	3,6	;RP1=0, select bank1
  4483  0041  17A0               	bsf	__PIR^(0+128),7
  4484                           
  4485                           ;PIR_B1.c: 32: if (_PIR.Detect == 0) {
  4486  0042  1A20               	btfsc	__PIR^(0+128),4
  4487  0043  2854               	goto	l875
  4488                           
  4489                           ;PIR_B1.c: 33: _PIR.Detect = 1;
  4490  0044  1620               	bsf	__PIR^(0+128),4
  4491                           
  4492                           ;PIR_B1.c: 34: if (_PIR.OK == 0) {
  4493  0045  19A0               	btfsc	__PIR^(0+128),3
  4494  0046  2854               	goto	l875
  4495                           
  4496                           ;PIR_B1.c: 35: setLED(1, 1);
  4497  0047  01F6               	clrf	setLED@command
  4498  0048  0AF6               	incf	setLED@command,f
  4499  0049  3001               	movlw	1
  4500  004A  118A  256F  118A   	fcall	_setLED
  4501                           
  4502                           ;PIR_B1.c: 36: }
  4503                           ;PIR_B1.c: 37: }
  4504                           ;PIR_B1.c: 38: } else {
  4505  004D  2854               	goto	l875
  4506  004E                     l872:	
  4507                           
  4508                           ;PIR_B1.c: 39: if (_PIR.Detect == 1) {
  4509  004E  1683               	bsf	3,5	;RP0=1, select bank1
  4510  004F  1303               	bcf	3,6	;RP1=0, select bank1
  4511  0050  1E20               	btfss	__PIR^(0+128),4
  4512  0051  2854               	goto	l875
  4513                           
  4514                           ;PIR_B1.c: 40: _PIR.Detect = 0;
  4515  0052  1220               	bcf	__PIR^(0+128),4
  4516                           
  4517                           ;PIR_B1.c: 41: _PIR.Available = 0;
  4518  0053  13A0               	bcf	__PIR^(0+128),7
  4519  0054                     l875:	
  4520                           
  4521                           ;PIR_B1.c: 59: }
  4522                           ;PIR_B1.c: 60: }
  4523                           ;PIR_B1.c: 62: if (_PIR.ADtoGO == 0) {
  4524  0054  1683               	bsf	3,5	;RP0=1, select bank1
  4525  0055  1303               	bcf	3,6	;RP1=0, select bank1
  4526  0056  18A0               	btfsc	__PIR^(0+128),1
  4527  0057  2867               	goto	l877
  4528                           
  4529                           ;PIR_B1.c: 63: _PIR.Time++;
  4530  0058  3001               	movlw	1
  4531  0059  1283               	bcf	3,5	;RP0=0, select bank0
  4532  005A  1303               	bcf	3,6	;RP1=0, select bank0
  4533  005B  00DF               	movwf	??_PIR_Main
  4534  005C  085F               	movf	??_PIR_Main,w
  4535  005D  1683               	bsf	3,5	;RP0=1, select bank1
  4536  005E  1303               	bcf	3,6	;RP1=0, select bank1
  4537  005F  07A5               	addwf	(__PIR^(0+128)+5),f
  4538                           
  4539                           ;PIR_B1.c: 64: if (_PIR.Time == 10) {
  4540  0060  0825               	movf	(__PIR^(0+128)+5),w
  4541  0061  3A0A               	xorlw	10
  4542  0062  1D03               	skipz
  4543  0063  298C               	goto	l5114
  4544                           
  4545                           ;PIR_B1.c: 65: _PIR.Time = 0;
  4546  0064  01A5               	clrf	(__PIR^(0+128)+5)
  4547                           
  4548                           ;PIR_B1.c: 66: _PIR.ADtoGO = 1;
  4549  0065  14A0               	bsf	__PIR^(0+128),1
  4550                           
  4551                           ;PIR_B1.c: 67: }
  4552                           ;PIR_B1.c: 68: } else {
  4553  0066  298C               	goto	l5114
  4554  0067                     l877:	
  4555                           
  4556                           ;PIR_B1.c: 69: if (_PIR.GO == 1) {
  4557  0067  1D20               	btfss	__PIR^(0+128),2
  4558  0068  298C               	goto	l5114
  4559                           
  4560                           ;PIR_B1.c: 70: _PIR.GO = 0;
  4561  0069  1120               	bcf	__PIR^(0+128),2
  4562                           
  4563                           ;PIR_B1.c: 71: _PIR.ADtoGO = 0;
  4564  006A  10A0               	bcf	__PIR^(0+128),1
  4565                           
  4566                           ;PIR_B1.c: 72: if (_PIR.Available == 1) {
  4567  006B  1BA0               	btfsc	__PIR^(0+128),7
  4568                           
  4569                           ;PIR_B1.c: 73: if (_PIR.OK == 1) {
  4570  006C  1DA0               	btfss	__PIR^(0+128),3
  4571  006D  298C               	goto	l5114
  4572                           
  4573                           ;PIR_B1.c: 75: _PIR.Time++;
  4574  006E  3001               	movlw	1
  4575  006F  1283               	bcf	3,5	;RP0=0, select bank0
  4576  0070  1303               	bcf	3,6	;RP1=0, select bank0
  4577  0071  00DF               	movwf	??_PIR_Main
  4578  0072  085F               	movf	??_PIR_Main,w
  4579  0073  1683               	bsf	3,5	;RP0=1, select bank1
  4580  0074  1303               	bcf	3,6	;RP1=0, select bank1
  4581  0075  07A5               	addwf	(__PIR^(0+128)+5),f
  4582                           
  4583                           ;PIR_B1.c: 76: if (_PIR.Time == 60) {
  4584  0076  0825               	movf	(__PIR^(0+128)+5),w
  4585  0077  3A3C               	xorlw	60
  4586  0078  1D03               	skipz
  4587  0079  28AE               	goto	l5074
  4588                           
  4589                           ;PIR_B1.c: 77: _PIR.Time = 0;
  4590  007A  01A5               	clrf	(__PIR^(0+128)+5)
  4591                           
  4592                           ;PIR_B1.c: 78: if (_PIR.RangeCount >= 90) {
  4593  007B  305A               	movlw	90
  4594  007C  024B               	subwf	(__PIR^(0+128)+43),w
  4595  007D  1C03               	skipc
  4596  007E  288A               	goto	l5056
  4597                           
  4598                           ;PIR_B1.c: 79: _PIR.RangeTime1 = 0;
  4599  007F  01CA               	clrf	(__PIR^(0+128)+42)
  4600                           
  4601                           ;PIR_B1.c: 81: if (_PIR.RangeValue == 20) {
  4602  0080  084C               	movf	(__PIR^(0+128)+44),w
  4603  0081  3A14               	xorlw	20
  4604  0082  1903               	btfsc	3,2
  4605  0083  289F               	goto	L14
  4606                           
  4607                           ;PIR_B1.c: 83: } else if (_PIR.RangeValue == (20+10)) {
  4608                           
  4609                           ;PIR_B1.c: 82: _PIR.RangeValue = (20+10);
  4610  0084  084C               	movf	(__PIR^(0+128)+44),w
  4611  0085  3A1E               	xorlw	30
  4612  0086  1D03               	skipz
  4613  0087  28AD               	goto	l5072
  4614                           
  4615                           ;PIR_B1.c: 84: _PIR.RangeValue = (20+20);
  4616  0088  3028               	movlw	40
  4617  0089  28A6               	goto	L10
  4618  008A                     l5056:	
  4619                           ;PIR_B1.c: 85: }
  4620                           ;PIR_B1.c: 86: } else if (_PIR.RangeCount <= 10) {
  4621                           
  4622  008A  300B               	movlw	11
  4623  008B  024B               	subwf	(__PIR^(0+128)+43),w
  4624  008C  1803               	skipnc
  4625  008D  28AD               	goto	l5072
  4626                           
  4627                           ;PIR_B1.c: 87: _PIR.RangeTime1++;
  4628  008E  3001               	movlw	1
  4629  008F  1283               	bcf	3,5	;RP0=0, select bank0
  4630  0090  1303               	bcf	3,6	;RP1=0, select bank0
  4631  0091  00DF               	movwf	??_PIR_Main
  4632  0092  085F               	movf	??_PIR_Main,w
  4633  0093  1683               	bsf	3,5	;RP0=1, select bank1
  4634  0094  1303               	bcf	3,6	;RP1=0, select bank1
  4635  0095  07CA               	addwf	(__PIR^(0+128)+42),f
  4636                           
  4637                           ;PIR_B1.c: 88: if (_PIR.RangeTime1 == 2) {
  4638  0096  084A               	movf	(__PIR^(0+128)+42),w
  4639  0097  3A02               	xorlw	2
  4640  0098  1D03               	skipz
  4641  0099  28AD               	goto	l5072
  4642                           
  4643                           ;PIR_B1.c: 89: _PIR.RangeTime1 = 0;
  4644  009A  01CA               	clrf	(__PIR^(0+128)+42)
  4645                           
  4646                           ;PIR_B1.c: 91: if (_PIR.RangeValue == (20+20)) {
  4647  009B  084C               	movf	(__PIR^(0+128)+44),w
  4648  009C  3A28               	xorlw	40
  4649  009D  1D03               	skipz
  4650  009E  28A1               	goto	l5068
  4651  009F                     L14:	
  4652                           
  4653                           ;PIR_B1.c: 92: _PIR.RangeValue = (20+10);
  4654  009F  301E               	movlw	30
  4655  00A0  28A6               	goto	L10
  4656  00A1                     l5068:	
  4657                           ;PIR_B1.c: 93: } else if (_PIR.RangeValue == (20+10)) {
  4658                           
  4659  00A1  084C               	movf	(__PIR^(0+128)+44),w
  4660  00A2  3A1E               	xorlw	30
  4661  00A3  1D03               	skipz
  4662  00A4  28AD               	goto	l5072
  4663                           
  4664                           ;PIR_B1.c: 94: _PIR.RangeValue = 20;
  4665  00A5  3014               	movlw	20
  4666  00A6                     L10:	
  4667  00A6  1283               	bcf	3,5	;RP0=0, select bank0
  4668  00A7  1303               	bcf	3,6	;RP1=0, select bank0
  4669  00A8  00DF               	movwf	??_PIR_Main
  4670  00A9  085F               	movf	??_PIR_Main,w
  4671  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  4672  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  4673  00AC  00CC               	movwf	(__PIR^(0+128)+44)
  4674  00AD                     l5072:	
  4675                           
  4676                           ;PIR_B1.c: 95: }
  4677                           ;PIR_B1.c: 96: }
  4678                           ;PIR_B1.c: 97: }
  4679                           ;PIR_B1.c: 98: _PIR.RangeCount = 0;
  4680  00AD  01CB               	clrf	(__PIR^(0+128)+43)
  4681  00AE                     l5074:	
  4682                           
  4683                           ;PIR_B1.c: 99: }
  4684                           ;PIR_B1.c: 102: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))
  4685                           ;PIR_B1.c: 103: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + (_PIR.RangeValue + _PIR.Of
      +                          fset)))) {
  4686  00AE  084C               	movf	(__PIR^(0+128)+44),w
  4687  00AF  074E               	addwf	(__PIR^(0+128)+46),w
  4688  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  4689  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  4690  00B2  00DF               	movwf	??_PIR_Main
  4691  00B3  01E0               	clrf	??_PIR_Main+1
  4692  00B4  0DE0               	rlf	??_PIR_Main+1,f
  4693  00B5  09DF               	comf	??_PIR_Main,f
  4694  00B6  09E0               	comf	??_PIR_Main+1,f
  4695  00B7  0ADF               	incf	??_PIR_Main,f
  4696  00B8  1903               	skipnz
  4697  00B9  0AE0               	incf	??_PIR_Main+1,f
  4698  00BA  1683               	bsf	3,5	;RP0=1, select bank1
  4699  00BB  1303               	bcf	3,6	;RP1=0, select bank1
  4700  00BC  0826               	movf	(__PIR^(0+128)+6),w
  4701  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  4702  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  4703  00BF  075F               	addwf	??_PIR_Main,w
  4704  00C0  00E1               	movwf	??_PIR_Main+2
  4705  00C1  0860               	movf	??_PIR_Main+1,w
  4706  00C2  1803               	skipnc
  4707  00C3  0A60               	incf	??_PIR_Main+1,w
  4708  00C4  00E2               	movwf	??_PIR_Main+3
  4709  00C5  0862               	movf	??_PIR_Main+3,w
  4710  00C6  3A80               	xorlw	128
  4711  00C7  3C80               	sublw	128
  4712  00C8  1D03               	skipz
  4713  00C9  28CE               	goto	u6485
  4714  00CA  0861               	movf	??_PIR_Main+2,w
  4715  00CB  1683               	bsf	3,5	;RP0=1, select bank1
  4716  00CC  1303               	bcf	3,6	;RP1=0, select bank1
  4717  00CD  0221               	subwf	(__PIR^(0+128)+1),w
  4718  00CE                     u6485:	
  4719  00CE  1C03               	skipc
  4720  00CF  2900               	goto	l5086
  4721  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  4722  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  4723  00D2  084C               	movf	(__PIR^(0+128)+44),w
  4724  00D3  074E               	addwf	(__PIR^(0+128)+46),w
  4725  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  4726  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  4727  00D6  00DF               	movwf	??_PIR_Main
  4728  00D7  01E0               	clrf	??_PIR_Main+1
  4729  00D8  0DE0               	rlf	??_PIR_Main+1,f
  4730  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  4731  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  4732  00DB  0826               	movf	(__PIR^(0+128)+6),w
  4733  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  4734  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  4735  00DE  075F               	addwf	??_PIR_Main,w
  4736  00DF  00E1               	movwf	??_PIR_Main+2
  4737  00E0  3000               	movlw	0
  4738  00E1  1803               	skipnc
  4739  00E2  3001               	movlw	1
  4740  00E3  0760               	addwf	??_PIR_Main+1,w
  4741  00E4  00E2               	movwf	??_PIR_Main+3
  4742  00E5  0862               	movf	??_PIR_Main+3,w
  4743  00E6  3A80               	xorlw	128
  4744  00E7  00E3               	movwf	??_PIR_Main+4
  4745  00E8  3080               	movlw	128
  4746  00E9  0263               	subwf	??_PIR_Main+4,w
  4747  00EA  1D03               	skipz
  4748  00EB  28F2               	goto	u6495
  4749  00EC  1683               	bsf	3,5	;RP0=1, select bank1
  4750  00ED  1303               	bcf	3,6	;RP1=0, select bank1
  4751  00EE  0821               	movf	(__PIR^(0+128)+1),w
  4752  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  4753  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  4754  00F1  0261               	subwf	??_PIR_Main+2,w
  4755  00F2                     u6495:	
  4756  00F2  1C03               	skipc
  4757  00F3  2900               	goto	l5086
  4758                           
  4759                           ;PIR_B1.c: 107: if (cds == 1) {
  4760  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  4761  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  4762  00F6  0867               	movf	PIR_Main@cds,w
  4763  00F7  3A01               	xorlw	1
  4764  00F8  1D03               	skipz
  4765  00F9  28FE               	goto	l5082
  4766                           
  4767                           ;PIR_B1.c: 108: _PIR.Count = 0;
  4768  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  4769  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  4770  00FC  01C1               	clrf	(__PIR^(0+128)+33)
  4771  00FD  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4772  00FE                     l5082:	
  4773                           
  4774                           ;PIR_B1.c: 109: }
  4775                           ;PIR_B1.c: 111: setLED(1, 0);
  4776  00FE  01F6               	clrf	setLED@command
  4777  00FF  297B               	goto	L15
  4778  0100                     l5086:	
  4779                           ;PIR_B1.c: 113: } else {
  4780                           
  4781                           ;PIR_B1.c: 112: setLED(2, 0);
  4782                           
  4783                           
  4784                           ;PIR_B1.c: 115: _PIR.RangeCount++;
  4785  0100  3001               	movlw	1
  4786  0101  1283               	bcf	3,5	;RP0=0, select bank0
  4787  0102  1303               	bcf	3,6	;RP1=0, select bank0
  4788  0103  00DF               	movwf	??_PIR_Main
  4789  0104  085F               	movf	??_PIR_Main,w
  4790  0105  1683               	bsf	3,5	;RP0=1, select bank1
  4791  0106  1303               	bcf	3,6	;RP1=0, select bank1
  4792  0107  07CB               	addwf	(__PIR^(0+128)+43),f
  4793                           
  4794                           ;PIR_B1.c: 116: _PIR.Count++;
  4795  0108  3001               	movlw	1
  4796  0109  07C1               	addwf	(__PIR^(0+128)+33),f
  4797  010A  1803               	skipnc
  4798  010B  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4799  010C  3000               	movlw	0
  4800  010D  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4801                           
  4802                           ;PIR_B1.c: 118: _PIR.TriggerValue = _PIR.Status == 1 ? 3 : 3;
  4803  010E  1B20               	btfsc	__PIR^(0+128),6
  4804  010F  2914               	goto	l5094
  4805  0110  3003               	movlw	3
  4806  0111  1283               	bcf	3,5	;RP0=0, select bank0
  4807  0112  1303               	bcf	3,6	;RP1=0, select bank0
  4808  0113  2916               	goto	L11
  4809  0114                     l5094:	
  4810  0114  3003               	movlw	3
  4811  0115  1283               	bcf	3,5	;RP0=0, select bank0
  4812  0116                     L11:	
  4813  0116  00E5               	movwf	_PIR_Main$2993
  4814  0117  3000               	movlw	0
  4815  0118  00E6               	movwf	_PIR_Main$2993+1
  4816  0119  0865               	movf	_PIR_Main$2993,w
  4817  011A  00DF               	movwf	??_PIR_Main
  4818  011B  085F               	movf	??_PIR_Main,w
  4819  011C  1683               	bsf	3,5	;RP0=1, select bank1
  4820  011D  1303               	bcf	3,6	;RP1=0, select bank1
  4821  011E  00C3               	movwf	(__PIR^(0+128)+35)
  4822                           
  4823                           ;PIR_B1.c: 120: if (_PIR.Count == _PIR.TriggerValue) {
  4824  011F  0843               	movf	(__PIR^(0+128)+35),w
  4825  0120  1283               	bcf	3,5	;RP0=0, select bank0
  4826  0121  1303               	bcf	3,6	;RP1=0, select bank0
  4827  0122  00DF               	movwf	??_PIR_Main
  4828  0123  01E0               	clrf	??_PIR_Main+1
  4829  0124  1683               	bsf	3,5	;RP0=1, select bank1
  4830  0125  1303               	bcf	3,6	;RP1=0, select bank1
  4831  0126  0842               	movf	((__PIR+1)^(0+128)+33),w
  4832  0127  1283               	bcf	3,5	;RP0=0, select bank0
  4833  0128  1303               	bcf	3,6	;RP1=0, select bank0
  4834  0129  0660               	xorwf	??_PIR_Main+1,w
  4835  012A  1D03               	skipz
  4836  012B  2932               	goto	u6525
  4837  012C  1683               	bsf	3,5	;RP0=1, select bank1
  4838  012D  1303               	bcf	3,6	;RP1=0, select bank1
  4839  012E  0841               	movf	(__PIR^(0+128)+33),w
  4840  012F  1283               	bcf	3,5	;RP0=0, select bank0
  4841  0130  1303               	bcf	3,6	;RP1=0, select bank0
  4842  0131  065F               	xorwf	??_PIR_Main,w
  4843  0132                     u6525:	
  4844  0132  1D03               	skipz
  4845  0133  298C               	goto	l5114
  4846                           
  4847                           ;PIR_B1.c: 121: _PIR.Count = 0;
  4848  0134  1683               	bsf	3,5	;RP0=1, select bank1
  4849  0135  1303               	bcf	3,6	;RP1=0, select bank1
  4850  0136  01C1               	clrf	(__PIR^(0+128)+33)
  4851  0137  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4852                           
  4853                           ;PIR_B1.c: 143: if (cds == 1) {
  4854  0138  1283               	bcf	3,5	;RP0=0, select bank0
  4855  0139  1303               	bcf	3,6	;RP1=0, select bank0
  4856  013A  0867               	movf	PIR_Main@cds,w
  4857  013B  3A01               	xorlw	1
  4858  013C  1D03               	skipz
  4859  013D  298C               	goto	l5114
  4860                           
  4861                           ;PIR_B1.c: 144: _PIR.CloseTimeSeconds = 0;
  4862  013E  1683               	bsf	3,5	;RP0=1, select bank1
  4863  013F  1303               	bcf	3,6	;RP1=0, select bank1
  4864  0140  01C6               	clrf	(__PIR^(0+128)+38)
  4865                           
  4866                           ;PIR_B1.c: 145: _PIR.CloseTimeMinutes = 0;
  4867  0141  01C4               	clrf	(__PIR^(0+128)+36)
  4868  0142  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4869                           
  4870                           ;PIR_B1.c: 146: _PIR.Status = 1;
  4871  0143  1720               	bsf	__PIR^(0+128),6
  4872                           
  4873                           ;PIR_B1.c: 150: if (getLights_Status(1) == 0) {
  4874  0144  3001               	movlw	1
  4875  0145  158A  243A  118A   	fcall	_getLights_Status
  4876  0148  3800               	iorlw	0
  4877  0149  1D03               	skipz
  4878  014A  2951               	goto	l5108
  4879                           
  4880                           ;PIR_B1.c: 151: setLights_Trigger(1, 1);
  4881  014B  01F6               	clrf	setLights_Trigger@command
  4882  014C  0AF6               	incf	setLights_Trigger@command,f
  4883  014D  3001               	movlw	1
  4884  014E  158A  24F1  118A   	fcall	_setLights_Trigger
  4885  0151                     l5108:	
  4886                           
  4887                           ;PIR_B1.c: 152: }
  4888                           ;PIR_B1.c: 156: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))) {
  4889  0151  1683               	bsf	3,5	;RP0=1, select bank1
  4890  0152  1303               	bcf	3,6	;RP1=0, select bank1
  4891  0153  084C               	movf	(__PIR^(0+128)+44),w
  4892  0154  074E               	addwf	(__PIR^(0+128)+46),w
  4893  0155  1283               	bcf	3,5	;RP0=0, select bank0
  4894  0156  1303               	bcf	3,6	;RP1=0, select bank0
  4895  0157  00DF               	movwf	??_PIR_Main
  4896  0158  01E0               	clrf	??_PIR_Main+1
  4897  0159  0DE0               	rlf	??_PIR_Main+1,f
  4898  015A  09DF               	comf	??_PIR_Main,f
  4899  015B  09E0               	comf	??_PIR_Main+1,f
  4900  015C  0ADF               	incf	??_PIR_Main,f
  4901  015D  1903               	skipnz
  4902  015E  0AE0               	incf	??_PIR_Main+1,f
  4903  015F  1683               	bsf	3,5	;RP0=1, select bank1
  4904  0160  1303               	bcf	3,6	;RP1=0, select bank1
  4905  0161  0826               	movf	(__PIR^(0+128)+6),w
  4906  0162  1283               	bcf	3,5	;RP0=0, select bank0
  4907  0163  1303               	bcf	3,6	;RP1=0, select bank0
  4908  0164  075F               	addwf	??_PIR_Main,w
  4909  0165  00E1               	movwf	??_PIR_Main+2
  4910  0166  0860               	movf	??_PIR_Main+1,w
  4911  0167  1803               	skipnc
  4912  0168  0A60               	incf	??_PIR_Main+1,w
  4913  0169  00E2               	movwf	??_PIR_Main+3
  4914  016A  0862               	movf	??_PIR_Main+3,w
  4915  016B  3A80               	xorlw	128
  4916  016C  00E3               	movwf	??_PIR_Main+4
  4917  016D  3080               	movlw	128
  4918  016E  0263               	subwf	??_PIR_Main+4,w
  4919  016F  1D03               	skipz
  4920  0170  2977               	goto	u6555
  4921  0171  1683               	bsf	3,5	;RP0=1, select bank1
  4922  0172  1303               	bcf	3,6	;RP1=0, select bank1
  4923  0173  0821               	movf	(__PIR^(0+128)+1),w
  4924  0174  1283               	bcf	3,5	;RP0=0, select bank0
  4925  0175  1303               	bcf	3,6	;RP1=0, select bank0
  4926  0176  0261               	subwf	??_PIR_Main+2,w
  4927  0177                     u6555:	
  4928  0177  1C03               	skipc
  4929  0178  2981               	goto	l5112
  4930                           
  4931                           ;PIR_B1.c: 157: setLED(1, 1);
  4932  0179  01F6               	clrf	setLED@command
  4933  017A  0AF6               	incf	setLED@command,f
  4934  017B                     L15:	
  4935  017B  3001               	movlw	1
  4936  017C  118A  256F  118A   	fcall	_setLED
  4937                           
  4938                           ;PIR_B1.c: 158: setLED(2, 0);
  4939  017F  01F6               	clrf	setLED@command
  4940  0180  2988               	goto	L12
  4941  0181                     l5112:	
  4942                           ;PIR_B1.c: 159: } else {
  4943                           
  4944                           
  4945                           ;PIR_B1.c: 160: setLED(1, 0);
  4946  0181  01F6               	clrf	setLED@command
  4947  0182  3001               	movlw	1
  4948  0183  118A  256F  118A   	fcall	_setLED
  4949                           
  4950                           ;PIR_B1.c: 161: setLED(2, 1);
  4951  0186  01F6               	clrf	setLED@command
  4952  0187  0AF6               	incf	setLED@command,f
  4953  0188                     L12:	
  4954  0188  3002               	movlw	2
  4955  0189  118A  256F  118A   	fcall	_setLED
  4956  018C                     l5114:	
  4957                           
  4958                           ;PIR_B1.c: 162: }
  4959                           ;PIR_B1.c: 163: }
  4960                           ;PIR_B1.c: 165: }
  4961                           ;PIR_B1.c: 166: }
  4962                           ;PIR_B1.c: 167: }
  4963                           ;PIR_B1.c: 168: }
  4964                           ;PIR_B1.c: 169: }
  4965                           ;PIR_B1.c: 170: }
  4966                           ;PIR_B1.c: 171: if (_PIR.OK == 0) {
  4967  018C  1683               	bsf	3,5	;RP0=1, select bank1
  4968  018D  1303               	bcf	3,6	;RP1=0, select bank1
  4969  018E  19A0               	btfsc	__PIR^(0+128),3
  4970  018F  29B7               	goto	l5130
  4971                           
  4972                           ;PIR_B1.c: 172: _PIR.Count++;
  4973  0190  3001               	movlw	1
  4974  0191  07C1               	addwf	(__PIR^(0+128)+33),f
  4975  0192  1803               	skipnc
  4976  0193  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4977  0194  3000               	movlw	0
  4978  0195  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4979                           
  4980                           ;PIR_B1.c: 173: if (_PIR.Count == 3000) {
  4981  0196  300B               	movlw	11
  4982  0197  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  4983  0198  1D03               	skipz
  4984  0199  299C               	goto	u6575
  4985  019A  30B8               	movlw	184
  4986  019B  0641               	xorwf	(__PIR^(0+128)+33),w
  4987  019C                     u6575:	
  4988  019C  1D03               	skipz
  4989  019D  29B7               	goto	l5130
  4990                           
  4991                           ;PIR_B1.c: 174: _PIR.Count = 0;
  4992  019E  01C1               	clrf	(__PIR^(0+128)+33)
  4993  019F  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4994                           
  4995                           ;PIR_B1.c: 175: _PIR.OK = 1;
  4996  01A0  15A0               	bsf	__PIR^(0+128),3
  4997                           
  4998                           ;PIR_B1.c: 176: setLED(1, 0);
  4999  01A1  01F6               	clrf	setLED@command
  5000  01A2  3001               	movlw	1
  5001  01A3  118A  256F  118A   	fcall	_setLED
  5002                           
  5003                           ;PIR_B1.c: 177: if (cds == 0) {
  5004  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  5005  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  5006  01A8  08E7               	movf	PIR_Main@cds,f
  5007  01A9  1D03               	skipz
  5008  01AA  29B7               	goto	l5130
  5009                           
  5010                           ;PIR_B1.c: 178: if (getLights_Status(1) == 1) {
  5011  01AB  3001               	movlw	1
  5012  01AC  158A  243A  118A   	fcall	_getLights_Status
  5013  01AF  3A01               	xorlw	1
  5014  01B0  1D03               	skipz
  5015  01B1  29B7               	goto	l5130
  5016                           
  5017                           ;PIR_B1.c: 179: setLights_Trigger(1, 0);
  5018  01B2  01F6               	clrf	setLights_Trigger@command
  5019  01B3  3001               	movlw	1
  5020  01B4  158A  24F1  118A   	fcall	_setLights_Trigger
  5021  01B7                     l5130:	
  5022                           
  5023                           ;PIR_B1.c: 180: }
  5024                           ;PIR_B1.c: 181: }
  5025                           ;PIR_B1.c: 182: }
  5026                           ;PIR_B1.c: 183: }
  5027                           ;PIR_B1.c: 184: if (_PIR.Status == 1) {
  5028  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  5029  01B8  1303               	bcf	3,6	;RP1=0, select bank1
  5030  01B9  1F20               	btfss	__PIR^(0+128),6
  5031  01BA  0008               	return
  5032                           
  5033                           ;PIR_B1.c: 185: _PIR.CloseTimeSeconds++;
  5034  01BB  3001               	movlw	1
  5035  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  5036  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  5037  01BE  00DF               	movwf	??_PIR_Main
  5038  01BF  085F               	movf	??_PIR_Main,w
  5039  01C0  1683               	bsf	3,5	;RP0=1, select bank1
  5040  01C1  1303               	bcf	3,6	;RP1=0, select bank1
  5041  01C2  07C6               	addwf	(__PIR^(0+128)+38),f
  5042                           
  5043                           ;PIR_B1.c: 186: if (_PIR.CloseTimeSeconds == 100) {
  5044  01C3  0846               	movf	(__PIR^(0+128)+38),w
  5045  01C4  3A64               	xorlw	100
  5046  01C5  1D03               	skipz
  5047  01C6  0008               	return
  5048                           
  5049                           ;PIR_B1.c: 187: _PIR.CloseTimeSeconds = 0;
  5050  01C7  01C6               	clrf	(__PIR^(0+128)+38)
  5051                           
  5052                           ;PIR_B1.c: 188: _PIR.CloseTimeMinutes++;
  5053  01C8  3001               	movlw	1
  5054  01C9  07C4               	addwf	(__PIR^(0+128)+36),f
  5055  01CA  1803               	skipnc
  5056  01CB  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  5057  01CC  3000               	movlw	0
  5058  01CD  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  5059                           
  5060                           ;PIR_B1.c: 189: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5061  01CE  0848               	movf	((__PIR+1)^(0+128)+39),w
  5062  01CF  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  5063  01D0  1D03               	skipz
  5064  01D1  29D4               	goto	u6625
  5065  01D2  0847               	movf	(__PIR^(0+128)+39),w
  5066  01D3  0644               	xorwf	(__PIR^(0+128)+36),w
  5067  01D4                     u6625:	
  5068  01D4  1D03               	skipz
  5069  01D5  0008               	return
  5070                           
  5071                           ;PIR_B1.c: 190: _PIR.CloseTimeMinutes = 0;
  5072  01D6  01C4               	clrf	(__PIR^(0+128)+36)
  5073  01D7  01C5               	clrf	((__PIR+1)^(0+128)+36)
  5074                           
  5075                           ;PIR_B1.c: 191: _PIR.Status = 0;
  5076  01D8  1320               	bcf	__PIR^(0+128),6
  5077                           
  5078                           ;PIR_B1.c: 195: if (getLights_Status(1) == 1) {
  5079  01D9  3001               	movlw	1
  5080  01DA  158A  243A  118A   	fcall	_getLights_Status
  5081  01DD  3A01               	xorlw	1
  5082  01DE  1D03               	skipz
  5083  01DF  0008               	return
  5084                           
  5085                           ;PIR_B1.c: 196: setLights_Trigger(1, 0);
  5086  01E0  01F6               	clrf	setLights_Trigger@command
  5087  01E1  3001               	movlw	1
  5088  01E2  158A  24F1         	fcall	_setLights_Trigger
  5089                           
  5090                           ;PIR_B1.c: 197: }
  5091                           ;PIR_B1.c: 201: }
  5092                           ;PIR_B1.c: 202: }
  5093                           ;PIR_B1.c: 203: }
  5094                           ;PIR_B1.c: 204: } else {
  5095  01E4  0008               	return
  5096  01E5                     l871:	
  5097                           
  5098                           ;PIR_B1.c: 205: if (myMain.PowerON == 1) {
  5099  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  5100  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  5101  01E7  1C20               	btfss	_myMain,0
  5102  01E8  0008               	return
  5103                           
  5104                           ;PIR_B1.c: 206: _PIR.Enable = 1;
  5105  01E9  1683               	bsf	3,5	;RP0=1, select bank1
  5106  01EA  1303               	bcf	3,6	;RP1=0, select bank1
  5107  01EB  1420               	bsf	__PIR^(0+128),0
  5108                           
  5109                           ;PIR_B1.c: 207: setLED(1, 1);
  5110  01EC  01F6               	clrf	setLED@command
  5111  01ED  0AF6               	incf	setLED@command,f
  5112  01EE  3001               	movlw	1
  5113  01EF  118A  256F  118A   	fcall	_setLED
  5114                           
  5115                           ;PIR_B1.c: 210: if (getLights_Status(1) == 0) {
  5116  01F2  3001               	movlw	1
  5117  01F3  158A  243A  118A   	fcall	_getLights_Status
  5118  01F6  3800               	iorlw	0
  5119  01F7  1D03               	skipz
  5120  01F8  0008               	return
  5121                           
  5122                           ;PIR_B1.c: 211: setLights_Trigger(1, 1);
  5123  01F9  01F6               	clrf	setLights_Trigger@command
  5124  01FA  0AF6               	incf	setLights_Trigger@command,f
  5125  01FB  3001               	movlw	1
  5126  01FC  158A  24F1         	fcall	_setLights_Trigger
  5127  01FE  0008               	return
  5128  01FF                     __end_of_PIR_Main:	
  5129                           
  5130                           	psect	text22
  5131  0B9B                     __ptext22:	
  5132 ;; *************** function _getCDS_Status *****************
  5133 ;; Defined at:
  5134 ;;		line 42 in file "../src/CDS_B1.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;  status          1    4[COMMON] unsigned char 
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  1    wreg      unsigned char 
  5141 ;; Registers used:
  5142 ;;		wreg, status,2
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5148 ;;      Params:         0       0       0       0
  5149 ;;      Locals:         1       0       0       0
  5150 ;;      Temps:          0       0       0       0
  5151 ;;      Totals:         1       0       0       0
  5152 ;;Total ram usage:        1 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; Hardware stack levels required when called:    2
  5155 ;; This function calls:
  5156 ;;		Nothing
  5157 ;; This function is called by:
  5158 ;;		_PIR_Main
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           
  5163                           ;psect for function _getCDS_Status
  5164  0B9B                     _getCDS_Status:	
  5165                           
  5166                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5167                           
  5168                           ;incstack = 0
  5169                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5170  0B9B  3000               	movlw	0
  5171  0B9C  1283               	bcf	3,5	;RP0=0, select bank0
  5172  0B9D  1303               	bcf	3,6	;RP1=0, select bank0
  5173  0B9E  1A2B               	btfsc	__CDS,4
  5174  0B9F  3001               	movlw	1
  5175  0BA0  00F4               	movwf	getCDS_Status@status
  5176                           
  5177                           ;CDS_B1.c: 44: return status;
  5178  0BA1  0874               	movf	getCDS_Status@status,w
  5179  0BA2  0008               	return
  5180  0BA3                     __end_of_getCDS_Status:	
  5181                           
  5182                           	psect	text23
  5183  0BB5                     __ptext23:	
  5184 ;; *************** function _PIR_Initialization *****************
  5185 ;; Defined at:
  5186 ;;		line 7 in file "../src/PIR_B1.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;		None
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;		None
  5191 ;; Return value:  Size  Location     Type
  5192 ;;		None               void
  5193 ;; Registers used:
  5194 ;;		wreg
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5200 ;;      Params:         0       0       0       0
  5201 ;;      Locals:         0       0       0       0
  5202 ;;      Temps:          1       0       0       0
  5203 ;;      Totals:         1       0       0       0
  5204 ;;Total ram usage:        1 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    2
  5207 ;; This function calls:
  5208 ;;		Nothing
  5209 ;; This function is called by:
  5210 ;;		_main
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213                           
  5214                           
  5215                           ;psect for function _PIR_Initialization
  5216  0BB5                     _PIR_Initialization:	
  5217                           
  5218                           ;PIR_B1.c: 8: _PIR.RangeValue = 20;
  5219                           
  5220                           ;incstack = 0
  5221                           ; Regs used in _PIR_Initialization: [wreg]
  5222  0BB5  3014               	movlw	20
  5223  0BB6  00F4               	movwf	??_PIR_Initialization
  5224  0BB7  0874               	movf	??_PIR_Initialization,w
  5225  0BB8  1683               	bsf	3,5	;RP0=1, select bank1
  5226  0BB9  1303               	bcf	3,6	;RP1=0, select bank1
  5227  0BBA  00CC               	movwf	(__PIR^(0+128)+44)
  5228                           
  5229                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5230  0BBB  3005               	movlw	5
  5231  0BBC  00C7               	movwf	(__PIR^(0+128)+39)
  5232  0BBD  3000               	movlw	0
  5233  0BBE  00C8               	movwf	(__PIR^(0+128)+40)
  5234  0BBF  0008               	return
  5235  0BC0                     __end_of_PIR_Initialization:	
  5236                           
  5237                           	psect	text24
  5238  0C1B                     __ptext24:	
  5239 ;; *************** function _Mcu_Initialization *****************
  5240 ;; Defined at:
  5241 ;;		line 30 in file "../src/MCU_B1.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;		None
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;		None
  5246 ;; Return value:  Size  Location     Type
  5247 ;;		None               void
  5248 ;; Registers used:
  5249 ;;		wreg, status,2, status,0, pclath, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5255 ;;      Params:         0       0       0       0
  5256 ;;      Locals:         0       0       0       0
  5257 ;;      Temps:          0       0       0       0
  5258 ;;      Totals:         0       0       0       0
  5259 ;;Total ram usage:        0 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    3
  5262 ;; This function calls:
  5263 ;;		_ADC_Set
  5264 ;;		_Fosc_Set
  5265 ;;		_IO_Set
  5266 ;;		_TMR1_Set
  5267 ;;		_WDT_Set
  5268 ;; This function is called by:
  5269 ;;		_main
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           
  5274                           ;psect for function _Mcu_Initialization
  5275  0C1B                     _Mcu_Initialization:	
  5276                           
  5277                           ;MCU_B1.c: 32: Fosc_Set();
  5278                           
  5279                           ;incstack = 0
  5280                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5281  0C1B  158A  2373  158A   	fcall	_Fosc_Set
  5282                           
  5283                           ;MCU_B1.c: 34: IO_Set();
  5284  0C1E  158A  24A8  158A   	fcall	_IO_Set
  5285                           
  5286                           ;MCU_B1.c: 36: ;;
  5287                           ;MCU_B1.c: 38: TMR1_Set();
  5288  0C21  158A  23FF  158A   	fcall	_TMR1_Set
  5289                           
  5290                           ;MCU_B1.c: 40: ADC_Set();
  5291  0C24  158A  2384  158A   	fcall	_ADC_Set
  5292                           
  5293                           ;MCU_B1.c: 42: ;;
  5294                           ;MCU_B1.c: 44: ;;
  5295                           ;MCU_B1.c: 46: ;;
  5296                           ;MCU_B1.c: 48: ;;
  5297                           ;MCU_B1.c: 50: ;;
  5298                           ;MCU_B1.c: 52: WDT_Set();
  5299  0C27  158A  240D         	fcall	_WDT_Set
  5300  0C29  0008               	return
  5301  0C2A                     __end_of_Mcu_Initialization:	
  5302                           
  5303                           	psect	text25
  5304  0C0D                     __ptext25:	
  5305 ;; *************** function _WDT_Set *****************
  5306 ;; Defined at:
  5307 ;;		line 1046 in file "../src/MCU_B1.c"
  5308 ;; Parameters:    Size  Location     Type
  5309 ;;		None
  5310 ;; Auto vars:     Size  Location     Type
  5311 ;;		None
  5312 ;; Return value:  Size  Location     Type
  5313 ;;		None               void
  5314 ;; Registers used:
  5315 ;;		wreg
  5316 ;; Tracked objects:
  5317 ;;		On entry : 0/0
  5318 ;;		On exit  : 0/0
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5321 ;;      Params:         0       0       0       0
  5322 ;;      Locals:         0       0       0       0
  5323 ;;      Temps:          1       0       0       0
  5324 ;;      Totals:         1       0       0       0
  5325 ;;Total ram usage:        1 bytes
  5326 ;; Hardware stack levels used:    1
  5327 ;; Hardware stack levels required when called:    2
  5328 ;; This function calls:
  5329 ;;		Nothing
  5330 ;; This function is called by:
  5331 ;;		_Mcu_Initialization
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           
  5336                           ;psect for function _WDT_Set
  5337  0C0D                     _WDT_Set:	
  5338                           
  5339                           ;MCU_B1.c: 1048: PSA = 1;
  5340                           
  5341                           ;incstack = 0
  5342                           ; Regs used in _WDT_Set: [wreg]
  5343  0C0D  1683               	bsf	3,5	;RP0=1, select bank1
  5344  0C0E  1303               	bcf	3,6	;RP1=0, select bank1
  5345  0C0F  1581               	bsf	1,3	;volatile
  5346                           
  5347                           ;MCU_B1.c: 1049: PS0 = 1;
  5348  0C10  1401               	bsf	1,0	;volatile
  5349                           
  5350                           ;MCU_B1.c: 1050: PS1 = 1;
  5351  0C11  1481               	bsf	1,1	;volatile
  5352                           
  5353                           ;MCU_B1.c: 1051: PS2 = 1;
  5354  0C12  1501               	bsf	1,2	;volatile
  5355                           
  5356                           ;MCU_B1.c: 1055: WDT.Enable = 1;
  5357  0C13  1283               	bcf	3,5	;RP0=0, select bank0
  5358  0C14  1303               	bcf	3,6	;RP1=0, select bank0
  5359  0C15  1437               	bsf	_WDT,0
  5360                           
  5361                           ;MCU_B1.c: 1056: WDT.Timer = 10;
  5362  0C16  300A               	movlw	10
  5363  0C17  00F4               	movwf	??_WDT_Set
  5364  0C18  0874               	movf	??_WDT_Set,w
  5365  0C19  00B8               	movwf	_WDT+1
  5366  0C1A  0008               	return
  5367  0C1B                     __end_of_WDT_Set:	
  5368                           
  5369                           	psect	text26
  5370  0BFF                     __ptext26:	
  5371 ;; *************** function _TMR1_Set *****************
  5372 ;; Defined at:
  5373 ;;		line 199 in file "../src/MCU_B1.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;		None
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;		None
  5378 ;; Return value:  Size  Location     Type
  5379 ;;		None               void
  5380 ;; Registers used:
  5381 ;;		wreg
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5387 ;;      Params:         0       0       0       0
  5388 ;;      Locals:         0       0       0       0
  5389 ;;      Temps:          0       0       0       0
  5390 ;;      Totals:         0       0       0       0
  5391 ;;Total ram usage:        0 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:    2
  5394 ;; This function calls:
  5395 ;;		Nothing
  5396 ;; This function is called by:
  5397 ;;		_Mcu_Initialization
  5398 ;; This function uses a non-reentrant model
  5399 ;;
  5400                           
  5401                           
  5402                           ;psect for function _TMR1_Set
  5403  0BFF                     _TMR1_Set:	
  5404                           
  5405                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  5406                           
  5407                           ;incstack = 0
  5408                           ; Regs used in _TMR1_Set: [wreg]
  5409  0BFF  3041               	movlw	65
  5410  0C00  1283               	bcf	3,5	;RP0=0, select bank0
  5411  0C01  1303               	bcf	3,6	;RP1=0, select bank0
  5412  0C02  0090               	movwf	16	;volatile
  5413                           
  5414                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  5415  0C03  30FA               	movlw	250
  5416  0C04  008F               	movwf	15	;volatile
  5417                           
  5418                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  5419  0C05  3038               	movlw	56
  5420  0C06  008E               	movwf	14	;volatile
  5421                           
  5422                           ;MCU_B1.c: 203: TMR1IE = 1;
  5423  0C07  1683               	bsf	3,5	;RP0=1, select bank1
  5424  0C08  1303               	bcf	3,6	;RP1=0, select bank1
  5425  0C09  140C               	bsf	12,0	;volatile
  5426                           
  5427                           ;MCU_B1.c: 204: PEIE = 1;
  5428  0C0A  170B               	bsf	11,6	;volatile
  5429                           
  5430                           ;MCU_B1.c: 205: GIE = 1;
  5431  0C0B  178B               	bsf	11,7	;volatile
  5432  0C0C  0008               	return
  5433  0C0D                     __end_of_TMR1_Set:	
  5434                           
  5435                           	psect	text27
  5436  0CA8                     __ptext27:	
  5437 ;; *************** function _IO_Set *****************
  5438 ;; Defined at:
  5439 ;;		line 60 in file "../src/MCU_B1.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;		None
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;		None
  5444 ;; Return value:  Size  Location     Type
  5445 ;;		None               void
  5446 ;; Registers used:
  5447 ;;		wreg, status,2
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5453 ;;      Params:         0       0       0       0
  5454 ;;      Locals:         0       0       0       0
  5455 ;;      Temps:          0       0       0       0
  5456 ;;      Totals:         0       0       0       0
  5457 ;;Total ram usage:        0 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    2
  5460 ;; This function calls:
  5461 ;;		Nothing
  5462 ;; This function is called by:
  5463 ;;		_Mcu_Initialization
  5464 ;; This function uses a non-reentrant model
  5465 ;;
  5466                           
  5467                           
  5468                           ;psect for function _IO_Set
  5469  0CA8                     _IO_Set:	
  5470                           
  5471                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5472                           
  5473                           ;incstack = 0
  5474                           ; Regs used in _IO_Set: [wreg+status,2]
  5475  0CA8  302F               	movlw	47
  5476  0CA9  1683               	bsf	3,5	;RP0=1, select bank1
  5477  0CAA  1303               	bcf	3,6	;RP1=0, select bank1
  5478  0CAB  0085               	movwf	5	;volatile
  5479                           
  5480                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5481  0CAC  3001               	movlw	1
  5482  0CAD  0086               	movwf	6	;volatile
  5483                           
  5484                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5485  0CAE  0187               	clrf	7	;volatile
  5486                           
  5487                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5488  0CAF  3007               	movlw	7
  5489  0CB0  1683               	bsf	3,5	;RP0=1, select bank3
  5490  0CB1  1703               	bsf	3,6	;RP1=1, select bank3
  5491  0CB2  0085               	movwf	5	;volatile
  5492                           
  5493                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5494  0CB3  3001               	movlw	1
  5495  0CB4  0086               	movwf	6	;volatile
  5496                           
  5497                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5498  0CB5  30AF               	movlw	175
  5499  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  5500  0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  5501  0CB8  0085               	movwf	5	;volatile
  5502                           
  5503                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5504  0CB9  3001               	movlw	1
  5505  0CBA  0086               	movwf	6	;volatile
  5506                           
  5507                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5508  0CBB  0187               	clrf	7	;volatile
  5509  0CBC  0008               	return
  5510  0CBD                     __end_of_IO_Set:	
  5511                           
  5512                           	psect	text28
  5513  0B73                     __ptext28:	
  5514 ;; *************** function _Fosc_Set *****************
  5515 ;; Defined at:
  5516 ;;		line 56 in file "../src/MCU_B1.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;		None
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;		None
  5521 ;; Return value:  Size  Location     Type
  5522 ;;		None               void
  5523 ;; Registers used:
  5524 ;;		wreg
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5530 ;;      Params:         0       0       0       0
  5531 ;;      Locals:         0       0       0       0
  5532 ;;      Temps:          0       0       0       0
  5533 ;;      Totals:         0       0       0       0
  5534 ;;Total ram usage:        0 bytes
  5535 ;; Hardware stack levels used:    1
  5536 ;; Hardware stack levels required when called:    2
  5537 ;; This function calls:
  5538 ;;		Nothing
  5539 ;; This function is called by:
  5540 ;;		_Mcu_Initialization
  5541 ;; This function uses a non-reentrant model
  5542 ;;
  5543                           
  5544                           
  5545                           ;psect for function _Fosc_Set
  5546  0B73                     _Fosc_Set:	
  5547                           
  5548                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5549                           
  5550                           ;incstack = 0
  5551                           ; Regs used in _Fosc_Set: [wreg]
  5552  0B73  303C               	movlw	60
  5553  0B74  1683               	bsf	3,5	;RP0=1, select bank1
  5554  0B75  1303               	bcf	3,6	;RP1=0, select bank1
  5555  0B76  0090               	movwf	16	;volatile
  5556  0B77  0008               	return
  5557  0B78                     __end_of_Fosc_Set:	
  5558                           
  5559                           	psect	text29
  5560  0B84                     __ptext29:	
  5561 ;; *************** function _ADC_Set *****************
  5562 ;; Defined at:
  5563 ;;		line 420 in file "../src/MCU_B1.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;		None
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;		None
  5568 ;; Return value:  Size  Location     Type
  5569 ;;		None               void
  5570 ;; Registers used:
  5571 ;;		wreg
  5572 ;; Tracked objects:
  5573 ;;		On entry : 0/0
  5574 ;;		On exit  : 0/0
  5575 ;;		Unchanged: 0/0
  5576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5577 ;;      Params:         0       0       0       0
  5578 ;;      Locals:         0       0       0       0
  5579 ;;      Temps:          0       0       0       0
  5580 ;;      Totals:         0       0       0       0
  5581 ;;Total ram usage:        0 bytes
  5582 ;; Hardware stack levels used:    1
  5583 ;; Hardware stack levels required when called:    2
  5584 ;; This function calls:
  5585 ;;		Nothing
  5586 ;; This function is called by:
  5587 ;;		_Mcu_Initialization
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591                           
  5592                           ;psect for function _ADC_Set
  5593  0B84                     _ADC_Set:	
  5594                           
  5595                           ;MCU_B1.c: 421: ADCON1 = 0x73;
  5596                           
  5597                           ;incstack = 0
  5598                           ; Regs used in _ADC_Set: [wreg]
  5599  0B84  3073               	movlw	115
  5600  0B85  1683               	bsf	3,5	;RP0=1, select bank1
  5601  0B86  1303               	bcf	3,6	;RP1=0, select bank1
  5602  0B87  009F               	movwf	31	;volatile
  5603                           
  5604                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  5605  0B88  30C1               	movlw	193
  5606  0B89  009D               	movwf	29	;volatile
  5607  0B8A  0008               	return
  5608  0B8B                     __end_of_ADC_Set:	
  5609                           
  5610                           	psect	text30
  5611  01FF                     __ptext30:	
  5612 ;; *************** function _Load_Main *****************
  5613 ;; Defined at:
  5614 ;;		line 39 in file "../src/OverLoad_B1.c"
  5615 ;; Parameters:    Size  Location     Type
  5616 ;;		None
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;  i               1   13[BANK0 ] unsigned char 
  5619 ;;  error           1   12[BANK0 ] unsigned char 
  5620 ;;  adjgo           1   10[BANK0 ] unsigned char 
  5621 ;;  j               1    9[BANK0 ] unsigned char 
  5622 ;; Return value:  Size  Location     Type
  5623 ;;		None               void
  5624 ;; Registers used:
  5625 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5631 ;;      Params:         0       0       0       0
  5632 ;;      Locals:         0       5       0       0
  5633 ;;      Temps:          0       2       0       0
  5634 ;;      Totals:         0       7       0       0
  5635 ;;Total ram usage:        7 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    5
  5638 ;; This function calls:
  5639 ;;		___lwdiv
  5640 ;;		_getMain_All_Error_Status
  5641 ;;		_getMain_LightsStatus
  5642 ;;		_getMain_Lights_Count
  5643 ;;		_getMain_LoadOK
  5644 ;;		_setLoad_AH_AL_Restore
  5645 ;; This function is called by:
  5646 ;;		_main
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           
  5651                           ;psect for function _Load_Main
  5652  01FF                     _Load_Main:	
  5653                           
  5654                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
  5655                           
  5656                           ;incstack = 0
  5657                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5658  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  5659  0200  1303               	bcf	3,6	;RP1=0, select bank0
  5660  0201  01E6               	clrf	Load_Main@i
  5661  0202  01E2               	clrf	Load_Main@j
  5662  0203  3000               	movlw	0
  5663  0204  158A  265D  118A   	fcall	_getMain_All_Error_Status
  5664  0207  1283               	bcf	3,5	;RP0=0, select bank0
  5665  0208  1303               	bcf	3,6	;RP1=0, select bank0
  5666  0209  00E0               	movwf	??_Load_Main
  5667  020A  0860               	movf	??_Load_Main,w
  5668  020B  00E5               	movwf	Load_Main@error
  5669  020C  01E3               	clrf	Load_Main@adjgo
  5670                           
  5671                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  5672  020D  1683               	bsf	3,5	;RP0=1, select bank1
  5673  020E  1303               	bcf	3,6	;RP1=0, select bank1
  5674  020F  1C4F               	btfss	_Load^(0+128),0
  5675  0210  2BA5               	goto	l693
  5676                           
  5677                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
  5678  0211  1283               	bcf	3,5	;RP0=0, select bank0
  5679  0212  1303               	bcf	3,6	;RP1=0, select bank0
  5680  0213  01E4               	clrf	_Load_Main$2511
  5681  0214  158A  25BD  118A   	fcall	_getMain_LightsStatus
  5682  0217  3A01               	xorlw	1
  5683  0218  1D03               	skipz
  5684  0219  2A24               	goto	l4866
  5685  021A  1283               	bcf	3,5	;RP0=0, select bank0
  5686  021B  1303               	bcf	3,6	;RP1=0, select bank0
  5687  021C  08E5               	movf	Load_Main@error,f
  5688  021D  1D03               	skipz
  5689  021E  2A24               	goto	l4866
  5690  021F  08E3               	movf	Load_Main@adjgo,f
  5691  0220  1D03               	skipz
  5692  0221  2A24               	goto	l4866
  5693  0222  01E4               	clrf	_Load_Main$2511
  5694  0223  0AE4               	incf	_Load_Main$2511,f
  5695  0224                     l4866:	
  5696  0224  1283               	bcf	3,5	;RP0=0, select bank0
  5697  0225  1303               	bcf	3,6	;RP1=0, select bank0
  5698  0226  0864               	movf	_Load_Main$2511,w
  5699  0227  1683               	bsf	3,5	;RP0=1, select bank1
  5700  0228  1303               	bcf	3,6	;RP1=0, select bank1
  5701  0229  10CF               	bcf	_Load^(0+128),1
  5702  022A  1D03               	skipz
  5703  022B  14CF               	bsf	_Load^(0+128),1
  5704                           
  5705                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
  5706  022C  158A  23D8  118A   	fcall	_getMain_LoadOK
  5707  022F  3A01               	xorlw	1
  5708  0230  1D03               	skipz
  5709  0231  2A38               	goto	l696
  5710  0232  1683               	bsf	3,5	;RP0=1, select bank1
  5711  0233  1303               	bcf	3,6	;RP1=0, select bank1
  5712  0234  19CF               	btfsc	_Load^(0+128),3
  5713  0235  2A38               	goto	l696
  5714                           
  5715                           ;OverLoad_B1.c: 49: Load.Run = 1;
  5716  0236  15CF               	bsf	_Load^(0+128),3
  5717                           
  5718                           ;OverLoad_B1.c: 50: Load.OK = 0;
  5719  0237  13CF               	bcf	_Load^(0+128),7
  5720  0238                     l696:	
  5721                           
  5722                           ;OverLoad_B1.c: 51: }
  5723                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
  5724  0238  1683               	bsf	3,5	;RP0=1, select bank1
  5725  0239  1303               	bcf	3,6	;RP1=0, select bank1
  5726  023A  1CCF               	btfss	_Load^(0+128),1
  5727  023B  2B70               	goto	l697
  5728                           
  5729                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
  5730  023C  154F               	bsf	_Load^(0+128),2
  5731                           
  5732                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
  5733  023D  1E4F               	btfss	_Load^(0+128),4
  5734  023E  2B6E               	goto	l698
  5735                           
  5736                           ;OverLoad_B1.c: 58: Load.Time++;
  5737  023F  3001               	movlw	1
  5738  0240  07D0               	addwf	(_Load^(0+128)+1),f
  5739  0241  1803               	skipnc
  5740  0242  0AD1               	incf	((_Load+1)^(0+128)+1),f
  5741  0243  3000               	movlw	0
  5742  0244  07D1               	addwf	((_Load+1)^(0+128)+1),f
  5743                           
  5744                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
  5745  0245  3000               	movlw	0
  5746  0246  0251               	subwf	((_Load+1)^(0+128)+1),w
  5747  0247  3005               	movlw	5
  5748  0248  1903               	skipnz
  5749  0249  0250               	subwf	(_Load^(0+128)+1),w
  5750  024A  1C03               	skipc
  5751  024B  0008               	return
  5752                           
  5753                           ;OverLoad_B1.c: 60: Load.Time = 0;
  5754  024C  01D0               	clrf	(_Load^(0+128)+1)
  5755  024D  01D1               	clrf	((_Load+1)^(0+128)+1)
  5756                           
  5757                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
  5758  024E  124F               	bcf	_Load^(0+128),4
  5759                           
  5760                           ;OverLoad_B1.c: 63: for (i = 1; i < 4; i++) {
  5761  024F  1283               	bcf	3,5	;RP0=0, select bank0
  5762  0250  1303               	bcf	3,6	;RP1=0, select bank0
  5763  0251  01E6               	clrf	Load_Main@i
  5764  0252  0AE6               	incf	Load_Main@i,f
  5765  0253  3004               	movlw	4
  5766  0254  0266               	subwf	Load_Main@i,w
  5767  0255  1803               	btfsc	3,0
  5768  0256  2A88               	goto	l4894
  5769  0257                     l4888:	
  5770                           
  5771                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
  5772  0257  0866               	movf	Load_Main@i,w
  5773  0258  3ED9               	addlw	(_Load+10)& (0+255)
  5774  0259  0084               	movwf	4
  5775  025A  1383               	bcf	3,7	;select IRP bank1
  5776  025B  0800               	movf	0,w
  5777  025C  00E0               	movwf	??_Load_Main
  5778  025D  01E1               	clrf	??_Load_Main+1
  5779  025E  0860               	movf	??_Load_Main,w
  5780  025F  1683               	bsf	3,5	;RP0=1, select bank1
  5781  0260  1303               	bcf	3,6	;RP1=0, select bank1
  5782  0261  07D4               	addwf	(_Load^(0+128)+5),f
  5783  0262  1803               	skipnc
  5784  0263  0AD5               	incf	((_Load+1)^(0+128)+5),f
  5785  0264  1283               	bcf	3,5	;RP0=0, select bank0
  5786  0265  1303               	bcf	3,6	;RP1=0, select bank0
  5787  0266  0861               	movf	??_Load_Main+1,w
  5788  0267  1683               	bsf	3,5	;RP0=1, select bank1
  5789  0268  1303               	bcf	3,6	;RP1=0, select bank1
  5790  0269  07D5               	addwf	((_Load+1)^(0+128)+5),f
  5791                           
  5792                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
  5793  026A  1283               	bcf	3,5	;RP0=0, select bank0
  5794  026B  1303               	bcf	3,6	;RP1=0, select bank0
  5795  026C  0866               	movf	Load_Main@i,w
  5796  026D  3EDE               	addlw	(_Load+15)& (0+255)
  5797  026E  0084               	movwf	4
  5798  026F  0800               	movf	0,w
  5799  0270  00E0               	movwf	??_Load_Main
  5800  0271  01E1               	clrf	??_Load_Main+1
  5801  0272  0860               	movf	??_Load_Main,w
  5802  0273  1683               	bsf	3,5	;RP0=1, select bank1
  5803  0274  1303               	bcf	3,6	;RP1=0, select bank1
  5804  0275  07D6               	addwf	(_Load^(0+128)+7),f
  5805  0276  1803               	skipnc
  5806  0277  0AD7               	incf	((_Load+1)^(0+128)+7),f
  5807  0278  1283               	bcf	3,5	;RP0=0, select bank0
  5808  0279  1303               	bcf	3,6	;RP1=0, select bank0
  5809  027A  0861               	movf	??_Load_Main+1,w
  5810  027B  1683               	bsf	3,5	;RP0=1, select bank1
  5811  027C  1303               	bcf	3,6	;RP1=0, select bank1
  5812  027D  07D7               	addwf	((_Load+1)^(0+128)+7),f
  5813  027E  3001               	movlw	1
  5814  027F  1283               	bcf	3,5	;RP0=0, select bank0
  5815  0280  1303               	bcf	3,6	;RP1=0, select bank0
  5816  0281  00E0               	movwf	??_Load_Main
  5817  0282  0860               	movf	??_Load_Main,w
  5818  0283  07E6               	addwf	Load_Main@i,f
  5819  0284  3004               	movlw	4
  5820  0285  0266               	subwf	Load_Main@i,w
  5821  0286  1C03               	skipc
  5822  0287  2A57               	goto	l4888
  5823  0288                     l4894:	
  5824                           
  5825                           ;OverLoad_B1.c: 66: }
  5826                           ;OverLoad_B1.c: 67: Load.ADH /= 3;
  5827  0288  3003               	movlw	3
  5828  0289  00D9               	movwf	___lwdiv@divisor
  5829  028A  3000               	movlw	0
  5830  028B  00DA               	movwf	___lwdiv@divisor+1
  5831  028C  1683               	bsf	3,5	;RP0=1, select bank1
  5832  028D  1303               	bcf	3,6	;RP1=0, select bank1
  5833  028E  0855               	movf	((_Load+1)^(0+128)+5),w
  5834  028F  1283               	bcf	3,5	;RP0=0, select bank0
  5835  0290  1303               	bcf	3,6	;RP1=0, select bank0
  5836  0291  01DC               	clrf	___lwdiv@dividend+1
  5837  0292  07DC               	addwf	___lwdiv@dividend+1,f
  5838  0293  1683               	bsf	3,5	;RP0=1, select bank1
  5839  0294  1303               	bcf	3,6	;RP1=0, select bank1
  5840  0295  0854               	movf	(_Load^(0+128)+5),w
  5841  0296  1283               	bcf	3,5	;RP0=0, select bank0
  5842  0297  1303               	bcf	3,6	;RP1=0, select bank0
  5843  0298  01DB               	clrf	___lwdiv@dividend
  5844  0299  07DB               	addwf	___lwdiv@dividend,f
  5845  029A  158A  269B  118A   	fcall	___lwdiv
  5846  029D  1283               	bcf	3,5	;RP0=0, select bank0
  5847  029E  1303               	bcf	3,6	;RP1=0, select bank0
  5848  029F  085A               	movf	?___lwdiv+1,w
  5849  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  5850  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  5851  02A2  01D5               	clrf	((_Load+1)^(0+128)+5)
  5852  02A3  07D5               	addwf	((_Load+1)^(0+128)+5),f
  5853  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  5854  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  5855  02A6  0859               	movf	?___lwdiv,w
  5856  02A7  1683               	bsf	3,5	;RP0=1, select bank1
  5857  02A8  1303               	bcf	3,6	;RP1=0, select bank1
  5858  02A9  01D4               	clrf	(_Load^(0+128)+5)
  5859  02AA  07D4               	addwf	(_Load^(0+128)+5),f
  5860                           
  5861                           ;OverLoad_B1.c: 68: Load.ADL /= 3;
  5862  02AB  3003               	movlw	3
  5863  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  5864  02AD  1303               	bcf	3,6	;RP1=0, select bank0
  5865  02AE  00D9               	movwf	___lwdiv@divisor
  5866  02AF  3000               	movlw	0
  5867  02B0  00DA               	movwf	___lwdiv@divisor+1
  5868  02B1  1683               	bsf	3,5	;RP0=1, select bank1
  5869  02B2  1303               	bcf	3,6	;RP1=0, select bank1
  5870  02B3  0857               	movf	((_Load+1)^(0+128)+7),w
  5871  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  5872  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  5873  02B6  01DC               	clrf	___lwdiv@dividend+1
  5874  02B7  07DC               	addwf	___lwdiv@dividend+1,f
  5875  02B8  1683               	bsf	3,5	;RP0=1, select bank1
  5876  02B9  1303               	bcf	3,6	;RP1=0, select bank1
  5877  02BA  0856               	movf	(_Load^(0+128)+7),w
  5878  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  5879  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  5880  02BD  01DB               	clrf	___lwdiv@dividend
  5881  02BE  07DB               	addwf	___lwdiv@dividend,f
  5882  02BF  158A  269B  118A   	fcall	___lwdiv
  5883  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  5884  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  5885  02C4  085A               	movf	?___lwdiv+1,w
  5886  02C5  1683               	bsf	3,5	;RP0=1, select bank1
  5887  02C6  1303               	bcf	3,6	;RP1=0, select bank1
  5888  02C7  01D7               	clrf	((_Load+1)^(0+128)+7)
  5889  02C8  07D7               	addwf	((_Load+1)^(0+128)+7),f
  5890  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  5891  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  5892  02CB  0859               	movf	?___lwdiv,w
  5893  02CC  1683               	bsf	3,5	;RP0=1, select bank1
  5894  02CD  1303               	bcf	3,6	;RP1=0, select bank1
  5895  02CE  01D6               	clrf	(_Load^(0+128)+7)
  5896  02CF  07D6               	addwf	(_Load^(0+128)+7),f
  5897                           
  5898                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
  5899  02D0  118A  27E8  118A   	fcall	_setLoad_AH_AL_Restore
  5900                           
  5901                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
  5902  02D3  1683               	bsf	3,5	;RP0=1, select bank1
  5903  02D4  1303               	bcf	3,6	;RP1=0, select bank1
  5904  02D5  0855               	movf	((_Load+1)^(0+128)+5),w
  5905  02D6  0257               	subwf	((_Load+1)^(0+128)+7),w
  5906  02D7  1D03               	skipz
  5907  02D8  2ADB               	goto	u6105
  5908  02D9  0854               	movf	(_Load^(0+128)+5),w
  5909  02DA  0256               	subwf	(_Load^(0+128)+7),w
  5910  02DB                     u6105:	
  5911  02DB  1803               	skipnc
  5912  02DC  0008               	return
  5913                           
  5914                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
  5915  02DD  0356               	decf	(_Load^(0+128)+7),w
  5916  02DE  3AFF               	xorlw	255
  5917  02DF  0754               	addwf	(_Load^(0+128)+5),w
  5918  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  5919  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  5920  02E2  00E0               	movwf	??_Load_Main
  5921  02E3  0860               	movf	??_Load_Main,w
  5922  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  5923  02E5  1303               	bcf	3,6	;RP1=0, select bank1
  5924  02E6  00E3               	movwf	(_Load^(0+128)+20)
  5925                           
  5926                           ;OverLoad_B1.c: 73: Load.ADH = 0;
  5927  02E7  01D4               	clrf	(_Load^(0+128)+5)
  5928  02E8  01D5               	clrf	((_Load+1)^(0+128)+5)
  5929                           
  5930                           ;OverLoad_B1.c: 74: Load.ADL = 0;
  5931  02E9  01D6               	clrf	(_Load^(0+128)+7)
  5932  02EA  01D7               	clrf	((_Load+1)^(0+128)+7)
  5933                           
  5934                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
  5935  02EB  158A  244B  118A   	fcall	_getMain_Lights_Count
  5936  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  5937  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  5938  02F0  00E0               	movwf	??_Load_Main
  5939  02F1  0860               	movf	??_Load_Main,w
  5940  02F2  1683               	bsf	3,5	;RP0=1, select bank1
  5941  02F3  1303               	bcf	3,6	;RP1=0, select bank1
  5942  02F4  00EE               	movwf	(_Load^(0+128)+31)
  5943                           
  5944                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
  5945  02F5  1DCF               	btfss	_Load^(0+128),3
  5946  02F6  2B24               	goto	l703
  5947                           
  5948                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
  5949  02F7  3002               	movlw	2
  5950  02F8  026B               	subwf	(_Load^(0+128)+28),w
  5951  02F9  1803               	skipnc
  5952  02FA  2B24               	goto	l703
  5953                           
  5954                           ;OverLoad_B1.c: 79: Load.Count++;
  5955  02FB  3001               	movlw	1
  5956  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  5957  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  5958  02FE  00E0               	movwf	??_Load_Main
  5959  02FF  0860               	movf	??_Load_Main,w
  5960  0300  1683               	bsf	3,5	;RP0=1, select bank1
  5961  0301  1303               	bcf	3,6	;RP1=0, select bank1
  5962  0302  07EB               	addwf	(_Load^(0+128)+28),f
  5963                           
  5964                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
  5965  0303  086B               	movf	(_Load^(0+128)+28),w
  5966  0304  3A01               	xorlw	1
  5967  0305  1D03               	skipz
  5968  0306  2B11               	goto	l4918
  5969                           
  5970                           ;OverLoad_B1.c: 81: Load.ErrorCountValue = 2;
  5971  0307  3002               	movlw	2
  5972  0308  1283               	bcf	3,5	;RP0=0, select bank0
  5973  0309  1303               	bcf	3,6	;RP1=0, select bank0
  5974  030A  00E0               	movwf	??_Load_Main
  5975  030B  0860               	movf	??_Load_Main,w
  5976  030C  1683               	bsf	3,5	;RP0=1, select bank1
  5977  030D  1303               	bcf	3,6	;RP1=0, select bank1
  5978  030E  00ED               	movwf	(_Load^(0+128)+30)
  5979                           
  5980                           ;OverLoad_B1.c: 82: Load.JudgeValue = (20*2);
  5981  030F  3028               	movlw	40
  5982  0310  2B1A               	goto	L16
  5983  0311                     l4918:	
  5984                           ;OverLoad_B1.c: 83: } else if (Load.Count == 2) {
  5985                           
  5986  0311  086B               	movf	(_Load^(0+128)+28),w
  5987  0312  3A02               	xorlw	2
  5988  0313  1D03               	skipz
  5989  0314  2B24               	goto	l703
  5990                           
  5991                           ;OverLoad_B1.c: 84: if (Load.LightsCount == 1) {
  5992  0315  086E               	movf	(_Load^(0+128)+31),w
  5993  0316  3A01               	xorlw	1
  5994  0317  1D03               	skipz
  5995  0318  2B1D               	goto	l4924
  5996                           
  5997                           ;OverLoad_B1.c: 85: Load.JudgeValue = (int)(6*2);
  5998  0319  300C               	movlw	12
  5999  031A                     L16:	
  6000  031A  00E7               	movwf	(_Load^(0+128)+24)
  6001  031B  3000               	movlw	0
  6002  031C  2B23               	goto	L17
  6003  031D                     l4924:	
  6004                           ;OverLoad_B1.c: 86: } else {
  6005                           
  6006                           
  6007                           ;OverLoad_B1.c: 87: Load.JudgeValue = (int)(6*2) + Load.TotalLoad;
  6008  031D  0858               	movf	(_Load^(0+128)+9),w
  6009  031E  3E0C               	addlw	12
  6010  031F  00E7               	movwf	(_Load^(0+128)+24)
  6011  0320  3000               	movlw	0
  6012  0321  1803               	skipnc
  6013  0322  3001               	movlw	1
  6014  0323                     L17:	
  6015  0323  00E8               	movwf	(_Load^(0+128)+25)
  6016  0324                     l703:	
  6017                           
  6018                           ;OverLoad_B1.c: 88: }
  6019                           ;OverLoad_B1.c: 89: }
  6020                           ;OverLoad_B1.c: 90: }
  6021                           ;OverLoad_B1.c: 91: }
  6022                           ;OverLoad_B1.c: 93: if (Load.AD >= Load.JudgeValue) {
  6023  0324  0863               	movf	(_Load^(0+128)+20),w
  6024  0325  1283               	bcf	3,5	;RP0=0, select bank0
  6025  0326  1303               	bcf	3,6	;RP1=0, select bank0
  6026  0327  00E0               	movwf	??_Load_Main
  6027  0328  01E1               	clrf	??_Load_Main+1
  6028  0329  1683               	bsf	3,5	;RP0=1, select bank1
  6029  032A  1303               	bcf	3,6	;RP1=0, select bank1
  6030  032B  0868               	movf	((_Load+1)^(0+128)+24),w
  6031  032C  1283               	bcf	3,5	;RP0=0, select bank0
  6032  032D  1303               	bcf	3,6	;RP1=0, select bank0
  6033  032E  0261               	subwf	??_Load_Main+1,w
  6034  032F  1D03               	skipz
  6035  0330  2B37               	goto	u6165
  6036  0331  1683               	bsf	3,5	;RP0=1, select bank1
  6037  0332  1303               	bcf	3,6	;RP1=0, select bank1
  6038  0333  0867               	movf	(_Load^(0+128)+24),w
  6039  0334  1283               	bcf	3,5	;RP0=0, select bank0
  6040  0335  1303               	bcf	3,6	;RP1=0, select bank0
  6041  0336  0260               	subwf	??_Load_Main,w
  6042  0337                     u6165:	
  6043  0337  1C03               	skipc
  6044  0338  2B46               	goto	l4934
  6045                           
  6046                           ;OverLoad_B1.c: 94: Load.ErrorCount++;
  6047  0339  3001               	movlw	1
  6048  033A  00E0               	movwf	??_Load_Main
  6049  033B  0860               	movf	??_Load_Main,w
  6050  033C  1683               	bsf	3,5	;RP0=1, select bank1
  6051  033D  1303               	bcf	3,6	;RP1=0, select bank1
  6052  033E  07EC               	addwf	(_Load^(0+128)+29),f
  6053                           
  6054                           ;OverLoad_B1.c: 95: if (Load.ErrorCount > Load.ErrorCountValue) {
  6055  033F  086C               	movf	(_Load^(0+128)+29),w
  6056  0340  026D               	subwf	(_Load^(0+128)+30),w
  6057  0341  1803               	skipnc
  6058  0342  0008               	return
  6059                           
  6060                           ;OverLoad_B1.c: 96: Load.ErrorCount = 0;
  6061  0343  01EC               	clrf	(_Load^(0+128)+29)
  6062                           
  6063                           ;OverLoad_B1.c: 97: Load.ERROR = 1;
  6064  0344  16CF               	bsf	_Load^(0+128),5
  6065                           
  6066                           ;OverLoad_B1.c: 118: }
  6067                           ;OverLoad_B1.c: 119: } else {
  6068  0345  0008               	return
  6069  0346                     l4934:	
  6070                           
  6071                           ;OverLoad_B1.c: 120: Load.ErrorCount = 0;
  6072  0346  1683               	bsf	3,5	;RP0=1, select bank1
  6073  0347  1303               	bcf	3,6	;RP1=0, select bank1
  6074  0348  01EC               	clrf	(_Load^(0+128)+29)
  6075                           
  6076                           ;OverLoad_B1.c: 121: if (Load.Run == 1) {
  6077  0349  1DCF               	btfss	_Load^(0+128),3
  6078  034A  0008               	return
  6079                           
  6080                           ;OverLoad_B1.c: 122: if (Load.OK == 0) {
  6081  034B  1BCF               	btfsc	_Load^(0+128),7
  6082  034C  0008               	return
  6083                           
  6084                           ;OverLoad_B1.c: 123: Load.SafeCount++;
  6085  034D  3001               	movlw	1
  6086  034E  1283               	bcf	3,5	;RP0=0, select bank0
  6087  034F  1303               	bcf	3,6	;RP1=0, select bank0
  6088  0350  00E0               	movwf	??_Load_Main
  6089  0351  0860               	movf	??_Load_Main,w
  6090  0352  1683               	bsf	3,5	;RP0=1, select bank1
  6091  0353  1303               	bcf	3,6	;RP1=0, select bank1
  6092  0354  07EF               	addwf	(_Load^(0+128)+32),f
  6093                           
  6094                           ;OverLoad_B1.c: 124: if (Load.SafeCount >= 3) {
  6095  0355  3003               	movlw	3
  6096  0356  026F               	subwf	(_Load^(0+128)+32),w
  6097  0357  1C03               	skipc
  6098  0358  0008               	return
  6099                           
  6100                           ;OverLoad_B1.c: 125: Load.SafeCount = 0;
  6101  0359  01EF               	clrf	(_Load^(0+128)+32)
  6102                           
  6103                           ;OverLoad_B1.c: 126: Load.OK = 1;
  6104  035A  17CF               	bsf	_Load^(0+128),7
  6105                           
  6106                           ;OverLoad_B1.c: 127: Load.Run = 0;
  6107  035B  11CF               	bcf	_Load^(0+128),3
  6108                           
  6109                           ;OverLoad_B1.c: 128: Load.Count = 0;
  6110  035C  01EB               	clrf	(_Load^(0+128)+28)
  6111                           
  6112                           ;OverLoad_B1.c: 129: Load.TotalLoad = Load.AD;
  6113  035D  0863               	movf	(_Load^(0+128)+20),w
  6114  035E  1283               	bcf	3,5	;RP0=0, select bank0
  6115  035F  1303               	bcf	3,6	;RP1=0, select bank0
  6116  0360  00E0               	movwf	??_Load_Main
  6117  0361  0860               	movf	??_Load_Main,w
  6118  0362  1683               	bsf	3,5	;RP0=1, select bank1
  6119  0363  1303               	bcf	3,6	;RP1=0, select bank1
  6120  0364  00D8               	movwf	(_Load^(0+128)+9)
  6121                           
  6122                           ;OverLoad_B1.c: 130: Load.ErrorCountValue = 3;
  6123  0365  3003               	movlw	3
  6124  0366  1283               	bcf	3,5	;RP0=0, select bank0
  6125  0367  1303               	bcf	3,6	;RP1=0, select bank0
  6126  0368  00E0               	movwf	??_Load_Main
  6127  0369  0860               	movf	??_Load_Main,w
  6128  036A  1683               	bsf	3,5	;RP0=1, select bank1
  6129  036B  1303               	bcf	3,6	;RP1=0, select bank1
  6130  036C  00ED               	movwf	(_Load^(0+128)+30)
  6131                           
  6132                           ;OverLoad_B1.c: 154: }
  6133                           ;OverLoad_B1.c: 155: }
  6134                           ;OverLoad_B1.c: 156: }
  6135                           ;OverLoad_B1.c: 157: }
  6136                           ;OverLoad_B1.c: 158: }
  6137                           ;OverLoad_B1.c: 159: }
  6138                           ;OverLoad_B1.c: 160: } else {
  6139  036D  0008               	return
  6140  036E                     l698:	
  6141                           
  6142                           ;OverLoad_B1.c: 161: Load.ADtoGO = 1;
  6143  036E  164F               	bsf	_Load^(0+128),4
  6144                           
  6145                           ;OverLoad_B1.c: 162: }
  6146                           ;OverLoad_B1.c: 163: } else {
  6147  036F  0008               	return
  6148  0370                     l697:	
  6149                           
  6150                           ;OverLoad_B1.c: 164: if (Load.LightsON == 1 && error != 3) {
  6151  0370  1D4F               	btfss	_Load^(0+128),2
  6152  0371  2B90               	goto	l4984
  6153  0372  1283               	bcf	3,5	;RP0=0, select bank0
  6154  0373  1303               	bcf	3,6	;RP1=0, select bank0
  6155  0374  0865               	movf	Load_Main@error,w
  6156  0375  3A03               	xorlw	3
  6157  0376  1903               	skipnz
  6158  0377  2B90               	goto	l4984
  6159                           
  6160                           ;OverLoad_B1.c: 165: Load.LightsON = 0;
  6161  0378  1683               	bsf	3,5	;RP0=1, select bank1
  6162  0379  1303               	bcf	3,6	;RP1=0, select bank1
  6163  037A  114F               	bcf	_Load^(0+128),2
  6164                           
  6165                           ;OverLoad_B1.c: 167: Load.Time = 0;
  6166  037B  01D0               	clrf	(_Load^(0+128)+1)
  6167  037C  01D1               	clrf	((_Load+1)^(0+128)+1)
  6168                           
  6169                           ;OverLoad_B1.c: 168: Load.ADtoGO = 0;
  6170  037D  124F               	bcf	_Load^(0+128),4
  6171                           
  6172                           ;OverLoad_B1.c: 169: setLoad_AH_AL_Restore();
  6173  037E  118A  27E8  118A   	fcall	_setLoad_AH_AL_Restore
  6174                           
  6175                           ;OverLoad_B1.c: 170: Load.Count = 0;
  6176  0381  1683               	bsf	3,5	;RP0=1, select bank1
  6177  0382  1303               	bcf	3,6	;RP1=0, select bank1
  6178  0383  01EB               	clrf	(_Load^(0+128)+28)
  6179                           
  6180                           ;OverLoad_B1.c: 171: Load.ErrorCount = 0;
  6181  0384  01EC               	clrf	(_Load^(0+128)+29)
  6182                           
  6183                           ;OverLoad_B1.c: 172: Load.SafeCount = 0;
  6184  0385  01EF               	clrf	(_Load^(0+128)+32)
  6185                           
  6186                           ;OverLoad_B1.c: 174: Load.ADH = 0;
  6187  0386  01D4               	clrf	(_Load^(0+128)+5)
  6188  0387  01D5               	clrf	((_Load+1)^(0+128)+5)
  6189                           
  6190                           ;OverLoad_B1.c: 175: Load.ADL = 0;
  6191  0388  01D6               	clrf	(_Load^(0+128)+7)
  6192  0389  01D7               	clrf	((_Load+1)^(0+128)+7)
  6193                           
  6194                           ;OverLoad_B1.c: 176: Load.AD = 0;
  6195  038A  01E3               	clrf	(_Load^(0+128)+20)
  6196                           
  6197                           ;OverLoad_B1.c: 177: Load.JudgeValue = 0;
  6198  038B  01E7               	clrf	(_Load^(0+128)+24)
  6199  038C  01E8               	clrf	((_Load+1)^(0+128)+24)
  6200                           
  6201                           ;OverLoad_B1.c: 178: Load.LightsCount = 0;
  6202  038D  01EE               	clrf	(_Load^(0+128)+31)
  6203                           
  6204                           ;OverLoad_B1.c: 179: Load.Run = 0;
  6205  038E  11CF               	bcf	_Load^(0+128),3
  6206                           
  6207                           ;OverLoad_B1.c: 180: Load.OK = 1;
  6208  038F  17CF               	bsf	_Load^(0+128),7
  6209  0390                     l4984:	
  6210                           
  6211                           ;OverLoad_B1.c: 201: }
  6212                           ;OverLoad_B1.c: 202: if (Load.ERROR == 1) {
  6213  0390  1683               	bsf	3,5	;RP0=1, select bank1
  6214  0391  1303               	bcf	3,6	;RP1=0, select bank1
  6215  0392  1ECF               	btfss	_Load^(0+128),5
  6216  0393  0008               	return
  6217                           
  6218                           ;OverLoad_B1.c: 203: Load.ErrorTime++;
  6219  0394  3001               	movlw	1
  6220  0395  07D2               	addwf	(_Load^(0+128)+3),f
  6221  0396  1803               	skipnc
  6222  0397  0AD3               	incf	((_Load+1)^(0+128)+3),f
  6223  0398  3000               	movlw	0
  6224  0399  07D3               	addwf	((_Load+1)^(0+128)+3),f
  6225                           
  6226                           ;OverLoad_B1.c: 204: if (Load.ErrorTime >= 1000) {
  6227  039A  3003               	movlw	3
  6228  039B  0253               	subwf	((_Load+1)^(0+128)+3),w
  6229  039C  30E8               	movlw	232
  6230  039D  1903               	skipnz
  6231  039E  0252               	subwf	(_Load^(0+128)+3),w
  6232  039F  1C03               	skipc
  6233  03A0  0008               	return
  6234                           
  6235                           ;OverLoad_B1.c: 205: Load.ErrorTime = 0;
  6236  03A1  01D2               	clrf	(_Load^(0+128)+3)
  6237  03A2  01D3               	clrf	((_Load+1)^(0+128)+3)
  6238                           
  6239                           ;OverLoad_B1.c: 206: Load.ERROR = 0;
  6240  03A3  12CF               	bcf	_Load^(0+128),5
  6241                           
  6242                           ;OverLoad_B1.c: 207: }
  6243                           ;OverLoad_B1.c: 208: }
  6244                           ;OverLoad_B1.c: 209: }
  6245                           ;OverLoad_B1.c: 210: } else {
  6246  03A4  0008               	return
  6247  03A5                     l693:	
  6248                           
  6249                           ;OverLoad_B1.c: 211: if (myMain.PowerON == 1) {
  6250  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  6251  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  6252  03A7  1C20               	btfss	_myMain,0
  6253  03A8  0008               	return
  6254                           
  6255                           ;OverLoad_B1.c: 212: Load.Enable = 1;
  6256  03A9  1683               	bsf	3,5	;RP0=1, select bank1
  6257  03AA  1303               	bcf	3,6	;RP1=0, select bank1
  6258  03AB  144F               	bsf	_Load^(0+128),0
  6259  03AC  0008               	return
  6260  03AD                     __end_of_Load_Main:	
  6261                           
  6262                           	psect	text31
  6263  0BD8                     __ptext31:	
  6264 ;; *************** function _getMain_LoadOK *****************
  6265 ;; Defined at:
  6266 ;;		line 474 in file "../src/Main_B1.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;		None
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;  ok              1    6[COMMON] unsigned char 
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      unsigned char 
  6273 ;; Registers used:
  6274 ;;		wreg, status,2, pclath, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6280 ;;      Params:         0       0       0       0
  6281 ;;      Locals:         1       0       0       0
  6282 ;;      Temps:          1       0       0       0
  6283 ;;      Totals:         2       0       0       0
  6284 ;;Total ram usage:        2 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    3
  6287 ;; This function calls:
  6288 ;;		_getLightsControl_OK
  6289 ;; This function is called by:
  6290 ;;		_Load_Main
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           
  6295                           ;psect for function _getMain_LoadOK
  6296  0BD8                     _getMain_LoadOK:	
  6297                           
  6298                           ;Main_B1.c: 475: char ok = 0;
  6299                           
  6300                           ;incstack = 0
  6301                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
  6302  0BD8  01F6               	clrf	getMain_LoadOK@ok
  6303                           
  6304                           ;Main_B1.c: 478: ok = getLightsControl_OK() == 1 ? 1 : 0;
  6305  0BD9  158A  2393         	fcall	_getLightsControl_OK
  6306  0BDB  3A01               	xorlw	1
  6307  0BDC  3000               	movlw	0
  6308  0BDD  1903               	skipnz
  6309  0BDE  3001               	movlw	1
  6310  0BDF  00F5               	movwf	??_getMain_LoadOK
  6311  0BE0  0875               	movf	??_getMain_LoadOK,w
  6312  0BE1  00F6               	movwf	getMain_LoadOK@ok
  6313                           
  6314                           ;Main_B1.c: 483: return ok;
  6315  0BE2  0876               	movf	getMain_LoadOK@ok,w
  6316  0BE3  0008               	return
  6317  0BE4                     __end_of_getMain_LoadOK:	
  6318                           
  6319                           	psect	text32
  6320  0B93                     __ptext32:	
  6321 ;; *************** function _getLightsControl_OK *****************
  6322 ;; Defined at:
  6323 ;;		line 260 in file "../src/TriacRelay_B1.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;		None
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;  loadok          1    4[COMMON] unsigned char 
  6328 ;; Return value:  Size  Location     Type
  6329 ;;                  1    wreg      unsigned char 
  6330 ;; Registers used:
  6331 ;;		wreg, status,2
  6332 ;; Tracked objects:
  6333 ;;		On entry : 0/0
  6334 ;;		On exit  : 0/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6337 ;;      Params:         0       0       0       0
  6338 ;;      Locals:         1       0       0       0
  6339 ;;      Temps:          0       0       0       0
  6340 ;;      Totals:         1       0       0       0
  6341 ;;Total ram usage:        1 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; Hardware stack levels required when called:    2
  6344 ;; This function calls:
  6345 ;;		Nothing
  6346 ;; This function is called by:
  6347 ;;		_getMain_LoadOK
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           
  6352                           ;psect for function _getLightsControl_OK
  6353  0B93                     _getLightsControl_OK:	
  6354                           
  6355                           ;TriacRelay_B1.c: 261: char loadok = LightsControl.LoadOK == 1 ? 1 : 0;
  6356                           
  6357                           ;incstack = 0
  6358                           ; Regs used in _getLightsControl_OK: [wreg+status,2]
  6359  0B93  3000               	movlw	0
  6360  0B94  1283               	bcf	3,5	;RP0=0, select bank0
  6361  0B95  1303               	bcf	3,6	;RP1=0, select bank0
  6362  0B96  1939               	btfsc	_LightsControl,2
  6363  0B97  3001               	movlw	1
  6364  0B98  00F4               	movwf	getLightsControl_OK@loadok
  6365                           
  6366                           ;TriacRelay_B1.c: 262: return loadok;
  6367  0B99  0874               	movf	getLightsControl_OK@loadok,w
  6368  0B9A  0008               	return
  6369  0B9B                     __end_of_getLightsControl_OK:	
  6370                           
  6371                           	psect	text33
  6372  0C4B                     __ptext33:	
  6373 ;; *************** function _getMain_Lights_Count *****************
  6374 ;; Defined at:
  6375 ;;		line 444 in file "../src/Main_B1.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;		None
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  status1         1    3[BANK0 ] unsigned char 
  6380 ;;  status3         1    2[BANK0 ] unsigned char 
  6381 ;;  status2         1    1[BANK0 ] unsigned char 
  6382 ;;  count           1    0[BANK0 ] unsigned char 
  6383 ;; Return value:  Size  Location     Type
  6384 ;;                  1    wreg      unsigned char 
  6385 ;; Registers used:
  6386 ;;		wreg, status,2, status,0
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6392 ;;      Params:         0       0       0       0
  6393 ;;      Locals:         0       4       0       0
  6394 ;;      Temps:          1       0       0       0
  6395 ;;      Totals:         1       4       0       0
  6396 ;;Total ram usage:        5 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; Hardware stack levels required when called:    2
  6399 ;; This function calls:
  6400 ;;		Nothing
  6401 ;; This function is called by:
  6402 ;;		_Load_Main
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           
  6407                           ;psect for function _getMain_Lights_Count
  6408  0C4B                     _getMain_Lights_Count:	
  6409                           
  6410                           ;Main_B1.c: 445: char status1 = 0, status2 = 0, status3 = 0, count = 0;
  6411                           
  6412                           ;incstack = 0
  6413                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  6414  0C4B  1283               	bcf	3,5	;RP0=0, select bank0
  6415  0C4C  1303               	bcf	3,6	;RP1=0, select bank0
  6416  0C4D  01DC               	clrf	getMain_Lights_Count@status1
  6417  0C4E  01DA               	clrf	getMain_Lights_Count@status2
  6418  0C4F  01DB               	clrf	getMain_Lights_Count@status3
  6419  0C50  01D9               	clrf	getMain_Lights_Count@count
  6420                           
  6421                           ;Main_B1.c: 461: status1 = Lights1.Loop == 1 ? 1 : 0;
  6422  0C51  3000               	movlw	0
  6423  0C52  18C7               	btfsc	_Lights1+1,1
  6424  0C53  3001               	movlw	1
  6425  0C54  00DC               	movwf	getMain_Lights_Count@status1
  6426                           
  6427                           ;Main_B1.c: 470: return count = (status1 + status2 + status3);
  6428  0C55  085A               	movf	getMain_Lights_Count@status2,w
  6429  0C56  075C               	addwf	getMain_Lights_Count@status1,w
  6430  0C57  00F4               	movwf	??_getMain_Lights_Count
  6431  0C58  085B               	movf	getMain_Lights_Count@status3,w
  6432  0C59  0774               	addwf	??_getMain_Lights_Count,w
  6433  0C5A  00D9               	movwf	getMain_Lights_Count@count
  6434  0C5B  0008               	return
  6435  0C5C                     __end_of_getMain_Lights_Count:	
  6436                           
  6437                           	psect	text34
  6438  0E9B                     __ptext34:	
  6439 ;; *************** function ___lwdiv *****************
  6440 ;; Defined at:
  6441 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;  divisor         2    0[BANK0 ] unsigned int 
  6444 ;;  dividend        2    2[BANK0 ] unsigned int 
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;  quotient        2    5[BANK0 ] unsigned int 
  6447 ;;  counter         1    4[BANK0 ] unsigned char 
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  2    0[BANK0 ] unsigned int 
  6450 ;; Registers used:
  6451 ;;		wreg, status,2, status,0
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6457 ;;      Params:         0       4       0       0
  6458 ;;      Locals:         0       3       0       0
  6459 ;;      Temps:          1       0       0       0
  6460 ;;      Totals:         1       7       0       0
  6461 ;;Total ram usage:        8 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    2
  6464 ;; This function calls:
  6465 ;;		Nothing
  6466 ;; This function is called by:
  6467 ;;		_Load_Main
  6468 ;;		_getPIR_AD
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           
  6473                           ;psect for function ___lwdiv
  6474  0E9B                     ___lwdiv:	
  6475                           
  6476                           ;incstack = 0
  6477                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6478  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  6479  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  6480  0E9D  01DE               	clrf	___lwdiv@quotient
  6481  0E9E  01DF               	clrf	___lwdiv@quotient+1
  6482  0E9F  085A               	movf	___lwdiv@divisor+1,w
  6483  0EA0  0459               	iorwf	___lwdiv@divisor,w
  6484  0EA1  1903               	skipnz
  6485  0EA2  2ED4               	goto	l4686
  6486  0EA3  01DD               	clrf	___lwdiv@counter
  6487  0EA4  0ADD               	incf	___lwdiv@counter,f
  6488  0EA5                     l4674:	
  6489  0EA5  1BDA               	btfsc	___lwdiv@divisor+1,7
  6490  0EA6  2EB3               	goto	l4676
  6491  0EA7  3001               	movlw	1
  6492  0EA8                     u5695:	
  6493  0EA8  1003               	clrc
  6494  0EA9  0DD9               	rlf	___lwdiv@divisor,f
  6495  0EAA  0DDA               	rlf	___lwdiv@divisor+1,f
  6496  0EAB  3EFF               	addlw	-1
  6497  0EAC  1D03               	skipz
  6498  0EAD  2EA8               	goto	u5695
  6499  0EAE  3001               	movlw	1
  6500  0EAF  00F4               	movwf	??___lwdiv
  6501  0EB0  0874               	movf	??___lwdiv,w
  6502  0EB1  07DD               	addwf	___lwdiv@counter,f
  6503  0EB2  2EA5               	goto	l4674
  6504  0EB3                     l4676:	
  6505  0EB3  3001               	movlw	1
  6506  0EB4                     u5715:	
  6507  0EB4  1003               	clrc
  6508  0EB5  0DDE               	rlf	___lwdiv@quotient,f
  6509  0EB6  0DDF               	rlf	___lwdiv@quotient+1,f
  6510  0EB7  3EFF               	addlw	-1
  6511  0EB8  1D03               	skipz
  6512  0EB9  2EB4               	goto	u5715
  6513  0EBA  085A               	movf	___lwdiv@divisor+1,w
  6514  0EBB  025C               	subwf	___lwdiv@dividend+1,w
  6515  0EBC  1D03               	skipz
  6516  0EBD  2EC0               	goto	u5725
  6517  0EBE  0859               	movf	___lwdiv@divisor,w
  6518  0EBF  025B               	subwf	___lwdiv@dividend,w
  6519  0EC0                     u5725:	
  6520  0EC0  1C03               	skipc
  6521  0EC1  2EC9               	goto	l4682
  6522  0EC2  0859               	movf	___lwdiv@divisor,w
  6523  0EC3  02DB               	subwf	___lwdiv@dividend,f
  6524  0EC4  085A               	movf	___lwdiv@divisor+1,w
  6525  0EC5  1C03               	skipc
  6526  0EC6  03DC               	decf	___lwdiv@dividend+1,f
  6527  0EC7  02DC               	subwf	___lwdiv@dividend+1,f
  6528  0EC8  145E               	bsf	___lwdiv@quotient,0
  6529  0EC9                     l4682:	
  6530  0EC9  3001               	movlw	1
  6531  0ECA                     u5735:	
  6532  0ECA  1003               	clrc
  6533  0ECB  0CDA               	rrf	___lwdiv@divisor+1,f
  6534  0ECC  0CD9               	rrf	___lwdiv@divisor,f
  6535  0ECD  3EFF               	addlw	-1
  6536  0ECE  1D03               	skipz
  6537  0ECF  2ECA               	goto	u5735
  6538  0ED0  3001               	movlw	1
  6539  0ED1  02DD               	subwf	___lwdiv@counter,f
  6540  0ED2  1D03               	btfss	3,2
  6541  0ED3  2EB3               	goto	l4676
  6542  0ED4                     l4686:	
  6543  0ED4  085F               	movf	___lwdiv@quotient+1,w
  6544  0ED5  01DA               	clrf	?___lwdiv+1
  6545  0ED6  07DA               	addwf	?___lwdiv+1,f
  6546  0ED7  085E               	movf	___lwdiv@quotient,w
  6547  0ED8  01D9               	clrf	?___lwdiv
  6548  0ED9  07D9               	addwf	?___lwdiv,f
  6549  0EDA  0008               	return
  6550  0EDB                     __end_of___lwdiv:	
  6551                           
  6552                           	psect	text35
  6553  0B78                     __ptext35:	
  6554 ;; *************** function _Load_Initialization *****************
  6555 ;; Defined at:
  6556 ;;		line 9 in file "../src/OverLoad_B1.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;		None
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;		None
  6561 ;; Return value:  Size  Location     Type
  6562 ;;		None               void
  6563 ;; Registers used:
  6564 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6570 ;;      Params:         0       0       0       0
  6571 ;;      Locals:         0       0       0       0
  6572 ;;      Temps:          0       0       0       0
  6573 ;;      Totals:         0       0       0       0
  6574 ;;Total ram usage:        0 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    3
  6577 ;; This function calls:
  6578 ;;		_setLoad_AH_AL_Restore
  6579 ;; This function is called by:
  6580 ;;		_main
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           
  6585                           ;psect for function _Load_Initialization
  6586  0B78                     _Load_Initialization:	
  6587                           
  6588                           ;OverLoad_B1.c: 10: Load.OK = 1;
  6589                           
  6590                           ;incstack = 0
  6591                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6592  0B78  1683               	bsf	3,5	;RP0=1, select bank1
  6593  0B79  1303               	bcf	3,6	;RP1=0, select bank1
  6594  0B7A  17CF               	bsf	_Load^(0+128),7
  6595                           
  6596                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6597  0B7B  118A  27E8         	fcall	_setLoad_AH_AL_Restore
  6598  0B7D  0008               	return
  6599  0B7E                     __end_of_Load_Initialization:	
  6600                           
  6601                           	psect	text36
  6602  07E8                     __ptext36:	
  6603 ;; *************** function _setLoad_AH_AL_Restore *****************
  6604 ;; Defined at:
  6605 ;;		line 239 in file "../src/OverLoad_B1.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;		None
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;  i               1    5[COMMON] unsigned char 
  6610 ;; Return value:  Size  Location     Type
  6611 ;;		None               void
  6612 ;; Registers used:
  6613 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6619 ;;      Params:         0       0       0       0
  6620 ;;      Locals:         1       0       0       0
  6621 ;;      Temps:          1       0       0       0
  6622 ;;      Totals:         2       0       0       0
  6623 ;;Total ram usage:        2 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    2
  6626 ;; This function calls:
  6627 ;;		Nothing
  6628 ;; This function is called by:
  6629 ;;		_Load_Initialization
  6630 ;;		_Load_Main
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           
  6635                           ;psect for function _setLoad_AH_AL_Restore
  6636  07E8                     _setLoad_AH_AL_Restore:	
  6637                           
  6638                           ;OverLoad_B1.c: 240: char i;
  6639                           ;OverLoad_B1.c: 241: for (i = 0; i < 5; i++) {
  6640                           
  6641                           ;incstack = 0
  6642                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6643  07E8  01F5               	clrf	setLoad_AH_AL_Restore@i
  6644  07E9                     L18:	
  6645  07E9  3005               	movlw	5
  6646  07EA  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6647  07EB  1803               	btfsc	3,0
  6648  07EC  0008               	return
  6649                           
  6650                           ;OverLoad_B1.c: 242: Load.AH[i] = 0;
  6651  07ED  0875               	movf	setLoad_AH_AL_Restore@i,w
  6652  07EE  3ED9               	addlw	(_Load+10)& (0+255)
  6653  07EF  0084               	movwf	4
  6654  07F0  1383               	bcf	3,7	;select IRP bank1
  6655  07F1  0180               	clrf	0
  6656                           
  6657                           ;OverLoad_B1.c: 243: Load.AL[i] = 0xff;
  6658  07F2  30FF               	movlw	255
  6659  07F3  00F4               	movwf	??_setLoad_AH_AL_Restore
  6660  07F4  0875               	movf	setLoad_AH_AL_Restore@i,w
  6661  07F5  3EDE               	addlw	(_Load+15)& (0+255)
  6662  07F6  0084               	movwf	4
  6663  07F7  0874               	movf	??_setLoad_AH_AL_Restore,w
  6664  07F8  0080               	movwf	0
  6665  07F9  3001               	movlw	1
  6666  07FA  00F4               	movwf	??_setLoad_AH_AL_Restore
  6667  07FB  0874               	movf	??_setLoad_AH_AL_Restore,w
  6668  07FC  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6669  07FD  2FE9               	goto	L18
  6670  07FE                     __end_of_setLoad_AH_AL_Restore:	
  6671                           
  6672                           	psect	text37
  6673  0E22                     __ptext37:	
  6674 ;; *************** function _Lights_Main *****************
  6675 ;; Defined at:
  6676 ;;		line 54 in file "../src/TriacRelay_B1.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;		None               void
  6683 ;; Registers used:
  6684 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6690 ;;      Params:         0       0       0       0
  6691 ;;      Locals:         0       2       0       0
  6692 ;;      Temps:          0       3       0       0
  6693 ;;      Totals:         0       5       0       0
  6694 ;;Total ram usage:        5 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    6
  6697 ;; This function calls:
  6698 ;;		_Lights_Close
  6699 ;;		_Lights_Control
  6700 ;;		_getLoad_OK
  6701 ;;		_getMain_All_Error_Status
  6702 ;;		_getMain_LightsStatus
  6703 ;;		_setLights_Main
  6704 ;; This function is called by:
  6705 ;;		_main
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           
  6710                           ;psect for function _Lights_Main
  6711  0E22                     _Lights_Main:	
  6712                           
  6713                           ;TriacRelay_B1.c: 57: if (getMain_All_Error_Status(0) == 0) {
  6714                           
  6715                           ;incstack = 0
  6716                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6717  0E22  3000               	movlw	0
  6718  0E23  158A  265D  158A   	fcall	_getMain_All_Error_Status
  6719  0E26  3800               	iorlw	0
  6720  0E27  1D03               	skipz
  6721  0E28  2E4F               	goto	l1215
  6722                           
  6723                           ;TriacRelay_B1.c: 58: if (LightsControl.LoadOK == 1) {
  6724  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  6725  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  6726  0E2B  1D39               	btfss	_LightsControl,2
  6727  0E2C  2E52               	goto	l5008
  6728                           
  6729                           ;TriacRelay_B1.c: 59: LightsControl.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus()
      +                           == 0 ? 0 : LightsControl.LoadOK;
  6730  0E2D  158A  238B  158A   	fcall	_getLoad_OK
  6731  0E30  3A01               	xorlw	1
  6732  0E31  1903               	skipnz
  6733  0E32  2E46               	goto	l5004
  6734  0E33  158A  25BD  158A   	fcall	_getMain_LightsStatus
  6735  0E36  3A00               	xorlw	0
  6736  0E37  1903               	skipnz
  6737  0E38  2E46               	goto	l5004
  6738  0E39  1283               	bcf	3,5	;RP0=0, select bank0
  6739  0E3A  1303               	bcf	3,6	;RP1=0, select bank0
  6740  0E3B  0C39               	rrf	_LightsControl,w
  6741  0E3C  00E3               	movwf	??_Lights_Main
  6742  0E3D  0C63               	rrf	??_Lights_Main,w
  6743  0E3E  3901               	andlw	1
  6744  0E3F  00E4               	movwf	??_Lights_Main+1
  6745  0E40  01E5               	clrf	??_Lights_Main+2
  6746  0E41  0864               	movf	??_Lights_Main+1,w
  6747  0E42  00E6               	movwf	_Lights_Main$4394
  6748  0E43  0865               	movf	??_Lights_Main+2,w
  6749  0E44  00E7               	movwf	_Lights_Main$4394+1
  6750  0E45  2E4A               	goto	l5006
  6751  0E46                     l5004:	
  6752  0E46  1283               	bcf	3,5	;RP0=0, select bank0
  6753  0E47  1303               	bcf	3,6	;RP1=0, select bank0
  6754  0E48  01E6               	clrf	_Lights_Main$4394
  6755  0E49  01E7               	clrf	_Lights_Main$4394+1
  6756  0E4A                     l5006:	
  6757  0E4A  0866               	movf	_Lights_Main$4394,w
  6758  0E4B  1139               	bcf	_LightsControl,2
  6759  0E4C  1D03               	skipz
  6760  0E4D  1539               	bsf	_LightsControl,2
  6761                           
  6762                           ;TriacRelay_B1.c: 60: }
  6763                           ;TriacRelay_B1.c: 61: } else {
  6764  0E4E  2E52               	goto	l5008
  6765  0E4F                     l1215:	
  6766                           
  6767                           ;TriacRelay_B1.c: 62: LightsControl.LoadOK = 0;
  6768  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  6769  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  6770  0E51  1139               	bcf	_LightsControl,2
  6771  0E52                     l5008:	
  6772                           
  6773                           ;TriacRelay_B1.c: 63: }
  6774                           ;TriacRelay_B1.c: 67: setLights_Main(1);
  6775  0E52  3001               	movlw	1
  6776  0E53  158A  256B  158A   	fcall	_setLights_Main
  6777                           
  6778                           ;TriacRelay_B1.c: 68: Lights_Control(1);
  6779  0E56  3001               	movlw	1
  6780  0E57  118A  2739  158A   	fcall	_Lights_Control
  6781                           
  6782                           ;TriacRelay_B1.c: 81: Lights_Close();
  6783  0E5A  158A  2493         	fcall	_Lights_Close
  6784  0E5C  0008               	return
  6785  0E5D                     __end_of_Lights_Main:	
  6786                           
  6787                           	psect	text38
  6788  0D6B                     __ptext38:	
  6789 ;; *************** function _setLights_Main *****************
  6790 ;; Defined at:
  6791 ;;		line 93 in file "../src/TriacRelay_B1.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;  lights          1    wreg     unsigned char 
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;  lights          1    9[BANK0 ] unsigned char 
  6796 ;; Return value:  Size  Location     Type
  6797 ;;		None               void
  6798 ;; Registers used:
  6799 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6805 ;;      Params:         0       0       0       0
  6806 ;;      Locals:         0       1       0       0
  6807 ;;      Temps:          0       0       0       0
  6808 ;;      Totals:         0       1       0       0
  6809 ;;Total ram usage:        1 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    5
  6812 ;; This function calls:
  6813 ;;		_LightsPointSelect
  6814 ;;		_setLights
  6815 ;; This function is called by:
  6816 ;;		_Lights_Main
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           
  6821                           ;psect for function _setLights_Main
  6822  0D6B                     _setLights_Main:	
  6823                           
  6824                           ;incstack = 0
  6825                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6826                           ;setLights_Main@lights stored from wreg
  6827  0D6B  1283               	bcf	3,5	;RP0=0, select bank0
  6828  0D6C  1303               	bcf	3,6	;RP1=0, select bank0
  6829  0D6D  00E2               	movwf	setLights_Main@lights
  6830                           
  6831                           ;TriacRelay_B1.c: 94: LightsPointSelect(lights);
  6832  0D6E  0862               	movf	setLights_Main@lights,w
  6833  0D6F  158A  23AB  158A   	fcall	_LightsPointSelect
  6834                           
  6835                           ;TriacRelay_B1.c: 95: if (Lights->GO == 0) {
  6836  0D72  0878               	movf	_Lights,w
  6837  0D73  0084               	movwf	4
  6838  0D74  1383               	bcf	3,7	;select IRP bank0
  6839  0D75  1880               	btfsc	0,1
  6840  0D76  0008               	return
  6841                           
  6842                           ;TriacRelay_B1.c: 96: if (Lights->Trigger == 1) {
  6843  0D77  0878               	movf	_Lights,w
  6844  0D78  0084               	movwf	4
  6845  0D79  1D80               	btfss	0,3
  6846  0D7A  0008               	return
  6847                           
  6848                           ;TriacRelay_B1.c: 97: if (LightsControl.LoadOK == 0) {
  6849  0D7B  1283               	bcf	3,5	;RP0=0, select bank0
  6850  0D7C  1303               	bcf	3,6	;RP1=0, select bank0
  6851  0D7D  1939               	btfsc	_LightsControl,2
  6852  0D7E  0008               	return
  6853                           
  6854                           ;TriacRelay_B1.c: 98: Lights->Trigger = 0;
  6855  0D7F  0878               	movf	_Lights,w
  6856  0D80  0084               	movwf	4
  6857  0D81  1180               	bcf	0,3
  6858                           
  6859                           ;TriacRelay_B1.c: 100: if (Lights->Switch == 1) {
  6860  0D82  0878               	movf	_Lights,w
  6861  0D83  0084               	movwf	4
  6862  0D84  1E00               	btfss	0,4
  6863  0D85  2D8C               	goto	l4624
  6864                           
  6865                           ;TriacRelay_B1.c: 101: setLights(lights, 1);
  6866  0D86  01DF               	clrf	setLights@status
  6867  0D87  0ADF               	incf	setLights@status,f
  6868  0D88  0862               	movf	setLights_Main@lights,w
  6869  0D89  158A  2738         	fcall	_setLights
  6870                           
  6871                           ;TriacRelay_B1.c: 102: } else {
  6872  0D8B  0008               	return
  6873  0D8C                     l4624:	
  6874                           
  6875                           ;TriacRelay_B1.c: 103: setLights(lights, 0);
  6876  0D8C  1283               	bcf	3,5	;RP0=0, select bank0
  6877  0D8D  1303               	bcf	3,6	;RP1=0, select bank0
  6878  0D8E  01DF               	clrf	setLights@status
  6879  0D8F  0862               	movf	setLights_Main@lights,w
  6880  0D90  158A  2738         	fcall	_setLights
  6881  0D92  0008               	return
  6882  0D93                     __end_of_setLights_Main:	
  6883                           
  6884                           	psect	text39
  6885  0F38                     __ptext39:	
  6886 ;; *************** function _setLights *****************
  6887 ;; Defined at:
  6888 ;;		line 111 in file "../src/TriacRelay_B1.c"
  6889 ;; Parameters:    Size  Location     Type
  6890 ;;  lights          1    wreg     unsigned char 
  6891 ;;  status          1    6[BANK0 ] unsigned char 
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;  lights          1    8[BANK0 ] unsigned char 
  6894 ;; Return value:  Size  Location     Type
  6895 ;;		None               void
  6896 ;; Registers used:
  6897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6903 ;;      Params:         0       1       0       0
  6904 ;;      Locals:         0       1       0       0
  6905 ;;      Temps:          0       1       0       0
  6906 ;;      Totals:         0       3       0       0
  6907 ;;Total ram usage:        3 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    4
  6910 ;; This function calls:
  6911 ;;		_LightsPointSelect
  6912 ;;		_getMain_All_Error_Status
  6913 ;;		_setLights_Line
  6914 ;; This function is called by:
  6915 ;;		_setLights_Main
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           
  6920                           ;psect for function _setLights
  6921  0F38                     _setLights:	
  6922                           
  6923                           ;incstack = 0
  6924                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6925                           ;setLights@lights stored from wreg
  6926  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  6927  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  6928  0F3A  00E1               	movwf	setLights@lights
  6929                           
  6930                           ;TriacRelay_B1.c: 113: LightsPointSelect(lights);
  6931  0F3B  0861               	movf	setLights@lights,w
  6932  0F3C  158A  23AB  158A   	fcall	_LightsPointSelect
  6933                           
  6934                           ;TriacRelay_B1.c: 116: LightsControl.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
  6935  0F3F  3000               	movlw	0
  6936  0F40  158A  265D  158A   	fcall	_getMain_All_Error_Status
  6937  0F43  3A00               	xorlw	0
  6938  0F44  3000               	movlw	0
  6939  0F45  1903               	skipnz
  6940  0F46  3001               	movlw	1
  6941  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  6942  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  6943  0F49  00E0               	movwf	??_setLights
  6944  0F4A  0DE0               	rlf	??_setLights,f
  6945  0F4B  0DE0               	rlf	??_setLights,f
  6946  0F4C  0839               	movf	_LightsControl,w
  6947  0F4D  0660               	xorwf	??_setLights,w
  6948  0F4E  39FB               	andlw	-5
  6949  0F4F  0660               	xorwf	??_setLights,w
  6950  0F50  00B9               	movwf	_LightsControl
  6951                           
  6952                           ;TriacRelay_B1.c: 120: Lights->GO = 1;
  6953  0F51  0878               	movf	_Lights,w
  6954  0F52  0084               	movwf	4
  6955  0F53  1383               	bcf	3,7	;select IRP bank0
  6956  0F54  1480               	bsf	0,1
  6957                           
  6958                           ;TriacRelay_B1.c: 121: if (status == 1) {
  6959  0F55  085F               	movf	setLights@status,w
  6960  0F56  3A01               	xorlw	1
  6961  0F57  1D03               	skipz
  6962  0F58  2F76               	goto	l4408
  6963                           
  6964                           ;TriacRelay_B1.c: 122: if (Lights->Status == 0) {
  6965  0F59  0878               	movf	_Lights,w
  6966  0F5A  0084               	movwf	4
  6967  0F5B  1900               	btfsc	0,2
  6968  0F5C  2F91               	goto	l4412
  6969                           
  6970                           ;TriacRelay_B1.c: 123: Lights->Status = 1;
  6971  0F5D  0878               	movf	_Lights,w
  6972  0F5E  0084               	movwf	4
  6973  0F5F  1500               	bsf	0,2
  6974                           
  6975                           ;TriacRelay_B1.c: 124: Lights->Loop = 1;
  6976  0F60  0A78               	incf	_Lights,w
  6977  0F61  0084               	movwf	4
  6978  0F62  1480               	bsf	0,1
  6979                           
  6980                           ;TriacRelay_B1.c: 125: Lights->RelayValue = 10;
  6981  0F63  300A               	movlw	10
  6982  0F64  00E0               	movwf	??_setLights
  6983  0F65  0878               	movf	_Lights,w
  6984  0F66  3E06               	addlw	6
  6985  0F67  0084               	movwf	4
  6986  0F68  0860               	movf	??_setLights,w
  6987  0F69  0080               	movwf	0
  6988                           
  6989                           ;TriacRelay_B1.c: 126: Lights->TriacValue = 13;
  6990  0F6A  300D               	movlw	13
  6991  0F6B  00E0               	movwf	??_setLights
  6992  0F6C  0878               	movf	_Lights,w
  6993  0F6D  3E04               	addlw	4
  6994  0F6E  0084               	movwf	4
  6995  0F6F  0860               	movf	??_setLights,w
  6996  0F70  0080               	movwf	0
  6997                           
  6998                           ;TriacRelay_B1.c: 127: setLights_Line(lights);
  6999  0F71  0861               	movf	setLights@lights,w
  7000  0F72  158A  23CC  158A   	fcall	_setLights_Line
  7001                           
  7002                           ;TriacRelay_B1.c: 128: }
  7003                           ;TriacRelay_B1.c: 129: } else {
  7004  0F75  2F91               	goto	l4412
  7005  0F76                     l4408:	
  7006                           
  7007                           ;TriacRelay_B1.c: 130: if (Lights->Status == 1) {
  7008  0F76  0878               	movf	_Lights,w
  7009  0F77  0084               	movwf	4
  7010  0F78  1383               	bcf	3,7	;select IRP bank0
  7011  0F79  1D00               	btfss	0,2
  7012  0F7A  2F91               	goto	l4412
  7013                           
  7014                           ;TriacRelay_B1.c: 131: Lights->Status = 0;
  7015  0F7B  0878               	movf	_Lights,w
  7016  0F7C  0084               	movwf	4
  7017  0F7D  1100               	bcf	0,2
  7018                           
  7019                           ;TriacRelay_B1.c: 132: Lights->Loop = 0;
  7020  0F7E  0A78               	incf	_Lights,w
  7021  0F7F  0084               	movwf	4
  7022  0F80  1080               	bcf	0,1
  7023                           
  7024                           ;TriacRelay_B1.c: 133: Lights->RelayValue = 4;
  7025  0F81  3004               	movlw	4
  7026  0F82  1283               	bcf	3,5	;RP0=0, select bank0
  7027  0F83  1303               	bcf	3,6	;RP1=0, select bank0
  7028  0F84  00E0               	movwf	??_setLights
  7029  0F85  0878               	movf	_Lights,w
  7030  0F86  3E06               	addlw	6
  7031  0F87  0084               	movwf	4
  7032  0F88  0860               	movf	??_setLights,w
  7033  0F89  0080               	movwf	0
  7034                           
  7035                           ;TriacRelay_B1.c: 134: Lights->TriacValue = 7;
  7036  0F8A  3007               	movlw	7
  7037  0F8B  00E0               	movwf	??_setLights
  7038  0F8C  0878               	movf	_Lights,w
  7039  0F8D  3E04               	addlw	4
  7040  0F8E  0084               	movwf	4
  7041  0F8F  0860               	movf	??_setLights,w
  7042  0F90  0080               	movwf	0
  7043  0F91                     l4412:	
  7044                           
  7045                           ;TriacRelay_B1.c: 135: }
  7046                           ;TriacRelay_B1.c: 136: }
  7047                           ;TriacRelay_B1.c: 138: if (lights == 1) {
  7048  0F91  1283               	bcf	3,5	;RP0=0, select bank0
  7049  0F92  1303               	bcf	3,6	;RP1=0, select bank0
  7050  0F93  0861               	movf	setLights@lights,w
  7051  0F94  3A01               	xorlw	1
  7052  0F95  1D03               	skipz
  7053  0F96  0008               	return
  7054                           
  7055                           ;TriacRelay_B1.c: 139: RB2 = 1;
  7056  0F97  1506               	bsf	6,2	;volatile
  7057  0F98  0008               	return
  7058  0F99                     __end_of_setLights:	
  7059                           
  7060                           	psect	text40
  7061  0BCC                     __ptext40:	
  7062 ;; *************** function _setLights_Line *****************
  7063 ;; Defined at:
  7064 ;;		line 221 in file "../src/TriacRelay_B1.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;  lights          1    wreg     unsigned char 
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;  lights          1    6[COMMON] unsigned char 
  7069 ;; Return value:  Size  Location     Type
  7070 ;;		None               void
  7071 ;; Registers used:
  7072 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7073 ;; Tracked objects:
  7074 ;;		On entry : 0/0
  7075 ;;		On exit  : 0/0
  7076 ;;		Unchanged: 0/0
  7077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7078 ;;      Params:         0       0       0       0
  7079 ;;      Locals:         1       0       0       0
  7080 ;;      Temps:          0       0       0       0
  7081 ;;      Totals:         1       0       0       0
  7082 ;;Total ram usage:        1 bytes
  7083 ;; Hardware stack levels used:    1
  7084 ;; Hardware stack levels required when called:    3
  7085 ;; This function calls:
  7086 ;;		_LightsPointSelect
  7087 ;; This function is called by:
  7088 ;;		_setLights
  7089 ;; This function uses a non-reentrant model
  7090 ;;
  7091                           
  7092                           
  7093                           ;psect for function _setLights_Line
  7094  0BCC                     _setLights_Line:	
  7095                           
  7096                           ;incstack = 0
  7097                           ; Regs used in _setLights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7098                           ;setLights_Line@lights stored from wreg
  7099  0BCC  00F6               	movwf	setLights_Line@lights
  7100                           
  7101                           ;TriacRelay_B1.c: 223: Lights1.Line = 0;
  7102  0BCD  1283               	bcf	3,5	;RP0=0, select bank0
  7103  0BCE  1303               	bcf	3,6	;RP1=0, select bank0
  7104  0BCF  1047               	bcf	_Lights1+1,0
  7105                           
  7106                           ;TriacRelay_B1.c: 231: LightsPointSelect(lights);
  7107  0BD0  0876               	movf	setLights_Line@lights,w
  7108  0BD1  158A  23AB         	fcall	_LightsPointSelect
  7109                           
  7110                           ;TriacRelay_B1.c: 232: Lights->Line = 1;
  7111  0BD3  0A78               	incf	_Lights,w
  7112  0BD4  0084               	movwf	4
  7113  0BD5  1383               	bcf	3,7	;select IRP bank0
  7114  0BD6  1400               	bsf	0,0
  7115  0BD7  0008               	return
  7116  0BD8                     __end_of_setLights_Line:	
  7117                           
  7118                           	psect	text41
  7119  0B8B                     __ptext41:	
  7120 ;; *************** function _getLoad_OK *****************
  7121 ;; Defined at:
  7122 ;;		line 219 in file "../src/OverLoad_B1.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;		None
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  ok              1    4[COMMON] unsigned char 
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      unsigned char 
  7129 ;; Registers used:
  7130 ;;		wreg, status,2
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7136 ;;      Params:         0       0       0       0
  7137 ;;      Locals:         1       0       0       0
  7138 ;;      Temps:          0       0       0       0
  7139 ;;      Totals:         1       0       0       0
  7140 ;;Total ram usage:        1 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    2
  7143 ;; This function calls:
  7144 ;;		Nothing
  7145 ;; This function is called by:
  7146 ;;		_Lights_Main
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           
  7151                           ;psect for function _getLoad_OK
  7152  0B8B                     _getLoad_OK:	
  7153                           
  7154                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
  7155                           
  7156                           ;incstack = 0
  7157                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7158  0B8B  3000               	movlw	0
  7159  0B8C  1683               	bsf	3,5	;RP0=1, select bank1
  7160  0B8D  1303               	bcf	3,6	;RP1=0, select bank1
  7161  0B8E  1BCF               	btfsc	_Load^(0+128),7
  7162  0B8F  3001               	movlw	1
  7163  0B90  00F4               	movwf	getLoad_OK@ok
  7164                           
  7165                           ;OverLoad_B1.c: 221: return ok;
  7166  0B91  0874               	movf	getLoad_OK@ok,w
  7167  0B92  0008               	return
  7168  0B93                     __end_of_getLoad_OK:	
  7169                           
  7170                           	psect	text42
  7171  0739                     __ptext42:	
  7172 ;; *************** function _Lights_Control *****************
  7173 ;; Defined at:
  7174 ;;		line 155 in file "../src/TriacRelay_B1.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;  lights          1    wreg     unsigned char 
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;  lights          1    4[BANK0 ] unsigned char 
  7179 ;; Return value:  Size  Location     Type
  7180 ;;		None               void
  7181 ;; Registers used:
  7182 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7183 ;; Tracked objects:
  7184 ;;		On entry : 0/0
  7185 ;;		On exit  : 0/0
  7186 ;;		Unchanged: 0/0
  7187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7188 ;;      Params:         0       0       0       0
  7189 ;;      Locals:         0       3       0       0
  7190 ;;      Temps:          0       2       0       0
  7191 ;;      Totals:         0       5       0       0
  7192 ;;Total ram usage:        5 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:    3
  7195 ;; This function calls:
  7196 ;;		_LightsPointSelect
  7197 ;; This function is called by:
  7198 ;;		_Lights_Main
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           
  7203                           ;psect for function _Lights_Control
  7204  0739                     _Lights_Control:	
  7205                           
  7206                           ;incstack = 0
  7207                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7208                           ;Lights_Control@lights stored from wreg
  7209  0739  1283               	bcf	3,5	;RP0=0, select bank0
  7210  073A  1303               	bcf	3,6	;RP1=0, select bank0
  7211  073B  00DD               	movwf	Lights_Control@lights
  7212                           
  7213                           ;TriacRelay_B1.c: 156: LightsPointSelect(lights);
  7214  073C  085D               	movf	Lights_Control@lights,w
  7215  073D  158A  23AB  118A   	fcall	_LightsPointSelect
  7216                           
  7217                           ;TriacRelay_B1.c: 157: if (Lights->GO == 1) {
  7218  0740  0878               	movf	_Lights,w
  7219  0741  0084               	movwf	4
  7220  0742  1383               	bcf	3,7	;select IRP bank0
  7221  0743  1C80               	btfss	0,1
  7222  0744  0008               	return
  7223                           
  7224                           ;TriacRelay_B1.c: 158: Lights->Time++;
  7225  0745  3001               	movlw	1
  7226  0746  1283               	bcf	3,5	;RP0=0, select bank0
  7227  0747  1303               	bcf	3,6	;RP1=0, select bank0
  7228  0748  00D9               	movwf	??_Lights_Control
  7229  0749  0878               	movf	_Lights,w
  7230  074A  3E02               	addlw	2
  7231  074B  0084               	movwf	4
  7232  074C  0859               	movf	??_Lights_Control,w
  7233  074D  0780               	addwf	0,f
  7234                           
  7235                           ;TriacRelay_B1.c: 159: if (Lights->Time >= Lights->RelayValue && Lights->RelaySet == 0) 
      +                          {
  7236  074E  0878               	movf	_Lights,w
  7237  074F  3E06               	addlw	6
  7238  0750  0084               	movwf	4
  7239  0751  0800               	movf	0,w
  7240  0752  00D9               	movwf	??_Lights_Control
  7241  0753  0878               	movf	_Lights,w
  7242  0754  3E02               	addlw	2
  7243  0755  0084               	movwf	4
  7244  0756  0800               	movf	0,w
  7245  0757  00DA               	movwf	??_Lights_Control+1
  7246  0758  0859               	movf	??_Lights_Control,w
  7247  0759  025A               	subwf	??_Lights_Control+1,w
  7248  075A  1C03               	skipc
  7249  075B  2F73               	goto	l4642
  7250  075C  0878               	movf	_Lights,w
  7251  075D  0084               	movwf	4
  7252  075E  1B80               	btfsc	0,7
  7253  075F  2F73               	goto	l4642
  7254                           
  7255                           ;TriacRelay_B1.c: 160: Lights->RelaySet = 1;
  7256  0760  0878               	movf	_Lights,w
  7257  0761  0084               	movwf	4
  7258  0762  1780               	bsf	0,7
  7259                           
  7260                           ;TriacRelay_B1.c: 162: if (lights == 1) {
  7261  0763  085D               	movf	Lights_Control@lights,w
  7262  0764  3A01               	xorlw	1
  7263  0765  1D03               	skipz
  7264  0766  0008               	return
  7265                           
  7266                           ;TriacRelay_B1.c: 163: RA4 = Lights->Status == 1 ? 1 : 0;
  7267  0767  0878               	movf	_Lights,w
  7268  0768  0084               	movwf	4
  7269  0769  1D00               	btfss	0,2
  7270  076A  2F6F               	goto	u5620
  7271  076B  1283               	bcf	3,5	;RP0=0, select bank0
  7272  076C  1303               	bcf	3,6	;RP1=0, select bank0
  7273  076D  1605               	bsf	5,4	;volatile
  7274  076E  0008               	return
  7275  076F                     u5620:	
  7276  076F  1283               	bcf	3,5	;RP0=0, select bank0
  7277  0770  1303               	bcf	3,6	;RP1=0, select bank0
  7278  0771  1205               	bcf	5,4	;volatile
  7279                           
  7280                           ;TriacRelay_B1.c: 164: }
  7281                           ;TriacRelay_B1.c: 177: } else if (Lights->Time >= Lights->TriacValue) {
  7282  0772  0008               	return
  7283  0773                     l4642:	
  7284  0773  0878               	movf	_Lights,w
  7285  0774  3E04               	addlw	4
  7286  0775  0084               	movwf	4
  7287  0776  1383               	bcf	3,7	;select IRP bank0
  7288  0777  0800               	movf	0,w
  7289  0778  00D9               	movwf	??_Lights_Control
  7290  0779  0878               	movf	_Lights,w
  7291  077A  3E02               	addlw	2
  7292  077B  0084               	movwf	4
  7293  077C  0800               	movf	0,w
  7294  077D  00DA               	movwf	??_Lights_Control+1
  7295  077E  0859               	movf	??_Lights_Control,w
  7296  077F  025A               	subwf	??_Lights_Control+1,w
  7297  0780  1C03               	skipc
  7298  0781  0008               	return
  7299                           
  7300                           ;TriacRelay_B1.c: 178: Lights->Time = 0;
  7301  0782  0878               	movf	_Lights,w
  7302  0783  3E02               	addlw	2
  7303  0784  0084               	movwf	4
  7304  0785  0180               	clrf	0
  7305                           
  7306                           ;TriacRelay_B1.c: 179: Lights->GO = 0;
  7307  0786  0878               	movf	_Lights,w
  7308  0787  0084               	movwf	4
  7309  0788  1080               	bcf	0,1
  7310                           
  7311                           ;TriacRelay_B1.c: 180: Lights->RelaySet = 0;
  7312  0789  0878               	movf	_Lights,w
  7313  078A  0084               	movwf	4
  7314  078B  1380               	bcf	0,7
  7315                           
  7316                           ;TriacRelay_B1.c: 183: LightsControl.Detect = Lights->Status == 0 ? 1 : LightsControl.De
      +                          tect;
  7317  078C  0878               	movf	_Lights,w
  7318  078D  0084               	movwf	4
  7319  078E  1D00               	btfss	0,2
  7320  078F  2F98               	goto	l4654
  7321  0790  0839               	movf	_LightsControl,w
  7322  0791  3901               	andlw	1
  7323  0792  00D9               	movwf	??_Lights_Control
  7324  0793  01DA               	clrf	??_Lights_Control+1
  7325  0794  0859               	movf	??_Lights_Control,w
  7326  0795  00DB               	movwf	_Lights_Control$4403
  7327  0796  085A               	movf	??_Lights_Control+1,w
  7328  0797  2F9B               	goto	L19
  7329  0798                     l4654:	
  7330  0798  3001               	movlw	1
  7331  0799  00DB               	movwf	_Lights_Control$4403
  7332  079A  3000               	movlw	0
  7333  079B                     L19:	
  7334  079B  00DC               	movwf	_Lights_Control$4403+1
  7335  079C  085B               	movf	_Lights_Control$4403,w
  7336  079D  1039               	bcf	_LightsControl,0
  7337  079E  1D03               	skipz
  7338  079F  1439               	bsf	_LightsControl,0
  7339                           
  7340                           ;TriacRelay_B1.c: 187: if (lights == 1) {
  7341  07A0  085D               	movf	Lights_Control@lights,w
  7342  07A1  3A01               	xorlw	1
  7343  07A2  1D03               	skipz
  7344  07A3  0008               	return
  7345                           
  7346                           ;TriacRelay_B1.c: 188: RB2 = 0;
  7347  07A4  1106               	bcf	6,2	;volatile
  7348  07A5  0008               	return
  7349  07A6                     __end_of_Lights_Control:	
  7350                           
  7351                           	psect	text43
  7352  0C93                     __ptext43:	
  7353 ;; *************** function _Lights_Close *****************
  7354 ;; Defined at:
  7355 ;;		line 85 in file "../src/TriacRelay_B1.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;		None
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;		None
  7360 ;; Return value:  Size  Location     Type
  7361 ;;		None               void
  7362 ;; Registers used:
  7363 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7369 ;;      Params:         0       0       0       0
  7370 ;;      Locals:         0       0       0       0
  7371 ;;      Temps:          0       1       0       0
  7372 ;;      Totals:         0       1       0       0
  7373 ;;Total ram usage:        1 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    5
  7376 ;; This function calls:
  7377 ;;		_getMain_LightsStatus
  7378 ;; This function is called by:
  7379 ;;		_Lights_Main
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           
  7384                           ;psect for function _Lights_Close
  7385  0C93                     _Lights_Close:	
  7386                           
  7387                           ;TriacRelay_B1.c: 86: if (LightsControl.Detect == 1) {
  7388                           
  7389                           ;incstack = 0
  7390                           ; Regs used in _Lights_Close: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7391  0C93  1283               	bcf	3,5	;RP0=0, select bank0
  7392  0C94  1303               	bcf	3,6	;RP1=0, select bank0
  7393  0C95  1C39               	btfss	_LightsControl,0
  7394  0C96  0008               	return
  7395                           
  7396                           ;TriacRelay_B1.c: 87: LightsControl.Detect = 0;
  7397  0C97  1039               	bcf	_LightsControl,0
  7398                           
  7399                           ;TriacRelay_B1.c: 88: LightsControl.LoadGO = getMain_LightsStatus() == 0 ? 0 : 1;
  7400  0C98  158A  25BD         	fcall	_getMain_LightsStatus
  7401  0C9A  3800               	iorlw	0
  7402  0C9B  3000               	movlw	0
  7403  0C9C  1D03               	skipz
  7404  0C9D  3001               	movlw	1
  7405  0C9E  1283               	bcf	3,5	;RP0=0, select bank0
  7406  0C9F  1303               	bcf	3,6	;RP1=0, select bank0
  7407  0CA0  00DF               	movwf	??_Lights_Close
  7408  0CA1  0DDF               	rlf	??_Lights_Close,f
  7409  0CA2  0839               	movf	_LightsControl,w
  7410  0CA3  065F               	xorwf	??_Lights_Close,w
  7411  0CA4  39FD               	andlw	-3
  7412  0CA5  065F               	xorwf	??_Lights_Close,w
  7413  0CA6  00B9               	movwf	_LightsControl
  7414  0CA7  0008               	return
  7415  0CA8                     __end_of_Lights_Close:	
  7416                           
  7417                           	psect	text44
  7418  0DBD                     __ptext44:	
  7419 ;; *************** function _getMain_LightsStatus *****************
  7420 ;; Defined at:
  7421 ;;		line 374 in file "../src/Main_B1.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;		None
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  i               2    3[BANK0 ] int 
  7426 ;;  status          1    5[BANK0 ] unsigned char 
  7427 ;;  count           1    2[BANK0 ] unsigned char 
  7428 ;; Return value:  Size  Location     Type
  7429 ;;                  1    wreg      unsigned char 
  7430 ;; Registers used:
  7431 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7437 ;;      Params:         0       0       0       0
  7438 ;;      Locals:         0       4       0       0
  7439 ;;      Temps:          1       0       0       0
  7440 ;;      Totals:         1       4       0       0
  7441 ;;Total ram usage:        5 bytes
  7442 ;; Hardware stack levels used:    1
  7443 ;; Hardware stack levels required when called:    4
  7444 ;; This function calls:
  7445 ;;		_getLights_Status
  7446 ;; This function is called by:
  7447 ;;		_Load_Main
  7448 ;;		_setTemp_Main
  7449 ;;		_Lights_Main
  7450 ;;		_Lights_Close
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           
  7455                           ;psect for function _getMain_LightsStatus
  7456  0DBD                     _getMain_LightsStatus:	
  7457                           
  7458                           ;Main_B1.c: 375: char status = 0, count = 0;
  7459                           
  7460                           ;incstack = 0
  7461                           ; Regs used in _getMain_LightsStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7462  0DBD  1283               	bcf	3,5	;RP0=0, select bank0
  7463  0DBE  1303               	bcf	3,6	;RP1=0, select bank0
  7464  0DBF  01DE               	clrf	getMain_LightsStatus@status
  7465  0DC0  01DB               	clrf	getMain_LightsStatus@count
  7466                           
  7467                           ;Main_B1.c: 378: count = 1;
  7468  0DC1  01DB               	clrf	getMain_LightsStatus@count
  7469  0DC2  0ADB               	incf	getMain_LightsStatus@count,f
  7470                           
  7471                           ;Main_B1.c: 389: for (int i = 0; i < count; i++) {
  7472  0DC3  01DC               	clrf	getMain_LightsStatus@i
  7473  0DC4  01DD               	clrf	getMain_LightsStatus@i+1
  7474  0DC5                     l4390:	
  7475  0DC5  085D               	movf	getMain_LightsStatus@i+1,w
  7476  0DC6  3A80               	xorlw	128
  7477  0DC7  00F6               	movwf	??_getMain_LightsStatus
  7478  0DC8  3080               	movlw	128
  7479  0DC9  0276               	subwf	??_getMain_LightsStatus,w
  7480  0DCA  1D03               	skipz
  7481  0DCB  2DCE               	goto	u5085
  7482  0DCC  085B               	movf	getMain_LightsStatus@count,w
  7483  0DCD  025C               	subwf	getMain_LightsStatus@i,w
  7484  0DCE                     u5085:	
  7485  0DCE  1803               	btfsc	3,0
  7486  0DCF  2DEA               	goto	l4392
  7487                           
  7488                           ;Main_B1.c: 390: if (status == 0) {
  7489  0DD0  1283               	bcf	3,5	;RP0=0, select bank0
  7490  0DD1  1303               	bcf	3,6	;RP1=0, select bank0
  7491  0DD2  08DE               	movf	getMain_LightsStatus@status,f
  7492  0DD3  1D03               	skipz
  7493  0DD4  2DE3               	goto	l4388
  7494                           
  7495                           ;Main_B1.c: 392: status = getLights_Status(i + 1) == 1 ? 1 : 0;
  7496  0DD5  085C               	movf	getMain_LightsStatus@i,w
  7497  0DD6  3E01               	addlw	1
  7498  0DD7  158A  243A  158A   	fcall	_getLights_Status
  7499  0DDA  3A01               	xorlw	1
  7500  0DDB  3000               	movlw	0
  7501  0DDC  1903               	skipnz
  7502  0DDD  3001               	movlw	1
  7503  0DDE  00F6               	movwf	??_getMain_LightsStatus
  7504  0DDF  0876               	movf	??_getMain_LightsStatus,w
  7505  0DE0  1283               	bcf	3,5	;RP0=0, select bank0
  7506  0DE1  1303               	bcf	3,6	;RP1=0, select bank0
  7507  0DE2  00DE               	movwf	getMain_LightsStatus@status
  7508  0DE3                     l4388:	
  7509  0DE3  3001               	movlw	1
  7510  0DE4  07DC               	addwf	getMain_LightsStatus@i,f
  7511  0DE5  1803               	skipnc
  7512  0DE6  0ADD               	incf	getMain_LightsStatus@i+1,f
  7513  0DE7  3000               	movlw	0
  7514  0DE8  07DD               	addwf	getMain_LightsStatus@i+1,f
  7515  0DE9  2DC5               	goto	l4390
  7516  0DEA                     l4392:	
  7517                           
  7518                           ;Main_B1.c: 397: }
  7519                           ;Main_B1.c: 398: }
  7520                           ;Main_B1.c: 399: return status;
  7521  0DEA  1283               	bcf	3,5	;RP0=0, select bank0
  7522  0DEB  1303               	bcf	3,6	;RP1=0, select bank0
  7523  0DEC  085E               	movf	getMain_LightsStatus@status,w
  7524  0DED  0008               	return
  7525  0DEE                     __end_of_getMain_LightsStatus:	
  7526                           
  7527                           	psect	text45
  7528  0B66                     __ptext45:	
  7529 ;; *************** function _Lights_Initialization *****************
  7530 ;; Defined at:
  7531 ;;		line 34 in file "../src/TriacRelay_B1.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;		None
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;		None
  7536 ;; Return value:  Size  Location     Type
  7537 ;;		None               void
  7538 ;; Registers used:
  7539 ;;		wreg, status,2, status,0, pclath, cstack
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7545 ;;      Params:         0       0       0       0
  7546 ;;      Locals:         0       0       0       0
  7547 ;;      Temps:          0       0       0       0
  7548 ;;      Totals:         0       0       0       0
  7549 ;;Total ram usage:        0 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; Hardware stack levels required when called:    4
  7552 ;; This function calls:
  7553 ;;		_setLights_Initialization
  7554 ;; This function is called by:
  7555 ;;		_main
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           
  7560                           ;psect for function _Lights_Initialization
  7561  0B66                     _Lights_Initialization:	
  7562                           
  7563                           ;TriacRelay_B1.c: 36: setLights_Initialization(1);
  7564                           
  7565                           ;incstack = 0
  7566                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7567  0B66  3001               	movlw	1
  7568  0B67  158A  236E         	fcall	_setLights_Initialization
  7569  0B69  0008               	return
  7570  0B6A                     __end_of_Lights_Initialization:	
  7571                           
  7572                           	psect	text46
  7573  0B6E                     __ptext46:	
  7574 ;; *************** function _setLights_Initialization *****************
  7575 ;; Defined at:
  7576 ;;		line 49 in file "../src/TriacRelay_B1.c"
  7577 ;; Parameters:    Size  Location     Type
  7578 ;;  lights          1    wreg     unsigned char 
  7579 ;; Auto vars:     Size  Location     Type
  7580 ;;  lights          1    6[COMMON] unsigned char 
  7581 ;; Return value:  Size  Location     Type
  7582 ;;		None               void
  7583 ;; Registers used:
  7584 ;;		wreg, status,2, status,0, pclath, cstack
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7590 ;;      Params:         0       0       0       0
  7591 ;;      Locals:         1       0       0       0
  7592 ;;      Temps:          0       0       0       0
  7593 ;;      Totals:         1       0       0       0
  7594 ;;Total ram usage:        1 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; Hardware stack levels required when called:    3
  7597 ;; This function calls:
  7598 ;;		_LightsPointSelect
  7599 ;; This function is called by:
  7600 ;;		_Lights_Initialization
  7601 ;; This function uses a non-reentrant model
  7602 ;;
  7603                           
  7604                           
  7605                           ;psect for function _setLights_Initialization
  7606  0B6E                     _setLights_Initialization:	
  7607                           
  7608                           ;incstack = 0
  7609                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7610                           ;setLights_Initialization@lights stored from wreg
  7611  0B6E  00F6               	movwf	setLights_Initialization@lights
  7612                           
  7613                           ;TriacRelay_B1.c: 50: LightsPointSelect(lights);
  7614  0B6F  0876               	movf	setLights_Initialization@lights,w
  7615  0B70  158A  23AB         	fcall	_LightsPointSelect
  7616  0B72  0008               	return
  7617  0B73                     __end_of_setLights_Initialization:	
  7618                           
  7619                           	psect	text47
  7620  0B53                     __ptext47:	
  7621 ;; *************** function _LED_Main *****************
  7622 ;; Defined at:
  7623 ;;		line 47 in file "../src/LED_B1.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;		None
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;		None
  7628 ;; Return value:  Size  Location     Type
  7629 ;;		None               void
  7630 ;; Registers used:
  7631 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7637 ;;      Params:         0       0       0       0
  7638 ;;      Locals:         0       0       0       0
  7639 ;;      Temps:          0       0       0       0
  7640 ;;      Totals:         0       0       0       0
  7641 ;;Total ram usage:        0 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:    5
  7644 ;; This function calls:
  7645 ;;		_setPIRLED_Main
  7646 ;; This function is called by:
  7647 ;;		_main
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           
  7652                           ;psect for function _LED_Main
  7653  0B53                     _LED_Main:	
  7654                           
  7655                           ;LED_B1.c: 50: setPIRLED_Main();
  7656                           
  7657                           ;incstack = 0
  7658                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7659  0B53  118A  26CA         	fcall	_setPIRLED_Main
  7660  0B55  0008               	return
  7661  0B56                     __end_of_LED_Main:	
  7662                           
  7663                           	psect	text48
  7664  06CA                     __ptext48:	
  7665 ;; *************** function _setPIRLED_Main *****************
  7666 ;; Defined at:
  7667 ;;		line 253 in file "../src/LED_B1.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;		None
  7670 ;; Auto vars:     Size  Location     Type
  7671 ;;  count           1    2[BANK0 ] unsigned char 
  7672 ;; Return value:  Size  Location     Type
  7673 ;;		None               void
  7674 ;; Registers used:
  7675 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7681 ;;      Params:         0       0       0       0
  7682 ;;      Locals:         0       1       0       0
  7683 ;;      Temps:          0       1       0       0
  7684 ;;      Totals:         0       2       0       0
  7685 ;;Total ram usage:        2 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; Hardware stack levels required when called:    4
  7688 ;; This function calls:
  7689 ;;		_setLED
  7690 ;; This function is called by:
  7691 ;;		_LED_Main
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           
  7696                           ;psect for function _setPIRLED_Main
  7697  06CA                     _setPIRLED_Main:	
  7698                           
  7699                           ;LED_B1.c: 254: char count;
  7700                           ;LED_B1.c: 255: if (PIRLED.GO == 1) {
  7701                           
  7702                           ;incstack = 0
  7703                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7704  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  7705  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  7706  06CC  1C30               	btfss	_PIRLED,0
  7707  06CD  0008               	return
  7708                           
  7709                           ;LED_B1.c: 256: PIRLED.Time++;
  7710  06CE  3001               	movlw	1
  7711  06CF  07B2               	addwf	_PIRLED+2,f
  7712  06D0  1803               	skipnc
  7713  06D1  0AB3               	incf	_PIRLED+3,f
  7714  06D2  3000               	movlw	0
  7715  06D3  07B3               	addwf	_PIRLED+3,f
  7716                           
  7717                           ;LED_B1.c: 257: if (PIRLED.Time >= 500 / 10) {
  7718  06D4  3000               	movlw	0
  7719  06D5  0233               	subwf	_PIRLED+3,w
  7720  06D6  3032               	movlw	50
  7721  06D7  1903               	skipnz
  7722  06D8  0232               	subwf	_PIRLED+2,w
  7723  06D9  1C03               	skipc
  7724  06DA  0008               	return
  7725                           
  7726                           ;LED_B1.c: 258: PIRLED.Time = 0;
  7727  06DB  01B2               	clrf	_PIRLED+2
  7728  06DC  01B3               	clrf	_PIRLED+3
  7729                           
  7730                           ;LED_B1.c: 259: setLED(1, 0);
  7731  06DD  01F6               	clrf	setLED@command
  7732  06DE  3001               	movlw	1
  7733  06DF  118A  256F  118A   	fcall	_setLED
  7734                           
  7735                           ;LED_B1.c: 260: setLED(2, 0);
  7736  06E2  01F6               	clrf	setLED@command
  7737  06E3  3002               	movlw	2
  7738  06E4  118A  256F  118A   	fcall	_setLED
  7739                           
  7740                           ;LED_B1.c: 261: if (PIRLED.GO1 == 1) {
  7741  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  7742  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  7743  06E9  1CB0               	btfss	_PIRLED,1
  7744  06EA  2EEF               	goto	l4480
  7745                           
  7746                           ;LED_B1.c: 262: count = 4;
  7747  06EB  3004               	movlw	4
  7748  06EC  00DA               	movwf	??_setPIRLED_Main
  7749  06ED  085A               	movf	??_setPIRLED_Main,w
  7750  06EE  00DB               	movwf	setPIRLED_Main@count
  7751  06EF                     l4480:	
  7752                           
  7753                           ;LED_B1.c: 263: }
  7754                           ;LED_B1.c: 264: if (PIRLED.GO2 == 1) {
  7755  06EF  1D30               	btfss	_PIRLED,2
  7756  06F0  2EF5               	goto	l4484
  7757                           
  7758                           ;LED_B1.c: 265: count = 6;
  7759  06F1  3006               	movlw	6
  7760  06F2  00DA               	movwf	??_setPIRLED_Main
  7761  06F3  085A               	movf	??_setPIRLED_Main,w
  7762  06F4  00DB               	movwf	setPIRLED_Main@count
  7763  06F5                     l4484:	
  7764                           
  7765                           ;LED_B1.c: 266: }
  7766                           ;LED_B1.c: 267: if (PIRLED.GO3 == 1) {
  7767  06F5  1DB0               	btfss	_PIRLED,3
  7768  06F6  2EFB               	goto	l4488
  7769                           
  7770                           ;LED_B1.c: 268: count = 8;
  7771  06F7  3008               	movlw	8
  7772  06F8  00DA               	movwf	??_setPIRLED_Main
  7773  06F9  085A               	movf	??_setPIRLED_Main,w
  7774  06FA  00DB               	movwf	setPIRLED_Main@count
  7775  06FB                     l4488:	
  7776                           
  7777                           ;LED_B1.c: 269: }
  7778                           ;LED_B1.c: 270: PIRLED.Count++;
  7779  06FB  3001               	movlw	1
  7780  06FC  00DA               	movwf	??_setPIRLED_Main
  7781  06FD  085A               	movf	??_setPIRLED_Main,w
  7782  06FE  07B1               	addwf	_PIRLED+1,f
  7783                           
  7784                           ;LED_B1.c: 271: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7785  06FF  0831               	movf	_PIRLED+1,w
  7786  0700  3A01               	xorlw	1
  7787  0701  1903               	skipnz
  7788  0702  2F07               	goto	l4494
  7789  0703  0831               	movf	_PIRLED+1,w
  7790  0704  3A02               	xorlw	2
  7791  0705  1D03               	skipz
  7792  0706  2F1B               	goto	l4498
  7793  0707                     l4494:	
  7794                           
  7795                           ;LED_B1.c: 272: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7796  0707  1003               	clrc
  7797  0708  1E30               	btfss	_PIRLED,4
  7798  0709  1403               	setc
  7799  070A  1C03               	btfss	3,0
  7800  070B  2F10               	goto	u5300
  7801  070C  1283               	bcf	3,5	;RP0=0, select bank0
  7802  070D  1303               	bcf	3,6	;RP1=0, select bank0
  7803  070E  1630               	bsf	_PIRLED,4
  7804  070F  2F13               	goto	l4496
  7805  0710                     u5300:	
  7806  0710  1283               	bcf	3,5	;RP0=0, select bank0
  7807  0711  1303               	bcf	3,6	;RP1=0, select bank0
  7808  0712  1230               	bcf	_PIRLED,4
  7809  0713                     l4496:	
  7810                           
  7811                           ;LED_B1.c: 273: setLED(2, PIRLED.status);
  7812  0713  3000               	movlw	0
  7813  0714  1A30               	btfsc	_PIRLED,4
  7814  0715  3001               	movlw	1
  7815  0716  00F6               	movwf	setLED@command
  7816  0717  3002               	movlw	2
  7817  0718  118A  256F         	fcall	_setLED
  7818                           
  7819                           ;LED_B1.c: 274: } else {
  7820  071A  0008               	return
  7821  071B                     l4498:	
  7822                           
  7823                           ;LED_B1.c: 275: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7824  071B  1003               	clrc
  7825  071C  1283               	bcf	3,5	;RP0=0, select bank0
  7826  071D  1303               	bcf	3,6	;RP1=0, select bank0
  7827  071E  1E30               	btfss	_PIRLED,4
  7828  071F  1403               	setc
  7829  0720  1C03               	btfss	3,0
  7830  0721  2F26               	goto	u5320
  7831  0722  1283               	bcf	3,5	;RP0=0, select bank0
  7832  0723  1303               	bcf	3,6	;RP1=0, select bank0
  7833  0724  1630               	bsf	_PIRLED,4
  7834  0725  2F29               	goto	l4500
  7835  0726                     u5320:	
  7836  0726  1283               	bcf	3,5	;RP0=0, select bank0
  7837  0727  1303               	bcf	3,6	;RP1=0, select bank0
  7838  0728  1230               	bcf	_PIRLED,4
  7839  0729                     l4500:	
  7840                           
  7841                           ;LED_B1.c: 276: setLED(1, PIRLED.status);
  7842  0729  3000               	movlw	0
  7843  072A  1A30               	btfsc	_PIRLED,4
  7844  072B  3001               	movlw	1
  7845  072C  00F6               	movwf	setLED@command
  7846  072D  3001               	movlw	1
  7847  072E  118A  256F  118A   	fcall	_setLED
  7848                           
  7849                           ;LED_B1.c: 277: if (PIRLED.Count == count) {
  7850  0731  1283               	bcf	3,5	;RP0=0, select bank0
  7851  0732  1303               	bcf	3,6	;RP1=0, select bank0
  7852  0733  0831               	movf	_PIRLED+1,w
  7853  0734  065B               	xorwf	setPIRLED_Main@count,w
  7854  0735  1D03               	skipz
  7855  0736  0008               	return
  7856                           
  7857                           ;LED_B1.c: 278: PIRLED.Count = 0;
  7858  0737  01B1               	clrf	_PIRLED+1
  7859  0738  0008               	return
  7860  0739                     __end_of_setPIRLED_Main:	
  7861                           
  7862                           	psect	text49
  7863  0BC0                     __ptext49:	
  7864 ;; *************** function _LED_Initialization *****************
  7865 ;; Defined at:
  7866 ;;		line 31 in file "../src/LED_B1.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;		None
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;		None
  7871 ;; Return value:  Size  Location     Type
  7872 ;;		None               void
  7873 ;; Registers used:
  7874 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7875 ;; Tracked objects:
  7876 ;;		On entry : 0/0
  7877 ;;		On exit  : 0/0
  7878 ;;		Unchanged: 0/0
  7879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7880 ;;      Params:         0       0       0       0
  7881 ;;      Locals:         0       0       0       0
  7882 ;;      Temps:          0       0       0       0
  7883 ;;      Totals:         0       0       0       0
  7884 ;;Total ram usage:        0 bytes
  7885 ;; Hardware stack levels used:    1
  7886 ;; Hardware stack levels required when called:    5
  7887 ;; This function calls:
  7888 ;;		_setLED_Initialization
  7889 ;; This function is called by:
  7890 ;;		_main
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           
  7895                           ;psect for function _LED_Initialization
  7896  0BC0                     _LED_Initialization:	
  7897                           
  7898                           ;LED_B1.c: 33: setLED_Initialization(1);
  7899                           
  7900                           ;incstack = 0
  7901                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7902  0BC0  3001               	movlw	1
  7903  0BC1  158A  246D  158A   	fcall	_setLED_Initialization
  7904                           
  7905                           ;LED_B1.c: 36: setLED_Initialization(2);
  7906  0BC4  3002               	movlw	2
  7907  0BC5  158A  246D  158A   	fcall	_setLED_Initialization
  7908                           
  7909                           ;LED_B1.c: 42: setLED_Initialization(99);
  7910  0BC8  3063               	movlw	99
  7911  0BC9  158A  246D         	fcall	_setLED_Initialization
  7912  0BCB  0008               	return
  7913  0BCC                     __end_of_LED_Initialization:	
  7914                           
  7915                           	psect	text50
  7916  0C6D                     __ptext50:	
  7917 ;; *************** function _setLED_Initialization *****************
  7918 ;; Defined at:
  7919 ;;		line 69 in file "../src/LED_B1.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  led             1    wreg     unsigned char 
  7922 ;; Auto vars:     Size  Location     Type
  7923 ;;  led             1    1[BANK0 ] unsigned char 
  7924 ;; Return value:  Size  Location     Type
  7925 ;;		None               void
  7926 ;; Registers used:
  7927 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7928 ;; Tracked objects:
  7929 ;;		On entry : 0/0
  7930 ;;		On exit  : 0/0
  7931 ;;		Unchanged: 0/0
  7932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7933 ;;      Params:         0       0       0       0
  7934 ;;      Locals:         0       1       0       0
  7935 ;;      Temps:          0       0       0       0
  7936 ;;      Totals:         0       1       0       0
  7937 ;;Total ram usage:        1 bytes
  7938 ;; Hardware stack levels used:    1
  7939 ;; Hardware stack levels required when called:    4
  7940 ;; This function calls:
  7941 ;;		_LedPointSelect
  7942 ;;		_setLED
  7943 ;; This function is called by:
  7944 ;;		_LED_Initialization
  7945 ;; This function uses a non-reentrant model
  7946 ;;
  7947                           
  7948                           
  7949                           ;psect for function _setLED_Initialization
  7950  0C6D                     _setLED_Initialization:	
  7951                           
  7952                           ;incstack = 0
  7953                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7954                           ;setLED_Initialization@led stored from wreg
  7955  0C6D  1283               	bcf	3,5	;RP0=0, select bank0
  7956  0C6E  1303               	bcf	3,6	;RP1=0, select bank0
  7957  0C6F  00DA               	movwf	setLED_Initialization@led
  7958                           
  7959                           ;LED_B1.c: 70: LedPointSelect(led);
  7960  0C70  085A               	movf	setLED_Initialization@led,w
  7961  0C71  158A  24BD  158A   	fcall	_LedPointSelect
  7962                           
  7963                           ;LED_B1.c: 71: LED->Enable = 1;
  7964  0C74  0877               	movf	_LED,w
  7965  0C75  0084               	movwf	4
  7966  0C76  1383               	bcf	3,7	;select IRP bank0
  7967  0C77  1400               	bsf	0,0
  7968                           
  7969                           ;LED_B1.c: 72: setLED(led, 0);
  7970  0C78  01F6               	clrf	setLED@command
  7971  0C79  1283               	bcf	3,5	;RP0=0, select bank0
  7972  0C7A  1303               	bcf	3,6	;RP1=0, select bank0
  7973  0C7B  085A               	movf	setLED_Initialization@led,w
  7974  0C7C  118A  256F         	fcall	_setLED
  7975  0C7E  0008               	return
  7976  0C7F                     __end_of_setLED_Initialization:	
  7977                           
  7978                           	psect	text51
  7979  05E6                     __ptext51:	
  7980 ;; *************** function _Exception_Main *****************
  7981 ;; Defined at:
  7982 ;;		line 487 in file "../src/Main_B1.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;		None
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  i               2    9[BANK0 ] int 
  7987 ;;  count           1    7[BANK0 ] unsigned char 
  7988 ;;  status          1    8[BANK0 ] unsigned char 
  7989 ;;  error           1   11[BANK0 ] unsigned char 
  7990 ;; Return value:  Size  Location     Type
  7991 ;;		None               void
  7992 ;; Registers used:
  7993 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7994 ;; Tracked objects:
  7995 ;;		On entry : 0/0
  7996 ;;		On exit  : 0/0
  7997 ;;		Unchanged: 0/0
  7998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7999 ;;      Params:         0       0       0       0
  8000 ;;      Locals:         0       5       0       0
  8001 ;;      Temps:          0       1       0       0
  8002 ;;      Totals:         0       6       0       0
  8003 ;;Total ram usage:        6 bytes
  8004 ;; Hardware stack levels used:    1
  8005 ;; Hardware stack levels required when called:    4
  8006 ;; This function calls:
  8007 ;;		_getAll_Lights_Line
  8008 ;;		_getLights_Status
  8009 ;;		_getMain_All_Error_Status
  8010 ;;		_setLED
  8011 ;;		_setLights_Trigger
  8012 ;; This function is called by:
  8013 ;;		_main
  8014 ;; This function uses a non-reentrant model
  8015 ;;
  8016                           
  8017                           
  8018                           ;psect for function _Exception_Main
  8019  05E6                     _Exception_Main:	
  8020                           
  8021                           ;Main_B1.c: 488: char error = getMain_All_Error_Status(0);
  8022                           
  8023                           ;incstack = 0
  8024                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8025  05E6  3000               	movlw	0
  8026  05E7  158A  265D  118A   	fcall	_getMain_All_Error_Status
  8027  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  8028  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  8029  05EC  00DF               	movwf	??_Exception_Main
  8030  05ED  085F               	movf	??_Exception_Main,w
  8031  05EE  00E4               	movwf	Exception_Main@error
  8032                           
  8033                           ;Main_B1.c: 490: if (myMain.Error_Run == 1) {
  8034  05EF  1DA3               	btfss	_myMain+3,3
  8035  05F0  2DFD               	goto	l5166
  8036                           
  8037                           ;Main_B1.c: 491: if (error == 0) {
  8038  05F1  08E4               	movf	Exception_Main@error,f
  8039  05F2  1D03               	skipz
  8040  05F3  0008               	return
  8041                           
  8042                           ;Main_B1.c: 492: myMain.Error_Run = 0;
  8043  05F4  11A3               	bcf	_myMain+3,3
  8044                           
  8045                           ;Main_B1.c: 494: setLED(error, 110);
  8046  05F5  306E               	movlw	110
  8047  05F6  00DF               	movwf	??_Exception_Main
  8048  05F7  085F               	movf	??_Exception_Main,w
  8049  05F8  00F6               	movwf	setLED@command
  8050  05F9  0864               	movf	Exception_Main@error,w
  8051  05FA  118A  256F         	fcall	_setLED
  8052                           
  8053                           ;Main_B1.c: 497: }
  8054                           ;Main_B1.c: 498: } else {
  8055  05FC  0008               	return
  8056  05FD                     l5166:	
  8057                           
  8058                           ;Main_B1.c: 499: if (error != 0) {
  8059  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  8060  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  8061  05FF  0864               	movf	Exception_Main@error,w
  8062  0600  1903               	btfsc	3,2
  8063  0601  0008               	return
  8064                           
  8065                           ;Main_B1.c: 500: myMain.Error_Run = 1;
  8066  0602  15A3               	bsf	_myMain+3,3
  8067                           
  8068                           ;Main_B1.c: 502: setLED(error, 111);
  8069  0603  306F               	movlw	111
  8070  0604  00DF               	movwf	??_Exception_Main
  8071  0605  085F               	movf	??_Exception_Main,w
  8072  0606  00F6               	movwf	setLED@command
  8073  0607  0864               	movf	Exception_Main@error,w
  8074  0608  118A  256F  118A   	fcall	_setLED
  8075                           
  8076                           ;Main_B1.c: 503: if (error == 3) {
  8077  060B  1283               	bcf	3,5	;RP0=0, select bank0
  8078  060C  1303               	bcf	3,6	;RP1=0, select bank0
  8079  060D  0864               	movf	Exception_Main@error,w
  8080  060E  3A03               	xorlw	3
  8081  060F  1D03               	skipz
  8082  0610  2E2C               	goto	l623
  8083                           
  8084                           ;Main_B1.c: 504: char status = getAll_Lights_Line();
  8085  0611  158A  23E4  118A   	fcall	_getAll_Lights_Line
  8086  0614  1283               	bcf	3,5	;RP0=0, select bank0
  8087  0615  1303               	bcf	3,6	;RP1=0, select bank0
  8088  0616  00DF               	movwf	??_Exception_Main
  8089  0617  085F               	movf	??_Exception_Main,w
  8090  0618  00E1               	movwf	Exception_Main@status
  8091                           
  8092                           ;Main_B1.c: 505: if (getLights_Status(status) == 1) {
  8093  0619  0861               	movf	Exception_Main@status,w
  8094  061A  158A  243A  118A   	fcall	_getLights_Status
  8095  061D  3A01               	xorlw	1
  8096  061E  1903               	btfsc	3,2
  8097  061F  2E23               	goto	l5176
  8098  0620  1283               	bcf	3,5	;RP0=0, select bank0
  8099  0621  1303               	bcf	3,6	;RP1=0, select bank0
  8100  0622  0008               	return
  8101  0623                     l5176:	
  8102                           
  8103                           ;Main_B1.c: 506: setLights_Trigger(status, 0);
  8104  0623  01F6               	clrf	setLights_Trigger@command
  8105  0624  1283               	bcf	3,5	;RP0=0, select bank0
  8106  0625  1303               	bcf	3,6	;RP1=0, select bank0
  8107  0626  0861               	movf	Exception_Main@status,w
  8108  0627  158A  24F1         	fcall	_setLights_Trigger
  8109  0629  1283               	bcf	3,5	;RP0=0, select bank0
  8110  062A  1303               	bcf	3,6	;RP1=0, select bank0
  8111  062B  0008               	return
  8112  062C                     l623:	
  8113                           ;Main_B1.c: 507: }
  8114                           ;Main_B1.c: 508: } else {
  8115                           
  8116                           
  8117                           ;Main_B1.c: 510: char count = 1;
  8118  062C  01E0               	clrf	Exception_Main@count
  8119  062D  0AE0               	incf	Exception_Main@count,f
  8120                           
  8121                           ;Main_B1.c: 518: for (int i = 0; i < count; i++) {
  8122  062E  01E2               	clrf	Exception_Main@i
  8123  062F  01E3               	clrf	Exception_Main@i+1
  8124  0630                     l5186:	
  8125  0630  0863               	movf	Exception_Main@i+1,w
  8126  0631  3A80               	xorlw	128
  8127  0632  00DF               	movwf	??_Exception_Main
  8128  0633  3080               	movlw	128
  8129  0634  025F               	subwf	??_Exception_Main,w
  8130  0635  1D03               	skipz
  8131  0636  2E39               	goto	u6725
  8132  0637  0860               	movf	Exception_Main@count,w
  8133  0638  0262               	subwf	Exception_Main@i,w
  8134  0639                     u6725:	
  8135  0639  1803               	btfsc	3,0
  8136  063A  2E56               	goto	u6720
  8137                           
  8138                           ;Main_B1.c: 519: if (getLights_Status(i + 1) == 1) {
  8139  063B  1283               	bcf	3,5	;RP0=0, select bank0
  8140  063C  1303               	bcf	3,6	;RP1=0, select bank0
  8141  063D  0862               	movf	Exception_Main@i,w
  8142  063E  3E01               	addlw	1
  8143  063F  158A  243A  118A   	fcall	_getLights_Status
  8144  0642  3A01               	xorlw	1
  8145  0643  1D03               	skipz
  8146  0644  2E4D               	goto	l5184
  8147                           
  8148                           ;Main_B1.c: 520: setLights_Trigger(i + 1, 0);
  8149  0645  01F6               	clrf	setLights_Trigger@command
  8150  0646  1283               	bcf	3,5	;RP0=0, select bank0
  8151  0647  1303               	bcf	3,6	;RP1=0, select bank0
  8152  0648  0862               	movf	Exception_Main@i,w
  8153  0649  3E01               	addlw	1
  8154  064A  158A  24F1  118A   	fcall	_setLights_Trigger
  8155  064D                     l5184:	
  8156  064D  3001               	movlw	1
  8157  064E  1283               	bcf	3,5	;RP0=0, select bank0
  8158  064F  1303               	bcf	3,6	;RP1=0, select bank0
  8159  0650  07E2               	addwf	Exception_Main@i,f
  8160  0651  1803               	skipnc
  8161  0652  0AE3               	incf	Exception_Main@i+1,f
  8162  0653  3000               	movlw	0
  8163  0654  07E3               	addwf	Exception_Main@i+1,f
  8164  0655  2E30               	goto	l5186
  8165  0656                     u6720:	
  8166  0656  1283               	bcf	3,5	;RP0=0, select bank0
  8167  0657  1303               	bcf	3,6	;RP1=0, select bank0
  8168  0658  0008               	return
  8169  0659                     __end_of_Exception_Main:	
  8170                           
  8171                           	psect	text52
  8172  0CF1                     __ptext52:	
  8173 ;; *************** function _setLights_Trigger *****************
  8174 ;; Defined at:
  8175 ;;		line 214 in file "../src/TriacRelay_B1.c"
  8176 ;; Parameters:    Size  Location     Type
  8177 ;;  lights          1    wreg     unsigned char 
  8178 ;;  command         1    6[COMMON] unsigned char 
  8179 ;; Auto vars:     Size  Location     Type
  8180 ;;  lights          1    1[BANK0 ] unsigned char 
  8181 ;; Return value:  Size  Location     Type
  8182 ;;		None               void
  8183 ;; Registers used:
  8184 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8185 ;; Tracked objects:
  8186 ;;		On entry : 0/0
  8187 ;;		On exit  : 0/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8190 ;;      Params:         1       0       0       0
  8191 ;;      Locals:         0       1       0       0
  8192 ;;      Temps:          0       1       0       0
  8193 ;;      Totals:         1       2       0       0
  8194 ;;Total ram usage:        3 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; Hardware stack levels required when called:    3
  8197 ;; This function calls:
  8198 ;;		_LightsPointSelect
  8199 ;; This function is called by:
  8200 ;;		_Exception_Main
  8201 ;;		_PIR_Main
  8202 ;;		_setMain_Exception
  8203 ;;		_setLights_ErrorClose
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           
  8208                           ;psect for function _setLights_Trigger
  8209  0CF1                     _setLights_Trigger:	
  8210                           
  8211                           ;incstack = 0
  8212                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8213                           ;setLights_Trigger@lights stored from wreg
  8214  0CF1  1283               	bcf	3,5	;RP0=0, select bank0
  8215  0CF2  1303               	bcf	3,6	;RP1=0, select bank0
  8216  0CF3  00DA               	movwf	setLights_Trigger@lights
  8217                           
  8218                           ;TriacRelay_B1.c: 215: LightsPointSelect(lights);
  8219  0CF4  085A               	movf	setLights_Trigger@lights,w
  8220  0CF5  158A  23AB         	fcall	_LightsPointSelect
  8221                           
  8222                           ;TriacRelay_B1.c: 216: Lights->Trigger = 1;
  8223  0CF7  0878               	movf	_Lights,w
  8224  0CF8  0084               	movwf	4
  8225  0CF9  1383               	bcf	3,7	;select IRP bank0
  8226  0CFA  1580               	bsf	0,3
  8227                           
  8228                           ;TriacRelay_B1.c: 217: Lights->Switch = command == 1 ? 1 : 0;
  8229  0CFB  0876               	movf	setLights_Trigger@command,w
  8230  0CFC  3A01               	xorlw	1
  8231  0CFD  3000               	movlw	0
  8232  0CFE  1903               	skipnz
  8233  0CFF  3001               	movlw	1
  8234  0D00  1283               	bcf	3,5	;RP0=0, select bank0
  8235  0D01  1303               	bcf	3,6	;RP1=0, select bank0
  8236  0D02  00D9               	movwf	??_setLights_Trigger
  8237  0D03  0878               	movf	_Lights,w
  8238  0D04  0084               	movwf	4
  8239  0D05  0ED9               	swapf	??_setLights_Trigger,f
  8240  0D06  0800               	movf	0,w
  8241  0D07  0659               	xorwf	??_setLights_Trigger,w
  8242  0D08  39EF               	andlw	-17
  8243  0D09  0659               	xorwf	??_setLights_Trigger,w
  8244  0D0A  0080               	movwf	0
  8245  0D0B  0008               	return
  8246  0D0C                     __end_of_setLights_Trigger:	
  8247                           
  8248                           	psect	text53
  8249  056F                     __ptext53:	
  8250 ;; *************** function _setLED *****************
  8251 ;; Defined at:
  8252 ;;		line 76 in file "../src/LED_B1.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;  led             1    wreg     unsigned char 
  8255 ;;  command         1    6[COMMON] unsigned char 
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;  led             1    0[BANK0 ] unsigned char 
  8258 ;; Return value:  Size  Location     Type
  8259 ;;		None               void
  8260 ;; Registers used:
  8261 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8262 ;; Tracked objects:
  8263 ;;		On entry : 0/0
  8264 ;;		On exit  : 0/0
  8265 ;;		Unchanged: 0/0
  8266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8267 ;;      Params:         1       0       0       0
  8268 ;;      Locals:         0       1       0       0
  8269 ;;      Temps:          0       0       0       0
  8270 ;;      Totals:         1       1       0       0
  8271 ;;Total ram usage:        2 bytes
  8272 ;; Hardware stack levels used:    1
  8273 ;; Hardware stack levels required when called:    3
  8274 ;; This function calls:
  8275 ;;		_LedPointSelect
  8276 ;; This function is called by:
  8277 ;;		_setLED_Initialization
  8278 ;;		_setPIRLED_Main
  8279 ;;		_Exception_Main
  8280 ;;		_PIR_Main
  8281 ;;		_setMain_Exception
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           
  8286                           ;psect for function _setLED
  8287  056F                     _setLED:	
  8288                           
  8289                           ;incstack = 0
  8290                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8291                           ;setLED@led stored from wreg
  8292  056F  1283               	bcf	3,5	;RP0=0, select bank0
  8293  0570  1303               	bcf	3,6	;RP1=0, select bank0
  8294  0571  00D9               	movwf	setLED@led
  8295                           
  8296                           ;LED_B1.c: 77: LedPointSelect(led);
  8297  0572  0859               	movf	setLED@led,w
  8298  0573  158A  24BD  118A   	fcall	_LedPointSelect
  8299                           
  8300                           ;LED_B1.c: 78: if (command == 0) {
  8301  0576  08F6               	movf	setLED@command,f
  8302  0577  1D03               	skipz
  8303  0578  2D87               	goto	l4314
  8304                           
  8305                           ;LED_B1.c: 80: if (led == 1) {
  8306  0579  1283               	bcf	3,5	;RP0=0, select bank0
  8307  057A  1303               	bcf	3,6	;RP1=0, select bank0
  8308  057B  0859               	movf	setLED@led,w
  8309  057C  3A01               	xorlw	1
  8310  057D  1903               	btfsc	3,2
  8311                           
  8312                           ;LED_B1.c: 84: RB4 = 1;
  8313  057E  1606               	bsf	6,4	;volatile
  8314                           
  8315                           ;LED_B1.c: 86: }
  8316                           ;LED_B1.c: 89: if (led == 2) {
  8317  057F  0859               	movf	setLED@led,w
  8318  0580  3A02               	xorlw	2
  8319  0581  1903               	btfsc	3,2
  8320                           
  8321                           ;LED_B1.c: 93: RB5 = 1;
  8322  0582  1686               	bsf	6,5	;volatile
  8323                           
  8324                           ;LED_B1.c: 95: }
  8325                           ;LED_B1.c: 107: if (led == 99) {
  8326  0583  0859               	movf	setLED@led,w
  8327  0584  3A63               	xorlw	99
  8328  0585  1903               	btfsc	3,2
  8329                           
  8330                           ;LED_B1.c: 111: RB3 = 1;
  8331  0586  1586               	bsf	6,3	;volatile
  8332  0587                     l4314:	
  8333                           
  8334                           ;LED_B1.c: 113: }
  8335                           ;LED_B1.c: 115: }
  8336                           ;LED_B1.c: 116: if (command == 1) {
  8337  0587  0876               	movf	setLED@command,w
  8338  0588  3A01               	xorlw	1
  8339  0589  1D03               	skipz
  8340  058A  2D99               	goto	l4328
  8341                           
  8342                           ;LED_B1.c: 118: if (led == 1) {
  8343  058B  1283               	bcf	3,5	;RP0=0, select bank0
  8344  058C  1303               	bcf	3,6	;RP1=0, select bank0
  8345  058D  0859               	movf	setLED@led,w
  8346  058E  3A01               	xorlw	1
  8347  058F  1903               	btfsc	3,2
  8348                           
  8349                           ;LED_B1.c: 122: RB4 = 0;
  8350  0590  1206               	bcf	6,4	;volatile
  8351                           
  8352                           ;LED_B1.c: 124: }
  8353                           ;LED_B1.c: 127: if (led == 2) {
  8354  0591  0859               	movf	setLED@led,w
  8355  0592  3A02               	xorlw	2
  8356  0593  1903               	btfsc	3,2
  8357                           
  8358                           ;LED_B1.c: 131: RB5 = 0;
  8359  0594  1286               	bcf	6,5	;volatile
  8360                           
  8361                           ;LED_B1.c: 133: }
  8362                           ;LED_B1.c: 145: if (led == 99) {
  8363  0595  0859               	movf	setLED@led,w
  8364  0596  3A63               	xorlw	99
  8365  0597  1903               	btfsc	3,2
  8366                           
  8367                           ;LED_B1.c: 149: RB3 = 0;
  8368  0598  1186               	bcf	6,3	;volatile
  8369  0599                     l4328:	
  8370                           
  8371                           ;LED_B1.c: 151: }
  8372                           ;LED_B1.c: 153: }
  8373                           ;LED_B1.c: 154: if (command == 10) {
  8374  0599  0876               	movf	setLED@command,w
  8375  059A  3A0A               	xorlw	10
  8376  059B  1D03               	skipz
  8377  059C  2DB6               	goto	l4346
  8378                           
  8379                           ;LED_B1.c: 155: LED->GO = 0;
  8380  059D  0877               	movf	_LED,w
  8381  059E  0084               	movwf	4
  8382  059F  1383               	bcf	3,7	;select IRP bank0
  8383  05A0  1080               	bcf	0,1
  8384                           
  8385                           ;LED_B1.c: 156: LED->Time = 0;
  8386  05A1  0A77               	incf	_LED,w
  8387  05A2  0084               	movwf	4
  8388  05A3  0180               	clrf	0
  8389  05A4  0A84               	incf	4,f
  8390  05A5  0180               	clrf	0
  8391                           
  8392                           ;LED_B1.c: 158: if (led == 1) {
  8393  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  8394  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  8395  05A8  0859               	movf	setLED@led,w
  8396  05A9  3A01               	xorlw	1
  8397  05AA  1D03               	skipz
  8398  05AB  2DAE               	goto	l4338
  8399                           
  8400                           ;LED_B1.c: 162: RB4 = 1;
  8401  05AC  1606               	bsf	6,4	;volatile
  8402                           
  8403                           ;LED_B1.c: 164: }
  8404  05AD  2DB2               	goto	l4342
  8405  05AE                     l4338:	
  8406                           
  8407                           ;LED_B1.c: 167: else if (led == 2) {
  8408  05AE  0859               	movf	setLED@led,w
  8409  05AF  3A02               	xorlw	2
  8410  05B0  1903               	btfsc	3,2
  8411                           
  8412                           ;LED_B1.c: 171: RB5 = 1;
  8413  05B1  1686               	bsf	6,5	;volatile
  8414  05B2                     l4342:	
  8415                           
  8416                           ;LED_B1.c: 173: }
  8417                           ;LED_B1.c: 185: if (led == 99) {
  8418  05B2  0859               	movf	setLED@led,w
  8419  05B3  3A63               	xorlw	99
  8420  05B4  1903               	btfsc	3,2
  8421                           
  8422                           ;LED_B1.c: 189: RB3 = 1;
  8423  05B5  1586               	bsf	6,3	;volatile
  8424  05B6                     l4346:	
  8425                           
  8426                           ;LED_B1.c: 191: }
  8427                           ;LED_B1.c: 193: }
  8428                           ;LED_B1.c: 194: if (command == 11) {
  8429  05B6  0876               	movf	setLED@command,w
  8430  05B7  3A0B               	xorlw	11
  8431  05B8  1D03               	skipz
  8432  05B9  2DBE               	goto	l4350
  8433                           
  8434                           ;LED_B1.c: 195: LED->GO = 1;
  8435  05BA  0877               	movf	_LED,w
  8436  05BB  0084               	movwf	4
  8437  05BC  1383               	bcf	3,7	;select IRP bank0
  8438  05BD  1480               	bsf	0,1
  8439  05BE                     l4350:	
  8440                           
  8441                           ;LED_B1.c: 196: }
  8442                           ;LED_B1.c: 198: if (command == 111) {
  8443  05BE  0876               	movf	setLED@command,w
  8444  05BF  3A6F               	xorlw	111
  8445  05C0  1D03               	skipz
  8446  05C1  2DDE               	goto	l4376
  8447                           
  8448                           ;LED_B1.c: 199: PIRLED.Count = 0;
  8449  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  8450  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  8451  05C4  01B1               	clrf	_PIRLED+1
  8452                           
  8453                           ;LED_B1.c: 200: PIRLED.Time = 0;
  8454  05C5  01B2               	clrf	_PIRLED+2
  8455  05C6  01B3               	clrf	_PIRLED+3
  8456                           
  8457                           ;LED_B1.c: 201: PIRLED.status = 0;
  8458  05C7  1230               	bcf	_PIRLED,4
  8459                           
  8460                           ;LED_B1.c: 202: PIRLED.GO = 1;
  8461  05C8  1430               	bsf	_PIRLED,0
  8462                           
  8463                           ;LED_B1.c: 203: PIRLED.GO1 = 0;
  8464  05C9  10B0               	bcf	_PIRLED,1
  8465                           
  8466                           ;LED_B1.c: 204: PIRLED.GO2 = 0;
  8467  05CA  1130               	bcf	_PIRLED,2
  8468                           
  8469                           ;LED_B1.c: 205: PIRLED.GO3 = 0;
  8470  05CB  11B0               	bcf	_PIRLED,3
  8471                           
  8472                           ;LED_B1.c: 206: if (led == 1) {
  8473  05CC  0859               	movf	setLED@led,w
  8474  05CD  3A01               	xorlw	1
  8475  05CE  1D03               	skipz
  8476  05CF  2DD2               	goto	l4368
  8477                           
  8478                           ;LED_B1.c: 207: PIRLED.GO1 = 1;
  8479  05D0  14B0               	bsf	_PIRLED,1
  8480                           
  8481                           ;LED_B1.c: 208: } else if (led == 2) {
  8482  05D1  0008               	return
  8483  05D2                     l4368:	
  8484  05D2  0859               	movf	setLED@led,w
  8485  05D3  3A02               	xorlw	2
  8486  05D4  1D03               	skipz
  8487  05D5  2DD8               	goto	l4372
  8488                           
  8489                           ;LED_B1.c: 209: PIRLED.GO2 = 1;
  8490  05D6  1530               	bsf	_PIRLED,2
  8491                           
  8492                           ;LED_B1.c: 210: } else if (led == 3) {
  8493  05D7  0008               	return
  8494  05D8                     l4372:	
  8495  05D8  0859               	movf	setLED@led,w
  8496  05D9  3A03               	xorlw	3
  8497  05DA  1D03               	skipz
  8498  05DB  0008               	return
  8499                           
  8500                           ;LED_B1.c: 211: PIRLED.GO3 = 1;
  8501  05DC  15B0               	bsf	_PIRLED,3
  8502                           
  8503                           ;LED_B1.c: 212: }
  8504                           ;LED_B1.c: 213: } else if (command == 110) {
  8505  05DD  0008               	return
  8506  05DE                     l4376:	
  8507  05DE  0876               	movf	setLED@command,w
  8508  05DF  3A6E               	xorlw	110
  8509  05E0  1D03               	skipz
  8510  05E1  0008               	return
  8511                           
  8512                           ;LED_B1.c: 214: PIRLED.GO = 0;
  8513  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  8514  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  8515  05E4  1030               	bcf	_PIRLED,0
  8516  05E5  0008               	return
  8517  05E6                     __end_of_setLED:	
  8518                           
  8519                           	psect	text54
  8520  0CBD                     __ptext54:	
  8521 ;; *************** function _LedPointSelect *****************
  8522 ;; Defined at:
  8523 ;;		line 7 in file "../src/LED_B1.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;  led             1    wreg     unsigned char 
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;  led             1    5[COMMON] unsigned char 
  8528 ;; Return value:  Size  Location     Type
  8529 ;;		None               void
  8530 ;; Registers used:
  8531 ;;		wreg
  8532 ;; Tracked objects:
  8533 ;;		On entry : 0/0
  8534 ;;		On exit  : 0/0
  8535 ;;		Unchanged: 0/0
  8536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8537 ;;      Params:         0       0       0       0
  8538 ;;      Locals:         1       0       0       0
  8539 ;;      Temps:          1       0       0       0
  8540 ;;      Totals:         2       0       0       0
  8541 ;;Total ram usage:        2 bytes
  8542 ;; Hardware stack levels used:    1
  8543 ;; Hardware stack levels required when called:    2
  8544 ;; This function calls:
  8545 ;;		Nothing
  8546 ;; This function is called by:
  8547 ;;		_setLED_Initialization
  8548 ;;		_setLED
  8549 ;;		_setLED_Main
  8550 ;; This function uses a non-reentrant model
  8551 ;;
  8552                           
  8553                           
  8554                           ;psect for function _LedPointSelect
  8555  0CBD                     _LedPointSelect:	
  8556                           
  8557                           ;incstack = 0
  8558                           ; Regs used in _LedPointSelect: [wreg]
  8559                           ;LedPointSelect@led stored from wreg
  8560  0CBD  00F5               	movwf	LedPointSelect@led
  8561                           
  8562                           ;LED_B1.c: 9: if (led == 1) {
  8563  0CBE  0875               	movf	LedPointSelect@led,w
  8564  0CBF  3A01               	xorlw	1
  8565  0CC0  1D03               	skipz
  8566  0CC1  2CC6               	goto	l244
  8567                           
  8568                           ;LED_B1.c: 10: LED = &VarLED1;
  8569  0CC2  3051               	movlw	_VarLED1& (0+255)
  8570  0CC3  00F4               	movwf	??_LedPointSelect
  8571  0CC4  0874               	movf	??_LedPointSelect,w
  8572  0CC5  00F7               	movwf	_LED
  8573  0CC6                     l244:	
  8574                           
  8575                           ;LED_B1.c: 11: }
  8576                           ;LED_B1.c: 14: if (led == 2) {
  8577  0CC6  0875               	movf	LedPointSelect@led,w
  8578  0CC7  3A02               	xorlw	2
  8579  0CC8  1D03               	skipz
  8580  0CC9  2CCE               	goto	l245
  8581                           
  8582                           ;LED_B1.c: 15: LED = &VarLED2;
  8583  0CCA  3055               	movlw	_VarLED2& (0+255)
  8584  0CCB  00F4               	movwf	??_LedPointSelect
  8585  0CCC  0874               	movf	??_LedPointSelect,w
  8586  0CCD  00F7               	movwf	_LED
  8587  0CCE                     l245:	
  8588                           
  8589                           ;LED_B1.c: 16: }
  8590                           ;LED_B1.c: 24: if (led == 99) {
  8591  0CCE  0875               	movf	LedPointSelect@led,w
  8592  0CCF  3A63               	xorlw	99
  8593  0CD0  1D03               	skipz
  8594  0CD1  0008               	return
  8595                           
  8596                           ;LED_B1.c: 25: LED = &VarErrLED;
  8597  0CD2  304D               	movlw	_VarErrLED& (0+255)
  8598  0CD3  00F4               	movwf	??_LedPointSelect
  8599  0CD4  0874               	movf	??_LedPointSelect,w
  8600  0CD5  00F7               	movwf	_LED
  8601  0CD6  0008               	return
  8602  0CD7                     __end_of_LedPointSelect:	
  8603                           
  8604                           	psect	text55
  8605  0E5D                     __ptext55:	
  8606 ;; *************** function _getMain_All_Error_Status *****************
  8607 ;; Defined at:
  8608 ;;		line 403 in file "../src/Main_B1.c"
  8609 ;; Parameters:    Size  Location     Type
  8610 ;;  command         1    wreg     unsigned char 
  8611 ;; Auto vars:     Size  Location     Type
  8612 ;;  command         1    4[BANK0 ] unsigned char 
  8613 ;;  status          1    5[BANK0 ] unsigned char 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      unsigned char 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, status,0
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8623 ;;      Params:         0       0       0       0
  8624 ;;      Locals:         0       6       0       0
  8625 ;;      Temps:          1       0       0       0
  8626 ;;      Totals:         1       6       0       0
  8627 ;;Total ram usage:        7 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    2
  8630 ;; This function calls:
  8631 ;;		Nothing
  8632 ;; This function is called by:
  8633 ;;		_Exception_Main
  8634 ;;		_Load_Main
  8635 ;;		_setTemp_Main
  8636 ;;		_PIR_Main
  8637 ;;		_setSYSC_Main
  8638 ;;		_Lights_Main
  8639 ;;		_setLights
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           
  8644                           ;psect for function _getMain_All_Error_Status
  8645  0E5D                     _getMain_All_Error_Status:	
  8646                           
  8647                           ;incstack = 0
  8648                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  8649                           ;getMain_All_Error_Status@command stored from wreg
  8650  0E5D  1283               	bcf	3,5	;RP0=0, select bank0
  8651  0E5E  1303               	bcf	3,6	;RP1=0, select bank0
  8652  0E5F  00DD               	movwf	getMain_All_Error_Status@command
  8653                           
  8654                           ;Main_B1.c: 404: char status = 0;
  8655  0E60  01DE               	clrf	getMain_All_Error_Status@status
  8656                           
  8657                           ;Main_B1.c: 407: if (status == 0 && command != 1) {
  8658  0E61  08DE               	movf	getMain_All_Error_Status@status,f
  8659  0E62  1D03               	skipz
  8660  0E63  2E6C               	goto	l4270
  8661  0E64  085D               	movf	getMain_All_Error_Status@command,w
  8662  0E65  3A01               	xorlw	1
  8663  0E66  1903               	skipnz
  8664  0E67  2E6C               	goto	l4270
  8665                           
  8666                           ;Main_B1.c: 408: status = SYSC.ERROR == 1 ? 1 : 0;
  8667  0E68  3000               	movlw	0
  8668  0E69  18A6               	btfsc	_SYSC,1
  8669  0E6A  3001               	movlw	1
  8670  0E6B  00DE               	movwf	getMain_All_Error_Status@status
  8671  0E6C                     l4270:	
  8672                           
  8673                           ;Main_B1.c: 409: }
  8674                           ;Main_B1.c: 415: if (status == 0 && command != 2) {
  8675  0E6C  08DE               	movf	getMain_All_Error_Status@status,f
  8676  0E6D  1D03               	skipz
  8677  0E6E  2E80               	goto	l4280
  8678  0E6F  085D               	movf	getMain_All_Error_Status@command,w
  8679  0E70  3A02               	xorlw	2
  8680  0E71  1903               	skipnz
  8681  0E72  2E80               	goto	l4280
  8682                           
  8683                           ;Main_B1.c: 416: status = Temp.ERROR == 1 ? 2 : 0;
  8684  0E73  18BA               	btfsc	_Temp,1
  8685  0E74  2E78               	goto	l4278
  8686  0E75  01D9               	clrf	_getMain_All_Error_Status$2252
  8687  0E76  01DA               	clrf	_getMain_All_Error_Status$2252+1
  8688  0E77  2E7C               	goto	l604
  8689  0E78                     l4278:	
  8690  0E78  3002               	movlw	2
  8691  0E79  00D9               	movwf	_getMain_All_Error_Status$2252
  8692  0E7A  3000               	movlw	0
  8693  0E7B  00DA               	movwf	_getMain_All_Error_Status$2252+1
  8694  0E7C                     l604:	
  8695  0E7C  0859               	movf	_getMain_All_Error_Status$2252,w
  8696  0E7D  00F4               	movwf	??_getMain_All_Error_Status
  8697  0E7E  0874               	movf	??_getMain_All_Error_Status,w
  8698  0E7F  00DE               	movwf	getMain_All_Error_Status@status
  8699  0E80                     l4280:	
  8700                           
  8701                           ;Main_B1.c: 417: }
  8702                           ;Main_B1.c: 422: if (status == 0 && command != 3) {
  8703  0E80  08DE               	movf	getMain_All_Error_Status@status,f
  8704  0E81  1D03               	skipz
  8705  0E82  2E99               	goto	l605
  8706  0E83  085D               	movf	getMain_All_Error_Status@command,w
  8707  0E84  3A03               	xorlw	3
  8708  0E85  1903               	skipnz
  8709  0E86  2E99               	goto	l605
  8710                           
  8711                           ;Main_B1.c: 423: status = Load.ERROR == 1 ? 3 : 0;
  8712  0E87  1683               	bsf	3,5	;RP0=1, select bank1
  8713  0E88  1303               	bcf	3,6	;RP1=0, select bank1
  8714  0E89  1ACF               	btfsc	_Load^(0+128),5
  8715  0E8A  2E90               	goto	l4288
  8716  0E8B  1283               	bcf	3,5	;RP0=0, select bank0
  8717  0E8C  1303               	bcf	3,6	;RP1=0, select bank0
  8718  0E8D  01DB               	clrf	_getMain_All_Error_Status$2253
  8719  0E8E  01DC               	clrf	_getMain_All_Error_Status$2253+1
  8720  0E8F  2E95               	goto	l609
  8721  0E90                     l4288:	
  8722  0E90  3003               	movlw	3
  8723  0E91  1283               	bcf	3,5	;RP0=0, select bank0
  8724  0E92  00DB               	movwf	_getMain_All_Error_Status$2253
  8725  0E93  3000               	movlw	0
  8726  0E94  00DC               	movwf	_getMain_All_Error_Status$2253+1
  8727  0E95                     l609:	
  8728  0E95  085B               	movf	_getMain_All_Error_Status$2253,w
  8729  0E96  00F4               	movwf	??_getMain_All_Error_Status
  8730  0E97  0874               	movf	??_getMain_All_Error_Status,w
  8731  0E98  00DE               	movwf	getMain_All_Error_Status@status
  8732  0E99                     l605:	
  8733                           
  8734                           ;Main_B1.c: 424: }
  8735                           ;Main_B1.c: 440: return status;
  8736  0E99  085E               	movf	getMain_All_Error_Status@status,w
  8737  0E9A  0008               	return
  8738  0E9B                     __end_of_getMain_All_Error_Status:	
  8739                           
  8740                           	psect	text56
  8741  0C3A                     __ptext56:	
  8742 ;; *************** function _getLights_Status *****************
  8743 ;; Defined at:
  8744 ;;		line 207 in file "../src/TriacRelay_B1.c"
  8745 ;; Parameters:    Size  Location     Type
  8746 ;;  lights          1    wreg     unsigned char 
  8747 ;; Auto vars:     Size  Location     Type
  8748 ;;  lights          1    0[BANK0 ] unsigned char 
  8749 ;;  status          1    1[BANK0 ] unsigned char 
  8750 ;; Return value:  Size  Location     Type
  8751 ;;                  1    wreg      unsigned char 
  8752 ;; Registers used:
  8753 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8754 ;; Tracked objects:
  8755 ;;		On entry : 0/0
  8756 ;;		On exit  : 0/0
  8757 ;;		Unchanged: 0/0
  8758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8759 ;;      Params:         0       0       0       0
  8760 ;;      Locals:         0       2       0       0
  8761 ;;      Temps:          0       0       0       0
  8762 ;;      Totals:         0       2       0       0
  8763 ;;Total ram usage:        2 bytes
  8764 ;; Hardware stack levels used:    1
  8765 ;; Hardware stack levels required when called:    3
  8766 ;; This function calls:
  8767 ;;		_LightsPointSelect
  8768 ;; This function is called by:
  8769 ;;		_getMain_LightsStatus
  8770 ;;		_Exception_Main
  8771 ;;		_PIR_Main
  8772 ;;		_setMain_Exception
  8773 ;;		_setLights_ErrorClose
  8774 ;; This function uses a non-reentrant model
  8775 ;;
  8776                           
  8777                           
  8778                           ;psect for function _getLights_Status
  8779  0C3A                     _getLights_Status:	
  8780                           
  8781                           ;incstack = 0
  8782                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8783                           ;getLights_Status@lights stored from wreg
  8784  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  8785  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  8786  0C3C  00D9               	movwf	getLights_Status@lights
  8787                           
  8788                           ;TriacRelay_B1.c: 208: LightsPointSelect(lights);
  8789  0C3D  0859               	movf	getLights_Status@lights,w
  8790  0C3E  158A  23AB         	fcall	_LightsPointSelect
  8791                           
  8792                           ;TriacRelay_B1.c: 209: char status = Lights->Status == 1 ? 1 : 0;
  8793  0C40  0878               	movf	_Lights,w
  8794  0C41  0084               	movwf	4
  8795  0C42  3000               	movlw	0
  8796  0C43  1383               	bcf	3,7	;select IRP bank0
  8797  0C44  1900               	btfsc	0,2
  8798  0C45  3001               	movlw	1
  8799  0C46  1283               	bcf	3,5	;RP0=0, select bank0
  8800  0C47  1303               	bcf	3,6	;RP1=0, select bank0
  8801  0C48  00DA               	movwf	getLights_Status@status
  8802                           
  8803                           ;TriacRelay_B1.c: 210: return status;
  8804  0C49  085A               	movf	getLights_Status@status,w
  8805  0C4A  0008               	return
  8806  0C4B                     __end_of_getLights_Status:	
  8807                           
  8808                           	psect	text57
  8809  0BE4                     __ptext57:	
  8810 ;; *************** function _getAll_Lights_Line *****************
  8811 ;; Defined at:
  8812 ;;		line 236 in file "../src/TriacRelay_B1.c"
  8813 ;; Parameters:    Size  Location     Type
  8814 ;;		None
  8815 ;; Auto vars:     Size  Location     Type
  8816 ;;  line            1    6[COMMON] unsigned char 
  8817 ;; Return value:  Size  Location     Type
  8818 ;;                  1    wreg      unsigned char 
  8819 ;; Registers used:
  8820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8821 ;; Tracked objects:
  8822 ;;		On entry : 0/0
  8823 ;;		On exit  : 0/0
  8824 ;;		Unchanged: 0/0
  8825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8826 ;;      Params:         0       0       0       0
  8827 ;;      Locals:         1       0       0       0
  8828 ;;      Temps:          0       0       0       0
  8829 ;;      Totals:         1       0       0       0
  8830 ;;Total ram usage:        1 bytes
  8831 ;; Hardware stack levels used:    1
  8832 ;; Hardware stack levels required when called:    3
  8833 ;; This function calls:
  8834 ;;		_LightsPointSelect
  8835 ;; This function is called by:
  8836 ;;		_Exception_Main
  8837 ;;		_setMain_Exception
  8838 ;; This function uses a non-reentrant model
  8839 ;;
  8840                           
  8841                           
  8842                           ;psect for function _getAll_Lights_Line
  8843  0BE4                     _getAll_Lights_Line:	
  8844                           
  8845                           ;TriacRelay_B1.c: 237: char line = 0;
  8846                           
  8847                           ;incstack = 0
  8848                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8849  0BE4  01F6               	clrf	getAll_Lights_Line@line
  8850                           
  8851                           ;TriacRelay_B1.c: 239: LightsPointSelect(1);
  8852  0BE5  3001               	movlw	1
  8853  0BE6  158A  23AB         	fcall	_LightsPointSelect
  8854                           
  8855                           ;TriacRelay_B1.c: 240: line = Lights->Line == 1 ? 1 : 0;
  8856  0BE8  0A78               	incf	_Lights,w
  8857  0BE9  0084               	movwf	4
  8858  0BEA  3000               	movlw	0
  8859  0BEB  1383               	bcf	3,7	;select IRP bank0
  8860  0BEC  1800               	btfsc	0,0
  8861  0BED  3001               	movlw	1
  8862  0BEE  00F6               	movwf	getAll_Lights_Line@line
  8863                           
  8864                           ;TriacRelay_B1.c: 250: return line;
  8865  0BEF  0876               	movf	getAll_Lights_Line@line,w
  8866  0BF0  0008               	return
  8867  0BF1                     __end_of_getAll_Lights_Line:	
  8868                           
  8869                           	psect	text58
  8870  0BAB                     __ptext58:	
  8871 ;; *************** function _LightsPointSelect *****************
  8872 ;; Defined at:
  8873 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;  lights          1    wreg     unsigned char 
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;  lights          1    5[COMMON] unsigned char 
  8878 ;; Return value:  Size  Location     Type
  8879 ;;		None               void
  8880 ;; Registers used:
  8881 ;;		wreg
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8887 ;;      Params:         0       0       0       0
  8888 ;;      Locals:         1       0       0       0
  8889 ;;      Temps:          1       0       0       0
  8890 ;;      Totals:         2       0       0       0
  8891 ;;Total ram usage:        2 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    2
  8894 ;; This function calls:
  8895 ;;		Nothing
  8896 ;; This function is called by:
  8897 ;;		_setLights_Initialization
  8898 ;;		_setLights_Main
  8899 ;;		_setLights
  8900 ;;		_Lights_Control
  8901 ;;		_getLights_Status
  8902 ;;		_setLights_Trigger
  8903 ;;		_setLights_Line
  8904 ;;		_getAll_Lights_Line
  8905 ;; This function uses a non-reentrant model
  8906 ;;
  8907                           
  8908                           
  8909                           ;psect for function _LightsPointSelect
  8910  0BAB                     _LightsPointSelect:	
  8911                           
  8912                           ;incstack = 0
  8913                           ; Regs used in _LightsPointSelect: [wreg]
  8914                           ;LightsPointSelect@lights stored from wreg
  8915  0BAB  00F5               	movwf	LightsPointSelect@lights
  8916                           
  8917                           ;TriacRelay_B1.c: 14: if (lights == 1) {
  8918  0BAC  0875               	movf	LightsPointSelect@lights,w
  8919  0BAD  3A01               	xorlw	1
  8920  0BAE  1D03               	skipz
  8921  0BAF  0008               	return
  8922                           
  8923                           ;TriacRelay_B1.c: 15: Lights = &Lights1;
  8924  0BB0  3046               	movlw	_Lights1& (0+255)
  8925  0BB1  00F4               	movwf	??_LightsPointSelect
  8926  0BB2  0874               	movf	??_LightsPointSelect,w
  8927  0BB3  00F8               	movwf	_Lights
  8928  0BB4  0008               	return
  8929  0BB5                     __end_of_LightsPointSelect:	
  8930                           
  8931                           	psect	text59
  8932  0BF1                     __ptext59:	
  8933 ;; *************** function _DetectSYSC_Signal *****************
  8934 ;; Defined at:
  8935 ;;		line 51 in file "../src/SYSC_B1.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;		None
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;		None
  8940 ;; Return value:  Size  Location     Type
  8941 ;;		None               void
  8942 ;; Registers used:
  8943 ;;		status,2
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8949 ;;      Params:         0       0       0       0
  8950 ;;      Locals:         0       0       0       0
  8951 ;;      Temps:          0       0       0       0
  8952 ;;      Totals:         0       0       0       0
  8953 ;;Total ram usage:        0 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    2
  8956 ;; This function calls:
  8957 ;;		Nothing
  8958 ;; This function is called by:
  8959 ;;		_main
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           
  8964                           ;psect for function _DetectSYSC_Signal
  8965  0BF1                     _DetectSYSC_Signal:	
  8966                           
  8967                           ;SYSC_B1.c: 52: if (SYSC.Signal == 0) {
  8968                           
  8969                           ;incstack = 0
  8970                           ; Regs used in _DetectSYSC_Signal: [status,2]
  8971  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  8972  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  8973  0BF3  19A6               	btfsc	_SYSC,3
  8974  0BF4  2BFB               	goto	l1074
  8975                           
  8976                           ;SYSC_B1.c: 53: if (RA5 == 1) {
  8977  0BF5  1E85               	btfss	5,5	;volatile
  8978  0BF6  0008               	return
  8979                           
  8980                           ;SYSC_B1.c: 54: SYSC.Signal = 1;
  8981  0BF7  15A6               	bsf	_SYSC,3
  8982                           
  8983                           ;SYSC_B1.c: 55: SYSC.Timer = 0;
  8984  0BF8  01A7               	clrf	_SYSC+1
  8985  0BF9  01A8               	clrf	_SYSC+2
  8986                           
  8987                           ;SYSC_B1.c: 56: }
  8988                           ;SYSC_B1.c: 57: } else {
  8989  0BFA  0008               	return
  8990  0BFB                     l1074:	
  8991                           
  8992                           ;SYSC_B1.c: 58: if (RA5 == 0) {
  8993  0BFB  1A85               	btfsc	5,5	;volatile
  8994  0BFC  0008               	return
  8995                           
  8996                           ;SYSC_B1.c: 59: SYSC.Signal = 0;
  8997  0BFD  11A6               	bcf	_SYSC,3
  8998  0BFE  0008               	return
  8999  0BFF                     __end_of_DetectSYSC_Signal:	
  9000                           
  9001                           	psect	text60
  9002  0DEE                     __ptext60:	
  9003 ;; *************** function _CDS_Main *****************
  9004 ;; Defined at:
  9005 ;;		line 11 in file "../src/CDS_B1.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;		None
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;		None
  9010 ;; Return value:  Size  Location     Type
  9011 ;;		None               void
  9012 ;; Registers used:
  9013 ;;		wreg, status,2, status,0
  9014 ;; Tracked objects:
  9015 ;;		On entry : 0/0
  9016 ;;		On exit  : 0/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9019 ;;      Params:         0       0       0       0
  9020 ;;      Locals:         0       0       0       0
  9021 ;;      Temps:          3       0       0       0
  9022 ;;      Totals:         3       0       0       0
  9023 ;;Total ram usage:        3 bytes
  9024 ;; Hardware stack levels used:    1
  9025 ;; Hardware stack levels required when called:    2
  9026 ;; This function calls:
  9027 ;;		Nothing
  9028 ;; This function is called by:
  9029 ;;		_main
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           
  9034                           ;psect for function _CDS_Main
  9035  0DEE                     _CDS_Main:	
  9036                           
  9037                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9038                           
  9039                           ;incstack = 0
  9040                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9041  0DEE  1283               	bcf	3,5	;RP0=0, select bank0
  9042  0DEF  1303               	bcf	3,6	;RP1=0, select bank0
  9043  0DF0  1C2B               	btfss	__CDS,0
  9044  0DF1  0008               	return
  9045                           
  9046                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9047  0DF2  18AB               	btfsc	__CDS,1
  9048  0DF3  2E01               	goto	l111
  9049                           
  9050                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9051  0DF4  19AB               	btfsc	__CDS,3
  9052  0DF5  0008               	return
  9053                           
  9054                           ;CDS_B1.c: 16: _CDS.Time++;
  9055  0DF6  3001               	movlw	1
  9056  0DF7  00F4               	movwf	??_CDS_Main
  9057  0DF8  0874               	movf	??_CDS_Main,w
  9058  0DF9  07AC               	addwf	__CDS+1,f
  9059                           
  9060                           ;CDS_B1.c: 17: if (_CDS.Time >= 10)
  9061  0DFA  300A               	movlw	10
  9062  0DFB  022C               	subwf	__CDS+1,w
  9063  0DFC  1C03               	skipc
  9064  0DFD  0008               	return
  9065                           
  9066                           ;CDS_B1.c: 18: {
  9067                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9068  0DFE  01AC               	clrf	__CDS+1
  9069                           
  9070                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9071  0DFF  15AB               	bsf	__CDS,3
  9072                           
  9073                           ;CDS_B1.c: 21: }
  9074                           ;CDS_B1.c: 22: }
  9075                           ;CDS_B1.c: 23: } else {
  9076  0E00  0008               	return
  9077  0E01                     l111:	
  9078                           
  9079                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9080  0E01  1CAB               	btfss	__CDS,1
  9081  0E02  0008               	return
  9082                           
  9083                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9084  0E03  10AB               	bcf	__CDS,1
  9085                           
  9086                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9087  0E04  1A2B               	btfsc	__CDS,4
  9088  0E05  2E0C               	goto	l3540
  9089                           
  9090                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9091  0E06  082D               	movf	__CDS+2,w
  9092  0E07  022E               	subwf	__CDS+3,w
  9093  0E08  1C03               	skipc
  9094  0E09  0008               	return
  9095                           
  9096                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9097  0E0A  162B               	bsf	__CDS,4
  9098                           
  9099                           ;CDS_B1.c: 29: }
  9100                           ;CDS_B1.c: 30: } else {
  9101  0E0B  0008               	return
  9102  0E0C                     l3540:	
  9103                           
  9104                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9105  0E0C  082D               	movf	__CDS+2,w
  9106  0E0D  3E9C               	addlw	156
  9107  0E0E  00F4               	movwf	??_CDS_Main
  9108  0E0F  30FF               	movlw	255
  9109  0E10  1803               	skipnc
  9110  0E11  3000               	movlw	0
  9111  0E12  00F5               	movwf	??_CDS_Main+1
  9112  0E13  0875               	movf	??_CDS_Main+1,w
  9113  0E14  3A80               	xorlw	128
  9114  0E15  00F6               	movwf	??_CDS_Main+2
  9115  0E16  3080               	movlw	128
  9116  0E17  0276               	subwf	??_CDS_Main+2,w
  9117  0E18  1D03               	skipz
  9118  0E19  2E1C               	goto	u3495
  9119  0E1A  082E               	movf	__CDS+3,w
  9120  0E1B  0274               	subwf	??_CDS_Main,w
  9121  0E1C                     u3495:	
  9122  0E1C  1C03               	skipc
  9123  0E1D  0008               	return
  9124                           
  9125                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9126  0E1E  1283               	bcf	3,5	;RP0=0, select bank0
  9127  0E1F  1303               	bcf	3,6	;RP1=0, select bank0
  9128  0E20  122B               	bcf	__CDS,4
  9129  0E21  0008               	return
  9130  0E22                     __end_of_CDS_Main:	
  9131                           
  9132                           	psect	text61
  9133  0B62                     __ptext61:	
  9134 ;; *************** function _CDS_Initialization *****************
  9135 ;; Defined at:
  9136 ;;		line 7 in file "../src/CDS_B1.c"
  9137 ;; Parameters:    Size  Location     Type
  9138 ;;		None
  9139 ;; Auto vars:     Size  Location     Type
  9140 ;;		None
  9141 ;; Return value:  Size  Location     Type
  9142 ;;		None               void
  9143 ;; Registers used:
  9144 ;;		None
  9145 ;; Tracked objects:
  9146 ;;		On entry : 0/0
  9147 ;;		On exit  : 0/0
  9148 ;;		Unchanged: 0/0
  9149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9150 ;;      Params:         0       0       0       0
  9151 ;;      Locals:         0       0       0       0
  9152 ;;      Temps:          0       0       0       0
  9153 ;;      Totals:         0       0       0       0
  9154 ;;Total ram usage:        0 bytes
  9155 ;; Hardware stack levels used:    1
  9156 ;; Hardware stack levels required when called:    2
  9157 ;; This function calls:
  9158 ;;		Nothing
  9159 ;; This function is called by:
  9160 ;;		_main
  9161 ;; This function uses a non-reentrant model
  9162 ;;
  9163                           
  9164                           
  9165                           ;psect for function _CDS_Initialization
  9166  0B62                     _CDS_Initialization:	
  9167                           
  9168                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9169                           
  9170                           ;incstack = 0
  9171                           ; Regs used in _CDS_Initialization: []
  9172  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  9173  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  9174  0B64  142B               	bsf	__CDS,0
  9175  0B65  0008               	return
  9176  0B66                     __end_of_CDS_Initialization:	
  9177                           
  9178                           	psect	text62
  9179  0C2A                     __ptext62:	
  9180 ;; *************** function _ISR *****************
  9181 ;; Defined at:
  9182 ;;		line 107 in file "../src/MCU_B1.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;		None
  9185 ;; Auto vars:     Size  Location     Type
  9186 ;;		None
  9187 ;; Return value:  Size  Location     Type
  9188 ;;		None               void
  9189 ;; Registers used:
  9190 ;;		wreg, status,2, status,0, pclath, cstack
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9196 ;;      Params:         0       0       0       0
  9197 ;;      Locals:         0       0       0       0
  9198 ;;      Temps:          4       0       0       0
  9199 ;;      Totals:         4       0       0       0
  9200 ;;Total ram usage:        4 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; Hardware stack levels required when called:    1
  9203 ;; This function calls:
  9204 ;;		_TMR1_ISR
  9205 ;; This function is called by:
  9206 ;;		Interrupt level 1
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           
  9211                           ;psect for function _ISR
  9212  0C2A                     _ISR:	
  9213                           
  9214                           ;MCU_B1.c: 109: ;;
  9215                           ;MCU_B1.c: 111: ;;
  9216                           ;MCU_B1.c: 113: TMR1_ISR();
  9217  0C2A  158A  250C  158A   	fcall	_TMR1_ISR
  9218  0C2D  0873               	movf	??_ISR+3,w
  9219  0C2E  1283               	bcf	3,5	;RP0=0, select bank0
  9220  0C2F  1303               	bcf	3,6	;RP1=0, select bank0
  9221  0C30  00FF               	movwf	127
  9222  0C31  0872               	movf	??_ISR+2,w
  9223  0C32  008A               	movwf	10
  9224  0C33  0871               	movf	??_ISR+1,w
  9225  0C34  0084               	movwf	4
  9226  0C35  0E70               	swapf	??_ISR^(0+-128),w
  9227  0C36  0083               	movwf	3
  9228  0C37  0EFE               	swapf	126,f
  9229  0C38  0E7E               	swapf	126,w
  9230  0C39  0009               	retfie
  9231  0C3A                     __end_of_ISR:	
  9232                           
  9233                           	psect	intentry
  9234  0004                     __pintentry:	
  9235                           ;incstack = 0
  9236                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9237                           
  9238  0004                     interrupt_function:	
  9239  007E                     saved_w	set	btemp
  9240  0004  00FE               	movwf	btemp
  9241  0005  0E03               	swapf	3,w
  9242  0006  00F0               	movwf	??_ISR
  9243  0007  0804               	movf	4,w
  9244  0008  00F1               	movwf	??_ISR+1
  9245  0009  080A               	movf	10,w
  9246  000A  00F2               	movwf	??_ISR+2
  9247  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9248  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9249  000D  087F               	movf	btemp+1,w
  9250  000E  00F3               	movwf	??_ISR+3
  9251  000F  158A  2C2A         	ljmp	_ISR
  9252                           
  9253                           	psect	text63
  9254  0D0C                     __ptext63:	
  9255 ;; *************** function _TMR1_ISR *****************
  9256 ;; Defined at:
  9257 ;;		line 209 in file "../src/MCU_B1.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;		None
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;		None
  9262 ;; Return value:  Size  Location     Type
  9263 ;;		None               void
  9264 ;; Registers used:
  9265 ;;		wreg, status,2
  9266 ;; Tracked objects:
  9267 ;;		On entry : 0/0
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9271 ;;      Params:         0       0       0       0
  9272 ;;      Locals:         0       0       0       0
  9273 ;;      Temps:          0       0       0       0
  9274 ;;      Totals:         0       0       0       0
  9275 ;;Total ram usage:        0 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; This function calls:
  9278 ;;		Nothing
  9279 ;; This function is called by:
  9280 ;;		_ISR
  9281 ;; This function uses a non-reentrant model
  9282 ;;
  9283                           
  9284                           
  9285                           ;psect for function _TMR1_ISR
  9286  0D0C                     _TMR1_ISR:	
  9287                           
  9288                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  9289                           
  9290                           ;incstack = 0
  9291                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9292  0D0C  1683               	bsf	3,5	;RP0=1, select bank1
  9293  0D0D  1303               	bcf	3,6	;RP1=0, select bank1
  9294  0D0E  1C0C               	btfss	12,0	;volatile
  9295  0D0F  0008               	return
  9296  0D10  1283               	bcf	3,5	;RP0=0, select bank0
  9297  0D11  1303               	bcf	3,6	;RP1=0, select bank0
  9298  0D12  1C0C               	btfss	12,0	;volatile
  9299  0D13  0008               	return
  9300                           
  9301                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
  9302  0D14  30FA               	movlw	250
  9303  0D15  008F               	movwf	15	;volatile
  9304                           
  9305                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
  9306  0D16  3038               	movlw	56
  9307  0D17  008E               	movwf	14	;volatile
  9308                           
  9309                           ;MCU_B1.c: 214: TMR1IF = 0;
  9310  0D18  100C               	bcf	12,0	;volatile
  9311                           
  9312                           ;MCU_B1.c: 234: Timer1.Count++;
  9313  0D19  3001               	movlw	1
  9314  0D1A  07B5               	addwf	_Timer1+1,f
  9315  0D1B  1803               	skipnc
  9316  0D1C  0AB6               	incf	_Timer1+2,f
  9317  0D1D  3000               	movlw	0
  9318  0D1E  07B6               	addwf	_Timer1+2,f
  9319                           
  9320                           ;MCU_B1.c: 235: if (Timer1.Count == 100) {
  9321  0D1F  3064               	movlw	100
  9322  0D20  0635               	xorwf	_Timer1+1,w
  9323  0D21  0436               	iorwf	_Timer1+2,w
  9324  0D22  1D03               	skipz
  9325  0D23  0008               	return
  9326                           
  9327                           ;MCU_B1.c: 236: Timer1.Count = 0;
  9328  0D24  01B5               	clrf	_Timer1+1
  9329  0D25  01B6               	clrf	_Timer1+2
  9330                           
  9331                           ;MCU_B1.c: 237: Timer1.Timeout = 1;
  9332  0D26  1434               	bsf	_Timer1,0
  9333  0D27  0008               	return
  9334  0D28                     __end_of_TMR1_ISR:	
  9335  007E                     btemp	set	126	;btemp
  9336  007E                     wtemp	set	126
  9337  007E                     wtemp0	set	126
  9338  0080                     wtemp1	set	128
  9339  0082                     wtemp2	set	130
  9340  0084                     wtemp3	set	132
  9341  0086                     wtemp4	set	134
  9342  0088                     wtemp5	set	136
  9343  007F                     wtemp6	set	127
  9344  007E                     ttemp	set	126
  9345  007E                     ttemp0	set	126
  9346  0081                     ttemp1	set	129
  9347  0084                     ttemp2	set	132
  9348  0087                     ttemp3	set	135
  9349  007F                     ttemp4	set	127
  9350  007E                     ltemp	set	126
  9351  007E                     ltemp0	set	126
  9352  0082                     ltemp1	set	130
  9353  0086                     ltemp2	set	134
  9354  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         140
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     20      77
    BANK1            80      0      80
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK0[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_CDS_Main
    _main->_getCDS_AD
    _main->_getPIR_AD
    _main->_getTemp_AD
    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->_getMain_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_setLED
    _PIR_Main->_setLights_Trigger
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _Load_Main->_getMain_LoadOK
    _getMain_LoadOK->_getLightsControl_OK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_getMain_LightsStatus
    _setLights->_setLights_Line
    _setLights_Line->_LightsPointSelect
    _Lights_Control->_LightsPointSelect
    _Lights_Close->_getMain_LightsStatus
    _Lights_Initialization->_setLights_Initialization
    _setLights_Initialization->_LightsPointSelect
    _setPIRLED_Main->_setLED
    _setLED_Initialization->_setLED
    _Exception_Main->_getAll_Lights_Line
    _Exception_Main->_setLED
    _Exception_Main->_setLights_Trigger
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _getLights_Status->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lights_Main
    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_setLights_Main
    _setLights_Main->_setLights
    _setLights->_getMain_All_Error_Status
    _Lights_Close->_getMain_LightsStatus
    _getMain_LightsStatus->_getLights_Status
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   21437
                                             15 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           3     3      0     459
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2381
                                              6 COMMON     1     0      1
                                              8 BANK0      6     6      0
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     827
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     573
                                              6 COMMON     1     0      1
                                              0 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     428
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1328
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1328
                                              8 BANK0      2     2      0
                            ___awdiv
           _getMain_All_Error_Status
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     753
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     303
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     303
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             9     9      0    3520
                                              6 BANK0      9     9      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1949
                                              7 BANK0      7     7      0
                            ___lwdiv
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              5 COMMON     2     2      0
                _getLightsControl_OK
 ---------------------------------------------------------------------------------
 (3) _getLightsControl_OK                                  1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 5     5      0     111
                                              4 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          5     5      0    1860
                                             10 BANK0      5     5      0
                       _Lights_Close
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0     798
                                              9 BANK0      1     1      0
                  _LightsPointSelect
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1     674
                                              6 BANK0      3     2      1
                  _LightsPointSelect
           _getMain_All_Error_Status
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      62
                                              6 COMMON     1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       5     5      0     161
                                              0 BANK0      5     5      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Lights_Close                                         1     1      0     269
                                              6 BANK0      1     1      0
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     269
                                              6 COMMON     1     1      0
                                              2 BANK0      4     4      0
                   _getLights_Status
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              6 COMMON     1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2108
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2108
                                              1 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2223
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2223
                                              1 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       6     6      0    3754
                                              6 BANK0      6     6      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _setLights_Trigger                                    3     2      1     863
                                              6 COMMON     1     0      1
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2068
                                              6 COMMON     1     0      1
                                              0 BANK0      1     1      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     303
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      68
                                              6 COMMON     1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
       _LightsPointSelect
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Close
       _getMain_LightsStatus
         _getLights_Status
           _LightsPointSelect
     _Lights_Control
       _LightsPointSelect
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getLights_Status
         _LightsPointSelect
     _setLights_Main
       _LightsPointSelect
       _setLights
         _LightsPointSelect
         _getMain_All_Error_Status
         _setLights_Line
           _LightsPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getLights_Status
         _LightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getLightsControl_OK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_LightsStatus
         _getLights_Status
           _LightsPointSelect
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      4D       5       96.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      A7      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Dec 09 16:57:43 2014

                     _WDT_Clearing 07FE          getMain_Lights_Count@count 0059  
                     ___awdiv@sign 005E                                 fsr 0004  
                              l111 0E01                                l244 0CC6  
                              l245 0CCE                                l604 0E7C  
                              l605 0E99                                l623 062C  
                              l703 0324                                l609 0E95  
                              l801 056B                                l806 0568  
                              l693 03A5                                l871 01E5  
                              l696 0238                                l872 004E  
                              l697 0370                                l698 036E  
                              l875 0054                                l877 0067  
                              _GIE 005F                                _RB2 0032  
                              _RA4 002C                                _LED 0077  
                              _RB3 0033                                _RA5 002D  
                              _RB4 0034                                _RB5 0035  
                              _PS0 0408                                _PS1 0409  
                              _PS2 040A                                _ISR 0C2A  
                              _PSA 040B                                _WDT 0037  
           getAll_Lights_Line@line 0076                                fsr0 0004  
                              indf 0000                    __end_of_ADC_Set 0B8B  
        __end_of_LightsPointSelect 0BB5                   _getLights_Status 0C3A  
          __size_of_Lights_Control 006D                               ?_ISR 0070  
                       Load_Main@i 0066                         Load_Main@j 0062  
                             l1215 0E4F                               l1074 0BFB  
                   _Load_Main$2511 0064                               l3222 0D3E  
                             l3216 0D35                               l3218 0D38  
                             l5004 0E46                               l5006 0E4A  
                             l5008 0E52                               l5112 0181  
                             l4314 0587                               l5130 01B7  
                             l5114 018C                               l3540 0E0C  
                             l4500 0729                               l4412 0F91  
                             l5108 0151                               l4270 0E6C  
                             l4350 05BE                               l4342 05B2  
                             l4430 0EF2                               l4280 0E80  
                             l4328 0599                               l4408 0F76  
                             l5072 00AD                               l5056 008A  
                             l4440 0EFA                               l4424 0EE7  
                             l5224 0FB5                               l4338 05AE  
                             l4346 05B6                               l5082 00FE  
                             l5074 00AE                               l4442 0F08  
                             l4372 05D8                               l5068 00A1  
                             l4604 07D6                               l4452 0F29  
                             l5236 0FD8                               l4278 0E78  
                             l5166 05FD                               l4390 0DC5  
                             l5094 0114                               l5086 0100  
                             l4542 0507                               l4288 0E90  
                             l4368 05D2                               l4376 05DE  
                             l5184 064D                               l5176 0623  
                             l4480 06EF                               l4392 0DEA  
                             l4624 0D8C                               l4456 0F31  
                             l4448 0F1E                               l4720 067B  
                             l3752 0CE7                               l5186 0630  
                             l4642 0773                               l4484 06F5  
                             l4388 0DE3                               l4732 06A0  
                             l4812 0463                               l4494 0707  
                             l4654 0798                               l4574 0558  
                             l4558 053D                               l4822 0491  
                             l4806 0447                               l4496 0713  
                             l4488 06FB                               l4584 0567  
                             l4728 0697                               l4498 071B  
                             l4682 0EC9                               l4674 0EA5  
                             l4842 04E7                               l4762 0D62  
                             l4676 0EB3                               l4924 031D  
                             l4748 06C4                               l4836 04D9  
                             l4828 04AD                               l4780 0408  
                             l4686 0ED4                               l4934 0346  
                             l4918 0311                               l4598 07BD  
                             l4790 041A                               l4792 041E  
                             l4784 040E                               l4866 0224  
                             l4786 0412                               l4788 0416  
                             l4796 0423                               l4894 0288  
                             l4798 0434                               l4984 0390  
                             l4888 0257              _myMain_Initialization 0003  
                     __CFG_WDTE$ON 0000                               u5300 0710  
                             u5205 0F1F                               u5320 0726  
                             u6105 02DB                               _PEIE 005E  
                             u5085 0DCE                               u5165 0EFD  
                             u3495 0E1C                               u2695 0C8D  
                             u5185 0F09                               u5195 0F15  
                             u5620 076F                               u6165 0337  
                             u5535 07E2                               u5715 0EB4  
                             u5725 0EC0                               u6525 0132  
                             u5735 0ECA                               u6720 0656  
                             u6625 01D4                               u6555 0177  
                             u6725 0639                               u6485 00CE  
                             u5695 0EA8                               u6575 019C  
                             u6495 00F2                               __CDS 002B  
          ?_setSYSC_Initialization 0070                               _SYSC 0026  
                             __PIR 00A0                               _Load 00CF  
                             _Temp 003A                               _main 0F99  
                             btemp 007E                    __end_of_WDT_Set 0C1B  
                             ltemp 007E                               start 0011  
                             ttemp 007E                               wtemp 007E  
                 __end_of_CDS_Main 0E22       __size_of_Temp_Initialization 0003  
                            ??_ISR 0070                  _setLights_Trigger 0CF1  
                    ??_Lights_Main 0063                      __CFG_PLLEN$ON 0000  
                 __end_of_LED_Main 0B56                 ?_setLights_Trigger 0076  
                 ??_setPIRLED_Main 005A                              ?_main 0068  
                  __end_of___awdiv 0F38                              _ADRES 001E  
                  ___awdiv@divisor 0059                              _T1CON 0010  
                  __end_of___lwdiv 0EDB                      ?_Lights_Close 0070  
                  ___awdiv@counter 005D                              _TMR1H 000F  
                            _TMR1L 000E                              _PORTA 0005  
                            _PORTB 0006                              _PORTC 0007  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087            __end_of_Timeout_Counter 0C93  
              ??_setLights_Trigger 0059                   __end_of_PIR_Main 01FF  
                 __end_of_TMR1_ISR 0D28                   __end_of_TMR1_Set 0C0D  
                            _getAD 0D28     __end_of_setSYSC_Initialization 0B6E  
                 __end_of_WDT_Main 0C6D                      _LightsControl 0039  
                   __CFG_BOREN$OFF 0000       __end_of_getMain_Lights_Count 0C5C  
                            pclath 000A                              ltemp0 007E  
                            ltemp1 0082                              ltemp2 0086  
                            ltemp3 0080     __size_of_setLED_Initialization 0012  
     __end_of_getMain_LightsStatus 0DEE      __end_of_setLED_Initialization 0C7F  
                            ttemp0 007E                              ttemp1 0081  
                            ttemp2 0084                              ttemp3 0087  
                            ttemp4 007F                              status 0003  
                            wtemp0 007E                              wtemp1 0080  
                            wtemp2 0082                              wtemp3 0084  
                            wtemp4 0086                              wtemp5 0088  
                            wtemp6 007F                  getPIR_AD@channel1 0065  
                getPIR_AD@channel2 0076             ?_setLoad_AH_AL_Restore 0070  
                setTemp_Main@error 0062                     _setLights_Main 0D6B  
                   _setLights_Line 0BCC                    __initialization 0013  
               __size_of_SYSC_Main 0003          __end_of_setLights_Trigger 0D0C  
                     __end_of_main 1000                   __end_of_Fosc_Set 0B78  
                   _Exception_Main 05E6                          ??_ADC_Set 0074  
                           ??_main 006C                     ??_Lights_Close 005F  
              __end_of_Lights_Main 0E5D         __size_of_LightsPointSelect 000A  
                           ?_getAD 0074             ?_myMain_Initialization 0070  
                           _ADCON0 001F                             _ADCON1 009F  
                 ___awdiv@dividend 005B                          ??_WDT_Set 0074  
                           _ANSELA 0185                             _ANSELB 0186  
         _getMain_All_Error_Status 0E5D                             _FVRCON 009D  
           getLights_Status@lights 0059                             _PIRLED 0030  
                           _OSCCON 0090                 __size_of_Load_Main 01AE  
                           _TMR1IE 0460                             _TMR1IF 0060  
                           _IO_Set 0CA8             getLights_Status@status 005A  
           __end_of_setLights_Main 0D93             __end_of_setLights_Line 0BD8  
              _getLightsControl_OK 0B93       __size_of_SYSC_Initialization 0003  
       __end_of_Mcu_Initialization 0C2A                             _Lights 0078  
                           _Timer1 0034        __size_of_CDS_Initialization 0004  
          ??_Lights_Initialization 0077             __end_of_Exception_Main 0659  
                        ??___awdiv 0074                          ??___lwdiv 0074  
             Exception_Main@status 0061                             _setLED 056F  
                           _myMain 0020                   ___awdiv@quotient 005F  
               __size_of_Temp_Main 0003        __end_of_Load_Initialization 0B7E  
             ?_getLightsControl_OK 0070                             saved_w 007E  
                 ?_Timeout_Counter 0070        getMain_Lights_Count@status1 005C  
      getMain_Lights_Count@status2 005A        getMain_Lights_Count@status3 005B  
                __end_of_SYSC_Main 0B5C                     _Lights_Control 0739  
          __size_of_LedPointSelect 001A                          ?_CDS_Main 0070  
          __size_of_getMain_LoadOK 000C        __size_of_PIR_Initialization 000B  
       getMain_LightsStatus@status 005E            __end_of__initialization 0022  
                        ?_LED_Main 0070                      ?_my_MainTimer 0070  
                  ?_setLights_Main 0070                    ?_setLights_Line 0070  
                    ?_setSYSC_Main 0070         __size_of_setLights_Trigger 001B  
                   __pcstackCOMMON 0070                 __size_of_getCDS_AD 002A  
                  ?_Exception_Main 0070           __end_of_getLights_Status 0C4B  
                    __end_of_getAD 0D44                          ?_PIR_Main 0070  
                        ?_TMR1_ISR 0070                          ?_TMR1_Set 0070  
           setLoad_AH_AL_Restore@i 0075                 _LED_Initialization 0BC0  
               __size_of_getPIR_AD 013C                        _Lights_Main 0E22  
         _setLights_Initialization 0B6E               _getMain_Lights_Count 0C4B  
                        ?_WDT_Main 0070                  __end_of_Load_Main 03AD  
            ??_getLightsControl_OK 0074               _getMain_LightsStatus 0DBD  
       __end_of_set_TimeoutCleared 0B84                ?_LED_Initialization 0070  
           __end_of_Lights_Control 07A6              getMain_LightsStatus@i 005C  
                          ??_getAD 0075                _Temp_Initialization 0B5C  
                       ??_CDS_Main 0074                         __pbssBANK0 0020  
                       __pbssBANK1 00A0                          ?_Fosc_Set 0070  
      __size_of_getAll_Lights_Line 000D                  __end_of_Temp_Main 0B62  
                          ?_IO_Set 0070                    __CFG_VCAPEN$DIS 0000  
                   ??_my_MainTimer 0074                         ??_LED_Main 0077  
             __end_of_Lights_Close 0CA8                     ??_setSYSC_Main 0075  
        getMain_LightsStatus@count 005B               ??_LED_Initialization 0077  
                LedPointSelect@led 0075                         __pmaintext 0F99  
             ?_Temp_Initialization 0070                         ??_PIR_Main 005F  
                       ??_TMR1_ISR 0070                      ?_setTemp_Main 0070  
               __size_of_setLights 0061                         _getLoad_AD 0659  
                       ??_TMR1_Set 0074                         __pintentry 0004  
                       _getLoad_OK 0B8B                            ?_setLED 0076  
          setLights_Trigger@lights 005A              ?_getMain_Lights_Count 0070  
                          _ADC_Set 0B84                         _getTemp_AD 0D44  
                       ??_WDT_Main 0074              ?_getMain_LightsStatus 0070  
           __size_of_getCDS_Status 0008                    ?_Lights_Control 0070  
                __end_of_getCDS_AD 0DBD                            _WDT_Set 0C0D  
                       ??_Fosc_Set 0074                  __end_of_getPIR_AD 04E9  
          ??_setLoad_AH_AL_Restore 0074                    __size_of_IO_Set 0015  
                       getCDS_AD@i 005B                         getCDS_AD@j 005C  
                          _Lights1 0046                            _VarLED1 0051  
                          _VarLED2 0055              ??_Temp_Initialization 0074  
                   ??_setTemp_Main 0061                            ___awdiv 0EDB  
        getLightsControl_OK@loadok 0074                            ___lwdiv 0E9B  
                      PIR_Main@cds 0067                    __size_of_setLED 0077  
                          __ptext0 0000                            __ptext1 0CD7  
                          __ptext2 0003                            __ptext3 0D44  
                          __ptext4 03AD                            __ptext5 0659  
                          __ptext6 0D93                            __ptext7 0D28  
                          __ptext8 0B7E                            __ptext9 0C7F  
                       getPIR_AD@i 0066                         getPIR_AD@j 0064  
                     __size_of_ISR 0010         ??_getMain_All_Error_Status 0074  
              _SYSC_Initialization 0B56            ??_myMain_Initialization 0074  
         ??_setTemp_Initialization 0074                     _LedPointSelect 0CBD  
                   _getMain_LoadOK 0BD8                            clrloop0 0BA4  
                __end_of_setLights 0F99               end_of_initialization 0022  
                    _getCDS_Status 0B9B               ?_SYSC_Initialization 0070  
            _setLED_Initialization 0C6D                        ?_getLoad_AD 0070  
   __size_of_Lights_Initialization 0004                        ?_getLoad_OK 0070  
           ??_getMain_Lights_Count 0074      __end_of_Lights_Initialization 0B6A  
           ??_getMain_LightsStatus 0076                        ?_getTemp_AD 0070  
         setLED_Initialization@led 005A                 _Mcu_Initialization 0C1B  
             __end_of_my_MainTimer 0CF1               __end_of_setSYSC_Main 07E8  
           __end_of_LedPointSelect 0CD7             __end_of_getMain_LoadOK 0BE4  
              setPIRLED_Main@count 005B                ?_Mcu_Initialization 0070  
            __size_of_Lights_Close 0015            __size_of_setPIRLED_Main 006F  
                 ??_setLights_Main 0077                   ??_setLights_Line 0076  
             setLights_Main@lights 0062                          _SYSC_Main 0B59  
  getMain_All_Error_Status@command 005D                  __size_of_CDS_Main 0034  
                   ?_getCDS_Status 0070              ??_SYSC_Initialization 0074  
                 ??_Exception_Main 005F                     __end_of_IO_Set 0CBD  
       __end_of_CDS_Initialization 0B66         ??_setLights_Initialization 0076  
                __size_of_LED_Main 0003               ??_Mcu_Initialization 0075  
                    ?_WDT_Clearing 0070                  ?_getLights_Status 0070  
                     ?_Lights_Main 0070                  __size_of_PIR_Main 01DA  
                __size_of_TMR1_ISR 001C                 ??_getLights_Status 0076  
                __size_of_TMR1_Set 000E                     __end_of_setLED 05E6  
         ??_setSYSC_Initialization 0074                       _Lights_Close 0C93  
                __size_of_WDT_Main 0011                _Lights_Control$4403 005B  
              start_initialization 0013                    ?_LedPointSelect 0070  
             setLights_Line@lights 0076                          _Load_Main 01FF  
                      __end_of_ISR 0C3A                    ?_getMain_LoadOK 0070  
       __end_of_PIR_Initialization 0BC0       __size_of_Load_Initialization 0006  
  __size_of_setTemp_Initialization 0001                getCDS_Status@status 0074  
             __end_of_setTemp_Main 056F                __size_of_getLoad_AD 0071  
              __size_of_getLoad_OK 0008                         ?_SYSC_Main 0070  
               _set_TimeoutCleared 0B7E                           ??_IO_Set 0074  
         __size_of_Timeout_Counter 0014                          _VarErrLED 004D  
              __size_of_getTemp_AD 0027             ?_setLED_Initialization 0070  
                __size_of_Fosc_Set 0005                          _Temp_Main 0B5F  
                  setLights@lights 0061                ?_set_TimeoutCleared 0070  
                   ??_WDT_Clearing 0074                Exception_Main@count 0060  
                  setLights@status 005F                Exception_Main@error 0064  
      __end_of_getLightsControl_OK 0B9B                           ??_setLED 0077  
                         ?_ADC_Set 0070                   ??_Lights_Control 0059  
 __end_of_getMain_All_Error_Status 0E9B                        __pbssCOMMON 0077  
                        ___latbits 0001                         ?_Load_Main 0070  
                    __pcstackBANK0 0059               ??_set_TimeoutCleared 0074  
       __end_of_getAll_Lights_Line 0BF1                           ?_WDT_Set 0070  
                  ??_getCDS_Status 0074                      PIR_Main@error 0064  
                        _getCDS_AD 0D93     __size_of_setLoad_AH_AL_Restore 0016  
    __end_of_setLoad_AH_AL_Restore 07FE                          _getPIR_AD 03AD  
      __size_of_LED_Initialization 000C                    Exception_Main@i 0062  
                       ?_Temp_Main 0070                     Load_Main@adjgo 0063  
                 ___lwdiv@dividend 005B                     Load_Main@error 0065  
           _setTemp_Initialization 0002                      _PIR_Main$2993 0065  
                         ?___awdiv 0059              __size_of_my_MainTimer 001A  
                         ?___lwdiv 0059              __size_of_setSYSC_Main 0042  
                 getMain_LoadOK@ok 0076           setLights_Trigger@command 0076  
  __size_of_setSYSC_Initialization 0004     __size_of_myMain_Initialization 0001  
    __end_of_myMain_Initialization 0004                     __size_of_getAD 001C  
                 ___lwdiv@quotient 005E                     _setPIRLED_Main 06CA  
                         _CDS_Main 0DEE                        ??_SYSC_Main 0075  
      __end_of_Temp_Initialization 0B5F                  interrupt_function 0004  
                       ?_getCDS_AD 0076                           _LED_Main 0B53  
                        _setLights 0F38                          clear_ram0 0BA3  
 __end_of_setLights_Initialization 0B73                       _my_MainTimer 0CD7  
                       ?_getPIR_AD 0076                       _setSYSC_Main 07A6  
                         _GO_nDONE 00F9                  ??_Timeout_Counter 0074  
                         _PIR_Main 0025                       ??_getLoad_AD 0059  
                         _TMR1_ISR 0D0C                       ??_getLoad_OK 0074  
                         _TMR1_Set 0BFF                       ??_getTemp_AD 0059  
                         _WDT_Main 0C5C                   __size_of_ADC_Set 0007  
             __size_of_Lights_Main 003B              __size_of_setTemp_Main 0086  
                      ??_Load_Main 0060             __end_of_setPIRLED_Main 0739  
   getMain_All_Error_Status@status 005E                        getAD@adcon0 0075  
                      getAD@adcon1 0074               __end_of_WDT_Clearing 0800  
                         _Fosc_Set 0B73                   __size_of_WDT_Set 000E  
               __end_of_getLoad_AD 06CA                 __end_of_getLoad_OK 0B93  
__size_of_getMain_All_Error_Status 003E          ?_getMain_All_Error_Status 0070  
                       ?_setLights 005F                 __end_of_getTemp_AD 0D6B  
           _setSYSC_Initialization 0B6A                  getLoad_AD@channel 005B  
                _DetectSYSC_Signal 0BF1                           _SwDetect 0079  
                      ??_Temp_Main 0077      _getMain_All_Error_Status$2252 0059  
    _getMain_All_Error_Status$2253 005B                _Load_Initialization 0B78  
               ?_DetectSYSC_Signal 0070                          setLED@led 0059  
                     _setTemp_Main 04E9                   __size_of___awdiv 005D  
                 __size_of___lwdiv 0040                   ??_LedPointSelect 0074  
    __size_of_getMain_Lights_Count 0011                ??_DetectSYSC_Signal 0074  
               _CDS_Initialization 0B62                   ??_getMain_LoadOK 0075  
            _Lights_Initialization 0B66      __size_of_getMain_LightsStatus 0031  
                getTemp_AD@channel 0076                    ?_setPIRLED_Main 0070  
                  ___lwdiv@divisor 0059               ?_Load_Initialization 0070  
              ?_CDS_Initialization 0070                    ___lwdiv@counter 005D  
                         __ptext10 0C5C                           __ptext11 07FE  
                         __ptext20 0B6A                           __ptext12 0B5F  
                         __ptext21 0025                           __ptext13 04E9  
                         __ptext30 01FF                           __ptext22 0B9B  
                         __ptext14 0EDB                           __ptext31 0BD8  
                         __ptext23 0BB5                           __ptext15 0B5C  
                         __ptext40 0BCC                           __ptext32 0B93  
                         __ptext24 0C1B                           __ptext16 0002  
                         __ptext41 0B8B                           __ptext33 0C4B  
                         __ptext25 0C0D                           __ptext17 0B59  
                         __ptext50 0C6D                           __ptext42 0739  
                         __ptext34 0E9B                           __ptext26 0BFF  
                         __ptext18 07A6                           __ptext51 05E6  
                         __ptext43 0C93                           __ptext35 0B78  
                         __ptext27 0CA8                           __ptext19 0B56  
                         __ptext60 0DEE                           __ptext52 0CF1  
                         __ptext44 0DBD                           __ptext36 07E8  
                         __ptext28 0B73                           __ptext61 0B62  
                         __ptext53 056F                           __ptext45 0B66  
                         __ptext37 0E22                           __ptext29 0B84  
                         __ptext62 0C2A                           __ptext54 0CBD  
                         __ptext46 0B6E                           __ptext38 0D6B  
                         __ptext63 0D0C                           __ptext55 0E5D  
                         __ptext47 0B53                           __ptext39 0F38  
                         __ptext56 0C3A                           __ptext48 06CA  
                         __ptext57 0BE4                           __ptext49 0BC0  
                         __ptext58 0BAB                           __ptext59 0BF1  
        __size_of_getLights_Status 0011        __end_of_SYSC_Initialization 0B59  
          ??_setLED_Initialization 0077                        ??_getCDS_AD 0059  
                    setLED@command 0076          __end_of_DetectSYSC_Signal 0BFF  
                    __size_of_main 0067                        ??_getPIR_AD 0061  
               _PIR_Initialization 0BB5               ??_CDS_Initialization 0074  
      __size_of_Mcu_Initialization 000F                       getLoad_OK@ok 0074  
              ?_PIR_Initialization 0070                           main@argc 0068  
                         main@argv 006A  __size_of_setLights_Initialization 0005  
        ?_setLights_Initialization 0070              ??_Load_Initialization 0076  
             Lights_Control@lights 005D               ??_PIR_Initialization 0074  
                         intlevel1 0000                   _Lights_Main$4394 0066  
                      ??_setLights 0060            ?_setTemp_Initialization 0070  
          LightsPointSelect@lights 0075                 _getAll_Lights_Line 0BE4  
                      getLoad_AD@i 005E                        getLoad_AD@j 005D  
                      getLoad_AD@k 005C            __size_of_setLights_Main 0028  
          __size_of_setLights_Line 000C                ?_getAll_Lights_Line 0070  
           ?_Lights_Initialization 0070            __size_of_Exception_Main 0073  
            __size_of_WDT_Clearing 0002     setLights_Initialization@lights 0076  
     __size_of_getLightsControl_OK 0008        __size_of_set_TimeoutCleared 0006  
                _LightsPointSelect 0BAB               ??_getAll_Lights_Line 0076  
               __CFG_FOSC$INTOSCIO 0000                 ?_LightsPointSelect 0070  
                  _Timeout_Counter 0C7F         __end_of_LED_Initialization 0BCC  
            __end_of_getCDS_Status 0BA3     __end_of_setTemp_Initialization 0003  
       __size_of_DetectSYSC_Signal 000E                  getCDS_AD@channel1 005D  
                getCDS_AD@channel2 0076                ??_LightsPointSelect 0074  
            _setLoad_AH_AL_Restore 07E8  
