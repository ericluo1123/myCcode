

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Oct 31 08:02:25 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,delta=2
    67                           	psect	intentry,global,class=CODE,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    69                           	dabs	1,0x7E,2
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000D                     	;# 
    83  000E                     	;# 
    84  000E                     	;# 
    85  000F                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0014                     	;# 
    91  0015                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  001D                     	;# 
   102  001E                     	;# 
   103  001F                     	;# 
   104  0081                     	;# 
   105  0085                     	;# 
   106  0086                     	;# 
   107  0087                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  008F                     	;# 
   113  0090                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0094                     	;# 
   119  0095                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0096                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009F                     	;# 
   128  0108                     	;# 
   129  0109                     	;# 
   130  010C                     	;# 
   131  010C                     	;# 
   132  010D                     	;# 
   133  010D                     	;# 
   134  010E                     	;# 
   135  010F                     	;# 
   136  0185                     	;# 
   137  0186                     	;# 
   138  018C                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  000E                     	;# 
   154  000F                     	;# 
   155  0010                     	;# 
   156  0011                     	;# 
   157  0012                     	;# 
   158  0013                     	;# 
   159  0014                     	;# 
   160  0015                     	;# 
   161  0015                     	;# 
   162  0016                     	;# 
   163  0017                     	;# 
   164  0018                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001B                     	;# 
   168  001B                     	;# 
   169  001C                     	;# 
   170  001D                     	;# 
   171  001E                     	;# 
   172  001F                     	;# 
   173  0081                     	;# 
   174  0085                     	;# 
   175  0086                     	;# 
   176  0087                     	;# 
   177  0089                     	;# 
   178  008C                     	;# 
   179  008D                     	;# 
   180  008E                     	;# 
   181  008F                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0095                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0096                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009F                     	;# 
   197  0108                     	;# 
   198  0109                     	;# 
   199  010C                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  0185                     	;# 
   206  0186                     	;# 
   207  018C                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  000E                     	;# 
   222  000E                     	;# 
   223  000F                     	;# 
   224  0010                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0014                     	;# 
   229  0015                     	;# 
   230  0015                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001B                     	;# 
   238  001C                     	;# 
   239  001D                     	;# 
   240  001E                     	;# 
   241  001F                     	;# 
   242  0081                     	;# 
   243  0085                     	;# 
   244  0086                     	;# 
   245  0087                     	;# 
   246  0089                     	;# 
   247  008C                     	;# 
   248  008D                     	;# 
   249  008E                     	;# 
   250  008F                     	;# 
   251  0090                     	;# 
   252  0091                     	;# 
   253  0092                     	;# 
   254  0093                     	;# 
   255  0093                     	;# 
   256  0094                     	;# 
   257  0095                     	;# 
   258  0095                     	;# 
   259  0096                     	;# 
   260  0096                     	;# 
   261  0098                     	;# 
   262  0099                     	;# 
   263  009C                     	;# 
   264  009D                     	;# 
   265  009F                     	;# 
   266  0108                     	;# 
   267  0109                     	;# 
   268  010C                     	;# 
   269  010C                     	;# 
   270  010D                     	;# 
   271  010D                     	;# 
   272  010E                     	;# 
   273  010F                     	;# 
   274  0185                     	;# 
   275  0186                     	;# 
   276  018C                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0009                     	;# 
   286  000A                     	;# 
   287  000B                     	;# 
   288  000C                     	;# 
   289  000D                     	;# 
   290  000E                     	;# 
   291  000E                     	;# 
   292  000F                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0013                     	;# 
   297  0014                     	;# 
   298  0015                     	;# 
   299  0015                     	;# 
   300  0016                     	;# 
   301  0017                     	;# 
   302  0018                     	;# 
   303  0019                     	;# 
   304  001A                     	;# 
   305  001B                     	;# 
   306  001B                     	;# 
   307  001C                     	;# 
   308  001D                     	;# 
   309  001E                     	;# 
   310  001F                     	;# 
   311  0081                     	;# 
   312  0085                     	;# 
   313  0086                     	;# 
   314  0087                     	;# 
   315  0089                     	;# 
   316  008C                     	;# 
   317  008D                     	;# 
   318  008E                     	;# 
   319  008F                     	;# 
   320  0090                     	;# 
   321  0091                     	;# 
   322  0092                     	;# 
   323  0093                     	;# 
   324  0093                     	;# 
   325  0094                     	;# 
   326  0095                     	;# 
   327  0095                     	;# 
   328  0096                     	;# 
   329  0096                     	;# 
   330  0098                     	;# 
   331  0099                     	;# 
   332  009C                     	;# 
   333  009D                     	;# 
   334  009F                     	;# 
   335  0108                     	;# 
   336  0109                     	;# 
   337  010C                     	;# 
   338  010C                     	;# 
   339  010D                     	;# 
   340  010D                     	;# 
   341  010E                     	;# 
   342  010F                     	;# 
   343  0185                     	;# 
   344  0186                     	;# 
   345  018C                     	;# 
   346  0000                     	;# 
   347  0001                     	;# 
   348  0002                     	;# 
   349  0003                     	;# 
   350  0004                     	;# 
   351  0005                     	;# 
   352  0006                     	;# 
   353  0007                     	;# 
   354  0009                     	;# 
   355  000A                     	;# 
   356  000B                     	;# 
   357  000C                     	;# 
   358  000D                     	;# 
   359  000E                     	;# 
   360  000E                     	;# 
   361  000F                     	;# 
   362  0010                     	;# 
   363  0011                     	;# 
   364  0012                     	;# 
   365  0013                     	;# 
   366  0014                     	;# 
   367  0015                     	;# 
   368  0015                     	;# 
   369  0016                     	;# 
   370  0017                     	;# 
   371  0018                     	;# 
   372  0019                     	;# 
   373  001A                     	;# 
   374  001B                     	;# 
   375  001B                     	;# 
   376  001C                     	;# 
   377  001D                     	;# 
   378  001E                     	;# 
   379  001F                     	;# 
   380  0081                     	;# 
   381  0085                     	;# 
   382  0086                     	;# 
   383  0087                     	;# 
   384  0089                     	;# 
   385  008C                     	;# 
   386  008D                     	;# 
   387  008E                     	;# 
   388  008F                     	;# 
   389  0090                     	;# 
   390  0091                     	;# 
   391  0092                     	;# 
   392  0093                     	;# 
   393  0093                     	;# 
   394  0094                     	;# 
   395  0095                     	;# 
   396  0095                     	;# 
   397  0096                     	;# 
   398  0096                     	;# 
   399  0098                     	;# 
   400  0099                     	;# 
   401  009C                     	;# 
   402  009D                     	;# 
   403  009F                     	;# 
   404  0108                     	;# 
   405  0109                     	;# 
   406  010C                     	;# 
   407  010C                     	;# 
   408  010D                     	;# 
   409  010D                     	;# 
   410  010E                     	;# 
   411  010F                     	;# 
   412  0185                     	;# 
   413  0186                     	;# 
   414  018C                     	;# 
   415  0000                     	;# 
   416  0001                     	;# 
   417  0002                     	;# 
   418  0003                     	;# 
   419  0004                     	;# 
   420  0005                     	;# 
   421  0006                     	;# 
   422  0007                     	;# 
   423  0009                     	;# 
   424  000A                     	;# 
   425  000B                     	;# 
   426  000C                     	;# 
   427  000D                     	;# 
   428  000E                     	;# 
   429  000E                     	;# 
   430  000F                     	;# 
   431  0010                     	;# 
   432  0011                     	;# 
   433  0012                     	;# 
   434  0013                     	;# 
   435  0014                     	;# 
   436  0015                     	;# 
   437  0015                     	;# 
   438  0016                     	;# 
   439  0017                     	;# 
   440  0018                     	;# 
   441  0019                     	;# 
   442  001A                     	;# 
   443  001B                     	;# 
   444  001B                     	;# 
   445  001C                     	;# 
   446  001D                     	;# 
   447  001E                     	;# 
   448  001F                     	;# 
   449  0081                     	;# 
   450  0085                     	;# 
   451  0086                     	;# 
   452  0087                     	;# 
   453  0089                     	;# 
   454  008C                     	;# 
   455  008D                     	;# 
   456  008E                     	;# 
   457  008F                     	;# 
   458  0090                     	;# 
   459  0091                     	;# 
   460  0092                     	;# 
   461  0093                     	;# 
   462  0093                     	;# 
   463  0094                     	;# 
   464  0095                     	;# 
   465  0095                     	;# 
   466  0096                     	;# 
   467  0096                     	;# 
   468  0098                     	;# 
   469  0099                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009F                     	;# 
   473  0108                     	;# 
   474  0109                     	;# 
   475  010C                     	;# 
   476  010C                     	;# 
   477  010D                     	;# 
   478  010D                     	;# 
   479  010E                     	;# 
   480  010F                     	;# 
   481  0185                     	;# 
   482  0186                     	;# 
   483  018C                     	;# 
   484  0000                     	;# 
   485  0001                     	;# 
   486  0002                     	;# 
   487  0003                     	;# 
   488  0004                     	;# 
   489  0005                     	;# 
   490  0006                     	;# 
   491  0007                     	;# 
   492  0009                     	;# 
   493  000A                     	;# 
   494  000B                     	;# 
   495  000C                     	;# 
   496  000D                     	;# 
   497  000E                     	;# 
   498  000E                     	;# 
   499  000F                     	;# 
   500  0010                     	;# 
   501  0011                     	;# 
   502  0012                     	;# 
   503  0013                     	;# 
   504  0014                     	;# 
   505  0015                     	;# 
   506  0015                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001B                     	;# 
   514  001C                     	;# 
   515  001D                     	;# 
   516  001E                     	;# 
   517  001F                     	;# 
   518  0081                     	;# 
   519  0085                     	;# 
   520  0086                     	;# 
   521  0087                     	;# 
   522  0089                     	;# 
   523  008C                     	;# 
   524  008D                     	;# 
   525  008E                     	;# 
   526  008F                     	;# 
   527  0090                     	;# 
   528  0091                     	;# 
   529  0092                     	;# 
   530  0093                     	;# 
   531  0093                     	;# 
   532  0094                     	;# 
   533  0095                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0096                     	;# 
   537  0098                     	;# 
   538  0099                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009F                     	;# 
   542  0108                     	;# 
   543  0109                     	;# 
   544  010C                     	;# 
   545  010C                     	;# 
   546  010D                     	;# 
   547  010D                     	;# 
   548  010E                     	;# 
   549  010F                     	;# 
   550  0185                     	;# 
   551  0186                     	;# 
   552  018C                     	;# 
   553  0000                     	;# 
   554  0001                     	;# 
   555  0002                     	;# 
   556  0003                     	;# 
   557  0004                     	;# 
   558  0005                     	;# 
   559  0006                     	;# 
   560  0007                     	;# 
   561  0009                     	;# 
   562  000A                     	;# 
   563  000B                     	;# 
   564  000C                     	;# 
   565  000D                     	;# 
   566  000E                     	;# 
   567  000E                     	;# 
   568  000F                     	;# 
   569  0010                     	;# 
   570  0011                     	;# 
   571  0012                     	;# 
   572  0013                     	;# 
   573  0014                     	;# 
   574  0015                     	;# 
   575  0015                     	;# 
   576  0016                     	;# 
   577  0017                     	;# 
   578  0018                     	;# 
   579  0019                     	;# 
   580  001A                     	;# 
   581  001B                     	;# 
   582  001B                     	;# 
   583  001C                     	;# 
   584  001D                     	;# 
   585  001E                     	;# 
   586  001F                     	;# 
   587  0081                     	;# 
   588  0085                     	;# 
   589  0086                     	;# 
   590  0087                     	;# 
   591  0089                     	;# 
   592  008C                     	;# 
   593  008D                     	;# 
   594  008E                     	;# 
   595  008F                     	;# 
   596  0090                     	;# 
   597  0091                     	;# 
   598  0092                     	;# 
   599  0093                     	;# 
   600  0093                     	;# 
   601  0094                     	;# 
   602  0095                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0096                     	;# 
   606  0098                     	;# 
   607  0099                     	;# 
   608  009C                     	;# 
   609  009D                     	;# 
   610  009F                     	;# 
   611  0108                     	;# 
   612  0109                     	;# 
   613  010C                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  010D                     	;# 
   617  010E                     	;# 
   618  010F                     	;# 
   619  0185                     	;# 
   620  0186                     	;# 
   621  018C                     	;# 
   622  0000                     	;# 
   623  0001                     	;# 
   624  0002                     	;# 
   625  0003                     	;# 
   626  0004                     	;# 
   627  0005                     	;# 
   628  0006                     	;# 
   629  0007                     	;# 
   630  0009                     	;# 
   631  000A                     	;# 
   632  000B                     	;# 
   633  000C                     	;# 
   634  000D                     	;# 
   635  000E                     	;# 
   636  000E                     	;# 
   637  000F                     	;# 
   638  0010                     	;# 
   639  0011                     	;# 
   640  0012                     	;# 
   641  0013                     	;# 
   642  0014                     	;# 
   643  0015                     	;# 
   644  0015                     	;# 
   645  0016                     	;# 
   646  0017                     	;# 
   647  0018                     	;# 
   648  0019                     	;# 
   649  001A                     	;# 
   650  001B                     	;# 
   651  001B                     	;# 
   652  001C                     	;# 
   653  001D                     	;# 
   654  001E                     	;# 
   655  001F                     	;# 
   656  0081                     	;# 
   657  0085                     	;# 
   658  0086                     	;# 
   659  0087                     	;# 
   660  0089                     	;# 
   661  008C                     	;# 
   662  008D                     	;# 
   663  008E                     	;# 
   664  008F                     	;# 
   665  0090                     	;# 
   666  0091                     	;# 
   667  0092                     	;# 
   668  0093                     	;# 
   669  0093                     	;# 
   670  0094                     	;# 
   671  0095                     	;# 
   672  0095                     	;# 
   673  0096                     	;# 
   674  0096                     	;# 
   675  0098                     	;# 
   676  0099                     	;# 
   677  009C                     	;# 
   678  009D                     	;# 
   679  009F                     	;# 
   680  0108                     	;# 
   681  0109                     	;# 
   682  010C                     	;# 
   683  010C                     	;# 
   684  010D                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  010F                     	;# 
   688  0185                     	;# 
   689  0186                     	;# 
   690  018C                     	;# 
   691  0000                     	;# 
   692  0001                     	;# 
   693  0002                     	;# 
   694  0003                     	;# 
   695  0004                     	;# 
   696  0005                     	;# 
   697  0006                     	;# 
   698  0007                     	;# 
   699  0009                     	;# 
   700  000A                     	;# 
   701  000B                     	;# 
   702  000C                     	;# 
   703  000D                     	;# 
   704  000E                     	;# 
   705  000E                     	;# 
   706  000F                     	;# 
   707  0010                     	;# 
   708  0011                     	;# 
   709  0012                     	;# 
   710  0013                     	;# 
   711  0014                     	;# 
   712  0015                     	;# 
   713  0015                     	;# 
   714  0016                     	;# 
   715  0017                     	;# 
   716  0018                     	;# 
   717  0019                     	;# 
   718  001A                     	;# 
   719  001B                     	;# 
   720  001B                     	;# 
   721  001C                     	;# 
   722  001D                     	;# 
   723  001E                     	;# 
   724  001F                     	;# 
   725  0081                     	;# 
   726  0085                     	;# 
   727  0086                     	;# 
   728  0087                     	;# 
   729  0089                     	;# 
   730  008C                     	;# 
   731  008D                     	;# 
   732  008E                     	;# 
   733  008F                     	;# 
   734  0090                     	;# 
   735  0091                     	;# 
   736  0092                     	;# 
   737  0093                     	;# 
   738  0093                     	;# 
   739  0094                     	;# 
   740  0095                     	;# 
   741  0095                     	;# 
   742  0096                     	;# 
   743  0096                     	;# 
   744  0098                     	;# 
   745  0099                     	;# 
   746  009C                     	;# 
   747  009D                     	;# 
   748  009F                     	;# 
   749  0108                     	;# 
   750  0109                     	;# 
   751  010C                     	;# 
   752  010C                     	;# 
   753  010D                     	;# 
   754  010D                     	;# 
   755  010E                     	;# 
   756  010F                     	;# 
   757  0185                     	;# 
   758  0186                     	;# 
   759  018C                     	;# 
   760  0000                     	;# 
   761  0001                     	;# 
   762  0002                     	;# 
   763  0003                     	;# 
   764  0004                     	;# 
   765  0005                     	;# 
   766  0006                     	;# 
   767  0007                     	;# 
   768  0009                     	;# 
   769  000A                     	;# 
   770  000B                     	;# 
   771  000C                     	;# 
   772  000D                     	;# 
   773  000E                     	;# 
   774  000E                     	;# 
   775  000F                     	;# 
   776  0010                     	;# 
   777  0011                     	;# 
   778  0012                     	;# 
   779  0013                     	;# 
   780  0014                     	;# 
   781  0015                     	;# 
   782  0015                     	;# 
   783  0016                     	;# 
   784  0017                     	;# 
   785  0018                     	;# 
   786  0019                     	;# 
   787  001A                     	;# 
   788  001B                     	;# 
   789  001B                     	;# 
   790  001C                     	;# 
   791  001D                     	;# 
   792  001E                     	;# 
   793  001F                     	;# 
   794  0081                     	;# 
   795  0085                     	;# 
   796  0086                     	;# 
   797  0087                     	;# 
   798  0089                     	;# 
   799  008C                     	;# 
   800  008D                     	;# 
   801  008E                     	;# 
   802  008F                     	;# 
   803  0090                     	;# 
   804  0091                     	;# 
   805  0092                     	;# 
   806  0093                     	;# 
   807  0093                     	;# 
   808  0094                     	;# 
   809  0095                     	;# 
   810  0095                     	;# 
   811  0096                     	;# 
   812  0096                     	;# 
   813  0098                     	;# 
   814  0099                     	;# 
   815  009C                     	;# 
   816  009D                     	;# 
   817  009F                     	;# 
   818  0108                     	;# 
   819  0109                     	;# 
   820  010C                     	;# 
   821  010C                     	;# 
   822  010D                     	;# 
   823  010D                     	;# 
   824  010E                     	;# 
   825  010F                     	;# 
   826  0185                     	;# 
   827  0186                     	;# 
   828  018C                     	;# 
   829  0000                     	;# 
   830  0001                     	;# 
   831  0002                     	;# 
   832  0003                     	;# 
   833  0004                     	;# 
   834  0005                     	;# 
   835  0006                     	;# 
   836  0007                     	;# 
   837  0009                     	;# 
   838  000A                     	;# 
   839  000B                     	;# 
   840  000C                     	;# 
   841  000D                     	;# 
   842  000E                     	;# 
   843  000E                     	;# 
   844  000F                     	;# 
   845  0010                     	;# 
   846  0011                     	;# 
   847  0012                     	;# 
   848  0013                     	;# 
   849  0014                     	;# 
   850  0015                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  001D                     	;# 
   861  001E                     	;# 
   862  001F                     	;# 
   863  0081                     	;# 
   864  0085                     	;# 
   865  0086                     	;# 
   866  0087                     	;# 
   867  0089                     	;# 
   868  008C                     	;# 
   869  008D                     	;# 
   870  008E                     	;# 
   871  008F                     	;# 
   872  0090                     	;# 
   873  0091                     	;# 
   874  0092                     	;# 
   875  0093                     	;# 
   876  0093                     	;# 
   877  0094                     	;# 
   878  0095                     	;# 
   879  0095                     	;# 
   880  0096                     	;# 
   881  0096                     	;# 
   882  0098                     	;# 
   883  0099                     	;# 
   884  009C                     	;# 
   885  009D                     	;# 
   886  009F                     	;# 
   887  0108                     	;# 
   888  0109                     	;# 
   889  010C                     	;# 
   890  010C                     	;# 
   891  010D                     	;# 
   892  010D                     	;# 
   893  010E                     	;# 
   894  010F                     	;# 
   895  0185                     	;# 
   896  0186                     	;# 
   897  018C                     	;# 
   898  0000                     	;# 
   899  0001                     	;# 
   900  0002                     	;# 
   901  0003                     	;# 
   902  0004                     	;# 
   903  0005                     	;# 
   904  0006                     	;# 
   905  0007                     	;# 
   906  0009                     	;# 
   907  000A                     	;# 
   908  000B                     	;# 
   909  000C                     	;# 
   910  000D                     	;# 
   911  000E                     	;# 
   912  000E                     	;# 
   913  000F                     	;# 
   914  0010                     	;# 
   915  0011                     	;# 
   916  0012                     	;# 
   917  0013                     	;# 
   918  0014                     	;# 
   919  0015                     	;# 
   920  0015                     	;# 
   921  0016                     	;# 
   922  0017                     	;# 
   923  0018                     	;# 
   924  0019                     	;# 
   925  001A                     	;# 
   926  001B                     	;# 
   927  001B                     	;# 
   928  001C                     	;# 
   929  001D                     	;# 
   930  001E                     	;# 
   931  001F                     	;# 
   932  0081                     	;# 
   933  0085                     	;# 
   934  0086                     	;# 
   935  0087                     	;# 
   936  0089                     	;# 
   937  008C                     	;# 
   938  008D                     	;# 
   939  008E                     	;# 
   940  008F                     	;# 
   941  0090                     	;# 
   942  0091                     	;# 
   943  0092                     	;# 
   944  0093                     	;# 
   945  0093                     	;# 
   946  0094                     	;# 
   947  0095                     	;# 
   948  0095                     	;# 
   949  0096                     	;# 
   950  0096                     	;# 
   951  0098                     	;# 
   952  0099                     	;# 
   953  009C                     	;# 
   954  009D                     	;# 
   955  009F                     	;# 
   956  0108                     	;# 
   957  0109                     	;# 
   958  010C                     	;# 
   959  010C                     	;# 
   960  010D                     	;# 
   961  010D                     	;# 
   962  010E                     	;# 
   963  010F                     	;# 
   964  0185                     	;# 
   965  0186                     	;# 
   966  018C                     	;# 
   967  0000                     	;# 
   968  0001                     	;# 
   969  0002                     	;# 
   970  0003                     	;# 
   971  0004                     	;# 
   972  0005                     	;# 
   973  0006                     	;# 
   974  0007                     	;# 
   975  0009                     	;# 
   976  000A                     	;# 
   977  000B                     	;# 
   978  000C                     	;# 
   979  000D                     	;# 
   980  000E                     	;# 
   981  000E                     	;# 
   982  000F                     	;# 
   983  0010                     	;# 
   984  0011                     	;# 
   985  0012                     	;# 
   986  0013                     	;# 
   987  0014                     	;# 
   988  0015                     	;# 
   989  0015                     	;# 
   990  0016                     	;# 
   991  0017                     	;# 
   992  0018                     	;# 
   993  0019                     	;# 
   994  001A                     	;# 
   995  001B                     	;# 
   996  001B                     	;# 
   997  001C                     	;# 
   998  001D                     	;# 
   999  001E                     	;# 
  1000  001F                     	;# 
  1001  0081                     	;# 
  1002  0085                     	;# 
  1003  0086                     	;# 
  1004  0087                     	;# 
  1005  0089                     	;# 
  1006  008C                     	;# 
  1007  008D                     	;# 
  1008  008E                     	;# 
  1009  008F                     	;# 
  1010  0090                     	;# 
  1011  0091                     	;# 
  1012  0092                     	;# 
  1013  0093                     	;# 
  1014  0093                     	;# 
  1015  0094                     	;# 
  1016  0095                     	;# 
  1017  0095                     	;# 
  1018  0096                     	;# 
  1019  0096                     	;# 
  1020  0098                     	;# 
  1021  0099                     	;# 
  1022  009C                     	;# 
  1023  009D                     	;# 
  1024  009F                     	;# 
  1025  0108                     	;# 
  1026  0109                     	;# 
  1027  010C                     	;# 
  1028  010C                     	;# 
  1029  010D                     	;# 
  1030  010D                     	;# 
  1031  010E                     	;# 
  1032  010F                     	;# 
  1033  0185                     	;# 
  1034  0186                     	;# 
  1035  018C                     	;# 
  1036  0000                     	;# 
  1037  0001                     	;# 
  1038  0002                     	;# 
  1039  0003                     	;# 
  1040  0004                     	;# 
  1041  0005                     	;# 
  1042  0006                     	;# 
  1043  0007                     	;# 
  1044  0009                     	;# 
  1045  000A                     	;# 
  1046  000B                     	;# 
  1047  000C                     	;# 
  1048  000D                     	;# 
  1049  000E                     	;# 
  1050  000E                     	;# 
  1051  000F                     	;# 
  1052  0010                     	;# 
  1053  0011                     	;# 
  1054  0012                     	;# 
  1055  0013                     	;# 
  1056  0014                     	;# 
  1057  0015                     	;# 
  1058  0015                     	;# 
  1059  0016                     	;# 
  1060  0017                     	;# 
  1061  0018                     	;# 
  1062  0019                     	;# 
  1063  001A                     	;# 
  1064  001B                     	;# 
  1065  001B                     	;# 
  1066  001C                     	;# 
  1067  001D                     	;# 
  1068  001E                     	;# 
  1069  001F                     	;# 
  1070  0081                     	;# 
  1071  0085                     	;# 
  1072  0086                     	;# 
  1073  0087                     	;# 
  1074  0089                     	;# 
  1075  008C                     	;# 
  1076  008D                     	;# 
  1077  008E                     	;# 
  1078  008F                     	;# 
  1079  0090                     	;# 
  1080  0091                     	;# 
  1081  0092                     	;# 
  1082  0093                     	;# 
  1083  0093                     	;# 
  1084  0094                     	;# 
  1085  0095                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0096                     	;# 
  1089  0098                     	;# 
  1090  0099                     	;# 
  1091  009C                     	;# 
  1092  009D                     	;# 
  1093  009F                     	;# 
  1094  0108                     	;# 
  1095  0109                     	;# 
  1096  010C                     	;# 
  1097  010C                     	;# 
  1098  010D                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  010F                     	;# 
  1102  0185                     	;# 
  1103  0186                     	;# 
  1104  018C                     	;# 
  1105  0000                     	;# 
  1106  0001                     	;# 
  1107  0002                     	;# 
  1108  0003                     	;# 
  1109  0004                     	;# 
  1110  0005                     	;# 
  1111  0006                     	;# 
  1112  0007                     	;# 
  1113  0009                     	;# 
  1114  000A                     	;# 
  1115  000B                     	;# 
  1116  000C                     	;# 
  1117  000D                     	;# 
  1118  000E                     	;# 
  1119  000E                     	;# 
  1120  000F                     	;# 
  1121  0010                     	;# 
  1122  0011                     	;# 
  1123  0012                     	;# 
  1124  0013                     	;# 
  1125  0014                     	;# 
  1126  0015                     	;# 
  1127  0015                     	;# 
  1128  0016                     	;# 
  1129  0017                     	;# 
  1130  0018                     	;# 
  1131  0019                     	;# 
  1132  001A                     	;# 
  1133  001B                     	;# 
  1134  001B                     	;# 
  1135  001C                     	;# 
  1136  001D                     	;# 
  1137  001E                     	;# 
  1138  001F                     	;# 
  1139  0081                     	;# 
  1140  0085                     	;# 
  1141  0086                     	;# 
  1142  0087                     	;# 
  1143  0089                     	;# 
  1144  008C                     	;# 
  1145  008D                     	;# 
  1146  008E                     	;# 
  1147  008F                     	;# 
  1148  0090                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0093                     	;# 
  1152  0093                     	;# 
  1153  0094                     	;# 
  1154  0095                     	;# 
  1155  0095                     	;# 
  1156  0096                     	;# 
  1157  0096                     	;# 
  1158  0098                     	;# 
  1159  0099                     	;# 
  1160  009C                     	;# 
  1161  009D                     	;# 
  1162  009F                     	;# 
  1163  0108                     	;# 
  1164  0109                     	;# 
  1165  010C                     	;# 
  1166  010C                     	;# 
  1167  010D                     	;# 
  1168  010D                     	;# 
  1169  010E                     	;# 
  1170  010F                     	;# 
  1171  0185                     	;# 
  1172  0186                     	;# 
  1173  018C                     	;# 
  1174  0000                     	;# 
  1175  0001                     	;# 
  1176  0002                     	;# 
  1177  0003                     	;# 
  1178  0004                     	;# 
  1179  0005                     	;# 
  1180  0006                     	;# 
  1181  0007                     	;# 
  1182  0009                     	;# 
  1183  000A                     	;# 
  1184  000B                     	;# 
  1185  000C                     	;# 
  1186  000D                     	;# 
  1187  000E                     	;# 
  1188  000E                     	;# 
  1189  000F                     	;# 
  1190  0010                     	;# 
  1191  0011                     	;# 
  1192  0012                     	;# 
  1193  0013                     	;# 
  1194  0014                     	;# 
  1195  0015                     	;# 
  1196  0015                     	;# 
  1197  0016                     	;# 
  1198  0017                     	;# 
  1199  0018                     	;# 
  1200  0019                     	;# 
  1201  001A                     	;# 
  1202  001B                     	;# 
  1203  001B                     	;# 
  1204  001C                     	;# 
  1205  001D                     	;# 
  1206  001E                     	;# 
  1207  001F                     	;# 
  1208  0081                     	;# 
  1209  0085                     	;# 
  1210  0086                     	;# 
  1211  0087                     	;# 
  1212  0089                     	;# 
  1213  008C                     	;# 
  1214  008D                     	;# 
  1215  008E                     	;# 
  1216  008F                     	;# 
  1217  0090                     	;# 
  1218  0091                     	;# 
  1219  0092                     	;# 
  1220  0093                     	;# 
  1221  0093                     	;# 
  1222  0094                     	;# 
  1223  0095                     	;# 
  1224  0095                     	;# 
  1225  0096                     	;# 
  1226  0096                     	;# 
  1227  0098                     	;# 
  1228  0099                     	;# 
  1229  009C                     	;# 
  1230  009D                     	;# 
  1231  009F                     	;# 
  1232  0108                     	;# 
  1233  0109                     	;# 
  1234  010C                     	;# 
  1235  010C                     	;# 
  1236  010D                     	;# 
  1237  010D                     	;# 
  1238  010E                     	;# 
  1239  010F                     	;# 
  1240  0185                     	;# 
  1241  0186                     	;# 
  1242  018C                     	;# 
  1243  001F                     _ADCON0	set	31
  1244  001E                     _ADRES	set	30
  1245  0005                     _PORTA	set	5
  1246  0006                     _PORTB	set	6
  1247  0007                     _PORTC	set	7
  1248  0010                     _T1CON	set	16
  1249  000F                     _TMR1H	set	15
  1250  000E                     _TMR1L	set	14
  1251  005F                     _GIE	set	95
  1252  00F9                     _GO_nDONE	set	249
  1253  005E                     _PEIE	set	94
  1254  002D                     _RA5	set	45
  1255  0033                     _RB3	set	51
  1256  0034                     _RB4	set	52
  1257  0035                     _RB5	set	53
  1258  0060                     _TMR1IF	set	96
  1259  009F                     _ADCON1	set	159
  1260  009D                     _FVRCON	set	157
  1261  0090                     _OSCCON	set	144
  1262  0085                     _TRISA	set	133
  1263  0086                     _TRISB	set	134
  1264  0087                     _TRISC	set	135
  1265  0408                     _PS0	set	1032
  1266  0409                     _PS1	set	1033
  1267  040A                     _PS2	set	1034
  1268  040B                     _PSA	set	1035
  1269  0460                     _TMR1IE	set	1120
  1270  0185                     _ANSELA	set	389
  1271  0186                     _ANSELB	set	390
  1272                           
  1273                           	psect	text0
  1274  0000                     __ptext0:	
  1275                           ; #config settings
  1276                           
  1277                           
  1278                           ;psect for function _TMR1_ISR
  1279  0000                     
  1280                           	psect	cinit
  1281  0013                     start_initialization:	
  1282  0013                     __initialization:	
  1283                           
  1284                           ; Clear objects allocated to COMMON
  1285  0013  01F7               	clrf	__pbssCOMMON& (0+127)
  1286  0014  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1287  0015  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1288                           
  1289                           ; Clear objects allocated to BANK0
  1290  0016  1383               	bcf	3,7	;select IRP bank0
  1291  0017  3020               	movlw	low __pbssBANK0
  1292  0018  0084               	movwf	4
  1293  0019  3060               	movlw	low (__pbssBANK0+64)
  1294  001A  158A  2696  118A   	fcall	clear_ram0
  1295                           
  1296                           ; Clear objects allocated to BANK1
  1297  001D  30A0               	movlw	low __pbssBANK1
  1298  001E  0084               	movwf	4
  1299  001F  30DF               	movlw	low (__pbssBANK1+63)
  1300  0020  158A  2696         	fcall	clear_ram0
  1301  0022                     end_of_initialization:	
  1302                           ;End of C runtime variable initialization code
  1303                           
  1304  0022                     __end_of__initialization:	
  1305  0022  0183               	clrf	3
  1306  0023  118A  2D54         	ljmp	_main	;jump to C main() function
  1307                           
  1308                           	psect	bssCOMMON
  1309  0077                     __pbssCOMMON:	
  1310  0077                     _WDT:	
  1311  0077                     	ds	2
  1312  0079                     _LED:	
  1313  0079                     	ds	1
  1314                           
  1315                           	psect	bssBANK0
  1316  0020                     __pbssBANK0:	
  1317  0020                     _SYSC:	
  1318  0020                     	ds	5
  1319  0025                     __CDS:	
  1320  0025                     	ds	5
  1321  002A                     _Timer1:	
  1322  002A                     	ds	3
  1323  002D                     _Load1:	
  1324  002D                     	ds	35
  1325  0050                     _Temp:	
  1326  0050                     	ds	12
  1327  005C                     _VarErrLED:	
  1328  005C                     	ds	4
  1329                           
  1330                           	psect	bssBANK1
  1331  00A0                     __pbssBANK1:	
  1332  00A0                     _myMain:	
  1333  00A0                     	ds	8
  1334  00A8                     __PIR:	
  1335  00A8                     	ds	47
  1336  00D7                     _VarLED1:	
  1337  00D7                     	ds	4
  1338  00DB                     _VarLED2:	
  1339  00DB                     	ds	4
  1340                           
  1341                           	psect	clrtext
  1342  0E96                     clear_ram0:	
  1343                           ;	Called with FSR containing the base address, and
  1344                           ;	W with the last address+1
  1345                           
  1346  0E96  0064               	clrwdt	;clear the watchdog before getting into this loop
  1347  0E97                     clrloop0:	
  1348  0E97  0180               	clrf	0	;clear RAM location pointed to by FSR
  1349  0E98  0A84               	incf	4,f	;increment pointer
  1350  0E99  0604               	xorwf	4,w	;XOR with final address
  1351  0E9A  1903               	btfsc	3,2	;have we reached the end yet?
  1352  0E9B  3400               	retlw	0	;all done for this memory range, return
  1353  0E9C  0604               	xorwf	4,w	;XOR again to restore value
  1354  0E9D  2E97               	goto	clrloop0	;do the next byte
  1355                           
  1356                           	psect	cstackBANK1
  1357  00DF                     __pcstackBANK1:	
  1358  00DF                     ?_main:	
  1359  00DF                     main@argc:	
  1360                           ; 2 bytes @ 0x0
  1361                           
  1362                           
  1363                           ; 2 bytes @ 0x0
  1364  00DF                     	ds	2
  1365  00E1                     main@argv:	
  1366                           
  1367                           ; 2 bytes @ 0x2
  1368  00E1                     	ds	2
  1369                           
  1370                           	psect	cstackCOMMON
  1371  0070                     __pcstackCOMMON:	
  1372  0070                     ?_setLED_Initialization:	
  1373  0070                     ?_setLED_Main:	
  1374                           ; 0 bytes @ 0x0
  1375                           
  1376  0070                     ?_Fosc_Set:	
  1377                           ; 0 bytes @ 0x0
  1378                           
  1379  0070                     ?_IO_Set:	
  1380                           ; 0 bytes @ 0x0
  1381                           
  1382  0070                     ?_TMR1_Set:	
  1383                           ; 0 bytes @ 0x0
  1384                           
  1385  0070                     ?_ADC_Set:	
  1386                           ; 0 bytes @ 0x0
  1387                           
  1388  0070                     ?_WDT_Set:	
  1389                           ; 0 bytes @ 0x0
  1390                           
  1391  0070                     ?_TMR1_ISR:	
  1392                           ; 0 bytes @ 0x0
  1393                           
  1394  0070                     ??_TMR1_ISR:	
  1395                           ; 0 bytes @ 0x0
  1396                           
  1397  0070                     ?_Timeout_Counter:	
  1398                           ; 0 bytes @ 0x0
  1399                           
  1400  0070                     ?_set_TimeoutCleared:	
  1401                           ; 0 bytes @ 0x0
  1402                           
  1403  0070                     ?_WDT_Clearing:	
  1404                           ; 0 bytes @ 0x0
  1405                           
  1406  0070                     ?_myMain_Initialization:	
  1407                           ; 0 bytes @ 0x0
  1408                           
  1409  0070                     ?_SYSC_Initialization:	
  1410                           ; 0 bytes @ 0x0
  1411                           
  1412  0070                     ?_Temp_Initialization:	
  1413                           ; 0 bytes @ 0x0
  1414                           
  1415  0070                     ?_Load_Initialization:	
  1416                           ; 0 bytes @ 0x0
  1417                           
  1418  0070                     ?_PIR_Initialization:	
  1419                           ; 0 bytes @ 0x0
  1420                           
  1421  0070                     ?_DetectSYSC_Signal:	
  1422                           ; 0 bytes @ 0x0
  1423                           
  1424  0070                     ?_getLoad_AD:	
  1425                           ; 0 bytes @ 0x0
  1426                           
  1427  0070                     ?_getTemp_AD:	
  1428                           ; 0 bytes @ 0x0
  1429                           
  1430  0070                     ?_my_MainTime:	
  1431                           ; 0 bytes @ 0x0
  1432                           
  1433  0070                     ?_SYSC_Main:	
  1434                           ; 0 bytes @ 0x0
  1435                           
  1436  0070                     ?_Temp_Main:	
  1437                           ; 0 bytes @ 0x0
  1438                           
  1439  0070                     ?_Load_Main:	
  1440                           ; 0 bytes @ 0x0
  1441                           
  1442  0070                     ?_PIR_Main:	
  1443                           ; 0 bytes @ 0x0
  1444                           
  1445  0070                     ?_setTemp_Enable:	
  1446                           ; 0 bytes @ 0x0
  1447                           
  1448  0070                     ?_setLoad_Enable:	
  1449                           ; 0 bytes @ 0x0
  1450                           
  1451  0070                     ?_setLoad_AH_AL_Restore:	
  1452                           ; 0 bytes @ 0x0
  1453                           
  1454  0070                     ?_setLoad_Exceptions:	
  1455                           ; 0 bytes @ 0x0
  1456                           
  1457  0070                     ?_setTemp_Initialization:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_setTemp_Main:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_setOverTemp_Exceptions:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_setSYSC_Initialization:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ?_setSYSC_Main:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_CDS_Initialization:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ?_CDS_Main:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ?_LedPointSelect:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_LED_Initialization:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_LED_Main:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_Mcu_Initialization:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_ISR:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ??_ISR:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_WDT_Main:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_getMain_AD_Safe:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_getTemp_Safe:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0070                     ?_getCDS_Status:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_getMain_Exception:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_getMain_LightsStatus:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514                           
  1515                           ; 1 bytes @ 0x0
  1516  0070                     	ds	4
  1517  0074                     ??_getMain_AD_Safe:	
  1518  0074                     ??_Fosc_Set:	
  1519                           ; 0 bytes @ 0x4
  1520                           
  1521  0074                     ??_IO_Set:	
  1522                           ; 0 bytes @ 0x4
  1523                           
  1524  0074                     ??_TMR1_Set:	
  1525                           ; 0 bytes @ 0x4
  1526                           
  1527  0074                     ??_ADC_Set:	
  1528                           ; 0 bytes @ 0x4
  1529                           
  1530  0074                     ??_WDT_Set:	
  1531                           ; 0 bytes @ 0x4
  1532                           
  1533  0074                     ??_Timeout_Counter:	
  1534                           ; 0 bytes @ 0x4
  1535                           
  1536  0074                     ??_set_TimeoutCleared:	
  1537                           ; 0 bytes @ 0x4
  1538                           
  1539  0074                     ??_WDT_Clearing:	
  1540                           ; 0 bytes @ 0x4
  1541                           
  1542  0074                     ??_myMain_Initialization:	
  1543                           ; 0 bytes @ 0x4
  1544                           
  1545  0074                     ??_SYSC_Initialization:	
  1546                           ; 0 bytes @ 0x4
  1547                           
  1548  0074                     ??_Temp_Initialization:	
  1549                           ; 0 bytes @ 0x4
  1550                           
  1551  0074                     ??_PIR_Initialization:	
  1552                           ; 0 bytes @ 0x4
  1553                           
  1554  0074                     ??_DetectSYSC_Signal:	
  1555                           ; 0 bytes @ 0x4
  1556                           
  1557  0074                     ??_setTemp_Enable:	
  1558                           ; 0 bytes @ 0x4
  1559                           
  1560  0074                     ??_setLoad_Enable:	
  1561                           ; 0 bytes @ 0x4
  1562                           
  1563  0074                     ??_setLoad_AH_AL_Restore:	
  1564                           ; 0 bytes @ 0x4
  1565                           
  1566  0074                     ??_getTemp_Safe:	
  1567                           ; 0 bytes @ 0x4
  1568                           
  1569  0074                     ??_setTemp_Initialization:	
  1570                           ; 0 bytes @ 0x4
  1571                           
  1572  0074                     ??_setSYSC_Initialization:	
  1573                           ; 0 bytes @ 0x4
  1574                           
  1575  0074                     ??_CDS_Initialization:	
  1576                           ; 0 bytes @ 0x4
  1577                           
  1578  0074                     ??_getCDS_Status:	
  1579                           ; 0 bytes @ 0x4
  1580                           
  1581  0074                     ??_LedPointSelect:	
  1582                           ; 0 bytes @ 0x4
  1583                           
  1584  0074                     ??_WDT_Main:	
  1585                           ; 0 bytes @ 0x4
  1586                           
  1587  0074                     ??_getMain_Exception:	
  1588                           ; 0 bytes @ 0x4
  1589                           
  1590  0074                     ??_getMain_LightsStatus:	
  1591                           ; 0 bytes @ 0x4
  1592                           
  1593  0074                     ??___wmul:	
  1594                           ; 0 bytes @ 0x4
  1595                           
  1596  0074                     ??___awdiv:	
  1597                           ; 0 bytes @ 0x4
  1598                           
  1599  0074                     ??___lwdiv:	
  1600                           ; 0 bytes @ 0x4
  1601                           
  1602  0074                     ?_getAD:	
  1603                           ; 0 bytes @ 0x4
  1604                           
  1605  0074                     ?___lbdiv:	
  1606                           ; 1 bytes @ 0x4
  1607                           
  1608  0074                     getCDS_Status@result:	
  1609                           ; 1 bytes @ 0x4
  1610                           
  1611  0074                     getAD@adcon1:	
  1612                           ; 1 bytes @ 0x4
  1613                           
  1614  0074                     getMain_Exception@result:	
  1615                           ; 1 bytes @ 0x4
  1616                           
  1617  0074                     getMain_AD_Safe@result:	
  1618                           ; 1 bytes @ 0x4
  1619                           
  1620  0074                     getMain_LightsStatus@count:	
  1621                           ; 1 bytes @ 0x4
  1622                           
  1623  0074                     setLoad_Enable@command:	
  1624                           ; 1 bytes @ 0x4
  1625                           
  1626  0074                     setTemp_Enable@command:	
  1627                           ; 1 bytes @ 0x4
  1628                           
  1629  0074                     getTemp_Safe@result:	
  1630                           ; 1 bytes @ 0x4
  1631                           
  1632  0074                     ___lbdiv@divisor:	
  1633                           ; 1 bytes @ 0x4
  1634                           
  1635  0074                     ___wmul@product:	
  1636                           ; 1 bytes @ 0x4
  1637                           
  1638                           
  1639                           ; 2 bytes @ 0x4
  1640  0074                     	ds	1
  1641  0075                     ??_getAD:	
  1642  0075                     ??_my_MainTime:	
  1643                           ; 0 bytes @ 0x5
  1644                           
  1645  0075                     ??_Mcu_Initialization:	
  1646                           ; 0 bytes @ 0x5
  1647                           
  1648  0075                     ??___lbdiv:	
  1649                           ; 0 bytes @ 0x5
  1650                           
  1651  0075                     LedPointSelect@led:	
  1652                           ; 0 bytes @ 0x5
  1653                           
  1654  0075                     getAD@adcon0:	
  1655                           ; 1 bytes @ 0x5
  1656                           
  1657  0075                     getMain_LightsStatus@result:	
  1658                           ; 1 bytes @ 0x5
  1659                           
  1660  0075                     setLoad_AH_AL_Restore@i:	
  1661                           ; 1 bytes @ 0x5
  1662                           
  1663                           
  1664                           ; 1 bytes @ 0x5
  1665  0075                     	ds	1
  1666  0076                     ?_setLED:	
  1667  0076                     ??_Load_Initialization:	
  1668                           ; 0 bytes @ 0x6
  1669                           
  1670  0076                     ?_getPIR_AD:	
  1671                           ; 0 bytes @ 0x6
  1672                           
  1673  0076                     ?_getCDS_AD:	
  1674                           ; 0 bytes @ 0x6
  1675                           
  1676  0076                     getCDS_AD@channel2:	
  1677                           ; 0 bytes @ 0x6
  1678                           
  1679  0076                     setLED@command:	
  1680                           ; 1 bytes @ 0x6
  1681                           
  1682  0076                     setLED_Main@led:	
  1683                           ; 1 bytes @ 0x6
  1684                           
  1685  0076                     getTemp_AD@channel:	
  1686                           ; 1 bytes @ 0x6
  1687                           
  1688  0076                     getPIR_AD@channel2:	
  1689                           ; 1 bytes @ 0x6
  1690                           
  1691                           
  1692                           ; 1 bytes @ 0x6
  1693  0076                     	ds	1
  1694  0077                     ??_setLED_Initialization:	
  1695  0077                     ??_setLED:	
  1696                           ; 0 bytes @ 0x7
  1697                           
  1698  0077                     ??_SYSC_Main:	
  1699                           ; 0 bytes @ 0x7
  1700                           
  1701  0077                     ??_Temp_Main:	
  1702                           ; 0 bytes @ 0x7
  1703                           
  1704  0077                     ??_LED_Initialization:	
  1705                           ; 0 bytes @ 0x7
  1706                           
  1707  0077                     ??_LED_Main:	
  1708                           ; 0 bytes @ 0x7
  1709                           
  1710                           
  1711                           	psect	cstackBANK0
  1712  0060                     __pcstackBANK0:	
  1713                           ; 0 bytes @ 0x7
  1714                           
  1715  0060                     ??_setLED_Main:	
  1716  0060                     ??_getLoad_AD:	
  1717                           ; 0 bytes @ 0x0
  1718                           
  1719  0060                     ??_getTemp_AD:	
  1720                           ; 0 bytes @ 0x0
  1721                           
  1722  0060                     ??_CDS_Main:	
  1723                           ; 0 bytes @ 0x0
  1724                           
  1725  0060                     ??_getCDS_AD:	
  1726                           ; 0 bytes @ 0x0
  1727                           
  1728  0060                     ?___wmul:	
  1729                           ; 0 bytes @ 0x0
  1730                           
  1731  0060                     ?___awdiv:	
  1732                           ; 2 bytes @ 0x0
  1733                           
  1734  0060                     ?___lwdiv:	
  1735                           ; 2 bytes @ 0x0
  1736                           
  1737  0060                     setLED@led:	
  1738                           ; 2 bytes @ 0x0
  1739                           
  1740  0060                     ___lbdiv@dividend:	
  1741                           ; 1 bytes @ 0x0
  1742                           
  1743  0060                     ___wmul@multiplier:	
  1744                           ; 1 bytes @ 0x0
  1745                           
  1746  0060                     ___awdiv@divisor:	
  1747                           ; 2 bytes @ 0x0
  1748                           
  1749  0060                     ___lwdiv@divisor:	
  1750                           ; 2 bytes @ 0x0
  1751                           
  1752                           
  1753                           ; 2 bytes @ 0x0
  1754  0060                     	ds	1
  1755  0061                     ??_PIR_Main:	
  1756  0061                     ??_setLoad_Exceptions:	
  1757                           ; 0 bytes @ 0x1
  1758                           
  1759  0061                     ??_setOverTemp_Exceptions:	
  1760                           ; 0 bytes @ 0x1
  1761                           
  1762  0061                     ??_setSYSC_Main:	
  1763                           ; 0 bytes @ 0x1
  1764                           
  1765  0061                     setLED_Initialization@led:	
  1766                           ; 0 bytes @ 0x1
  1767                           
  1768  0061                     ___lbdiv@counter:	
  1769                           ; 1 bytes @ 0x1
  1770                           
  1771                           
  1772                           ; 1 bytes @ 0x1
  1773  0061                     	ds	1
  1774  0062                     getCDS_AD@i:	
  1775  0062                     getLoad_AD@channel:	
  1776                           ; 1 bytes @ 0x2
  1777                           
  1778  0062                     setLoad_Exceptions@i:	
  1779                           ; 1 bytes @ 0x2
  1780                           
  1781  0062                     setOverTemp_Exceptions@i:	
  1782                           ; 1 bytes @ 0x2
  1783                           
  1784  0062                     ___lbdiv@quotient:	
  1785                           ; 1 bytes @ 0x2
  1786                           
  1787  0062                     ___wmul@multiplicand:	
  1788                           ; 1 bytes @ 0x2
  1789                           
  1790  0062                     ___awdiv@dividend:	
  1791                           ; 2 bytes @ 0x2
  1792                           
  1793  0062                     ___lwdiv@dividend:	
  1794                           ; 2 bytes @ 0x2
  1795                           
  1796                           
  1797                           ; 2 bytes @ 0x2
  1798  0062                     	ds	1
  1799  0063                     getCDS_AD@j:	
  1800  0063                     getLoad_AD@j:	
  1801                           ; 1 bytes @ 0x3
  1802                           
  1803  0063                     setLoad_Exceptions@command:	
  1804                           ; 1 bytes @ 0x3
  1805                           
  1806  0063                     setOverTemp_Exceptions@command:	
  1807                           ; 1 bytes @ 0x3
  1808                           
  1809                           
  1810                           ; 1 bytes @ 0x3
  1811  0063                     	ds	1
  1812  0064                     ??_Load_Main:	
  1813  0064                     getCDS_AD@channel1:	
  1814                           ; 0 bytes @ 0x4
  1815                           
  1816  0064                     getLoad_AD@i:	
  1817                           ; 1 bytes @ 0x4
  1818                           
  1819  0064                     ___awdiv@counter:	
  1820                           ; 1 bytes @ 0x4
  1821                           
  1822  0064                     ___lwdiv@counter:	
  1823                           ; 1 bytes @ 0x4
  1824                           
  1825                           
  1826                           ; 1 bytes @ 0x4
  1827  0064                     	ds	1
  1828  0065                     ___awdiv@sign:	
  1829  0065                     ___lwdiv@quotient:	
  1830                           ; 1 bytes @ 0x5
  1831                           
  1832                           
  1833                           ; 2 bytes @ 0x5
  1834  0065                     	ds	1
  1835  0066                     Load_Main@i:	
  1836  0066                     ___awdiv@quotient:	
  1837                           ; 1 bytes @ 0x6
  1838                           
  1839                           
  1840                           ; 2 bytes @ 0x6
  1841  0066                     	ds	2
  1842  0068                     ??_getPIR_AD:	
  1843  0068                     ??_setTemp_Main:	
  1844                           ; 0 bytes @ 0x8
  1845                           
  1846                           
  1847                           ; 0 bytes @ 0x8
  1848  0068                     	ds	3
  1849  006B                     getPIR_AD@j:	
  1850                           
  1851                           ; 1 bytes @ 0xB
  1852  006B                     	ds	1
  1853  006C                     getPIR_AD@channel1:	
  1854                           
  1855                           ; 1 bytes @ 0xC
  1856  006C                     	ds	1
  1857  006D                     getPIR_AD@i:	
  1858                           
  1859                           ; 1 bytes @ 0xD
  1860  006D                     	ds	1
  1861  006E                     ??_main:	
  1862                           
  1863                           ; 0 bytes @ 0xE
  1864  006E                     	ds	1
  1865                           
  1866                           	psect	maintext
  1867  0554                     __pmaintext:	
  1868 ;;
  1869 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1870 ;;
  1871 ;; *************** function _main *****************
  1872 ;; Defined at:
  1873 ;;		line 7 in file "../src/Main_B1.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;  argc            2    0[BANK1 ] int 
  1876 ;;  argv            2    2[BANK1 ] PTR PTR unsigned char 
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;		None
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  2    0[BANK1 ] int 
  1881 ;; Registers used:
  1882 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1883 ;; Tracked objects:
  1884 ;;		On entry : 17F/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1888 ;;      Params:         0       0       4       0
  1889 ;;      Locals:         0       0       0       0
  1890 ;;      Temps:          0       1       0       0
  1891 ;;      Totals:         0       1       4       0
  1892 ;;Total ram usage:        5 bytes
  1893 ;; Hardware stack levels required when called:    7
  1894 ;; This function calls:
  1895 ;;		_CDS_Initialization
  1896 ;;		_CDS_Main
  1897 ;;		_DetectSYSC_Signal
  1898 ;;		_LED_Initialization
  1899 ;;		_LED_Main
  1900 ;;		_Load_Initialization
  1901 ;;		_Load_Main
  1902 ;;		_Mcu_Initialization
  1903 ;;		_PIR_Initialization
  1904 ;;		_PIR_Main
  1905 ;;		_SYSC_Initialization
  1906 ;;		_SYSC_Main
  1907 ;;		_Temp_Initialization
  1908 ;;		_Temp_Main
  1909 ;;		_WDT_Main
  1910 ;;		_getCDS_AD
  1911 ;;		_getLoad_AD
  1912 ;;		_getPIR_AD
  1913 ;;		_getTemp_AD
  1914 ;;		_myMain_Initialization
  1915 ;;		_my_MainTime
  1916 ;; This function is called by:
  1917 ;;		Startup code after reset
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           
  1922                           ;psect for function _main
  1923  0554                     _main:	
  1924                           
  1925                           ;Main_B1.c: 8: myMain_Initialization();
  1926                           
  1927                           ;incstack = 0
  1928                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1929  0554  118A  27FF  118A   	fcall	_myMain_Initialization
  1930                           
  1931                           ;Main_B1.c: 9: Mcu_Initialization();
  1932  0557  158A  26E9  118A   	fcall	_Mcu_Initialization
  1933                           
  1934                           ;Main_B1.c: 10: ;;
  1935                           ;Main_B1.c: 11: LED_Initialization();
  1936  055A  158A  26A7  118A   	fcall	_LED_Initialization
  1937                           
  1938                           ;Main_B1.c: 12: ;;
  1939                           ;Main_B1.c: 14: SYSC_Initialization();
  1940  055D  158A  2649  118A   	fcall	_SYSC_Initialization
  1941                           
  1942                           ;Main_B1.c: 15: Temp_Initialization();
  1943  0560  158A  264F  118A   	fcall	_Temp_Initialization
  1944                           
  1945                           ;Main_B1.c: 16: Load_Initialization();
  1946  0563  158A  266B  118A   	fcall	_Load_Initialization
  1947                           
  1948                           ;Main_B1.c: 17: ;;
  1949                           ;Main_B1.c: 18: ;;
  1950                           ;Main_B1.c: 20: ;;
  1951                           ;Main_B1.c: 21: ;;
  1952                           ;Main_B1.c: 22: CDS_Initialization();
  1953  0566  158A  2655  118A   	fcall	_CDS_Initialization
  1954                           
  1955                           ;Main_B1.c: 23: PIR_Initialization();
  1956  0569  158A  2717  118A   	fcall	_PIR_Initialization
  1957                           
  1958                           ;Main_B1.c: 24: ;;
  1959                           ;Main_B1.c: 25: ;;
  1960                           ;Main_B1.c: 26: __nop();
  1961  056C  0000               	nop
  1962  056D                     l4018:	
  1963                           ;Main_B1.c: 27: ;;
  1964                           ;Main_B1.c: 29: while (1) {
  1965                           
  1966                           
  1967                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  1968  056D  1683               	bsf	3,5	;RP0=1, select bank1
  1969  056E  1303               	bcf	3,6	;RP1=0, select bank1
  1970  056F  1C20               	btfss	_myMain^(0+128),0
  1971  0570  2D90               	goto	l4030
  1972                           
  1973                           ;Main_B1.c: 33: DetectSYSC_Signal();
  1974  0571  158A  26CD  118A   	fcall	_DetectSYSC_Signal
  1975                           
  1976                           ;Main_B1.c: 37: getLoad_AD(0x01);
  1977  0574  3001               	movlw	1
  1978  0575  118A  260F  118A   	fcall	_getLoad_AD
  1979                           
  1980                           ;Main_B1.c: 41: getTemp_AD(0x11);
  1981  0578  3011               	movlw	17
  1982  0579  118A  2747  118A   	fcall	_getTemp_AD
  1983                           
  1984                           ;Main_B1.c: 49: getCDS_AD(0x09, 0x31);
  1985  057C  3031               	movlw	49
  1986  057D  1283               	bcf	3,5	;RP0=0, select bank0
  1987  057E  1303               	bcf	3,6	;RP1=0, select bank0
  1988  057F  00EE               	movwf	??_main
  1989  0580  086E               	movf	??_main,w
  1990  0581  00F6               	movwf	getCDS_AD@channel2
  1991  0582  3009               	movlw	9
  1992  0583  118A  271D  118A   	fcall	_getCDS_AD
  1993                           
  1994                           ;Main_B1.c: 53: getPIR_AD(0x05, 0x0d);
  1995  0586  300D               	movlw	13
  1996  0587  1283               	bcf	3,5	;RP0=0, select bank0
  1997  0588  1303               	bcf	3,6	;RP1=0, select bank0
  1998  0589  00EE               	movwf	??_main
  1999  058A  086E               	movf	??_main,w
  2000  058B  00F6               	movwf	getPIR_AD@channel2
  2001  058C  3005               	movlw	5
  2002  058D  118A  21C1  118A   	fcall	_getPIR_AD
  2003  0590                     l4030:	
  2004                           
  2005                           ;Main_B1.c: 56: }
  2006                           ;Main_B1.c: 92: if (myMain.T1_Timerout == 1) {
  2007  0590  1683               	bsf	3,5	;RP0=1, select bank1
  2008  0591  1303               	bcf	3,6	;RP1=0, select bank1
  2009  0592  1D20               	btfss	_myMain^(0+128),2
  2010  0593  2D6D               	goto	l4018
  2011                           
  2012                           ;Main_B1.c: 93: myMain.T1_Timerout = 0;
  2013  0594  1120               	bcf	_myMain^(0+128),2
  2014                           
  2015                           ;Main_B1.c: 94: my_MainTime();
  2016  0595  158A  27C5  118A   	fcall	_my_MainTime
  2017                           
  2018                           ;Main_B1.c: 95: WDT_Main();
  2019  0598  158A  26F8  118A   	fcall	_WDT_Main
  2020                           
  2021                           ;Main_B1.c: 96: ;;
  2022                           ;Main_B1.c: 97: ;;
  2023                           ;Main_B1.c: 98: if (myMain.PowerON) {
  2024  059B  1683               	bsf	3,5	;RP0=1, select bank1
  2025  059C  1303               	bcf	3,6	;RP1=0, select bank1
  2026  059D  1C20               	btfss	_myMain^(0+128),0
  2027  059E  2D6D               	goto	l4018
  2028                           
  2029                           ;Main_B1.c: 99: ;;
  2030                           ;Main_B1.c: 101: LED_Main();
  2031  059F  158A  26B3  118A   	fcall	_LED_Main
  2032                           
  2033                           ;Main_B1.c: 102: ;;
  2034                           ;Main_B1.c: 104: SYSC_Main();
  2035  05A2  158A  264C  118A   	fcall	_SYSC_Main
  2036                           
  2037                           ;Main_B1.c: 105: Temp_Main();
  2038  05A5  158A  2652  118A   	fcall	_Temp_Main
  2039                           
  2040                           ;Main_B1.c: 106: Load_Main();
  2041  05A8  118A  22FB  118A   	fcall	_Load_Main
  2042                           
  2043                           ;Main_B1.c: 107: ;;
  2044                           ;Main_B1.c: 109: ;;
  2045                           ;Main_B1.c: 110: ;;
  2046                           ;Main_B1.c: 111: ;;
  2047                           ;Main_B1.c: 112: CDS_Main();
  2048  05AB  118A  265F  118A   	fcall	_CDS_Main
  2049                           
  2050                           ;Main_B1.c: 113: PIR_Main();
  2051  05AE  118A  2025  118A   	fcall	_PIR_Main
  2052                           
  2053                           ;Main_B1.c: 115: ;;
  2054                           ;Main_B1.c: 116: ;;
  2055                           ;Main_B1.c: 117: ;;
  2056  05B1  2D6D               	goto	l4018
  2057  05B2                     __end_of_main:	
  2058                           ;Main_B1.c: 125: }
  2059                           ;Main_B1.c: 126: }
  2060                           ;Main_B1.c: 160: }
  2061                           ;Main_B1.c: 161: return (0);
  2062                           ;	Return value of _main is never used
  2063                           
  2064                           
  2065                           	psect	text1
  2066  0FC5                     __ptext1:	
  2067 ;; *************** function _my_MainTime *****************
  2068 ;; Defined at:
  2069 ;;		line 180 in file "../src/Main_B1.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;		None               void
  2076 ;; Registers used:
  2077 ;;		wreg, status,2, status,0, pclath, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2083 ;;      Params:         0       0       0       0
  2084 ;;      Locals:         0       0       0       0
  2085 ;;      Temps:          0       0       0       0
  2086 ;;      Totals:         0       0       0       0
  2087 ;;Total ram usage:        0 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    3
  2090 ;; This function calls:
  2091 ;;		_setLoad_Enable
  2092 ;;		_setTemp_Enable
  2093 ;; This function is called by:
  2094 ;;		_main
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           
  2099                           ;psect for function _my_MainTime
  2100  0FC5                     _my_MainTime:	
  2101                           
  2102                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  2103                           
  2104                           ;incstack = 0
  2105                           ; Regs used in _my_MainTime: [wreg+status,2+status,0+pclath+cstack]
  2106  0FC5  1683               	bsf	3,5	;RP0=1, select bank1
  2107  0FC6  1303               	bcf	3,6	;RP1=0, select bank1
  2108  0FC7  1820               	btfsc	_myMain^(0+128),0
  2109  0FC8  0008               	return
  2110                           
  2111                           ;Main_B1.c: 183: myMain.PowerCount++;
  2112  0FC9  3001               	movlw	1
  2113  0FCA  07A2               	addwf	(_myMain^(0+128)+2),f
  2114  0FCB  1803               	skipnc
  2115  0FCC  0AA3               	incf	((_myMain+1)^(0+128)+2),f
  2116  0FCD  3000               	movlw	0
  2117  0FCE  07A3               	addwf	((_myMain+1)^(0+128)+2),f
  2118                           
  2119                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  2120  0FCF  3096               	movlw	150
  2121  0FD0  0622               	xorwf	(_myMain^(0+128)+2),w
  2122  0FD1  0423               	iorwf	((_myMain+1)^(0+128)+2),w
  2123  0FD2  1D03               	skipz
  2124  0FD3  0008               	return
  2125                           
  2126                           ;Main_B1.c: 185: {
  2127                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  2128  0FD4  01A2               	clrf	(_myMain^(0+128)+2)
  2129  0FD5  01A3               	clrf	((_myMain+1)^(0+128)+2)
  2130                           
  2131                           ;Main_B1.c: 187: myMain.PowerON = 1;
  2132  0FD6  1420               	bsf	_myMain^(0+128),0
  2133                           
  2134                           ;Main_B1.c: 190: setTemp_Enable(1);
  2135  0FD7  3001               	movlw	1
  2136  0FD8  158A  268E  158A   	fcall	_setTemp_Enable
  2137                           
  2138                           ;Main_B1.c: 194: setLoad_Enable(1);
  2139  0FDB  3001               	movlw	1
  2140  0FDC  158A  269E         	fcall	_setLoad_Enable
  2141                           
  2142                           ;Main_B1.c: 200: ;;
  2143                           ;Main_B1.c: 201: myMain.SelfTest = 1;
  2144  0FDE  1683               	bsf	3,5	;RP0=1, select bank1
  2145  0FDF  1303               	bcf	3,6	;RP1=0, select bank1
  2146  0FE0  17A0               	bsf	_myMain^(0+128),7
  2147                           
  2148                           ;Main_B1.c: 210: }
  2149                           ;Main_B1.c: 211: } else {
  2150                           
  2151                           ;Main_B1.c: 203: ;;
  2152  0FE1  0008               	return
  2153  0FE2                     __end_of_my_MainTime:	
  2154                           
  2155                           	psect	text2
  2156  0E8E                     __ptext2:	
  2157 ;; *************** function _setTemp_Enable *****************
  2158 ;; Defined at:
  2159 ;;		line 16 in file "../src/OverTemperature_B1.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  command         1    wreg     unsigned char 
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;  command         1    4[COMMON] unsigned char 
  2164 ;; Return value:  Size  Location     Type
  2165 ;;		None               void
  2166 ;; Registers used:
  2167 ;;		wreg
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2173 ;;      Params:         0       0       0       0
  2174 ;;      Locals:         1       0       0       0
  2175 ;;      Temps:          0       0       0       0
  2176 ;;      Totals:         1       0       0       0
  2177 ;;Total ram usage:        1 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    2
  2180 ;; This function calls:
  2181 ;;		Nothing
  2182 ;; This function is called by:
  2183 ;;		_my_MainTime
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           
  2188                           ;psect for function _setTemp_Enable
  2189  0E8E                     _setTemp_Enable:	
  2190                           
  2191                           ;incstack = 0
  2192                           ; Regs used in _setTemp_Enable: [wreg]
  2193                           ;setTemp_Enable@command stored from wreg
  2194  0E8E  00F4               	movwf	setTemp_Enable@command
  2195                           
  2196                           ;OverTemperature_B1.c: 17: Temp.Enable = command;
  2197  0E8F  0874               	movf	setTemp_Enable@command,w
  2198  0E90  1283               	bcf	3,5	;RP0=0, select bank0
  2199  0E91  1303               	bcf	3,6	;RP1=0, select bank0
  2200  0E92  1050               	bcf	_Temp,0
  2201  0E93  1D03               	skipz
  2202  0E94  1450               	bsf	_Temp,0
  2203  0E95  0008               	return
  2204  0E96                     __end_of_setTemp_Enable:	
  2205                           
  2206                           	psect	text3
  2207  0E9E                     __ptext3:	
  2208 ;; *************** function _setLoad_Enable *****************
  2209 ;; Defined at:
  2210 ;;		line 257 in file "../src/OverLoad_B1.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;  command         1    wreg     unsigned char 
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;  command         1    4[COMMON] unsigned char 
  2215 ;; Return value:  Size  Location     Type
  2216 ;;		None               void
  2217 ;; Registers used:
  2218 ;;		wreg
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2224 ;;      Params:         0       0       0       0
  2225 ;;      Locals:         1       0       0       0
  2226 ;;      Temps:          0       0       0       0
  2227 ;;      Totals:         1       0       0       0
  2228 ;;Total ram usage:        1 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:    2
  2231 ;; This function calls:
  2232 ;;		Nothing
  2233 ;; This function is called by:
  2234 ;;		_my_MainTime
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           
  2239                           ;psect for function _setLoad_Enable
  2240  0E9E                     _setLoad_Enable:	
  2241                           
  2242                           ;incstack = 0
  2243                           ; Regs used in _setLoad_Enable: [wreg]
  2244                           ;setLoad_Enable@command stored from wreg
  2245  0E9E  00F4               	movwf	setLoad_Enable@command
  2246                           
  2247                           ;OverLoad_B1.c: 258: Load1.Enable = command;
  2248  0E9F  0874               	movf	setLoad_Enable@command,w
  2249  0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  2250  0EA1  1303               	bcf	3,6	;RP1=0, select bank0
  2251  0EA2  102D               	bcf	_Load1,0
  2252  0EA3  1D03               	skipz
  2253  0EA4  142D               	bsf	_Load1,0
  2254                           
  2255                           ;OverLoad_B1.c: 259: Load1.GO = 0;
  2256  0EA5  10AD               	bcf	_Load1,1
  2257  0EA6  0008               	return
  2258  0EA7                     __end_of_setLoad_Enable:	
  2259                           
  2260                           	psect	text4
  2261  07FF                     __ptext4:	
  2262 ;; *************** function _myMain_Initialization *****************
  2263 ;; Defined at:
  2264 ;;		line 167 in file "../src/Main_B1.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;		None
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;		None
  2269 ;; Return value:  Size  Location     Type
  2270 ;;		None               void
  2271 ;; Registers used:
  2272 ;;		None
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2278 ;;      Params:         0       0       0       0
  2279 ;;      Locals:         0       0       0       0
  2280 ;;      Temps:          0       0       0       0
  2281 ;;      Totals:         0       0       0       0
  2282 ;;Total ram usage:        0 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    2
  2285 ;; This function calls:
  2286 ;;		Nothing
  2287 ;; This function is called by:
  2288 ;;		_main
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           
  2293                           ;psect for function _myMain_Initialization
  2294  07FF                     _myMain_Initialization:	
  2295                           
  2296                           ;incstack = 0
  2297                           ; Regs used in _myMain_Initialization: []
  2298  07FF  0008               	return
  2299  0800                     __end_of_myMain_Initialization:	
  2300                           
  2301                           	psect	text5
  2302  0747                     __ptext5:	
  2303 ;; *************** function _getTemp_AD *****************
  2304 ;; Defined at:
  2305 ;;		line 33 in file "../src/OverTemperature_B1.c"
  2306 ;; Parameters:    Size  Location     Type
  2307 ;;  channel         1    wreg     unsigned char 
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;  channel         1    6[COMMON] unsigned char 
  2310 ;; Return value:  Size  Location     Type
  2311 ;;		None               void
  2312 ;; Registers used:
  2313 ;;		wreg, status,2, status,0, pclath, cstack
  2314 ;; Tracked objects:
  2315 ;;		On entry : 0/0
  2316 ;;		On exit  : 0/0
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2319 ;;      Params:         0       0       0       0
  2320 ;;      Locals:         1       0       0       0
  2321 ;;      Temps:          0       2       0       0
  2322 ;;      Totals:         1       2       0       0
  2323 ;;Total ram usage:        3 bytes
  2324 ;; Hardware stack levels used:    1
  2325 ;; Hardware stack levels required when called:    4
  2326 ;; This function calls:
  2327 ;;		_getAD
  2328 ;; This function is called by:
  2329 ;;		_main
  2330 ;; This function uses a non-reentrant model
  2331 ;;
  2332                           
  2333                           
  2334                           ;psect for function _getTemp_AD
  2335  0747                     _getTemp_AD:	
  2336                           
  2337                           ;incstack = 0
  2338                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2339                           ;getTemp_AD@channel stored from wreg
  2340  0747  00F6               	movwf	getTemp_AD@channel
  2341                           
  2342                           ;OverTemperature_B1.c: 35: if (RA5 == 1) {
  2343  0748  1283               	bcf	3,5	;RP0=0, select bank0
  2344  0749  1303               	bcf	3,6	;RP1=0, select bank0
  2345  074A  1E85               	btfss	5,5	;volatile
  2346  074B  0008               	return
  2347                           
  2348                           ;OverTemperature_B1.c: 36: if (Temp.ADtoGO == 1) {
  2349  074C  1D50               	btfss	_Temp,2
  2350  074D  0008               	return
  2351                           
  2352                           ;OverTemperature_B1.c: 37: Temp.ADRES = getAD(channel, 0x70);
  2353  074E  3070               	movlw	112
  2354  074F  00E0               	movwf	??_getTemp_AD
  2355  0750  0860               	movf	??_getTemp_AD,w
  2356  0751  00F4               	movwf	getAD@adcon1
  2357  0752  0876               	movf	getTemp_AD@channel,w
  2358  0753  118A  27D5  118A   	fcall	_getAD
  2359  0756  1283               	bcf	3,5	;RP0=0, select bank0
  2360  0757  1303               	bcf	3,6	;RP1=0, select bank0
  2361  0758  00E1               	movwf	??_getTemp_AD+1
  2362  0759  0861               	movf	??_getTemp_AD+1,w
  2363  075A  00D9               	movwf	_Temp+9
  2364                           
  2365                           ;OverTemperature_B1.c: 38: if (Temp.ADH[0] < Temp.ADRES) {
  2366  075B  0859               	movf	_Temp+9,w
  2367  075C  0257               	subwf	_Temp+7,w
  2368  075D  1803               	skipnc
  2369  075E  2F64               	goto	l3678
  2370                           
  2371                           ;OverTemperature_B1.c: 39: Temp.ADH[0] = Temp.ADRES;
  2372  075F  0859               	movf	_Temp+9,w
  2373  0760  00E0               	movwf	??_getTemp_AD
  2374  0761  0860               	movf	??_getTemp_AD,w
  2375  0762  00D7               	movwf	_Temp+7
  2376                           
  2377                           ;OverTemperature_B1.c: 40: } else if (Temp.ADH[1] < Temp.ADRES) {
  2378  0763  0008               	return
  2379  0764                     l3678:	
  2380  0764  0859               	movf	_Temp+9,w
  2381  0765  0258               	subwf	_Temp+8,w
  2382  0766  1803               	skipnc
  2383  0767  0008               	return
  2384                           
  2385                           ;OverTemperature_B1.c: 41: Temp.ADH[1] = Temp.ADRES;
  2386  0768  0859               	movf	_Temp+9,w
  2387  0769  00E0               	movwf	??_getTemp_AD
  2388  076A  0860               	movf	??_getTemp_AD,w
  2389  076B  00D8               	movwf	_Temp+8
  2390  076C  0008               	return
  2391  076D                     __end_of_getTemp_AD:	
  2392                           
  2393                           	psect	text6
  2394  01C1                     __ptext6:	
  2395 ;; *************** function _getPIR_AD *****************
  2396 ;; Defined at:
  2397 ;;		line 172 in file "../src/PIR_B1.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;  channel1        1    wreg     unsigned char 
  2400 ;;  channel2        1    6[COMMON] unsigned char 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  channel1        1   12[BANK0 ] unsigned char 
  2403 ;;  i               1   13[BANK0 ] unsigned char 
  2404 ;;  j               1   11[BANK0 ] unsigned char 
  2405 ;; Return value:  Size  Location     Type
  2406 ;;		None               void
  2407 ;; Registers used:
  2408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2414 ;;      Params:         1       0       0       0
  2415 ;;      Locals:         0       3       0       0
  2416 ;;      Temps:          0       3       0       0
  2417 ;;      Totals:         1       6       0       0
  2418 ;;Total ram usage:        7 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; Hardware stack levels required when called:    4
  2421 ;; This function calls:
  2422 ;;		___awdiv
  2423 ;;		___lwdiv
  2424 ;;		_getAD
  2425 ;; This function is called by:
  2426 ;;		_main
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           
  2431                           ;psect for function _getPIR_AD
  2432  01C1                     _getPIR_AD:	
  2433                           
  2434                           ;incstack = 0
  2435                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2436                           ;getPIR_AD@channel1 stored from wreg
  2437  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  2438  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  2439  01C3  00EC               	movwf	getPIR_AD@channel1
  2440                           
  2441                           ;PIR_B1.c: 173: char i = 0, j = 0;
  2442  01C4  01ED               	clrf	getPIR_AD@i
  2443  01C5  01EB               	clrf	getPIR_AD@j
  2444                           
  2445                           ;PIR_B1.c: 175: if (_PIR.ADtoGO == 1) {
  2446  01C6  1683               	bsf	3,5	;RP0=1, select bank1
  2447  01C7  1303               	bcf	3,6	;RP1=0, select bank1
  2448  01C8  1CA8               	btfss	__PIR^(0+128),1
  2449  01C9  0008               	return
  2450                           
  2451                           ;PIR_B1.c: 176: _PIR.GO = 1;
  2452  01CA  1528               	bsf	__PIR^(0+128),2
  2453                           
  2454                           ;PIR_B1.c: 177: _PIR.ADRES = getAD(channel1, 0x70);
  2455  01CB  3070               	movlw	112
  2456  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  2457  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  2458  01CE  00E8               	movwf	??_getPIR_AD
  2459  01CF  0868               	movf	??_getPIR_AD,w
  2460  01D0  00F4               	movwf	getAD@adcon1
  2461  01D1  086C               	movf	getPIR_AD@channel1,w
  2462  01D2  118A  27D5  118A   	fcall	_getAD
  2463  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  2464  01D6  1303               	bcf	3,6	;RP1=0, select bank0
  2465  01D7  00E9               	movwf	??_getPIR_AD+1
  2466  01D8  0869               	movf	??_getPIR_AD+1,w
  2467  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  2468  01DA  1303               	bcf	3,6	;RP1=0, select bank1
  2469  01DB  00AA               	movwf	(__PIR^(0+128)+2)
  2470                           
  2471                           ;PIR_B1.c: 178: _PIR.VRAD = _PIR.ADRES / 51;
  2472  01DC  3033               	movlw	51
  2473  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  2474  01DE  1303               	bcf	3,6	;RP1=0, select bank0
  2475  01DF  00E0               	movwf	___awdiv@divisor
  2476  01E0  3000               	movlw	0
  2477  01E1  00E1               	movwf	___awdiv@divisor+1
  2478  01E2  1683               	bsf	3,5	;RP0=1, select bank1
  2479  01E3  1303               	bcf	3,6	;RP1=0, select bank1
  2480  01E4  082A               	movf	(__PIR^(0+128)+2),w
  2481  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  2482  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  2483  01E7  00E8               	movwf	??_getPIR_AD
  2484  01E8  01E9               	clrf	??_getPIR_AD+1
  2485  01E9  0868               	movf	??_getPIR_AD,w
  2486  01EA  00E2               	movwf	___awdiv@dividend
  2487  01EB  0869               	movf	??_getPIR_AD+1,w
  2488  01EC  00E3               	movwf	___awdiv@dividend+1
  2489  01ED  118A  25B2  118A   	fcall	___awdiv
  2490  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  2491  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  2492  01F2  0860               	movf	?___awdiv,w
  2493  01F3  00EA               	movwf	??_getPIR_AD+2
  2494  01F4  086A               	movf	??_getPIR_AD+2,w
  2495  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  2496  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  2497  01F7  00AB               	movwf	(__PIR^(0+128)+3)
  2498                           
  2499                           ;PIR_B1.c: 179: _PIR.VRAD1 = _PIR.ADRES;
  2500  01F8  082A               	movf	(__PIR^(0+128)+2),w
  2501  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  2502  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  2503  01FB  00E8               	movwf	??_getPIR_AD
  2504  01FC  0868               	movf	??_getPIR_AD,w
  2505  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  2506  01FE  1303               	bcf	3,6	;RP1=0, select bank1
  2507  01FF  00AC               	movwf	(__PIR^(0+128)+4)
  2508                           
  2509                           ;PIR_B1.c: 180: _PIR.ADRES = getAD(channel2, 0x70);
  2510  0200  3070               	movlw	112
  2511  0201  1283               	bcf	3,5	;RP0=0, select bank0
  2512  0202  1303               	bcf	3,6	;RP1=0, select bank0
  2513  0203  00E8               	movwf	??_getPIR_AD
  2514  0204  0868               	movf	??_getPIR_AD,w
  2515  0205  00F4               	movwf	getAD@adcon1
  2516  0206  0876               	movf	getPIR_AD@channel2,w
  2517  0207  118A  27D5  118A   	fcall	_getAD
  2518  020A  1283               	bcf	3,5	;RP0=0, select bank0
  2519  020B  1303               	bcf	3,6	;RP1=0, select bank0
  2520  020C  00E9               	movwf	??_getPIR_AD+1
  2521  020D  0869               	movf	??_getPIR_AD+1,w
  2522  020E  1683               	bsf	3,5	;RP0=1, select bank1
  2523  020F  1303               	bcf	3,6	;RP1=0, select bank1
  2524  0210  00AA               	movwf	(__PIR^(0+128)+2)
  2525                           
  2526                           ;PIR_B1.c: 181: _PIR.SignalAD = _PIR.ADRES;
  2527  0211  082A               	movf	(__PIR^(0+128)+2),w
  2528  0212  1283               	bcf	3,5	;RP0=0, select bank0
  2529  0213  1303               	bcf	3,6	;RP1=0, select bank0
  2530  0214  00E8               	movwf	??_getPIR_AD
  2531  0215  0868               	movf	??_getPIR_AD,w
  2532  0216  1683               	bsf	3,5	;RP0=1, select bank1
  2533  0217  1303               	bcf	3,6	;RP1=0, select bank1
  2534  0218  00A9               	movwf	(__PIR^(0+128)+1)
  2535                           
  2536                           ;PIR_B1.c: 183: switch (_PIR.VRAD) {
  2537  0219  2A35               	goto	l3710
  2538  021A                     l3694:	
  2539                           ;PIR_B1.c: 184: case 0:
  2540                           
  2541                           
  2542                           ;PIR_B1.c: 185: if (_PIR.VRAD1 < 10) {
  2543  021A  300A               	movlw	10
  2544  021B  022C               	subwf	(__PIR^(0+128)+4),w
  2545  021C  1803               	skipnc
  2546  021D  2A20               	goto	l3698
  2547                           
  2548                           ;PIR_B1.c: 186: _PIR.CloseTimeValue = 5;
  2549  021E  3005               	movlw	5
  2550  021F  2A21               	goto	L1
  2551  0220                     l3698:	
  2552                           ;PIR_B1.c: 187: } else {
  2553                           
  2554                           
  2555                           ;PIR_B1.c: 188: _PIR.CloseTimeValue = 60;
  2556  0220  303C               	movlw	60
  2557  0221                     L1:	
  2558  0221  00CF               	movwf	(__PIR^(0+128)+39)
  2559  0222  3000               	movlw	0
  2560  0223  2A33               	goto	L5
  2561  0224                     l3700:	
  2562                           ;PIR_B1.c: 191: case 1:
  2563                           
  2564                           ;PIR_B1.c: 189: }
  2565                           ;PIR_B1.c: 190: break;
  2566                           
  2567                           
  2568                           ;PIR_B1.c: 192: _PIR.CloseTimeValue = 300;
  2569  0224  302C               	movlw	44
  2570  0225  00CF               	movwf	(__PIR^(0+128)+39)
  2571  0226  3001               	movlw	1
  2572  0227  2A33               	goto	L5
  2573  0228                     l3702:	
  2574                           ;PIR_B1.c: 194: case 2:
  2575                           
  2576                           ;PIR_B1.c: 193: break;
  2577                           
  2578                           
  2579                           ;PIR_B1.c: 195: _PIR.CloseTimeValue = 600;
  2580  0228  3058               	movlw	88
  2581  0229  00CF               	movwf	(__PIR^(0+128)+39)
  2582  022A  3002               	movlw	2
  2583  022B  2A33               	goto	L5
  2584  022C                     l3704:	
  2585                           ;PIR_B1.c: 197: case 3:
  2586                           
  2587                           ;PIR_B1.c: 196: break;
  2588                           
  2589                           
  2590                           ;PIR_B1.c: 198: _PIR.CloseTimeValue = 900;
  2591  022C  3084               	movlw	132
  2592  022D  00CF               	movwf	(__PIR^(0+128)+39)
  2593  022E  3003               	movlw	3
  2594  022F  2A33               	goto	L5
  2595  0230                     l3706:	
  2596                           ;PIR_B1.c: 200: case 4:
  2597                           
  2598                           ;PIR_B1.c: 199: break;
  2599                           
  2600                           
  2601                           ;PIR_B1.c: 201: _PIR.CloseTimeValue = 1200;
  2602  0230  30B0               	movlw	176
  2603  0231  00CF               	movwf	(__PIR^(0+128)+39)
  2604  0232  3004               	movlw	4
  2605  0233                     L5:	
  2606  0233  00D0               	movwf	(__PIR^(0+128)+40)
  2607                           
  2608                           ;PIR_B1.c: 203: }
  2609                           
  2610                           ;PIR_B1.c: 202: break;
  2611  0234  2A46               	goto	l3712
  2612  0235                     l3710:	
  2613  0235  082B               	movf	(__PIR^(0+128)+3),w
  2614                           
  2615                           ; Switch size 1, requested type "space"
  2616                           ; Number of cases is 5, Range of values is 0 to 4
  2617                           ; switch strategies available:
  2618                           ; Name         Instructions Cycles
  2619                           ; simple_byte           16     9 (average)
  2620                           ; direct_byte           17     7 (fixed)
  2621                           ; jumptable            260     6 (fixed)
  2622                           ;	Chosen strategy is simple_byte
  2623  0236  3A00               	xorlw	0	; case 0
  2624  0237  1903               	skipnz
  2625  0238  2A1A               	goto	l3694
  2626  0239  3A01               	xorlw	1	; case 1
  2627  023A  1903               	skipnz
  2628  023B  2A24               	goto	l3700
  2629  023C  3A03               	xorlw	3	; case 2
  2630  023D  1903               	skipnz
  2631  023E  2A28               	goto	l3702
  2632  023F  3A01               	xorlw	1	; case 3
  2633  0240  1903               	skipnz
  2634  0241  2A2C               	goto	l3704
  2635  0242  3A07               	xorlw	7	; case 4
  2636  0243  1903               	skipnz
  2637  0244  2A30               	goto	l3706
  2638  0245  2A46               	goto	l3712
  2639  0246                     l3712:	
  2640                           
  2641                           ;PIR_B1.c: 206: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2642  0246  0829               	movf	(__PIR^(0+128)+1),w
  2643  0247  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0248  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0249  00E8               	movwf	??_getPIR_AD
  2646  024A  1683               	bsf	3,5	;RP0=1, select bank1
  2647  024B  1303               	bcf	3,6	;RP1=0, select bank1
  2648  024C  082F               	movf	(__PIR^(0+128)+7),w
  2649  024D  3EB0               	addlw	(__PIR+8)& (0+255)
  2650  024E  0084               	movwf	4
  2651  024F  1283               	bcf	3,5	;RP0=0, select bank0
  2652  0250  1303               	bcf	3,6	;RP1=0, select bank0
  2653  0251  0868               	movf	??_getPIR_AD,w
  2654  0252  1383               	bcf	3,7	;select IRP bank1
  2655  0253  0080               	movwf	0
  2656                           
  2657                           ;PIR_B1.c: 207: for (i = 0; i < 10; i++) {
  2658  0254  01ED               	clrf	getPIR_AD@i
  2659  0255  300A               	movlw	10
  2660  0256  026D               	subwf	getPIR_AD@i,w
  2661  0257  1803               	btfsc	3,0
  2662  0258  2A75               	goto	l3726
  2663  0259                     l3720:	
  2664                           
  2665                           ;PIR_B1.c: 208: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2666  0259  086D               	movf	getPIR_AD@i,w
  2667  025A  3EB0               	addlw	(__PIR+8)& (0+255)
  2668  025B  0084               	movwf	4
  2669  025C  0800               	movf	0,w
  2670  025D  00E8               	movwf	??_getPIR_AD
  2671  025E  01E9               	clrf	??_getPIR_AD+1
  2672  025F  0868               	movf	??_getPIR_AD,w
  2673  0260  1683               	bsf	3,5	;RP0=1, select bank1
  2674  0261  1303               	bcf	3,6	;RP1=0, select bank1
  2675  0262  07BA               	addwf	(__PIR^(0+128)+18),f
  2676  0263  1803               	skipnc
  2677  0264  0ABB               	incf	((__PIR+1)^(0+128)+18),f
  2678  0265  1283               	bcf	3,5	;RP0=0, select bank0
  2679  0266  1303               	bcf	3,6	;RP1=0, select bank0
  2680  0267  0869               	movf	??_getPIR_AD+1,w
  2681  0268  1683               	bsf	3,5	;RP0=1, select bank1
  2682  0269  1303               	bcf	3,6	;RP1=0, select bank1
  2683  026A  07BB               	addwf	((__PIR+1)^(0+128)+18),f
  2684  026B  3001               	movlw	1
  2685  026C  1283               	bcf	3,5	;RP0=0, select bank0
  2686  026D  1303               	bcf	3,6	;RP1=0, select bank0
  2687  026E  00E8               	movwf	??_getPIR_AD
  2688  026F  0868               	movf	??_getPIR_AD,w
  2689  0270  07ED               	addwf	getPIR_AD@i,f
  2690  0271  300A               	movlw	10
  2691  0272  026D               	subwf	getPIR_AD@i,w
  2692  0273  1C03               	skipc
  2693  0274  2A59               	goto	l3720
  2694  0275                     l3726:	
  2695                           
  2696                           ;PIR_B1.c: 209: }
  2697                           ;PIR_B1.c: 210: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2698  0275  300A               	movlw	10
  2699  0276  00E0               	movwf	___lwdiv@divisor
  2700  0277  3000               	movlw	0
  2701  0278  00E1               	movwf	___lwdiv@divisor+1
  2702  0279  1683               	bsf	3,5	;RP0=1, select bank1
  2703  027A  1303               	bcf	3,6	;RP1=0, select bank1
  2704  027B  083B               	movf	((__PIR+1)^(0+128)+18),w
  2705  027C  1283               	bcf	3,5	;RP0=0, select bank0
  2706  027D  1303               	bcf	3,6	;RP1=0, select bank0
  2707  027E  01E3               	clrf	___lwdiv@dividend+1
  2708  027F  07E3               	addwf	___lwdiv@dividend+1,f
  2709  0280  1683               	bsf	3,5	;RP0=1, select bank1
  2710  0281  1303               	bcf	3,6	;RP1=0, select bank1
  2711  0282  083A               	movf	(__PIR^(0+128)+18),w
  2712  0283  1283               	bcf	3,5	;RP0=0, select bank0
  2713  0284  1303               	bcf	3,6	;RP1=0, select bank0
  2714  0285  01E2               	clrf	___lwdiv@dividend
  2715  0286  07E2               	addwf	___lwdiv@dividend,f
  2716  0287  118A  26A2  118A   	fcall	___lwdiv
  2717  028A  1283               	bcf	3,5	;RP0=0, select bank0
  2718  028B  1303               	bcf	3,6	;RP1=0, select bank0
  2719  028C  0860               	movf	?___lwdiv,w
  2720  028D  00E8               	movwf	??_getPIR_AD
  2721  028E  1683               	bsf	3,5	;RP0=1, select bank1
  2722  028F  1303               	bcf	3,6	;RP1=0, select bank1
  2723  0290  083C               	movf	(__PIR^(0+128)+20),w
  2724  0291  3EBD               	addlw	(__PIR+21)& (0+255)
  2725  0292  0084               	movwf	4
  2726  0293  1283               	bcf	3,5	;RP0=0, select bank0
  2727  0294  1303               	bcf	3,6	;RP1=0, select bank0
  2728  0295  0868               	movf	??_getPIR_AD,w
  2729  0296  1383               	bcf	3,7	;select IRP bank1
  2730  0297  0080               	movwf	0
  2731                           
  2732                           ;PIR_B1.c: 211: _PIR.TenAverageValue = 0;
  2733  0298  1683               	bsf	3,5	;RP0=1, select bank1
  2734  0299  1303               	bcf	3,6	;RP1=0, select bank1
  2735  029A  01BA               	clrf	(__PIR^(0+128)+18)
  2736  029B  01BB               	clrf	((__PIR+1)^(0+128)+18)
  2737                           
  2738                           ;PIR_B1.c: 213: for (i = 0; i <= 9; i++) {
  2739  029C  1283               	bcf	3,5	;RP0=0, select bank0
  2740  029D  1303               	bcf	3,6	;RP1=0, select bank0
  2741  029E  01ED               	clrf	getPIR_AD@i
  2742  029F  300A               	movlw	10
  2743  02A0  026D               	subwf	getPIR_AD@i,w
  2744  02A1  1803               	btfsc	3,0
  2745  02A2  2ABF               	goto	l3742
  2746  02A3                     l3736:	
  2747                           
  2748                           ;PIR_B1.c: 214: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2749  02A3  086D               	movf	getPIR_AD@i,w
  2750  02A4  3EBD               	addlw	(__PIR+21)& (0+255)
  2751  02A5  0084               	movwf	4
  2752  02A6  0800               	movf	0,w
  2753  02A7  00E8               	movwf	??_getPIR_AD
  2754  02A8  01E9               	clrf	??_getPIR_AD+1
  2755  02A9  0868               	movf	??_getPIR_AD,w
  2756  02AA  1683               	bsf	3,5	;RP0=1, select bank1
  2757  02AB  1303               	bcf	3,6	;RP1=0, select bank1
  2758  02AC  07C7               	addwf	(__PIR^(0+128)+31),f
  2759  02AD  1803               	skipnc
  2760  02AE  0AC8               	incf	((__PIR+1)^(0+128)+31),f
  2761  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2762  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2763  02B1  0869               	movf	??_getPIR_AD+1,w
  2764  02B2  1683               	bsf	3,5	;RP0=1, select bank1
  2765  02B3  1303               	bcf	3,6	;RP1=0, select bank1
  2766  02B4  07C8               	addwf	((__PIR+1)^(0+128)+31),f
  2767  02B5  3001               	movlw	1
  2768  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  2769  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  2770  02B8  00E8               	movwf	??_getPIR_AD
  2771  02B9  0868               	movf	??_getPIR_AD,w
  2772  02BA  07ED               	addwf	getPIR_AD@i,f
  2773  02BB  300A               	movlw	10
  2774  02BC  026D               	subwf	getPIR_AD@i,w
  2775  02BD  1C03               	skipc
  2776  02BE  2AA3               	goto	l3736
  2777  02BF                     l3742:	
  2778                           
  2779                           ;PIR_B1.c: 215: }
  2780                           ;PIR_B1.c: 216: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2781  02BF  300A               	movlw	10
  2782  02C0  00E0               	movwf	___lwdiv@divisor
  2783  02C1  3000               	movlw	0
  2784  02C2  00E1               	movwf	___lwdiv@divisor+1
  2785  02C3  1683               	bsf	3,5	;RP0=1, select bank1
  2786  02C4  1303               	bcf	3,6	;RP1=0, select bank1
  2787  02C5  0848               	movf	((__PIR+1)^(0+128)+31),w
  2788  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2789  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  2790  02C8  01E3               	clrf	___lwdiv@dividend+1
  2791  02C9  07E3               	addwf	___lwdiv@dividend+1,f
  2792  02CA  1683               	bsf	3,5	;RP0=1, select bank1
  2793  02CB  1303               	bcf	3,6	;RP1=0, select bank1
  2794  02CC  0847               	movf	(__PIR^(0+128)+31),w
  2795  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2796  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2797  02CF  01E2               	clrf	___lwdiv@dividend
  2798  02D0  07E2               	addwf	___lwdiv@dividend,f
  2799  02D1  118A  26A2  118A   	fcall	___lwdiv
  2800  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  2801  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  2802  02D6  0860               	movf	?___lwdiv,w
  2803  02D7  00E8               	movwf	??_getPIR_AD
  2804  02D8  0868               	movf	??_getPIR_AD,w
  2805  02D9  1683               	bsf	3,5	;RP0=1, select bank1
  2806  02DA  1303               	bcf	3,6	;RP1=0, select bank1
  2807  02DB  00AE               	movwf	(__PIR^(0+128)+6)
  2808                           
  2809                           ;PIR_B1.c: 217: _PIR.HundredAverageValue = 0;
  2810  02DC  01C7               	clrf	(__PIR^(0+128)+31)
  2811  02DD  01C8               	clrf	((__PIR+1)^(0+128)+31)
  2812                           
  2813                           ;PIR_B1.c: 219: if (_PIR.TenCount < 10) {
  2814  02DE  300A               	movlw	10
  2815  02DF  022F               	subwf	(__PIR^(0+128)+7),w
  2816  02E0  1803               	skipnc
  2817  02E1  2AEB               	goto	l3750
  2818                           
  2819                           ;PIR_B1.c: 220: _PIR.TenCount++;
  2820  02E2  3001               	movlw	1
  2821  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  2822  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  2823  02E5  00E8               	movwf	??_getPIR_AD
  2824  02E6  0868               	movf	??_getPIR_AD,w
  2825  02E7  1683               	bsf	3,5	;RP0=1, select bank1
  2826  02E8  1303               	bcf	3,6	;RP1=0, select bank1
  2827  02E9  07AF               	addwf	(__PIR^(0+128)+7),f
  2828                           
  2829                           ;PIR_B1.c: 221: } else {
  2830  02EA  0008               	return
  2831  02EB                     l3750:	
  2832                           
  2833                           ;PIR_B1.c: 222: _PIR.TenCount = 0;
  2834  02EB  01AF               	clrf	(__PIR^(0+128)+7)
  2835                           
  2836                           ;PIR_B1.c: 223: if (_PIR.HundreCount < 10)
  2837  02EC  300A               	movlw	10
  2838  02ED  023C               	subwf	(__PIR^(0+128)+20),w
  2839  02EE  1803               	skipnc
  2840  02EF  2AF9               	goto	l3756
  2841                           
  2842                           ;PIR_B1.c: 224: _PIR.HundreCount++;
  2843  02F0  3001               	movlw	1
  2844  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  2845  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  2846  02F3  00E8               	movwf	??_getPIR_AD
  2847  02F4  0868               	movf	??_getPIR_AD,w
  2848  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  2849  02F6  1303               	bcf	3,6	;RP1=0, select bank1
  2850  02F7  07BC               	addwf	(__PIR^(0+128)+20),f
  2851  02F8  0008               	return
  2852  02F9                     l3756:	
  2853                           
  2854                           ;PIR_B1.c: 225: else
  2855                           ;PIR_B1.c: 226: _PIR.HundreCount = 0;
  2856  02F9  01BC               	clrf	(__PIR^(0+128)+20)
  2857  02FA  0008               	return
  2858  02FB                     __end_of_getPIR_AD:	
  2859                           
  2860                           	psect	text7
  2861  06A2                     __ptext7:	
  2862 ;; *************** function ___lwdiv *****************
  2863 ;; Defined at:
  2864 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  divisor         2    0[BANK0 ] unsigned int 
  2867 ;;  dividend        2    2[BANK0 ] unsigned int 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  quotient        2    5[BANK0 ] unsigned int 
  2870 ;;  counter         1    4[BANK0 ] unsigned char 
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  2    0[BANK0 ] unsigned int 
  2873 ;; Registers used:
  2874 ;;		wreg, status,2, status,0
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2880 ;;      Params:         0       4       0       0
  2881 ;;      Locals:         0       3       0       0
  2882 ;;      Temps:          1       0       0       0
  2883 ;;      Totals:         1       7       0       0
  2884 ;;Total ram usage:        8 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    2
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		_getPIR_AD
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           
  2895                           ;psect for function ___lwdiv
  2896  06A2                     ___lwdiv:	
  2897                           
  2898                           ;incstack = 0
  2899                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2900  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  2901  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  2902  06A4  01E5               	clrf	___lwdiv@quotient
  2903  06A5  01E6               	clrf	___lwdiv@quotient+1
  2904  06A6  0861               	movf	___lwdiv@divisor+1,w
  2905  06A7  0460               	iorwf	___lwdiv@divisor,w
  2906  06A8  1903               	skipnz
  2907  06A9  2EDB               	goto	l3582
  2908  06AA  01E4               	clrf	___lwdiv@counter
  2909  06AB  0AE4               	incf	___lwdiv@counter,f
  2910  06AC                     l3570:	
  2911  06AC  1BE1               	btfsc	___lwdiv@divisor+1,7
  2912  06AD  2EBA               	goto	l3572
  2913  06AE  3001               	movlw	1
  2914  06AF                     u3905:	
  2915  06AF  1003               	clrc
  2916  06B0  0DE0               	rlf	___lwdiv@divisor,f
  2917  06B1  0DE1               	rlf	___lwdiv@divisor+1,f
  2918  06B2  3EFF               	addlw	-1
  2919  06B3  1D03               	skipz
  2920  06B4  2EAF               	goto	u3905
  2921  06B5  3001               	movlw	1
  2922  06B6  00F4               	movwf	??___lwdiv
  2923  06B7  0874               	movf	??___lwdiv,w
  2924  06B8  07E4               	addwf	___lwdiv@counter,f
  2925  06B9  2EAC               	goto	l3570
  2926  06BA                     l3572:	
  2927  06BA  3001               	movlw	1
  2928  06BB                     u3925:	
  2929  06BB  1003               	clrc
  2930  06BC  0DE5               	rlf	___lwdiv@quotient,f
  2931  06BD  0DE6               	rlf	___lwdiv@quotient+1,f
  2932  06BE  3EFF               	addlw	-1
  2933  06BF  1D03               	skipz
  2934  06C0  2EBB               	goto	u3925
  2935  06C1  0861               	movf	___lwdiv@divisor+1,w
  2936  06C2  0263               	subwf	___lwdiv@dividend+1,w
  2937  06C3  1D03               	skipz
  2938  06C4  2EC7               	goto	u3935
  2939  06C5  0860               	movf	___lwdiv@divisor,w
  2940  06C6  0262               	subwf	___lwdiv@dividend,w
  2941  06C7                     u3935:	
  2942  06C7  1C03               	skipc
  2943  06C8  2ED0               	goto	l3578
  2944  06C9  0860               	movf	___lwdiv@divisor,w
  2945  06CA  02E2               	subwf	___lwdiv@dividend,f
  2946  06CB  0861               	movf	___lwdiv@divisor+1,w
  2947  06CC  1C03               	skipc
  2948  06CD  03E3               	decf	___lwdiv@dividend+1,f
  2949  06CE  02E3               	subwf	___lwdiv@dividend+1,f
  2950  06CF  1465               	bsf	___lwdiv@quotient,0
  2951  06D0                     l3578:	
  2952  06D0  3001               	movlw	1
  2953  06D1                     u3945:	
  2954  06D1  1003               	clrc
  2955  06D2  0CE1               	rrf	___lwdiv@divisor+1,f
  2956  06D3  0CE0               	rrf	___lwdiv@divisor,f
  2957  06D4  3EFF               	addlw	-1
  2958  06D5  1D03               	skipz
  2959  06D6  2ED1               	goto	u3945
  2960  06D7  3001               	movlw	1
  2961  06D8  02E4               	subwf	___lwdiv@counter,f
  2962  06D9  1D03               	btfss	3,2
  2963  06DA  2EBA               	goto	l3572
  2964  06DB                     l3582:	
  2965  06DB  0866               	movf	___lwdiv@quotient+1,w
  2966  06DC  01E1               	clrf	?___lwdiv+1
  2967  06DD  07E1               	addwf	?___lwdiv+1,f
  2968  06DE  0865               	movf	___lwdiv@quotient,w
  2969  06DF  01E0               	clrf	?___lwdiv
  2970  06E0  07E0               	addwf	?___lwdiv,f
  2971  06E1  0008               	return
  2972  06E2                     __end_of___lwdiv:	
  2973                           
  2974                           	psect	text8
  2975  060F                     __ptext8:	
  2976 ;; *************** function _getLoad_AD *****************
  2977 ;; Defined at:
  2978 ;;		line 15 in file "../src/OverLoad_B1.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  channel         1    wreg     unsigned char 
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;  channel         1    2[BANK0 ] unsigned char 
  2983 ;;  i               1    4[BANK0 ] unsigned char 
  2984 ;;  j               1    3[BANK0 ] unsigned char 
  2985 ;; Return value:  Size  Location     Type
  2986 ;;		None               void
  2987 ;; Registers used:
  2988 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2994 ;;      Params:         0       0       0       0
  2995 ;;      Locals:         0       3       0       0
  2996 ;;      Temps:          0       2       0       0
  2997 ;;      Totals:         0       5       0       0
  2998 ;;Total ram usage:        5 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    4
  3001 ;; This function calls:
  3002 ;;		_getAD
  3003 ;; This function is called by:
  3004 ;;		_main
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           
  3009                           ;psect for function _getLoad_AD
  3010  060F                     _getLoad_AD:	
  3011                           
  3012                           ;incstack = 0
  3013                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3014                           ;getLoad_AD@channel stored from wreg
  3015  060F  1283               	bcf	3,5	;RP0=0, select bank0
  3016  0610  1303               	bcf	3,6	;RP1=0, select bank0
  3017  0611  00E2               	movwf	getLoad_AD@channel
  3018                           
  3019                           ;OverLoad_B1.c: 16: char i = 0, j = 0;
  3020  0612  01E4               	clrf	getLoad_AD@i
  3021  0613  01E3               	clrf	getLoad_AD@j
  3022                           
  3023                           ;OverLoad_B1.c: 18: if (Load1.ADtoGO == 1) {
  3024  0614  1E2D               	btfss	_Load1,4
  3025  0615  0008               	return
  3026                           
  3027                           ;OverLoad_B1.c: 19: Load1.ADRES = getAD(channel, 0xc1);
  3028  0616  30C1               	movlw	193
  3029  0617  00E0               	movwf	??_getLoad_AD
  3030  0618  0860               	movf	??_getLoad_AD,w
  3031  0619  00F4               	movwf	getAD@adcon1
  3032  061A  0862               	movf	getLoad_AD@channel,w
  3033  061B  118A  27D5  118A   	fcall	_getAD
  3034  061E  1283               	bcf	3,5	;RP0=0, select bank0
  3035  061F  1303               	bcf	3,6	;RP1=0, select bank0
  3036  0620  00E1               	movwf	??_getLoad_AD+1
  3037  0621  0861               	movf	??_getLoad_AD+1,w
  3038  0622  00C1               	movwf	_Load1+20
  3039                           
  3040                           ;OverLoad_B1.c: 20: for (i = 0; i < 5; i++) {
  3041  0623  01E4               	clrf	getLoad_AD@i
  3042  0624  3005               	movlw	5
  3043  0625  0264               	subwf	getLoad_AD@i,w
  3044  0626  1803               	btfsc	3,0
  3045  0627  2E42               	goto	l3652
  3046  0628                     l3642:	
  3047                           
  3048                           ;OverLoad_B1.c: 21: if (Load1.AH[i] < Load1.ADRES) {
  3049  0628  0864               	movf	getLoad_AD@i,w
  3050  0629  3E34               	addlw	(_Load1+7)& (0+255)
  3051  062A  0084               	movwf	4
  3052  062B  0841               	movf	_Load1+20,w
  3053  062C  1383               	bcf	3,7	;select IRP bank0
  3054  062D  0200               	subwf	0,w
  3055  062E  1803               	skipnc
  3056  062F  2E3A               	goto	l3648
  3057                           
  3058                           ;OverLoad_B1.c: 22: Load1.AH[i] = Load1.ADRES;
  3059  0630  0841               	movf	_Load1+20,w
  3060  0631  00E0               	movwf	??_getLoad_AD
  3061  0632  0864               	movf	getLoad_AD@i,w
  3062  0633  3E34               	addlw	(_Load1+7)& (0+255)
  3063  0634  0084               	movwf	4
  3064  0635  0860               	movf	??_getLoad_AD,w
  3065  0636  0080               	movwf	0
  3066                           
  3067                           ;OverLoad_B1.c: 23: j = 1;
  3068  0637  01E3               	clrf	getLoad_AD@j
  3069  0638  0AE3               	incf	getLoad_AD@j,f
  3070                           
  3071                           ;OverLoad_B1.c: 24: break;
  3072  0639  2E42               	goto	l3652
  3073  063A                     l3648:	
  3074  063A  3001               	movlw	1
  3075  063B  00E0               	movwf	??_getLoad_AD
  3076  063C  0860               	movf	??_getLoad_AD,w
  3077  063D  07E4               	addwf	getLoad_AD@i,f
  3078  063E  3005               	movlw	5
  3079  063F  0264               	subwf	getLoad_AD@i,w
  3080  0640  1C03               	skipc
  3081  0641  2E28               	goto	l3642
  3082  0642                     l3652:	
  3083                           
  3084                           ;OverLoad_B1.c: 25: }
  3085                           ;OverLoad_B1.c: 26: }
  3086                           ;OverLoad_B1.c: 27: if (j == 0) {
  3087  0642  08E3               	movf	getLoad_AD@j,f
  3088  0643  1D03               	skipz
  3089  0644  0008               	return
  3090                           
  3091                           ;OverLoad_B1.c: 28: for (i = 0; i < 5; i++) {
  3092  0645  01E4               	clrf	getLoad_AD@i
  3093  0646                     L6:	
  3094  0646  3005               	movlw	5
  3095  0647  0264               	subwf	getLoad_AD@i,w
  3096  0648  1803               	btfsc	3,0
  3097  0649  0008               	return
  3098                           
  3099                           ;OverLoad_B1.c: 29: if (Load1.AL[i] > Load1.ADRES) {
  3100  064A  0864               	movf	getLoad_AD@i,w
  3101  064B  3E39               	addlw	(_Load1+12)& (0+255)
  3102  064C  0084               	movwf	4
  3103  064D  1383               	bcf	3,7	;select IRP bank0
  3104  064E  0800               	movf	0,w
  3105  064F  0241               	subwf	_Load1+20,w
  3106  0650  1803               	skipnc
  3107  0651  2E5A               	goto	l3664
  3108                           
  3109                           ;OverLoad_B1.c: 30: Load1.AL[i] = Load1.ADRES;
  3110  0652  0841               	movf	_Load1+20,w
  3111  0653  00E0               	movwf	??_getLoad_AD
  3112  0654  0864               	movf	getLoad_AD@i,w
  3113  0655  3E39               	addlw	(_Load1+12)& (0+255)
  3114  0656  0084               	movwf	4
  3115  0657  0860               	movf	??_getLoad_AD,w
  3116  0658  0080               	movwf	0
  3117                           
  3118                           ;OverLoad_B1.c: 31: break;
  3119  0659  0008               	return
  3120  065A                     l3664:	
  3121  065A  3001               	movlw	1
  3122  065B  00E0               	movwf	??_getLoad_AD
  3123  065C  0860               	movf	??_getLoad_AD,w
  3124  065D  07E4               	addwf	getLoad_AD@i,f
  3125  065E  2E46               	goto	L6
  3126  065F                     __end_of_getLoad_AD:	
  3127                           
  3128                           	psect	text9
  3129  071D                     __ptext9:	
  3130 ;; *************** function _getCDS_AD *****************
  3131 ;; Defined at:
  3132 ;;		line 49 in file "../src/CDS_B1.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  channel1        1    wreg     unsigned char 
  3135 ;;  channel2        1    6[COMMON] unsigned char 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  channel1        1    4[BANK0 ] unsigned char 
  3138 ;;  j               1    3[BANK0 ] unsigned char 
  3139 ;;  i               1    2[BANK0 ] unsigned char 
  3140 ;; Return value:  Size  Location     Type
  3141 ;;		None               void
  3142 ;; Registers used:
  3143 ;;		wreg, status,2, status,0, pclath, cstack
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3149 ;;      Params:         1       0       0       0
  3150 ;;      Locals:         0       3       0       0
  3151 ;;      Temps:          0       2       0       0
  3152 ;;      Totals:         1       5       0       0
  3153 ;;Total ram usage:        6 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    4
  3156 ;; This function calls:
  3157 ;;		_getAD
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           
  3164                           ;psect for function _getCDS_AD
  3165  071D                     _getCDS_AD:	
  3166                           
  3167                           ;incstack = 0
  3168                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3169                           ;getCDS_AD@channel1 stored from wreg
  3170  071D  1283               	bcf	3,5	;RP0=0, select bank0
  3171  071E  1303               	bcf	3,6	;RP1=0, select bank0
  3172  071F  00E4               	movwf	getCDS_AD@channel1
  3173                           
  3174                           ;CDS_B1.c: 50: char i = 0, j = 0;
  3175  0720  01E2               	clrf	getCDS_AD@i
  3176  0721  01E3               	clrf	getCDS_AD@j
  3177                           
  3178                           ;CDS_B1.c: 51: if (_CDS.ADtoGO == 1) {
  3179  0722  1DA5               	btfss	__CDS,3
  3180  0723  0008               	return
  3181                           
  3182                           ;CDS_B1.c: 52: _CDS.GO = 1;
  3183  0724  14A5               	bsf	__CDS,1
  3184                           
  3185                           ;CDS_B1.c: 53: _CDS.ADRES = getAD(channel1, 0x70);
  3186  0725  3070               	movlw	112
  3187  0726  00E0               	movwf	??_getCDS_AD
  3188  0727  0860               	movf	??_getCDS_AD,w
  3189  0728  00F4               	movwf	getAD@adcon1
  3190  0729  0864               	movf	getCDS_AD@channel1,w
  3191  072A  118A  27D5  118A   	fcall	_getAD
  3192  072D  1283               	bcf	3,5	;RP0=0, select bank0
  3193  072E  1303               	bcf	3,6	;RP1=0, select bank0
  3194  072F  00E1               	movwf	??_getCDS_AD+1
  3195  0730  0861               	movf	??_getCDS_AD+1,w
  3196  0731  00A9               	movwf	__CDS+4
  3197                           
  3198                           ;CDS_B1.c: 54: _CDS.VRAD = _CDS.ADRES;
  3199  0732  0829               	movf	__CDS+4,w
  3200  0733  00E0               	movwf	??_getCDS_AD
  3201  0734  0860               	movf	??_getCDS_AD,w
  3202  0735  00A7               	movwf	__CDS+2
  3203                           
  3204                           ;CDS_B1.c: 55: _CDS.ADRES = getAD(channel2, 0x70);
  3205  0736  3070               	movlw	112
  3206  0737  00E0               	movwf	??_getCDS_AD
  3207  0738  0860               	movf	??_getCDS_AD,w
  3208  0739  00F4               	movwf	getAD@adcon1
  3209  073A  0876               	movf	getCDS_AD@channel2,w
  3210  073B  118A  27D5         	fcall	_getAD
  3211  073D  1283               	bcf	3,5	;RP0=0, select bank0
  3212  073E  1303               	bcf	3,6	;RP1=0, select bank0
  3213  073F  00E1               	movwf	??_getCDS_AD+1
  3214  0740  0861               	movf	??_getCDS_AD+1,w
  3215  0741  00A9               	movwf	__CDS+4
  3216                           
  3217                           ;CDS_B1.c: 56: _CDS.SignalAD = _CDS.ADRES;
  3218  0742  0829               	movf	__CDS+4,w
  3219  0743  00E0               	movwf	??_getCDS_AD
  3220  0744  0860               	movf	??_getCDS_AD,w
  3221  0745  00A8               	movwf	__CDS+3
  3222  0746  0008               	return
  3223  0747                     __end_of_getCDS_AD:	
  3224                           
  3225                           	psect	text10
  3226  07D5                     __ptext10:	
  3227 ;; *************** function _getAD *****************
  3228 ;; Defined at:
  3229 ;;		line 426 in file "../src/MCU_B1.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  adcon0          1    wreg     unsigned char 
  3232 ;;  adcon1          1    4[COMMON] unsigned char 
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;  adcon0          1    5[COMMON] unsigned char 
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  1    wreg      unsigned char 
  3237 ;; Registers used:
  3238 ;;		wreg, status,2, status,0, pclath, cstack
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3244 ;;      Params:         1       0       0       0
  3245 ;;      Locals:         1       0       0       0
  3246 ;;      Temps:          0       0       0       0
  3247 ;;      Totals:         2       0       0       0
  3248 ;;Total ram usage:        2 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:    3
  3251 ;; This function calls:
  3252 ;;		_Timeout_Counter
  3253 ;;		_set_TimeoutCleared
  3254 ;; This function is called by:
  3255 ;;		_getCDS_AD
  3256 ;;		_getLoad_AD
  3257 ;;		_getTemp_AD
  3258 ;;		_getPIR_AD
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           
  3263                           ;psect for function _getAD
  3264  07D5                     _getAD:	
  3265                           
  3266                           ;incstack = 0
  3267                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3268                           ;getAD@adcon0 stored from wreg
  3269  07D5  00F5               	movwf	getAD@adcon0
  3270                           
  3271                           ;MCU_B1.c: 427: ADCON0 = adcon0;
  3272  07D6  0875               	movf	getAD@adcon0,w
  3273  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  3274  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  3275  07D9  009F               	movwf	31	;volatile
  3276                           
  3277                           ;MCU_B1.c: 428: ADCON1 = adcon1;
  3278  07DA  0874               	movf	getAD@adcon1,w
  3279  07DB  1683               	bsf	3,5	;RP0=1, select bank1
  3280  07DC  1303               	bcf	3,6	;RP1=0, select bank1
  3281  07DD  009F               	movwf	31	;volatile
  3282                           
  3283                           ;MCU_B1.c: 429: GO_nDONE = 1;
  3284  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  3285  07DF  1303               	bcf	3,6	;RP1=0, select bank0
  3286  07E0  149F               	bsf	31,1	;volatile
  3287                           
  3288                           ;MCU_B1.c: 430: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3289  07E1  2FE5               	goto	l2486
  3290  07E2                     l2484:	
  3291                           
  3292                           ;MCU_B1.c: 431: Timeout_Counter();
  3293  07E2  158A  2739  118A   	fcall	_Timeout_Counter
  3294  07E5                     l2486:	
  3295  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  3296  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  3297  07E7  1C9F               	btfss	31,1	;volatile
  3298  07E8  2FED               	goto	l2490
  3299  07E9  1683               	bsf	3,5	;RP0=1, select bank1
  3300  07EA  1303               	bcf	3,6	;RP1=0, select bank1
  3301  07EB  1D25               	btfss	(_myMain^(0+128)+5),2
  3302  07EC  2FE2               	goto	l2484
  3303  07ED                     l2490:	
  3304                           
  3305                           ;MCU_B1.c: 432: };
  3306                           ;MCU_B1.c: 433: set_TimeoutCleared();
  3307  07ED  158A  2671         	fcall	_set_TimeoutCleared
  3308                           
  3309                           ;MCU_B1.c: 434: return ADRES;
  3310  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  3311  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  3312  07F1  081E               	movf	30,w	;volatile
  3313  07F2  0008               	return
  3314  07F3                     __end_of_getAD:	
  3315                           
  3316                           	psect	text11
  3317  0E71                     __ptext11:	
  3318 ;; *************** function _set_TimeoutCleared *****************
  3319 ;; Defined at:
  3320 ;;		line 278 in file "../src/Main_B1.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;		None
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;		None
  3325 ;; Return value:  Size  Location     Type
  3326 ;;		None               void
  3327 ;; Registers used:
  3328 ;;		status,2
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3334 ;;      Params:         0       0       0       0
  3335 ;;      Locals:         0       0       0       0
  3336 ;;      Temps:          0       0       0       0
  3337 ;;      Totals:         0       0       0       0
  3338 ;;Total ram usage:        0 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    2
  3341 ;; This function calls:
  3342 ;;		Nothing
  3343 ;; This function is called by:
  3344 ;;		_getAD
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           
  3349                           ;psect for function _set_TimeoutCleared
  3350  0E71                     _set_TimeoutCleared:	
  3351                           
  3352                           ;Main_B1.c: 279: myMain.Timeout = 0;
  3353                           
  3354                           ;incstack = 0
  3355                           ; Regs used in _set_TimeoutCleared: [status,2]
  3356  0E71  1683               	bsf	3,5	;RP0=1, select bank1
  3357  0E72  1303               	bcf	3,6	;RP1=0, select bank1
  3358  0E73  1125               	bcf	(_myMain^(0+128)+5),2
  3359                           
  3360                           ;Main_B1.c: 280: myMain.Timeout_Counter = 0;
  3361  0E74  01A6               	clrf	(_myMain^(0+128)+6)
  3362  0E75  01A7               	clrf	((_myMain+1)^(0+128)+6)
  3363  0E76  0008               	return
  3364  0E77                     __end_of_set_TimeoutCleared:	
  3365                           
  3366                           	psect	text12
  3367  0F39                     __ptext12:	
  3368 ;; *************** function _Timeout_Counter *****************
  3369 ;; Defined at:
  3370 ;;		line 268 in file "../src/Main_B1.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;		None
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;		None
  3375 ;; Return value:  Size  Location     Type
  3376 ;;		None               void
  3377 ;; Registers used:
  3378 ;;		wreg, status,2
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3384 ;;      Params:         0       0       0       0
  3385 ;;      Locals:         0       0       0       0
  3386 ;;      Temps:          0       0       0       0
  3387 ;;      Totals:         0       0       0       0
  3388 ;;Total ram usage:        0 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; Hardware stack levels required when called:    2
  3391 ;; This function calls:
  3392 ;;		Nothing
  3393 ;; This function is called by:
  3394 ;;		_getAD
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           
  3399                           ;psect for function _Timeout_Counter
  3400  0F39                     _Timeout_Counter:	
  3401                           
  3402                           ;Main_B1.c: 269: myMain.Timeout_Counter++;
  3403                           
  3404                           ;incstack = 0
  3405                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3406  0F39  3001               	movlw	1
  3407  0F3A  1683               	bsf	3,5	;RP0=1, select bank1
  3408  0F3B  1303               	bcf	3,6	;RP1=0, select bank1
  3409  0F3C  07A6               	addwf	(_myMain^(0+128)+6),f
  3410  0F3D  1803               	skipnc
  3411  0F3E  0AA7               	incf	((_myMain+1)^(0+128)+6),f
  3412  0F3F  3000               	movlw	0
  3413  0F40  07A7               	addwf	((_myMain+1)^(0+128)+6),f
  3414                           
  3415                           ;Main_B1.c: 270: if (myMain.Timeout_Counter == 10000) {
  3416  0F41  3027               	movlw	39
  3417  0F42  0627               	xorwf	((_myMain+1)^(0+128)+6),w
  3418  0F43  1D03               	skipz
  3419  0F44  2F47               	goto	u1855
  3420  0F45  3010               	movlw	16
  3421  0F46  0626               	xorwf	(_myMain^(0+128)+6),w
  3422  0F47                     u1855:	
  3423  0F47  1D03               	skipz
  3424  0F48  0008               	return
  3425                           
  3426                           ;Main_B1.c: 271: myMain.Timeout_Counter = 0;
  3427  0F49  01A6               	clrf	(_myMain^(0+128)+6)
  3428  0F4A  01A7               	clrf	((_myMain+1)^(0+128)+6)
  3429                           
  3430                           ;Main_B1.c: 272: myMain.Timeout = 1;
  3431  0F4B  1525               	bsf	(_myMain^(0+128)+5),2
  3432  0F4C  0008               	return
  3433  0F4D                     __end_of_Timeout_Counter:	
  3434                           
  3435                           	psect	text13
  3436  0EF8                     __ptext13:	
  3437 ;; *************** function _WDT_Main *****************
  3438 ;; Defined at:
  3439 ;;		line 1019 in file "../src/MCU_B1.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;		None
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;		None
  3444 ;; Return value:  Size  Location     Type
  3445 ;;		None               void
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0, pclath, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3453 ;;      Params:         0       0       0       0
  3454 ;;      Locals:         0       0       0       0
  3455 ;;      Temps:          1       0       0       0
  3456 ;;      Totals:         1       0       0       0
  3457 ;;Total ram usage:        1 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    3
  3460 ;; This function calls:
  3461 ;;		_WDT_Clearing
  3462 ;; This function is called by:
  3463 ;;		_main
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           
  3468                           ;psect for function _WDT_Main
  3469  0EF8                     _WDT_Main:	
  3470                           
  3471                           ;MCU_B1.c: 1020: if (WDT.Enable == 1) {
  3472                           
  3473                           ;incstack = 0
  3474                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3475  0EF8  1C77               	btfss	_WDT,0
  3476  0EF9  0008               	return
  3477                           
  3478                           ;MCU_B1.c: 1021: if (WDT.Timer-- > 0) {
  3479  0EFA  3001               	movlw	1
  3480  0EFB  02F8               	subwf	_WDT+1,f
  3481  0EFC  0878               	movf	_WDT+1,w
  3482  0EFD  3AFF               	xorlw	255
  3483  0EFE  1903               	skipnz
  3484  0EFF  0008               	return
  3485                           
  3486                           ;MCU_B1.c: 1022: WDT.Timer = 100;
  3487  0F00  3064               	movlw	100
  3488  0F01  00F4               	movwf	??_WDT_Main
  3489  0F02  0874               	movf	??_WDT_Main,w
  3490  0F03  00F8               	movwf	_WDT+1
  3491                           
  3492                           ;MCU_B1.c: 1023: WDT_Clearing();
  3493  0F04  118A  2002         	fcall	_WDT_Clearing
  3494  0F06  0008               	return
  3495  0F07                     __end_of_WDT_Main:	
  3496                           
  3497                           	psect	text14
  3498  0002                     __ptext14:	
  3499 ;; *************** function _WDT_Clearing *****************
  3500 ;; Defined at:
  3501 ;;		line 1029 in file "../src/MCU_B1.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;		None
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;		None
  3506 ;; Return value:  Size  Location     Type
  3507 ;;		None               void
  3508 ;; Registers used:
  3509 ;;		None
  3510 ;; Tracked objects:
  3511 ;;		On entry : 0/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3515 ;;      Params:         0       0       0       0
  3516 ;;      Locals:         0       0       0       0
  3517 ;;      Temps:          0       0       0       0
  3518 ;;      Totals:         0       0       0       0
  3519 ;;Total ram usage:        0 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    2
  3522 ;; This function calls:
  3523 ;;		Nothing
  3524 ;; This function is called by:
  3525 ;;		_WDT_Main
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           
  3530                           ;psect for function _WDT_Clearing
  3531  0002                     _WDT_Clearing:	
  3532                           
  3533                           ;incstack = 0
  3534                           ; Regs used in _WDT_Clearing: []
  3535  0002  0064               	clrwdt	;# 
  3536  0003  0008               	return
  3537  0004                     __end_of_WDT_Clearing:	
  3538                           
  3539                           	psect	text15
  3540  0E52                     __ptext15:	
  3541 ;; *************** function _Temp_Main *****************
  3542 ;; Defined at:
  3543 ;;		line 64 in file "../src/OverTemperature_B1.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;		None
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;		None
  3548 ;; Return value:  Size  Location     Type
  3549 ;;		None               void
  3550 ;; Registers used:
  3551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3557 ;;      Params:         0       0       0       0
  3558 ;;      Locals:         0       0       0       0
  3559 ;;      Temps:          0       0       0       0
  3560 ;;      Totals:         0       0       0       0
  3561 ;;Total ram usage:        0 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    6
  3564 ;; This function calls:
  3565 ;;		_setTemp_Main
  3566 ;; This function is called by:
  3567 ;;		_main
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           
  3572                           ;psect for function _Temp_Main
  3573  0E52                     _Temp_Main:	
  3574                           
  3575                           ;OverTemperature_B1.c: 66: setTemp_Main();
  3576                           
  3577                           ;incstack = 0
  3578                           ; Regs used in _Temp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3579  0E52  118A  23FF         	fcall	_setTemp_Main
  3580  0E54  0008               	return
  3581  0E55                     __end_of_Temp_Main:	
  3582                           
  3583                           	psect	text16
  3584  03FF                     __ptext16:	
  3585 ;; *************** function _setTemp_Main *****************
  3586 ;; Defined at:
  3587 ;;		line 71 in file "../src/OverTemperature_B1.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;		None
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;		None
  3592 ;; Return value:  Size  Location     Type
  3593 ;;		None               void
  3594 ;; Registers used:
  3595 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3601 ;;      Params:         0       0       0       0
  3602 ;;      Locals:         0       0       0       0
  3603 ;;      Temps:          0       1       0       0
  3604 ;;      Totals:         0       1       0       0
  3605 ;;Total ram usage:        1 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    5
  3608 ;; This function calls:
  3609 ;;		___awdiv
  3610 ;;		_getMain_AD_Safe
  3611 ;;		_getMain_LightsStatus
  3612 ;;		_setOverTemp_Exceptions
  3613 ;; This function is called by:
  3614 ;;		_Temp_Main
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618                           
  3619                           ;psect for function _setTemp_Main
  3620  03FF                     _setTemp_Main:	
  3621                           
  3622                           ;OverTemperature_B1.c: 72: if (Temp.Enable == 1) {
  3623                           
  3624                           ;incstack = 0
  3625                           ; Regs used in _setTemp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3626  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  3627  0400  1303               	bcf	3,6	;RP1=0, select bank0
  3628  0401  1C50               	btfss	_Temp,0
  3629  0402  0008               	return
  3630                           
  3631                           ;OverTemperature_B1.c: 73: if (Temp.ADtoGO == 0) {
  3632  0403  1950               	btfsc	_Temp,2
  3633  0404  2C26               	goto	l3446
  3634                           
  3635                           ;OverTemperature_B1.c: 74: Temp.Time++;
  3636  0405  3001               	movlw	1
  3637  0406  07D1               	addwf	_Temp+1,f
  3638  0407  1803               	skipnc
  3639  0408  0AD2               	incf	_Temp+2,f
  3640  0409  3000               	movlw	0
  3641  040A  07D2               	addwf	_Temp+2,f
  3642                           
  3643                           ;OverTemperature_B1.c: 75: if (Temp.Time >= 500) {
  3644  040B  3001               	movlw	1
  3645  040C  0252               	subwf	_Temp+2,w
  3646  040D  30F4               	movlw	244
  3647  040E  1903               	skipnz
  3648  040F  0251               	subwf	_Temp+1,w
  3649  0410  1C03               	skipc
  3650  0411  0008               	return
  3651                           
  3652                           ;OverTemperature_B1.c: 76: if (getMain_AD_Safe() == 1) {
  3653  0412  158A  26BF  118A   	fcall	_getMain_AD_Safe
  3654  0415  3A01               	xorlw	1
  3655  0416  1D03               	skipz
  3656  0417  2C1F               	goto	l3444
  3657                           
  3658                           ;OverTemperature_B1.c: 77: Temp.Time = 0;
  3659  0418  1283               	bcf	3,5	;RP0=0, select bank0
  3660  0419  1303               	bcf	3,6	;RP1=0, select bank0
  3661  041A  01D1               	clrf	_Temp+1
  3662  041B  01D2               	clrf	_Temp+2
  3663                           
  3664                           ;OverTemperature_B1.c: 78: Temp.ADtoGO = 1;
  3665  041C  1550               	bsf	_Temp,2
  3666                           
  3667                           ;OverTemperature_B1.c: 79: Temp.Safe = 0;
  3668  041D  1250               	bcf	_Temp,4
  3669                           
  3670                           ;OverTemperature_B1.c: 81: } else {
  3671  041E  0008               	return
  3672  041F                     l3444:	
  3673                           
  3674                           ;OverTemperature_B1.c: 82: Temp.Time = 500;
  3675  041F  30F4               	movlw	244
  3676  0420  1283               	bcf	3,5	;RP0=0, select bank0
  3677  0421  1303               	bcf	3,6	;RP1=0, select bank0
  3678  0422  00D1               	movwf	_Temp+1
  3679  0423  3001               	movlw	1
  3680  0424  00D2               	movwf	_Temp+2
  3681                           
  3682                           ;OverTemperature_B1.c: 83: }
  3683                           ;OverTemperature_B1.c: 84: }
  3684                           ;OverTemperature_B1.c: 85: } else {
  3685  0425  0008               	return
  3686  0426                     l3446:	
  3687                           
  3688                           ;OverTemperature_B1.c: 86: Temp.Time++;
  3689  0426  3001               	movlw	1
  3690  0427  07D1               	addwf	_Temp+1,f
  3691  0428  1803               	skipnc
  3692  0429  0AD2               	incf	_Temp+2,f
  3693  042A  3000               	movlw	0
  3694  042B  07D2               	addwf	_Temp+2,f
  3695                           
  3696                           ;OverTemperature_B1.c: 87: if (Temp.Time >= 5) {
  3697  042C  3000               	movlw	0
  3698  042D  0252               	subwf	_Temp+2,w
  3699  042E  3005               	movlw	5
  3700  042F  1903               	skipnz
  3701  0430  0251               	subwf	_Temp+1,w
  3702  0431  1C03               	skipc
  3703  0432  0008               	return
  3704                           
  3705                           ;OverTemperature_B1.c: 88: Temp.Time = 0;
  3706  0433  01D1               	clrf	_Temp+1
  3707  0434  01D2               	clrf	_Temp+2
  3708                           
  3709                           ;OverTemperature_B1.c: 89: Temp.ADtoGO = 0;
  3710  0435  1150               	bcf	_Temp,2
  3711                           
  3712                           ;OverTemperature_B1.c: 90: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3713  0436  3002               	movlw	2
  3714  0437  00E0               	movwf	___awdiv@divisor
  3715  0438  3000               	movlw	0
  3716  0439  00E1               	movwf	___awdiv@divisor+1
  3717  043A  0857               	movf	_Temp+7,w
  3718  043B  0758               	addwf	_Temp+8,w
  3719  043C  00E2               	movwf	___awdiv@dividend
  3720  043D  01E3               	clrf	___awdiv@dividend+1
  3721  043E  0DE3               	rlf	___awdiv@dividend+1,f
  3722  043F  118A  25B2  118A   	fcall	___awdiv
  3723  0442  1283               	bcf	3,5	;RP0=0, select bank0
  3724  0443  1303               	bcf	3,6	;RP1=0, select bank0
  3725  0444  0860               	movf	?___awdiv,w
  3726  0445  00E8               	movwf	??_setTemp_Main
  3727  0446  0868               	movf	??_setTemp_Main,w
  3728  0447  00D6               	movwf	_Temp+6
  3729                           
  3730                           ;OverTemperature_B1.c: 92: if (getMain_LightsStatus() == 1) {
  3731  0448  158A  2666  118A   	fcall	_getMain_LightsStatus
  3732  044B  3A01               	xorlw	1
  3733  044C  1D03               	skipz
  3734  044D  2C56               	goto	l3458
  3735                           
  3736                           ;OverTemperature_B1.c: 93: Temp.SafeValue = 190;
  3737  044E  30BE               	movlw	190
  3738  044F  1283               	bcf	3,5	;RP0=0, select bank0
  3739  0450  1303               	bcf	3,6	;RP1=0, select bank0
  3740  0451  00E8               	movwf	??_setTemp_Main
  3741  0452  0868               	movf	??_setTemp_Main,w
  3742  0453  00DA               	movwf	_Temp+10
  3743                           
  3744                           ;OverTemperature_B1.c: 94: Temp.DangerValue = 170;
  3745  0454  30AA               	movlw	170
  3746  0455  2C5D               	goto	L7
  3747  0456                     l3458:	
  3748                           ;OverTemperature_B1.c: 95: } else {
  3749                           
  3750                           
  3751                           ;OverTemperature_B1.c: 96: Temp.SafeValue = 120;
  3752  0456  3078               	movlw	120
  3753  0457  1283               	bcf	3,5	;RP0=0, select bank0
  3754  0458  1303               	bcf	3,6	;RP1=0, select bank0
  3755  0459  00E8               	movwf	??_setTemp_Main
  3756  045A  0868               	movf	??_setTemp_Main,w
  3757  045B  00DA               	movwf	_Temp+10
  3758                           
  3759                           ;OverTemperature_B1.c: 97: Temp.DangerValue = 100;
  3760  045C  3064               	movlw	100
  3761  045D                     L7:	
  3762  045D  00E8               	movwf	??_setTemp_Main
  3763  045E  0868               	movf	??_setTemp_Main,w
  3764  045F  00DB               	movwf	_Temp+11
  3765                           
  3766                           ;OverTemperature_B1.c: 98: }
  3767                           ;OverTemperature_B1.c: 107: if (Temp.ERROR == 1) {
  3768  0460  1CD0               	btfss	_Temp,1
  3769  0461  2C74               	goto	l3474
  3770                           
  3771                           ;OverTemperature_B1.c: 108: if (Temp.AD >= Temp.SafeValue) {
  3772  0462  085A               	movf	_Temp+10,w
  3773  0463  0256               	subwf	_Temp+6,w
  3774  0464  1C03               	skipc
  3775  0465  2C86               	goto	l3484
  3776                           
  3777                           ;OverTemperature_B1.c: 109: Temp.Count++;
  3778  0466  3001               	movlw	1
  3779  0467  00E8               	movwf	??_setTemp_Main
  3780  0468  0868               	movf	??_setTemp_Main,w
  3781  0469  07D3               	addwf	_Temp+3,f
  3782                           
  3783                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  3784  046A  3003               	movlw	3
  3785  046B  0253               	subwf	_Temp+3,w
  3786  046C  1C03               	skipc
  3787  046D  2C89               	goto	l3486
  3788                           
  3789                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  3790  046E  01D3               	clrf	_Temp+3
  3791                           
  3792                           ;OverTemperature_B1.c: 112: setOverTemp_Exceptions(0);
  3793  046F  3000               	movlw	0
  3794  0470  158A  27A9  118A   	fcall	_setOverTemp_Exceptions
  3795                           
  3796                           ;OverTemperature_B1.c: 113: }
  3797                           ;OverTemperature_B1.c: 114: } else {
  3798  0473  2C89               	goto	l3486
  3799  0474                     l3474:	
  3800                           ;OverTemperature_B1.c: 116: }
  3801                           ;OverTemperature_B1.c: 117: } else {
  3802                           
  3803                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  3804                           
  3805                           
  3806                           ;OverTemperature_B1.c: 118: if (Temp.AD <= Temp.DangerValue) {
  3807  0474  0856               	movf	_Temp+6,w
  3808  0475  025B               	subwf	_Temp+11,w
  3809  0476  1C03               	skipc
  3810  0477  2C86               	goto	l3484
  3811                           
  3812                           ;OverTemperature_B1.c: 119: Temp.Count++;
  3813  0478  3001               	movlw	1
  3814  0479  00E8               	movwf	??_setTemp_Main
  3815  047A  0868               	movf	??_setTemp_Main,w
  3816  047B  07D3               	addwf	_Temp+3,f
  3817                           
  3818                           ;OverTemperature_B1.c: 120: if (Temp.Count >= 3) {
  3819  047C  3003               	movlw	3
  3820  047D  0253               	subwf	_Temp+3,w
  3821  047E  1C03               	skipc
  3822  047F  2C89               	goto	l3486
  3823                           
  3824                           ;OverTemperature_B1.c: 121: Temp.Count = 0;
  3825  0480  01D3               	clrf	_Temp+3
  3826                           
  3827                           ;OverTemperature_B1.c: 122: setOverTemp_Exceptions(1);
  3828  0481  3001               	movlw	1
  3829  0482  158A  27A9  118A   	fcall	_setOverTemp_Exceptions
  3830                           
  3831                           ;OverTemperature_B1.c: 123: }
  3832                           ;OverTemperature_B1.c: 124: } else {
  3833  0485  2C89               	goto	l3486
  3834  0486                     l3484:	
  3835                           
  3836                           ;OverTemperature_B1.c: 125: Temp.Count = 0;
  3837  0486  1283               	bcf	3,5	;RP0=0, select bank0
  3838  0487  1303               	bcf	3,6	;RP1=0, select bank0
  3839  0488  01D3               	clrf	_Temp+3
  3840  0489                     l3486:	
  3841                           
  3842                           ;OverTemperature_B1.c: 126: }
  3843                           ;OverTemperature_B1.c: 127: }
  3844                           ;OverTemperature_B1.c: 128: if (Temp.ERROR == 0) {
  3845  0489  1283               	bcf	3,5	;RP0=0, select bank0
  3846  048A  1303               	bcf	3,6	;RP1=0, select bank0
  3847  048B  1CD0               	btfss	_Temp,1
  3848                           
  3849                           ;OverTemperature_B1.c: 129: Temp.Safe = 1;
  3850  048C  1650               	bsf	_Temp,4
  3851                           
  3852                           ;OverTemperature_B1.c: 130: }
  3853                           ;OverTemperature_B1.c: 131: ;;
  3854                           ;OverTemperature_B1.c: 132: ;;
  3855                           ;OverTemperature_B1.c: 135: Temp.ADH[0] = 0;
  3856  048D  01D7               	clrf	_Temp+7
  3857                           
  3858                           ;OverTemperature_B1.c: 136: Temp.ADH[1] = 0;
  3859  048E  01D8               	clrf	_Temp+8
  3860  048F  0008               	return
  3861  0490                     __end_of_setTemp_Main:	
  3862                           
  3863                           	psect	text17
  3864  0FA9                     __ptext17:	
  3865 ;; *************** function _setOverTemp_Exceptions *****************
  3866 ;; Defined at:
  3867 ;;		line 143 in file "../src/OverTemperature_B1.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;  command         1    wreg     unsigned char 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  command         1    3[BANK0 ] unsigned char 
  3872 ;;  i               1    2[BANK0 ] unsigned char 
  3873 ;; Return value:  Size  Location     Type
  3874 ;;		None               void
  3875 ;; Registers used:
  3876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3882 ;;      Params:         0       0       0       0
  3883 ;;      Locals:         0       2       0       0
  3884 ;;      Temps:          0       1       0       0
  3885 ;;      Totals:         0       3       0       0
  3886 ;;Total ram usage:        3 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    4
  3889 ;; This function calls:
  3890 ;;		_setLED
  3891 ;; This function is called by:
  3892 ;;		_setTemp_Main
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           
  3897                           ;psect for function _setOverTemp_Exceptions
  3898  0FA9                     _setOverTemp_Exceptions:	
  3899                           
  3900                           ;incstack = 0
  3901                           ; Regs used in _setOverTemp_Exceptions: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3902                           ;setOverTemp_Exceptions@command stored from wreg
  3903  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  3904  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  3905  0FAB  00E3               	movwf	setOverTemp_Exceptions@command
  3906                           
  3907                           ;OverTemperature_B1.c: 144: char i = command == 1 ? 0 : 1;
  3908  0FAC  0863               	movf	setOverTemp_Exceptions@command,w
  3909  0FAD  3A01               	xorlw	1
  3910  0FAE  3000               	movlw	0
  3911  0FAF  1D03               	skipz
  3912  0FB0  3001               	movlw	1
  3913  0FB1  00E1               	movwf	??_setOverTemp_Exceptions
  3914  0FB2  0861               	movf	??_setOverTemp_Exceptions,w
  3915  0FB3  00E2               	movwf	setOverTemp_Exceptions@i
  3916                           
  3917                           ;OverTemperature_B1.c: 145: Temp.ERROR = command;
  3918  0FB4  0863               	movf	setOverTemp_Exceptions@command,w
  3919  0FB5  10D0               	bcf	_Temp,1
  3920  0FB6  1D03               	skipz
  3921  0FB7  14D0               	bsf	_Temp,1
  3922                           
  3923                           ;OverTemperature_B1.c: 147: if (command == 1) {
  3924  0FB8  0862               	movf	setOverTemp_Exceptions@i,w
  3925  0FB9  1250               	bcf	_Temp,4
  3926  0FBA  1D03               	skipz
  3927  0FBB  1650               	bsf	_Temp,4
  3928                           
  3929                           ;OverTemperature_B1.c: 154: }
  3930                           ;OverTemperature_B1.c: 158: setLED(2, command + 10);
  3931                           
  3932                           ;OverTemperature_B1.c: 153: ;;
  3933                           
  3934                           ;OverTemperature_B1.c: 148: ;;
  3935                           ;OverTemperature_B1.c: 152: } else if (command == 0) {
  3936  0FBC  0863               	movf	setOverTemp_Exceptions@command,w
  3937  0FBD  3E0A               	addlw	10
  3938  0FBE  00E1               	movwf	??_setOverTemp_Exceptions
  3939  0FBF  0861               	movf	??_setOverTemp_Exceptions,w
  3940  0FC0  00F6               	movwf	setLED@command
  3941  0FC1  3002               	movlw	2
  3942  0FC2  118A  24F4         	fcall	_setLED
  3943  0FC4  0008               	return
  3944  0FC5                     __end_of_setOverTemp_Exceptions:	
  3945                           
  3946                           	psect	text18
  3947  0E66                     __ptext18:	
  3948 ;; *************** function _getMain_LightsStatus *****************
  3949 ;; Defined at:
  3950 ;;		line 315 in file "../src/Main_B1.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;		None
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  result          1    5[COMMON] unsigned char 
  3955 ;;  count           1    4[COMMON] unsigned char 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      unsigned char 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3965 ;;      Params:         0       0       0       0
  3966 ;;      Locals:         2       0       0       0
  3967 ;;      Temps:          0       0       0       0
  3968 ;;      Totals:         2       0       0       0
  3969 ;;Total ram usage:        2 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    2
  3972 ;; This function calls:
  3973 ;;		Nothing
  3974 ;; This function is called by:
  3975 ;;		_setTemp_Main
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           
  3980                           ;psect for function _getMain_LightsStatus
  3981  0E66                     _getMain_LightsStatus:	
  3982                           
  3983                           ;Main_B1.c: 316: char result = 1, count = 0;
  3984                           
  3985                           ;incstack = 0
  3986                           ; Regs used in _getMain_LightsStatus: [wreg+status,2]
  3987  0E66  01F5               	clrf	getMain_LightsStatus@result
  3988  0E67  0AF5               	incf	getMain_LightsStatus@result,f
  3989  0E68  01F4               	clrf	getMain_LightsStatus@count
  3990                           
  3991                           ;Main_B1.c: 335: return result;
  3992  0E69  0875               	movf	getMain_LightsStatus@result,w
  3993  0E6A  0008               	return
  3994  0E6B                     __end_of_getMain_LightsStatus:	
  3995                           
  3996                           	psect	text19
  3997  05B2                     __ptext19:	
  3998 ;; *************** function ___awdiv *****************
  3999 ;; Defined at:
  4000 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;  divisor         2    0[BANK0 ] int 
  4003 ;;  dividend        2    2[BANK0 ] int 
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;  quotient        2    6[BANK0 ] int 
  4006 ;;  sign            1    5[BANK0 ] unsigned char 
  4007 ;;  counter         1    4[BANK0 ] unsigned char 
  4008 ;; Return value:  Size  Location     Type
  4009 ;;                  2    0[BANK0 ] int 
  4010 ;; Registers used:
  4011 ;;		wreg, status,2, status,0
  4012 ;; Tracked objects:
  4013 ;;		On entry : 0/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4017 ;;      Params:         0       4       0       0
  4018 ;;      Locals:         0       4       0       0
  4019 ;;      Temps:          1       0       0       0
  4020 ;;      Totals:         1       8       0       0
  4021 ;;Total ram usage:        9 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; Hardware stack levels required when called:    2
  4024 ;; This function calls:
  4025 ;;		Nothing
  4026 ;; This function is called by:
  4027 ;;		_setTemp_Main
  4028 ;;		_getPIR_AD
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           
  4033                           ;psect for function ___awdiv
  4034  05B2                     ___awdiv:	
  4035                           
  4036                           ;incstack = 0
  4037                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4038  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  4039  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  4040  05B4  01E5               	clrf	___awdiv@sign
  4041  05B5  1FE1               	btfss	___awdiv@divisor+1,7
  4042  05B6  2DBE               	goto	l3362
  4043  05B7  09E0               	comf	___awdiv@divisor,f
  4044  05B8  09E1               	comf	___awdiv@divisor+1,f
  4045  05B9  0AE0               	incf	___awdiv@divisor,f
  4046  05BA  1903               	skipnz
  4047  05BB  0AE1               	incf	___awdiv@divisor+1,f
  4048  05BC  01E5               	clrf	___awdiv@sign
  4049  05BD  0AE5               	incf	___awdiv@sign,f
  4050  05BE                     l3362:	
  4051  05BE  1FE3               	btfss	___awdiv@dividend+1,7
  4052  05BF  2DC9               	goto	l3368
  4053  05C0  09E2               	comf	___awdiv@dividend,f
  4054  05C1  09E3               	comf	___awdiv@dividend+1,f
  4055  05C2  0AE2               	incf	___awdiv@dividend,f
  4056  05C3  1903               	skipnz
  4057  05C4  0AE3               	incf	___awdiv@dividend+1,f
  4058  05C5  3001               	movlw	1
  4059  05C6  00F4               	movwf	??___awdiv
  4060  05C7  0874               	movf	??___awdiv,w
  4061  05C8  06E5               	xorwf	___awdiv@sign,f
  4062  05C9                     l3368:	
  4063  05C9  01E6               	clrf	___awdiv@quotient
  4064  05CA  01E7               	clrf	___awdiv@quotient+1
  4065  05CB  0861               	movf	___awdiv@divisor+1,w
  4066  05CC  0460               	iorwf	___awdiv@divisor,w
  4067  05CD  1903               	skipnz
  4068  05CE  2E00               	goto	l3390
  4069  05CF  01E4               	clrf	___awdiv@counter
  4070  05D0  0AE4               	incf	___awdiv@counter,f
  4071  05D1                     l3378:	
  4072  05D1  1BE1               	btfsc	___awdiv@divisor+1,7
  4073  05D2  2DDF               	goto	l3380
  4074  05D3  3001               	movlw	1
  4075  05D4                     u3525:	
  4076  05D4  1003               	clrc
  4077  05D5  0DE0               	rlf	___awdiv@divisor,f
  4078  05D6  0DE1               	rlf	___awdiv@divisor+1,f
  4079  05D7  3EFF               	addlw	-1
  4080  05D8  1D03               	skipz
  4081  05D9  2DD4               	goto	u3525
  4082  05DA  3001               	movlw	1
  4083  05DB  00F4               	movwf	??___awdiv
  4084  05DC  0874               	movf	??___awdiv,w
  4085  05DD  07E4               	addwf	___awdiv@counter,f
  4086  05DE  2DD1               	goto	l3378
  4087  05DF                     l3380:	
  4088  05DF  3001               	movlw	1
  4089  05E0                     u3545:	
  4090  05E0  1003               	clrc
  4091  05E1  0DE6               	rlf	___awdiv@quotient,f
  4092  05E2  0DE7               	rlf	___awdiv@quotient+1,f
  4093  05E3  3EFF               	addlw	-1
  4094  05E4  1D03               	skipz
  4095  05E5  2DE0               	goto	u3545
  4096  05E6  0861               	movf	___awdiv@divisor+1,w
  4097  05E7  0263               	subwf	___awdiv@dividend+1,w
  4098  05E8  1D03               	skipz
  4099  05E9  2DEC               	goto	u3555
  4100  05EA  0860               	movf	___awdiv@divisor,w
  4101  05EB  0262               	subwf	___awdiv@dividend,w
  4102  05EC                     u3555:	
  4103  05EC  1C03               	skipc
  4104  05ED  2DF5               	goto	l3386
  4105  05EE  0860               	movf	___awdiv@divisor,w
  4106  05EF  02E2               	subwf	___awdiv@dividend,f
  4107  05F0  0861               	movf	___awdiv@divisor+1,w
  4108  05F1  1C03               	skipc
  4109  05F2  03E3               	decf	___awdiv@dividend+1,f
  4110  05F3  02E3               	subwf	___awdiv@dividend+1,f
  4111  05F4  1466               	bsf	___awdiv@quotient,0
  4112  05F5                     l3386:	
  4113  05F5  3001               	movlw	1
  4114  05F6                     u3565:	
  4115  05F6  1003               	clrc
  4116  05F7  0CE1               	rrf	___awdiv@divisor+1,f
  4117  05F8  0CE0               	rrf	___awdiv@divisor,f
  4118  05F9  3EFF               	addlw	-1
  4119  05FA  1D03               	skipz
  4120  05FB  2DF6               	goto	u3565
  4121  05FC  3001               	movlw	1
  4122  05FD  02E4               	subwf	___awdiv@counter,f
  4123  05FE  1D03               	btfss	3,2
  4124  05FF  2DDF               	goto	l3380
  4125  0600                     l3390:	
  4126  0600  0865               	movf	___awdiv@sign,w
  4127  0601  1903               	btfsc	3,2
  4128  0602  2E08               	goto	l3394
  4129  0603  09E6               	comf	___awdiv@quotient,f
  4130  0604  09E7               	comf	___awdiv@quotient+1,f
  4131  0605  0AE6               	incf	___awdiv@quotient,f
  4132  0606  1903               	skipnz
  4133  0607  0AE7               	incf	___awdiv@quotient+1,f
  4134  0608                     l3394:	
  4135  0608  0867               	movf	___awdiv@quotient+1,w
  4136  0609  01E1               	clrf	?___awdiv+1
  4137  060A  07E1               	addwf	?___awdiv+1,f
  4138  060B  0866               	movf	___awdiv@quotient,w
  4139  060C  01E0               	clrf	?___awdiv
  4140  060D  07E0               	addwf	?___awdiv,f
  4141  060E  0008               	return
  4142  060F                     __end_of___awdiv:	
  4143                           
  4144                           	psect	text20
  4145  0E4F                     __ptext20:	
  4146 ;; *************** function _Temp_Initialization *****************
  4147 ;; Defined at:
  4148 ;;		line 9 in file "../src/OverTemperature_B1.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;		None
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;		None
  4153 ;; Return value:  Size  Location     Type
  4154 ;;		None               void
  4155 ;; Registers used:
  4156 ;;		status,2, status,0, pclath, cstack
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4162 ;;      Params:         0       0       0       0
  4163 ;;      Locals:         0       0       0       0
  4164 ;;      Temps:          0       0       0       0
  4165 ;;      Totals:         0       0       0       0
  4166 ;;Total ram usage:        0 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; Hardware stack levels required when called:    3
  4169 ;; This function calls:
  4170 ;;		_setTemp_Initialization
  4171 ;; This function is called by:
  4172 ;;		_main
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           
  4177                           ;psect for function _Temp_Initialization
  4178  0E4F                     _Temp_Initialization:	
  4179                           
  4180                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  4181                           
  4182                           ;incstack = 0
  4183                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4184  0E4F  158A  265D         	fcall	_setTemp_Initialization
  4185  0E51  0008               	return
  4186  0E52                     __end_of_Temp_Initialization:	
  4187                           
  4188                           	psect	text21
  4189  0E5D                     __ptext21:	
  4190 ;; *************** function _setTemp_Initialization *****************
  4191 ;; Defined at:
  4192 ;;		line 59 in file "../src/OverTemperature_B1.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;		None
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;		None
  4197 ;; Return value:  Size  Location     Type
  4198 ;;		None               void
  4199 ;; Registers used:
  4200 ;;		None
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4206 ;;      Params:         0       0       0       0
  4207 ;;      Locals:         0       0       0       0
  4208 ;;      Temps:          0       0       0       0
  4209 ;;      Totals:         0       0       0       0
  4210 ;;Total ram usage:        0 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; Hardware stack levels required when called:    2
  4213 ;; This function calls:
  4214 ;;		Nothing
  4215 ;; This function is called by:
  4216 ;;		_Temp_Initialization
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           
  4221                           ;psect for function _setTemp_Initialization
  4222  0E5D                     _setTemp_Initialization:	
  4223                           
  4224                           ;OverTemperature_B1.c: 60: Temp.Safe = 1;
  4225                           
  4226                           ;incstack = 0
  4227                           ; Regs used in _setTemp_Initialization: []
  4228  0E5D  1283               	bcf	3,5	;RP0=0, select bank0
  4229  0E5E  1303               	bcf	3,6	;RP1=0, select bank0
  4230  0E5F  1650               	bsf	_Temp,4
  4231  0E60  0008               	return
  4232  0E61                     __end_of_setTemp_Initialization:	
  4233                           
  4234                           	psect	text22
  4235  0E4C                     __ptext22:	
  4236 ;; *************** function _SYSC_Main *****************
  4237 ;; Defined at:
  4238 ;;		line 17 in file "../src/SYSC_B1.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;		None
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;		None
  4243 ;; Return value:  Size  Location     Type
  4244 ;;		None               void
  4245 ;; Registers used:
  4246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4252 ;;      Params:         0       0       0       0
  4253 ;;      Locals:         0       0       0       0
  4254 ;;      Temps:          0       0       0       0
  4255 ;;      Totals:         0       0       0       0
  4256 ;;Total ram usage:        0 bytes
  4257 ;; Hardware stack levels used:    1
  4258 ;; Hardware stack levels required when called:    5
  4259 ;; This function calls:
  4260 ;;		_setSYSC_Main
  4261 ;; This function is called by:
  4262 ;;		_main
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           
  4267                           ;psect for function _SYSC_Main
  4268  0E4C                     _SYSC_Main:	
  4269                           
  4270                           ;SYSC_B1.c: 19: setSYSC_Main();
  4271                           
  4272                           ;incstack = 0
  4273                           ; Regs used in _SYSC_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4274  0E4C  118A  2490         	fcall	_setSYSC_Main
  4275  0E4E  0008               	return
  4276  0E4F                     __end_of_SYSC_Main:	
  4277                           
  4278                           	psect	text23
  4279  0490                     __ptext23:	
  4280 ;; *************** function _setSYSC_Main *****************
  4281 ;; Defined at:
  4282 ;;		line 23 in file "../src/SYSC_B1.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;		None
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;		None
  4287 ;; Return value:  Size  Location     Type
  4288 ;;		None               void
  4289 ;; Registers used:
  4290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4296 ;;      Params:         0       0       0       0
  4297 ;;      Locals:         0       0       0       0
  4298 ;;      Temps:          0       1       0       0
  4299 ;;      Totals:         0       1       0       0
  4300 ;;Total ram usage:        1 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; Hardware stack levels required when called:    4
  4303 ;; This function calls:
  4304 ;;		_setLED
  4305 ;; This function is called by:
  4306 ;;		_SYSC_Main
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           
  4311                           ;psect for function _setSYSC_Main
  4312  0490                     _setSYSC_Main:	
  4313                           
  4314                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4315                           
  4316                           ;incstack = 0
  4317                           ; Regs used in _setSYSC_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4318  0490  1283               	bcf	3,5	;RP0=0, select bank0
  4319  0491  1303               	bcf	3,6	;RP1=0, select bank0
  4320  0492  1C20               	btfss	_SYSC,0
  4321  0493  0008               	return
  4322                           
  4323                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4324  0494  18A0               	btfsc	_SYSC,1
  4325  0495  2CBF               	goto	l3508
  4326                           
  4327                           ;SYSC_B1.c: 28: SYSC.Timer++;
  4328  0496  3001               	movlw	1
  4329  0497  07A1               	addwf	_SYSC+1,f
  4330  0498  1803               	skipnc
  4331  0499  0AA2               	incf	_SYSC+2,f
  4332  049A  3000               	movlw	0
  4333  049B  07A2               	addwf	_SYSC+2,f
  4334                           
  4335                           ;SYSC_B1.c: 29: if (SYSC.Timer >= 16)
  4336  049C  3000               	movlw	0
  4337  049D  0222               	subwf	_SYSC+2,w
  4338  049E  3010               	movlw	16
  4339  049F  1903               	skipnz
  4340  04A0  0221               	subwf	_SYSC+1,w
  4341  04A1  1C03               	skipc
  4342  04A2  0008               	return
  4343                           
  4344                           ;SYSC_B1.c: 30: {
  4345                           ;SYSC_B1.c: 31: SYSC.Timer = 0;
  4346  04A3  01A1               	clrf	_SYSC+1
  4347  04A4  01A2               	clrf	_SYSC+2
  4348                           
  4349                           ;SYSC_B1.c: 32: SYSC.ERROR = 1;
  4350  04A5  14A0               	bsf	_SYSC,1
  4351                           
  4352                           ;SYSC_B1.c: 33: setLED(1, 0);
  4353  04A6  01F6               	clrf	setLED@command
  4354  04A7  3001               	movlw	1
  4355  04A8  118A  24F4  118A   	fcall	_setLED
  4356                           
  4357                           ;SYSC_B1.c: 34: setLED(2, 11);
  4358  04AB  300B               	movlw	11
  4359  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  4360  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  4361  04AE  00E1               	movwf	??_setSYSC_Main
  4362  04AF  0861               	movf	??_setSYSC_Main,w
  4363  04B0  00F6               	movwf	setLED@command
  4364  04B1  3002               	movlw	2
  4365  04B2  118A  24F4  118A   	fcall	_setLED
  4366                           
  4367                           ;SYSC_B1.c: 35: setLED(99, 11);
  4368  04B5  300B               	movlw	11
  4369  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  4370  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  4371  04B8  00E1               	movwf	??_setSYSC_Main
  4372  04B9  0861               	movf	??_setSYSC_Main,w
  4373  04BA  00F6               	movwf	setLED@command
  4374  04BB  3063               	movlw	99
  4375  04BC  118A  24F4         	fcall	_setLED
  4376                           
  4377                           ;SYSC_B1.c: 36: }
  4378                           ;SYSC_B1.c: 37: } else {
  4379  04BE  0008               	return
  4380  04BF                     l3508:	
  4381                           
  4382                           ;SYSC_B1.c: 38: SYSC.Timer++;
  4383  04BF  3001               	movlw	1
  4384  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  4385  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  4386  04C2  07A1               	addwf	_SYSC+1,f
  4387  04C3  1803               	skipnc
  4388  04C4  0AA2               	incf	_SYSC+2,f
  4389  04C5  3000               	movlw	0
  4390  04C6  07A2               	addwf	_SYSC+2,f
  4391                           
  4392                           ;SYSC_B1.c: 39: if (SYSC.Timer == 50) {
  4393  04C7  3032               	movlw	50
  4394  04C8  0621               	xorwf	_SYSC+1,w
  4395  04C9  0422               	iorwf	_SYSC+2,w
  4396  04CA  1D03               	skipz
  4397  04CB  2CD1               	goto	l3512
  4398                           
  4399                           ;SYSC_B1.c: 40: SYSC.Timer = 0;
  4400  04CC  01A1               	clrf	_SYSC+1
  4401  04CD  01A2               	clrf	_SYSC+2
  4402                           
  4403                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4404  04CE  01A3               	clrf	_SYSC+3
  4405  04CF  01A4               	clrf	_SYSC+4
  4406                           
  4407                           ;SYSC_B1.c: 42: } else {
  4408  04D0  0008               	return
  4409  04D1                     l3512:	
  4410                           
  4411                           ;SYSC_B1.c: 43: SYSC.Counter++;
  4412  04D1  3001               	movlw	1
  4413  04D2  07A3               	addwf	_SYSC+3,f
  4414  04D3  1803               	skipnc
  4415  04D4  0AA4               	incf	_SYSC+4,f
  4416  04D5  3000               	movlw	0
  4417  04D6  07A4               	addwf	_SYSC+4,f
  4418                           
  4419                           ;SYSC_B1.c: 44: if (SYSC.Counter == 1000) {
  4420  04D7  3003               	movlw	3
  4421  04D8  0624               	xorwf	_SYSC+4,w
  4422  04D9  1D03               	skipz
  4423  04DA  2CDD               	goto	u3805
  4424  04DB  30E8               	movlw	232
  4425  04DC  0623               	xorwf	_SYSC+3,w
  4426  04DD                     u3805:	
  4427  04DD  1D03               	skipz
  4428  04DE  0008               	return
  4429                           
  4430                           ;SYSC_B1.c: 45: SYSC.Counter = 0;
  4431  04DF  01A3               	clrf	_SYSC+3
  4432  04E0  01A4               	clrf	_SYSC+4
  4433                           
  4434                           ;SYSC_B1.c: 46: SYSC.ERROR = 0;
  4435  04E1  10A0               	bcf	_SYSC,1
  4436                           
  4437                           ;SYSC_B1.c: 47: setLED(2, 10);
  4438  04E2  300A               	movlw	10
  4439  04E3  00E1               	movwf	??_setSYSC_Main
  4440  04E4  0861               	movf	??_setSYSC_Main,w
  4441  04E5  00F6               	movwf	setLED@command
  4442  04E6  3002               	movlw	2
  4443  04E7  118A  24F4  118A   	fcall	_setLED
  4444                           
  4445                           ;SYSC_B1.c: 48: setLED(99, 10);
  4446  04EA  300A               	movlw	10
  4447  04EB  1283               	bcf	3,5	;RP0=0, select bank0
  4448  04EC  1303               	bcf	3,6	;RP1=0, select bank0
  4449  04ED  00E1               	movwf	??_setSYSC_Main
  4450  04EE  0861               	movf	??_setSYSC_Main,w
  4451  04EF  00F6               	movwf	setLED@command
  4452  04F0  3063               	movlw	99
  4453  04F1  118A  24F4         	fcall	_setLED
  4454  04F3  0008               	return
  4455  04F4                     __end_of_setSYSC_Main:	
  4456                           
  4457                           	psect	text24
  4458  0E49                     __ptext24:	
  4459 ;; *************** function _SYSC_Initialization *****************
  4460 ;; Defined at:
  4461 ;;		line 7 in file "../src/SYSC_B1.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;		None
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;		None
  4466 ;; Return value:  Size  Location     Type
  4467 ;;		None               void
  4468 ;; Registers used:
  4469 ;;		status,2, status,0, pclath, cstack
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4475 ;;      Params:         0       0       0       0
  4476 ;;      Locals:         0       0       0       0
  4477 ;;      Temps:          0       0       0       0
  4478 ;;      Totals:         0       0       0       0
  4479 ;;Total ram usage:        0 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:    3
  4482 ;; This function calls:
  4483 ;;		_setSYSC_Initialization
  4484 ;; This function is called by:
  4485 ;;		_main
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           
  4490                           ;psect for function _SYSC_Initialization
  4491  0E49                     _SYSC_Initialization:	
  4492                           
  4493                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4494                           
  4495                           ;incstack = 0
  4496                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4497  0E49  158A  2659         	fcall	_setSYSC_Initialization
  4498  0E4B  0008               	return
  4499  0E4C                     __end_of_SYSC_Initialization:	
  4500                           
  4501                           	psect	text25
  4502  0E59                     __ptext25:	
  4503 ;; *************** function _setSYSC_Initialization *****************
  4504 ;; Defined at:
  4505 ;;		line 13 in file "../src/SYSC_B1.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;		None
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;		None
  4510 ;; Return value:  Size  Location     Type
  4511 ;;		None               void
  4512 ;; Registers used:
  4513 ;;		None
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4519 ;;      Params:         0       0       0       0
  4520 ;;      Locals:         0       0       0       0
  4521 ;;      Temps:          0       0       0       0
  4522 ;;      Totals:         0       0       0       0
  4523 ;;Total ram usage:        0 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    2
  4526 ;; This function calls:
  4527 ;;		Nothing
  4528 ;; This function is called by:
  4529 ;;		_SYSC_Initialization
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           
  4534                           ;psect for function _setSYSC_Initialization
  4535  0E59                     _setSYSC_Initialization:	
  4536                           
  4537                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4538                           
  4539                           ;incstack = 0
  4540                           ; Regs used in _setSYSC_Initialization: []
  4541  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  4542  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  4543  0E5B  1420               	bsf	_SYSC,0
  4544  0E5C  0008               	return
  4545  0E5D                     __end_of_setSYSC_Initialization:	
  4546                           
  4547                           	psect	text26
  4548  0025                     __ptext26:	
  4549 ;; *************** function _PIR_Main *****************
  4550 ;; Defined at:
  4551 ;;		line 15 in file "../src/PIR_B1.c"
  4552 ;; Parameters:    Size  Location     Type
  4553 ;;		None
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;		None
  4556 ;; Return value:  Size  Location     Type
  4557 ;;		None               void
  4558 ;; Registers used:
  4559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4565 ;;      Params:         0       0       0       0
  4566 ;;      Locals:         0       0       0       0
  4567 ;;      Temps:          0       5       0       0
  4568 ;;      Totals:         0       5       0       0
  4569 ;;Total ram usage:        5 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    4
  4572 ;; This function calls:
  4573 ;;		_getCDS_Status
  4574 ;;		_getMain_AD_Safe
  4575 ;;		_getMain_Exception
  4576 ;;		_setLED
  4577 ;; This function is called by:
  4578 ;;		_main
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           
  4583                           ;psect for function _PIR_Main
  4584  0025                     _PIR_Main:	
  4585                           
  4586                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  4587                           
  4588                           ;incstack = 0
  4589                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4590  0025  1683               	bsf	3,5	;RP0=1, select bank1
  4591  0026  1303               	bcf	3,6	;RP1=0, select bank1
  4592  0027  1C28               	btfss	__PIR^(0+128),0
  4593  0028  0008               	return
  4594                           
  4595                           ;PIR_B1.c: 18: if (getCDS_Status() == 1 && getMain_Exception() == 0) {
  4596  0029  158A  2686  118A   	fcall	_getCDS_Status
  4597  002C  3A01               	xorlw	1
  4598  002D  1D03               	skipz
  4599  002E  2844               	goto	l729
  4600  002F  158A  2762  118A   	fcall	_getMain_Exception
  4601  0032  3800               	iorlw	0
  4602  0033  1D03               	skipz
  4603  0034  2844               	goto	l729
  4604                           
  4605                           ;PIR_B1.c: 19: if (_PIR.Detect == 0) {
  4606  0035  1683               	bsf	3,5	;RP0=1, select bank1
  4607  0036  1303               	bcf	3,6	;RP1=0, select bank1
  4608  0037  1A28               	btfsc	__PIR^(0+128),4
  4609  0038  286A               	goto	l3896
  4610                           
  4611                           ;PIR_B1.c: 20: _PIR.Detect = 1;
  4612  0039  1628               	bsf	__PIR^(0+128),4
  4613                           
  4614                           ;PIR_B1.c: 21: _PIR.Available = 1;
  4615  003A  17A8               	bsf	__PIR^(0+128),7
  4616                           
  4617                           ;PIR_B1.c: 22: if (_PIR.OK == 0) {
  4618  003B  19A8               	btfsc	__PIR^(0+128),3
  4619  003C  286A               	goto	l3896
  4620                           
  4621                           ;PIR_B1.c: 23: setLED(2, 1);
  4622  003D  01F6               	clrf	setLED@command
  4623  003E  0AF6               	incf	setLED@command,f
  4624  003F  3002               	movlw	2
  4625  0040  118A  24F4  118A   	fcall	_setLED
  4626                           
  4627                           ;PIR_B1.c: 24: }
  4628                           ;PIR_B1.c: 25: }
  4629                           ;PIR_B1.c: 26: } else {
  4630  0043  286A               	goto	l3896
  4631  0044                     l729:	
  4632                           
  4633                           ;PIR_B1.c: 27: if (_PIR.Detect == 1) {
  4634  0044  1683               	bsf	3,5	;RP0=1, select bank1
  4635  0045  1303               	bcf	3,6	;RP1=0, select bank1
  4636  0046  1E28               	btfss	__PIR^(0+128),4
  4637  0047  286A               	goto	l3896
  4638                           
  4639                           ;PIR_B1.c: 28: _PIR.Detect = 0;
  4640  0048  1228               	bcf	__PIR^(0+128),4
  4641                           
  4642                           ;PIR_B1.c: 29: _PIR.Available = 0;
  4643  0049  13A8               	bcf	__PIR^(0+128),7
  4644                           
  4645                           ;PIR_B1.c: 30: _PIR.Status = 0;
  4646  004A  1328               	bcf	__PIR^(0+128),6
  4647                           
  4648                           ;PIR_B1.c: 33: _PIR.Time = 0;
  4649  004B  01AD               	clrf	(__PIR^(0+128)+5)
  4650                           
  4651                           ;PIR_B1.c: 34: _PIR.RangeTime1 = 0;
  4652  004C  01D2               	clrf	(__PIR^(0+128)+42)
  4653                           
  4654                           ;PIR_B1.c: 35: _PIR.RangeValue = 7;
  4655  004D  3007               	movlw	7
  4656  004E  1283               	bcf	3,5	;RP0=0, select bank0
  4657  004F  1303               	bcf	3,6	;RP1=0, select bank0
  4658  0050  00E1               	movwf	??_PIR_Main
  4659  0051  0861               	movf	??_PIR_Main,w
  4660  0052  1683               	bsf	3,5	;RP0=1, select bank1
  4661  0053  1303               	bcf	3,6	;RP1=0, select bank1
  4662  0054  00D4               	movwf	(__PIR^(0+128)+44)
  4663                           
  4664                           ;PIR_B1.c: 36: _PIR.RangeCount = 0;
  4665  0055  01D3               	clrf	(__PIR^(0+128)+43)
  4666                           
  4667                           ;PIR_B1.c: 38: setLED(1, 0);
  4668  0056  01F6               	clrf	setLED@command
  4669  0057  3001               	movlw	1
  4670  0058  118A  24F4  118A   	fcall	_setLED
  4671                           
  4672                           ;PIR_B1.c: 39: setLED(2, 0);
  4673  005B  01F6               	clrf	setLED@command
  4674  005C  3002               	movlw	2
  4675  005D  118A  24F4  118A   	fcall	_setLED
  4676                           
  4677                           ;PIR_B1.c: 40: _PIR.Status = 0;
  4678  0060  1683               	bsf	3,5	;RP0=1, select bank1
  4679  0061  1303               	bcf	3,6	;RP1=0, select bank1
  4680  0062  1328               	bcf	__PIR^(0+128),6
  4681                           
  4682                           ;PIR_B1.c: 41: if (_PIR.OK == 1) {
  4683  0063  1DA8               	btfss	__PIR^(0+128),3
  4684  0064  2867               	goto	l734
  4685                           
  4686                           ;PIR_B1.c: 42: _PIR.Count = 0;
  4687  0065  01C9               	clrf	(__PIR^(0+128)+33)
  4688  0066  01CA               	clrf	((__PIR+1)^(0+128)+33)
  4689  0067                     l734:	
  4690                           
  4691                           ;PIR_B1.c: 43: }
  4692                           ;PIR_B1.c: 44: _PIR.CloseTimeSeconds = 0;
  4693  0067  01CE               	clrf	(__PIR^(0+128)+38)
  4694                           
  4695                           ;PIR_B1.c: 45: _PIR.CloseTimeMinutes = 0;
  4696  0068  01CC               	clrf	(__PIR^(0+128)+36)
  4697  0069  01CD               	clrf	((__PIR+1)^(0+128)+36)
  4698  006A                     l3896:	
  4699                           
  4700                           ;PIR_B1.c: 56: }
  4701                           ;PIR_B1.c: 57: }
  4702                           ;PIR_B1.c: 59: if (_PIR.ADtoGO == 0) {
  4703  006A  1683               	bsf	3,5	;RP0=1, select bank1
  4704  006B  1303               	bcf	3,6	;RP1=0, select bank1
  4705  006C  18A8               	btfsc	__PIR^(0+128),1
  4706  006D  288E               	goto	l735
  4707                           
  4708                           ;PIR_B1.c: 60: _PIR.Time++;
  4709  006E  3001               	movlw	1
  4710  006F  1283               	bcf	3,5	;RP0=0, select bank0
  4711  0070  1303               	bcf	3,6	;RP1=0, select bank0
  4712  0071  00E1               	movwf	??_PIR_Main
  4713  0072  0861               	movf	??_PIR_Main,w
  4714  0073  1683               	bsf	3,5	;RP0=1, select bank1
  4715  0074  1303               	bcf	3,6	;RP1=0, select bank1
  4716  0075  07AD               	addwf	(__PIR^(0+128)+5),f
  4717                           
  4718                           ;PIR_B1.c: 61: if (_PIR.Time == 10) {
  4719  0076  082D               	movf	(__PIR^(0+128)+5),w
  4720  0077  3A0A               	xorlw	10
  4721  0078  1D03               	skipz
  4722  0079  2984               	goto	l3976
  4723                           
  4724                           ;PIR_B1.c: 62: if (getMain_AD_Safe() == 1) {
  4725  007A  158A  26BF  118A   	fcall	_getMain_AD_Safe
  4726  007D  3A01               	xorlw	1
  4727  007E  1D03               	skipz
  4728  007F  2885               	goto	l3908
  4729                           
  4730                           ;PIR_B1.c: 63: _PIR.Time = 0;
  4731  0080  1683               	bsf	3,5	;RP0=1, select bank1
  4732  0081  1303               	bcf	3,6	;RP1=0, select bank1
  4733  0082  01AD               	clrf	(__PIR^(0+128)+5)
  4734                           
  4735                           ;PIR_B1.c: 64: _PIR.ADtoGO = 1;
  4736  0083  14A8               	bsf	__PIR^(0+128),1
  4737                           
  4738                           ;PIR_B1.c: 65: } else {
  4739  0084  2984               	goto	l3976
  4740  0085                     l3908:	
  4741                           
  4742                           ;PIR_B1.c: 66: _PIR.Time = 10;
  4743  0085  300A               	movlw	10
  4744  0086  1283               	bcf	3,5	;RP0=0, select bank0
  4745  0087  1303               	bcf	3,6	;RP1=0, select bank0
  4746  0088  00E1               	movwf	??_PIR_Main
  4747  0089  0861               	movf	??_PIR_Main,w
  4748  008A  1683               	bsf	3,5	;RP0=1, select bank1
  4749  008B  1303               	bcf	3,6	;RP1=0, select bank1
  4750  008C  00AD               	movwf	(__PIR^(0+128)+5)
  4751                           
  4752                           ;PIR_B1.c: 67: }
  4753                           ;PIR_B1.c: 68: }
  4754                           ;PIR_B1.c: 69: } else {
  4755  008D  2984               	goto	l3976
  4756  008E                     l735:	
  4757                           
  4758                           ;PIR_B1.c: 70: if (_PIR.GO == 1) {
  4759  008E  1D28               	btfss	__PIR^(0+128),2
  4760  008F  2984               	goto	l3976
  4761                           
  4762                           ;PIR_B1.c: 71: _PIR.GO = 0;
  4763  0090  1128               	bcf	__PIR^(0+128),2
  4764                           
  4765                           ;PIR_B1.c: 72: if (_PIR.Available == 1) {
  4766  0091  1BA8               	btfsc	__PIR^(0+128),7
  4767                           
  4768                           ;PIR_B1.c: 73: if (_PIR.OK == 1) {
  4769  0092  1DA8               	btfss	__PIR^(0+128),3
  4770  0093  2984               	goto	l3976
  4771                           
  4772                           ;PIR_B1.c: 75: _PIR.Time++;
  4773  0094  3001               	movlw	1
  4774  0095  1283               	bcf	3,5	;RP0=0, select bank0
  4775  0096  1303               	bcf	3,6	;RP1=0, select bank0
  4776  0097  00E1               	movwf	??_PIR_Main
  4777  0098  0861               	movf	??_PIR_Main,w
  4778  0099  1683               	bsf	3,5	;RP0=1, select bank1
  4779  009A  1303               	bcf	3,6	;RP1=0, select bank1
  4780  009B  07AD               	addwf	(__PIR^(0+128)+5),f
  4781                           
  4782                           ;PIR_B1.c: 76: if (_PIR.Time == 60) {
  4783  009C  082D               	movf	(__PIR^(0+128)+5),w
  4784  009D  3A3C               	xorlw	60
  4785  009E  1D03               	skipz
  4786  009F  28D4               	goto	l3950
  4787                           
  4788                           ;PIR_B1.c: 77: _PIR.Time = 0;
  4789  00A0  01AD               	clrf	(__PIR^(0+128)+5)
  4790                           
  4791                           ;PIR_B1.c: 78: if (_PIR.RangeCount >= 90) {
  4792  00A1  305A               	movlw	90
  4793  00A2  0253               	subwf	(__PIR^(0+128)+43),w
  4794  00A3  1C03               	skipc
  4795  00A4  28B0               	goto	l3932
  4796                           
  4797                           ;PIR_B1.c: 79: _PIR.RangeTime1 = 0;
  4798  00A5  01D2               	clrf	(__PIR^(0+128)+42)
  4799                           
  4800                           ;PIR_B1.c: 81: if (_PIR.RangeValue == 7) {
  4801  00A6  0854               	movf	(__PIR^(0+128)+44),w
  4802  00A7  3A07               	xorlw	7
  4803  00A8  1903               	btfsc	3,2
  4804  00A9  28C5               	goto	L13
  4805                           
  4806                           ;PIR_B1.c: 83: } else if (_PIR.RangeValue == 25) {
  4807                           
  4808                           ;PIR_B1.c: 82: _PIR.RangeValue = 25;
  4809  00AA  0854               	movf	(__PIR^(0+128)+44),w
  4810  00AB  3A19               	xorlw	25
  4811  00AC  1D03               	skipz
  4812  00AD  28D3               	goto	l3948
  4813                           
  4814                           ;PIR_B1.c: 84: _PIR.RangeValue = 35;
  4815  00AE  3023               	movlw	35
  4816  00AF  28CC               	goto	L10
  4817  00B0                     l3932:	
  4818                           ;PIR_B1.c: 85: }
  4819                           ;PIR_B1.c: 86: } else if (_PIR.RangeCount <= 10) {
  4820                           
  4821  00B0  300B               	movlw	11
  4822  00B1  0253               	subwf	(__PIR^(0+128)+43),w
  4823  00B2  1803               	skipnc
  4824  00B3  28D3               	goto	l3948
  4825                           
  4826                           ;PIR_B1.c: 87: _PIR.RangeTime1++;
  4827  00B4  3001               	movlw	1
  4828  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  4829  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  4830  00B7  00E1               	movwf	??_PIR_Main
  4831  00B8  0861               	movf	??_PIR_Main,w
  4832  00B9  1683               	bsf	3,5	;RP0=1, select bank1
  4833  00BA  1303               	bcf	3,6	;RP1=0, select bank1
  4834  00BB  07D2               	addwf	(__PIR^(0+128)+42),f
  4835                           
  4836                           ;PIR_B1.c: 88: if (_PIR.RangeTime1 == 2) {
  4837  00BC  0852               	movf	(__PIR^(0+128)+42),w
  4838  00BD  3A02               	xorlw	2
  4839  00BE  1D03               	skipz
  4840  00BF  28D3               	goto	l3948
  4841                           
  4842                           ;PIR_B1.c: 89: _PIR.RangeTime1 = 0;
  4843  00C0  01D2               	clrf	(__PIR^(0+128)+42)
  4844                           
  4845                           ;PIR_B1.c: 91: if (_PIR.RangeValue == 35) {
  4846  00C1  0854               	movf	(__PIR^(0+128)+44),w
  4847  00C2  3A23               	xorlw	35
  4848  00C3  1D03               	skipz
  4849  00C4  28C7               	goto	l3944
  4850  00C5                     L13:	
  4851                           
  4852                           ;PIR_B1.c: 92: _PIR.RangeValue = 25;
  4853  00C5  3019               	movlw	25
  4854  00C6  28CC               	goto	L10
  4855  00C7                     l3944:	
  4856                           ;PIR_B1.c: 93: } else if (_PIR.RangeValue == 25) {
  4857                           
  4858  00C7  0854               	movf	(__PIR^(0+128)+44),w
  4859  00C8  3A19               	xorlw	25
  4860  00C9  1D03               	skipz
  4861  00CA  28D3               	goto	l3948
  4862                           
  4863                           ;PIR_B1.c: 94: _PIR.RangeValue = 7;
  4864  00CB  3007               	movlw	7
  4865  00CC                     L10:	
  4866  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  4867  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  4868  00CE  00E1               	movwf	??_PIR_Main
  4869  00CF  0861               	movf	??_PIR_Main,w
  4870  00D0  1683               	bsf	3,5	;RP0=1, select bank1
  4871  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  4872  00D2  00D4               	movwf	(__PIR^(0+128)+44)
  4873  00D3                     l3948:	
  4874                           
  4875                           ;PIR_B1.c: 95: }
  4876                           ;PIR_B1.c: 96: }
  4877                           ;PIR_B1.c: 97: }
  4878                           ;PIR_B1.c: 98: _PIR.RangeCount = 0;
  4879  00D3  01D3               	clrf	(__PIR^(0+128)+43)
  4880  00D4                     l3950:	
  4881                           
  4882                           ;PIR_B1.c: 99: }
  4883                           ;PIR_B1.c: 102: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))
  4884                           ;PIR_B1.c: 103: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + (_PIR.RangeValue + _PIR.Of
      +                          fset)))) {
  4885  00D4  0854               	movf	(__PIR^(0+128)+44),w
  4886  00D5  0756               	addwf	(__PIR^(0+128)+46),w
  4887  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  4888  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  4889  00D8  00E1               	movwf	??_PIR_Main
  4890  00D9  01E2               	clrf	??_PIR_Main+1
  4891  00DA  0DE2               	rlf	??_PIR_Main+1,f
  4892  00DB  09E1               	comf	??_PIR_Main,f
  4893  00DC  09E2               	comf	??_PIR_Main+1,f
  4894  00DD  0AE1               	incf	??_PIR_Main,f
  4895  00DE  1903               	skipnz
  4896  00DF  0AE2               	incf	??_PIR_Main+1,f
  4897  00E0  1683               	bsf	3,5	;RP0=1, select bank1
  4898  00E1  1303               	bcf	3,6	;RP1=0, select bank1
  4899  00E2  082E               	movf	(__PIR^(0+128)+6),w
  4900  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  4901  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  4902  00E5  0761               	addwf	??_PIR_Main,w
  4903  00E6  00E3               	movwf	??_PIR_Main+2
  4904  00E7  0862               	movf	??_PIR_Main+1,w
  4905  00E8  1803               	skipnc
  4906  00E9  0A62               	incf	??_PIR_Main+1,w
  4907  00EA  00E4               	movwf	??_PIR_Main+3
  4908  00EB  0864               	movf	??_PIR_Main+3,w
  4909  00EC  3A80               	xorlw	128
  4910  00ED  3C80               	sublw	128
  4911  00EE  1D03               	skipz
  4912  00EF  28F4               	goto	u4685
  4913  00F0  0863               	movf	??_PIR_Main+2,w
  4914  00F1  1683               	bsf	3,5	;RP0=1, select bank1
  4915  00F2  1303               	bcf	3,6	;RP1=0, select bank1
  4916  00F3  0229               	subwf	(__PIR^(0+128)+1),w
  4917  00F4                     u4685:	
  4918  00F4  1C03               	skipc
  4919  00F5  2920               	goto	l3960
  4920  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  4921  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  4922  00F8  0854               	movf	(__PIR^(0+128)+44),w
  4923  00F9  0756               	addwf	(__PIR^(0+128)+46),w
  4924  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  4925  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  4926  00FC  00E1               	movwf	??_PIR_Main
  4927  00FD  01E2               	clrf	??_PIR_Main+1
  4928  00FE  0DE2               	rlf	??_PIR_Main+1,f
  4929  00FF  1683               	bsf	3,5	;RP0=1, select bank1
  4930  0100  1303               	bcf	3,6	;RP1=0, select bank1
  4931  0101  082E               	movf	(__PIR^(0+128)+6),w
  4932  0102  1283               	bcf	3,5	;RP0=0, select bank0
  4933  0103  1303               	bcf	3,6	;RP1=0, select bank0
  4934  0104  0761               	addwf	??_PIR_Main,w
  4935  0105  00E3               	movwf	??_PIR_Main+2
  4936  0106  3000               	movlw	0
  4937  0107  1803               	skipnc
  4938  0108  3001               	movlw	1
  4939  0109  0762               	addwf	??_PIR_Main+1,w
  4940  010A  00E4               	movwf	??_PIR_Main+3
  4941  010B  0864               	movf	??_PIR_Main+3,w
  4942  010C  3A80               	xorlw	128
  4943  010D  00E5               	movwf	??_PIR_Main+4
  4944  010E  3080               	movlw	128
  4945  010F  0265               	subwf	??_PIR_Main+4,w
  4946  0110  1D03               	skipz
  4947  0111  2918               	goto	u4695
  4948  0112  1683               	bsf	3,5	;RP0=1, select bank1
  4949  0113  1303               	bcf	3,6	;RP1=0, select bank1
  4950  0114  0829               	movf	(__PIR^(0+128)+1),w
  4951  0115  1283               	bcf	3,5	;RP0=0, select bank0
  4952  0116  1303               	bcf	3,6	;RP1=0, select bank0
  4953  0117  0263               	subwf	??_PIR_Main+2,w
  4954  0118                     u4695:	
  4955  0118  1C03               	skipc
  4956  0119  2920               	goto	l3960
  4957                           
  4958                           ;PIR_B1.c: 104: _PIR.Count = 0;
  4959  011A  1683               	bsf	3,5	;RP0=1, select bank1
  4960  011B  1303               	bcf	3,6	;RP1=0, select bank1
  4961  011C  01C9               	clrf	(__PIR^(0+128)+33)
  4962  011D  01CA               	clrf	((__PIR+1)^(0+128)+33)
  4963                           
  4964                           ;PIR_B1.c: 105: setLED(1, 0);
  4965  011E  01F6               	clrf	setLED@command
  4966  011F  2973               	goto	L14
  4967  0120                     l3960:	
  4968                           ;PIR_B1.c: 107: } else {
  4969                           
  4970                           ;PIR_B1.c: 106: setLED(2, 0);
  4971                           
  4972                           
  4973                           ;PIR_B1.c: 108: _PIR.RangeCount++;
  4974  0120  3001               	movlw	1
  4975  0121  1283               	bcf	3,5	;RP0=0, select bank0
  4976  0122  1303               	bcf	3,6	;RP1=0, select bank0
  4977  0123  00E1               	movwf	??_PIR_Main
  4978  0124  0861               	movf	??_PIR_Main,w
  4979  0125  1683               	bsf	3,5	;RP0=1, select bank1
  4980  0126  1303               	bcf	3,6	;RP1=0, select bank1
  4981  0127  07D3               	addwf	(__PIR^(0+128)+43),f
  4982                           
  4983                           ;PIR_B1.c: 109: _PIR.Count++;
  4984  0128  3001               	movlw	1
  4985  0129  07C9               	addwf	(__PIR^(0+128)+33),f
  4986  012A  1803               	skipnc
  4987  012B  0ACA               	incf	((__PIR+1)^(0+128)+33),f
  4988  012C  3000               	movlw	0
  4989  012D  07CA               	addwf	((__PIR+1)^(0+128)+33),f
  4990                           
  4991                           ;PIR_B1.c: 110: if (_PIR.Count == _PIR.TriggerValue) {
  4992  012E  084B               	movf	(__PIR^(0+128)+35),w
  4993  012F  1283               	bcf	3,5	;RP0=0, select bank0
  4994  0130  1303               	bcf	3,6	;RP1=0, select bank0
  4995  0131  00E1               	movwf	??_PIR_Main
  4996  0132  01E2               	clrf	??_PIR_Main+1
  4997  0133  1683               	bsf	3,5	;RP0=1, select bank1
  4998  0134  1303               	bcf	3,6	;RP1=0, select bank1
  4999  0135  084A               	movf	((__PIR+1)^(0+128)+33),w
  5000  0136  1283               	bcf	3,5	;RP0=0, select bank0
  5001  0137  1303               	bcf	3,6	;RP1=0, select bank0
  5002  0138  0662               	xorwf	??_PIR_Main+1,w
  5003  0139  1D03               	skipz
  5004  013A  2941               	goto	u4705
  5005  013B  1683               	bsf	3,5	;RP0=1, select bank1
  5006  013C  1303               	bcf	3,6	;RP1=0, select bank1
  5007  013D  0849               	movf	(__PIR^(0+128)+33),w
  5008  013E  1283               	bcf	3,5	;RP0=0, select bank0
  5009  013F  1303               	bcf	3,6	;RP1=0, select bank0
  5010  0140  0661               	xorwf	??_PIR_Main,w
  5011  0141                     u4705:	
  5012  0141  1D03               	skipz
  5013  0142  2984               	goto	l3976
  5014                           
  5015                           ;PIR_B1.c: 111: _PIR.Count = 0;
  5016  0143  1683               	bsf	3,5	;RP0=1, select bank1
  5017  0144  1303               	bcf	3,6	;RP1=0, select bank1
  5018  0145  01C9               	clrf	(__PIR^(0+128)+33)
  5019  0146  01CA               	clrf	((__PIR+1)^(0+128)+33)
  5020                           
  5021                           ;PIR_B1.c: 112: _PIR.CloseTimeSeconds = 0;
  5022  0147  01CE               	clrf	(__PIR^(0+128)+38)
  5023                           
  5024                           ;PIR_B1.c: 113: _PIR.CloseTimeMinutes = 0;
  5025  0148  01CC               	clrf	(__PIR^(0+128)+36)
  5026  0149  01CD               	clrf	((__PIR+1)^(0+128)+36)
  5027                           
  5028                           ;PIR_B1.c: 124: _PIR.Status = 1;
  5029  014A  1728               	bsf	__PIR^(0+128),6
  5030                           
  5031                           ;PIR_B1.c: 126: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))) {
  5032  014B  0854               	movf	(__PIR^(0+128)+44),w
  5033  014C  0756               	addwf	(__PIR^(0+128)+46),w
  5034  014D  1283               	bcf	3,5	;RP0=0, select bank0
  5035  014E  1303               	bcf	3,6	;RP1=0, select bank0
  5036  014F  00E1               	movwf	??_PIR_Main
  5037  0150  01E2               	clrf	??_PIR_Main+1
  5038  0151  0DE2               	rlf	??_PIR_Main+1,f
  5039  0152  09E1               	comf	??_PIR_Main,f
  5040  0153  09E2               	comf	??_PIR_Main+1,f
  5041  0154  0AE1               	incf	??_PIR_Main,f
  5042  0155  1903               	skipnz
  5043  0156  0AE2               	incf	??_PIR_Main+1,f
  5044  0157  1683               	bsf	3,5	;RP0=1, select bank1
  5045  0158  1303               	bcf	3,6	;RP1=0, select bank1
  5046  0159  082E               	movf	(__PIR^(0+128)+6),w
  5047  015A  1283               	bcf	3,5	;RP0=0, select bank0
  5048  015B  1303               	bcf	3,6	;RP1=0, select bank0
  5049  015C  0761               	addwf	??_PIR_Main,w
  5050  015D  00E3               	movwf	??_PIR_Main+2
  5051  015E  0862               	movf	??_PIR_Main+1,w
  5052  015F  1803               	skipnc
  5053  0160  0A62               	incf	??_PIR_Main+1,w
  5054  0161  00E4               	movwf	??_PIR_Main+3
  5055  0162  0864               	movf	??_PIR_Main+3,w
  5056  0163  3A80               	xorlw	128
  5057  0164  00E5               	movwf	??_PIR_Main+4
  5058  0165  3080               	movlw	128
  5059  0166  0265               	subwf	??_PIR_Main+4,w
  5060  0167  1D03               	skipz
  5061  0168  296F               	goto	u4715
  5062  0169  1683               	bsf	3,5	;RP0=1, select bank1
  5063  016A  1303               	bcf	3,6	;RP1=0, select bank1
  5064  016B  0829               	movf	(__PIR^(0+128)+1),w
  5065  016C  1283               	bcf	3,5	;RP0=0, select bank0
  5066  016D  1303               	bcf	3,6	;RP1=0, select bank0
  5067  016E  0263               	subwf	??_PIR_Main+2,w
  5068  016F                     u4715:	
  5069  016F  1C03               	skipc
  5070  0170  2979               	goto	l3974
  5071                           
  5072                           ;PIR_B1.c: 127: setLED(1, 1);
  5073  0171  01F6               	clrf	setLED@command
  5074  0172  0AF6               	incf	setLED@command,f
  5075  0173                     L14:	
  5076  0173  3001               	movlw	1
  5077  0174  118A  24F4  118A   	fcall	_setLED
  5078                           
  5079                           ;PIR_B1.c: 128: setLED(2, 0);
  5080  0177  01F6               	clrf	setLED@command
  5081  0178  2980               	goto	L11
  5082  0179                     l3974:	
  5083                           ;PIR_B1.c: 129: } else {
  5084                           
  5085                           
  5086                           ;PIR_B1.c: 130: setLED(1, 0);
  5087  0179  01F6               	clrf	setLED@command
  5088  017A  3001               	movlw	1
  5089  017B  118A  24F4  118A   	fcall	_setLED
  5090                           
  5091                           ;PIR_B1.c: 131: setLED(2, 1);
  5092  017E  01F6               	clrf	setLED@command
  5093  017F  0AF6               	incf	setLED@command,f
  5094  0180                     L11:	
  5095  0180  3002               	movlw	2
  5096  0181  118A  24F4  118A   	fcall	_setLED
  5097  0184                     l3976:	
  5098                           
  5099                           ;PIR_B1.c: 132: }
  5100                           ;PIR_B1.c: 133: }
  5101                           ;PIR_B1.c: 134: }
  5102                           ;PIR_B1.c: 135: }
  5103                           ;PIR_B1.c: 136: }
  5104                           ;PIR_B1.c: 137: }
  5105                           ;PIR_B1.c: 138: }
  5106                           ;PIR_B1.c: 139: if (_PIR.OK == 0) {
  5107  0184  1683               	bsf	3,5	;RP0=1, select bank1
  5108  0185  1303               	bcf	3,6	;RP1=0, select bank1
  5109  0186  19A8               	btfsc	__PIR^(0+128),3
  5110  0187  299E               	goto	l3986
  5111                           
  5112                           ;PIR_B1.c: 140: _PIR.Count++;
  5113  0188  3001               	movlw	1
  5114  0189  07C9               	addwf	(__PIR^(0+128)+33),f
  5115  018A  1803               	skipnc
  5116  018B  0ACA               	incf	((__PIR+1)^(0+128)+33),f
  5117  018C  3000               	movlw	0
  5118  018D  07CA               	addwf	((__PIR+1)^(0+128)+33),f
  5119                           
  5120                           ;PIR_B1.c: 141: if (_PIR.Count == 3000) {
  5121  018E  300B               	movlw	11
  5122  018F  064A               	xorwf	((__PIR+1)^(0+128)+33),w
  5123  0190  1D03               	skipz
  5124  0191  2994               	goto	u4735
  5125  0192  30B8               	movlw	184
  5126  0193  0649               	xorwf	(__PIR^(0+128)+33),w
  5127  0194                     u4735:	
  5128  0194  1D03               	skipz
  5129  0195  299E               	goto	l3986
  5130                           
  5131                           ;PIR_B1.c: 142: _PIR.Count = 0;
  5132  0196  01C9               	clrf	(__PIR^(0+128)+33)
  5133  0197  01CA               	clrf	((__PIR+1)^(0+128)+33)
  5134                           
  5135                           ;PIR_B1.c: 143: _PIR.OK = 1;
  5136  0198  15A8               	bsf	__PIR^(0+128),3
  5137                           
  5138                           ;PIR_B1.c: 144: setLED(2, 0);
  5139  0199  01F6               	clrf	setLED@command
  5140  019A  3002               	movlw	2
  5141  019B  118A  24F4  118A   	fcall	_setLED
  5142  019E                     l3986:	
  5143                           
  5144                           ;PIR_B1.c: 145: }
  5145                           ;PIR_B1.c: 146: }
  5146                           ;PIR_B1.c: 147: if (_PIR.Status == 1) {
  5147  019E  1683               	bsf	3,5	;RP0=1, select bank1
  5148  019F  1303               	bcf	3,6	;RP1=0, select bank1
  5149  01A0  1F28               	btfss	__PIR^(0+128),6
  5150  01A1  0008               	return
  5151                           
  5152                           ;PIR_B1.c: 148: _PIR.CloseTimeSeconds++;
  5153  01A2  3001               	movlw	1
  5154  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  5155  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  5156  01A5  00E1               	movwf	??_PIR_Main
  5157  01A6  0861               	movf	??_PIR_Main,w
  5158  01A7  1683               	bsf	3,5	;RP0=1, select bank1
  5159  01A8  1303               	bcf	3,6	;RP1=0, select bank1
  5160  01A9  07CE               	addwf	(__PIR^(0+128)+38),f
  5161                           
  5162                           ;PIR_B1.c: 149: if (_PIR.CloseTimeSeconds == 100) {
  5163  01AA  084E               	movf	(__PIR^(0+128)+38),w
  5164  01AB  3A64               	xorlw	100
  5165  01AC  1D03               	skipz
  5166  01AD  0008               	return
  5167                           
  5168                           ;PIR_B1.c: 150: _PIR.CloseTimeSeconds = 0;
  5169  01AE  01CE               	clrf	(__PIR^(0+128)+38)
  5170                           
  5171                           ;PIR_B1.c: 151: _PIR.CloseTimeMinutes++;
  5172  01AF  3001               	movlw	1
  5173  01B0  07CC               	addwf	(__PIR^(0+128)+36),f
  5174  01B1  1803               	skipnc
  5175  01B2  0ACD               	incf	((__PIR+1)^(0+128)+36),f
  5176  01B3  3000               	movlw	0
  5177  01B4  07CD               	addwf	((__PIR+1)^(0+128)+36),f
  5178                           
  5179                           ;PIR_B1.c: 152: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5180  01B5  0850               	movf	((__PIR+1)^(0+128)+39),w
  5181  01B6  064D               	xorwf	((__PIR+1)^(0+128)+36),w
  5182  01B7  1D03               	skipz
  5183  01B8  29BB               	goto	u4765
  5184  01B9  084F               	movf	(__PIR^(0+128)+39),w
  5185  01BA  064C               	xorwf	(__PIR^(0+128)+36),w
  5186  01BB                     u4765:	
  5187  01BB  1D03               	skipz
  5188  01BC  0008               	return
  5189                           
  5190                           ;PIR_B1.c: 153: _PIR.CloseTimeMinutes = 0;
  5191  01BD  01CC               	clrf	(__PIR^(0+128)+36)
  5192  01BE  01CD               	clrf	((__PIR+1)^(0+128)+36)
  5193                           
  5194                           ;PIR_B1.c: 154: _PIR.Status = 0;
  5195  01BF  1328               	bcf	__PIR^(0+128),6
  5196  01C0  0008               	return
  5197  01C1                     __end_of_PIR_Main:	
  5198                           
  5199                           	psect	text27
  5200  0F62                     __ptext27:	
  5201 ;; *************** function _getMain_Exception *****************
  5202 ;; Defined at:
  5203 ;;		line 284 in file "../src/Main_B1.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;		None
  5206 ;; Auto vars:     Size  Location     Type
  5207 ;;  result          1    4[COMMON] unsigned char 
  5208 ;; Return value:  Size  Location     Type
  5209 ;;                  1    wreg      unsigned char 
  5210 ;; Registers used:
  5211 ;;		wreg, status,2, status,0
  5212 ;; Tracked objects:
  5213 ;;		On entry : 0/0
  5214 ;;		On exit  : 0/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5217 ;;      Params:         0       0       0       0
  5218 ;;      Locals:         1       0       0       0
  5219 ;;      Temps:          0       0       0       0
  5220 ;;      Totals:         1       0       0       0
  5221 ;;Total ram usage:        1 bytes
  5222 ;; Hardware stack levels used:    1
  5223 ;; Hardware stack levels required when called:    2
  5224 ;; This function calls:
  5225 ;;		Nothing
  5226 ;; This function is called by:
  5227 ;;		_PIR_Main
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           
  5232                           ;psect for function _getMain_Exception
  5233  0F62                     _getMain_Exception:	
  5234                           
  5235                           ;Main_B1.c: 285: char result = 0;
  5236                           
  5237                           ;incstack = 0
  5238                           ; Regs used in _getMain_Exception: [wreg+status,2+status,0]
  5239  0F62  01F4               	clrf	getMain_Exception@result
  5240                           
  5241                           ;Main_B1.c: 287: if (result == 0) {
  5242  0F63  08F4               	movf	getMain_Exception@result,f
  5243  0F64  1D03               	skipz
  5244  0F65  2F6C               	goto	l2568
  5245                           
  5246                           ;Main_B1.c: 288: result = SYSC.ERROR == 1 ? 1 : 0;
  5247  0F66  3000               	movlw	0
  5248  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  5249  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  5250  0F69  18A0               	btfsc	_SYSC,1
  5251  0F6A  3001               	movlw	1
  5252  0F6B  00F4               	movwf	getMain_Exception@result
  5253  0F6C                     l2568:	
  5254                           
  5255                           ;Main_B1.c: 289: }
  5256                           ;Main_B1.c: 293: if (result == 0) {
  5257  0F6C  08F4               	movf	getMain_Exception@result,f
  5258  0F6D  1D03               	skipz
  5259  0F6E  2F75               	goto	l2572
  5260                           
  5261                           ;Main_B1.c: 294: result = Temp.ERROR == 1 ? 1 : 0;
  5262  0F6F  3000               	movlw	0
  5263  0F70  1283               	bcf	3,5	;RP0=0, select bank0
  5264  0F71  1303               	bcf	3,6	;RP1=0, select bank0
  5265  0F72  18D0               	btfsc	_Temp,1
  5266  0F73  3001               	movlw	1
  5267  0F74  00F4               	movwf	getMain_Exception@result
  5268  0F75                     l2572:	
  5269                           
  5270                           ;Main_B1.c: 295: }
  5271                           ;Main_B1.c: 297: return result;
  5272  0F75  0874               	movf	getMain_Exception@result,w
  5273  0F76  0008               	return
  5274  0F77                     __end_of_getMain_Exception:	
  5275                           
  5276                           	psect	text28
  5277  0E86                     __ptext28:	
  5278 ;; *************** function _getCDS_Status *****************
  5279 ;; Defined at:
  5280 ;;		line 44 in file "../src/CDS_B1.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;		None
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;  result          1    4[COMMON] unsigned char 
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  1    wreg      unsigned char 
  5287 ;; Registers used:
  5288 ;;		wreg, status,2
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5294 ;;      Params:         0       0       0       0
  5295 ;;      Locals:         1       0       0       0
  5296 ;;      Temps:          0       0       0       0
  5297 ;;      Totals:         1       0       0       0
  5298 ;;Total ram usage:        1 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; Hardware stack levels required when called:    2
  5301 ;; This function calls:
  5302 ;;		Nothing
  5303 ;; This function is called by:
  5304 ;;		_PIR_Main
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           
  5309                           ;psect for function _getCDS_Status
  5310  0E86                     _getCDS_Status:	
  5311                           
  5312                           ;CDS_B1.c: 45: char result = _CDS.Status;
  5313                           
  5314                           ;incstack = 0
  5315                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5316  0E86  3000               	movlw	0
  5317  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  5318  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  5319  0E89  1A25               	btfsc	__CDS,4
  5320  0E8A  3001               	movlw	1
  5321  0E8B  00F4               	movwf	getCDS_Status@result
  5322                           
  5323                           ;CDS_B1.c: 46: return result;
  5324  0E8C  0874               	movf	getCDS_Status@result,w
  5325  0E8D  0008               	return
  5326  0E8E                     __end_of_getCDS_Status:	
  5327                           
  5328                           	psect	text29
  5329  0F17                     __ptext29:	
  5330 ;; *************** function _PIR_Initialization *****************
  5331 ;; Defined at:
  5332 ;;		line 7 in file "../src/PIR_B1.c"
  5333 ;; Parameters:    Size  Location     Type
  5334 ;;		None
  5335 ;; Auto vars:     Size  Location     Type
  5336 ;;		None
  5337 ;; Return value:  Size  Location     Type
  5338 ;;		None               void
  5339 ;; Registers used:
  5340 ;;		wreg
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/0
  5343 ;;		On exit  : 0/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5346 ;;      Params:         0       0       0       0
  5347 ;;      Locals:         0       0       0       0
  5348 ;;      Temps:          1       0       0       0
  5349 ;;      Totals:         1       0       0       0
  5350 ;;Total ram usage:        1 bytes
  5351 ;; Hardware stack levels used:    1
  5352 ;; Hardware stack levels required when called:    2
  5353 ;; This function calls:
  5354 ;;		Nothing
  5355 ;; This function is called by:
  5356 ;;		_main
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           
  5361                           ;psect for function _PIR_Initialization
  5362  0F17                     _PIR_Initialization:	
  5363                           
  5364                           ;PIR_B1.c: 8: _PIR.Enable = 1;
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in _PIR_Initialization: [wreg]
  5368  0F17  1683               	bsf	3,5	;RP0=1, select bank1
  5369  0F18  1303               	bcf	3,6	;RP1=0, select bank1
  5370  0F19  1428               	bsf	__PIR^(0+128),0
  5371                           
  5372                           ;PIR_B1.c: 9: _PIR.RangeValue = 7;
  5373  0F1A  3007               	movlw	7
  5374  0F1B  00F4               	movwf	??_PIR_Initialization
  5375  0F1C  0874               	movf	??_PIR_Initialization,w
  5376  0F1D  00D4               	movwf	(__PIR^(0+128)+44)
  5377                           
  5378                           ;PIR_B1.c: 10: _PIR.CloseTimeValue = 150;
  5379  0F1E  3096               	movlw	150
  5380  0F1F  00CF               	movwf	(__PIR^(0+128)+39)
  5381  0F20  3000               	movlw	0
  5382  0F21  00D0               	movwf	(__PIR^(0+128)+40)
  5383                           
  5384                           ;PIR_B1.c: 11: _PIR.TriggerValue = 2;
  5385  0F22  3002               	movlw	2
  5386  0F23  00F4               	movwf	??_PIR_Initialization
  5387  0F24  0874               	movf	??_PIR_Initialization,w
  5388  0F25  00CB               	movwf	(__PIR^(0+128)+35)
  5389  0F26  0008               	return
  5390  0F27                     __end_of_PIR_Initialization:	
  5391                           
  5392                           	psect	text30
  5393  0EE9                     __ptext30:	
  5394 ;; *************** function _Mcu_Initialization *****************
  5395 ;; Defined at:
  5396 ;;		line 30 in file "../src/MCU_B1.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;		None
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;		None
  5401 ;; Return value:  Size  Location     Type
  5402 ;;		None               void
  5403 ;; Registers used:
  5404 ;;		wreg, status,2, status,0, pclath, cstack
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5410 ;;      Params:         0       0       0       0
  5411 ;;      Locals:         0       0       0       0
  5412 ;;      Temps:          0       0       0       0
  5413 ;;      Totals:         0       0       0       0
  5414 ;;Total ram usage:        0 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:    3
  5417 ;; This function calls:
  5418 ;;		_ADC_Set
  5419 ;;		_Fosc_Set
  5420 ;;		_IO_Set
  5421 ;;		_TMR1_Set
  5422 ;;		_WDT_Set
  5423 ;; This function is called by:
  5424 ;;		_main
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           
  5429                           ;psect for function _Mcu_Initialization
  5430  0EE9                     _Mcu_Initialization:	
  5431                           
  5432                           ;MCU_B1.c: 32: Fosc_Set();
  5433                           
  5434                           ;incstack = 0
  5435                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5436  0EE9  158A  2661  158A   	fcall	_Fosc_Set
  5437                           
  5438                           ;MCU_B1.c: 34: IO_Set();
  5439  0EEC  158A  274D  158A   	fcall	_IO_Set
  5440                           
  5441                           ;MCU_B1.c: 36: ;;
  5442                           ;MCU_B1.c: 38: TMR1_Set();
  5443  0EEF  158A  26DB  158A   	fcall	_TMR1_Set
  5444                           
  5445                           ;MCU_B1.c: 40: ADC_Set();
  5446  0EF2  158A  2677  158A   	fcall	_ADC_Set
  5447                           
  5448                           ;MCU_B1.c: 42: ;;
  5449                           ;MCU_B1.c: 44: ;;
  5450                           ;MCU_B1.c: 46: ;;
  5451                           ;MCU_B1.c: 48: ;;
  5452                           ;MCU_B1.c: 50: ;;
  5453                           ;MCU_B1.c: 52: WDT_Set();
  5454  0EF5  118A  27F3         	fcall	_WDT_Set
  5455  0EF7  0008               	return
  5456  0EF8                     __end_of_Mcu_Initialization:	
  5457                           
  5458                           	psect	text31
  5459  07F3                     __ptext31:	
  5460 ;; *************** function _WDT_Set *****************
  5461 ;; Defined at:
  5462 ;;		line 1005 in file "../src/MCU_B1.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;		None
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;		None
  5467 ;; Return value:  Size  Location     Type
  5468 ;;		None               void
  5469 ;; Registers used:
  5470 ;;		wreg
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5476 ;;      Params:         0       0       0       0
  5477 ;;      Locals:         0       0       0       0
  5478 ;;      Temps:          1       0       0       0
  5479 ;;      Totals:         1       0       0       0
  5480 ;;Total ram usage:        1 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    2
  5483 ;; This function calls:
  5484 ;;		Nothing
  5485 ;; This function is called by:
  5486 ;;		_Mcu_Initialization
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           
  5491                           ;psect for function _WDT_Set
  5492  07F3                     _WDT_Set:	
  5493                           
  5494                           ;MCU_B1.c: 1007: PSA = 1;
  5495                           
  5496                           ;incstack = 0
  5497                           ; Regs used in _WDT_Set: [wreg]
  5498  07F3  1683               	bsf	3,5	;RP0=1, select bank1
  5499  07F4  1303               	bcf	3,6	;RP1=0, select bank1
  5500  07F5  1581               	bsf	1,3	;volatile
  5501                           
  5502                           ;MCU_B1.c: 1008: PS0 = 1;
  5503  07F6  1401               	bsf	1,0	;volatile
  5504                           
  5505                           ;MCU_B1.c: 1009: PS1 = 1;
  5506  07F7  1481               	bsf	1,1	;volatile
  5507                           
  5508                           ;MCU_B1.c: 1010: PS2 = 1;
  5509  07F8  1501               	bsf	1,2	;volatile
  5510                           
  5511                           ;MCU_B1.c: 1014: WDT.Enable = 1;
  5512  07F9  1477               	bsf	_WDT,0
  5513                           
  5514                           ;MCU_B1.c: 1015: WDT.Timer = 10;
  5515  07FA  300A               	movlw	10
  5516  07FB  00F4               	movwf	??_WDT_Set
  5517  07FC  0874               	movf	??_WDT_Set,w
  5518  07FD  00F8               	movwf	_WDT+1
  5519  07FE  0008               	return
  5520  07FF                     __end_of_WDT_Set:	
  5521                           
  5522                           	psect	text32
  5523  0EDB                     __ptext32:	
  5524 ;; *************** function _TMR1_Set *****************
  5525 ;; Defined at:
  5526 ;;		line 199 in file "../src/MCU_B1.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;		None
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;		None
  5531 ;; Return value:  Size  Location     Type
  5532 ;;		None               void
  5533 ;; Registers used:
  5534 ;;		wreg
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5540 ;;      Params:         0       0       0       0
  5541 ;;      Locals:         0       0       0       0
  5542 ;;      Temps:          0       0       0       0
  5543 ;;      Totals:         0       0       0       0
  5544 ;;Total ram usage:        0 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    2
  5547 ;; This function calls:
  5548 ;;		Nothing
  5549 ;; This function is called by:
  5550 ;;		_Mcu_Initialization
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           
  5555                           ;psect for function _TMR1_Set
  5556  0EDB                     _TMR1_Set:	
  5557                           
  5558                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  5559                           
  5560                           ;incstack = 0
  5561                           ; Regs used in _TMR1_Set: [wreg]
  5562  0EDB  3041               	movlw	65
  5563  0EDC  1283               	bcf	3,5	;RP0=0, select bank0
  5564  0EDD  1303               	bcf	3,6	;RP1=0, select bank0
  5565  0EDE  0090               	movwf	16	;volatile
  5566                           
  5567                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  5568  0EDF  30FA               	movlw	250
  5569  0EE0  008F               	movwf	15	;volatile
  5570                           
  5571                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  5572  0EE1  3038               	movlw	56
  5573  0EE2  008E               	movwf	14	;volatile
  5574                           
  5575                           ;MCU_B1.c: 203: TMR1IE = 1;
  5576  0EE3  1683               	bsf	3,5	;RP0=1, select bank1
  5577  0EE4  1303               	bcf	3,6	;RP1=0, select bank1
  5578  0EE5  140C               	bsf	12,0	;volatile
  5579                           
  5580                           ;MCU_B1.c: 204: PEIE = 1;
  5581  0EE6  170B               	bsf	11,6	;volatile
  5582                           
  5583                           ;MCU_B1.c: 205: GIE = 1;
  5584  0EE7  178B               	bsf	11,7	;volatile
  5585  0EE8  0008               	return
  5586  0EE9                     __end_of_TMR1_Set:	
  5587                           
  5588                           	psect	text33
  5589  0F4D                     __ptext33:	
  5590 ;; *************** function _IO_Set *****************
  5591 ;; Defined at:
  5592 ;;		line 60 in file "../src/MCU_B1.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;		None
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;		None               void
  5599 ;; Registers used:
  5600 ;;		wreg, status,2
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5606 ;;      Params:         0       0       0       0
  5607 ;;      Locals:         0       0       0       0
  5608 ;;      Temps:          0       0       0       0
  5609 ;;      Totals:         0       0       0       0
  5610 ;;Total ram usage:        0 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:    2
  5613 ;; This function calls:
  5614 ;;		Nothing
  5615 ;; This function is called by:
  5616 ;;		_Mcu_Initialization
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           
  5621                           ;psect for function _IO_Set
  5622  0F4D                     _IO_Set:	
  5623                           
  5624                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5625                           
  5626                           ;incstack = 0
  5627                           ; Regs used in _IO_Set: [wreg+status,2]
  5628  0F4D  302F               	movlw	47
  5629  0F4E  1683               	bsf	3,5	;RP0=1, select bank1
  5630  0F4F  1303               	bcf	3,6	;RP1=0, select bank1
  5631  0F50  0085               	movwf	5	;volatile
  5632                           
  5633                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5634  0F51  3001               	movlw	1
  5635  0F52  0086               	movwf	6	;volatile
  5636                           
  5637                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5638  0F53  0187               	clrf	7	;volatile
  5639                           
  5640                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5641  0F54  3007               	movlw	7
  5642  0F55  1683               	bsf	3,5	;RP0=1, select bank3
  5643  0F56  1703               	bsf	3,6	;RP1=1, select bank3
  5644  0F57  0085               	movwf	5	;volatile
  5645                           
  5646                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5647  0F58  3001               	movlw	1
  5648  0F59  0086               	movwf	6	;volatile
  5649                           
  5650                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5651  0F5A  30AF               	movlw	175
  5652  0F5B  1283               	bcf	3,5	;RP0=0, select bank0
  5653  0F5C  1303               	bcf	3,6	;RP1=0, select bank0
  5654  0F5D  0085               	movwf	5	;volatile
  5655                           
  5656                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5657  0F5E  3001               	movlw	1
  5658  0F5F  0086               	movwf	6	;volatile
  5659                           
  5660                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5661  0F60  0187               	clrf	7	;volatile
  5662  0F61  0008               	return
  5663  0F62                     __end_of_IO_Set:	
  5664                           
  5665                           	psect	text34
  5666  0E61                     __ptext34:	
  5667 ;; *************** function _Fosc_Set *****************
  5668 ;; Defined at:
  5669 ;;		line 56 in file "../src/MCU_B1.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;		None
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;		None
  5674 ;; Return value:  Size  Location     Type
  5675 ;;		None               void
  5676 ;; Registers used:
  5677 ;;		wreg
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5683 ;;      Params:         0       0       0       0
  5684 ;;      Locals:         0       0       0       0
  5685 ;;      Temps:          0       0       0       0
  5686 ;;      Totals:         0       0       0       0
  5687 ;;Total ram usage:        0 bytes
  5688 ;; Hardware stack levels used:    1
  5689 ;; Hardware stack levels required when called:    2
  5690 ;; This function calls:
  5691 ;;		Nothing
  5692 ;; This function is called by:
  5693 ;;		_Mcu_Initialization
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           
  5698                           ;psect for function _Fosc_Set
  5699  0E61                     _Fosc_Set:	
  5700                           
  5701                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5702                           
  5703                           ;incstack = 0
  5704                           ; Regs used in _Fosc_Set: [wreg]
  5705  0E61  303C               	movlw	60
  5706  0E62  1683               	bsf	3,5	;RP0=1, select bank1
  5707  0E63  1303               	bcf	3,6	;RP1=0, select bank1
  5708  0E64  0090               	movwf	16	;volatile
  5709  0E65  0008               	return
  5710  0E66                     __end_of_Fosc_Set:	
  5711                           
  5712                           	psect	text35
  5713  0E77                     __ptext35:	
  5714 ;; *************** function _ADC_Set *****************
  5715 ;; Defined at:
  5716 ;;		line 419 in file "../src/MCU_B1.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;		None
  5719 ;; Auto vars:     Size  Location     Type
  5720 ;;		None
  5721 ;; Return value:  Size  Location     Type
  5722 ;;		None               void
  5723 ;; Registers used:
  5724 ;;		wreg
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5730 ;;      Params:         0       0       0       0
  5731 ;;      Locals:         0       0       0       0
  5732 ;;      Temps:          0       0       0       0
  5733 ;;      Totals:         0       0       0       0
  5734 ;;Total ram usage:        0 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    2
  5737 ;; This function calls:
  5738 ;;		Nothing
  5739 ;; This function is called by:
  5740 ;;		_Mcu_Initialization
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           
  5745                           ;psect for function _ADC_Set
  5746  0E77                     _ADC_Set:	
  5747                           
  5748                           ;MCU_B1.c: 420: ADCON1 = 0x72;
  5749                           
  5750                           ;incstack = 0
  5751                           ; Regs used in _ADC_Set: [wreg]
  5752  0E77  3072               	movlw	114
  5753  0E78  1683               	bsf	3,5	;RP0=1, select bank1
  5754  0E79  1303               	bcf	3,6	;RP1=0, select bank1
  5755  0E7A  009F               	movwf	31	;volatile
  5756                           
  5757                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  5758  0E7B  30C1               	movlw	193
  5759  0E7C  009D               	movwf	29	;volatile
  5760  0E7D  0008               	return
  5761  0E7E                     __end_of_ADC_Set:	
  5762                           
  5763                           	psect	text36
  5764  02FB                     __ptext36:	
  5765 ;; *************** function _Load_Main *****************
  5766 ;; Defined at:
  5767 ;;		line 39 in file "../src/OverLoad_B1.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;		None
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;  i               1    6[BANK0 ] unsigned char 
  5772 ;; Return value:  Size  Location     Type
  5773 ;;		None               void
  5774 ;; Registers used:
  5775 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5781 ;;      Params:         0       0       0       0
  5782 ;;      Locals:         0       1       0       0
  5783 ;;      Temps:          0       2       0       0
  5784 ;;      Totals:         0       3       0       0
  5785 ;;Total ram usage:        3 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; Hardware stack levels required when called:    5
  5788 ;; This function calls:
  5789 ;;		___lbdiv
  5790 ;;		___wmul
  5791 ;;		_getTemp_Safe
  5792 ;;		_setLoad_AH_AL_Restore
  5793 ;;		_setLoad_Exceptions
  5794 ;; This function is called by:
  5795 ;;		_main
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           
  5800                           ;psect for function _Load_Main
  5801  02FB                     _Load_Main:	
  5802                           
  5803                           ;OverLoad_B1.c: 40: char i = 0;
  5804                           
  5805                           ;incstack = 0
  5806                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5807  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  5808  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  5809  02FD  01E6               	clrf	Load_Main@i
  5810                           
  5811                           ;OverLoad_B1.c: 41: if (Load1.ERROR == 1) {
  5812  02FE  1EAD               	btfss	_Load1,5
  5813  02FF  2B13               	goto	l536
  5814                           
  5815                           ;OverLoad_B1.c: 42: Load1.ErrorTime++;
  5816  0300  3001               	movlw	1
  5817  0301  07B0               	addwf	_Load1+3,f
  5818  0302  1803               	skipnc
  5819  0303  0AB1               	incf	_Load1+4,f
  5820  0304  3000               	movlw	0
  5821  0305  07B1               	addwf	_Load1+4,f
  5822                           
  5823                           ;OverLoad_B1.c: 43: if (Load1.ErrorTime >= 1000)
  5824  0306  3003               	movlw	3
  5825  0307  0231               	subwf	_Load1+4,w
  5826  0308  30E8               	movlw	232
  5827  0309  1903               	skipnz
  5828  030A  0230               	subwf	_Load1+3,w
  5829  030B  1C03               	skipc
  5830  030C  0008               	return
  5831                           
  5832                           ;OverLoad_B1.c: 44: {
  5833                           ;OverLoad_B1.c: 45: Load1.ErrorTime = 0;
  5834  030D  01B0               	clrf	_Load1+3
  5835  030E  01B1               	clrf	_Load1+4
  5836                           
  5837                           ;OverLoad_B1.c: 46: setLoad_Exceptions(0);
  5838  030F  3000               	movlw	0
  5839  0310  118A  27B5         	fcall	_setLoad_Exceptions
  5840                           
  5841                           ;OverLoad_B1.c: 47: }
  5842                           ;OverLoad_B1.c: 48: } else {
  5843  0312  0008               	return
  5844  0313                     l536:	
  5845                           
  5846                           ;OverLoad_B1.c: 49: if (Load1.ADtoGO == 1) {
  5847  0313  1E2D               	btfss	_Load1,4
  5848  0314  2BE2               	goto	l539
  5849                           
  5850                           ;OverLoad_B1.c: 50: Load1.Time++;
  5851  0315  3001               	movlw	1
  5852  0316  07AE               	addwf	_Load1+1,f
  5853  0317  1803               	skipnc
  5854  0318  0AAF               	incf	_Load1+2,f
  5855  0319  3000               	movlw	0
  5856  031A  07AF               	addwf	_Load1+2,f
  5857                           
  5858                           ;OverLoad_B1.c: 51: if (Load1.Time >= 5)
  5859  031B  3000               	movlw	0
  5860  031C  022F               	subwf	_Load1+2,w
  5861  031D  3005               	movlw	5
  5862  031E  1903               	skipnz
  5863  031F  022E               	subwf	_Load1+1,w
  5864  0320  1C03               	skipc
  5865  0321  0008               	return
  5866                           
  5867                           ;OverLoad_B1.c: 52: {
  5868                           ;OverLoad_B1.c: 53: Load1.Time = 0;
  5869  0322  01AE               	clrf	_Load1+1
  5870  0323  01AF               	clrf	_Load1+2
  5871                           
  5872                           ;OverLoad_B1.c: 54: Load1.ADtoGO = 0;
  5873  0324  122D               	bcf	_Load1,4
  5874                           
  5875                           ;OverLoad_B1.c: 55: Load1.LightsCount = Load1.Lights1Status + Load1.Lights2Status + Load
      +                          1.Lights3Status;
  5876  0325  084E               	movf	_Load1+33,w
  5877  0326  074D               	addwf	_Load1+32,w
  5878  0327  00E4               	movwf	??_Load_Main
  5879  0328  084F               	movf	_Load1+34,w
  5880  0329  0764               	addwf	??_Load_Main,w
  5881  032A  00E5               	movwf	??_Load_Main+1
  5882  032B  0865               	movf	??_Load_Main+1,w
  5883  032C  00CA               	movwf	_Load1+29
  5884                           
  5885                           ;OverLoad_B1.c: 56: for (i = 1; i < 4; i++) {
  5886  032D  01E6               	clrf	Load_Main@i
  5887  032E  0AE6               	incf	Load_Main@i,f
  5888  032F  3004               	movlw	4
  5889  0330  0266               	subwf	Load_Main@i,w
  5890  0331  1803               	btfsc	3,0
  5891  0332  2B4A               	goto	l3792
  5892  0333                     l3786:	
  5893                           
  5894                           ;OverLoad_B1.c: 57: Load1.ADH += Load1.AH[i];
  5895  0333  0866               	movf	Load_Main@i,w
  5896  0334  3E34               	addlw	(_Load1+7)& (0+255)
  5897  0335  0084               	movwf	4
  5898  0336  1383               	bcf	3,7	;select IRP bank0
  5899  0337  0800               	movf	0,w
  5900  0338  00E4               	movwf	??_Load_Main
  5901  0339  0864               	movf	??_Load_Main,w
  5902  033A  07BF               	addwf	_Load1+18,f
  5903                           
  5904                           ;OverLoad_B1.c: 58: Load1.ADL += Load1.AL[i];
  5905  033B  0866               	movf	Load_Main@i,w
  5906  033C  3E39               	addlw	(_Load1+12)& (0+255)
  5907  033D  0084               	movwf	4
  5908  033E  0800               	movf	0,w
  5909  033F  00E4               	movwf	??_Load_Main
  5910  0340  0864               	movf	??_Load_Main,w
  5911  0341  07C0               	addwf	_Load1+19,f
  5912  0342  3001               	movlw	1
  5913  0343  00E4               	movwf	??_Load_Main
  5914  0344  0864               	movf	??_Load_Main,w
  5915  0345  07E6               	addwf	Load_Main@i,f
  5916  0346  3004               	movlw	4
  5917  0347  0266               	subwf	Load_Main@i,w
  5918  0348  1C03               	skipc
  5919  0349  2B33               	goto	l3786
  5920  034A                     l3792:	
  5921                           
  5922                           ;OverLoad_B1.c: 59: }
  5923                           ;OverLoad_B1.c: 60: Load1.ADH /= 3;
  5924  034A  3003               	movlw	3
  5925  034B  00E4               	movwf	??_Load_Main
  5926  034C  0864               	movf	??_Load_Main,w
  5927  034D  00F4               	movwf	___lbdiv@divisor
  5928  034E  083F               	movf	_Load1+18,w
  5929  034F  118A  2792  118A   	fcall	___lbdiv
  5930  0352  1283               	bcf	3,5	;RP0=0, select bank0
  5931  0353  1303               	bcf	3,6	;RP1=0, select bank0
  5932  0354  00E5               	movwf	??_Load_Main+1
  5933  0355  0865               	movf	??_Load_Main+1,w
  5934  0356  00BF               	movwf	_Load1+18
  5935                           
  5936                           ;OverLoad_B1.c: 61: Load1.ADL /= 3;
  5937  0357  3003               	movlw	3
  5938  0358  00E4               	movwf	??_Load_Main
  5939  0359  0864               	movf	??_Load_Main,w
  5940  035A  00F4               	movwf	___lbdiv@divisor
  5941  035B  0840               	movf	_Load1+19,w
  5942  035C  118A  2792  118A   	fcall	___lbdiv
  5943  035F  1283               	bcf	3,5	;RP0=0, select bank0
  5944  0360  1303               	bcf	3,6	;RP1=0, select bank0
  5945  0361  00E5               	movwf	??_Load_Main+1
  5946  0362  0865               	movf	??_Load_Main+1,w
  5947  0363  00C0               	movwf	_Load1+19
  5948                           
  5949                           ;OverLoad_B1.c: 62: if (Load1.ADH > Load1.ADL) {
  5950  0364  083F               	movf	_Load1+18,w
  5951  0365  0240               	subwf	_Load1+19,w
  5952  0366  1803               	skipnc
  5953  0367  2BDF               	goto	l3846
  5954                           
  5955                           ;OverLoad_B1.c: 63: Load1.AD = (Load1.ADH - Load1.ADL);
  5956  0368  0340               	decf	_Load1+19,w
  5957  0369  3AFF               	xorlw	255
  5958  036A  073F               	addwf	_Load1+18,w
  5959  036B  00E4               	movwf	??_Load_Main
  5960  036C  0864               	movf	??_Load_Main,w
  5961  036D  00BE               	movwf	_Load1+17
  5962                           
  5963                           ;OverLoad_B1.c: 65: if (Load1.Count < 2) {
  5964  036E  3002               	movlw	2
  5965  036F  0248               	subwf	_Load1+27,w
  5966  0370  1803               	skipnc
  5967  0371  2B90               	goto	l544
  5968                           
  5969                           ;OverLoad_B1.c: 66: Load1.Count++;
  5970  0372  3001               	movlw	1
  5971  0373  00E4               	movwf	??_Load_Main
  5972  0374  0864               	movf	??_Load_Main,w
  5973  0375  07C8               	addwf	_Load1+27,f
  5974                           
  5975                           ;OverLoad_B1.c: 67: if (Load1.Count == 1) {
  5976  0376  0848               	movf	_Load1+27,w
  5977  0377  3A01               	xorlw	1
  5978  0378  1D03               	skipz
  5979  0379  2B7D               	goto	l3806
  5980                           
  5981                           ;OverLoad_B1.c: 68: Load1.JudgeValue = 500;
  5982  037A  30F4               	movlw	244
  5983  037B  00C4               	movwf	_Load1+23
  5984  037C  2B8E               	goto	L17
  5985  037D                     l3806:	
  5986                           ;OverLoad_B1.c: 69: } else if (Load1.Count == 2) {
  5987                           
  5988  037D  0848               	movf	_Load1+27,w
  5989  037E  3A02               	xorlw	2
  5990  037F  1D03               	skipz
  5991  0380  2B90               	goto	l544
  5992                           
  5993                           ;OverLoad_B1.c: 70: if (Load1.LightsCount == 1) {
  5994  0381  084A               	movf	_Load1+29,w
  5995  0382  3A01               	xorlw	1
  5996  0383  1D03               	skipz
  5997  0384  2B89               	goto	l3812
  5998                           
  5999                           ;OverLoad_B1.c: 71: Load1.JudgeValue = 0x42;
  6000  0385  3042               	movlw	66
  6001  0386  00C4               	movwf	_Load1+23
  6002  0387  3000               	movlw	0
  6003  0388  2B8F               	goto	L16
  6004  0389                     l3812:	
  6005                           ;OverLoad_B1.c: 72: } else {
  6006                           
  6007                           
  6008                           ;OverLoad_B1.c: 73: Load1.JudgeValue = (0x42 + Load1.TotalLoad) - 0x08;
  6009  0389  0833               	movf	_Load1+6,w
  6010  038A  3E3A               	addlw	58
  6011  038B  00C4               	movwf	_Load1+23
  6012  038C  3000               	movlw	0
  6013  038D  1803               	skipnc
  6014  038E                     L17:	
  6015  038E  3001               	movlw	1
  6016  038F                     L16:	
  6017  038F  00C5               	movwf	_Load1+24
  6018  0390                     l544:	
  6019                           
  6020                           ;OverLoad_B1.c: 74: }
  6021                           ;OverLoad_B1.c: 75: }
  6022                           ;OverLoad_B1.c: 76: }
  6023                           ;OverLoad_B1.c: 78: if (Load1.AD >= Load1.JudgeValue) {
  6024  0390  083E               	movf	_Load1+17,w
  6025  0391  00E4               	movwf	??_Load_Main
  6026  0392  01E5               	clrf	??_Load_Main+1
  6027  0393  0845               	movf	_Load1+24,w
  6028  0394  0265               	subwf	??_Load_Main+1,w
  6029  0395  1D03               	skipz
  6030  0396  2B99               	goto	u4375
  6031  0397  0844               	movf	_Load1+23,w
  6032  0398  0264               	subwf	??_Load_Main,w
  6033  0399                     u4375:	
  6034  0399  1C03               	skipc
  6035  039A  2BA9               	goto	l3822
  6036                           
  6037                           ;OverLoad_B1.c: 79: Load1.ErrorCount++;
  6038  039B  3001               	movlw	1
  6039  039C  00E4               	movwf	??_Load_Main
  6040  039D  0864               	movf	??_Load_Main,w
  6041  039E  07C9               	addwf	_Load1+28,f
  6042                           
  6043                           ;OverLoad_B1.c: 80: if (Load1.ErrorCount > 2) {
  6044  039F  3003               	movlw	3
  6045  03A0  0249               	subwf	_Load1+28,w
  6046  03A1  1C03               	skipc
  6047  03A2  2BDF               	goto	l3846
  6048                           
  6049                           ;OverLoad_B1.c: 81: Load1.ErrorCount = 0;
  6050  03A3  01C9               	clrf	_Load1+28
  6051                           
  6052                           ;OverLoad_B1.c: 82: setLoad_Exceptions(1);
  6053  03A4  3001               	movlw	1
  6054  03A5  118A  27B5  118A   	fcall	_setLoad_Exceptions
  6055                           
  6056                           ;OverLoad_B1.c: 90: }
  6057                           ;OverLoad_B1.c: 91: } else {
  6058  03A8  2BDF               	goto	l3846
  6059  03A9                     l3822:	
  6060                           
  6061                           ;OverLoad_B1.c: 92: RB3 = RB3 == 1 ? 0 : 1;
  6062  03A9  3008               	movlw	8
  6063  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  6064  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  6065  03AC  0686               	xorwf	6,f
  6066                           
  6067                           ;OverLoad_B1.c: 93: Load1.ErrorCount = 0;
  6068  03AD  01C9               	clrf	_Load1+28
  6069                           
  6070                           ;OverLoad_B1.c: 94: if (Load1.SafeCount < 10) {
  6071  03AE  300A               	movlw	10
  6072  03AF  024C               	subwf	_Load1+31,w
  6073  03B0  1803               	skipnc
  6074  03B1  2BB6               	goto	l3830
  6075                           
  6076                           ;OverLoad_B1.c: 95: Load1.SafeCount++;
  6077  03B2  3001               	movlw	1
  6078  03B3  00E4               	movwf	??_Load_Main
  6079  03B4  0864               	movf	??_Load_Main,w
  6080  03B5  07CC               	addwf	_Load1+31,f
  6081  03B6                     l3830:	
  6082                           
  6083                           ;OverLoad_B1.c: 96: }
  6084                           ;OverLoad_B1.c: 97: if (Load1.SafeCount >= 10) {
  6085  03B6  300A               	movlw	10
  6086  03B7  024C               	subwf	_Load1+31,w
  6087  03B8  1C03               	skipc
  6088  03B9  2BDF               	goto	l3846
  6089                           
  6090                           ;OverLoad_B1.c: 98: Load1.Safe = 1;
  6091  03BA  15AD               	bsf	_Load1,3
  6092                           
  6093                           ;OverLoad_B1.c: 130: if (Load1.StatusOn == 1) {
  6094  03BB  1F2D               	btfss	_Load1,6
  6095  03BC  2BC2               	goto	l3838
  6096                           
  6097                           ;OverLoad_B1.c: 131: Load1.StatusOn = 0;
  6098  03BD  132D               	bcf	_Load1,6
  6099                           
  6100                           ;OverLoad_B1.c: 132: Load1.TotalLoad = Load1.AD;
  6101  03BE  083E               	movf	_Load1+17,w
  6102  03BF  00E4               	movwf	??_Load_Main
  6103  03C0  0864               	movf	??_Load_Main,w
  6104  03C1  00B3               	movwf	_Load1+6
  6105  03C2                     l3838:	
  6106                           
  6107                           ;OverLoad_B1.c: 134: }
  6108                           ;OverLoad_B1.c: 136: if (Load1.StatusOff == 1) {
  6109  03C2  1FAD               	btfss	_Load1,7
  6110  03C3  2BDF               	goto	l3846
  6111                           
  6112                           ;OverLoad_B1.c: 137: Load1.StatusOff = 0;
  6113  03C4  13AD               	bcf	_Load1,7
  6114                           
  6115                           ;OverLoad_B1.c: 138: Load1.TotalLoad = Load1.AD;
  6116  03C5  083E               	movf	_Load1+17,w
  6117  03C6  00E4               	movwf	??_Load_Main
  6118  03C7  0864               	movf	??_Load_Main,w
  6119  03C8  00B3               	movwf	_Load1+6
  6120                           
  6121                           ;OverLoad_B1.c: 139: Load1.JudgeValue = 0x42 * Load1.LightsCount;
  6122  03C9  084A               	movf	_Load1+29,w
  6123  03CA  00E4               	movwf	??_Load_Main
  6124  03CB  01E5               	clrf	??_Load_Main+1
  6125  03CC  0864               	movf	??_Load_Main,w
  6126  03CD  00E0               	movwf	___wmul@multiplier
  6127  03CE  0865               	movf	??_Load_Main+1,w
  6128  03CF  00E1               	movwf	___wmul@multiplier+1
  6129  03D0  3042               	movlw	66
  6130  03D1  00E2               	movwf	___wmul@multiplicand
  6131  03D2  3000               	movlw	0
  6132  03D3  00E3               	movwf	___wmul@multiplicand+1
  6133  03D4  118A  276D  118A   	fcall	___wmul
  6134  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  6135  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  6136  03D9  0861               	movf	?___wmul+1,w
  6137  03DA  01C5               	clrf	_Load1+24
  6138  03DB  07C5               	addwf	_Load1+24,f
  6139  03DC  0860               	movf	?___wmul,w
  6140  03DD  01C4               	clrf	_Load1+23
  6141  03DE  07C4               	addwf	_Load1+23,f
  6142  03DF                     l3846:	
  6143                           
  6144                           ;OverLoad_B1.c: 140: }
  6145                           ;OverLoad_B1.c: 141: }
  6146                           ;OverLoad_B1.c: 142: }
  6147                           ;OverLoad_B1.c: 143: }
  6148                           ;OverLoad_B1.c: 144: setLoad_AH_AL_Restore();
  6149  03DF  158A  2777         	fcall	_setLoad_AH_AL_Restore
  6150                           
  6151                           ;OverLoad_B1.c: 156: }
  6152                           ;OverLoad_B1.c: 157: } else {
  6153  03E1  0008               	return
  6154  03E2                     l539:	
  6155                           
  6156                           ;OverLoad_B1.c: 158: if (Load1.GO == 1) {
  6157  03E2  1CAD               	btfss	_Load1,1
  6158  03E3  2BF2               	goto	l558
  6159                           
  6160                           ;OverLoad_B1.c: 159: if (Load1.LightsON == 0) {
  6161  03E4  192D               	btfsc	_Load1,2
  6162  03E5  2BE8               	goto	l3852
  6163                           
  6164                           ;OverLoad_B1.c: 160: Load1.LightsON = 1;
  6165  03E6  152D               	bsf	_Load1,2
  6166                           
  6167                           ;OverLoad_B1.c: 161: Load1.Safe = 0;
  6168  03E7  11AD               	bcf	_Load1,3
  6169  03E8                     l3852:	
  6170                           
  6171                           ;OverLoad_B1.c: 162: }
  6172                           ;OverLoad_B1.c: 163: if (getTemp_Safe() == 1 && 1 == 1) {
  6173  03E8  158A  267E  118A   	fcall	_getTemp_Safe
  6174  03EB  3A01               	xorlw	1
  6175  03EC  1D03               	skipz
  6176  03ED  0008               	return
  6177                           
  6178                           ;OverLoad_B1.c: 164: Load1.ADtoGO = 1;
  6179  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  6180  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  6181  03F0  162D               	bsf	_Load1,4
  6182                           
  6183                           ;OverLoad_B1.c: 165: }
  6184                           ;OverLoad_B1.c: 166: } else {
  6185  03F1  0008               	return
  6186  03F2                     l558:	
  6187                           
  6188                           ;OverLoad_B1.c: 167: if (Load1.LightsON == 1) {
  6189  03F2  1D2D               	btfss	_Load1,2
  6190  03F3  0008               	return
  6191                           
  6192                           ;OverLoad_B1.c: 168: Load1.LightsON = 0;
  6193  03F4  112D               	bcf	_Load1,2
  6194                           
  6195                           ;OverLoad_B1.c: 169: Load1.Safe = 1;
  6196  03F5  15AD               	bsf	_Load1,3
  6197                           
  6198                           ;OverLoad_B1.c: 170: Load1.ErrorCount = 0;
  6199  03F6  01C9               	clrf	_Load1+28
  6200                           
  6201                           ;OverLoad_B1.c: 171: Load1.Count = 0;
  6202  03F7  01C8               	clrf	_Load1+27
  6203                           
  6204                           ;OverLoad_B1.c: 172: Load1.TotalLoad = 0;
  6205  03F8  01B3               	clrf	_Load1+6
  6206                           
  6207                           ;OverLoad_B1.c: 173: Load1.StatusOn = 0;
  6208  03F9  132D               	bcf	_Load1,6
  6209                           
  6210                           ;OverLoad_B1.c: 174: Load1.StatusOff = 0;
  6211  03FA  13AD               	bcf	_Load1,7
  6212                           
  6213                           ;OverLoad_B1.c: 175: Load1.AD = 0;
  6214  03FB  01BE               	clrf	_Load1+17
  6215                           
  6216                           ;OverLoad_B1.c: 176: setLoad_AH_AL_Restore();
  6217  03FC  158A  2777         	fcall	_setLoad_AH_AL_Restore
  6218  03FE  0008               	return
  6219  03FF                     __end_of_Load_Main:	
  6220                           
  6221                           	psect	text37
  6222  07B5                     __ptext37:	
  6223 ;; *************** function _setLoad_Exceptions *****************
  6224 ;; Defined at:
  6225 ;;		line 230 in file "../src/OverLoad_B1.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;  command         1    wreg     unsigned char 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  command         1    3[BANK0 ] unsigned char 
  6230 ;;  i               1    2[BANK0 ] unsigned char 
  6231 ;; Return value:  Size  Location     Type
  6232 ;;		None               void
  6233 ;; Registers used:
  6234 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6240 ;;      Params:         0       0       0       0
  6241 ;;      Locals:         0       2       0       0
  6242 ;;      Temps:          0       1       0       0
  6243 ;;      Totals:         0       3       0       0
  6244 ;;Total ram usage:        3 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:    4
  6247 ;; This function calls:
  6248 ;;		_setLED
  6249 ;; This function is called by:
  6250 ;;		_Load_Main
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           
  6255                           ;psect for function _setLoad_Exceptions
  6256  07B5                     _setLoad_Exceptions:	
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in _setLoad_Exceptions: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6260                           ;setLoad_Exceptions@command stored from wreg
  6261  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  6262  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  6263  07B7  00E3               	movwf	setLoad_Exceptions@command
  6264                           
  6265                           ;OverLoad_B1.c: 231: char i = command == 1 ? 0 : 1;
  6266  07B8  0863               	movf	setLoad_Exceptions@command,w
  6267  07B9  3A01               	xorlw	1
  6268  07BA  3000               	movlw	0
  6269  07BB  1D03               	skipz
  6270  07BC  3001               	movlw	1
  6271  07BD  00E1               	movwf	??_setLoad_Exceptions
  6272  07BE  0861               	movf	??_setLoad_Exceptions,w
  6273  07BF  00E2               	movwf	setLoad_Exceptions@i
  6274                           
  6275                           ;OverLoad_B1.c: 232: Load1.ERROR = command;
  6276  07C0  0863               	movf	setLoad_Exceptions@command,w
  6277  07C1  12AD               	bcf	_Load1,5
  6278  07C2  1D03               	skipz
  6279  07C3  16AD               	bsf	_Load1,5
  6280                           
  6281                           ;OverLoad_B1.c: 233: Load1.Safe = i;
  6282  07C4  0862               	movf	setLoad_Exceptions@i,w
  6283  07C5  11AD               	bcf	_Load1,3
  6284  07C6  1D03               	skipz
  6285  07C7  15AD               	bsf	_Load1,3
  6286                           
  6287                           ;OverLoad_B1.c: 236: if (command == 1) {
  6288  07C8  0863               	movf	setLoad_Exceptions@command,w
  6289  07C9  00E1               	movwf	??_setLoad_Exceptions
  6290  07CA  0861               	movf	??_setLoad_Exceptions,w
  6291  07CB  00B2               	movwf	_Load1+5
  6292                           
  6293                           ;OverLoad_B1.c: 241: }
  6294                           ;OverLoad_B1.c: 242: setLED(99, command + 10);
  6295                           
  6296                           ;OverLoad_B1.c: 237: ;;
  6297  07CC  0863               	movf	setLoad_Exceptions@command,w
  6298  07CD  3E0A               	addlw	10
  6299  07CE  00E1               	movwf	??_setLoad_Exceptions
  6300  07CF  0861               	movf	??_setLoad_Exceptions,w
  6301  07D0  00F6               	movwf	setLED@command
  6302  07D1  3063               	movlw	99
  6303  07D2  118A  24F4         	fcall	_setLED
  6304  07D4  0008               	return
  6305  07D5                     __end_of_setLoad_Exceptions:	
  6306                           
  6307                           	psect	text38
  6308  0E7E                     __ptext38:	
  6309 ;; *************** function _getTemp_Safe *****************
  6310 ;; Defined at:
  6311 ;;		line 21 in file "../src/OverTemperature_B1.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;		None
  6314 ;; Auto vars:     Size  Location     Type
  6315 ;;  result          1    4[COMMON] unsigned char 
  6316 ;; Return value:  Size  Location     Type
  6317 ;;                  1    wreg      unsigned char 
  6318 ;; Registers used:
  6319 ;;		wreg, status,2
  6320 ;; Tracked objects:
  6321 ;;		On entry : 0/0
  6322 ;;		On exit  : 0/0
  6323 ;;		Unchanged: 0/0
  6324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6325 ;;      Params:         0       0       0       0
  6326 ;;      Locals:         1       0       0       0
  6327 ;;      Temps:          0       0       0       0
  6328 ;;      Totals:         1       0       0       0
  6329 ;;Total ram usage:        1 bytes
  6330 ;; Hardware stack levels used:    1
  6331 ;; Hardware stack levels required when called:    2
  6332 ;; This function calls:
  6333 ;;		Nothing
  6334 ;; This function is called by:
  6335 ;;		_Load_Main
  6336 ;; This function uses a non-reentrant model
  6337 ;;
  6338                           
  6339                           
  6340                           ;psect for function _getTemp_Safe
  6341  0E7E                     _getTemp_Safe:	
  6342                           
  6343                           ;OverTemperature_B1.c: 22: char result = Temp.Safe;
  6344                           
  6345                           ;incstack = 0
  6346                           ; Regs used in _getTemp_Safe: [wreg+status,2]
  6347  0E7E  3000               	movlw	0
  6348  0E7F  1283               	bcf	3,5	;RP0=0, select bank0
  6349  0E80  1303               	bcf	3,6	;RP1=0, select bank0
  6350  0E81  1A50               	btfsc	_Temp,4
  6351  0E82  3001               	movlw	1
  6352  0E83  00F4               	movwf	getTemp_Safe@result
  6353                           
  6354                           ;OverTemperature_B1.c: 23: return result;
  6355  0E84  0874               	movf	getTemp_Safe@result,w
  6356  0E85  0008               	return
  6357  0E86                     __end_of_getTemp_Safe:	
  6358                           
  6359                           	psect	text39
  6360  076D                     __ptext39:	
  6361 ;; *************** function ___wmul *****************
  6362 ;; Defined at:
  6363 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6366 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;  product         2    4[COMMON] unsigned int 
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  2    0[BANK0 ] unsigned int 
  6371 ;; Registers used:
  6372 ;;		wreg, status,2, status,0
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6378 ;;      Params:         0       4       0       0
  6379 ;;      Locals:         2       0       0       0
  6380 ;;      Temps:          0       0       0       0
  6381 ;;      Totals:         2       4       0       0
  6382 ;;Total ram usage:        6 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    2
  6385 ;; This function calls:
  6386 ;;		Nothing
  6387 ;; This function is called by:
  6388 ;;		_Load_Main
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           
  6393                           ;psect for function ___wmul
  6394  076D                     ___wmul:	
  6395                           
  6396                           ;incstack = 0
  6397                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6398  076D  01F4               	clrf	___wmul@product
  6399  076E  01F5               	clrf	___wmul@product+1
  6400  076F                     l3524:	
  6401  076F  1283               	bcf	3,5	;RP0=0, select bank0
  6402  0770  1303               	bcf	3,6	;RP1=0, select bank0
  6403  0771  1C60               	btfss	___wmul@multiplier,0
  6404  0772  2F79               	goto	l967
  6405  0773  0862               	movf	___wmul@multiplicand,w
  6406  0774  07F4               	addwf	___wmul@product,f
  6407  0775  1803               	skipnc
  6408  0776  0AF5               	incf	___wmul@product+1,f
  6409  0777  0863               	movf	___wmul@multiplicand+1,w
  6410  0778  07F5               	addwf	___wmul@product+1,f
  6411  0779                     l967:	
  6412  0779  3001               	movlw	1
  6413  077A                     u3825:	
  6414  077A  1003               	clrc
  6415  077B  0DE2               	rlf	___wmul@multiplicand,f
  6416  077C  0DE3               	rlf	___wmul@multiplicand+1,f
  6417  077D  3EFF               	addlw	-1
  6418  077E  1D03               	skipz
  6419  077F  2F7A               	goto	u3825
  6420  0780  3001               	movlw	1
  6421  0781                     u3835:	
  6422  0781  1003               	clrc
  6423  0782  0CE1               	rrf	___wmul@multiplier+1,f
  6424  0783  0CE0               	rrf	___wmul@multiplier,f
  6425  0784  3EFF               	addlw	-1
  6426  0785  1D03               	skipz
  6427  0786  2F81               	goto	u3835
  6428  0787  0861               	movf	___wmul@multiplier+1,w
  6429  0788  0460               	iorwf	___wmul@multiplier,w
  6430  0789  1D03               	skipz
  6431  078A  2F6F               	goto	l3524
  6432  078B  0875               	movf	___wmul@product+1,w
  6433  078C  01E1               	clrf	?___wmul+1
  6434  078D  07E1               	addwf	?___wmul+1,f
  6435  078E  0874               	movf	___wmul@product,w
  6436  078F  01E0               	clrf	?___wmul
  6437  0790  07E0               	addwf	?___wmul,f
  6438  0791  0008               	return
  6439  0792                     __end_of___wmul:	
  6440                           
  6441                           	psect	text40
  6442  0792                     __ptext40:	
  6443 ;; *************** function ___lbdiv *****************
  6444 ;; Defined at:
  6445 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;  dividend        1    wreg     unsigned char 
  6448 ;;  divisor         1    4[COMMON] unsigned char 
  6449 ;; Auto vars:     Size  Location     Type
  6450 ;;  dividend        1    0[BANK0 ] unsigned char 
  6451 ;;  quotient        1    2[BANK0 ] unsigned char 
  6452 ;;  counter         1    1[BANK0 ] unsigned char 
  6453 ;; Return value:  Size  Location     Type
  6454 ;;                  1    wreg      unsigned char 
  6455 ;; Registers used:
  6456 ;;		wreg, status,2, status,0
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6462 ;;      Params:         1       0       0       0
  6463 ;;      Locals:         0       3       0       0
  6464 ;;      Temps:          1       0       0       0
  6465 ;;      Totals:         2       3       0       0
  6466 ;;Total ram usage:        5 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:    2
  6469 ;; This function calls:
  6470 ;;		Nothing
  6471 ;; This function is called by:
  6472 ;;		_Load_Main
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           
  6477                           ;psect for function ___lbdiv
  6478  0792                     ___lbdiv:	
  6479                           
  6480                           ;incstack = 0
  6481                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  6482                           ;___lbdiv@dividend stored from wreg
  6483  0792  1283               	bcf	3,5	;RP0=0, select bank0
  6484  0793  1303               	bcf	3,6	;RP1=0, select bank0
  6485  0794  00E0               	movwf	___lbdiv@dividend
  6486  0795  01E2               	clrf	___lbdiv@quotient
  6487  0796  0874               	movf	___lbdiv@divisor,w
  6488  0797  1903               	btfsc	3,2
  6489  0798  2FB3               	goto	l3556
  6490  0799  01E1               	clrf	___lbdiv@counter
  6491  079A  0AE1               	incf	___lbdiv@counter,f
  6492  079B                     l3544:	
  6493  079B  1BF4               	btfsc	___lbdiv@divisor,7
  6494  079C  2FA4               	goto	l3546
  6495  079D  1003               	clrc
  6496  079E  0DF4               	rlf	___lbdiv@divisor,f
  6497  079F  3001               	movlw	1
  6498  07A0  00F5               	movwf	??___lbdiv
  6499  07A1  0875               	movf	??___lbdiv,w
  6500  07A2  07E1               	addwf	___lbdiv@counter,f
  6501  07A3  2F9B               	goto	l3544
  6502  07A4                     l3546:	
  6503  07A4  1003               	clrc
  6504  07A5  0DE2               	rlf	___lbdiv@quotient,f
  6505  07A6  0874               	movf	___lbdiv@divisor,w
  6506  07A7  0260               	subwf	___lbdiv@dividend,w
  6507  07A8  1C03               	skipc
  6508  07A9  2FAE               	goto	L18
  6509  07AA  0874               	movf	___lbdiv@divisor,w
  6510  07AB  02E0               	subwf	___lbdiv@dividend,f
  6511  07AC  1462               	bsf	___lbdiv@quotient,0
  6512  07AD  1003               	clrc
  6513  07AE                     L18:	
  6514  07AE  0CF4               	rrf	___lbdiv@divisor,f
  6515  07AF  3001               	movlw	1
  6516  07B0  02E1               	subwf	___lbdiv@counter,f
  6517  07B1  1D03               	btfss	3,2
  6518  07B2  2FA4               	goto	l3546
  6519  07B3                     l3556:	
  6520  07B3  0862               	movf	___lbdiv@quotient,w
  6521  07B4  0008               	return
  6522  07B5                     __end_of___lbdiv:	
  6523                           
  6524                           	psect	text41
  6525  0E6B                     __ptext41:	
  6526 ;; *************** function _Load_Initialization *****************
  6527 ;; Defined at:
  6528 ;;		line 9 in file "../src/OverLoad_B1.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;		None
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;		None
  6533 ;; Return value:  Size  Location     Type
  6534 ;;		None               void
  6535 ;; Registers used:
  6536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 0/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6542 ;;      Params:         0       0       0       0
  6543 ;;      Locals:         0       0       0       0
  6544 ;;      Temps:          0       0       0       0
  6545 ;;      Totals:         0       0       0       0
  6546 ;;Total ram usage:        0 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:    3
  6549 ;; This function calls:
  6550 ;;		_setLoad_AH_AL_Restore
  6551 ;; This function is called by:
  6552 ;;		_main
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556                           
  6557                           ;psect for function _Load_Initialization
  6558  0E6B                     _Load_Initialization:	
  6559                           
  6560                           ;OverLoad_B1.c: 10: Load1.Safe = 1;
  6561                           
  6562                           ;incstack = 0
  6563                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6564  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  6565  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  6566  0E6D  15AD               	bsf	_Load1,3
  6567                           
  6568                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6569  0E6E  158A  2777         	fcall	_setLoad_AH_AL_Restore
  6570  0E70  0008               	return
  6571  0E71                     __end_of_Load_Initialization:	
  6572                           
  6573                           	psect	text42
  6574  0F77                     __ptext42:	
  6575 ;; *************** function _setLoad_AH_AL_Restore *****************
  6576 ;; Defined at:
  6577 ;;		line 319 in file "../src/OverLoad_B1.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;		None
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;  i               1    5[COMMON] unsigned char 
  6582 ;; Return value:  Size  Location     Type
  6583 ;;		None               void
  6584 ;; Registers used:
  6585 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6591 ;;      Params:         0       0       0       0
  6592 ;;      Locals:         1       0       0       0
  6593 ;;      Temps:          1       0       0       0
  6594 ;;      Totals:         2       0       0       0
  6595 ;;Total ram usage:        2 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    2
  6598 ;; This function calls:
  6599 ;;		Nothing
  6600 ;; This function is called by:
  6601 ;;		_Load_Initialization
  6602 ;;		_Load_Main
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           
  6607                           ;psect for function _setLoad_AH_AL_Restore
  6608  0F77                     _setLoad_AH_AL_Restore:	
  6609                           
  6610                           ;OverLoad_B1.c: 320: char i;
  6611                           ;OverLoad_B1.c: 321: for (i = 0; i < 5; i++) {
  6612                           
  6613                           ;incstack = 0
  6614                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6615  0F77  01F5               	clrf	setLoad_AH_AL_Restore@i
  6616  0F78                     L19:	
  6617  0F78  3005               	movlw	5
  6618  0F79  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6619  0F7A  1803               	btfsc	3,0
  6620  0F7B  0008               	return
  6621                           
  6622                           ;OverLoad_B1.c: 322: Load1.AH[i] = 0;
  6623  0F7C  0875               	movf	setLoad_AH_AL_Restore@i,w
  6624  0F7D  3E34               	addlw	(_Load1+7)& (0+255)
  6625  0F7E  0084               	movwf	4
  6626  0F7F  1383               	bcf	3,7	;select IRP bank0
  6627  0F80  0180               	clrf	0
  6628                           
  6629                           ;OverLoad_B1.c: 323: Load1.AL[i] = 0xff;
  6630  0F81  30FF               	movlw	255
  6631  0F82  00F4               	movwf	??_setLoad_AH_AL_Restore
  6632  0F83  0875               	movf	setLoad_AH_AL_Restore@i,w
  6633  0F84  3E39               	addlw	(_Load1+12)& (0+255)
  6634  0F85  0084               	movwf	4
  6635  0F86  0874               	movf	??_setLoad_AH_AL_Restore,w
  6636  0F87  0080               	movwf	0
  6637  0F88  3001               	movlw	1
  6638  0F89  00F4               	movwf	??_setLoad_AH_AL_Restore
  6639  0F8A  0874               	movf	??_setLoad_AH_AL_Restore,w
  6640  0F8B  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6641  0F8C  2F78               	goto	L19
  6642  0F8D                     __end_of_setLoad_AH_AL_Restore:	
  6643                           
  6644                           	psect	text43
  6645  0EB3                     __ptext43:	
  6646 ;; *************** function _LED_Main *****************
  6647 ;; Defined at:
  6648 ;;		line 47 in file "../src/LED_B1.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;		None
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;		None
  6653 ;; Return value:  Size  Location     Type
  6654 ;;		None               void
  6655 ;; Registers used:
  6656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6662 ;;      Params:         0       0       0       0
  6663 ;;      Locals:         0       0       0       0
  6664 ;;      Temps:          0       0       0       0
  6665 ;;      Totals:         0       0       0       0
  6666 ;;Total ram usage:        0 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    4
  6669 ;; This function calls:
  6670 ;;		_setLED_Main
  6671 ;; This function is called by:
  6672 ;;		_main
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           
  6677                           ;psect for function _LED_Main
  6678  0EB3                     _LED_Main:	
  6679                           
  6680                           ;LED_B1.c: 49: setLED_Main(1);
  6681                           
  6682                           ;incstack = 0
  6683                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6684  0EB3  3001               	movlw	1
  6685  0EB4  118A  26E2  158A   	fcall	_setLED_Main
  6686                           
  6687                           ;LED_B1.c: 52: setLED_Main(2);
  6688  0EB7  3002               	movlw	2
  6689  0EB8  118A  26E2  158A   	fcall	_setLED_Main
  6690                           
  6691                           ;LED_B1.c: 58: setLED_Main(99);
  6692  0EBB  3063               	movlw	99
  6693  0EBC  118A  26E2         	fcall	_setLED_Main
  6694  0EBE  0008               	return
  6695  0EBF                     __end_of_LED_Main:	
  6696                           
  6697                           	psect	text44
  6698  06E2                     __ptext44:	
  6699 ;; *************** function _setLED_Main *****************
  6700 ;; Defined at:
  6701 ;;		line 192 in file "../src/LED_B1.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;  led             1    wreg     unsigned char 
  6704 ;; Auto vars:     Size  Location     Type
  6705 ;;  led             1    6[COMMON] unsigned char 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;		None               void
  6708 ;; Registers used:
  6709 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6715 ;;      Params:         0       0       0       0
  6716 ;;      Locals:         1       0       0       0
  6717 ;;      Temps:          0       2       0       0
  6718 ;;      Totals:         1       2       0       0
  6719 ;;Total ram usage:        3 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:    3
  6722 ;; This function calls:
  6723 ;;		_LedPointSelect
  6724 ;; This function is called by:
  6725 ;;		_LED_Main
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           
  6730                           ;psect for function _setLED_Main
  6731  06E2                     _setLED_Main:	
  6732                           
  6733                           ;incstack = 0
  6734                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6735                           ;setLED_Main@led stored from wreg
  6736  06E2  00F6               	movwf	setLED_Main@led
  6737                           
  6738                           ;LED_B1.c: 193: LedPointSelect(led);
  6739  06E3  0876               	movf	setLED_Main@led,w
  6740  06E4  158A  278D  118A   	fcall	_LedPointSelect
  6741                           
  6742                           ;LED_B1.c: 194: if (LED->GO == 1) {
  6743  06E7  0879               	movf	_LED,w
  6744  06E8  0084               	movwf	4
  6745  06E9  1383               	bcf	3,7	;select IRP bank0
  6746  06EA  1C80               	btfss	0,1
  6747  06EB  0008               	return
  6748                           
  6749                           ;LED_B1.c: 195: LED->Time++;
  6750  06EC  0A79               	incf	_LED,w
  6751  06ED  0084               	movwf	4
  6752  06EE  3001               	movlw	1
  6753  06EF  0780               	addwf	0,f
  6754  06F0  0A84               	incf	4,f
  6755  06F1  1803               	skipnc
  6756  06F2  0A80               	incf	0,f
  6757                           
  6758                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  6759  06F3  0A79               	incf	_LED,w
  6760  06F4  0084               	movwf	4
  6761  06F5  0800               	movf	0,w
  6762  06F6  1283               	bcf	3,5	;RP0=0, select bank0
  6763  06F7  1303               	bcf	3,6	;RP1=0, select bank0
  6764  06F8  00E0               	movwf	??_setLED_Main
  6765  06F9  0A84               	incf	4,f
  6766  06FA  0800               	movf	0,w
  6767  06FB  00E1               	movwf	??_setLED_Main+1
  6768  06FC  3000               	movlw	0
  6769  06FD  0261               	subwf	??_setLED_Main+1,w
  6770  06FE  3032               	movlw	50
  6771  06FF  1903               	skipnz
  6772  0700  0260               	subwf	??_setLED_Main,w
  6773  0701  1C03               	skipc
  6774  0702  0008               	return
  6775                           
  6776                           ;LED_B1.c: 197: LED->Time = 0;
  6777  0703  0A79               	incf	_LED,w
  6778  0704  0084               	movwf	4
  6779  0705  0180               	clrf	0
  6780  0706  0A84               	incf	4,f
  6781  0707  0180               	clrf	0
  6782                           
  6783                           ;LED_B1.c: 199: if (led == 1) {
  6784  0708  0876               	movf	setLED_Main@led,w
  6785  0709  3A01               	xorlw	1
  6786  070A  1D03               	skipz
  6787  070B  2F0F               	goto	l3418
  6788                           
  6789                           ;LED_B1.c: 200: RB4 = RB4 == 1 ? 0 : 1;
  6790  070C  3010               	movlw	16
  6791  070D  0686               	xorwf	6,f
  6792                           
  6793                           ;LED_B1.c: 201: }
  6794  070E  0008               	return
  6795  070F                     l3418:	
  6796                           
  6797                           ;LED_B1.c: 204: else if (led == 2) {
  6798  070F  0876               	movf	setLED_Main@led,w
  6799  0710  3A02               	xorlw	2
  6800  0711  1D03               	skipz
  6801  0712  2F16               	goto	l3422
  6802                           
  6803                           ;LED_B1.c: 205: RB5 = RB5 == 1 ? 0 : 1;
  6804  0713  3020               	movlw	32
  6805  0714  0686               	xorwf	6,f
  6806                           
  6807                           ;LED_B1.c: 206: }
  6808  0715  0008               	return
  6809  0716                     l3422:	
  6810                           
  6811                           ;LED_B1.c: 214: else if (led == 99) {
  6812  0716  0876               	movf	setLED_Main@led,w
  6813  0717  3A63               	xorlw	99
  6814  0718  1D03               	skipz
  6815  0719  0008               	return
  6816                           
  6817                           ;LED_B1.c: 215: RB3 = RB3 == 1 ? 0 : 1;
  6818  071A  3008               	movlw	8
  6819  071B  0686               	xorwf	6,f
  6820  071C  0008               	return
  6821  071D                     __end_of_setLED_Main:	
  6822                           
  6823                           	psect	text45
  6824  0EA7                     __ptext45:	
  6825 ;; *************** function _LED_Initialization *****************
  6826 ;; Defined at:
  6827 ;;		line 31 in file "../src/LED_B1.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;		None
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;		None
  6832 ;; Return value:  Size  Location     Type
  6833 ;;		None               void
  6834 ;; Registers used:
  6835 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6841 ;;      Params:         0       0       0       0
  6842 ;;      Locals:         0       0       0       0
  6843 ;;      Temps:          0       0       0       0
  6844 ;;      Totals:         0       0       0       0
  6845 ;;Total ram usage:        0 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    5
  6848 ;; This function calls:
  6849 ;;		_setLED_Initialization
  6850 ;; This function is called by:
  6851 ;;		_main
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           
  6856                           ;psect for function _LED_Initialization
  6857  0EA7                     _LED_Initialization:	
  6858                           
  6859                           ;LED_B1.c: 33: setLED_Initialization(1);
  6860                           
  6861                           ;incstack = 0
  6862                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6863  0EA7  3001               	movlw	1
  6864  0EA8  158A  2727  158A   	fcall	_setLED_Initialization
  6865                           
  6866                           ;LED_B1.c: 36: setLED_Initialization(2);
  6867  0EAB  3002               	movlw	2
  6868  0EAC  158A  2727  158A   	fcall	_setLED_Initialization
  6869                           
  6870                           ;LED_B1.c: 42: setLED_Initialization(99);
  6871  0EAF  3063               	movlw	99
  6872  0EB0  158A  2727         	fcall	_setLED_Initialization
  6873  0EB2  0008               	return
  6874  0EB3                     __end_of_LED_Initialization:	
  6875                           
  6876                           	psect	text46
  6877  0F27                     __ptext46:	
  6878 ;; *************** function _setLED_Initialization *****************
  6879 ;; Defined at:
  6880 ;;		line 63 in file "../src/LED_B1.c"
  6881 ;; Parameters:    Size  Location     Type
  6882 ;;  led             1    wreg     unsigned char 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  led             1    1[BANK0 ] unsigned char 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;		None               void
  6887 ;; Registers used:
  6888 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6894 ;;      Params:         0       0       0       0
  6895 ;;      Locals:         0       1       0       0
  6896 ;;      Temps:          0       0       0       0
  6897 ;;      Totals:         0       1       0       0
  6898 ;;Total ram usage:        1 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    4
  6901 ;; This function calls:
  6902 ;;		_LedPointSelect
  6903 ;;		_setLED
  6904 ;; This function is called by:
  6905 ;;		_LED_Initialization
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           
  6910                           ;psect for function _setLED_Initialization
  6911  0F27                     _setLED_Initialization:	
  6912                           
  6913                           ;incstack = 0
  6914                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6915                           ;setLED_Initialization@led stored from wreg
  6916  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  6917  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  6918  0F29  00E1               	movwf	setLED_Initialization@led
  6919                           
  6920                           ;LED_B1.c: 64: LedPointSelect(led);
  6921  0F2A  0861               	movf	setLED_Initialization@led,w
  6922  0F2B  158A  278D  158A   	fcall	_LedPointSelect
  6923                           
  6924                           ;LED_B1.c: 65: LED->Enable = 1;
  6925  0F2E  0879               	movf	_LED,w
  6926  0F2F  0084               	movwf	4
  6927  0F30  1383               	bcf	3,7	;select IRP bank0
  6928  0F31  1400               	bsf	0,0
  6929                           
  6930                           ;LED_B1.c: 66: setLED(led, 0);
  6931  0F32  01F6               	clrf	setLED@command
  6932  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  6933  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  6934  0F35  0861               	movf	setLED_Initialization@led,w
  6935  0F36  118A  24F4         	fcall	_setLED
  6936  0F38  0008               	return
  6937  0F39                     __end_of_setLED_Initialization:	
  6938                           
  6939                           	psect	text47
  6940  04F4                     __ptext47:	
  6941 ;; *************** function _setLED *****************
  6942 ;; Defined at:
  6943 ;;		line 70 in file "../src/LED_B1.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;  led             1    wreg     unsigned char 
  6946 ;;  command         1    6[COMMON] unsigned char 
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;  led             1    0[BANK0 ] unsigned char 
  6949 ;; Return value:  Size  Location     Type
  6950 ;;		None               void
  6951 ;; Registers used:
  6952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6958 ;;      Params:         1       0       0       0
  6959 ;;      Locals:         0       1       0       0
  6960 ;;      Temps:          0       0       0       0
  6961 ;;      Totals:         1       1       0       0
  6962 ;;Total ram usage:        2 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; Hardware stack levels required when called:    3
  6965 ;; This function calls:
  6966 ;;		_LedPointSelect
  6967 ;; This function is called by:
  6968 ;;		_setLED_Initialization
  6969 ;;		_setLoad_Exceptions
  6970 ;;		_setOverTemp_Exceptions
  6971 ;;		_PIR_Main
  6972 ;;		_setSYSC_Main
  6973 ;; This function uses a non-reentrant model
  6974 ;;
  6975                           
  6976                           
  6977                           ;psect for function _setLED
  6978  04F4                     _setLED:	
  6979                           
  6980                           ;incstack = 0
  6981                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6982                           ;setLED@led stored from wreg
  6983  04F4  1283               	bcf	3,5	;RP0=0, select bank0
  6984  04F5  1303               	bcf	3,6	;RP1=0, select bank0
  6985  04F6  00E0               	movwf	setLED@led
  6986                           
  6987                           ;LED_B1.c: 71: LedPointSelect(led);
  6988  04F7  0860               	movf	setLED@led,w
  6989  04F8  158A  278D  118A   	fcall	_LedPointSelect
  6990                           
  6991                           ;LED_B1.c: 72: if (command == 0) {
  6992  04FB  08F6               	movf	setLED@command,f
  6993  04FC  1D03               	skipz
  6994  04FD  2D12               	goto	l3310
  6995                           
  6996                           ;LED_B1.c: 74: if (led == 1) {
  6997  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  6998  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  6999  0500  0860               	movf	setLED@led,w
  7000  0501  3A01               	xorlw	1
  7001  0502  1D03               	skipz
  7002  0503  2D06               	goto	l3302
  7003                           
  7004                           ;LED_B1.c: 78: RB4 = 1;
  7005  0504  1606               	bsf	6,4	;volatile
  7006                           
  7007                           ;LED_B1.c: 80: }
  7008  0505  0008               	return
  7009  0506                     l3302:	
  7010                           
  7011                           ;LED_B1.c: 83: else if (led == 2) {
  7012  0506  0860               	movf	setLED@led,w
  7013  0507  3A02               	xorlw	2
  7014  0508  1D03               	skipz
  7015  0509  2D0C               	goto	l3306
  7016                           
  7017                           ;LED_B1.c: 87: RB5 = 1;
  7018  050A  1686               	bsf	6,5	;volatile
  7019                           
  7020                           ;LED_B1.c: 89: }
  7021  050B  0008               	return
  7022  050C                     l3306:	
  7023                           
  7024                           ;LED_B1.c: 101: else if (led == 99) {
  7025  050C  0860               	movf	setLED@led,w
  7026  050D  3A63               	xorlw	99
  7027  050E  1D03               	skipz
  7028  050F  0008               	return
  7029                           
  7030                           ;LED_B1.c: 105: RB3 = 1;
  7031  0510  1586               	bsf	6,3	;volatile
  7032                           
  7033                           ;LED_B1.c: 107: }
  7034                           ;LED_B1.c: 109: } else if (command == 1) {
  7035  0511  0008               	return
  7036  0512                     l3310:	
  7037  0512  0876               	movf	setLED@command,w
  7038  0513  3A01               	xorlw	1
  7039  0514  1D03               	skipz
  7040  0515  2D2A               	goto	l3324
  7041                           
  7042                           ;LED_B1.c: 111: if (led == 1) {
  7043  0516  1283               	bcf	3,5	;RP0=0, select bank0
  7044  0517  1303               	bcf	3,6	;RP1=0, select bank0
  7045  0518  0860               	movf	setLED@led,w
  7046  0519  3A01               	xorlw	1
  7047  051A  1D03               	skipz
  7048  051B  2D1E               	goto	l3316
  7049                           
  7050                           ;LED_B1.c: 115: RB4 = 0;
  7051  051C  1206               	bcf	6,4	;volatile
  7052                           
  7053                           ;LED_B1.c: 117: }
  7054  051D  0008               	return
  7055  051E                     l3316:	
  7056                           
  7057                           ;LED_B1.c: 120: else if (led == 2) {
  7058  051E  0860               	movf	setLED@led,w
  7059  051F  3A02               	xorlw	2
  7060  0520  1D03               	skipz
  7061  0521  2D24               	goto	l3320
  7062                           
  7063                           ;LED_B1.c: 124: RB5 = 0;
  7064  0522  1286               	bcf	6,5	;volatile
  7065                           
  7066                           ;LED_B1.c: 126: }
  7067  0523  0008               	return
  7068  0524                     l3320:	
  7069                           
  7070                           ;LED_B1.c: 138: else if (led == 99) {
  7071  0524  0860               	movf	setLED@led,w
  7072  0525  3A63               	xorlw	99
  7073  0526  1D03               	skipz
  7074  0527  0008               	return
  7075                           
  7076                           ;LED_B1.c: 142: RB3 = 0;
  7077  0528  1186               	bcf	6,3	;volatile
  7078                           
  7079                           ;LED_B1.c: 144: }
  7080                           ;LED_B1.c: 146: } else if (command == 10) {
  7081  0529  0008               	return
  7082  052A                     l3324:	
  7083  052A  0876               	movf	setLED@command,w
  7084  052B  3A0A               	xorlw	10
  7085  052C  1D03               	skipz
  7086  052D  2D4B               	goto	l3342
  7087                           
  7088                           ;LED_B1.c: 147: LED->GO = 0;
  7089  052E  0879               	movf	_LED,w
  7090  052F  0084               	movwf	4
  7091  0530  1383               	bcf	3,7	;select IRP bank0
  7092  0531  1080               	bcf	0,1
  7093                           
  7094                           ;LED_B1.c: 148: LED->Time = 0;
  7095  0532  0A79               	incf	_LED,w
  7096  0533  0084               	movwf	4
  7097  0534  0180               	clrf	0
  7098  0535  0A84               	incf	4,f
  7099  0536  0180               	clrf	0
  7100                           
  7101                           ;LED_B1.c: 150: if (led == 1) {
  7102  0537  1283               	bcf	3,5	;RP0=0, select bank0
  7103  0538  1303               	bcf	3,6	;RP1=0, select bank0
  7104  0539  0860               	movf	setLED@led,w
  7105  053A  3A01               	xorlw	1
  7106  053B  1D03               	skipz
  7107  053C  2D3F               	goto	l3334
  7108                           
  7109                           ;LED_B1.c: 154: RB4 = 1;
  7110  053D  1606               	bsf	6,4	;volatile
  7111                           
  7112                           ;LED_B1.c: 156: }
  7113  053E  0008               	return
  7114  053F                     l3334:	
  7115                           
  7116                           ;LED_B1.c: 159: else if (led == 2) {
  7117  053F  0860               	movf	setLED@led,w
  7118  0540  3A02               	xorlw	2
  7119  0541  1D03               	skipz
  7120  0542  2D45               	goto	l3338
  7121                           
  7122                           ;LED_B1.c: 163: RB5 = 1;
  7123  0543  1686               	bsf	6,5	;volatile
  7124                           
  7125                           ;LED_B1.c: 165: }
  7126  0544  0008               	return
  7127  0545                     l3338:	
  7128                           
  7129                           ;LED_B1.c: 177: else if (led == 99) {
  7130  0545  0860               	movf	setLED@led,w
  7131  0546  3A63               	xorlw	99
  7132  0547  1D03               	skipz
  7133  0548  0008               	return
  7134                           
  7135                           ;LED_B1.c: 181: RB3 = 1;
  7136  0549  1586               	bsf	6,3	;volatile
  7137                           
  7138                           ;LED_B1.c: 183: }
  7139                           ;LED_B1.c: 185: } else if (command == 11) {
  7140  054A  0008               	return
  7141  054B                     l3342:	
  7142  054B  0876               	movf	setLED@command,w
  7143  054C  3A0B               	xorlw	11
  7144  054D  1D03               	skipz
  7145  054E  0008               	return
  7146                           
  7147                           ;LED_B1.c: 186: LED->GO = 1;
  7148  054F  0879               	movf	_LED,w
  7149  0550  0084               	movwf	4
  7150  0551  1383               	bcf	3,7	;select IRP bank0
  7151  0552  1480               	bsf	0,1
  7152  0553  0008               	return
  7153  0554                     __end_of_setLED:	
  7154                           
  7155                           	psect	text48
  7156  0F8D                     __ptext48:	
  7157 ;; *************** function _LedPointSelect *****************
  7158 ;; Defined at:
  7159 ;;		line 7 in file "../src/LED_B1.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;  led             1    wreg     unsigned char 
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;  led             1    5[COMMON] unsigned char 
  7164 ;; Return value:  Size  Location     Type
  7165 ;;		None               void
  7166 ;; Registers used:
  7167 ;;		wreg
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7173 ;;      Params:         0       0       0       0
  7174 ;;      Locals:         1       0       0       0
  7175 ;;      Temps:          1       0       0       0
  7176 ;;      Totals:         2       0       0       0
  7177 ;;Total ram usage:        2 bytes
  7178 ;; Hardware stack levels used:    1
  7179 ;; Hardware stack levels required when called:    2
  7180 ;; This function calls:
  7181 ;;		Nothing
  7182 ;; This function is called by:
  7183 ;;		_setLED_Initialization
  7184 ;;		_setLED
  7185 ;;		_setLED_Main
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           
  7190                           ;psect for function _LedPointSelect
  7191  0F8D                     _LedPointSelect:	
  7192                           
  7193                           ;incstack = 0
  7194                           ; Regs used in _LedPointSelect: [wreg]
  7195                           ;LedPointSelect@led stored from wreg
  7196  0F8D  00F5               	movwf	LedPointSelect@led
  7197                           
  7198                           ;LED_B1.c: 9: if (led == 1) {
  7199  0F8E  0875               	movf	LedPointSelect@led,w
  7200  0F8F  3A01               	xorlw	1
  7201  0F90  1D03               	skipz
  7202  0F91  2F97               	goto	l3286
  7203                           
  7204                           ;LED_B1.c: 10: LED = &VarLED1;
  7205  0F92  30D7               	movlw	_VarLED1& (0+255)
  7206  0F93  00F4               	movwf	??_LedPointSelect
  7207  0F94  0874               	movf	??_LedPointSelect,w
  7208  0F95  00F9               	movwf	_LED
  7209                           
  7210                           ;LED_B1.c: 11: }
  7211  0F96  0008               	return
  7212  0F97                     l3286:	
  7213                           
  7214                           ;LED_B1.c: 14: else if (led == 2) {
  7215  0F97  0875               	movf	LedPointSelect@led,w
  7216  0F98  3A02               	xorlw	2
  7217  0F99  1D03               	skipz
  7218  0F9A  2FA0               	goto	l3290
  7219                           
  7220                           ;LED_B1.c: 15: LED = &VarLED2;
  7221  0F9B  30DB               	movlw	_VarLED2& (0+255)
  7222  0F9C  00F4               	movwf	??_LedPointSelect
  7223  0F9D  0874               	movf	??_LedPointSelect,w
  7224  0F9E  00F9               	movwf	_LED
  7225                           
  7226                           ;LED_B1.c: 16: }
  7227  0F9F  0008               	return
  7228  0FA0                     l3290:	
  7229                           
  7230                           ;LED_B1.c: 24: else if (led == 99) {
  7231  0FA0  0875               	movf	LedPointSelect@led,w
  7232  0FA1  3A63               	xorlw	99
  7233  0FA2  1D03               	skipz
  7234  0FA3  0008               	return
  7235                           
  7236                           ;LED_B1.c: 25: LED = &VarErrLED;
  7237  0FA4  305C               	movlw	_VarErrLED& (0+255)
  7238  0FA5  00F4               	movwf	??_LedPointSelect
  7239  0FA6  0874               	movf	??_LedPointSelect,w
  7240  0FA7  00F9               	movwf	_LED
  7241  0FA8  0008               	return
  7242  0FA9                     __end_of_LedPointSelect:	
  7243                           
  7244                           	psect	text49
  7245  0ECD                     __ptext49:	
  7246 ;; *************** function _DetectSYSC_Signal *****************
  7247 ;; Defined at:
  7248 ;;		line 55 in file "../src/SYSC_B1.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;		None
  7251 ;; Auto vars:     Size  Location     Type
  7252 ;;		None
  7253 ;; Return value:  Size  Location     Type
  7254 ;;		None               void
  7255 ;; Registers used:
  7256 ;;		status,2
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7262 ;;      Params:         0       0       0       0
  7263 ;;      Locals:         0       0       0       0
  7264 ;;      Temps:          0       0       0       0
  7265 ;;      Totals:         0       0       0       0
  7266 ;;Total ram usage:        0 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; Hardware stack levels required when called:    2
  7269 ;; This function calls:
  7270 ;;		Nothing
  7271 ;; This function is called by:
  7272 ;;		_main
  7273 ;; This function uses a non-reentrant model
  7274 ;;
  7275                           
  7276                           
  7277                           ;psect for function _DetectSYSC_Signal
  7278  0ECD                     _DetectSYSC_Signal:	
  7279                           
  7280                           ;SYSC_B1.c: 56: if (SYSC.Signal == 0) {
  7281                           
  7282                           ;incstack = 0
  7283                           ; Regs used in _DetectSYSC_Signal: [status,2]
  7284  0ECD  1283               	bcf	3,5	;RP0=0, select bank0
  7285  0ECE  1303               	bcf	3,6	;RP1=0, select bank0
  7286  0ECF  19A0               	btfsc	_SYSC,3
  7287  0ED0  2ED7               	goto	l887
  7288                           
  7289                           ;SYSC_B1.c: 57: if (RA5 == 1) {
  7290  0ED1  1E85               	btfss	5,5	;volatile
  7291  0ED2  0008               	return
  7292                           
  7293                           ;SYSC_B1.c: 58: SYSC.Signal = 1;
  7294  0ED3  15A0               	bsf	_SYSC,3
  7295                           
  7296                           ;SYSC_B1.c: 59: SYSC.Timer = 0;
  7297  0ED4  01A1               	clrf	_SYSC+1
  7298  0ED5  01A2               	clrf	_SYSC+2
  7299                           
  7300                           ;SYSC_B1.c: 60: }
  7301                           ;SYSC_B1.c: 61: } else {
  7302  0ED6  0008               	return
  7303  0ED7                     l887:	
  7304                           
  7305                           ;SYSC_B1.c: 62: if (RA5 == 0) {
  7306  0ED7  1A85               	btfsc	5,5	;volatile
  7307  0ED8  0008               	return
  7308                           
  7309                           ;SYSC_B1.c: 63: SYSC.Signal = 0;
  7310  0ED9  11A0               	bcf	_SYSC,3
  7311  0EDA  0008               	return
  7312  0EDB                     __end_of_DetectSYSC_Signal:	
  7313                           
  7314                           	psect	text50
  7315  065F                     __ptext50:	
  7316 ;; *************** function _CDS_Main *****************
  7317 ;; Defined at:
  7318 ;;		line 11 in file "../src/CDS_B1.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;		None
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;		None
  7323 ;; Return value:  Size  Location     Type
  7324 ;;		None               void
  7325 ;; Registers used:
  7326 ;;		wreg, status,2, status,0, pclath, cstack
  7327 ;; Tracked objects:
  7328 ;;		On entry : 0/0
  7329 ;;		On exit  : 0/0
  7330 ;;		Unchanged: 0/0
  7331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7332 ;;      Params:         0       0       0       0
  7333 ;;      Locals:         0       0       0       0
  7334 ;;      Temps:          0       3       0       0
  7335 ;;      Totals:         0       3       0       0
  7336 ;;Total ram usage:        3 bytes
  7337 ;; Hardware stack levels used:    1
  7338 ;; Hardware stack levels required when called:    3
  7339 ;; This function calls:
  7340 ;;		_getMain_AD_Safe
  7341 ;; This function is called by:
  7342 ;;		_main
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346                           
  7347                           ;psect for function _CDS_Main
  7348  065F                     _CDS_Main:	
  7349                           
  7350                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  7351                           
  7352                           ;incstack = 0
  7353                           ; Regs used in _CDS_Main: [wreg+status,2+status,0+pclath+cstack]
  7354  065F  1283               	bcf	3,5	;RP0=0, select bank0
  7355  0660  1303               	bcf	3,6	;RP1=0, select bank0
  7356  0661  1C25               	btfss	__CDS,0
  7357  0662  0008               	return
  7358                           
  7359                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  7360  0663  18A5               	btfsc	__CDS,1
  7361  0664  2E81               	goto	l83
  7362                           
  7363                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  7364  0665  19A5               	btfsc	__CDS,3
  7365  0666  0008               	return
  7366                           
  7367                           ;CDS_B1.c: 16: _CDS.Time++;
  7368  0667  3001               	movlw	1
  7369  0668  00E0               	movwf	??_CDS_Main
  7370  0669  0860               	movf	??_CDS_Main,w
  7371  066A  07A6               	addwf	__CDS+1,f
  7372                           
  7373                           ;CDS_B1.c: 17: if (_CDS.Time >= 10)
  7374  066B  300A               	movlw	10
  7375  066C  0226               	subwf	__CDS+1,w
  7376  066D  1C03               	skipc
  7377  066E  0008               	return
  7378                           
  7379                           ;CDS_B1.c: 18: {
  7380                           ;CDS_B1.c: 19: if (getMain_AD_Safe() == 1) {
  7381  066F  158A  26BF  118A   	fcall	_getMain_AD_Safe
  7382  0672  3A01               	xorlw	1
  7383  0673  1D03               	skipz
  7384  0674  2E7A               	goto	l3602
  7385                           
  7386                           ;CDS_B1.c: 20: _CDS.Time = 0;
  7387  0675  1283               	bcf	3,5	;RP0=0, select bank0
  7388  0676  1303               	bcf	3,6	;RP1=0, select bank0
  7389  0677  01A6               	clrf	__CDS+1
  7390                           
  7391                           ;CDS_B1.c: 21: _CDS.ADtoGO = 1;
  7392  0678  15A5               	bsf	__CDS,3
  7393                           
  7394                           ;CDS_B1.c: 22: } else {
  7395  0679  0008               	return
  7396  067A                     l3602:	
  7397                           
  7398                           ;CDS_B1.c: 23: _CDS.Time = 10;
  7399  067A  300A               	movlw	10
  7400  067B  1283               	bcf	3,5	;RP0=0, select bank0
  7401  067C  1303               	bcf	3,6	;RP1=0, select bank0
  7402  067D  00E0               	movwf	??_CDS_Main
  7403  067E  0860               	movf	??_CDS_Main,w
  7404  067F  00A6               	movwf	__CDS+1
  7405                           
  7406                           ;CDS_B1.c: 24: }
  7407                           ;CDS_B1.c: 25: }
  7408                           ;CDS_B1.c: 26: }
  7409                           ;CDS_B1.c: 27: } else {
  7410  0680  0008               	return
  7411  0681                     l83:	
  7412                           
  7413                           ;CDS_B1.c: 28: if (_CDS.GO == 1) {
  7414  0681  1CA5               	btfss	__CDS,1
  7415  0682  0008               	return
  7416                           
  7417                           ;CDS_B1.c: 29: _CDS.GO = 0;
  7418  0683  10A5               	bcf	__CDS,1
  7419                           
  7420                           ;CDS_B1.c: 30: if (_CDS.Status == 0) {
  7421  0684  1A25               	btfsc	__CDS,4
  7422  0685  2E8C               	goto	l3610
  7423                           
  7424                           ;CDS_B1.c: 31: if (_CDS.SignalAD >= _CDS.VRAD) {
  7425  0686  0827               	movf	__CDS+2,w
  7426  0687  0228               	subwf	__CDS+3,w
  7427  0688  1C03               	skipc
  7428  0689  0008               	return
  7429                           
  7430                           ;CDS_B1.c: 32: _CDS.Status = 1;
  7431  068A  1625               	bsf	__CDS,4
  7432                           
  7433                           ;CDS_B1.c: 33: }
  7434                           ;CDS_B1.c: 34: } else {
  7435  068B  0008               	return
  7436  068C                     l3610:	
  7437                           
  7438                           ;CDS_B1.c: 35: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  7439  068C  0827               	movf	__CDS+2,w
  7440  068D  3E9C               	addlw	156
  7441  068E  00E0               	movwf	??_CDS_Main
  7442  068F  30FF               	movlw	255
  7443  0690  1803               	skipnc
  7444  0691  3000               	movlw	0
  7445  0692  00E1               	movwf	??_CDS_Main+1
  7446  0693  0861               	movf	??_CDS_Main+1,w
  7447  0694  3A80               	xorlw	128
  7448  0695  00E2               	movwf	??_CDS_Main+2
  7449  0696  3080               	movlw	128
  7450  0697  0262               	subwf	??_CDS_Main+2,w
  7451  0698  1D03               	skipz
  7452  0699  2E9C               	goto	u4045
  7453  069A  0828               	movf	__CDS+3,w
  7454  069B  0260               	subwf	??_CDS_Main,w
  7455  069C                     u4045:	
  7456  069C  1C03               	skipc
  7457  069D  0008               	return
  7458                           
  7459                           ;CDS_B1.c: 36: _CDS.Status = 0;
  7460  069E  1283               	bcf	3,5	;RP0=0, select bank0
  7461  069F  1303               	bcf	3,6	;RP1=0, select bank0
  7462  06A0  1225               	bcf	__CDS,4
  7463  06A1  0008               	return
  7464  06A2                     __end_of_CDS_Main:	
  7465                           
  7466                           	psect	text51
  7467  0EBF                     __ptext51:	
  7468 ;; *************** function _getMain_AD_Safe *****************
  7469 ;; Defined at:
  7470 ;;		line 301 in file "../src/Main_B1.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;		None
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;  result          1    4[COMMON] unsigned char 
  7475 ;; Return value:  Size  Location     Type
  7476 ;;                  1    wreg      unsigned char 
  7477 ;; Registers used:
  7478 ;;		wreg, status,2
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7484 ;;      Params:         0       0       0       0
  7485 ;;      Locals:         1       0       0       0
  7486 ;;      Temps:          0       0       0       0
  7487 ;;      Totals:         1       0       0       0
  7488 ;;Total ram usage:        1 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    2
  7491 ;; This function calls:
  7492 ;;		Nothing
  7493 ;; This function is called by:
  7494 ;;		_CDS_Main
  7495 ;;		_setTemp_Main
  7496 ;;		_PIR_Main
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           
  7501                           ;psect for function _getMain_AD_Safe
  7502  0EBF                     _getMain_AD_Safe:	
  7503                           
  7504                           ;Main_B1.c: 302: char result = 1;
  7505                           
  7506                           ;incstack = 0
  7507                           ; Regs used in _getMain_AD_Safe: [wreg+status,2]
  7508  0EBF  01F4               	clrf	getMain_AD_Safe@result
  7509  0EC0  0AF4               	incf	getMain_AD_Safe@result,f
  7510                           
  7511                           ;Main_B1.c: 308: if (result == 1) {
  7512  0EC1  0874               	movf	getMain_AD_Safe@result,w
  7513  0EC2  3A01               	xorlw	1
  7514  0EC3  1D03               	skipz
  7515  0EC4  2ECB               	goto	l2400
  7516                           
  7517                           ;Main_B1.c: 309: result = Load1.Safe == 1 ? 1 : 0;
  7518  0EC5  3000               	movlw	0
  7519  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  7520  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  7521  0EC8  19AD               	btfsc	_Load1,3
  7522  0EC9  3001               	movlw	1
  7523  0ECA  00F4               	movwf	getMain_AD_Safe@result
  7524  0ECB                     l2400:	
  7525                           
  7526                           ;Main_B1.c: 310: }
  7527                           ;Main_B1.c: 312: return result;
  7528  0ECB  0874               	movf	getMain_AD_Safe@result,w
  7529  0ECC  0008               	return
  7530  0ECD                     __end_of_getMain_AD_Safe:	
  7531                           
  7532                           	psect	text52
  7533  0E55                     __ptext52:	
  7534 ;; *************** function _CDS_Initialization *****************
  7535 ;; Defined at:
  7536 ;;		line 7 in file "../src/CDS_B1.c"
  7537 ;; Parameters:    Size  Location     Type
  7538 ;;		None
  7539 ;; Auto vars:     Size  Location     Type
  7540 ;;		None
  7541 ;; Return value:  Size  Location     Type
  7542 ;;		None               void
  7543 ;; Registers used:
  7544 ;;		None
  7545 ;; Tracked objects:
  7546 ;;		On entry : 0/0
  7547 ;;		On exit  : 0/0
  7548 ;;		Unchanged: 0/0
  7549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7550 ;;      Params:         0       0       0       0
  7551 ;;      Locals:         0       0       0       0
  7552 ;;      Temps:          0       0       0       0
  7553 ;;      Totals:         0       0       0       0
  7554 ;;Total ram usage:        0 bytes
  7555 ;; Hardware stack levels used:    1
  7556 ;; Hardware stack levels required when called:    2
  7557 ;; This function calls:
  7558 ;;		Nothing
  7559 ;; This function is called by:
  7560 ;;		_main
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           
  7565                           ;psect for function _CDS_Initialization
  7566  0E55                     _CDS_Initialization:	
  7567                           
  7568                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  7569                           
  7570                           ;incstack = 0
  7571                           ; Regs used in _CDS_Initialization: []
  7572  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  7573  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  7574  0E57  1425               	bsf	__CDS,0
  7575  0E58  0008               	return
  7576  0E59                     __end_of_CDS_Initialization:	
  7577                           
  7578                           	psect	text53
  7579  0F07                     __ptext53:	
  7580 ;; *************** function _ISR *****************
  7581 ;; Defined at:
  7582 ;;		line 107 in file "../src/MCU_B1.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;		None
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;		None
  7587 ;; Return value:  Size  Location     Type
  7588 ;;		None               void
  7589 ;; Registers used:
  7590 ;;		wreg, status,2, status,0, pclath, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7596 ;;      Params:         0       0       0       0
  7597 ;;      Locals:         0       0       0       0
  7598 ;;      Temps:          4       0       0       0
  7599 ;;      Totals:         4       0       0       0
  7600 ;;Total ram usage:        4 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    1
  7603 ;; This function calls:
  7604 ;;		_TMR1_ISR
  7605 ;; This function is called by:
  7606 ;;		Interrupt level 1
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           
  7611                           ;psect for function _ISR
  7612  0F07                     _ISR:	
  7613                           
  7614                           ;MCU_B1.c: 109: ;;
  7615                           ;MCU_B1.c: 111: ;;
  7616                           ;MCU_B1.c: 113: TMR1_ISR();
  7617  0F07  158A  27E2  158A   	fcall	_TMR1_ISR
  7618  0F0A  0873               	movf	??_ISR+3,w
  7619  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  7620  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  7621  0F0D  00FF               	movwf	127
  7622  0F0E  0872               	movf	??_ISR+2,w
  7623  0F0F  008A               	movwf	10
  7624  0F10  0871               	movf	??_ISR+1,w
  7625  0F11  0084               	movwf	4
  7626  0F12  0E70               	swapf	??_ISR^(0+-128),w
  7627  0F13  0083               	movwf	3
  7628  0F14  0EFE               	swapf	126,f
  7629  0F15  0E7E               	swapf	126,w
  7630  0F16  0009               	retfie
  7631  0F17                     __end_of_ISR:	
  7632                           
  7633                           	psect	intentry
  7634  0004                     __pintentry:	
  7635                           ;incstack = 0
  7636                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  7637                           
  7638  0004                     interrupt_function:	
  7639  007E                     saved_w	set	btemp
  7640  0004  00FE               	movwf	btemp
  7641  0005  0E03               	swapf	3,w
  7642  0006  00F0               	movwf	??_ISR
  7643  0007  0804               	movf	4,w
  7644  0008  00F1               	movwf	??_ISR+1
  7645  0009  080A               	movf	10,w
  7646  000A  00F2               	movwf	??_ISR+2
  7647  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7648  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7649  000D  087F               	movf	btemp+1,w
  7650  000E  00F3               	movwf	??_ISR+3
  7651  000F  158A  2F07         	ljmp	_ISR
  7652                           
  7653                           	psect	text54
  7654  0FE2                     __ptext54:	
  7655 ;; *************** function _TMR1_ISR *****************
  7656 ;; Defined at:
  7657 ;;		line 209 in file "../src/MCU_B1.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;		None
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;		None
  7662 ;; Return value:  Size  Location     Type
  7663 ;;		None               void
  7664 ;; Registers used:
  7665 ;;		wreg, status,2
  7666 ;; Tracked objects:
  7667 ;;		On entry : 0/0
  7668 ;;		On exit  : 0/0
  7669 ;;		Unchanged: 0/0
  7670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7671 ;;      Params:         0       0       0       0
  7672 ;;      Locals:         0       0       0       0
  7673 ;;      Temps:          0       0       0       0
  7674 ;;      Totals:         0       0       0       0
  7675 ;;Total ram usage:        0 bytes
  7676 ;; Hardware stack levels used:    1
  7677 ;; This function calls:
  7678 ;;		Nothing
  7679 ;; This function is called by:
  7680 ;;		_ISR
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           
  7685                           ;psect for function _TMR1_ISR
  7686  0FE2                     _TMR1_ISR:	
  7687                           
  7688                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  7689                           
  7690                           ;incstack = 0
  7691                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  7692  0FE2  1683               	bsf	3,5	;RP0=1, select bank1
  7693  0FE3  1303               	bcf	3,6	;RP1=0, select bank1
  7694  0FE4  1C0C               	btfss	12,0	;volatile
  7695  0FE5  0008               	return
  7696  0FE6  1283               	bcf	3,5	;RP0=0, select bank0
  7697  0FE7  1303               	bcf	3,6	;RP1=0, select bank0
  7698  0FE8  1C0C               	btfss	12,0	;volatile
  7699  0FE9  0008               	return
  7700                           
  7701                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
  7702  0FEA  30FA               	movlw	250
  7703  0FEB  008F               	movwf	15	;volatile
  7704                           
  7705                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
  7706  0FEC  3038               	movlw	56
  7707  0FED  008E               	movwf	14	;volatile
  7708                           
  7709                           ;MCU_B1.c: 214: TMR1IF = 0;
  7710  0FEE  100C               	bcf	12,0	;volatile
  7711                           
  7712                           ;MCU_B1.c: 234: Timer1.Count++;
  7713  0FEF  3001               	movlw	1
  7714  0FF0  07AB               	addwf	_Timer1+1,f
  7715  0FF1  1803               	skipnc
  7716  0FF2  0AAC               	incf	_Timer1+2,f
  7717  0FF3  3000               	movlw	0
  7718  0FF4  07AC               	addwf	_Timer1+2,f
  7719                           
  7720                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
  7721  0FF5  3064               	movlw	100
  7722  0FF6  062B               	xorwf	_Timer1+1,w
  7723  0FF7  042C               	iorwf	_Timer1+2,w
  7724  0FF8  1D03               	skipz
  7725  0FF9  0008               	return
  7726                           
  7727                           ;MCU_B1.c: 236: {
  7728                           ;MCU_B1.c: 237: Timer1.Count = 0;
  7729  0FFA  01AB               	clrf	_Timer1+1
  7730  0FFB  01AC               	clrf	_Timer1+2
  7731                           
  7732                           ;MCU_B1.c: 238: myMain.T1_Timerout = 1;
  7733  0FFC  1683               	bsf	3,5	;RP0=1, select bank1
  7734  0FFD  1303               	bcf	3,6	;RP1=0, select bank1
  7735  0FFE  1520               	bsf	_myMain^(0+128),2
  7736  0FFF  0008               	return
  7737  1000                     __end_of_TMR1_ISR:	
  7738  007E                     btemp	set	126	;btemp
  7739  007E                     wtemp	set	126
  7740  007E                     wtemp0	set	126
  7741  0080                     wtemp1	set	128
  7742  0082                     wtemp2	set	130
  7743  0084                     wtemp3	set	132
  7744  0086                     wtemp4	set	134
  7745  0088                     wtemp5	set	136
  7746  007F                     wtemp6	set	127
  7747  007E                     ttemp	set	126
  7748  007E                     ttemp0	set	126
  7749  0081                     ttemp1	set	129
  7750  0084                     ttemp2	set	132
  7751  0087                     ttemp3	set	135
  7752  007F                     ttemp4	set	127
  7753  007E                     ltemp	set	126
  7754  007E                     ltemp0	set	126
  7755  0082                     ltemp1	set	130
  7756  0086                     ltemp2	set	134
  7757  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         130
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     15      79
    BANK1            80      4      67
    BANK2            16      0       0

Pointer List with Targets:

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 


Critical Paths under _main in COMMON

    _main->_getCDS_AD
    _main->_getPIR_AD
    _main->_getTemp_AD
    _my_MainTime->_setLoad_Enable
    _my_MainTime->_setTemp_Enable
    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setOverTemp_Exceptions->_setLED
    _setSYSC_Main->_setLED
    _PIR_Main->_setLED
    _Mcu_Initialization->_WDT_Set
    _setLoad_Exceptions->_setLED
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_setLED
    _setLED->_LedPointSelect
    _CDS_Main->_getMain_AD_Safe

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_getPIR_AD
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setOverTemp_Exceptions->_setLED
    _SYSC_Main->_setSYSC_Main
    _setSYSC_Main->_setLED
    _PIR_Main->_setLED
    _Load_Main->___wmul
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_setLED
    _LED_Main->_setLED_Main
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   19767
                                             14 BANK0      1     1      0
                                              0 BANK1      4     0      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0      44
                     _setLoad_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           3     3      0     609
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2466
                                              6 COMMON     1     0      1
                                              8 BANK0      6     6      0
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     657
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           5     5      0     909
                                              0 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     750
                                              6 COMMON     1     0      1
                                              0 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     578
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    3519
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    3519
                                              8 BANK0      1     1      0
                            ___awdiv
                    _getMain_AD_Safe
               _getMain_LightsStatus
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    2588
                                              1 BANK0      3     3      0
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 2     2      0      24
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     861
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0    2399
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         1     1      0    2399
                                              1 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             5     5      0    2537
                                              1 BANK0      5     5      0
                      _getCDS_Status
                    _getMain_AD_Safe
                  _getMain_Exception
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getMain_Exception                                    1     1      0      69
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            3     3      0    3627
                                              4 BANK0      3     3      0
                            ___lbdiv
                             ___wmul
                       _getTemp_Safe
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   3     3      0    2588
                                              1 BANK0      3     3      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getTemp_Safe                                         1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     344
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              5     4      1     449
                                              4 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2554
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2554
                                              1 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    2399
                                              6 COMMON     1     0      1
                                              0 BANK0      1     1      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0      46
                                              0 BANK0      3     3      0
                    _getMain_AD_Safe
 ---------------------------------------------------------------------------------
 (3) _getMain_AD_Safe                                      1     1      0      46
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
     _getMain_AD_Safe
   _DetectSYSC_Signal
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lbdiv
     ___wmul
     _getTemp_Safe
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _setLED
         _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getMain_AD_Safe
     _getMain_Exception
     _setLED
       _LedPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _setLED
         _LedPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_AD_Safe
       _getMain_LightsStatus
       _setOverTemp_Exceptions
         _setLED
           _LedPointSelect
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTime
     _setLoad_Enable
     _setTemp_Enable

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      9C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      F      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      4      43       7       83.8%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      9C      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Oct 31 08:02:25 2014

                   _WDT_Clearing 0002                               l83 0681                     ___awdiv@sign 0065  
                             fsr 0004              ___wmul@multiplicand 0062                              l544 0390  
                            l536 0313                              l539 03E2                              l558 03F2  
                            l734 0067                              l735 008E                              l729 0044  
                            l887 0ED7                              l967 0779                              _GIE 005F  
                            _LED 0079                              _RB3 0033                              _RA5 002D  
                            _RB4 0034                              _RB5 0035                              _PS0 0408  
                            _PS1 0409                              _PS2 040A                              _ISR 0F07  
                            _PSA 040B                              _WDT 0077                              fsr0 0004  
                            indf 0000                  __end_of_ADC_Set 0E7E          __size_of_setTemp_Enable 0008  
                           ?_ISR 0070                       Load_Main@i 0066                             l2400 0ECB  
                           l3302 0506                             l3310 0512                             l4030 0590  
                           l3320 0524                             l3306 050C                             l4018 056D  
                           l3316 051E                             l3324 052A                             l3334 053F  
                           l3342 054B                             l3422 0716                             l3512 04D1  
                           l3610 068C                             l3602 067A                             l3290 0FA0  
                           l3338 0545                             l3418 070F                             l3362 05BE  
                           l2490 07ED                             l3524 076F                             l2572 0F75  
                           l3508 04BF                             l3380 05DF                             l3444 041F  
                           l2484 07E2                             l3700 0224                             l3286 0F97  
                           l3390 0600                             l3446 0426                             l2486 07E5  
                           l3702 0228                             l3710 0235                             l3544 079B  
                           l2568 0F6C                             l3368 05C9                             l3720 0259  
                           l3704 022C                             l3712 0246                             l3546 07A4  
                           l3394 0608                             l3386 05F5                             l3378 05D1  
                           l3474 0474                             l3458 0456                             l3642 0628  
                           l3570 06AC                             l3706 0230                             l3556 07B3  
                           l3812 0389                             l3484 0486                             l3652 0642  
                           l3572 06BA                             l3830 03B6                             l3822 03A9  
                           l3806 037D                             l3486 0489                             l3582 06DB  
                           l3750 02EB                             l3742 02BF                             l3726 0275  
                           l3664 065A                             l3648 063A                             l3736 02A3  
                           l3578 06D0                             l3852 03E8                             l3932 00B0  
                           l3908 0085                             l3756 02F9                             l3838 03C2  
                           l3846 03DF                             l3950 00D4                             l3694 021A  
                           l3678 0764                             l3792 034A                             l3960 0120  
                           l3944 00C7                             l3786 0333                             l3698 0220  
                           l3948 00D3                             l3974 0179                             l3976 0184  
                           l3896 006A                             l3986 019E            _myMain_Initialization 07FF  
                   __CFG_WDTE$ON 0000                             u4045 069C                             u3525 05D4  
                           u1855 0F47                             u3545 05E0                             u3555 05EC  
                           _PEIE 005E                             u3805 04DD                             u3565 05F6  
                           u4375 0399                             u3825 077A                             u4705 0141  
                           u3905 06AF                             u3835 0781                             u4715 016F  
                           u3925 06BB                             u4735 0194                             u3935 06C7  
                           u3945 06D1                             u4765 01BB                             u4685 00F4  
                           u4695 0118                             __CDS 0025          ?_setSYSC_Initialization 0070  
                           _SYSC 0020                             __PIR 00A8                             _Temp 0050  
                           _main 0554                             btemp 007E                  __end_of_WDT_Set 07FF  
                           ltemp 007E                             start 0011                             ttemp 007E  
                           wtemp 007E                 __end_of_CDS_Main 06A2     __size_of_Temp_Initialization 0003  
                          ??_ISR 0070                    __CFG_PLLEN$ON 0000                 __end_of_LED_Main 0EBF  
                          ?_main 00DF                  __end_of___awdiv 060F                  __end_of___lbdiv 07B5  
                          _ADRES 001E                  ___awdiv@divisor 0060                            _T1CON 0010  
                __end_of___lwdiv 06E2                  ___awdiv@counter 0064                            _TMR1H 000F  
                          _TMR1L 000E                            _PORTA 0005                            _PORTB 0006  
                          _PORTC 0007                     ?_setLED_Main 0070                            _TRISA 0085  
                          _TRISB 0086                            _TRISC 0087                            _Load1 002D  
        __end_of_Timeout_Counter 0F4D                 ?_getMain_AD_Safe 0070                 __end_of_PIR_Main 01C1  
               __end_of_TMR1_ISR 1000                 __end_of_TMR1_Set 0EE9                            _getAD 07D5  
 __end_of_setSYSC_Initialization 0E5D                   _setLoad_Enable 0E9E                 __end_of_WDT_Main 0F07  
                 __CFG_BOREN$OFF 0000                            pclath 000A                            ltemp0 007E  
                          ltemp1 0082                            ltemp2 0086                            ltemp3 0080  
 __size_of_setLED_Initialization 0012     __end_of_getMain_LightsStatus 0E6B    __end_of_setLED_Initialization 0F39  
                          ttemp0 007E                            ttemp1 0081                            ttemp2 0084  
                          ttemp3 0087                            ttemp4 007F                            status 0003  
                          wtemp0 007E                            wtemp1 0080                            wtemp2 0082  
                          wtemp3 0084                            wtemp4 0086                            wtemp5 0088  
                          wtemp6 007F                  ___lbdiv@divisor 0074                getPIR_AD@channel1 006C  
              getPIR_AD@channel2 0076                  ___lbdiv@counter 0061           ?_setLoad_AH_AL_Restore 0070  
                   ?_my_MainTime 0070            setLoad_Enable@command 0074                  __initialization 0013  
             __size_of_SYSC_Main 0003                     __end_of_main 05B2                 __end_of_Fosc_Set 0E66  
                      ??_ADC_Set 0074          setOverTemp_Exceptions@i 0062                           ??_main 006E  
         __end_of_setLoad_Enable 0EA7             __end_of_getTemp_Safe 0E86                           ?_getAD 0074  
         ?_myMain_Initialization 0070                           _ADCON0 001F                           _ADCON1 009F  
               ___awdiv@dividend 0062                        ??_WDT_Set 0074                           _ANSELA 0185  
                         _ANSELB 0186                           _FVRCON 009D                           _OSCCON 0090  
             __size_of_Load_Main 0104                           _TMR1IE 0460                           _TMR1IF 0060  
                         _IO_Set 0F4D     __size_of_SYSC_Initialization 0003      __size_of_setLoad_Exceptions 0020  
     __end_of_Mcu_Initialization 0EF8                           _Timer1 002A      __size_of_CDS_Initialization 0004  
                         ___wmul 076D                        ??___awdiv 0074                        ??___lbdiv 0075  
                      ??___lwdiv 0074                           _setLED 04F4                           _myMain 00A0  
               ___awdiv@quotient 0066               __size_of_Temp_Main 0003      __end_of_Load_Initialization 0E71  
                         saved_w 007E                 ?_Timeout_Counter 0070                  ?_setLoad_Enable 0070  
              __end_of_SYSC_Main 0E4F                   _setTemp_Enable 0E8E          __size_of_LedPointSelect 001C  
                      ?_CDS_Main 0070                 ___lbdiv@dividend 0060       getMain_LightsStatus@result 0075  
    __size_of_PIR_Initialization 0010          __end_of__initialization 0022                        ?_LED_Main 0070  
                  ?_setSYSC_Main 0070                   __pcstackCOMMON 0070               __size_of_getCDS_AD 002A  
                  __end_of_getAD 07F3                        ?_PIR_Main 0070                        ?_TMR1_ISR 0070  
                      ?_TMR1_Set 0070           setLoad_AH_AL_Restore@i 0075               _LED_Initialization 0EA7  
             __size_of_getPIR_AD 013A                 ___lbdiv@quotient 0062                        ?_WDT_Main 0070  
              __end_of_Load_Main 03FF             _getMain_LightsStatus 0E66       __end_of_set_TimeoutCleared 0E77  
            ?_LED_Initialization 0070           __end_of_setTemp_Enable 0E96             __size_of_setLED_Main 003B  
                        ??_getAD 0075              _Temp_Initialization 0E4F                       ??_CDS_Main 0060  
                     __pbssBANK0 0020                       __pbssBANK1 00A0                        ?_Fosc_Set 0070  
              __end_of_Temp_Main 0E55                          ?_IO_Set 0070                  __CFG_VCAPEN$DIS 0000  
                     ??_LED_Main 0077                   ??_setSYSC_Main 0061        getMain_LightsStatus@count 0074  
           ??_LED_Initialization 0077                LedPointSelect@led 0075               getTemp_Safe@result 0074  
                     __pmaintext 0554             ?_Temp_Initialization 0070             __size_of_my_MainTime 001D  
                        ?___wmul 0060                       ??_PIR_Main 0061                       ??_TMR1_ISR 0070  
                  ?_setTemp_Main 0070                       _getLoad_AD 060F                       ??_TMR1_Set 0074  
                     __pintentry 0004                          ?_setLED 0076                          _ADC_Set 0E77  
                     _getTemp_AD 0747                       ??_WDT_Main 0074            ?_getMain_LightsStatus 0070  
          __size_of_getTemp_Safe 0008           __size_of_getCDS_Status 0008                  ?_setTemp_Enable 0070  
              __end_of_getCDS_AD 0747                          _WDT_Set 07F3                       ??_Fosc_Set 0074  
              __end_of_getPIR_AD 02FB          ??_setLoad_AH_AL_Restore 0074                  __size_of_IO_Set 0015  
                     getCDS_AD@i 0062                       getCDS_AD@j 0063                          _VarLED1 00D7  
                        _VarLED2 00DB            ??_Temp_Initialization 0074                     _getTemp_Safe 0E7E  
                 ??_setTemp_Main 0068                          ___awdiv 05B2                          ___lbdiv 0792  
                __size_of___wmul 0025                          ___lwdiv 06A2         ??_setOverTemp_Exceptions 0061  
                __size_of_setLED 0060                          __ptext0 0000                          __ptext1 0FC5  
                        __ptext2 0E8E                          __ptext3 0E9E                          __ptext4 07FF  
                        __ptext5 0747                          __ptext6 01C1                          __ptext7 06A2  
                        __ptext8 060F                          __ptext9 071D                       getPIR_AD@i 006D  
                     getPIR_AD@j 006B                     __size_of_ISR 0010              _SYSC_Initialization 0E49  
        ??_myMain_Initialization 0074         ??_setTemp_Initialization 0074                   _LedPointSelect 0F8D  
                        clrloop0 0E97             end_of_initialization 0022            getMain_AD_Safe@result 0074  
       __size_of_getMain_AD_Safe 000E                    _getCDS_Status 0E86             ?_SYSC_Initialization 0070  
          _setLED_Initialization 0F27                      ?_getLoad_AD 0070           ??_getMain_LightsStatus 0074  
                    ?_getTemp_AD 0070        setLoad_Exceptions@command 0063         setLED_Initialization@led 0061  
             _Mcu_Initialization 0EE9                 ??_setLoad_Enable 0074             __end_of_setSYSC_Main 04F4  
         __end_of_LedPointSelect 0FA9              ?_Mcu_Initialization 0070                        _SYSC_Main 0E4C  
              __size_of_CDS_Main 0043                   ?_getCDS_Status 0070       __end_of_setLoad_Exceptions 07D5  
          ??_SYSC_Initialization 0074                   __end_of_IO_Set 0F62       __end_of_CDS_Initialization 0E59  
            setLoad_Exceptions@i 0062                __size_of_LED_Main 000C                _getMain_Exception 0F62  
           ??_Mcu_Initialization 0075                    ?_WDT_Clearing 0070               ?_getMain_Exception 0070  
                 __end_of___wmul 0792  __size_of_setOverTemp_Exceptions 001C                __size_of_PIR_Main 019C  
              __size_of_TMR1_ISR 001E                __size_of_TMR1_Set 000E                   __end_of_setLED 0554  
            ??_getMain_Exception 0074         ??_setSYSC_Initialization 0074                __size_of_WDT_Main 000F  
            start_initialization 0013                  ?_LedPointSelect 0070                        _Load_Main 02FB  
                    __end_of_ISR 0F17       __end_of_PIR_Initialization 0F27     __size_of_Load_Initialization 0006  
            getCDS_Status@result 0074  __size_of_setTemp_Initialization 0004             __end_of_setTemp_Main 0490  
            __size_of_getLoad_AD 0050                       ?_SYSC_Main 0070               _set_TimeoutCleared 0E71  
                       ??_IO_Set 0074         __size_of_Timeout_Counter 0014                        _VarErrLED 005C  
            __size_of_getTemp_AD 0026           ?_setLED_Initialization 0070                __size_of_Fosc_Set 0005  
      __end_of_getMain_Exception 0F77                        _Temp_Main 0E52    setOverTemp_Exceptions@command 0063  
            ?_set_TimeoutCleared 0070                   ??_WDT_Clearing 0074                ??_getMain_AD_Safe 0074  
                       ??___wmul 0074                         ??_setLED 0077                 ??_setTemp_Enable 0074  
                       ?_ADC_Set 0070                    ??_setLED_Main 0060                      __pbssCOMMON 0077  
                      ___latbits 0001                       ?_Load_Main 0070            setTemp_Enable@command 0074  
                  __pcstackBANK0 0060                    __pcstackBANK1 00DF             ??_set_TimeoutCleared 0074  
                       ?_WDT_Set 0070                  ??_getCDS_Status 0074           _setOverTemp_Exceptions 0FA9  
                      _getCDS_AD 071D   __size_of_setLoad_AH_AL_Restore 0016    __end_of_setLoad_AH_AL_Restore 0F8D  
                  ??_my_MainTime 0075                        _getPIR_AD 01C1      __size_of_LED_Initialization 000C  
                     ?_Temp_Main 0070                 ___lwdiv@dividend 0062           _setTemp_Initialization 0E5D  
                       ?___awdiv 0060                         ?___lbdiv 0074                         ?___lwdiv 0060  
          __size_of_setSYSC_Main 0064  __size_of_setSYSC_Initialization 0004   __size_of_myMain_Initialization 0001  
  __end_of_myMain_Initialization 0800                   __size_of_getAD 001E                 ___lwdiv@quotient 0065  
                       _CDS_Main 065F              __end_of_setLED_Main 071D                      ??_SYSC_Main 0077  
    __end_of_Temp_Initialization 0E52                interrupt_function 0004                       ?_getCDS_AD 0076  
                 ___wmul@product 0074                         _LED_Main 0EB3                        clear_ram0 0E96  
     __size_of_getMain_Exception 0015                       ?_getPIR_AD 0076                     _setSYSC_Main 0490  
        getMain_Exception@result 0074                         _GO_nDONE 00F9                ??_Timeout_Counter 0074  
                       _PIR_Main 0025                     ??_getLoad_AD 0060                         _TMR1_ISR 0FE2  
                       _TMR1_Set 0EDB              __end_of_my_MainTime 0FE2                     ??_getTemp_AD 0060  
                       _WDT_Main 0EF8                 __size_of_ADC_Set 0007                ___wmul@multiplier 0060  
          __size_of_setTemp_Main 0091                      ??_Load_Main 0064                      getAD@adcon0 0075  
                    getAD@adcon1 0074                   setLED_Main@led 0076             __end_of_WDT_Clearing 0004  
                       _Fosc_Set 0E61                 __size_of_WDT_Set 000C               __end_of_getLoad_AD 065F  
             __end_of_getTemp_AD 076D           _setSYSC_Initialization 0E59                getLoad_AD@channel 0062  
              _DetectSYSC_Signal 0ECD                      ??_Temp_Main 0077              _Load_Initialization 0E6B  
             ?_DetectSYSC_Signal 0070                        setLED@led 0060                     _setTemp_Main 03FF  
             _setLoad_Exceptions 07B5                 __size_of___awdiv 005D                 __size_of___lbdiv 0023  
               __size_of___lwdiv 0040                 ??_LedPointSelect 0074              ??_DetectSYSC_Signal 0074  
             _CDS_Initialization 0E55    __size_of_getMain_LightsStatus 0005                getTemp_AD@channel 0076  
                    _setLED_Main 06E2              ?_setLoad_Exceptions 0070                  ___lwdiv@divisor 0060  
           ?_Load_Initialization 0070              ?_CDS_Initialization 0070                  ___lwdiv@counter 0064  
                       __ptext10 07D5                         __ptext11 0E71                         __ptext20 0E4F  
                       __ptext12 0F39                         __ptext21 0E5D                         __ptext13 0EF8  
                       __ptext30 0EE9                         __ptext22 0E4C                         __ptext14 0002  
                       __ptext31 07F3                         __ptext23 0490                         __ptext15 0E52  
                       __ptext40 0792                         __ptext32 0EDB                         __ptext24 0E49  
                       __ptext16 03FF                         __ptext41 0E6B                         __ptext33 0F4D  
                       __ptext25 0E59                         __ptext17 0FA9                         __ptext50 065F  
                       __ptext42 0F77                         __ptext34 0E61                         __ptext26 0025  
                       __ptext18 0E66                         __ptext51 0EBF                         __ptext43 0EB3  
                       __ptext35 0E77                         __ptext27 0F62                         __ptext19 05B2  
                       __ptext52 0E55                         __ptext44 06E2                         __ptext36 02FB  
                       __ptext28 0E86                         __ptext53 0F07                         __ptext45 0EA7  
                       __ptext37 07B5                         __ptext29 0F17                         __ptext54 0FE2  
                       __ptext46 0F27                         __ptext38 0E7E                         __ptext47 04F4  
                       __ptext39 076D                         __ptext48 0F8D                         __ptext49 0ECD  
    __end_of_SYSC_Initialization 0E4C          ??_setLED_Initialization 0077                  _getMain_AD_Safe 0EBF  
                    ??_getCDS_AD 0060                    setLED@command 0076        __end_of_DetectSYSC_Signal 0EDB  
                  __size_of_main 005E             ??_setLoad_Exceptions 0061                      ??_getPIR_AD 0068  
             _PIR_Initialization 0F17                      _my_MainTime 0FC5             ??_CDS_Initialization 0074  
    __size_of_Mcu_Initialization 000F              ?_PIR_Initialization 0070                         main@argc 00DF  
                       main@argv 00E1            ??_Load_Initialization 0076          ?_setOverTemp_Exceptions 0070  
           ??_PIR_Initialization 0074                         intlevel1 0000          __size_of_setLoad_Enable 0009  
        ?_setTemp_Initialization 0070                      getLoad_AD@i 0064                      getLoad_AD@j 0063  
                  ?_getTemp_Safe 0070            __size_of_WDT_Clearing 0002   __end_of_setOverTemp_Exceptions 0FC5  
        __end_of_getMain_AD_Safe 0ECD      __size_of_set_TimeoutCleared 0006               __CFG_FOSC$INTOSCIO 0000  
                _Timeout_Counter 0F39       __end_of_LED_Initialization 0EB3            __end_of_getCDS_Status 0E8E  
 __end_of_setTemp_Initialization 0E61       __size_of_DetectSYSC_Signal 000E                getCDS_AD@channel1 0064  
              getCDS_AD@channel2 0076                   ??_getTemp_Safe 0074            _setLoad_AH_AL_Restore 0F77  
