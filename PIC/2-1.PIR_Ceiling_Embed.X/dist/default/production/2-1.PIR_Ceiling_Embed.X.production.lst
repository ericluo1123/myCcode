

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Dec 10 16:13:24 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text36,local,class=CODE,merge=1,delta=2
    49                           	psect	text37,local,class=CODE,merge=1,delta=2
    50                           	psect	text38,local,class=CODE,merge=1,delta=2
    51                           	psect	text39,local,class=CODE,merge=1,delta=2
    52                           	psect	text40,local,class=CODE,merge=1,delta=2
    53                           	psect	text41,local,class=CODE,merge=1,delta=2
    54                           	psect	text42,local,class=CODE,merge=1,delta=2
    55                           	psect	text43,local,class=CODE,merge=1,delta=2
    56                           	psect	text44,local,class=CODE,merge=1,delta=2
    57                           	psect	text45,local,class=CODE,merge=1,delta=2
    58                           	psect	text46,local,class=CODE,merge=1,delta=2
    59                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text48,local,class=CODE,merge=1,delta=2
    61                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text50,local,class=CODE,merge=1,delta=2
    63                           	psect	text51,local,class=CODE,merge=1,delta=2
    64                           	psect	text52,local,class=CODE,merge=1,delta=2
    65                           	psect	text53,local,class=CODE,merge=1,delta=2
    66                           	psect	text54,local,class=CODE,merge=1,delta=2
    67                           	psect	text55,local,class=CODE,merge=1,delta=2
    68                           	psect	text56,local,class=CODE,merge=1,delta=2
    69                           	psect	text57,local,class=CODE,merge=1,delta=2
    70                           	psect	text58,local,class=CODE,merge=1,delta=2
    71                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text62,local,class=CODE,merge=1,delta=2
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    77                           	dabs	1,0x7E,2
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0014                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001D                     	;# 
   110  001E                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  0087                     	;# 
   116  0089                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  008F                     	;# 
   121  0090                     	;# 
   122  0091                     	;# 
   123  0092                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0095                     	;# 
   128  0095                     	;# 
   129  0096                     	;# 
   130  0096                     	;# 
   131  0098                     	;# 
   132  0099                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009F                     	;# 
   136  0108                     	;# 
   137  0109                     	;# 
   138  010C                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  0185                     	;# 
   145  0186                     	;# 
   146  018C                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0089                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0095                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0096                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009F                     	;# 
   205  0108                     	;# 
   206  0109                     	;# 
   207  010C                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  0185                     	;# 
   214  0186                     	;# 
   215  018C                     	;# 
   216  0000                     	;# 
   217  0001                     	;# 
   218  0002                     	;# 
   219  0003                     	;# 
   220  0004                     	;# 
   221  0005                     	;# 
   222  0006                     	;# 
   223  0007                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  000E                     	;# 
   231  000F                     	;# 
   232  0010                     	;# 
   233  0011                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0015                     	;# 
   238  0015                     	;# 
   239  0016                     	;# 
   240  0017                     	;# 
   241  0018                     	;# 
   242  0019                     	;# 
   243  001A                     	;# 
   244  001B                     	;# 
   245  001B                     	;# 
   246  001C                     	;# 
   247  001D                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  0081                     	;# 
   251  0085                     	;# 
   252  0086                     	;# 
   253  0087                     	;# 
   254  0089                     	;# 
   255  008C                     	;# 
   256  008D                     	;# 
   257  008E                     	;# 
   258  008F                     	;# 
   259  0090                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0094                     	;# 
   265  0095                     	;# 
   266  0095                     	;# 
   267  0096                     	;# 
   268  0096                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009C                     	;# 
   272  009D                     	;# 
   273  009F                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  010F                     	;# 
   282  0185                     	;# 
   283  0186                     	;# 
   284  018C                     	;# 
   285  0000                     	;# 
   286  0001                     	;# 
   287  0002                     	;# 
   288  0003                     	;# 
   289  0004                     	;# 
   290  0005                     	;# 
   291  0006                     	;# 
   292  0007                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  000E                     	;# 
   300  000F                     	;# 
   301  0010                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0013                     	;# 
   305  0014                     	;# 
   306  0015                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001D                     	;# 
   317  001E                     	;# 
   318  001F                     	;# 
   319  0081                     	;# 
   320  0085                     	;# 
   321  0086                     	;# 
   322  0087                     	;# 
   323  0089                     	;# 
   324  008C                     	;# 
   325  008D                     	;# 
   326  008E                     	;# 
   327  008F                     	;# 
   328  0090                     	;# 
   329  0091                     	;# 
   330  0092                     	;# 
   331  0093                     	;# 
   332  0093                     	;# 
   333  0094                     	;# 
   334  0095                     	;# 
   335  0095                     	;# 
   336  0096                     	;# 
   337  0096                     	;# 
   338  0098                     	;# 
   339  0099                     	;# 
   340  009C                     	;# 
   341  009D                     	;# 
   342  009F                     	;# 
   343  0108                     	;# 
   344  0109                     	;# 
   345  010C                     	;# 
   346  010C                     	;# 
   347  010D                     	;# 
   348  010D                     	;# 
   349  010E                     	;# 
   350  010F                     	;# 
   351  0185                     	;# 
   352  0186                     	;# 
   353  018C                     	;# 
   354  0000                     	;# 
   355  0001                     	;# 
   356  0002                     	;# 
   357  0003                     	;# 
   358  0004                     	;# 
   359  0005                     	;# 
   360  0006                     	;# 
   361  0007                     	;# 
   362  0009                     	;# 
   363  000A                     	;# 
   364  000B                     	;# 
   365  000C                     	;# 
   366  000D                     	;# 
   367  000E                     	;# 
   368  000E                     	;# 
   369  000F                     	;# 
   370  0010                     	;# 
   371  0011                     	;# 
   372  0012                     	;# 
   373  0013                     	;# 
   374  0014                     	;# 
   375  0015                     	;# 
   376  0015                     	;# 
   377  0016                     	;# 
   378  0017                     	;# 
   379  0018                     	;# 
   380  0019                     	;# 
   381  001A                     	;# 
   382  001B                     	;# 
   383  001B                     	;# 
   384  001C                     	;# 
   385  001D                     	;# 
   386  001E                     	;# 
   387  001F                     	;# 
   388  0081                     	;# 
   389  0085                     	;# 
   390  0086                     	;# 
   391  0087                     	;# 
   392  0089                     	;# 
   393  008C                     	;# 
   394  008D                     	;# 
   395  008E                     	;# 
   396  008F                     	;# 
   397  0090                     	;# 
   398  0091                     	;# 
   399  0092                     	;# 
   400  0093                     	;# 
   401  0093                     	;# 
   402  0094                     	;# 
   403  0095                     	;# 
   404  0095                     	;# 
   405  0096                     	;# 
   406  0096                     	;# 
   407  0098                     	;# 
   408  0099                     	;# 
   409  009C                     	;# 
   410  009D                     	;# 
   411  009F                     	;# 
   412  0108                     	;# 
   413  0109                     	;# 
   414  010C                     	;# 
   415  010C                     	;# 
   416  010D                     	;# 
   417  010D                     	;# 
   418  010E                     	;# 
   419  010F                     	;# 
   420  0185                     	;# 
   421  0186                     	;# 
   422  018C                     	;# 
   423  0000                     	;# 
   424  0001                     	;# 
   425  0002                     	;# 
   426  0003                     	;# 
   427  0004                     	;# 
   428  0005                     	;# 
   429  0006                     	;# 
   430  0007                     	;# 
   431  0009                     	;# 
   432  000A                     	;# 
   433  000B                     	;# 
   434  000C                     	;# 
   435  000D                     	;# 
   436  000E                     	;# 
   437  000E                     	;# 
   438  000F                     	;# 
   439  0010                     	;# 
   440  0011                     	;# 
   441  0012                     	;# 
   442  0013                     	;# 
   443  0014                     	;# 
   444  0015                     	;# 
   445  0015                     	;# 
   446  0016                     	;# 
   447  0017                     	;# 
   448  0018                     	;# 
   449  0019                     	;# 
   450  001A                     	;# 
   451  001B                     	;# 
   452  001B                     	;# 
   453  001C                     	;# 
   454  001D                     	;# 
   455  001E                     	;# 
   456  001F                     	;# 
   457  0081                     	;# 
   458  0085                     	;# 
   459  0086                     	;# 
   460  0087                     	;# 
   461  0089                     	;# 
   462  008C                     	;# 
   463  008D                     	;# 
   464  008E                     	;# 
   465  008F                     	;# 
   466  0090                     	;# 
   467  0091                     	;# 
   468  0092                     	;# 
   469  0093                     	;# 
   470  0093                     	;# 
   471  0094                     	;# 
   472  0095                     	;# 
   473  0095                     	;# 
   474  0096                     	;# 
   475  0096                     	;# 
   476  0098                     	;# 
   477  0099                     	;# 
   478  009C                     	;# 
   479  009D                     	;# 
   480  009F                     	;# 
   481  0108                     	;# 
   482  0109                     	;# 
   483  010C                     	;# 
   484  010C                     	;# 
   485  010D                     	;# 
   486  010D                     	;# 
   487  010E                     	;# 
   488  010F                     	;# 
   489  0185                     	;# 
   490  0186                     	;# 
   491  018C                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0009                     	;# 
   501  000A                     	;# 
   502  000B                     	;# 
   503  000C                     	;# 
   504  000D                     	;# 
   505  000E                     	;# 
   506  000E                     	;# 
   507  000F                     	;# 
   508  0010                     	;# 
   509  0011                     	;# 
   510  0012                     	;# 
   511  0013                     	;# 
   512  0014                     	;# 
   513  0015                     	;# 
   514  0015                     	;# 
   515  0016                     	;# 
   516  0017                     	;# 
   517  0018                     	;# 
   518  0019                     	;# 
   519  001A                     	;# 
   520  001B                     	;# 
   521  001B                     	;# 
   522  001C                     	;# 
   523  001D                     	;# 
   524  001E                     	;# 
   525  001F                     	;# 
   526  0081                     	;# 
   527  0085                     	;# 
   528  0086                     	;# 
   529  0087                     	;# 
   530  0089                     	;# 
   531  008C                     	;# 
   532  008D                     	;# 
   533  008E                     	;# 
   534  008F                     	;# 
   535  0090                     	;# 
   536  0091                     	;# 
   537  0092                     	;# 
   538  0093                     	;# 
   539  0093                     	;# 
   540  0094                     	;# 
   541  0095                     	;# 
   542  0095                     	;# 
   543  0096                     	;# 
   544  0096                     	;# 
   545  0098                     	;# 
   546  0099                     	;# 
   547  009C                     	;# 
   548  009D                     	;# 
   549  009F                     	;# 
   550  0108                     	;# 
   551  0109                     	;# 
   552  010C                     	;# 
   553  010C                     	;# 
   554  010D                     	;# 
   555  010D                     	;# 
   556  010E                     	;# 
   557  010F                     	;# 
   558  0185                     	;# 
   559  0186                     	;# 
   560  018C                     	;# 
   561  0000                     	;# 
   562  0001                     	;# 
   563  0002                     	;# 
   564  0003                     	;# 
   565  0004                     	;# 
   566  0005                     	;# 
   567  0006                     	;# 
   568  0007                     	;# 
   569  0009                     	;# 
   570  000A                     	;# 
   571  000B                     	;# 
   572  000C                     	;# 
   573  000D                     	;# 
   574  000E                     	;# 
   575  000E                     	;# 
   576  000F                     	;# 
   577  0010                     	;# 
   578  0011                     	;# 
   579  0012                     	;# 
   580  0013                     	;# 
   581  0014                     	;# 
   582  0015                     	;# 
   583  0015                     	;# 
   584  0016                     	;# 
   585  0017                     	;# 
   586  0018                     	;# 
   587  0019                     	;# 
   588  001A                     	;# 
   589  001B                     	;# 
   590  001B                     	;# 
   591  001C                     	;# 
   592  001D                     	;# 
   593  001E                     	;# 
   594  001F                     	;# 
   595  0081                     	;# 
   596  0085                     	;# 
   597  0086                     	;# 
   598  0087                     	;# 
   599  0089                     	;# 
   600  008C                     	;# 
   601  008D                     	;# 
   602  008E                     	;# 
   603  008F                     	;# 
   604  0090                     	;# 
   605  0091                     	;# 
   606  0092                     	;# 
   607  0093                     	;# 
   608  0093                     	;# 
   609  0094                     	;# 
   610  0095                     	;# 
   611  0095                     	;# 
   612  0096                     	;# 
   613  0096                     	;# 
   614  0098                     	;# 
   615  0099                     	;# 
   616  009C                     	;# 
   617  009D                     	;# 
   618  009F                     	;# 
   619  0108                     	;# 
   620  0109                     	;# 
   621  010C                     	;# 
   622  010C                     	;# 
   623  010D                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  010F                     	;# 
   627  0185                     	;# 
   628  0186                     	;# 
   629  018C                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0009                     	;# 
   639  000A                     	;# 
   640  000B                     	;# 
   641  000C                     	;# 
   642  000D                     	;# 
   643  000E                     	;# 
   644  000E                     	;# 
   645  000F                     	;# 
   646  0010                     	;# 
   647  0011                     	;# 
   648  0012                     	;# 
   649  0013                     	;# 
   650  0014                     	;# 
   651  0015                     	;# 
   652  0015                     	;# 
   653  0016                     	;# 
   654  0017                     	;# 
   655  0018                     	;# 
   656  0019                     	;# 
   657  001A                     	;# 
   658  001B                     	;# 
   659  001B                     	;# 
   660  001C                     	;# 
   661  001D                     	;# 
   662  001E                     	;# 
   663  001F                     	;# 
   664  0081                     	;# 
   665  0085                     	;# 
   666  0086                     	;# 
   667  0087                     	;# 
   668  0089                     	;# 
   669  008C                     	;# 
   670  008D                     	;# 
   671  008E                     	;# 
   672  008F                     	;# 
   673  0090                     	;# 
   674  0091                     	;# 
   675  0092                     	;# 
   676  0093                     	;# 
   677  0093                     	;# 
   678  0094                     	;# 
   679  0095                     	;# 
   680  0095                     	;# 
   681  0096                     	;# 
   682  0096                     	;# 
   683  0098                     	;# 
   684  0099                     	;# 
   685  009C                     	;# 
   686  009D                     	;# 
   687  009F                     	;# 
   688  0108                     	;# 
   689  0109                     	;# 
   690  010C                     	;# 
   691  010C                     	;# 
   692  010D                     	;# 
   693  010D                     	;# 
   694  010E                     	;# 
   695  010F                     	;# 
   696  0185                     	;# 
   697  0186                     	;# 
   698  018C                     	;# 
   699  0000                     	;# 
   700  0001                     	;# 
   701  0002                     	;# 
   702  0003                     	;# 
   703  0004                     	;# 
   704  0005                     	;# 
   705  0006                     	;# 
   706  0007                     	;# 
   707  0009                     	;# 
   708  000A                     	;# 
   709  000B                     	;# 
   710  000C                     	;# 
   711  000D                     	;# 
   712  000E                     	;# 
   713  000E                     	;# 
   714  000F                     	;# 
   715  0010                     	;# 
   716  0011                     	;# 
   717  0012                     	;# 
   718  0013                     	;# 
   719  0014                     	;# 
   720  0015                     	;# 
   721  0015                     	;# 
   722  0016                     	;# 
   723  0017                     	;# 
   724  0018                     	;# 
   725  0019                     	;# 
   726  001A                     	;# 
   727  001B                     	;# 
   728  001B                     	;# 
   729  001C                     	;# 
   730  001D                     	;# 
   731  001E                     	;# 
   732  001F                     	;# 
   733  0081                     	;# 
   734  0085                     	;# 
   735  0086                     	;# 
   736  0087                     	;# 
   737  0089                     	;# 
   738  008C                     	;# 
   739  008D                     	;# 
   740  008E                     	;# 
   741  008F                     	;# 
   742  0090                     	;# 
   743  0091                     	;# 
   744  0092                     	;# 
   745  0093                     	;# 
   746  0093                     	;# 
   747  0094                     	;# 
   748  0095                     	;# 
   749  0095                     	;# 
   750  0096                     	;# 
   751  0096                     	;# 
   752  0098                     	;# 
   753  0099                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009F                     	;# 
   757  0108                     	;# 
   758  0109                     	;# 
   759  010C                     	;# 
   760  010C                     	;# 
   761  010D                     	;# 
   762  010D                     	;# 
   763  010E                     	;# 
   764  010F                     	;# 
   765  0185                     	;# 
   766  0186                     	;# 
   767  018C                     	;# 
   768  0000                     	;# 
   769  0001                     	;# 
   770  0002                     	;# 
   771  0003                     	;# 
   772  0004                     	;# 
   773  0005                     	;# 
   774  0006                     	;# 
   775  0007                     	;# 
   776  0009                     	;# 
   777  000A                     	;# 
   778  000B                     	;# 
   779  000C                     	;# 
   780  000D                     	;# 
   781  000E                     	;# 
   782  000E                     	;# 
   783  000F                     	;# 
   784  0010                     	;# 
   785  0011                     	;# 
   786  0012                     	;# 
   787  0013                     	;# 
   788  0014                     	;# 
   789  0015                     	;# 
   790  0015                     	;# 
   791  0016                     	;# 
   792  0017                     	;# 
   793  0018                     	;# 
   794  0019                     	;# 
   795  001A                     	;# 
   796  001B                     	;# 
   797  001B                     	;# 
   798  001C                     	;# 
   799  001D                     	;# 
   800  001E                     	;# 
   801  001F                     	;# 
   802  0081                     	;# 
   803  0085                     	;# 
   804  0086                     	;# 
   805  0087                     	;# 
   806  0089                     	;# 
   807  008C                     	;# 
   808  008D                     	;# 
   809  008E                     	;# 
   810  008F                     	;# 
   811  0090                     	;# 
   812  0091                     	;# 
   813  0092                     	;# 
   814  0093                     	;# 
   815  0093                     	;# 
   816  0094                     	;# 
   817  0095                     	;# 
   818  0095                     	;# 
   819  0096                     	;# 
   820  0096                     	;# 
   821  0098                     	;# 
   822  0099                     	;# 
   823  009C                     	;# 
   824  009D                     	;# 
   825  009F                     	;# 
   826  0108                     	;# 
   827  0109                     	;# 
   828  010C                     	;# 
   829  010C                     	;# 
   830  010D                     	;# 
   831  010D                     	;# 
   832  010E                     	;# 
   833  010F                     	;# 
   834  0185                     	;# 
   835  0186                     	;# 
   836  018C                     	;# 
   837  0000                     	;# 
   838  0001                     	;# 
   839  0002                     	;# 
   840  0003                     	;# 
   841  0004                     	;# 
   842  0005                     	;# 
   843  0006                     	;# 
   844  0007                     	;# 
   845  0009                     	;# 
   846  000A                     	;# 
   847  000B                     	;# 
   848  000C                     	;# 
   849  000D                     	;# 
   850  000E                     	;# 
   851  000E                     	;# 
   852  000F                     	;# 
   853  0010                     	;# 
   854  0011                     	;# 
   855  0012                     	;# 
   856  0013                     	;# 
   857  0014                     	;# 
   858  0015                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0017                     	;# 
   862  0018                     	;# 
   863  0019                     	;# 
   864  001A                     	;# 
   865  001B                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  001D                     	;# 
   869  001E                     	;# 
   870  001F                     	;# 
   871  0081                     	;# 
   872  0085                     	;# 
   873  0086                     	;# 
   874  0087                     	;# 
   875  0089                     	;# 
   876  008C                     	;# 
   877  008D                     	;# 
   878  008E                     	;# 
   879  008F                     	;# 
   880  0090                     	;# 
   881  0091                     	;# 
   882  0092                     	;# 
   883  0093                     	;# 
   884  0093                     	;# 
   885  0094                     	;# 
   886  0095                     	;# 
   887  0095                     	;# 
   888  0096                     	;# 
   889  0096                     	;# 
   890  0098                     	;# 
   891  0099                     	;# 
   892  009C                     	;# 
   893  009D                     	;# 
   894  009F                     	;# 
   895  0108                     	;# 
   896  0109                     	;# 
   897  010C                     	;# 
   898  010C                     	;# 
   899  010D                     	;# 
   900  010D                     	;# 
   901  010E                     	;# 
   902  010F                     	;# 
   903  0185                     	;# 
   904  0186                     	;# 
   905  018C                     	;# 
   906  0000                     	;# 
   907  0001                     	;# 
   908  0002                     	;# 
   909  0003                     	;# 
   910  0004                     	;# 
   911  0005                     	;# 
   912  0006                     	;# 
   913  0007                     	;# 
   914  0009                     	;# 
   915  000A                     	;# 
   916  000B                     	;# 
   917  000C                     	;# 
   918  000D                     	;# 
   919  000E                     	;# 
   920  000E                     	;# 
   921  000F                     	;# 
   922  0010                     	;# 
   923  0011                     	;# 
   924  0012                     	;# 
   925  0013                     	;# 
   926  0014                     	;# 
   927  0015                     	;# 
   928  0015                     	;# 
   929  0016                     	;# 
   930  0017                     	;# 
   931  0018                     	;# 
   932  0019                     	;# 
   933  001A                     	;# 
   934  001B                     	;# 
   935  001B                     	;# 
   936  001C                     	;# 
   937  001D                     	;# 
   938  001E                     	;# 
   939  001F                     	;# 
   940  0081                     	;# 
   941  0085                     	;# 
   942  0086                     	;# 
   943  0087                     	;# 
   944  0089                     	;# 
   945  008C                     	;# 
   946  008D                     	;# 
   947  008E                     	;# 
   948  008F                     	;# 
   949  0090                     	;# 
   950  0091                     	;# 
   951  0092                     	;# 
   952  0093                     	;# 
   953  0093                     	;# 
   954  0094                     	;# 
   955  0095                     	;# 
   956  0095                     	;# 
   957  0096                     	;# 
   958  0096                     	;# 
   959  0098                     	;# 
   960  0099                     	;# 
   961  009C                     	;# 
   962  009D                     	;# 
   963  009F                     	;# 
   964  0108                     	;# 
   965  0109                     	;# 
   966  010C                     	;# 
   967  010C                     	;# 
   968  010D                     	;# 
   969  010D                     	;# 
   970  010E                     	;# 
   971  010F                     	;# 
   972  0185                     	;# 
   973  0186                     	;# 
   974  018C                     	;# 
   975  0000                     	;# 
   976  0001                     	;# 
   977  0002                     	;# 
   978  0003                     	;# 
   979  0004                     	;# 
   980  0005                     	;# 
   981  0006                     	;# 
   982  0007                     	;# 
   983  0009                     	;# 
   984  000A                     	;# 
   985  000B                     	;# 
   986  000C                     	;# 
   987  000D                     	;# 
   988  000E                     	;# 
   989  000E                     	;# 
   990  000F                     	;# 
   991  0010                     	;# 
   992  0011                     	;# 
   993  0012                     	;# 
   994  0013                     	;# 
   995  0014                     	;# 
   996  0015                     	;# 
   997  0015                     	;# 
   998  0016                     	;# 
   999  0017                     	;# 
  1000  0018                     	;# 
  1001  0019                     	;# 
  1002  001A                     	;# 
  1003  001B                     	;# 
  1004  001B                     	;# 
  1005  001C                     	;# 
  1006  001D                     	;# 
  1007  001E                     	;# 
  1008  001F                     	;# 
  1009  0081                     	;# 
  1010  0085                     	;# 
  1011  0086                     	;# 
  1012  0087                     	;# 
  1013  0089                     	;# 
  1014  008C                     	;# 
  1015  008D                     	;# 
  1016  008E                     	;# 
  1017  008F                     	;# 
  1018  0090                     	;# 
  1019  0091                     	;# 
  1020  0092                     	;# 
  1021  0093                     	;# 
  1022  0093                     	;# 
  1023  0094                     	;# 
  1024  0095                     	;# 
  1025  0095                     	;# 
  1026  0096                     	;# 
  1027  0096                     	;# 
  1028  0098                     	;# 
  1029  0099                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009F                     	;# 
  1033  0108                     	;# 
  1034  0109                     	;# 
  1035  010C                     	;# 
  1036  010C                     	;# 
  1037  010D                     	;# 
  1038  010D                     	;# 
  1039  010E                     	;# 
  1040  010F                     	;# 
  1041  0185                     	;# 
  1042  0186                     	;# 
  1043  018C                     	;# 
  1044  0000                     	;# 
  1045  0001                     	;# 
  1046  0002                     	;# 
  1047  0003                     	;# 
  1048  0004                     	;# 
  1049  0005                     	;# 
  1050  0006                     	;# 
  1051  0007                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  000E                     	;# 
  1059  000F                     	;# 
  1060  0010                     	;# 
  1061  0011                     	;# 
  1062  0012                     	;# 
  1063  0013                     	;# 
  1064  0014                     	;# 
  1065  0015                     	;# 
  1066  0015                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001B                     	;# 
  1074  001C                     	;# 
  1075  001D                     	;# 
  1076  001E                     	;# 
  1077  001F                     	;# 
  1078  0081                     	;# 
  1079  0085                     	;# 
  1080  0086                     	;# 
  1081  0087                     	;# 
  1082  0089                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  008F                     	;# 
  1087  0090                     	;# 
  1088  0091                     	;# 
  1089  0092                     	;# 
  1090  0093                     	;# 
  1091  0093                     	;# 
  1092  0094                     	;# 
  1093  0095                     	;# 
  1094  0095                     	;# 
  1095  0096                     	;# 
  1096  0096                     	;# 
  1097  0098                     	;# 
  1098  0099                     	;# 
  1099  009C                     	;# 
  1100  009D                     	;# 
  1101  009F                     	;# 
  1102  0108                     	;# 
  1103  0109                     	;# 
  1104  010C                     	;# 
  1105  010C                     	;# 
  1106  010D                     	;# 
  1107  010D                     	;# 
  1108  010E                     	;# 
  1109  010F                     	;# 
  1110  0185                     	;# 
  1111  0186                     	;# 
  1112  018C                     	;# 
  1113  0000                     	;# 
  1114  0001                     	;# 
  1115  0002                     	;# 
  1116  0003                     	;# 
  1117  0004                     	;# 
  1118  0005                     	;# 
  1119  0006                     	;# 
  1120  0007                     	;# 
  1121  0009                     	;# 
  1122  000A                     	;# 
  1123  000B                     	;# 
  1124  000C                     	;# 
  1125  000D                     	;# 
  1126  000E                     	;# 
  1127  000E                     	;# 
  1128  000F                     	;# 
  1129  0010                     	;# 
  1130  0011                     	;# 
  1131  0012                     	;# 
  1132  0013                     	;# 
  1133  0014                     	;# 
  1134  0015                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0017                     	;# 
  1138  0018                     	;# 
  1139  0019                     	;# 
  1140  001A                     	;# 
  1141  001B                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  001D                     	;# 
  1145  001E                     	;# 
  1146  001F                     	;# 
  1147  0081                     	;# 
  1148  0085                     	;# 
  1149  0086                     	;# 
  1150  0087                     	;# 
  1151  0089                     	;# 
  1152  008C                     	;# 
  1153  008D                     	;# 
  1154  008E                     	;# 
  1155  008F                     	;# 
  1156  0090                     	;# 
  1157  0091                     	;# 
  1158  0092                     	;# 
  1159  0093                     	;# 
  1160  0093                     	;# 
  1161  0094                     	;# 
  1162  0095                     	;# 
  1163  0095                     	;# 
  1164  0096                     	;# 
  1165  0096                     	;# 
  1166  0098                     	;# 
  1167  0099                     	;# 
  1168  009C                     	;# 
  1169  009D                     	;# 
  1170  009F                     	;# 
  1171  0108                     	;# 
  1172  0109                     	;# 
  1173  010C                     	;# 
  1174  010C                     	;# 
  1175  010D                     	;# 
  1176  010D                     	;# 
  1177  010E                     	;# 
  1178  010F                     	;# 
  1179  0185                     	;# 
  1180  0186                     	;# 
  1181  018C                     	;# 
  1182  0000                     	;# 
  1183  0001                     	;# 
  1184  0002                     	;# 
  1185  0003                     	;# 
  1186  0004                     	;# 
  1187  0005                     	;# 
  1188  0006                     	;# 
  1189  0007                     	;# 
  1190  0009                     	;# 
  1191  000A                     	;# 
  1192  000B                     	;# 
  1193  000C                     	;# 
  1194  000D                     	;# 
  1195  000E                     	;# 
  1196  000E                     	;# 
  1197  000F                     	;# 
  1198  0010                     	;# 
  1199  0011                     	;# 
  1200  0012                     	;# 
  1201  0013                     	;# 
  1202  0014                     	;# 
  1203  0015                     	;# 
  1204  0015                     	;# 
  1205  0016                     	;# 
  1206  0017                     	;# 
  1207  0018                     	;# 
  1208  0019                     	;# 
  1209  001A                     	;# 
  1210  001B                     	;# 
  1211  001B                     	;# 
  1212  001C                     	;# 
  1213  001D                     	;# 
  1214  001E                     	;# 
  1215  001F                     	;# 
  1216  0081                     	;# 
  1217  0085                     	;# 
  1218  0086                     	;# 
  1219  0087                     	;# 
  1220  0089                     	;# 
  1221  008C                     	;# 
  1222  008D                     	;# 
  1223  008E                     	;# 
  1224  008F                     	;# 
  1225  0090                     	;# 
  1226  0091                     	;# 
  1227  0092                     	;# 
  1228  0093                     	;# 
  1229  0093                     	;# 
  1230  0094                     	;# 
  1231  0095                     	;# 
  1232  0095                     	;# 
  1233  0096                     	;# 
  1234  0096                     	;# 
  1235  0098                     	;# 
  1236  0099                     	;# 
  1237  009C                     	;# 
  1238  009D                     	;# 
  1239  009F                     	;# 
  1240  0108                     	;# 
  1241  0109                     	;# 
  1242  010C                     	;# 
  1243  010C                     	;# 
  1244  010D                     	;# 
  1245  010D                     	;# 
  1246  010E                     	;# 
  1247  010F                     	;# 
  1248  0185                     	;# 
  1249  0186                     	;# 
  1250  018C                     	;# 
  1251  0000                     	;# 
  1252  0001                     	;# 
  1253  0002                     	;# 
  1254  0003                     	;# 
  1255  0004                     	;# 
  1256  0005                     	;# 
  1257  0006                     	;# 
  1258  0007                     	;# 
  1259  0009                     	;# 
  1260  000A                     	;# 
  1261  000B                     	;# 
  1262  000C                     	;# 
  1263  000D                     	;# 
  1264  000E                     	;# 
  1265  000E                     	;# 
  1266  000F                     	;# 
  1267  0010                     	;# 
  1268  0011                     	;# 
  1269  0012                     	;# 
  1270  0013                     	;# 
  1271  0014                     	;# 
  1272  0015                     	;# 
  1273  0015                     	;# 
  1274  0016                     	;# 
  1275  0017                     	;# 
  1276  0018                     	;# 
  1277  0019                     	;# 
  1278  001A                     	;# 
  1279  001B                     	;# 
  1280  001B                     	;# 
  1281  001C                     	;# 
  1282  001D                     	;# 
  1283  001E                     	;# 
  1284  001F                     	;# 
  1285  0081                     	;# 
  1286  0085                     	;# 
  1287  0086                     	;# 
  1288  0087                     	;# 
  1289  0089                     	;# 
  1290  008C                     	;# 
  1291  008D                     	;# 
  1292  008E                     	;# 
  1293  008F                     	;# 
  1294  0090                     	;# 
  1295  0091                     	;# 
  1296  0092                     	;# 
  1297  0093                     	;# 
  1298  0093                     	;# 
  1299  0094                     	;# 
  1300  0095                     	;# 
  1301  0095                     	;# 
  1302  0096                     	;# 
  1303  0096                     	;# 
  1304  0098                     	;# 
  1305  0099                     	;# 
  1306  009C                     	;# 
  1307  009D                     	;# 
  1308  009F                     	;# 
  1309  0108                     	;# 
  1310  0109                     	;# 
  1311  010C                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010D                     	;# 
  1315  010E                     	;# 
  1316  010F                     	;# 
  1317  0185                     	;# 
  1318  0186                     	;# 
  1319  018C                     	;# 
  1320  001F                     _ADCON0	set	31
  1321  001E                     _ADRES	set	30
  1322  0005                     _PORTA	set	5
  1323  0006                     _PORTB	set	6
  1324  0007                     _PORTC	set	7
  1325  0010                     _T1CON	set	16
  1326  000F                     _TMR1H	set	15
  1327  000E                     _TMR1L	set	14
  1328  005F                     _GIE	set	95
  1329  00F9                     _GO_nDONE	set	249
  1330  005E                     _PEIE	set	94
  1331  002C                     _RA4	set	44
  1332  002D                     _RA5	set	45
  1333  0032                     _RB2	set	50
  1334  0033                     _RB3	set	51
  1335  0034                     _RB4	set	52
  1336  0035                     _RB5	set	53
  1337  0060                     _TMR1IF	set	96
  1338  009F                     _ADCON1	set	159
  1339  009D                     _FVRCON	set	157
  1340  0090                     _OSCCON	set	144
  1341  0085                     _TRISA	set	133
  1342  0086                     _TRISB	set	134
  1343  0087                     _TRISC	set	135
  1344  0408                     _PS0	set	1032
  1345  0409                     _PS1	set	1033
  1346  040A                     _PS2	set	1034
  1347  040B                     _PSA	set	1035
  1348  0460                     _TMR1IE	set	1120
  1349  0185                     _ANSELA	set	389
  1350  0186                     _ANSELB	set	390
  1351                           
  1352                           	psect	text0
  1353  0000                     __ptext0:	
  1354                           ; #config settings
  1355                           
  1356                           
  1357                           ;psect for function _TMR1_ISR
  1358  0000                     
  1359                           	psect	cinit
  1360  0013                     start_initialization:	
  1361  0013                     __initialization:	
  1362                           
  1363                           ; Clear objects allocated to COMMON
  1364  0013  01F7               	clrf	__pbssCOMMON& (0+127)
  1365  0014  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  1366  0015  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  1367                           
  1368                           ; Clear objects allocated to BANK0
  1369  0016  1383               	bcf	3,7	;select IRP bank0
  1370  0017  3020               	movlw	low __pbssBANK0
  1371  0018  0084               	movwf	4
  1372  0019  3059               	movlw	low (__pbssBANK0+57)
  1373  001A  118A  27F8  118A   	fcall	clear_ram0
  1374                           
  1375                           ; Clear objects allocated to BANK1
  1376  001D  30A0               	movlw	low __pbssBANK1
  1377  001E  0084               	movwf	4
  1378  001F  30F0               	movlw	low (__pbssBANK1+80)
  1379  0020  118A  27F8         	fcall	clear_ram0
  1380  0022                     end_of_initialization:	
  1381                           ;End of C runtime variable initialization code
  1382                           
  1383  0022                     __end_of__initialization:	
  1384  0022  0183               	clrf	3
  1385  0023  158A  2F9A         	ljmp	_main	;jump to C main() function
  1386                           
  1387                           	psect	bssCOMMON
  1388  0077                     __pbssCOMMON:	
  1389  0077                     _LED:	
  1390  0077                     	ds	1
  1391  0078                     _Lights:	
  1392  0078                     	ds	1
  1393  0079                     _SwDetect:	
  1394  0079                     	ds	1
  1395                           
  1396                           	psect	bssBANK0
  1397  0020                     __pbssBANK0:	
  1398  0020                     _myMain:	
  1399  0020                     	ds	6
  1400  0026                     _SYSC:	
  1401  0026                     	ds	5
  1402  002B                     __CDS:	
  1403  002B                     	ds	5
  1404  0030                     _PIRLED:	
  1405  0030                     	ds	4
  1406  0034                     _Timer1:	
  1407  0034                     	ds	3
  1408  0037                     _WDT:	
  1409  0037                     	ds	2
  1410  0039                     _LightsControl:	
  1411  0039                     	ds	1
  1412  003A                     _Temp:	
  1413  003A                     	ds	12
  1414  0046                     _Lights1:	
  1415  0046                     	ds	7
  1416  004D                     _VarErrLED:	
  1417  004D                     	ds	4
  1418  0051                     _VarLED1:	
  1419  0051                     	ds	4
  1420  0055                     _VarLED2:	
  1421  0055                     	ds	4
  1422                           
  1423                           	psect	bssBANK1
  1424  00A0                     __pbssBANK1:	
  1425  00A0                     __PIR:	
  1426  00A0                     	ds	47
  1427  00CF                     _Load:	
  1428  00CF                     	ds	33
  1429                           
  1430                           	psect	clrtext
  1431  07F8                     clear_ram0:	
  1432                           ;	Called with FSR containing the base address, and
  1433                           ;	W with the last address+1
  1434                           
  1435  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
  1436  07F9                     clrloop0:	
  1437  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
  1438  07FA  0A84               	incf	4,f	;increment pointer
  1439  07FB  0604               	xorwf	4,w	;XOR with final address
  1440  07FC  1903               	btfsc	3,2	;have we reached the end yet?
  1441  07FD  3400               	retlw	0	;all done for this memory range, return
  1442  07FE  0604               	xorwf	4,w	;XOR again to restore value
  1443  07FF  2FF9               	goto	clrloop0	;do the next byte
  1444                           
  1445                           	psect	cstackCOMMON
  1446  0070                     __pcstackCOMMON:	
  1447  0070                     ?_setLED_Initialization:	
  1448  0070                     ?_setPIRLED_Main:	
  1449                           ; 0 bytes @ 0x0
  1450                           
  1451  0070                     ?_Fosc_Set:	
  1452                           ; 0 bytes @ 0x0
  1453                           
  1454  0070                     ?_IO_Set:	
  1455                           ; 0 bytes @ 0x0
  1456                           
  1457  0070                     ?_TMR1_Set:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_ADC_Set:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_WDT_Set:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_TMR1_ISR:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ??_TMR1_ISR:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_Timeout_Counter:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ?_set_TimeoutCleared:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ?_WDT_Clearing:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_myMain_Initialization:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_SYSC_Initialization:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ?_Temp_Initialization:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_Load_Initialization:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_Lights_Initialization:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496  0070                     ?_PIR_Initialization:	
  1497                           ; 0 bytes @ 0x0
  1498                           
  1499  0070                     ?_DetectSYSC_Signal:	
  1500                           ; 0 bytes @ 0x0
  1501                           
  1502  0070                     ?_getLoad_AD:	
  1503                           ; 0 bytes @ 0x0
  1504                           
  1505  0070                     ?_getTemp_AD:	
  1506                           ; 0 bytes @ 0x0
  1507                           
  1508  0070                     ?_my_MainTimer:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0070                     ?_SYSC_Main:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0070                     ?_Temp_Main:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0070                     ?_Load_Main:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0070                     ?_Lights_Main:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0070                     ?_PIR_Main:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0070                     ?_Exception_Main:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0070                     ?_setLoad_AH_AL_Restore:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0070                     ?_setTemp_Initialization:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0070                     ?_setTemp_Main:	
  1536                           ; 0 bytes @ 0x0
  1537                           
  1538  0070                     ?_setSYSC_Initialization:	
  1539                           ; 0 bytes @ 0x0
  1540                           
  1541  0070                     ?_setSYSC_Main:	
  1542                           ; 0 bytes @ 0x0
  1543                           
  1544  0070                     ?_setLights_Initialization:	
  1545                           ; 0 bytes @ 0x0
  1546                           
  1547  0070                     ?_setLights_Main:	
  1548                           ; 0 bytes @ 0x0
  1549                           
  1550  0070                     ?_Lights_Control:	
  1551                           ; 0 bytes @ 0x0
  1552                           
  1553  0070                     ?_Lights_Close:	
  1554                           ; 0 bytes @ 0x0
  1555                           
  1556  0070                     ?_setLights_Line:	
  1557                           ; 0 bytes @ 0x0
  1558                           
  1559  0070                     ?_CDS_Initialization:	
  1560                           ; 0 bytes @ 0x0
  1561                           
  1562  0070                     ?_CDS_Main:	
  1563                           ; 0 bytes @ 0x0
  1564                           
  1565  0070                     ?_LedPointSelect:	
  1566                           ; 0 bytes @ 0x0
  1567                           
  1568  0070                     ?_LED_Initialization:	
  1569                           ; 0 bytes @ 0x0
  1570                           
  1571  0070                     ?_LED_Main:	
  1572                           ; 0 bytes @ 0x0
  1573                           
  1574  0070                     ?_Mcu_Initialization:	
  1575                           ; 0 bytes @ 0x0
  1576                           
  1577  0070                     ?_ISR:	
  1578                           ; 0 bytes @ 0x0
  1579                           
  1580  0070                     ??_ISR:	
  1581                           ; 0 bytes @ 0x0
  1582                           
  1583  0070                     ?_WDT_Main:	
  1584                           ; 0 bytes @ 0x0
  1585                           
  1586  0070                     ?_LightsPointSelect:	
  1587                           ; 0 bytes @ 0x0
  1588                           
  1589  0070                     ?_getAll_Lights_Line:	
  1590                           ; 0 bytes @ 0x0
  1591                           
  1592  0070                     ?_getLights_Status:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ?_getLightsControl_OK:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ?_getCDS_Status:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ?_getMain_LightsStatus:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_getMain_All_Error_Status:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_getMain_Lights_Count:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_getMain_LoadOK:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_getLoad_OK:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616                           
  1617                           ; 1 bytes @ 0x0
  1618  0070                     	ds	4
  1619  0074                     ??_Fosc_Set:	
  1620  0074                     ??_IO_Set:	
  1621                           ; 0 bytes @ 0x4
  1622                           
  1623  0074                     ??_TMR1_Set:	
  1624                           ; 0 bytes @ 0x4
  1625                           
  1626  0074                     ??_ADC_Set:	
  1627                           ; 0 bytes @ 0x4
  1628                           
  1629  0074                     ??_WDT_Set:	
  1630                           ; 0 bytes @ 0x4
  1631                           
  1632  0074                     ??_Timeout_Counter:	
  1633                           ; 0 bytes @ 0x4
  1634                           
  1635  0074                     ??_set_TimeoutCleared:	
  1636                           ; 0 bytes @ 0x4
  1637                           
  1638  0074                     ??_WDT_Clearing:	
  1639                           ; 0 bytes @ 0x4
  1640                           
  1641  0074                     ??_myMain_Initialization:	
  1642                           ; 0 bytes @ 0x4
  1643                           
  1644  0074                     ??_SYSC_Initialization:	
  1645                           ; 0 bytes @ 0x4
  1646                           
  1647  0074                     ??_Temp_Initialization:	
  1648                           ; 0 bytes @ 0x4
  1649                           
  1650  0074                     ??_PIR_Initialization:	
  1651                           ; 0 bytes @ 0x4
  1652                           
  1653  0074                     ??_DetectSYSC_Signal:	
  1654                           ; 0 bytes @ 0x4
  1655                           
  1656  0074                     ??_my_MainTimer:	
  1657                           ; 0 bytes @ 0x4
  1658                           
  1659  0074                     ??_getLightsControl_OK:	
  1660                           ; 0 bytes @ 0x4
  1661                           
  1662  0074                     ??_setLoad_AH_AL_Restore:	
  1663                           ; 0 bytes @ 0x4
  1664                           
  1665  0074                     ??_setTemp_Initialization:	
  1666                           ; 0 bytes @ 0x4
  1667                           
  1668  0074                     ??_setSYSC_Initialization:	
  1669                           ; 0 bytes @ 0x4
  1670                           
  1671  0074                     ??_CDS_Initialization:	
  1672                           ; 0 bytes @ 0x4
  1673                           
  1674  0074                     ??_CDS_Main:	
  1675                           ; 0 bytes @ 0x4
  1676                           
  1677  0074                     ??_getCDS_Status:	
  1678                           ; 0 bytes @ 0x4
  1679                           
  1680  0074                     ??_LedPointSelect:	
  1681                           ; 0 bytes @ 0x4
  1682                           
  1683  0074                     ??_WDT_Main:	
  1684                           ; 0 bytes @ 0x4
  1685                           
  1686  0074                     ??_getMain_All_Error_Status:	
  1687                           ; 0 bytes @ 0x4
  1688                           
  1689  0074                     ??_getMain_Lights_Count:	
  1690                           ; 0 bytes @ 0x4
  1691                           
  1692  0074                     ??_getLoad_OK:	
  1693                           ; 0 bytes @ 0x4
  1694                           
  1695  0074                     ??_LightsPointSelect:	
  1696                           ; 0 bytes @ 0x4
  1697                           
  1698  0074                     ??___awdiv:	
  1699                           ; 0 bytes @ 0x4
  1700                           
  1701  0074                     ??___lwdiv:	
  1702                           ; 0 bytes @ 0x4
  1703                           
  1704  0074                     ?_getAD:	
  1705                           ; 0 bytes @ 0x4
  1706                           
  1707  0074                     getCDS_Status@status:	
  1708                           ; 1 bytes @ 0x4
  1709                           
  1710  0074                     getAD@adcon1:	
  1711                           ; 1 bytes @ 0x4
  1712                           
  1713  0074                     getLoad_OK@ok:	
  1714                           ; 1 bytes @ 0x4
  1715                           
  1716  0074                     getLightsControl_OK@loadok:	
  1717                           ; 1 bytes @ 0x4
  1718                           
  1719                           
  1720                           ; 1 bytes @ 0x4
  1721  0074                     	ds	1
  1722  0075                     ??_getAD:	
  1723  0075                     ??_SYSC_Main:	
  1724                           ; 0 bytes @ 0x5
  1725                           
  1726  0075                     ??_setSYSC_Main:	
  1727                           ; 0 bytes @ 0x5
  1728                           
  1729  0075                     ??_Mcu_Initialization:	
  1730                           ; 0 bytes @ 0x5
  1731                           
  1732  0075                     ??_getMain_LoadOK:	
  1733                           ; 0 bytes @ 0x5
  1734                           
  1735  0075                     LedPointSelect@led:	
  1736                           ; 0 bytes @ 0x5
  1737                           
  1738  0075                     getAD@adcon0:	
  1739                           ; 1 bytes @ 0x5
  1740                           
  1741  0075                     setLoad_AH_AL_Restore@i:	
  1742                           ; 1 bytes @ 0x5
  1743                           
  1744  0075                     LightsPointSelect@lights:	
  1745                           ; 1 bytes @ 0x5
  1746                           
  1747                           
  1748                           ; 1 bytes @ 0x5
  1749  0075                     	ds	1
  1750  0076                     ?_setLED:	
  1751  0076                     ??_Load_Initialization:	
  1752                           ; 0 bytes @ 0x6
  1753                           
  1754  0076                     ?_getPIR_AD:	
  1755                           ; 0 bytes @ 0x6
  1756                           
  1757  0076                     ??_getAll_Lights_Line:	
  1758                           ; 0 bytes @ 0x6
  1759                           
  1760  0076                     ??_getLights_Status:	
  1761                           ; 0 bytes @ 0x6
  1762                           
  1763  0076                     ?_setLights_Trigger:	
  1764                           ; 0 bytes @ 0x6
  1765                           
  1766  0076                     ??_setLights_Initialization:	
  1767                           ; 0 bytes @ 0x6
  1768                           
  1769  0076                     ??_setLights_Line:	
  1770                           ; 0 bytes @ 0x6
  1771                           
  1772  0076                     ?_getCDS_AD:	
  1773                           ; 0 bytes @ 0x6
  1774                           
  1775  0076                     ??_getMain_LightsStatus:	
  1776                           ; 0 bytes @ 0x6
  1777                           
  1778  0076                     getCDS_AD@channel2:	
  1779                           ; 0 bytes @ 0x6
  1780                           
  1781  0076                     setLED@command:	
  1782                           ; 1 bytes @ 0x6
  1783                           
  1784  0076                     getMain_LoadOK@ok:	
  1785                           ; 1 bytes @ 0x6
  1786                           
  1787  0076                     getTemp_AD@channel:	
  1788                           ; 1 bytes @ 0x6
  1789                           
  1790  0076                     getPIR_AD@channel2:	
  1791                           ; 1 bytes @ 0x6
  1792                           
  1793  0076                     setLights_Initialization@lights:	
  1794                           ; 1 bytes @ 0x6
  1795                           
  1796  0076                     setLights_Trigger@command:	
  1797                           ; 1 bytes @ 0x6
  1798                           
  1799  0076                     setLights_Line@lights:	
  1800                           ; 1 bytes @ 0x6
  1801                           
  1802  0076                     getAll_Lights_Line@line:	
  1803                           ; 1 bytes @ 0x6
  1804                           
  1805                           
  1806                           ; 1 bytes @ 0x6
  1807  0076                     	ds	1
  1808  0077                     ??_setLED_Initialization:	
  1809  0077                     ??_setLED:	
  1810                           ; 0 bytes @ 0x7
  1811                           
  1812  0077                     ??_Lights_Initialization:	
  1813                           ; 0 bytes @ 0x7
  1814                           
  1815  0077                     ??_Temp_Main:	
  1816                           ; 0 bytes @ 0x7
  1817                           
  1818  0077                     ??_setLights_Main:	
  1819                           ; 0 bytes @ 0x7
  1820                           
  1821  0077                     ??_LED_Initialization:	
  1822                           ; 0 bytes @ 0x7
  1823                           
  1824  0077                     ??_LED_Main:	
  1825                           ; 0 bytes @ 0x7
  1826                           
  1827                           
  1828                           	psect	cstackBANK0
  1829  0059                     __pcstackBANK0:	
  1830                           ; 0 bytes @ 0x7
  1831                           
  1832  0059                     ??_getLoad_AD:	
  1833  0059                     ??_getTemp_AD:	
  1834                           ; 0 bytes @ 0x0
  1835                           
  1836  0059                     ??_setLights_Trigger:	
  1837                           ; 0 bytes @ 0x0
  1838                           
  1839  0059                     ??_Lights_Control:	
  1840                           ; 0 bytes @ 0x0
  1841                           
  1842  0059                     ??_getCDS_AD:	
  1843                           ; 0 bytes @ 0x0
  1844                           
  1845  0059                     ?___awdiv:	
  1846                           ; 0 bytes @ 0x0
  1847                           
  1848  0059                     ?___lwdiv:	
  1849                           ; 2 bytes @ 0x0
  1850                           
  1851  0059                     setLED@led:	
  1852                           ; 2 bytes @ 0x0
  1853                           
  1854  0059                     getMain_Lights_Count@count:	
  1855                           ; 1 bytes @ 0x0
  1856                           
  1857  0059                     getLights_Status@lights:	
  1858                           ; 1 bytes @ 0x0
  1859                           
  1860  0059                     _getMain_All_Error_Status$2247:	
  1861                           ; 1 bytes @ 0x0
  1862                           
  1863  0059                     ___awdiv@divisor:	
  1864                           ; 2 bytes @ 0x0
  1865                           
  1866  0059                     ___lwdiv@divisor:	
  1867                           ; 2 bytes @ 0x0
  1868                           
  1869                           
  1870                           ; 2 bytes @ 0x0
  1871  0059                     	ds	1
  1872  005A                     ??_setPIRLED_Main:	
  1873  005A                     setLED_Initialization@led:	
  1874                           ; 0 bytes @ 0x1
  1875                           
  1876  005A                     getMain_Lights_Count@status2:	
  1877                           ; 1 bytes @ 0x1
  1878                           
  1879  005A                     getLights_Status@status:	
  1880                           ; 1 bytes @ 0x1
  1881                           
  1882  005A                     setLights_Trigger@lights:	
  1883                           ; 1 bytes @ 0x1
  1884                           
  1885                           
  1886                           ; 1 bytes @ 0x1
  1887  005A                     	ds	1
  1888  005B                     getCDS_AD@i:	
  1889  005B                     setPIRLED_Main@count:	
  1890                           ; 1 bytes @ 0x2
  1891                           
  1892  005B                     getMain_LightsStatus@count:	
  1893                           ; 1 bytes @ 0x2
  1894                           
  1895  005B                     getMain_Lights_Count@status3:	
  1896                           ; 1 bytes @ 0x2
  1897                           
  1898  005B                     getLoad_AD@channel:	
  1899                           ; 1 bytes @ 0x2
  1900                           
  1901  005B                     _getMain_All_Error_Status$2248:	
  1902                           ; 1 bytes @ 0x2
  1903                           
  1904  005B                     _Lights_Control$4398:	
  1905                           ; 2 bytes @ 0x2
  1906                           
  1907  005B                     ___awdiv@dividend:	
  1908                           ; 2 bytes @ 0x2
  1909                           
  1910  005B                     ___lwdiv@dividend:	
  1911                           ; 2 bytes @ 0x2
  1912                           
  1913                           
  1914                           ; 2 bytes @ 0x2
  1915  005B                     	ds	1
  1916  005C                     getCDS_AD@j:	
  1917  005C                     getMain_Lights_Count@status1:	
  1918                           ; 1 bytes @ 0x3
  1919                           
  1920  005C                     getLoad_AD@k:	
  1921                           ; 1 bytes @ 0x3
  1922                           
  1923  005C                     getMain_LightsStatus@i:	
  1924                           ; 1 bytes @ 0x3
  1925                           
  1926                           
  1927                           ; 2 bytes @ 0x3
  1928  005C                     	ds	1
  1929  005D                     getCDS_AD@channel1:	
  1930  005D                     getMain_All_Error_Status@command:	
  1931                           ; 1 bytes @ 0x4
  1932                           
  1933  005D                     getLoad_AD@j:	
  1934                           ; 1 bytes @ 0x4
  1935                           
  1936  005D                     Lights_Control@lights:	
  1937                           ; 1 bytes @ 0x4
  1938                           
  1939  005D                     ___awdiv@counter:	
  1940                           ; 1 bytes @ 0x4
  1941                           
  1942  005D                     ___lwdiv@counter:	
  1943                           ; 1 bytes @ 0x4
  1944                           
  1945                           
  1946                           ; 1 bytes @ 0x4
  1947  005D                     	ds	1
  1948  005E                     getMain_LightsStatus@status:	
  1949  005E                     getMain_All_Error_Status@status:	
  1950                           ; 1 bytes @ 0x5
  1951                           
  1952  005E                     getLoad_AD@i:	
  1953                           ; 1 bytes @ 0x5
  1954                           
  1955  005E                     ___awdiv@sign:	
  1956                           ; 1 bytes @ 0x5
  1957                           
  1958  005E                     ___lwdiv@quotient:	
  1959                           ; 1 bytes @ 0x5
  1960                           
  1961                           
  1962                           ; 2 bytes @ 0x5
  1963  005E                     	ds	1
  1964  005F                     ??_PIR_Main:	
  1965  005F                     ??_Exception_Main:	
  1966                           ; 0 bytes @ 0x6
  1967                           
  1968  005F                     ??_Lights_Close:	
  1969                           ; 0 bytes @ 0x6
  1970                           
  1971  005F                     ?_setLights:	
  1972                           ; 0 bytes @ 0x6
  1973                           
  1974  005F                     setLights@status:	
  1975                           ; 0 bytes @ 0x6
  1976                           
  1977  005F                     ___awdiv@quotient:	
  1978                           ; 1 bytes @ 0x6
  1979                           
  1980                           
  1981                           ; 2 bytes @ 0x6
  1982  005F                     	ds	1
  1983  0060                     ??_Load_Main:	
  1984  0060                     ??_setLights:	
  1985                           ; 0 bytes @ 0x7
  1986                           
  1987  0060                     Exception_Main@count:	
  1988                           ; 0 bytes @ 0x7
  1989                           
  1990                           
  1991                           ; 1 bytes @ 0x7
  1992  0060                     	ds	1
  1993  0061                     ??_getPIR_AD:	
  1994  0061                     ??_setTemp_Main:	
  1995                           ; 0 bytes @ 0x8
  1996                           
  1997  0061                     Exception_Main@status:	
  1998                           ; 0 bytes @ 0x8
  1999                           
  2000  0061                     setLights@lights:	
  2001                           ; 1 bytes @ 0x8
  2002                           
  2003                           
  2004                           ; 1 bytes @ 0x8
  2005  0061                     	ds	1
  2006  0062                     Load_Main@j:	
  2007  0062                     setTemp_Main@error:	
  2008                           ; 1 bytes @ 0x9
  2009                           
  2010  0062                     setLights_Main@lights:	
  2011                           ; 1 bytes @ 0x9
  2012                           
  2013  0062                     Exception_Main@i:	
  2014                           ; 1 bytes @ 0x9
  2015                           
  2016                           
  2017                           ; 2 bytes @ 0x9
  2018  0062                     	ds	1
  2019  0063                     ??_Lights_Main:	
  2020  0063                     Load_Main@adjgo:	
  2021                           ; 0 bytes @ 0xA
  2022                           
  2023                           
  2024                           ; 1 bytes @ 0xA
  2025  0063                     	ds	1
  2026  0064                     Exception_Main@error:	
  2027  0064                     _Load_Main$2506:	
  2028                           ; 1 bytes @ 0xB
  2029                           
  2030  0064                     PIR_Main@error:	
  2031                           ; 1 bytes @ 0xB
  2032                           
  2033  0064                     getPIR_AD@j:	
  2034                           ; 1 bytes @ 0xB
  2035                           
  2036                           
  2037                           ; 1 bytes @ 0xB
  2038  0064                     	ds	1
  2039  0065                     Load_Main@error:	
  2040  0065                     getPIR_AD@channel1:	
  2041                           ; 1 bytes @ 0xC
  2042                           
  2043  0065                     _PIR_Main$2988:	
  2044                           ; 1 bytes @ 0xC
  2045                           
  2046                           
  2047                           ; 2 bytes @ 0xC
  2048  0065                     	ds	1
  2049  0066                     Load_Main@i:	
  2050  0066                     getPIR_AD@i:	
  2051                           ; 1 bytes @ 0xD
  2052                           
  2053  0066                     _Lights_Main$4389:	
  2054                           ; 1 bytes @ 0xD
  2055                           
  2056                           
  2057                           ; 2 bytes @ 0xD
  2058  0066                     	ds	1
  2059  0067                     PIR_Main@cds:	
  2060                           
  2061                           ; 1 bytes @ 0xE
  2062  0067                     	ds	1
  2063  0068                     ?_main:	
  2064  0068                     main@argc:	
  2065                           ; 2 bytes @ 0xF
  2066                           
  2067                           
  2068                           ; 2 bytes @ 0xF
  2069  0068                     	ds	2
  2070  006A                     main@argv:	
  2071                           
  2072                           ; 2 bytes @ 0x11
  2073  006A                     	ds	2
  2074  006C                     ??_main:	
  2075                           
  2076                           ; 0 bytes @ 0x13
  2077  006C                     	ds	1
  2078                           
  2079                           	psect	maintext
  2080  0F9A                     __pmaintext:	
  2081 ;;
  2082 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2083 ;;
  2084 ;; *************** function _main *****************
  2085 ;; Defined at:
  2086 ;;		line 7 in file "../src/Main_B1.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  argc            2   15[BANK0 ] int 
  2089 ;;  argv            2   17[BANK0 ] PTR PTR unsigned char 
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;		None
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  2   15[BANK0 ] int 
  2094 ;; Registers used:
  2095 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2096 ;; Tracked objects:
  2097 ;;		On entry : 17F/0
  2098 ;;		On exit  : 0/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2101 ;;      Params:         0       4       0       0
  2102 ;;      Locals:         0       0       0       0
  2103 ;;      Temps:          0       1       0       0
  2104 ;;      Totals:         0       5       0       0
  2105 ;;Total ram usage:        5 bytes
  2106 ;; Hardware stack levels required when called:    7
  2107 ;; This function calls:
  2108 ;;		_CDS_Initialization
  2109 ;;		_CDS_Main
  2110 ;;		_DetectSYSC_Signal
  2111 ;;		_Exception_Main
  2112 ;;		_LED_Initialization
  2113 ;;		_LED_Main
  2114 ;;		_Lights_Initialization
  2115 ;;		_Lights_Main
  2116 ;;		_Load_Initialization
  2117 ;;		_Load_Main
  2118 ;;		_Mcu_Initialization
  2119 ;;		_PIR_Initialization
  2120 ;;		_PIR_Main
  2121 ;;		_SYSC_Initialization
  2122 ;;		_SYSC_Main
  2123 ;;		_Temp_Initialization
  2124 ;;		_Temp_Main
  2125 ;;		_WDT_Main
  2126 ;;		_getCDS_AD
  2127 ;;		_getLoad_AD
  2128 ;;		_getPIR_AD
  2129 ;;		_getTemp_AD
  2130 ;;		_myMain_Initialization
  2131 ;;		_my_MainTimer
  2132 ;; This function is called by:
  2133 ;;		Startup code after reset
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           
  2138                           ;psect for function _main
  2139  0F9A                     _main:	
  2140                           
  2141                           ;Main_B1.c: 8: myMain_Initialization();
  2142                           
  2143                           ;incstack = 0
  2144                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2145  0F9A  158A  2345  158A   	fcall	_myMain_Initialization
  2146                           
  2147                           ;Main_B1.c: 9: Mcu_Initialization();
  2148  0F9D  158A  2406  158A   	fcall	_Mcu_Initialization
  2149                           
  2150                           ;Main_B1.c: 10: ;;
  2151                           ;Main_B1.c: 11: LED_Initialization();
  2152  0FA0  158A  23AB  158A   	fcall	_LED_Initialization
  2153                           
  2154                           ;Main_B1.c: 12: ;;
  2155                           ;Main_B1.c: 14: SYSC_Initialization();
  2156  0FA3  158A  2349  158A   	fcall	_SYSC_Initialization
  2157                           
  2158                           ;Main_B1.c: 15: Temp_Initialization();
  2159  0FA6  158A  234F  158A   	fcall	_Temp_Initialization
  2160                           
  2161                           ;Main_B1.c: 16: Load_Initialization();
  2162  0FA9  158A  236B  158A   	fcall	_Load_Initialization
  2163                           
  2164                           ;Main_B1.c: 17: ;;
  2165                           ;Main_B1.c: 18: ;;
  2166                           ;Main_B1.c: 20: ;;
  2167                           ;Main_B1.c: 21: Lights_Initialization();
  2168  0FAC  158A  2359  158A   	fcall	_Lights_Initialization
  2169                           
  2170                           ;Main_B1.c: 22: CDS_Initialization();
  2171  0FAF  158A  2355  158A   	fcall	_CDS_Initialization
  2172                           
  2173                           ;Main_B1.c: 23: PIR_Initialization();
  2174  0FB2  158A  23A0  158A   	fcall	_PIR_Initialization
  2175  0FB5                     l5237:	
  2176                           ;Main_B1.c: 24: ;;
  2177                           ;Main_B1.c: 25: ;;
  2178                           ;Main_B1.c: 26: ;;
  2179                           ;Main_B1.c: 27: ;;
  2180                           ;Main_B1.c: 28: ;;
  2181                           ;Main_B1.c: 30: while (1) {
  2182                           
  2183                           
  2184                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2185  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2186  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2187  0FB7  1C20               	btfss	_myMain,0
  2188  0FB8  2FD8               	goto	l5249
  2189                           
  2190                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2191  0FB9  158A  23DC  158A   	fcall	_DetectSYSC_Signal
  2192                           
  2193                           ;Main_B1.c: 38: getLoad_AD(0x01);
  2194  0FBC  3001               	movlw	1
  2195  0FBD  118A  2669  158A   	fcall	_getLoad_AD
  2196                           
  2197                           ;Main_B1.c: 42: getTemp_AD(0x11);
  2198  0FC0  3011               	movlw	17
  2199  0FC1  158A  2545  158A   	fcall	_getTemp_AD
  2200                           
  2201                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x31);
  2202  0FC4  3031               	movlw	49
  2203  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  2204  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  2205  0FC7  00EC               	movwf	??_main
  2206  0FC8  086C               	movf	??_main,w
  2207  0FC9  00F6               	movwf	getCDS_AD@channel2
  2208  0FCA  3009               	movlw	9
  2209  0FCB  158A  2594  158A   	fcall	_getCDS_AD
  2210                           
  2211                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2212  0FCE  300D               	movlw	13
  2213  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2214  0FD0  1303               	bcf	3,6	;RP1=0, select bank0
  2215  0FD1  00EC               	movwf	??_main
  2216  0FD2  086C               	movf	??_main,w
  2217  0FD3  00F6               	movwf	getPIR_AD@channel2
  2218  0FD4  3005               	movlw	5
  2219  0FD5  118A  23C1  158A   	fcall	_getPIR_AD
  2220  0FD8                     l5249:	
  2221                           
  2222                           ;Main_B1.c: 57: }
  2223                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2224  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2225  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2226  0FDA  1C34               	btfss	_Timer1,0
  2227  0FDB  2FB5               	goto	l5237
  2228                           
  2229                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2230  0FDC  1034               	bcf	_Timer1,0
  2231                           
  2232                           ;Main_B1.c: 96: my_MainTimer();
  2233  0FDD  158A  24D8  158A   	fcall	_my_MainTimer
  2234                           
  2235                           ;Main_B1.c: 97: WDT_Main();
  2236  0FE0  158A  2447  158A   	fcall	_WDT_Main
  2237                           
  2238                           ;Main_B1.c: 98: ;;
  2239                           ;Main_B1.c: 99: ;;
  2240                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2241  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  2242  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  2243  0FE5  1C20               	btfss	_myMain,0
  2244  0FE6  2FB5               	goto	l5237
  2245                           
  2246                           ;Main_B1.c: 101: ;;
  2247                           ;Main_B1.c: 103: LED_Main();
  2248  0FE7  158A  2346  158A   	fcall	_LED_Main
  2249                           
  2250                           ;Main_B1.c: 104: ;;
  2251                           ;Main_B1.c: 106: SYSC_Main();
  2252  0FEA  158A  234C  158A   	fcall	_SYSC_Main
  2253                           
  2254                           ;Main_B1.c: 107: Temp_Main();
  2255  0FED  158A  2352  158A   	fcall	_Temp_Main
  2256                           
  2257                           ;Main_B1.c: 108: Load_Main();
  2258  0FF0  118A  2213  158A   	fcall	_Load_Main
  2259                           
  2260                           ;Main_B1.c: 109: ;;
  2261                           ;Main_B1.c: 111: Lights_Main();
  2262  0FF3  158A  2623  158A   	fcall	_Lights_Main
  2263                           
  2264                           ;Main_B1.c: 112: ;;
  2265                           ;Main_B1.c: 113: ;;
  2266                           ;Main_B1.c: 114: CDS_Main();
  2267  0FF6  158A  25EF  158A   	fcall	_CDS_Main
  2268                           
  2269                           ;Main_B1.c: 115: PIR_Main();
  2270  0FF9  118A  2025  158A   	fcall	_PIR_Main
  2271                           
  2272                           ;Main_B1.c: 117: ;;
  2273                           ;Main_B1.c: 118: ;;
  2274                           ;Main_B1.c: 119: ;;
  2275                           ;Main_B1.c: 120: ;;
  2276                           ;Main_B1.c: 121: Exception_Main();
  2277  0FFC  118A  25F6  158A   	fcall	_Exception_Main
  2278  0FFF  2FB5               	goto	l5237
  2279  1000                     __end_of_main:	
  2280                           ;Main_B1.c: 128: }
  2281                           ;Main_B1.c: 129: }
  2282                           ;Main_B1.c: 163: }
  2283                           ;Main_B1.c: 164: return (0);
  2284                           ;	Return value of _main is never used
  2285                           
  2286                           
  2287                           	psect	text1
  2288  0CD8                     __ptext1:	
  2289 ;; *************** function _my_MainTimer *****************
  2290 ;; Defined at:
  2291 ;;		line 185 in file "../src/Main_B1.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;		None
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;		None
  2296 ;; Return value:  Size  Location     Type
  2297 ;;		None               void
  2298 ;; Registers used:
  2299 ;;		wreg, status,2, status,0
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2305 ;;      Params:         0       0       0       0
  2306 ;;      Locals:         0       0       0       0
  2307 ;;      Temps:          1       0       0       0
  2308 ;;      Totals:         1       0       0       0
  2309 ;;Total ram usage:        1 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    2
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_main
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           
  2320                           ;psect for function _my_MainTimer
  2321  0CD8                     _my_MainTimer:	
  2322                           
  2323                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  2324                           
  2325                           ;incstack = 0
  2326                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0]
  2327  0CD8  1283               	bcf	3,5	;RP0=0, select bank0
  2328  0CD9  1303               	bcf	3,6	;RP1=0, select bank0
  2329  0CDA  1820               	btfsc	_myMain,0
  2330  0CDB  2CE8               	goto	l3761
  2331                           
  2332                           ;Main_B1.c: 189: myMain.PowerCount++;
  2333  0CDC  3001               	movlw	1
  2334  0CDD  00F4               	movwf	??_my_MainTimer
  2335  0CDE  0874               	movf	??_my_MainTimer,w
  2336  0CDF  07A1               	addwf	_myMain+1,f
  2337                           
  2338                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  2339  0CE0  0821               	movf	_myMain+1,w
  2340  0CE1  3A96               	xorlw	150
  2341  0CE2  1D03               	skipz
  2342  0CE3  0008               	return
  2343                           
  2344                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  2345  0CE4  01A1               	clrf	_myMain+1
  2346                           
  2347                           ;Main_B1.c: 192: myMain.PowerON = 1;
  2348  0CE5  1420               	bsf	_myMain,0
  2349                           
  2350                           ;Main_B1.c: 197: ;;
  2351                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  2352  0CE6  1620               	bsf	_myMain,4
  2353                           
  2354                           ;Main_B1.c: 207: }
  2355                           ;Main_B1.c: 208: } else {
  2356  0CE7  0008               	return
  2357  0CE8                     l3761:	
  2358                           
  2359                           ;Main_B1.c: 209: myMain.PowerCount++;
  2360  0CE8  3001               	movlw	1
  2361  0CE9  00F4               	movwf	??_my_MainTimer
  2362  0CEA  0874               	movf	??_my_MainTimer,w
  2363  0CEB  07A1               	addwf	_myMain+1,f
  2364                           
  2365                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  2366  0CEC  0821               	movf	_myMain+1,w
  2367  0CED  3A64               	xorlw	100
  2368  0CEE  1D03               	skipz
  2369  0CEF  0008               	return
  2370                           
  2371                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  2372  0CF0  01A1               	clrf	_myMain+1
  2373  0CF1  0008               	return
  2374  0CF2                     __end_of_my_MainTimer:	
  2375                           
  2376                           	psect	text2
  2377  0B45                     __ptext2:	
  2378 ;; *************** function _myMain_Initialization *****************
  2379 ;; Defined at:
  2380 ;;		line 170 in file "../src/Main_B1.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;		None
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;		None
  2385 ;; Return value:  Size  Location     Type
  2386 ;;		None               void
  2387 ;; Registers used:
  2388 ;;		None
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2394 ;;      Params:         0       0       0       0
  2395 ;;      Locals:         0       0       0       0
  2396 ;;      Temps:          0       0       0       0
  2397 ;;      Totals:         0       0       0       0
  2398 ;;Total ram usage:        0 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    2
  2401 ;; This function calls:
  2402 ;;		Nothing
  2403 ;; This function is called by:
  2404 ;;		_main
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           
  2409                           ;psect for function _myMain_Initialization
  2410  0B45                     _myMain_Initialization:	
  2411                           
  2412                           ;incstack = 0
  2413                           ; Regs used in _myMain_Initialization: []
  2414  0B45  0008               	return
  2415  0B46                     __end_of_myMain_Initialization:	
  2416                           
  2417                           	psect	text3
  2418  0D45                     __ptext3:	
  2419 ;; *************** function _getTemp_AD *****************
  2420 ;; Defined at:
  2421 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;  channel         1    wreg     unsigned char 
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;  channel         1    6[COMMON] unsigned char 
  2426 ;; Return value:  Size  Location     Type
  2427 ;;		None               void
  2428 ;; Registers used:
  2429 ;;		wreg, status,2, status,0, pclath, cstack
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2435 ;;      Params:         0       0       0       0
  2436 ;;      Locals:         1       0       0       0
  2437 ;;      Temps:          0       2       0       0
  2438 ;;      Totals:         1       2       0       0
  2439 ;;Total ram usage:        3 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; Hardware stack levels required when called:    4
  2442 ;; This function calls:
  2443 ;;		_getAD
  2444 ;; This function is called by:
  2445 ;;		_main
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           
  2450                           ;psect for function _getTemp_AD
  2451  0D45                     _getTemp_AD:	
  2452                           
  2453                           ;incstack = 0
  2454                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2455                           ;getTemp_AD@channel stored from wreg
  2456  0D45  00F6               	movwf	getTemp_AD@channel
  2457                           
  2458                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  2459  0D46  1283               	bcf	3,5	;RP0=0, select bank0
  2460  0D47  1303               	bcf	3,6	;RP1=0, select bank0
  2461  0D48  1D3A               	btfss	_Temp,2
  2462  0D49  0008               	return
  2463                           
  2464                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0x70);
  2465  0D4A  3070               	movlw	112
  2466  0D4B  00D9               	movwf	??_getTemp_AD
  2467  0D4C  0859               	movf	??_getTemp_AD,w
  2468  0D4D  00F4               	movwf	getAD@adcon1
  2469  0D4E  0876               	movf	getTemp_AD@channel,w
  2470  0D4F  158A  2529  158A   	fcall	_getAD
  2471  0D52  1283               	bcf	3,5	;RP0=0, select bank0
  2472  0D53  1303               	bcf	3,6	;RP1=0, select bank0
  2473  0D54  00DA               	movwf	??_getTemp_AD+1
  2474  0D55  085A               	movf	??_getTemp_AD+1,w
  2475  0D56  00C3               	movwf	_Temp+9
  2476                           
  2477                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  2478  0D57  0843               	movf	_Temp+9,w
  2479  0D58  1903               	btfsc	3,2
  2480  0D59  0008               	return
  2481                           
  2482                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  2483  0D5A  0843               	movf	_Temp+9,w
  2484  0D5B  0241               	subwf	_Temp+7,w
  2485  0D5C  1803               	skipnc
  2486  0D5D  2D63               	goto	l4771
  2487                           
  2488                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  2489  0D5E  0843               	movf	_Temp+9,w
  2490  0D5F  00D9               	movwf	??_getTemp_AD
  2491  0D60  0859               	movf	??_getTemp_AD,w
  2492  0D61  00C1               	movwf	_Temp+7
  2493                           
  2494                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  2495  0D62  0008               	return
  2496  0D63                     l4771:	
  2497  0D63  0843               	movf	_Temp+9,w
  2498  0D64  0242               	subwf	_Temp+8,w
  2499  0D65  1803               	skipnc
  2500  0D66  0008               	return
  2501                           
  2502                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  2503  0D67  0843               	movf	_Temp+9,w
  2504  0D68  00D9               	movwf	??_getTemp_AD
  2505  0D69  0859               	movf	??_getTemp_AD,w
  2506  0D6A  00C2               	movwf	_Temp+8
  2507  0D6B  0008               	return
  2508  0D6C                     __end_of_getTemp_AD:	
  2509                           
  2510                           	psect	text4
  2511  03C1                     __ptext4:	
  2512 ;; *************** function _getPIR_AD *****************
  2513 ;; Defined at:
  2514 ;;		line 222 in file "../src/PIR_B1.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;  channel1        1    wreg     unsigned char 
  2517 ;;  channel2        1    6[COMMON] unsigned char 
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  channel1        1   12[BANK0 ] unsigned char 
  2520 ;;  i               1   13[BANK0 ] unsigned char 
  2521 ;;  j               1   11[BANK0 ] unsigned char 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;		None               void
  2524 ;; Registers used:
  2525 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2531 ;;      Params:         1       0       0       0
  2532 ;;      Locals:         0       3       0       0
  2533 ;;      Temps:          0       3       0       0
  2534 ;;      Totals:         1       6       0       0
  2535 ;;Total ram usage:        7 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    4
  2538 ;; This function calls:
  2539 ;;		___awdiv
  2540 ;;		___lwdiv
  2541 ;;		_getAD
  2542 ;; This function is called by:
  2543 ;;		_main
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           
  2548                           ;psect for function _getPIR_AD
  2549  03C1                     _getPIR_AD:	
  2550                           
  2551                           ;incstack = 0
  2552                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2553                           ;getPIR_AD@channel1 stored from wreg
  2554  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  2555  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  2556  03C3  00E5               	movwf	getPIR_AD@channel1
  2557                           
  2558                           ;PIR_B1.c: 223: char i = 0, j = 0;
  2559  03C4  01E6               	clrf	getPIR_AD@i
  2560  03C5  01E4               	clrf	getPIR_AD@j
  2561                           
  2562                           ;PIR_B1.c: 225: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2563  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  2564  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  2565  03C8  1CA0               	btfss	__PIR^(0+128),1
  2566  03C9  0008               	return
  2567  03CA  1920               	btfsc	__PIR^(0+128),2
  2568  03CB  0008               	return
  2569                           
  2570                           ;PIR_B1.c: 226: _PIR.GO = 1;
  2571  03CC  1520               	bsf	__PIR^(0+128),2
  2572                           
  2573                           ;PIR_B1.c: 227: _PIR.ADRES = getAD(channel1, 0x70);
  2574  03CD  3070               	movlw	112
  2575  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  2576  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  2577  03D0  00E1               	movwf	??_getPIR_AD
  2578  03D1  0861               	movf	??_getPIR_AD,w
  2579  03D2  00F4               	movwf	getAD@adcon1
  2580  03D3  0865               	movf	getPIR_AD@channel1,w
  2581  03D4  158A  2529  118A   	fcall	_getAD
  2582  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  2583  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  2584  03D9  00E2               	movwf	??_getPIR_AD+1
  2585  03DA  0862               	movf	??_getPIR_AD+1,w
  2586  03DB  1683               	bsf	3,5	;RP0=1, select bank1
  2587  03DC  1303               	bcf	3,6	;RP1=0, select bank1
  2588  03DD  00A2               	movwf	(__PIR^(0+128)+2)
  2589                           
  2590                           ;PIR_B1.c: 228: _PIR.VRAD = _PIR.ADRES / 25;
  2591  03DE  3019               	movlw	25
  2592  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  2593  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  2594  03E1  00D9               	movwf	___awdiv@divisor
  2595  03E2  3000               	movlw	0
  2596  03E3  00DA               	movwf	___awdiv@divisor+1
  2597  03E4  1683               	bsf	3,5	;RP0=1, select bank1
  2598  03E5  1303               	bcf	3,6	;RP1=0, select bank1
  2599  03E6  0822               	movf	(__PIR^(0+128)+2),w
  2600  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  2601  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  2602  03E9  00E1               	movwf	??_getPIR_AD
  2603  03EA  01E2               	clrf	??_getPIR_AD+1
  2604  03EB  0861               	movf	??_getPIR_AD,w
  2605  03EC  00DB               	movwf	___awdiv@dividend
  2606  03ED  0862               	movf	??_getPIR_AD+1,w
  2607  03EE  00DC               	movwf	___awdiv@dividend+1
  2608  03EF  158A  26DC  118A   	fcall	___awdiv
  2609  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2610  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  2611  03F4  0859               	movf	?___awdiv,w
  2612  03F5  00E3               	movwf	??_getPIR_AD+2
  2613  03F6  0863               	movf	??_getPIR_AD+2,w
  2614  03F7  1683               	bsf	3,5	;RP0=1, select bank1
  2615  03F8  1303               	bcf	3,6	;RP1=0, select bank1
  2616  03F9  00A3               	movwf	(__PIR^(0+128)+3)
  2617                           
  2618                           ;PIR_B1.c: 229: _PIR.VRAD1 = _PIR.ADRES;
  2619  03FA  0822               	movf	(__PIR^(0+128)+2),w
  2620  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  2621  03FC  1303               	bcf	3,6	;RP1=0, select bank0
  2622  03FD  00E1               	movwf	??_getPIR_AD
  2623  03FE  0861               	movf	??_getPIR_AD,w
  2624  03FF  1683               	bsf	3,5	;RP0=1, select bank1
  2625  0400  1303               	bcf	3,6	;RP1=0, select bank1
  2626  0401  00A4               	movwf	(__PIR^(0+128)+4)
  2627                           
  2628                           ;PIR_B1.c: 230: _PIR.ADRES = getAD(channel2, 0x70);
  2629  0402  3070               	movlw	112
  2630  0403  1283               	bcf	3,5	;RP0=0, select bank0
  2631  0404  1303               	bcf	3,6	;RP1=0, select bank0
  2632  0405  00E1               	movwf	??_getPIR_AD
  2633  0406  0861               	movf	??_getPIR_AD,w
  2634  0407  00F4               	movwf	getAD@adcon1
  2635  0408  0876               	movf	getPIR_AD@channel2,w
  2636  0409  158A  2529  118A   	fcall	_getAD
  2637  040C  1283               	bcf	3,5	;RP0=0, select bank0
  2638  040D  1303               	bcf	3,6	;RP1=0, select bank0
  2639  040E  00E2               	movwf	??_getPIR_AD+1
  2640  040F  0862               	movf	??_getPIR_AD+1,w
  2641  0410  1683               	bsf	3,5	;RP0=1, select bank1
  2642  0411  1303               	bcf	3,6	;RP1=0, select bank1
  2643  0412  00A2               	movwf	(__PIR^(0+128)+2)
  2644                           
  2645                           ;PIR_B1.c: 231: _PIR.SignalAD = _PIR.ADRES;
  2646  0413  0822               	movf	(__PIR^(0+128)+2),w
  2647  0414  1283               	bcf	3,5	;RP0=0, select bank0
  2648  0415  1303               	bcf	3,6	;RP1=0, select bank0
  2649  0416  00E1               	movwf	??_getPIR_AD
  2650  0417  0861               	movf	??_getPIR_AD,w
  2651  0418  1683               	bsf	3,5	;RP0=1, select bank1
  2652  0419  1303               	bcf	3,6	;RP1=0, select bank1
  2653  041A  00A1               	movwf	(__PIR^(0+128)+1)
  2654                           
  2655                           ;PIR_B1.c: 233: if (_PIR.VRAD < 1) {
  2656  041B  08A3               	movf	(__PIR^(0+128)+3),f
  2657  041C  1D03               	skipz
  2658  041D  2C20               	goto	l4793
  2659                           
  2660                           ;PIR_B1.c: 234: _PIR.CloseTimeValue = 5;
  2661  041E  3005               	movlw	5
  2662  041F  2C25               	goto	L1
  2663  0420                     l4793:	
  2664                           ;PIR_B1.c: 235: } else if (_PIR.VRAD < 3) {
  2665                           
  2666  0420  3003               	movlw	3
  2667  0421  0223               	subwf	(__PIR^(0+128)+3),w
  2668  0422  1803               	skipnc
  2669  0423  2C28               	goto	l4797
  2670                           
  2671                           ;PIR_B1.c: 236: _PIR.CloseTimeValue = 60;
  2672  0424  303C               	movlw	60
  2673  0425                     L1:	
  2674  0425  00C7               	movwf	(__PIR^(0+128)+39)
  2675  0426  3000               	movlw	0
  2676  0427  2C43               	goto	L5
  2677  0428                     l4797:	
  2678                           ;PIR_B1.c: 237: } else if (_PIR.VRAD < 5) {
  2679                           
  2680  0428  3005               	movlw	5
  2681  0429  0223               	subwf	(__PIR^(0+128)+3),w
  2682  042A  1803               	skipnc
  2683  042B  2C30               	goto	l4801
  2684                           
  2685                           ;PIR_B1.c: 238: _PIR.CloseTimeValue = 300;
  2686  042C  302C               	movlw	44
  2687  042D  00C7               	movwf	(__PIR^(0+128)+39)
  2688  042E  3001               	movlw	1
  2689  042F  2C43               	goto	L5
  2690  0430                     l4801:	
  2691                           ;PIR_B1.c: 239: } else if (_PIR.VRAD < 7) {
  2692                           
  2693  0430  3007               	movlw	7
  2694  0431  0223               	subwf	(__PIR^(0+128)+3),w
  2695  0432  1803               	skipnc
  2696  0433  2C38               	goto	l4805
  2697                           
  2698                           ;PIR_B1.c: 240: _PIR.CloseTimeValue = 600;
  2699  0434  3058               	movlw	88
  2700  0435  00C7               	movwf	(__PIR^(0+128)+39)
  2701  0436  3002               	movlw	2
  2702  0437  2C43               	goto	L5
  2703  0438                     l4805:	
  2704                           ;PIR_B1.c: 241: } else if (_PIR.VRAD < 9) {
  2705                           
  2706  0438  3009               	movlw	9
  2707  0439  0223               	subwf	(__PIR^(0+128)+3),w
  2708  043A  1803               	skipnc
  2709  043B  2C40               	goto	l4809
  2710                           
  2711                           ;PIR_B1.c: 242: _PIR.CloseTimeValue = 900;
  2712  043C  3084               	movlw	132
  2713  043D  00C7               	movwf	(__PIR^(0+128)+39)
  2714  043E  3003               	movlw	3
  2715  043F  2C43               	goto	L5
  2716  0440                     l4809:	
  2717                           ;PIR_B1.c: 243: } else {
  2718                           
  2719                           
  2720                           ;PIR_B1.c: 244: _PIR.CloseTimeValue = 1200;
  2721  0440  30B0               	movlw	176
  2722  0441  00C7               	movwf	(__PIR^(0+128)+39)
  2723  0442  3004               	movlw	4
  2724  0443                     L5:	
  2725  0443  00C8               	movwf	(__PIR^(0+128)+40)
  2726                           
  2727                           ;PIR_B1.c: 245: }
  2728                           ;PIR_B1.c: 254: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2729  0444  0821               	movf	(__PIR^(0+128)+1),w
  2730  0445  1283               	bcf	3,5	;RP0=0, select bank0
  2731  0446  1303               	bcf	3,6	;RP1=0, select bank0
  2732  0447  00E1               	movwf	??_getPIR_AD
  2733  0448  1683               	bsf	3,5	;RP0=1, select bank1
  2734  0449  1303               	bcf	3,6	;RP1=0, select bank1
  2735  044A  0827               	movf	(__PIR^(0+128)+7),w
  2736  044B  3EA8               	addlw	(__PIR+8)& (0+255)
  2737  044C  0084               	movwf	4
  2738  044D  1283               	bcf	3,5	;RP0=0, select bank0
  2739  044E  1303               	bcf	3,6	;RP1=0, select bank0
  2740  044F  0861               	movf	??_getPIR_AD,w
  2741  0450  1383               	bcf	3,7	;select IRP bank1
  2742  0451  0080               	movwf	0
  2743                           
  2744                           ;PIR_B1.c: 255: for (i = 0; i < 10; i++) {
  2745  0452  01E6               	clrf	getPIR_AD@i
  2746  0453  300A               	movlw	10
  2747  0454  0266               	subwf	getPIR_AD@i,w
  2748  0455  1803               	btfsc	3,0
  2749  0456  2C73               	goto	l4825
  2750  0457                     l4819:	
  2751                           
  2752                           ;PIR_B1.c: 256: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2753  0457  0866               	movf	getPIR_AD@i,w
  2754  0458  3EA8               	addlw	(__PIR+8)& (0+255)
  2755  0459  0084               	movwf	4
  2756  045A  0800               	movf	0,w
  2757  045B  00E1               	movwf	??_getPIR_AD
  2758  045C  01E2               	clrf	??_getPIR_AD+1
  2759  045D  0861               	movf	??_getPIR_AD,w
  2760  045E  1683               	bsf	3,5	;RP0=1, select bank1
  2761  045F  1303               	bcf	3,6	;RP1=0, select bank1
  2762  0460  07B2               	addwf	(__PIR^(0+128)+18),f
  2763  0461  1803               	skipnc
  2764  0462  0AB3               	incf	((__PIR+1)^(0+128)+18),f
  2765  0463  1283               	bcf	3,5	;RP0=0, select bank0
  2766  0464  1303               	bcf	3,6	;RP1=0, select bank0
  2767  0465  0862               	movf	??_getPIR_AD+1,w
  2768  0466  1683               	bsf	3,5	;RP0=1, select bank1
  2769  0467  1303               	bcf	3,6	;RP1=0, select bank1
  2770  0468  07B3               	addwf	((__PIR+1)^(0+128)+18),f
  2771  0469  3001               	movlw	1
  2772  046A  1283               	bcf	3,5	;RP0=0, select bank0
  2773  046B  1303               	bcf	3,6	;RP1=0, select bank0
  2774  046C  00E1               	movwf	??_getPIR_AD
  2775  046D  0861               	movf	??_getPIR_AD,w
  2776  046E  07E6               	addwf	getPIR_AD@i,f
  2777  046F  300A               	movlw	10
  2778  0470  0266               	subwf	getPIR_AD@i,w
  2779  0471  1C03               	skipc
  2780  0472  2C57               	goto	l4819
  2781  0473                     l4825:	
  2782                           
  2783                           ;PIR_B1.c: 257: }
  2784                           ;PIR_B1.c: 258: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2785  0473  300A               	movlw	10
  2786  0474  00D9               	movwf	___lwdiv@divisor
  2787  0475  3000               	movlw	0
  2788  0476  00DA               	movwf	___lwdiv@divisor+1
  2789  0477  1683               	bsf	3,5	;RP0=1, select bank1
  2790  0478  1303               	bcf	3,6	;RP1=0, select bank1
  2791  0479  0833               	movf	((__PIR+1)^(0+128)+18),w
  2792  047A  1283               	bcf	3,5	;RP0=0, select bank0
  2793  047B  1303               	bcf	3,6	;RP1=0, select bank0
  2794  047C  01DC               	clrf	___lwdiv@dividend+1
  2795  047D  07DC               	addwf	___lwdiv@dividend+1,f
  2796  047E  1683               	bsf	3,5	;RP0=1, select bank1
  2797  047F  1303               	bcf	3,6	;RP1=0, select bank1
  2798  0480  0832               	movf	(__PIR^(0+128)+18),w
  2799  0481  1283               	bcf	3,5	;RP0=0, select bank0
  2800  0482  1303               	bcf	3,6	;RP1=0, select bank0
  2801  0483  01DB               	clrf	___lwdiv@dividend
  2802  0484  07DB               	addwf	___lwdiv@dividend,f
  2803  0485  158A  269C  118A   	fcall	___lwdiv
  2804  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2805  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2806  048A  0859               	movf	?___lwdiv,w
  2807  048B  00E1               	movwf	??_getPIR_AD
  2808  048C  1683               	bsf	3,5	;RP0=1, select bank1
  2809  048D  1303               	bcf	3,6	;RP1=0, select bank1
  2810  048E  0834               	movf	(__PIR^(0+128)+20),w
  2811  048F  3EB5               	addlw	(__PIR+21)& (0+255)
  2812  0490  0084               	movwf	4
  2813  0491  1283               	bcf	3,5	;RP0=0, select bank0
  2814  0492  1303               	bcf	3,6	;RP1=0, select bank0
  2815  0493  0861               	movf	??_getPIR_AD,w
  2816  0494  1383               	bcf	3,7	;select IRP bank1
  2817  0495  0080               	movwf	0
  2818                           
  2819                           ;PIR_B1.c: 259: _PIR.TenAverageValue = 0;
  2820  0496  1683               	bsf	3,5	;RP0=1, select bank1
  2821  0497  1303               	bcf	3,6	;RP1=0, select bank1
  2822  0498  01B2               	clrf	(__PIR^(0+128)+18)
  2823  0499  01B3               	clrf	((__PIR+1)^(0+128)+18)
  2824                           
  2825                           ;PIR_B1.c: 261: for (i = 0; i <= 9; i++) {
  2826  049A  1283               	bcf	3,5	;RP0=0, select bank0
  2827  049B  1303               	bcf	3,6	;RP1=0, select bank0
  2828  049C  01E6               	clrf	getPIR_AD@i
  2829  049D  300A               	movlw	10
  2830  049E  0266               	subwf	getPIR_AD@i,w
  2831  049F  1803               	btfsc	3,0
  2832  04A0  2CBD               	goto	l4841
  2833  04A1                     l4835:	
  2834                           
  2835                           ;PIR_B1.c: 262: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2836  04A1  0866               	movf	getPIR_AD@i,w
  2837  04A2  3EB5               	addlw	(__PIR+21)& (0+255)
  2838  04A3  0084               	movwf	4
  2839  04A4  0800               	movf	0,w
  2840  04A5  00E1               	movwf	??_getPIR_AD
  2841  04A6  01E2               	clrf	??_getPIR_AD+1
  2842  04A7  0861               	movf	??_getPIR_AD,w
  2843  04A8  1683               	bsf	3,5	;RP0=1, select bank1
  2844  04A9  1303               	bcf	3,6	;RP1=0, select bank1
  2845  04AA  07BF               	addwf	(__PIR^(0+128)+31),f
  2846  04AB  1803               	skipnc
  2847  04AC  0AC0               	incf	((__PIR+1)^(0+128)+31),f
  2848  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  2849  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  2850  04AF  0862               	movf	??_getPIR_AD+1,w
  2851  04B0  1683               	bsf	3,5	;RP0=1, select bank1
  2852  04B1  1303               	bcf	3,6	;RP1=0, select bank1
  2853  04B2  07C0               	addwf	((__PIR+1)^(0+128)+31),f
  2854  04B3  3001               	movlw	1
  2855  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  2856  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  2857  04B6  00E1               	movwf	??_getPIR_AD
  2858  04B7  0861               	movf	??_getPIR_AD,w
  2859  04B8  07E6               	addwf	getPIR_AD@i,f
  2860  04B9  300A               	movlw	10
  2861  04BA  0266               	subwf	getPIR_AD@i,w
  2862  04BB  1C03               	skipc
  2863  04BC  2CA1               	goto	l4835
  2864  04BD                     l4841:	
  2865                           
  2866                           ;PIR_B1.c: 263: }
  2867                           ;PIR_B1.c: 264: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2868  04BD  300A               	movlw	10
  2869  04BE  00D9               	movwf	___lwdiv@divisor
  2870  04BF  3000               	movlw	0
  2871  04C0  00DA               	movwf	___lwdiv@divisor+1
  2872  04C1  1683               	bsf	3,5	;RP0=1, select bank1
  2873  04C2  1303               	bcf	3,6	;RP1=0, select bank1
  2874  04C3  0840               	movf	((__PIR+1)^(0+128)+31),w
  2875  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  2876  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  2877  04C6  01DC               	clrf	___lwdiv@dividend+1
  2878  04C7  07DC               	addwf	___lwdiv@dividend+1,f
  2879  04C8  1683               	bsf	3,5	;RP0=1, select bank1
  2880  04C9  1303               	bcf	3,6	;RP1=0, select bank1
  2881  04CA  083F               	movf	(__PIR^(0+128)+31),w
  2882  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2883  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  2884  04CD  01DB               	clrf	___lwdiv@dividend
  2885  04CE  07DB               	addwf	___lwdiv@dividend,f
  2886  04CF  158A  269C  118A   	fcall	___lwdiv
  2887  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  2888  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  2889  04D4  0859               	movf	?___lwdiv,w
  2890  04D5  00E1               	movwf	??_getPIR_AD
  2891  04D6  0861               	movf	??_getPIR_AD,w
  2892  04D7  1683               	bsf	3,5	;RP0=1, select bank1
  2893  04D8  1303               	bcf	3,6	;RP1=0, select bank1
  2894  04D9  00A6               	movwf	(__PIR^(0+128)+6)
  2895                           
  2896                           ;PIR_B1.c: 265: _PIR.HundredAverageValue = 0;
  2897  04DA  01BF               	clrf	(__PIR^(0+128)+31)
  2898  04DB  01C0               	clrf	((__PIR+1)^(0+128)+31)
  2899                           
  2900                           ;PIR_B1.c: 267: if (_PIR.TenCount < 10) {
  2901  04DC  300A               	movlw	10
  2902  04DD  0227               	subwf	(__PIR^(0+128)+7),w
  2903  04DE  1803               	skipnc
  2904  04DF  2CE9               	goto	l4849
  2905                           
  2906                           ;PIR_B1.c: 268: _PIR.TenCount++;
  2907  04E0  3001               	movlw	1
  2908  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  2909  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  2910  04E3  00E1               	movwf	??_getPIR_AD
  2911  04E4  0861               	movf	??_getPIR_AD,w
  2912  04E5  1683               	bsf	3,5	;RP0=1, select bank1
  2913  04E6  1303               	bcf	3,6	;RP1=0, select bank1
  2914  04E7  07A7               	addwf	(__PIR^(0+128)+7),f
  2915                           
  2916                           ;PIR_B1.c: 269: } else {
  2917  04E8  0008               	return
  2918  04E9                     l4849:	
  2919                           
  2920                           ;PIR_B1.c: 270: _PIR.TenCount = 0;
  2921  04E9  01A7               	clrf	(__PIR^(0+128)+7)
  2922                           
  2923                           ;PIR_B1.c: 271: if (_PIR.HundreCount < 10)
  2924  04EA  300A               	movlw	10
  2925  04EB  0234               	subwf	(__PIR^(0+128)+20),w
  2926  04EC  1803               	skipnc
  2927  04ED  2CF7               	goto	l4855
  2928                           
  2929                           ;PIR_B1.c: 272: _PIR.HundreCount++;
  2930  04EE  3001               	movlw	1
  2931  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  2932  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  2933  04F1  00E1               	movwf	??_getPIR_AD
  2934  04F2  0861               	movf	??_getPIR_AD,w
  2935  04F3  1683               	bsf	3,5	;RP0=1, select bank1
  2936  04F4  1303               	bcf	3,6	;RP1=0, select bank1
  2937  04F5  07B4               	addwf	(__PIR^(0+128)+20),f
  2938  04F6  0008               	return
  2939  04F7                     l4855:	
  2940                           
  2941                           ;PIR_B1.c: 273: else
  2942                           ;PIR_B1.c: 274: _PIR.HundreCount = 0;
  2943  04F7  01B4               	clrf	(__PIR^(0+128)+20)
  2944  04F8  0008               	return
  2945  04F9                     __end_of_getPIR_AD:	
  2946                           
  2947                           	psect	text5
  2948  0669                     __ptext5:	
  2949 ;; *************** function _getLoad_AD *****************
  2950 ;; Defined at:
  2951 ;;		line 15 in file "../src/OverLoad_B1.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  channel         1    wreg     unsigned char 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  channel         1    2[BANK0 ] unsigned char 
  2956 ;;  i               1    5[BANK0 ] unsigned char 
  2957 ;;  j               1    4[BANK0 ] unsigned char 
  2958 ;;  k               1    3[BANK0 ] unsigned char 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;		None               void
  2961 ;; Registers used:
  2962 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2968 ;;      Params:         0       0       0       0
  2969 ;;      Locals:         0       4       0       0
  2970 ;;      Temps:          0       2       0       0
  2971 ;;      Totals:         0       6       0       0
  2972 ;;Total ram usage:        6 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    4
  2975 ;; This function calls:
  2976 ;;		_getAD
  2977 ;; This function is called by:
  2978 ;;		_main
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           
  2983                           ;psect for function _getLoad_AD
  2984  0669                     _getLoad_AD:	
  2985                           
  2986                           ;incstack = 0
  2987                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2988                           ;getLoad_AD@channel stored from wreg
  2989  0669  1283               	bcf	3,5	;RP0=0, select bank0
  2990  066A  1303               	bcf	3,6	;RP1=0, select bank0
  2991  066B  00DB               	movwf	getLoad_AD@channel
  2992                           
  2993                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  2994  066C  01DE               	clrf	getLoad_AD@i
  2995  066D  01DD               	clrf	getLoad_AD@j
  2996  066E  01DC               	clrf	getLoad_AD@k
  2997                           
  2998                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  2999  066F  1683               	bsf	3,5	;RP0=1, select bank1
  3000  0670  1303               	bcf	3,6	;RP1=0, select bank1
  3001  0671  1E4F               	btfss	_Load^(0+128),4
  3002  0672  0008               	return
  3003                           
  3004                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0x73);
  3005  0673  3073               	movlw	115
  3006  0674  1283               	bcf	3,5	;RP0=0, select bank0
  3007  0675  1303               	bcf	3,6	;RP1=0, select bank0
  3008  0676  00D9               	movwf	??_getLoad_AD
  3009  0677  0859               	movf	??_getLoad_AD,w
  3010  0678  00F4               	movwf	getAD@adcon1
  3011  0679  085B               	movf	getLoad_AD@channel,w
  3012  067A  158A  2529  118A   	fcall	_getAD
  3013  067D  1283               	bcf	3,5	;RP0=0, select bank0
  3014  067E  1303               	bcf	3,6	;RP1=0, select bank0
  3015  067F  00DA               	movwf	??_getLoad_AD+1
  3016  0680  085A               	movf	??_getLoad_AD+1,w
  3017  0681  1683               	bsf	3,5	;RP0=1, select bank1
  3018  0682  1303               	bcf	3,6	;RP1=0, select bank1
  3019  0683  00E4               	movwf	(_Load^(0+128)+21)
  3020                           
  3021                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3022  0684  1283               	bcf	3,5	;RP0=0, select bank0
  3023  0685  1303               	bcf	3,6	;RP1=0, select bank0
  3024  0686  01DE               	clrf	getLoad_AD@i
  3025  0687  3004               	movlw	4
  3026  0688  025E               	subwf	getLoad_AD@i,w
  3027  0689  1803               	btfsc	3,0
  3028  068A  2EB0               	goto	l4741
  3029  068B                     l4729:	
  3030                           
  3031                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  3032  068B  085E               	movf	getLoad_AD@i,w
  3033  068C  3ED9               	addlw	(_Load+10)& (0+255)
  3034  068D  0084               	movwf	4
  3035  068E  1683               	bsf	3,5	;RP0=1, select bank1
  3036  068F  1303               	bcf	3,6	;RP1=0, select bank1
  3037  0690  0864               	movf	(_Load^(0+128)+21),w
  3038  0691  1383               	bcf	3,7	;select IRP bank1
  3039  0692  0200               	subwf	0,w
  3040  0693  1803               	skipnc
  3041  0694  2EA7               	goto	l4737
  3042  0695  1283               	bcf	3,5	;RP0=0, select bank0
  3043  0696  1303               	bcf	3,6	;RP1=0, select bank0
  3044  0697  08DD               	movf	getLoad_AD@j,f
  3045  0698  1D03               	skipz
  3046  0699  2EA7               	goto	l4737
  3047                           
  3048                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  3049  069A  1683               	bsf	3,5	;RP0=1, select bank1
  3050  069B  1303               	bcf	3,6	;RP1=0, select bank1
  3051  069C  0864               	movf	(_Load^(0+128)+21),w
  3052  069D  1283               	bcf	3,5	;RP0=0, select bank0
  3053  069E  1303               	bcf	3,6	;RP1=0, select bank0
  3054  069F  00D9               	movwf	??_getLoad_AD
  3055  06A0  085E               	movf	getLoad_AD@i,w
  3056  06A1  3ED9               	addlw	(_Load+10)& (0+255)
  3057  06A2  0084               	movwf	4
  3058  06A3  0859               	movf	??_getLoad_AD,w
  3059  06A4  0080               	movwf	0
  3060                           
  3061                           ;OverLoad_B1.c: 24: j = 1;
  3062  06A5  01DD               	clrf	getLoad_AD@j
  3063  06A6  0ADD               	incf	getLoad_AD@j,f
  3064  06A7                     l4737:	
  3065  06A7  3001               	movlw	1
  3066  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  3067  06A9  00D9               	movwf	??_getLoad_AD
  3068  06AA  0859               	movf	??_getLoad_AD,w
  3069  06AB  07DE               	addwf	getLoad_AD@i,f
  3070  06AC  3004               	movlw	4
  3071  06AD  025E               	subwf	getLoad_AD@i,w
  3072  06AE  1C03               	skipc
  3073  06AF  2E8B               	goto	l4729
  3074  06B0                     l4741:	
  3075                           
  3076                           ;OverLoad_B1.c: 25: }
  3077                           ;OverLoad_B1.c: 26: }
  3078                           ;OverLoad_B1.c: 27: if (j == 0) {
  3079  06B0  08DD               	movf	getLoad_AD@j,f
  3080  06B1  1D03               	skipz
  3081  06B2  0008               	return
  3082                           
  3083                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3084  06B3  01DE               	clrf	getLoad_AD@i
  3085  06B4                     L6:	
  3086  06B4  3004               	movlw	4
  3087  06B5  025E               	subwf	getLoad_AD@i,w
  3088  06B6  1803               	btfsc	3,0
  3089  06B7  0008               	return
  3090                           
  3091                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  3092  06B8  085E               	movf	getLoad_AD@i,w
  3093  06B9  3EDE               	addlw	(_Load+15)& (0+255)
  3094  06BA  0084               	movwf	4
  3095  06BB  1383               	bcf	3,7	;select IRP bank1
  3096  06BC  0800               	movf	0,w
  3097  06BD  1683               	bsf	3,5	;RP0=1, select bank1
  3098  06BE  1303               	bcf	3,6	;RP1=0, select bank1
  3099  06BF  0264               	subwf	(_Load^(0+128)+21),w
  3100  06C0  1803               	skipnc
  3101  06C1  2ED4               	goto	l4757
  3102  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  3103  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  3104  06C4  08DC               	movf	getLoad_AD@k,f
  3105  06C5  1D03               	skipz
  3106  06C6  2ED4               	goto	l4757
  3107                           
  3108                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  3109  06C7  1683               	bsf	3,5	;RP0=1, select bank1
  3110  06C8  1303               	bcf	3,6	;RP1=0, select bank1
  3111  06C9  0864               	movf	(_Load^(0+128)+21),w
  3112  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  3113  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  3114  06CC  00D9               	movwf	??_getLoad_AD
  3115  06CD  085E               	movf	getLoad_AD@i,w
  3116  06CE  3EDE               	addlw	(_Load+15)& (0+255)
  3117  06CF  0084               	movwf	4
  3118  06D0  0859               	movf	??_getLoad_AD,w
  3119  06D1  0080               	movwf	0
  3120                           
  3121                           ;OverLoad_B1.c: 31: k = 1;
  3122  06D2  01DC               	clrf	getLoad_AD@k
  3123  06D3  0ADC               	incf	getLoad_AD@k,f
  3124  06D4                     l4757:	
  3125  06D4  3001               	movlw	1
  3126  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  3127  06D6  00D9               	movwf	??_getLoad_AD
  3128  06D7  0859               	movf	??_getLoad_AD,w
  3129  06D8  07DE               	addwf	getLoad_AD@i,f
  3130  06D9  2EB4               	goto	L6
  3131  06DA                     __end_of_getLoad_AD:	
  3132                           
  3133                           	psect	text6
  3134  0D94                     __ptext6:	
  3135 ;; *************** function _getCDS_AD *****************
  3136 ;; Defined at:
  3137 ;;		line 48 in file "../src/CDS_B1.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;  channel1        1    wreg     unsigned char 
  3140 ;;  channel2        1    6[COMMON] unsigned char 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;  channel1        1    4[BANK0 ] unsigned char 
  3143 ;;  j               1    3[BANK0 ] unsigned char 
  3144 ;;  i               1    2[BANK0 ] unsigned char 
  3145 ;; Return value:  Size  Location     Type
  3146 ;;		None               void
  3147 ;; Registers used:
  3148 ;;		wreg, status,2, status,0, pclath, cstack
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3154 ;;      Params:         1       0       0       0
  3155 ;;      Locals:         0       3       0       0
  3156 ;;      Temps:          0       2       0       0
  3157 ;;      Totals:         1       5       0       0
  3158 ;;Total ram usage:        6 bytes
  3159 ;; Hardware stack levels used:    1
  3160 ;; Hardware stack levels required when called:    4
  3161 ;; This function calls:
  3162 ;;		_getAD
  3163 ;; This function is called by:
  3164 ;;		_main
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           
  3169                           ;psect for function _getCDS_AD
  3170  0D94                     _getCDS_AD:	
  3171                           
  3172                           ;incstack = 0
  3173                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3174                           ;getCDS_AD@channel1 stored from wreg
  3175  0D94  1283               	bcf	3,5	;RP0=0, select bank0
  3176  0D95  1303               	bcf	3,6	;RP1=0, select bank0
  3177  0D96  00DD               	movwf	getCDS_AD@channel1
  3178                           
  3179                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3180  0D97  01DB               	clrf	getCDS_AD@i
  3181  0D98  01DC               	clrf	getCDS_AD@j
  3182                           
  3183                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3184  0D99  1DAB               	btfss	__CDS,3
  3185  0D9A  0008               	return
  3186                           
  3187                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3188  0D9B  14AB               	bsf	__CDS,1
  3189                           
  3190                           ;CDS_B1.c: 52: _CDS.ADRES = getAD(channel1, 0x70);
  3191  0D9C  3070               	movlw	112
  3192  0D9D  00D9               	movwf	??_getCDS_AD
  3193  0D9E  0859               	movf	??_getCDS_AD,w
  3194  0D9F  00F4               	movwf	getAD@adcon1
  3195  0DA0  085D               	movf	getCDS_AD@channel1,w
  3196  0DA1  158A  2529  158A   	fcall	_getAD
  3197  0DA4  1283               	bcf	3,5	;RP0=0, select bank0
  3198  0DA5  1303               	bcf	3,6	;RP1=0, select bank0
  3199  0DA6  00DA               	movwf	??_getCDS_AD+1
  3200  0DA7  085A               	movf	??_getCDS_AD+1,w
  3201  0DA8  00AF               	movwf	__CDS+4
  3202                           
  3203                           ;CDS_B1.c: 53: _CDS.VRAD = _CDS.ADRES;
  3204  0DA9  082F               	movf	__CDS+4,w
  3205  0DAA  00D9               	movwf	??_getCDS_AD
  3206  0DAB  0859               	movf	??_getCDS_AD,w
  3207  0DAC  00AD               	movwf	__CDS+2
  3208                           
  3209                           ;CDS_B1.c: 54: _CDS.ADRES = getAD(channel2, 0x70);
  3210  0DAD  3070               	movlw	112
  3211  0DAE  00D9               	movwf	??_getCDS_AD
  3212  0DAF  0859               	movf	??_getCDS_AD,w
  3213  0DB0  00F4               	movwf	getAD@adcon1
  3214  0DB1  0876               	movf	getCDS_AD@channel2,w
  3215  0DB2  158A  2529         	fcall	_getAD
  3216  0DB4  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0DB5  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0DB6  00DA               	movwf	??_getCDS_AD+1
  3219  0DB7  085A               	movf	??_getCDS_AD+1,w
  3220  0DB8  00AF               	movwf	__CDS+4
  3221                           
  3222                           ;CDS_B1.c: 55: _CDS.SignalAD = _CDS.ADRES;
  3223  0DB9  082F               	movf	__CDS+4,w
  3224  0DBA  00D9               	movwf	??_getCDS_AD
  3225  0DBB  0859               	movf	??_getCDS_AD,w
  3226  0DBC  00AE               	movwf	__CDS+3
  3227  0DBD  0008               	return
  3228  0DBE                     __end_of_getCDS_AD:	
  3229                           
  3230                           	psect	text7
  3231  0D29                     __ptext7:	
  3232 ;; *************** function _getAD *****************
  3233 ;; Defined at:
  3234 ;;		line 427 in file "../src/MCU_B1.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  adcon0          1    wreg     unsigned char 
  3237 ;;  adcon1          1    4[COMMON] unsigned char 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  adcon0          1    5[COMMON] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      unsigned char 
  3242 ;; Registers used:
  3243 ;;		wreg, status,2, status,0, pclath, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3249 ;;      Params:         1       0       0       0
  3250 ;;      Locals:         1       0       0       0
  3251 ;;      Temps:          0       0       0       0
  3252 ;;      Totals:         2       0       0       0
  3253 ;;Total ram usage:        2 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    3
  3256 ;; This function calls:
  3257 ;;		_Timeout_Counter
  3258 ;;		_set_TimeoutCleared
  3259 ;; This function is called by:
  3260 ;;		_getCDS_AD
  3261 ;;		_getLoad_AD
  3262 ;;		_getTemp_AD
  3263 ;;		_getPIR_AD
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           
  3268                           ;psect for function _getAD
  3269  0D29                     _getAD:	
  3270                           
  3271                           ;incstack = 0
  3272                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3273                           ;getAD@adcon0 stored from wreg
  3274  0D29  00F5               	movwf	getAD@adcon0
  3275                           
  3276                           ;MCU_B1.c: 428: ADCON0 = adcon0;
  3277  0D2A  0875               	movf	getAD@adcon0,w
  3278  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  3279  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  3280  0D2D  009F               	movwf	31	;volatile
  3281                           
  3282                           ;MCU_B1.c: 429: ADCON1 = adcon1;
  3283  0D2E  0874               	movf	getAD@adcon1,w
  3284  0D2F  1683               	bsf	3,5	;RP0=1, select bank1
  3285  0D30  1303               	bcf	3,6	;RP1=0, select bank1
  3286  0D31  009F               	movwf	31	;volatile
  3287                           
  3288                           ;MCU_B1.c: 430: GO_nDONE = 1;
  3289  0D32  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0D33  1303               	bcf	3,6	;RP1=0, select bank0
  3291  0D34  149F               	bsf	31,1	;volatile
  3292                           
  3293                           ;MCU_B1.c: 431: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3294  0D35  2D39               	goto	l3223
  3295  0D36                     l3221:	
  3296                           
  3297                           ;MCU_B1.c: 432: Timeout_Counter();
  3298  0D36  158A  246A  158A   	fcall	_Timeout_Counter
  3299  0D39                     l3223:	
  3300  0D39  1283               	bcf	3,5	;RP0=0, select bank0
  3301  0D3A  1303               	bcf	3,6	;RP1=0, select bank0
  3302  0D3B  1C9F               	btfss	31,1	;volatile
  3303  0D3C  2D3F               	goto	l3227
  3304  0D3D  1D23               	btfss	_myMain+3,2
  3305  0D3E  2D36               	goto	l3221
  3306  0D3F                     l3227:	
  3307                           
  3308                           ;MCU_B1.c: 433: };
  3309                           ;MCU_B1.c: 434: set_TimeoutCleared();
  3310  0D3F  158A  2371         	fcall	_set_TimeoutCleared
  3311                           
  3312                           ;MCU_B1.c: 435: return ADRES;
  3313  0D41  1283               	bcf	3,5	;RP0=0, select bank0
  3314  0D42  1303               	bcf	3,6	;RP1=0, select bank0
  3315  0D43  081E               	movf	30,w	;volatile
  3316  0D44  0008               	return
  3317  0D45                     __end_of_getAD:	
  3318                           
  3319                           	psect	text8
  3320  0B71                     __ptext8:	
  3321 ;; *************** function _set_TimeoutCleared *****************
  3322 ;; Defined at:
  3323 ;;		line 283 in file "../src/Main_B1.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;		None
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;		None
  3328 ;; Return value:  Size  Location     Type
  3329 ;;		None               void
  3330 ;; Registers used:
  3331 ;;		status,2
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3337 ;;      Params:         0       0       0       0
  3338 ;;      Locals:         0       0       0       0
  3339 ;;      Temps:          0       0       0       0
  3340 ;;      Totals:         0       0       0       0
  3341 ;;Total ram usage:        0 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    2
  3344 ;; This function calls:
  3345 ;;		Nothing
  3346 ;; This function is called by:
  3347 ;;		_getAD
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           
  3352                           ;psect for function _set_TimeoutCleared
  3353  0B71                     _set_TimeoutCleared:	
  3354                           
  3355                           ;Main_B1.c: 284: myMain.Timeout = 0;
  3356                           
  3357                           ;incstack = 0
  3358                           ; Regs used in _set_TimeoutCleared: [status,2]
  3359  0B71  1283               	bcf	3,5	;RP0=0, select bank0
  3360  0B72  1303               	bcf	3,6	;RP1=0, select bank0
  3361  0B73  1123               	bcf	_myMain+3,2
  3362                           
  3363                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
  3364  0B74  01A4               	clrf	_myMain+4
  3365  0B75  01A5               	clrf	_myMain+5
  3366  0B76  0008               	return
  3367  0B77                     __end_of_set_TimeoutCleared:	
  3368                           
  3369                           	psect	text9
  3370  0C6A                     __ptext9:	
  3371 ;; *************** function _Timeout_Counter *****************
  3372 ;; Defined at:
  3373 ;;		line 274 in file "../src/Main_B1.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;		None
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;		None
  3378 ;; Return value:  Size  Location     Type
  3379 ;;		None               void
  3380 ;; Registers used:
  3381 ;;		wreg, status,2
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3387 ;;      Params:         0       0       0       0
  3388 ;;      Locals:         0       0       0       0
  3389 ;;      Temps:          0       0       0       0
  3390 ;;      Totals:         0       0       0       0
  3391 ;;Total ram usage:        0 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; Hardware stack levels required when called:    2
  3394 ;; This function calls:
  3395 ;;		Nothing
  3396 ;; This function is called by:
  3397 ;;		_getAD
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           
  3402                           ;psect for function _Timeout_Counter
  3403  0C6A                     _Timeout_Counter:	
  3404                           
  3405                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
  3406                           
  3407                           ;incstack = 0
  3408                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3409  0C6A  3001               	movlw	1
  3410  0C6B  1283               	bcf	3,5	;RP0=0, select bank0
  3411  0C6C  1303               	bcf	3,6	;RP1=0, select bank0
  3412  0C6D  07A4               	addwf	_myMain+4,f
  3413  0C6E  1803               	skipnc
  3414  0C6F  0AA5               	incf	_myMain+5,f
  3415  0C70  3000               	movlw	0
  3416  0C71  07A5               	addwf	_myMain+5,f
  3417                           
  3418                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
  3419  0C72  3027               	movlw	39
  3420  0C73  0625               	xorwf	_myMain+5,w
  3421  0C74  1D03               	skipz
  3422  0C75  2C78               	goto	u2745
  3423  0C76  3010               	movlw	16
  3424  0C77  0624               	xorwf	_myMain+4,w
  3425  0C78                     u2745:	
  3426  0C78  1D03               	skipz
  3427  0C79  0008               	return
  3428                           
  3429                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
  3430  0C7A  01A4               	clrf	_myMain+4
  3431  0C7B  01A5               	clrf	_myMain+5
  3432                           
  3433                           ;Main_B1.c: 278: myMain.Timeout = 1;
  3434  0C7C  1523               	bsf	_myMain+3,2
  3435  0C7D  0008               	return
  3436  0C7E                     __end_of_Timeout_Counter:	
  3437                           
  3438                           	psect	text10
  3439  0C47                     __ptext10:	
  3440 ;; *************** function _WDT_Main *****************
  3441 ;; Defined at:
  3442 ;;		line 1098 in file "../src/MCU_B1.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;		None
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;		None
  3447 ;; Return value:  Size  Location     Type
  3448 ;;		None               void
  3449 ;; Registers used:
  3450 ;;		wreg, status,2, status,0, pclath, cstack
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3456 ;;      Params:         0       0       0       0
  3457 ;;      Locals:         0       0       0       0
  3458 ;;      Temps:          1       0       0       0
  3459 ;;      Totals:         1       0       0       0
  3460 ;;Total ram usage:        1 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    3
  3463 ;; This function calls:
  3464 ;;		_WDT_Clearing
  3465 ;; This function is called by:
  3466 ;;		_main
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           
  3471                           ;psect for function _WDT_Main
  3472  0C47                     _WDT_Main:	
  3473                           
  3474                           ;MCU_B1.c: 1099: if (WDT.Enable == 1) {
  3475                           
  3476                           ;incstack = 0
  3477                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3478  0C47  1283               	bcf	3,5	;RP0=0, select bank0
  3479  0C48  1303               	bcf	3,6	;RP1=0, select bank0
  3480  0C49  1C37               	btfss	_WDT,0
  3481  0C4A  0008               	return
  3482                           
  3483                           ;MCU_B1.c: 1100: if (WDT.Timer-- > 0) {
  3484  0C4B  3001               	movlw	1
  3485  0C4C  02B8               	subwf	_WDT+1,f
  3486  0C4D  0838               	movf	_WDT+1,w
  3487  0C4E  3AFF               	xorlw	255
  3488  0C4F  1903               	skipnz
  3489  0C50  0008               	return
  3490                           
  3491                           ;MCU_B1.c: 1101: WDT.Timer = 100;
  3492  0C51  3064               	movlw	100
  3493  0C52  00F4               	movwf	??_WDT_Main
  3494  0C53  0874               	movf	??_WDT_Main,w
  3495  0C54  00B8               	movwf	_WDT+1
  3496                           
  3497                           ;MCU_B1.c: 1102: WDT_Clearing();
  3498  0C55  118A  2002         	fcall	_WDT_Clearing
  3499  0C57  0008               	return
  3500  0C58                     __end_of_WDT_Main:	
  3501                           
  3502                           	psect	text11
  3503  0002                     __ptext11:	
  3504 ;; *************** function _WDT_Clearing *****************
  3505 ;; Defined at:
  3506 ;;		line 1108 in file "../src/MCU_B1.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;		None
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;		None
  3511 ;; Return value:  Size  Location     Type
  3512 ;;		None               void
  3513 ;; Registers used:
  3514 ;;		None
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3520 ;;      Params:         0       0       0       0
  3521 ;;      Locals:         0       0       0       0
  3522 ;;      Temps:          0       0       0       0
  3523 ;;      Totals:         0       0       0       0
  3524 ;;Total ram usage:        0 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:    2
  3527 ;; This function calls:
  3528 ;;		Nothing
  3529 ;; This function is called by:
  3530 ;;		_WDT_Main
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           
  3535                           ;psect for function _WDT_Clearing
  3536  0002                     _WDT_Clearing:	
  3537                           
  3538                           ;incstack = 0
  3539                           ; Regs used in _WDT_Clearing: []
  3540  0002  0064               	clrwdt	;# 
  3541  0003  0008               	return
  3542  0004                     __end_of_WDT_Clearing:	
  3543                           
  3544                           	psect	text12
  3545  0B52                     __ptext12:	
  3546 ;; *************** function _Temp_Main *****************
  3547 ;; Defined at:
  3548 ;;		line 49 in file "../src/OverTemperature_B1.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;		None
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;		None
  3553 ;; Return value:  Size  Location     Type
  3554 ;;		None               void
  3555 ;; Registers used:
  3556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3562 ;;      Params:         0       0       0       0
  3563 ;;      Locals:         0       0       0       0
  3564 ;;      Temps:          0       0       0       0
  3565 ;;      Totals:         0       0       0       0
  3566 ;;Total ram usage:        0 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    6
  3569 ;; This function calls:
  3570 ;;		_setTemp_Main
  3571 ;; This function is called by:
  3572 ;;		_main
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           
  3577                           ;psect for function _Temp_Main
  3578  0B52                     _Temp_Main:	
  3579                           
  3580                           ;OverTemperature_B1.c: 51: setTemp_Main();
  3581                           
  3582                           ;incstack = 0
  3583                           ; Regs used in _Temp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3584  0B52  118A  24F9         	fcall	_setTemp_Main
  3585  0B54  0008               	return
  3586  0B55                     __end_of_Temp_Main:	
  3587                           
  3588                           	psect	text13
  3589  04F9                     __ptext13:	
  3590 ;; *************** function _setTemp_Main *****************
  3591 ;; Defined at:
  3592 ;;		line 56 in file "../src/OverTemperature_B1.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;		None
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  error           1    9[BANK0 ] unsigned char 
  3597 ;; Return value:  Size  Location     Type
  3598 ;;		None               void
  3599 ;; Registers used:
  3600 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3606 ;;      Params:         0       0       0       0
  3607 ;;      Locals:         0       1       0       0
  3608 ;;      Temps:          0       1       0       0
  3609 ;;      Totals:         0       2       0       0
  3610 ;;Total ram usage:        2 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    5
  3613 ;; This function calls:
  3614 ;;		___awdiv
  3615 ;;		_getMain_All_Error_Status
  3616 ;;		_getMain_LightsStatus
  3617 ;; This function is called by:
  3618 ;;		_Temp_Main
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           
  3623                           ;psect for function _setTemp_Main
  3624  04F9                     _setTemp_Main:	
  3625                           
  3626                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  3627                           
  3628                           ;incstack = 0
  3629                           ; Regs used in _setTemp_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3630  04F9  3000               	movlw	0
  3631  04FA  158A  265E  118A   	fcall	_getMain_All_Error_Status
  3632  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  3633  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  3634  04FF  00E1               	movwf	??_setTemp_Main
  3635  0500  0861               	movf	??_setTemp_Main,w
  3636  0501  00E2               	movwf	setTemp_Main@error
  3637                           
  3638                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  3639  0502  1C3A               	btfss	_Temp,0
  3640  0503  2D7B               	goto	l799
  3641                           
  3642                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  3643  0504  193A               	btfsc	_Temp,2
  3644  0505  2D17               	goto	l4551
  3645                           
  3646                           ;OverTemperature_B1.c: 66: Temp.Time++;
  3647  0506  3001               	movlw	1
  3648  0507  07BB               	addwf	_Temp+1,f
  3649  0508  1803               	skipnc
  3650  0509  0ABC               	incf	_Temp+2,f
  3651  050A  3000               	movlw	0
  3652  050B  07BC               	addwf	_Temp+2,f
  3653                           
  3654                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  3655  050C  3001               	movlw	1
  3656  050D  023C               	subwf	_Temp+2,w
  3657  050E  30F4               	movlw	244
  3658  050F  1903               	skipnz
  3659  0510  023B               	subwf	_Temp+1,w
  3660  0511  1C03               	skipc
  3661  0512  0008               	return
  3662                           
  3663                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  3664  0513  01BB               	clrf	_Temp+1
  3665  0514  01BC               	clrf	_Temp+2
  3666                           
  3667                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  3668  0515  153A               	bsf	_Temp,2
  3669                           
  3670                           ;OverTemperature_B1.c: 70: }
  3671                           ;OverTemperature_B1.c: 71: } else {
  3672  0516  0008               	return
  3673  0517                     l4551:	
  3674                           
  3675                           ;OverTemperature_B1.c: 72: Temp.Time++;
  3676  0517  3001               	movlw	1
  3677  0518  07BB               	addwf	_Temp+1,f
  3678  0519  1803               	skipnc
  3679  051A  0ABC               	incf	_Temp+2,f
  3680  051B  3000               	movlw	0
  3681  051C  07BC               	addwf	_Temp+2,f
  3682                           
  3683                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  3684  051D  3000               	movlw	0
  3685  051E  023C               	subwf	_Temp+2,w
  3686  051F  3005               	movlw	5
  3687  0520  1903               	skipnz
  3688  0521  023B               	subwf	_Temp+1,w
  3689  0522  1C03               	skipc
  3690  0523  0008               	return
  3691                           
  3692                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  3693  0524  01BB               	clrf	_Temp+1
  3694  0525  01BC               	clrf	_Temp+2
  3695                           
  3696                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  3697  0526  0841               	movf	_Temp+7,w
  3698  0527  1903               	btfsc	3,2
  3699  0528  2D78               	goto	l804
  3700  0529  0842               	movf	_Temp+8,w
  3701  052A  1903               	btfsc	3,2
  3702  052B  2D78               	goto	l804
  3703                           
  3704                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  3705  052C  113A               	bcf	_Temp,2
  3706                           
  3707                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3708  052D  3002               	movlw	2
  3709  052E  00D9               	movwf	___awdiv@divisor
  3710  052F  3000               	movlw	0
  3711  0530  00DA               	movwf	___awdiv@divisor+1
  3712  0531  0841               	movf	_Temp+7,w
  3713  0532  0742               	addwf	_Temp+8,w
  3714  0533  00DB               	movwf	___awdiv@dividend
  3715  0534  01DC               	clrf	___awdiv@dividend+1
  3716  0535  0DDC               	rlf	___awdiv@dividend+1,f
  3717  0536  158A  26DC  118A   	fcall	___awdiv
  3718  0539  1283               	bcf	3,5	;RP0=0, select bank0
  3719  053A  1303               	bcf	3,6	;RP1=0, select bank0
  3720  053B  0859               	movf	?___awdiv,w
  3721  053C  00E1               	movwf	??_setTemp_Main
  3722  053D  0861               	movf	??_setTemp_Main,w
  3723  053E  00C0               	movwf	_Temp+6
  3724                           
  3725                           ;OverTemperature_B1.c: 81: if (getMain_LightsStatus() == 1) {
  3726  053F  158A  25BE  118A   	fcall	_getMain_LightsStatus
  3727  0542  3A01               	xorlw	1
  3728  0543  1D03               	skipz
  3729  0544  2D4D               	goto	l4567
  3730                           
  3731                           ;OverTemperature_B1.c: 82: Temp.SafeValue = 0x85;
  3732  0545  3085               	movlw	133
  3733  0546  1283               	bcf	3,5	;RP0=0, select bank0
  3734  0547  1303               	bcf	3,6	;RP1=0, select bank0
  3735  0548  00E1               	movwf	??_setTemp_Main
  3736  0549  0861               	movf	??_setTemp_Main,w
  3737  054A  00C4               	movwf	_Temp+10
  3738                           
  3739                           ;OverTemperature_B1.c: 83: Temp.DangerValue = 0x70;
  3740  054B  3070               	movlw	112
  3741  054C  2D54               	goto	L7
  3742  054D                     l4567:	
  3743                           ;OverTemperature_B1.c: 84: } else {
  3744                           
  3745                           
  3746                           ;OverTemperature_B1.c: 85: Temp.SafeValue = 0x4f;
  3747  054D  304F               	movlw	79
  3748  054E  1283               	bcf	3,5	;RP0=0, select bank0
  3749  054F  1303               	bcf	3,6	;RP1=0, select bank0
  3750  0550  00E1               	movwf	??_setTemp_Main
  3751  0551  0861               	movf	??_setTemp_Main,w
  3752  0552  00C4               	movwf	_Temp+10
  3753                           
  3754                           ;OverTemperature_B1.c: 86: Temp.DangerValue = 0x40;
  3755  0553  3040               	movlw	64
  3756  0554                     L7:	
  3757  0554  00E1               	movwf	??_setTemp_Main
  3758  0555  0861               	movf	??_setTemp_Main,w
  3759  0556  00C5               	movwf	_Temp+11
  3760                           
  3761                           ;OverTemperature_B1.c: 87: }
  3762                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  3763  0557  1CBA               	btfss	_Temp,1
  3764  0558  2D68               	goto	l4583
  3765                           
  3766                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  3767  0559  0844               	movf	_Temp+10,w
  3768  055A  0240               	subwf	_Temp+6,w
  3769  055B  1C03               	skipc
  3770  055C  2D77               	goto	l4593
  3771                           
  3772                           ;OverTemperature_B1.c: 98: Temp.Count++;
  3773  055D  3001               	movlw	1
  3774  055E  00E1               	movwf	??_setTemp_Main
  3775  055F  0861               	movf	??_setTemp_Main,w
  3776  0560  07BD               	addwf	_Temp+3,f
  3777                           
  3778                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  3779  0561  3003               	movlw	3
  3780  0562  023D               	subwf	_Temp+3,w
  3781  0563  1C03               	skipc
  3782  0564  2D78               	goto	l804
  3783                           
  3784                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  3785  0565  01BD               	clrf	_Temp+3
  3786                           
  3787                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  3788  0566  10BA               	bcf	_Temp,1
  3789                           
  3790                           ;OverTemperature_B1.c: 103: }
  3791                           ;OverTemperature_B1.c: 104: } else {
  3792                           
  3793                           ;OverTemperature_B1.c: 102: ;;
  3794  0567  2D78               	goto	l804
  3795  0568                     l4583:	
  3796                           ;OverTemperature_B1.c: 106: }
  3797                           ;OverTemperature_B1.c: 107: } else {
  3798                           
  3799                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  3800                           
  3801                           
  3802                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  3803  0568  0840               	movf	_Temp+6,w
  3804  0569  0245               	subwf	_Temp+11,w
  3805  056A  1C03               	skipc
  3806  056B  2D77               	goto	l4593
  3807                           
  3808                           ;OverTemperature_B1.c: 109: Temp.Count++;
  3809  056C  3001               	movlw	1
  3810  056D  00E1               	movwf	??_setTemp_Main
  3811  056E  0861               	movf	??_setTemp_Main,w
  3812  056F  07BD               	addwf	_Temp+3,f
  3813                           
  3814                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  3815  0570  3003               	movlw	3
  3816  0571  023D               	subwf	_Temp+3,w
  3817  0572  1C03               	skipc
  3818  0573  2D78               	goto	l804
  3819                           
  3820                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  3821  0574  01BD               	clrf	_Temp+3
  3822                           
  3823                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  3824  0575  14BA               	bsf	_Temp,1
  3825                           
  3826                           ;OverTemperature_B1.c: 113: }
  3827                           ;OverTemperature_B1.c: 114: } else {
  3828  0576  2D78               	goto	l804
  3829  0577                     l4593:	
  3830                           
  3831                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  3832  0577  01BD               	clrf	_Temp+3
  3833  0578                     l804:	
  3834                           ;OverTemperature_B1.c: 116: }
  3835                           ;OverTemperature_B1.c: 117: }
  3836                           ;OverTemperature_B1.c: 118: ;;
  3837                           ;OverTemperature_B1.c: 119: ;;
  3838                           
  3839                           
  3840                           ;OverTemperature_B1.c: 135: }
  3841                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  3842  0578  01C1               	clrf	_Temp+7
  3843                           
  3844                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  3845  0579  01C2               	clrf	_Temp+8
  3846                           
  3847                           ;OverTemperature_B1.c: 138: }
  3848                           ;OverTemperature_B1.c: 139: }
  3849                           ;OverTemperature_B1.c: 141: } else {
  3850  057A  0008               	return
  3851  057B                     l799:	
  3852                           
  3853                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  3854  057B  1C20               	btfss	_myMain,0
  3855  057C  0008               	return
  3856                           
  3857                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  3858  057D  143A               	bsf	_Temp,0
  3859  057E  0008               	return
  3860  057F                     __end_of_setTemp_Main:	
  3861                           
  3862                           	psect	text14
  3863  0EDC                     __ptext14:	
  3864 ;; *************** function ___awdiv *****************
  3865 ;; Defined at:
  3866 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;  divisor         2    0[BANK0 ] int 
  3869 ;;  dividend        2    2[BANK0 ] int 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  quotient        2    6[BANK0 ] int 
  3872 ;;  sign            1    5[BANK0 ] unsigned char 
  3873 ;;  counter         1    4[BANK0 ] unsigned char 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  2    0[BANK0 ] int 
  3876 ;; Registers used:
  3877 ;;		wreg, status,2, status,0
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3883 ;;      Params:         0       4       0       0
  3884 ;;      Locals:         0       4       0       0
  3885 ;;      Temps:          1       0       0       0
  3886 ;;      Totals:         1       8       0       0
  3887 ;;Total ram usage:        9 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    2
  3890 ;; This function calls:
  3891 ;;		Nothing
  3892 ;; This function is called by:
  3893 ;;		_setTemp_Main
  3894 ;;		_getPIR_AD
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           
  3899                           ;psect for function ___awdiv
  3900  0EDC                     ___awdiv:	
  3901                           
  3902                           ;incstack = 0
  3903                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3904  0EDC  1283               	bcf	3,5	;RP0=0, select bank0
  3905  0EDD  1303               	bcf	3,6	;RP1=0, select bank0
  3906  0EDE  01DE               	clrf	___awdiv@sign
  3907  0EDF  1FDA               	btfss	___awdiv@divisor+1,7
  3908  0EE0  2EE8               	goto	l4433
  3909  0EE1  09D9               	comf	___awdiv@divisor,f
  3910  0EE2  09DA               	comf	___awdiv@divisor+1,f
  3911  0EE3  0AD9               	incf	___awdiv@divisor,f
  3912  0EE4  1903               	skipnz
  3913  0EE5  0ADA               	incf	___awdiv@divisor+1,f
  3914  0EE6  01DE               	clrf	___awdiv@sign
  3915  0EE7  0ADE               	incf	___awdiv@sign,f
  3916  0EE8                     l4433:	
  3917  0EE8  1FDC               	btfss	___awdiv@dividend+1,7
  3918  0EE9  2EF3               	goto	l4439
  3919  0EEA  09DB               	comf	___awdiv@dividend,f
  3920  0EEB  09DC               	comf	___awdiv@dividend+1,f
  3921  0EEC  0ADB               	incf	___awdiv@dividend,f
  3922  0EED  1903               	skipnz
  3923  0EEE  0ADC               	incf	___awdiv@dividend+1,f
  3924  0EEF  3001               	movlw	1
  3925  0EF0  00F4               	movwf	??___awdiv
  3926  0EF1  0874               	movf	??___awdiv,w
  3927  0EF2  06DE               	xorwf	___awdiv@sign,f
  3928  0EF3                     l4439:	
  3929  0EF3  01DF               	clrf	___awdiv@quotient
  3930  0EF4  01E0               	clrf	___awdiv@quotient+1
  3931  0EF5  085A               	movf	___awdiv@divisor+1,w
  3932  0EF6  0459               	iorwf	___awdiv@divisor,w
  3933  0EF7  1903               	skipnz
  3934  0EF8  2F2A               	goto	l4461
  3935  0EF9  01DD               	clrf	___awdiv@counter
  3936  0EFA  0ADD               	incf	___awdiv@counter,f
  3937  0EFB                     l4449:	
  3938  0EFB  1BDA               	btfsc	___awdiv@divisor+1,7
  3939  0EFC  2F09               	goto	l4451
  3940  0EFD  3001               	movlw	1
  3941  0EFE                     u5265:	
  3942  0EFE  1003               	clrc
  3943  0EFF  0DD9               	rlf	___awdiv@divisor,f
  3944  0F00  0DDA               	rlf	___awdiv@divisor+1,f
  3945  0F01  3EFF               	addlw	-1
  3946  0F02  1D03               	skipz
  3947  0F03  2EFE               	goto	u5265
  3948  0F04  3001               	movlw	1
  3949  0F05  00F4               	movwf	??___awdiv
  3950  0F06  0874               	movf	??___awdiv,w
  3951  0F07  07DD               	addwf	___awdiv@counter,f
  3952  0F08  2EFB               	goto	l4449
  3953  0F09                     l4451:	
  3954  0F09  3001               	movlw	1
  3955  0F0A                     u5285:	
  3956  0F0A  1003               	clrc
  3957  0F0B  0DDF               	rlf	___awdiv@quotient,f
  3958  0F0C  0DE0               	rlf	___awdiv@quotient+1,f
  3959  0F0D  3EFF               	addlw	-1
  3960  0F0E  1D03               	skipz
  3961  0F0F  2F0A               	goto	u5285
  3962  0F10  085A               	movf	___awdiv@divisor+1,w
  3963  0F11  025C               	subwf	___awdiv@dividend+1,w
  3964  0F12  1D03               	skipz
  3965  0F13  2F16               	goto	u5295
  3966  0F14  0859               	movf	___awdiv@divisor,w
  3967  0F15  025B               	subwf	___awdiv@dividend,w
  3968  0F16                     u5295:	
  3969  0F16  1C03               	skipc
  3970  0F17  2F1F               	goto	l4457
  3971  0F18  0859               	movf	___awdiv@divisor,w
  3972  0F19  02DB               	subwf	___awdiv@dividend,f
  3973  0F1A  085A               	movf	___awdiv@divisor+1,w
  3974  0F1B  1C03               	skipc
  3975  0F1C  03DC               	decf	___awdiv@dividend+1,f
  3976  0F1D  02DC               	subwf	___awdiv@dividend+1,f
  3977  0F1E  145F               	bsf	___awdiv@quotient,0
  3978  0F1F                     l4457:	
  3979  0F1F  3001               	movlw	1
  3980  0F20                     u5305:	
  3981  0F20  1003               	clrc
  3982  0F21  0CDA               	rrf	___awdiv@divisor+1,f
  3983  0F22  0CD9               	rrf	___awdiv@divisor,f
  3984  0F23  3EFF               	addlw	-1
  3985  0F24  1D03               	skipz
  3986  0F25  2F20               	goto	u5305
  3987  0F26  3001               	movlw	1
  3988  0F27  02DD               	subwf	___awdiv@counter,f
  3989  0F28  1D03               	btfss	3,2
  3990  0F29  2F09               	goto	l4451
  3991  0F2A                     l4461:	
  3992  0F2A  085E               	movf	___awdiv@sign,w
  3993  0F2B  1903               	btfsc	3,2
  3994  0F2C  2F32               	goto	l4465
  3995  0F2D  09DF               	comf	___awdiv@quotient,f
  3996  0F2E  09E0               	comf	___awdiv@quotient+1,f
  3997  0F2F  0ADF               	incf	___awdiv@quotient,f
  3998  0F30  1903               	skipnz
  3999  0F31  0AE0               	incf	___awdiv@quotient+1,f
  4000  0F32                     l4465:	
  4001  0F32  0860               	movf	___awdiv@quotient+1,w
  4002  0F33  01DA               	clrf	?___awdiv+1
  4003  0F34  07DA               	addwf	?___awdiv+1,f
  4004  0F35  085F               	movf	___awdiv@quotient,w
  4005  0F36  01D9               	clrf	?___awdiv
  4006  0F37  07D9               	addwf	?___awdiv,f
  4007  0F38  0008               	return
  4008  0F39                     __end_of___awdiv:	
  4009                           
  4010                           	psect	text15
  4011  0B4F                     __ptext15:	
  4012 ;; *************** function _Temp_Initialization *****************
  4013 ;; Defined at:
  4014 ;;		line 8 in file "../src/OverTemperature_B1.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;		None
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;		None
  4019 ;; Return value:  Size  Location     Type
  4020 ;;		None               void
  4021 ;; Registers used:
  4022 ;;		status,2, status,0, pclath, cstack
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4028 ;;      Params:         0       0       0       0
  4029 ;;      Locals:         0       0       0       0
  4030 ;;      Temps:          0       0       0       0
  4031 ;;      Totals:         0       0       0       0
  4032 ;;Total ram usage:        0 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    3
  4035 ;; This function calls:
  4036 ;;		_setTemp_Initialization
  4037 ;; This function is called by:
  4038 ;;		_main
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           
  4043                           ;psect for function _Temp_Initialization
  4044  0B4F                     _Temp_Initialization:	
  4045                           
  4046                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  4047                           
  4048                           ;incstack = 0
  4049                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4050  0B4F  158A  2344         	fcall	_setTemp_Initialization
  4051  0B51  0008               	return
  4052  0B52                     __end_of_Temp_Initialization:	
  4053                           
  4054                           	psect	text16
  4055  0B44                     __ptext16:	
  4056 ;; *************** function _setTemp_Initialization *****************
  4057 ;; Defined at:
  4058 ;;		line 44 in file "../src/OverTemperature_B1.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;		None
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;		None
  4063 ;; Return value:  Size  Location     Type
  4064 ;;		None               void
  4065 ;; Registers used:
  4066 ;;		None
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4072 ;;      Params:         0       0       0       0
  4073 ;;      Locals:         0       0       0       0
  4074 ;;      Temps:          0       0       0       0
  4075 ;;      Totals:         0       0       0       0
  4076 ;;Total ram usage:        0 bytes
  4077 ;; Hardware stack levels used:    1
  4078 ;; Hardware stack levels required when called:    2
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		_Temp_Initialization
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           
  4087                           ;psect for function _setTemp_Initialization
  4088  0B44                     _setTemp_Initialization:	
  4089                           
  4090                           ;incstack = 0
  4091                           ; Regs used in _setTemp_Initialization: []
  4092  0B44  0008               	return
  4093  0B45                     __end_of_setTemp_Initialization:	
  4094                           
  4095                           	psect	text17
  4096  0B4C                     __ptext17:	
  4097 ;; *************** function _SYSC_Main *****************
  4098 ;; Defined at:
  4099 ;;		line 17 in file "../src/SYSC_B1.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;		None
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;		None
  4104 ;; Return value:  Size  Location     Type
  4105 ;;		None               void
  4106 ;; Registers used:
  4107 ;;		wreg, status,2, status,0, pclath, cstack
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4113 ;;      Params:         0       0       0       0
  4114 ;;      Locals:         0       0       0       0
  4115 ;;      Temps:          0       0       0       0
  4116 ;;      Totals:         0       0       0       0
  4117 ;;Total ram usage:        0 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; Hardware stack levels required when called:    4
  4120 ;; This function calls:
  4121 ;;		_setSYSC_Main
  4122 ;; This function is called by:
  4123 ;;		_main
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           
  4128                           ;psect for function _SYSC_Main
  4129  0B4C                     _SYSC_Main:	
  4130                           
  4131                           ;SYSC_B1.c: 19: setSYSC_Main();
  4132                           
  4133                           ;incstack = 0
  4134                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4135  0B4C  118A  27B6         	fcall	_setSYSC_Main
  4136  0B4E  0008               	return
  4137  0B4F                     __end_of_SYSC_Main:	
  4138                           
  4139                           	psect	text18
  4140  07B6                     __ptext18:	
  4141 ;; *************** function _setSYSC_Main *****************
  4142 ;; Defined at:
  4143 ;;		line 23 in file "../src/SYSC_B1.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;		None
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;		None
  4148 ;; Return value:  Size  Location     Type
  4149 ;;		None               void
  4150 ;; Registers used:
  4151 ;;		wreg, status,2, status,0, pclath, cstack
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4157 ;;      Params:         0       0       0       0
  4158 ;;      Locals:         0       0       0       0
  4159 ;;      Temps:          0       0       0       0
  4160 ;;      Totals:         0       0       0       0
  4161 ;;Total ram usage:        0 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    3
  4164 ;; This function calls:
  4165 ;;		_getMain_All_Error_Status
  4166 ;; This function is called by:
  4167 ;;		_SYSC_Main
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           
  4172                           ;psect for function _setSYSC_Main
  4173  07B6                     _setSYSC_Main:	
  4174                           
  4175                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4176                           
  4177                           ;incstack = 0
  4178                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4179  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  4180  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  4181  07B8  1C26               	btfss	_SYSC,0
  4182  07B9  0008               	return
  4183                           
  4184                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4185  07BA  18A6               	btfsc	_SYSC,1
  4186  07BB  2FCD               	goto	l4607
  4187                           
  4188                           ;SYSC_B1.c: 27: SYSC.Timer++;
  4189  07BC  3001               	movlw	1
  4190  07BD  07A7               	addwf	_SYSC+1,f
  4191  07BE  1803               	skipnc
  4192  07BF  0AA8               	incf	_SYSC+2,f
  4193  07C0  3000               	movlw	0
  4194  07C1  07A8               	addwf	_SYSC+2,f
  4195                           
  4196                           ;SYSC_B1.c: 28: if (SYSC.Timer >= 16)
  4197  07C2  3000               	movlw	0
  4198  07C3  0228               	subwf	_SYSC+2,w
  4199  07C4  3010               	movlw	16
  4200  07C5  1903               	skipnz
  4201  07C6  0227               	subwf	_SYSC+1,w
  4202  07C7  1C03               	skipc
  4203  07C8  0008               	return
  4204                           
  4205                           ;SYSC_B1.c: 29: {
  4206                           ;SYSC_B1.c: 30: SYSC.Timer = 0;
  4207  07C9  01A7               	clrf	_SYSC+1
  4208  07CA  01A8               	clrf	_SYSC+2
  4209                           
  4210                           ;SYSC_B1.c: 31: SYSC.ERROR = 1;
  4211  07CB  14A6               	bsf	_SYSC,1
  4212                           
  4213                           ;SYSC_B1.c: 32: }
  4214                           ;SYSC_B1.c: 33: } else {
  4215  07CC  0008               	return
  4216  07CD                     l4607:	
  4217                           
  4218                           ;SYSC_B1.c: 34: if (getMain_All_Error_Status(1) == 0) {
  4219  07CD  3001               	movlw	1
  4220  07CE  158A  265E  118A   	fcall	_getMain_All_Error_Status
  4221  07D1  3800               	iorlw	0
  4222  07D2  1D03               	skipz
  4223  07D3  0008               	return
  4224                           
  4225                           ;SYSC_B1.c: 35: SYSC.Timer++;
  4226  07D4  3001               	movlw	1
  4227  07D5  1283               	bcf	3,5	;RP0=0, select bank0
  4228  07D6  1303               	bcf	3,6	;RP1=0, select bank0
  4229  07D7  07A7               	addwf	_SYSC+1,f
  4230  07D8  1803               	skipnc
  4231  07D9  0AA8               	incf	_SYSC+2,f
  4232  07DA  3000               	movlw	0
  4233  07DB  07A8               	addwf	_SYSC+2,f
  4234                           
  4235                           ;SYSC_B1.c: 36: if (SYSC.Timer == 50) {
  4236  07DC  3032               	movlw	50
  4237  07DD  0627               	xorwf	_SYSC+1,w
  4238  07DE  0428               	iorwf	_SYSC+2,w
  4239  07DF  1D03               	skipz
  4240  07E0  2FE6               	goto	l4613
  4241                           
  4242                           ;SYSC_B1.c: 37: SYSC.Timer = 0;
  4243  07E1  01A7               	clrf	_SYSC+1
  4244  07E2  01A8               	clrf	_SYSC+2
  4245                           
  4246                           ;SYSC_B1.c: 38: SYSC.Counter = 0;
  4247  07E3  01A9               	clrf	_SYSC+3
  4248  07E4  01AA               	clrf	_SYSC+4
  4249                           
  4250                           ;SYSC_B1.c: 39: } else {
  4251  07E5  0008               	return
  4252  07E6                     l4613:	
  4253                           
  4254                           ;SYSC_B1.c: 40: SYSC.Counter++;
  4255  07E6  3001               	movlw	1
  4256  07E7  07A9               	addwf	_SYSC+3,f
  4257  07E8  1803               	skipnc
  4258  07E9  0AAA               	incf	_SYSC+4,f
  4259  07EA  3000               	movlw	0
  4260  07EB  07AA               	addwf	_SYSC+4,f
  4261                           
  4262                           ;SYSC_B1.c: 41: if (SYSC.Counter == 1000) {
  4263  07EC  3003               	movlw	3
  4264  07ED  062A               	xorwf	_SYSC+4,w
  4265  07EE  1D03               	skipz
  4266  07EF  2FF2               	goto	u5635
  4267  07F0  30E8               	movlw	232
  4268  07F1  0629               	xorwf	_SYSC+3,w
  4269  07F2                     u5635:	
  4270  07F2  1D03               	skipz
  4271  07F3  0008               	return
  4272                           
  4273                           ;SYSC_B1.c: 42: SYSC.Counter = 0;
  4274  07F4  01A9               	clrf	_SYSC+3
  4275  07F5  01AA               	clrf	_SYSC+4
  4276                           
  4277                           ;SYSC_B1.c: 43: SYSC.ERROR = 0;
  4278  07F6  10A6               	bcf	_SYSC,1
  4279  07F7  0008               	return
  4280  07F8                     __end_of_setSYSC_Main:	
  4281                           
  4282                           	psect	text19
  4283  0B49                     __ptext19:	
  4284 ;; *************** function _SYSC_Initialization *****************
  4285 ;; Defined at:
  4286 ;;		line 7 in file "../src/SYSC_B1.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;		None               void
  4293 ;; Registers used:
  4294 ;;		status,2, status,0, pclath, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4300 ;;      Params:         0       0       0       0
  4301 ;;      Locals:         0       0       0       0
  4302 ;;      Temps:          0       0       0       0
  4303 ;;      Totals:         0       0       0       0
  4304 ;;Total ram usage:        0 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    3
  4307 ;; This function calls:
  4308 ;;		_setSYSC_Initialization
  4309 ;; This function is called by:
  4310 ;;		_main
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           
  4315                           ;psect for function _SYSC_Initialization
  4316  0B49                     _SYSC_Initialization:	
  4317                           
  4318                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4319                           
  4320                           ;incstack = 0
  4321                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4322  0B49  158A  235D         	fcall	_setSYSC_Initialization
  4323  0B4B  0008               	return
  4324  0B4C                     __end_of_SYSC_Initialization:	
  4325                           
  4326                           	psect	text20
  4327  0B5D                     __ptext20:	
  4328 ;; *************** function _setSYSC_Initialization *****************
  4329 ;; Defined at:
  4330 ;;		line 13 in file "../src/SYSC_B1.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;		None
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;		None
  4335 ;; Return value:  Size  Location     Type
  4336 ;;		None               void
  4337 ;; Registers used:
  4338 ;;		None
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4344 ;;      Params:         0       0       0       0
  4345 ;;      Locals:         0       0       0       0
  4346 ;;      Temps:          0       0       0       0
  4347 ;;      Totals:         0       0       0       0
  4348 ;;Total ram usage:        0 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    2
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_SYSC_Initialization
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           
  4359                           ;psect for function _setSYSC_Initialization
  4360  0B5D                     _setSYSC_Initialization:	
  4361                           
  4362                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  4363                           
  4364                           ;incstack = 0
  4365                           ; Regs used in _setSYSC_Initialization: []
  4366  0B5D  1283               	bcf	3,5	;RP0=0, select bank0
  4367  0B5E  1303               	bcf	3,6	;RP1=0, select bank0
  4368  0B5F  1426               	bsf	_SYSC,0
  4369  0B60  0008               	return
  4370  0B61                     __end_of_setSYSC_Initialization:	
  4371                           
  4372                           	psect	text21
  4373  0025                     __ptext21:	
  4374 ;; *************** function _PIR_Main *****************
  4375 ;; Defined at:
  4376 ;;		line 13 in file "../src/PIR_B1.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;		None
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;  cds             1   14[BANK0 ] unsigned char 
  4381 ;;  error           1   11[BANK0 ] unsigned char 
  4382 ;; Return value:  Size  Location     Type
  4383 ;;		None               void
  4384 ;; Registers used:
  4385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4391 ;;      Params:         0       0       0       0
  4392 ;;      Locals:         0       4       0       0
  4393 ;;      Temps:          0       5       0       0
  4394 ;;      Totals:         0       9       0       0
  4395 ;;Total ram usage:        9 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; Hardware stack levels required when called:    4
  4398 ;; This function calls:
  4399 ;;		_getCDS_Status
  4400 ;;		_getLights_Status
  4401 ;;		_getMain_All_Error_Status
  4402 ;;		_setLED
  4403 ;;		_setLights_Trigger
  4404 ;; This function is called by:
  4405 ;;		_main
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           
  4410                           ;psect for function _PIR_Main
  4411  0025                     _PIR_Main:	
  4412                           
  4413                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  4414                           
  4415                           ;incstack = 0
  4416                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4417  0025  3000               	movlw	0
  4418  0026  158A  265E  118A   	fcall	_getMain_All_Error_Status
  4419  0029  1283               	bcf	3,5	;RP0=0, select bank0
  4420  002A  1303               	bcf	3,6	;RP1=0, select bank0
  4421  002B  00DF               	movwf	??_PIR_Main
  4422  002C  085F               	movf	??_PIR_Main,w
  4423  002D  00E4               	movwf	PIR_Main@error
  4424                           
  4425                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  4426  002E  158A  238E  118A   	fcall	_getCDS_Status
  4427  0031  1283               	bcf	3,5	;RP0=0, select bank0
  4428  0032  1303               	bcf	3,6	;RP1=0, select bank0
  4429  0033  00DF               	movwf	??_PIR_Main
  4430  0034  085F               	movf	??_PIR_Main,w
  4431  0035  00E7               	movwf	PIR_Main@cds
  4432                           
  4433                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  4434  0036  1683               	bsf	3,5	;RP0=1, select bank1
  4435  0037  1303               	bcf	3,6	;RP1=0, select bank1
  4436  0038  1C20               	btfss	__PIR^(0+128),0
  4437  0039  29F9               	goto	l869
  4438                           
  4439                           ;PIR_B1.c: 17: if (error == 0) {
  4440  003A  1283               	bcf	3,5	;RP0=0, select bank0
  4441  003B  1303               	bcf	3,6	;RP1=0, select bank0
  4442  003C  08E4               	movf	PIR_Main@error,f
  4443  003D  1D03               	skipz
  4444  003E  2870               	goto	l870
  4445                           
  4446                           ;PIR_B1.c: 19: if (cds == 1) {
  4447  003F  0867               	movf	PIR_Main@cds,w
  4448  0040  3A01               	xorlw	1
  4449  0041  1D03               	skipz
  4450  0042  2847               	goto	l871
  4451                           
  4452                           ;PIR_B1.c: 20: _PIR.Available = 1;
  4453  0043  1683               	bsf	3,5	;RP0=1, select bank1
  4454  0044  1303               	bcf	3,6	;RP1=0, select bank1
  4455  0045  17A0               	bsf	__PIR^(0+128),7
  4456                           
  4457                           ;PIR_B1.c: 21: } else {
  4458  0046  2862               	goto	l5039
  4459  0047                     l871:	
  4460                           
  4461                           ;PIR_B1.c: 22: _PIR.Available = 0;
  4462  0047  1683               	bsf	3,5	;RP0=1, select bank1
  4463  0048  1303               	bcf	3,6	;RP1=0, select bank1
  4464  0049  13A0               	bcf	__PIR^(0+128),7
  4465                           
  4466                           ;PIR_B1.c: 23: if (_PIR.OK == 1) {
  4467  004A  1DA0               	btfss	__PIR^(0+128),3
  4468  004B  2862               	goto	l5039
  4469                           
  4470                           ;PIR_B1.c: 24: if (getLights_Status(1) == 1) {
  4471  004C  3001               	movlw	1
  4472  004D  158A  2425  118A   	fcall	_getLights_Status
  4473  0050  3A01               	xorlw	1
  4474  0051  1D03               	skipz
  4475  0052  2858               	goto	l874
  4476                           
  4477                           ;PIR_B1.c: 25: setLights_Trigger(1, 0);
  4478  0053  01F6               	clrf	setLights_Trigger@command
  4479  0054  3001               	movlw	1
  4480  0055  158A  24F2  118A   	fcall	_setLights_Trigger
  4481  0058                     l874:	
  4482                           
  4483                           ;PIR_B1.c: 26: }
  4484                           ;PIR_B1.c: 27: setLED(1, 0);
  4485  0058  01F6               	clrf	setLED@command
  4486  0059  3001               	movlw	1
  4487  005A  118A  257F  118A   	fcall	_setLED
  4488                           
  4489                           ;PIR_B1.c: 28: setLED(2, 0);
  4490  005D  01F6               	clrf	setLED@command
  4491  005E  3002               	movlw	2
  4492  005F  118A  257F  118A   	fcall	_setLED
  4493  0062                     l5039:	
  4494                           
  4495                           ;PIR_B1.c: 29: }
  4496                           ;PIR_B1.c: 30: }
  4497                           ;PIR_B1.c: 34: if (_PIR.Detect == 0) {
  4498  0062  1683               	bsf	3,5	;RP0=1, select bank1
  4499  0063  1303               	bcf	3,6	;RP1=0, select bank1
  4500  0064  1A20               	btfsc	__PIR^(0+128),4
  4501  0065  2876               	goto	l877
  4502                           
  4503                           ;PIR_B1.c: 35: _PIR.Detect = 1;
  4504  0066  1620               	bsf	__PIR^(0+128),4
  4505                           
  4506                           ;PIR_B1.c: 36: if (_PIR.OK == 0) {
  4507  0067  19A0               	btfsc	__PIR^(0+128),3
  4508  0068  2876               	goto	l877
  4509                           
  4510                           ;PIR_B1.c: 37: setLED(1, 1);
  4511  0069  01F6               	clrf	setLED@command
  4512  006A  0AF6               	incf	setLED@command,f
  4513  006B  3001               	movlw	1
  4514  006C  118A  257F  118A   	fcall	_setLED
  4515                           
  4516                           ;PIR_B1.c: 38: }
  4517                           ;PIR_B1.c: 39: }
  4518                           ;PIR_B1.c: 40: } else {
  4519  006F  2876               	goto	l877
  4520  0070                     l870:	
  4521                           
  4522                           ;PIR_B1.c: 41: if (_PIR.Detect == 1) {
  4523  0070  1683               	bsf	3,5	;RP0=1, select bank1
  4524  0071  1303               	bcf	3,6	;RP1=0, select bank1
  4525  0072  1E20               	btfss	__PIR^(0+128),4
  4526  0073  2876               	goto	l877
  4527                           
  4528                           ;PIR_B1.c: 42: _PIR.Detect = 0;
  4529  0074  1220               	bcf	__PIR^(0+128),4
  4530                           
  4531                           ;PIR_B1.c: 43: _PIR.Available = 0;
  4532  0075  13A0               	bcf	__PIR^(0+128),7
  4533  0076                     l877:	
  4534                           
  4535                           ;PIR_B1.c: 61: }
  4536                           ;PIR_B1.c: 62: }
  4537                           ;PIR_B1.c: 64: if (_PIR.ADtoGO == 0) {
  4538  0076  1683               	bsf	3,5	;RP0=1, select bank1
  4539  0077  1303               	bcf	3,6	;RP1=0, select bank1
  4540  0078  18A0               	btfsc	__PIR^(0+128),1
  4541  0079  2889               	goto	l879
  4542                           
  4543                           ;PIR_B1.c: 65: _PIR.Time++;
  4544  007A  3001               	movlw	1
  4545  007B  1283               	bcf	3,5	;RP0=0, select bank0
  4546  007C  1303               	bcf	3,6	;RP1=0, select bank0
  4547  007D  00DF               	movwf	??_PIR_Main
  4548  007E  085F               	movf	??_PIR_Main,w
  4549  007F  1683               	bsf	3,5	;RP0=1, select bank1
  4550  0080  1303               	bcf	3,6	;RP1=0, select bank1
  4551  0081  07A5               	addwf	(__PIR^(0+128)+5),f
  4552                           
  4553                           ;PIR_B1.c: 66: if (_PIR.Time == 10) {
  4554  0082  0825               	movf	(__PIR^(0+128)+5),w
  4555  0083  3A0A               	xorlw	10
  4556  0084  1D03               	skipz
  4557  0085  29A0               	goto	l5129
  4558                           
  4559                           ;PIR_B1.c: 67: _PIR.Time = 0;
  4560  0086  01A5               	clrf	(__PIR^(0+128)+5)
  4561                           
  4562                           ;PIR_B1.c: 68: _PIR.ADtoGO = 1;
  4563  0087  14A0               	bsf	__PIR^(0+128),1
  4564                           
  4565                           ;PIR_B1.c: 69: }
  4566                           ;PIR_B1.c: 70: } else {
  4567  0088  29A0               	goto	l5129
  4568  0089                     l879:	
  4569                           
  4570                           ;PIR_B1.c: 71: if (_PIR.GO == 1) {
  4571  0089  1D20               	btfss	__PIR^(0+128),2
  4572  008A  29A0               	goto	l5129
  4573                           
  4574                           ;PIR_B1.c: 72: _PIR.GO = 0;
  4575  008B  1120               	bcf	__PIR^(0+128),2
  4576                           
  4577                           ;PIR_B1.c: 73: _PIR.ADtoGO = 0;
  4578  008C  10A0               	bcf	__PIR^(0+128),1
  4579                           
  4580                           ;PIR_B1.c: 74: if (_PIR.Available == 1) {
  4581  008D  1BA0               	btfsc	__PIR^(0+128),7
  4582                           
  4583                           ;PIR_B1.c: 75: if (_PIR.OK == 1) {
  4584  008E  1DA0               	btfss	__PIR^(0+128),3
  4585  008F  29A0               	goto	l5129
  4586                           
  4587                           ;PIR_B1.c: 77: _PIR.Time++;
  4588  0090  3001               	movlw	1
  4589  0091  1283               	bcf	3,5	;RP0=0, select bank0
  4590  0092  1303               	bcf	3,6	;RP1=0, select bank0
  4591  0093  00DF               	movwf	??_PIR_Main
  4592  0094  085F               	movf	??_PIR_Main,w
  4593  0095  1683               	bsf	3,5	;RP0=1, select bank1
  4594  0096  1303               	bcf	3,6	;RP1=0, select bank1
  4595  0097  07A5               	addwf	(__PIR^(0+128)+5),f
  4596                           
  4597                           ;PIR_B1.c: 78: if (_PIR.Time == 60) {
  4598  0098  0825               	movf	(__PIR^(0+128)+5),w
  4599  0099  3A3C               	xorlw	60
  4600  009A  1D03               	skipz
  4601  009B  28D0               	goto	l5095
  4602                           
  4603                           ;PIR_B1.c: 79: _PIR.Time = 0;
  4604  009C  01A5               	clrf	(__PIR^(0+128)+5)
  4605                           
  4606                           ;PIR_B1.c: 80: if (_PIR.RangeCount >= 90) {
  4607  009D  305A               	movlw	90
  4608  009E  024B               	subwf	(__PIR^(0+128)+43),w
  4609  009F  1C03               	skipc
  4610  00A0  28AC               	goto	l5077
  4611                           
  4612                           ;PIR_B1.c: 81: _PIR.RangeTime1 = 0;
  4613  00A1  01CA               	clrf	(__PIR^(0+128)+42)
  4614                           
  4615                           ;PIR_B1.c: 83: if (_PIR.RangeValue == 20) {
  4616  00A2  084C               	movf	(__PIR^(0+128)+44),w
  4617  00A3  3A14               	xorlw	20
  4618  00A4  1903               	btfsc	3,2
  4619  00A5  28C1               	goto	L14
  4620                           
  4621                           ;PIR_B1.c: 85: } else if (_PIR.RangeValue == (20+10)) {
  4622                           
  4623                           ;PIR_B1.c: 84: _PIR.RangeValue = (20+10);
  4624  00A6  084C               	movf	(__PIR^(0+128)+44),w
  4625  00A7  3A1E               	xorlw	30
  4626  00A8  1D03               	skipz
  4627  00A9  28CF               	goto	l5093
  4628                           
  4629                           ;PIR_B1.c: 86: _PIR.RangeValue = (20+20);
  4630  00AA  3028               	movlw	40
  4631  00AB  28C8               	goto	L10
  4632  00AC                     l5077:	
  4633                           ;PIR_B1.c: 87: }
  4634                           ;PIR_B1.c: 88: } else if (_PIR.RangeCount <= 10) {
  4635                           
  4636  00AC  300B               	movlw	11
  4637  00AD  024B               	subwf	(__PIR^(0+128)+43),w
  4638  00AE  1803               	skipnc
  4639  00AF  28CF               	goto	l5093
  4640                           
  4641                           ;PIR_B1.c: 89: _PIR.RangeTime1++;
  4642  00B0  3001               	movlw	1
  4643  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  4644  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  4645  00B3  00DF               	movwf	??_PIR_Main
  4646  00B4  085F               	movf	??_PIR_Main,w
  4647  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  4648  00B6  1303               	bcf	3,6	;RP1=0, select bank1
  4649  00B7  07CA               	addwf	(__PIR^(0+128)+42),f
  4650                           
  4651                           ;PIR_B1.c: 90: if (_PIR.RangeTime1 == 2) {
  4652  00B8  084A               	movf	(__PIR^(0+128)+42),w
  4653  00B9  3A02               	xorlw	2
  4654  00BA  1D03               	skipz
  4655  00BB  28CF               	goto	l5093
  4656                           
  4657                           ;PIR_B1.c: 91: _PIR.RangeTime1 = 0;
  4658  00BC  01CA               	clrf	(__PIR^(0+128)+42)
  4659                           
  4660                           ;PIR_B1.c: 93: if (_PIR.RangeValue == (20+20)) {
  4661  00BD  084C               	movf	(__PIR^(0+128)+44),w
  4662  00BE  3A28               	xorlw	40
  4663  00BF  1D03               	skipz
  4664  00C0  28C3               	goto	l5089
  4665  00C1                     L14:	
  4666                           
  4667                           ;PIR_B1.c: 94: _PIR.RangeValue = (20+10);
  4668  00C1  301E               	movlw	30
  4669  00C2  28C8               	goto	L10
  4670  00C3                     l5089:	
  4671                           ;PIR_B1.c: 95: } else if (_PIR.RangeValue == (20+10)) {
  4672                           
  4673  00C3  084C               	movf	(__PIR^(0+128)+44),w
  4674  00C4  3A1E               	xorlw	30
  4675  00C5  1D03               	skipz
  4676  00C6  28CF               	goto	l5093
  4677                           
  4678                           ;PIR_B1.c: 96: _PIR.RangeValue = 20;
  4679  00C7  3014               	movlw	20
  4680  00C8                     L10:	
  4681  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  4682  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  4683  00CA  00DF               	movwf	??_PIR_Main
  4684  00CB  085F               	movf	??_PIR_Main,w
  4685  00CC  1683               	bsf	3,5	;RP0=1, select bank1
  4686  00CD  1303               	bcf	3,6	;RP1=0, select bank1
  4687  00CE  00CC               	movwf	(__PIR^(0+128)+44)
  4688  00CF                     l5093:	
  4689                           
  4690                           ;PIR_B1.c: 97: }
  4691                           ;PIR_B1.c: 98: }
  4692                           ;PIR_B1.c: 99: }
  4693                           ;PIR_B1.c: 100: _PIR.RangeCount = 0;
  4694  00CF  01CB               	clrf	(__PIR^(0+128)+43)
  4695  00D0                     l5095:	
  4696                           
  4697                           ;PIR_B1.c: 101: }
  4698                           ;PIR_B1.c: 104: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))
  4699                           ;PIR_B1.c: 105: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + (_PIR.RangeValue + _PIR.Of
      +                          fset)))) {
  4700  00D0  084C               	movf	(__PIR^(0+128)+44),w
  4701  00D1  074E               	addwf	(__PIR^(0+128)+46),w
  4702  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  4703  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  4704  00D4  00DF               	movwf	??_PIR_Main
  4705  00D5  01E0               	clrf	??_PIR_Main+1
  4706  00D6  0DE0               	rlf	??_PIR_Main+1,f
  4707  00D7  09DF               	comf	??_PIR_Main,f
  4708  00D8  09E0               	comf	??_PIR_Main+1,f
  4709  00D9  0ADF               	incf	??_PIR_Main,f
  4710  00DA  1903               	skipnz
  4711  00DB  0AE0               	incf	??_PIR_Main+1,f
  4712  00DC  1683               	bsf	3,5	;RP0=1, select bank1
  4713  00DD  1303               	bcf	3,6	;RP1=0, select bank1
  4714  00DE  0826               	movf	(__PIR^(0+128)+6),w
  4715  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  4716  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  4717  00E1  075F               	addwf	??_PIR_Main,w
  4718  00E2  00E1               	movwf	??_PIR_Main+2
  4719  00E3  0860               	movf	??_PIR_Main+1,w
  4720  00E4  1803               	skipnc
  4721  00E5  0A60               	incf	??_PIR_Main+1,w
  4722  00E6  00E2               	movwf	??_PIR_Main+3
  4723  00E7  0862               	movf	??_PIR_Main+3,w
  4724  00E8  3A80               	xorlw	128
  4725  00E9  3C80               	sublw	128
  4726  00EA  1D03               	skipz
  4727  00EB  28F0               	goto	u6655
  4728  00EC  0861               	movf	??_PIR_Main+2,w
  4729  00ED  1683               	bsf	3,5	;RP0=1, select bank1
  4730  00EE  1303               	bcf	3,6	;RP1=0, select bank1
  4731  00EF  0221               	subwf	(__PIR^(0+128)+1),w
  4732  00F0                     u6655:	
  4733  00F0  1C03               	skipc
  4734  00F1  291C               	goto	l5105
  4735  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  4736  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  4737  00F4  084C               	movf	(__PIR^(0+128)+44),w
  4738  00F5  074E               	addwf	(__PIR^(0+128)+46),w
  4739  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  4740  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  4741  00F8  00DF               	movwf	??_PIR_Main
  4742  00F9  01E0               	clrf	??_PIR_Main+1
  4743  00FA  0DE0               	rlf	??_PIR_Main+1,f
  4744  00FB  1683               	bsf	3,5	;RP0=1, select bank1
  4745  00FC  1303               	bcf	3,6	;RP1=0, select bank1
  4746  00FD  0826               	movf	(__PIR^(0+128)+6),w
  4747  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  4748  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  4749  0100  075F               	addwf	??_PIR_Main,w
  4750  0101  00E1               	movwf	??_PIR_Main+2
  4751  0102  3000               	movlw	0
  4752  0103  1803               	skipnc
  4753  0104  3001               	movlw	1
  4754  0105  0760               	addwf	??_PIR_Main+1,w
  4755  0106  00E2               	movwf	??_PIR_Main+3
  4756  0107  0862               	movf	??_PIR_Main+3,w
  4757  0108  3A80               	xorlw	128
  4758  0109  00E3               	movwf	??_PIR_Main+4
  4759  010A  3080               	movlw	128
  4760  010B  0263               	subwf	??_PIR_Main+4,w
  4761  010C  1D03               	skipz
  4762  010D  2914               	goto	u6665
  4763  010E  1683               	bsf	3,5	;RP0=1, select bank1
  4764  010F  1303               	bcf	3,6	;RP1=0, select bank1
  4765  0110  0821               	movf	(__PIR^(0+128)+1),w
  4766  0111  1283               	bcf	3,5	;RP0=0, select bank0
  4767  0112  1303               	bcf	3,6	;RP1=0, select bank0
  4768  0113  0261               	subwf	??_PIR_Main+2,w
  4769  0114                     u6665:	
  4770  0114  1C03               	skipc
  4771  0115  291C               	goto	l5105
  4772                           
  4773                           ;PIR_B1.c: 107: _PIR.Count = 0;
  4774  0116  1683               	bsf	3,5	;RP0=1, select bank1
  4775  0117  1303               	bcf	3,6	;RP1=0, select bank1
  4776  0118  01C1               	clrf	(__PIR^(0+128)+33)
  4777  0119  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4778                           
  4779                           ;PIR_B1.c: 113: setLED(1, 0);
  4780  011A  01F6               	clrf	setLED@command
  4781  011B  298F               	goto	L15
  4782  011C                     l5105:	
  4783                           ;PIR_B1.c: 115: } else {
  4784                           
  4785                           ;PIR_B1.c: 114: setLED(2, 0);
  4786                           
  4787                           
  4788                           ;PIR_B1.c: 117: _PIR.RangeCount++;
  4789  011C  3001               	movlw	1
  4790  011D  1283               	bcf	3,5	;RP0=0, select bank0
  4791  011E  1303               	bcf	3,6	;RP1=0, select bank0
  4792  011F  00DF               	movwf	??_PIR_Main
  4793  0120  085F               	movf	??_PIR_Main,w
  4794  0121  1683               	bsf	3,5	;RP0=1, select bank1
  4795  0122  1303               	bcf	3,6	;RP1=0, select bank1
  4796  0123  07CB               	addwf	(__PIR^(0+128)+43),f
  4797                           
  4798                           ;PIR_B1.c: 118: _PIR.Count++;
  4799  0124  3001               	movlw	1
  4800  0125  07C1               	addwf	(__PIR^(0+128)+33),f
  4801  0126  1803               	skipnc
  4802  0127  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4803  0128  3000               	movlw	0
  4804  0129  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4805                           
  4806                           ;PIR_B1.c: 120: _PIR.TriggerValue = _PIR.Status == 1 ? 3 : 3;
  4807  012A  1B20               	btfsc	__PIR^(0+128),6
  4808  012B  2930               	goto	l5113
  4809  012C  3003               	movlw	3
  4810  012D  1283               	bcf	3,5	;RP0=0, select bank0
  4811  012E  1303               	bcf	3,6	;RP1=0, select bank0
  4812  012F  2932               	goto	L11
  4813  0130                     l5113:	
  4814  0130  3003               	movlw	3
  4815  0131  1283               	bcf	3,5	;RP0=0, select bank0
  4816  0132                     L11:	
  4817  0132  00E5               	movwf	_PIR_Main$2988
  4818  0133  3000               	movlw	0
  4819  0134  00E6               	movwf	_PIR_Main$2988+1
  4820  0135  0865               	movf	_PIR_Main$2988,w
  4821  0136  00DF               	movwf	??_PIR_Main
  4822  0137  085F               	movf	??_PIR_Main,w
  4823  0138  1683               	bsf	3,5	;RP0=1, select bank1
  4824  0139  1303               	bcf	3,6	;RP1=0, select bank1
  4825  013A  00C3               	movwf	(__PIR^(0+128)+35)
  4826                           
  4827                           ;PIR_B1.c: 122: if (_PIR.Count == _PIR.TriggerValue) {
  4828  013B  0843               	movf	(__PIR^(0+128)+35),w
  4829  013C  1283               	bcf	3,5	;RP0=0, select bank0
  4830  013D  1303               	bcf	3,6	;RP1=0, select bank0
  4831  013E  00DF               	movwf	??_PIR_Main
  4832  013F  01E0               	clrf	??_PIR_Main+1
  4833  0140  1683               	bsf	3,5	;RP0=1, select bank1
  4834  0141  1303               	bcf	3,6	;RP1=0, select bank1
  4835  0142  0842               	movf	((__PIR+1)^(0+128)+33),w
  4836  0143  1283               	bcf	3,5	;RP0=0, select bank0
  4837  0144  1303               	bcf	3,6	;RP1=0, select bank0
  4838  0145  0660               	xorwf	??_PIR_Main+1,w
  4839  0146  1D03               	skipz
  4840  0147  294E               	goto	u6685
  4841  0148  1683               	bsf	3,5	;RP0=1, select bank1
  4842  0149  1303               	bcf	3,6	;RP1=0, select bank1
  4843  014A  0841               	movf	(__PIR^(0+128)+33),w
  4844  014B  1283               	bcf	3,5	;RP0=0, select bank0
  4845  014C  1303               	bcf	3,6	;RP1=0, select bank0
  4846  014D  065F               	xorwf	??_PIR_Main,w
  4847  014E                     u6685:	
  4848  014E  1D03               	skipz
  4849  014F  29A0               	goto	l5129
  4850                           
  4851                           ;PIR_B1.c: 123: _PIR.Count = 0;
  4852  0150  1683               	bsf	3,5	;RP0=1, select bank1
  4853  0151  1303               	bcf	3,6	;RP1=0, select bank1
  4854  0152  01C1               	clrf	(__PIR^(0+128)+33)
  4855  0153  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4856                           
  4857                           ;PIR_B1.c: 125: _PIR.CloseTimeSeconds = 0;
  4858  0154  01C6               	clrf	(__PIR^(0+128)+38)
  4859                           
  4860                           ;PIR_B1.c: 126: _PIR.CloseTimeMinutes = 0;
  4861  0155  01C4               	clrf	(__PIR^(0+128)+36)
  4862  0156  01C5               	clrf	((__PIR+1)^(0+128)+36)
  4863                           
  4864                           ;PIR_B1.c: 127: _PIR.Status = 1;
  4865  0157  1720               	bsf	__PIR^(0+128),6
  4866                           
  4867                           ;PIR_B1.c: 131: if (getLights_Status(1) == 0) {
  4868  0158  3001               	movlw	1
  4869  0159  158A  2425  118A   	fcall	_getLights_Status
  4870  015C  3800               	iorlw	0
  4871  015D  1D03               	skipz
  4872  015E  2965               	goto	l5123
  4873                           
  4874                           ;PIR_B1.c: 132: setLights_Trigger(1, 1);
  4875  015F  01F6               	clrf	setLights_Trigger@command
  4876  0160  0AF6               	incf	setLights_Trigger@command,f
  4877  0161  3001               	movlw	1
  4878  0162  158A  24F2  118A   	fcall	_setLights_Trigger
  4879  0165                     l5123:	
  4880                           
  4881                           ;PIR_B1.c: 133: }
  4882                           ;PIR_B1.c: 137: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))) {
  4883  0165  1683               	bsf	3,5	;RP0=1, select bank1
  4884  0166  1303               	bcf	3,6	;RP1=0, select bank1
  4885  0167  084C               	movf	(__PIR^(0+128)+44),w
  4886  0168  074E               	addwf	(__PIR^(0+128)+46),w
  4887  0169  1283               	bcf	3,5	;RP0=0, select bank0
  4888  016A  1303               	bcf	3,6	;RP1=0, select bank0
  4889  016B  00DF               	movwf	??_PIR_Main
  4890  016C  01E0               	clrf	??_PIR_Main+1
  4891  016D  0DE0               	rlf	??_PIR_Main+1,f
  4892  016E  09DF               	comf	??_PIR_Main,f
  4893  016F  09E0               	comf	??_PIR_Main+1,f
  4894  0170  0ADF               	incf	??_PIR_Main,f
  4895  0171  1903               	skipnz
  4896  0172  0AE0               	incf	??_PIR_Main+1,f
  4897  0173  1683               	bsf	3,5	;RP0=1, select bank1
  4898  0174  1303               	bcf	3,6	;RP1=0, select bank1
  4899  0175  0826               	movf	(__PIR^(0+128)+6),w
  4900  0176  1283               	bcf	3,5	;RP0=0, select bank0
  4901  0177  1303               	bcf	3,6	;RP1=0, select bank0
  4902  0178  075F               	addwf	??_PIR_Main,w
  4903  0179  00E1               	movwf	??_PIR_Main+2
  4904  017A  0860               	movf	??_PIR_Main+1,w
  4905  017B  1803               	skipnc
  4906  017C  0A60               	incf	??_PIR_Main+1,w
  4907  017D  00E2               	movwf	??_PIR_Main+3
  4908  017E  0862               	movf	??_PIR_Main+3,w
  4909  017F  3A80               	xorlw	128
  4910  0180  00E3               	movwf	??_PIR_Main+4
  4911  0181  3080               	movlw	128
  4912  0182  0263               	subwf	??_PIR_Main+4,w
  4913  0183  1D03               	skipz
  4914  0184  298B               	goto	u6705
  4915  0185  1683               	bsf	3,5	;RP0=1, select bank1
  4916  0186  1303               	bcf	3,6	;RP1=0, select bank1
  4917  0187  0821               	movf	(__PIR^(0+128)+1),w
  4918  0188  1283               	bcf	3,5	;RP0=0, select bank0
  4919  0189  1303               	bcf	3,6	;RP1=0, select bank0
  4920  018A  0261               	subwf	??_PIR_Main+2,w
  4921  018B                     u6705:	
  4922  018B  1C03               	skipc
  4923  018C  2995               	goto	l5127
  4924                           
  4925                           ;PIR_B1.c: 138: setLED(1, 1);
  4926  018D  01F6               	clrf	setLED@command
  4927  018E  0AF6               	incf	setLED@command,f
  4928  018F                     L15:	
  4929  018F  3001               	movlw	1
  4930  0190  118A  257F  118A   	fcall	_setLED
  4931                           
  4932                           ;PIR_B1.c: 139: setLED(2, 0);
  4933  0193  01F6               	clrf	setLED@command
  4934  0194  299C               	goto	L12
  4935  0195                     l5127:	
  4936                           ;PIR_B1.c: 140: } else {
  4937                           
  4938                           
  4939                           ;PIR_B1.c: 141: setLED(1, 0);
  4940  0195  01F6               	clrf	setLED@command
  4941  0196  3001               	movlw	1
  4942  0197  118A  257F  118A   	fcall	_setLED
  4943                           
  4944                           ;PIR_B1.c: 142: setLED(2, 1);
  4945  019A  01F6               	clrf	setLED@command
  4946  019B  0AF6               	incf	setLED@command,f
  4947  019C                     L12:	
  4948  019C  3002               	movlw	2
  4949  019D  118A  257F  118A   	fcall	_setLED
  4950  01A0                     l5129:	
  4951                           
  4952                           ;PIR_B1.c: 143: }
  4953                           ;PIR_B1.c: 167: }
  4954                           ;PIR_B1.c: 168: }
  4955                           ;PIR_B1.c: 169: }
  4956                           ;PIR_B1.c: 170: }
  4957                           ;PIR_B1.c: 171: }
  4958                           ;PIR_B1.c: 172: }
  4959                           ;PIR_B1.c: 173: if (_PIR.OK == 0) {
  4960  01A0  1683               	bsf	3,5	;RP0=1, select bank1
  4961  01A1  1303               	bcf	3,6	;RP1=0, select bank1
  4962  01A2  19A0               	btfsc	__PIR^(0+128),3
  4963  01A3  29CB               	goto	l5145
  4964                           
  4965                           ;PIR_B1.c: 174: _PIR.Count++;
  4966  01A4  3001               	movlw	1
  4967  01A5  07C1               	addwf	(__PIR^(0+128)+33),f
  4968  01A6  1803               	skipnc
  4969  01A7  0AC2               	incf	((__PIR+1)^(0+128)+33),f
  4970  01A8  3000               	movlw	0
  4971  01A9  07C2               	addwf	((__PIR+1)^(0+128)+33),f
  4972                           
  4973                           ;PIR_B1.c: 175: if (_PIR.Count == 3000) {
  4974  01AA  300B               	movlw	11
  4975  01AB  0642               	xorwf	((__PIR+1)^(0+128)+33),w
  4976  01AC  1D03               	skipz
  4977  01AD  29B0               	goto	u6725
  4978  01AE  30B8               	movlw	184
  4979  01AF  0641               	xorwf	(__PIR^(0+128)+33),w
  4980  01B0                     u6725:	
  4981  01B0  1D03               	skipz
  4982  01B1  29CB               	goto	l5145
  4983                           
  4984                           ;PIR_B1.c: 176: _PIR.Count = 0;
  4985  01B2  01C1               	clrf	(__PIR^(0+128)+33)
  4986  01B3  01C2               	clrf	((__PIR+1)^(0+128)+33)
  4987                           
  4988                           ;PIR_B1.c: 177: _PIR.OK = 1;
  4989  01B4  15A0               	bsf	__PIR^(0+128),3
  4990                           
  4991                           ;PIR_B1.c: 178: setLED(1, 0);
  4992  01B5  01F6               	clrf	setLED@command
  4993  01B6  3001               	movlw	1
  4994  01B7  118A  257F  118A   	fcall	_setLED
  4995                           
  4996                           ;PIR_B1.c: 179: if (cds == 0) {
  4997  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  4998  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  4999  01BC  08E7               	movf	PIR_Main@cds,f
  5000  01BD  1D03               	skipz
  5001  01BE  29CB               	goto	l5145
  5002                           
  5003                           ;PIR_B1.c: 180: if (getLights_Status(1) == 1) {
  5004  01BF  3001               	movlw	1
  5005  01C0  158A  2425  118A   	fcall	_getLights_Status
  5006  01C3  3A01               	xorlw	1
  5007  01C4  1D03               	skipz
  5008  01C5  29CB               	goto	l5145
  5009                           
  5010                           ;PIR_B1.c: 181: setLights_Trigger(1, 0);
  5011  01C6  01F6               	clrf	setLights_Trigger@command
  5012  01C7  3001               	movlw	1
  5013  01C8  158A  24F2  118A   	fcall	_setLights_Trigger
  5014  01CB                     l5145:	
  5015                           
  5016                           ;PIR_B1.c: 182: }
  5017                           ;PIR_B1.c: 183: }
  5018                           ;PIR_B1.c: 184: }
  5019                           ;PIR_B1.c: 185: }
  5020                           ;PIR_B1.c: 186: if (_PIR.Status == 1) {
  5021  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  5022  01CC  1303               	bcf	3,6	;RP1=0, select bank1
  5023  01CD  1F20               	btfss	__PIR^(0+128),6
  5024  01CE  0008               	return
  5025                           
  5026                           ;PIR_B1.c: 187: _PIR.CloseTimeSeconds++;
  5027  01CF  3001               	movlw	1
  5028  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  5029  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  5030  01D2  00DF               	movwf	??_PIR_Main
  5031  01D3  085F               	movf	??_PIR_Main,w
  5032  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  5033  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  5034  01D6  07C6               	addwf	(__PIR^(0+128)+38),f
  5035                           
  5036                           ;PIR_B1.c: 188: if (_PIR.CloseTimeSeconds == 100) {
  5037  01D7  0846               	movf	(__PIR^(0+128)+38),w
  5038  01D8  3A64               	xorlw	100
  5039  01D9  1D03               	skipz
  5040  01DA  0008               	return
  5041                           
  5042                           ;PIR_B1.c: 189: _PIR.CloseTimeSeconds = 0;
  5043  01DB  01C6               	clrf	(__PIR^(0+128)+38)
  5044                           
  5045                           ;PIR_B1.c: 190: _PIR.CloseTimeMinutes++;
  5046  01DC  3001               	movlw	1
  5047  01DD  07C4               	addwf	(__PIR^(0+128)+36),f
  5048  01DE  1803               	skipnc
  5049  01DF  0AC5               	incf	((__PIR+1)^(0+128)+36),f
  5050  01E0  3000               	movlw	0
  5051  01E1  07C5               	addwf	((__PIR+1)^(0+128)+36),f
  5052                           
  5053                           ;PIR_B1.c: 191: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5054  01E2  0848               	movf	((__PIR+1)^(0+128)+39),w
  5055  01E3  0645               	xorwf	((__PIR+1)^(0+128)+36),w
  5056  01E4  1D03               	skipz
  5057  01E5  29E8               	goto	u6775
  5058  01E6  0847               	movf	(__PIR^(0+128)+39),w
  5059  01E7  0644               	xorwf	(__PIR^(0+128)+36),w
  5060  01E8                     u6775:	
  5061  01E8  1D03               	skipz
  5062  01E9  0008               	return
  5063                           
  5064                           ;PIR_B1.c: 192: _PIR.CloseTimeMinutes = 0;
  5065  01EA  01C4               	clrf	(__PIR^(0+128)+36)
  5066  01EB  01C5               	clrf	((__PIR+1)^(0+128)+36)
  5067                           
  5068                           ;PIR_B1.c: 193: _PIR.Status = 0;
  5069  01EC  1320               	bcf	__PIR^(0+128),6
  5070                           
  5071                           ;PIR_B1.c: 197: if (getLights_Status(1) == 1) {
  5072  01ED  3001               	movlw	1
  5073  01EE  158A  2425  118A   	fcall	_getLights_Status
  5074  01F1  3A01               	xorlw	1
  5075  01F2  1D03               	skipz
  5076  01F3  0008               	return
  5077                           
  5078                           ;PIR_B1.c: 198: setLights_Trigger(1, 0);
  5079  01F4  01F6               	clrf	setLights_Trigger@command
  5080  01F5  3001               	movlw	1
  5081  01F6  158A  24F2         	fcall	_setLights_Trigger
  5082                           
  5083                           ;PIR_B1.c: 199: }
  5084                           ;PIR_B1.c: 203: }
  5085                           ;PIR_B1.c: 204: }
  5086                           ;PIR_B1.c: 205: }
  5087                           ;PIR_B1.c: 206: } else {
  5088  01F8  0008               	return
  5089  01F9                     l869:	
  5090                           
  5091                           ;PIR_B1.c: 207: if (myMain.PowerON == 1) {
  5092  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  5093  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  5094  01FB  1C20               	btfss	_myMain,0
  5095  01FC  0008               	return
  5096                           
  5097                           ;PIR_B1.c: 208: _PIR.Enable = 1;
  5098  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  5099  01FE  1303               	bcf	3,6	;RP1=0, select bank1
  5100  01FF  1420               	bsf	__PIR^(0+128),0
  5101                           
  5102                           ;PIR_B1.c: 209: setLED(1, 1);
  5103  0200  01F6               	clrf	setLED@command
  5104  0201  0AF6               	incf	setLED@command,f
  5105  0202  3001               	movlw	1
  5106  0203  118A  257F  118A   	fcall	_setLED
  5107                           
  5108                           ;PIR_B1.c: 212: if (getLights_Status(1) == 0) {
  5109  0206  3001               	movlw	1
  5110  0207  158A  2425  118A   	fcall	_getLights_Status
  5111  020A  3800               	iorlw	0
  5112  020B  1D03               	skipz
  5113  020C  0008               	return
  5114                           
  5115                           ;PIR_B1.c: 213: setLights_Trigger(1, 1);
  5116  020D  01F6               	clrf	setLights_Trigger@command
  5117  020E  0AF6               	incf	setLights_Trigger@command,f
  5118  020F  3001               	movlw	1
  5119  0210  158A  24F2         	fcall	_setLights_Trigger
  5120  0212  0008               	return
  5121  0213                     __end_of_PIR_Main:	
  5122                           
  5123                           	psect	text22
  5124  0B8E                     __ptext22:	
  5125 ;; *************** function _getCDS_Status *****************
  5126 ;; Defined at:
  5127 ;;		line 42 in file "../src/CDS_B1.c"
  5128 ;; Parameters:    Size  Location     Type
  5129 ;;		None
  5130 ;; Auto vars:     Size  Location     Type
  5131 ;;  status          1    4[COMMON] unsigned char 
  5132 ;; Return value:  Size  Location     Type
  5133 ;;                  1    wreg      unsigned char 
  5134 ;; Registers used:
  5135 ;;		wreg, status,2
  5136 ;; Tracked objects:
  5137 ;;		On entry : 0/0
  5138 ;;		On exit  : 0/0
  5139 ;;		Unchanged: 0/0
  5140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5141 ;;      Params:         0       0       0       0
  5142 ;;      Locals:         1       0       0       0
  5143 ;;      Temps:          0       0       0       0
  5144 ;;      Totals:         1       0       0       0
  5145 ;;Total ram usage:        1 bytes
  5146 ;; Hardware stack levels used:    1
  5147 ;; Hardware stack levels required when called:    2
  5148 ;; This function calls:
  5149 ;;		Nothing
  5150 ;; This function is called by:
  5151 ;;		_PIR_Main
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           
  5156                           ;psect for function _getCDS_Status
  5157  0B8E                     _getCDS_Status:	
  5158                           
  5159                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5160                           
  5161                           ;incstack = 0
  5162                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5163  0B8E  3000               	movlw	0
  5164  0B8F  1283               	bcf	3,5	;RP0=0, select bank0
  5165  0B90  1303               	bcf	3,6	;RP1=0, select bank0
  5166  0B91  1A2B               	btfsc	__CDS,4
  5167  0B92  3001               	movlw	1
  5168  0B93  00F4               	movwf	getCDS_Status@status
  5169                           
  5170                           ;CDS_B1.c: 44: return status;
  5171  0B94  0874               	movf	getCDS_Status@status,w
  5172  0B95  0008               	return
  5173  0B96                     __end_of_getCDS_Status:	
  5174                           
  5175                           	psect	text23
  5176  0BA0                     __ptext23:	
  5177 ;; *************** function _PIR_Initialization *****************
  5178 ;; Defined at:
  5179 ;;		line 7 in file "../src/PIR_B1.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;		None
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;		None
  5184 ;; Return value:  Size  Location     Type
  5185 ;;		None               void
  5186 ;; Registers used:
  5187 ;;		wreg
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5193 ;;      Params:         0       0       0       0
  5194 ;;      Locals:         0       0       0       0
  5195 ;;      Temps:          1       0       0       0
  5196 ;;      Totals:         1       0       0       0
  5197 ;;Total ram usage:        1 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    2
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		_main
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           
  5208                           ;psect for function _PIR_Initialization
  5209  0BA0                     _PIR_Initialization:	
  5210                           
  5211                           ;PIR_B1.c: 8: _PIR.RangeValue = 20;
  5212                           
  5213                           ;incstack = 0
  5214                           ; Regs used in _PIR_Initialization: [wreg]
  5215  0BA0  3014               	movlw	20
  5216  0BA1  00F4               	movwf	??_PIR_Initialization
  5217  0BA2  0874               	movf	??_PIR_Initialization,w
  5218  0BA3  1683               	bsf	3,5	;RP0=1, select bank1
  5219  0BA4  1303               	bcf	3,6	;RP1=0, select bank1
  5220  0BA5  00CC               	movwf	(__PIR^(0+128)+44)
  5221                           
  5222                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5223  0BA6  3005               	movlw	5
  5224  0BA7  00C7               	movwf	(__PIR^(0+128)+39)
  5225  0BA8  3000               	movlw	0
  5226  0BA9  00C8               	movwf	(__PIR^(0+128)+40)
  5227  0BAA  0008               	return
  5228  0BAB                     __end_of_PIR_Initialization:	
  5229                           
  5230                           	psect	text24
  5231  0C06                     __ptext24:	
  5232 ;; *************** function _Mcu_Initialization *****************
  5233 ;; Defined at:
  5234 ;;		line 30 in file "../src/MCU_B1.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;		None
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;		None
  5239 ;; Return value:  Size  Location     Type
  5240 ;;		None               void
  5241 ;; Registers used:
  5242 ;;		wreg, status,2, status,0, pclath, cstack
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5248 ;;      Params:         0       0       0       0
  5249 ;;      Locals:         0       0       0       0
  5250 ;;      Temps:          0       0       0       0
  5251 ;;      Totals:         0       0       0       0
  5252 ;;Total ram usage:        0 bytes
  5253 ;; Hardware stack levels used:    1
  5254 ;; Hardware stack levels required when called:    3
  5255 ;; This function calls:
  5256 ;;		_ADC_Set
  5257 ;;		_Fosc_Set
  5258 ;;		_IO_Set
  5259 ;;		_TMR1_Set
  5260 ;;		_WDT_Set
  5261 ;; This function is called by:
  5262 ;;		_main
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           
  5267                           ;psect for function _Mcu_Initialization
  5268  0C06                     _Mcu_Initialization:	
  5269                           
  5270                           ;MCU_B1.c: 32: Fosc_Set();
  5271                           
  5272                           ;incstack = 0
  5273                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5274  0C06  158A  2366  158A   	fcall	_Fosc_Set
  5275                           
  5276                           ;MCU_B1.c: 34: IO_Set();
  5277  0C09  158A  2493  158A   	fcall	_IO_Set
  5278                           
  5279                           ;MCU_B1.c: 36: ;;
  5280                           ;MCU_B1.c: 38: TMR1_Set();
  5281  0C0C  158A  23EA  158A   	fcall	_TMR1_Set
  5282                           
  5283                           ;MCU_B1.c: 40: ADC_Set();
  5284  0C0F  158A  2377  158A   	fcall	_ADC_Set
  5285                           
  5286                           ;MCU_B1.c: 42: ;;
  5287                           ;MCU_B1.c: 44: ;;
  5288                           ;MCU_B1.c: 46: ;;
  5289                           ;MCU_B1.c: 48: ;;
  5290                           ;MCU_B1.c: 50: ;;
  5291                           ;MCU_B1.c: 52: WDT_Set();
  5292  0C12  158A  23F8         	fcall	_WDT_Set
  5293  0C14  0008               	return
  5294  0C15                     __end_of_Mcu_Initialization:	
  5295                           
  5296                           	psect	text25
  5297  0BF8                     __ptext25:	
  5298 ;; *************** function _WDT_Set *****************
  5299 ;; Defined at:
  5300 ;;		line 1084 in file "../src/MCU_B1.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;		None
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;		None
  5305 ;; Return value:  Size  Location     Type
  5306 ;;		None               void
  5307 ;; Registers used:
  5308 ;;		wreg
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5314 ;;      Params:         0       0       0       0
  5315 ;;      Locals:         0       0       0       0
  5316 ;;      Temps:          1       0       0       0
  5317 ;;      Totals:         1       0       0       0
  5318 ;;Total ram usage:        1 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    2
  5321 ;; This function calls:
  5322 ;;		Nothing
  5323 ;; This function is called by:
  5324 ;;		_Mcu_Initialization
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           
  5329                           ;psect for function _WDT_Set
  5330  0BF8                     _WDT_Set:	
  5331                           
  5332                           ;MCU_B1.c: 1086: PSA = 1;
  5333                           
  5334                           ;incstack = 0
  5335                           ; Regs used in _WDT_Set: [wreg]
  5336  0BF8  1683               	bsf	3,5	;RP0=1, select bank1
  5337  0BF9  1303               	bcf	3,6	;RP1=0, select bank1
  5338  0BFA  1581               	bsf	1,3	;volatile
  5339                           
  5340                           ;MCU_B1.c: 1087: PS0 = 1;
  5341  0BFB  1401               	bsf	1,0	;volatile
  5342                           
  5343                           ;MCU_B1.c: 1088: PS1 = 1;
  5344  0BFC  1481               	bsf	1,1	;volatile
  5345                           
  5346                           ;MCU_B1.c: 1089: PS2 = 1;
  5347  0BFD  1501               	bsf	1,2	;volatile
  5348                           
  5349                           ;MCU_B1.c: 1093: WDT.Enable = 1;
  5350  0BFE  1283               	bcf	3,5	;RP0=0, select bank0
  5351  0BFF  1303               	bcf	3,6	;RP1=0, select bank0
  5352  0C00  1437               	bsf	_WDT,0
  5353                           
  5354                           ;MCU_B1.c: 1094: WDT.Timer = 10;
  5355  0C01  300A               	movlw	10
  5356  0C02  00F4               	movwf	??_WDT_Set
  5357  0C03  0874               	movf	??_WDT_Set,w
  5358  0C04  00B8               	movwf	_WDT+1
  5359  0C05  0008               	return
  5360  0C06                     __end_of_WDT_Set:	
  5361                           
  5362                           	psect	text26
  5363  0BEA                     __ptext26:	
  5364 ;; *************** function _TMR1_Set *****************
  5365 ;; Defined at:
  5366 ;;		line 199 in file "../src/MCU_B1.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;		None
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;		None
  5371 ;; Return value:  Size  Location     Type
  5372 ;;		None               void
  5373 ;; Registers used:
  5374 ;;		wreg
  5375 ;; Tracked objects:
  5376 ;;		On entry : 0/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5380 ;;      Params:         0       0       0       0
  5381 ;;      Locals:         0       0       0       0
  5382 ;;      Temps:          0       0       0       0
  5383 ;;      Totals:         0       0       0       0
  5384 ;;Total ram usage:        0 bytes
  5385 ;; Hardware stack levels used:    1
  5386 ;; Hardware stack levels required when called:    2
  5387 ;; This function calls:
  5388 ;;		Nothing
  5389 ;; This function is called by:
  5390 ;;		_Mcu_Initialization
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           
  5395                           ;psect for function _TMR1_Set
  5396  0BEA                     _TMR1_Set:	
  5397                           
  5398                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  5399                           
  5400                           ;incstack = 0
  5401                           ; Regs used in _TMR1_Set: [wreg]
  5402  0BEA  3041               	movlw	65
  5403  0BEB  1283               	bcf	3,5	;RP0=0, select bank0
  5404  0BEC  1303               	bcf	3,6	;RP1=0, select bank0
  5405  0BED  0090               	movwf	16	;volatile
  5406                           
  5407                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  5408  0BEE  30FA               	movlw	250
  5409  0BEF  008F               	movwf	15	;volatile
  5410                           
  5411                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  5412  0BF0  3038               	movlw	56
  5413  0BF1  008E               	movwf	14	;volatile
  5414                           
  5415                           ;MCU_B1.c: 203: TMR1IE = 1;
  5416  0BF2  1683               	bsf	3,5	;RP0=1, select bank1
  5417  0BF3  1303               	bcf	3,6	;RP1=0, select bank1
  5418  0BF4  140C               	bsf	12,0	;volatile
  5419                           
  5420                           ;MCU_B1.c: 204: PEIE = 1;
  5421  0BF5  170B               	bsf	11,6	;volatile
  5422                           
  5423                           ;MCU_B1.c: 205: GIE = 1;
  5424  0BF6  178B               	bsf	11,7	;volatile
  5425  0BF7  0008               	return
  5426  0BF8                     __end_of_TMR1_Set:	
  5427                           
  5428                           	psect	text27
  5429  0C93                     __ptext27:	
  5430 ;; *************** function _IO_Set *****************
  5431 ;; Defined at:
  5432 ;;		line 60 in file "../src/MCU_B1.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;		None
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;		None
  5437 ;; Return value:  Size  Location     Type
  5438 ;;		None               void
  5439 ;; Registers used:
  5440 ;;		wreg, status,2
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5446 ;;      Params:         0       0       0       0
  5447 ;;      Locals:         0       0       0       0
  5448 ;;      Temps:          0       0       0       0
  5449 ;;      Totals:         0       0       0       0
  5450 ;;Total ram usage:        0 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; Hardware stack levels required when called:    2
  5453 ;; This function calls:
  5454 ;;		Nothing
  5455 ;; This function is called by:
  5456 ;;		_Mcu_Initialization
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           
  5461                           ;psect for function _IO_Set
  5462  0C93                     _IO_Set:	
  5463                           
  5464                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  5465                           
  5466                           ;incstack = 0
  5467                           ; Regs used in _IO_Set: [wreg+status,2]
  5468  0C93  302F               	movlw	47
  5469  0C94  1683               	bsf	3,5	;RP0=1, select bank1
  5470  0C95  1303               	bcf	3,6	;RP1=0, select bank1
  5471  0C96  0085               	movwf	5	;volatile
  5472                           
  5473                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  5474  0C97  3001               	movlw	1
  5475  0C98  0086               	movwf	6	;volatile
  5476                           
  5477                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  5478  0C99  0187               	clrf	7	;volatile
  5479                           
  5480                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  5481  0C9A  3007               	movlw	7
  5482  0C9B  1683               	bsf	3,5	;RP0=1, select bank3
  5483  0C9C  1703               	bsf	3,6	;RP1=1, select bank3
  5484  0C9D  0085               	movwf	5	;volatile
  5485                           
  5486                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  5487  0C9E  3001               	movlw	1
  5488  0C9F  0086               	movwf	6	;volatile
  5489                           
  5490                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  5491  0CA0  30AF               	movlw	175
  5492  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  5493  0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  5494  0CA3  0085               	movwf	5	;volatile
  5495                           
  5496                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  5497  0CA4  3001               	movlw	1
  5498  0CA5  0086               	movwf	6	;volatile
  5499                           
  5500                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  5501  0CA6  0187               	clrf	7	;volatile
  5502  0CA7  0008               	return
  5503  0CA8                     __end_of_IO_Set:	
  5504                           
  5505                           	psect	text28
  5506  0B66                     __ptext28:	
  5507 ;; *************** function _Fosc_Set *****************
  5508 ;; Defined at:
  5509 ;;		line 56 in file "../src/MCU_B1.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;		None
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;		None
  5514 ;; Return value:  Size  Location     Type
  5515 ;;		None               void
  5516 ;; Registers used:
  5517 ;;		wreg
  5518 ;; Tracked objects:
  5519 ;;		On entry : 0/0
  5520 ;;		On exit  : 0/0
  5521 ;;		Unchanged: 0/0
  5522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5523 ;;      Params:         0       0       0       0
  5524 ;;      Locals:         0       0       0       0
  5525 ;;      Temps:          0       0       0       0
  5526 ;;      Totals:         0       0       0       0
  5527 ;;Total ram usage:        0 bytes
  5528 ;; Hardware stack levels used:    1
  5529 ;; Hardware stack levels required when called:    2
  5530 ;; This function calls:
  5531 ;;		Nothing
  5532 ;; This function is called by:
  5533 ;;		_Mcu_Initialization
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           
  5538                           ;psect for function _Fosc_Set
  5539  0B66                     _Fosc_Set:	
  5540                           
  5541                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  5542                           
  5543                           ;incstack = 0
  5544                           ; Regs used in _Fosc_Set: [wreg]
  5545  0B66  303C               	movlw	60
  5546  0B67  1683               	bsf	3,5	;RP0=1, select bank1
  5547  0B68  1303               	bcf	3,6	;RP1=0, select bank1
  5548  0B69  0090               	movwf	16	;volatile
  5549  0B6A  0008               	return
  5550  0B6B                     __end_of_Fosc_Set:	
  5551                           
  5552                           	psect	text29
  5553  0B77                     __ptext29:	
  5554 ;; *************** function _ADC_Set *****************
  5555 ;; Defined at:
  5556 ;;		line 420 in file "../src/MCU_B1.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;		None
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;		None
  5561 ;; Return value:  Size  Location     Type
  5562 ;;		None               void
  5563 ;; Registers used:
  5564 ;;		wreg
  5565 ;; Tracked objects:
  5566 ;;		On entry : 0/0
  5567 ;;		On exit  : 0/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5570 ;;      Params:         0       0       0       0
  5571 ;;      Locals:         0       0       0       0
  5572 ;;      Temps:          0       0       0       0
  5573 ;;      Totals:         0       0       0       0
  5574 ;;Total ram usage:        0 bytes
  5575 ;; Hardware stack levels used:    1
  5576 ;; Hardware stack levels required when called:    2
  5577 ;; This function calls:
  5578 ;;		Nothing
  5579 ;; This function is called by:
  5580 ;;		_Mcu_Initialization
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           
  5585                           ;psect for function _ADC_Set
  5586  0B77                     _ADC_Set:	
  5587                           
  5588                           ;MCU_B1.c: 421: ADCON1 = 0x73;
  5589                           
  5590                           ;incstack = 0
  5591                           ; Regs used in _ADC_Set: [wreg]
  5592  0B77  3073               	movlw	115
  5593  0B78  1683               	bsf	3,5	;RP0=1, select bank1
  5594  0B79  1303               	bcf	3,6	;RP1=0, select bank1
  5595  0B7A  009F               	movwf	31	;volatile
  5596                           
  5597                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  5598  0B7B  30C1               	movlw	193
  5599  0B7C  009D               	movwf	29	;volatile
  5600  0B7D  0008               	return
  5601  0B7E                     __end_of_ADC_Set:	
  5602                           
  5603                           	psect	text30
  5604  0213                     __ptext30:	
  5605 ;; *************** function _Load_Main *****************
  5606 ;; Defined at:
  5607 ;;		line 39 in file "../src/OverLoad_B1.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;		None
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;  i               1   13[BANK0 ] unsigned char 
  5612 ;;  error           1   12[BANK0 ] unsigned char 
  5613 ;;  adjgo           1   10[BANK0 ] unsigned char 
  5614 ;;  j               1    9[BANK0 ] unsigned char 
  5615 ;; Return value:  Size  Location     Type
  5616 ;;		None               void
  5617 ;; Registers used:
  5618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5619 ;; Tracked objects:
  5620 ;;		On entry : 0/0
  5621 ;;		On exit  : 0/0
  5622 ;;		Unchanged: 0/0
  5623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5624 ;;      Params:         0       0       0       0
  5625 ;;      Locals:         0       5       0       0
  5626 ;;      Temps:          0       2       0       0
  5627 ;;      Totals:         0       7       0       0
  5628 ;;Total ram usage:        7 bytes
  5629 ;; Hardware stack levels used:    1
  5630 ;; Hardware stack levels required when called:    5
  5631 ;; This function calls:
  5632 ;;		___lwdiv
  5633 ;;		_getMain_All_Error_Status
  5634 ;;		_getMain_LightsStatus
  5635 ;;		_getMain_Lights_Count
  5636 ;;		_getMain_LoadOK
  5637 ;;		_setLoad_AH_AL_Restore
  5638 ;; This function is called by:
  5639 ;;		_main
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           
  5644                           ;psect for function _Load_Main
  5645  0213                     _Load_Main:	
  5646                           
  5647                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
  5648                           
  5649                           ;incstack = 0
  5650                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5651  0213  1283               	bcf	3,5	;RP0=0, select bank0
  5652  0214  1303               	bcf	3,6	;RP1=0, select bank0
  5653  0215  01E6               	clrf	Load_Main@i
  5654  0216  01E2               	clrf	Load_Main@j
  5655  0217  3000               	movlw	0
  5656  0218  158A  265E  118A   	fcall	_getMain_All_Error_Status
  5657  021B  1283               	bcf	3,5	;RP0=0, select bank0
  5658  021C  1303               	bcf	3,6	;RP1=0, select bank0
  5659  021D  00E0               	movwf	??_Load_Main
  5660  021E  0860               	movf	??_Load_Main,w
  5661  021F  00E5               	movwf	Load_Main@error
  5662  0220  01E3               	clrf	Load_Main@adjgo
  5663                           
  5664                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  5665  0221  1683               	bsf	3,5	;RP0=1, select bank1
  5666  0222  1303               	bcf	3,6	;RP1=0, select bank1
  5667  0223  1C4F               	btfss	_Load^(0+128),0
  5668  0224  2BB9               	goto	l691
  5669                           
  5670                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
  5671  0225  1283               	bcf	3,5	;RP0=0, select bank0
  5672  0226  1303               	bcf	3,6	;RP1=0, select bank0
  5673  0227  01E4               	clrf	_Load_Main$2506
  5674  0228  158A  25BE  118A   	fcall	_getMain_LightsStatus
  5675  022B  3A01               	xorlw	1
  5676  022C  1D03               	skipz
  5677  022D  2A38               	goto	l4879
  5678  022E  1283               	bcf	3,5	;RP0=0, select bank0
  5679  022F  1303               	bcf	3,6	;RP1=0, select bank0
  5680  0230  08E5               	movf	Load_Main@error,f
  5681  0231  1D03               	skipz
  5682  0232  2A38               	goto	l4879
  5683  0233  08E3               	movf	Load_Main@adjgo,f
  5684  0234  1D03               	skipz
  5685  0235  2A38               	goto	l4879
  5686  0236  01E4               	clrf	_Load_Main$2506
  5687  0237  0AE4               	incf	_Load_Main$2506,f
  5688  0238                     l4879:	
  5689  0238  1283               	bcf	3,5	;RP0=0, select bank0
  5690  0239  1303               	bcf	3,6	;RP1=0, select bank0
  5691  023A  0864               	movf	_Load_Main$2506,w
  5692  023B  1683               	bsf	3,5	;RP0=1, select bank1
  5693  023C  1303               	bcf	3,6	;RP1=0, select bank1
  5694  023D  10CF               	bcf	_Load^(0+128),1
  5695  023E  1D03               	skipz
  5696  023F  14CF               	bsf	_Load^(0+128),1
  5697                           
  5698                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
  5699  0240  158A  23C3  118A   	fcall	_getMain_LoadOK
  5700  0243  3A01               	xorlw	1
  5701  0244  1D03               	skipz
  5702  0245  2A4C               	goto	l694
  5703  0246  1683               	bsf	3,5	;RP0=1, select bank1
  5704  0247  1303               	bcf	3,6	;RP1=0, select bank1
  5705  0248  19CF               	btfsc	_Load^(0+128),3
  5706  0249  2A4C               	goto	l694
  5707                           
  5708                           ;OverLoad_B1.c: 49: Load.Run = 1;
  5709  024A  15CF               	bsf	_Load^(0+128),3
  5710                           
  5711                           ;OverLoad_B1.c: 50: Load.OK = 0;
  5712  024B  13CF               	bcf	_Load^(0+128),7
  5713  024C                     l694:	
  5714                           
  5715                           ;OverLoad_B1.c: 51: }
  5716                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
  5717  024C  1683               	bsf	3,5	;RP0=1, select bank1
  5718  024D  1303               	bcf	3,6	;RP1=0, select bank1
  5719  024E  1CCF               	btfss	_Load^(0+128),1
  5720  024F  2B84               	goto	l695
  5721                           
  5722                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
  5723  0250  154F               	bsf	_Load^(0+128),2
  5724                           
  5725                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
  5726  0251  1E4F               	btfss	_Load^(0+128),4
  5727  0252  2B82               	goto	l696
  5728                           
  5729                           ;OverLoad_B1.c: 58: Load.Time++;
  5730  0253  3001               	movlw	1
  5731  0254  07D0               	addwf	(_Load^(0+128)+1),f
  5732  0255  1803               	skipnc
  5733  0256  0AD1               	incf	((_Load+1)^(0+128)+1),f
  5734  0257  3000               	movlw	0
  5735  0258  07D1               	addwf	((_Load+1)^(0+128)+1),f
  5736                           
  5737                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
  5738  0259  3000               	movlw	0
  5739  025A  0251               	subwf	((_Load+1)^(0+128)+1),w
  5740  025B  3005               	movlw	5
  5741  025C  1903               	skipnz
  5742  025D  0250               	subwf	(_Load^(0+128)+1),w
  5743  025E  1C03               	skipc
  5744  025F  0008               	return
  5745                           
  5746                           ;OverLoad_B1.c: 60: Load.Time = 0;
  5747  0260  01D0               	clrf	(_Load^(0+128)+1)
  5748  0261  01D1               	clrf	((_Load+1)^(0+128)+1)
  5749                           
  5750                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
  5751  0262  124F               	bcf	_Load^(0+128),4
  5752                           
  5753                           ;OverLoad_B1.c: 63: for (i = 1; i < 4; i++) {
  5754  0263  1283               	bcf	3,5	;RP0=0, select bank0
  5755  0264  1303               	bcf	3,6	;RP1=0, select bank0
  5756  0265  01E6               	clrf	Load_Main@i
  5757  0266  0AE6               	incf	Load_Main@i,f
  5758  0267  3004               	movlw	4
  5759  0268  0266               	subwf	Load_Main@i,w
  5760  0269  1803               	btfsc	3,0
  5761  026A  2A9C               	goto	l4907
  5762  026B                     l4901:	
  5763                           
  5764                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
  5765  026B  0866               	movf	Load_Main@i,w
  5766  026C  3ED9               	addlw	(_Load+10)& (0+255)
  5767  026D  0084               	movwf	4
  5768  026E  1383               	bcf	3,7	;select IRP bank1
  5769  026F  0800               	movf	0,w
  5770  0270  00E0               	movwf	??_Load_Main
  5771  0271  01E1               	clrf	??_Load_Main+1
  5772  0272  0860               	movf	??_Load_Main,w
  5773  0273  1683               	bsf	3,5	;RP0=1, select bank1
  5774  0274  1303               	bcf	3,6	;RP1=0, select bank1
  5775  0275  07D4               	addwf	(_Load^(0+128)+5),f
  5776  0276  1803               	skipnc
  5777  0277  0AD5               	incf	((_Load+1)^(0+128)+5),f
  5778  0278  1283               	bcf	3,5	;RP0=0, select bank0
  5779  0279  1303               	bcf	3,6	;RP1=0, select bank0
  5780  027A  0861               	movf	??_Load_Main+1,w
  5781  027B  1683               	bsf	3,5	;RP0=1, select bank1
  5782  027C  1303               	bcf	3,6	;RP1=0, select bank1
  5783  027D  07D5               	addwf	((_Load+1)^(0+128)+5),f
  5784                           
  5785                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
  5786  027E  1283               	bcf	3,5	;RP0=0, select bank0
  5787  027F  1303               	bcf	3,6	;RP1=0, select bank0
  5788  0280  0866               	movf	Load_Main@i,w
  5789  0281  3EDE               	addlw	(_Load+15)& (0+255)
  5790  0282  0084               	movwf	4
  5791  0283  0800               	movf	0,w
  5792  0284  00E0               	movwf	??_Load_Main
  5793  0285  01E1               	clrf	??_Load_Main+1
  5794  0286  0860               	movf	??_Load_Main,w
  5795  0287  1683               	bsf	3,5	;RP0=1, select bank1
  5796  0288  1303               	bcf	3,6	;RP1=0, select bank1
  5797  0289  07D6               	addwf	(_Load^(0+128)+7),f
  5798  028A  1803               	skipnc
  5799  028B  0AD7               	incf	((_Load+1)^(0+128)+7),f
  5800  028C  1283               	bcf	3,5	;RP0=0, select bank0
  5801  028D  1303               	bcf	3,6	;RP1=0, select bank0
  5802  028E  0861               	movf	??_Load_Main+1,w
  5803  028F  1683               	bsf	3,5	;RP0=1, select bank1
  5804  0290  1303               	bcf	3,6	;RP1=0, select bank1
  5805  0291  07D7               	addwf	((_Load+1)^(0+128)+7),f
  5806  0292  3001               	movlw	1
  5807  0293  1283               	bcf	3,5	;RP0=0, select bank0
  5808  0294  1303               	bcf	3,6	;RP1=0, select bank0
  5809  0295  00E0               	movwf	??_Load_Main
  5810  0296  0860               	movf	??_Load_Main,w
  5811  0297  07E6               	addwf	Load_Main@i,f
  5812  0298  3004               	movlw	4
  5813  0299  0266               	subwf	Load_Main@i,w
  5814  029A  1C03               	skipc
  5815  029B  2A6B               	goto	l4901
  5816  029C                     l4907:	
  5817                           
  5818                           ;OverLoad_B1.c: 66: }
  5819                           ;OverLoad_B1.c: 67: Load.ADH /= 3;
  5820  029C  3003               	movlw	3
  5821  029D  00D9               	movwf	___lwdiv@divisor
  5822  029E  3000               	movlw	0
  5823  029F  00DA               	movwf	___lwdiv@divisor+1
  5824  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  5825  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  5826  02A2  0855               	movf	((_Load+1)^(0+128)+5),w
  5827  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  5828  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  5829  02A5  01DC               	clrf	___lwdiv@dividend+1
  5830  02A6  07DC               	addwf	___lwdiv@dividend+1,f
  5831  02A7  1683               	bsf	3,5	;RP0=1, select bank1
  5832  02A8  1303               	bcf	3,6	;RP1=0, select bank1
  5833  02A9  0854               	movf	(_Load^(0+128)+5),w
  5834  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  5835  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  5836  02AC  01DB               	clrf	___lwdiv@dividend
  5837  02AD  07DB               	addwf	___lwdiv@dividend,f
  5838  02AE  158A  269C  118A   	fcall	___lwdiv
  5839  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  5840  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  5841  02B3  085A               	movf	?___lwdiv+1,w
  5842  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  5843  02B5  1303               	bcf	3,6	;RP1=0, select bank1
  5844  02B6  01D5               	clrf	((_Load+1)^(0+128)+5)
  5845  02B7  07D5               	addwf	((_Load+1)^(0+128)+5),f
  5846  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  5847  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  5848  02BA  0859               	movf	?___lwdiv,w
  5849  02BB  1683               	bsf	3,5	;RP0=1, select bank1
  5850  02BC  1303               	bcf	3,6	;RP1=0, select bank1
  5851  02BD  01D4               	clrf	(_Load^(0+128)+5)
  5852  02BE  07D4               	addwf	(_Load^(0+128)+5),f
  5853                           
  5854                           ;OverLoad_B1.c: 68: Load.ADL /= 3;
  5855  02BF  3003               	movlw	3
  5856  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  5857  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  5858  02C2  00D9               	movwf	___lwdiv@divisor
  5859  02C3  3000               	movlw	0
  5860  02C4  00DA               	movwf	___lwdiv@divisor+1
  5861  02C5  1683               	bsf	3,5	;RP0=1, select bank1
  5862  02C6  1303               	bcf	3,6	;RP1=0, select bank1
  5863  02C7  0857               	movf	((_Load+1)^(0+128)+7),w
  5864  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  5865  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  5866  02CA  01DC               	clrf	___lwdiv@dividend+1
  5867  02CB  07DC               	addwf	___lwdiv@dividend+1,f
  5868  02CC  1683               	bsf	3,5	;RP0=1, select bank1
  5869  02CD  1303               	bcf	3,6	;RP1=0, select bank1
  5870  02CE  0856               	movf	(_Load^(0+128)+7),w
  5871  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  5872  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  5873  02D1  01DB               	clrf	___lwdiv@dividend
  5874  02D2  07DB               	addwf	___lwdiv@dividend,f
  5875  02D3  158A  269C  118A   	fcall	___lwdiv
  5876  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  5877  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  5878  02D8  085A               	movf	?___lwdiv+1,w
  5879  02D9  1683               	bsf	3,5	;RP0=1, select bank1
  5880  02DA  1303               	bcf	3,6	;RP1=0, select bank1
  5881  02DB  01D7               	clrf	((_Load+1)^(0+128)+7)
  5882  02DC  07D7               	addwf	((_Load+1)^(0+128)+7),f
  5883  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  5884  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  5885  02DF  0859               	movf	?___lwdiv,w
  5886  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  5887  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  5888  02E2  01D6               	clrf	(_Load^(0+128)+7)
  5889  02E3  07D6               	addwf	(_Load^(0+128)+7),f
  5890                           
  5891                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
  5892  02E4  158A  24A8  118A   	fcall	_setLoad_AH_AL_Restore
  5893                           
  5894                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
  5895  02E7  1683               	bsf	3,5	;RP0=1, select bank1
  5896  02E8  1303               	bcf	3,6	;RP1=0, select bank1
  5897  02E9  0855               	movf	((_Load+1)^(0+128)+5),w
  5898  02EA  0257               	subwf	((_Load+1)^(0+128)+7),w
  5899  02EB  1D03               	skipz
  5900  02EC  2AEF               	goto	u6245
  5901  02ED  0854               	movf	(_Load^(0+128)+5),w
  5902  02EE  0256               	subwf	(_Load^(0+128)+7),w
  5903  02EF                     u6245:	
  5904  02EF  1803               	skipnc
  5905  02F0  0008               	return
  5906                           
  5907                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
  5908  02F1  0356               	decf	(_Load^(0+128)+7),w
  5909  02F2  3AFF               	xorlw	255
  5910  02F3  0754               	addwf	(_Load^(0+128)+5),w
  5911  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  5912  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  5913  02F6  00E0               	movwf	??_Load_Main
  5914  02F7  0860               	movf	??_Load_Main,w
  5915  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  5916  02F9  1303               	bcf	3,6	;RP1=0, select bank1
  5917  02FA  00E3               	movwf	(_Load^(0+128)+20)
  5918                           
  5919                           ;OverLoad_B1.c: 73: Load.ADH = 0;
  5920  02FB  01D4               	clrf	(_Load^(0+128)+5)
  5921  02FC  01D5               	clrf	((_Load+1)^(0+128)+5)
  5922                           
  5923                           ;OverLoad_B1.c: 74: Load.ADL = 0;
  5924  02FD  01D6               	clrf	(_Load^(0+128)+7)
  5925  02FE  01D7               	clrf	((_Load+1)^(0+128)+7)
  5926                           
  5927                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
  5928  02FF  158A  2436  118A   	fcall	_getMain_Lights_Count
  5929  0302  1283               	bcf	3,5	;RP0=0, select bank0
  5930  0303  1303               	bcf	3,6	;RP1=0, select bank0
  5931  0304  00E0               	movwf	??_Load_Main
  5932  0305  0860               	movf	??_Load_Main,w
  5933  0306  1683               	bsf	3,5	;RP0=1, select bank1
  5934  0307  1303               	bcf	3,6	;RP1=0, select bank1
  5935  0308  00EE               	movwf	(_Load^(0+128)+31)
  5936                           
  5937                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
  5938  0309  1DCF               	btfss	_Load^(0+128),3
  5939  030A  2B38               	goto	l701
  5940                           
  5941                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
  5942  030B  3002               	movlw	2
  5943  030C  026B               	subwf	(_Load^(0+128)+28),w
  5944  030D  1803               	skipnc
  5945  030E  2B38               	goto	l701
  5946                           
  5947                           ;OverLoad_B1.c: 79: Load.Count++;
  5948  030F  3001               	movlw	1
  5949  0310  1283               	bcf	3,5	;RP0=0, select bank0
  5950  0311  1303               	bcf	3,6	;RP1=0, select bank0
  5951  0312  00E0               	movwf	??_Load_Main
  5952  0313  0860               	movf	??_Load_Main,w
  5953  0314  1683               	bsf	3,5	;RP0=1, select bank1
  5954  0315  1303               	bcf	3,6	;RP1=0, select bank1
  5955  0316  07EB               	addwf	(_Load^(0+128)+28),f
  5956                           
  5957                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
  5958  0317  086B               	movf	(_Load^(0+128)+28),w
  5959  0318  3A01               	xorlw	1
  5960  0319  1D03               	skipz
  5961  031A  2B25               	goto	l4931
  5962                           
  5963                           ;OverLoad_B1.c: 81: Load.ErrorCountValue = 2;
  5964  031B  3002               	movlw	2
  5965  031C  1283               	bcf	3,5	;RP0=0, select bank0
  5966  031D  1303               	bcf	3,6	;RP1=0, select bank0
  5967  031E  00E0               	movwf	??_Load_Main
  5968  031F  0860               	movf	??_Load_Main,w
  5969  0320  1683               	bsf	3,5	;RP0=1, select bank1
  5970  0321  1303               	bcf	3,6	;RP1=0, select bank1
  5971  0322  00ED               	movwf	(_Load^(0+128)+30)
  5972                           
  5973                           ;OverLoad_B1.c: 82: Load.JudgeValue = (20*2);
  5974  0323  3028               	movlw	40
  5975  0324  2B2E               	goto	L16
  5976  0325                     l4931:	
  5977                           ;OverLoad_B1.c: 83: } else if (Load.Count == 2) {
  5978                           
  5979  0325  086B               	movf	(_Load^(0+128)+28),w
  5980  0326  3A02               	xorlw	2
  5981  0327  1D03               	skipz
  5982  0328  2B38               	goto	l701
  5983                           
  5984                           ;OverLoad_B1.c: 84: if (Load.LightsCount == 1) {
  5985  0329  086E               	movf	(_Load^(0+128)+31),w
  5986  032A  3A01               	xorlw	1
  5987  032B  1D03               	skipz
  5988  032C  2B31               	goto	l4937
  5989                           
  5990                           ;OverLoad_B1.c: 85: Load.JudgeValue = (int)(6*2);
  5991  032D  300C               	movlw	12
  5992  032E                     L16:	
  5993  032E  00E7               	movwf	(_Load^(0+128)+24)
  5994  032F  3000               	movlw	0
  5995  0330  2B37               	goto	L17
  5996  0331                     l4937:	
  5997                           ;OverLoad_B1.c: 86: } else {
  5998                           
  5999                           
  6000                           ;OverLoad_B1.c: 87: Load.JudgeValue = (int)(6*2) + Load.TotalLoad;
  6001  0331  0858               	movf	(_Load^(0+128)+9),w
  6002  0332  3E0C               	addlw	12
  6003  0333  00E7               	movwf	(_Load^(0+128)+24)
  6004  0334  3000               	movlw	0
  6005  0335  1803               	skipnc
  6006  0336  3001               	movlw	1
  6007  0337                     L17:	
  6008  0337  00E8               	movwf	(_Load^(0+128)+25)
  6009  0338                     l701:	
  6010                           
  6011                           ;OverLoad_B1.c: 88: }
  6012                           ;OverLoad_B1.c: 89: }
  6013                           ;OverLoad_B1.c: 90: }
  6014                           ;OverLoad_B1.c: 91: }
  6015                           ;OverLoad_B1.c: 93: if (Load.AD >= Load.JudgeValue) {
  6016  0338  0863               	movf	(_Load^(0+128)+20),w
  6017  0339  1283               	bcf	3,5	;RP0=0, select bank0
  6018  033A  1303               	bcf	3,6	;RP1=0, select bank0
  6019  033B  00E0               	movwf	??_Load_Main
  6020  033C  01E1               	clrf	??_Load_Main+1
  6021  033D  1683               	bsf	3,5	;RP0=1, select bank1
  6022  033E  1303               	bcf	3,6	;RP1=0, select bank1
  6023  033F  0868               	movf	((_Load+1)^(0+128)+24),w
  6024  0340  1283               	bcf	3,5	;RP0=0, select bank0
  6025  0341  1303               	bcf	3,6	;RP1=0, select bank0
  6026  0342  0261               	subwf	??_Load_Main+1,w
  6027  0343  1D03               	skipz
  6028  0344  2B4B               	goto	u6305
  6029  0345  1683               	bsf	3,5	;RP0=1, select bank1
  6030  0346  1303               	bcf	3,6	;RP1=0, select bank1
  6031  0347  0867               	movf	(_Load^(0+128)+24),w
  6032  0348  1283               	bcf	3,5	;RP0=0, select bank0
  6033  0349  1303               	bcf	3,6	;RP1=0, select bank0
  6034  034A  0260               	subwf	??_Load_Main,w
  6035  034B                     u6305:	
  6036  034B  1C03               	skipc
  6037  034C  2B5A               	goto	l4947
  6038                           
  6039                           ;OverLoad_B1.c: 94: Load.ErrorCount++;
  6040  034D  3001               	movlw	1
  6041  034E  00E0               	movwf	??_Load_Main
  6042  034F  0860               	movf	??_Load_Main,w
  6043  0350  1683               	bsf	3,5	;RP0=1, select bank1
  6044  0351  1303               	bcf	3,6	;RP1=0, select bank1
  6045  0352  07EC               	addwf	(_Load^(0+128)+29),f
  6046                           
  6047                           ;OverLoad_B1.c: 95: if (Load.ErrorCount > Load.ErrorCountValue) {
  6048  0353  086C               	movf	(_Load^(0+128)+29),w
  6049  0354  026D               	subwf	(_Load^(0+128)+30),w
  6050  0355  1803               	skipnc
  6051  0356  0008               	return
  6052                           
  6053                           ;OverLoad_B1.c: 96: Load.ErrorCount = 0;
  6054  0357  01EC               	clrf	(_Load^(0+128)+29)
  6055                           
  6056                           ;OverLoad_B1.c: 97: Load.ERROR = 1;
  6057  0358  16CF               	bsf	_Load^(0+128),5
  6058                           
  6059                           ;OverLoad_B1.c: 118: }
  6060                           ;OverLoad_B1.c: 119: } else {
  6061  0359  0008               	return
  6062  035A                     l4947:	
  6063                           
  6064                           ;OverLoad_B1.c: 120: Load.ErrorCount = 0;
  6065  035A  1683               	bsf	3,5	;RP0=1, select bank1
  6066  035B  1303               	bcf	3,6	;RP1=0, select bank1
  6067  035C  01EC               	clrf	(_Load^(0+128)+29)
  6068                           
  6069                           ;OverLoad_B1.c: 121: if (Load.Run == 1) {
  6070  035D  1DCF               	btfss	_Load^(0+128),3
  6071  035E  0008               	return
  6072                           
  6073                           ;OverLoad_B1.c: 122: if (Load.OK == 0) {
  6074  035F  1BCF               	btfsc	_Load^(0+128),7
  6075  0360  0008               	return
  6076                           
  6077                           ;OverLoad_B1.c: 123: Load.SafeCount++;
  6078  0361  3001               	movlw	1
  6079  0362  1283               	bcf	3,5	;RP0=0, select bank0
  6080  0363  1303               	bcf	3,6	;RP1=0, select bank0
  6081  0364  00E0               	movwf	??_Load_Main
  6082  0365  0860               	movf	??_Load_Main,w
  6083  0366  1683               	bsf	3,5	;RP0=1, select bank1
  6084  0367  1303               	bcf	3,6	;RP1=0, select bank1
  6085  0368  07EF               	addwf	(_Load^(0+128)+32),f
  6086                           
  6087                           ;OverLoad_B1.c: 124: if (Load.SafeCount >= 3) {
  6088  0369  3003               	movlw	3
  6089  036A  026F               	subwf	(_Load^(0+128)+32),w
  6090  036B  1C03               	skipc
  6091  036C  0008               	return
  6092                           
  6093                           ;OverLoad_B1.c: 125: Load.SafeCount = 0;
  6094  036D  01EF               	clrf	(_Load^(0+128)+32)
  6095                           
  6096                           ;OverLoad_B1.c: 126: Load.OK = 1;
  6097  036E  17CF               	bsf	_Load^(0+128),7
  6098                           
  6099                           ;OverLoad_B1.c: 127: Load.Run = 0;
  6100  036F  11CF               	bcf	_Load^(0+128),3
  6101                           
  6102                           ;OverLoad_B1.c: 128: Load.Count = 0;
  6103  0370  01EB               	clrf	(_Load^(0+128)+28)
  6104                           
  6105                           ;OverLoad_B1.c: 129: Load.TotalLoad = Load.AD;
  6106  0371  0863               	movf	(_Load^(0+128)+20),w
  6107  0372  1283               	bcf	3,5	;RP0=0, select bank0
  6108  0373  1303               	bcf	3,6	;RP1=0, select bank0
  6109  0374  00E0               	movwf	??_Load_Main
  6110  0375  0860               	movf	??_Load_Main,w
  6111  0376  1683               	bsf	3,5	;RP0=1, select bank1
  6112  0377  1303               	bcf	3,6	;RP1=0, select bank1
  6113  0378  00D8               	movwf	(_Load^(0+128)+9)
  6114                           
  6115                           ;OverLoad_B1.c: 130: Load.ErrorCountValue = 3;
  6116  0379  3003               	movlw	3
  6117  037A  1283               	bcf	3,5	;RP0=0, select bank0
  6118  037B  1303               	bcf	3,6	;RP1=0, select bank0
  6119  037C  00E0               	movwf	??_Load_Main
  6120  037D  0860               	movf	??_Load_Main,w
  6121  037E  1683               	bsf	3,5	;RP0=1, select bank1
  6122  037F  1303               	bcf	3,6	;RP1=0, select bank1
  6123  0380  00ED               	movwf	(_Load^(0+128)+30)
  6124                           
  6125                           ;OverLoad_B1.c: 154: }
  6126                           ;OverLoad_B1.c: 155: }
  6127                           ;OverLoad_B1.c: 156: }
  6128                           ;OverLoad_B1.c: 157: }
  6129                           ;OverLoad_B1.c: 158: }
  6130                           ;OverLoad_B1.c: 159: }
  6131                           ;OverLoad_B1.c: 160: } else {
  6132  0381  0008               	return
  6133  0382                     l696:	
  6134                           
  6135                           ;OverLoad_B1.c: 161: Load.ADtoGO = 1;
  6136  0382  164F               	bsf	_Load^(0+128),4
  6137                           
  6138                           ;OverLoad_B1.c: 162: }
  6139                           ;OverLoad_B1.c: 163: } else {
  6140  0383  0008               	return
  6141  0384                     l695:	
  6142                           
  6143                           ;OverLoad_B1.c: 164: if (Load.LightsON == 1 && error != 3) {
  6144  0384  1D4F               	btfss	_Load^(0+128),2
  6145  0385  2BA4               	goto	l4997
  6146  0386  1283               	bcf	3,5	;RP0=0, select bank0
  6147  0387  1303               	bcf	3,6	;RP1=0, select bank0
  6148  0388  0865               	movf	Load_Main@error,w
  6149  0389  3A03               	xorlw	3
  6150  038A  1903               	skipnz
  6151  038B  2BA4               	goto	l4997
  6152                           
  6153                           ;OverLoad_B1.c: 165: Load.LightsON = 0;
  6154  038C  1683               	bsf	3,5	;RP0=1, select bank1
  6155  038D  1303               	bcf	3,6	;RP1=0, select bank1
  6156  038E  114F               	bcf	_Load^(0+128),2
  6157                           
  6158                           ;OverLoad_B1.c: 167: Load.Time = 0;
  6159  038F  01D0               	clrf	(_Load^(0+128)+1)
  6160  0390  01D1               	clrf	((_Load+1)^(0+128)+1)
  6161                           
  6162                           ;OverLoad_B1.c: 168: Load.ADtoGO = 0;
  6163  0391  124F               	bcf	_Load^(0+128),4
  6164                           
  6165                           ;OverLoad_B1.c: 169: setLoad_AH_AL_Restore();
  6166  0392  158A  24A8  118A   	fcall	_setLoad_AH_AL_Restore
  6167                           
  6168                           ;OverLoad_B1.c: 170: Load.Count = 0;
  6169  0395  1683               	bsf	3,5	;RP0=1, select bank1
  6170  0396  1303               	bcf	3,6	;RP1=0, select bank1
  6171  0397  01EB               	clrf	(_Load^(0+128)+28)
  6172                           
  6173                           ;OverLoad_B1.c: 171: Load.ErrorCount = 0;
  6174  0398  01EC               	clrf	(_Load^(0+128)+29)
  6175                           
  6176                           ;OverLoad_B1.c: 172: Load.SafeCount = 0;
  6177  0399  01EF               	clrf	(_Load^(0+128)+32)
  6178                           
  6179                           ;OverLoad_B1.c: 174: Load.ADH = 0;
  6180  039A  01D4               	clrf	(_Load^(0+128)+5)
  6181  039B  01D5               	clrf	((_Load+1)^(0+128)+5)
  6182                           
  6183                           ;OverLoad_B1.c: 175: Load.ADL = 0;
  6184  039C  01D6               	clrf	(_Load^(0+128)+7)
  6185  039D  01D7               	clrf	((_Load+1)^(0+128)+7)
  6186                           
  6187                           ;OverLoad_B1.c: 176: Load.AD = 0;
  6188  039E  01E3               	clrf	(_Load^(0+128)+20)
  6189                           
  6190                           ;OverLoad_B1.c: 177: Load.JudgeValue = 0;
  6191  039F  01E7               	clrf	(_Load^(0+128)+24)
  6192  03A0  01E8               	clrf	((_Load+1)^(0+128)+24)
  6193                           
  6194                           ;OverLoad_B1.c: 178: Load.LightsCount = 0;
  6195  03A1  01EE               	clrf	(_Load^(0+128)+31)
  6196                           
  6197                           ;OverLoad_B1.c: 179: Load.Run = 0;
  6198  03A2  11CF               	bcf	_Load^(0+128),3
  6199                           
  6200                           ;OverLoad_B1.c: 180: Load.OK = 1;
  6201  03A3  17CF               	bsf	_Load^(0+128),7
  6202  03A4                     l4997:	
  6203                           
  6204                           ;OverLoad_B1.c: 201: }
  6205                           ;OverLoad_B1.c: 202: if (Load.ERROR == 1) {
  6206  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  6207  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  6208  03A6  1ECF               	btfss	_Load^(0+128),5
  6209  03A7  0008               	return
  6210                           
  6211                           ;OverLoad_B1.c: 203: Load.ErrorTime++;
  6212  03A8  3001               	movlw	1
  6213  03A9  07D2               	addwf	(_Load^(0+128)+3),f
  6214  03AA  1803               	skipnc
  6215  03AB  0AD3               	incf	((_Load+1)^(0+128)+3),f
  6216  03AC  3000               	movlw	0
  6217  03AD  07D3               	addwf	((_Load+1)^(0+128)+3),f
  6218                           
  6219                           ;OverLoad_B1.c: 204: if (Load.ErrorTime >= 1000) {
  6220  03AE  3003               	movlw	3
  6221  03AF  0253               	subwf	((_Load+1)^(0+128)+3),w
  6222  03B0  30E8               	movlw	232
  6223  03B1  1903               	skipnz
  6224  03B2  0252               	subwf	(_Load^(0+128)+3),w
  6225  03B3  1C03               	skipc
  6226  03B4  0008               	return
  6227                           
  6228                           ;OverLoad_B1.c: 205: Load.ErrorTime = 0;
  6229  03B5  01D2               	clrf	(_Load^(0+128)+3)
  6230  03B6  01D3               	clrf	((_Load+1)^(0+128)+3)
  6231                           
  6232                           ;OverLoad_B1.c: 206: Load.ERROR = 0;
  6233  03B7  12CF               	bcf	_Load^(0+128),5
  6234                           
  6235                           ;OverLoad_B1.c: 207: }
  6236                           ;OverLoad_B1.c: 208: }
  6237                           ;OverLoad_B1.c: 209: }
  6238                           ;OverLoad_B1.c: 210: } else {
  6239  03B8  0008               	return
  6240  03B9                     l691:	
  6241                           
  6242                           ;OverLoad_B1.c: 211: if (myMain.PowerON == 1) {
  6243  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  6244  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  6245  03BB  1C20               	btfss	_myMain,0
  6246  03BC  0008               	return
  6247                           
  6248                           ;OverLoad_B1.c: 212: Load.Enable = 1;
  6249  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  6250  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  6251  03BF  144F               	bsf	_Load^(0+128),0
  6252  03C0  0008               	return
  6253  03C1                     __end_of_Load_Main:	
  6254                           
  6255                           	psect	text31
  6256  0BC3                     __ptext31:	
  6257 ;; *************** function _getMain_LoadOK *****************
  6258 ;; Defined at:
  6259 ;;		line 475 in file "../src/Main_B1.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;		None
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  ok              1    6[COMMON] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      unsigned char 
  6266 ;; Registers used:
  6267 ;;		wreg, status,2, pclath, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6273 ;;      Params:         0       0       0       0
  6274 ;;      Locals:         1       0       0       0
  6275 ;;      Temps:          1       0       0       0
  6276 ;;      Totals:         2       0       0       0
  6277 ;;Total ram usage:        2 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:    3
  6280 ;; This function calls:
  6281 ;;		_getLightsControl_OK
  6282 ;; This function is called by:
  6283 ;;		_Load_Main
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           
  6288                           ;psect for function _getMain_LoadOK
  6289  0BC3                     _getMain_LoadOK:	
  6290                           
  6291                           ;Main_B1.c: 476: char ok = 0;
  6292                           
  6293                           ;incstack = 0
  6294                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
  6295  0BC3  01F6               	clrf	getMain_LoadOK@ok
  6296                           
  6297                           ;Main_B1.c: 479: ok = getLightsControl_OK() == 1 ? 1 : 0;
  6298  0BC4  158A  2386         	fcall	_getLightsControl_OK
  6299  0BC6  3A01               	xorlw	1
  6300  0BC7  3000               	movlw	0
  6301  0BC8  1903               	skipnz
  6302  0BC9  3001               	movlw	1
  6303  0BCA  00F5               	movwf	??_getMain_LoadOK
  6304  0BCB  0875               	movf	??_getMain_LoadOK,w
  6305  0BCC  00F6               	movwf	getMain_LoadOK@ok
  6306                           
  6307                           ;Main_B1.c: 484: return ok;
  6308  0BCD  0876               	movf	getMain_LoadOK@ok,w
  6309  0BCE  0008               	return
  6310  0BCF                     __end_of_getMain_LoadOK:	
  6311                           
  6312                           	psect	text32
  6313  0B86                     __ptext32:	
  6314 ;; *************** function _getLightsControl_OK *****************
  6315 ;; Defined at:
  6316 ;;		line 260 in file "../src/TriacRelay_B1.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;		None
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;  loadok          1    4[COMMON] unsigned char 
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      unsigned char 
  6323 ;; Registers used:
  6324 ;;		wreg, status,2
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6330 ;;      Params:         0       0       0       0
  6331 ;;      Locals:         1       0       0       0
  6332 ;;      Temps:          0       0       0       0
  6333 ;;      Totals:         1       0       0       0
  6334 ;;Total ram usage:        1 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    2
  6337 ;; This function calls:
  6338 ;;		Nothing
  6339 ;; This function is called by:
  6340 ;;		_getMain_LoadOK
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           
  6345                           ;psect for function _getLightsControl_OK
  6346  0B86                     _getLightsControl_OK:	
  6347                           
  6348                           ;TriacRelay_B1.c: 261: char loadok = LightsControl.LoadOK == 1 ? 1 : 0;
  6349                           
  6350                           ;incstack = 0
  6351                           ; Regs used in _getLightsControl_OK: [wreg+status,2]
  6352  0B86  3000               	movlw	0
  6353  0B87  1283               	bcf	3,5	;RP0=0, select bank0
  6354  0B88  1303               	bcf	3,6	;RP1=0, select bank0
  6355  0B89  1939               	btfsc	_LightsControl,2
  6356  0B8A  3001               	movlw	1
  6357  0B8B  00F4               	movwf	getLightsControl_OK@loadok
  6358                           
  6359                           ;TriacRelay_B1.c: 262: return loadok;
  6360  0B8C  0874               	movf	getLightsControl_OK@loadok,w
  6361  0B8D  0008               	return
  6362  0B8E                     __end_of_getLightsControl_OK:	
  6363                           
  6364                           	psect	text33
  6365  0C36                     __ptext33:	
  6366 ;; *************** function _getMain_Lights_Count *****************
  6367 ;; Defined at:
  6368 ;;		line 445 in file "../src/Main_B1.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;		None
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;  status1         1    3[BANK0 ] unsigned char 
  6373 ;;  status3         1    2[BANK0 ] unsigned char 
  6374 ;;  status2         1    1[BANK0 ] unsigned char 
  6375 ;;  count           1    0[BANK0 ] unsigned char 
  6376 ;; Return value:  Size  Location     Type
  6377 ;;                  1    wreg      unsigned char 
  6378 ;; Registers used:
  6379 ;;		wreg, status,2, status,0
  6380 ;; Tracked objects:
  6381 ;;		On entry : 0/0
  6382 ;;		On exit  : 0/0
  6383 ;;		Unchanged: 0/0
  6384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6385 ;;      Params:         0       0       0       0
  6386 ;;      Locals:         0       4       0       0
  6387 ;;      Temps:          1       0       0       0
  6388 ;;      Totals:         1       4       0       0
  6389 ;;Total ram usage:        5 bytes
  6390 ;; Hardware stack levels used:    1
  6391 ;; Hardware stack levels required when called:    2
  6392 ;; This function calls:
  6393 ;;		Nothing
  6394 ;; This function is called by:
  6395 ;;		_Load_Main
  6396 ;; This function uses a non-reentrant model
  6397 ;;
  6398                           
  6399                           
  6400                           ;psect for function _getMain_Lights_Count
  6401  0C36                     _getMain_Lights_Count:	
  6402                           
  6403                           ;Main_B1.c: 446: char status1 = 0, status2 = 0, status3 = 0, count = 0;
  6404                           
  6405                           ;incstack = 0
  6406                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  6407  0C36  1283               	bcf	3,5	;RP0=0, select bank0
  6408  0C37  1303               	bcf	3,6	;RP1=0, select bank0
  6409  0C38  01DC               	clrf	getMain_Lights_Count@status1
  6410  0C39  01DA               	clrf	getMain_Lights_Count@status2
  6411  0C3A  01DB               	clrf	getMain_Lights_Count@status3
  6412  0C3B  01D9               	clrf	getMain_Lights_Count@count
  6413                           
  6414                           ;Main_B1.c: 462: status1 = Lights1.Loop == 1 ? 1 : 0;
  6415  0C3C  3000               	movlw	0
  6416  0C3D  18C7               	btfsc	_Lights1+1,1
  6417  0C3E  3001               	movlw	1
  6418  0C3F  00DC               	movwf	getMain_Lights_Count@status1
  6419                           
  6420                           ;Main_B1.c: 471: return count = (status1 + status2 + status3);
  6421  0C40  085A               	movf	getMain_Lights_Count@status2,w
  6422  0C41  075C               	addwf	getMain_Lights_Count@status1,w
  6423  0C42  00F4               	movwf	??_getMain_Lights_Count
  6424  0C43  085B               	movf	getMain_Lights_Count@status3,w
  6425  0C44  0774               	addwf	??_getMain_Lights_Count,w
  6426  0C45  00D9               	movwf	getMain_Lights_Count@count
  6427  0C46  0008               	return
  6428  0C47                     __end_of_getMain_Lights_Count:	
  6429                           
  6430                           	psect	text34
  6431  0E9C                     __ptext34:	
  6432 ;; *************** function ___lwdiv *****************
  6433 ;; Defined at:
  6434 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;  divisor         2    0[BANK0 ] unsigned int 
  6437 ;;  dividend        2    2[BANK0 ] unsigned int 
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;  quotient        2    5[BANK0 ] unsigned int 
  6440 ;;  counter         1    4[BANK0 ] unsigned char 
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  2    0[BANK0 ] unsigned int 
  6443 ;; Registers used:
  6444 ;;		wreg, status,2, status,0
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6450 ;;      Params:         0       4       0       0
  6451 ;;      Locals:         0       3       0       0
  6452 ;;      Temps:          1       0       0       0
  6453 ;;      Totals:         1       7       0       0
  6454 ;;Total ram usage:        8 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    2
  6457 ;; This function calls:
  6458 ;;		Nothing
  6459 ;; This function is called by:
  6460 ;;		_Load_Main
  6461 ;;		_getPIR_AD
  6462 ;; This function uses a non-reentrant model
  6463 ;;
  6464                           
  6465                           
  6466                           ;psect for function ___lwdiv
  6467  0E9C                     ___lwdiv:	
  6468                           
  6469                           ;incstack = 0
  6470                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6471  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  6472  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  6473  0E9E  01DE               	clrf	___lwdiv@quotient
  6474  0E9F  01DF               	clrf	___lwdiv@quotient+1
  6475  0EA0  085A               	movf	___lwdiv@divisor+1,w
  6476  0EA1  0459               	iorwf	___lwdiv@divisor,w
  6477  0EA2  1903               	skipnz
  6478  0EA3  2ED5               	goto	l4695
  6479  0EA4  01DD               	clrf	___lwdiv@counter
  6480  0EA5  0ADD               	incf	___lwdiv@counter,f
  6481  0EA6                     l4683:	
  6482  0EA6  1BDA               	btfsc	___lwdiv@divisor+1,7
  6483  0EA7  2EB4               	goto	l4685
  6484  0EA8  3001               	movlw	1
  6485  0EA9                     u5795:	
  6486  0EA9  1003               	clrc
  6487  0EAA  0DD9               	rlf	___lwdiv@divisor,f
  6488  0EAB  0DDA               	rlf	___lwdiv@divisor+1,f
  6489  0EAC  3EFF               	addlw	-1
  6490  0EAD  1D03               	skipz
  6491  0EAE  2EA9               	goto	u5795
  6492  0EAF  3001               	movlw	1
  6493  0EB0  00F4               	movwf	??___lwdiv
  6494  0EB1  0874               	movf	??___lwdiv,w
  6495  0EB2  07DD               	addwf	___lwdiv@counter,f
  6496  0EB3  2EA6               	goto	l4683
  6497  0EB4                     l4685:	
  6498  0EB4  3001               	movlw	1
  6499  0EB5                     u5815:	
  6500  0EB5  1003               	clrc
  6501  0EB6  0DDE               	rlf	___lwdiv@quotient,f
  6502  0EB7  0DDF               	rlf	___lwdiv@quotient+1,f
  6503  0EB8  3EFF               	addlw	-1
  6504  0EB9  1D03               	skipz
  6505  0EBA  2EB5               	goto	u5815
  6506  0EBB  085A               	movf	___lwdiv@divisor+1,w
  6507  0EBC  025C               	subwf	___lwdiv@dividend+1,w
  6508  0EBD  1D03               	skipz
  6509  0EBE  2EC1               	goto	u5825
  6510  0EBF  0859               	movf	___lwdiv@divisor,w
  6511  0EC0  025B               	subwf	___lwdiv@dividend,w
  6512  0EC1                     u5825:	
  6513  0EC1  1C03               	skipc
  6514  0EC2  2ECA               	goto	l4691
  6515  0EC3  0859               	movf	___lwdiv@divisor,w
  6516  0EC4  02DB               	subwf	___lwdiv@dividend,f
  6517  0EC5  085A               	movf	___lwdiv@divisor+1,w
  6518  0EC6  1C03               	skipc
  6519  0EC7  03DC               	decf	___lwdiv@dividend+1,f
  6520  0EC8  02DC               	subwf	___lwdiv@dividend+1,f
  6521  0EC9  145E               	bsf	___lwdiv@quotient,0
  6522  0ECA                     l4691:	
  6523  0ECA  3001               	movlw	1
  6524  0ECB                     u5835:	
  6525  0ECB  1003               	clrc
  6526  0ECC  0CDA               	rrf	___lwdiv@divisor+1,f
  6527  0ECD  0CD9               	rrf	___lwdiv@divisor,f
  6528  0ECE  3EFF               	addlw	-1
  6529  0ECF  1D03               	skipz
  6530  0ED0  2ECB               	goto	u5835
  6531  0ED1  3001               	movlw	1
  6532  0ED2  02DD               	subwf	___lwdiv@counter,f
  6533  0ED3  1D03               	btfss	3,2
  6534  0ED4  2EB4               	goto	l4685
  6535  0ED5                     l4695:	
  6536  0ED5  085F               	movf	___lwdiv@quotient+1,w
  6537  0ED6  01DA               	clrf	?___lwdiv+1
  6538  0ED7  07DA               	addwf	?___lwdiv+1,f
  6539  0ED8  085E               	movf	___lwdiv@quotient,w
  6540  0ED9  01D9               	clrf	?___lwdiv
  6541  0EDA  07D9               	addwf	?___lwdiv,f
  6542  0EDB  0008               	return
  6543  0EDC                     __end_of___lwdiv:	
  6544                           
  6545                           	psect	text35
  6546  0B6B                     __ptext35:	
  6547 ;; *************** function _Load_Initialization *****************
  6548 ;; Defined at:
  6549 ;;		line 9 in file "../src/OverLoad_B1.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;		None               void
  6556 ;; Registers used:
  6557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6563 ;;      Params:         0       0       0       0
  6564 ;;      Locals:         0       0       0       0
  6565 ;;      Temps:          0       0       0       0
  6566 ;;      Totals:         0       0       0       0
  6567 ;;Total ram usage:        0 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    3
  6570 ;; This function calls:
  6571 ;;		_setLoad_AH_AL_Restore
  6572 ;; This function is called by:
  6573 ;;		_main
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           
  6578                           ;psect for function _Load_Initialization
  6579  0B6B                     _Load_Initialization:	
  6580                           
  6581                           ;OverLoad_B1.c: 10: Load.OK = 1;
  6582                           
  6583                           ;incstack = 0
  6584                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6585  0B6B  1683               	bsf	3,5	;RP0=1, select bank1
  6586  0B6C  1303               	bcf	3,6	;RP1=0, select bank1
  6587  0B6D  17CF               	bsf	_Load^(0+128),7
  6588                           
  6589                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  6590  0B6E  158A  24A8         	fcall	_setLoad_AH_AL_Restore
  6591  0B70  0008               	return
  6592  0B71                     __end_of_Load_Initialization:	
  6593                           
  6594                           	psect	text36
  6595  0CA8                     __ptext36:	
  6596 ;; *************** function _setLoad_AH_AL_Restore *****************
  6597 ;; Defined at:
  6598 ;;		line 239 in file "../src/OverLoad_B1.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;		None
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;  i               1    5[COMMON] unsigned char 
  6603 ;; Return value:  Size  Location     Type
  6604 ;;		None               void
  6605 ;; Registers used:
  6606 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6612 ;;      Params:         0       0       0       0
  6613 ;;      Locals:         1       0       0       0
  6614 ;;      Temps:          1       0       0       0
  6615 ;;      Totals:         2       0       0       0
  6616 ;;Total ram usage:        2 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    2
  6619 ;; This function calls:
  6620 ;;		Nothing
  6621 ;; This function is called by:
  6622 ;;		_Load_Initialization
  6623 ;;		_Load_Main
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           
  6628                           ;psect for function _setLoad_AH_AL_Restore
  6629  0CA8                     _setLoad_AH_AL_Restore:	
  6630                           
  6631                           ;OverLoad_B1.c: 240: char i;
  6632                           ;OverLoad_B1.c: 241: for (i = 0; i < 5; i++) {
  6633                           
  6634                           ;incstack = 0
  6635                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  6636  0CA8  01F5               	clrf	setLoad_AH_AL_Restore@i
  6637  0CA9                     L18:	
  6638  0CA9  3005               	movlw	5
  6639  0CAA  0275               	subwf	setLoad_AH_AL_Restore@i,w
  6640  0CAB  1803               	btfsc	3,0
  6641  0CAC  0008               	return
  6642                           
  6643                           ;OverLoad_B1.c: 242: Load.AH[i] = 0;
  6644  0CAD  0875               	movf	setLoad_AH_AL_Restore@i,w
  6645  0CAE  3ED9               	addlw	(_Load+10)& (0+255)
  6646  0CAF  0084               	movwf	4
  6647  0CB0  1383               	bcf	3,7	;select IRP bank1
  6648  0CB1  0180               	clrf	0
  6649                           
  6650                           ;OverLoad_B1.c: 243: Load.AL[i] = 0xff;
  6651  0CB2  30FF               	movlw	255
  6652  0CB3  00F4               	movwf	??_setLoad_AH_AL_Restore
  6653  0CB4  0875               	movf	setLoad_AH_AL_Restore@i,w
  6654  0CB5  3EDE               	addlw	(_Load+15)& (0+255)
  6655  0CB6  0084               	movwf	4
  6656  0CB7  0874               	movf	??_setLoad_AH_AL_Restore,w
  6657  0CB8  0080               	movwf	0
  6658  0CB9  3001               	movlw	1
  6659  0CBA  00F4               	movwf	??_setLoad_AH_AL_Restore
  6660  0CBB  0874               	movf	??_setLoad_AH_AL_Restore,w
  6661  0CBC  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  6662  0CBD  2CA9               	goto	L18
  6663  0CBE                     __end_of_setLoad_AH_AL_Restore:	
  6664                           
  6665                           	psect	text37
  6666  0E23                     __ptext37:	
  6667 ;; *************** function _Lights_Main *****************
  6668 ;; Defined at:
  6669 ;;		line 54 in file "../src/TriacRelay_B1.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;		None
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;		None
  6674 ;; Return value:  Size  Location     Type
  6675 ;;		None               void
  6676 ;; Registers used:
  6677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6678 ;; Tracked objects:
  6679 ;;		On entry : 0/0
  6680 ;;		On exit  : 0/0
  6681 ;;		Unchanged: 0/0
  6682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6683 ;;      Params:         0       0       0       0
  6684 ;;      Locals:         0       2       0       0
  6685 ;;      Temps:          0       3       0       0
  6686 ;;      Totals:         0       5       0       0
  6687 ;;Total ram usage:        5 bytes
  6688 ;; Hardware stack levels used:    1
  6689 ;; Hardware stack levels required when called:    6
  6690 ;; This function calls:
  6691 ;;		_Lights_Close
  6692 ;;		_Lights_Control
  6693 ;;		_getLoad_OK
  6694 ;;		_getMain_All_Error_Status
  6695 ;;		_getMain_LightsStatus
  6696 ;;		_setLights_Main
  6697 ;; This function is called by:
  6698 ;;		_main
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           
  6703                           ;psect for function _Lights_Main
  6704  0E23                     _Lights_Main:	
  6705                           
  6706                           ;TriacRelay_B1.c: 57: if (getMain_All_Error_Status(0) == 0) {
  6707                           
  6708                           ;incstack = 0
  6709                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6710  0E23  3000               	movlw	0
  6711  0E24  158A  265E  158A   	fcall	_getMain_All_Error_Status
  6712  0E27  3800               	iorlw	0
  6713  0E28  1D03               	skipz
  6714  0E29  2E50               	goto	l1216
  6715                           
  6716                           ;TriacRelay_B1.c: 58: if (LightsControl.LoadOK == 1) {
  6717  0E2A  1283               	bcf	3,5	;RP0=0, select bank0
  6718  0E2B  1303               	bcf	3,6	;RP1=0, select bank0
  6719  0E2C  1D39               	btfss	_LightsControl,2
  6720  0E2D  2E53               	goto	l5021
  6721                           
  6722                           ;TriacRelay_B1.c: 59: LightsControl.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus()
      +                           == 0 ? 0 : LightsControl.LoadOK;
  6723  0E2E  158A  237E  158A   	fcall	_getLoad_OK
  6724  0E31  3A01               	xorlw	1
  6725  0E32  1903               	skipnz
  6726  0E33  2E47               	goto	l5017
  6727  0E34  158A  25BE  158A   	fcall	_getMain_LightsStatus
  6728  0E37  3A00               	xorlw	0
  6729  0E38  1903               	skipnz
  6730  0E39  2E47               	goto	l5017
  6731  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  6732  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  6733  0E3C  0C39               	rrf	_LightsControl,w
  6734  0E3D  00E3               	movwf	??_Lights_Main
  6735  0E3E  0C63               	rrf	??_Lights_Main,w
  6736  0E3F  3901               	andlw	1
  6737  0E40  00E4               	movwf	??_Lights_Main+1
  6738  0E41  01E5               	clrf	??_Lights_Main+2
  6739  0E42  0864               	movf	??_Lights_Main+1,w
  6740  0E43  00E6               	movwf	_Lights_Main$4389
  6741  0E44  0865               	movf	??_Lights_Main+2,w
  6742  0E45  00E7               	movwf	_Lights_Main$4389+1
  6743  0E46  2E4B               	goto	l5019
  6744  0E47                     l5017:	
  6745  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  6746  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  6747  0E49  01E6               	clrf	_Lights_Main$4389
  6748  0E4A  01E7               	clrf	_Lights_Main$4389+1
  6749  0E4B                     l5019:	
  6750  0E4B  0866               	movf	_Lights_Main$4389,w
  6751  0E4C  1139               	bcf	_LightsControl,2
  6752  0E4D  1D03               	skipz
  6753  0E4E  1539               	bsf	_LightsControl,2
  6754                           
  6755                           ;TriacRelay_B1.c: 60: }
  6756                           ;TriacRelay_B1.c: 61: } else {
  6757  0E4F  2E53               	goto	l5021
  6758  0E50                     l1216:	
  6759                           
  6760                           ;TriacRelay_B1.c: 62: LightsControl.LoadOK = 0;
  6761  0E50  1283               	bcf	3,5	;RP0=0, select bank0
  6762  0E51  1303               	bcf	3,6	;RP1=0, select bank0
  6763  0E52  1139               	bcf	_LightsControl,2
  6764  0E53                     l5021:	
  6765                           
  6766                           ;TriacRelay_B1.c: 63: }
  6767                           ;TriacRelay_B1.c: 67: setLights_Main(1);
  6768  0E53  3001               	movlw	1
  6769  0E54  158A  256C  158A   	fcall	_setLights_Main
  6770                           
  6771                           ;TriacRelay_B1.c: 68: Lights_Control(1);
  6772  0E57  3001               	movlw	1
  6773  0E58  118A  2749  158A   	fcall	_Lights_Control
  6774                           
  6775                           ;TriacRelay_B1.c: 81: Lights_Close();
  6776  0E5B  158A  247E         	fcall	_Lights_Close
  6777  0E5D  0008               	return
  6778  0E5E                     __end_of_Lights_Main:	
  6779                           
  6780                           	psect	text38
  6781  0D6C                     __ptext38:	
  6782 ;; *************** function _setLights_Main *****************
  6783 ;; Defined at:
  6784 ;;		line 93 in file "../src/TriacRelay_B1.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;  lights          1    wreg     unsigned char 
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;  lights          1    9[BANK0 ] unsigned char 
  6789 ;; Return value:  Size  Location     Type
  6790 ;;		None               void
  6791 ;; Registers used:
  6792 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6798 ;;      Params:         0       0       0       0
  6799 ;;      Locals:         0       1       0       0
  6800 ;;      Temps:          0       0       0       0
  6801 ;;      Totals:         0       1       0       0
  6802 ;;Total ram usage:        1 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    5
  6805 ;; This function calls:
  6806 ;;		_LightsPointSelect
  6807 ;;		_setLights
  6808 ;; This function is called by:
  6809 ;;		_Lights_Main
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           
  6814                           ;psect for function _setLights_Main
  6815  0D6C                     _setLights_Main:	
  6816                           
  6817                           ;incstack = 0
  6818                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6819                           ;setLights_Main@lights stored from wreg
  6820  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  6821  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  6822  0D6E  00E2               	movwf	setLights_Main@lights
  6823                           
  6824                           ;TriacRelay_B1.c: 94: LightsPointSelect(lights);
  6825  0D6F  0862               	movf	setLights_Main@lights,w
  6826  0D70  158A  2396  158A   	fcall	_LightsPointSelect
  6827                           
  6828                           ;TriacRelay_B1.c: 95: if (Lights->GO == 0) {
  6829  0D73  0878               	movf	_Lights,w
  6830  0D74  0084               	movwf	4
  6831  0D75  1383               	bcf	3,7	;select IRP bank0
  6832  0D76  1880               	btfsc	0,1
  6833  0D77  0008               	return
  6834                           
  6835                           ;TriacRelay_B1.c: 96: if (Lights->Trigger == 1) {
  6836  0D78  0878               	movf	_Lights,w
  6837  0D79  0084               	movwf	4
  6838  0D7A  1D80               	btfss	0,3
  6839  0D7B  0008               	return
  6840                           
  6841                           ;TriacRelay_B1.c: 97: if (LightsControl.LoadOK == 0) {
  6842  0D7C  1283               	bcf	3,5	;RP0=0, select bank0
  6843  0D7D  1303               	bcf	3,6	;RP1=0, select bank0
  6844  0D7E  1939               	btfsc	_LightsControl,2
  6845  0D7F  0008               	return
  6846                           
  6847                           ;TriacRelay_B1.c: 98: Lights->Trigger = 0;
  6848  0D80  0878               	movf	_Lights,w
  6849  0D81  0084               	movwf	4
  6850  0D82  1180               	bcf	0,3
  6851                           
  6852                           ;TriacRelay_B1.c: 100: if (Lights->Switch == 1) {
  6853  0D83  0878               	movf	_Lights,w
  6854  0D84  0084               	movwf	4
  6855  0D85  1E00               	btfss	0,4
  6856  0D86  2D8D               	goto	l4633
  6857                           
  6858                           ;TriacRelay_B1.c: 101: setLights(lights, 1);
  6859  0D87  01DF               	clrf	setLights@status
  6860  0D88  0ADF               	incf	setLights@status,f
  6861  0D89  0862               	movf	setLights_Main@lights,w
  6862  0D8A  158A  2739         	fcall	_setLights
  6863                           
  6864                           ;TriacRelay_B1.c: 102: } else {
  6865  0D8C  0008               	return
  6866  0D8D                     l4633:	
  6867                           
  6868                           ;TriacRelay_B1.c: 103: setLights(lights, 0);
  6869  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  6870  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  6871  0D8F  01DF               	clrf	setLights@status
  6872  0D90  0862               	movf	setLights_Main@lights,w
  6873  0D91  158A  2739         	fcall	_setLights
  6874  0D93  0008               	return
  6875  0D94                     __end_of_setLights_Main:	
  6876                           
  6877                           	psect	text39
  6878  0F39                     __ptext39:	
  6879 ;; *************** function _setLights *****************
  6880 ;; Defined at:
  6881 ;;		line 111 in file "../src/TriacRelay_B1.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;  lights          1    wreg     unsigned char 
  6884 ;;  status          1    6[BANK0 ] unsigned char 
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;  lights          1    8[BANK0 ] unsigned char 
  6887 ;; Return value:  Size  Location     Type
  6888 ;;		None               void
  6889 ;; Registers used:
  6890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6891 ;; Tracked objects:
  6892 ;;		On entry : 0/0
  6893 ;;		On exit  : 0/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6896 ;;      Params:         0       1       0       0
  6897 ;;      Locals:         0       1       0       0
  6898 ;;      Temps:          0       1       0       0
  6899 ;;      Totals:         0       3       0       0
  6900 ;;Total ram usage:        3 bytes
  6901 ;; Hardware stack levels used:    1
  6902 ;; Hardware stack levels required when called:    4
  6903 ;; This function calls:
  6904 ;;		_LightsPointSelect
  6905 ;;		_getMain_All_Error_Status
  6906 ;;		_setLights_Line
  6907 ;; This function is called by:
  6908 ;;		_setLights_Main
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           
  6913                           ;psect for function _setLights
  6914  0F39                     _setLights:	
  6915                           
  6916                           ;incstack = 0
  6917                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6918                           ;setLights@lights stored from wreg
  6919  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  6920  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  6921  0F3B  00E1               	movwf	setLights@lights
  6922                           
  6923                           ;TriacRelay_B1.c: 113: LightsPointSelect(lights);
  6924  0F3C  0861               	movf	setLights@lights,w
  6925  0F3D  158A  2396  158A   	fcall	_LightsPointSelect
  6926                           
  6927                           ;TriacRelay_B1.c: 116: LightsControl.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
  6928  0F40  3000               	movlw	0
  6929  0F41  158A  265E  158A   	fcall	_getMain_All_Error_Status
  6930  0F44  3A00               	xorlw	0
  6931  0F45  3000               	movlw	0
  6932  0F46  1903               	skipnz
  6933  0F47  3001               	movlw	1
  6934  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  6935  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  6936  0F4A  00E0               	movwf	??_setLights
  6937  0F4B  0DE0               	rlf	??_setLights,f
  6938  0F4C  0DE0               	rlf	??_setLights,f
  6939  0F4D  0839               	movf	_LightsControl,w
  6940  0F4E  0660               	xorwf	??_setLights,w
  6941  0F4F  39FB               	andlw	-5
  6942  0F50  0660               	xorwf	??_setLights,w
  6943  0F51  00B9               	movwf	_LightsControl
  6944                           
  6945                           ;TriacRelay_B1.c: 120: Lights->GO = 1;
  6946  0F52  0878               	movf	_Lights,w
  6947  0F53  0084               	movwf	4
  6948  0F54  1383               	bcf	3,7	;select IRP bank0
  6949  0F55  1480               	bsf	0,1
  6950                           
  6951                           ;TriacRelay_B1.c: 121: if (status == 1) {
  6952  0F56  085F               	movf	setLights@status,w
  6953  0F57  3A01               	xorlw	1
  6954  0F58  1D03               	skipz
  6955  0F59  2F77               	goto	l4417
  6956                           
  6957                           ;TriacRelay_B1.c: 122: if (Lights->Status == 0) {
  6958  0F5A  0878               	movf	_Lights,w
  6959  0F5B  0084               	movwf	4
  6960  0F5C  1900               	btfsc	0,2
  6961  0F5D  2F92               	goto	l4421
  6962                           
  6963                           ;TriacRelay_B1.c: 123: Lights->Status = 1;
  6964  0F5E  0878               	movf	_Lights,w
  6965  0F5F  0084               	movwf	4
  6966  0F60  1500               	bsf	0,2
  6967                           
  6968                           ;TriacRelay_B1.c: 124: Lights->Loop = 1;
  6969  0F61  0A78               	incf	_Lights,w
  6970  0F62  0084               	movwf	4
  6971  0F63  1480               	bsf	0,1
  6972                           
  6973                           ;TriacRelay_B1.c: 125: Lights->RelayValue = 10;
  6974  0F64  300A               	movlw	10
  6975  0F65  00E0               	movwf	??_setLights
  6976  0F66  0878               	movf	_Lights,w
  6977  0F67  3E06               	addlw	6
  6978  0F68  0084               	movwf	4
  6979  0F69  0860               	movf	??_setLights,w
  6980  0F6A  0080               	movwf	0
  6981                           
  6982                           ;TriacRelay_B1.c: 126: Lights->TriacValue = 13;
  6983  0F6B  300D               	movlw	13
  6984  0F6C  00E0               	movwf	??_setLights
  6985  0F6D  0878               	movf	_Lights,w
  6986  0F6E  3E04               	addlw	4
  6987  0F6F  0084               	movwf	4
  6988  0F70  0860               	movf	??_setLights,w
  6989  0F71  0080               	movwf	0
  6990                           
  6991                           ;TriacRelay_B1.c: 127: setLights_Line(lights);
  6992  0F72  0861               	movf	setLights@lights,w
  6993  0F73  158A  23B7  158A   	fcall	_setLights_Line
  6994                           
  6995                           ;TriacRelay_B1.c: 128: }
  6996                           ;TriacRelay_B1.c: 129: } else {
  6997  0F76  2F92               	goto	l4421
  6998  0F77                     l4417:	
  6999                           
  7000                           ;TriacRelay_B1.c: 130: if (Lights->Status == 1) {
  7001  0F77  0878               	movf	_Lights,w
  7002  0F78  0084               	movwf	4
  7003  0F79  1383               	bcf	3,7	;select IRP bank0
  7004  0F7A  1D00               	btfss	0,2
  7005  0F7B  2F92               	goto	l4421
  7006                           
  7007                           ;TriacRelay_B1.c: 131: Lights->Status = 0;
  7008  0F7C  0878               	movf	_Lights,w
  7009  0F7D  0084               	movwf	4
  7010  0F7E  1100               	bcf	0,2
  7011                           
  7012                           ;TriacRelay_B1.c: 132: Lights->Loop = 0;
  7013  0F7F  0A78               	incf	_Lights,w
  7014  0F80  0084               	movwf	4
  7015  0F81  1080               	bcf	0,1
  7016                           
  7017                           ;TriacRelay_B1.c: 133: Lights->RelayValue = 4;
  7018  0F82  3004               	movlw	4
  7019  0F83  1283               	bcf	3,5	;RP0=0, select bank0
  7020  0F84  1303               	bcf	3,6	;RP1=0, select bank0
  7021  0F85  00E0               	movwf	??_setLights
  7022  0F86  0878               	movf	_Lights,w
  7023  0F87  3E06               	addlw	6
  7024  0F88  0084               	movwf	4
  7025  0F89  0860               	movf	??_setLights,w
  7026  0F8A  0080               	movwf	0
  7027                           
  7028                           ;TriacRelay_B1.c: 134: Lights->TriacValue = 7;
  7029  0F8B  3007               	movlw	7
  7030  0F8C  00E0               	movwf	??_setLights
  7031  0F8D  0878               	movf	_Lights,w
  7032  0F8E  3E04               	addlw	4
  7033  0F8F  0084               	movwf	4
  7034  0F90  0860               	movf	??_setLights,w
  7035  0F91  0080               	movwf	0
  7036  0F92                     l4421:	
  7037                           
  7038                           ;TriacRelay_B1.c: 135: }
  7039                           ;TriacRelay_B1.c: 136: }
  7040                           ;TriacRelay_B1.c: 138: if (lights == 1) {
  7041  0F92  1283               	bcf	3,5	;RP0=0, select bank0
  7042  0F93  1303               	bcf	3,6	;RP1=0, select bank0
  7043  0F94  0861               	movf	setLights@lights,w
  7044  0F95  3A01               	xorlw	1
  7045  0F96  1D03               	skipz
  7046  0F97  0008               	return
  7047                           
  7048                           ;TriacRelay_B1.c: 139: RB2 = 1;
  7049  0F98  1506               	bsf	6,2	;volatile
  7050  0F99  0008               	return
  7051  0F9A                     __end_of_setLights:	
  7052                           
  7053                           	psect	text40
  7054  0BB7                     __ptext40:	
  7055 ;; *************** function _setLights_Line *****************
  7056 ;; Defined at:
  7057 ;;		line 221 in file "../src/TriacRelay_B1.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;  lights          1    wreg     unsigned char 
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;  lights          1    6[COMMON] unsigned char 
  7062 ;; Return value:  Size  Location     Type
  7063 ;;		None               void
  7064 ;; Registers used:
  7065 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7071 ;;      Params:         0       0       0       0
  7072 ;;      Locals:         1       0       0       0
  7073 ;;      Temps:          0       0       0       0
  7074 ;;      Totals:         1       0       0       0
  7075 ;;Total ram usage:        1 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:    3
  7078 ;; This function calls:
  7079 ;;		_LightsPointSelect
  7080 ;; This function is called by:
  7081 ;;		_setLights
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           
  7086                           ;psect for function _setLights_Line
  7087  0BB7                     _setLights_Line:	
  7088                           
  7089                           ;incstack = 0
  7090                           ; Regs used in _setLights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7091                           ;setLights_Line@lights stored from wreg
  7092  0BB7  00F6               	movwf	setLights_Line@lights
  7093                           
  7094                           ;TriacRelay_B1.c: 223: Lights1.Line = 0;
  7095  0BB8  1283               	bcf	3,5	;RP0=0, select bank0
  7096  0BB9  1303               	bcf	3,6	;RP1=0, select bank0
  7097  0BBA  1047               	bcf	_Lights1+1,0
  7098                           
  7099                           ;TriacRelay_B1.c: 231: LightsPointSelect(lights);
  7100  0BBB  0876               	movf	setLights_Line@lights,w
  7101  0BBC  158A  2396         	fcall	_LightsPointSelect
  7102                           
  7103                           ;TriacRelay_B1.c: 232: Lights->Line = 1;
  7104  0BBE  0A78               	incf	_Lights,w
  7105  0BBF  0084               	movwf	4
  7106  0BC0  1383               	bcf	3,7	;select IRP bank0
  7107  0BC1  1400               	bsf	0,0
  7108  0BC2  0008               	return
  7109  0BC3                     __end_of_setLights_Line:	
  7110                           
  7111                           	psect	text41
  7112  0B7E                     __ptext41:	
  7113 ;; *************** function _getLoad_OK *****************
  7114 ;; Defined at:
  7115 ;;		line 219 in file "../src/OverLoad_B1.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;		None
  7118 ;; Auto vars:     Size  Location     Type
  7119 ;;  ok              1    4[COMMON] unsigned char 
  7120 ;; Return value:  Size  Location     Type
  7121 ;;                  1    wreg      unsigned char 
  7122 ;; Registers used:
  7123 ;;		wreg, status,2
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7129 ;;      Params:         0       0       0       0
  7130 ;;      Locals:         1       0       0       0
  7131 ;;      Temps:          0       0       0       0
  7132 ;;      Totals:         1       0       0       0
  7133 ;;Total ram usage:        1 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:    2
  7136 ;; This function calls:
  7137 ;;		Nothing
  7138 ;; This function is called by:
  7139 ;;		_Lights_Main
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           
  7144                           ;psect for function _getLoad_OK
  7145  0B7E                     _getLoad_OK:	
  7146                           
  7147                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
  7148                           
  7149                           ;incstack = 0
  7150                           ; Regs used in _getLoad_OK: [wreg+status,2]
  7151  0B7E  3000               	movlw	0
  7152  0B7F  1683               	bsf	3,5	;RP0=1, select bank1
  7153  0B80  1303               	bcf	3,6	;RP1=0, select bank1
  7154  0B81  1BCF               	btfsc	_Load^(0+128),7
  7155  0B82  3001               	movlw	1
  7156  0B83  00F4               	movwf	getLoad_OK@ok
  7157                           
  7158                           ;OverLoad_B1.c: 221: return ok;
  7159  0B84  0874               	movf	getLoad_OK@ok,w
  7160  0B85  0008               	return
  7161  0B86                     __end_of_getLoad_OK:	
  7162                           
  7163                           	psect	text42
  7164  0749                     __ptext42:	
  7165 ;; *************** function _Lights_Control *****************
  7166 ;; Defined at:
  7167 ;;		line 155 in file "../src/TriacRelay_B1.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;  lights          1    wreg     unsigned char 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;  lights          1    4[BANK0 ] unsigned char 
  7172 ;; Return value:  Size  Location     Type
  7173 ;;		None               void
  7174 ;; Registers used:
  7175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7181 ;;      Params:         0       0       0       0
  7182 ;;      Locals:         0       3       0       0
  7183 ;;      Temps:          0       2       0       0
  7184 ;;      Totals:         0       5       0       0
  7185 ;;Total ram usage:        5 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    3
  7188 ;; This function calls:
  7189 ;;		_LightsPointSelect
  7190 ;; This function is called by:
  7191 ;;		_Lights_Main
  7192 ;; This function uses a non-reentrant model
  7193 ;;
  7194                           
  7195                           
  7196                           ;psect for function _Lights_Control
  7197  0749                     _Lights_Control:	
  7198                           
  7199                           ;incstack = 0
  7200                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7201                           ;Lights_Control@lights stored from wreg
  7202  0749  1283               	bcf	3,5	;RP0=0, select bank0
  7203  074A  1303               	bcf	3,6	;RP1=0, select bank0
  7204  074B  00DD               	movwf	Lights_Control@lights
  7205                           
  7206                           ;TriacRelay_B1.c: 156: LightsPointSelect(lights);
  7207  074C  085D               	movf	Lights_Control@lights,w
  7208  074D  158A  2396  118A   	fcall	_LightsPointSelect
  7209                           
  7210                           ;TriacRelay_B1.c: 157: if (Lights->GO == 1) {
  7211  0750  0878               	movf	_Lights,w
  7212  0751  0084               	movwf	4
  7213  0752  1383               	bcf	3,7	;select IRP bank0
  7214  0753  1C80               	btfss	0,1
  7215  0754  0008               	return
  7216                           
  7217                           ;TriacRelay_B1.c: 158: Lights->Time++;
  7218  0755  3001               	movlw	1
  7219  0756  1283               	bcf	3,5	;RP0=0, select bank0
  7220  0757  1303               	bcf	3,6	;RP1=0, select bank0
  7221  0758  00D9               	movwf	??_Lights_Control
  7222  0759  0878               	movf	_Lights,w
  7223  075A  3E02               	addlw	2
  7224  075B  0084               	movwf	4
  7225  075C  0859               	movf	??_Lights_Control,w
  7226  075D  0780               	addwf	0,f
  7227                           
  7228                           ;TriacRelay_B1.c: 159: if (Lights->Time >= Lights->RelayValue && Lights->RelaySet == 0) 
      +                          {
  7229  075E  0878               	movf	_Lights,w
  7230  075F  3E06               	addlw	6
  7231  0760  0084               	movwf	4
  7232  0761  0800               	movf	0,w
  7233  0762  00D9               	movwf	??_Lights_Control
  7234  0763  0878               	movf	_Lights,w
  7235  0764  3E02               	addlw	2
  7236  0765  0084               	movwf	4
  7237  0766  0800               	movf	0,w
  7238  0767  00DA               	movwf	??_Lights_Control+1
  7239  0768  0859               	movf	??_Lights_Control,w
  7240  0769  025A               	subwf	??_Lights_Control+1,w
  7241  076A  1C03               	skipc
  7242  076B  2F83               	goto	l4651
  7243  076C  0878               	movf	_Lights,w
  7244  076D  0084               	movwf	4
  7245  076E  1B80               	btfsc	0,7
  7246  076F  2F83               	goto	l4651
  7247                           
  7248                           ;TriacRelay_B1.c: 160: Lights->RelaySet = 1;
  7249  0770  0878               	movf	_Lights,w
  7250  0771  0084               	movwf	4
  7251  0772  1780               	bsf	0,7
  7252                           
  7253                           ;TriacRelay_B1.c: 162: if (lights == 1) {
  7254  0773  085D               	movf	Lights_Control@lights,w
  7255  0774  3A01               	xorlw	1
  7256  0775  1D03               	skipz
  7257  0776  0008               	return
  7258                           
  7259                           ;TriacRelay_B1.c: 163: RA4 = Lights->Status == 1 ? 1 : 0;
  7260  0777  0878               	movf	_Lights,w
  7261  0778  0084               	movwf	4
  7262  0779  1D00               	btfss	0,2
  7263  077A  2F7F               	goto	u5720
  7264  077B  1283               	bcf	3,5	;RP0=0, select bank0
  7265  077C  1303               	bcf	3,6	;RP1=0, select bank0
  7266  077D  1605               	bsf	5,4	;volatile
  7267  077E  0008               	return
  7268  077F                     u5720:	
  7269  077F  1283               	bcf	3,5	;RP0=0, select bank0
  7270  0780  1303               	bcf	3,6	;RP1=0, select bank0
  7271  0781  1205               	bcf	5,4	;volatile
  7272                           
  7273                           ;TriacRelay_B1.c: 164: }
  7274                           ;TriacRelay_B1.c: 177: } else if (Lights->Time >= Lights->TriacValue) {
  7275  0782  0008               	return
  7276  0783                     l4651:	
  7277  0783  0878               	movf	_Lights,w
  7278  0784  3E04               	addlw	4
  7279  0785  0084               	movwf	4
  7280  0786  1383               	bcf	3,7	;select IRP bank0
  7281  0787  0800               	movf	0,w
  7282  0788  00D9               	movwf	??_Lights_Control
  7283  0789  0878               	movf	_Lights,w
  7284  078A  3E02               	addlw	2
  7285  078B  0084               	movwf	4
  7286  078C  0800               	movf	0,w
  7287  078D  00DA               	movwf	??_Lights_Control+1
  7288  078E  0859               	movf	??_Lights_Control,w
  7289  078F  025A               	subwf	??_Lights_Control+1,w
  7290  0790  1C03               	skipc
  7291  0791  0008               	return
  7292                           
  7293                           ;TriacRelay_B1.c: 178: Lights->Time = 0;
  7294  0792  0878               	movf	_Lights,w
  7295  0793  3E02               	addlw	2
  7296  0794  0084               	movwf	4
  7297  0795  0180               	clrf	0
  7298                           
  7299                           ;TriacRelay_B1.c: 179: Lights->GO = 0;
  7300  0796  0878               	movf	_Lights,w
  7301  0797  0084               	movwf	4
  7302  0798  1080               	bcf	0,1
  7303                           
  7304                           ;TriacRelay_B1.c: 180: Lights->RelaySet = 0;
  7305  0799  0878               	movf	_Lights,w
  7306  079A  0084               	movwf	4
  7307  079B  1380               	bcf	0,7
  7308                           
  7309                           ;TriacRelay_B1.c: 183: LightsControl.Detect = Lights->Status == 0 ? 1 : LightsControl.De
      +                          tect;
  7310  079C  0878               	movf	_Lights,w
  7311  079D  0084               	movwf	4
  7312  079E  1D00               	btfss	0,2
  7313  079F  2FA8               	goto	l4663
  7314  07A0  0839               	movf	_LightsControl,w
  7315  07A1  3901               	andlw	1
  7316  07A2  00D9               	movwf	??_Lights_Control
  7317  07A3  01DA               	clrf	??_Lights_Control+1
  7318  07A4  0859               	movf	??_Lights_Control,w
  7319  07A5  00DB               	movwf	_Lights_Control$4398
  7320  07A6  085A               	movf	??_Lights_Control+1,w
  7321  07A7  2FAB               	goto	L19
  7322  07A8                     l4663:	
  7323  07A8  3001               	movlw	1
  7324  07A9  00DB               	movwf	_Lights_Control$4398
  7325  07AA  3000               	movlw	0
  7326  07AB                     L19:	
  7327  07AB  00DC               	movwf	_Lights_Control$4398+1
  7328  07AC  085B               	movf	_Lights_Control$4398,w
  7329  07AD  1039               	bcf	_LightsControl,0
  7330  07AE  1D03               	skipz
  7331  07AF  1439               	bsf	_LightsControl,0
  7332                           
  7333                           ;TriacRelay_B1.c: 187: if (lights == 1) {
  7334  07B0  085D               	movf	Lights_Control@lights,w
  7335  07B1  3A01               	xorlw	1
  7336  07B2  1D03               	skipz
  7337  07B3  0008               	return
  7338                           
  7339                           ;TriacRelay_B1.c: 188: RB2 = 0;
  7340  07B4  1106               	bcf	6,2	;volatile
  7341  07B5  0008               	return
  7342  07B6                     __end_of_Lights_Control:	
  7343                           
  7344                           	psect	text43
  7345  0C7E                     __ptext43:	
  7346 ;; *************** function _Lights_Close *****************
  7347 ;; Defined at:
  7348 ;;		line 85 in file "../src/TriacRelay_B1.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;		None
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;		None
  7353 ;; Return value:  Size  Location     Type
  7354 ;;		None               void
  7355 ;; Registers used:
  7356 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7357 ;; Tracked objects:
  7358 ;;		On entry : 0/0
  7359 ;;		On exit  : 0/0
  7360 ;;		Unchanged: 0/0
  7361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7362 ;;      Params:         0       0       0       0
  7363 ;;      Locals:         0       0       0       0
  7364 ;;      Temps:          0       1       0       0
  7365 ;;      Totals:         0       1       0       0
  7366 ;;Total ram usage:        1 bytes
  7367 ;; Hardware stack levels used:    1
  7368 ;; Hardware stack levels required when called:    5
  7369 ;; This function calls:
  7370 ;;		_getMain_LightsStatus
  7371 ;; This function is called by:
  7372 ;;		_Lights_Main
  7373 ;; This function uses a non-reentrant model
  7374 ;;
  7375                           
  7376                           
  7377                           ;psect for function _Lights_Close
  7378  0C7E                     _Lights_Close:	
  7379                           
  7380                           ;TriacRelay_B1.c: 86: if (LightsControl.Detect == 1) {
  7381                           
  7382                           ;incstack = 0
  7383                           ; Regs used in _Lights_Close: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7384  0C7E  1283               	bcf	3,5	;RP0=0, select bank0
  7385  0C7F  1303               	bcf	3,6	;RP1=0, select bank0
  7386  0C80  1C39               	btfss	_LightsControl,0
  7387  0C81  0008               	return
  7388                           
  7389                           ;TriacRelay_B1.c: 87: LightsControl.Detect = 0;
  7390  0C82  1039               	bcf	_LightsControl,0
  7391                           
  7392                           ;TriacRelay_B1.c: 88: LightsControl.LoadGO = getMain_LightsStatus() == 0 ? 0 : 1;
  7393  0C83  158A  25BE         	fcall	_getMain_LightsStatus
  7394  0C85  3800               	iorlw	0
  7395  0C86  3000               	movlw	0
  7396  0C87  1D03               	skipz
  7397  0C88  3001               	movlw	1
  7398  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  7399  0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  7400  0C8B  00DF               	movwf	??_Lights_Close
  7401  0C8C  0DDF               	rlf	??_Lights_Close,f
  7402  0C8D  0839               	movf	_LightsControl,w
  7403  0C8E  065F               	xorwf	??_Lights_Close,w
  7404  0C8F  39FD               	andlw	-3
  7405  0C90  065F               	xorwf	??_Lights_Close,w
  7406  0C91  00B9               	movwf	_LightsControl
  7407  0C92  0008               	return
  7408  0C93                     __end_of_Lights_Close:	
  7409                           
  7410                           	psect	text44
  7411  0DBE                     __ptext44:	
  7412 ;; *************** function _getMain_LightsStatus *****************
  7413 ;; Defined at:
  7414 ;;		line 375 in file "../src/Main_B1.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;		None
  7417 ;; Auto vars:     Size  Location     Type
  7418 ;;  i               2    3[BANK0 ] int 
  7419 ;;  status          1    5[BANK0 ] unsigned char 
  7420 ;;  count           1    2[BANK0 ] unsigned char 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;                  1    wreg      unsigned char 
  7423 ;; Registers used:
  7424 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7430 ;;      Params:         0       0       0       0
  7431 ;;      Locals:         0       4       0       0
  7432 ;;      Temps:          1       0       0       0
  7433 ;;      Totals:         1       4       0       0
  7434 ;;Total ram usage:        5 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    4
  7437 ;; This function calls:
  7438 ;;		_getLights_Status
  7439 ;; This function is called by:
  7440 ;;		_Load_Main
  7441 ;;		_setTemp_Main
  7442 ;;		_Lights_Main
  7443 ;;		_Lights_Close
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           
  7448                           ;psect for function _getMain_LightsStatus
  7449  0DBE                     _getMain_LightsStatus:	
  7450                           
  7451                           ;Main_B1.c: 376: char status = 0, count = 0;
  7452                           
  7453                           ;incstack = 0
  7454                           ; Regs used in _getMain_LightsStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7455  0DBE  1283               	bcf	3,5	;RP0=0, select bank0
  7456  0DBF  1303               	bcf	3,6	;RP1=0, select bank0
  7457  0DC0  01DE               	clrf	getMain_LightsStatus@status
  7458  0DC1  01DB               	clrf	getMain_LightsStatus@count
  7459                           
  7460                           ;Main_B1.c: 379: count = 1;
  7461  0DC2  01DB               	clrf	getMain_LightsStatus@count
  7462  0DC3  0ADB               	incf	getMain_LightsStatus@count,f
  7463                           
  7464                           ;Main_B1.c: 390: for (int i = 0; i < count; i++) {
  7465  0DC4  01DC               	clrf	getMain_LightsStatus@i
  7466  0DC5  01DD               	clrf	getMain_LightsStatus@i+1
  7467  0DC6                     l4399:	
  7468  0DC6  085D               	movf	getMain_LightsStatus@i+1,w
  7469  0DC7  3A80               	xorlw	128
  7470  0DC8  00F6               	movwf	??_getMain_LightsStatus
  7471  0DC9  3080               	movlw	128
  7472  0DCA  0276               	subwf	??_getMain_LightsStatus,w
  7473  0DCB  1D03               	skipz
  7474  0DCC  2DCF               	goto	u5185
  7475  0DCD  085B               	movf	getMain_LightsStatus@count,w
  7476  0DCE  025C               	subwf	getMain_LightsStatus@i,w
  7477  0DCF                     u5185:	
  7478  0DCF  1803               	btfsc	3,0
  7479  0DD0  2DEB               	goto	l4401
  7480                           
  7481                           ;Main_B1.c: 391: if (status == 0) {
  7482  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  7483  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  7484  0DD3  08DE               	movf	getMain_LightsStatus@status,f
  7485  0DD4  1D03               	skipz
  7486  0DD5  2DE4               	goto	l4397
  7487                           
  7488                           ;Main_B1.c: 393: status = getLights_Status(i + 1) == 1 ? 1 : 0;
  7489  0DD6  085C               	movf	getMain_LightsStatus@i,w
  7490  0DD7  3E01               	addlw	1
  7491  0DD8  158A  2425  158A   	fcall	_getLights_Status
  7492  0DDB  3A01               	xorlw	1
  7493  0DDC  3000               	movlw	0
  7494  0DDD  1903               	skipnz
  7495  0DDE  3001               	movlw	1
  7496  0DDF  00F6               	movwf	??_getMain_LightsStatus
  7497  0DE0  0876               	movf	??_getMain_LightsStatus,w
  7498  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  7499  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  7500  0DE3  00DE               	movwf	getMain_LightsStatus@status
  7501  0DE4                     l4397:	
  7502  0DE4  3001               	movlw	1
  7503  0DE5  07DC               	addwf	getMain_LightsStatus@i,f
  7504  0DE6  1803               	skipnc
  7505  0DE7  0ADD               	incf	getMain_LightsStatus@i+1,f
  7506  0DE8  3000               	movlw	0
  7507  0DE9  07DD               	addwf	getMain_LightsStatus@i+1,f
  7508  0DEA  2DC6               	goto	l4399
  7509  0DEB                     l4401:	
  7510                           
  7511                           ;Main_B1.c: 398: }
  7512                           ;Main_B1.c: 399: }
  7513                           ;Main_B1.c: 400: return status;
  7514  0DEB  1283               	bcf	3,5	;RP0=0, select bank0
  7515  0DEC  1303               	bcf	3,6	;RP1=0, select bank0
  7516  0DED  085E               	movf	getMain_LightsStatus@status,w
  7517  0DEE  0008               	return
  7518  0DEF                     __end_of_getMain_LightsStatus:	
  7519                           
  7520                           	psect	text45
  7521  0B59                     __ptext45:	
  7522 ;; *************** function _Lights_Initialization *****************
  7523 ;; Defined at:
  7524 ;;		line 34 in file "../src/TriacRelay_B1.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;		None
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;		None
  7529 ;; Return value:  Size  Location     Type
  7530 ;;		None               void
  7531 ;; Registers used:
  7532 ;;		wreg, status,2, status,0, pclath, cstack
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7538 ;;      Params:         0       0       0       0
  7539 ;;      Locals:         0       0       0       0
  7540 ;;      Temps:          0       0       0       0
  7541 ;;      Totals:         0       0       0       0
  7542 ;;Total ram usage:        0 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    4
  7545 ;; This function calls:
  7546 ;;		_setLights_Initialization
  7547 ;; This function is called by:
  7548 ;;		_main
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           
  7553                           ;psect for function _Lights_Initialization
  7554  0B59                     _Lights_Initialization:	
  7555                           
  7556                           ;TriacRelay_B1.c: 36: setLights_Initialization(1);
  7557                           
  7558                           ;incstack = 0
  7559                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7560  0B59  3001               	movlw	1
  7561  0B5A  158A  2361         	fcall	_setLights_Initialization
  7562  0B5C  0008               	return
  7563  0B5D                     __end_of_Lights_Initialization:	
  7564                           
  7565                           	psect	text46
  7566  0B61                     __ptext46:	
  7567 ;; *************** function _setLights_Initialization *****************
  7568 ;; Defined at:
  7569 ;;		line 49 in file "../src/TriacRelay_B1.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;  lights          1    wreg     unsigned char 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;  lights          1    6[COMMON] unsigned char 
  7574 ;; Return value:  Size  Location     Type
  7575 ;;		None               void
  7576 ;; Registers used:
  7577 ;;		wreg, status,2, status,0, pclath, cstack
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7583 ;;      Params:         0       0       0       0
  7584 ;;      Locals:         1       0       0       0
  7585 ;;      Temps:          0       0       0       0
  7586 ;;      Totals:         1       0       0       0
  7587 ;;Total ram usage:        1 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    3
  7590 ;; This function calls:
  7591 ;;		_LightsPointSelect
  7592 ;; This function is called by:
  7593 ;;		_Lights_Initialization
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           
  7598                           ;psect for function _setLights_Initialization
  7599  0B61                     _setLights_Initialization:	
  7600                           
  7601                           ;incstack = 0
  7602                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  7603                           ;setLights_Initialization@lights stored from wreg
  7604  0B61  00F6               	movwf	setLights_Initialization@lights
  7605                           
  7606                           ;TriacRelay_B1.c: 50: LightsPointSelect(lights);
  7607  0B62  0876               	movf	setLights_Initialization@lights,w
  7608  0B63  158A  2396         	fcall	_LightsPointSelect
  7609  0B65  0008               	return
  7610  0B66                     __end_of_setLights_Initialization:	
  7611                           
  7612                           	psect	text47
  7613  0B46                     __ptext47:	
  7614 ;; *************** function _LED_Main *****************
  7615 ;; Defined at:
  7616 ;;		line 47 in file "../src/LED_B1.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;		None
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;		None
  7621 ;; Return value:  Size  Location     Type
  7622 ;;		None               void
  7623 ;; Registers used:
  7624 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7630 ;;      Params:         0       0       0       0
  7631 ;;      Locals:         0       0       0       0
  7632 ;;      Temps:          0       0       0       0
  7633 ;;      Totals:         0       0       0       0
  7634 ;;Total ram usage:        0 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    5
  7637 ;; This function calls:
  7638 ;;		_setPIRLED_Main
  7639 ;; This function is called by:
  7640 ;;		_main
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           
  7645                           ;psect for function _LED_Main
  7646  0B46                     _LED_Main:	
  7647                           
  7648                           ;LED_B1.c: 50: setPIRLED_Main();
  7649                           
  7650                           ;incstack = 0
  7651                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7652  0B46  118A  26DA         	fcall	_setPIRLED_Main
  7653  0B48  0008               	return
  7654  0B49                     __end_of_LED_Main:	
  7655                           
  7656                           	psect	text48
  7657  06DA                     __ptext48:	
  7658 ;; *************** function _setPIRLED_Main *****************
  7659 ;; Defined at:
  7660 ;;		line 253 in file "../src/LED_B1.c"
  7661 ;; Parameters:    Size  Location     Type
  7662 ;;		None
  7663 ;; Auto vars:     Size  Location     Type
  7664 ;;  count           1    2[BANK0 ] unsigned char 
  7665 ;; Return value:  Size  Location     Type
  7666 ;;		None               void
  7667 ;; Registers used:
  7668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7669 ;; Tracked objects:
  7670 ;;		On entry : 0/0
  7671 ;;		On exit  : 0/0
  7672 ;;		Unchanged: 0/0
  7673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7674 ;;      Params:         0       0       0       0
  7675 ;;      Locals:         0       1       0       0
  7676 ;;      Temps:          0       1       0       0
  7677 ;;      Totals:         0       2       0       0
  7678 ;;Total ram usage:        2 bytes
  7679 ;; Hardware stack levels used:    1
  7680 ;; Hardware stack levels required when called:    4
  7681 ;; This function calls:
  7682 ;;		_setLED
  7683 ;; This function is called by:
  7684 ;;		_LED_Main
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688                           
  7689                           ;psect for function _setPIRLED_Main
  7690  06DA                     _setPIRLED_Main:	
  7691                           
  7692                           ;LED_B1.c: 254: char count;
  7693                           ;LED_B1.c: 255: if (PIRLED.GO == 1) {
  7694                           
  7695                           ;incstack = 0
  7696                           ; Regs used in _setPIRLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7697  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  7698  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  7699  06DC  1C30               	btfss	_PIRLED,0
  7700  06DD  0008               	return
  7701                           
  7702                           ;LED_B1.c: 256: PIRLED.Time++;
  7703  06DE  3001               	movlw	1
  7704  06DF  07B2               	addwf	_PIRLED+2,f
  7705  06E0  1803               	skipnc
  7706  06E1  0AB3               	incf	_PIRLED+3,f
  7707  06E2  3000               	movlw	0
  7708  06E3  07B3               	addwf	_PIRLED+3,f
  7709                           
  7710                           ;LED_B1.c: 257: if (PIRLED.Time >= 500 / 10) {
  7711  06E4  3000               	movlw	0
  7712  06E5  0233               	subwf	_PIRLED+3,w
  7713  06E6  3032               	movlw	50
  7714  06E7  1903               	skipnz
  7715  06E8  0232               	subwf	_PIRLED+2,w
  7716  06E9  1C03               	skipc
  7717  06EA  0008               	return
  7718                           
  7719                           ;LED_B1.c: 258: PIRLED.Time = 0;
  7720  06EB  01B2               	clrf	_PIRLED+2
  7721  06EC  01B3               	clrf	_PIRLED+3
  7722                           
  7723                           ;LED_B1.c: 259: setLED(1, 0);
  7724  06ED  01F6               	clrf	setLED@command
  7725  06EE  3001               	movlw	1
  7726  06EF  118A  257F  118A   	fcall	_setLED
  7727                           
  7728                           ;LED_B1.c: 260: setLED(2, 0);
  7729  06F2  01F6               	clrf	setLED@command
  7730  06F3  3002               	movlw	2
  7731  06F4  118A  257F  118A   	fcall	_setLED
  7732                           
  7733                           ;LED_B1.c: 261: if (PIRLED.GO1 == 1) {
  7734  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  7735  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  7736  06F9  1CB0               	btfss	_PIRLED,1
  7737  06FA  2EFF               	goto	l4489
  7738                           
  7739                           ;LED_B1.c: 262: count = 4;
  7740  06FB  3004               	movlw	4
  7741  06FC  00DA               	movwf	??_setPIRLED_Main
  7742  06FD  085A               	movf	??_setPIRLED_Main,w
  7743  06FE  00DB               	movwf	setPIRLED_Main@count
  7744  06FF                     l4489:	
  7745                           
  7746                           ;LED_B1.c: 263: }
  7747                           ;LED_B1.c: 264: if (PIRLED.GO2 == 1) {
  7748  06FF  1D30               	btfss	_PIRLED,2
  7749  0700  2F05               	goto	l4493
  7750                           
  7751                           ;LED_B1.c: 265: count = 6;
  7752  0701  3006               	movlw	6
  7753  0702  00DA               	movwf	??_setPIRLED_Main
  7754  0703  085A               	movf	??_setPIRLED_Main,w
  7755  0704  00DB               	movwf	setPIRLED_Main@count
  7756  0705                     l4493:	
  7757                           
  7758                           ;LED_B1.c: 266: }
  7759                           ;LED_B1.c: 267: if (PIRLED.GO3 == 1) {
  7760  0705  1DB0               	btfss	_PIRLED,3
  7761  0706  2F0B               	goto	l4497
  7762                           
  7763                           ;LED_B1.c: 268: count = 8;
  7764  0707  3008               	movlw	8
  7765  0708  00DA               	movwf	??_setPIRLED_Main
  7766  0709  085A               	movf	??_setPIRLED_Main,w
  7767  070A  00DB               	movwf	setPIRLED_Main@count
  7768  070B                     l4497:	
  7769                           
  7770                           ;LED_B1.c: 269: }
  7771                           ;LED_B1.c: 270: PIRLED.Count++;
  7772  070B  3001               	movlw	1
  7773  070C  00DA               	movwf	??_setPIRLED_Main
  7774  070D  085A               	movf	??_setPIRLED_Main,w
  7775  070E  07B1               	addwf	_PIRLED+1,f
  7776                           
  7777                           ;LED_B1.c: 271: if (PIRLED.Count == 1 || PIRLED.Count == 2) {
  7778  070F  0831               	movf	_PIRLED+1,w
  7779  0710  3A01               	xorlw	1
  7780  0711  1903               	skipnz
  7781  0712  2F17               	goto	l4503
  7782  0713  0831               	movf	_PIRLED+1,w
  7783  0714  3A02               	xorlw	2
  7784  0715  1D03               	skipz
  7785  0716  2F2B               	goto	l4507
  7786  0717                     l4503:	
  7787                           
  7788                           ;LED_B1.c: 272: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7789  0717  1003               	clrc
  7790  0718  1E30               	btfss	_PIRLED,4
  7791  0719  1403               	setc
  7792  071A  1C03               	btfss	3,0
  7793  071B  2F20               	goto	u5400
  7794  071C  1283               	bcf	3,5	;RP0=0, select bank0
  7795  071D  1303               	bcf	3,6	;RP1=0, select bank0
  7796  071E  1630               	bsf	_PIRLED,4
  7797  071F  2F23               	goto	l4505
  7798  0720                     u5400:	
  7799  0720  1283               	bcf	3,5	;RP0=0, select bank0
  7800  0721  1303               	bcf	3,6	;RP1=0, select bank0
  7801  0722  1230               	bcf	_PIRLED,4
  7802  0723                     l4505:	
  7803                           
  7804                           ;LED_B1.c: 273: setLED(2, PIRLED.status);
  7805  0723  3000               	movlw	0
  7806  0724  1A30               	btfsc	_PIRLED,4
  7807  0725  3001               	movlw	1
  7808  0726  00F6               	movwf	setLED@command
  7809  0727  3002               	movlw	2
  7810  0728  118A  257F         	fcall	_setLED
  7811                           
  7812                           ;LED_B1.c: 274: } else {
  7813  072A  0008               	return
  7814  072B                     l4507:	
  7815                           
  7816                           ;LED_B1.c: 275: PIRLED.status = PIRLED.status == 1 ? 0 : 1;
  7817  072B  1003               	clrc
  7818  072C  1283               	bcf	3,5	;RP0=0, select bank0
  7819  072D  1303               	bcf	3,6	;RP1=0, select bank0
  7820  072E  1E30               	btfss	_PIRLED,4
  7821  072F  1403               	setc
  7822  0730  1C03               	btfss	3,0
  7823  0731  2F36               	goto	u5420
  7824  0732  1283               	bcf	3,5	;RP0=0, select bank0
  7825  0733  1303               	bcf	3,6	;RP1=0, select bank0
  7826  0734  1630               	bsf	_PIRLED,4
  7827  0735  2F39               	goto	l4509
  7828  0736                     u5420:	
  7829  0736  1283               	bcf	3,5	;RP0=0, select bank0
  7830  0737  1303               	bcf	3,6	;RP1=0, select bank0
  7831  0738  1230               	bcf	_PIRLED,4
  7832  0739                     l4509:	
  7833                           
  7834                           ;LED_B1.c: 276: setLED(1, PIRLED.status);
  7835  0739  3000               	movlw	0
  7836  073A  1A30               	btfsc	_PIRLED,4
  7837  073B  3001               	movlw	1
  7838  073C  00F6               	movwf	setLED@command
  7839  073D  3001               	movlw	1
  7840  073E  118A  257F  118A   	fcall	_setLED
  7841                           
  7842                           ;LED_B1.c: 277: if (PIRLED.Count == count) {
  7843  0741  1283               	bcf	3,5	;RP0=0, select bank0
  7844  0742  1303               	bcf	3,6	;RP1=0, select bank0
  7845  0743  0831               	movf	_PIRLED+1,w
  7846  0744  065B               	xorwf	setPIRLED_Main@count,w
  7847  0745  1D03               	skipz
  7848  0746  0008               	return
  7849                           
  7850                           ;LED_B1.c: 278: PIRLED.Count = 0;
  7851  0747  01B1               	clrf	_PIRLED+1
  7852  0748  0008               	return
  7853  0749                     __end_of_setPIRLED_Main:	
  7854                           
  7855                           	psect	text49
  7856  0BAB                     __ptext49:	
  7857 ;; *************** function _LED_Initialization *****************
  7858 ;; Defined at:
  7859 ;;		line 31 in file "../src/LED_B1.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;		None
  7862 ;; Auto vars:     Size  Location     Type
  7863 ;;		None
  7864 ;; Return value:  Size  Location     Type
  7865 ;;		None               void
  7866 ;; Registers used:
  7867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7868 ;; Tracked objects:
  7869 ;;		On entry : 0/0
  7870 ;;		On exit  : 0/0
  7871 ;;		Unchanged: 0/0
  7872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7873 ;;      Params:         0       0       0       0
  7874 ;;      Locals:         0       0       0       0
  7875 ;;      Temps:          0       0       0       0
  7876 ;;      Totals:         0       0       0       0
  7877 ;;Total ram usage:        0 bytes
  7878 ;; Hardware stack levels used:    1
  7879 ;; Hardware stack levels required when called:    5
  7880 ;; This function calls:
  7881 ;;		_setLED_Initialization
  7882 ;; This function is called by:
  7883 ;;		_main
  7884 ;; This function uses a non-reentrant model
  7885 ;;
  7886                           
  7887                           
  7888                           ;psect for function _LED_Initialization
  7889  0BAB                     _LED_Initialization:	
  7890                           
  7891                           ;LED_B1.c: 33: setLED_Initialization(1);
  7892                           
  7893                           ;incstack = 0
  7894                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7895  0BAB  3001               	movlw	1
  7896  0BAC  158A  2458  158A   	fcall	_setLED_Initialization
  7897                           
  7898                           ;LED_B1.c: 36: setLED_Initialization(2);
  7899  0BAF  3002               	movlw	2
  7900  0BB0  158A  2458  158A   	fcall	_setLED_Initialization
  7901                           
  7902                           ;LED_B1.c: 42: setLED_Initialization(99);
  7903  0BB3  3063               	movlw	99
  7904  0BB4  158A  2458         	fcall	_setLED_Initialization
  7905  0BB6  0008               	return
  7906  0BB7                     __end_of_LED_Initialization:	
  7907                           
  7908                           	psect	text50
  7909  0C58                     __ptext50:	
  7910 ;; *************** function _setLED_Initialization *****************
  7911 ;; Defined at:
  7912 ;;		line 69 in file "../src/LED_B1.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;  led             1    wreg     unsigned char 
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;  led             1    1[BANK0 ] unsigned char 
  7917 ;; Return value:  Size  Location     Type
  7918 ;;		None               void
  7919 ;; Registers used:
  7920 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7926 ;;      Params:         0       0       0       0
  7927 ;;      Locals:         0       1       0       0
  7928 ;;      Temps:          0       0       0       0
  7929 ;;      Totals:         0       1       0       0
  7930 ;;Total ram usage:        1 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    4
  7933 ;; This function calls:
  7934 ;;		_LedPointSelect
  7935 ;;		_setLED
  7936 ;; This function is called by:
  7937 ;;		_LED_Initialization
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           
  7942                           ;psect for function _setLED_Initialization
  7943  0C58                     _setLED_Initialization:	
  7944                           
  7945                           ;incstack = 0
  7946                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7947                           ;setLED_Initialization@led stored from wreg
  7948  0C58  1283               	bcf	3,5	;RP0=0, select bank0
  7949  0C59  1303               	bcf	3,6	;RP1=0, select bank0
  7950  0C5A  00DA               	movwf	setLED_Initialization@led
  7951                           
  7952                           ;LED_B1.c: 70: LedPointSelect(led);
  7953  0C5B  085A               	movf	setLED_Initialization@led,w
  7954  0C5C  158A  24BE  158A   	fcall	_LedPointSelect
  7955                           
  7956                           ;LED_B1.c: 71: LED->Enable = 1;
  7957  0C5F  0877               	movf	_LED,w
  7958  0C60  0084               	movwf	4
  7959  0C61  1383               	bcf	3,7	;select IRP bank0
  7960  0C62  1400               	bsf	0,0
  7961                           
  7962                           ;LED_B1.c: 72: setLED(led, 0);
  7963  0C63  01F6               	clrf	setLED@command
  7964  0C64  1283               	bcf	3,5	;RP0=0, select bank0
  7965  0C65  1303               	bcf	3,6	;RP1=0, select bank0
  7966  0C66  085A               	movf	setLED_Initialization@led,w
  7967  0C67  118A  257F         	fcall	_setLED
  7968  0C69  0008               	return
  7969  0C6A                     __end_of_setLED_Initialization:	
  7970                           
  7971                           	psect	text51
  7972  05F6                     __ptext51:	
  7973 ;; *************** function _Exception_Main *****************
  7974 ;; Defined at:
  7975 ;;		line 488 in file "../src/Main_B1.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;		None
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;  i               2    9[BANK0 ] int 
  7980 ;;  count           1    7[BANK0 ] unsigned char 
  7981 ;;  status          1    8[BANK0 ] unsigned char 
  7982 ;;  error           1   11[BANK0 ] unsigned char 
  7983 ;; Return value:  Size  Location     Type
  7984 ;;		None               void
  7985 ;; Registers used:
  7986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7992 ;;      Params:         0       0       0       0
  7993 ;;      Locals:         0       5       0       0
  7994 ;;      Temps:          0       1       0       0
  7995 ;;      Totals:         0       6       0       0
  7996 ;;Total ram usage:        6 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; Hardware stack levels required when called:    4
  7999 ;; This function calls:
  8000 ;;		_getAll_Lights_Line
  8001 ;;		_getLights_Status
  8002 ;;		_getMain_All_Error_Status
  8003 ;;		_setLED
  8004 ;;		_setLights_Trigger
  8005 ;; This function is called by:
  8006 ;;		_main
  8007 ;; This function uses a non-reentrant model
  8008 ;;
  8009                           
  8010                           
  8011                           ;psect for function _Exception_Main
  8012  05F6                     _Exception_Main:	
  8013                           
  8014                           ;Main_B1.c: 489: char error = getMain_All_Error_Status(0);
  8015                           
  8016                           ;incstack = 0
  8017                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8018  05F6  3000               	movlw	0
  8019  05F7  158A  265E  118A   	fcall	_getMain_All_Error_Status
  8020  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  8021  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  8022  05FC  00DF               	movwf	??_Exception_Main
  8023  05FD  085F               	movf	??_Exception_Main,w
  8024  05FE  00E4               	movwf	Exception_Main@error
  8025                           
  8026                           ;Main_B1.c: 491: if (myMain.Error_Run == 1) {
  8027  05FF  1DA3               	btfss	_myMain+3,3
  8028  0600  2E0D               	goto	l5181
  8029                           
  8030                           ;Main_B1.c: 492: if (error == 0) {
  8031  0601  08E4               	movf	Exception_Main@error,f
  8032  0602  1D03               	skipz
  8033  0603  0008               	return
  8034                           
  8035                           ;Main_B1.c: 493: myMain.Error_Run = 0;
  8036  0604  11A3               	bcf	_myMain+3,3
  8037                           
  8038                           ;Main_B1.c: 495: setLED(error, 110);
  8039  0605  306E               	movlw	110
  8040  0606  00DF               	movwf	??_Exception_Main
  8041  0607  085F               	movf	??_Exception_Main,w
  8042  0608  00F6               	movwf	setLED@command
  8043  0609  0864               	movf	Exception_Main@error,w
  8044  060A  118A  257F         	fcall	_setLED
  8045                           
  8046                           ;Main_B1.c: 498: }
  8047                           ;Main_B1.c: 499: } else {
  8048  060C  0008               	return
  8049  060D                     l5181:	
  8050                           
  8051                           ;Main_B1.c: 500: if (error != 0) {
  8052  060D  1283               	bcf	3,5	;RP0=0, select bank0
  8053  060E  1303               	bcf	3,6	;RP1=0, select bank0
  8054  060F  0864               	movf	Exception_Main@error,w
  8055  0610  1903               	btfsc	3,2
  8056  0611  0008               	return
  8057                           
  8058                           ;Main_B1.c: 501: myMain.Error_Run = 1;
  8059  0612  15A3               	bsf	_myMain+3,3
  8060                           
  8061                           ;Main_B1.c: 503: setLED(error, 111);
  8062  0613  306F               	movlw	111
  8063  0614  00DF               	movwf	??_Exception_Main
  8064  0615  085F               	movf	??_Exception_Main,w
  8065  0616  00F6               	movwf	setLED@command
  8066  0617  0864               	movf	Exception_Main@error,w
  8067  0618  118A  257F  118A   	fcall	_setLED
  8068                           
  8069                           ;Main_B1.c: 504: if (error == 3) {
  8070  061B  1283               	bcf	3,5	;RP0=0, select bank0
  8071  061C  1303               	bcf	3,6	;RP1=0, select bank0
  8072  061D  0864               	movf	Exception_Main@error,w
  8073  061E  3A03               	xorlw	3
  8074  061F  1D03               	skipz
  8075  0620  2E3C               	goto	l621
  8076                           
  8077                           ;Main_B1.c: 505: char status = getAll_Lights_Line();
  8078  0621  158A  23CF  118A   	fcall	_getAll_Lights_Line
  8079  0624  1283               	bcf	3,5	;RP0=0, select bank0
  8080  0625  1303               	bcf	3,6	;RP1=0, select bank0
  8081  0626  00DF               	movwf	??_Exception_Main
  8082  0627  085F               	movf	??_Exception_Main,w
  8083  0628  00E1               	movwf	Exception_Main@status
  8084                           
  8085                           ;Main_B1.c: 506: if (getLights_Status(status) == 1) {
  8086  0629  0861               	movf	Exception_Main@status,w
  8087  062A  158A  2425  118A   	fcall	_getLights_Status
  8088  062D  3A01               	xorlw	1
  8089  062E  1903               	btfsc	3,2
  8090  062F  2E33               	goto	l5191
  8091  0630  1283               	bcf	3,5	;RP0=0, select bank0
  8092  0631  1303               	bcf	3,6	;RP1=0, select bank0
  8093  0632  0008               	return
  8094  0633                     l5191:	
  8095                           
  8096                           ;Main_B1.c: 507: setLights_Trigger(status, 0);
  8097  0633  01F6               	clrf	setLights_Trigger@command
  8098  0634  1283               	bcf	3,5	;RP0=0, select bank0
  8099  0635  1303               	bcf	3,6	;RP1=0, select bank0
  8100  0636  0861               	movf	Exception_Main@status,w
  8101  0637  158A  24F2         	fcall	_setLights_Trigger
  8102  0639  1283               	bcf	3,5	;RP0=0, select bank0
  8103  063A  1303               	bcf	3,6	;RP1=0, select bank0
  8104  063B  0008               	return
  8105  063C                     l621:	
  8106                           ;Main_B1.c: 508: }
  8107                           ;Main_B1.c: 509: } else {
  8108                           
  8109                           
  8110                           ;Main_B1.c: 511: char count = 1;
  8111  063C  01E0               	clrf	Exception_Main@count
  8112  063D  0AE0               	incf	Exception_Main@count,f
  8113                           
  8114                           ;Main_B1.c: 519: for (int i = 0; i < count; i++) {
  8115  063E  01E2               	clrf	Exception_Main@i
  8116  063F  01E3               	clrf	Exception_Main@i+1
  8117  0640                     l5201:	
  8118  0640  0863               	movf	Exception_Main@i+1,w
  8119  0641  3A80               	xorlw	128
  8120  0642  00DF               	movwf	??_Exception_Main
  8121  0643  3080               	movlw	128
  8122  0644  025F               	subwf	??_Exception_Main,w
  8123  0645  1D03               	skipz
  8124  0646  2E49               	goto	u6875
  8125  0647  0860               	movf	Exception_Main@count,w
  8126  0648  0262               	subwf	Exception_Main@i,w
  8127  0649                     u6875:	
  8128  0649  1803               	btfsc	3,0
  8129  064A  2E66               	goto	u6870
  8130                           
  8131                           ;Main_B1.c: 520: if (getLights_Status(i + 1) == 1) {
  8132  064B  1283               	bcf	3,5	;RP0=0, select bank0
  8133  064C  1303               	bcf	3,6	;RP1=0, select bank0
  8134  064D  0862               	movf	Exception_Main@i,w
  8135  064E  3E01               	addlw	1
  8136  064F  158A  2425  118A   	fcall	_getLights_Status
  8137  0652  3A01               	xorlw	1
  8138  0653  1D03               	skipz
  8139  0654  2E5D               	goto	l5199
  8140                           
  8141                           ;Main_B1.c: 521: setLights_Trigger(i + 1, 0);
  8142  0655  01F6               	clrf	setLights_Trigger@command
  8143  0656  1283               	bcf	3,5	;RP0=0, select bank0
  8144  0657  1303               	bcf	3,6	;RP1=0, select bank0
  8145  0658  0862               	movf	Exception_Main@i,w
  8146  0659  3E01               	addlw	1
  8147  065A  158A  24F2  118A   	fcall	_setLights_Trigger
  8148  065D                     l5199:	
  8149  065D  3001               	movlw	1
  8150  065E  1283               	bcf	3,5	;RP0=0, select bank0
  8151  065F  1303               	bcf	3,6	;RP1=0, select bank0
  8152  0660  07E2               	addwf	Exception_Main@i,f
  8153  0661  1803               	skipnc
  8154  0662  0AE3               	incf	Exception_Main@i+1,f
  8155  0663  3000               	movlw	0
  8156  0664  07E3               	addwf	Exception_Main@i+1,f
  8157  0665  2E40               	goto	l5201
  8158  0666                     u6870:	
  8159  0666  1283               	bcf	3,5	;RP0=0, select bank0
  8160  0667  1303               	bcf	3,6	;RP1=0, select bank0
  8161  0668  0008               	return
  8162  0669                     __end_of_Exception_Main:	
  8163                           
  8164                           	psect	text52
  8165  0CF2                     __ptext52:	
  8166 ;; *************** function _setLights_Trigger *****************
  8167 ;; Defined at:
  8168 ;;		line 214 in file "../src/TriacRelay_B1.c"
  8169 ;; Parameters:    Size  Location     Type
  8170 ;;  lights          1    wreg     unsigned char 
  8171 ;;  command         1    6[COMMON] unsigned char 
  8172 ;; Auto vars:     Size  Location     Type
  8173 ;;  lights          1    1[BANK0 ] unsigned char 
  8174 ;; Return value:  Size  Location     Type
  8175 ;;		None               void
  8176 ;; Registers used:
  8177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8178 ;; Tracked objects:
  8179 ;;		On entry : 0/0
  8180 ;;		On exit  : 0/0
  8181 ;;		Unchanged: 0/0
  8182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8183 ;;      Params:         1       0       0       0
  8184 ;;      Locals:         0       1       0       0
  8185 ;;      Temps:          0       1       0       0
  8186 ;;      Totals:         1       2       0       0
  8187 ;;Total ram usage:        3 bytes
  8188 ;; Hardware stack levels used:    1
  8189 ;; Hardware stack levels required when called:    3
  8190 ;; This function calls:
  8191 ;;		_LightsPointSelect
  8192 ;; This function is called by:
  8193 ;;		_Exception_Main
  8194 ;;		_PIR_Main
  8195 ;;		_setMain_Exception
  8196 ;;		_setLights_ErrorClose
  8197 ;; This function uses a non-reentrant model
  8198 ;;
  8199                           
  8200                           
  8201                           ;psect for function _setLights_Trigger
  8202  0CF2                     _setLights_Trigger:	
  8203                           
  8204                           ;incstack = 0
  8205                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8206                           ;setLights_Trigger@lights stored from wreg
  8207  0CF2  1283               	bcf	3,5	;RP0=0, select bank0
  8208  0CF3  1303               	bcf	3,6	;RP1=0, select bank0
  8209  0CF4  00DA               	movwf	setLights_Trigger@lights
  8210                           
  8211                           ;TriacRelay_B1.c: 215: LightsPointSelect(lights);
  8212  0CF5  085A               	movf	setLights_Trigger@lights,w
  8213  0CF6  158A  2396         	fcall	_LightsPointSelect
  8214                           
  8215                           ;TriacRelay_B1.c: 216: Lights->Trigger = 1;
  8216  0CF8  0878               	movf	_Lights,w
  8217  0CF9  0084               	movwf	4
  8218  0CFA  1383               	bcf	3,7	;select IRP bank0
  8219  0CFB  1580               	bsf	0,3
  8220                           
  8221                           ;TriacRelay_B1.c: 217: Lights->Switch = command == 1 ? 1 : 0;
  8222  0CFC  0876               	movf	setLights_Trigger@command,w
  8223  0CFD  3A01               	xorlw	1
  8224  0CFE  3000               	movlw	0
  8225  0CFF  1903               	skipnz
  8226  0D00  3001               	movlw	1
  8227  0D01  1283               	bcf	3,5	;RP0=0, select bank0
  8228  0D02  1303               	bcf	3,6	;RP1=0, select bank0
  8229  0D03  00D9               	movwf	??_setLights_Trigger
  8230  0D04  0878               	movf	_Lights,w
  8231  0D05  0084               	movwf	4
  8232  0D06  0ED9               	swapf	??_setLights_Trigger,f
  8233  0D07  0800               	movf	0,w
  8234  0D08  0659               	xorwf	??_setLights_Trigger,w
  8235  0D09  39EF               	andlw	-17
  8236  0D0A  0659               	xorwf	??_setLights_Trigger,w
  8237  0D0B  0080               	movwf	0
  8238  0D0C  0008               	return
  8239  0D0D                     __end_of_setLights_Trigger:	
  8240                           
  8241                           	psect	text53
  8242  057F                     __ptext53:	
  8243 ;; *************** function _setLED *****************
  8244 ;; Defined at:
  8245 ;;		line 76 in file "../src/LED_B1.c"
  8246 ;; Parameters:    Size  Location     Type
  8247 ;;  led             1    wreg     unsigned char 
  8248 ;;  command         1    6[COMMON] unsigned char 
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;  led             1    0[BANK0 ] unsigned char 
  8251 ;; Return value:  Size  Location     Type
  8252 ;;		None               void
  8253 ;; Registers used:
  8254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8260 ;;      Params:         1       0       0       0
  8261 ;;      Locals:         0       1       0       0
  8262 ;;      Temps:          0       0       0       0
  8263 ;;      Totals:         1       1       0       0
  8264 ;;Total ram usage:        2 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    3
  8267 ;; This function calls:
  8268 ;;		_LedPointSelect
  8269 ;; This function is called by:
  8270 ;;		_setLED_Initialization
  8271 ;;		_setPIRLED_Main
  8272 ;;		_Exception_Main
  8273 ;;		_PIR_Main
  8274 ;;		_setMain_Exception
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           
  8279                           ;psect for function _setLED
  8280  057F                     _setLED:	
  8281                           
  8282                           ;incstack = 0
  8283                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8284                           ;setLED@led stored from wreg
  8285  057F  1283               	bcf	3,5	;RP0=0, select bank0
  8286  0580  1303               	bcf	3,6	;RP1=0, select bank0
  8287  0581  00D9               	movwf	setLED@led
  8288                           
  8289                           ;LED_B1.c: 77: LedPointSelect(led);
  8290  0582  0859               	movf	setLED@led,w
  8291  0583  158A  24BE  118A   	fcall	_LedPointSelect
  8292                           
  8293                           ;LED_B1.c: 78: if (command == 0) {
  8294  0586  08F6               	movf	setLED@command,f
  8295  0587  1D03               	skipz
  8296  0588  2D97               	goto	l4323
  8297                           
  8298                           ;LED_B1.c: 80: if (led == 1) {
  8299  0589  1283               	bcf	3,5	;RP0=0, select bank0
  8300  058A  1303               	bcf	3,6	;RP1=0, select bank0
  8301  058B  0859               	movf	setLED@led,w
  8302  058C  3A01               	xorlw	1
  8303  058D  1903               	btfsc	3,2
  8304                           
  8305                           ;LED_B1.c: 84: RB4 = 1;
  8306  058E  1606               	bsf	6,4	;volatile
  8307                           
  8308                           ;LED_B1.c: 86: }
  8309                           ;LED_B1.c: 89: if (led == 2) {
  8310  058F  0859               	movf	setLED@led,w
  8311  0590  3A02               	xorlw	2
  8312  0591  1903               	btfsc	3,2
  8313                           
  8314                           ;LED_B1.c: 93: RB5 = 1;
  8315  0592  1686               	bsf	6,5	;volatile
  8316                           
  8317                           ;LED_B1.c: 95: }
  8318                           ;LED_B1.c: 107: if (led == 99) {
  8319  0593  0859               	movf	setLED@led,w
  8320  0594  3A63               	xorlw	99
  8321  0595  1903               	btfsc	3,2
  8322                           
  8323                           ;LED_B1.c: 111: RB3 = 1;
  8324  0596  1586               	bsf	6,3	;volatile
  8325  0597                     l4323:	
  8326                           
  8327                           ;LED_B1.c: 113: }
  8328                           ;LED_B1.c: 115: }
  8329                           ;LED_B1.c: 116: if (command == 1) {
  8330  0597  0876               	movf	setLED@command,w
  8331  0598  3A01               	xorlw	1
  8332  0599  1D03               	skipz
  8333  059A  2DA9               	goto	l4337
  8334                           
  8335                           ;LED_B1.c: 118: if (led == 1) {
  8336  059B  1283               	bcf	3,5	;RP0=0, select bank0
  8337  059C  1303               	bcf	3,6	;RP1=0, select bank0
  8338  059D  0859               	movf	setLED@led,w
  8339  059E  3A01               	xorlw	1
  8340  059F  1903               	btfsc	3,2
  8341                           
  8342                           ;LED_B1.c: 122: RB4 = 0;
  8343  05A0  1206               	bcf	6,4	;volatile
  8344                           
  8345                           ;LED_B1.c: 124: }
  8346                           ;LED_B1.c: 127: if (led == 2) {
  8347  05A1  0859               	movf	setLED@led,w
  8348  05A2  3A02               	xorlw	2
  8349  05A3  1903               	btfsc	3,2
  8350                           
  8351                           ;LED_B1.c: 131: RB5 = 0;
  8352  05A4  1286               	bcf	6,5	;volatile
  8353                           
  8354                           ;LED_B1.c: 133: }
  8355                           ;LED_B1.c: 145: if (led == 99) {
  8356  05A5  0859               	movf	setLED@led,w
  8357  05A6  3A63               	xorlw	99
  8358  05A7  1903               	btfsc	3,2
  8359                           
  8360                           ;LED_B1.c: 149: RB3 = 0;
  8361  05A8  1186               	bcf	6,3	;volatile
  8362  05A9                     l4337:	
  8363                           
  8364                           ;LED_B1.c: 151: }
  8365                           ;LED_B1.c: 153: }
  8366                           ;LED_B1.c: 154: if (command == 10) {
  8367  05A9  0876               	movf	setLED@command,w
  8368  05AA  3A0A               	xorlw	10
  8369  05AB  1D03               	skipz
  8370  05AC  2DC6               	goto	l4355
  8371                           
  8372                           ;LED_B1.c: 155: LED->GO = 0;
  8373  05AD  0877               	movf	_LED,w
  8374  05AE  0084               	movwf	4
  8375  05AF  1383               	bcf	3,7	;select IRP bank0
  8376  05B0  1080               	bcf	0,1
  8377                           
  8378                           ;LED_B1.c: 156: LED->Time = 0;
  8379  05B1  0A77               	incf	_LED,w
  8380  05B2  0084               	movwf	4
  8381  05B3  0180               	clrf	0
  8382  05B4  0A84               	incf	4,f
  8383  05B5  0180               	clrf	0
  8384                           
  8385                           ;LED_B1.c: 158: if (led == 1) {
  8386  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  8387  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  8388  05B8  0859               	movf	setLED@led,w
  8389  05B9  3A01               	xorlw	1
  8390  05BA  1D03               	skipz
  8391  05BB  2DBE               	goto	l4347
  8392                           
  8393                           ;LED_B1.c: 162: RB4 = 1;
  8394  05BC  1606               	bsf	6,4	;volatile
  8395                           
  8396                           ;LED_B1.c: 164: }
  8397  05BD  2DC2               	goto	l4351
  8398  05BE                     l4347:	
  8399                           
  8400                           ;LED_B1.c: 167: else if (led == 2) {
  8401  05BE  0859               	movf	setLED@led,w
  8402  05BF  3A02               	xorlw	2
  8403  05C0  1903               	btfsc	3,2
  8404                           
  8405                           ;LED_B1.c: 171: RB5 = 1;
  8406  05C1  1686               	bsf	6,5	;volatile
  8407  05C2                     l4351:	
  8408                           
  8409                           ;LED_B1.c: 173: }
  8410                           ;LED_B1.c: 185: if (led == 99) {
  8411  05C2  0859               	movf	setLED@led,w
  8412  05C3  3A63               	xorlw	99
  8413  05C4  1903               	btfsc	3,2
  8414                           
  8415                           ;LED_B1.c: 189: RB3 = 1;
  8416  05C5  1586               	bsf	6,3	;volatile
  8417  05C6                     l4355:	
  8418                           
  8419                           ;LED_B1.c: 191: }
  8420                           ;LED_B1.c: 193: }
  8421                           ;LED_B1.c: 194: if (command == 11) {
  8422  05C6  0876               	movf	setLED@command,w
  8423  05C7  3A0B               	xorlw	11
  8424  05C8  1D03               	skipz
  8425  05C9  2DCE               	goto	l4359
  8426                           
  8427                           ;LED_B1.c: 195: LED->GO = 1;
  8428  05CA  0877               	movf	_LED,w
  8429  05CB  0084               	movwf	4
  8430  05CC  1383               	bcf	3,7	;select IRP bank0
  8431  05CD  1480               	bsf	0,1
  8432  05CE                     l4359:	
  8433                           
  8434                           ;LED_B1.c: 196: }
  8435                           ;LED_B1.c: 198: if (command == 111) {
  8436  05CE  0876               	movf	setLED@command,w
  8437  05CF  3A6F               	xorlw	111
  8438  05D0  1D03               	skipz
  8439  05D1  2DEE               	goto	l4385
  8440                           
  8441                           ;LED_B1.c: 199: PIRLED.Count = 0;
  8442  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  8443  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  8444  05D4  01B1               	clrf	_PIRLED+1
  8445                           
  8446                           ;LED_B1.c: 200: PIRLED.Time = 0;
  8447  05D5  01B2               	clrf	_PIRLED+2
  8448  05D6  01B3               	clrf	_PIRLED+3
  8449                           
  8450                           ;LED_B1.c: 201: PIRLED.status = 0;
  8451  05D7  1230               	bcf	_PIRLED,4
  8452                           
  8453                           ;LED_B1.c: 202: PIRLED.GO = 1;
  8454  05D8  1430               	bsf	_PIRLED,0
  8455                           
  8456                           ;LED_B1.c: 203: PIRLED.GO1 = 0;
  8457  05D9  10B0               	bcf	_PIRLED,1
  8458                           
  8459                           ;LED_B1.c: 204: PIRLED.GO2 = 0;
  8460  05DA  1130               	bcf	_PIRLED,2
  8461                           
  8462                           ;LED_B1.c: 205: PIRLED.GO3 = 0;
  8463  05DB  11B0               	bcf	_PIRLED,3
  8464                           
  8465                           ;LED_B1.c: 206: if (led == 1) {
  8466  05DC  0859               	movf	setLED@led,w
  8467  05DD  3A01               	xorlw	1
  8468  05DE  1D03               	skipz
  8469  05DF  2DE2               	goto	l4377
  8470                           
  8471                           ;LED_B1.c: 207: PIRLED.GO1 = 1;
  8472  05E0  14B0               	bsf	_PIRLED,1
  8473                           
  8474                           ;LED_B1.c: 208: } else if (led == 2) {
  8475  05E1  0008               	return
  8476  05E2                     l4377:	
  8477  05E2  0859               	movf	setLED@led,w
  8478  05E3  3A02               	xorlw	2
  8479  05E4  1D03               	skipz
  8480  05E5  2DE8               	goto	l4381
  8481                           
  8482                           ;LED_B1.c: 209: PIRLED.GO2 = 1;
  8483  05E6  1530               	bsf	_PIRLED,2
  8484                           
  8485                           ;LED_B1.c: 210: } else if (led == 3) {
  8486  05E7  0008               	return
  8487  05E8                     l4381:	
  8488  05E8  0859               	movf	setLED@led,w
  8489  05E9  3A03               	xorlw	3
  8490  05EA  1D03               	skipz
  8491  05EB  0008               	return
  8492                           
  8493                           ;LED_B1.c: 211: PIRLED.GO3 = 1;
  8494  05EC  15B0               	bsf	_PIRLED,3
  8495                           
  8496                           ;LED_B1.c: 212: }
  8497                           ;LED_B1.c: 213: } else if (command == 110) {
  8498  05ED  0008               	return
  8499  05EE                     l4385:	
  8500  05EE  0876               	movf	setLED@command,w
  8501  05EF  3A6E               	xorlw	110
  8502  05F0  1D03               	skipz
  8503  05F1  0008               	return
  8504                           
  8505                           ;LED_B1.c: 214: PIRLED.GO = 0;
  8506  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  8507  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  8508  05F4  1030               	bcf	_PIRLED,0
  8509  05F5  0008               	return
  8510  05F6                     __end_of_setLED:	
  8511                           
  8512                           	psect	text54
  8513  0CBE                     __ptext54:	
  8514 ;; *************** function _LedPointSelect *****************
  8515 ;; Defined at:
  8516 ;;		line 7 in file "../src/LED_B1.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  led             1    wreg     unsigned char 
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;  led             1    5[COMMON] unsigned char 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;		None               void
  8523 ;; Registers used:
  8524 ;;		wreg
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8530 ;;      Params:         0       0       0       0
  8531 ;;      Locals:         1       0       0       0
  8532 ;;      Temps:          1       0       0       0
  8533 ;;      Totals:         2       0       0       0
  8534 ;;Total ram usage:        2 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    2
  8537 ;; This function calls:
  8538 ;;		Nothing
  8539 ;; This function is called by:
  8540 ;;		_setLED_Initialization
  8541 ;;		_setLED
  8542 ;;		_setLED_Main
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           
  8547                           ;psect for function _LedPointSelect
  8548  0CBE                     _LedPointSelect:	
  8549                           
  8550                           ;incstack = 0
  8551                           ; Regs used in _LedPointSelect: [wreg]
  8552                           ;LedPointSelect@led stored from wreg
  8553  0CBE  00F5               	movwf	LedPointSelect@led
  8554                           
  8555                           ;LED_B1.c: 9: if (led == 1) {
  8556  0CBF  0875               	movf	LedPointSelect@led,w
  8557  0CC0  3A01               	xorlw	1
  8558  0CC1  1D03               	skipz
  8559  0CC2  2CC7               	goto	l244
  8560                           
  8561                           ;LED_B1.c: 10: LED = &VarLED1;
  8562  0CC3  3051               	movlw	_VarLED1& (0+255)
  8563  0CC4  00F4               	movwf	??_LedPointSelect
  8564  0CC5  0874               	movf	??_LedPointSelect,w
  8565  0CC6  00F7               	movwf	_LED
  8566  0CC7                     l244:	
  8567                           
  8568                           ;LED_B1.c: 11: }
  8569                           ;LED_B1.c: 14: if (led == 2) {
  8570  0CC7  0875               	movf	LedPointSelect@led,w
  8571  0CC8  3A02               	xorlw	2
  8572  0CC9  1D03               	skipz
  8573  0CCA  2CCF               	goto	l245
  8574                           
  8575                           ;LED_B1.c: 15: LED = &VarLED2;
  8576  0CCB  3055               	movlw	_VarLED2& (0+255)
  8577  0CCC  00F4               	movwf	??_LedPointSelect
  8578  0CCD  0874               	movf	??_LedPointSelect,w
  8579  0CCE  00F7               	movwf	_LED
  8580  0CCF                     l245:	
  8581                           
  8582                           ;LED_B1.c: 16: }
  8583                           ;LED_B1.c: 24: if (led == 99) {
  8584  0CCF  0875               	movf	LedPointSelect@led,w
  8585  0CD0  3A63               	xorlw	99
  8586  0CD1  1D03               	skipz
  8587  0CD2  0008               	return
  8588                           
  8589                           ;LED_B1.c: 25: LED = &VarErrLED;
  8590  0CD3  304D               	movlw	_VarErrLED& (0+255)
  8591  0CD4  00F4               	movwf	??_LedPointSelect
  8592  0CD5  0874               	movf	??_LedPointSelect,w
  8593  0CD6  00F7               	movwf	_LED
  8594  0CD7  0008               	return
  8595  0CD8                     __end_of_LedPointSelect:	
  8596                           
  8597                           	psect	text55
  8598  0E5E                     __ptext55:	
  8599 ;; *************** function _getMain_All_Error_Status *****************
  8600 ;; Defined at:
  8601 ;;		line 404 in file "../src/Main_B1.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;  command         1    wreg     unsigned char 
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;  command         1    4[BANK0 ] unsigned char 
  8606 ;;  status          1    5[BANK0 ] unsigned char 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;                  1    wreg      unsigned char 
  8609 ;; Registers used:
  8610 ;;		wreg, status,2, status,0
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8616 ;;      Params:         0       0       0       0
  8617 ;;      Locals:         0       6       0       0
  8618 ;;      Temps:          1       0       0       0
  8619 ;;      Totals:         1       6       0       0
  8620 ;;Total ram usage:        7 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    2
  8623 ;; This function calls:
  8624 ;;		Nothing
  8625 ;; This function is called by:
  8626 ;;		_Exception_Main
  8627 ;;		_Load_Main
  8628 ;;		_setTemp_Main
  8629 ;;		_PIR_Main
  8630 ;;		_setSYSC_Main
  8631 ;;		_Lights_Main
  8632 ;;		_setLights
  8633 ;; This function uses a non-reentrant model
  8634 ;;
  8635                           
  8636                           
  8637                           ;psect for function _getMain_All_Error_Status
  8638  0E5E                     _getMain_All_Error_Status:	
  8639                           
  8640                           ;incstack = 0
  8641                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
  8642                           ;getMain_All_Error_Status@command stored from wreg
  8643  0E5E  1283               	bcf	3,5	;RP0=0, select bank0
  8644  0E5F  1303               	bcf	3,6	;RP1=0, select bank0
  8645  0E60  00DD               	movwf	getMain_All_Error_Status@command
  8646                           
  8647                           ;Main_B1.c: 405: char status = 0;
  8648  0E61  01DE               	clrf	getMain_All_Error_Status@status
  8649                           
  8650                           ;Main_B1.c: 408: if (status == 0 && command != 1) {
  8651  0E62  08DE               	movf	getMain_All_Error_Status@status,f
  8652  0E63  1D03               	skipz
  8653  0E64  2E6D               	goto	l4279
  8654  0E65  085D               	movf	getMain_All_Error_Status@command,w
  8655  0E66  3A01               	xorlw	1
  8656  0E67  1903               	skipnz
  8657  0E68  2E6D               	goto	l4279
  8658                           
  8659                           ;Main_B1.c: 409: status = SYSC.ERROR == 1 ? 1 : 0;
  8660  0E69  3000               	movlw	0
  8661  0E6A  18A6               	btfsc	_SYSC,1
  8662  0E6B  3001               	movlw	1
  8663  0E6C  00DE               	movwf	getMain_All_Error_Status@status
  8664  0E6D                     l4279:	
  8665                           
  8666                           ;Main_B1.c: 410: }
  8667                           ;Main_B1.c: 416: if (status == 0 && command != 2) {
  8668  0E6D  08DE               	movf	getMain_All_Error_Status@status,f
  8669  0E6E  1D03               	skipz
  8670  0E6F  2E81               	goto	l4289
  8671  0E70  085D               	movf	getMain_All_Error_Status@command,w
  8672  0E71  3A02               	xorlw	2
  8673  0E72  1903               	skipnz
  8674  0E73  2E81               	goto	l4289
  8675                           
  8676                           ;Main_B1.c: 417: status = Temp.ERROR == 1 ? 2 : 0;
  8677  0E74  18BA               	btfsc	_Temp,1
  8678  0E75  2E79               	goto	l4287
  8679  0E76  01D9               	clrf	_getMain_All_Error_Status$2247
  8680  0E77  01DA               	clrf	_getMain_All_Error_Status$2247+1
  8681  0E78  2E7D               	goto	l602
  8682  0E79                     l4287:	
  8683  0E79  3002               	movlw	2
  8684  0E7A  00D9               	movwf	_getMain_All_Error_Status$2247
  8685  0E7B  3000               	movlw	0
  8686  0E7C  00DA               	movwf	_getMain_All_Error_Status$2247+1
  8687  0E7D                     l602:	
  8688  0E7D  0859               	movf	_getMain_All_Error_Status$2247,w
  8689  0E7E  00F4               	movwf	??_getMain_All_Error_Status
  8690  0E7F  0874               	movf	??_getMain_All_Error_Status,w
  8691  0E80  00DE               	movwf	getMain_All_Error_Status@status
  8692  0E81                     l4289:	
  8693                           
  8694                           ;Main_B1.c: 418: }
  8695                           ;Main_B1.c: 423: if (status == 0 && command != 3) {
  8696  0E81  08DE               	movf	getMain_All_Error_Status@status,f
  8697  0E82  1D03               	skipz
  8698  0E83  2E9A               	goto	l603
  8699  0E84  085D               	movf	getMain_All_Error_Status@command,w
  8700  0E85  3A03               	xorlw	3
  8701  0E86  1903               	skipnz
  8702  0E87  2E9A               	goto	l603
  8703                           
  8704                           ;Main_B1.c: 424: status = Load.ERROR == 1 ? 3 : 0;
  8705  0E88  1683               	bsf	3,5	;RP0=1, select bank1
  8706  0E89  1303               	bcf	3,6	;RP1=0, select bank1
  8707  0E8A  1ACF               	btfsc	_Load^(0+128),5
  8708  0E8B  2E91               	goto	l4297
  8709  0E8C  1283               	bcf	3,5	;RP0=0, select bank0
  8710  0E8D  1303               	bcf	3,6	;RP1=0, select bank0
  8711  0E8E  01DB               	clrf	_getMain_All_Error_Status$2248
  8712  0E8F  01DC               	clrf	_getMain_All_Error_Status$2248+1
  8713  0E90  2E96               	goto	l607
  8714  0E91                     l4297:	
  8715  0E91  3003               	movlw	3
  8716  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  8717  0E93  00DB               	movwf	_getMain_All_Error_Status$2248
  8718  0E94  3000               	movlw	0
  8719  0E95  00DC               	movwf	_getMain_All_Error_Status$2248+1
  8720  0E96                     l607:	
  8721  0E96  085B               	movf	_getMain_All_Error_Status$2248,w
  8722  0E97  00F4               	movwf	??_getMain_All_Error_Status
  8723  0E98  0874               	movf	??_getMain_All_Error_Status,w
  8724  0E99  00DE               	movwf	getMain_All_Error_Status@status
  8725  0E9A                     l603:	
  8726                           
  8727                           ;Main_B1.c: 425: }
  8728                           ;Main_B1.c: 441: return status;
  8729  0E9A  085E               	movf	getMain_All_Error_Status@status,w
  8730  0E9B  0008               	return
  8731  0E9C                     __end_of_getMain_All_Error_Status:	
  8732                           
  8733                           	psect	text56
  8734  0C25                     __ptext56:	
  8735 ;; *************** function _getLights_Status *****************
  8736 ;; Defined at:
  8737 ;;		line 207 in file "../src/TriacRelay_B1.c"
  8738 ;; Parameters:    Size  Location     Type
  8739 ;;  lights          1    wreg     unsigned char 
  8740 ;; Auto vars:     Size  Location     Type
  8741 ;;  lights          1    0[BANK0 ] unsigned char 
  8742 ;;  status          1    1[BANK0 ] unsigned char 
  8743 ;; Return value:  Size  Location     Type
  8744 ;;                  1    wreg      unsigned char 
  8745 ;; Registers used:
  8746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8747 ;; Tracked objects:
  8748 ;;		On entry : 0/0
  8749 ;;		On exit  : 0/0
  8750 ;;		Unchanged: 0/0
  8751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8752 ;;      Params:         0       0       0       0
  8753 ;;      Locals:         0       2       0       0
  8754 ;;      Temps:          0       0       0       0
  8755 ;;      Totals:         0       2       0       0
  8756 ;;Total ram usage:        2 bytes
  8757 ;; Hardware stack levels used:    1
  8758 ;; Hardware stack levels required when called:    3
  8759 ;; This function calls:
  8760 ;;		_LightsPointSelect
  8761 ;; This function is called by:
  8762 ;;		_getMain_LightsStatus
  8763 ;;		_Exception_Main
  8764 ;;		_PIR_Main
  8765 ;;		_setMain_Exception
  8766 ;;		_setLights_ErrorClose
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           
  8771                           ;psect for function _getLights_Status
  8772  0C25                     _getLights_Status:	
  8773                           
  8774                           ;incstack = 0
  8775                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8776                           ;getLights_Status@lights stored from wreg
  8777  0C25  1283               	bcf	3,5	;RP0=0, select bank0
  8778  0C26  1303               	bcf	3,6	;RP1=0, select bank0
  8779  0C27  00D9               	movwf	getLights_Status@lights
  8780                           
  8781                           ;TriacRelay_B1.c: 208: LightsPointSelect(lights);
  8782  0C28  0859               	movf	getLights_Status@lights,w
  8783  0C29  158A  2396         	fcall	_LightsPointSelect
  8784                           
  8785                           ;TriacRelay_B1.c: 209: char status = Lights->Status == 1 ? 1 : 0;
  8786  0C2B  0878               	movf	_Lights,w
  8787  0C2C  0084               	movwf	4
  8788  0C2D  3000               	movlw	0
  8789  0C2E  1383               	bcf	3,7	;select IRP bank0
  8790  0C2F  1900               	btfsc	0,2
  8791  0C30  3001               	movlw	1
  8792  0C31  1283               	bcf	3,5	;RP0=0, select bank0
  8793  0C32  1303               	bcf	3,6	;RP1=0, select bank0
  8794  0C33  00DA               	movwf	getLights_Status@status
  8795                           
  8796                           ;TriacRelay_B1.c: 210: return status;
  8797  0C34  085A               	movf	getLights_Status@status,w
  8798  0C35  0008               	return
  8799  0C36                     __end_of_getLights_Status:	
  8800                           
  8801                           	psect	text57
  8802  0BCF                     __ptext57:	
  8803 ;; *************** function _getAll_Lights_Line *****************
  8804 ;; Defined at:
  8805 ;;		line 236 in file "../src/TriacRelay_B1.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;  line            1    6[COMMON] unsigned char 
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      unsigned char 
  8812 ;; Registers used:
  8813 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8819 ;;      Params:         0       0       0       0
  8820 ;;      Locals:         1       0       0       0
  8821 ;;      Temps:          0       0       0       0
  8822 ;;      Totals:         1       0       0       0
  8823 ;;Total ram usage:        1 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    3
  8826 ;; This function calls:
  8827 ;;		_LightsPointSelect
  8828 ;; This function is called by:
  8829 ;;		_Exception_Main
  8830 ;;		_setMain_Exception
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           
  8835                           ;psect for function _getAll_Lights_Line
  8836  0BCF                     _getAll_Lights_Line:	
  8837                           
  8838                           ;TriacRelay_B1.c: 237: char line = 0;
  8839                           
  8840                           ;incstack = 0
  8841                           ; Regs used in _getAll_Lights_Line: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8842  0BCF  01F6               	clrf	getAll_Lights_Line@line
  8843                           
  8844                           ;TriacRelay_B1.c: 239: LightsPointSelect(1);
  8845  0BD0  3001               	movlw	1
  8846  0BD1  158A  2396         	fcall	_LightsPointSelect
  8847                           
  8848                           ;TriacRelay_B1.c: 240: line = Lights->Line == 1 ? 1 : 0;
  8849  0BD3  0A78               	incf	_Lights,w
  8850  0BD4  0084               	movwf	4
  8851  0BD5  3000               	movlw	0
  8852  0BD6  1383               	bcf	3,7	;select IRP bank0
  8853  0BD7  1800               	btfsc	0,0
  8854  0BD8  3001               	movlw	1
  8855  0BD9  00F6               	movwf	getAll_Lights_Line@line
  8856                           
  8857                           ;TriacRelay_B1.c: 250: return line;
  8858  0BDA  0876               	movf	getAll_Lights_Line@line,w
  8859  0BDB  0008               	return
  8860  0BDC                     __end_of_getAll_Lights_Line:	
  8861                           
  8862                           	psect	text58
  8863  0B96                     __ptext58:	
  8864 ;; *************** function _LightsPointSelect *****************
  8865 ;; Defined at:
  8866 ;;		line 10 in file "../src/TriacRelay_B1.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;  lights          1    wreg     unsigned char 
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;  lights          1    5[COMMON] unsigned char 
  8871 ;; Return value:  Size  Location     Type
  8872 ;;		None               void
  8873 ;; Registers used:
  8874 ;;		wreg
  8875 ;; Tracked objects:
  8876 ;;		On entry : 0/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8880 ;;      Params:         0       0       0       0
  8881 ;;      Locals:         1       0       0       0
  8882 ;;      Temps:          1       0       0       0
  8883 ;;      Totals:         2       0       0       0
  8884 ;;Total ram usage:        2 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; Hardware stack levels required when called:    2
  8887 ;; This function calls:
  8888 ;;		Nothing
  8889 ;; This function is called by:
  8890 ;;		_setLights_Initialization
  8891 ;;		_setLights_Main
  8892 ;;		_setLights
  8893 ;;		_Lights_Control
  8894 ;;		_getLights_Status
  8895 ;;		_setLights_Trigger
  8896 ;;		_setLights_Line
  8897 ;;		_getAll_Lights_Line
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           
  8902                           ;psect for function _LightsPointSelect
  8903  0B96                     _LightsPointSelect:	
  8904                           
  8905                           ;incstack = 0
  8906                           ; Regs used in _LightsPointSelect: [wreg]
  8907                           ;LightsPointSelect@lights stored from wreg
  8908  0B96  00F5               	movwf	LightsPointSelect@lights
  8909                           
  8910                           ;TriacRelay_B1.c: 14: if (lights == 1) {
  8911  0B97  0875               	movf	LightsPointSelect@lights,w
  8912  0B98  3A01               	xorlw	1
  8913  0B99  1D03               	skipz
  8914  0B9A  0008               	return
  8915                           
  8916                           ;TriacRelay_B1.c: 15: Lights = &Lights1;
  8917  0B9B  3046               	movlw	_Lights1& (0+255)
  8918  0B9C  00F4               	movwf	??_LightsPointSelect
  8919  0B9D  0874               	movf	??_LightsPointSelect,w
  8920  0B9E  00F8               	movwf	_Lights
  8921  0B9F  0008               	return
  8922  0BA0                     __end_of_LightsPointSelect:	
  8923                           
  8924                           	psect	text59
  8925  0BDC                     __ptext59:	
  8926 ;; *************** function _DetectSYSC_Signal *****************
  8927 ;; Defined at:
  8928 ;;		line 51 in file "../src/SYSC_B1.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;		None
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;		None
  8933 ;; Return value:  Size  Location     Type
  8934 ;;		None               void
  8935 ;; Registers used:
  8936 ;;		status,2
  8937 ;; Tracked objects:
  8938 ;;		On entry : 0/0
  8939 ;;		On exit  : 0/0
  8940 ;;		Unchanged: 0/0
  8941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8942 ;;      Params:         0       0       0       0
  8943 ;;      Locals:         0       0       0       0
  8944 ;;      Temps:          0       0       0       0
  8945 ;;      Totals:         0       0       0       0
  8946 ;;Total ram usage:        0 bytes
  8947 ;; Hardware stack levels used:    1
  8948 ;; Hardware stack levels required when called:    2
  8949 ;; This function calls:
  8950 ;;		Nothing
  8951 ;; This function is called by:
  8952 ;;		_main
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           
  8957                           ;psect for function _DetectSYSC_Signal
  8958  0BDC                     _DetectSYSC_Signal:	
  8959                           
  8960                           ;SYSC_B1.c: 52: if (SYSC.Signal == 0) {
  8961                           
  8962                           ;incstack = 0
  8963                           ; Regs used in _DetectSYSC_Signal: [status,2]
  8964  0BDC  1283               	bcf	3,5	;RP0=0, select bank0
  8965  0BDD  1303               	bcf	3,6	;RP1=0, select bank0
  8966  0BDE  19A6               	btfsc	_SYSC,3
  8967  0BDF  2BE6               	goto	l1075
  8968                           
  8969                           ;SYSC_B1.c: 53: if (RA5 == 1) {
  8970  0BE0  1E85               	btfss	5,5	;volatile
  8971  0BE1  0008               	return
  8972                           
  8973                           ;SYSC_B1.c: 54: SYSC.Signal = 1;
  8974  0BE2  15A6               	bsf	_SYSC,3
  8975                           
  8976                           ;SYSC_B1.c: 55: SYSC.Timer = 0;
  8977  0BE3  01A7               	clrf	_SYSC+1
  8978  0BE4  01A8               	clrf	_SYSC+2
  8979                           
  8980                           ;SYSC_B1.c: 56: }
  8981                           ;SYSC_B1.c: 57: } else {
  8982  0BE5  0008               	return
  8983  0BE6                     l1075:	
  8984                           
  8985                           ;SYSC_B1.c: 58: if (RA5 == 0) {
  8986  0BE6  1A85               	btfsc	5,5	;volatile
  8987  0BE7  0008               	return
  8988                           
  8989                           ;SYSC_B1.c: 59: SYSC.Signal = 0;
  8990  0BE8  11A6               	bcf	_SYSC,3
  8991  0BE9  0008               	return
  8992  0BEA                     __end_of_DetectSYSC_Signal:	
  8993                           
  8994                           	psect	text60
  8995  0DEF                     __ptext60:	
  8996 ;; *************** function _CDS_Main *****************
  8997 ;; Defined at:
  8998 ;;		line 11 in file "../src/CDS_B1.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;		None
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;		None
  9003 ;; Return value:  Size  Location     Type
  9004 ;;		None               void
  9005 ;; Registers used:
  9006 ;;		wreg, status,2, status,0
  9007 ;; Tracked objects:
  9008 ;;		On entry : 0/0
  9009 ;;		On exit  : 0/0
  9010 ;;		Unchanged: 0/0
  9011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9012 ;;      Params:         0       0       0       0
  9013 ;;      Locals:         0       0       0       0
  9014 ;;      Temps:          3       0       0       0
  9015 ;;      Totals:         3       0       0       0
  9016 ;;Total ram usage:        3 bytes
  9017 ;; Hardware stack levels used:    1
  9018 ;; Hardware stack levels required when called:    2
  9019 ;; This function calls:
  9020 ;;		Nothing
  9021 ;; This function is called by:
  9022 ;;		_main
  9023 ;; This function uses a non-reentrant model
  9024 ;;
  9025                           
  9026                           
  9027                           ;psect for function _CDS_Main
  9028  0DEF                     _CDS_Main:	
  9029                           
  9030                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  9031                           
  9032                           ;incstack = 0
  9033                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
  9034  0DEF  1283               	bcf	3,5	;RP0=0, select bank0
  9035  0DF0  1303               	bcf	3,6	;RP1=0, select bank0
  9036  0DF1  1C2B               	btfss	__CDS,0
  9037  0DF2  0008               	return
  9038                           
  9039                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  9040  0DF3  18AB               	btfsc	__CDS,1
  9041  0DF4  2E02               	goto	l111
  9042                           
  9043                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  9044  0DF5  19AB               	btfsc	__CDS,3
  9045  0DF6  0008               	return
  9046                           
  9047                           ;CDS_B1.c: 16: _CDS.Time++;
  9048  0DF7  3001               	movlw	1
  9049  0DF8  00F4               	movwf	??_CDS_Main
  9050  0DF9  0874               	movf	??_CDS_Main,w
  9051  0DFA  07AC               	addwf	__CDS+1,f
  9052                           
  9053                           ;CDS_B1.c: 17: if (_CDS.Time >= 10)
  9054  0DFB  300A               	movlw	10
  9055  0DFC  022C               	subwf	__CDS+1,w
  9056  0DFD  1C03               	skipc
  9057  0DFE  0008               	return
  9058                           
  9059                           ;CDS_B1.c: 18: {
  9060                           ;CDS_B1.c: 19: _CDS.Time = 0;
  9061  0DFF  01AC               	clrf	__CDS+1
  9062                           
  9063                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
  9064  0E00  15AB               	bsf	__CDS,3
  9065                           
  9066                           ;CDS_B1.c: 21: }
  9067                           ;CDS_B1.c: 22: }
  9068                           ;CDS_B1.c: 23: } else {
  9069  0E01  0008               	return
  9070  0E02                     l111:	
  9071                           
  9072                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
  9073  0E02  1CAB               	btfss	__CDS,1
  9074  0E03  0008               	return
  9075                           
  9076                           ;CDS_B1.c: 25: _CDS.GO = 0;
  9077  0E04  10AB               	bcf	__CDS,1
  9078                           
  9079                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
  9080  0E05  1A2B               	btfsc	__CDS,4
  9081  0E06  2E0D               	goto	l3545
  9082                           
  9083                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
  9084  0E07  082D               	movf	__CDS+2,w
  9085  0E08  022E               	subwf	__CDS+3,w
  9086  0E09  1C03               	skipc
  9087  0E0A  0008               	return
  9088                           
  9089                           ;CDS_B1.c: 28: _CDS.Status = 1;
  9090  0E0B  162B               	bsf	__CDS,4
  9091                           
  9092                           ;CDS_B1.c: 29: }
  9093                           ;CDS_B1.c: 30: } else {
  9094  0E0C  0008               	return
  9095  0E0D                     l3545:	
  9096                           
  9097                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  9098  0E0D  082D               	movf	__CDS+2,w
  9099  0E0E  3E9C               	addlw	156
  9100  0E0F  00F4               	movwf	??_CDS_Main
  9101  0E10  30FF               	movlw	255
  9102  0E11  1803               	skipnc
  9103  0E12  3000               	movlw	0
  9104  0E13  00F5               	movwf	??_CDS_Main+1
  9105  0E14  0875               	movf	??_CDS_Main+1,w
  9106  0E15  3A80               	xorlw	128
  9107  0E16  00F6               	movwf	??_CDS_Main+2
  9108  0E17  3080               	movlw	128
  9109  0E18  0276               	subwf	??_CDS_Main+2,w
  9110  0E19  1D03               	skipz
  9111  0E1A  2E1D               	goto	u3545
  9112  0E1B  082E               	movf	__CDS+3,w
  9113  0E1C  0274               	subwf	??_CDS_Main,w
  9114  0E1D                     u3545:	
  9115  0E1D  1C03               	skipc
  9116  0E1E  0008               	return
  9117                           
  9118                           ;CDS_B1.c: 32: _CDS.Status = 0;
  9119  0E1F  1283               	bcf	3,5	;RP0=0, select bank0
  9120  0E20  1303               	bcf	3,6	;RP1=0, select bank0
  9121  0E21  122B               	bcf	__CDS,4
  9122  0E22  0008               	return
  9123  0E23                     __end_of_CDS_Main:	
  9124                           
  9125                           	psect	text61
  9126  0B55                     __ptext61:	
  9127 ;; *************** function _CDS_Initialization *****************
  9128 ;; Defined at:
  9129 ;;		line 7 in file "../src/CDS_B1.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;		None
  9132 ;; Auto vars:     Size  Location     Type
  9133 ;;		None
  9134 ;; Return value:  Size  Location     Type
  9135 ;;		None               void
  9136 ;; Registers used:
  9137 ;;		None
  9138 ;; Tracked objects:
  9139 ;;		On entry : 0/0
  9140 ;;		On exit  : 0/0
  9141 ;;		Unchanged: 0/0
  9142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9143 ;;      Params:         0       0       0       0
  9144 ;;      Locals:         0       0       0       0
  9145 ;;      Temps:          0       0       0       0
  9146 ;;      Totals:         0       0       0       0
  9147 ;;Total ram usage:        0 bytes
  9148 ;; Hardware stack levels used:    1
  9149 ;; Hardware stack levels required when called:    2
  9150 ;; This function calls:
  9151 ;;		Nothing
  9152 ;; This function is called by:
  9153 ;;		_main
  9154 ;; This function uses a non-reentrant model
  9155 ;;
  9156                           
  9157                           
  9158                           ;psect for function _CDS_Initialization
  9159  0B55                     _CDS_Initialization:	
  9160                           
  9161                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  9162                           
  9163                           ;incstack = 0
  9164                           ; Regs used in _CDS_Initialization: []
  9165  0B55  1283               	bcf	3,5	;RP0=0, select bank0
  9166  0B56  1303               	bcf	3,6	;RP1=0, select bank0
  9167  0B57  142B               	bsf	__CDS,0
  9168  0B58  0008               	return
  9169  0B59                     __end_of_CDS_Initialization:	
  9170                           
  9171                           	psect	text62
  9172  0C15                     __ptext62:	
  9173 ;; *************** function _ISR *****************
  9174 ;; Defined at:
  9175 ;;		line 107 in file "../src/MCU_B1.c"
  9176 ;; Parameters:    Size  Location     Type
  9177 ;;		None
  9178 ;; Auto vars:     Size  Location     Type
  9179 ;;		None
  9180 ;; Return value:  Size  Location     Type
  9181 ;;		None               void
  9182 ;; Registers used:
  9183 ;;		wreg, status,2, status,0, pclath, cstack
  9184 ;; Tracked objects:
  9185 ;;		On entry : 0/0
  9186 ;;		On exit  : 0/0
  9187 ;;		Unchanged: 0/0
  9188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9189 ;;      Params:         0       0       0       0
  9190 ;;      Locals:         0       0       0       0
  9191 ;;      Temps:          4       0       0       0
  9192 ;;      Totals:         4       0       0       0
  9193 ;;Total ram usage:        4 bytes
  9194 ;; Hardware stack levels used:    1
  9195 ;; Hardware stack levels required when called:    1
  9196 ;; This function calls:
  9197 ;;		_TMR1_ISR
  9198 ;; This function is called by:
  9199 ;;		Interrupt level 1
  9200 ;; This function uses a non-reentrant model
  9201 ;;
  9202                           
  9203                           
  9204                           ;psect for function _ISR
  9205  0C15                     _ISR:	
  9206                           
  9207                           ;MCU_B1.c: 109: ;;
  9208                           ;MCU_B1.c: 111: ;;
  9209                           ;MCU_B1.c: 113: TMR1_ISR();
  9210  0C15  158A  250D  158A   	fcall	_TMR1_ISR
  9211  0C18  0873               	movf	??_ISR+3,w
  9212  0C19  1283               	bcf	3,5	;RP0=0, select bank0
  9213  0C1A  1303               	bcf	3,6	;RP1=0, select bank0
  9214  0C1B  00FF               	movwf	127
  9215  0C1C  0872               	movf	??_ISR+2,w
  9216  0C1D  008A               	movwf	10
  9217  0C1E  0871               	movf	??_ISR+1,w
  9218  0C1F  0084               	movwf	4
  9219  0C20  0E70               	swapf	??_ISR^(0+-128),w
  9220  0C21  0083               	movwf	3
  9221  0C22  0EFE               	swapf	126,f
  9222  0C23  0E7E               	swapf	126,w
  9223  0C24  0009               	retfie
  9224  0C25                     __end_of_ISR:	
  9225                           
  9226                           	psect	intentry
  9227  0004                     __pintentry:	
  9228                           ;incstack = 0
  9229                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  9230                           
  9231  0004                     interrupt_function:	
  9232  007E                     saved_w	set	btemp
  9233  0004  00FE               	movwf	btemp
  9234  0005  0E03               	swapf	3,w
  9235  0006  00F0               	movwf	??_ISR
  9236  0007  0804               	movf	4,w
  9237  0008  00F1               	movwf	??_ISR+1
  9238  0009  080A               	movf	10,w
  9239  000A  00F2               	movwf	??_ISR+2
  9240  000B  1283               	bcf	3,5	;RP0=0, select bank0
  9241  000C  1303               	bcf	3,6	;RP1=0, select bank0
  9242  000D  087F               	movf	btemp+1,w
  9243  000E  00F3               	movwf	??_ISR+3
  9244  000F  158A  2C15         	ljmp	_ISR
  9245                           
  9246                           	psect	text63
  9247  0D0D                     __ptext63:	
  9248 ;; *************** function _TMR1_ISR *****************
  9249 ;; Defined at:
  9250 ;;		line 209 in file "../src/MCU_B1.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;		None
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;		None
  9255 ;; Return value:  Size  Location     Type
  9256 ;;		None               void
  9257 ;; Registers used:
  9258 ;;		wreg, status,2
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9264 ;;      Params:         0       0       0       0
  9265 ;;      Locals:         0       0       0       0
  9266 ;;      Temps:          0       0       0       0
  9267 ;;      Totals:         0       0       0       0
  9268 ;;Total ram usage:        0 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; This function calls:
  9271 ;;		Nothing
  9272 ;; This function is called by:
  9273 ;;		_ISR
  9274 ;; This function uses a non-reentrant model
  9275 ;;
  9276                           
  9277                           
  9278                           ;psect for function _TMR1_ISR
  9279  0D0D                     _TMR1_ISR:	
  9280                           
  9281                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  9282                           
  9283                           ;incstack = 0
  9284                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  9285  0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  9286  0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  9287  0D0F  1C0C               	btfss	12,0	;volatile
  9288  0D10  0008               	return
  9289  0D11  1283               	bcf	3,5	;RP0=0, select bank0
  9290  0D12  1303               	bcf	3,6	;RP1=0, select bank0
  9291  0D13  1C0C               	btfss	12,0	;volatile
  9292  0D14  0008               	return
  9293                           
  9294                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
  9295  0D15  30FA               	movlw	250
  9296  0D16  008F               	movwf	15	;volatile
  9297                           
  9298                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
  9299  0D17  3038               	movlw	56
  9300  0D18  008E               	movwf	14	;volatile
  9301                           
  9302                           ;MCU_B1.c: 214: TMR1IF = 0;
  9303  0D19  100C               	bcf	12,0	;volatile
  9304                           
  9305                           ;MCU_B1.c: 234: Timer1.Count++;
  9306  0D1A  3001               	movlw	1
  9307  0D1B  07B5               	addwf	_Timer1+1,f
  9308  0D1C  1803               	skipnc
  9309  0D1D  0AB6               	incf	_Timer1+2,f
  9310  0D1E  3000               	movlw	0
  9311  0D1F  07B6               	addwf	_Timer1+2,f
  9312                           
  9313                           ;MCU_B1.c: 235: if (Timer1.Count == 100) {
  9314  0D20  3064               	movlw	100
  9315  0D21  0635               	xorwf	_Timer1+1,w
  9316  0D22  0436               	iorwf	_Timer1+2,w
  9317  0D23  1D03               	skipz
  9318  0D24  0008               	return
  9319                           
  9320                           ;MCU_B1.c: 236: Timer1.Count = 0;
  9321  0D25  01B5               	clrf	_Timer1+1
  9322  0D26  01B6               	clrf	_Timer1+2
  9323                           
  9324                           ;MCU_B1.c: 237: Timer1.Timeout = 1;
  9325  0D27  1434               	bsf	_Timer1,0
  9326  0D28  0008               	return
  9327  0D29                     __end_of_TMR1_ISR:	
  9328  007E                     btemp	set	126	;btemp
  9329  007E                     wtemp	set	126
  9330  007E                     wtemp0	set	126
  9331  0080                     wtemp1	set	128
  9332  0082                     wtemp2	set	130
  9333  0084                     wtemp3	set	132
  9334  0086                     wtemp4	set	134
  9335  0088                     wtemp5	set	136
  9336  007F                     wtemp6	set	127
  9337  007E                     ttemp	set	126
  9338  007E                     ttemp0	set	126
  9339  0081                     ttemp1	set	129
  9340  0084                     ttemp2	set	132
  9341  0087                     ttemp3	set	135
  9342  007F                     ttemp4	set	127
  9343  007E                     ltemp	set	126
  9344  007E                     ltemp0	set	126
  9345  0082                     ltemp1	set	130
  9346  0086                     ltemp2	set	134
  9347  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         140
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     20      77
    BANK1            80      0      80
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK0[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK0[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_CDS_Main
    _main->_getCDS_AD
    _main->_getPIR_AD
    _main->_getTemp_AD
    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->_getMain_LightsStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_setLED
    _PIR_Main->_setLights_Trigger
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _Load_Main->_getMain_LoadOK
    _getMain_LoadOK->_getLightsControl_OK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_getMain_LightsStatus
    _setLights->_setLights_Line
    _setLights_Line->_LightsPointSelect
    _Lights_Control->_LightsPointSelect
    _Lights_Close->_getMain_LightsStatus
    _Lights_Initialization->_setLights_Initialization
    _setLights_Initialization->_LightsPointSelect
    _setPIRLED_Main->_setLED
    _setLED_Initialization->_setLED
    _Exception_Main->_getAll_Lights_Line
    _Exception_Main->_setLED
    _Exception_Main->_setLights_Trigger
    _setLights_Trigger->_LightsPointSelect
    _setLED->_LedPointSelect
    _getLights_Status->_LightsPointSelect
    _getAll_Lights_Line->_LightsPointSelect

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lights_Main
    _main->_PIR_Main
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->___awdiv
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_setLights_Main
    _setLights_Main->_setLights
    _setLights->_getMain_All_Error_Status
    _Lights_Close->_getMain_LightsStatus
    _getMain_LightsStatus->_getLights_Status
    _LED_Main->_setPIRLED_Main
    _setPIRLED_Main->_setLED
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_getMain_All_Error_Status

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   22176
                                             15 BANK0      5     1      4
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           3     3      0     459
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2381
                                              6 COMMON     1     0      1
                                              8 BANK0      6     6      0
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     827
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     573
                                              6 COMMON     1     0      1
                                              0 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     428
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1328
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         2     2      0    1328
                                              8 BANK0      2     2      0
                            ___awdiv
           _getMain_All_Error_Status
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     753
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     303
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     303
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             9     9      0    3720
                                              6 BANK0      9     9      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1949
                                              7 BANK0      7     7      0
                            ___lwdiv
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              5 COMMON     2     2      0
                _getLightsControl_OK
 ---------------------------------------------------------------------------------
 (3) _getLightsControl_OK                                  1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 5     5      0     111
                                              4 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          5     5      0    1860
                                             10 BANK0      5     5      0
                       _Lights_Close
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0     798
                                              9 BANK0      1     1      0
                  _LightsPointSelect
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1     674
                                              6 BANK0      3     2      1
                  _LightsPointSelect
           _getMain_All_Error_Status
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      62
                                              6 COMMON     1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       5     5      0     161
                                              0 BANK0      5     5      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Lights_Close                                         1     1      0     269
                                              6 BANK0      1     1      0
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     269
                                              6 COMMON     1     1      0
                                              2 BANK0      4     4      0
                   _getLights_Status
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              6 COMMON     1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0    2262
                     _setPIRLED_Main
 ---------------------------------------------------------------------------------
 (2) _setPIRLED_Main                                       2     2      0    2262
                                              1 BANK0      2     2      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2377
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2377
                                              1 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       6     6      0    3985
                                              6 BANK0      6     6      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _setLights_Trigger                                    3     2      1     940
                                              6 COMMON     1     0      1
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    2222
                                              6 COMMON     1     0      1
                                              0 BANK0      1     1      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     303
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   1     1      0      68
                                              6 COMMON     1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
       _LightsPointSelect
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setPIRLED_Main
       _setLED
         _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Close
       _getMain_LightsStatus
         _getLights_Status
           _LightsPointSelect
     _Lights_Control
       _LightsPointSelect
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getLights_Status
         _LightsPointSelect
     _setLights_Main
       _LightsPointSelect
       _setLights
         _LightsPointSelect
         _getMain_All_Error_Status
         _setLights_Line
           _LightsPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getLights_Status
         _LightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getLightsControl_OK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_LightsStatus
         _getLights_Status
           _LightsPointSelect
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      4D       5       96.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      A7      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Dec 10 16:13:24 2014

                     _WDT_Clearing 0002          getMain_Lights_Count@count 0059  
                     ___awdiv@sign 005E                                 fsr 0004  
                              l111 0E02                                l244 0CC7  
                              l245 0CCF                                l602 0E7D  
                              l603 0E9A                                l621 063C  
                              l701 0338                                l607 0E96  
                              l804 0578                                l691 03B9  
                              l694 024C                                l870 0070  
                              l695 0384                                l871 0047  
                              l696 0382                                l874 0058  
                              l877 0076                                l869 01F9  
                              l879 0089                                l799 057B  
                              _GIE 005F                                _RB2 0032  
                              _RA4 002C                                _LED 0077  
                              _RB3 0033                                _RA5 002D  
                              _RB4 0034                                _RB5 0035  
                              _PS0 0408                                _PS1 0409  
                              _PS2 040A                                _ISR 0C15  
                              _PSA 040B                                _WDT 0037  
           getAll_Lights_Line@line 0076                                fsr0 0004  
                              indf 0000                    __end_of_ADC_Set 0B7E  
        __end_of_LightsPointSelect 0BA0                   _getLights_Status 0C25  
          __size_of_Lights_Control 006D                               ?_ISR 0070  
                       Load_Main@i 0066                         Load_Main@j 0062  
                             l1216 0E50                               l1075 0BE6  
                   _Load_Main$2506 0064                               l3221 0D36  
                             l3223 0D39                               l3227 0D3F  
                             l5021 0E53                               l5201 0640  
                             l4401 0DEB                               l5017 0E47  
                             l5113 0130                               l5105 011C  
                             l4323 0597                               l5019 0E4B  
                             l5123 0165                               l4421 0F92  
                             l4351 05C2                               l4503 0717  
                             l5127 0195                               l5039 0062  
                             l3545 0E0D                               l4337 05A9  
                             l4505 0723                               l4417 0F77  
                             l5145 01CB                               l5129 01A0  
                             l4433 0EE8                               l4347 05BE  
                             l4355 05C6                               l4507 072B  
                             l4451 0F09                               l4381 05E8  
                             l5181 060D                               l4509 0739  
                             l5093 00CF                               l5077 00AC  
                             l4613 07E6                               l4461 0F2A  
                             l5237 0FB5                               l4287 0E79  
                             l4279 0E6D                               l4359 05CE  
                             l5191 0633                               l5095 00D0  
                             l4607 07CD                               l4439 0EF3  
                             l4551 0517                               l4297 0E91  
                             l4289 0E81                               l4377 05E2  
                             l4385 05EE                               l4633 0D8D  
                             l5089 00C3                               l4465 0F32  
                             l4457 0F1F                               l4449 0EFB  
                             l4801 0430                               l3761 0CE8  
                             l5249 0FD8                               l4651 0783  
                             l4493 0705                               l4397 0DE4  
                             l4901 026B                               l4741 06B0  
                             l4805 0438                               l5199 065D  
                             l4399 0DC6                               l4663 07A8  
                             l4583 0568                               l4567 054D  
                             l4497 070B                               l4489 06FF  
                             l4593 0577                               l4737 06A7  
                             l4729 068B                               l4841 04BD  
                             l4825 0473                               l4809 0440  
                             l4691 0ECA                               l4683 0EA6  
                             l4931 0325                               l4907 029C  
                             l4835 04A1                               l4819 0457  
                             l4771 0D63                               l4685 0EB4  
                             l4757 06D4                               l4695 0ED5  
                             l4855 04F7                               l4937 0331  
                             l4849 04E9                               l4793 0420  
                             l4947 035A                               l4797 0428  
                             l4879 0238                               l4997 03A4  
            _myMain_Initialization 0B45                       __CFG_WDTE$ON 0000  
                             u5400 0720                               u3545 0E1D  
                             u5305 0F20                               u2745 0C78  
                             _PEIE 005E                               u5420 0736  
                             u5185 0DCF                               u6305 034B  
                             u5265 0EFE                               u6245 02EF  
                             u5285 0F0A                               u5295 0F16  
                             u5720 077F                               u5635 07F2  
                             u5815 0EB5                               u5825 0EC1  
                             u6705 018B                               u5835 0ECB  
                             u6725 01B0                               u6655 00F0  
                             u6665 0114                               u5795 0EA9  
                             u6685 014E                               u6870 0666  
                             u6775 01E8                               u6875 0649  
                             __CDS 002B            ?_setSYSC_Initialization 0070  
                             _SYSC 0026                               __PIR 00A0  
                             _Load 00CF                               _Temp 003A  
                             _main 0F9A                               btemp 007E  
                  __end_of_WDT_Set 0C06                               ltemp 007E  
                             start 0011                               ttemp 007E  
                             wtemp 007E                   __end_of_CDS_Main 0E23  
     __size_of_Temp_Initialization 0003                              ??_ISR 0070  
                _setLights_Trigger 0CF2                      ??_Lights_Main 0063  
                    __CFG_PLLEN$ON 0000                   __end_of_LED_Main 0B49  
               ?_setLights_Trigger 0076                   ??_setPIRLED_Main 005A  
                            ?_main 0068                    __end_of___awdiv 0F39  
                            _ADRES 001E                    ___awdiv@divisor 0059  
                            _T1CON 0010                    __end_of___lwdiv 0EDC  
                    ?_Lights_Close 0070                    ___awdiv@counter 005D  
                            _TMR1H 000F                              _TMR1L 000E  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
          __end_of_Timeout_Counter 0C7E                ??_setLights_Trigger 0059  
                 __end_of_PIR_Main 0213                   __end_of_TMR1_ISR 0D29  
                 __end_of_TMR1_Set 0BF8                              _getAD 0D29  
   __end_of_setSYSC_Initialization 0B61                   __end_of_WDT_Main 0C58  
                    _LightsControl 0039                     __CFG_BOREN$OFF 0000  
     __end_of_getMain_Lights_Count 0C47                              pclath 000A  
                            ltemp0 007E                              ltemp1 0082  
                            ltemp2 0086                              ltemp3 0080  
   __size_of_setLED_Initialization 0012       __end_of_getMain_LightsStatus 0DEF  
    __end_of_setLED_Initialization 0C6A                              ttemp0 007E  
                            ttemp1 0081                              ttemp2 0084  
                            ttemp3 0087                              ttemp4 007F  
                            status 0003                              wtemp0 007E  
                            wtemp1 0080                              wtemp2 0082  
                            wtemp3 0084                              wtemp4 0086  
                            wtemp5 0088                              wtemp6 007F  
                getPIR_AD@channel1 0065                  getPIR_AD@channel2 0076  
           ?_setLoad_AH_AL_Restore 0070                  setTemp_Main@error 0062  
                   _setLights_Main 0D6C                     _setLights_Line 0BB7  
                  __initialization 0013                 __size_of_SYSC_Main 0003  
        __end_of_setLights_Trigger 0D0D                       __end_of_main 1000  
                 __end_of_Fosc_Set 0B6B                     _Exception_Main 05F6  
                        ??_ADC_Set 0074                             ??_main 006C  
                   ??_Lights_Close 005F                __end_of_Lights_Main 0E5E  
       __size_of_LightsPointSelect 000A                             ?_getAD 0074  
           ?_myMain_Initialization 0070                             _ADCON0 001F  
                           _ADCON1 009F                   ___awdiv@dividend 005B  
                        ??_WDT_Set 0074                             _ANSELA 0185  
                           _ANSELB 0186           _getMain_All_Error_Status 0E5E  
                           _FVRCON 009D             getLights_Status@lights 0059  
                           _PIRLED 0030                             _OSCCON 0090  
               __size_of_Load_Main 01AE                             _TMR1IE 0460  
                           _TMR1IF 0060                             _IO_Set 0C93  
           getLights_Status@status 005A             __end_of_setLights_Main 0D94  
           __end_of_setLights_Line 0BC3                _getLightsControl_OK 0B86  
     __size_of_SYSC_Initialization 0003         __end_of_Mcu_Initialization 0C15  
                           _Lights 0078                             _Timer1 0034  
      __size_of_CDS_Initialization 0004            ??_Lights_Initialization 0077  
           __end_of_Exception_Main 0669                          ??___awdiv 0074  
                        ??___lwdiv 0074               Exception_Main@status 0061  
                           _setLED 057F                             _myMain 0020  
                 ___awdiv@quotient 005F                 __size_of_Temp_Main 0003  
      __end_of_Load_Initialization 0B71               ?_getLightsControl_OK 0070  
                           saved_w 007E                   ?_Timeout_Counter 0070  
      getMain_Lights_Count@status1 005C        getMain_Lights_Count@status2 005A  
      getMain_Lights_Count@status3 005B                  __end_of_SYSC_Main 0B4F  
                   _Lights_Control 0749            __size_of_LedPointSelect 001A  
                        ?_CDS_Main 0070            __size_of_getMain_LoadOK 000C  
      __size_of_PIR_Initialization 000B         getMain_LightsStatus@status 005E  
          __end_of__initialization 0022                          ?_LED_Main 0070  
                    ?_my_MainTimer 0070                    ?_setLights_Main 0070  
                  ?_setLights_Line 0070                      ?_setSYSC_Main 0070  
       __size_of_setLights_Trigger 001B                     __pcstackCOMMON 0070  
               __size_of_getCDS_AD 002A                    ?_Exception_Main 0070  
         __end_of_getLights_Status 0C36                      __end_of_getAD 0D45  
                        ?_PIR_Main 0070                          ?_TMR1_ISR 0070  
                        ?_TMR1_Set 0070             setLoad_AH_AL_Restore@i 0075  
               _LED_Initialization 0BAB                 __size_of_getPIR_AD 0138  
                      _Lights_Main 0E23           _setLights_Initialization 0B61  
             _getMain_Lights_Count 0C36                          ?_WDT_Main 0070  
                __end_of_Load_Main 03C1              ??_getLightsControl_OK 0074  
             _getMain_LightsStatus 0DBE         __end_of_set_TimeoutCleared 0B77  
              ?_LED_Initialization 0070             __end_of_Lights_Control 07B6  
            getMain_LightsStatus@i 005C                            ??_getAD 0075  
              _Temp_Initialization 0B4F                         ??_CDS_Main 0074  
                       __pbssBANK0 0020                         __pbssBANK1 00A0  
                        ?_Fosc_Set 0070        __size_of_getAll_Lights_Line 000D  
                __end_of_Temp_Main 0B55                            ?_IO_Set 0070  
                  __CFG_VCAPEN$DIS 0000                     ??_my_MainTimer 0074  
                       ??_LED_Main 0077               __end_of_Lights_Close 0C93  
                   ??_setSYSC_Main 0075          getMain_LightsStatus@count 005B  
             ??_LED_Initialization 0077                  LedPointSelect@led 0075  
                       __pmaintext 0F9A               ?_Temp_Initialization 0070  
                       ??_PIR_Main 005F                         ??_TMR1_ISR 0070  
                    ?_setTemp_Main 0070                 __size_of_setLights 0061  
                       _getLoad_AD 0669                         ??_TMR1_Set 0074  
                       __pintentry 0004                         _getLoad_OK 0B7E  
                          ?_setLED 0076            setLights_Trigger@lights 005A  
            ?_getMain_Lights_Count 0070                            _ADC_Set 0B77  
                       _getTemp_AD 0D45                         ??_WDT_Main 0074  
            ?_getMain_LightsStatus 0070             __size_of_getCDS_Status 0008  
                  ?_Lights_Control 0070                  __end_of_getCDS_AD 0DBE  
                          _WDT_Set 0BF8                         ??_Fosc_Set 0074  
                __end_of_getPIR_AD 04F9            ??_setLoad_AH_AL_Restore 0074  
                  __size_of_IO_Set 0015                         getCDS_AD@i 005B  
                       getCDS_AD@j 005C                            _Lights1 0046  
                          _VarLED1 0051                            _VarLED2 0055  
            ??_Temp_Initialization 0074                     ??_setTemp_Main 0061  
                          ___awdiv 0EDC          getLightsControl_OK@loadok 0074  
                          ___lwdiv 0E9C                        PIR_Main@cds 0067  
                  __size_of_setLED 0077                            __ptext0 0000  
                          __ptext1 0CD8                            __ptext2 0B45  
                          __ptext3 0D45                            __ptext4 03C1  
                          __ptext5 0669                            __ptext6 0D94  
                          __ptext7 0D29                            __ptext8 0B71  
                          __ptext9 0C6A                         getPIR_AD@i 0066  
                       getPIR_AD@j 0064                       __size_of_ISR 0010  
       ??_getMain_All_Error_Status 0074                _SYSC_Initialization 0B49  
          ??_myMain_Initialization 0074           ??_setTemp_Initialization 0074  
                   _LedPointSelect 0CBE                     _getMain_LoadOK 0BC3  
                          clrloop0 07F9                  __end_of_setLights 0F9A  
             end_of_initialization 0022                      _getCDS_Status 0B8E  
             ?_SYSC_Initialization 0070              _setLED_Initialization 0C58  
                      ?_getLoad_AD 0070     __size_of_Lights_Initialization 0004  
                      ?_getLoad_OK 0070             ??_getMain_Lights_Count 0074  
    __end_of_Lights_Initialization 0B5D             ??_getMain_LightsStatus 0076  
                      ?_getTemp_AD 0070           setLED_Initialization@led 005A  
               _Mcu_Initialization 0C06               __end_of_my_MainTimer 0CF2  
             __end_of_setSYSC_Main 07F8             __end_of_LedPointSelect 0CD8  
           __end_of_getMain_LoadOK 0BCF                setPIRLED_Main@count 005B  
              ?_Mcu_Initialization 0070              __size_of_Lights_Close 0015  
          __size_of_setPIRLED_Main 006F                   ??_setLights_Main 0077  
                 ??_setLights_Line 0076               setLights_Main@lights 0062  
                        _SYSC_Main 0B4C    getMain_All_Error_Status@command 005D  
                __size_of_CDS_Main 0034                     ?_getCDS_Status 0070  
            ??_SYSC_Initialization 0074                   ??_Exception_Main 005F  
                   __end_of_IO_Set 0CA8         __end_of_CDS_Initialization 0B59  
       ??_setLights_Initialization 0076                  __size_of_LED_Main 0003  
             ??_Mcu_Initialization 0075                      ?_WDT_Clearing 0070  
                ?_getLights_Status 0070                       ?_Lights_Main 0070  
                __size_of_PIR_Main 01EE                  __size_of_TMR1_ISR 001C  
               ??_getLights_Status 0076                  __size_of_TMR1_Set 000E  
                   __end_of_setLED 05F6           ??_setSYSC_Initialization 0074  
                     _Lights_Close 0C7E                  __size_of_WDT_Main 0011  
              _Lights_Control$4398 005B                start_initialization 0013  
                  ?_LedPointSelect 0070               setLights_Line@lights 0076  
                        _Load_Main 0213                        __end_of_ISR 0C25  
                  ?_getMain_LoadOK 0070         __end_of_PIR_Initialization 0BAB  
     __size_of_Load_Initialization 0006    __size_of_setTemp_Initialization 0001  
              getCDS_Status@status 0074               __end_of_setTemp_Main 057F  
              __size_of_getLoad_AD 0071                __size_of_getLoad_OK 0008  
                       ?_SYSC_Main 0070                 _set_TimeoutCleared 0B71  
                         ??_IO_Set 0074           __size_of_Timeout_Counter 0014  
                        _VarErrLED 004D                __size_of_getTemp_AD 0027  
           ?_setLED_Initialization 0070                  __size_of_Fosc_Set 0005  
                        _Temp_Main 0B52                    setLights@lights 0061  
              ?_set_TimeoutCleared 0070                     ??_WDT_Clearing 0074  
              Exception_Main@count 0060                    setLights@status 005F  
              Exception_Main@error 0064        __end_of_getLightsControl_OK 0B8E  
                         ??_setLED 0077                           ?_ADC_Set 0070  
                 ??_Lights_Control 0059   __end_of_getMain_All_Error_Status 0E9C  
                      __pbssCOMMON 0077                          ___latbits 0001  
                       ?_Load_Main 0070                      __pcstackBANK0 0059  
             ??_set_TimeoutCleared 0074         __end_of_getAll_Lights_Line 0BDC  
                         ?_WDT_Set 0070                    ??_getCDS_Status 0074  
                    PIR_Main@error 0064                          _getCDS_AD 0D94  
   __size_of_setLoad_AH_AL_Restore 0016      __end_of_setLoad_AH_AL_Restore 0CBE  
                        _getPIR_AD 03C1        __size_of_LED_Initialization 000C  
                  Exception_Main@i 0062                         ?_Temp_Main 0070  
                   Load_Main@adjgo 0063                   ___lwdiv@dividend 005B  
                   Load_Main@error 0065             _setTemp_Initialization 0B44  
                    _PIR_Main$2988 0065                           ?___awdiv 0059  
            __size_of_my_MainTimer 001A                           ?___lwdiv 0059  
            __size_of_setSYSC_Main 0042                   getMain_LoadOK@ok 0076  
         setLights_Trigger@command 0076    __size_of_setSYSC_Initialization 0004  
   __size_of_myMain_Initialization 0001      __end_of_myMain_Initialization 0B46  
                   __size_of_getAD 001C                   ___lwdiv@quotient 005E  
                   _setPIRLED_Main 06DA                           _CDS_Main 0DEF  
                      ??_SYSC_Main 0075        __end_of_Temp_Initialization 0B52  
                interrupt_function 0004                         ?_getCDS_AD 0076  
                         _LED_Main 0B46                          _setLights 0F39  
                        clear_ram0 07F8   __end_of_setLights_Initialization 0B66  
                     _my_MainTimer 0CD8                         ?_getPIR_AD 0076  
                     _setSYSC_Main 07B6                           _GO_nDONE 00F9  
                ??_Timeout_Counter 0074                           _PIR_Main 0025  
                     ??_getLoad_AD 0059                           _TMR1_ISR 0D0D  
                     ??_getLoad_OK 0074                           _TMR1_Set 0BEA  
                     ??_getTemp_AD 0059                           _WDT_Main 0C47  
                 __size_of_ADC_Set 0007               __size_of_Lights_Main 003B  
            __size_of_setTemp_Main 0086                        ??_Load_Main 0060  
           __end_of_setPIRLED_Main 0749     getMain_All_Error_Status@status 005E  
                      getAD@adcon0 0075                        getAD@adcon1 0074  
             __end_of_WDT_Clearing 0004                           _Fosc_Set 0B66  
                 __size_of_WDT_Set 000E                 __end_of_getLoad_AD 06DA  
               __end_of_getLoad_OK 0B86  __size_of_getMain_All_Error_Status 003E  
        ?_getMain_All_Error_Status 0070                         ?_setLights 005F  
               __end_of_getTemp_AD 0D6C             _setSYSC_Initialization 0B5D  
                getLoad_AD@channel 005B                  _DetectSYSC_Signal 0BDC  
                         _SwDetect 0079                        ??_Temp_Main 0077  
    _getMain_All_Error_Status$2247 0059      _getMain_All_Error_Status$2248 005B  
              _Load_Initialization 0B6B                 ?_DetectSYSC_Signal 0070  
                        setLED@led 0059                       _setTemp_Main 04F9  
                 __size_of___awdiv 005D                   __size_of___lwdiv 0040  
                 ??_LedPointSelect 0074      __size_of_getMain_Lights_Count 0011  
              ??_DetectSYSC_Signal 0074                 _CDS_Initialization 0B55  
                 ??_getMain_LoadOK 0075              _Lights_Initialization 0B59  
    __size_of_getMain_LightsStatus 0031                  getTemp_AD@channel 0076  
                  ?_setPIRLED_Main 0070                    ___lwdiv@divisor 0059  
             ?_Load_Initialization 0070                ?_CDS_Initialization 0070  
                  ___lwdiv@counter 005D                           __ptext10 0C47  
                         __ptext11 0002                           __ptext20 0B5D  
                         __ptext12 0B52                           __ptext21 0025  
                         __ptext13 04F9                           __ptext30 0213  
                         __ptext22 0B8E                           __ptext14 0EDC  
                         __ptext31 0BC3                           __ptext23 0BA0  
                         __ptext15 0B4F                           __ptext40 0BB7  
                         __ptext32 0B86                           __ptext24 0C06  
                         __ptext16 0B44                           __ptext41 0B7E  
                         __ptext33 0C36                           __ptext25 0BF8  
                         __ptext17 0B4C                           __ptext50 0C58  
                         __ptext42 0749                           __ptext34 0E9C  
                         __ptext26 0BEA                           __ptext18 07B6  
                         __ptext51 05F6                           __ptext43 0C7E  
                         __ptext35 0B6B                           __ptext27 0C93  
                         __ptext19 0B49                           __ptext60 0DEF  
                         __ptext52 0CF2                           __ptext44 0DBE  
                         __ptext36 0CA8                           __ptext28 0B66  
                         __ptext61 0B55                           __ptext53 057F  
                         __ptext45 0B59                           __ptext37 0E23  
                         __ptext29 0B77                           __ptext62 0C15  
                         __ptext54 0CBE                           __ptext46 0B61  
                         __ptext38 0D6C                           __ptext63 0D0D  
                         __ptext55 0E5E                           __ptext47 0B46  
                         __ptext39 0F39                           __ptext56 0C25  
                         __ptext48 06DA                           __ptext57 0BCF  
                         __ptext49 0BAB                           __ptext58 0B96  
                         __ptext59 0BDC          __size_of_getLights_Status 0011  
      __end_of_SYSC_Initialization 0B4C            ??_setLED_Initialization 0077  
                      ??_getCDS_AD 0059                      setLED@command 0076  
        __end_of_DetectSYSC_Signal 0BEA                      __size_of_main 0066  
                      ??_getPIR_AD 0061                 _PIR_Initialization 0BA0  
             ??_CDS_Initialization 0074        __size_of_Mcu_Initialization 000F  
                     getLoad_OK@ok 0074                ?_PIR_Initialization 0070  
                         main@argc 0068                           main@argv 006A  
__size_of_setLights_Initialization 0005          ?_setLights_Initialization 0070  
            ??_Load_Initialization 0076               Lights_Control@lights 005D  
             ??_PIR_Initialization 0074                           intlevel1 0000  
                 _Lights_Main$4389 0066                        ??_setLights 0060  
          ?_setTemp_Initialization 0070            LightsPointSelect@lights 0075  
               _getAll_Lights_Line 0BCF                        getLoad_AD@i 005E  
                      getLoad_AD@j 005D                        getLoad_AD@k 005C  
          __size_of_setLights_Main 0028            __size_of_setLights_Line 000C  
              ?_getAll_Lights_Line 0070             ?_Lights_Initialization 0070  
          __size_of_Exception_Main 0073              __size_of_WDT_Clearing 0002  
   setLights_Initialization@lights 0076       __size_of_getLightsControl_OK 0008  
      __size_of_set_TimeoutCleared 0006                  _LightsPointSelect 0B96  
             ??_getAll_Lights_Line 0076                 __CFG_FOSC$INTOSCIO 0000  
               ?_LightsPointSelect 0070                    _Timeout_Counter 0C6A  
       __end_of_LED_Initialization 0BB7              __end_of_getCDS_Status 0B96  
   __end_of_setTemp_Initialization 0B45         __size_of_DetectSYSC_Signal 000E  
                getCDS_AD@channel1 005D                  getCDS_AD@channel2 0076  
              ??_LightsPointSelect 0074              _setLoad_AH_AL_Restore 0CA8  
