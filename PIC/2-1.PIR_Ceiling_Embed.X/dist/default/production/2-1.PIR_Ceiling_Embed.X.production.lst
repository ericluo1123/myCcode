

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Nov 03 17:23:44 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    64                           	dabs	1,0x7E,2
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0089                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  008F                     	;# 
   108  0090                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0095                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0096                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009F                     	;# 
   123  0108                     	;# 
   124  0109                     	;# 
   125  010C                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010D                     	;# 
   129  010E                     	;# 
   130  010F                     	;# 
   131  0185                     	;# 
   132  0186                     	;# 
   133  018C                     	;# 
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0089                     	;# 
   173  008C                     	;# 
   174  008D                     	;# 
   175  008E                     	;# 
   176  008F                     	;# 
   177  0090                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0096                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009F                     	;# 
   192  0108                     	;# 
   193  0109                     	;# 
   194  010C                     	;# 
   195  010C                     	;# 
   196  010D                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  010F                     	;# 
   200  0185                     	;# 
   201  0186                     	;# 
   202  018C                     	;# 
   203  0000                     	;# 
   204  0001                     	;# 
   205  0002                     	;# 
   206  0003                     	;# 
   207  0004                     	;# 
   208  0005                     	;# 
   209  0006                     	;# 
   210  0007                     	;# 
   211  0009                     	;# 
   212  000A                     	;# 
   213  000B                     	;# 
   214  000C                     	;# 
   215  000D                     	;# 
   216  000E                     	;# 
   217  000E                     	;# 
   218  000F                     	;# 
   219  0010                     	;# 
   220  0011                     	;# 
   221  0012                     	;# 
   222  0013                     	;# 
   223  0014                     	;# 
   224  0015                     	;# 
   225  0015                     	;# 
   226  0016                     	;# 
   227  0017                     	;# 
   228  0018                     	;# 
   229  0019                     	;# 
   230  001A                     	;# 
   231  001B                     	;# 
   232  001B                     	;# 
   233  001C                     	;# 
   234  001D                     	;# 
   235  001E                     	;# 
   236  001F                     	;# 
   237  0081                     	;# 
   238  0085                     	;# 
   239  0086                     	;# 
   240  0087                     	;# 
   241  0089                     	;# 
   242  008C                     	;# 
   243  008D                     	;# 
   244  008E                     	;# 
   245  008F                     	;# 
   246  0090                     	;# 
   247  0091                     	;# 
   248  0092                     	;# 
   249  0093                     	;# 
   250  0093                     	;# 
   251  0094                     	;# 
   252  0095                     	;# 
   253  0095                     	;# 
   254  0096                     	;# 
   255  0096                     	;# 
   256  0098                     	;# 
   257  0099                     	;# 
   258  009C                     	;# 
   259  009D                     	;# 
   260  009F                     	;# 
   261  0108                     	;# 
   262  0109                     	;# 
   263  010C                     	;# 
   264  010C                     	;# 
   265  010D                     	;# 
   266  010D                     	;# 
   267  010E                     	;# 
   268  010F                     	;# 
   269  0185                     	;# 
   270  0186                     	;# 
   271  018C                     	;# 
   272  0000                     	;# 
   273  0001                     	;# 
   274  0002                     	;# 
   275  0003                     	;# 
   276  0004                     	;# 
   277  0005                     	;# 
   278  0006                     	;# 
   279  0007                     	;# 
   280  0009                     	;# 
   281  000A                     	;# 
   282  000B                     	;# 
   283  000C                     	;# 
   284  000D                     	;# 
   285  000E                     	;# 
   286  000E                     	;# 
   287  000F                     	;# 
   288  0010                     	;# 
   289  0011                     	;# 
   290  0012                     	;# 
   291  0013                     	;# 
   292  0014                     	;# 
   293  0015                     	;# 
   294  0015                     	;# 
   295  0016                     	;# 
   296  0017                     	;# 
   297  0018                     	;# 
   298  0019                     	;# 
   299  001A                     	;# 
   300  001B                     	;# 
   301  001B                     	;# 
   302  001C                     	;# 
   303  001D                     	;# 
   304  001E                     	;# 
   305  001F                     	;# 
   306  0081                     	;# 
   307  0085                     	;# 
   308  0086                     	;# 
   309  0087                     	;# 
   310  0089                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  008F                     	;# 
   315  0090                     	;# 
   316  0091                     	;# 
   317  0092                     	;# 
   318  0093                     	;# 
   319  0093                     	;# 
   320  0094                     	;# 
   321  0095                     	;# 
   322  0095                     	;# 
   323  0096                     	;# 
   324  0096                     	;# 
   325  0098                     	;# 
   326  0099                     	;# 
   327  009C                     	;# 
   328  009D                     	;# 
   329  009F                     	;# 
   330  0108                     	;# 
   331  0109                     	;# 
   332  010C                     	;# 
   333  010C                     	;# 
   334  010D                     	;# 
   335  010D                     	;# 
   336  010E                     	;# 
   337  010F                     	;# 
   338  0185                     	;# 
   339  0186                     	;# 
   340  018C                     	;# 
   341  0000                     	;# 
   342  0001                     	;# 
   343  0002                     	;# 
   344  0003                     	;# 
   345  0004                     	;# 
   346  0005                     	;# 
   347  0006                     	;# 
   348  0007                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  000E                     	;# 
   356  000F                     	;# 
   357  0010                     	;# 
   358  0011                     	;# 
   359  0012                     	;# 
   360  0013                     	;# 
   361  0014                     	;# 
   362  0015                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0017                     	;# 
   366  0018                     	;# 
   367  0019                     	;# 
   368  001A                     	;# 
   369  001B                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  001D                     	;# 
   373  001E                     	;# 
   374  001F                     	;# 
   375  0081                     	;# 
   376  0085                     	;# 
   377  0086                     	;# 
   378  0087                     	;# 
   379  0089                     	;# 
   380  008C                     	;# 
   381  008D                     	;# 
   382  008E                     	;# 
   383  008F                     	;# 
   384  0090                     	;# 
   385  0091                     	;# 
   386  0092                     	;# 
   387  0093                     	;# 
   388  0093                     	;# 
   389  0094                     	;# 
   390  0095                     	;# 
   391  0095                     	;# 
   392  0096                     	;# 
   393  0096                     	;# 
   394  0098                     	;# 
   395  0099                     	;# 
   396  009C                     	;# 
   397  009D                     	;# 
   398  009F                     	;# 
   399  0108                     	;# 
   400  0109                     	;# 
   401  010C                     	;# 
   402  010C                     	;# 
   403  010D                     	;# 
   404  010D                     	;# 
   405  010E                     	;# 
   406  010F                     	;# 
   407  0185                     	;# 
   408  0186                     	;# 
   409  018C                     	;# 
   410  0000                     	;# 
   411  0001                     	;# 
   412  0002                     	;# 
   413  0003                     	;# 
   414  0004                     	;# 
   415  0005                     	;# 
   416  0006                     	;# 
   417  0007                     	;# 
   418  0009                     	;# 
   419  000A                     	;# 
   420  000B                     	;# 
   421  000C                     	;# 
   422  000D                     	;# 
   423  000E                     	;# 
   424  000E                     	;# 
   425  000F                     	;# 
   426  0010                     	;# 
   427  0011                     	;# 
   428  0012                     	;# 
   429  0013                     	;# 
   430  0014                     	;# 
   431  0015                     	;# 
   432  0015                     	;# 
   433  0016                     	;# 
   434  0017                     	;# 
   435  0018                     	;# 
   436  0019                     	;# 
   437  001A                     	;# 
   438  001B                     	;# 
   439  001B                     	;# 
   440  001C                     	;# 
   441  001D                     	;# 
   442  001E                     	;# 
   443  001F                     	;# 
   444  0081                     	;# 
   445  0085                     	;# 
   446  0086                     	;# 
   447  0087                     	;# 
   448  0089                     	;# 
   449  008C                     	;# 
   450  008D                     	;# 
   451  008E                     	;# 
   452  008F                     	;# 
   453  0090                     	;# 
   454  0091                     	;# 
   455  0092                     	;# 
   456  0093                     	;# 
   457  0093                     	;# 
   458  0094                     	;# 
   459  0095                     	;# 
   460  0095                     	;# 
   461  0096                     	;# 
   462  0096                     	;# 
   463  0098                     	;# 
   464  0099                     	;# 
   465  009C                     	;# 
   466  009D                     	;# 
   467  009F                     	;# 
   468  0108                     	;# 
   469  0109                     	;# 
   470  010C                     	;# 
   471  010C                     	;# 
   472  010D                     	;# 
   473  010D                     	;# 
   474  010E                     	;# 
   475  010F                     	;# 
   476  0185                     	;# 
   477  0186                     	;# 
   478  018C                     	;# 
   479  0000                     	;# 
   480  0001                     	;# 
   481  0002                     	;# 
   482  0003                     	;# 
   483  0004                     	;# 
   484  0005                     	;# 
   485  0006                     	;# 
   486  0007                     	;# 
   487  0009                     	;# 
   488  000A                     	;# 
   489  000B                     	;# 
   490  000C                     	;# 
   491  000D                     	;# 
   492  000E                     	;# 
   493  000E                     	;# 
   494  000F                     	;# 
   495  0010                     	;# 
   496  0011                     	;# 
   497  0012                     	;# 
   498  0013                     	;# 
   499  0014                     	;# 
   500  0015                     	;# 
   501  0015                     	;# 
   502  0016                     	;# 
   503  0017                     	;# 
   504  0018                     	;# 
   505  0019                     	;# 
   506  001A                     	;# 
   507  001B                     	;# 
   508  001B                     	;# 
   509  001C                     	;# 
   510  001D                     	;# 
   511  001E                     	;# 
   512  001F                     	;# 
   513  0081                     	;# 
   514  0085                     	;# 
   515  0086                     	;# 
   516  0087                     	;# 
   517  0089                     	;# 
   518  008C                     	;# 
   519  008D                     	;# 
   520  008E                     	;# 
   521  008F                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0093                     	;# 
   526  0093                     	;# 
   527  0094                     	;# 
   528  0095                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0096                     	;# 
   532  0098                     	;# 
   533  0099                     	;# 
   534  009C                     	;# 
   535  009D                     	;# 
   536  009F                     	;# 
   537  0108                     	;# 
   538  0109                     	;# 
   539  010C                     	;# 
   540  010C                     	;# 
   541  010D                     	;# 
   542  010D                     	;# 
   543  010E                     	;# 
   544  010F                     	;# 
   545  0185                     	;# 
   546  0186                     	;# 
   547  018C                     	;# 
   548  0000                     	;# 
   549  0001                     	;# 
   550  0002                     	;# 
   551  0003                     	;# 
   552  0004                     	;# 
   553  0005                     	;# 
   554  0006                     	;# 
   555  0007                     	;# 
   556  0009                     	;# 
   557  000A                     	;# 
   558  000B                     	;# 
   559  000C                     	;# 
   560  000D                     	;# 
   561  000E                     	;# 
   562  000E                     	;# 
   563  000F                     	;# 
   564  0010                     	;# 
   565  0011                     	;# 
   566  0012                     	;# 
   567  0013                     	;# 
   568  0014                     	;# 
   569  0015                     	;# 
   570  0015                     	;# 
   571  0016                     	;# 
   572  0017                     	;# 
   573  0018                     	;# 
   574  0019                     	;# 
   575  001A                     	;# 
   576  001B                     	;# 
   577  001B                     	;# 
   578  001C                     	;# 
   579  001D                     	;# 
   580  001E                     	;# 
   581  001F                     	;# 
   582  0081                     	;# 
   583  0085                     	;# 
   584  0086                     	;# 
   585  0087                     	;# 
   586  0089                     	;# 
   587  008C                     	;# 
   588  008D                     	;# 
   589  008E                     	;# 
   590  008F                     	;# 
   591  0090                     	;# 
   592  0091                     	;# 
   593  0092                     	;# 
   594  0093                     	;# 
   595  0093                     	;# 
   596  0094                     	;# 
   597  0095                     	;# 
   598  0095                     	;# 
   599  0096                     	;# 
   600  0096                     	;# 
   601  0098                     	;# 
   602  0099                     	;# 
   603  009C                     	;# 
   604  009D                     	;# 
   605  009F                     	;# 
   606  0108                     	;# 
   607  0109                     	;# 
   608  010C                     	;# 
   609  010C                     	;# 
   610  010D                     	;# 
   611  010D                     	;# 
   612  010E                     	;# 
   613  010F                     	;# 
   614  0185                     	;# 
   615  0186                     	;# 
   616  018C                     	;# 
   617  0000                     	;# 
   618  0001                     	;# 
   619  0002                     	;# 
   620  0003                     	;# 
   621  0004                     	;# 
   622  0005                     	;# 
   623  0006                     	;# 
   624  0007                     	;# 
   625  0009                     	;# 
   626  000A                     	;# 
   627  000B                     	;# 
   628  000C                     	;# 
   629  000D                     	;# 
   630  000E                     	;# 
   631  000E                     	;# 
   632  000F                     	;# 
   633  0010                     	;# 
   634  0011                     	;# 
   635  0012                     	;# 
   636  0013                     	;# 
   637  0014                     	;# 
   638  0015                     	;# 
   639  0015                     	;# 
   640  0016                     	;# 
   641  0017                     	;# 
   642  0018                     	;# 
   643  0019                     	;# 
   644  001A                     	;# 
   645  001B                     	;# 
   646  001B                     	;# 
   647  001C                     	;# 
   648  001D                     	;# 
   649  001E                     	;# 
   650  001F                     	;# 
   651  0081                     	;# 
   652  0085                     	;# 
   653  0086                     	;# 
   654  0087                     	;# 
   655  0089                     	;# 
   656  008C                     	;# 
   657  008D                     	;# 
   658  008E                     	;# 
   659  008F                     	;# 
   660  0090                     	;# 
   661  0091                     	;# 
   662  0092                     	;# 
   663  0093                     	;# 
   664  0093                     	;# 
   665  0094                     	;# 
   666  0095                     	;# 
   667  0095                     	;# 
   668  0096                     	;# 
   669  0096                     	;# 
   670  0098                     	;# 
   671  0099                     	;# 
   672  009C                     	;# 
   673  009D                     	;# 
   674  009F                     	;# 
   675  0108                     	;# 
   676  0109                     	;# 
   677  010C                     	;# 
   678  010C                     	;# 
   679  010D                     	;# 
   680  010D                     	;# 
   681  010E                     	;# 
   682  010F                     	;# 
   683  0185                     	;# 
   684  0186                     	;# 
   685  018C                     	;# 
   686  0000                     	;# 
   687  0001                     	;# 
   688  0002                     	;# 
   689  0003                     	;# 
   690  0004                     	;# 
   691  0005                     	;# 
   692  0006                     	;# 
   693  0007                     	;# 
   694  0009                     	;# 
   695  000A                     	;# 
   696  000B                     	;# 
   697  000C                     	;# 
   698  000D                     	;# 
   699  000E                     	;# 
   700  000E                     	;# 
   701  000F                     	;# 
   702  0010                     	;# 
   703  0011                     	;# 
   704  0012                     	;# 
   705  0013                     	;# 
   706  0014                     	;# 
   707  0015                     	;# 
   708  0015                     	;# 
   709  0016                     	;# 
   710  0017                     	;# 
   711  0018                     	;# 
   712  0019                     	;# 
   713  001A                     	;# 
   714  001B                     	;# 
   715  001B                     	;# 
   716  001C                     	;# 
   717  001D                     	;# 
   718  001E                     	;# 
   719  001F                     	;# 
   720  0081                     	;# 
   721  0085                     	;# 
   722  0086                     	;# 
   723  0087                     	;# 
   724  0089                     	;# 
   725  008C                     	;# 
   726  008D                     	;# 
   727  008E                     	;# 
   728  008F                     	;# 
   729  0090                     	;# 
   730  0091                     	;# 
   731  0092                     	;# 
   732  0093                     	;# 
   733  0093                     	;# 
   734  0094                     	;# 
   735  0095                     	;# 
   736  0095                     	;# 
   737  0096                     	;# 
   738  0096                     	;# 
   739  0098                     	;# 
   740  0099                     	;# 
   741  009C                     	;# 
   742  009D                     	;# 
   743  009F                     	;# 
   744  0108                     	;# 
   745  0109                     	;# 
   746  010C                     	;# 
   747  010C                     	;# 
   748  010D                     	;# 
   749  010D                     	;# 
   750  010E                     	;# 
   751  010F                     	;# 
   752  0185                     	;# 
   753  0186                     	;# 
   754  018C                     	;# 
   755  0000                     	;# 
   756  0001                     	;# 
   757  0002                     	;# 
   758  0003                     	;# 
   759  0004                     	;# 
   760  0005                     	;# 
   761  0006                     	;# 
   762  0007                     	;# 
   763  0009                     	;# 
   764  000A                     	;# 
   765  000B                     	;# 
   766  000C                     	;# 
   767  000D                     	;# 
   768  000E                     	;# 
   769  000E                     	;# 
   770  000F                     	;# 
   771  0010                     	;# 
   772  0011                     	;# 
   773  0012                     	;# 
   774  0013                     	;# 
   775  0014                     	;# 
   776  0015                     	;# 
   777  0015                     	;# 
   778  0016                     	;# 
   779  0017                     	;# 
   780  0018                     	;# 
   781  0019                     	;# 
   782  001A                     	;# 
   783  001B                     	;# 
   784  001B                     	;# 
   785  001C                     	;# 
   786  001D                     	;# 
   787  001E                     	;# 
   788  001F                     	;# 
   789  0081                     	;# 
   790  0085                     	;# 
   791  0086                     	;# 
   792  0087                     	;# 
   793  0089                     	;# 
   794  008C                     	;# 
   795  008D                     	;# 
   796  008E                     	;# 
   797  008F                     	;# 
   798  0090                     	;# 
   799  0091                     	;# 
   800  0092                     	;# 
   801  0093                     	;# 
   802  0093                     	;# 
   803  0094                     	;# 
   804  0095                     	;# 
   805  0095                     	;# 
   806  0096                     	;# 
   807  0096                     	;# 
   808  0098                     	;# 
   809  0099                     	;# 
   810  009C                     	;# 
   811  009D                     	;# 
   812  009F                     	;# 
   813  0108                     	;# 
   814  0109                     	;# 
   815  010C                     	;# 
   816  010C                     	;# 
   817  010D                     	;# 
   818  010D                     	;# 
   819  010E                     	;# 
   820  010F                     	;# 
   821  0185                     	;# 
   822  0186                     	;# 
   823  018C                     	;# 
   824  0000                     	;# 
   825  0001                     	;# 
   826  0002                     	;# 
   827  0003                     	;# 
   828  0004                     	;# 
   829  0005                     	;# 
   830  0006                     	;# 
   831  0007                     	;# 
   832  0009                     	;# 
   833  000A                     	;# 
   834  000B                     	;# 
   835  000C                     	;# 
   836  000D                     	;# 
   837  000E                     	;# 
   838  000E                     	;# 
   839  000F                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0013                     	;# 
   844  0014                     	;# 
   845  0015                     	;# 
   846  0015                     	;# 
   847  0016                     	;# 
   848  0017                     	;# 
   849  0018                     	;# 
   850  0019                     	;# 
   851  001A                     	;# 
   852  001B                     	;# 
   853  001B                     	;# 
   854  001C                     	;# 
   855  001D                     	;# 
   856  001E                     	;# 
   857  001F                     	;# 
   858  0081                     	;# 
   859  0085                     	;# 
   860  0086                     	;# 
   861  0087                     	;# 
   862  0089                     	;# 
   863  008C                     	;# 
   864  008D                     	;# 
   865  008E                     	;# 
   866  008F                     	;# 
   867  0090                     	;# 
   868  0091                     	;# 
   869  0092                     	;# 
   870  0093                     	;# 
   871  0093                     	;# 
   872  0094                     	;# 
   873  0095                     	;# 
   874  0095                     	;# 
   875  0096                     	;# 
   876  0096                     	;# 
   877  0098                     	;# 
   878  0099                     	;# 
   879  009C                     	;# 
   880  009D                     	;# 
   881  009F                     	;# 
   882  0108                     	;# 
   883  0109                     	;# 
   884  010C                     	;# 
   885  010C                     	;# 
   886  010D                     	;# 
   887  010D                     	;# 
   888  010E                     	;# 
   889  010F                     	;# 
   890  0185                     	;# 
   891  0186                     	;# 
   892  018C                     	;# 
   893  0000                     	;# 
   894  0001                     	;# 
   895  0002                     	;# 
   896  0003                     	;# 
   897  0004                     	;# 
   898  0005                     	;# 
   899  0006                     	;# 
   900  0007                     	;# 
   901  0009                     	;# 
   902  000A                     	;# 
   903  000B                     	;# 
   904  000C                     	;# 
   905  000D                     	;# 
   906  000E                     	;# 
   907  000E                     	;# 
   908  000F                     	;# 
   909  0010                     	;# 
   910  0011                     	;# 
   911  0012                     	;# 
   912  0013                     	;# 
   913  0014                     	;# 
   914  0015                     	;# 
   915  0015                     	;# 
   916  0016                     	;# 
   917  0017                     	;# 
   918  0018                     	;# 
   919  0019                     	;# 
   920  001A                     	;# 
   921  001B                     	;# 
   922  001B                     	;# 
   923  001C                     	;# 
   924  001D                     	;# 
   925  001E                     	;# 
   926  001F                     	;# 
   927  0081                     	;# 
   928  0085                     	;# 
   929  0086                     	;# 
   930  0087                     	;# 
   931  0089                     	;# 
   932  008C                     	;# 
   933  008D                     	;# 
   934  008E                     	;# 
   935  008F                     	;# 
   936  0090                     	;# 
   937  0091                     	;# 
   938  0092                     	;# 
   939  0093                     	;# 
   940  0093                     	;# 
   941  0094                     	;# 
   942  0095                     	;# 
   943  0095                     	;# 
   944  0096                     	;# 
   945  0096                     	;# 
   946  0098                     	;# 
   947  0099                     	;# 
   948  009C                     	;# 
   949  009D                     	;# 
   950  009F                     	;# 
   951  0108                     	;# 
   952  0109                     	;# 
   953  010C                     	;# 
   954  010C                     	;# 
   955  010D                     	;# 
   956  010D                     	;# 
   957  010E                     	;# 
   958  010F                     	;# 
   959  0185                     	;# 
   960  0186                     	;# 
   961  018C                     	;# 
   962  0000                     	;# 
   963  0001                     	;# 
   964  0002                     	;# 
   965  0003                     	;# 
   966  0004                     	;# 
   967  0005                     	;# 
   968  0006                     	;# 
   969  0007                     	;# 
   970  0009                     	;# 
   971  000A                     	;# 
   972  000B                     	;# 
   973  000C                     	;# 
   974  000D                     	;# 
   975  000E                     	;# 
   976  000E                     	;# 
   977  000F                     	;# 
   978  0010                     	;# 
   979  0011                     	;# 
   980  0012                     	;# 
   981  0013                     	;# 
   982  0014                     	;# 
   983  0015                     	;# 
   984  0015                     	;# 
   985  0016                     	;# 
   986  0017                     	;# 
   987  0018                     	;# 
   988  0019                     	;# 
   989  001A                     	;# 
   990  001B                     	;# 
   991  001B                     	;# 
   992  001C                     	;# 
   993  001D                     	;# 
   994  001E                     	;# 
   995  001F                     	;# 
   996  0081                     	;# 
   997  0085                     	;# 
   998  0086                     	;# 
   999  0087                     	;# 
  1000  0089                     	;# 
  1001  008C                     	;# 
  1002  008D                     	;# 
  1003  008E                     	;# 
  1004  008F                     	;# 
  1005  0090                     	;# 
  1006  0091                     	;# 
  1007  0092                     	;# 
  1008  0093                     	;# 
  1009  0093                     	;# 
  1010  0094                     	;# 
  1011  0095                     	;# 
  1012  0095                     	;# 
  1013  0096                     	;# 
  1014  0096                     	;# 
  1015  0098                     	;# 
  1016  0099                     	;# 
  1017  009C                     	;# 
  1018  009D                     	;# 
  1019  009F                     	;# 
  1020  0108                     	;# 
  1021  0109                     	;# 
  1022  010C                     	;# 
  1023  010C                     	;# 
  1024  010D                     	;# 
  1025  010D                     	;# 
  1026  010E                     	;# 
  1027  010F                     	;# 
  1028  0185                     	;# 
  1029  0186                     	;# 
  1030  018C                     	;# 
  1031  0000                     	;# 
  1032  0001                     	;# 
  1033  0002                     	;# 
  1034  0003                     	;# 
  1035  0004                     	;# 
  1036  0005                     	;# 
  1037  0006                     	;# 
  1038  0007                     	;# 
  1039  0009                     	;# 
  1040  000A                     	;# 
  1041  000B                     	;# 
  1042  000C                     	;# 
  1043  000D                     	;# 
  1044  000E                     	;# 
  1045  000E                     	;# 
  1046  000F                     	;# 
  1047  0010                     	;# 
  1048  0011                     	;# 
  1049  0012                     	;# 
  1050  0013                     	;# 
  1051  0014                     	;# 
  1052  0015                     	;# 
  1053  0015                     	;# 
  1054  0016                     	;# 
  1055  0017                     	;# 
  1056  0018                     	;# 
  1057  0019                     	;# 
  1058  001A                     	;# 
  1059  001B                     	;# 
  1060  001B                     	;# 
  1061  001C                     	;# 
  1062  001D                     	;# 
  1063  001E                     	;# 
  1064  001F                     	;# 
  1065  0081                     	;# 
  1066  0085                     	;# 
  1067  0086                     	;# 
  1068  0087                     	;# 
  1069  0089                     	;# 
  1070  008C                     	;# 
  1071  008D                     	;# 
  1072  008E                     	;# 
  1073  008F                     	;# 
  1074  0090                     	;# 
  1075  0091                     	;# 
  1076  0092                     	;# 
  1077  0093                     	;# 
  1078  0093                     	;# 
  1079  0094                     	;# 
  1080  0095                     	;# 
  1081  0095                     	;# 
  1082  0096                     	;# 
  1083  0096                     	;# 
  1084  0098                     	;# 
  1085  0099                     	;# 
  1086  009C                     	;# 
  1087  009D                     	;# 
  1088  009F                     	;# 
  1089  0108                     	;# 
  1090  0109                     	;# 
  1091  010C                     	;# 
  1092  010C                     	;# 
  1093  010D                     	;# 
  1094  010D                     	;# 
  1095  010E                     	;# 
  1096  010F                     	;# 
  1097  0185                     	;# 
  1098  0186                     	;# 
  1099  018C                     	;# 
  1100  0000                     	;# 
  1101  0001                     	;# 
  1102  0002                     	;# 
  1103  0003                     	;# 
  1104  0004                     	;# 
  1105  0005                     	;# 
  1106  0006                     	;# 
  1107  0007                     	;# 
  1108  0009                     	;# 
  1109  000A                     	;# 
  1110  000B                     	;# 
  1111  000C                     	;# 
  1112  000D                     	;# 
  1113  000E                     	;# 
  1114  000E                     	;# 
  1115  000F                     	;# 
  1116  0010                     	;# 
  1117  0011                     	;# 
  1118  0012                     	;# 
  1119  0013                     	;# 
  1120  0014                     	;# 
  1121  0015                     	;# 
  1122  0015                     	;# 
  1123  0016                     	;# 
  1124  0017                     	;# 
  1125  0018                     	;# 
  1126  0019                     	;# 
  1127  001A                     	;# 
  1128  001B                     	;# 
  1129  001B                     	;# 
  1130  001C                     	;# 
  1131  001D                     	;# 
  1132  001E                     	;# 
  1133  001F                     	;# 
  1134  0081                     	;# 
  1135  0085                     	;# 
  1136  0086                     	;# 
  1137  0087                     	;# 
  1138  0089                     	;# 
  1139  008C                     	;# 
  1140  008D                     	;# 
  1141  008E                     	;# 
  1142  008F                     	;# 
  1143  0090                     	;# 
  1144  0091                     	;# 
  1145  0092                     	;# 
  1146  0093                     	;# 
  1147  0093                     	;# 
  1148  0094                     	;# 
  1149  0095                     	;# 
  1150  0095                     	;# 
  1151  0096                     	;# 
  1152  0096                     	;# 
  1153  0098                     	;# 
  1154  0099                     	;# 
  1155  009C                     	;# 
  1156  009D                     	;# 
  1157  009F                     	;# 
  1158  0108                     	;# 
  1159  0109                     	;# 
  1160  010C                     	;# 
  1161  010C                     	;# 
  1162  010D                     	;# 
  1163  010D                     	;# 
  1164  010E                     	;# 
  1165  010F                     	;# 
  1166  0185                     	;# 
  1167  0186                     	;# 
  1168  018C                     	;# 
  1169  0000                     	;# 
  1170  0001                     	;# 
  1171  0002                     	;# 
  1172  0003                     	;# 
  1173  0004                     	;# 
  1174  0005                     	;# 
  1175  0006                     	;# 
  1176  0007                     	;# 
  1177  0009                     	;# 
  1178  000A                     	;# 
  1179  000B                     	;# 
  1180  000C                     	;# 
  1181  000D                     	;# 
  1182  000E                     	;# 
  1183  000E                     	;# 
  1184  000F                     	;# 
  1185  0010                     	;# 
  1186  0011                     	;# 
  1187  0012                     	;# 
  1188  0013                     	;# 
  1189  0014                     	;# 
  1190  0015                     	;# 
  1191  0015                     	;# 
  1192  0016                     	;# 
  1193  0017                     	;# 
  1194  0018                     	;# 
  1195  0019                     	;# 
  1196  001A                     	;# 
  1197  001B                     	;# 
  1198  001B                     	;# 
  1199  001C                     	;# 
  1200  001D                     	;# 
  1201  001E                     	;# 
  1202  001F                     	;# 
  1203  0081                     	;# 
  1204  0085                     	;# 
  1205  0086                     	;# 
  1206  0087                     	;# 
  1207  0089                     	;# 
  1208  008C                     	;# 
  1209  008D                     	;# 
  1210  008E                     	;# 
  1211  008F                     	;# 
  1212  0090                     	;# 
  1213  0091                     	;# 
  1214  0092                     	;# 
  1215  0093                     	;# 
  1216  0093                     	;# 
  1217  0094                     	;# 
  1218  0095                     	;# 
  1219  0095                     	;# 
  1220  0096                     	;# 
  1221  0096                     	;# 
  1222  0098                     	;# 
  1223  0099                     	;# 
  1224  009C                     	;# 
  1225  009D                     	;# 
  1226  009F                     	;# 
  1227  0108                     	;# 
  1228  0109                     	;# 
  1229  010C                     	;# 
  1230  010C                     	;# 
  1231  010D                     	;# 
  1232  010D                     	;# 
  1233  010E                     	;# 
  1234  010F                     	;# 
  1235  0185                     	;# 
  1236  0186                     	;# 
  1237  018C                     	;# 
  1238  001F                     _ADCON0	set	31
  1239  001E                     _ADRES	set	30
  1240  0005                     _PORTA	set	5
  1241  0006                     _PORTB	set	6
  1242  0007                     _PORTC	set	7
  1243  0010                     _T1CON	set	16
  1244  000F                     _TMR1H	set	15
  1245  000E                     _TMR1L	set	14
  1246  005F                     _GIE	set	95
  1247  00F9                     _GO_nDONE	set	249
  1248  005E                     _PEIE	set	94
  1249  002C                     _RA4	set	44
  1250  0032                     _RB2	set	50
  1251  0033                     _RB3	set	51
  1252  0034                     _RB4	set	52
  1253  0035                     _RB5	set	53
  1254  0060                     _TMR1IF	set	96
  1255  009F                     _ADCON1	set	159
  1256  009D                     _FVRCON	set	157
  1257  0090                     _OSCCON	set	144
  1258  0085                     _TRISA	set	133
  1259  0086                     _TRISB	set	134
  1260  0087                     _TRISC	set	135
  1261  0408                     _PS0	set	1032
  1262  0409                     _PS1	set	1033
  1263  040A                     _PS2	set	1034
  1264  040B                     _PSA	set	1035
  1265  0460                     _TMR1IE	set	1120
  1266  0185                     _ANSELA	set	389
  1267  0186                     _ANSELB	set	390
  1268                           
  1269                           	psect	text0
  1270  0000                     __ptext0:	
  1271                           ; #config settings
  1272                           
  1273                           
  1274                           ;psect for function _TMR1_ISR
  1275  0000                     
  1276                           	psect	cinit
  1277  0013                     start_initialization:	
  1278  0013                     __initialization:	
  1279                           
  1280                           ; Clear objects allocated to COMMON
  1281  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1282  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1283  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1284  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1285                           
  1286                           ; Clear objects allocated to BANK0
  1287  0017  1383               	bcf	3,7	;select IRP bank0
  1288  0018  3020               	movlw	low __pbssBANK0
  1289  0019  0084               	movwf	4
  1290  001A  3060               	movlw	low (__pbssBANK0+64)
  1291  001B  158A  26B3  118A   	fcall	clear_ram0
  1292                           
  1293                           ; Clear objects allocated to BANK1
  1294  001E  30A0               	movlw	low __pbssBANK1
  1295  001F  0084               	movwf	4
  1296  0020  30D5               	movlw	low (__pbssBANK1+53)
  1297  0021  158A  26B3         	fcall	clear_ram0
  1298  0023                     end_of_initialization:	
  1299                           ;End of C runtime variable initialization code
  1300                           
  1301  0023                     __end_of__initialization:	
  1302  0023  0183               	clrf	3
  1303  0024  118A  2D63         	ljmp	_main	;jump to C main() function
  1304                           
  1305                           	psect	bssCOMMON
  1306  0076                     __pbssCOMMON:	
  1307  0076                     _WDT:	
  1308  0076                     	ds	2
  1309  0078                     _LED:	
  1310  0078                     	ds	1
  1311  0079                     _LightsControl:	
  1312  0079                     	ds	1
  1313                           
  1314                           	psect	bssBANK0
  1315  0020                     __pbssBANK0:	
  1316  0020                     _myMain:	
  1317  0020                     	ds	8
  1318  0028                     __CDS:	
  1319  0028                     	ds	5
  1320  002D                     _Timer1:	
  1321  002D                     	ds	3
  1322  0030                     _Lights:	
  1323  0030                     	ds	1
  1324  0031                     __PIR:	
  1325  0031                     	ds	47
  1326                           
  1327                           	psect	bssBANK1
  1328  00A0                     __pbssBANK1:	
  1329  00A0                     _Load:	
  1330  00A0                     	ds	34
  1331  00C2                     _Lights1:	
  1332  00C2                     	ds	7
  1333  00C9                     _VarErrLED:	
  1334  00C9                     	ds	4
  1335  00CD                     _VarLED1:	
  1336  00CD                     	ds	4
  1337  00D1                     _VarLED2:	
  1338  00D1                     	ds	4
  1339                           
  1340                           	psect	clrtext
  1341  0EB3                     clear_ram0:	
  1342                           ;	Called with FSR containing the base address, and
  1343                           ;	W with the last address+1
  1344                           
  1345  0EB3  0064               	clrwdt	;clear the watchdog before getting into this loop
  1346  0EB4                     clrloop0:	
  1347  0EB4  0180               	clrf	0	;clear RAM location pointed to by FSR
  1348  0EB5  0A84               	incf	4,f	;increment pointer
  1349  0EB6  0604               	xorwf	4,w	;XOR with final address
  1350  0EB7  1903               	btfsc	3,2	;have we reached the end yet?
  1351  0EB8  3400               	retlw	0	;all done for this memory range, return
  1352  0EB9  0604               	xorwf	4,w	;XOR again to restore value
  1353  0EBA  2EB4               	goto	clrloop0	;do the next byte
  1354                           
  1355                           	psect	cstackBANK1
  1356  00D5                     __pcstackBANK1:	
  1357  00D5                     ?_main:	
  1358  00D5                     main@argc:	
  1359                           ; 2 bytes @ 0x0
  1360                           
  1361                           
  1362                           ; 2 bytes @ 0x0
  1363  00D5                     	ds	2
  1364  00D7                     main@argv:	
  1365                           
  1366                           ; 2 bytes @ 0x2
  1367  00D7                     	ds	2
  1368                           
  1369                           	psect	cstackCOMMON
  1370  0070                     __pcstackCOMMON:	
  1371  0070                     ?_setLED_Initialization:	
  1372  0070                     ?_setLED_Main:	
  1373                           ; 0 bytes @ 0x0
  1374                           
  1375  0070                     ?_Fosc_Set:	
  1376                           ; 0 bytes @ 0x0
  1377                           
  1378  0070                     ?_IO_Set:	
  1379                           ; 0 bytes @ 0x0
  1380                           
  1381  0070                     ?_TMR1_Set:	
  1382                           ; 0 bytes @ 0x0
  1383                           
  1384  0070                     ?_ADC_Set:	
  1385                           ; 0 bytes @ 0x0
  1386                           
  1387  0070                     ?_WDT_Set:	
  1388                           ; 0 bytes @ 0x0
  1389                           
  1390  0070                     ?_TMR1_ISR:	
  1391                           ; 0 bytes @ 0x0
  1392                           
  1393  0070                     ??_TMR1_ISR:	
  1394                           ; 0 bytes @ 0x0
  1395                           
  1396  0070                     ?_Timeout_Counter:	
  1397                           ; 0 bytes @ 0x0
  1398                           
  1399  0070                     ?_set_TimeoutCleared:	
  1400                           ; 0 bytes @ 0x0
  1401                           
  1402  0070                     ?_WDT_Clearing:	
  1403                           ; 0 bytes @ 0x0
  1404                           
  1405  0070                     ?_myMain_Initialization:	
  1406                           ; 0 bytes @ 0x0
  1407                           
  1408  0070                     ?_Load_Initialization:	
  1409                           ; 0 bytes @ 0x0
  1410                           
  1411  0070                     ?_Lights_Initialization:	
  1412                           ; 0 bytes @ 0x0
  1413                           
  1414  0070                     ?_PIR_Initialization:	
  1415                           ; 0 bytes @ 0x0
  1416                           
  1417  0070                     ?_getLoad_AD:	
  1418                           ; 0 bytes @ 0x0
  1419                           
  1420  0070                     ?_my_MainTimer:	
  1421                           ; 0 bytes @ 0x0
  1422                           
  1423  0070                     ?_Load_Main:	
  1424                           ; 0 bytes @ 0x0
  1425                           
  1426  0070                     ?_Lights_Main:	
  1427                           ; 0 bytes @ 0x0
  1428                           
  1429  0070                     ?_PIR_Main:	
  1430                           ; 0 bytes @ 0x0
  1431                           
  1432  0070                     ?_LightsPointSelect:	
  1433                           ; 0 bytes @ 0x0
  1434                           
  1435  0070                     ?_setLoad_AH_AL_Restore:	
  1436                           ; 0 bytes @ 0x0
  1437                           
  1438  0070                     ?_setLights_Initialization:	
  1439                           ; 0 bytes @ 0x0
  1440                           
  1441  0070                     ?_setLights_Main:	
  1442                           ; 0 bytes @ 0x0
  1443                           
  1444  0070                     ?_Lights_Control:	
  1445                           ; 0 bytes @ 0x0
  1446                           
  1447  0070                     ?_Lights_Close:	
  1448                           ; 0 bytes @ 0x0
  1449                           
  1450  0070                     ?_CDS_Initialization:	
  1451                           ; 0 bytes @ 0x0
  1452                           
  1453  0070                     ?_CDS_Main:	
  1454                           ; 0 bytes @ 0x0
  1455                           
  1456  0070                     ?_LedPointSelect:	
  1457                           ; 0 bytes @ 0x0
  1458                           
  1459  0070                     ?_LED_Initialization:	
  1460                           ; 0 bytes @ 0x0
  1461                           
  1462  0070                     ?_LED_Main:	
  1463                           ; 0 bytes @ 0x0
  1464                           
  1465  0070                     ?_Mcu_Initialization:	
  1466                           ; 0 bytes @ 0x0
  1467                           
  1468  0070                     ?_ISR:	
  1469                           ; 0 bytes @ 0x0
  1470                           
  1471  0070                     ??_ISR:	
  1472                           ; 0 bytes @ 0x0
  1473                           
  1474  0070                     ?_WDT_Main:	
  1475                           ; 0 bytes @ 0x0
  1476                           
  1477  0070                     ?_getMain_AD_Safe:	
  1478                           ; 0 bytes @ 0x0
  1479                           
  1480  0070                     ?_getLoad_Status:	
  1481                           ; 1 bytes @ 0x0
  1482                           
  1483  0070                     ?_getLights_Status:	
  1484                           ; 1 bytes @ 0x0
  1485                           
  1486  0070                     ?_getCDS_Status:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  0070                     ?_getMain_LightsStatus:	
  1490                           ; 1 bytes @ 0x0
  1491                           
  1492  0070                     ?_getMain_All_Error_Status:	
  1493                           ; 1 bytes @ 0x0
  1494                           
  1495  0070                     ?_getMain_Lights_Count:	
  1496                           ; 1 bytes @ 0x0
  1497                           
  1498                           
  1499                           ; 1 bytes @ 0x0
  1500  0070                     	ds	4
  1501  0074                     ??_getMain_AD_Safe:	
  1502  0074                     ??_Fosc_Set:	
  1503                           ; 0 bytes @ 0x4
  1504                           
  1505  0074                     ??_IO_Set:	
  1506                           ; 0 bytes @ 0x4
  1507                           
  1508  0074                     ??_TMR1_Set:	
  1509                           ; 0 bytes @ 0x4
  1510                           
  1511  0074                     ??_ADC_Set:	
  1512                           ; 0 bytes @ 0x4
  1513                           
  1514  0074                     ??_WDT_Set:	
  1515                           ; 0 bytes @ 0x4
  1516                           
  1517  0074                     ??_Timeout_Counter:	
  1518                           ; 0 bytes @ 0x4
  1519                           
  1520  0074                     ??_set_TimeoutCleared:	
  1521                           ; 0 bytes @ 0x4
  1522                           
  1523  0074                     ??_WDT_Clearing:	
  1524                           ; 0 bytes @ 0x4
  1525                           
  1526  0074                     ??_myMain_Initialization:	
  1527                           ; 0 bytes @ 0x4
  1528                           
  1529  0074                     ??_PIR_Initialization:	
  1530                           ; 0 bytes @ 0x4
  1531                           
  1532  0074                     ??_my_MainTimer:	
  1533                           ; 0 bytes @ 0x4
  1534                           
  1535  0074                     ??_LightsPointSelect:	
  1536                           ; 0 bytes @ 0x4
  1537                           
  1538  0074                     ??_setLoad_AH_AL_Restore:	
  1539                           ; 0 bytes @ 0x4
  1540                           
  1541  0074                     ??_CDS_Initialization:	
  1542                           ; 0 bytes @ 0x4
  1543                           
  1544  0074                     ??_getCDS_Status:	
  1545                           ; 0 bytes @ 0x4
  1546                           
  1547  0074                     ??_LedPointSelect:	
  1548                           ; 0 bytes @ 0x4
  1549                           
  1550  0074                     ??_WDT_Main:	
  1551                           ; 0 bytes @ 0x4
  1552                           
  1553  0074                     ??_getMain_All_Error_Status:	
  1554                           ; 0 bytes @ 0x4
  1555                           
  1556  0074                     ??_getMain_Lights_Count:	
  1557                           ; 0 bytes @ 0x4
  1558                           
  1559  0074                     ??___awdiv:	
  1560                           ; 0 bytes @ 0x4
  1561                           
  1562  0074                     ??___lwdiv:	
  1563                           ; 0 bytes @ 0x4
  1564                           
  1565  0074                     ?_getAD:	
  1566                           ; 0 bytes @ 0x4
  1567                           
  1568  0074                     getCDS_Status@result:	
  1569                           ; 1 bytes @ 0x4
  1570                           
  1571  0074                     getAD@adcon1:	
  1572                           ; 1 bytes @ 0x4
  1573                           
  1574  0074                     getMain_AD_Safe@result:	
  1575                           ; 1 bytes @ 0x4
  1576                           
  1577                           
  1578                           ; 1 bytes @ 0x4
  1579  0074                     	ds	1
  1580  0075                     ??_getAD:	
  1581  0075                     ??_Mcu_Initialization:	
  1582                           ; 0 bytes @ 0x5
  1583                           
  1584  0075                     LedPointSelect@led:	
  1585                           ; 0 bytes @ 0x5
  1586                           
  1587  0075                     getAD@adcon0:	
  1588                           ; 1 bytes @ 0x5
  1589                           
  1590  0075                     setLoad_AH_AL_Restore@i:	
  1591                           ; 1 bytes @ 0x5
  1592                           
  1593  0075                     LightsPointSelect@lights:	
  1594                           ; 1 bytes @ 0x5
  1595                           
  1596                           
  1597                           ; 1 bytes @ 0x5
  1598  0075                     	ds	1
  1599  0076                     ??_setLED_Initialization:	
  1600  0076                     ??_setLED:	
  1601                           ; 0 bytes @ 0x6
  1602                           
  1603  0076                     ??_Load_Initialization:	
  1604                           ; 0 bytes @ 0x6
  1605                           
  1606  0076                     ??_Lights_Initialization:	
  1607                           ; 0 bytes @ 0x6
  1608                           
  1609  0076                     ??_Lights_Main:	
  1610                           ; 0 bytes @ 0x6
  1611                           
  1612  0076                     ??_getLights_Status:	
  1613                           ; 0 bytes @ 0x6
  1614                           
  1615  0076                     ??_setLights_Initialization:	
  1616                           ; 0 bytes @ 0x6
  1617                           
  1618  0076                     ??_setLights_Main:	
  1619                           ; 0 bytes @ 0x6
  1620                           
  1621  0076                     ??_LED_Initialization:	
  1622                           ; 0 bytes @ 0x6
  1623                           
  1624  0076                     ??_LED_Main:	
  1625                           ; 0 bytes @ 0x6
  1626                           
  1627                           
  1628                           	psect	cstackBANK0
  1629  0060                     __pcstackBANK0:	
  1630                           ; 0 bytes @ 0x6
  1631                           
  1632  0060                     ??_setLED_Main:	
  1633  0060                     ?_setLED:	
  1634                           ; 0 bytes @ 0x0
  1635                           
  1636  0060                     ??_getLoad_AD:	
  1637                           ; 0 bytes @ 0x0
  1638                           
  1639  0060                     ?_setLights_Trigger:	
  1640                           ; 0 bytes @ 0x0
  1641                           
  1642  0060                     ??_Lights_Control:	
  1643                           ; 0 bytes @ 0x0
  1644                           
  1645  0060                     ?_setLights:	
  1646                           ; 0 bytes @ 0x0
  1647                           
  1648  0060                     ??_CDS_Main:	
  1649                           ; 0 bytes @ 0x0
  1650                           
  1651  0060                     ?_getCDS_AD:	
  1652                           ; 0 bytes @ 0x0
  1653                           
  1654  0060                     ??_getMain_LightsStatus:	
  1655                           ; 0 bytes @ 0x0
  1656                           
  1657  0060                     ?___awdiv:	
  1658                           ; 0 bytes @ 0x0
  1659                           
  1660  0060                     ?___lwdiv:	
  1661                           ; 2 bytes @ 0x0
  1662                           
  1663  0060                     getCDS_AD@channel2:	
  1664                           ; 2 bytes @ 0x0
  1665                           
  1666  0060                     setLED@command:	
  1667                           ; 1 bytes @ 0x0
  1668                           
  1669  0060                     getMain_All_Error_Status@command:	
  1670                           ; 1 bytes @ 0x0
  1671                           
  1672  0060                     getMain_Lights_Count@count:	
  1673                           ; 1 bytes @ 0x0
  1674                           
  1675  0060                     setLights_Initialization@lights:	
  1676                           ; 1 bytes @ 0x0
  1677                           
  1678  0060                     getLights_Status@lights:	
  1679                           ; 1 bytes @ 0x0
  1680                           
  1681  0060                     setLights_Trigger@command:	
  1682                           ; 1 bytes @ 0x0
  1683                           
  1684  0060                     setLights@status:	
  1685                           ; 1 bytes @ 0x0
  1686                           
  1687  0060                     ___awdiv@divisor:	
  1688                           ; 1 bytes @ 0x0
  1689                           
  1690  0060                     ___lwdiv@divisor:	
  1691                           ; 2 bytes @ 0x0
  1692                           
  1693                           
  1694                           ; 2 bytes @ 0x0
  1695  0060                     	ds	1
  1696  0061                     ??_setLights_Trigger:	
  1697  0061                     ??_setLights:	
  1698                           ; 0 bytes @ 0x1
  1699                           
  1700  0061                     ??_getCDS_AD:	
  1701                           ; 0 bytes @ 0x1
  1702                           
  1703  0061                     setLED@led:	
  1704                           ; 0 bytes @ 0x1
  1705                           
  1706  0061                     getMain_LightsStatus@count:	
  1707                           ; 1 bytes @ 0x1
  1708                           
  1709  0061                     getMain_Lights_Count@status2:	
  1710                           ; 1 bytes @ 0x1
  1711                           
  1712  0061                     getLights_Status@result:	
  1713                           ; 1 bytes @ 0x1
  1714                           
  1715  0061                     _getMain_All_Error_Status$2042:	
  1716                           ; 1 bytes @ 0x1
  1717                           
  1718                           
  1719                           ; 2 bytes @ 0x1
  1720  0061                     	ds	1
  1721  0062                     ??_getLoad_Status:	
  1722  0062                     setLED_Initialization@led:	
  1723                           ; 0 bytes @ 0x2
  1724                           
  1725  0062                     setLED_Main@led:	
  1726                           ; 1 bytes @ 0x2
  1727                           
  1728  0062                     getMain_Lights_Count@status3:	
  1729                           ; 1 bytes @ 0x2
  1730                           
  1731  0062                     getLoad_AD@channel:	
  1732                           ; 1 bytes @ 0x2
  1733                           
  1734  0062                     setLights_Trigger@lights:	
  1735                           ; 1 bytes @ 0x2
  1736                           
  1737  0062                     setLights@lights:	
  1738                           ; 1 bytes @ 0x2
  1739                           
  1740  0062                     Lights_Control@lights:	
  1741                           ; 1 bytes @ 0x2
  1742                           
  1743  0062                     getMain_LightsStatus@i:	
  1744                           ; 1 bytes @ 0x2
  1745                           
  1746  0062                     ___awdiv@dividend:	
  1747                           ; 2 bytes @ 0x2
  1748                           
  1749  0062                     ___lwdiv@dividend:	
  1750                           ; 2 bytes @ 0x2
  1751                           
  1752                           
  1753                           ; 2 bytes @ 0x2
  1754  0062                     	ds	1
  1755  0063                     getCDS_AD@i:	
  1756  0063                     getMain_All_Error_Status@status:	
  1757                           ; 1 bytes @ 0x3
  1758                           
  1759  0063                     getMain_Lights_Count@status1:	
  1760                           ; 1 bytes @ 0x3
  1761                           
  1762  0063                     getLoad_AD@j:	
  1763                           ; 1 bytes @ 0x3
  1764                           
  1765  0063                     getLoad_Status@result:	
  1766                           ; 1 bytes @ 0x3
  1767                           
  1768  0063                     setLights_Main@clear:	
  1769                           ; 1 bytes @ 0x3
  1770                           
  1771                           
  1772                           ; 1 bytes @ 0x3
  1773  0063                     	ds	1
  1774  0064                     ??_PIR_Main:	
  1775  0064                     getCDS_AD@j:	
  1776                           ; 0 bytes @ 0x4
  1777                           
  1778  0064                     getMain_LightsStatus@status:	
  1779                           ; 1 bytes @ 0x4
  1780                           
  1781  0064                     getLoad_AD@i:	
  1782                           ; 1 bytes @ 0x4
  1783                           
  1784  0064                     getLoad_Status@status:	
  1785                           ; 1 bytes @ 0x4
  1786                           
  1787  0064                     setLights_Main@lights:	
  1788                           ; 1 bytes @ 0x4
  1789                           
  1790  0064                     ___awdiv@counter:	
  1791                           ; 1 bytes @ 0x4
  1792                           
  1793  0064                     ___lwdiv@counter:	
  1794                           ; 1 bytes @ 0x4
  1795                           
  1796                           
  1797                           ; 1 bytes @ 0x4
  1798  0064                     	ds	1
  1799  0065                     ??_Load_Main:	
  1800  0065                     ??_Lights_Close:	
  1801                           ; 0 bytes @ 0x5
  1802                           
  1803  0065                     getCDS_AD@channel1:	
  1804                           ; 0 bytes @ 0x5
  1805                           
  1806  0065                     ___awdiv@sign:	
  1807                           ; 1 bytes @ 0x5
  1808                           
  1809  0065                     ___lwdiv@quotient:	
  1810                           ; 1 bytes @ 0x5
  1811                           
  1812                           
  1813                           ; 2 bytes @ 0x5
  1814  0065                     	ds	1
  1815  0066                     Lights_Close@status:	
  1816  0066                     ___awdiv@quotient:	
  1817                           ; 1 bytes @ 0x6
  1818                           
  1819                           
  1820                           ; 2 bytes @ 0x6
  1821  0066                     	ds	1
  1822  0067                     Load_Main@i:	
  1823                           
  1824                           ; 1 bytes @ 0x7
  1825  0067                     	ds	1
  1826  0068                     ?_getPIR_AD:	
  1827  0068                     getPIR_AD@channel2:	
  1828                           ; 0 bytes @ 0x8
  1829                           
  1830  0068                     _Load_Main$2283:	
  1831                           ; 1 bytes @ 0x8
  1832                           
  1833                           
  1834                           ; 2 bytes @ 0x8
  1835  0068                     	ds	1
  1836  0069                     ??_getPIR_AD:	
  1837                           
  1838                           ; 0 bytes @ 0x9
  1839  0069                     	ds	3
  1840  006C                     getPIR_AD@j:	
  1841                           
  1842                           ; 1 bytes @ 0xC
  1843  006C                     	ds	1
  1844  006D                     getPIR_AD@channel1:	
  1845                           
  1846                           ; 1 bytes @ 0xD
  1847  006D                     	ds	1
  1848  006E                     getPIR_AD@i:	
  1849                           
  1850                           ; 1 bytes @ 0xE
  1851  006E                     	ds	1
  1852  006F                     ??_main:	
  1853                           
  1854                           ; 0 bytes @ 0xF
  1855  006F                     	ds	1
  1856                           
  1857                           	psect	maintext
  1858  0563                     __pmaintext:	
  1859 ;;
  1860 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1861 ;;
  1862 ;; *************** function _main *****************
  1863 ;; Defined at:
  1864 ;;		line 7 in file "../src/Main_B1.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;  argc            2    0[BANK1 ] int 
  1867 ;;  argv            2    2[BANK1 ] PTR PTR unsigned char 
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  2    0[BANK1 ] int 
  1872 ;; Registers used:
  1873 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1874 ;; Tracked objects:
  1875 ;;		On entry : 17F/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1879 ;;      Params:         0       0       4       0
  1880 ;;      Locals:         0       0       0       0
  1881 ;;      Temps:          0       1       0       0
  1882 ;;      Totals:         0       1       4       0
  1883 ;;Total ram usage:        5 bytes
  1884 ;; Hardware stack levels required when called:    6
  1885 ;; This function calls:
  1886 ;;		_CDS_Initialization
  1887 ;;		_CDS_Main
  1888 ;;		_LED_Initialization
  1889 ;;		_LED_Main
  1890 ;;		_Lights_Initialization
  1891 ;;		_Lights_Main
  1892 ;;		_Load_Initialization
  1893 ;;		_Load_Main
  1894 ;;		_Mcu_Initialization
  1895 ;;		_PIR_Initialization
  1896 ;;		_PIR_Main
  1897 ;;		_WDT_Main
  1898 ;;		_getCDS_AD
  1899 ;;		_getLoad_AD
  1900 ;;		_getPIR_AD
  1901 ;;		_myMain_Initialization
  1902 ;;		_my_MainTimer
  1903 ;; This function is called by:
  1904 ;;		Startup code after reset
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           
  1909                           ;psect for function _main
  1910  0563                     _main:	
  1911                           
  1912                           ;Main_B1.c: 8: myMain_Initialization();
  1913                           
  1914                           ;incstack = 0
  1915                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1916  0563  158A  268A  118A   	fcall	_myMain_Initialization
  1917                           
  1918                           ;Main_B1.c: 9: Mcu_Initialization();
  1919  0566  158A  2720  118A   	fcall	_Mcu_Initialization
  1920                           
  1921                           ;Main_B1.c: 10: ;;
  1922                           ;Main_B1.c: 11: LED_Initialization();
  1923  0569  158A  26C6  118A   	fcall	_LED_Initialization
  1924                           
  1925                           ;Main_B1.c: 12: ;;
  1926                           ;Main_B1.c: 14: ;;
  1927                           ;Main_B1.c: 15: ;;
  1928                           ;Main_B1.c: 16: Load_Initialization();
  1929  056C  158A  2698  118A   	fcall	_Load_Initialization
  1930                           
  1931                           ;Main_B1.c: 17: ;;
  1932                           ;Main_B1.c: 18: ;;
  1933                           ;Main_B1.c: 20: ;;
  1934                           ;Main_B1.c: 21: Lights_Initialization();
  1935  056F  158A  268F  118A   	fcall	_Lights_Initialization
  1936                           
  1937                           ;Main_B1.c: 22: CDS_Initialization();
  1938  0572  158A  268B  118A   	fcall	_CDS_Initialization
  1939                           
  1940                           ;Main_B1.c: 23: PIR_Initialization();
  1941  0575  158A  275E  118A   	fcall	_PIR_Initialization
  1942                           
  1943                           ;Main_B1.c: 24: ;;
  1944                           ;Main_B1.c: 25: ;;
  1945                           ;Main_B1.c: 26: __nop();
  1946  0578  0000               	nop
  1947  0579                     l4053:	
  1948                           ;Main_B1.c: 27: ;;
  1949                           ;Main_B1.c: 29: while (1) {
  1950                           
  1951                           
  1952                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  1953  0579  1283               	bcf	3,5	;RP0=0, select bank0
  1954  057A  1303               	bcf	3,6	;RP1=0, select bank0
  1955  057B  1C20               	btfss	_myMain,0
  1956  057C  2D95               	goto	l4061
  1957                           
  1958                           ;Main_B1.c: 37: getLoad_AD(0x01);
  1959  057D  3001               	movlw	1
  1960  057E  118A  23EF  118A   	fcall	_getLoad_AD
  1961                           
  1962                           ;Main_B1.c: 49: getCDS_AD(0x09, 0x31);
  1963  0581  3031               	movlw	49
  1964  0582  1283               	bcf	3,5	;RP0=0, select bank0
  1965  0583  1303               	bcf	3,6	;RP1=0, select bank0
  1966  0584  00EF               	movwf	??_main
  1967  0585  086F               	movf	??_main,w
  1968  0586  00E0               	movwf	getCDS_AD@channel2
  1969  0587  3009               	movlw	9
  1970  0588  118A  2750  118A   	fcall	_getCDS_AD
  1971                           
  1972                           ;Main_B1.c: 53: getPIR_AD(0x05, 0x0d);
  1973  058B  300D               	movlw	13
  1974  058C  1283               	bcf	3,5	;RP0=0, select bank0
  1975  058D  1303               	bcf	3,6	;RP1=0, select bank0
  1976  058E  00EF               	movwf	??_main
  1977  058F  086F               	movf	??_main,w
  1978  0590  00E8               	movwf	getPIR_AD@channel2
  1979  0591  3005               	movlw	5
  1980  0592  118A  2307  118A   	fcall	_getPIR_AD
  1981  0595                     l4061:	
  1982                           
  1983                           ;Main_B1.c: 56: }
  1984                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  1985  0595  1283               	bcf	3,5	;RP0=0, select bank0
  1986  0596  1303               	bcf	3,6	;RP1=0, select bank0
  1987  0597  1C2D               	btfss	_Timer1,0
  1988  0598  2D79               	goto	l4053
  1989                           
  1990                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  1991  0599  102D               	bcf	_Timer1,0
  1992                           
  1993                           ;Main_B1.c: 94: my_MainTimer();
  1994  059A  158A  27A5  118A   	fcall	_my_MainTimer
  1995                           
  1996                           ;Main_B1.c: 95: WDT_Main();
  1997  059D  158A  272F  118A   	fcall	_WDT_Main
  1998                           
  1999                           ;Main_B1.c: 96: ;;
  2000                           ;Main_B1.c: 97: ;;
  2001                           ;Main_B1.c: 98: if (myMain.PowerON == 1) {
  2002  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  2003  05A1  1303               	bcf	3,6	;RP1=0, select bank0
  2004  05A2  1C20               	btfss	_myMain,0
  2005  05A3  2D79               	goto	l4053
  2006                           
  2007                           ;Main_B1.c: 99: ;;
  2008                           ;Main_B1.c: 101: LED_Main();
  2009  05A4  158A  26D2  118A   	fcall	_LED_Main
  2010                           
  2011                           ;Main_B1.c: 102: ;;
  2012                           ;Main_B1.c: 104: ;;
  2013                           ;Main_B1.c: 105: ;;
  2014                           ;Main_B1.c: 106: Load_Main();
  2015  05A7  118A  21B5  118A   	fcall	_Load_Main
  2016                           
  2017                           ;Main_B1.c: 107: ;;
  2018                           ;Main_B1.c: 109: Lights_Main();
  2019  05AA  158A  26BB  118A   	fcall	_Lights_Main
  2020                           
  2021                           ;Main_B1.c: 110: ;;
  2022                           ;Main_B1.c: 111: ;;
  2023                           ;Main_B1.c: 112: CDS_Main();
  2024  05AD  118A  25B4  118A   	fcall	_CDS_Main
  2025                           
  2026                           ;Main_B1.c: 113: PIR_Main();
  2027  05B0  118A  2026  118A   	fcall	_PIR_Main
  2028                           
  2029                           ;Main_B1.c: 115: ;;
  2030                           ;Main_B1.c: 116: ;;
  2031                           ;Main_B1.c: 117: ;;
  2032  05B3  2D79               	goto	l4053
  2033  05B4                     __end_of_main:	
  2034                           ;Main_B1.c: 125: }
  2035                           ;Main_B1.c: 126: }
  2036                           ;Main_B1.c: 160: }
  2037                           ;Main_B1.c: 161: return (0);
  2038                           ;	Return value of _main is never used
  2039                           
  2040                           
  2041                           	psect	text1
  2042  0FA5                     __ptext1:	
  2043 ;; *************** function _my_MainTimer *****************
  2044 ;; Defined at:
  2045 ;;		line 180 in file "../src/Main_B1.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;		None
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;		None
  2050 ;; Return value:  Size  Location     Type
  2051 ;;		None               void
  2052 ;; Registers used:
  2053 ;;		wreg, status,2
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2059 ;;      Params:         0       0       0       0
  2060 ;;      Locals:         0       0       0       0
  2061 ;;      Temps:          0       0       0       0
  2062 ;;      Totals:         0       0       0       0
  2063 ;;Total ram usage:        0 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    2
  2066 ;; This function calls:
  2067 ;;		Nothing
  2068 ;; This function is called by:
  2069 ;;		_main
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           
  2074                           ;psect for function _my_MainTimer
  2075  0FA5                     _my_MainTimer:	
  2076                           
  2077                           ;Main_B1.c: 182: if (myMain.PowerON == 0) {
  2078                           
  2079                           ;incstack = 0
  2080                           ; Regs used in _my_MainTimer: [wreg+status,2]
  2081  0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  2082  0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  2083  0FA7  1820               	btfsc	_myMain,0
  2084  0FA8  0008               	return
  2085                           
  2086                           ;Main_B1.c: 183: myMain.PowerCount++;
  2087  0FA9  3001               	movlw	1
  2088  0FAA  07A2               	addwf	_myMain+2,f
  2089  0FAB  1803               	skipnc
  2090  0FAC  0AA3               	incf	_myMain+3,f
  2091  0FAD  3000               	movlw	0
  2092  0FAE  07A3               	addwf	_myMain+3,f
  2093                           
  2094                           ;Main_B1.c: 184: if (myMain.PowerCount == 150)
  2095  0FAF  3096               	movlw	150
  2096  0FB0  0622               	xorwf	_myMain+2,w
  2097  0FB1  0423               	iorwf	_myMain+3,w
  2098  0FB2  1D03               	skipz
  2099  0FB3  0008               	return
  2100                           
  2101                           ;Main_B1.c: 185: {
  2102                           ;Main_B1.c: 186: myMain.PowerCount = 0;
  2103  0FB4  01A2               	clrf	_myMain+2
  2104  0FB5  01A3               	clrf	_myMain+3
  2105                           
  2106                           ;Main_B1.c: 187: myMain.PowerON = 1;
  2107  0FB6  1420               	bsf	_myMain,0
  2108                           
  2109                           ;Main_B1.c: 193: ;;
  2110                           ;Main_B1.c: 194: myMain.SelfTest = 1;
  2111  0FB7  1620               	bsf	_myMain,4
  2112                           
  2113                           ;Main_B1.c: 203: }
  2114                           ;Main_B1.c: 204: } else {
  2115                           
  2116                           ;Main_B1.c: 196: ;;
  2117  0FB8  0008               	return
  2118  0FB9                     __end_of_my_MainTimer:	
  2119                           
  2120                           	psect	text2
  2121  0E8A                     __ptext2:	
  2122 ;; *************** function _myMain_Initialization *****************
  2123 ;; Defined at:
  2124 ;;		line 167 in file "../src/Main_B1.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;		None
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;		None               void
  2131 ;; Registers used:
  2132 ;;		None
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2138 ;;      Params:         0       0       0       0
  2139 ;;      Locals:         0       0       0       0
  2140 ;;      Temps:          0       0       0       0
  2141 ;;      Totals:         0       0       0       0
  2142 ;;Total ram usage:        0 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    2
  2145 ;; This function calls:
  2146 ;;		Nothing
  2147 ;; This function is called by:
  2148 ;;		_main
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           
  2153                           ;psect for function _myMain_Initialization
  2154  0E8A                     _myMain_Initialization:	
  2155                           
  2156                           ;incstack = 0
  2157                           ; Regs used in _myMain_Initialization: []
  2158  0E8A  0008               	return
  2159  0E8B                     __end_of_myMain_Initialization:	
  2160                           
  2161                           	psect	text3
  2162  0307                     __ptext3:	
  2163 ;; *************** function _getPIR_AD *****************
  2164 ;; Defined at:
  2165 ;;		line 169 in file "../src/PIR_B1.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;  channel1        1    wreg     unsigned char 
  2168 ;;  channel2        1    8[BANK0 ] unsigned char 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;  channel1        1   13[BANK0 ] unsigned char 
  2171 ;;  i               1   14[BANK0 ] unsigned char 
  2172 ;;  j               1   12[BANK0 ] unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;		None               void
  2175 ;; Registers used:
  2176 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2182 ;;      Params:         0       1       0       0
  2183 ;;      Locals:         0       3       0       0
  2184 ;;      Temps:          0       3       0       0
  2185 ;;      Totals:         0       7       0       0
  2186 ;;Total ram usage:        7 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    4
  2189 ;; This function calls:
  2190 ;;		___awdiv
  2191 ;;		___lwdiv
  2192 ;;		_getAD
  2193 ;; This function is called by:
  2194 ;;		_main
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198                           
  2199                           ;psect for function _getPIR_AD
  2200  0307                     _getPIR_AD:	
  2201                           
  2202                           ;incstack = 0
  2203                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2204                           ;getPIR_AD@channel1 stored from wreg
  2205  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2206  0308  1303               	bcf	3,6	;RP1=0, select bank0
  2207  0309  00ED               	movwf	getPIR_AD@channel1
  2208                           
  2209                           ;PIR_B1.c: 170: char i = 0, j = 0;
  2210  030A  01EE               	clrf	getPIR_AD@i
  2211  030B  01EC               	clrf	getPIR_AD@j
  2212                           
  2213                           ;PIR_B1.c: 172: if (_PIR.ADtoGO == 1) {
  2214  030C  1CB1               	btfss	__PIR,1
  2215  030D  0008               	return
  2216                           
  2217                           ;PIR_B1.c: 173: _PIR.GO = 1;
  2218  030E  1531               	bsf	__PIR,2
  2219                           
  2220                           ;PIR_B1.c: 174: _PIR.ADRES = getAD(channel1, 0x70);
  2221  030F  3070               	movlw	112
  2222  0310  00E9               	movwf	??_getPIR_AD
  2223  0311  0869               	movf	??_getPIR_AD,w
  2224  0312  00F4               	movwf	getAD@adcon1
  2225  0313  086D               	movf	getPIR_AD@channel1,w
  2226  0314  118A  2797  118A   	fcall	_getAD
  2227  0317  1283               	bcf	3,5	;RP0=0, select bank0
  2228  0318  1303               	bcf	3,6	;RP1=0, select bank0
  2229  0319  00EA               	movwf	??_getPIR_AD+1
  2230  031A  086A               	movf	??_getPIR_AD+1,w
  2231  031B  00B3               	movwf	__PIR+2
  2232                           
  2233                           ;PIR_B1.c: 175: _PIR.VRAD = _PIR.ADRES / 51;
  2234  031C  3033               	movlw	51
  2235  031D  00E0               	movwf	___awdiv@divisor
  2236  031E  3000               	movlw	0
  2237  031F  00E1               	movwf	___awdiv@divisor+1
  2238  0320  0833               	movf	__PIR+2,w
  2239  0321  00E9               	movwf	??_getPIR_AD
  2240  0322  01EA               	clrf	??_getPIR_AD+1
  2241  0323  0869               	movf	??_getPIR_AD,w
  2242  0324  00E2               	movwf	___awdiv@dividend
  2243  0325  086A               	movf	??_getPIR_AD+1,w
  2244  0326  00E3               	movwf	___awdiv@dividend+1
  2245  0327  118A  2451  118A   	fcall	___awdiv
  2246  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2247  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2248  032C  0860               	movf	?___awdiv,w
  2249  032D  00EB               	movwf	??_getPIR_AD+2
  2250  032E  086B               	movf	??_getPIR_AD+2,w
  2251  032F  00B4               	movwf	__PIR+3
  2252                           
  2253                           ;PIR_B1.c: 176: _PIR.VRAD1 = _PIR.ADRES;
  2254  0330  0833               	movf	__PIR+2,w
  2255  0331  00E9               	movwf	??_getPIR_AD
  2256  0332  0869               	movf	??_getPIR_AD,w
  2257  0333  00B5               	movwf	__PIR+4
  2258                           
  2259                           ;PIR_B1.c: 177: _PIR.ADRES = getAD(channel2, 0x70);
  2260  0334  3070               	movlw	112
  2261  0335  00E9               	movwf	??_getPIR_AD
  2262  0336  0869               	movf	??_getPIR_AD,w
  2263  0337  00F4               	movwf	getAD@adcon1
  2264  0338  0868               	movf	getPIR_AD@channel2,w
  2265  0339  118A  2797  118A   	fcall	_getAD
  2266  033C  1283               	bcf	3,5	;RP0=0, select bank0
  2267  033D  1303               	bcf	3,6	;RP1=0, select bank0
  2268  033E  00EA               	movwf	??_getPIR_AD+1
  2269  033F  086A               	movf	??_getPIR_AD+1,w
  2270  0340  00B3               	movwf	__PIR+2
  2271                           
  2272                           ;PIR_B1.c: 178: _PIR.SignalAD = _PIR.ADRES;
  2273  0341  0833               	movf	__PIR+2,w
  2274  0342  00E9               	movwf	??_getPIR_AD
  2275  0343  0869               	movf	??_getPIR_AD,w
  2276  0344  00B2               	movwf	__PIR+1
  2277                           
  2278                           ;PIR_B1.c: 180: switch (_PIR.VRAD) {
  2279  0345  2B61               	goto	l3717
  2280  0346                     l3701:	
  2281                           ;PIR_B1.c: 181: case 0:
  2282                           
  2283                           
  2284                           ;PIR_B1.c: 182: if (_PIR.VRAD1 < 10) {
  2285  0346  300A               	movlw	10
  2286  0347  0235               	subwf	__PIR+4,w
  2287  0348  1803               	skipnc
  2288  0349  2B4C               	goto	l3705
  2289                           
  2290                           ;PIR_B1.c: 183: _PIR.CloseTimeValue = 5;
  2291  034A  3005               	movlw	5
  2292  034B  2B4D               	goto	L1
  2293  034C                     l3705:	
  2294                           ;PIR_B1.c: 184: } else {
  2295                           
  2296                           
  2297                           ;PIR_B1.c: 185: _PIR.CloseTimeValue = 60;
  2298  034C  303C               	movlw	60
  2299  034D                     L1:	
  2300  034D  00D8               	movwf	__PIR+39
  2301  034E  3000               	movlw	0
  2302  034F  2B5F               	goto	L5
  2303  0350                     l3707:	
  2304                           ;PIR_B1.c: 188: case 1:
  2305                           
  2306                           ;PIR_B1.c: 186: }
  2307                           ;PIR_B1.c: 187: break;
  2308                           
  2309                           
  2310                           ;PIR_B1.c: 189: _PIR.CloseTimeValue = 300;
  2311  0350  302C               	movlw	44
  2312  0351  00D8               	movwf	__PIR+39
  2313  0352  3001               	movlw	1
  2314  0353  2B5F               	goto	L5
  2315  0354                     l3709:	
  2316                           ;PIR_B1.c: 191: case 2:
  2317                           
  2318                           ;PIR_B1.c: 190: break;
  2319                           
  2320                           
  2321                           ;PIR_B1.c: 192: _PIR.CloseTimeValue = 600;
  2322  0354  3058               	movlw	88
  2323  0355  00D8               	movwf	__PIR+39
  2324  0356  3002               	movlw	2
  2325  0357  2B5F               	goto	L5
  2326  0358                     l3711:	
  2327                           ;PIR_B1.c: 194: case 3:
  2328                           
  2329                           ;PIR_B1.c: 193: break;
  2330                           
  2331                           
  2332                           ;PIR_B1.c: 195: _PIR.CloseTimeValue = 900;
  2333  0358  3084               	movlw	132
  2334  0359  00D8               	movwf	__PIR+39
  2335  035A  3003               	movlw	3
  2336  035B  2B5F               	goto	L5
  2337  035C                     l3713:	
  2338                           ;PIR_B1.c: 197: case 4:
  2339                           
  2340                           ;PIR_B1.c: 196: break;
  2341                           
  2342                           
  2343                           ;PIR_B1.c: 198: _PIR.CloseTimeValue = 1200;
  2344  035C  30B0               	movlw	176
  2345  035D  00D8               	movwf	__PIR+39
  2346  035E  3004               	movlw	4
  2347  035F                     L5:	
  2348  035F  00D9               	movwf	__PIR+40
  2349                           
  2350                           ;PIR_B1.c: 200: }
  2351                           
  2352                           ;PIR_B1.c: 199: break;
  2353  0360  2B72               	goto	l3719
  2354  0361                     l3717:	
  2355  0361  0834               	movf	__PIR+3,w
  2356                           
  2357                           ; Switch size 1, requested type "space"
  2358                           ; Number of cases is 5, Range of values is 0 to 4
  2359                           ; switch strategies available:
  2360                           ; Name         Instructions Cycles
  2361                           ; simple_byte           16     9 (average)
  2362                           ; direct_byte           17     7 (fixed)
  2363                           ; jumptable            260     6 (fixed)
  2364                           ;	Chosen strategy is simple_byte
  2365  0362  3A00               	xorlw	0	; case 0
  2366  0363  1903               	skipnz
  2367  0364  2B46               	goto	l3701
  2368  0365  3A01               	xorlw	1	; case 1
  2369  0366  1903               	skipnz
  2370  0367  2B50               	goto	l3707
  2371  0368  3A03               	xorlw	3	; case 2
  2372  0369  1903               	skipnz
  2373  036A  2B54               	goto	l3709
  2374  036B  3A01               	xorlw	1	; case 3
  2375  036C  1903               	skipnz
  2376  036D  2B58               	goto	l3711
  2377  036E  3A07               	xorlw	7	; case 4
  2378  036F  1903               	skipnz
  2379  0370  2B5C               	goto	l3713
  2380  0371  2B72               	goto	l3719
  2381  0372                     l3719:	
  2382                           
  2383                           ;PIR_B1.c: 203: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2384  0372  0832               	movf	__PIR+1,w
  2385  0373  00E9               	movwf	??_getPIR_AD
  2386  0374  0838               	movf	__PIR+7,w
  2387  0375  3E39               	addlw	(__PIR+8)& (0+255)
  2388  0376  0084               	movwf	4
  2389  0377  0869               	movf	??_getPIR_AD,w
  2390  0378  1383               	bcf	3,7	;select IRP bank0
  2391  0379  0080               	movwf	0
  2392                           
  2393                           ;PIR_B1.c: 204: for (i = 0; i < 10; i++) {
  2394  037A  01EE               	clrf	getPIR_AD@i
  2395  037B  300A               	movlw	10
  2396  037C  026E               	subwf	getPIR_AD@i,w
  2397  037D  1803               	btfsc	3,0
  2398  037E  2B93               	goto	l3733
  2399  037F                     l3727:	
  2400                           
  2401                           ;PIR_B1.c: 205: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2402  037F  086E               	movf	getPIR_AD@i,w
  2403  0380  3E39               	addlw	(__PIR+8)& (0+255)
  2404  0381  0084               	movwf	4
  2405  0382  0800               	movf	0,w
  2406  0383  00E9               	movwf	??_getPIR_AD
  2407  0384  01EA               	clrf	??_getPIR_AD+1
  2408  0385  0869               	movf	??_getPIR_AD,w
  2409  0386  07C3               	addwf	__PIR+18,f
  2410  0387  1803               	skipnc
  2411  0388  0AC4               	incf	__PIR+19,f
  2412  0389  086A               	movf	??_getPIR_AD+1,w
  2413  038A  07C4               	addwf	__PIR+19,f
  2414  038B  3001               	movlw	1
  2415  038C  00E9               	movwf	??_getPIR_AD
  2416  038D  0869               	movf	??_getPIR_AD,w
  2417  038E  07EE               	addwf	getPIR_AD@i,f
  2418  038F  300A               	movlw	10
  2419  0390  026E               	subwf	getPIR_AD@i,w
  2420  0391  1C03               	skipc
  2421  0392  2B7F               	goto	l3727
  2422  0393                     l3733:	
  2423                           
  2424                           ;PIR_B1.c: 206: }
  2425                           ;PIR_B1.c: 207: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2426  0393  300A               	movlw	10
  2427  0394  00E0               	movwf	___lwdiv@divisor
  2428  0395  3000               	movlw	0
  2429  0396  00E1               	movwf	___lwdiv@divisor+1
  2430  0397  0844               	movf	__PIR+19,w
  2431  0398  01E3               	clrf	___lwdiv@dividend+1
  2432  0399  07E3               	addwf	___lwdiv@dividend+1,f
  2433  039A  0843               	movf	__PIR+18,w
  2434  039B  01E2               	clrf	___lwdiv@dividend
  2435  039C  07E2               	addwf	___lwdiv@dividend,f
  2436  039D  118A  25F7  118A   	fcall	___lwdiv
  2437  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  2438  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  2439  03A2  0860               	movf	?___lwdiv,w
  2440  03A3  00E9               	movwf	??_getPIR_AD
  2441  03A4  0845               	movf	__PIR+20,w
  2442  03A5  3E46               	addlw	(__PIR+21)& (0+255)
  2443  03A6  0084               	movwf	4
  2444  03A7  0869               	movf	??_getPIR_AD,w
  2445  03A8  1383               	bcf	3,7	;select IRP bank0
  2446  03A9  0080               	movwf	0
  2447                           
  2448                           ;PIR_B1.c: 208: _PIR.TenAverageValue = 0;
  2449  03AA  01C3               	clrf	__PIR+18
  2450  03AB  01C4               	clrf	__PIR+19
  2451                           
  2452                           ;PIR_B1.c: 210: for (i = 0; i <= 9; i++) {
  2453  03AC  01EE               	clrf	getPIR_AD@i
  2454  03AD  300A               	movlw	10
  2455  03AE  026E               	subwf	getPIR_AD@i,w
  2456  03AF  1803               	btfsc	3,0
  2457  03B0  2BC5               	goto	l3749
  2458  03B1                     l3743:	
  2459                           
  2460                           ;PIR_B1.c: 211: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  2461  03B1  086E               	movf	getPIR_AD@i,w
  2462  03B2  3E46               	addlw	(__PIR+21)& (0+255)
  2463  03B3  0084               	movwf	4
  2464  03B4  0800               	movf	0,w
  2465  03B5  00E9               	movwf	??_getPIR_AD
  2466  03B6  01EA               	clrf	??_getPIR_AD+1
  2467  03B7  0869               	movf	??_getPIR_AD,w
  2468  03B8  07D0               	addwf	__PIR+31,f
  2469  03B9  1803               	skipnc
  2470  03BA  0AD1               	incf	__PIR+32,f
  2471  03BB  086A               	movf	??_getPIR_AD+1,w
  2472  03BC  07D1               	addwf	__PIR+32,f
  2473  03BD  3001               	movlw	1
  2474  03BE  00E9               	movwf	??_getPIR_AD
  2475  03BF  0869               	movf	??_getPIR_AD,w
  2476  03C0  07EE               	addwf	getPIR_AD@i,f
  2477  03C1  300A               	movlw	10
  2478  03C2  026E               	subwf	getPIR_AD@i,w
  2479  03C3  1C03               	skipc
  2480  03C4  2BB1               	goto	l3743
  2481  03C5                     l3749:	
  2482                           
  2483                           ;PIR_B1.c: 212: }
  2484                           ;PIR_B1.c: 213: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  2485  03C5  300A               	movlw	10
  2486  03C6  00E0               	movwf	___lwdiv@divisor
  2487  03C7  3000               	movlw	0
  2488  03C8  00E1               	movwf	___lwdiv@divisor+1
  2489  03C9  0851               	movf	__PIR+32,w
  2490  03CA  01E3               	clrf	___lwdiv@dividend+1
  2491  03CB  07E3               	addwf	___lwdiv@dividend+1,f
  2492  03CC  0850               	movf	__PIR+31,w
  2493  03CD  01E2               	clrf	___lwdiv@dividend
  2494  03CE  07E2               	addwf	___lwdiv@dividend,f
  2495  03CF  118A  25F7  118A   	fcall	___lwdiv
  2496  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  2497  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  2498  03D4  0860               	movf	?___lwdiv,w
  2499  03D5  00E9               	movwf	??_getPIR_AD
  2500  03D6  0869               	movf	??_getPIR_AD,w
  2501  03D7  00B7               	movwf	__PIR+6
  2502                           
  2503                           ;PIR_B1.c: 214: _PIR.HundredAverageValue = 0;
  2504  03D8  01D0               	clrf	__PIR+31
  2505  03D9  01D1               	clrf	__PIR+32
  2506                           
  2507                           ;PIR_B1.c: 216: if (_PIR.TenCount < 10) {
  2508  03DA  300A               	movlw	10
  2509  03DB  0238               	subwf	__PIR+7,w
  2510  03DC  1803               	skipnc
  2511  03DD  2BE3               	goto	l3757
  2512                           
  2513                           ;PIR_B1.c: 217: _PIR.TenCount++;
  2514  03DE  3001               	movlw	1
  2515  03DF  00E9               	movwf	??_getPIR_AD
  2516  03E0  0869               	movf	??_getPIR_AD,w
  2517  03E1  07B8               	addwf	__PIR+7,f
  2518                           
  2519                           ;PIR_B1.c: 218: } else {
  2520  03E2  0008               	return
  2521  03E3                     l3757:	
  2522                           
  2523                           ;PIR_B1.c: 219: _PIR.TenCount = 0;
  2524  03E3  01B8               	clrf	__PIR+7
  2525                           
  2526                           ;PIR_B1.c: 220: if (_PIR.HundreCount < 10)
  2527  03E4  300A               	movlw	10
  2528  03E5  0245               	subwf	__PIR+20,w
  2529  03E6  1803               	skipnc
  2530  03E7  2BED               	goto	l3763
  2531                           
  2532                           ;PIR_B1.c: 221: _PIR.HundreCount++;
  2533  03E8  3001               	movlw	1
  2534  03E9  00E9               	movwf	??_getPIR_AD
  2535  03EA  0869               	movf	??_getPIR_AD,w
  2536  03EB  07C5               	addwf	__PIR+20,f
  2537  03EC  0008               	return
  2538  03ED                     l3763:	
  2539                           
  2540                           ;PIR_B1.c: 222: else
  2541                           ;PIR_B1.c: 223: _PIR.HundreCount = 0;
  2542  03ED  01C5               	clrf	__PIR+20
  2543  03EE  0008               	return
  2544  03EF                     __end_of_getPIR_AD:	
  2545                           
  2546                           	psect	text4
  2547  05F7                     __ptext4:	
  2548 ;; *************** function ___lwdiv *****************
  2549 ;; Defined at:
  2550 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;  divisor         2    0[BANK0 ] unsigned int 
  2553 ;;  dividend        2    2[BANK0 ] unsigned int 
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  quotient        2    5[BANK0 ] unsigned int 
  2556 ;;  counter         1    4[BANK0 ] unsigned char 
  2557 ;; Return value:  Size  Location     Type
  2558 ;;                  2    0[BANK0 ] unsigned int 
  2559 ;; Registers used:
  2560 ;;		wreg, status,2, status,0
  2561 ;; Tracked objects:
  2562 ;;		On entry : 0/0
  2563 ;;		On exit  : 0/0
  2564 ;;		Unchanged: 0/0
  2565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2566 ;;      Params:         0       4       0       0
  2567 ;;      Locals:         0       3       0       0
  2568 ;;      Temps:          1       0       0       0
  2569 ;;      Totals:         1       7       0       0
  2570 ;;Total ram usage:        8 bytes
  2571 ;; Hardware stack levels used:    1
  2572 ;; Hardware stack levels required when called:    2
  2573 ;; This function calls:
  2574 ;;		Nothing
  2575 ;; This function is called by:
  2576 ;;		_getPIR_AD
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           
  2581                           ;psect for function ___lwdiv
  2582  05F7                     ___lwdiv:	
  2583                           
  2584                           ;incstack = 0
  2585                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2586  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  2587  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  2588  05F9  01E5               	clrf	___lwdiv@quotient
  2589  05FA  01E6               	clrf	___lwdiv@quotient+1
  2590  05FB  0861               	movf	___lwdiv@divisor+1,w
  2591  05FC  0460               	iorwf	___lwdiv@divisor,w
  2592  05FD  1903               	skipnz
  2593  05FE  2E30               	goto	l3601
  2594  05FF  01E4               	clrf	___lwdiv@counter
  2595  0600  0AE4               	incf	___lwdiv@counter,f
  2596  0601                     l3589:	
  2597  0601  1BE1               	btfsc	___lwdiv@divisor+1,7
  2598  0602  2E0F               	goto	l3591
  2599  0603  3001               	movlw	1
  2600  0604                     u3635:	
  2601  0604  1003               	clrc
  2602  0605  0DE0               	rlf	___lwdiv@divisor,f
  2603  0606  0DE1               	rlf	___lwdiv@divisor+1,f
  2604  0607  3EFF               	addlw	-1
  2605  0608  1D03               	skipz
  2606  0609  2E04               	goto	u3635
  2607  060A  3001               	movlw	1
  2608  060B  00F4               	movwf	??___lwdiv
  2609  060C  0874               	movf	??___lwdiv,w
  2610  060D  07E4               	addwf	___lwdiv@counter,f
  2611  060E  2E01               	goto	l3589
  2612  060F                     l3591:	
  2613  060F  3001               	movlw	1
  2614  0610                     u3655:	
  2615  0610  1003               	clrc
  2616  0611  0DE5               	rlf	___lwdiv@quotient,f
  2617  0612  0DE6               	rlf	___lwdiv@quotient+1,f
  2618  0613  3EFF               	addlw	-1
  2619  0614  1D03               	skipz
  2620  0615  2E10               	goto	u3655
  2621  0616  0861               	movf	___lwdiv@divisor+1,w
  2622  0617  0263               	subwf	___lwdiv@dividend+1,w
  2623  0618  1D03               	skipz
  2624  0619  2E1C               	goto	u3665
  2625  061A  0860               	movf	___lwdiv@divisor,w
  2626  061B  0262               	subwf	___lwdiv@dividend,w
  2627  061C                     u3665:	
  2628  061C  1C03               	skipc
  2629  061D  2E25               	goto	l3597
  2630  061E  0860               	movf	___lwdiv@divisor,w
  2631  061F  02E2               	subwf	___lwdiv@dividend,f
  2632  0620  0861               	movf	___lwdiv@divisor+1,w
  2633  0621  1C03               	skipc
  2634  0622  03E3               	decf	___lwdiv@dividend+1,f
  2635  0623  02E3               	subwf	___lwdiv@dividend+1,f
  2636  0624  1465               	bsf	___lwdiv@quotient,0
  2637  0625                     l3597:	
  2638  0625  3001               	movlw	1
  2639  0626                     u3675:	
  2640  0626  1003               	clrc
  2641  0627  0CE1               	rrf	___lwdiv@divisor+1,f
  2642  0628  0CE0               	rrf	___lwdiv@divisor,f
  2643  0629  3EFF               	addlw	-1
  2644  062A  1D03               	skipz
  2645  062B  2E26               	goto	u3675
  2646  062C  3001               	movlw	1
  2647  062D  02E4               	subwf	___lwdiv@counter,f
  2648  062E  1D03               	btfss	3,2
  2649  062F  2E0F               	goto	l3591
  2650  0630                     l3601:	
  2651  0630  0866               	movf	___lwdiv@quotient+1,w
  2652  0631  01E1               	clrf	?___lwdiv+1
  2653  0632  07E1               	addwf	?___lwdiv+1,f
  2654  0633  0865               	movf	___lwdiv@quotient,w
  2655  0634  01E0               	clrf	?___lwdiv
  2656  0635  07E0               	addwf	?___lwdiv,f
  2657  0636  0008               	return
  2658  0637                     __end_of___lwdiv:	
  2659                           
  2660                           	psect	text5
  2661  0451                     __ptext5:	
  2662 ;; *************** function ___awdiv *****************
  2663 ;; Defined at:
  2664 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  divisor         2    0[BANK0 ] int 
  2667 ;;  dividend        2    2[BANK0 ] int 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  quotient        2    6[BANK0 ] int 
  2670 ;;  sign            1    5[BANK0 ] unsigned char 
  2671 ;;  counter         1    4[BANK0 ] unsigned char 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  2    0[BANK0 ] int 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2681 ;;      Params:         0       4       0       0
  2682 ;;      Locals:         0       4       0       0
  2683 ;;      Temps:          1       0       0       0
  2684 ;;      Totals:         1       8       0       0
  2685 ;;Total ram usage:        9 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    2
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_getPIR_AD
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           
  2696                           ;psect for function ___awdiv
  2697  0451                     ___awdiv:	
  2698                           
  2699                           ;incstack = 0
  2700                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2701  0451  1283               	bcf	3,5	;RP0=0, select bank0
  2702  0452  1303               	bcf	3,6	;RP1=0, select bank0
  2703  0453  01E5               	clrf	___awdiv@sign
  2704  0454  1FE1               	btfss	___awdiv@divisor+1,7
  2705  0455  2C5D               	goto	l3543
  2706  0456  09E0               	comf	___awdiv@divisor,f
  2707  0457  09E1               	comf	___awdiv@divisor+1,f
  2708  0458  0AE0               	incf	___awdiv@divisor,f
  2709  0459  1903               	skipnz
  2710  045A  0AE1               	incf	___awdiv@divisor+1,f
  2711  045B  01E5               	clrf	___awdiv@sign
  2712  045C  0AE5               	incf	___awdiv@sign,f
  2713  045D                     l3543:	
  2714  045D  1FE3               	btfss	___awdiv@dividend+1,7
  2715  045E  2C68               	goto	l3549
  2716  045F  09E2               	comf	___awdiv@dividend,f
  2717  0460  09E3               	comf	___awdiv@dividend+1,f
  2718  0461  0AE2               	incf	___awdiv@dividend,f
  2719  0462  1903               	skipnz
  2720  0463  0AE3               	incf	___awdiv@dividend+1,f
  2721  0464  3001               	movlw	1
  2722  0465  00F4               	movwf	??___awdiv
  2723  0466  0874               	movf	??___awdiv,w
  2724  0467  06E5               	xorwf	___awdiv@sign,f
  2725  0468                     l3549:	
  2726  0468  01E6               	clrf	___awdiv@quotient
  2727  0469  01E7               	clrf	___awdiv@quotient+1
  2728  046A  0861               	movf	___awdiv@divisor+1,w
  2729  046B  0460               	iorwf	___awdiv@divisor,w
  2730  046C  1903               	skipnz
  2731  046D  2C9F               	goto	l3571
  2732  046E  01E4               	clrf	___awdiv@counter
  2733  046F  0AE4               	incf	___awdiv@counter,f
  2734  0470                     l3559:	
  2735  0470  1BE1               	btfsc	___awdiv@divisor+1,7
  2736  0471  2C7E               	goto	l3561
  2737  0472  3001               	movlw	1
  2738  0473                     u3555:	
  2739  0473  1003               	clrc
  2740  0474  0DE0               	rlf	___awdiv@divisor,f
  2741  0475  0DE1               	rlf	___awdiv@divisor+1,f
  2742  0476  3EFF               	addlw	-1
  2743  0477  1D03               	skipz
  2744  0478  2C73               	goto	u3555
  2745  0479  3001               	movlw	1
  2746  047A  00F4               	movwf	??___awdiv
  2747  047B  0874               	movf	??___awdiv,w
  2748  047C  07E4               	addwf	___awdiv@counter,f
  2749  047D  2C70               	goto	l3559
  2750  047E                     l3561:	
  2751  047E  3001               	movlw	1
  2752  047F                     u3575:	
  2753  047F  1003               	clrc
  2754  0480  0DE6               	rlf	___awdiv@quotient,f
  2755  0481  0DE7               	rlf	___awdiv@quotient+1,f
  2756  0482  3EFF               	addlw	-1
  2757  0483  1D03               	skipz
  2758  0484  2C7F               	goto	u3575
  2759  0485  0861               	movf	___awdiv@divisor+1,w
  2760  0486  0263               	subwf	___awdiv@dividend+1,w
  2761  0487  1D03               	skipz
  2762  0488  2C8B               	goto	u3585
  2763  0489  0860               	movf	___awdiv@divisor,w
  2764  048A  0262               	subwf	___awdiv@dividend,w
  2765  048B                     u3585:	
  2766  048B  1C03               	skipc
  2767  048C  2C94               	goto	l3567
  2768  048D  0860               	movf	___awdiv@divisor,w
  2769  048E  02E2               	subwf	___awdiv@dividend,f
  2770  048F  0861               	movf	___awdiv@divisor+1,w
  2771  0490  1C03               	skipc
  2772  0491  03E3               	decf	___awdiv@dividend+1,f
  2773  0492  02E3               	subwf	___awdiv@dividend+1,f
  2774  0493  1466               	bsf	___awdiv@quotient,0
  2775  0494                     l3567:	
  2776  0494  3001               	movlw	1
  2777  0495                     u3595:	
  2778  0495  1003               	clrc
  2779  0496  0CE1               	rrf	___awdiv@divisor+1,f
  2780  0497  0CE0               	rrf	___awdiv@divisor,f
  2781  0498  3EFF               	addlw	-1
  2782  0499  1D03               	skipz
  2783  049A  2C95               	goto	u3595
  2784  049B  3001               	movlw	1
  2785  049C  02E4               	subwf	___awdiv@counter,f
  2786  049D  1D03               	btfss	3,2
  2787  049E  2C7E               	goto	l3561
  2788  049F                     l3571:	
  2789  049F  0865               	movf	___awdiv@sign,w
  2790  04A0  1903               	btfsc	3,2
  2791  04A1  2CA7               	goto	l3575
  2792  04A2  09E6               	comf	___awdiv@quotient,f
  2793  04A3  09E7               	comf	___awdiv@quotient+1,f
  2794  04A4  0AE6               	incf	___awdiv@quotient,f
  2795  04A5  1903               	skipnz
  2796  04A6  0AE7               	incf	___awdiv@quotient+1,f
  2797  04A7                     l3575:	
  2798  04A7  0867               	movf	___awdiv@quotient+1,w
  2799  04A8  01E1               	clrf	?___awdiv+1
  2800  04A9  07E1               	addwf	?___awdiv+1,f
  2801  04AA  0866               	movf	___awdiv@quotient,w
  2802  04AB  01E0               	clrf	?___awdiv
  2803  04AC  07E0               	addwf	?___awdiv,f
  2804  04AD  0008               	return
  2805  04AE                     __end_of___awdiv:	
  2806                           
  2807                           	psect	text6
  2808  03EF                     __ptext6:	
  2809 ;; *************** function _getLoad_AD *****************
  2810 ;; Defined at:
  2811 ;;		line 15 in file "../src/OverLoad_B1.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  channel         1    wreg     unsigned char 
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;  channel         1    2[BANK0 ] unsigned char 
  2816 ;;  i               1    4[BANK0 ] unsigned char 
  2817 ;;  j               1    3[BANK0 ] unsigned char 
  2818 ;; Return value:  Size  Location     Type
  2819 ;;		None               void
  2820 ;; Registers used:
  2821 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2827 ;;      Params:         0       0       0       0
  2828 ;;      Locals:         0       3       0       0
  2829 ;;      Temps:          0       2       0       0
  2830 ;;      Totals:         0       5       0       0
  2831 ;;Total ram usage:        5 bytes
  2832 ;; Hardware stack levels used:    1
  2833 ;; Hardware stack levels required when called:    4
  2834 ;; This function calls:
  2835 ;;		_getAD
  2836 ;; This function is called by:
  2837 ;;		_main
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           
  2842                           ;psect for function _getLoad_AD
  2843  03EF                     _getLoad_AD:	
  2844                           
  2845                           ;incstack = 0
  2846                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2847                           ;getLoad_AD@channel stored from wreg
  2848  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  2849  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  2850  03F1  00E2               	movwf	getLoad_AD@channel
  2851                           
  2852                           ;OverLoad_B1.c: 16: char i = 0, j = 0;
  2853  03F2  01E4               	clrf	getLoad_AD@i
  2854  03F3  01E3               	clrf	getLoad_AD@j
  2855                           
  2856                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  2857  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  2858  03F5  1303               	bcf	3,6	;RP1=0, select bank1
  2859  03F6  1E20               	btfss	_Load^(0+128),4
  2860  03F7  0008               	return
  2861                           
  2862                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xc1);
  2863  03F8  30C1               	movlw	193
  2864  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2865  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  2866  03FB  00E0               	movwf	??_getLoad_AD
  2867  03FC  0860               	movf	??_getLoad_AD,w
  2868  03FD  00F4               	movwf	getAD@adcon1
  2869  03FE  0862               	movf	getLoad_AD@channel,w
  2870  03FF  118A  2797  118A   	fcall	_getAD
  2871  0402  1283               	bcf	3,5	;RP0=0, select bank0
  2872  0403  1303               	bcf	3,6	;RP1=0, select bank0
  2873  0404  00E1               	movwf	??_getLoad_AD+1
  2874  0405  0861               	movf	??_getLoad_AD+1,w
  2875  0406  1683               	bsf	3,5	;RP0=1, select bank1
  2876  0407  1303               	bcf	3,6	;RP1=0, select bank1
  2877  0408  00B7               	movwf	(_Load^(0+128)+23)
  2878                           
  2879                           ;OverLoad_B1.c: 20: for (i = 0; i < 4; i++) {
  2880  0409  1283               	bcf	3,5	;RP0=0, select bank0
  2881  040A  1303               	bcf	3,6	;RP1=0, select bank0
  2882  040B  01E4               	clrf	getLoad_AD@i
  2883  040C  3004               	movlw	4
  2884  040D  0264               	subwf	getLoad_AD@i,w
  2885  040E  1803               	btfsc	3,0
  2886  040F  2C2F               	goto	l3673
  2887  0410                     l3663:	
  2888                           
  2889                           ;OverLoad_B1.c: 21: if (Load.AH[i] < Load.ADRES) {
  2890  0410  0864               	movf	getLoad_AD@i,w
  2891  0411  3EAC               	addlw	(_Load+12)& (0+255)
  2892  0412  0084               	movwf	4
  2893  0413  1683               	bsf	3,5	;RP0=1, select bank1
  2894  0414  1303               	bcf	3,6	;RP1=0, select bank1
  2895  0415  0837               	movf	(_Load^(0+128)+23),w
  2896  0416  1383               	bcf	3,7	;select IRP bank1
  2897  0417  0200               	subwf	0,w
  2898  0418  1803               	skipnc
  2899  0419  2C26               	goto	l3669
  2900                           
  2901                           ;OverLoad_B1.c: 22: Load.AH[i] = Load.ADRES;
  2902  041A  0837               	movf	(_Load^(0+128)+23),w
  2903  041B  1283               	bcf	3,5	;RP0=0, select bank0
  2904  041C  1303               	bcf	3,6	;RP1=0, select bank0
  2905  041D  00E0               	movwf	??_getLoad_AD
  2906  041E  0864               	movf	getLoad_AD@i,w
  2907  041F  3EAC               	addlw	(_Load+12)& (0+255)
  2908  0420  0084               	movwf	4
  2909  0421  0860               	movf	??_getLoad_AD,w
  2910  0422  0080               	movwf	0
  2911                           
  2912                           ;OverLoad_B1.c: 23: j = 1;
  2913  0423  01E3               	clrf	getLoad_AD@j
  2914  0424  0AE3               	incf	getLoad_AD@j,f
  2915                           
  2916                           ;OverLoad_B1.c: 24: break;
  2917  0425  2C2F               	goto	l3673
  2918  0426                     l3669:	
  2919  0426  3001               	movlw	1
  2920  0427  1283               	bcf	3,5	;RP0=0, select bank0
  2921  0428  00E0               	movwf	??_getLoad_AD
  2922  0429  0860               	movf	??_getLoad_AD,w
  2923  042A  07E4               	addwf	getLoad_AD@i,f
  2924  042B  3004               	movlw	4
  2925  042C  0264               	subwf	getLoad_AD@i,w
  2926  042D  1C03               	skipc
  2927  042E  2C10               	goto	l3663
  2928  042F                     l3673:	
  2929                           
  2930                           ;OverLoad_B1.c: 25: }
  2931                           ;OverLoad_B1.c: 26: }
  2932                           ;OverLoad_B1.c: 27: if (j == 0) {
  2933  042F  08E3               	movf	getLoad_AD@j,f
  2934  0430  1D03               	skipz
  2935  0431  0008               	return
  2936                           
  2937                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  2938  0432  01E4               	clrf	getLoad_AD@i
  2939  0433                     L6:	
  2940  0433  3004               	movlw	4
  2941  0434  0264               	subwf	getLoad_AD@i,w
  2942  0435  1803               	btfsc	3,0
  2943  0436  0008               	return
  2944                           
  2945                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES) {
  2946  0437  0864               	movf	getLoad_AD@i,w
  2947  0438  3EB1               	addlw	(_Load+17)& (0+255)
  2948  0439  0084               	movwf	4
  2949  043A  1383               	bcf	3,7	;select IRP bank1
  2950  043B  0800               	movf	0,w
  2951  043C  1683               	bsf	3,5	;RP0=1, select bank1
  2952  043D  1303               	bcf	3,6	;RP1=0, select bank1
  2953  043E  0237               	subwf	(_Load^(0+128)+23),w
  2954  043F  1803               	skipnc
  2955  0440  2C4B               	goto	l3685
  2956                           
  2957                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  2958  0441  0837               	movf	(_Load^(0+128)+23),w
  2959  0442  1283               	bcf	3,5	;RP0=0, select bank0
  2960  0443  1303               	bcf	3,6	;RP1=0, select bank0
  2961  0444  00E0               	movwf	??_getLoad_AD
  2962  0445  0864               	movf	getLoad_AD@i,w
  2963  0446  3EB1               	addlw	(_Load+17)& (0+255)
  2964  0447  0084               	movwf	4
  2965  0448  0860               	movf	??_getLoad_AD,w
  2966  0449  0080               	movwf	0
  2967                           
  2968                           ;OverLoad_B1.c: 31: break;
  2969  044A  0008               	return
  2970  044B                     l3685:	
  2971  044B  3001               	movlw	1
  2972  044C  1283               	bcf	3,5	;RP0=0, select bank0
  2973  044D  00E0               	movwf	??_getLoad_AD
  2974  044E  0860               	movf	??_getLoad_AD,w
  2975  044F  07E4               	addwf	getLoad_AD@i,f
  2976  0450  2C33               	goto	L6
  2977  0451                     __end_of_getLoad_AD:	
  2978                           
  2979                           	psect	text7
  2980  0750                     __ptext7:	
  2981 ;; *************** function _getCDS_AD *****************
  2982 ;; Defined at:
  2983 ;;		line 49 in file "../src/CDS_B1.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  channel1        1    wreg     unsigned char 
  2986 ;;  channel2        1    0[BANK0 ] unsigned char 
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  channel1        1    5[BANK0 ] unsigned char 
  2989 ;;  j               1    4[BANK0 ] unsigned char 
  2990 ;;  i               1    3[BANK0 ] unsigned char 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;		None               void
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0, pclath, cstack
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3000 ;;      Params:         0       1       0       0
  3001 ;;      Locals:         0       3       0       0
  3002 ;;      Temps:          0       2       0       0
  3003 ;;      Totals:         0       6       0       0
  3004 ;;Total ram usage:        6 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    4
  3007 ;; This function calls:
  3008 ;;		_getAD
  3009 ;; This function is called by:
  3010 ;;		_main
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           
  3015                           ;psect for function _getCDS_AD
  3016  0750                     _getCDS_AD:	
  3017                           
  3018                           ;incstack = 0
  3019                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3020                           ;getCDS_AD@channel1 stored from wreg
  3021  0750  1283               	bcf	3,5	;RP0=0, select bank0
  3022  0751  1303               	bcf	3,6	;RP1=0, select bank0
  3023  0752  00E5               	movwf	getCDS_AD@channel1
  3024                           
  3025                           ;CDS_B1.c: 50: char i = 0, j = 0;
  3026  0753  01E3               	clrf	getCDS_AD@i
  3027  0754  01E4               	clrf	getCDS_AD@j
  3028                           
  3029                           ;CDS_B1.c: 51: if (_CDS.ADtoGO == 1) {
  3030  0755  1DA8               	btfss	__CDS,3
  3031  0756  0008               	return
  3032                           
  3033                           ;CDS_B1.c: 52: _CDS.GO = 1;
  3034  0757  14A8               	bsf	__CDS,1
  3035                           
  3036                           ;CDS_B1.c: 53: _CDS.ADRES = getAD(channel1, 0x70);
  3037  0758  3070               	movlw	112
  3038  0759  00E1               	movwf	??_getCDS_AD
  3039  075A  0861               	movf	??_getCDS_AD,w
  3040  075B  00F4               	movwf	getAD@adcon1
  3041  075C  0865               	movf	getCDS_AD@channel1,w
  3042  075D  118A  2797  118A   	fcall	_getAD
  3043  0760  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0761  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0762  00E2               	movwf	??_getCDS_AD+1
  3046  0763  0862               	movf	??_getCDS_AD+1,w
  3047  0764  00AC               	movwf	__CDS+4
  3048                           
  3049                           ;CDS_B1.c: 54: _CDS.VRAD = _CDS.ADRES;
  3050  0765  082C               	movf	__CDS+4,w
  3051  0766  00E1               	movwf	??_getCDS_AD
  3052  0767  0861               	movf	??_getCDS_AD,w
  3053  0768  00AA               	movwf	__CDS+2
  3054                           
  3055                           ;CDS_B1.c: 55: _CDS.ADRES = getAD(channel2, 0x70);
  3056  0769  3070               	movlw	112
  3057  076A  00E1               	movwf	??_getCDS_AD
  3058  076B  0861               	movf	??_getCDS_AD,w
  3059  076C  00F4               	movwf	getAD@adcon1
  3060  076D  0860               	movf	getCDS_AD@channel2,w
  3061  076E  118A  2797         	fcall	_getAD
  3062  0770  1283               	bcf	3,5	;RP0=0, select bank0
  3063  0771  1303               	bcf	3,6	;RP1=0, select bank0
  3064  0772  00E2               	movwf	??_getCDS_AD+1
  3065  0773  0862               	movf	??_getCDS_AD+1,w
  3066  0774  00AC               	movwf	__CDS+4
  3067                           
  3068                           ;CDS_B1.c: 56: _CDS.SignalAD = _CDS.ADRES;
  3069  0775  082C               	movf	__CDS+4,w
  3070  0776  00E1               	movwf	??_getCDS_AD
  3071  0777  0861               	movf	??_getCDS_AD,w
  3072  0778  00AB               	movwf	__CDS+3
  3073  0779  0008               	return
  3074  077A                     __end_of_getCDS_AD:	
  3075                           
  3076                           	psect	text8
  3077  0797                     __ptext8:	
  3078 ;; *************** function _getAD *****************
  3079 ;; Defined at:
  3080 ;;		line 426 in file "../src/MCU_B1.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  adcon0          1    wreg     unsigned char 
  3083 ;;  adcon1          1    4[COMMON] unsigned char 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  adcon0          1    5[COMMON] unsigned char 
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      unsigned char 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2, status,0, pclath, cstack
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3095 ;;      Params:         1       0       0       0
  3096 ;;      Locals:         1       0       0       0
  3097 ;;      Temps:          0       0       0       0
  3098 ;;      Totals:         2       0       0       0
  3099 ;;Total ram usage:        2 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    3
  3102 ;; This function calls:
  3103 ;;		_Timeout_Counter
  3104 ;;		_set_TimeoutCleared
  3105 ;; This function is called by:
  3106 ;;		_getCDS_AD
  3107 ;;		_getLoad_AD
  3108 ;;		_getPIR_AD
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112                           
  3113                           ;psect for function _getAD
  3114  0797                     _getAD:	
  3115                           
  3116                           ;incstack = 0
  3117                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3118                           ;getAD@adcon0 stored from wreg
  3119  0797  00F5               	movwf	getAD@adcon0
  3120                           
  3121                           ;MCU_B1.c: 427: ADCON0 = adcon0;
  3122  0798  0875               	movf	getAD@adcon0,w
  3123  0799  1283               	bcf	3,5	;RP0=0, select bank0
  3124  079A  1303               	bcf	3,6	;RP1=0, select bank0
  3125  079B  009F               	movwf	31	;volatile
  3126                           
  3127                           ;MCU_B1.c: 428: ADCON1 = adcon1;
  3128  079C  0874               	movf	getAD@adcon1,w
  3129  079D  1683               	bsf	3,5	;RP0=1, select bank1
  3130  079E  1303               	bcf	3,6	;RP1=0, select bank1
  3131  079F  009F               	movwf	31	;volatile
  3132                           
  3133                           ;MCU_B1.c: 429: GO_nDONE = 1;
  3134  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  3135  07A1  1303               	bcf	3,6	;RP1=0, select bank0
  3136  07A2  149F               	bsf	31,1	;volatile
  3137                           
  3138                           ;MCU_B1.c: 430: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3139  07A3  2FA7               	goto	l2481
  3140  07A4                     l2479:	
  3141                           
  3142                           ;MCU_B1.c: 431: Timeout_Counter();
  3143  07A4  158A  2791  118A   	fcall	_Timeout_Counter
  3144  07A7                     l2481:	
  3145  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  3146  07A8  1303               	bcf	3,6	;RP1=0, select bank0
  3147  07A9  1C9F               	btfss	31,1	;volatile
  3148  07AA  2FAD               	goto	l2485
  3149  07AB  1D25               	btfss	_myMain+5,2
  3150  07AC  2FA4               	goto	l2479
  3151  07AD                     l2485:	
  3152                           
  3153                           ;MCU_B1.c: 432: };
  3154                           ;MCU_B1.c: 433: set_TimeoutCleared();
  3155  07AD  158A  269E         	fcall	_set_TimeoutCleared
  3156                           
  3157                           ;MCU_B1.c: 434: return ADRES;
  3158  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  3159  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  3160  07B1  081E               	movf	30,w	;volatile
  3161  07B2  0008               	return
  3162  07B3                     __end_of_getAD:	
  3163                           
  3164                           	psect	text9
  3165  0E9E                     __ptext9:	
  3166 ;; *************** function _set_TimeoutCleared *****************
  3167 ;; Defined at:
  3168 ;;		line 271 in file "../src/Main_B1.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;		None
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;		None
  3173 ;; Return value:  Size  Location     Type
  3174 ;;		None               void
  3175 ;; Registers used:
  3176 ;;		status,2
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3182 ;;      Params:         0       0       0       0
  3183 ;;      Locals:         0       0       0       0
  3184 ;;      Temps:          0       0       0       0
  3185 ;;      Totals:         0       0       0       0
  3186 ;;Total ram usage:        0 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:    2
  3189 ;; This function calls:
  3190 ;;		Nothing
  3191 ;; This function is called by:
  3192 ;;		_getAD
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           
  3197                           ;psect for function _set_TimeoutCleared
  3198  0E9E                     _set_TimeoutCleared:	
  3199                           
  3200                           ;Main_B1.c: 272: myMain.Timeout = 0;
  3201                           
  3202                           ;incstack = 0
  3203                           ; Regs used in _set_TimeoutCleared: [status,2]
  3204  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  3205  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  3206  0EA0  1125               	bcf	_myMain+5,2
  3207                           
  3208                           ;Main_B1.c: 273: myMain.Timeout_Counter = 0;
  3209  0EA1  01A6               	clrf	_myMain+6
  3210  0EA2  01A7               	clrf	_myMain+7
  3211  0EA3  0008               	return
  3212  0EA4                     __end_of_set_TimeoutCleared:	
  3213                           
  3214                           	psect	text10
  3215  0F91                     __ptext10:	
  3216 ;; *************** function _Timeout_Counter *****************
  3217 ;; Defined at:
  3218 ;;		line 261 in file "../src/Main_B1.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;		None
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;		None
  3223 ;; Return value:  Size  Location     Type
  3224 ;;		None               void
  3225 ;; Registers used:
  3226 ;;		wreg, status,2
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3232 ;;      Params:         0       0       0       0
  3233 ;;      Locals:         0       0       0       0
  3234 ;;      Temps:          0       0       0       0
  3235 ;;      Totals:         0       0       0       0
  3236 ;;Total ram usage:        0 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    2
  3239 ;; This function calls:
  3240 ;;		Nothing
  3241 ;; This function is called by:
  3242 ;;		_getAD
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           
  3247                           ;psect for function _Timeout_Counter
  3248  0F91                     _Timeout_Counter:	
  3249                           
  3250                           ;Main_B1.c: 262: myMain.Timeout_Counter++;
  3251                           
  3252                           ;incstack = 0
  3253                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  3254  0F91  3001               	movlw	1
  3255  0F92  1283               	bcf	3,5	;RP0=0, select bank0
  3256  0F93  1303               	bcf	3,6	;RP1=0, select bank0
  3257  0F94  07A6               	addwf	_myMain+6,f
  3258  0F95  1803               	skipnc
  3259  0F96  0AA7               	incf	_myMain+7,f
  3260  0F97  3000               	movlw	0
  3261  0F98  07A7               	addwf	_myMain+7,f
  3262                           
  3263                           ;Main_B1.c: 263: if (myMain.Timeout_Counter == 10000) {
  3264  0F99  3027               	movlw	39
  3265  0F9A  0627               	xorwf	_myMain+7,w
  3266  0F9B  1D03               	skipz
  3267  0F9C  2F9F               	goto	u1725
  3268  0F9D  3010               	movlw	16
  3269  0F9E  0626               	xorwf	_myMain+6,w
  3270  0F9F                     u1725:	
  3271  0F9F  1D03               	skipz
  3272  0FA0  0008               	return
  3273                           
  3274                           ;Main_B1.c: 264: myMain.Timeout_Counter = 0;
  3275  0FA1  01A6               	clrf	_myMain+6
  3276  0FA2  01A7               	clrf	_myMain+7
  3277                           
  3278                           ;Main_B1.c: 265: myMain.Timeout = 1;
  3279  0FA3  1525               	bsf	_myMain+5,2
  3280  0FA4  0008               	return
  3281  0FA5                     __end_of_Timeout_Counter:	
  3282                           
  3283                           	psect	text11
  3284  0F2F                     __ptext11:	
  3285 ;; *************** function _WDT_Main *****************
  3286 ;; Defined at:
  3287 ;;		line 1019 in file "../src/MCU_B1.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;		None
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;		None
  3292 ;; Return value:  Size  Location     Type
  3293 ;;		None               void
  3294 ;; Registers used:
  3295 ;;		wreg, status,2, status,0, pclath, cstack
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3301 ;;      Params:         0       0       0       0
  3302 ;;      Locals:         0       0       0       0
  3303 ;;      Temps:          1       0       0       0
  3304 ;;      Totals:         1       0       0       0
  3305 ;;Total ram usage:        1 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    3
  3308 ;; This function calls:
  3309 ;;		_WDT_Clearing
  3310 ;; This function is called by:
  3311 ;;		_main
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           
  3316                           ;psect for function _WDT_Main
  3317  0F2F                     _WDT_Main:	
  3318                           
  3319                           ;MCU_B1.c: 1020: if (WDT.Enable == 1) {
  3320                           
  3321                           ;incstack = 0
  3322                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3323  0F2F  1C76               	btfss	_WDT,0
  3324  0F30  0008               	return
  3325                           
  3326                           ;MCU_B1.c: 1021: if (WDT.Timer-- > 0) {
  3327  0F31  3001               	movlw	1
  3328  0F32  02F7               	subwf	_WDT+1,f
  3329  0F33  0877               	movf	_WDT+1,w
  3330  0F34  3AFF               	xorlw	255
  3331  0F35  1903               	skipnz
  3332  0F36  0008               	return
  3333                           
  3334                           ;MCU_B1.c: 1022: WDT.Timer = 100;
  3335  0F37  3064               	movlw	100
  3336  0F38  00F4               	movwf	??_WDT_Main
  3337  0F39  0874               	movf	??_WDT_Main,w
  3338  0F3A  00F7               	movwf	_WDT+1
  3339                           
  3340                           ;MCU_B1.c: 1023: WDT_Clearing();
  3341  0F3B  118A  2002         	fcall	_WDT_Clearing
  3342  0F3D  0008               	return
  3343  0F3E                     __end_of_WDT_Main:	
  3344                           
  3345                           	psect	text12
  3346  0002                     __ptext12:	
  3347 ;; *************** function _WDT_Clearing *****************
  3348 ;; Defined at:
  3349 ;;		line 1029 in file "../src/MCU_B1.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;		None
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;		None
  3354 ;; Return value:  Size  Location     Type
  3355 ;;		None               void
  3356 ;; Registers used:
  3357 ;;		None
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3363 ;;      Params:         0       0       0       0
  3364 ;;      Locals:         0       0       0       0
  3365 ;;      Temps:          0       0       0       0
  3366 ;;      Totals:         0       0       0       0
  3367 ;;Total ram usage:        0 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:    2
  3370 ;; This function calls:
  3371 ;;		Nothing
  3372 ;; This function is called by:
  3373 ;;		_WDT_Main
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           
  3378                           ;psect for function _WDT_Clearing
  3379  0002                     _WDT_Clearing:	
  3380                           
  3381                           ;incstack = 0
  3382                           ; Regs used in _WDT_Clearing: []
  3383  0002  0064               	clrwdt	;# 
  3384  0003  0008               	return
  3385  0004                     __end_of_WDT_Clearing:	
  3386                           
  3387                           	psect	text13
  3388  0026                     __ptext13:	
  3389 ;; *************** function _PIR_Main *****************
  3390 ;; Defined at:
  3391 ;;		line 15 in file "../src/PIR_B1.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;		None               void
  3398 ;; Registers used:
  3399 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3405 ;;      Params:         0       0       0       0
  3406 ;;      Locals:         0       0       0       0
  3407 ;;      Temps:          0       5       0       0
  3408 ;;      Totals:         0       5       0       0
  3409 ;;Total ram usage:        5 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    4
  3412 ;; This function calls:
  3413 ;;		_getCDS_Status
  3414 ;;		_getLights_Status
  3415 ;;		_getMain_AD_Safe
  3416 ;;		_getMain_All_Error_Status
  3417 ;;		_setLED
  3418 ;;		_setLights_Trigger
  3419 ;; This function is called by:
  3420 ;;		_main
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           
  3425                           ;psect for function _PIR_Main
  3426  0026                     _PIR_Main:	
  3427                           
  3428                           ;PIR_B1.c: 16: if (_PIR.Enable == 1) {
  3429                           
  3430                           ;incstack = 0
  3431                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3432  0026  1283               	bcf	3,5	;RP0=0, select bank0
  3433  0027  1303               	bcf	3,6	;RP1=0, select bank0
  3434  0028  1C31               	btfss	__PIR,0
  3435  0029  0008               	return
  3436                           
  3437                           ;PIR_B1.c: 18: if (getCDS_Status() == 1 && getMain_All_Error_Status(0) == 0) {
  3438  002A  158A  26AB  118A   	fcall	_getCDS_Status
  3439  002D  3A01               	xorlw	1
  3440  002E  1D03               	skipz
  3441  002F  2846               	goto	l689
  3442  0030  3000               	movlw	0
  3443  0031  118A  27B3  118A   	fcall	_getMain_All_Error_Status
  3444  0034  3800               	iorlw	0
  3445  0035  1D03               	skipz
  3446  0036  2846               	goto	l689
  3447                           
  3448                           ;PIR_B1.c: 19: if (_PIR.Detect == 0) {
  3449  0037  1283               	bcf	3,5	;RP0=0, select bank0
  3450  0038  1303               	bcf	3,6	;RP1=0, select bank0
  3451  0039  1A31               	btfsc	__PIR,4
  3452  003A  2878               	goto	l3923
  3453                           
  3454                           ;PIR_B1.c: 20: _PIR.Detect = 1;
  3455  003B  1631               	bsf	__PIR,4
  3456                           
  3457                           ;PIR_B1.c: 21: _PIR.Available = 1;
  3458  003C  17B1               	bsf	__PIR,7
  3459                           
  3460                           ;PIR_B1.c: 22: if (_PIR.OK == 0) {
  3461  003D  19B1               	btfsc	__PIR,3
  3462  003E  2878               	goto	l3923
  3463                           
  3464                           ;PIR_B1.c: 23: setLED(2, 1);
  3465  003F  01E0               	clrf	setLED@command
  3466  0040  0AE0               	incf	setLED@command,f
  3467  0041  3002               	movlw	2
  3468  0042  118A  24AE  118A   	fcall	_setLED
  3469                           
  3470                           ;PIR_B1.c: 24: }
  3471                           ;PIR_B1.c: 25: }
  3472                           ;PIR_B1.c: 26: } else {
  3473  0045  2878               	goto	l3923
  3474  0046                     l689:	
  3475                           
  3476                           ;PIR_B1.c: 27: if (_PIR.Detect == 1) {
  3477  0046  1283               	bcf	3,5	;RP0=0, select bank0
  3478  0047  1303               	bcf	3,6	;RP1=0, select bank0
  3479  0048  1E31               	btfss	__PIR,4
  3480  0049  2878               	goto	l3923
  3481                           
  3482                           ;PIR_B1.c: 28: _PIR.Detect = 0;
  3483  004A  1231               	bcf	__PIR,4
  3484                           
  3485                           ;PIR_B1.c: 29: _PIR.Available = 0;
  3486  004B  13B1               	bcf	__PIR,7
  3487                           
  3488                           ;PIR_B1.c: 30: _PIR.Status = 0;
  3489  004C  1331               	bcf	__PIR,6
  3490                           
  3491                           ;PIR_B1.c: 33: _PIR.Time = 0;
  3492  004D  01B6               	clrf	__PIR+5
  3493                           
  3494                           ;PIR_B1.c: 34: _PIR.RangeTime1 = 0;
  3495  004E  01DB               	clrf	__PIR+42
  3496                           
  3497                           ;PIR_B1.c: 35: _PIR.RangeValue = 7;
  3498  004F  3007               	movlw	7
  3499  0050  00E4               	movwf	??_PIR_Main
  3500  0051  0864               	movf	??_PIR_Main,w
  3501  0052  00DD               	movwf	__PIR+44
  3502                           
  3503                           ;PIR_B1.c: 36: _PIR.RangeCount = 0;
  3504  0053  01DC               	clrf	__PIR+43
  3505                           
  3506                           ;PIR_B1.c: 38: setLED(1, 0);
  3507  0054  01E0               	clrf	setLED@command
  3508  0055  3001               	movlw	1
  3509  0056  118A  24AE  118A   	fcall	_setLED
  3510                           
  3511                           ;PIR_B1.c: 39: setLED(2, 0);
  3512  0059  1283               	bcf	3,5	;RP0=0, select bank0
  3513  005A  1303               	bcf	3,6	;RP1=0, select bank0
  3514  005B  01E0               	clrf	setLED@command
  3515  005C  3002               	movlw	2
  3516  005D  118A  24AE  118A   	fcall	_setLED
  3517                           
  3518                           ;PIR_B1.c: 40: _PIR.Status = 0;
  3519  0060  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0061  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0062  1331               	bcf	__PIR,6
  3522                           
  3523                           ;PIR_B1.c: 41: if (_PIR.OK == 1) {
  3524  0063  1DB1               	btfss	__PIR,3
  3525  0064  2867               	goto	l694
  3526                           
  3527                           ;PIR_B1.c: 42: _PIR.Count = 0;
  3528  0065  01D2               	clrf	__PIR+33
  3529  0066  01D3               	clrf	__PIR+34
  3530  0067                     l694:	
  3531                           
  3532                           ;PIR_B1.c: 43: }
  3533                           ;PIR_B1.c: 44: _PIR.CloseTimeSeconds = 0;
  3534  0067  01D7               	clrf	__PIR+38
  3535                           
  3536                           ;PIR_B1.c: 45: _PIR.CloseTimeMinutes = 0;
  3537  0068  01D5               	clrf	__PIR+36
  3538  0069  01D6               	clrf	__PIR+37
  3539                           
  3540                           ;PIR_B1.c: 50: if (getLights_Status(1) == 1) {
  3541  006A  3001               	movlw	1
  3542  006B  158A  276E  118A   	fcall	_getLights_Status
  3543  006E  3A01               	xorlw	1
  3544  006F  1D03               	skipz
  3545  0070  2878               	goto	l3923
  3546                           
  3547                           ;PIR_B1.c: 51: setLights_Trigger(1, 0);
  3548  0071  1283               	bcf	3,5	;RP0=0, select bank0
  3549  0072  1303               	bcf	3,6	;RP1=0, select bank0
  3550  0073  01E0               	clrf	setLights_Trigger@command
  3551  0074  3001               	movlw	1
  3552  0075  118A  277A  118A   	fcall	_setLights_Trigger
  3553  0078                     l3923:	
  3554                           
  3555                           ;PIR_B1.c: 52: }
  3556                           ;PIR_B1.c: 55: }
  3557                           ;PIR_B1.c: 56: }
  3558                           ;PIR_B1.c: 58: if (_PIR.ADtoGO == 0) {
  3559  0078  1283               	bcf	3,5	;RP0=0, select bank0
  3560  0079  1303               	bcf	3,6	;RP1=0, select bank0
  3561  007A  18B1               	btfsc	__PIR,1
  3562  007B  2896               	goto	l696
  3563                           
  3564                           ;PIR_B1.c: 59: _PIR.Time++;
  3565  007C  3001               	movlw	1
  3566  007D  00E4               	movwf	??_PIR_Main
  3567  007E  0864               	movf	??_PIR_Main,w
  3568  007F  07B6               	addwf	__PIR+5,f
  3569                           
  3570                           ;PIR_B1.c: 60: if (_PIR.Time == 10) {
  3571  0080  0836               	movf	__PIR+5,w
  3572  0081  3A0A               	xorlw	10
  3573  0082  1D03               	skipz
  3574  0083  296F               	goto	l4007
  3575                           
  3576                           ;PIR_B1.c: 61: if (getMain_AD_Safe() == 1) {
  3577  0084  158A  26F6  118A   	fcall	_getMain_AD_Safe
  3578  0087  3A01               	xorlw	1
  3579  0088  1D03               	skipz
  3580  0089  288F               	goto	l3935
  3581                           
  3582                           ;PIR_B1.c: 62: _PIR.Time = 0;
  3583  008A  1283               	bcf	3,5	;RP0=0, select bank0
  3584  008B  1303               	bcf	3,6	;RP1=0, select bank0
  3585  008C  01B6               	clrf	__PIR+5
  3586                           
  3587                           ;PIR_B1.c: 63: _PIR.ADtoGO = 1;
  3588  008D  14B1               	bsf	__PIR,1
  3589                           
  3590                           ;PIR_B1.c: 64: } else {
  3591  008E  296F               	goto	l4007
  3592  008F                     l3935:	
  3593                           
  3594                           ;PIR_B1.c: 65: _PIR.Time = 10;
  3595  008F  300A               	movlw	10
  3596  0090  1283               	bcf	3,5	;RP0=0, select bank0
  3597  0091  1303               	bcf	3,6	;RP1=0, select bank0
  3598  0092  00E4               	movwf	??_PIR_Main
  3599  0093  0864               	movf	??_PIR_Main,w
  3600  0094  00B6               	movwf	__PIR+5
  3601                           
  3602                           ;PIR_B1.c: 66: }
  3603                           ;PIR_B1.c: 67: }
  3604                           ;PIR_B1.c: 68: } else {
  3605  0095  296F               	goto	l4007
  3606  0096                     l696:	
  3607                           
  3608                           ;PIR_B1.c: 69: if (_PIR.GO == 1) {
  3609  0096  1D31               	btfss	__PIR,2
  3610  0097  296F               	goto	l4007
  3611                           
  3612                           ;PIR_B1.c: 70: _PIR.GO = 0;
  3613  0098  1131               	bcf	__PIR,2
  3614                           
  3615                           ;PIR_B1.c: 71: if (_PIR.Available == 1) {
  3616  0099  1BB1               	btfsc	__PIR,7
  3617                           
  3618                           ;PIR_B1.c: 72: if (_PIR.OK == 1) {
  3619  009A  1DB1               	btfss	__PIR,3
  3620  009B  296F               	goto	l4007
  3621                           
  3622                           ;PIR_B1.c: 74: _PIR.Time++;
  3623  009C  3001               	movlw	1
  3624  009D  00E4               	movwf	??_PIR_Main
  3625  009E  0864               	movf	??_PIR_Main,w
  3626  009F  07B6               	addwf	__PIR+5,f
  3627                           
  3628                           ;PIR_B1.c: 75: if (_PIR.Time == 60) {
  3629  00A0  0836               	movf	__PIR+5,w
  3630  00A1  3A3C               	xorlw	60
  3631  00A2  1D03               	skipz
  3632  00A3  28D0               	goto	l3977
  3633                           
  3634                           ;PIR_B1.c: 76: _PIR.Time = 0;
  3635  00A4  01B6               	clrf	__PIR+5
  3636                           
  3637                           ;PIR_B1.c: 77: if (_PIR.RangeCount >= 90) {
  3638  00A5  305A               	movlw	90
  3639  00A6  025C               	subwf	__PIR+43,w
  3640  00A7  1C03               	skipc
  3641  00A8  28B4               	goto	l3959
  3642                           
  3643                           ;PIR_B1.c: 78: _PIR.RangeTime1 = 0;
  3644  00A9  01DB               	clrf	__PIR+42
  3645                           
  3646                           ;PIR_B1.c: 80: if (_PIR.RangeValue == 7) {
  3647  00AA  085D               	movf	__PIR+44,w
  3648  00AB  3A07               	xorlw	7
  3649  00AC  1903               	btfsc	3,2
  3650  00AD  28C5               	goto	L12
  3651                           
  3652                           ;PIR_B1.c: 82: } else if (_PIR.RangeValue == 25) {
  3653                           
  3654                           ;PIR_B1.c: 81: _PIR.RangeValue = 25;
  3655  00AE  085D               	movf	__PIR+44,w
  3656  00AF  3A19               	xorlw	25
  3657  00B0  1D03               	skipz
  3658  00B1  28CF               	goto	l3975
  3659                           
  3660                           ;PIR_B1.c: 83: _PIR.RangeValue = 35;
  3661  00B2  3023               	movlw	35
  3662  00B3  28CC               	goto	L9
  3663  00B4                     l3959:	
  3664                           ;PIR_B1.c: 84: }
  3665                           ;PIR_B1.c: 85: } else if (_PIR.RangeCount <= 10) {
  3666                           
  3667  00B4  300B               	movlw	11
  3668  00B5  025C               	subwf	__PIR+43,w
  3669  00B6  1803               	skipnc
  3670  00B7  28CF               	goto	l3975
  3671                           
  3672                           ;PIR_B1.c: 86: _PIR.RangeTime1++;
  3673  00B8  3001               	movlw	1
  3674  00B9  00E4               	movwf	??_PIR_Main
  3675  00BA  0864               	movf	??_PIR_Main,w
  3676  00BB  07DB               	addwf	__PIR+42,f
  3677                           
  3678                           ;PIR_B1.c: 87: if (_PIR.RangeTime1 == 2) {
  3679  00BC  085B               	movf	__PIR+42,w
  3680  00BD  3A02               	xorlw	2
  3681  00BE  1D03               	skipz
  3682  00BF  28CF               	goto	l3975
  3683                           
  3684                           ;PIR_B1.c: 88: _PIR.RangeTime1 = 0;
  3685  00C0  01DB               	clrf	__PIR+42
  3686                           
  3687                           ;PIR_B1.c: 90: if (_PIR.RangeValue == 35) {
  3688  00C1  085D               	movf	__PIR+44,w
  3689  00C2  3A23               	xorlw	35
  3690  00C3  1D03               	skipz
  3691  00C4  28C7               	goto	l3971
  3692  00C5                     L12:	
  3693                           
  3694                           ;PIR_B1.c: 91: _PIR.RangeValue = 25;
  3695  00C5  3019               	movlw	25
  3696  00C6  28CC               	goto	L9
  3697  00C7                     l3971:	
  3698                           ;PIR_B1.c: 92: } else if (_PIR.RangeValue == 25) {
  3699                           
  3700  00C7  085D               	movf	__PIR+44,w
  3701  00C8  3A19               	xorlw	25
  3702  00C9  1D03               	skipz
  3703  00CA  28CF               	goto	l3975
  3704                           
  3705                           ;PIR_B1.c: 93: _PIR.RangeValue = 7;
  3706  00CB  3007               	movlw	7
  3707  00CC                     L9:	
  3708  00CC  00E4               	movwf	??_PIR_Main
  3709  00CD  0864               	movf	??_PIR_Main,w
  3710  00CE  00DD               	movwf	__PIR+44
  3711  00CF                     l3975:	
  3712                           
  3713                           ;PIR_B1.c: 94: }
  3714                           ;PIR_B1.c: 95: }
  3715                           ;PIR_B1.c: 96: }
  3716                           ;PIR_B1.c: 97: _PIR.RangeCount = 0;
  3717  00CF  01DC               	clrf	__PIR+43
  3718  00D0                     l3977:	
  3719                           
  3720                           ;PIR_B1.c: 98: }
  3721                           ;PIR_B1.c: 101: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))
  3722                           ;PIR_B1.c: 102: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + (_PIR.RangeValue + _PIR.Of
      +                          fset)))) {
  3723  00D0  085D               	movf	__PIR+44,w
  3724  00D1  075F               	addwf	__PIR+46,w
  3725  00D2  00E4               	movwf	??_PIR_Main
  3726  00D3  01E5               	clrf	??_PIR_Main+1
  3727  00D4  0DE5               	rlf	??_PIR_Main+1,f
  3728  00D5  09E4               	comf	??_PIR_Main,f
  3729  00D6  09E5               	comf	??_PIR_Main+1,f
  3730  00D7  0AE4               	incf	??_PIR_Main,f
  3731  00D8  1903               	skipnz
  3732  00D9  0AE5               	incf	??_PIR_Main+1,f
  3733  00DA  0837               	movf	__PIR+6,w
  3734  00DB  0764               	addwf	??_PIR_Main,w
  3735  00DC  00E6               	movwf	??_PIR_Main+2
  3736  00DD  0865               	movf	??_PIR_Main+1,w
  3737  00DE  1803               	skipnc
  3738  00DF  0A65               	incf	??_PIR_Main+1,w
  3739  00E0  00E7               	movwf	??_PIR_Main+3
  3740  00E1  0867               	movf	??_PIR_Main+3,w
  3741  00E2  3A80               	xorlw	128
  3742  00E3  3C80               	sublw	128
  3743  00E4  1D03               	skipz
  3744  00E5  28E8               	goto	u4365
  3745  00E6  0866               	movf	??_PIR_Main+2,w
  3746  00E7  0232               	subwf	__PIR+1,w
  3747  00E8                     u4365:	
  3748  00E8  1C03               	skipc
  3749  00E9  290A               	goto	l3987
  3750  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  3751  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  3752  00EC  085D               	movf	__PIR+44,w
  3753  00ED  075F               	addwf	__PIR+46,w
  3754  00EE  00E4               	movwf	??_PIR_Main
  3755  00EF  01E5               	clrf	??_PIR_Main+1
  3756  00F0  0DE5               	rlf	??_PIR_Main+1,f
  3757  00F1  0837               	movf	__PIR+6,w
  3758  00F2  0764               	addwf	??_PIR_Main,w
  3759  00F3  00E6               	movwf	??_PIR_Main+2
  3760  00F4  3000               	movlw	0
  3761  00F5  1803               	skipnc
  3762  00F6  3001               	movlw	1
  3763  00F7  0765               	addwf	??_PIR_Main+1,w
  3764  00F8  00E7               	movwf	??_PIR_Main+3
  3765  00F9  0867               	movf	??_PIR_Main+3,w
  3766  00FA  3A80               	xorlw	128
  3767  00FB  00E8               	movwf	??_PIR_Main+4
  3768  00FC  3080               	movlw	128
  3769  00FD  0268               	subwf	??_PIR_Main+4,w
  3770  00FE  1D03               	skipz
  3771  00FF  2902               	goto	u4375
  3772  0100  0832               	movf	__PIR+1,w
  3773  0101  0266               	subwf	??_PIR_Main+2,w
  3774  0102                     u4375:	
  3775  0102  1C03               	skipc
  3776  0103  290A               	goto	l3987
  3777                           
  3778                           ;PIR_B1.c: 103: _PIR.Count = 0;
  3779  0104  1283               	bcf	3,5	;RP0=0, select bank0
  3780  0105  1303               	bcf	3,6	;RP1=0, select bank0
  3781  0106  01D2               	clrf	__PIR+33
  3782  0107  01D3               	clrf	__PIR+34
  3783                           
  3784                           ;PIR_B1.c: 104: setLED(1, 0);
  3785  0108  01E0               	clrf	setLED@command
  3786  0109  2958               	goto	L13
  3787  010A                     l3987:	
  3788                           ;PIR_B1.c: 106: } else {
  3789                           
  3790                           ;PIR_B1.c: 105: setLED(2, 0);
  3791                           
  3792                           
  3793                           ;PIR_B1.c: 107: _PIR.RangeCount++;
  3794  010A  3001               	movlw	1
  3795  010B  1283               	bcf	3,5	;RP0=0, select bank0
  3796  010C  1303               	bcf	3,6	;RP1=0, select bank0
  3797  010D  00E4               	movwf	??_PIR_Main
  3798  010E  0864               	movf	??_PIR_Main,w
  3799  010F  07DC               	addwf	__PIR+43,f
  3800                           
  3801                           ;PIR_B1.c: 108: _PIR.Count++;
  3802  0110  3001               	movlw	1
  3803  0111  07D2               	addwf	__PIR+33,f
  3804  0112  1803               	skipnc
  3805  0113  0AD3               	incf	__PIR+34,f
  3806  0114  3000               	movlw	0
  3807  0115  07D3               	addwf	__PIR+34,f
  3808                           
  3809                           ;PIR_B1.c: 109: if (_PIR.Count == _PIR.TriggerValue) {
  3810  0116  0854               	movf	__PIR+35,w
  3811  0117  00E4               	movwf	??_PIR_Main
  3812  0118  01E5               	clrf	??_PIR_Main+1
  3813  0119  0853               	movf	__PIR+34,w
  3814  011A  0665               	xorwf	??_PIR_Main+1,w
  3815  011B  1D03               	skipz
  3816  011C  291F               	goto	u4385
  3817  011D  0852               	movf	__PIR+33,w
  3818  011E  0664               	xorwf	??_PIR_Main,w
  3819  011F                     u4385:	
  3820  011F  1D03               	skipz
  3821  0120  296F               	goto	l4007
  3822                           
  3823                           ;PIR_B1.c: 110: _PIR.Count = 0;
  3824  0121  01D2               	clrf	__PIR+33
  3825  0122  01D3               	clrf	__PIR+34
  3826                           
  3827                           ;PIR_B1.c: 111: _PIR.CloseTimeSeconds = 0;
  3828  0123  01D7               	clrf	__PIR+38
  3829                           
  3830                           ;PIR_B1.c: 112: _PIR.CloseTimeMinutes = 0;
  3831  0124  01D5               	clrf	__PIR+36
  3832  0125  01D6               	clrf	__PIR+37
  3833                           
  3834                           ;PIR_B1.c: 116: if (getLights_Status(1) == 0) {
  3835  0126  3001               	movlw	1
  3836  0127  158A  276E  118A   	fcall	_getLights_Status
  3837  012A  3800               	iorlw	0
  3838  012B  1D03               	skipz
  3839  012C  2935               	goto	l3999
  3840                           
  3841                           ;PIR_B1.c: 117: setLights_Trigger(1, 1);
  3842  012D  1283               	bcf	3,5	;RP0=0, select bank0
  3843  012E  1303               	bcf	3,6	;RP1=0, select bank0
  3844  012F  01E0               	clrf	setLights_Trigger@command
  3845  0130  0AE0               	incf	setLights_Trigger@command,f
  3846  0131  3001               	movlw	1
  3847  0132  118A  277A  118A   	fcall	_setLights_Trigger
  3848  0135                     l3999:	
  3849                           
  3850                           ;PIR_B1.c: 118: }
  3851                           ;PIR_B1.c: 122: _PIR.Status = 1;
  3852  0135  1283               	bcf	3,5	;RP0=0, select bank0
  3853  0136  1303               	bcf	3,6	;RP1=0, select bank0
  3854  0137  1731               	bsf	__PIR,6
  3855                           
  3856                           ;PIR_B1.c: 124: if ((_PIR.SignalAD <= (_PIR.ReferenceVoltage - (_PIR.RangeValue + _PIR.O
      +                          ffset)))) {
  3857  0138  085D               	movf	__PIR+44,w
  3858  0139  075F               	addwf	__PIR+46,w
  3859  013A  00E4               	movwf	??_PIR_Main
  3860  013B  01E5               	clrf	??_PIR_Main+1
  3861  013C  0DE5               	rlf	??_PIR_Main+1,f
  3862  013D  09E4               	comf	??_PIR_Main,f
  3863  013E  09E5               	comf	??_PIR_Main+1,f
  3864  013F  0AE4               	incf	??_PIR_Main,f
  3865  0140  1903               	skipnz
  3866  0141  0AE5               	incf	??_PIR_Main+1,f
  3867  0142  0837               	movf	__PIR+6,w
  3868  0143  0764               	addwf	??_PIR_Main,w
  3869  0144  00E6               	movwf	??_PIR_Main+2
  3870  0145  0865               	movf	??_PIR_Main+1,w
  3871  0146  1803               	skipnc
  3872  0147  0A65               	incf	??_PIR_Main+1,w
  3873  0148  00E7               	movwf	??_PIR_Main+3
  3874  0149  0867               	movf	??_PIR_Main+3,w
  3875  014A  3A80               	xorlw	128
  3876  014B  00E8               	movwf	??_PIR_Main+4
  3877  014C  3080               	movlw	128
  3878  014D  0268               	subwf	??_PIR_Main+4,w
  3879  014E  1D03               	skipz
  3880  014F  2952               	goto	u4405
  3881  0150  0832               	movf	__PIR+1,w
  3882  0151  0266               	subwf	??_PIR_Main+2,w
  3883  0152                     u4405:	
  3884  0152  1C03               	skipc
  3885  0153  2960               	goto	l4005
  3886                           
  3887                           ;PIR_B1.c: 125: setLED(1, 1);
  3888  0154  1283               	bcf	3,5	;RP0=0, select bank0
  3889  0155  1303               	bcf	3,6	;RP1=0, select bank0
  3890  0156  01E0               	clrf	setLED@command
  3891  0157  0AE0               	incf	setLED@command,f
  3892  0158                     L13:	
  3893  0158  3001               	movlw	1
  3894  0159  118A  24AE  118A   	fcall	_setLED
  3895                           
  3896                           ;PIR_B1.c: 126: setLED(2, 0);
  3897  015C  1283               	bcf	3,5	;RP0=0, select bank0
  3898  015D  1303               	bcf	3,6	;RP1=0, select bank0
  3899  015E  01E0               	clrf	setLED@command
  3900  015F  296B               	goto	L10
  3901  0160                     l4005:	
  3902                           ;PIR_B1.c: 127: } else {
  3903                           
  3904                           
  3905                           ;PIR_B1.c: 128: setLED(1, 0);
  3906  0160  1283               	bcf	3,5	;RP0=0, select bank0
  3907  0161  1303               	bcf	3,6	;RP1=0, select bank0
  3908  0162  01E0               	clrf	setLED@command
  3909  0163  3001               	movlw	1
  3910  0164  118A  24AE  118A   	fcall	_setLED
  3911                           
  3912                           ;PIR_B1.c: 129: setLED(2, 1);
  3913  0167  1283               	bcf	3,5	;RP0=0, select bank0
  3914  0168  1303               	bcf	3,6	;RP1=0, select bank0
  3915  0169  01E0               	clrf	setLED@command
  3916  016A  0AE0               	incf	setLED@command,f
  3917  016B                     L10:	
  3918  016B  3002               	movlw	2
  3919  016C  118A  24AE  118A   	fcall	_setLED
  3920  016F                     l4007:	
  3921                           
  3922                           ;PIR_B1.c: 130: }
  3923                           ;PIR_B1.c: 131: }
  3924                           ;PIR_B1.c: 132: }
  3925                           ;PIR_B1.c: 133: }
  3926                           ;PIR_B1.c: 134: }
  3927                           ;PIR_B1.c: 135: }
  3928                           ;PIR_B1.c: 136: }
  3929                           ;PIR_B1.c: 137: if (_PIR.OK == 0) {
  3930  016F  1283               	bcf	3,5	;RP0=0, select bank0
  3931  0170  1303               	bcf	3,6	;RP1=0, select bank0
  3932  0171  19B1               	btfsc	__PIR,3
  3933  0172  2989               	goto	l4017
  3934                           
  3935                           ;PIR_B1.c: 138: _PIR.Count++;
  3936  0173  3001               	movlw	1
  3937  0174  07D2               	addwf	__PIR+33,f
  3938  0175  1803               	skipnc
  3939  0176  0AD3               	incf	__PIR+34,f
  3940  0177  3000               	movlw	0
  3941  0178  07D3               	addwf	__PIR+34,f
  3942                           
  3943                           ;PIR_B1.c: 139: if (_PIR.Count == 3000) {
  3944  0179  300B               	movlw	11
  3945  017A  0653               	xorwf	__PIR+34,w
  3946  017B  1D03               	skipz
  3947  017C  297F               	goto	u4425
  3948  017D  30B8               	movlw	184
  3949  017E  0652               	xorwf	__PIR+33,w
  3950  017F                     u4425:	
  3951  017F  1D03               	skipz
  3952  0180  2989               	goto	l4017
  3953                           
  3954                           ;PIR_B1.c: 140: _PIR.Count = 0;
  3955  0181  01D2               	clrf	__PIR+33
  3956  0182  01D3               	clrf	__PIR+34
  3957                           
  3958                           ;PIR_B1.c: 141: _PIR.OK = 1;
  3959  0183  15B1               	bsf	__PIR,3
  3960                           
  3961                           ;PIR_B1.c: 142: setLED(2, 0);
  3962  0184  01E0               	clrf	setLED@command
  3963  0185  3002               	movlw	2
  3964  0186  118A  24AE  118A   	fcall	_setLED
  3965  0189                     l4017:	
  3966                           
  3967                           ;PIR_B1.c: 143: }
  3968                           ;PIR_B1.c: 144: }
  3969                           ;PIR_B1.c: 145: if (_PIR.Status == 1) {
  3970  0189  1283               	bcf	3,5	;RP0=0, select bank0
  3971  018A  1303               	bcf	3,6	;RP1=0, select bank0
  3972  018B  1F31               	btfss	__PIR,6
  3973  018C  0008               	return
  3974                           
  3975                           ;PIR_B1.c: 146: _PIR.CloseTimeSeconds++;
  3976  018D  3001               	movlw	1
  3977  018E  00E4               	movwf	??_PIR_Main
  3978  018F  0864               	movf	??_PIR_Main,w
  3979  0190  07D7               	addwf	__PIR+38,f
  3980                           
  3981                           ;PIR_B1.c: 147: if (_PIR.CloseTimeSeconds == 100) {
  3982  0191  0857               	movf	__PIR+38,w
  3983  0192  3A64               	xorlw	100
  3984  0193  1D03               	skipz
  3985  0194  0008               	return
  3986                           
  3987                           ;PIR_B1.c: 148: _PIR.CloseTimeSeconds = 0;
  3988  0195  01D7               	clrf	__PIR+38
  3989                           
  3990                           ;PIR_B1.c: 149: _PIR.CloseTimeMinutes++;
  3991  0196  3001               	movlw	1
  3992  0197  07D5               	addwf	__PIR+36,f
  3993  0198  1803               	skipnc
  3994  0199  0AD6               	incf	__PIR+37,f
  3995  019A  3000               	movlw	0
  3996  019B  07D6               	addwf	__PIR+37,f
  3997                           
  3998                           ;PIR_B1.c: 150: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  3999  019C  0859               	movf	__PIR+40,w
  4000  019D  0656               	xorwf	__PIR+37,w
  4001  019E  1D03               	skipz
  4002  019F  29A2               	goto	u4455
  4003  01A0  0858               	movf	__PIR+39,w
  4004  01A1  0655               	xorwf	__PIR+36,w
  4005  01A2                     u4455:	
  4006  01A2  1D03               	skipz
  4007  01A3  0008               	return
  4008                           
  4009                           ;PIR_B1.c: 151: _PIR.CloseTimeMinutes = 0;
  4010  01A4  01D5               	clrf	__PIR+36
  4011  01A5  01D6               	clrf	__PIR+37
  4012                           
  4013                           ;PIR_B1.c: 152: _PIR.Status = 0;
  4014  01A6  1331               	bcf	__PIR,6
  4015                           
  4016                           ;PIR_B1.c: 156: if (getLights_Status(1) == 1) {
  4017  01A7  3001               	movlw	1
  4018  01A8  158A  276E  118A   	fcall	_getLights_Status
  4019  01AB  3A01               	xorlw	1
  4020  01AC  1D03               	skipz
  4021  01AD  0008               	return
  4022                           
  4023                           ;PIR_B1.c: 157: setLights_Trigger(1, 0);
  4024  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  4025  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  4026  01B0  01E0               	clrf	setLights_Trigger@command
  4027  01B1  3001               	movlw	1
  4028  01B2  118A  277A         	fcall	_setLights_Trigger
  4029  01B4  0008               	return
  4030  01B5                     __end_of_PIR_Main:	
  4031                           
  4032                           	psect	text14
  4033  077A                     __ptext14:	
  4034 ;; *************** function _setLights_Trigger *****************
  4035 ;; Defined at:
  4036 ;;		line 189 in file "../src/TriacRelay_B1.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;  lights          1    wreg     unsigned char 
  4039 ;;  command         1    0[BANK0 ] unsigned char 
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;  lights          1    2[BANK0 ] unsigned char 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;		None               void
  4044 ;; Registers used:
  4045 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4051 ;;      Params:         0       1       0       0
  4052 ;;      Locals:         0       1       0       0
  4053 ;;      Temps:          0       1       0       0
  4054 ;;      Totals:         0       3       0       0
  4055 ;;Total ram usage:        3 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    3
  4058 ;; This function calls:
  4059 ;;		_LightsPointSelect
  4060 ;; This function is called by:
  4061 ;;		_PIR_Main
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function _setLights_Trigger
  4067  077A                     _setLights_Trigger:	
  4068                           
  4069                           ;incstack = 0
  4070                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4071                           ;setLights_Trigger@lights stored from wreg
  4072  077A  1283               	bcf	3,5	;RP0=0, select bank0
  4073  077B  1303               	bcf	3,6	;RP1=0, select bank0
  4074  077C  00E2               	movwf	setLights_Trigger@lights
  4075                           
  4076                           ;TriacRelay_B1.c: 190: LightsPointSelect(lights);
  4077  077D  0862               	movf	setLights_Trigger@lights,w
  4078  077E  158A  26DE         	fcall	_LightsPointSelect
  4079                           
  4080                           ;TriacRelay_B1.c: 191: Lights->Trigger = 1;
  4081  0780  1283               	bcf	3,5	;RP0=0, select bank0
  4082  0781  1303               	bcf	3,6	;RP1=0, select bank0
  4083  0782  0830               	movf	_Lights,w
  4084  0783  0084               	movwf	4
  4085  0784  1383               	bcf	3,7	;select IRP bank0
  4086  0785  1680               	bsf	0,5
  4087                           
  4088                           ;TriacRelay_B1.c: 192: Lights->Switch = command == 1 ? 1 : 0;
  4089  0786  0860               	movf	setLights_Trigger@command,w
  4090  0787  3A01               	xorlw	1
  4091  0788  3000               	movlw	0
  4092  0789  1903               	skipnz
  4093  078A  3001               	movlw	1
  4094  078B  00E1               	movwf	??_setLights_Trigger
  4095  078C  0830               	movf	_Lights,w
  4096  078D  0084               	movwf	4
  4097  078E  0EE1               	swapf	??_setLights_Trigger,f
  4098  078F  0DE1               	rlf	??_setLights_Trigger,f
  4099  0790  0DE1               	rlf	??_setLights_Trigger,f
  4100  0791  0800               	movf	0,w
  4101  0792  0661               	xorwf	??_setLights_Trigger,w
  4102  0793  39BF               	andlw	-65
  4103  0794  0661               	xorwf	??_setLights_Trigger,w
  4104  0795  0080               	movwf	0
  4105  0796  0008               	return
  4106  0797                     __end_of_setLights_Trigger:	
  4107                           
  4108                           	psect	text15
  4109  0EAB                     __ptext15:	
  4110 ;; *************** function _getCDS_Status *****************
  4111 ;; Defined at:
  4112 ;;		line 44 in file "../src/CDS_B1.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;		None
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;  result          1    4[COMMON] unsigned char 
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  1    wreg      unsigned char 
  4119 ;; Registers used:
  4120 ;;		wreg, status,2
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4126 ;;      Params:         0       0       0       0
  4127 ;;      Locals:         1       0       0       0
  4128 ;;      Temps:          0       0       0       0
  4129 ;;      Totals:         1       0       0       0
  4130 ;;Total ram usage:        1 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    2
  4133 ;; This function calls:
  4134 ;;		Nothing
  4135 ;; This function is called by:
  4136 ;;		_PIR_Main
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           
  4141                           ;psect for function _getCDS_Status
  4142  0EAB                     _getCDS_Status:	
  4143                           
  4144                           ;CDS_B1.c: 45: char result = _CDS.Status;
  4145                           
  4146                           ;incstack = 0
  4147                           ; Regs used in _getCDS_Status: [wreg+status,2]
  4148  0EAB  3000               	movlw	0
  4149  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  4150  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
  4151  0EAE  1A28               	btfsc	__CDS,4
  4152  0EAF  3001               	movlw	1
  4153  0EB0  00F4               	movwf	getCDS_Status@result
  4154                           
  4155                           ;CDS_B1.c: 46: return result;
  4156  0EB1  0874               	movf	getCDS_Status@result,w
  4157  0EB2  0008               	return
  4158  0EB3                     __end_of_getCDS_Status:	
  4159                           
  4160                           	psect	text16
  4161  0F5E                     __ptext16:	
  4162 ;; *************** function _PIR_Initialization *****************
  4163 ;; Defined at:
  4164 ;;		line 7 in file "../src/PIR_B1.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;		None
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;		None
  4169 ;; Return value:  Size  Location     Type
  4170 ;;		None               void
  4171 ;; Registers used:
  4172 ;;		wreg
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4178 ;;      Params:         0       0       0       0
  4179 ;;      Locals:         0       0       0       0
  4180 ;;      Temps:          1       0       0       0
  4181 ;;      Totals:         1       0       0       0
  4182 ;;Total ram usage:        1 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    2
  4185 ;; This function calls:
  4186 ;;		Nothing
  4187 ;; This function is called by:
  4188 ;;		_main
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           
  4193                           ;psect for function _PIR_Initialization
  4194  0F5E                     _PIR_Initialization:	
  4195                           
  4196                           ;PIR_B1.c: 8: _PIR.Enable = 1;
  4197                           
  4198                           ;incstack = 0
  4199                           ; Regs used in _PIR_Initialization: [wreg]
  4200  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  4201  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  4202  0F60  1431               	bsf	__PIR,0
  4203                           
  4204                           ;PIR_B1.c: 9: _PIR.RangeValue = 7;
  4205  0F61  3007               	movlw	7
  4206  0F62  00F4               	movwf	??_PIR_Initialization
  4207  0F63  0874               	movf	??_PIR_Initialization,w
  4208  0F64  00DD               	movwf	__PIR+44
  4209                           
  4210                           ;PIR_B1.c: 10: _PIR.CloseTimeValue = 150;
  4211  0F65  3096               	movlw	150
  4212  0F66  00D8               	movwf	__PIR+39
  4213  0F67  3000               	movlw	0
  4214  0F68  00D9               	movwf	__PIR+40
  4215                           
  4216                           ;PIR_B1.c: 11: _PIR.TriggerValue = 2;
  4217  0F69  3002               	movlw	2
  4218  0F6A  00F4               	movwf	??_PIR_Initialization
  4219  0F6B  0874               	movf	??_PIR_Initialization,w
  4220  0F6C  00D4               	movwf	__PIR+35
  4221  0F6D  0008               	return
  4222  0F6E                     __end_of_PIR_Initialization:	
  4223                           
  4224                           	psect	text17
  4225  0F20                     __ptext17:	
  4226 ;; *************** function _Mcu_Initialization *****************
  4227 ;; Defined at:
  4228 ;;		line 30 in file "../src/MCU_B1.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;		None
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;		None
  4233 ;; Return value:  Size  Location     Type
  4234 ;;		None               void
  4235 ;; Registers used:
  4236 ;;		wreg, status,2, status,0, pclath, cstack
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4242 ;;      Params:         0       0       0       0
  4243 ;;      Locals:         0       0       0       0
  4244 ;;      Temps:          0       0       0       0
  4245 ;;      Totals:         0       0       0       0
  4246 ;;Total ram usage:        0 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    3
  4249 ;; This function calls:
  4250 ;;		_ADC_Set
  4251 ;;		_Fosc_Set
  4252 ;;		_IO_Set
  4253 ;;		_TMR1_Set
  4254 ;;		_WDT_Set
  4255 ;; This function is called by:
  4256 ;;		_main
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           
  4261                           ;psect for function _Mcu_Initialization
  4262  0F20                     _Mcu_Initialization:	
  4263                           
  4264                           ;MCU_B1.c: 32: Fosc_Set();
  4265                           
  4266                           ;incstack = 0
  4267                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  4268  0F20  158A  2693  158A   	fcall	_Fosc_Set
  4269                           
  4270                           ;MCU_B1.c: 34: IO_Set();
  4271  0F23  118A  27EB  158A   	fcall	_IO_Set
  4272                           
  4273                           ;MCU_B1.c: 36: ;;
  4274                           ;MCU_B1.c: 38: TMR1_Set();
  4275  0F26  158A  2712  158A   	fcall	_TMR1_Set
  4276                           
  4277                           ;MCU_B1.c: 40: ADC_Set();
  4278  0F29  158A  26A4  158A   	fcall	_ADC_Set
  4279                           
  4280                           ;MCU_B1.c: 42: ;;
  4281                           ;MCU_B1.c: 44: ;;
  4282                           ;MCU_B1.c: 46: ;;
  4283                           ;MCU_B1.c: 48: ;;
  4284                           ;MCU_B1.c: 50: ;;
  4285                           ;MCU_B1.c: 52: WDT_Set();
  4286  0F2C  158A  26EA         	fcall	_WDT_Set
  4287  0F2E  0008               	return
  4288  0F2F                     __end_of_Mcu_Initialization:	
  4289                           
  4290                           	psect	text18
  4291  0EEA                     __ptext18:	
  4292 ;; *************** function _WDT_Set *****************
  4293 ;; Defined at:
  4294 ;;		line 1005 in file "../src/MCU_B1.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;		None
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;		None
  4299 ;; Return value:  Size  Location     Type
  4300 ;;		None               void
  4301 ;; Registers used:
  4302 ;;		wreg
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4308 ;;      Params:         0       0       0       0
  4309 ;;      Locals:         0       0       0       0
  4310 ;;      Temps:          1       0       0       0
  4311 ;;      Totals:         1       0       0       0
  4312 ;;Total ram usage:        1 bytes
  4313 ;; Hardware stack levels used:    1
  4314 ;; Hardware stack levels required when called:    2
  4315 ;; This function calls:
  4316 ;;		Nothing
  4317 ;; This function is called by:
  4318 ;;		_Mcu_Initialization
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           
  4323                           ;psect for function _WDT_Set
  4324  0EEA                     _WDT_Set:	
  4325                           
  4326                           ;MCU_B1.c: 1007: PSA = 1;
  4327                           
  4328                           ;incstack = 0
  4329                           ; Regs used in _WDT_Set: [wreg]
  4330  0EEA  1683               	bsf	3,5	;RP0=1, select bank1
  4331  0EEB  1303               	bcf	3,6	;RP1=0, select bank1
  4332  0EEC  1581               	bsf	1,3	;volatile
  4333                           
  4334                           ;MCU_B1.c: 1008: PS0 = 1;
  4335  0EED  1401               	bsf	1,0	;volatile
  4336                           
  4337                           ;MCU_B1.c: 1009: PS1 = 1;
  4338  0EEE  1481               	bsf	1,1	;volatile
  4339                           
  4340                           ;MCU_B1.c: 1010: PS2 = 1;
  4341  0EEF  1501               	bsf	1,2	;volatile
  4342                           
  4343                           ;MCU_B1.c: 1014: WDT.Enable = 1;
  4344  0EF0  1476               	bsf	_WDT,0
  4345                           
  4346                           ;MCU_B1.c: 1015: WDT.Timer = 10;
  4347  0EF1  300A               	movlw	10
  4348  0EF2  00F4               	movwf	??_WDT_Set
  4349  0EF3  0874               	movf	??_WDT_Set,w
  4350  0EF4  00F7               	movwf	_WDT+1
  4351  0EF5  0008               	return
  4352  0EF6                     __end_of_WDT_Set:	
  4353                           
  4354                           	psect	text19
  4355  0F12                     __ptext19:	
  4356 ;; *************** function _TMR1_Set *****************
  4357 ;; Defined at:
  4358 ;;		line 199 in file "../src/MCU_B1.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;		None
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;		None
  4363 ;; Return value:  Size  Location     Type
  4364 ;;		None               void
  4365 ;; Registers used:
  4366 ;;		wreg
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4372 ;;      Params:         0       0       0       0
  4373 ;;      Locals:         0       0       0       0
  4374 ;;      Temps:          0       0       0       0
  4375 ;;      Totals:         0       0       0       0
  4376 ;;Total ram usage:        0 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    2
  4379 ;; This function calls:
  4380 ;;		Nothing
  4381 ;; This function is called by:
  4382 ;;		_Mcu_Initialization
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           
  4387                           ;psect for function _TMR1_Set
  4388  0F12                     _TMR1_Set:	
  4389                           
  4390                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  4391                           
  4392                           ;incstack = 0
  4393                           ; Regs used in _TMR1_Set: [wreg]
  4394  0F12  3041               	movlw	65
  4395  0F13  1283               	bcf	3,5	;RP0=0, select bank0
  4396  0F14  1303               	bcf	3,6	;RP1=0, select bank0
  4397  0F15  0090               	movwf	16	;volatile
  4398                           
  4399                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  4400  0F16  30FA               	movlw	250
  4401  0F17  008F               	movwf	15	;volatile
  4402                           
  4403                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  4404  0F18  3038               	movlw	56
  4405  0F19  008E               	movwf	14	;volatile
  4406                           
  4407                           ;MCU_B1.c: 203: TMR1IE = 1;
  4408  0F1A  1683               	bsf	3,5	;RP0=1, select bank1
  4409  0F1B  1303               	bcf	3,6	;RP1=0, select bank1
  4410  0F1C  140C               	bsf	12,0	;volatile
  4411                           
  4412                           ;MCU_B1.c: 204: PEIE = 1;
  4413  0F1D  170B               	bsf	11,6	;volatile
  4414                           
  4415                           ;MCU_B1.c: 205: GIE = 1;
  4416  0F1E  178B               	bsf	11,7	;volatile
  4417  0F1F  0008               	return
  4418  0F20                     __end_of_TMR1_Set:	
  4419                           
  4420                           	psect	text20
  4421  07EB                     __ptext20:	
  4422 ;; *************** function _IO_Set *****************
  4423 ;; Defined at:
  4424 ;;		line 60 in file "../src/MCU_B1.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;		None
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;		None
  4429 ;; Return value:  Size  Location     Type
  4430 ;;		None               void
  4431 ;; Registers used:
  4432 ;;		wreg, status,2
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4438 ;;      Params:         0       0       0       0
  4439 ;;      Locals:         0       0       0       0
  4440 ;;      Temps:          0       0       0       0
  4441 ;;      Totals:         0       0       0       0
  4442 ;;Total ram usage:        0 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    2
  4445 ;; This function calls:
  4446 ;;		Nothing
  4447 ;; This function is called by:
  4448 ;;		_Mcu_Initialization
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           
  4453                           ;psect for function _IO_Set
  4454  07EB                     _IO_Set:	
  4455                           
  4456                           ;MCU_B1.c: 62: TRISA = 0b00101111;;
  4457                           
  4458                           ;incstack = 0
  4459                           ; Regs used in _IO_Set: [wreg+status,2]
  4460  07EB  302F               	movlw	47
  4461  07EC  1683               	bsf	3,5	;RP0=1, select bank1
  4462  07ED  1303               	bcf	3,6	;RP1=0, select bank1
  4463  07EE  0085               	movwf	5	;volatile
  4464                           
  4465                           ;MCU_B1.c: 63: TRISB = 0b00000001;;
  4466  07EF  3001               	movlw	1
  4467  07F0  0086               	movwf	6	;volatile
  4468                           
  4469                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  4470  07F1  0187               	clrf	7	;volatile
  4471                           
  4472                           ;MCU_B1.c: 65: ANSELA = 0b00000111;;
  4473  07F2  3007               	movlw	7
  4474  07F3  1683               	bsf	3,5	;RP0=1, select bank3
  4475  07F4  1703               	bsf	3,6	;RP1=1, select bank3
  4476  07F5  0085               	movwf	5	;volatile
  4477                           
  4478                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  4479  07F6  3001               	movlw	1
  4480  07F7  0086               	movwf	6	;volatile
  4481                           
  4482                           ;MCU_B1.c: 67: PORTA = 0b10101111;;
  4483  07F8  30AF               	movlw	175
  4484  07F9  1283               	bcf	3,5	;RP0=0, select bank0
  4485  07FA  1303               	bcf	3,6	;RP1=0, select bank0
  4486  07FB  0085               	movwf	5	;volatile
  4487                           
  4488                           ;MCU_B1.c: 68: PORTB = 0b00000001;;
  4489  07FC  3001               	movlw	1
  4490  07FD  0086               	movwf	6	;volatile
  4491                           
  4492                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  4493  07FE  0187               	clrf	7	;volatile
  4494  07FF  0008               	return
  4495  0800                     __end_of_IO_Set:	
  4496                           
  4497                           	psect	text21
  4498  0E93                     __ptext21:	
  4499 ;; *************** function _Fosc_Set *****************
  4500 ;; Defined at:
  4501 ;;		line 56 in file "../src/MCU_B1.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;		None
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;		None
  4506 ;; Return value:  Size  Location     Type
  4507 ;;		None               void
  4508 ;; Registers used:
  4509 ;;		wreg
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4515 ;;      Params:         0       0       0       0
  4516 ;;      Locals:         0       0       0       0
  4517 ;;      Temps:          0       0       0       0
  4518 ;;      Totals:         0       0       0       0
  4519 ;;Total ram usage:        0 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    2
  4522 ;; This function calls:
  4523 ;;		Nothing
  4524 ;; This function is called by:
  4525 ;;		_Mcu_Initialization
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           
  4530                           ;psect for function _Fosc_Set
  4531  0E93                     _Fosc_Set:	
  4532                           
  4533                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  4534                           
  4535                           ;incstack = 0
  4536                           ; Regs used in _Fosc_Set: [wreg]
  4537  0E93  303C               	movlw	60
  4538  0E94  1683               	bsf	3,5	;RP0=1, select bank1
  4539  0E95  1303               	bcf	3,6	;RP1=0, select bank1
  4540  0E96  0090               	movwf	16	;volatile
  4541  0E97  0008               	return
  4542  0E98                     __end_of_Fosc_Set:	
  4543                           
  4544                           	psect	text22
  4545  0EA4                     __ptext22:	
  4546 ;; *************** function _ADC_Set *****************
  4547 ;; Defined at:
  4548 ;;		line 419 in file "../src/MCU_B1.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;		None
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;		None
  4553 ;; Return value:  Size  Location     Type
  4554 ;;		None               void
  4555 ;; Registers used:
  4556 ;;		wreg
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4562 ;;      Params:         0       0       0       0
  4563 ;;      Locals:         0       0       0       0
  4564 ;;      Temps:          0       0       0       0
  4565 ;;      Totals:         0       0       0       0
  4566 ;;Total ram usage:        0 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    2
  4569 ;; This function calls:
  4570 ;;		Nothing
  4571 ;; This function is called by:
  4572 ;;		_Mcu_Initialization
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           
  4577                           ;psect for function _ADC_Set
  4578  0EA4                     _ADC_Set:	
  4579                           
  4580                           ;MCU_B1.c: 420: ADCON1 = 0x72;
  4581                           
  4582                           ;incstack = 0
  4583                           ; Regs used in _ADC_Set: [wreg]
  4584  0EA4  3072               	movlw	114
  4585  0EA5  1683               	bsf	3,5	;RP0=1, select bank1
  4586  0EA6  1303               	bcf	3,6	;RP1=0, select bank1
  4587  0EA7  009F               	movwf	31	;volatile
  4588                           
  4589                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  4590  0EA8  30C1               	movlw	193
  4591  0EA9  009D               	movwf	29	;volatile
  4592  0EAA  0008               	return
  4593  0EAB                     __end_of_ADC_Set:	
  4594                           
  4595                           	psect	text23
  4596  01B5                     __ptext23:	
  4597 ;; *************** function _Load_Main *****************
  4598 ;; Defined at:
  4599 ;;		line 39 in file "../src/OverLoad_B1.c"
  4600 ;; Parameters:    Size  Location     Type
  4601 ;;		None
  4602 ;; Auto vars:     Size  Location     Type
  4603 ;;  i               1    7[BANK0 ] unsigned char 
  4604 ;; Return value:  Size  Location     Type
  4605 ;;		None               void
  4606 ;; Registers used:
  4607 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4608 ;; Tracked objects:
  4609 ;;		On entry : 0/0
  4610 ;;		On exit  : 0/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4613 ;;      Params:         0       0       0       0
  4614 ;;      Locals:         0       3       0       0
  4615 ;;      Temps:          0       2       0       0
  4616 ;;      Totals:         0       5       0       0
  4617 ;;Total ram usage:        5 bytes
  4618 ;; Hardware stack levels used:    1
  4619 ;; Hardware stack levels required when called:    5
  4620 ;; This function calls:
  4621 ;;		_getLoad_Status
  4622 ;;		_getMain_All_Error_Status
  4623 ;;		_getMain_LightsStatus
  4624 ;;		_getMain_Lights_Count
  4625 ;;		_setLED
  4626 ;;		_setLoad_AH_AL_Restore
  4627 ;; This function is called by:
  4628 ;;		_main
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           
  4633                           ;psect for function _Load_Main
  4634  01B5                     _Load_Main:	
  4635                           
  4636                           ;OverLoad_B1.c: 40: char i = 0;
  4637                           
  4638                           ;incstack = 0
  4639                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4640  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  4641  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  4642  01B7  01E7               	clrf	Load_Main@i
  4643                           
  4644                           ;OverLoad_B1.c: 41: if (Load.Enable == 1) {
  4645  01B8  1683               	bsf	3,5	;RP0=1, select bank1
  4646  01B9  1303               	bcf	3,6	;RP1=0, select bank1
  4647  01BA  1C20               	btfss	_Load^(0+128),0
  4648  01BB  2AFF               	goto	l563
  4649                           
  4650                           ;OverLoad_B1.c: 42: Load.GO = 0;
  4651  01BC  10A0               	bcf	_Load^(0+128),1
  4652                           
  4653                           ;OverLoad_B1.c: 46: Load.GO = getMain_LightsStatus() == 1 ? 1 : 0;
  4654  01BD  118A  271F  118A   	fcall	_getMain_LightsStatus
  4655  01C0  3A01               	xorlw	1
  4656  01C1  3000               	movlw	0
  4657  01C2  1903               	skipnz
  4658  01C3  3001               	movlw	1
  4659  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  4660  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  4661  01C6  00E5               	movwf	??_Load_Main
  4662  01C7  0DE5               	rlf	??_Load_Main,f
  4663  01C8  1683               	bsf	3,5	;RP0=1, select bank1
  4664  01C9  1303               	bcf	3,6	;RP1=0, select bank1
  4665  01CA  0820               	movf	_Load^(0+128),w
  4666  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  4667  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  4668  01CD  0665               	xorwf	??_Load_Main,w
  4669  01CE  39FD               	andlw	-3
  4670  01CF  0665               	xorwf	??_Load_Main,w
  4671  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  4672  01D1  1303               	bcf	3,6	;RP1=0, select bank1
  4673  01D2  00A0               	movwf	_Load^(0+128)
  4674                           
  4675                           ;OverLoad_B1.c: 50: Load.GO = getMain_All_Error_Status(3) == 0 ? Load.GO : 0;
  4676  01D3  3003               	movlw	3
  4677  01D4  118A  27B3  118A   	fcall	_getMain_All_Error_Status
  4678  01D7  3A00               	xorlw	0
  4679  01D8  1903               	skipnz
  4680  01D9  29DF               	goto	l3777
  4681  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  4682  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  4683  01DC  01E8               	clrf	_Load_Main$2283
  4684  01DD  01E9               	clrf	_Load_Main$2283+1
  4685  01DE  29EB               	goto	l3779
  4686  01DF                     l3777:	
  4687  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  4688  01E0  1303               	bcf	3,6	;RP1=0, select bank1
  4689  01E1  0C20               	rrf	_Load^(0+128),w
  4690  01E2  3901               	andlw	1
  4691  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  4692  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  4693  01E5  00E5               	movwf	??_Load_Main
  4694  01E6  01E6               	clrf	??_Load_Main+1
  4695  01E7  0865               	movf	??_Load_Main,w
  4696  01E8  00E8               	movwf	_Load_Main$2283
  4697  01E9  0866               	movf	??_Load_Main+1,w
  4698  01EA  00E9               	movwf	_Load_Main$2283+1
  4699  01EB                     l3779:	
  4700  01EB  0868               	movf	_Load_Main$2283,w
  4701  01EC  1683               	bsf	3,5	;RP0=1, select bank1
  4702  01ED  1303               	bcf	3,6	;RP1=0, select bank1
  4703  01EE  10A0               	bcf	_Load^(0+128),1
  4704  01EF  1D03               	skipz
  4705  01F0  14A0               	bsf	_Load^(0+128),1
  4706                           
  4707                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
  4708  01F1  1CA0               	btfss	_Load^(0+128),1
  4709  01F2  2ACE               	goto	l568
  4710                           
  4711                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
  4712  01F3  1520               	bsf	_Load^(0+128),2
  4713                           
  4714                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
  4715  01F4  1E20               	btfss	_Load^(0+128),4
  4716  01F5  2ACC               	goto	l569
  4717                           
  4718                           ;OverLoad_B1.c: 59: Load.Time++;
  4719  01F6  3001               	movlw	1
  4720  01F7  07A2               	addwf	(_Load^(0+128)+2),f
  4721  01F8  1803               	skipnc
  4722  01F9  0AA3               	incf	((_Load+1)^(0+128)+2),f
  4723  01FA  3000               	movlw	0
  4724  01FB  07A3               	addwf	((_Load+1)^(0+128)+2),f
  4725                           
  4726                           ;OverLoad_B1.c: 60: if (Load.Time >= 5) {
  4727  01FC  3000               	movlw	0
  4728  01FD  0223               	subwf	((_Load+1)^(0+128)+2),w
  4729  01FE  3005               	movlw	5
  4730  01FF  1903               	skipnz
  4731  0200  0222               	subwf	(_Load^(0+128)+2),w
  4732  0201  1C03               	skipc
  4733  0202  0008               	return
  4734                           
  4735                           ;OverLoad_B1.c: 61: Load.Time = 0;
  4736  0203  01A2               	clrf	(_Load^(0+128)+2)
  4737  0204  01A3               	clrf	((_Load+1)^(0+128)+2)
  4738                           
  4739                           ;OverLoad_B1.c: 62: Load.ADtoGO = 0;
  4740  0205  1220               	bcf	_Load^(0+128),4
  4741                           
  4742                           ;OverLoad_B1.c: 63: Load.LightsCount = getMain_Lights_Count();
  4743  0206  158A  27B9  118A   	fcall	_getMain_Lights_Count
  4744  0209  1283               	bcf	3,5	;RP0=0, select bank0
  4745  020A  1303               	bcf	3,6	;RP1=0, select bank0
  4746  020B  00E5               	movwf	??_Load_Main
  4747  020C  0865               	movf	??_Load_Main,w
  4748  020D  1683               	bsf	3,5	;RP0=1, select bank1
  4749  020E  1303               	bcf	3,6	;RP1=0, select bank1
  4750  020F  00C0               	movwf	(_Load^(0+128)+32)
  4751                           
  4752                           ;OverLoad_B1.c: 73: Load.ADH = Load.AH[0];
  4753  0210  082C               	movf	(_Load^(0+128)+12),w
  4754  0211  1283               	bcf	3,5	;RP0=0, select bank0
  4755  0212  1303               	bcf	3,6	;RP1=0, select bank0
  4756  0213  00E5               	movwf	??_Load_Main
  4757  0214  01E6               	clrf	??_Load_Main+1
  4758  0215  0865               	movf	??_Load_Main,w
  4759  0216  1683               	bsf	3,5	;RP0=1, select bank1
  4760  0217  1303               	bcf	3,6	;RP1=0, select bank1
  4761  0218  00A7               	movwf	(_Load^(0+128)+7)
  4762  0219  1283               	bcf	3,5	;RP0=0, select bank0
  4763  021A  1303               	bcf	3,6	;RP1=0, select bank0
  4764  021B  0866               	movf	??_Load_Main+1,w
  4765  021C  1683               	bsf	3,5	;RP0=1, select bank1
  4766  021D  1303               	bcf	3,6	;RP1=0, select bank1
  4767  021E  00A8               	movwf	((_Load+1)^(0+128)+7)
  4768                           
  4769                           ;OverLoad_B1.c: 74: Load.ADL = Load.AL[0];
  4770  021F  0831               	movf	(_Load^(0+128)+17),w
  4771  0220  1283               	bcf	3,5	;RP0=0, select bank0
  4772  0221  1303               	bcf	3,6	;RP1=0, select bank0
  4773  0222  00E5               	movwf	??_Load_Main
  4774  0223  01E6               	clrf	??_Load_Main+1
  4775  0224  0865               	movf	??_Load_Main,w
  4776  0225  1683               	bsf	3,5	;RP0=1, select bank1
  4777  0226  1303               	bcf	3,6	;RP1=0, select bank1
  4778  0227  00A9               	movwf	(_Load^(0+128)+9)
  4779  0228  1283               	bcf	3,5	;RP0=0, select bank0
  4780  0229  1303               	bcf	3,6	;RP1=0, select bank0
  4781  022A  0866               	movf	??_Load_Main+1,w
  4782  022B  1683               	bsf	3,5	;RP0=1, select bank1
  4783  022C  1303               	bcf	3,6	;RP1=0, select bank1
  4784  022D  00AA               	movwf	((_Load+1)^(0+128)+9)
  4785                           
  4786                           ;OverLoad_B1.c: 75: setLoad_AH_AL_Restore();
  4787  022E  158A  27CE  118A   	fcall	_setLoad_AH_AL_Restore
  4788                           
  4789                           ;OverLoad_B1.c: 76: if (Load.ADH > Load.ADL) {
  4790  0231  1683               	bsf	3,5	;RP0=1, select bank1
  4791  0232  1303               	bcf	3,6	;RP1=0, select bank1
  4792  0233  0828               	movf	((_Load+1)^(0+128)+7),w
  4793  0234  022A               	subwf	((_Load+1)^(0+128)+9),w
  4794  0235  1D03               	skipz
  4795  0236  2A39               	goto	u4005
  4796  0237  0827               	movf	(_Load^(0+128)+7),w
  4797  0238  0229               	subwf	(_Load^(0+128)+9),w
  4798  0239                     u4005:	
  4799  0239  1803               	skipnc
  4800  023A  2AC7               	goto	l3853
  4801                           
  4802                           ;OverLoad_B1.c: 77: Load.AD = (Load.ADH - Load.ADL);
  4803  023B  0329               	decf	(_Load^(0+128)+9),w
  4804  023C  3AFF               	xorlw	255
  4805  023D  0727               	addwf	(_Load^(0+128)+7),w
  4806  023E  1283               	bcf	3,5	;RP0=0, select bank0
  4807  023F  1303               	bcf	3,6	;RP1=0, select bank0
  4808  0240  00E5               	movwf	??_Load_Main
  4809  0241  0865               	movf	??_Load_Main,w
  4810  0242  1683               	bsf	3,5	;RP0=1, select bank1
  4811  0243  1303               	bcf	3,6	;RP1=0, select bank1
  4812  0244  00B6               	movwf	(_Load^(0+128)+22)
  4813                           
  4814                           ;OverLoad_B1.c: 78: Load.ADH = 0;
  4815  0245  01A7               	clrf	(_Load^(0+128)+7)
  4816  0246  01A8               	clrf	((_Load+1)^(0+128)+7)
  4817                           
  4818                           ;OverLoad_B1.c: 79: Load.ADL = 0;
  4819  0247  01A9               	clrf	(_Load^(0+128)+9)
  4820  0248  01AA               	clrf	((_Load+1)^(0+128)+9)
  4821                           
  4822                           ;OverLoad_B1.c: 80: if (Load.Count < 2) {
  4823  0249  3002               	movlw	2
  4824  024A  023E               	subwf	(_Load^(0+128)+30),w
  4825  024B  1803               	skipnc
  4826  024C  2A6F               	goto	l572
  4827                           
  4828                           ;OverLoad_B1.c: 81: Load.Count++;
  4829  024D  3001               	movlw	1
  4830  024E  1283               	bcf	3,5	;RP0=0, select bank0
  4831  024F  1303               	bcf	3,6	;RP1=0, select bank0
  4832  0250  00E5               	movwf	??_Load_Main
  4833  0251  0865               	movf	??_Load_Main,w
  4834  0252  1683               	bsf	3,5	;RP0=1, select bank1
  4835  0253  1303               	bcf	3,6	;RP1=0, select bank1
  4836  0254  07BE               	addwf	(_Load^(0+128)+30),f
  4837                           
  4838                           ;OverLoad_B1.c: 82: if (Load.Count == 1) {
  4839  0255  083E               	movf	(_Load^(0+128)+30),w
  4840  0256  3A01               	xorlw	1
  4841  0257  1D03               	skipz
  4842  0258  2A5C               	goto	l3815
  4843                           
  4844                           ;OverLoad_B1.c: 83: Load.JudgeValue = 500;
  4845  0259  30F4               	movlw	244
  4846  025A  00BA               	movwf	(_Load^(0+128)+26)
  4847  025B  2A6D               	goto	L16
  4848  025C                     l3815:	
  4849                           ;OverLoad_B1.c: 84: } else if (Load.Count == 2) {
  4850                           
  4851  025C  083E               	movf	(_Load^(0+128)+30),w
  4852  025D  3A02               	xorlw	2
  4853  025E  1D03               	skipz
  4854  025F  2A6F               	goto	l572
  4855                           
  4856                           ;OverLoad_B1.c: 85: if (Load.LightsCount == 1) {
  4857  0260  0840               	movf	(_Load^(0+128)+32),w
  4858  0261  3A01               	xorlw	1
  4859  0262  1D03               	skipz
  4860  0263  2A68               	goto	l3821
  4861                           
  4862                           ;OverLoad_B1.c: 86: Load.JudgeValue = 0x42;
  4863  0264  3042               	movlw	66
  4864  0265  00BA               	movwf	(_Load^(0+128)+26)
  4865  0266  3000               	movlw	0
  4866  0267  2A6E               	goto	L15
  4867  0268                     l3821:	
  4868                           ;OverLoad_B1.c: 87: } else {
  4869                           
  4870                           
  4871                           ;OverLoad_B1.c: 88: Load.JudgeValue = (0x42 + Load.TotalLoad) - 0x08;
  4872  0268  082B               	movf	(_Load^(0+128)+11),w
  4873  0269  3E3A               	addlw	58
  4874  026A  00BA               	movwf	(_Load^(0+128)+26)
  4875  026B  3000               	movlw	0
  4876  026C  1803               	skipnc
  4877  026D                     L16:	
  4878  026D  3001               	movlw	1
  4879  026E                     L15:	
  4880  026E  00BB               	movwf	(_Load^(0+128)+27)
  4881  026F                     l572:	
  4882                           
  4883                           ;OverLoad_B1.c: 89: }
  4884                           ;OverLoad_B1.c: 90: }
  4885                           ;OverLoad_B1.c: 91: }
  4886                           ;OverLoad_B1.c: 93: if (Load.AD >= 3) {
  4887  026F  3003               	movlw	3
  4888  0270  0236               	subwf	(_Load^(0+128)+22),w
  4889  0271  1C03               	skipc
  4890  0272  2A8B               	goto	l3833
  4891                           
  4892                           ;OverLoad_B1.c: 95: Load.ErrorCount++;
  4893  0273  3001               	movlw	1
  4894  0274  1283               	bcf	3,5	;RP0=0, select bank0
  4895  0275  1303               	bcf	3,6	;RP1=0, select bank0
  4896  0276  00E5               	movwf	??_Load_Main
  4897  0277  0865               	movf	??_Load_Main,w
  4898  0278  1683               	bsf	3,5	;RP0=1, select bank1
  4899  0279  1303               	bcf	3,6	;RP1=0, select bank1
  4900  027A  07BF               	addwf	(_Load^(0+128)+31),f
  4901                           
  4902                           ;OverLoad_B1.c: 96: if (Load.ErrorCount > 2) {
  4903  027B  3003               	movlw	3
  4904  027C  023F               	subwf	(_Load^(0+128)+31),w
  4905  027D  1C03               	skipc
  4906  027E  0008               	return
  4907                           
  4908                           ;OverLoad_B1.c: 97: Load.ErrorCount = 0;
  4909  027F  01BF               	clrf	(_Load^(0+128)+31)
  4910                           
  4911                           ;OverLoad_B1.c: 99: Load.ERROR = 1;
  4912  0280  16A0               	bsf	_Load^(0+128),5
  4913                           
  4914                           ;OverLoad_B1.c: 100: setLED(1, 11);
  4915  0281  300B               	movlw	11
  4916  0282  1283               	bcf	3,5	;RP0=0, select bank0
  4917  0283  1303               	bcf	3,6	;RP1=0, select bank0
  4918  0284  00E5               	movwf	??_Load_Main
  4919  0285  0865               	movf	??_Load_Main,w
  4920  0286  00E0               	movwf	setLED@command
  4921  0287  3001               	movlw	1
  4922  0288  118A  24AE         	fcall	_setLED
  4923                           
  4924                           ;OverLoad_B1.c: 109: }
  4925                           ;OverLoad_B1.c: 110: } else {
  4926  028A  0008               	return
  4927  028B                     l3833:	
  4928                           
  4929                           ;OverLoad_B1.c: 111: Load.ErrorCount = 0;
  4930  028B  1683               	bsf	3,5	;RP0=1, select bank1
  4931  028C  1303               	bcf	3,6	;RP1=0, select bank1
  4932  028D  01BF               	clrf	(_Load^(0+128)+31)
  4933                           
  4934                           ;OverLoad_B1.c: 112: if (Load.OK == 1) {
  4935  028E  1FA0               	btfss	_Load^(0+128),7
  4936  028F  2AA7               	goto	l3839
  4937                           
  4938                           ;OverLoad_B1.c: 113: Load.OK = getLoad_Status() == 1 ? 0 : 1;
  4939  0290  118A  26ED  118A   	fcall	_getLoad_Status
  4940  0293  3A01               	xorlw	1
  4941  0294  3000               	movlw	0
  4942  0295  1D03               	skipz
  4943  0296  3001               	movlw	1
  4944  0297  1283               	bcf	3,5	;RP0=0, select bank0
  4945  0298  1303               	bcf	3,6	;RP1=0, select bank0
  4946  0299  00E5               	movwf	??_Load_Main
  4947  029A  0CE5               	rrf	??_Load_Main,f
  4948  029B  0CE5               	rrf	??_Load_Main,f
  4949  029C  1683               	bsf	3,5	;RP0=1, select bank1
  4950  029D  1303               	bcf	3,6	;RP1=0, select bank1
  4951  029E  0820               	movf	_Load^(0+128),w
  4952  029F  1283               	bcf	3,5	;RP0=0, select bank0
  4953  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  4954  02A1  0665               	xorwf	??_Load_Main,w
  4955  02A2  397F               	andlw	-129
  4956  02A3  0665               	xorwf	??_Load_Main,w
  4957  02A4  1683               	bsf	3,5	;RP0=1, select bank1
  4958  02A5  1303               	bcf	3,6	;RP1=0, select bank1
  4959  02A6  00A0               	movwf	_Load^(0+128)
  4960  02A7                     l3839:	
  4961                           
  4962                           ;OverLoad_B1.c: 114: }
  4963                           ;OverLoad_B1.c: 116: if (Load.OK == 0) {
  4964  02A7  1BA0               	btfsc	_Load^(0+128),7
  4965  02A8  0008               	return
  4966                           
  4967                           ;OverLoad_B1.c: 117: Load.SafeCount++;
  4968  02A9  3001               	movlw	1
  4969  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  4970  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  4971  02AC  00E5               	movwf	??_Load_Main
  4972  02AD  0865               	movf	??_Load_Main,w
  4973  02AE  1683               	bsf	3,5	;RP0=1, select bank1
  4974  02AF  1303               	bcf	3,6	;RP1=0, select bank1
  4975  02B0  07C1               	addwf	(_Load^(0+128)+33),f
  4976                           
  4977                           ;OverLoad_B1.c: 118: if (Load.SafeCount >= 3) {
  4978  02B1  3003               	movlw	3
  4979  02B2  0241               	subwf	(_Load^(0+128)+33),w
  4980  02B3  1C03               	skipc
  4981  02B4  0008               	return
  4982                           
  4983                           ;OverLoad_B1.c: 119: Load.SafeCount = 0;
  4984  02B5  01C1               	clrf	(_Load^(0+128)+33)
  4985                           
  4986                           ;OverLoad_B1.c: 120: Load.OK = 1;
  4987  02B6  17A0               	bsf	_Load^(0+128),7
  4988                           
  4989                           ;OverLoad_B1.c: 121: Load.TotalLoad = Load.AD;
  4990  02B7  0836               	movf	(_Load^(0+128)+22),w
  4991  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  4992  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  4993  02BA  00E5               	movwf	??_Load_Main
  4994  02BB  0865               	movf	??_Load_Main,w
  4995  02BC  1683               	bsf	3,5	;RP0=1, select bank1
  4996  02BD  1303               	bcf	3,6	;RP1=0, select bank1
  4997  02BE  00AB               	movwf	(_Load^(0+128)+11)
  4998                           
  4999                           ;OverLoad_B1.c: 122: Load.JudgeValue = (0x42 + Load.TotalLoad) - 0x08;
  5000  02BF  082B               	movf	(_Load^(0+128)+11),w
  5001  02C0  3E3A               	addlw	58
  5002  02C1  00BA               	movwf	(_Load^(0+128)+26)
  5003  02C2  3000               	movlw	0
  5004  02C3  1803               	skipnc
  5005  02C4  3001               	movlw	1
  5006  02C5  00BB               	movwf	(_Load^(0+128)+27)
  5007                           
  5008                           ;OverLoad_B1.c: 123: }
  5009                           ;OverLoad_B1.c: 124: }
  5010                           ;OverLoad_B1.c: 125: }
  5011                           ;OverLoad_B1.c: 126: } else {
  5012  02C6  0008               	return
  5013  02C7                     l3853:	
  5014                           
  5015                           ;OverLoad_B1.c: 127: RB3 = RB3 == 1 ? 0 : 1;
  5016  02C7  3008               	movlw	8
  5017  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  5018  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  5019  02CA  0686               	xorwf	6,f
  5020                           
  5021                           ;OverLoad_B1.c: 128: }
  5022                           ;OverLoad_B1.c: 129: }
  5023                           ;OverLoad_B1.c: 130: } else {
  5024  02CB  0008               	return
  5025  02CC                     l569:	
  5026                           
  5027                           ;OverLoad_B1.c: 131: Load.ADtoGO = 1;
  5028  02CC  1620               	bsf	_Load^(0+128),4
  5029                           
  5030                           ;OverLoad_B1.c: 132: }
  5031                           ;OverLoad_B1.c: 133: } else {
  5032  02CD  0008               	return
  5033  02CE                     l568:	
  5034                           
  5035                           ;OverLoad_B1.c: 134: if (Load.LightsON == 1) {
  5036  02CE  1D20               	btfss	_Load^(0+128),2
  5037  02CF  2AE1               	goto	l3875
  5038                           
  5039                           ;OverLoad_B1.c: 135: Load.LightsON = 0;
  5040  02D0  1120               	bcf	_Load^(0+128),2
  5041                           
  5042                           ;OverLoad_B1.c: 137: Load.Time = 0;
  5043  02D1  01A2               	clrf	(_Load^(0+128)+2)
  5044  02D2  01A3               	clrf	((_Load+1)^(0+128)+2)
  5045                           
  5046                           ;OverLoad_B1.c: 138: Load.ADtoGO = 0;
  5047  02D3  1220               	bcf	_Load^(0+128),4
  5048                           
  5049                           ;OverLoad_B1.c: 139: setLoad_AH_AL_Restore();
  5050  02D4  158A  27CE  118A   	fcall	_setLoad_AH_AL_Restore
  5051                           
  5052                           ;OverLoad_B1.c: 140: Load.Count = 0;
  5053  02D7  1683               	bsf	3,5	;RP0=1, select bank1
  5054  02D8  1303               	bcf	3,6	;RP1=0, select bank1
  5055  02D9  01BE               	clrf	(_Load^(0+128)+30)
  5056                           
  5057                           ;OverLoad_B1.c: 141: Load.ErrorCount = 0;
  5058  02DA  01BF               	clrf	(_Load^(0+128)+31)
  5059                           
  5060                           ;OverLoad_B1.c: 142: Load.SafeCount = 0;
  5061  02DB  01C1               	clrf	(_Load^(0+128)+33)
  5062                           
  5063                           ;OverLoad_B1.c: 143: Load.OK = 0;
  5064  02DC  13A0               	bcf	_Load^(0+128),7
  5065                           
  5066                           ;OverLoad_B1.c: 145: Load.ADH = 0;
  5067  02DD  01A7               	clrf	(_Load^(0+128)+7)
  5068  02DE  01A8               	clrf	((_Load+1)^(0+128)+7)
  5069                           
  5070                           ;OverLoad_B1.c: 146: Load.ADL = 0;
  5071  02DF  01A9               	clrf	(_Load^(0+128)+9)
  5072  02E0  01AA               	clrf	((_Load+1)^(0+128)+9)
  5073  02E1                     l3875:	
  5074                           
  5075                           ;OverLoad_B1.c: 147: }
  5076                           ;OverLoad_B1.c: 148: if (Load.ERROR == 1) {
  5077  02E1  1EA0               	btfss	_Load^(0+128),5
  5078  02E2  0008               	return
  5079                           
  5080                           ;OverLoad_B1.c: 149: Load.ErrorTime++;
  5081  02E3  3001               	movlw	1
  5082  02E4  07A4               	addwf	(_Load^(0+128)+4),f
  5083  02E5  1803               	skipnc
  5084  02E6  0AA5               	incf	((_Load+1)^(0+128)+4),f
  5085  02E7  3000               	movlw	0
  5086  02E8  07A5               	addwf	((_Load+1)^(0+128)+4),f
  5087                           
  5088                           ;OverLoad_B1.c: 150: if (Load.ErrorTime >= 1000)
  5089  02E9  3003               	movlw	3
  5090  02EA  0225               	subwf	((_Load+1)^(0+128)+4),w
  5091  02EB  30E8               	movlw	232
  5092  02EC  1903               	skipnz
  5093  02ED  0224               	subwf	(_Load^(0+128)+4),w
  5094  02EE  1C03               	skipc
  5095  02EF  0008               	return
  5096                           
  5097                           ;OverLoad_B1.c: 151: {
  5098                           ;OverLoad_B1.c: 152: Load.ErrorTime = 0;
  5099  02F0  01A4               	clrf	(_Load^(0+128)+4)
  5100  02F1  01A5               	clrf	((_Load+1)^(0+128)+4)
  5101                           
  5102                           ;OverLoad_B1.c: 154: setLED(99, 10);
  5103  02F2  300A               	movlw	10
  5104  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  5105  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  5106  02F5  00E5               	movwf	??_Load_Main
  5107  02F6  0865               	movf	??_Load_Main,w
  5108  02F7  00E0               	movwf	setLED@command
  5109  02F8  3063               	movlw	99
  5110  02F9  118A  24AE         	fcall	_setLED
  5111                           
  5112                           ;OverLoad_B1.c: 155: Load.ERROR = 0;
  5113  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  5114  02FC  1303               	bcf	3,6	;RP1=0, select bank1
  5115  02FD  12A0               	bcf	_Load^(0+128),5
  5116                           
  5117                           ;OverLoad_B1.c: 156: }
  5118                           ;OverLoad_B1.c: 157: }
  5119                           ;OverLoad_B1.c: 158: }
  5120                           ;OverLoad_B1.c: 159: } else {
  5121  02FE  0008               	return
  5122  02FF                     l563:	
  5123                           
  5124                           ;OverLoad_B1.c: 160: if (myMain.PowerON == 1) {
  5125  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  5126  0300  1303               	bcf	3,6	;RP1=0, select bank0
  5127  0301  1C20               	btfss	_myMain,0
  5128  0302  0008               	return
  5129                           
  5130                           ;OverLoad_B1.c: 161: Load.Enable = 1;
  5131  0303  1683               	bsf	3,5	;RP0=1, select bank1
  5132  0304  1303               	bcf	3,6	;RP1=0, select bank1
  5133  0305  1420               	bsf	_Load^(0+128),0
  5134  0306  0008               	return
  5135  0307                     __end_of_Load_Main:	
  5136                           
  5137                           	psect	text24
  5138  0FB9                     __ptext24:	
  5139 ;; *************** function _getMain_Lights_Count *****************
  5140 ;; Defined at:
  5141 ;;		line 353 in file "../src/Main_B1.c"
  5142 ;; Parameters:    Size  Location     Type
  5143 ;;		None
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;  status1         1    3[BANK0 ] unsigned char 
  5146 ;;  status3         1    2[BANK0 ] unsigned char 
  5147 ;;  status2         1    1[BANK0 ] unsigned char 
  5148 ;;  count           1    0[BANK0 ] unsigned char 
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  1    wreg      unsigned char 
  5151 ;; Registers used:
  5152 ;;		wreg, status,2, status,0
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5158 ;;      Params:         0       0       0       0
  5159 ;;      Locals:         0       4       0       0
  5160 ;;      Temps:          1       0       0       0
  5161 ;;      Totals:         1       4       0       0
  5162 ;;Total ram usage:        5 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:    2
  5165 ;; This function calls:
  5166 ;;		Nothing
  5167 ;; This function is called by:
  5168 ;;		_Load_Main
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           
  5173                           ;psect for function _getMain_Lights_Count
  5174  0FB9                     _getMain_Lights_Count:	
  5175                           
  5176                           ;Main_B1.c: 354: char status1 = 0, status2 = 0, status3 = 0, count = 0;
  5177                           
  5178                           ;incstack = 0
  5179                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  5180  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  5181  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  5182  0FBB  01E3               	clrf	getMain_Lights_Count@status1
  5183  0FBC  01E1               	clrf	getMain_Lights_Count@status2
  5184  0FBD  01E2               	clrf	getMain_Lights_Count@status3
  5185  0FBE  01E0               	clrf	getMain_Lights_Count@count
  5186                           
  5187                           ;Main_B1.c: 360: status1 = Lights1.Status == 1 ? 1 : 0;
  5188  0FBF  3000               	movlw	0
  5189  0FC0  1683               	bsf	3,5	;RP0=1, select bank1
  5190  0FC1  1303               	bcf	3,6	;RP1=0, select bank1
  5191  0FC2  1942               	btfsc	_Lights1^(0+128),2
  5192  0FC3  3001               	movlw	1
  5193  0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  5194  0FC5  1303               	bcf	3,6	;RP1=0, select bank0
  5195  0FC6  00E3               	movwf	getMain_Lights_Count@status1
  5196                           
  5197                           ;Main_B1.c: 369: return count = (status1 + status2 + status3);
  5198  0FC7  0861               	movf	getMain_Lights_Count@status2,w
  5199  0FC8  0763               	addwf	getMain_Lights_Count@status1,w
  5200  0FC9  00F4               	movwf	??_getMain_Lights_Count
  5201  0FCA  0862               	movf	getMain_Lights_Count@status3,w
  5202  0FCB  0774               	addwf	??_getMain_Lights_Count,w
  5203  0FCC  00E0               	movwf	getMain_Lights_Count@count
  5204  0FCD  0008               	return
  5205  0FCE                     __end_of_getMain_Lights_Count:	
  5206                           
  5207                           	psect	text25
  5208  07B3                     __ptext25:	
  5209 ;; *************** function _getMain_All_Error_Status *****************
  5210 ;; Defined at:
  5211 ;;		line 333 in file "../src/Main_B1.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  command         1    wreg     unsigned char 
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;  command         1    0[BANK0 ] unsigned char 
  5216 ;;  status          1    3[BANK0 ] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  1    wreg      unsigned char 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5226 ;;      Params:         0       0       0       0
  5227 ;;      Locals:         0       4       0       0
  5228 ;;      Temps:          1       0       0       0
  5229 ;;      Totals:         1       4       0       0
  5230 ;;Total ram usage:        5 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    2
  5233 ;; This function calls:
  5234 ;;		Nothing
  5235 ;; This function is called by:
  5236 ;;		_Load_Main
  5237 ;;		_PIR_Main
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           
  5242                           ;psect for function _getMain_All_Error_Status
  5243  07B3                     _getMain_All_Error_Status:	
  5244                           
  5245                           ;incstack = 0
  5246                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2]
  5247                           ;getMain_All_Error_Status@command stored from wreg
  5248  07B3  1283               	bcf	3,5	;RP0=0, select bank0
  5249  07B4  1303               	bcf	3,6	;RP1=0, select bank0
  5250  07B5  00E0               	movwf	getMain_All_Error_Status@command
  5251                           
  5252                           ;Main_B1.c: 334: char status = 0;
  5253  07B6  01E3               	clrf	getMain_All_Error_Status@status
  5254                           
  5255                           ;Main_B1.c: 341: if(command != 3){
  5256  07B7  0860               	movf	getMain_All_Error_Status@command,w
  5257  07B8  3A03               	xorlw	3
  5258  07B9  1903               	skipnz
  5259  07BA  2FCD               	goto	l494
  5260                           
  5261                           ;Main_B1.c: 343: status = Load.ERROR == 1 ? 3 : 0;
  5262  07BB  1683               	bsf	3,5	;RP0=1, select bank1
  5263  07BC  1303               	bcf	3,6	;RP1=0, select bank1
  5264  07BD  1AA0               	btfsc	_Load^(0+128),5
  5265  07BE  2FC4               	goto	l3441
  5266  07BF  1283               	bcf	3,5	;RP0=0, select bank0
  5267  07C0  1303               	bcf	3,6	;RP1=0, select bank0
  5268  07C1  01E1               	clrf	_getMain_All_Error_Status$2042
  5269  07C2  01E2               	clrf	_getMain_All_Error_Status$2042+1
  5270  07C3  2FC9               	goto	l498
  5271  07C4                     l3441:	
  5272  07C4  3003               	movlw	3
  5273  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  5274  07C6  00E1               	movwf	_getMain_All_Error_Status$2042
  5275  07C7  3000               	movlw	0
  5276  07C8  00E2               	movwf	_getMain_All_Error_Status$2042+1
  5277  07C9                     l498:	
  5278  07C9  0861               	movf	_getMain_All_Error_Status$2042,w
  5279  07CA  00F4               	movwf	??_getMain_All_Error_Status
  5280  07CB  0874               	movf	??_getMain_All_Error_Status,w
  5281  07CC  00E3               	movwf	getMain_All_Error_Status@status
  5282  07CD                     l494:	
  5283                           
  5284                           ;Main_B1.c: 345: }
  5285                           ;Main_B1.c: 349: return status;
  5286  07CD  0863               	movf	getMain_All_Error_Status@status,w
  5287  07CE  0008               	return
  5288  07CF                     __end_of_getMain_All_Error_Status:	
  5289                           
  5290                           	psect	text26
  5291  06ED                     __ptext26:	
  5292 ;; *************** function _getLoad_Status *****************
  5293 ;; Defined at:
  5294 ;;		line 354 in file "../src/OverLoad_B1.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;		None
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;  status          1    4[BANK0 ] unsigned char 
  5299 ;;  result          1    3[BANK0 ] unsigned char 
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  1    wreg      unsigned char 
  5302 ;; Registers used:
  5303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5304 ;; Tracked objects:
  5305 ;;		On entry : 0/0
  5306 ;;		On exit  : 0/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5309 ;;      Params:         0       0       0       0
  5310 ;;      Locals:         0       2       0       0
  5311 ;;      Temps:          0       1       0       0
  5312 ;;      Totals:         0       3       0       0
  5313 ;;Total ram usage:        3 bytes
  5314 ;; Hardware stack levels used:    1
  5315 ;; Hardware stack levels required when called:    4
  5316 ;; This function calls:
  5317 ;;		_getLights_Status
  5318 ;; This function is called by:
  5319 ;;		_Load_Main
  5320 ;; This function uses a non-reentrant model
  5321 ;;
  5322                           
  5323                           
  5324                           ;psect for function _getLoad_Status
  5325  06ED                     _getLoad_Status:	
  5326                           
  5327                           ;OverLoad_B1.c: 355: char result = 0, status = 0;
  5328                           
  5329                           ;incstack = 0
  5330                           ; Regs used in _getLoad_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5331  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  5332  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  5333  06EF  01E3               	clrf	getLoad_Status@result
  5334  06F0  01E4               	clrf	getLoad_Status@status
  5335                           
  5336                           ;OverLoad_B1.c: 357: status = Load.status1 == 1 ? 1 : 0;
  5337  06F1  3000               	movlw	0
  5338  06F2  1683               	bsf	3,5	;RP0=1, select bank1
  5339  06F3  1303               	bcf	3,6	;RP1=0, select bank1
  5340  06F4  1821               	btfsc	(_Load^(0+128)+1),0
  5341  06F5  3001               	movlw	1
  5342  06F6  1283               	bcf	3,5	;RP0=0, select bank0
  5343  06F7  1303               	bcf	3,6	;RP1=0, select bank0
  5344  06F8  00E4               	movwf	getLoad_Status@status
  5345                           
  5346                           ;OverLoad_B1.c: 358: result = status == getLights_Status(1) ? 1 : 0;
  5347  06F9  3001               	movlw	1
  5348  06FA  158A  276E  118A   	fcall	_getLights_Status
  5349  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  5350  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  5351  06FF  0664               	xorwf	getLoad_Status@status,w
  5352  0700  3000               	movlw	0
  5353  0701  1903               	skipnz
  5354  0702  3001               	movlw	1
  5355  0703  00E2               	movwf	??_getLoad_Status
  5356  0704  0862               	movf	??_getLoad_Status,w
  5357  0705  00E3               	movwf	getLoad_Status@result
  5358                           
  5359                           ;OverLoad_B1.c: 359: Load.status1 = getLights_Status(1) == 1 ? 1 : 0;
  5360  0706  3001               	movlw	1
  5361  0707  158A  276E         	fcall	_getLights_Status
  5362  0709  3A01               	xorlw	1
  5363  070A  3000               	movlw	0
  5364  070B  1903               	skipnz
  5365  070C  3001               	movlw	1
  5366  070D  1283               	bcf	3,5	;RP0=0, select bank0
  5367  070E  1303               	bcf	3,6	;RP1=0, select bank0
  5368  070F  00E2               	movwf	??_getLoad_Status
  5369  0710  1683               	bsf	3,5	;RP0=1, select bank1
  5370  0711  1303               	bcf	3,6	;RP1=0, select bank1
  5371  0712  0821               	movf	(_Load^(0+128)+1),w
  5372  0713  1283               	bcf	3,5	;RP0=0, select bank0
  5373  0714  1303               	bcf	3,6	;RP1=0, select bank0
  5374  0715  0662               	xorwf	??_getLoad_Status,w
  5375  0716  39FE               	andlw	-2
  5376  0717  0662               	xorwf	??_getLoad_Status,w
  5377  0718  1683               	bsf	3,5	;RP0=1, select bank1
  5378  0719  1303               	bcf	3,6	;RP1=0, select bank1
  5379  071A  00A1               	movwf	(_Load^(0+128)+1)
  5380                           
  5381                           ;OverLoad_B1.c: 371: return result;
  5382  071B  1283               	bcf	3,5	;RP0=0, select bank0
  5383  071C  1303               	bcf	3,6	;RP1=0, select bank0
  5384  071D  0863               	movf	getLoad_Status@result,w
  5385  071E  0008               	return
  5386  071F                     __end_of_getLoad_Status:	
  5387                           
  5388                           	psect	text27
  5389  0F6E                     __ptext27:	
  5390 ;; *************** function _getLights_Status *****************
  5391 ;; Defined at:
  5392 ;;		line 156 in file "../src/TriacRelay_B1.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;  lights          1    wreg     unsigned char 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  lights          1    0[BANK0 ] unsigned char 
  5397 ;;  result          1    1[BANK0 ] unsigned char 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      unsigned char 
  5400 ;; Registers used:
  5401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5407 ;;      Params:         0       0       0       0
  5408 ;;      Locals:         0       2       0       0
  5409 ;;      Temps:          0       0       0       0
  5410 ;;      Totals:         0       2       0       0
  5411 ;;Total ram usage:        2 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    3
  5414 ;; This function calls:
  5415 ;;		_LightsPointSelect
  5416 ;; This function is called by:
  5417 ;;		_getLoad_Status
  5418 ;;		_PIR_Main
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           
  5423                           ;psect for function _getLights_Status
  5424  0F6E                     _getLights_Status:	
  5425                           
  5426                           ;incstack = 0
  5427                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5428                           ;getLights_Status@lights stored from wreg
  5429  0F6E  1283               	bcf	3,5	;RP0=0, select bank0
  5430  0F6F  1303               	bcf	3,6	;RP1=0, select bank0
  5431  0F70  00E0               	movwf	getLights_Status@lights
  5432                           
  5433                           ;TriacRelay_B1.c: 157: LightsPointSelect(lights);
  5434  0F71  0860               	movf	getLights_Status@lights,w
  5435  0F72  158A  26DE         	fcall	_LightsPointSelect
  5436                           
  5437                           ;TriacRelay_B1.c: 158: char result = Lights->Status == 1 ? 1 : 0;
  5438  0F74  1283               	bcf	3,5	;RP0=0, select bank0
  5439  0F75  1303               	bcf	3,6	;RP1=0, select bank0
  5440  0F76  0830               	movf	_Lights,w
  5441  0F77  0084               	movwf	4
  5442  0F78  3000               	movlw	0
  5443  0F79  1383               	bcf	3,7	;select IRP bank0
  5444  0F7A  1900               	btfsc	0,2
  5445  0F7B  3001               	movlw	1
  5446  0F7C  00E1               	movwf	getLights_Status@result
  5447                           
  5448                           ;TriacRelay_B1.c: 159: return result;
  5449  0F7D  0861               	movf	getLights_Status@result,w
  5450  0F7E  0008               	return
  5451  0F7F                     __end_of_getLights_Status:	
  5452                           
  5453                           	psect	text28
  5454  0E98                     __ptext28:	
  5455 ;; *************** function _Load_Initialization *****************
  5456 ;; Defined at:
  5457 ;;		line 9 in file "../src/OverLoad_B1.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;		None
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;		None
  5462 ;; Return value:  Size  Location     Type
  5463 ;;		None               void
  5464 ;; Registers used:
  5465 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5471 ;;      Params:         0       0       0       0
  5472 ;;      Locals:         0       0       0       0
  5473 ;;      Temps:          0       0       0       0
  5474 ;;      Totals:         0       0       0       0
  5475 ;;Total ram usage:        0 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    3
  5478 ;; This function calls:
  5479 ;;		_setLoad_AH_AL_Restore
  5480 ;; This function is called by:
  5481 ;;		_main
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           
  5486                           ;psect for function _Load_Initialization
  5487  0E98                     _Load_Initialization:	
  5488                           
  5489                           ;OverLoad_B1.c: 10: Load.Safe = 1;
  5490                           
  5491                           ;incstack = 0
  5492                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5493  0E98  1683               	bsf	3,5	;RP0=1, select bank1
  5494  0E99  1303               	bcf	3,6	;RP1=0, select bank1
  5495  0E9A  15A0               	bsf	_Load^(0+128),3
  5496                           
  5497                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  5498  0E9B  158A  27CE         	fcall	_setLoad_AH_AL_Restore
  5499  0E9D  0008               	return
  5500  0E9E                     __end_of_Load_Initialization:	
  5501                           
  5502                           	psect	text29
  5503  0FCE                     __ptext29:	
  5504 ;; *************** function _setLoad_AH_AL_Restore *****************
  5505 ;; Defined at:
  5506 ;;		line 460 in file "../src/OverLoad_B1.c"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;		None
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;  i               1    5[COMMON] unsigned char 
  5511 ;; Return value:  Size  Location     Type
  5512 ;;		None               void
  5513 ;; Registers used:
  5514 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5520 ;;      Params:         0       0       0       0
  5521 ;;      Locals:         1       0       0       0
  5522 ;;      Temps:          1       0       0       0
  5523 ;;      Totals:         2       0       0       0
  5524 ;;Total ram usage:        2 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    2
  5527 ;; This function calls:
  5528 ;;		Nothing
  5529 ;; This function is called by:
  5530 ;;		_Load_Initialization
  5531 ;;		_Load_Main
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           
  5536                           ;psect for function _setLoad_AH_AL_Restore
  5537  0FCE                     _setLoad_AH_AL_Restore:	
  5538                           
  5539                           ;OverLoad_B1.c: 461: char i;
  5540                           ;OverLoad_B1.c: 462: for (i = 0; i < 5; i++) {
  5541                           
  5542                           ;incstack = 0
  5543                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  5544  0FCE  01F5               	clrf	setLoad_AH_AL_Restore@i
  5545  0FCF                     L17:	
  5546  0FCF  3005               	movlw	5
  5547  0FD0  0275               	subwf	setLoad_AH_AL_Restore@i,w
  5548  0FD1  1803               	btfsc	3,0
  5549  0FD2  0008               	return
  5550                           
  5551                           ;OverLoad_B1.c: 463: Load.AH[i] = 0;
  5552  0FD3  0875               	movf	setLoad_AH_AL_Restore@i,w
  5553  0FD4  3EAC               	addlw	(_Load+12)& (0+255)
  5554  0FD5  0084               	movwf	4
  5555  0FD6  1383               	bcf	3,7	;select IRP bank1
  5556  0FD7  0180               	clrf	0
  5557                           
  5558                           ;OverLoad_B1.c: 464: Load.AL[i] = 0xff;
  5559  0FD8  30FF               	movlw	255
  5560  0FD9  00F4               	movwf	??_setLoad_AH_AL_Restore
  5561  0FDA  0875               	movf	setLoad_AH_AL_Restore@i,w
  5562  0FDB  3EB1               	addlw	(_Load+17)& (0+255)
  5563  0FDC  0084               	movwf	4
  5564  0FDD  0874               	movf	??_setLoad_AH_AL_Restore,w
  5565  0FDE  0080               	movwf	0
  5566  0FDF  3001               	movlw	1
  5567  0FE0  00F4               	movwf	??_setLoad_AH_AL_Restore
  5568  0FE1  0874               	movf	??_setLoad_AH_AL_Restore,w
  5569  0FE2  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  5570  0FE3  2FCF               	goto	L17
  5571  0FE4                     __end_of_setLoad_AH_AL_Restore:	
  5572                           
  5573                           	psect	text30
  5574  0EBB                     __ptext30:	
  5575 ;; *************** function _Lights_Main *****************
  5576 ;; Defined at:
  5577 ;;		line 53 in file "../src/TriacRelay_B1.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;		None
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;		None
  5582 ;; Return value:  Size  Location     Type
  5583 ;;		None               void
  5584 ;; Registers used:
  5585 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5591 ;;      Params:         0       0       0       0
  5592 ;;      Locals:         0       0       0       0
  5593 ;;      Temps:          0       0       0       0
  5594 ;;      Totals:         0       0       0       0
  5595 ;;Total ram usage:        0 bytes
  5596 ;; Hardware stack levels used:    1
  5597 ;; Hardware stack levels required when called:    5
  5598 ;; This function calls:
  5599 ;;		_Lights_Close
  5600 ;;		_Lights_Control
  5601 ;;		_setLights_Main
  5602 ;; This function is called by:
  5603 ;;		_main
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           
  5608                           ;psect for function _Lights_Main
  5609  0EBB                     _Lights_Main:	
  5610                           
  5611                           ;TriacRelay_B1.c: 55: setLights_Main(1);
  5612                           
  5613                           ;incstack = 0
  5614                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5615  0EBB  3001               	movlw	1
  5616  0EBC  118A  26B4  158A   	fcall	_setLights_Main
  5617                           
  5618                           ;TriacRelay_B1.c: 67: Lights_Control(1);
  5619  0EBF  3001               	movlw	1
  5620  0EC0  118A  250A  158A   	fcall	_Lights_Control
  5621                           
  5622                           ;TriacRelay_B1.c: 78: Lights_Close();
  5623  0EC3  158A  2704         	fcall	_Lights_Close
  5624  0EC5  0008               	return
  5625  0EC6                     __end_of_Lights_Main:	
  5626                           
  5627                           	psect	text31
  5628  06B4                     __ptext31:	
  5629 ;; *************** function _setLights_Main *****************
  5630 ;; Defined at:
  5631 ;;		line 108 in file "../src/TriacRelay_B1.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  lights          1    wreg     unsigned char 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  lights          1    4[BANK0 ] unsigned char 
  5636 ;;  clear           1    3[BANK0 ] unsigned char 
  5637 ;; Return value:  Size  Location     Type
  5638 ;;		None               void
  5639 ;; Registers used:
  5640 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5646 ;;      Params:         0       0       0       0
  5647 ;;      Locals:         0       2       0       0
  5648 ;;      Temps:          0       0       0       0
  5649 ;;      Totals:         0       2       0       0
  5650 ;;Total ram usage:        2 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    4
  5653 ;; This function calls:
  5654 ;;		_LightsPointSelect
  5655 ;;		_setLights
  5656 ;; This function is called by:
  5657 ;;		_Lights_Main
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           
  5662                           ;psect for function _setLights_Main
  5663  06B4                     _setLights_Main:	
  5664                           
  5665                           ;incstack = 0
  5666                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5667                           ;setLights_Main@lights stored from wreg
  5668  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  5669  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  5670  06B6  00E4               	movwf	setLights_Main@lights
  5671                           
  5672                           ;TriacRelay_B1.c: 109: char clear = 1;
  5673  06B7  01E3               	clrf	setLights_Main@clear
  5674  06B8  0AE3               	incf	setLights_Main@clear,f
  5675                           
  5676                           ;TriacRelay_B1.c: 110: LightsPointSelect(lights);
  5677  06B9  0864               	movf	setLights_Main@lights,w
  5678  06BA  158A  26DE  118A   	fcall	_LightsPointSelect
  5679                           
  5680                           ;TriacRelay_B1.c: 111: if (Lights->GO == 0) {
  5681  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  5682  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  5683  06BF  0830               	movf	_Lights,w
  5684  06C0  0084               	movwf	4
  5685  06C1  1383               	bcf	3,7	;select IRP bank0
  5686  06C2  1880               	btfsc	0,1
  5687  06C3  0008               	return
  5688                           
  5689                           ;TriacRelay_B1.c: 131: if (Lights->Trigger == 1) {
  5690  06C4  0830               	movf	_Lights,w
  5691  06C5  0084               	movwf	4
  5692  06C6  1E80               	btfss	0,5
  5693  06C7  0008               	return
  5694                           
  5695                           ;TriacRelay_B1.c: 132: if (clear == 1) {
  5696  06C8  0863               	movf	setLights_Main@clear,w
  5697  06C9  3A01               	xorlw	1
  5698  06CA  1D03               	skipz
  5699  06CB  0008               	return
  5700                           
  5701                           ;TriacRelay_B1.c: 133: if (Lights->Switch == 1) {
  5702  06CC  0830               	movf	_Lights,w
  5703  06CD  0084               	movwf	4
  5704  06CE  1F00               	btfss	0,6
  5705  06CF  2EDF               	goto	l3493
  5706                           
  5707                           ;TriacRelay_B1.c: 134: Lights->Trigger = 0;
  5708  06D0  0830               	movf	_Lights,w
  5709  06D1  0084               	movwf	4
  5710  06D2  1280               	bcf	0,5
  5711                           
  5712                           ;TriacRelay_B1.c: 136: setLights(lights, 1);
  5713  06D3  01E0               	clrf	setLights@status
  5714  06D4  0AE0               	incf	setLights@status,f
  5715  06D5  0864               	movf	setLights_Main@lights,w
  5716  06D6  118A  2637         	fcall	_setLights
  5717                           
  5718                           ;TriacRelay_B1.c: 140: Lights->Clear = 0;
  5719  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  5720  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  5721  06DA  0A30               	incf	_Lights,w
  5722  06DB  0084               	movwf	4
  5723  06DC  1383               	bcf	3,7	;select IRP bank0
  5724  06DD  1080               	bcf	0,1
  5725                           
  5726                           ;TriacRelay_B1.c: 142: } else {
  5727  06DE  0008               	return
  5728  06DF                     l3493:	
  5729                           
  5730                           ;TriacRelay_B1.c: 143: Lights->Trigger = 0;
  5731  06DF  0830               	movf	_Lights,w
  5732  06E0  0084               	movwf	4
  5733  06E1  1280               	bcf	0,5
  5734                           
  5735                           ;TriacRelay_B1.c: 145: setLights(lights, 0);
  5736  06E2  01E0               	clrf	setLights@status
  5737  06E3  0864               	movf	setLights_Main@lights,w
  5738  06E4  118A  2637         	fcall	_setLights
  5739                           
  5740                           ;TriacRelay_B1.c: 148: Lights->Clear = 0;
  5741  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  5742  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  5743  06E8  0A30               	incf	_Lights,w
  5744  06E9  0084               	movwf	4
  5745  06EA  1383               	bcf	3,7	;select IRP bank0
  5746  06EB  1080               	bcf	0,1
  5747  06EC  0008               	return
  5748  06ED                     __end_of_setLights_Main:	
  5749                           
  5750                           	psect	text32
  5751  0637                     __ptext32:	
  5752 ;; *************** function _setLights *****************
  5753 ;; Defined at:
  5754 ;;		line 220 in file "../src/TriacRelay_B1.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;  lights          1    wreg     unsigned char 
  5757 ;;  status          1    0[BANK0 ] unsigned char 
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;  lights          1    2[BANK0 ] unsigned char 
  5760 ;; Return value:  Size  Location     Type
  5761 ;;		None               void
  5762 ;; Registers used:
  5763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5764 ;; Tracked objects:
  5765 ;;		On entry : 0/0
  5766 ;;		On exit  : 0/0
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5769 ;;      Params:         0       1       0       0
  5770 ;;      Locals:         0       1       0       0
  5771 ;;      Temps:          0       1       0       0
  5772 ;;      Totals:         0       3       0       0
  5773 ;;Total ram usage:        3 bytes
  5774 ;; Hardware stack levels used:    1
  5775 ;; Hardware stack levels required when called:    3
  5776 ;; This function calls:
  5777 ;;		_LightsPointSelect
  5778 ;; This function is called by:
  5779 ;;		_setLights_Main
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           
  5784                           ;psect for function _setLights
  5785  0637                     _setLights:	
  5786                           
  5787                           ;incstack = 0
  5788                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5789                           ;setLights@lights stored from wreg
  5790  0637  1283               	bcf	3,5	;RP0=0, select bank0
  5791  0638  1303               	bcf	3,6	;RP1=0, select bank0
  5792  0639  00E2               	movwf	setLights@lights
  5793                           
  5794                           ;TriacRelay_B1.c: 222: LightsPointSelect(lights);
  5795  063A  0862               	movf	setLights@lights,w
  5796  063B  158A  26DE  118A   	fcall	_LightsPointSelect
  5797                           
  5798                           ;TriacRelay_B1.c: 223: LightsControl.Load = lights;
  5799  063E  1283               	bcf	3,5	;RP0=0, select bank0
  5800  063F  1303               	bcf	3,6	;RP1=0, select bank0
  5801  0640  0862               	movf	setLights@lights,w
  5802  0641  1079               	bcf	_LightsControl,0
  5803  0642  1D03               	skipz
  5804  0643  1479               	bsf	_LightsControl,0
  5805                           
  5806                           ;TriacRelay_B1.c: 224: Lights->GO = 1;
  5807  0644  0830               	movf	_Lights,w
  5808  0645  0084               	movwf	4
  5809  0646  1383               	bcf	3,7	;select IRP bank0
  5810  0647  1480               	bsf	0,1
  5811                           
  5812                           ;TriacRelay_B1.c: 225: if (status == 1) {
  5813  0648  0860               	movf	setLights@status,w
  5814  0649  3A01               	xorlw	1
  5815  064A  1D03               	skipz
  5816  064B  2E5C               	goto	l3397
  5817                           
  5818                           ;TriacRelay_B1.c: 226: if (Lights->Status == 0) {
  5819  064C  0830               	movf	_Lights,w
  5820  064D  0084               	movwf	4
  5821  064E  1900               	btfsc	0,2
  5822  064F  2E71               	goto	l3401
  5823                           
  5824                           ;TriacRelay_B1.c: 227: Lights->Status = 1;
  5825  0650  0830               	movf	_Lights,w
  5826  0651  0084               	movwf	4
  5827  0652  1500               	bsf	0,2
  5828                           
  5829                           ;TriacRelay_B1.c: 228: Lights->RelayValue = 7;
  5830  0653  3007               	movlw	7
  5831  0654  00E1               	movwf	??_setLights
  5832  0655  0830               	movf	_Lights,w
  5833  0656  3E06               	addlw	6
  5834  0657  0084               	movwf	4
  5835  0658  0861               	movf	??_setLights,w
  5836  0659  0080               	movwf	0
  5837                           
  5838                           ;TriacRelay_B1.c: 229: Lights->TriacValue = 14;
  5839  065A  300E               	movlw	14
  5840  065B  2E6B               	goto	L18
  5841  065C                     l3397:	
  5842                           ;TriacRelay_B1.c: 232: }
  5843                           ;TriacRelay_B1.c: 233: } else {
  5844                           
  5845                           
  5846                           ;TriacRelay_B1.c: 234: if (Lights->Status == 1) {
  5847  065C  0830               	movf	_Lights,w
  5848  065D  0084               	movwf	4
  5849  065E  1D00               	btfss	0,2
  5850  065F  2E71               	goto	l3401
  5851                           
  5852                           ;TriacRelay_B1.c: 235: Lights->Status = 0;
  5853  0660  0830               	movf	_Lights,w
  5854  0661  0084               	movwf	4
  5855  0662  1100               	bcf	0,2
  5856                           
  5857                           ;TriacRelay_B1.c: 236: Lights->RelayValue = 4;
  5858  0663  3004               	movlw	4
  5859  0664  00E1               	movwf	??_setLights
  5860  0665  0830               	movf	_Lights,w
  5861  0666  3E06               	addlw	6
  5862  0667  0084               	movwf	4
  5863  0668  0861               	movf	??_setLights,w
  5864  0669  0080               	movwf	0
  5865                           
  5866                           ;TriacRelay_B1.c: 237: Lights->TriacValue = 7;
  5867  066A  3007               	movlw	7
  5868  066B                     L18:	
  5869  066B  00E1               	movwf	??_setLights
  5870  066C  0830               	movf	_Lights,w
  5871  066D  3E04               	addlw	4
  5872  066E  0084               	movwf	4
  5873  066F  0861               	movf	??_setLights,w
  5874  0670  0080               	movwf	0
  5875  0671                     l3401:	
  5876                           
  5877                           ;TriacRelay_B1.c: 239: }
  5878                           ;TriacRelay_B1.c: 240: }
  5879                           ;TriacRelay_B1.c: 242: if (lights == 1) {
  5880  0671  0862               	movf	setLights@lights,w
  5881  0672  3A01               	xorlw	1
  5882  0673  1D03               	skipz
  5883  0674  0008               	return
  5884                           
  5885                           ;TriacRelay_B1.c: 243: RB2 = 1;
  5886  0675  1506               	bsf	6,2	;volatile
  5887  0676  0008               	return
  5888  0677                     __end_of_setLights:	
  5889                           
  5890                           	psect	text33
  5891  050A                     __ptext33:	
  5892 ;; *************** function _Lights_Control *****************
  5893 ;; Defined at:
  5894 ;;		line 258 in file "../src/TriacRelay_B1.c"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;  lights          1    wreg     unsigned char 
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;  lights          1    2[BANK0 ] unsigned char 
  5899 ;; Return value:  Size  Location     Type
  5900 ;;		None               void
  5901 ;; Registers used:
  5902 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5908 ;;      Params:         0       0       0       0
  5909 ;;      Locals:         0       1       0       0
  5910 ;;      Temps:          0       2       0       0
  5911 ;;      Totals:         0       3       0       0
  5912 ;;Total ram usage:        3 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    3
  5915 ;; This function calls:
  5916 ;;		_LightsPointSelect
  5917 ;; This function is called by:
  5918 ;;		_Lights_Main
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           
  5923                           ;psect for function _Lights_Control
  5924  050A                     _Lights_Control:	
  5925                           
  5926                           ;incstack = 0
  5927                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5928                           ;Lights_Control@lights stored from wreg
  5929  050A  1283               	bcf	3,5	;RP0=0, select bank0
  5930  050B  1303               	bcf	3,6	;RP1=0, select bank0
  5931  050C  00E2               	movwf	Lights_Control@lights
  5932                           
  5933                           ;TriacRelay_B1.c: 259: LightsPointSelect(lights);
  5934  050D  0862               	movf	Lights_Control@lights,w
  5935  050E  158A  26DE  118A   	fcall	_LightsPointSelect
  5936                           
  5937                           ;TriacRelay_B1.c: 260: if (Lights->GO == 1) {
  5938  0511  1283               	bcf	3,5	;RP0=0, select bank0
  5939  0512  1303               	bcf	3,6	;RP1=0, select bank0
  5940  0513  0830               	movf	_Lights,w
  5941  0514  0084               	movwf	4
  5942  0515  1383               	bcf	3,7	;select IRP bank0
  5943  0516  1C80               	btfss	0,1
  5944  0517  0008               	return
  5945                           
  5946                           ;TriacRelay_B1.c: 261: Lights->Time++;
  5947  0518  3001               	movlw	1
  5948  0519  00E0               	movwf	??_Lights_Control
  5949  051A  0830               	movf	_Lights,w
  5950  051B  3E02               	addlw	2
  5951  051C  0084               	movwf	4
  5952  051D  0860               	movf	??_Lights_Control,w
  5953  051E  0780               	addwf	0,f
  5954                           
  5955                           ;TriacRelay_B1.c: 262: if (Lights->Time >= Lights->RelayValue && Lights->RelaySet == 0) 
      +                          {
  5956  051F  0830               	movf	_Lights,w
  5957  0520  3E06               	addlw	6
  5958  0521  0084               	movwf	4
  5959  0522  0800               	movf	0,w
  5960  0523  00E0               	movwf	??_Lights_Control
  5961  0524  0830               	movf	_Lights,w
  5962  0525  3E02               	addlw	2
  5963  0526  0084               	movwf	4
  5964  0527  0800               	movf	0,w
  5965  0528  00E1               	movwf	??_Lights_Control+1
  5966  0529  0860               	movf	??_Lights_Control,w
  5967  052A  0261               	subwf	??_Lights_Control+1,w
  5968  052B  1C03               	skipc
  5969  052C  2D44               	goto	l3515
  5970  052D  0A30               	incf	_Lights,w
  5971  052E  0084               	movwf	4
  5972  052F  1900               	btfsc	0,2
  5973  0530  2D44               	goto	l3515
  5974                           
  5975                           ;TriacRelay_B1.c: 263: Lights->RelaySet = 1;
  5976  0531  0A30               	incf	_Lights,w
  5977  0532  0084               	movwf	4
  5978  0533  1500               	bsf	0,2
  5979                           
  5980                           ;TriacRelay_B1.c: 265: if (lights == 1) {
  5981  0534  0862               	movf	Lights_Control@lights,w
  5982  0535  3A01               	xorlw	1
  5983  0536  1D03               	skipz
  5984  0537  0008               	return
  5985                           
  5986                           ;TriacRelay_B1.c: 267: RA4 = Lights->Status ? 1 : 0;
  5987  0538  0830               	movf	_Lights,w
  5988  0539  0084               	movwf	4
  5989  053A  1D00               	btfss	0,2
  5990  053B  2D40               	goto	u3470
  5991  053C  1283               	bcf	3,5	;RP0=0, select bank0
  5992  053D  1303               	bcf	3,6	;RP1=0, select bank0
  5993  053E  1605               	bsf	5,4	;volatile
  5994  053F  0008               	return
  5995  0540                     u3470:	
  5996  0540  1283               	bcf	3,5	;RP0=0, select bank0
  5997  0541  1303               	bcf	3,6	;RP1=0, select bank0
  5998  0542  1205               	bcf	5,4	;volatile
  5999                           
  6000                           ;TriacRelay_B1.c: 269: }
  6001                           ;TriacRelay_B1.c: 284: } else if (Lights->Time >= Lights->TriacValue) {
  6002  0543  0008               	return
  6003  0544                     l3515:	
  6004  0544  0830               	movf	_Lights,w
  6005  0545  3E04               	addlw	4
  6006  0546  0084               	movwf	4
  6007  0547  1383               	bcf	3,7	;select IRP bank0
  6008  0548  0800               	movf	0,w
  6009  0549  00E0               	movwf	??_Lights_Control
  6010  054A  0830               	movf	_Lights,w
  6011  054B  3E02               	addlw	2
  6012  054C  0084               	movwf	4
  6013  054D  0800               	movf	0,w
  6014  054E  00E1               	movwf	??_Lights_Control+1
  6015  054F  0860               	movf	??_Lights_Control,w
  6016  0550  0261               	subwf	??_Lights_Control+1,w
  6017  0551  1C03               	skipc
  6018  0552  0008               	return
  6019                           
  6020                           ;TriacRelay_B1.c: 285: Lights->Time = 0;
  6021  0553  0830               	movf	_Lights,w
  6022  0554  3E02               	addlw	2
  6023  0555  0084               	movwf	4
  6024  0556  0180               	clrf	0
  6025                           
  6026                           ;TriacRelay_B1.c: 286: Lights->GO = 0;
  6027  0557  0830               	movf	_Lights,w
  6028  0558  0084               	movwf	4
  6029  0559  1080               	bcf	0,1
  6030                           
  6031                           ;TriacRelay_B1.c: 287: Lights->RelaySet = 0;
  6032  055A  0A30               	incf	_Lights,w
  6033  055B  0084               	movwf	4
  6034  055C  1100               	bcf	0,2
  6035                           
  6036                           ;TriacRelay_B1.c: 289: if (lights == 1) {
  6037  055D  0862               	movf	Lights_Control@lights,w
  6038  055E  3A01               	xorlw	1
  6039  055F  1D03               	skipz
  6040  0560  0008               	return
  6041                           
  6042                           ;TriacRelay_B1.c: 290: RB2 = 0;
  6043  0561  1106               	bcf	6,2	;volatile
  6044  0562  0008               	return
  6045  0563                     __end_of_Lights_Control:	
  6046                           
  6047                           	psect	text34
  6048  0F04                     __ptext34:	
  6049 ;; *************** function _Lights_Close *****************
  6050 ;; Defined at:
  6051 ;;		line 81 in file "../src/TriacRelay_B1.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;		None
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;  status          1    6[BANK0 ] unsigned char 
  6056 ;; Return value:  Size  Location     Type
  6057 ;;		None               void
  6058 ;; Registers used:
  6059 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6065 ;;      Params:         0       0       0       0
  6066 ;;      Locals:         0       1       0       0
  6067 ;;      Temps:          0       1       0       0
  6068 ;;      Totals:         0       2       0       0
  6069 ;;Total ram usage:        2 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    4
  6072 ;; This function calls:
  6073 ;;		_getMain_LightsStatus
  6074 ;; This function is called by:
  6075 ;;		_Lights_Main
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079                           
  6080                           ;psect for function _Lights_Close
  6081  0F04                     _Lights_Close:	
  6082                           
  6083                           ;TriacRelay_B1.c: 82: char status = 0;
  6084                           
  6085                           ;incstack = 0
  6086                           ; Regs used in _Lights_Close: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6087  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  6088  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  6089  0F06  01E6               	clrf	Lights_Close@status
  6090                           
  6091                           ;TriacRelay_B1.c: 83: if (LightsControl.Detect == 1) {
  6092  0F07  1C79               	btfss	_LightsControl,0
  6093  0F08  0008               	return
  6094                           
  6095                           ;TriacRelay_B1.c: 84: LightsControl.Detect = 0;
  6096  0F09  1079               	bcf	_LightsControl,0
  6097                           
  6098                           ;TriacRelay_B1.c: 85: status = getMain_LightsStatus();
  6099  0F0A  118A  271F         	fcall	_getMain_LightsStatus
  6100  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  6101  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  6102  0F0E  00E5               	movwf	??_Lights_Close
  6103  0F0F  0865               	movf	??_Lights_Close,w
  6104  0F10  00E6               	movwf	Lights_Close@status
  6105  0F11  0008               	return
  6106  0F12                     __end_of_Lights_Close:	
  6107                           
  6108                           	psect	text35
  6109  071F                     __ptext35:	
  6110 ;; *************** function _getMain_LightsStatus *****************
  6111 ;; Defined at:
  6112 ;;		line 309 in file "../src/Main_B1.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;		None
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;  i               2    2[BANK0 ] int 
  6117 ;;  status          1    4[BANK0 ] unsigned char 
  6118 ;;  count           1    1[BANK0 ] unsigned char 
  6119 ;; Return value:  Size  Location     Type
  6120 ;;                  1    wreg      unsigned char 
  6121 ;; Registers used:
  6122 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6123 ;; Tracked objects:
  6124 ;;		On entry : 0/0
  6125 ;;		On exit  : 0/0
  6126 ;;		Unchanged: 0/0
  6127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6128 ;;      Params:         0       0       0       0
  6129 ;;      Locals:         0       4       0       0
  6130 ;;      Temps:          0       1       0       0
  6131 ;;      Totals:         0       5       0       0
  6132 ;;Total ram usage:        5 bytes
  6133 ;; Hardware stack levels used:    1
  6134 ;; Hardware stack levels required when called:    3
  6135 ;; This function calls:
  6136 ;;		_LightsPointSelect
  6137 ;; This function is called by:
  6138 ;;		_Load_Main
  6139 ;;		_Lights_Close
  6140 ;; This function uses a non-reentrant model
  6141 ;;
  6142                           
  6143                           
  6144                           ;psect for function _getMain_LightsStatus
  6145  071F                     _getMain_LightsStatus:	
  6146                           
  6147                           ;Main_B1.c: 310: char status = 0, count = 0;
  6148                           
  6149                           ;incstack = 0
  6150                           ; Regs used in _getMain_LightsStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6151  071F  1283               	bcf	3,5	;RP0=0, select bank0
  6152  0720  1303               	bcf	3,6	;RP1=0, select bank0
  6153  0721  01E4               	clrf	getMain_LightsStatus@status
  6154  0722  01E1               	clrf	getMain_LightsStatus@count
  6155                           
  6156                           ;Main_B1.c: 313: count = 1;
  6157  0723  01E1               	clrf	getMain_LightsStatus@count
  6158  0724  0AE1               	incf	getMain_LightsStatus@count,f
  6159                           
  6160                           ;Main_B1.c: 321: for (int i = 0; i < count; i++) {
  6161  0725  01E2               	clrf	getMain_LightsStatus@i
  6162  0726  01E3               	clrf	getMain_LightsStatus@i+1
  6163  0727                     l3371:	
  6164  0727  0863               	movf	getMain_LightsStatus@i+1,w
  6165  0728  3A80               	xorlw	128
  6166  0729  00E0               	movwf	??_getMain_LightsStatus
  6167  072A  3080               	movlw	128
  6168  072B  0260               	subwf	??_getMain_LightsStatus,w
  6169  072C  1D03               	skipz
  6170  072D  2F30               	goto	u3275
  6171  072E  0861               	movf	getMain_LightsStatus@count,w
  6172  072F  0262               	subwf	getMain_LightsStatus@i,w
  6173  0730                     u3275:	
  6174  0730  1803               	btfsc	3,0
  6175  0731  2F4C               	goto	l3373
  6176                           
  6177                           ;Main_B1.c: 322: if (status == 0) {
  6178  0732  1283               	bcf	3,5	;RP0=0, select bank0
  6179  0733  1303               	bcf	3,6	;RP1=0, select bank0
  6180  0734  08E4               	movf	getMain_LightsStatus@status,f
  6181  0735  1D03               	skipz
  6182  0736  2F45               	goto	l3369
  6183                           
  6184                           ;Main_B1.c: 323: LightsPointSelect(i + 1);
  6185  0737  0862               	movf	getMain_LightsStatus@i,w
  6186  0738  3E01               	addlw	1
  6187  0739  158A  26DE  118A   	fcall	_LightsPointSelect
  6188                           
  6189                           ;Main_B1.c: 324: status = Lights->Status == 1 ? 1 : 0;
  6190  073C  1283               	bcf	3,5	;RP0=0, select bank0
  6191  073D  1303               	bcf	3,6	;RP1=0, select bank0
  6192  073E  0830               	movf	_Lights,w
  6193  073F  0084               	movwf	4
  6194  0740  3000               	movlw	0
  6195  0741  1383               	bcf	3,7	;select IRP bank0
  6196  0742  1900               	btfsc	0,2
  6197  0743  3001               	movlw	1
  6198  0744  00E4               	movwf	getMain_LightsStatus@status
  6199  0745                     l3369:	
  6200  0745  3001               	movlw	1
  6201  0746  07E2               	addwf	getMain_LightsStatus@i,f
  6202  0747  1803               	skipnc
  6203  0748  0AE3               	incf	getMain_LightsStatus@i+1,f
  6204  0749  3000               	movlw	0
  6205  074A  07E3               	addwf	getMain_LightsStatus@i+1,f
  6206  074B  2F27               	goto	l3371
  6207  074C                     l3373:	
  6208                           
  6209                           ;Main_B1.c: 325: }
  6210                           ;Main_B1.c: 326: }
  6211                           ;Main_B1.c: 329: return status;
  6212  074C  1283               	bcf	3,5	;RP0=0, select bank0
  6213  074D  1303               	bcf	3,6	;RP1=0, select bank0
  6214  074E  0864               	movf	getMain_LightsStatus@status,w
  6215  074F  0008               	return
  6216  0750                     __end_of_getMain_LightsStatus:	
  6217                           
  6218                           	psect	text36
  6219  0E8F                     __ptext36:	
  6220 ;; *************** function _Lights_Initialization *****************
  6221 ;; Defined at:
  6222 ;;		line 33 in file "../src/TriacRelay_B1.c"
  6223 ;; Parameters:    Size  Location     Type
  6224 ;;		None
  6225 ;; Auto vars:     Size  Location     Type
  6226 ;;		None
  6227 ;; Return value:  Size  Location     Type
  6228 ;;		None               void
  6229 ;; Registers used:
  6230 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6231 ;; Tracked objects:
  6232 ;;		On entry : 0/0
  6233 ;;		On exit  : 0/0
  6234 ;;		Unchanged: 0/0
  6235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6236 ;;      Params:         0       0       0       0
  6237 ;;      Locals:         0       0       0       0
  6238 ;;      Temps:          0       0       0       0
  6239 ;;      Totals:         0       0       0       0
  6240 ;;Total ram usage:        0 bytes
  6241 ;; Hardware stack levels used:    1
  6242 ;; Hardware stack levels required when called:    4
  6243 ;; This function calls:
  6244 ;;		_setLights_Initialization
  6245 ;; This function is called by:
  6246 ;;		_main
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           
  6251                           ;psect for function _Lights_Initialization
  6252  0E8F                     _Lights_Initialization:	
  6253                           
  6254                           ;TriacRelay_B1.c: 35: setLights_Initialization(1);
  6255                           
  6256                           ;incstack = 0
  6257                           ; Regs used in _Lights_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6258  0E8F  3001               	movlw	1
  6259  0E90  158A  274E         	fcall	_setLights_Initialization
  6260  0E92  0008               	return
  6261  0E93                     __end_of_Lights_Initialization:	
  6262                           
  6263                           	psect	text37
  6264  0F4E                     __ptext37:	
  6265 ;; *************** function _setLights_Initialization *****************
  6266 ;; Defined at:
  6267 ;;		line 47 in file "../src/TriacRelay_B1.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;  lights          1    wreg     unsigned char 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  lights          1    0[BANK0 ] unsigned char 
  6272 ;; Return value:  Size  Location     Type
  6273 ;;		None               void
  6274 ;; Registers used:
  6275 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6276 ;; Tracked objects:
  6277 ;;		On entry : 0/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6281 ;;      Params:         0       0       0       0
  6282 ;;      Locals:         0       1       0       0
  6283 ;;      Temps:          0       0       0       0
  6284 ;;      Totals:         0       1       0       0
  6285 ;;Total ram usage:        1 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; Hardware stack levels required when called:    3
  6288 ;; This function calls:
  6289 ;;		_LightsPointSelect
  6290 ;; This function is called by:
  6291 ;;		_Lights_Initialization
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           
  6296                           ;psect for function _setLights_Initialization
  6297  0F4E                     _setLights_Initialization:	
  6298                           
  6299                           ;incstack = 0
  6300                           ; Regs used in _setLights_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6301                           ;setLights_Initialization@lights stored from wreg
  6302  0F4E  1283               	bcf	3,5	;RP0=0, select bank0
  6303  0F4F  1303               	bcf	3,6	;RP1=0, select bank0
  6304  0F50  00E0               	movwf	setLights_Initialization@lights
  6305                           
  6306                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  6307  0F51  0860               	movf	setLights_Initialization@lights,w
  6308  0F52  158A  26DE         	fcall	_LightsPointSelect
  6309                           
  6310                           ;TriacRelay_B1.c: 49: Lights->Open = 1;
  6311  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  6312  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  6313  0F56  0830               	movf	_Lights,w
  6314  0F57  0084               	movwf	4
  6315  0F58  1383               	bcf	3,7	;select IRP bank0
  6316  0F59  1580               	bsf	0,3
  6317                           
  6318                           ;TriacRelay_B1.c: 50: Lights->Close = 1;
  6319  0F5A  0830               	movf	_Lights,w
  6320  0F5B  0084               	movwf	4
  6321  0F5C  1600               	bsf	0,4
  6322  0F5D  0008               	return
  6323  0F5E                     __end_of_setLights_Initialization:	
  6324                           
  6325                           	psect	text38
  6326  0EDE                     __ptext38:	
  6327 ;; *************** function _LightsPointSelect *****************
  6328 ;; Defined at:
  6329 ;;		line 10 in file "../src/TriacRelay_B1.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;  lights          1    wreg     unsigned char 
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;  lights          1    5[COMMON] unsigned char 
  6334 ;; Return value:  Size  Location     Type
  6335 ;;		None               void
  6336 ;; Registers used:
  6337 ;;		wreg
  6338 ;; Tracked objects:
  6339 ;;		On entry : 0/0
  6340 ;;		On exit  : 0/0
  6341 ;;		Unchanged: 0/0
  6342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6343 ;;      Params:         0       0       0       0
  6344 ;;      Locals:         1       0       0       0
  6345 ;;      Temps:          1       0       0       0
  6346 ;;      Totals:         2       0       0       0
  6347 ;;Total ram usage:        2 bytes
  6348 ;; Hardware stack levels used:    1
  6349 ;; Hardware stack levels required when called:    2
  6350 ;; This function calls:
  6351 ;;		Nothing
  6352 ;; This function is called by:
  6353 ;;		_getMain_LightsStatus
  6354 ;;		_setLights_Initialization
  6355 ;;		_setLights_Main
  6356 ;;		_getLights_Status
  6357 ;;		_setLights_Trigger
  6358 ;;		_setLights
  6359 ;;		_Lights_Control
  6360 ;;		_setLights_Clear
  6361 ;;		_setLights_Open
  6362 ;;		_getLights_Open
  6363 ;;		_setLights_Close
  6364 ;;		_getLights_Close
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           
  6369                           ;psect for function _LightsPointSelect
  6370  0EDE                     _LightsPointSelect:	
  6371                           
  6372                           ;incstack = 0
  6373                           ; Regs used in _LightsPointSelect: [wreg]
  6374                           ;LightsPointSelect@lights stored from wreg
  6375  0EDE  00F5               	movwf	LightsPointSelect@lights
  6376                           
  6377                           ;TriacRelay_B1.c: 14: if (lights == 1) {
  6378  0EDF  0875               	movf	LightsPointSelect@lights,w
  6379  0EE0  3A01               	xorlw	1
  6380  0EE1  1D03               	skipz
  6381  0EE2  0008               	return
  6382                           
  6383                           ;TriacRelay_B1.c: 15: Lights = &Lights1;
  6384  0EE3  30C2               	movlw	_Lights1& (0+255)
  6385  0EE4  00F4               	movwf	??_LightsPointSelect
  6386  0EE5  0874               	movf	??_LightsPointSelect,w
  6387  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  6388  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  6389  0EE8  00B0               	movwf	_Lights
  6390  0EE9  0008               	return
  6391  0EEA                     __end_of_LightsPointSelect:	
  6392                           
  6393                           	psect	text39
  6394  0ED2                     __ptext39:	
  6395 ;; *************** function _LED_Main *****************
  6396 ;; Defined at:
  6397 ;;		line 47 in file "../src/LED_B1.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;		None
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;		None
  6402 ;; Return value:  Size  Location     Type
  6403 ;;		None               void
  6404 ;; Registers used:
  6405 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6411 ;;      Params:         0       0       0       0
  6412 ;;      Locals:         0       0       0       0
  6413 ;;      Temps:          0       0       0       0
  6414 ;;      Totals:         0       0       0       0
  6415 ;;Total ram usage:        0 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; Hardware stack levels required when called:    4
  6418 ;; This function calls:
  6419 ;;		_setLED_Main
  6420 ;; This function is called by:
  6421 ;;		_main
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           
  6426                           ;psect for function _LED_Main
  6427  0ED2                     _LED_Main:	
  6428                           
  6429                           ;LED_B1.c: 49: setLED_Main(1);
  6430                           
  6431                           ;incstack = 0
  6432                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6433  0ED2  3001               	movlw	1
  6434  0ED3  118A  2677  158A   	fcall	_setLED_Main
  6435                           
  6436                           ;LED_B1.c: 52: setLED_Main(2);
  6437  0ED6  3002               	movlw	2
  6438  0ED7  118A  2677  158A   	fcall	_setLED_Main
  6439                           
  6440                           ;LED_B1.c: 58: setLED_Main(99);
  6441  0EDA  3063               	movlw	99
  6442  0EDB  118A  2677         	fcall	_setLED_Main
  6443  0EDD  0008               	return
  6444  0EDE                     __end_of_LED_Main:	
  6445                           
  6446                           	psect	text40
  6447  0677                     __ptext40:	
  6448 ;; *************** function _setLED_Main *****************
  6449 ;; Defined at:
  6450 ;;		line 192 in file "../src/LED_B1.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  led             1    wreg     unsigned char 
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  led             1    2[BANK0 ] unsigned char 
  6455 ;; Return value:  Size  Location     Type
  6456 ;;		None               void
  6457 ;; Registers used:
  6458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6464 ;;      Params:         0       0       0       0
  6465 ;;      Locals:         0       1       0       0
  6466 ;;      Temps:          0       2       0       0
  6467 ;;      Totals:         0       3       0       0
  6468 ;;Total ram usage:        3 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    3
  6471 ;; This function calls:
  6472 ;;		_LedPointSelect
  6473 ;; This function is called by:
  6474 ;;		_LED_Main
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478                           
  6479                           ;psect for function _setLED_Main
  6480  0677                     _setLED_Main:	
  6481                           
  6482                           ;incstack = 0
  6483                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6484                           ;setLED_Main@led stored from wreg
  6485  0677  1283               	bcf	3,5	;RP0=0, select bank0
  6486  0678  1303               	bcf	3,6	;RP1=0, select bank0
  6487  0679  00E2               	movwf	setLED_Main@led
  6488                           
  6489                           ;LED_B1.c: 193: LedPointSelect(led);
  6490  067A  0862               	movf	setLED_Main@led,w
  6491  067B  118A  27CF  118A   	fcall	_LedPointSelect
  6492                           
  6493                           ;LED_B1.c: 194: if (LED->GO == 1) {
  6494  067E  0878               	movf	_LED,w
  6495  067F  0084               	movwf	4
  6496  0680  1383               	bcf	3,7	;select IRP bank0
  6497  0681  1C80               	btfss	0,1
  6498  0682  0008               	return
  6499                           
  6500                           ;LED_B1.c: 195: LED->Time++;
  6501  0683  0A78               	incf	_LED,w
  6502  0684  0084               	movwf	4
  6503  0685  3001               	movlw	1
  6504  0686  0780               	addwf	0,f
  6505  0687  0A84               	incf	4,f
  6506  0688  1803               	skipnc
  6507  0689  0A80               	incf	0,f
  6508                           
  6509                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
  6510  068A  0A78               	incf	_LED,w
  6511  068B  0084               	movwf	4
  6512  068C  0800               	movf	0,w
  6513  068D  1283               	bcf	3,5	;RP0=0, select bank0
  6514  068E  1303               	bcf	3,6	;RP1=0, select bank0
  6515  068F  00E0               	movwf	??_setLED_Main
  6516  0690  0A84               	incf	4,f
  6517  0691  0800               	movf	0,w
  6518  0692  00E1               	movwf	??_setLED_Main+1
  6519  0693  3000               	movlw	0
  6520  0694  0261               	subwf	??_setLED_Main+1,w
  6521  0695  3032               	movlw	50
  6522  0696  1903               	skipnz
  6523  0697  0260               	subwf	??_setLED_Main,w
  6524  0698  1C03               	skipc
  6525  0699  0008               	return
  6526                           
  6527                           ;LED_B1.c: 197: LED->Time = 0;
  6528  069A  0A78               	incf	_LED,w
  6529  069B  0084               	movwf	4
  6530  069C  0180               	clrf	0
  6531  069D  0A84               	incf	4,f
  6532  069E  0180               	clrf	0
  6533                           
  6534                           ;LED_B1.c: 199: if (led == 1) {
  6535  069F  0862               	movf	setLED_Main@led,w
  6536  06A0  3A01               	xorlw	1
  6537  06A1  1D03               	skipz
  6538  06A2  2EA6               	goto	l3425
  6539                           
  6540                           ;LED_B1.c: 200: RB4 = RB4 == 1 ? 0 : 1;
  6541  06A3  3010               	movlw	16
  6542  06A4  0686               	xorwf	6,f
  6543                           
  6544                           ;LED_B1.c: 201: }
  6545  06A5  0008               	return
  6546  06A6                     l3425:	
  6547                           
  6548                           ;LED_B1.c: 204: else if (led == 2) {
  6549  06A6  0862               	movf	setLED_Main@led,w
  6550  06A7  3A02               	xorlw	2
  6551  06A8  1D03               	skipz
  6552  06A9  2EAD               	goto	l3429
  6553                           
  6554                           ;LED_B1.c: 205: RB5 = RB5 == 1 ? 0 : 1;
  6555  06AA  3020               	movlw	32
  6556  06AB  0686               	xorwf	6,f
  6557                           
  6558                           ;LED_B1.c: 206: }
  6559  06AC  0008               	return
  6560  06AD                     l3429:	
  6561                           
  6562                           ;LED_B1.c: 214: else if (led == 99) {
  6563  06AD  0862               	movf	setLED_Main@led,w
  6564  06AE  3A63               	xorlw	99
  6565  06AF  1D03               	skipz
  6566  06B0  0008               	return
  6567                           
  6568                           ;LED_B1.c: 215: RB3 = RB3 == 1 ? 0 : 1;
  6569  06B1  3008               	movlw	8
  6570  06B2  0686               	xorwf	6,f
  6571  06B3  0008               	return
  6572  06B4                     __end_of_setLED_Main:	
  6573                           
  6574                           	psect	text41
  6575  0EC6                     __ptext41:	
  6576 ;; *************** function _LED_Initialization *****************
  6577 ;; Defined at:
  6578 ;;		line 31 in file "../src/LED_B1.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;		None
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;		None
  6583 ;; Return value:  Size  Location     Type
  6584 ;;		None               void
  6585 ;; Registers used:
  6586 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6592 ;;      Params:         0       0       0       0
  6593 ;;      Locals:         0       0       0       0
  6594 ;;      Temps:          0       0       0       0
  6595 ;;      Totals:         0       0       0       0
  6596 ;;Total ram usage:        0 bytes
  6597 ;; Hardware stack levels used:    1
  6598 ;; Hardware stack levels required when called:    5
  6599 ;; This function calls:
  6600 ;;		_setLED_Initialization
  6601 ;; This function is called by:
  6602 ;;		_main
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           
  6607                           ;psect for function _LED_Initialization
  6608  0EC6                     _LED_Initialization:	
  6609                           
  6610                           ;LED_B1.c: 33: setLED_Initialization(1);
  6611                           
  6612                           ;incstack = 0
  6613                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6614  0EC6  3001               	movlw	1
  6615  0EC7  158A  277F  158A   	fcall	_setLED_Initialization
  6616                           
  6617                           ;LED_B1.c: 36: setLED_Initialization(2);
  6618  0ECA  3002               	movlw	2
  6619  0ECB  158A  277F  158A   	fcall	_setLED_Initialization
  6620                           
  6621                           ;LED_B1.c: 42: setLED_Initialization(99);
  6622  0ECE  3063               	movlw	99
  6623  0ECF  158A  277F         	fcall	_setLED_Initialization
  6624  0ED1  0008               	return
  6625  0ED2                     __end_of_LED_Initialization:	
  6626                           
  6627                           	psect	text42
  6628  0F7F                     __ptext42:	
  6629 ;; *************** function _setLED_Initialization *****************
  6630 ;; Defined at:
  6631 ;;		line 63 in file "../src/LED_B1.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  led             1    wreg     unsigned char 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;  led             1    2[BANK0 ] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;		None               void
  6638 ;; Registers used:
  6639 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6645 ;;      Params:         0       0       0       0
  6646 ;;      Locals:         0       1       0       0
  6647 ;;      Temps:          0       0       0       0
  6648 ;;      Totals:         0       1       0       0
  6649 ;;Total ram usage:        1 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    4
  6652 ;; This function calls:
  6653 ;;		_LedPointSelect
  6654 ;;		_setLED
  6655 ;; This function is called by:
  6656 ;;		_LED_Initialization
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           
  6661                           ;psect for function _setLED_Initialization
  6662  0F7F                     _setLED_Initialization:	
  6663                           
  6664                           ;incstack = 0
  6665                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6666                           ;setLED_Initialization@led stored from wreg
  6667  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  6668  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  6669  0F81  00E2               	movwf	setLED_Initialization@led
  6670                           
  6671                           ;LED_B1.c: 64: LedPointSelect(led);
  6672  0F82  0862               	movf	setLED_Initialization@led,w
  6673  0F83  118A  27CF  158A   	fcall	_LedPointSelect
  6674                           
  6675                           ;LED_B1.c: 65: LED->Enable = 1;
  6676  0F86  0878               	movf	_LED,w
  6677  0F87  0084               	movwf	4
  6678  0F88  1383               	bcf	3,7	;select IRP bank0
  6679  0F89  1400               	bsf	0,0
  6680                           
  6681                           ;LED_B1.c: 66: setLED(led, 0);
  6682  0F8A  1283               	bcf	3,5	;RP0=0, select bank0
  6683  0F8B  1303               	bcf	3,6	;RP1=0, select bank0
  6684  0F8C  01E0               	clrf	setLED@command
  6685  0F8D  0862               	movf	setLED_Initialization@led,w
  6686  0F8E  118A  24AE         	fcall	_setLED
  6687  0F90  0008               	return
  6688  0F91                     __end_of_setLED_Initialization:	
  6689                           
  6690                           	psect	text43
  6691  04AE                     __ptext43:	
  6692 ;; *************** function _setLED *****************
  6693 ;; Defined at:
  6694 ;;		line 70 in file "../src/LED_B1.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;  led             1    wreg     unsigned char 
  6697 ;;  command         1    0[BANK0 ] unsigned char 
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;  led             1    1[BANK0 ] unsigned char 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;		None               void
  6702 ;; Registers used:
  6703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6709 ;;      Params:         0       1       0       0
  6710 ;;      Locals:         0       1       0       0
  6711 ;;      Temps:          0       0       0       0
  6712 ;;      Totals:         0       2       0       0
  6713 ;;Total ram usage:        2 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    3
  6716 ;; This function calls:
  6717 ;;		_LedPointSelect
  6718 ;; This function is called by:
  6719 ;;		_setLED_Initialization
  6720 ;;		_Load_Main
  6721 ;;		_PIR_Main
  6722 ;;		_setLoad_Exceptions
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           
  6727                           ;psect for function _setLED
  6728  04AE                     _setLED:	
  6729                           
  6730                           ;incstack = 0
  6731                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6732                           ;setLED@led stored from wreg
  6733  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  6734  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  6735  04B0  00E1               	movwf	setLED@led
  6736                           
  6737                           ;LED_B1.c: 71: LedPointSelect(led);
  6738  04B1  0861               	movf	setLED@led,w
  6739  04B2  118A  27CF  118A   	fcall	_LedPointSelect
  6740                           
  6741                           ;LED_B1.c: 72: if (command == 0) {
  6742  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  6743  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  6744  04B7  08E0               	movf	setLED@command,f
  6745  04B8  1D03               	skipz
  6746  04B9  2CCC               	goto	l3323
  6747                           
  6748                           ;LED_B1.c: 74: if (led == 1) {
  6749  04BA  0861               	movf	setLED@led,w
  6750  04BB  3A01               	xorlw	1
  6751  04BC  1D03               	skipz
  6752  04BD  2CC0               	goto	l3315
  6753                           
  6754                           ;LED_B1.c: 78: RB4 = 1;
  6755  04BE  1606               	bsf	6,4	;volatile
  6756                           
  6757                           ;LED_B1.c: 80: }
  6758  04BF  0008               	return
  6759  04C0                     l3315:	
  6760                           
  6761                           ;LED_B1.c: 83: else if (led == 2) {
  6762  04C0  0861               	movf	setLED@led,w
  6763  04C1  3A02               	xorlw	2
  6764  04C2  1D03               	skipz
  6765  04C3  2CC6               	goto	l3319
  6766                           
  6767                           ;LED_B1.c: 87: RB5 = 1;
  6768  04C4  1686               	bsf	6,5	;volatile
  6769                           
  6770                           ;LED_B1.c: 89: }
  6771  04C5  0008               	return
  6772  04C6                     l3319:	
  6773                           
  6774                           ;LED_B1.c: 101: else if (led == 99) {
  6775  04C6  0861               	movf	setLED@led,w
  6776  04C7  3A63               	xorlw	99
  6777  04C8  1D03               	skipz
  6778  04C9  0008               	return
  6779                           
  6780                           ;LED_B1.c: 105: RB3 = 1;
  6781  04CA  1586               	bsf	6,3	;volatile
  6782                           
  6783                           ;LED_B1.c: 107: }
  6784                           ;LED_B1.c: 109: } else if (command == 1) {
  6785  04CB  0008               	return
  6786  04CC                     l3323:	
  6787  04CC  0860               	movf	setLED@command,w
  6788  04CD  3A01               	xorlw	1
  6789  04CE  1D03               	skipz
  6790  04CF  2CE2               	goto	l3337
  6791                           
  6792                           ;LED_B1.c: 111: if (led == 1) {
  6793  04D0  0861               	movf	setLED@led,w
  6794  04D1  3A01               	xorlw	1
  6795  04D2  1D03               	skipz
  6796  04D3  2CD6               	goto	l3329
  6797                           
  6798                           ;LED_B1.c: 115: RB4 = 0;
  6799  04D4  1206               	bcf	6,4	;volatile
  6800                           
  6801                           ;LED_B1.c: 117: }
  6802  04D5  0008               	return
  6803  04D6                     l3329:	
  6804                           
  6805                           ;LED_B1.c: 120: else if (led == 2) {
  6806  04D6  0861               	movf	setLED@led,w
  6807  04D7  3A02               	xorlw	2
  6808  04D8  1D03               	skipz
  6809  04D9  2CDC               	goto	l3333
  6810                           
  6811                           ;LED_B1.c: 124: RB5 = 0;
  6812  04DA  1286               	bcf	6,5	;volatile
  6813                           
  6814                           ;LED_B1.c: 126: }
  6815  04DB  0008               	return
  6816  04DC                     l3333:	
  6817                           
  6818                           ;LED_B1.c: 138: else if (led == 99) {
  6819  04DC  0861               	movf	setLED@led,w
  6820  04DD  3A63               	xorlw	99
  6821  04DE  1D03               	skipz
  6822  04DF  0008               	return
  6823                           
  6824                           ;LED_B1.c: 142: RB3 = 0;
  6825  04E0  1186               	bcf	6,3	;volatile
  6826                           
  6827                           ;LED_B1.c: 144: }
  6828                           ;LED_B1.c: 146: } else if (command == 10) {
  6829  04E1  0008               	return
  6830  04E2                     l3337:	
  6831  04E2  0860               	movf	setLED@command,w
  6832  04E3  3A0A               	xorlw	10
  6833  04E4  1D03               	skipz
  6834  04E5  2D01               	goto	l3355
  6835                           
  6836                           ;LED_B1.c: 147: LED->GO = 0;
  6837  04E6  0878               	movf	_LED,w
  6838  04E7  0084               	movwf	4
  6839  04E8  1383               	bcf	3,7	;select IRP bank0
  6840  04E9  1080               	bcf	0,1
  6841                           
  6842                           ;LED_B1.c: 148: LED->Time = 0;
  6843  04EA  0A78               	incf	_LED,w
  6844  04EB  0084               	movwf	4
  6845  04EC  0180               	clrf	0
  6846  04ED  0A84               	incf	4,f
  6847  04EE  0180               	clrf	0
  6848                           
  6849                           ;LED_B1.c: 150: if (led == 1) {
  6850  04EF  0861               	movf	setLED@led,w
  6851  04F0  3A01               	xorlw	1
  6852  04F1  1D03               	skipz
  6853  04F2  2CF5               	goto	l3347
  6854                           
  6855                           ;LED_B1.c: 154: RB4 = 1;
  6856  04F3  1606               	bsf	6,4	;volatile
  6857                           
  6858                           ;LED_B1.c: 156: }
  6859  04F4  0008               	return
  6860  04F5                     l3347:	
  6861                           
  6862                           ;LED_B1.c: 159: else if (led == 2) {
  6863  04F5  0861               	movf	setLED@led,w
  6864  04F6  3A02               	xorlw	2
  6865  04F7  1D03               	skipz
  6866  04F8  2CFB               	goto	l3351
  6867                           
  6868                           ;LED_B1.c: 163: RB5 = 1;
  6869  04F9  1686               	bsf	6,5	;volatile
  6870                           
  6871                           ;LED_B1.c: 165: }
  6872  04FA  0008               	return
  6873  04FB                     l3351:	
  6874                           
  6875                           ;LED_B1.c: 177: else if (led == 99) {
  6876  04FB  0861               	movf	setLED@led,w
  6877  04FC  3A63               	xorlw	99
  6878  04FD  1D03               	skipz
  6879  04FE  0008               	return
  6880                           
  6881                           ;LED_B1.c: 181: RB3 = 1;
  6882  04FF  1586               	bsf	6,3	;volatile
  6883                           
  6884                           ;LED_B1.c: 183: }
  6885                           ;LED_B1.c: 185: } else if (command == 11) {
  6886  0500  0008               	return
  6887  0501                     l3355:	
  6888  0501  0860               	movf	setLED@command,w
  6889  0502  3A0B               	xorlw	11
  6890  0503  1D03               	skipz
  6891  0504  0008               	return
  6892                           
  6893                           ;LED_B1.c: 186: LED->GO = 1;
  6894  0505  0878               	movf	_LED,w
  6895  0506  0084               	movwf	4
  6896  0507  1383               	bcf	3,7	;select IRP bank0
  6897  0508  1480               	bsf	0,1
  6898  0509  0008               	return
  6899  050A                     __end_of_setLED:	
  6900                           
  6901                           	psect	text44
  6902  07CF                     __ptext44:	
  6903 ;; *************** function _LedPointSelect *****************
  6904 ;; Defined at:
  6905 ;;		line 7 in file "../src/LED_B1.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;  led             1    wreg     unsigned char 
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;  led             1    5[COMMON] unsigned char 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;		None               void
  6912 ;; Registers used:
  6913 ;;		wreg
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6919 ;;      Params:         0       0       0       0
  6920 ;;      Locals:         1       0       0       0
  6921 ;;      Temps:          1       0       0       0
  6922 ;;      Totals:         2       0       0       0
  6923 ;;Total ram usage:        2 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    2
  6926 ;; This function calls:
  6927 ;;		Nothing
  6928 ;; This function is called by:
  6929 ;;		_setLED_Initialization
  6930 ;;		_setLED
  6931 ;;		_setLED_Main
  6932 ;; This function uses a non-reentrant model
  6933 ;;
  6934                           
  6935                           
  6936                           ;psect for function _LedPointSelect
  6937  07CF                     _LedPointSelect:	
  6938                           
  6939                           ;incstack = 0
  6940                           ; Regs used in _LedPointSelect: [wreg]
  6941                           ;LedPointSelect@led stored from wreg
  6942  07CF  00F5               	movwf	LedPointSelect@led
  6943                           
  6944                           ;LED_B1.c: 9: if (led == 1) {
  6945  07D0  0875               	movf	LedPointSelect@led,w
  6946  07D1  3A01               	xorlw	1
  6947  07D2  1D03               	skipz
  6948  07D3  2FD9               	goto	l3295
  6949                           
  6950                           ;LED_B1.c: 10: LED = &VarLED1;
  6951  07D4  30CD               	movlw	_VarLED1& (0+255)
  6952  07D5  00F4               	movwf	??_LedPointSelect
  6953  07D6  0874               	movf	??_LedPointSelect,w
  6954  07D7  00F8               	movwf	_LED
  6955                           
  6956                           ;LED_B1.c: 11: }
  6957  07D8  0008               	return
  6958  07D9                     l3295:	
  6959                           
  6960                           ;LED_B1.c: 14: else if (led == 2) {
  6961  07D9  0875               	movf	LedPointSelect@led,w
  6962  07DA  3A02               	xorlw	2
  6963  07DB  1D03               	skipz
  6964  07DC  2FE2               	goto	l3299
  6965                           
  6966                           ;LED_B1.c: 15: LED = &VarLED2;
  6967  07DD  30D1               	movlw	_VarLED2& (0+255)
  6968  07DE  00F4               	movwf	??_LedPointSelect
  6969  07DF  0874               	movf	??_LedPointSelect,w
  6970  07E0  00F8               	movwf	_LED
  6971                           
  6972                           ;LED_B1.c: 16: }
  6973  07E1  0008               	return
  6974  07E2                     l3299:	
  6975                           
  6976                           ;LED_B1.c: 24: else if (led == 99) {
  6977  07E2  0875               	movf	LedPointSelect@led,w
  6978  07E3  3A63               	xorlw	99
  6979  07E4  1D03               	skipz
  6980  07E5  0008               	return
  6981                           
  6982                           ;LED_B1.c: 25: LED = &VarErrLED;
  6983  07E6  30C9               	movlw	_VarErrLED& (0+255)
  6984  07E7  00F4               	movwf	??_LedPointSelect
  6985  07E8  0874               	movf	??_LedPointSelect,w
  6986  07E9  00F8               	movwf	_LED
  6987  07EA  0008               	return
  6988  07EB                     __end_of_LedPointSelect:	
  6989                           
  6990                           	psect	text45
  6991  05B4                     __ptext45:	
  6992 ;; *************** function _CDS_Main *****************
  6993 ;; Defined at:
  6994 ;;		line 11 in file "../src/CDS_B1.c"
  6995 ;; Parameters:    Size  Location     Type
  6996 ;;		None
  6997 ;; Auto vars:     Size  Location     Type
  6998 ;;		None
  6999 ;; Return value:  Size  Location     Type
  7000 ;;		None               void
  7001 ;; Registers used:
  7002 ;;		wreg, status,2, status,0, pclath, cstack
  7003 ;; Tracked objects:
  7004 ;;		On entry : 0/0
  7005 ;;		On exit  : 0/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7008 ;;      Params:         0       0       0       0
  7009 ;;      Locals:         0       0       0       0
  7010 ;;      Temps:          0       3       0       0
  7011 ;;      Totals:         0       3       0       0
  7012 ;;Total ram usage:        3 bytes
  7013 ;; Hardware stack levels used:    1
  7014 ;; Hardware stack levels required when called:    3
  7015 ;; This function calls:
  7016 ;;		_getMain_AD_Safe
  7017 ;; This function is called by:
  7018 ;;		_main
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           
  7023                           ;psect for function _CDS_Main
  7024  05B4                     _CDS_Main:	
  7025                           
  7026                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
  7027                           
  7028                           ;incstack = 0
  7029                           ; Regs used in _CDS_Main: [wreg+status,2+status,0+pclath+cstack]
  7030  05B4  1283               	bcf	3,5	;RP0=0, select bank0
  7031  05B5  1303               	bcf	3,6	;RP1=0, select bank0
  7032  05B6  1C28               	btfss	__CDS,0
  7033  05B7  0008               	return
  7034                           
  7035                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
  7036  05B8  18A8               	btfsc	__CDS,1
  7037  05B9  2DD6               	goto	l89
  7038                           
  7039                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
  7040  05BA  19A8               	btfsc	__CDS,3
  7041  05BB  0008               	return
  7042                           
  7043                           ;CDS_B1.c: 16: _CDS.Time++;
  7044  05BC  3001               	movlw	1
  7045  05BD  00E0               	movwf	??_CDS_Main
  7046  05BE  0860               	movf	??_CDS_Main,w
  7047  05BF  07A9               	addwf	__CDS+1,f
  7048                           
  7049                           ;CDS_B1.c: 17: if (_CDS.Time >= 10)
  7050  05C0  300A               	movlw	10
  7051  05C1  0229               	subwf	__CDS+1,w
  7052  05C2  1C03               	skipc
  7053  05C3  0008               	return
  7054                           
  7055                           ;CDS_B1.c: 18: {
  7056                           ;CDS_B1.c: 19: if (getMain_AD_Safe() == 1) {
  7057  05C4  158A  26F6  118A   	fcall	_getMain_AD_Safe
  7058  05C7  3A01               	xorlw	1
  7059  05C8  1D03               	skipz
  7060  05C9  2DCF               	goto	l3621
  7061                           
  7062                           ;CDS_B1.c: 20: _CDS.Time = 0;
  7063  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  7064  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  7065  05CC  01A9               	clrf	__CDS+1
  7066                           
  7067                           ;CDS_B1.c: 21: _CDS.ADtoGO = 1;
  7068  05CD  15A8               	bsf	__CDS,3
  7069                           
  7070                           ;CDS_B1.c: 22: } else {
  7071  05CE  0008               	return
  7072  05CF                     l3621:	
  7073                           
  7074                           ;CDS_B1.c: 23: _CDS.Time = 10;
  7075  05CF  300A               	movlw	10
  7076  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  7077  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  7078  05D2  00E0               	movwf	??_CDS_Main
  7079  05D3  0860               	movf	??_CDS_Main,w
  7080  05D4  00A9               	movwf	__CDS+1
  7081                           
  7082                           ;CDS_B1.c: 24: }
  7083                           ;CDS_B1.c: 25: }
  7084                           ;CDS_B1.c: 26: }
  7085                           ;CDS_B1.c: 27: } else {
  7086  05D5  0008               	return
  7087  05D6                     l89:	
  7088                           
  7089                           ;CDS_B1.c: 28: if (_CDS.GO == 1) {
  7090  05D6  1CA8               	btfss	__CDS,1
  7091  05D7  0008               	return
  7092                           
  7093                           ;CDS_B1.c: 29: _CDS.GO = 0;
  7094  05D8  10A8               	bcf	__CDS,1
  7095                           
  7096                           ;CDS_B1.c: 30: if (_CDS.Status == 0) {
  7097  05D9  1A28               	btfsc	__CDS,4
  7098  05DA  2DE1               	goto	l3629
  7099                           
  7100                           ;CDS_B1.c: 31: if (_CDS.SignalAD >= _CDS.VRAD) {
  7101  05DB  082A               	movf	__CDS+2,w
  7102  05DC  022B               	subwf	__CDS+3,w
  7103  05DD  1C03               	skipc
  7104  05DE  0008               	return
  7105                           
  7106                           ;CDS_B1.c: 32: _CDS.Status = 1;
  7107  05DF  1628               	bsf	__CDS,4
  7108                           
  7109                           ;CDS_B1.c: 33: }
  7110                           ;CDS_B1.c: 34: } else {
  7111  05E0  0008               	return
  7112  05E1                     l3629:	
  7113                           
  7114                           ;CDS_B1.c: 35: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
  7115  05E1  082A               	movf	__CDS+2,w
  7116  05E2  3E9C               	addlw	156
  7117  05E3  00E0               	movwf	??_CDS_Main
  7118  05E4  30FF               	movlw	255
  7119  05E5  1803               	skipnc
  7120  05E6  3000               	movlw	0
  7121  05E7  00E1               	movwf	??_CDS_Main+1
  7122  05E8  0861               	movf	??_CDS_Main+1,w
  7123  05E9  3A80               	xorlw	128
  7124  05EA  00E2               	movwf	??_CDS_Main+2
  7125  05EB  3080               	movlw	128
  7126  05EC  0262               	subwf	??_CDS_Main+2,w
  7127  05ED  1D03               	skipz
  7128  05EE  2DF1               	goto	u3775
  7129  05EF  082B               	movf	__CDS+3,w
  7130  05F0  0260               	subwf	??_CDS_Main,w
  7131  05F1                     u3775:	
  7132  05F1  1C03               	skipc
  7133  05F2  0008               	return
  7134                           
  7135                           ;CDS_B1.c: 36: _CDS.Status = 0;
  7136  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  7137  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  7138  05F5  1228               	bcf	__CDS,4
  7139  05F6  0008               	return
  7140  05F7                     __end_of_CDS_Main:	
  7141                           
  7142                           	psect	text46
  7143  0EF6                     __ptext46:	
  7144 ;; *************** function _getMain_AD_Safe *****************
  7145 ;; Defined at:
  7146 ;;		line 294 in file "../src/Main_B1.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;		None
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;  result          1    4[COMMON] unsigned char 
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  1    wreg      unsigned char 
  7153 ;; Registers used:
  7154 ;;		wreg, status,2
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7160 ;;      Params:         0       0       0       0
  7161 ;;      Locals:         1       0       0       0
  7162 ;;      Temps:          0       0       0       0
  7163 ;;      Totals:         1       0       0       0
  7164 ;;Total ram usage:        1 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    2
  7167 ;; This function calls:
  7168 ;;		Nothing
  7169 ;; This function is called by:
  7170 ;;		_CDS_Main
  7171 ;;		_PIR_Main
  7172 ;; This function uses a non-reentrant model
  7173 ;;
  7174                           
  7175                           
  7176                           ;psect for function _getMain_AD_Safe
  7177  0EF6                     _getMain_AD_Safe:	
  7178                           
  7179                           ;Main_B1.c: 295: char result = 1;
  7180                           
  7181                           ;incstack = 0
  7182                           ; Regs used in _getMain_AD_Safe: [wreg+status,2]
  7183  0EF6  01F4               	clrf	getMain_AD_Safe@result
  7184  0EF7  0AF4               	incf	getMain_AD_Safe@result,f
  7185                           
  7186                           ;Main_B1.c: 301: if (result == 1) {
  7187  0EF8  0874               	movf	getMain_AD_Safe@result,w
  7188  0EF9  3A01               	xorlw	1
  7189  0EFA  1D03               	skipz
  7190  0EFB  2F02               	goto	l2465
  7191                           
  7192                           ;Main_B1.c: 302: result = Load.Safe == 1 ? 1 : 0;
  7193  0EFC  3000               	movlw	0
  7194  0EFD  1683               	bsf	3,5	;RP0=1, select bank1
  7195  0EFE  1303               	bcf	3,6	;RP1=0, select bank1
  7196  0EFF  19A0               	btfsc	_Load^(0+128),3
  7197  0F00  3001               	movlw	1
  7198  0F01  00F4               	movwf	getMain_AD_Safe@result
  7199  0F02                     l2465:	
  7200                           
  7201                           ;Main_B1.c: 303: }
  7202                           ;Main_B1.c: 305: return result;
  7203  0F02  0874               	movf	getMain_AD_Safe@result,w
  7204  0F03  0008               	return
  7205  0F04                     __end_of_getMain_AD_Safe:	
  7206                           
  7207                           	psect	text47
  7208  0E8B                     __ptext47:	
  7209 ;; *************** function _CDS_Initialization *****************
  7210 ;; Defined at:
  7211 ;;		line 7 in file "../src/CDS_B1.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;		None
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;		None
  7216 ;; Return value:  Size  Location     Type
  7217 ;;		None               void
  7218 ;; Registers used:
  7219 ;;		None
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7225 ;;      Params:         0       0       0       0
  7226 ;;      Locals:         0       0       0       0
  7227 ;;      Temps:          0       0       0       0
  7228 ;;      Totals:         0       0       0       0
  7229 ;;Total ram usage:        0 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:    2
  7232 ;; This function calls:
  7233 ;;		Nothing
  7234 ;; This function is called by:
  7235 ;;		_main
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           
  7240                           ;psect for function _CDS_Initialization
  7241  0E8B                     _CDS_Initialization:	
  7242                           
  7243                           ;CDS_B1.c: 8: _CDS.Enable = 1;
  7244                           
  7245                           ;incstack = 0
  7246                           ; Regs used in _CDS_Initialization: []
  7247  0E8B  1283               	bcf	3,5	;RP0=0, select bank0
  7248  0E8C  1303               	bcf	3,6	;RP1=0, select bank0
  7249  0E8D  1428               	bsf	__CDS,0
  7250  0E8E  0008               	return
  7251  0E8F                     __end_of_CDS_Initialization:	
  7252                           
  7253                           	psect	text48
  7254  0F3E                     __ptext48:	
  7255 ;; *************** function _ISR *****************
  7256 ;; Defined at:
  7257 ;;		line 107 in file "../src/MCU_B1.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;		None
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;		None
  7262 ;; Return value:  Size  Location     Type
  7263 ;;		None               void
  7264 ;; Registers used:
  7265 ;;		wreg, status,2, status,0, pclath, cstack
  7266 ;; Tracked objects:
  7267 ;;		On entry : 0/0
  7268 ;;		On exit  : 0/0
  7269 ;;		Unchanged: 0/0
  7270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7271 ;;      Params:         0       0       0       0
  7272 ;;      Locals:         0       0       0       0
  7273 ;;      Temps:          4       0       0       0
  7274 ;;      Totals:         4       0       0       0
  7275 ;;Total ram usage:        4 bytes
  7276 ;; Hardware stack levels used:    1
  7277 ;; Hardware stack levels required when called:    1
  7278 ;; This function calls:
  7279 ;;		_TMR1_ISR
  7280 ;; This function is called by:
  7281 ;;		Interrupt level 1
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           
  7286                           ;psect for function _ISR
  7287  0F3E                     _ISR:	
  7288                           
  7289                           ;MCU_B1.c: 109: ;;
  7290                           ;MCU_B1.c: 111: ;;
  7291                           ;MCU_B1.c: 113: TMR1_ISR();
  7292  0F3E  158A  27E4  158A   	fcall	_TMR1_ISR
  7293  0F41  0873               	movf	??_ISR+3,w
  7294  0F42  1283               	bcf	3,5	;RP0=0, select bank0
  7295  0F43  1303               	bcf	3,6	;RP1=0, select bank0
  7296  0F44  00FF               	movwf	127
  7297  0F45  0872               	movf	??_ISR+2,w
  7298  0F46  008A               	movwf	10
  7299  0F47  0871               	movf	??_ISR+1,w
  7300  0F48  0084               	movwf	4
  7301  0F49  0E70               	swapf	??_ISR^(0+-128),w
  7302  0F4A  0083               	movwf	3
  7303  0F4B  0EFE               	swapf	126,f
  7304  0F4C  0E7E               	swapf	126,w
  7305  0F4D  0009               	retfie
  7306  0F4E                     __end_of_ISR:	
  7307                           
  7308                           	psect	intentry
  7309  0004                     __pintentry:	
  7310                           ;incstack = 0
  7311                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  7312                           
  7313  0004                     interrupt_function:	
  7314  007E                     saved_w	set	btemp
  7315  0004  00FE               	movwf	btemp
  7316  0005  0E03               	swapf	3,w
  7317  0006  00F0               	movwf	??_ISR
  7318  0007  0804               	movf	4,w
  7319  0008  00F1               	movwf	??_ISR+1
  7320  0009  080A               	movf	10,w
  7321  000A  00F2               	movwf	??_ISR+2
  7322  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7323  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7324  000D  087F               	movf	btemp+1,w
  7325  000E  00F3               	movwf	??_ISR+3
  7326  000F  158A  2F3E         	ljmp	_ISR
  7327                           
  7328                           	psect	text49
  7329  0FE4                     __ptext49:	
  7330 ;; *************** function _TMR1_ISR *****************
  7331 ;; Defined at:
  7332 ;;		line 209 in file "../src/MCU_B1.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;		None
  7337 ;; Return value:  Size  Location     Type
  7338 ;;		None               void
  7339 ;; Registers used:
  7340 ;;		wreg, status,2
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7346 ;;      Params:         0       0       0       0
  7347 ;;      Locals:         0       0       0       0
  7348 ;;      Temps:          0       0       0       0
  7349 ;;      Totals:         0       0       0       0
  7350 ;;Total ram usage:        0 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; This function calls:
  7353 ;;		Nothing
  7354 ;; This function is called by:
  7355 ;;		_ISR
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           
  7360                           ;psect for function _TMR1_ISR
  7361  0FE4                     _TMR1_ISR:	
  7362                           
  7363                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
  7364                           
  7365                           ;incstack = 0
  7366                           ; Regs used in _TMR1_ISR: [wreg+status,2]
  7367  0FE4  1683               	bsf	3,5	;RP0=1, select bank1
  7368  0FE5  1303               	bcf	3,6	;RP1=0, select bank1
  7369  0FE6  1C0C               	btfss	12,0	;volatile
  7370  0FE7  0008               	return
  7371  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  7372  0FE9  1303               	bcf	3,6	;RP1=0, select bank0
  7373  0FEA  1C0C               	btfss	12,0	;volatile
  7374  0FEB  0008               	return
  7375                           
  7376                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
  7377  0FEC  30FA               	movlw	250
  7378  0FED  008F               	movwf	15	;volatile
  7379                           
  7380                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
  7381  0FEE  3038               	movlw	56
  7382  0FEF  008E               	movwf	14	;volatile
  7383                           
  7384                           ;MCU_B1.c: 214: TMR1IF = 0;
  7385  0FF0  100C               	bcf	12,0	;volatile
  7386                           
  7387                           ;MCU_B1.c: 234: Timer1.Count++;
  7388  0FF1  3001               	movlw	1
  7389  0FF2  07AE               	addwf	_Timer1+1,f
  7390  0FF3  1803               	skipnc
  7391  0FF4  0AAF               	incf	_Timer1+2,f
  7392  0FF5  3000               	movlw	0
  7393  0FF6  07AF               	addwf	_Timer1+2,f
  7394                           
  7395                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
  7396  0FF7  3064               	movlw	100
  7397  0FF8  062E               	xorwf	_Timer1+1,w
  7398  0FF9  042F               	iorwf	_Timer1+2,w
  7399  0FFA  1D03               	skipz
  7400  0FFB  0008               	return
  7401                           
  7402                           ;MCU_B1.c: 236: {
  7403                           ;MCU_B1.c: 237: Timer1.Count = 0;
  7404  0FFC  01AE               	clrf	_Timer1+1
  7405  0FFD  01AF               	clrf	_Timer1+2
  7406                           
  7407                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
  7408  0FFE  142D               	bsf	_Timer1,0
  7409  0FFF  0008               	return
  7410  1000                     __end_of_TMR1_ISR:	
  7411  007E                     btemp	set	126	;btemp
  7412  007E                     wtemp	set	126
  7413  007E                     wtemp0	set	126
  7414  0080                     wtemp1	set	128
  7415  0082                     wtemp2	set	130
  7416  0084                     wtemp3	set	132
  7417  0086                     wtemp4	set	134
  7418  0088                     wtemp5	set	136
  7419  007F                     wtemp6	set	127
  7420  007E                     ttemp	set	126
  7421  007E                     ttemp0	set	126
  7422  0081                     ttemp1	set	129
  7423  0084                     ttemp2	set	132
  7424  0087                     ttemp3	set	135
  7425  007F                     ttemp4	set	127
  7426  007E                     ltemp	set	126
  7427  007E                     ltemp0	set	126
  7428  0082                     ltemp1	set	130
  7429  0086                     ltemp2	set	134
  7430  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         121
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     16      80
    BANK1            80      4      57
    BANK2            16      0       0

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 7
		 -> NULL(NULL[0]), Lights1(BANK1[7]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 


Critical Paths under _main in COMMON

    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setLights_Trigger->_LightsPointSelect
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_AH_AL_Restore
    _getLights_Status->_LightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights->_LightsPointSelect
    _Lights_Control->_LightsPointSelect
    _getMain_LightsStatus->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_LedPointSelect
    _setLED->_LedPointSelect
    _CDS_Main->_getMain_AD_Safe

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_getPIR_AD
    _getPIR_AD->___awdiv
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->_getLoad_Status
    _Load_Main->_getMain_LightsStatus
    _getLoad_Status->_getLights_Status
    _Lights_Main->_Lights_Close
    _setLights_Main->_setLights
    _Lights_Close->_getMain_LightsStatus
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setLED_Main
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   12419
                                             15 BANK0      1     1      0
                                              0 BANK1      4     0      4
                 _CDS_Initialization
                           _CDS_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            7     6      1    2169
                                              8 BANK0      7     6      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     657
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     653
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           5     5      0     820
                                              0 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     661
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     489
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                             5     5      0    2658
                                              4 BANK0      5     5      0
                      _getCDS_Status
                   _getLights_Status
                    _getMain_AD_Safe
           _getMain_All_Error_Status
                             _setLED
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (2) _setLights_Trigger                                    3     2      1     405
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    2703
                                              5 BANK0      5     5      0
                     _getLoad_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                             _setLED
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 5     5      0     111
                                              4 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _getMain_All_Error_Status                             5     5      0     105
                                              4 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _getLoad_Status                                       3     3      0     170
                                              2 BANK0      3     3      0
                   _getLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLights_Status                                     2     2      0      96
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0     855
                       _Lights_Close
                     _Lights_Control
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       2     2      0     521
                                              3 BANK0      2     2      0
                  _LightsPointSelect
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1     363
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0     124
                                              0 BANK0      3     3      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Lights_Close                                         2     2      0     210
                                              5 BANK0      2     2      0
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 5     5      0     204
                                              0 BANK0      5     5      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      62
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      62
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _LightsPointSelect                                    2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              0 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    2138
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    2138
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _setLED                                               2     1      1    1983
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (3) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0      46
                                              0 BANK0      3     3      0
                    _getMain_AD_Safe
 ---------------------------------------------------------------------------------
 (2) _getMain_AD_Safe                                      1     1      0      46
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CDS_Initialization
   _CDS_Main
     _getMain_AD_Safe
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Close
       _getMain_LightsStatus
         _LightsPointSelect
     _Lights_Control
       _LightsPointSelect
     _setLights_Main
       _LightsPointSelect
       _setLights
         _LightsPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     _getLoad_Status
       _getLights_Status
         _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _LightsPointSelect
     _getMain_Lights_Count
     _setLED
       _LedPointSelect
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_AD_Safe
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
     _setLights_Trigger
       _LightsPointSelect
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      93       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      4      39       7       71.3%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       0       9        0.0%
DATA                 0      0      93      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Nov 03 17:23:44 2014

                     _WDT_Clearing 0002          getMain_Lights_Count@count 0060  
                               l89 05D6                       ___awdiv@sign 0065  
                               fsr 0004                                l563 02FF  
                              l572 026F                                l494 07CD  
                              l568 02CE                                l569 02CC  
                              l498 07C9                                l694 0067  
                              l696 0096                                l689 0046  
                              _GIE 005F                                _RB2 0032  
                              _RA4 002C                                _LED 0078  
                              _RB3 0033                                _RB4 0034  
                              _RB5 0035                                _PS0 0408  
                              _PS1 0409                                _PS2 040A  
                              _ISR 0F3E                                _PSA 040B  
                              _WDT 0076                                fsr0 0004  
                              indf 0000                    __end_of_ADC_Set 0EAB  
        __end_of_LightsPointSelect 0EEA                   _getLights_Status 0F6E  
          __size_of_Lights_Control 0059                               ?_ISR 0070  
                       Load_Main@i 0067                     _Load_Main$2283 0068  
                             l4005 0160                               l4007 016F  
                             l3401 0671                               l4017 0189  
                             l3315 04C0                               l3323 04CC  
                             l3333 04DC                               l4061 0595  
                             l4053 0579                               l3351 04FB  
                             l3319 04C6                               l2465 0F02  
                             l3329 04D6                               l3337 04E2  
                             l3425 06A6                               l3441 07C4  
                             l2481 07A7                               l3601 0630  
                             l3347 04F5                               l3355 0501  
                             l3371 0727                               l3515 0544  
                             l3621 05CF                               l3429 06AD  
                             l3373 074C                               l2485 07AD  
                             l3701 0346                               l3295 07D9  
                             l2479 07A4                               l3543 045D  
                             l3711 0358                               l3369 0745  
                             l3561 047E                               l3713 035C  
                             l3705 034C                               l3299 07E2  
                             l3571 049F                               l3707 0350  
                             l3629 05E1                               l3397 065C  
                             l3493 06DF                               l3821 0268  
                             l3549 0468                               l3733 0393  
                             l3709 0354                               l3717 0361  
                             l3815 025C                               l3663 0410  
                             l3575 04A7                               l3567 0494  
                             l3559 0470                               l3591 060F  
                             l3743 03B1                               l3727 037F  
                             l3719 0372                               l3833 028B  
                             l3673 042F                               l3923 0078  
                             l3763 03ED                               l3853 02C7  
                             l3685 044B                               l3669 0426  
                             l3597 0625                               l3589 0601  
                             l3757 03E3                               l3749 03C5  
                             l3839 02A7                               l3935 008F  
                             l3777 01DF                               l3875 02E1  
                             l3779 01EB                               l3971 00C7  
                             l3975 00CF                               l3959 00B4  
                             l3977 00D0                               l3987 010A  
                             l3999 0135              _myMain_Initialization 0E8A  
                     __CFG_WDTE$ON 0000                               u4005 0239  
                             u1725 0F9F                               u3275 0730  
                             u4405 0152                               u3470 0540  
                             u4425 017F                               u3555 0473  
                             u3635 0604                               _PEIE 005E  
                             u4365 00E8                               u4455 01A2  
                             u4375 0102                               u3575 047F  
                             u3655 0610                               u4385 011F  
                             u3585 048B                               u3665 061C  
                             u3595 0495                               u3675 0626  
                             u3775 05F1                               __CDS 0028  
                             __PIR 0031                               _Load 00A0  
                             _main 0563                               btemp 007E  
                  __end_of_WDT_Set 0EF6                               ltemp 007E  
                             start 0011                               ttemp 007E  
                             wtemp 007E                   __end_of_CDS_Main 05F7  
                            ??_ISR 0070                  _setLights_Trigger 077A  
                    ??_Lights_Main 0076                      __CFG_PLLEN$ON 0000  
                 __end_of_LED_Main 0EDE                 ?_setLights_Trigger 0060  
                            ?_main 00D5                    __end_of___awdiv 04AE  
                            _ADRES 001E                    ___awdiv@divisor 0060  
                            _T1CON 0010                    __end_of___lwdiv 0637  
                    ?_Lights_Close 0070                    ___awdiv@counter 0064  
                            _TMR1H 000F                              _TMR1L 000E  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                       ?_setLED_Main 0070  
                            _TRISA 0085                              _TRISB 0086  
                            _TRISC 0087            __end_of_Timeout_Counter 0FA5  
                 ?_getMain_AD_Safe 0070                ??_setLights_Trigger 0061  
                 __end_of_PIR_Main 01B5                   __end_of_TMR1_ISR 1000  
                 __end_of_TMR1_Set 0F20                              _getAD 0797  
                 __end_of_WDT_Main 0F3E                      _LightsControl 0079  
                   __CFG_BOREN$OFF 0000       __end_of_getMain_Lights_Count 0FCE  
                            pclath 000A                              ltemp0 007E  
                            ltemp1 0082                              ltemp2 0086  
                            ltemp3 0080     __size_of_setLED_Initialization 0012  
     __end_of_getMain_LightsStatus 0750      __end_of_setLED_Initialization 0F91  
               Lights_Close@status 0066                              ttemp0 007E  
                            ttemp1 0081                              ttemp2 0084  
                            ttemp3 0087                              ttemp4 007F  
                            status 0003                              wtemp0 007E  
                            wtemp1 0080                              wtemp2 0082  
                            wtemp3 0084                              wtemp4 0086  
                            wtemp5 0088                              wtemp6 007F  
                getPIR_AD@channel1 006D                  getPIR_AD@channel2 0068  
           ?_setLoad_AH_AL_Restore 0070                     _setLights_Main 06B4  
                  __initialization 0013          __end_of_setLights_Trigger 0797  
                     __end_of_main 05B4                   __end_of_Fosc_Set 0E98  
                        ??_ADC_Set 0074                             ??_main 006F  
                   ??_Lights_Close 0065                __end_of_Lights_Main 0EC6  
       __size_of_LightsPointSelect 000C                             ?_getAD 0074  
           ?_myMain_Initialization 0070                             _ADCON0 001F  
                           _ADCON1 009F                   ___awdiv@dividend 0062  
                        ??_WDT_Set 0074                             _ANSELA 0185  
                           _ANSELB 0186           _getMain_All_Error_Status 07B3  
                           _FVRCON 009D             getLights_Status@lights 0060  
                           _OSCCON 0090                 __size_of_Load_Main 0152  
                           _TMR1IE 0460                             _TMR1IF 0060  
                           _IO_Set 07EB             getLights_Status@result 0061  
           __end_of_setLights_Main 06ED         __end_of_Mcu_Initialization 0F2F  
                           _Lights 0030                             _Timer1 002D  
      __size_of_CDS_Initialization 0004            ??_Lights_Initialization 0076  
                        ??___awdiv 0074                          ??___lwdiv 0074  
                           _setLED 04AE                             _myMain 0020  
                 ___awdiv@quotient 0066        __end_of_Load_Initialization 0E9E  
                           saved_w 007E                   ?_Timeout_Counter 0070  
      getMain_Lights_Count@status1 0063        getMain_Lights_Count@status2 0061  
      getMain_Lights_Count@status3 0062                     _Lights_Control 050A  
          __size_of_LedPointSelect 001C                          ?_CDS_Main 0070  
      __size_of_PIR_Initialization 0010         getMain_LightsStatus@status 0064  
          __end_of__initialization 0023                          ?_LED_Main 0070  
                    ?_my_MainTimer 0070                    ?_setLights_Main 0070  
       __size_of_setLights_Trigger 001D                     __pcstackCOMMON 0070  
               __size_of_getCDS_AD 002A           __end_of_getLights_Status 0F7F  
                    __end_of_getAD 07B3                          ?_PIR_Main 0070  
                        ?_TMR1_ISR 0070                          ?_TMR1_Set 0070  
           setLoad_AH_AL_Restore@i 0075                 _LED_Initialization 0EC6  
               __size_of_getPIR_AD 00E8                        _Lights_Main 0EBB  
         _setLights_Initialization 0F4E               _getMain_Lights_Count 0FB9  
                        ?_WDT_Main 0070                  __end_of_Load_Main 0307  
             _getMain_LightsStatus 071F         __end_of_set_TimeoutCleared 0EA4  
              ?_LED_Initialization 0070             __end_of_Lights_Control 0563  
            getMain_LightsStatus@i 0062            __size_of_getLoad_Status 0032  
             __size_of_setLED_Main 003D                            ??_getAD 0075  
                       ??_CDS_Main 0060                         __pbssBANK0 0020  
                       __pbssBANK1 00A0                          ?_Fosc_Set 0070  
                          ?_IO_Set 0070                    __CFG_VCAPEN$DIS 0000  
                   ??_my_MainTimer 0074                         ??_LED_Main 0076  
             __end_of_Lights_Close 0F12          getMain_LightsStatus@count 0061  
             ??_LED_Initialization 0076                  LedPointSelect@led 0075  
                       __pmaintext 0563                         ??_PIR_Main 0064  
                       ??_TMR1_ISR 0070                 __size_of_setLights 0040  
                       _getLoad_AD 03EF                         ??_TMR1_Set 0074  
                       __pintentry 0004                            ?_setLED 0060  
          setLights_Trigger@lights 0062              ?_getMain_Lights_Count 0070  
                          _ADC_Set 0EA4                         ??_WDT_Main 0074  
            ?_getMain_LightsStatus 0070             __size_of_getCDS_Status 0008  
                  ?_Lights_Control 0070                  __end_of_getCDS_AD 077A  
                          _WDT_Set 0EEA                         ??_Fosc_Set 0074  
                __end_of_getPIR_AD 03EF            ??_setLoad_AH_AL_Restore 0074  
                  __size_of_IO_Set 0015                         getCDS_AD@i 0063  
                       getCDS_AD@j 0064                            _Lights1 00C2  
                          _VarLED1 00CD                            _VarLED2 00D1  
                          ___awdiv 0451                            ___lwdiv 05F7  
                  __size_of_setLED 005C                            __ptext0 0000  
                          __ptext1 0FA5                            __ptext2 0E8A  
                          __ptext3 0307                            __ptext4 05F7  
                          __ptext5 0451                            __ptext6 03EF  
                          __ptext7 0750                            __ptext8 0797  
                          __ptext9 0E9E                         getPIR_AD@i 006E  
                       getPIR_AD@j 006C                       __size_of_ISR 0010  
       ??_getMain_All_Error_Status 0074            ??_myMain_Initialization 0074  
                   _LedPointSelect 07CF                            clrloop0 0EB4  
                __end_of_setLights 0677               end_of_initialization 0023  
            getMain_AD_Safe@result 0074           __size_of_getMain_AD_Safe 000E  
                    _getCDS_Status 0EAB              _setLED_Initialization 0F7F  
                      ?_getLoad_AD 0070     __size_of_Lights_Initialization 0004  
           ??_getMain_Lights_Count 0074      __end_of_Lights_Initialization 0E93  
           ??_getMain_LightsStatus 0060           setLED_Initialization@led 0062  
               _Mcu_Initialization 0F20               __end_of_my_MainTimer 0FB9  
                   _getLoad_Status 06ED             __end_of_LedPointSelect 07EB  
              ?_Mcu_Initialization 0070              __size_of_Lights_Close 000E  
                 ??_setLights_Main 0076               setLights_Main@lights 0064  
  getMain_All_Error_Status@command 0060                  __size_of_CDS_Main 0043  
                   ?_getCDS_Status 0070                     __end_of_IO_Set 0800  
       __end_of_CDS_Initialization 0E8F         ??_setLights_Initialization 0076  
                __size_of_LED_Main 000C               ??_Mcu_Initialization 0075  
                    ?_WDT_Clearing 0070                  ?_getLights_Status 0070  
                     ?_Lights_Main 0070                  __size_of_PIR_Main 018F  
                __size_of_TMR1_ISR 001C                 ??_getLights_Status 0076  
                __size_of_TMR1_Set 000E                     __end_of_setLED 050A  
           __end_of_getLoad_Status 071F                       _Lights_Close 0F04  
                __size_of_WDT_Main 000F                start_initialization 0013  
                  ?_LedPointSelect 0070                          _Load_Main 01B5  
                      __end_of_ISR 0F4E         __end_of_PIR_Initialization 0F6E  
     __size_of_Load_Initialization 0006                getCDS_Status@result 0074  
              __size_of_getLoad_AD 0062                 _set_TimeoutCleared 0E9E  
                         ??_IO_Set 0074           __size_of_Timeout_Counter 0014  
                        _VarErrLED 00C9             ?_setLED_Initialization 0070  
                __size_of_Fosc_Set 0005                    setLights@lights 0062  
              ?_set_TimeoutCleared 0070                     ??_WDT_Clearing 0074  
                ??_getMain_AD_Safe 0074                    setLights@status 0060  
                         ??_setLED 0076                           ?_ADC_Set 0070  
                 ??_Lights_Control 0060   __end_of_getMain_All_Error_Status 07CF  
                  ?_getLoad_Status 0070                      ??_setLED_Main 0060  
                      __pbssCOMMON 0076                          ___latbits 0001  
                       ?_Load_Main 0070                      __pcstackBANK0 0060  
                    __pcstackBANK1 00D5               ??_set_TimeoutCleared 0074  
                         ?_WDT_Set 0070                    ??_getCDS_Status 0074  
                        _getCDS_AD 0750     __size_of_setLoad_AH_AL_Restore 0016  
    __end_of_setLoad_AH_AL_Restore 0FE4                          _getPIR_AD 0307  
      __size_of_LED_Initialization 000C                   ___lwdiv@dividend 0062  
                         ?___awdiv 0060              __size_of_my_MainTimer 0014  
                         ?___lwdiv 0060           setLights_Trigger@command 0060  
   __size_of_myMain_Initialization 0001      __end_of_myMain_Initialization 0E8B  
                   __size_of_getAD 001C                   ___lwdiv@quotient 0065  
                         _CDS_Main 05B4                __end_of_setLED_Main 06B4  
                interrupt_function 0004                         ?_getCDS_AD 0060  
                         _LED_Main 0ED2                          _setLights 0637  
                        clear_ram0 0EB3   __end_of_setLights_Initialization 0F5E  
                     _my_MainTimer 0FA5                         ?_getPIR_AD 0068  
                         _GO_nDONE 00F9                  ??_Timeout_Counter 0074  
                         _PIR_Main 0026                       ??_getLoad_AD 0060  
                         _TMR1_ISR 0FE4                           _TMR1_Set 0F12  
                         _WDT_Main 0F2F                setLights_Main@clear 0063  
                 __size_of_ADC_Set 0007               __size_of_Lights_Main 000B  
                      ??_Load_Main 0065     getMain_All_Error_Status@status 0063  
                      getAD@adcon0 0075                        getAD@adcon1 0074  
                   setLED_Main@led 0062               __end_of_WDT_Clearing 0004  
                         _Fosc_Set 0E93                   __size_of_WDT_Set 000C  
               __end_of_getLoad_AD 0451  __size_of_getMain_All_Error_Status 001C  
        ?_getMain_All_Error_Status 0070                         ?_setLights 0060  
                getLoad_AD@channel 0062      _getMain_All_Error_Status$2042 0061  
              _Load_Initialization 0E98                          setLED@led 0061  
                 __size_of___awdiv 005D                   __size_of___lwdiv 0040  
                 ??_LedPointSelect 0074      __size_of_getMain_Lights_Count 0015  
               _CDS_Initialization 0E8B              _Lights_Initialization 0E8F  
    __size_of_getMain_LightsStatus 0031                        _setLED_Main 0677  
                  ___lwdiv@divisor 0060               ?_Load_Initialization 0070  
              ?_CDS_Initialization 0070                    ___lwdiv@counter 0064  
                         __ptext10 0F91                           __ptext11 0F2F  
                         __ptext20 07EB                           __ptext12 0002  
                         __ptext21 0E93                           __ptext13 0026  
                         __ptext30 0EBB                           __ptext22 0EA4  
                         __ptext14 077A                           __ptext31 06B4  
                         __ptext23 01B5                           __ptext15 0EAB  
                         __ptext40 0677                           __ptext32 0637  
                         __ptext24 0FB9                           __ptext16 0F5E  
                         __ptext41 0EC6                           __ptext33 050A  
                         __ptext25 07B3                           __ptext17 0F20  
                         __ptext42 0F7F                           __ptext34 0F04  
                         __ptext26 06ED                           __ptext18 0EEA  
                         __ptext43 04AE                           __ptext35 071F  
                         __ptext27 0F6E                           __ptext19 0F12  
                         __ptext44 07CF                           __ptext36 0E8F  
                         __ptext28 0E98                           __ptext45 05B4  
                         __ptext37 0F4E                           __ptext29 0FCE  
                         __ptext46 0EF6                           __ptext38 0EDE  
                         __ptext47 0E8B                           __ptext39 0ED2  
                         __ptext48 0F3E                           __ptext49 0FE4  
        __size_of_getLights_Status 0011            ??_setLED_Initialization 0076  
                  _getMain_AD_Safe 0EF6                        ??_getCDS_AD 0061  
                    setLED@command 0060                      __size_of_main 0051  
                      ??_getPIR_AD 0069                 _PIR_Initialization 0F5E  
             ??_CDS_Initialization 0074        __size_of_Mcu_Initialization 000F  
                 ??_getLoad_Status 0062                ?_PIR_Initialization 0070  
                         main@argc 00D5                           main@argv 00D7  
__size_of_setLights_Initialization 0010          ?_setLights_Initialization 0070  
            ??_Load_Initialization 0076               Lights_Control@lights 0062  
             ??_PIR_Initialization 0074                           intlevel1 0000  
                      ??_setLights 0061            LightsPointSelect@lights 0075  
                      getLoad_AD@i 0064                        getLoad_AD@j 0063  
          __size_of_setLights_Main 0039               getLoad_Status@result 0063  
             getLoad_Status@status 0064             ?_Lights_Initialization 0070  
            __size_of_WDT_Clearing 0002     setLights_Initialization@lights 0060  
          __end_of_getMain_AD_Safe 0F04        __size_of_set_TimeoutCleared 0006  
                _LightsPointSelect 0EDE                 __CFG_FOSC$INTOSCIO 0000  
               ?_LightsPointSelect 0070                    _Timeout_Counter 0F91  
       __end_of_LED_Initialization 0ED2              __end_of_getCDS_Status 0EB3  
                getCDS_AD@channel1 0065                  getCDS_AD@channel2 0060  
              ??_LightsPointSelect 0074              _setLoad_AH_AL_Restore 0FCE  
